// @bun
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};
var __esm = (fn, res) => () => (fn && (res = fn(fn = 0)), res);

// node_modules/delayed-stream/lib/delayed_stream.js
var require_delayed_stream = __commonJS((exports, module) => {
  var DelayedStream = function() {
    this.source = null;
    this.dataSize = 0;
    this.maxDataSize = 1024 * 1024;
    this.pauseStream = true;
    this._maxDataSizeExceeded = false;
    this._released = false;
    this._bufferedEvents = [];
  };
  var Stream = import.meta.require("stream").Stream;
  var util = import.meta.require("util");
  module.exports = DelayedStream;
  util.inherits(DelayedStream, Stream);
  DelayedStream.create = function(source, options) {
    var delayedStream = new this;
    options = options || {};
    for (var option in options) {
      delayedStream[option] = options[option];
    }
    delayedStream.source = source;
    var realEmit = source.emit;
    source.emit = function() {
      delayedStream._handleEmit(arguments);
      return realEmit.apply(source, arguments);
    };
    source.on("error", function() {
    });
    if (delayedStream.pauseStream) {
      source.pause();
    }
    return delayedStream;
  };
  Object.defineProperty(DelayedStream.prototype, "readable", {
    configurable: true,
    enumerable: true,
    get: function() {
      return this.source.readable;
    }
  });
  DelayedStream.prototype.setEncoding = function() {
    return this.source.setEncoding.apply(this.source, arguments);
  };
  DelayedStream.prototype.resume = function() {
    if (!this._released) {
      this.release();
    }
    this.source.resume();
  };
  DelayedStream.prototype.pause = function() {
    this.source.pause();
  };
  DelayedStream.prototype.release = function() {
    this._released = true;
    this._bufferedEvents.forEach(function(args) {
      this.emit.apply(this, args);
    }.bind(this));
    this._bufferedEvents = [];
  };
  DelayedStream.prototype.pipe = function() {
    var r = Stream.prototype.pipe.apply(this, arguments);
    this.resume();
    return r;
  };
  DelayedStream.prototype._handleEmit = function(args) {
    if (this._released) {
      this.emit.apply(this, args);
      return;
    }
    if (args[0] === "data") {
      this.dataSize += args[1].length;
      this._checkIfMaxDataSizeExceeded();
    }
    this._bufferedEvents.push(args);
  };
  DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {
    if (this._maxDataSizeExceeded) {
      return;
    }
    if (this.dataSize <= this.maxDataSize) {
      return;
    }
    this._maxDataSizeExceeded = true;
    var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
    this.emit("error", new Error(message));
  };
});

// node_modules/combined-stream/lib/combined_stream.js
var require_combined_stream = __commonJS((exports, module) => {
  var CombinedStream = function() {
    this.writable = false;
    this.readable = true;
    this.dataSize = 0;
    this.maxDataSize = 2 * 1024 * 1024;
    this.pauseStreams = true;
    this._released = false;
    this._streams = [];
    this._currentStream = null;
    this._insideLoop = false;
    this._pendingNext = false;
  };
  var util = import.meta.require("util");
  var Stream = import.meta.require("stream").Stream;
  var DelayedStream = require_delayed_stream();
  module.exports = CombinedStream;
  util.inherits(CombinedStream, Stream);
  CombinedStream.create = function(options) {
    var combinedStream = new this;
    options = options || {};
    for (var option in options) {
      combinedStream[option] = options[option];
    }
    return combinedStream;
  };
  CombinedStream.isStreamLike = function(stream) {
    return typeof stream !== "function" && typeof stream !== "string" && typeof stream !== "boolean" && typeof stream !== "number" && !Buffer.isBuffer(stream);
  };
  CombinedStream.prototype.append = function(stream) {
    var isStreamLike = CombinedStream.isStreamLike(stream);
    if (isStreamLike) {
      if (!(stream instanceof DelayedStream)) {
        var newStream = DelayedStream.create(stream, {
          maxDataSize: Infinity,
          pauseStream: this.pauseStreams
        });
        stream.on("data", this._checkDataSize.bind(this));
        stream = newStream;
      }
      this._handleErrors(stream);
      if (this.pauseStreams) {
        stream.pause();
      }
    }
    this._streams.push(stream);
    return this;
  };
  CombinedStream.prototype.pipe = function(dest, options) {
    Stream.prototype.pipe.call(this, dest, options);
    this.resume();
    return dest;
  };
  CombinedStream.prototype._getNext = function() {
    this._currentStream = null;
    if (this._insideLoop) {
      this._pendingNext = true;
      return;
    }
    this._insideLoop = true;
    try {
      do {
        this._pendingNext = false;
        this._realGetNext();
      } while (this._pendingNext);
    } finally {
      this._insideLoop = false;
    }
  };
  CombinedStream.prototype._realGetNext = function() {
    var stream = this._streams.shift();
    if (typeof stream == "undefined") {
      this.end();
      return;
    }
    if (typeof stream !== "function") {
      this._pipeNext(stream);
      return;
    }
    var getStream = stream;
    getStream(function(stream2) {
      var isStreamLike = CombinedStream.isStreamLike(stream2);
      if (isStreamLike) {
        stream2.on("data", this._checkDataSize.bind(this));
        this._handleErrors(stream2);
      }
      this._pipeNext(stream2);
    }.bind(this));
  };
  CombinedStream.prototype._pipeNext = function(stream) {
    this._currentStream = stream;
    var isStreamLike = CombinedStream.isStreamLike(stream);
    if (isStreamLike) {
      stream.on("end", this._getNext.bind(this));
      stream.pipe(this, { end: false });
      return;
    }
    var value = stream;
    this.write(value);
    this._getNext();
  };
  CombinedStream.prototype._handleErrors = function(stream) {
    var self2 = this;
    stream.on("error", function(err) {
      self2._emitError(err);
    });
  };
  CombinedStream.prototype.write = function(data) {
    this.emit("data", data);
  };
  CombinedStream.prototype.pause = function() {
    if (!this.pauseStreams) {
      return;
    }
    if (this.pauseStreams && this._currentStream && typeof this._currentStream.pause == "function")
      this._currentStream.pause();
    this.emit("pause");
  };
  CombinedStream.prototype.resume = function() {
    if (!this._released) {
      this._released = true;
      this.writable = true;
      this._getNext();
    }
    if (this.pauseStreams && this._currentStream && typeof this._currentStream.resume == "function")
      this._currentStream.resume();
    this.emit("resume");
  };
  CombinedStream.prototype.end = function() {
    this._reset();
    this.emit("end");
  };
  CombinedStream.prototype.destroy = function() {
    this._reset();
    this.emit("close");
  };
  CombinedStream.prototype._reset = function() {
    this.writable = false;
    this._streams = [];
    this._currentStream = null;
  };
  CombinedStream.prototype._checkDataSize = function() {
    this._updateDataSize();
    if (this.dataSize <= this.maxDataSize) {
      return;
    }
    var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
    this._emitError(new Error(message));
  };
  CombinedStream.prototype._updateDataSize = function() {
    this.dataSize = 0;
    var self2 = this;
    this._streams.forEach(function(stream) {
      if (!stream.dataSize) {
        return;
      }
      self2.dataSize += stream.dataSize;
    });
    if (this._currentStream && this._currentStream.dataSize) {
      this.dataSize += this._currentStream.dataSize;
    }
  };
  CombinedStream.prototype._emitError = function(err) {
    this._reset();
    this.emit("error", err);
  };
});

// node_modules/mime-db/db.json
var require_db = __commonJS((exports, module) => {
  module.exports = {
    "application/1d-interleaved-parityfec": {
      source: "iana"
    },
    "application/3gpdash-qoe-report+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/3gpp-ims+xml": {
      source: "iana",
      compressible: true
    },
    "application/3gpphal+json": {
      source: "iana",
      compressible: true
    },
    "application/3gpphalforms+json": {
      source: "iana",
      compressible: true
    },
    "application/a2l": {
      source: "iana"
    },
    "application/ace+cbor": {
      source: "iana"
    },
    "application/activemessage": {
      source: "iana"
    },
    "application/activity+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-costmap+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-costmapfilter+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-directory+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-endpointcost+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-endpointcostparams+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-endpointprop+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-endpointpropparams+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-error+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-networkmap+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-networkmapfilter+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-updatestreamcontrol+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-updatestreamparams+json": {
      source: "iana",
      compressible: true
    },
    "application/aml": {
      source: "iana"
    },
    "application/andrew-inset": {
      source: "iana",
      extensions: ["ez"]
    },
    "application/applefile": {
      source: "iana"
    },
    "application/applixware": {
      source: "apache",
      extensions: ["aw"]
    },
    "application/at+jwt": {
      source: "iana"
    },
    "application/atf": {
      source: "iana"
    },
    "application/atfx": {
      source: "iana"
    },
    "application/atom+xml": {
      source: "iana",
      compressible: true,
      extensions: ["atom"]
    },
    "application/atomcat+xml": {
      source: "iana",
      compressible: true,
      extensions: ["atomcat"]
    },
    "application/atomdeleted+xml": {
      source: "iana",
      compressible: true,
      extensions: ["atomdeleted"]
    },
    "application/atomicmail": {
      source: "iana"
    },
    "application/atomsvc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["atomsvc"]
    },
    "application/atsc-dwd+xml": {
      source: "iana",
      compressible: true,
      extensions: ["dwd"]
    },
    "application/atsc-dynamic-event-message": {
      source: "iana"
    },
    "application/atsc-held+xml": {
      source: "iana",
      compressible: true,
      extensions: ["held"]
    },
    "application/atsc-rdt+json": {
      source: "iana",
      compressible: true
    },
    "application/atsc-rsat+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rsat"]
    },
    "application/atxml": {
      source: "iana"
    },
    "application/auth-policy+xml": {
      source: "iana",
      compressible: true
    },
    "application/bacnet-xdd+zip": {
      source: "iana",
      compressible: false
    },
    "application/batch-smtp": {
      source: "iana"
    },
    "application/bdoc": {
      compressible: false,
      extensions: ["bdoc"]
    },
    "application/beep+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/calendar+json": {
      source: "iana",
      compressible: true
    },
    "application/calendar+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xcs"]
    },
    "application/call-completion": {
      source: "iana"
    },
    "application/cals-1840": {
      source: "iana"
    },
    "application/captive+json": {
      source: "iana",
      compressible: true
    },
    "application/cbor": {
      source: "iana"
    },
    "application/cbor-seq": {
      source: "iana"
    },
    "application/cccex": {
      source: "iana"
    },
    "application/ccmp+xml": {
      source: "iana",
      compressible: true
    },
    "application/ccxml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ccxml"]
    },
    "application/cdfx+xml": {
      source: "iana",
      compressible: true,
      extensions: ["cdfx"]
    },
    "application/cdmi-capability": {
      source: "iana",
      extensions: ["cdmia"]
    },
    "application/cdmi-container": {
      source: "iana",
      extensions: ["cdmic"]
    },
    "application/cdmi-domain": {
      source: "iana",
      extensions: ["cdmid"]
    },
    "application/cdmi-object": {
      source: "iana",
      extensions: ["cdmio"]
    },
    "application/cdmi-queue": {
      source: "iana",
      extensions: ["cdmiq"]
    },
    "application/cdni": {
      source: "iana"
    },
    "application/cea": {
      source: "iana"
    },
    "application/cea-2018+xml": {
      source: "iana",
      compressible: true
    },
    "application/cellml+xml": {
      source: "iana",
      compressible: true
    },
    "application/cfw": {
      source: "iana"
    },
    "application/city+json": {
      source: "iana",
      compressible: true
    },
    "application/clr": {
      source: "iana"
    },
    "application/clue+xml": {
      source: "iana",
      compressible: true
    },
    "application/clue_info+xml": {
      source: "iana",
      compressible: true
    },
    "application/cms": {
      source: "iana"
    },
    "application/cnrp+xml": {
      source: "iana",
      compressible: true
    },
    "application/coap-group+json": {
      source: "iana",
      compressible: true
    },
    "application/coap-payload": {
      source: "iana"
    },
    "application/commonground": {
      source: "iana"
    },
    "application/conference-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/cose": {
      source: "iana"
    },
    "application/cose-key": {
      source: "iana"
    },
    "application/cose-key-set": {
      source: "iana"
    },
    "application/cpl+xml": {
      source: "iana",
      compressible: true,
      extensions: ["cpl"]
    },
    "application/csrattrs": {
      source: "iana"
    },
    "application/csta+xml": {
      source: "iana",
      compressible: true
    },
    "application/cstadata+xml": {
      source: "iana",
      compressible: true
    },
    "application/csvm+json": {
      source: "iana",
      compressible: true
    },
    "application/cu-seeme": {
      source: "apache",
      extensions: ["cu"]
    },
    "application/cwt": {
      source: "iana"
    },
    "application/cybercash": {
      source: "iana"
    },
    "application/dart": {
      compressible: true
    },
    "application/dash+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mpd"]
    },
    "application/dash-patch+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mpp"]
    },
    "application/dashdelta": {
      source: "iana"
    },
    "application/davmount+xml": {
      source: "iana",
      compressible: true,
      extensions: ["davmount"]
    },
    "application/dca-rft": {
      source: "iana"
    },
    "application/dcd": {
      source: "iana"
    },
    "application/dec-dx": {
      source: "iana"
    },
    "application/dialog-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/dicom": {
      source: "iana"
    },
    "application/dicom+json": {
      source: "iana",
      compressible: true
    },
    "application/dicom+xml": {
      source: "iana",
      compressible: true
    },
    "application/dii": {
      source: "iana"
    },
    "application/dit": {
      source: "iana"
    },
    "application/dns": {
      source: "iana"
    },
    "application/dns+json": {
      source: "iana",
      compressible: true
    },
    "application/dns-message": {
      source: "iana"
    },
    "application/docbook+xml": {
      source: "apache",
      compressible: true,
      extensions: ["dbk"]
    },
    "application/dots+cbor": {
      source: "iana"
    },
    "application/dskpp+xml": {
      source: "iana",
      compressible: true
    },
    "application/dssc+der": {
      source: "iana",
      extensions: ["dssc"]
    },
    "application/dssc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xdssc"]
    },
    "application/dvcs": {
      source: "iana"
    },
    "application/ecmascript": {
      source: "iana",
      compressible: true,
      extensions: ["es", "ecma"]
    },
    "application/edi-consent": {
      source: "iana"
    },
    "application/edi-x12": {
      source: "iana",
      compressible: false
    },
    "application/edifact": {
      source: "iana",
      compressible: false
    },
    "application/efi": {
      source: "iana"
    },
    "application/elm+json": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/elm+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.cap+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/emergencycalldata.comment+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.control+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.deviceinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.ecall.msd": {
      source: "iana"
    },
    "application/emergencycalldata.providerinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.serviceinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.subscriberinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.veds+xml": {
      source: "iana",
      compressible: true
    },
    "application/emma+xml": {
      source: "iana",
      compressible: true,
      extensions: ["emma"]
    },
    "application/emotionml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["emotionml"]
    },
    "application/encaprtp": {
      source: "iana"
    },
    "application/epp+xml": {
      source: "iana",
      compressible: true
    },
    "application/epub+zip": {
      source: "iana",
      compressible: false,
      extensions: ["epub"]
    },
    "application/eshop": {
      source: "iana"
    },
    "application/exi": {
      source: "iana",
      extensions: ["exi"]
    },
    "application/expect-ct-report+json": {
      source: "iana",
      compressible: true
    },
    "application/express": {
      source: "iana",
      extensions: ["exp"]
    },
    "application/fastinfoset": {
      source: "iana"
    },
    "application/fastsoap": {
      source: "iana"
    },
    "application/fdt+xml": {
      source: "iana",
      compressible: true,
      extensions: ["fdt"]
    },
    "application/fhir+json": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/fhir+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/fido.trusted-apps+json": {
      compressible: true
    },
    "application/fits": {
      source: "iana"
    },
    "application/flexfec": {
      source: "iana"
    },
    "application/font-sfnt": {
      source: "iana"
    },
    "application/font-tdpfr": {
      source: "iana",
      extensions: ["pfr"]
    },
    "application/font-woff": {
      source: "iana",
      compressible: false
    },
    "application/framework-attributes+xml": {
      source: "iana",
      compressible: true
    },
    "application/geo+json": {
      source: "iana",
      compressible: true,
      extensions: ["geojson"]
    },
    "application/geo+json-seq": {
      source: "iana"
    },
    "application/geopackage+sqlite3": {
      source: "iana"
    },
    "application/geoxacml+xml": {
      source: "iana",
      compressible: true
    },
    "application/gltf-buffer": {
      source: "iana"
    },
    "application/gml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["gml"]
    },
    "application/gpx+xml": {
      source: "apache",
      compressible: true,
      extensions: ["gpx"]
    },
    "application/gxf": {
      source: "apache",
      extensions: ["gxf"]
    },
    "application/gzip": {
      source: "iana",
      compressible: false,
      extensions: ["gz"]
    },
    "application/h224": {
      source: "iana"
    },
    "application/held+xml": {
      source: "iana",
      compressible: true
    },
    "application/hjson": {
      extensions: ["hjson"]
    },
    "application/http": {
      source: "iana"
    },
    "application/hyperstudio": {
      source: "iana",
      extensions: ["stk"]
    },
    "application/ibe-key-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/ibe-pkg-reply+xml": {
      source: "iana",
      compressible: true
    },
    "application/ibe-pp-data": {
      source: "iana"
    },
    "application/iges": {
      source: "iana"
    },
    "application/im-iscomposing+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/index": {
      source: "iana"
    },
    "application/index.cmd": {
      source: "iana"
    },
    "application/index.obj": {
      source: "iana"
    },
    "application/index.response": {
      source: "iana"
    },
    "application/index.vnd": {
      source: "iana"
    },
    "application/inkml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ink", "inkml"]
    },
    "application/iotp": {
      source: "iana"
    },
    "application/ipfix": {
      source: "iana",
      extensions: ["ipfix"]
    },
    "application/ipp": {
      source: "iana"
    },
    "application/isup": {
      source: "iana"
    },
    "application/its+xml": {
      source: "iana",
      compressible: true,
      extensions: ["its"]
    },
    "application/java-archive": {
      source: "apache",
      compressible: false,
      extensions: ["jar", "war", "ear"]
    },
    "application/java-serialized-object": {
      source: "apache",
      compressible: false,
      extensions: ["ser"]
    },
    "application/java-vm": {
      source: "apache",
      compressible: false,
      extensions: ["class"]
    },
    "application/javascript": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["js", "mjs"]
    },
    "application/jf2feed+json": {
      source: "iana",
      compressible: true
    },
    "application/jose": {
      source: "iana"
    },
    "application/jose+json": {
      source: "iana",
      compressible: true
    },
    "application/jrd+json": {
      source: "iana",
      compressible: true
    },
    "application/jscalendar+json": {
      source: "iana",
      compressible: true
    },
    "application/json": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["json", "map"]
    },
    "application/json-patch+json": {
      source: "iana",
      compressible: true
    },
    "application/json-seq": {
      source: "iana"
    },
    "application/json5": {
      extensions: ["json5"]
    },
    "application/jsonml+json": {
      source: "apache",
      compressible: true,
      extensions: ["jsonml"]
    },
    "application/jwk+json": {
      source: "iana",
      compressible: true
    },
    "application/jwk-set+json": {
      source: "iana",
      compressible: true
    },
    "application/jwt": {
      source: "iana"
    },
    "application/kpml-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/kpml-response+xml": {
      source: "iana",
      compressible: true
    },
    "application/ld+json": {
      source: "iana",
      compressible: true,
      extensions: ["jsonld"]
    },
    "application/lgr+xml": {
      source: "iana",
      compressible: true,
      extensions: ["lgr"]
    },
    "application/link-format": {
      source: "iana"
    },
    "application/load-control+xml": {
      source: "iana",
      compressible: true
    },
    "application/lost+xml": {
      source: "iana",
      compressible: true,
      extensions: ["lostxml"]
    },
    "application/lostsync+xml": {
      source: "iana",
      compressible: true
    },
    "application/lpf+zip": {
      source: "iana",
      compressible: false
    },
    "application/lxf": {
      source: "iana"
    },
    "application/mac-binhex40": {
      source: "iana",
      extensions: ["hqx"]
    },
    "application/mac-compactpro": {
      source: "apache",
      extensions: ["cpt"]
    },
    "application/macwriteii": {
      source: "iana"
    },
    "application/mads+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mads"]
    },
    "application/manifest+json": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["webmanifest"]
    },
    "application/marc": {
      source: "iana",
      extensions: ["mrc"]
    },
    "application/marcxml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mrcx"]
    },
    "application/mathematica": {
      source: "iana",
      extensions: ["ma", "nb", "mb"]
    },
    "application/mathml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mathml"]
    },
    "application/mathml-content+xml": {
      source: "iana",
      compressible: true
    },
    "application/mathml-presentation+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-associated-procedure-description+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-deregister+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-envelope+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-msk+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-msk-response+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-protection-description+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-reception-report+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-register+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-register-response+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-schedule+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-user-service-description+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbox": {
      source: "iana",
      extensions: ["mbox"]
    },
    "application/media-policy-dataset+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mpf"]
    },
    "application/media_control+xml": {
      source: "iana",
      compressible: true
    },
    "application/mediaservercontrol+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mscml"]
    },
    "application/merge-patch+json": {
      source: "iana",
      compressible: true
    },
    "application/metalink+xml": {
      source: "apache",
      compressible: true,
      extensions: ["metalink"]
    },
    "application/metalink4+xml": {
      source: "iana",
      compressible: true,
      extensions: ["meta4"]
    },
    "application/mets+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mets"]
    },
    "application/mf4": {
      source: "iana"
    },
    "application/mikey": {
      source: "iana"
    },
    "application/mipc": {
      source: "iana"
    },
    "application/missing-blocks+cbor-seq": {
      source: "iana"
    },
    "application/mmt-aei+xml": {
      source: "iana",
      compressible: true,
      extensions: ["maei"]
    },
    "application/mmt-usd+xml": {
      source: "iana",
      compressible: true,
      extensions: ["musd"]
    },
    "application/mods+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mods"]
    },
    "application/moss-keys": {
      source: "iana"
    },
    "application/moss-signature": {
      source: "iana"
    },
    "application/mosskey-data": {
      source: "iana"
    },
    "application/mosskey-request": {
      source: "iana"
    },
    "application/mp21": {
      source: "iana",
      extensions: ["m21", "mp21"]
    },
    "application/mp4": {
      source: "iana",
      extensions: ["mp4s", "m4p"]
    },
    "application/mpeg4-generic": {
      source: "iana"
    },
    "application/mpeg4-iod": {
      source: "iana"
    },
    "application/mpeg4-iod-xmt": {
      source: "iana"
    },
    "application/mrb-consumer+xml": {
      source: "iana",
      compressible: true
    },
    "application/mrb-publish+xml": {
      source: "iana",
      compressible: true
    },
    "application/msc-ivr+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/msc-mixer+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/msword": {
      source: "iana",
      compressible: false,
      extensions: ["doc", "dot"]
    },
    "application/mud+json": {
      source: "iana",
      compressible: true
    },
    "application/multipart-core": {
      source: "iana"
    },
    "application/mxf": {
      source: "iana",
      extensions: ["mxf"]
    },
    "application/n-quads": {
      source: "iana",
      extensions: ["nq"]
    },
    "application/n-triples": {
      source: "iana",
      extensions: ["nt"]
    },
    "application/nasdata": {
      source: "iana"
    },
    "application/news-checkgroups": {
      source: "iana",
      charset: "US-ASCII"
    },
    "application/news-groupinfo": {
      source: "iana",
      charset: "US-ASCII"
    },
    "application/news-transmission": {
      source: "iana"
    },
    "application/nlsml+xml": {
      source: "iana",
      compressible: true
    },
    "application/node": {
      source: "iana",
      extensions: ["cjs"]
    },
    "application/nss": {
      source: "iana"
    },
    "application/oauth-authz-req+jwt": {
      source: "iana"
    },
    "application/oblivious-dns-message": {
      source: "iana"
    },
    "application/ocsp-request": {
      source: "iana"
    },
    "application/ocsp-response": {
      source: "iana"
    },
    "application/octet-stream": {
      source: "iana",
      compressible: false,
      extensions: ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"]
    },
    "application/oda": {
      source: "iana",
      extensions: ["oda"]
    },
    "application/odm+xml": {
      source: "iana",
      compressible: true
    },
    "application/odx": {
      source: "iana"
    },
    "application/oebps-package+xml": {
      source: "iana",
      compressible: true,
      extensions: ["opf"]
    },
    "application/ogg": {
      source: "iana",
      compressible: false,
      extensions: ["ogx"]
    },
    "application/omdoc+xml": {
      source: "apache",
      compressible: true,
      extensions: ["omdoc"]
    },
    "application/onenote": {
      source: "apache",
      extensions: ["onetoc", "onetoc2", "onetmp", "onepkg"]
    },
    "application/opc-nodeset+xml": {
      source: "iana",
      compressible: true
    },
    "application/oscore": {
      source: "iana"
    },
    "application/oxps": {
      source: "iana",
      extensions: ["oxps"]
    },
    "application/p21": {
      source: "iana"
    },
    "application/p21+zip": {
      source: "iana",
      compressible: false
    },
    "application/p2p-overlay+xml": {
      source: "iana",
      compressible: true,
      extensions: ["relo"]
    },
    "application/parityfec": {
      source: "iana"
    },
    "application/passport": {
      source: "iana"
    },
    "application/patch-ops-error+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xer"]
    },
    "application/pdf": {
      source: "iana",
      compressible: false,
      extensions: ["pdf"]
    },
    "application/pdx": {
      source: "iana"
    },
    "application/pem-certificate-chain": {
      source: "iana"
    },
    "application/pgp-encrypted": {
      source: "iana",
      compressible: false,
      extensions: ["pgp"]
    },
    "application/pgp-keys": {
      source: "iana",
      extensions: ["asc"]
    },
    "application/pgp-signature": {
      source: "iana",
      extensions: ["asc", "sig"]
    },
    "application/pics-rules": {
      source: "apache",
      extensions: ["prf"]
    },
    "application/pidf+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/pidf-diff+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/pkcs10": {
      source: "iana",
      extensions: ["p10"]
    },
    "application/pkcs12": {
      source: "iana"
    },
    "application/pkcs7-mime": {
      source: "iana",
      extensions: ["p7m", "p7c"]
    },
    "application/pkcs7-signature": {
      source: "iana",
      extensions: ["p7s"]
    },
    "application/pkcs8": {
      source: "iana",
      extensions: ["p8"]
    },
    "application/pkcs8-encrypted": {
      source: "iana"
    },
    "application/pkix-attr-cert": {
      source: "iana",
      extensions: ["ac"]
    },
    "application/pkix-cert": {
      source: "iana",
      extensions: ["cer"]
    },
    "application/pkix-crl": {
      source: "iana",
      extensions: ["crl"]
    },
    "application/pkix-pkipath": {
      source: "iana",
      extensions: ["pkipath"]
    },
    "application/pkixcmp": {
      source: "iana",
      extensions: ["pki"]
    },
    "application/pls+xml": {
      source: "iana",
      compressible: true,
      extensions: ["pls"]
    },
    "application/poc-settings+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/postscript": {
      source: "iana",
      compressible: true,
      extensions: ["ai", "eps", "ps"]
    },
    "application/ppsp-tracker+json": {
      source: "iana",
      compressible: true
    },
    "application/problem+json": {
      source: "iana",
      compressible: true
    },
    "application/problem+xml": {
      source: "iana",
      compressible: true
    },
    "application/provenance+xml": {
      source: "iana",
      compressible: true,
      extensions: ["provx"]
    },
    "application/prs.alvestrand.titrax-sheet": {
      source: "iana"
    },
    "application/prs.cww": {
      source: "iana",
      extensions: ["cww"]
    },
    "application/prs.cyn": {
      source: "iana",
      charset: "7-BIT"
    },
    "application/prs.hpub+zip": {
      source: "iana",
      compressible: false
    },
    "application/prs.nprend": {
      source: "iana"
    },
    "application/prs.plucker": {
      source: "iana"
    },
    "application/prs.rdf-xml-crypt": {
      source: "iana"
    },
    "application/prs.xsf+xml": {
      source: "iana",
      compressible: true
    },
    "application/pskc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["pskcxml"]
    },
    "application/pvd+json": {
      source: "iana",
      compressible: true
    },
    "application/qsig": {
      source: "iana"
    },
    "application/raml+yaml": {
      compressible: true,
      extensions: ["raml"]
    },
    "application/raptorfec": {
      source: "iana"
    },
    "application/rdap+json": {
      source: "iana",
      compressible: true
    },
    "application/rdf+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rdf", "owl"]
    },
    "application/reginfo+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rif"]
    },
    "application/relax-ng-compact-syntax": {
      source: "iana",
      extensions: ["rnc"]
    },
    "application/remote-printing": {
      source: "iana"
    },
    "application/reputon+json": {
      source: "iana",
      compressible: true
    },
    "application/resource-lists+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rl"]
    },
    "application/resource-lists-diff+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rld"]
    },
    "application/rfc+xml": {
      source: "iana",
      compressible: true
    },
    "application/riscos": {
      source: "iana"
    },
    "application/rlmi+xml": {
      source: "iana",
      compressible: true
    },
    "application/rls-services+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rs"]
    },
    "application/route-apd+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rapd"]
    },
    "application/route-s-tsid+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sls"]
    },
    "application/route-usd+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rusd"]
    },
    "application/rpki-ghostbusters": {
      source: "iana",
      extensions: ["gbr"]
    },
    "application/rpki-manifest": {
      source: "iana",
      extensions: ["mft"]
    },
    "application/rpki-publication": {
      source: "iana"
    },
    "application/rpki-roa": {
      source: "iana",
      extensions: ["roa"]
    },
    "application/rpki-updown": {
      source: "iana"
    },
    "application/rsd+xml": {
      source: "apache",
      compressible: true,
      extensions: ["rsd"]
    },
    "application/rss+xml": {
      source: "apache",
      compressible: true,
      extensions: ["rss"]
    },
    "application/rtf": {
      source: "iana",
      compressible: true,
      extensions: ["rtf"]
    },
    "application/rtploopback": {
      source: "iana"
    },
    "application/rtx": {
      source: "iana"
    },
    "application/samlassertion+xml": {
      source: "iana",
      compressible: true
    },
    "application/samlmetadata+xml": {
      source: "iana",
      compressible: true
    },
    "application/sarif+json": {
      source: "iana",
      compressible: true
    },
    "application/sarif-external-properties+json": {
      source: "iana",
      compressible: true
    },
    "application/sbe": {
      source: "iana"
    },
    "application/sbml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sbml"]
    },
    "application/scaip+xml": {
      source: "iana",
      compressible: true
    },
    "application/scim+json": {
      source: "iana",
      compressible: true
    },
    "application/scvp-cv-request": {
      source: "iana",
      extensions: ["scq"]
    },
    "application/scvp-cv-response": {
      source: "iana",
      extensions: ["scs"]
    },
    "application/scvp-vp-request": {
      source: "iana",
      extensions: ["spq"]
    },
    "application/scvp-vp-response": {
      source: "iana",
      extensions: ["spp"]
    },
    "application/sdp": {
      source: "iana",
      extensions: ["sdp"]
    },
    "application/secevent+jwt": {
      source: "iana"
    },
    "application/senml+cbor": {
      source: "iana"
    },
    "application/senml+json": {
      source: "iana",
      compressible: true
    },
    "application/senml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["senmlx"]
    },
    "application/senml-etch+cbor": {
      source: "iana"
    },
    "application/senml-etch+json": {
      source: "iana",
      compressible: true
    },
    "application/senml-exi": {
      source: "iana"
    },
    "application/sensml+cbor": {
      source: "iana"
    },
    "application/sensml+json": {
      source: "iana",
      compressible: true
    },
    "application/sensml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sensmlx"]
    },
    "application/sensml-exi": {
      source: "iana"
    },
    "application/sep+xml": {
      source: "iana",
      compressible: true
    },
    "application/sep-exi": {
      source: "iana"
    },
    "application/session-info": {
      source: "iana"
    },
    "application/set-payment": {
      source: "iana"
    },
    "application/set-payment-initiation": {
      source: "iana",
      extensions: ["setpay"]
    },
    "application/set-registration": {
      source: "iana"
    },
    "application/set-registration-initiation": {
      source: "iana",
      extensions: ["setreg"]
    },
    "application/sgml": {
      source: "iana"
    },
    "application/sgml-open-catalog": {
      source: "iana"
    },
    "application/shf+xml": {
      source: "iana",
      compressible: true,
      extensions: ["shf"]
    },
    "application/sieve": {
      source: "iana",
      extensions: ["siv", "sieve"]
    },
    "application/simple-filter+xml": {
      source: "iana",
      compressible: true
    },
    "application/simple-message-summary": {
      source: "iana"
    },
    "application/simplesymbolcontainer": {
      source: "iana"
    },
    "application/sipc": {
      source: "iana"
    },
    "application/slate": {
      source: "iana"
    },
    "application/smil": {
      source: "iana"
    },
    "application/smil+xml": {
      source: "iana",
      compressible: true,
      extensions: ["smi", "smil"]
    },
    "application/smpte336m": {
      source: "iana"
    },
    "application/soap+fastinfoset": {
      source: "iana"
    },
    "application/soap+xml": {
      source: "iana",
      compressible: true
    },
    "application/sparql-query": {
      source: "iana",
      extensions: ["rq"]
    },
    "application/sparql-results+xml": {
      source: "iana",
      compressible: true,
      extensions: ["srx"]
    },
    "application/spdx+json": {
      source: "iana",
      compressible: true
    },
    "application/spirits-event+xml": {
      source: "iana",
      compressible: true
    },
    "application/sql": {
      source: "iana"
    },
    "application/srgs": {
      source: "iana",
      extensions: ["gram"]
    },
    "application/srgs+xml": {
      source: "iana",
      compressible: true,
      extensions: ["grxml"]
    },
    "application/sru+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sru"]
    },
    "application/ssdl+xml": {
      source: "apache",
      compressible: true,
      extensions: ["ssdl"]
    },
    "application/ssml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ssml"]
    },
    "application/stix+json": {
      source: "iana",
      compressible: true
    },
    "application/swid+xml": {
      source: "iana",
      compressible: true,
      extensions: ["swidtag"]
    },
    "application/tamp-apex-update": {
      source: "iana"
    },
    "application/tamp-apex-update-confirm": {
      source: "iana"
    },
    "application/tamp-community-update": {
      source: "iana"
    },
    "application/tamp-community-update-confirm": {
      source: "iana"
    },
    "application/tamp-error": {
      source: "iana"
    },
    "application/tamp-sequence-adjust": {
      source: "iana"
    },
    "application/tamp-sequence-adjust-confirm": {
      source: "iana"
    },
    "application/tamp-status-query": {
      source: "iana"
    },
    "application/tamp-status-response": {
      source: "iana"
    },
    "application/tamp-update": {
      source: "iana"
    },
    "application/tamp-update-confirm": {
      source: "iana"
    },
    "application/tar": {
      compressible: true
    },
    "application/taxii+json": {
      source: "iana",
      compressible: true
    },
    "application/td+json": {
      source: "iana",
      compressible: true
    },
    "application/tei+xml": {
      source: "iana",
      compressible: true,
      extensions: ["tei", "teicorpus"]
    },
    "application/tetra_isi": {
      source: "iana"
    },
    "application/thraud+xml": {
      source: "iana",
      compressible: true,
      extensions: ["tfi"]
    },
    "application/timestamp-query": {
      source: "iana"
    },
    "application/timestamp-reply": {
      source: "iana"
    },
    "application/timestamped-data": {
      source: "iana",
      extensions: ["tsd"]
    },
    "application/tlsrpt+gzip": {
      source: "iana"
    },
    "application/tlsrpt+json": {
      source: "iana",
      compressible: true
    },
    "application/tnauthlist": {
      source: "iana"
    },
    "application/token-introspection+jwt": {
      source: "iana"
    },
    "application/toml": {
      compressible: true,
      extensions: ["toml"]
    },
    "application/trickle-ice-sdpfrag": {
      source: "iana"
    },
    "application/trig": {
      source: "iana",
      extensions: ["trig"]
    },
    "application/ttml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ttml"]
    },
    "application/tve-trigger": {
      source: "iana"
    },
    "application/tzif": {
      source: "iana"
    },
    "application/tzif-leap": {
      source: "iana"
    },
    "application/ubjson": {
      compressible: false,
      extensions: ["ubj"]
    },
    "application/ulpfec": {
      source: "iana"
    },
    "application/urc-grpsheet+xml": {
      source: "iana",
      compressible: true
    },
    "application/urc-ressheet+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rsheet"]
    },
    "application/urc-targetdesc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["td"]
    },
    "application/urc-uisocketdesc+xml": {
      source: "iana",
      compressible: true
    },
    "application/vcard+json": {
      source: "iana",
      compressible: true
    },
    "application/vcard+xml": {
      source: "iana",
      compressible: true
    },
    "application/vemmi": {
      source: "iana"
    },
    "application/vividence.scriptfile": {
      source: "apache"
    },
    "application/vnd.1000minds.decision-model+xml": {
      source: "iana",
      compressible: true,
      extensions: ["1km"]
    },
    "application/vnd.3gpp-prose+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp-prose-pc3ch+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp-v2x-local-service-information": {
      source: "iana"
    },
    "application/vnd.3gpp.5gnas": {
      source: "iana"
    },
    "application/vnd.3gpp.access-transfer-events+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.bsf+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.gmop+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.gtpc": {
      source: "iana"
    },
    "application/vnd.3gpp.interworking-data": {
      source: "iana"
    },
    "application/vnd.3gpp.lpp": {
      source: "iana"
    },
    "application/vnd.3gpp.mc-signalling-ear": {
      source: "iana"
    },
    "application/vnd.3gpp.mcdata-affiliation-command+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcdata-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcdata-payload": {
      source: "iana"
    },
    "application/vnd.3gpp.mcdata-service-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcdata-signalling": {
      source: "iana"
    },
    "application/vnd.3gpp.mcdata-ue-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcdata-user-profile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-affiliation-command+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-floor-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-location-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-service-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-signed+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-ue-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-ue-init-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-user-profile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-affiliation-command+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-affiliation-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-location-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-service-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-transmission-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-ue-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-user-profile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mid-call+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.ngap": {
      source: "iana"
    },
    "application/vnd.3gpp.pfcp": {
      source: "iana"
    },
    "application/vnd.3gpp.pic-bw-large": {
      source: "iana",
      extensions: ["plb"]
    },
    "application/vnd.3gpp.pic-bw-small": {
      source: "iana",
      extensions: ["psb"]
    },
    "application/vnd.3gpp.pic-bw-var": {
      source: "iana",
      extensions: ["pvb"]
    },
    "application/vnd.3gpp.s1ap": {
      source: "iana"
    },
    "application/vnd.3gpp.sms": {
      source: "iana"
    },
    "application/vnd.3gpp.sms+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.srvcc-ext+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.srvcc-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.state-and-event-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.ussd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp2.bcmcsinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp2.sms": {
      source: "iana"
    },
    "application/vnd.3gpp2.tcap": {
      source: "iana",
      extensions: ["tcap"]
    },
    "application/vnd.3lightssoftware.imagescal": {
      source: "iana"
    },
    "application/vnd.3m.post-it-notes": {
      source: "iana",
      extensions: ["pwn"]
    },
    "application/vnd.accpac.simply.aso": {
      source: "iana",
      extensions: ["aso"]
    },
    "application/vnd.accpac.simply.imp": {
      source: "iana",
      extensions: ["imp"]
    },
    "application/vnd.acucobol": {
      source: "iana",
      extensions: ["acu"]
    },
    "application/vnd.acucorp": {
      source: "iana",
      extensions: ["atc", "acutc"]
    },
    "application/vnd.adobe.air-application-installer-package+zip": {
      source: "apache",
      compressible: false,
      extensions: ["air"]
    },
    "application/vnd.adobe.flash.movie": {
      source: "iana"
    },
    "application/vnd.adobe.formscentral.fcdt": {
      source: "iana",
      extensions: ["fcdt"]
    },
    "application/vnd.adobe.fxp": {
      source: "iana",
      extensions: ["fxp", "fxpl"]
    },
    "application/vnd.adobe.partial-upload": {
      source: "iana"
    },
    "application/vnd.adobe.xdp+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xdp"]
    },
    "application/vnd.adobe.xfdf": {
      source: "iana",
      extensions: ["xfdf"]
    },
    "application/vnd.aether.imp": {
      source: "iana"
    },
    "application/vnd.afpc.afplinedata": {
      source: "iana"
    },
    "application/vnd.afpc.afplinedata-pagedef": {
      source: "iana"
    },
    "application/vnd.afpc.cmoca-cmresource": {
      source: "iana"
    },
    "application/vnd.afpc.foca-charset": {
      source: "iana"
    },
    "application/vnd.afpc.foca-codedfont": {
      source: "iana"
    },
    "application/vnd.afpc.foca-codepage": {
      source: "iana"
    },
    "application/vnd.afpc.modca": {
      source: "iana"
    },
    "application/vnd.afpc.modca-cmtable": {
      source: "iana"
    },
    "application/vnd.afpc.modca-formdef": {
      source: "iana"
    },
    "application/vnd.afpc.modca-mediummap": {
      source: "iana"
    },
    "application/vnd.afpc.modca-objectcontainer": {
      source: "iana"
    },
    "application/vnd.afpc.modca-overlay": {
      source: "iana"
    },
    "application/vnd.afpc.modca-pagesegment": {
      source: "iana"
    },
    "application/vnd.age": {
      source: "iana",
      extensions: ["age"]
    },
    "application/vnd.ah-barcode": {
      source: "iana"
    },
    "application/vnd.ahead.space": {
      source: "iana",
      extensions: ["ahead"]
    },
    "application/vnd.airzip.filesecure.azf": {
      source: "iana",
      extensions: ["azf"]
    },
    "application/vnd.airzip.filesecure.azs": {
      source: "iana",
      extensions: ["azs"]
    },
    "application/vnd.amadeus+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.amazon.ebook": {
      source: "apache",
      extensions: ["azw"]
    },
    "application/vnd.amazon.mobi8-ebook": {
      source: "iana"
    },
    "application/vnd.americandynamics.acc": {
      source: "iana",
      extensions: ["acc"]
    },
    "application/vnd.amiga.ami": {
      source: "iana",
      extensions: ["ami"]
    },
    "application/vnd.amundsen.maze+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.android.ota": {
      source: "iana"
    },
    "application/vnd.android.package-archive": {
      source: "apache",
      compressible: false,
      extensions: ["apk"]
    },
    "application/vnd.anki": {
      source: "iana"
    },
    "application/vnd.anser-web-certificate-issue-initiation": {
      source: "iana",
      extensions: ["cii"]
    },
    "application/vnd.anser-web-funds-transfer-initiation": {
      source: "apache",
      extensions: ["fti"]
    },
    "application/vnd.antix.game-component": {
      source: "iana",
      extensions: ["atx"]
    },
    "application/vnd.apache.arrow.file": {
      source: "iana"
    },
    "application/vnd.apache.arrow.stream": {
      source: "iana"
    },
    "application/vnd.apache.thrift.binary": {
      source: "iana"
    },
    "application/vnd.apache.thrift.compact": {
      source: "iana"
    },
    "application/vnd.apache.thrift.json": {
      source: "iana"
    },
    "application/vnd.api+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.aplextor.warrp+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.apothekende.reservation+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.apple.installer+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mpkg"]
    },
    "application/vnd.apple.keynote": {
      source: "iana",
      extensions: ["key"]
    },
    "application/vnd.apple.mpegurl": {
      source: "iana",
      extensions: ["m3u8"]
    },
    "application/vnd.apple.numbers": {
      source: "iana",
      extensions: ["numbers"]
    },
    "application/vnd.apple.pages": {
      source: "iana",
      extensions: ["pages"]
    },
    "application/vnd.apple.pkpass": {
      compressible: false,
      extensions: ["pkpass"]
    },
    "application/vnd.arastra.swi": {
      source: "iana"
    },
    "application/vnd.aristanetworks.swi": {
      source: "iana",
      extensions: ["swi"]
    },
    "application/vnd.artisan+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.artsquare": {
      source: "iana"
    },
    "application/vnd.astraea-software.iota": {
      source: "iana",
      extensions: ["iota"]
    },
    "application/vnd.audiograph": {
      source: "iana",
      extensions: ["aep"]
    },
    "application/vnd.autopackage": {
      source: "iana"
    },
    "application/vnd.avalon+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.avistar+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.balsamiq.bmml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["bmml"]
    },
    "application/vnd.balsamiq.bmpr": {
      source: "iana"
    },
    "application/vnd.banana-accounting": {
      source: "iana"
    },
    "application/vnd.bbf.usp.error": {
      source: "iana"
    },
    "application/vnd.bbf.usp.msg": {
      source: "iana"
    },
    "application/vnd.bbf.usp.msg+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.bekitzur-stech+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.bint.med-content": {
      source: "iana"
    },
    "application/vnd.biopax.rdf+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.blink-idb-value-wrapper": {
      source: "iana"
    },
    "application/vnd.blueice.multipass": {
      source: "iana",
      extensions: ["mpm"]
    },
    "application/vnd.bluetooth.ep.oob": {
      source: "iana"
    },
    "application/vnd.bluetooth.le.oob": {
      source: "iana"
    },
    "application/vnd.bmi": {
      source: "iana",
      extensions: ["bmi"]
    },
    "application/vnd.bpf": {
      source: "iana"
    },
    "application/vnd.bpf3": {
      source: "iana"
    },
    "application/vnd.businessobjects": {
      source: "iana",
      extensions: ["rep"]
    },
    "application/vnd.byu.uapi+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cab-jscript": {
      source: "iana"
    },
    "application/vnd.canon-cpdl": {
      source: "iana"
    },
    "application/vnd.canon-lips": {
      source: "iana"
    },
    "application/vnd.capasystems-pg+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cendio.thinlinc.clientconf": {
      source: "iana"
    },
    "application/vnd.century-systems.tcp_stream": {
      source: "iana"
    },
    "application/vnd.chemdraw+xml": {
      source: "iana",
      compressible: true,
      extensions: ["cdxml"]
    },
    "application/vnd.chess-pgn": {
      source: "iana"
    },
    "application/vnd.chipnuts.karaoke-mmd": {
      source: "iana",
      extensions: ["mmd"]
    },
    "application/vnd.ciedi": {
      source: "iana"
    },
    "application/vnd.cinderella": {
      source: "iana",
      extensions: ["cdy"]
    },
    "application/vnd.cirpack.isdn-ext": {
      source: "iana"
    },
    "application/vnd.citationstyles.style+xml": {
      source: "iana",
      compressible: true,
      extensions: ["csl"]
    },
    "application/vnd.claymore": {
      source: "iana",
      extensions: ["cla"]
    },
    "application/vnd.cloanto.rp9": {
      source: "iana",
      extensions: ["rp9"]
    },
    "application/vnd.clonk.c4group": {
      source: "iana",
      extensions: ["c4g", "c4d", "c4f", "c4p", "c4u"]
    },
    "application/vnd.cluetrust.cartomobile-config": {
      source: "iana",
      extensions: ["c11amc"]
    },
    "application/vnd.cluetrust.cartomobile-config-pkg": {
      source: "iana",
      extensions: ["c11amz"]
    },
    "application/vnd.coffeescript": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.document": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.document-template": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.presentation": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.presentation-template": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.spreadsheet": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.spreadsheet-template": {
      source: "iana"
    },
    "application/vnd.collection+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.collection.doc+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.collection.next+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.comicbook+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.comicbook-rar": {
      source: "iana"
    },
    "application/vnd.commerce-battelle": {
      source: "iana"
    },
    "application/vnd.commonspace": {
      source: "iana",
      extensions: ["csp"]
    },
    "application/vnd.contact.cmsg": {
      source: "iana",
      extensions: ["cdbcmsg"]
    },
    "application/vnd.coreos.ignition+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cosmocaller": {
      source: "iana",
      extensions: ["cmc"]
    },
    "application/vnd.crick.clicker": {
      source: "iana",
      extensions: ["clkx"]
    },
    "application/vnd.crick.clicker.keyboard": {
      source: "iana",
      extensions: ["clkk"]
    },
    "application/vnd.crick.clicker.palette": {
      source: "iana",
      extensions: ["clkp"]
    },
    "application/vnd.crick.clicker.template": {
      source: "iana",
      extensions: ["clkt"]
    },
    "application/vnd.crick.clicker.wordbank": {
      source: "iana",
      extensions: ["clkw"]
    },
    "application/vnd.criticaltools.wbs+xml": {
      source: "iana",
      compressible: true,
      extensions: ["wbs"]
    },
    "application/vnd.cryptii.pipe+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.crypto-shade-file": {
      source: "iana"
    },
    "application/vnd.cryptomator.encrypted": {
      source: "iana"
    },
    "application/vnd.cryptomator.vault": {
      source: "iana"
    },
    "application/vnd.ctc-posml": {
      source: "iana",
      extensions: ["pml"]
    },
    "application/vnd.ctct.ws+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cups-pdf": {
      source: "iana"
    },
    "application/vnd.cups-postscript": {
      source: "iana"
    },
    "application/vnd.cups-ppd": {
      source: "iana",
      extensions: ["ppd"]
    },
    "application/vnd.cups-raster": {
      source: "iana"
    },
    "application/vnd.cups-raw": {
      source: "iana"
    },
    "application/vnd.curl": {
      source: "iana"
    },
    "application/vnd.curl.car": {
      source: "apache",
      extensions: ["car"]
    },
    "application/vnd.curl.pcurl": {
      source: "apache",
      extensions: ["pcurl"]
    },
    "application/vnd.cyan.dean.root+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cybank": {
      source: "iana"
    },
    "application/vnd.cyclonedx+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cyclonedx+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.d2l.coursepackage1p0+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.d3m-dataset": {
      source: "iana"
    },
    "application/vnd.d3m-problem": {
      source: "iana"
    },
    "application/vnd.dart": {
      source: "iana",
      compressible: true,
      extensions: ["dart"]
    },
    "application/vnd.data-vision.rdz": {
      source: "iana",
      extensions: ["rdz"]
    },
    "application/vnd.datapackage+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dataresource+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dbf": {
      source: "iana",
      extensions: ["dbf"]
    },
    "application/vnd.debian.binary-package": {
      source: "iana"
    },
    "application/vnd.dece.data": {
      source: "iana",
      extensions: ["uvf", "uvvf", "uvd", "uvvd"]
    },
    "application/vnd.dece.ttml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["uvt", "uvvt"]
    },
    "application/vnd.dece.unspecified": {
      source: "iana",
      extensions: ["uvx", "uvvx"]
    },
    "application/vnd.dece.zip": {
      source: "iana",
      extensions: ["uvz", "uvvz"]
    },
    "application/vnd.denovo.fcselayout-link": {
      source: "iana",
      extensions: ["fe_launch"]
    },
    "application/vnd.desmume.movie": {
      source: "iana"
    },
    "application/vnd.dir-bi.plate-dl-nosuffix": {
      source: "iana"
    },
    "application/vnd.dm.delegation+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dna": {
      source: "iana",
      extensions: ["dna"]
    },
    "application/vnd.document+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dolby.mlp": {
      source: "apache",
      extensions: ["mlp"]
    },
    "application/vnd.dolby.mobile.1": {
      source: "iana"
    },
    "application/vnd.dolby.mobile.2": {
      source: "iana"
    },
    "application/vnd.doremir.scorecloud-binary-document": {
      source: "iana"
    },
    "application/vnd.dpgraph": {
      source: "iana",
      extensions: ["dpg"]
    },
    "application/vnd.dreamfactory": {
      source: "iana",
      extensions: ["dfac"]
    },
    "application/vnd.drive+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ds-keypoint": {
      source: "apache",
      extensions: ["kpxx"]
    },
    "application/vnd.dtg.local": {
      source: "iana"
    },
    "application/vnd.dtg.local.flash": {
      source: "iana"
    },
    "application/vnd.dtg.local.html": {
      source: "iana"
    },
    "application/vnd.dvb.ait": {
      source: "iana",
      extensions: ["ait"]
    },
    "application/vnd.dvb.dvbisl+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.dvbj": {
      source: "iana"
    },
    "application/vnd.dvb.esgcontainer": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcdftnotifaccess": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcesgaccess": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcesgaccess2": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcesgpdd": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcroaming": {
      source: "iana"
    },
    "application/vnd.dvb.iptv.alfec-base": {
      source: "iana"
    },
    "application/vnd.dvb.iptv.alfec-enhancement": {
      source: "iana"
    },
    "application/vnd.dvb.notif-aggregate-root+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-container+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-generic+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-ia-msglist+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-ia-registration-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-ia-registration-response+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-init+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.pfr": {
      source: "iana"
    },
    "application/vnd.dvb.service": {
      source: "iana",
      extensions: ["svc"]
    },
    "application/vnd.dxr": {
      source: "iana"
    },
    "application/vnd.dynageo": {
      source: "iana",
      extensions: ["geo"]
    },
    "application/vnd.dzr": {
      source: "iana"
    },
    "application/vnd.easykaraoke.cdgdownload": {
      source: "iana"
    },
    "application/vnd.ecdis-update": {
      source: "iana"
    },
    "application/vnd.ecip.rlp": {
      source: "iana"
    },
    "application/vnd.eclipse.ditto+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ecowin.chart": {
      source: "iana",
      extensions: ["mag"]
    },
    "application/vnd.ecowin.filerequest": {
      source: "iana"
    },
    "application/vnd.ecowin.fileupdate": {
      source: "iana"
    },
    "application/vnd.ecowin.series": {
      source: "iana"
    },
    "application/vnd.ecowin.seriesrequest": {
      source: "iana"
    },
    "application/vnd.ecowin.seriesupdate": {
      source: "iana"
    },
    "application/vnd.efi.img": {
      source: "iana"
    },
    "application/vnd.efi.iso": {
      source: "iana"
    },
    "application/vnd.emclient.accessrequest+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.enliven": {
      source: "iana",
      extensions: ["nml"]
    },
    "application/vnd.enphase.envoy": {
      source: "iana"
    },
    "application/vnd.eprints.data+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.epson.esf": {
      source: "iana",
      extensions: ["esf"]
    },
    "application/vnd.epson.msf": {
      source: "iana",
      extensions: ["msf"]
    },
    "application/vnd.epson.quickanime": {
      source: "iana",
      extensions: ["qam"]
    },
    "application/vnd.epson.salt": {
      source: "iana",
      extensions: ["slt"]
    },
    "application/vnd.epson.ssf": {
      source: "iana",
      extensions: ["ssf"]
    },
    "application/vnd.ericsson.quickcall": {
      source: "iana"
    },
    "application/vnd.espass-espass+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.eszigno3+xml": {
      source: "iana",
      compressible: true,
      extensions: ["es3", "et3"]
    },
    "application/vnd.etsi.aoc+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.asic-e+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.etsi.asic-s+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.etsi.cug+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvcommand+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvdiscovery+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvprofile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvsad-bc+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvsad-cod+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvsad-npvr+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvservice+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvsync+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvueprofile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.mcid+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.mheg5": {
      source: "iana"
    },
    "application/vnd.etsi.overload-control-policy-dataset+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.pstn+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.sci+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.simservs+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.timestamp-token": {
      source: "iana"
    },
    "application/vnd.etsi.tsl+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.tsl.der": {
      source: "iana"
    },
    "application/vnd.eu.kasparian.car+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.eudora.data": {
      source: "iana"
    },
    "application/vnd.evolv.ecig.profile": {
      source: "iana"
    },
    "application/vnd.evolv.ecig.settings": {
      source: "iana"
    },
    "application/vnd.evolv.ecig.theme": {
      source: "iana"
    },
    "application/vnd.exstream-empower+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.exstream-package": {
      source: "iana"
    },
    "application/vnd.ezpix-album": {
      source: "iana",
      extensions: ["ez2"]
    },
    "application/vnd.ezpix-package": {
      source: "iana",
      extensions: ["ez3"]
    },
    "application/vnd.f-secure.mobile": {
      source: "iana"
    },
    "application/vnd.familysearch.gedcom+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.fastcopy-disk-image": {
      source: "iana"
    },
    "application/vnd.fdf": {
      source: "iana",
      extensions: ["fdf"]
    },
    "application/vnd.fdsn.mseed": {
      source: "iana",
      extensions: ["mseed"]
    },
    "application/vnd.fdsn.seed": {
      source: "iana",
      extensions: ["seed", "dataless"]
    },
    "application/vnd.ffsns": {
      source: "iana"
    },
    "application/vnd.ficlab.flb+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.filmit.zfc": {
      source: "iana"
    },
    "application/vnd.fints": {
      source: "iana"
    },
    "application/vnd.firemonkeys.cloudcell": {
      source: "iana"
    },
    "application/vnd.flographit": {
      source: "iana",
      extensions: ["gph"]
    },
    "application/vnd.fluxtime.clip": {
      source: "iana",
      extensions: ["ftc"]
    },
    "application/vnd.font-fontforge-sfd": {
      source: "iana"
    },
    "application/vnd.framemaker": {
      source: "iana",
      extensions: ["fm", "frame", "maker", "book"]
    },
    "application/vnd.frogans.fnc": {
      source: "iana",
      extensions: ["fnc"]
    },
    "application/vnd.frogans.ltf": {
      source: "iana",
      extensions: ["ltf"]
    },
    "application/vnd.fsc.weblaunch": {
      source: "iana",
      extensions: ["fsc"]
    },
    "application/vnd.fujifilm.fb.docuworks": {
      source: "iana"
    },
    "application/vnd.fujifilm.fb.docuworks.binder": {
      source: "iana"
    },
    "application/vnd.fujifilm.fb.docuworks.container": {
      source: "iana"
    },
    "application/vnd.fujifilm.fb.jfi+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.fujitsu.oasys": {
      source: "iana",
      extensions: ["oas"]
    },
    "application/vnd.fujitsu.oasys2": {
      source: "iana",
      extensions: ["oa2"]
    },
    "application/vnd.fujitsu.oasys3": {
      source: "iana",
      extensions: ["oa3"]
    },
    "application/vnd.fujitsu.oasysgp": {
      source: "iana",
      extensions: ["fg5"]
    },
    "application/vnd.fujitsu.oasysprs": {
      source: "iana",
      extensions: ["bh2"]
    },
    "application/vnd.fujixerox.art-ex": {
      source: "iana"
    },
    "application/vnd.fujixerox.art4": {
      source: "iana"
    },
    "application/vnd.fujixerox.ddd": {
      source: "iana",
      extensions: ["ddd"]
    },
    "application/vnd.fujixerox.docuworks": {
      source: "iana",
      extensions: ["xdw"]
    },
    "application/vnd.fujixerox.docuworks.binder": {
      source: "iana",
      extensions: ["xbd"]
    },
    "application/vnd.fujixerox.docuworks.container": {
      source: "iana"
    },
    "application/vnd.fujixerox.hbpl": {
      source: "iana"
    },
    "application/vnd.fut-misnet": {
      source: "iana"
    },
    "application/vnd.futoin+cbor": {
      source: "iana"
    },
    "application/vnd.futoin+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.fuzzysheet": {
      source: "iana",
      extensions: ["fzs"]
    },
    "application/vnd.genomatix.tuxedo": {
      source: "iana",
      extensions: ["txd"]
    },
    "application/vnd.gentics.grd+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.geo+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.geocube+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.geogebra.file": {
      source: "iana",
      extensions: ["ggb"]
    },
    "application/vnd.geogebra.slides": {
      source: "iana"
    },
    "application/vnd.geogebra.tool": {
      source: "iana",
      extensions: ["ggt"]
    },
    "application/vnd.geometry-explorer": {
      source: "iana",
      extensions: ["gex", "gre"]
    },
    "application/vnd.geonext": {
      source: "iana",
      extensions: ["gxt"]
    },
    "application/vnd.geoplan": {
      source: "iana",
      extensions: ["g2w"]
    },
    "application/vnd.geospace": {
      source: "iana",
      extensions: ["g3w"]
    },
    "application/vnd.gerber": {
      source: "iana"
    },
    "application/vnd.globalplatform.card-content-mgt": {
      source: "iana"
    },
    "application/vnd.globalplatform.card-content-mgt-response": {
      source: "iana"
    },
    "application/vnd.gmx": {
      source: "iana",
      extensions: ["gmx"]
    },
    "application/vnd.google-apps.document": {
      compressible: false,
      extensions: ["gdoc"]
    },
    "application/vnd.google-apps.presentation": {
      compressible: false,
      extensions: ["gslides"]
    },
    "application/vnd.google-apps.spreadsheet": {
      compressible: false,
      extensions: ["gsheet"]
    },
    "application/vnd.google-earth.kml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["kml"]
    },
    "application/vnd.google-earth.kmz": {
      source: "iana",
      compressible: false,
      extensions: ["kmz"]
    },
    "application/vnd.gov.sk.e-form+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.gov.sk.e-form+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.gov.sk.xmldatacontainer+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.grafeq": {
      source: "iana",
      extensions: ["gqf", "gqs"]
    },
    "application/vnd.gridmp": {
      source: "iana"
    },
    "application/vnd.groove-account": {
      source: "iana",
      extensions: ["gac"]
    },
    "application/vnd.groove-help": {
      source: "iana",
      extensions: ["ghf"]
    },
    "application/vnd.groove-identity-message": {
      source: "iana",
      extensions: ["gim"]
    },
    "application/vnd.groove-injector": {
      source: "iana",
      extensions: ["grv"]
    },
    "application/vnd.groove-tool-message": {
      source: "iana",
      extensions: ["gtm"]
    },
    "application/vnd.groove-tool-template": {
      source: "iana",
      extensions: ["tpl"]
    },
    "application/vnd.groove-vcard": {
      source: "iana",
      extensions: ["vcg"]
    },
    "application/vnd.hal+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hal+xml": {
      source: "iana",
      compressible: true,
      extensions: ["hal"]
    },
    "application/vnd.handheld-entertainment+xml": {
      source: "iana",
      compressible: true,
      extensions: ["zmm"]
    },
    "application/vnd.hbci": {
      source: "iana",
      extensions: ["hbci"]
    },
    "application/vnd.hc+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hcl-bireports": {
      source: "iana"
    },
    "application/vnd.hdt": {
      source: "iana"
    },
    "application/vnd.heroku+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hhe.lesson-player": {
      source: "iana",
      extensions: ["les"]
    },
    "application/vnd.hl7cda+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.hl7v2+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.hp-hpgl": {
      source: "iana",
      extensions: ["hpgl"]
    },
    "application/vnd.hp-hpid": {
      source: "iana",
      extensions: ["hpid"]
    },
    "application/vnd.hp-hps": {
      source: "iana",
      extensions: ["hps"]
    },
    "application/vnd.hp-jlyt": {
      source: "iana",
      extensions: ["jlt"]
    },
    "application/vnd.hp-pcl": {
      source: "iana",
      extensions: ["pcl"]
    },
    "application/vnd.hp-pclxl": {
      source: "iana",
      extensions: ["pclxl"]
    },
    "application/vnd.httphone": {
      source: "iana"
    },
    "application/vnd.hydrostatix.sof-data": {
      source: "iana",
      extensions: ["sfd-hdstx"]
    },
    "application/vnd.hyper+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hyper-item+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hyperdrive+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hzn-3d-crossword": {
      source: "iana"
    },
    "application/vnd.ibm.afplinedata": {
      source: "iana"
    },
    "application/vnd.ibm.electronic-media": {
      source: "iana"
    },
    "application/vnd.ibm.minipay": {
      source: "iana",
      extensions: ["mpy"]
    },
    "application/vnd.ibm.modcap": {
      source: "iana",
      extensions: ["afp", "listafp", "list3820"]
    },
    "application/vnd.ibm.rights-management": {
      source: "iana",
      extensions: ["irm"]
    },
    "application/vnd.ibm.secure-container": {
      source: "iana",
      extensions: ["sc"]
    },
    "application/vnd.iccprofile": {
      source: "iana",
      extensions: ["icc", "icm"]
    },
    "application/vnd.ieee.1905": {
      source: "iana"
    },
    "application/vnd.igloader": {
      source: "iana",
      extensions: ["igl"]
    },
    "application/vnd.imagemeter.folder+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.imagemeter.image+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.immervision-ivp": {
      source: "iana",
      extensions: ["ivp"]
    },
    "application/vnd.immervision-ivu": {
      source: "iana",
      extensions: ["ivu"]
    },
    "application/vnd.ims.imsccv1p1": {
      source: "iana"
    },
    "application/vnd.ims.imsccv1p2": {
      source: "iana"
    },
    "application/vnd.ims.imsccv1p3": {
      source: "iana"
    },
    "application/vnd.ims.lis.v2.result+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolproxy+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolproxy.id+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolsettings+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolsettings.simple+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.informedcontrol.rms+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.informix-visionary": {
      source: "iana"
    },
    "application/vnd.infotech.project": {
      source: "iana"
    },
    "application/vnd.infotech.project+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.innopath.wamp.notification": {
      source: "iana"
    },
    "application/vnd.insors.igm": {
      source: "iana",
      extensions: ["igm"]
    },
    "application/vnd.intercon.formnet": {
      source: "iana",
      extensions: ["xpw", "xpx"]
    },
    "application/vnd.intergeo": {
      source: "iana",
      extensions: ["i2g"]
    },
    "application/vnd.intertrust.digibox": {
      source: "iana"
    },
    "application/vnd.intertrust.nncp": {
      source: "iana"
    },
    "application/vnd.intu.qbo": {
      source: "iana",
      extensions: ["qbo"]
    },
    "application/vnd.intu.qfx": {
      source: "iana",
      extensions: ["qfx"]
    },
    "application/vnd.iptc.g2.catalogitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.conceptitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.knowledgeitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.newsitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.newsmessage+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.packageitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.planningitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ipunplugged.rcprofile": {
      source: "iana",
      extensions: ["rcprofile"]
    },
    "application/vnd.irepository.package+xml": {
      source: "iana",
      compressible: true,
      extensions: ["irp"]
    },
    "application/vnd.is-xpr": {
      source: "iana",
      extensions: ["xpr"]
    },
    "application/vnd.isac.fcs": {
      source: "iana",
      extensions: ["fcs"]
    },
    "application/vnd.iso11783-10+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.jam": {
      source: "iana",
      extensions: ["jam"]
    },
    "application/vnd.japannet-directory-service": {
      source: "iana"
    },
    "application/vnd.japannet-jpnstore-wakeup": {
      source: "iana"
    },
    "application/vnd.japannet-payment-wakeup": {
      source: "iana"
    },
    "application/vnd.japannet-registration": {
      source: "iana"
    },
    "application/vnd.japannet-registration-wakeup": {
      source: "iana"
    },
    "application/vnd.japannet-setstore-wakeup": {
      source: "iana"
    },
    "application/vnd.japannet-verification": {
      source: "iana"
    },
    "application/vnd.japannet-verification-wakeup": {
      source: "iana"
    },
    "application/vnd.jcp.javame.midlet-rms": {
      source: "iana",
      extensions: ["rms"]
    },
    "application/vnd.jisp": {
      source: "iana",
      extensions: ["jisp"]
    },
    "application/vnd.joost.joda-archive": {
      source: "iana",
      extensions: ["joda"]
    },
    "application/vnd.jsk.isdn-ngn": {
      source: "iana"
    },
    "application/vnd.kahootz": {
      source: "iana",
      extensions: ["ktz", "ktr"]
    },
    "application/vnd.kde.karbon": {
      source: "iana",
      extensions: ["karbon"]
    },
    "application/vnd.kde.kchart": {
      source: "iana",
      extensions: ["chrt"]
    },
    "application/vnd.kde.kformula": {
      source: "iana",
      extensions: ["kfo"]
    },
    "application/vnd.kde.kivio": {
      source: "iana",
      extensions: ["flw"]
    },
    "application/vnd.kde.kontour": {
      source: "iana",
      extensions: ["kon"]
    },
    "application/vnd.kde.kpresenter": {
      source: "iana",
      extensions: ["kpr", "kpt"]
    },
    "application/vnd.kde.kspread": {
      source: "iana",
      extensions: ["ksp"]
    },
    "application/vnd.kde.kword": {
      source: "iana",
      extensions: ["kwd", "kwt"]
    },
    "application/vnd.kenameaapp": {
      source: "iana",
      extensions: ["htke"]
    },
    "application/vnd.kidspiration": {
      source: "iana",
      extensions: ["kia"]
    },
    "application/vnd.kinar": {
      source: "iana",
      extensions: ["kne", "knp"]
    },
    "application/vnd.koan": {
      source: "iana",
      extensions: ["skp", "skd", "skt", "skm"]
    },
    "application/vnd.kodak-descriptor": {
      source: "iana",
      extensions: ["sse"]
    },
    "application/vnd.las": {
      source: "iana"
    },
    "application/vnd.las.las+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.las.las+xml": {
      source: "iana",
      compressible: true,
      extensions: ["lasxml"]
    },
    "application/vnd.laszip": {
      source: "iana"
    },
    "application/vnd.leap+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.liberty-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.llamagraphics.life-balance.desktop": {
      source: "iana",
      extensions: ["lbd"]
    },
    "application/vnd.llamagraphics.life-balance.exchange+xml": {
      source: "iana",
      compressible: true,
      extensions: ["lbe"]
    },
    "application/vnd.logipipe.circuit+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.loom": {
      source: "iana"
    },
    "application/vnd.lotus-1-2-3": {
      source: "iana",
      extensions: ["123"]
    },
    "application/vnd.lotus-approach": {
      source: "iana",
      extensions: ["apr"]
    },
    "application/vnd.lotus-freelance": {
      source: "iana",
      extensions: ["pre"]
    },
    "application/vnd.lotus-notes": {
      source: "iana",
      extensions: ["nsf"]
    },
    "application/vnd.lotus-organizer": {
      source: "iana",
      extensions: ["org"]
    },
    "application/vnd.lotus-screencam": {
      source: "iana",
      extensions: ["scm"]
    },
    "application/vnd.lotus-wordpro": {
      source: "iana",
      extensions: ["lwp"]
    },
    "application/vnd.macports.portpkg": {
      source: "iana",
      extensions: ["portpkg"]
    },
    "application/vnd.mapbox-vector-tile": {
      source: "iana",
      extensions: ["mvt"]
    },
    "application/vnd.marlin.drm.actiontoken+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.marlin.drm.conftoken+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.marlin.drm.license+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.marlin.drm.mdcf": {
      source: "iana"
    },
    "application/vnd.mason+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.maxar.archive.3tz+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.maxmind.maxmind-db": {
      source: "iana"
    },
    "application/vnd.mcd": {
      source: "iana",
      extensions: ["mcd"]
    },
    "application/vnd.medcalcdata": {
      source: "iana",
      extensions: ["mc1"]
    },
    "application/vnd.mediastation.cdkey": {
      source: "iana",
      extensions: ["cdkey"]
    },
    "application/vnd.meridian-slingshot": {
      source: "iana"
    },
    "application/vnd.mfer": {
      source: "iana",
      extensions: ["mwf"]
    },
    "application/vnd.mfmp": {
      source: "iana",
      extensions: ["mfm"]
    },
    "application/vnd.micro+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.micrografx.flo": {
      source: "iana",
      extensions: ["flo"]
    },
    "application/vnd.micrografx.igx": {
      source: "iana",
      extensions: ["igx"]
    },
    "application/vnd.microsoft.portable-executable": {
      source: "iana"
    },
    "application/vnd.microsoft.windows.thumbnail-cache": {
      source: "iana"
    },
    "application/vnd.miele+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.mif": {
      source: "iana",
      extensions: ["mif"]
    },
    "application/vnd.minisoft-hp3000-save": {
      source: "iana"
    },
    "application/vnd.mitsubishi.misty-guard.trustweb": {
      source: "iana"
    },
    "application/vnd.mobius.daf": {
      source: "iana",
      extensions: ["daf"]
    },
    "application/vnd.mobius.dis": {
      source: "iana",
      extensions: ["dis"]
    },
    "application/vnd.mobius.mbk": {
      source: "iana",
      extensions: ["mbk"]
    },
    "application/vnd.mobius.mqy": {
      source: "iana",
      extensions: ["mqy"]
    },
    "application/vnd.mobius.msl": {
      source: "iana",
      extensions: ["msl"]
    },
    "application/vnd.mobius.plc": {
      source: "iana",
      extensions: ["plc"]
    },
    "application/vnd.mobius.txf": {
      source: "iana",
      extensions: ["txf"]
    },
    "application/vnd.mophun.application": {
      source: "iana",
      extensions: ["mpn"]
    },
    "application/vnd.mophun.certificate": {
      source: "iana",
      extensions: ["mpc"]
    },
    "application/vnd.motorola.flexsuite": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.adsi": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.fis": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.gotap": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.kmr": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.ttc": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.wem": {
      source: "iana"
    },
    "application/vnd.motorola.iprm": {
      source: "iana"
    },
    "application/vnd.mozilla.xul+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xul"]
    },
    "application/vnd.ms-3mfdocument": {
      source: "iana"
    },
    "application/vnd.ms-artgalry": {
      source: "iana",
      extensions: ["cil"]
    },
    "application/vnd.ms-asf": {
      source: "iana"
    },
    "application/vnd.ms-cab-compressed": {
      source: "iana",
      extensions: ["cab"]
    },
    "application/vnd.ms-color.iccprofile": {
      source: "apache"
    },
    "application/vnd.ms-excel": {
      source: "iana",
      compressible: false,
      extensions: ["xls", "xlm", "xla", "xlc", "xlt", "xlw"]
    },
    "application/vnd.ms-excel.addin.macroenabled.12": {
      source: "iana",
      extensions: ["xlam"]
    },
    "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
      source: "iana",
      extensions: ["xlsb"]
    },
    "application/vnd.ms-excel.sheet.macroenabled.12": {
      source: "iana",
      extensions: ["xlsm"]
    },
    "application/vnd.ms-excel.template.macroenabled.12": {
      source: "iana",
      extensions: ["xltm"]
    },
    "application/vnd.ms-fontobject": {
      source: "iana",
      compressible: true,
      extensions: ["eot"]
    },
    "application/vnd.ms-htmlhelp": {
      source: "iana",
      extensions: ["chm"]
    },
    "application/vnd.ms-ims": {
      source: "iana",
      extensions: ["ims"]
    },
    "application/vnd.ms-lrm": {
      source: "iana",
      extensions: ["lrm"]
    },
    "application/vnd.ms-office.activex+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ms-officetheme": {
      source: "iana",
      extensions: ["thmx"]
    },
    "application/vnd.ms-opentype": {
      source: "apache",
      compressible: true
    },
    "application/vnd.ms-outlook": {
      compressible: false,
      extensions: ["msg"]
    },
    "application/vnd.ms-package.obfuscated-opentype": {
      source: "apache"
    },
    "application/vnd.ms-pki.seccat": {
      source: "apache",
      extensions: ["cat"]
    },
    "application/vnd.ms-pki.stl": {
      source: "apache",
      extensions: ["stl"]
    },
    "application/vnd.ms-playready.initiator+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ms-powerpoint": {
      source: "iana",
      compressible: false,
      extensions: ["ppt", "pps", "pot"]
    },
    "application/vnd.ms-powerpoint.addin.macroenabled.12": {
      source: "iana",
      extensions: ["ppam"]
    },
    "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
      source: "iana",
      extensions: ["pptm"]
    },
    "application/vnd.ms-powerpoint.slide.macroenabled.12": {
      source: "iana",
      extensions: ["sldm"]
    },
    "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
      source: "iana",
      extensions: ["ppsm"]
    },
    "application/vnd.ms-powerpoint.template.macroenabled.12": {
      source: "iana",
      extensions: ["potm"]
    },
    "application/vnd.ms-printdevicecapabilities+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ms-printing.printticket+xml": {
      source: "apache",
      compressible: true
    },
    "application/vnd.ms-printschematicket+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ms-project": {
      source: "iana",
      extensions: ["mpp", "mpt"]
    },
    "application/vnd.ms-tnef": {
      source: "iana"
    },
    "application/vnd.ms-windows.devicepairing": {
      source: "iana"
    },
    "application/vnd.ms-windows.nwprinting.oob": {
      source: "iana"
    },
    "application/vnd.ms-windows.printerpairing": {
      source: "iana"
    },
    "application/vnd.ms-windows.wsd.oob": {
      source: "iana"
    },
    "application/vnd.ms-wmdrm.lic-chlg-req": {
      source: "iana"
    },
    "application/vnd.ms-wmdrm.lic-resp": {
      source: "iana"
    },
    "application/vnd.ms-wmdrm.meter-chlg-req": {
      source: "iana"
    },
    "application/vnd.ms-wmdrm.meter-resp": {
      source: "iana"
    },
    "application/vnd.ms-word.document.macroenabled.12": {
      source: "iana",
      extensions: ["docm"]
    },
    "application/vnd.ms-word.template.macroenabled.12": {
      source: "iana",
      extensions: ["dotm"]
    },
    "application/vnd.ms-works": {
      source: "iana",
      extensions: ["wps", "wks", "wcm", "wdb"]
    },
    "application/vnd.ms-wpl": {
      source: "iana",
      extensions: ["wpl"]
    },
    "application/vnd.ms-xpsdocument": {
      source: "iana",
      compressible: false,
      extensions: ["xps"]
    },
    "application/vnd.msa-disk-image": {
      source: "iana"
    },
    "application/vnd.mseq": {
      source: "iana",
      extensions: ["mseq"]
    },
    "application/vnd.msign": {
      source: "iana"
    },
    "application/vnd.multiad.creator": {
      source: "iana"
    },
    "application/vnd.multiad.creator.cif": {
      source: "iana"
    },
    "application/vnd.music-niff": {
      source: "iana"
    },
    "application/vnd.musician": {
      source: "iana",
      extensions: ["mus"]
    },
    "application/vnd.muvee.style": {
      source: "iana",
      extensions: ["msty"]
    },
    "application/vnd.mynfc": {
      source: "iana",
      extensions: ["taglet"]
    },
    "application/vnd.nacamar.ybrid+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ncd.control": {
      source: "iana"
    },
    "application/vnd.ncd.reference": {
      source: "iana"
    },
    "application/vnd.nearst.inv+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nebumind.line": {
      source: "iana"
    },
    "application/vnd.nervana": {
      source: "iana"
    },
    "application/vnd.netfpx": {
      source: "iana"
    },
    "application/vnd.neurolanguage.nlu": {
      source: "iana",
      extensions: ["nlu"]
    },
    "application/vnd.nimn": {
      source: "iana"
    },
    "application/vnd.nintendo.nitro.rom": {
      source: "iana"
    },
    "application/vnd.nintendo.snes.rom": {
      source: "iana"
    },
    "application/vnd.nitf": {
      source: "iana",
      extensions: ["ntf", "nitf"]
    },
    "application/vnd.noblenet-directory": {
      source: "iana",
      extensions: ["nnd"]
    },
    "application/vnd.noblenet-sealer": {
      source: "iana",
      extensions: ["nns"]
    },
    "application/vnd.noblenet-web": {
      source: "iana",
      extensions: ["nnw"]
    },
    "application/vnd.nokia.catalogs": {
      source: "iana"
    },
    "application/vnd.nokia.conml+wbxml": {
      source: "iana"
    },
    "application/vnd.nokia.conml+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.iptv.config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.isds-radio-presets": {
      source: "iana"
    },
    "application/vnd.nokia.landmark+wbxml": {
      source: "iana"
    },
    "application/vnd.nokia.landmark+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.landmarkcollection+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.n-gage.ac+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ac"]
    },
    "application/vnd.nokia.n-gage.data": {
      source: "iana",
      extensions: ["ngdat"]
    },
    "application/vnd.nokia.n-gage.symbian.install": {
      source: "iana",
      extensions: ["n-gage"]
    },
    "application/vnd.nokia.ncd": {
      source: "iana"
    },
    "application/vnd.nokia.pcd+wbxml": {
      source: "iana"
    },
    "application/vnd.nokia.pcd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.radio-preset": {
      source: "iana",
      extensions: ["rpst"]
    },
    "application/vnd.nokia.radio-presets": {
      source: "iana",
      extensions: ["rpss"]
    },
    "application/vnd.novadigm.edm": {
      source: "iana",
      extensions: ["edm"]
    },
    "application/vnd.novadigm.edx": {
      source: "iana",
      extensions: ["edx"]
    },
    "application/vnd.novadigm.ext": {
      source: "iana",
      extensions: ["ext"]
    },
    "application/vnd.ntt-local.content-share": {
      source: "iana"
    },
    "application/vnd.ntt-local.file-transfer": {
      source: "iana"
    },
    "application/vnd.ntt-local.ogw_remote-access": {
      source: "iana"
    },
    "application/vnd.ntt-local.sip-ta_remote": {
      source: "iana"
    },
    "application/vnd.ntt-local.sip-ta_tcp_stream": {
      source: "iana"
    },
    "application/vnd.oasis.opendocument.chart": {
      source: "iana",
      extensions: ["odc"]
    },
    "application/vnd.oasis.opendocument.chart-template": {
      source: "iana",
      extensions: ["otc"]
    },
    "application/vnd.oasis.opendocument.database": {
      source: "iana",
      extensions: ["odb"]
    },
    "application/vnd.oasis.opendocument.formula": {
      source: "iana",
      extensions: ["odf"]
    },
    "application/vnd.oasis.opendocument.formula-template": {
      source: "iana",
      extensions: ["odft"]
    },
    "application/vnd.oasis.opendocument.graphics": {
      source: "iana",
      compressible: false,
      extensions: ["odg"]
    },
    "application/vnd.oasis.opendocument.graphics-template": {
      source: "iana",
      extensions: ["otg"]
    },
    "application/vnd.oasis.opendocument.image": {
      source: "iana",
      extensions: ["odi"]
    },
    "application/vnd.oasis.opendocument.image-template": {
      source: "iana",
      extensions: ["oti"]
    },
    "application/vnd.oasis.opendocument.presentation": {
      source: "iana",
      compressible: false,
      extensions: ["odp"]
    },
    "application/vnd.oasis.opendocument.presentation-template": {
      source: "iana",
      extensions: ["otp"]
    },
    "application/vnd.oasis.opendocument.spreadsheet": {
      source: "iana",
      compressible: false,
      extensions: ["ods"]
    },
    "application/vnd.oasis.opendocument.spreadsheet-template": {
      source: "iana",
      extensions: ["ots"]
    },
    "application/vnd.oasis.opendocument.text": {
      source: "iana",
      compressible: false,
      extensions: ["odt"]
    },
    "application/vnd.oasis.opendocument.text-master": {
      source: "iana",
      extensions: ["odm"]
    },
    "application/vnd.oasis.opendocument.text-template": {
      source: "iana",
      extensions: ["ott"]
    },
    "application/vnd.oasis.opendocument.text-web": {
      source: "iana",
      extensions: ["oth"]
    },
    "application/vnd.obn": {
      source: "iana"
    },
    "application/vnd.ocf+cbor": {
      source: "iana"
    },
    "application/vnd.oci.image.manifest.v1+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oftn.l10n+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.contentaccessdownload+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.contentaccessstreaming+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.cspg-hexbinary": {
      source: "iana"
    },
    "application/vnd.oipf.dae.svg+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.dae.xhtml+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.mippvcontrolmessage+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.pae.gem": {
      source: "iana"
    },
    "application/vnd.oipf.spdiscovery+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.spdlist+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.ueprofile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.userprofile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.olpc-sugar": {
      source: "iana",
      extensions: ["xo"]
    },
    "application/vnd.oma-scws-config": {
      source: "iana"
    },
    "application/vnd.oma-scws-http-request": {
      source: "iana"
    },
    "application/vnd.oma-scws-http-response": {
      source: "iana"
    },
    "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.drm-trigger+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.imd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.ltkm": {
      source: "iana"
    },
    "application/vnd.oma.bcast.notification+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.provisioningtrigger": {
      source: "iana"
    },
    "application/vnd.oma.bcast.sgboot": {
      source: "iana"
    },
    "application/vnd.oma.bcast.sgdd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.sgdu": {
      source: "iana"
    },
    "application/vnd.oma.bcast.simple-symbol-container": {
      source: "iana"
    },
    "application/vnd.oma.bcast.smartcard-trigger+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.sprov+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.stkm": {
      source: "iana"
    },
    "application/vnd.oma.cab-address-book+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.cab-feature-handler+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.cab-pcc+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.cab-subs-invite+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.cab-user-prefs+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.dcd": {
      source: "iana"
    },
    "application/vnd.oma.dcdc": {
      source: "iana"
    },
    "application/vnd.oma.dd2+xml": {
      source: "iana",
      compressible: true,
      extensions: ["dd2"]
    },
    "application/vnd.oma.drm.risd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.group-usage-list+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.lwm2m+cbor": {
      source: "iana"
    },
    "application/vnd.oma.lwm2m+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.lwm2m+tlv": {
      source: "iana"
    },
    "application/vnd.oma.pal+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.detailed-progress-report+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.final-report+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.groups+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.invocation-descriptor+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.optimized-progress-report+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.push": {
      source: "iana"
    },
    "application/vnd.oma.scidm.messages+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.xcap-directory+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.omads-email+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.omads-file+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.omads-folder+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.omaloc-supl-init": {
      source: "iana"
    },
    "application/vnd.onepager": {
      source: "iana"
    },
    "application/vnd.onepagertamp": {
      source: "iana"
    },
    "application/vnd.onepagertamx": {
      source: "iana"
    },
    "application/vnd.onepagertat": {
      source: "iana"
    },
    "application/vnd.onepagertatp": {
      source: "iana"
    },
    "application/vnd.onepagertatx": {
      source: "iana"
    },
    "application/vnd.openblox.game+xml": {
      source: "iana",
      compressible: true,
      extensions: ["obgx"]
    },
    "application/vnd.openblox.game-binary": {
      source: "iana"
    },
    "application/vnd.openeye.oeb": {
      source: "iana"
    },
    "application/vnd.openofficeorg.extension": {
      source: "apache",
      extensions: ["oxt"]
    },
    "application/vnd.openstreetmap.data+xml": {
      source: "iana",
      compressible: true,
      extensions: ["osm"]
    },
    "application/vnd.opentimestamps.ots": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawing+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
      source: "iana",
      compressible: false,
      extensions: ["pptx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slide": {
      source: "iana",
      extensions: ["sldx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
      source: "iana",
      extensions: ["ppsx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.template": {
      source: "iana",
      extensions: ["potx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
      source: "iana",
      compressible: false,
      extensions: ["xlsx"]
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
      source: "iana",
      extensions: ["xltx"]
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.theme+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.vmldrawing": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
      source: "iana",
      compressible: false,
      extensions: ["docx"]
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
      source: "iana",
      extensions: ["dotx"]
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-package.core-properties+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-package.relationships+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oracle.resource+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.orange.indata": {
      source: "iana"
    },
    "application/vnd.osa.netdeploy": {
      source: "iana"
    },
    "application/vnd.osgeo.mapguide.package": {
      source: "iana",
      extensions: ["mgp"]
    },
    "application/vnd.osgi.bundle": {
      source: "iana"
    },
    "application/vnd.osgi.dp": {
      source: "iana",
      extensions: ["dp"]
    },
    "application/vnd.osgi.subsystem": {
      source: "iana",
      extensions: ["esa"]
    },
    "application/vnd.otps.ct-kip+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oxli.countgraph": {
      source: "iana"
    },
    "application/vnd.pagerduty+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.palm": {
      source: "iana",
      extensions: ["pdb", "pqa", "oprc"]
    },
    "application/vnd.panoply": {
      source: "iana"
    },
    "application/vnd.paos.xml": {
      source: "iana"
    },
    "application/vnd.patentdive": {
      source: "iana"
    },
    "application/vnd.patientecommsdoc": {
      source: "iana"
    },
    "application/vnd.pawaafile": {
      source: "iana",
      extensions: ["paw"]
    },
    "application/vnd.pcos": {
      source: "iana"
    },
    "application/vnd.pg.format": {
      source: "iana",
      extensions: ["str"]
    },
    "application/vnd.pg.osasli": {
      source: "iana",
      extensions: ["ei6"]
    },
    "application/vnd.piaccess.application-licence": {
      source: "iana"
    },
    "application/vnd.picsel": {
      source: "iana",
      extensions: ["efif"]
    },
    "application/vnd.pmi.widget": {
      source: "iana",
      extensions: ["wg"]
    },
    "application/vnd.poc.group-advertisement+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.pocketlearn": {
      source: "iana",
      extensions: ["plf"]
    },
    "application/vnd.powerbuilder6": {
      source: "iana",
      extensions: ["pbd"]
    },
    "application/vnd.powerbuilder6-s": {
      source: "iana"
    },
    "application/vnd.powerbuilder7": {
      source: "iana"
    },
    "application/vnd.powerbuilder7-s": {
      source: "iana"
    },
    "application/vnd.powerbuilder75": {
      source: "iana"
    },
    "application/vnd.powerbuilder75-s": {
      source: "iana"
    },
    "application/vnd.preminet": {
      source: "iana"
    },
    "application/vnd.previewsystems.box": {
      source: "iana",
      extensions: ["box"]
    },
    "application/vnd.proteus.magazine": {
      source: "iana",
      extensions: ["mgz"]
    },
    "application/vnd.psfs": {
      source: "iana"
    },
    "application/vnd.publishare-delta-tree": {
      source: "iana",
      extensions: ["qps"]
    },
    "application/vnd.pvi.ptid1": {
      source: "iana",
      extensions: ["ptid"]
    },
    "application/vnd.pwg-multiplexed": {
      source: "iana"
    },
    "application/vnd.pwg-xhtml-print+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.qualcomm.brew-app-res": {
      source: "iana"
    },
    "application/vnd.quarantainenet": {
      source: "iana"
    },
    "application/vnd.quark.quarkxpress": {
      source: "iana",
      extensions: ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"]
    },
    "application/vnd.quobject-quoxdocument": {
      source: "iana"
    },
    "application/vnd.radisys.moml+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit-conf+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit-conn+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit-dialog+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit-stream+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-conf+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-base+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-fax-detect+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-group+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-speech+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-transform+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.rainstor.data": {
      source: "iana"
    },
    "application/vnd.rapid": {
      source: "iana"
    },
    "application/vnd.rar": {
      source: "iana",
      extensions: ["rar"]
    },
    "application/vnd.realvnc.bed": {
      source: "iana",
      extensions: ["bed"]
    },
    "application/vnd.recordare.musicxml": {
      source: "iana",
      extensions: ["mxl"]
    },
    "application/vnd.recordare.musicxml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["musicxml"]
    },
    "application/vnd.renlearn.rlprint": {
      source: "iana"
    },
    "application/vnd.resilient.logic": {
      source: "iana"
    },
    "application/vnd.restful+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.rig.cryptonote": {
      source: "iana",
      extensions: ["cryptonote"]
    },
    "application/vnd.rim.cod": {
      source: "apache",
      extensions: ["cod"]
    },
    "application/vnd.rn-realmedia": {
      source: "apache",
      extensions: ["rm"]
    },
    "application/vnd.rn-realmedia-vbr": {
      source: "apache",
      extensions: ["rmvb"]
    },
    "application/vnd.route66.link66+xml": {
      source: "iana",
      compressible: true,
      extensions: ["link66"]
    },
    "application/vnd.rs-274x": {
      source: "iana"
    },
    "application/vnd.ruckus.download": {
      source: "iana"
    },
    "application/vnd.s3sms": {
      source: "iana"
    },
    "application/vnd.sailingtracker.track": {
      source: "iana",
      extensions: ["st"]
    },
    "application/vnd.sar": {
      source: "iana"
    },
    "application/vnd.sbm.cid": {
      source: "iana"
    },
    "application/vnd.sbm.mid2": {
      source: "iana"
    },
    "application/vnd.scribus": {
      source: "iana"
    },
    "application/vnd.sealed.3df": {
      source: "iana"
    },
    "application/vnd.sealed.csf": {
      source: "iana"
    },
    "application/vnd.sealed.doc": {
      source: "iana"
    },
    "application/vnd.sealed.eml": {
      source: "iana"
    },
    "application/vnd.sealed.mht": {
      source: "iana"
    },
    "application/vnd.sealed.net": {
      source: "iana"
    },
    "application/vnd.sealed.ppt": {
      source: "iana"
    },
    "application/vnd.sealed.tiff": {
      source: "iana"
    },
    "application/vnd.sealed.xls": {
      source: "iana"
    },
    "application/vnd.sealedmedia.softseal.html": {
      source: "iana"
    },
    "application/vnd.sealedmedia.softseal.pdf": {
      source: "iana"
    },
    "application/vnd.seemail": {
      source: "iana",
      extensions: ["see"]
    },
    "application/vnd.seis+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.sema": {
      source: "iana",
      extensions: ["sema"]
    },
    "application/vnd.semd": {
      source: "iana",
      extensions: ["semd"]
    },
    "application/vnd.semf": {
      source: "iana",
      extensions: ["semf"]
    },
    "application/vnd.shade-save-file": {
      source: "iana"
    },
    "application/vnd.shana.informed.formdata": {
      source: "iana",
      extensions: ["ifm"]
    },
    "application/vnd.shana.informed.formtemplate": {
      source: "iana",
      extensions: ["itp"]
    },
    "application/vnd.shana.informed.interchange": {
      source: "iana",
      extensions: ["iif"]
    },
    "application/vnd.shana.informed.package": {
      source: "iana",
      extensions: ["ipk"]
    },
    "application/vnd.shootproof+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.shopkick+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.shp": {
      source: "iana"
    },
    "application/vnd.shx": {
      source: "iana"
    },
    "application/vnd.sigrok.session": {
      source: "iana"
    },
    "application/vnd.simtech-mindmapper": {
      source: "iana",
      extensions: ["twd", "twds"]
    },
    "application/vnd.siren+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.smaf": {
      source: "iana",
      extensions: ["mmf"]
    },
    "application/vnd.smart.notebook": {
      source: "iana"
    },
    "application/vnd.smart.teacher": {
      source: "iana",
      extensions: ["teacher"]
    },
    "application/vnd.snesdev-page-table": {
      source: "iana"
    },
    "application/vnd.software602.filler.form+xml": {
      source: "iana",
      compressible: true,
      extensions: ["fo"]
    },
    "application/vnd.software602.filler.form-xml-zip": {
      source: "iana"
    },
    "application/vnd.solent.sdkm+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sdkm", "sdkd"]
    },
    "application/vnd.spotfire.dxp": {
      source: "iana",
      extensions: ["dxp"]
    },
    "application/vnd.spotfire.sfs": {
      source: "iana",
      extensions: ["sfs"]
    },
    "application/vnd.sqlite3": {
      source: "iana"
    },
    "application/vnd.sss-cod": {
      source: "iana"
    },
    "application/vnd.sss-dtf": {
      source: "iana"
    },
    "application/vnd.sss-ntf": {
      source: "iana"
    },
    "application/vnd.stardivision.calc": {
      source: "apache",
      extensions: ["sdc"]
    },
    "application/vnd.stardivision.draw": {
      source: "apache",
      extensions: ["sda"]
    },
    "application/vnd.stardivision.impress": {
      source: "apache",
      extensions: ["sdd"]
    },
    "application/vnd.stardivision.math": {
      source: "apache",
      extensions: ["smf"]
    },
    "application/vnd.stardivision.writer": {
      source: "apache",
      extensions: ["sdw", "vor"]
    },
    "application/vnd.stardivision.writer-global": {
      source: "apache",
      extensions: ["sgl"]
    },
    "application/vnd.stepmania.package": {
      source: "iana",
      extensions: ["smzip"]
    },
    "application/vnd.stepmania.stepchart": {
      source: "iana",
      extensions: ["sm"]
    },
    "application/vnd.street-stream": {
      source: "iana"
    },
    "application/vnd.sun.wadl+xml": {
      source: "iana",
      compressible: true,
      extensions: ["wadl"]
    },
    "application/vnd.sun.xml.calc": {
      source: "apache",
      extensions: ["sxc"]
    },
    "application/vnd.sun.xml.calc.template": {
      source: "apache",
      extensions: ["stc"]
    },
    "application/vnd.sun.xml.draw": {
      source: "apache",
      extensions: ["sxd"]
    },
    "application/vnd.sun.xml.draw.template": {
      source: "apache",
      extensions: ["std"]
    },
    "application/vnd.sun.xml.impress": {
      source: "apache",
      extensions: ["sxi"]
    },
    "application/vnd.sun.xml.impress.template": {
      source: "apache",
      extensions: ["sti"]
    },
    "application/vnd.sun.xml.math": {
      source: "apache",
      extensions: ["sxm"]
    },
    "application/vnd.sun.xml.writer": {
      source: "apache",
      extensions: ["sxw"]
    },
    "application/vnd.sun.xml.writer.global": {
      source: "apache",
      extensions: ["sxg"]
    },
    "application/vnd.sun.xml.writer.template": {
      source: "apache",
      extensions: ["stw"]
    },
    "application/vnd.sus-calendar": {
      source: "iana",
      extensions: ["sus", "susp"]
    },
    "application/vnd.svd": {
      source: "iana",
      extensions: ["svd"]
    },
    "application/vnd.swiftview-ics": {
      source: "iana"
    },
    "application/vnd.sycle+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.syft+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.symbian.install": {
      source: "apache",
      extensions: ["sis", "sisx"]
    },
    "application/vnd.syncml+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["xsm"]
    },
    "application/vnd.syncml.dm+wbxml": {
      source: "iana",
      charset: "UTF-8",
      extensions: ["bdm"]
    },
    "application/vnd.syncml.dm+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["xdm"]
    },
    "application/vnd.syncml.dm.notification": {
      source: "iana"
    },
    "application/vnd.syncml.dmddf+wbxml": {
      source: "iana"
    },
    "application/vnd.syncml.dmddf+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["ddf"]
    },
    "application/vnd.syncml.dmtnds+wbxml": {
      source: "iana"
    },
    "application/vnd.syncml.dmtnds+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.syncml.ds.notification": {
      source: "iana"
    },
    "application/vnd.tableschema+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.tao.intent-module-archive": {
      source: "iana",
      extensions: ["tao"]
    },
    "application/vnd.tcpdump.pcap": {
      source: "iana",
      extensions: ["pcap", "cap", "dmp"]
    },
    "application/vnd.think-cell.ppttc+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.tmd.mediaflex.api+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.tml": {
      source: "iana"
    },
    "application/vnd.tmobile-livetv": {
      source: "iana",
      extensions: ["tmo"]
    },
    "application/vnd.tri.onesource": {
      source: "iana"
    },
    "application/vnd.trid.tpt": {
      source: "iana",
      extensions: ["tpt"]
    },
    "application/vnd.triscape.mxs": {
      source: "iana",
      extensions: ["mxs"]
    },
    "application/vnd.trueapp": {
      source: "iana",
      extensions: ["tra"]
    },
    "application/vnd.truedoc": {
      source: "iana"
    },
    "application/vnd.ubisoft.webplayer": {
      source: "iana"
    },
    "application/vnd.ufdl": {
      source: "iana",
      extensions: ["ufd", "ufdl"]
    },
    "application/vnd.uiq.theme": {
      source: "iana",
      extensions: ["utz"]
    },
    "application/vnd.umajin": {
      source: "iana",
      extensions: ["umj"]
    },
    "application/vnd.unity": {
      source: "iana",
      extensions: ["unityweb"]
    },
    "application/vnd.uoml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["uoml"]
    },
    "application/vnd.uplanet.alert": {
      source: "iana"
    },
    "application/vnd.uplanet.alert-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.bearer-choice": {
      source: "iana"
    },
    "application/vnd.uplanet.bearer-choice-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.cacheop": {
      source: "iana"
    },
    "application/vnd.uplanet.cacheop-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.channel": {
      source: "iana"
    },
    "application/vnd.uplanet.channel-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.list": {
      source: "iana"
    },
    "application/vnd.uplanet.list-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.listcmd": {
      source: "iana"
    },
    "application/vnd.uplanet.listcmd-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.signal": {
      source: "iana"
    },
    "application/vnd.uri-map": {
      source: "iana"
    },
    "application/vnd.valve.source.material": {
      source: "iana"
    },
    "application/vnd.vcx": {
      source: "iana",
      extensions: ["vcx"]
    },
    "application/vnd.vd-study": {
      source: "iana"
    },
    "application/vnd.vectorworks": {
      source: "iana"
    },
    "application/vnd.vel+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.verimatrix.vcas": {
      source: "iana"
    },
    "application/vnd.veritone.aion+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.veryant.thin": {
      source: "iana"
    },
    "application/vnd.ves.encrypted": {
      source: "iana"
    },
    "application/vnd.vidsoft.vidconference": {
      source: "iana"
    },
    "application/vnd.visio": {
      source: "iana",
      extensions: ["vsd", "vst", "vss", "vsw"]
    },
    "application/vnd.visionary": {
      source: "iana",
      extensions: ["vis"]
    },
    "application/vnd.vividence.scriptfile": {
      source: "iana"
    },
    "application/vnd.vsf": {
      source: "iana",
      extensions: ["vsf"]
    },
    "application/vnd.wap.sic": {
      source: "iana"
    },
    "application/vnd.wap.slc": {
      source: "iana"
    },
    "application/vnd.wap.wbxml": {
      source: "iana",
      charset: "UTF-8",
      extensions: ["wbxml"]
    },
    "application/vnd.wap.wmlc": {
      source: "iana",
      extensions: ["wmlc"]
    },
    "application/vnd.wap.wmlscriptc": {
      source: "iana",
      extensions: ["wmlsc"]
    },
    "application/vnd.webturbo": {
      source: "iana",
      extensions: ["wtb"]
    },
    "application/vnd.wfa.dpp": {
      source: "iana"
    },
    "application/vnd.wfa.p2p": {
      source: "iana"
    },
    "application/vnd.wfa.wsc": {
      source: "iana"
    },
    "application/vnd.windows.devicepairing": {
      source: "iana"
    },
    "application/vnd.wmc": {
      source: "iana"
    },
    "application/vnd.wmf.bootstrap": {
      source: "iana"
    },
    "application/vnd.wolfram.mathematica": {
      source: "iana"
    },
    "application/vnd.wolfram.mathematica.package": {
      source: "iana"
    },
    "application/vnd.wolfram.player": {
      source: "iana",
      extensions: ["nbp"]
    },
    "application/vnd.wordperfect": {
      source: "iana",
      extensions: ["wpd"]
    },
    "application/vnd.wqd": {
      source: "iana",
      extensions: ["wqd"]
    },
    "application/vnd.wrq-hp3000-labelled": {
      source: "iana"
    },
    "application/vnd.wt.stf": {
      source: "iana",
      extensions: ["stf"]
    },
    "application/vnd.wv.csp+wbxml": {
      source: "iana"
    },
    "application/vnd.wv.csp+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.wv.ssp+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.xacml+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.xara": {
      source: "iana",
      extensions: ["xar"]
    },
    "application/vnd.xfdl": {
      source: "iana",
      extensions: ["xfdl"]
    },
    "application/vnd.xfdl.webform": {
      source: "iana"
    },
    "application/vnd.xmi+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.xmpie.cpkg": {
      source: "iana"
    },
    "application/vnd.xmpie.dpkg": {
      source: "iana"
    },
    "application/vnd.xmpie.plan": {
      source: "iana"
    },
    "application/vnd.xmpie.ppkg": {
      source: "iana"
    },
    "application/vnd.xmpie.xlim": {
      source: "iana"
    },
    "application/vnd.yamaha.hv-dic": {
      source: "iana",
      extensions: ["hvd"]
    },
    "application/vnd.yamaha.hv-script": {
      source: "iana",
      extensions: ["hvs"]
    },
    "application/vnd.yamaha.hv-voice": {
      source: "iana",
      extensions: ["hvp"]
    },
    "application/vnd.yamaha.openscoreformat": {
      source: "iana",
      extensions: ["osf"]
    },
    "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
      source: "iana",
      compressible: true,
      extensions: ["osfpvg"]
    },
    "application/vnd.yamaha.remote-setup": {
      source: "iana"
    },
    "application/vnd.yamaha.smaf-audio": {
      source: "iana",
      extensions: ["saf"]
    },
    "application/vnd.yamaha.smaf-phrase": {
      source: "iana",
      extensions: ["spf"]
    },
    "application/vnd.yamaha.through-ngn": {
      source: "iana"
    },
    "application/vnd.yamaha.tunnel-udpencap": {
      source: "iana"
    },
    "application/vnd.yaoweme": {
      source: "iana"
    },
    "application/vnd.yellowriver-custom-menu": {
      source: "iana",
      extensions: ["cmp"]
    },
    "application/vnd.youtube.yt": {
      source: "iana"
    },
    "application/vnd.zul": {
      source: "iana",
      extensions: ["zir", "zirz"]
    },
    "application/vnd.zzazz.deck+xml": {
      source: "iana",
      compressible: true,
      extensions: ["zaz"]
    },
    "application/voicexml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["vxml"]
    },
    "application/voucher-cms+json": {
      source: "iana",
      compressible: true
    },
    "application/vq-rtcpxr": {
      source: "iana"
    },
    "application/wasm": {
      source: "iana",
      compressible: true,
      extensions: ["wasm"]
    },
    "application/watcherinfo+xml": {
      source: "iana",
      compressible: true,
      extensions: ["wif"]
    },
    "application/webpush-options+json": {
      source: "iana",
      compressible: true
    },
    "application/whoispp-query": {
      source: "iana"
    },
    "application/whoispp-response": {
      source: "iana"
    },
    "application/widget": {
      source: "iana",
      extensions: ["wgt"]
    },
    "application/winhlp": {
      source: "apache",
      extensions: ["hlp"]
    },
    "application/wita": {
      source: "iana"
    },
    "application/wordperfect5.1": {
      source: "iana"
    },
    "application/wsdl+xml": {
      source: "iana",
      compressible: true,
      extensions: ["wsdl"]
    },
    "application/wspolicy+xml": {
      source: "iana",
      compressible: true,
      extensions: ["wspolicy"]
    },
    "application/x-7z-compressed": {
      source: "apache",
      compressible: false,
      extensions: ["7z"]
    },
    "application/x-abiword": {
      source: "apache",
      extensions: ["abw"]
    },
    "application/x-ace-compressed": {
      source: "apache",
      extensions: ["ace"]
    },
    "application/x-amf": {
      source: "apache"
    },
    "application/x-apple-diskimage": {
      source: "apache",
      extensions: ["dmg"]
    },
    "application/x-arj": {
      compressible: false,
      extensions: ["arj"]
    },
    "application/x-authorware-bin": {
      source: "apache",
      extensions: ["aab", "x32", "u32", "vox"]
    },
    "application/x-authorware-map": {
      source: "apache",
      extensions: ["aam"]
    },
    "application/x-authorware-seg": {
      source: "apache",
      extensions: ["aas"]
    },
    "application/x-bcpio": {
      source: "apache",
      extensions: ["bcpio"]
    },
    "application/x-bdoc": {
      compressible: false,
      extensions: ["bdoc"]
    },
    "application/x-bittorrent": {
      source: "apache",
      extensions: ["torrent"]
    },
    "application/x-blorb": {
      source: "apache",
      extensions: ["blb", "blorb"]
    },
    "application/x-bzip": {
      source: "apache",
      compressible: false,
      extensions: ["bz"]
    },
    "application/x-bzip2": {
      source: "apache",
      compressible: false,
      extensions: ["bz2", "boz"]
    },
    "application/x-cbr": {
      source: "apache",
      extensions: ["cbr", "cba", "cbt", "cbz", "cb7"]
    },
    "application/x-cdlink": {
      source: "apache",
      extensions: ["vcd"]
    },
    "application/x-cfs-compressed": {
      source: "apache",
      extensions: ["cfs"]
    },
    "application/x-chat": {
      source: "apache",
      extensions: ["chat"]
    },
    "application/x-chess-pgn": {
      source: "apache",
      extensions: ["pgn"]
    },
    "application/x-chrome-extension": {
      extensions: ["crx"]
    },
    "application/x-cocoa": {
      source: "nginx",
      extensions: ["cco"]
    },
    "application/x-compress": {
      source: "apache"
    },
    "application/x-conference": {
      source: "apache",
      extensions: ["nsc"]
    },
    "application/x-cpio": {
      source: "apache",
      extensions: ["cpio"]
    },
    "application/x-csh": {
      source: "apache",
      extensions: ["csh"]
    },
    "application/x-deb": {
      compressible: false
    },
    "application/x-debian-package": {
      source: "apache",
      extensions: ["deb", "udeb"]
    },
    "application/x-dgc-compressed": {
      source: "apache",
      extensions: ["dgc"]
    },
    "application/x-director": {
      source: "apache",
      extensions: ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"]
    },
    "application/x-doom": {
      source: "apache",
      extensions: ["wad"]
    },
    "application/x-dtbncx+xml": {
      source: "apache",
      compressible: true,
      extensions: ["ncx"]
    },
    "application/x-dtbook+xml": {
      source: "apache",
      compressible: true,
      extensions: ["dtb"]
    },
    "application/x-dtbresource+xml": {
      source: "apache",
      compressible: true,
      extensions: ["res"]
    },
    "application/x-dvi": {
      source: "apache",
      compressible: false,
      extensions: ["dvi"]
    },
    "application/x-envoy": {
      source: "apache",
      extensions: ["evy"]
    },
    "application/x-eva": {
      source: "apache",
      extensions: ["eva"]
    },
    "application/x-font-bdf": {
      source: "apache",
      extensions: ["bdf"]
    },
    "application/x-font-dos": {
      source: "apache"
    },
    "application/x-font-framemaker": {
      source: "apache"
    },
    "application/x-font-ghostscript": {
      source: "apache",
      extensions: ["gsf"]
    },
    "application/x-font-libgrx": {
      source: "apache"
    },
    "application/x-font-linux-psf": {
      source: "apache",
      extensions: ["psf"]
    },
    "application/x-font-pcf": {
      source: "apache",
      extensions: ["pcf"]
    },
    "application/x-font-snf": {
      source: "apache",
      extensions: ["snf"]
    },
    "application/x-font-speedo": {
      source: "apache"
    },
    "application/x-font-sunos-news": {
      source: "apache"
    },
    "application/x-font-type1": {
      source: "apache",
      extensions: ["pfa", "pfb", "pfm", "afm"]
    },
    "application/x-font-vfont": {
      source: "apache"
    },
    "application/x-freearc": {
      source: "apache",
      extensions: ["arc"]
    },
    "application/x-futuresplash": {
      source: "apache",
      extensions: ["spl"]
    },
    "application/x-gca-compressed": {
      source: "apache",
      extensions: ["gca"]
    },
    "application/x-glulx": {
      source: "apache",
      extensions: ["ulx"]
    },
    "application/x-gnumeric": {
      source: "apache",
      extensions: ["gnumeric"]
    },
    "application/x-gramps-xml": {
      source: "apache",
      extensions: ["gramps"]
    },
    "application/x-gtar": {
      source: "apache",
      extensions: ["gtar"]
    },
    "application/x-gzip": {
      source: "apache"
    },
    "application/x-hdf": {
      source: "apache",
      extensions: ["hdf"]
    },
    "application/x-httpd-php": {
      compressible: true,
      extensions: ["php"]
    },
    "application/x-install-instructions": {
      source: "apache",
      extensions: ["install"]
    },
    "application/x-iso9660-image": {
      source: "apache",
      extensions: ["iso"]
    },
    "application/x-iwork-keynote-sffkey": {
      extensions: ["key"]
    },
    "application/x-iwork-numbers-sffnumbers": {
      extensions: ["numbers"]
    },
    "application/x-iwork-pages-sffpages": {
      extensions: ["pages"]
    },
    "application/x-java-archive-diff": {
      source: "nginx",
      extensions: ["jardiff"]
    },
    "application/x-java-jnlp-file": {
      source: "apache",
      compressible: false,
      extensions: ["jnlp"]
    },
    "application/x-javascript": {
      compressible: true
    },
    "application/x-keepass2": {
      extensions: ["kdbx"]
    },
    "application/x-latex": {
      source: "apache",
      compressible: false,
      extensions: ["latex"]
    },
    "application/x-lua-bytecode": {
      extensions: ["luac"]
    },
    "application/x-lzh-compressed": {
      source: "apache",
      extensions: ["lzh", "lha"]
    },
    "application/x-makeself": {
      source: "nginx",
      extensions: ["run"]
    },
    "application/x-mie": {
      source: "apache",
      extensions: ["mie"]
    },
    "application/x-mobipocket-ebook": {
      source: "apache",
      extensions: ["prc", "mobi"]
    },
    "application/x-mpegurl": {
      compressible: false
    },
    "application/x-ms-application": {
      source: "apache",
      extensions: ["application"]
    },
    "application/x-ms-shortcut": {
      source: "apache",
      extensions: ["lnk"]
    },
    "application/x-ms-wmd": {
      source: "apache",
      extensions: ["wmd"]
    },
    "application/x-ms-wmz": {
      source: "apache",
      extensions: ["wmz"]
    },
    "application/x-ms-xbap": {
      source: "apache",
      extensions: ["xbap"]
    },
    "application/x-msaccess": {
      source: "apache",
      extensions: ["mdb"]
    },
    "application/x-msbinder": {
      source: "apache",
      extensions: ["obd"]
    },
    "application/x-mscardfile": {
      source: "apache",
      extensions: ["crd"]
    },
    "application/x-msclip": {
      source: "apache",
      extensions: ["clp"]
    },
    "application/x-msdos-program": {
      extensions: ["exe"]
    },
    "application/x-msdownload": {
      source: "apache",
      extensions: ["exe", "dll", "com", "bat", "msi"]
    },
    "application/x-msmediaview": {
      source: "apache",
      extensions: ["mvb", "m13", "m14"]
    },
    "application/x-msmetafile": {
      source: "apache",
      extensions: ["wmf", "wmz", "emf", "emz"]
    },
    "application/x-msmoney": {
      source: "apache",
      extensions: ["mny"]
    },
    "application/x-mspublisher": {
      source: "apache",
      extensions: ["pub"]
    },
    "application/x-msschedule": {
      source: "apache",
      extensions: ["scd"]
    },
    "application/x-msterminal": {
      source: "apache",
      extensions: ["trm"]
    },
    "application/x-mswrite": {
      source: "apache",
      extensions: ["wri"]
    },
    "application/x-netcdf": {
      source: "apache",
      extensions: ["nc", "cdf"]
    },
    "application/x-ns-proxy-autoconfig": {
      compressible: true,
      extensions: ["pac"]
    },
    "application/x-nzb": {
      source: "apache",
      extensions: ["nzb"]
    },
    "application/x-perl": {
      source: "nginx",
      extensions: ["pl", "pm"]
    },
    "application/x-pilot": {
      source: "nginx",
      extensions: ["prc", "pdb"]
    },
    "application/x-pkcs12": {
      source: "apache",
      compressible: false,
      extensions: ["p12", "pfx"]
    },
    "application/x-pkcs7-certificates": {
      source: "apache",
      extensions: ["p7b", "spc"]
    },
    "application/x-pkcs7-certreqresp": {
      source: "apache",
      extensions: ["p7r"]
    },
    "application/x-pki-message": {
      source: "iana"
    },
    "application/x-rar-compressed": {
      source: "apache",
      compressible: false,
      extensions: ["rar"]
    },
    "application/x-redhat-package-manager": {
      source: "nginx",
      extensions: ["rpm"]
    },
    "application/x-research-info-systems": {
      source: "apache",
      extensions: ["ris"]
    },
    "application/x-sea": {
      source: "nginx",
      extensions: ["sea"]
    },
    "application/x-sh": {
      source: "apache",
      compressible: true,
      extensions: ["sh"]
    },
    "application/x-shar": {
      source: "apache",
      extensions: ["shar"]
    },
    "application/x-shockwave-flash": {
      source: "apache",
      compressible: false,
      extensions: ["swf"]
    },
    "application/x-silverlight-app": {
      source: "apache",
      extensions: ["xap"]
    },
    "application/x-sql": {
      source: "apache",
      extensions: ["sql"]
    },
    "application/x-stuffit": {
      source: "apache",
      compressible: false,
      extensions: ["sit"]
    },
    "application/x-stuffitx": {
      source: "apache",
      extensions: ["sitx"]
    },
    "application/x-subrip": {
      source: "apache",
      extensions: ["srt"]
    },
    "application/x-sv4cpio": {
      source: "apache",
      extensions: ["sv4cpio"]
    },
    "application/x-sv4crc": {
      source: "apache",
      extensions: ["sv4crc"]
    },
    "application/x-t3vm-image": {
      source: "apache",
      extensions: ["t3"]
    },
    "application/x-tads": {
      source: "apache",
      extensions: ["gam"]
    },
    "application/x-tar": {
      source: "apache",
      compressible: true,
      extensions: ["tar"]
    },
    "application/x-tcl": {
      source: "apache",
      extensions: ["tcl", "tk"]
    },
    "application/x-tex": {
      source: "apache",
      extensions: ["tex"]
    },
    "application/x-tex-tfm": {
      source: "apache",
      extensions: ["tfm"]
    },
    "application/x-texinfo": {
      source: "apache",
      extensions: ["texinfo", "texi"]
    },
    "application/x-tgif": {
      source: "apache",
      extensions: ["obj"]
    },
    "application/x-ustar": {
      source: "apache",
      extensions: ["ustar"]
    },
    "application/x-virtualbox-hdd": {
      compressible: true,
      extensions: ["hdd"]
    },
    "application/x-virtualbox-ova": {
      compressible: true,
      extensions: ["ova"]
    },
    "application/x-virtualbox-ovf": {
      compressible: true,
      extensions: ["ovf"]
    },
    "application/x-virtualbox-vbox": {
      compressible: true,
      extensions: ["vbox"]
    },
    "application/x-virtualbox-vbox-extpack": {
      compressible: false,
      extensions: ["vbox-extpack"]
    },
    "application/x-virtualbox-vdi": {
      compressible: true,
      extensions: ["vdi"]
    },
    "application/x-virtualbox-vhd": {
      compressible: true,
      extensions: ["vhd"]
    },
    "application/x-virtualbox-vmdk": {
      compressible: true,
      extensions: ["vmdk"]
    },
    "application/x-wais-source": {
      source: "apache",
      extensions: ["src"]
    },
    "application/x-web-app-manifest+json": {
      compressible: true,
      extensions: ["webapp"]
    },
    "application/x-www-form-urlencoded": {
      source: "iana",
      compressible: true
    },
    "application/x-x509-ca-cert": {
      source: "iana",
      extensions: ["der", "crt", "pem"]
    },
    "application/x-x509-ca-ra-cert": {
      source: "iana"
    },
    "application/x-x509-next-ca-cert": {
      source: "iana"
    },
    "application/x-xfig": {
      source: "apache",
      extensions: ["fig"]
    },
    "application/x-xliff+xml": {
      source: "apache",
      compressible: true,
      extensions: ["xlf"]
    },
    "application/x-xpinstall": {
      source: "apache",
      compressible: false,
      extensions: ["xpi"]
    },
    "application/x-xz": {
      source: "apache",
      extensions: ["xz"]
    },
    "application/x-zmachine": {
      source: "apache",
      extensions: ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"]
    },
    "application/x400-bp": {
      source: "iana"
    },
    "application/xacml+xml": {
      source: "iana",
      compressible: true
    },
    "application/xaml+xml": {
      source: "apache",
      compressible: true,
      extensions: ["xaml"]
    },
    "application/xcap-att+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xav"]
    },
    "application/xcap-caps+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xca"]
    },
    "application/xcap-diff+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xdf"]
    },
    "application/xcap-el+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xel"]
    },
    "application/xcap-error+xml": {
      source: "iana",
      compressible: true
    },
    "application/xcap-ns+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xns"]
    },
    "application/xcon-conference-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/xcon-conference-info-diff+xml": {
      source: "iana",
      compressible: true
    },
    "application/xenc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xenc"]
    },
    "application/xhtml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xhtml", "xht"]
    },
    "application/xhtml-voice+xml": {
      source: "apache",
      compressible: true
    },
    "application/xliff+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xlf"]
    },
    "application/xml": {
      source: "iana",
      compressible: true,
      extensions: ["xml", "xsl", "xsd", "rng"]
    },
    "application/xml-dtd": {
      source: "iana",
      compressible: true,
      extensions: ["dtd"]
    },
    "application/xml-external-parsed-entity": {
      source: "iana"
    },
    "application/xml-patch+xml": {
      source: "iana",
      compressible: true
    },
    "application/xmpp+xml": {
      source: "iana",
      compressible: true
    },
    "application/xop+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xop"]
    },
    "application/xproc+xml": {
      source: "apache",
      compressible: true,
      extensions: ["xpl"]
    },
    "application/xslt+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xsl", "xslt"]
    },
    "application/xspf+xml": {
      source: "apache",
      compressible: true,
      extensions: ["xspf"]
    },
    "application/xv+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mxml", "xhvml", "xvml", "xvm"]
    },
    "application/yang": {
      source: "iana",
      extensions: ["yang"]
    },
    "application/yang-data+json": {
      source: "iana",
      compressible: true
    },
    "application/yang-data+xml": {
      source: "iana",
      compressible: true
    },
    "application/yang-patch+json": {
      source: "iana",
      compressible: true
    },
    "application/yang-patch+xml": {
      source: "iana",
      compressible: true
    },
    "application/yin+xml": {
      source: "iana",
      compressible: true,
      extensions: ["yin"]
    },
    "application/zip": {
      source: "iana",
      compressible: false,
      extensions: ["zip"]
    },
    "application/zlib": {
      source: "iana"
    },
    "application/zstd": {
      source: "iana"
    },
    "audio/1d-interleaved-parityfec": {
      source: "iana"
    },
    "audio/32kadpcm": {
      source: "iana"
    },
    "audio/3gpp": {
      source: "iana",
      compressible: false,
      extensions: ["3gpp"]
    },
    "audio/3gpp2": {
      source: "iana"
    },
    "audio/aac": {
      source: "iana"
    },
    "audio/ac3": {
      source: "iana"
    },
    "audio/adpcm": {
      source: "apache",
      extensions: ["adp"]
    },
    "audio/amr": {
      source: "iana",
      extensions: ["amr"]
    },
    "audio/amr-wb": {
      source: "iana"
    },
    "audio/amr-wb+": {
      source: "iana"
    },
    "audio/aptx": {
      source: "iana"
    },
    "audio/asc": {
      source: "iana"
    },
    "audio/atrac-advanced-lossless": {
      source: "iana"
    },
    "audio/atrac-x": {
      source: "iana"
    },
    "audio/atrac3": {
      source: "iana"
    },
    "audio/basic": {
      source: "iana",
      compressible: false,
      extensions: ["au", "snd"]
    },
    "audio/bv16": {
      source: "iana"
    },
    "audio/bv32": {
      source: "iana"
    },
    "audio/clearmode": {
      source: "iana"
    },
    "audio/cn": {
      source: "iana"
    },
    "audio/dat12": {
      source: "iana"
    },
    "audio/dls": {
      source: "iana"
    },
    "audio/dsr-es201108": {
      source: "iana"
    },
    "audio/dsr-es202050": {
      source: "iana"
    },
    "audio/dsr-es202211": {
      source: "iana"
    },
    "audio/dsr-es202212": {
      source: "iana"
    },
    "audio/dv": {
      source: "iana"
    },
    "audio/dvi4": {
      source: "iana"
    },
    "audio/eac3": {
      source: "iana"
    },
    "audio/encaprtp": {
      source: "iana"
    },
    "audio/evrc": {
      source: "iana"
    },
    "audio/evrc-qcp": {
      source: "iana"
    },
    "audio/evrc0": {
      source: "iana"
    },
    "audio/evrc1": {
      source: "iana"
    },
    "audio/evrcb": {
      source: "iana"
    },
    "audio/evrcb0": {
      source: "iana"
    },
    "audio/evrcb1": {
      source: "iana"
    },
    "audio/evrcnw": {
      source: "iana"
    },
    "audio/evrcnw0": {
      source: "iana"
    },
    "audio/evrcnw1": {
      source: "iana"
    },
    "audio/evrcwb": {
      source: "iana"
    },
    "audio/evrcwb0": {
      source: "iana"
    },
    "audio/evrcwb1": {
      source: "iana"
    },
    "audio/evs": {
      source: "iana"
    },
    "audio/flexfec": {
      source: "iana"
    },
    "audio/fwdred": {
      source: "iana"
    },
    "audio/g711-0": {
      source: "iana"
    },
    "audio/g719": {
      source: "iana"
    },
    "audio/g722": {
      source: "iana"
    },
    "audio/g7221": {
      source: "iana"
    },
    "audio/g723": {
      source: "iana"
    },
    "audio/g726-16": {
      source: "iana"
    },
    "audio/g726-24": {
      source: "iana"
    },
    "audio/g726-32": {
      source: "iana"
    },
    "audio/g726-40": {
      source: "iana"
    },
    "audio/g728": {
      source: "iana"
    },
    "audio/g729": {
      source: "iana"
    },
    "audio/g7291": {
      source: "iana"
    },
    "audio/g729d": {
      source: "iana"
    },
    "audio/g729e": {
      source: "iana"
    },
    "audio/gsm": {
      source: "iana"
    },
    "audio/gsm-efr": {
      source: "iana"
    },
    "audio/gsm-hr-08": {
      source: "iana"
    },
    "audio/ilbc": {
      source: "iana"
    },
    "audio/ip-mr_v2.5": {
      source: "iana"
    },
    "audio/isac": {
      source: "apache"
    },
    "audio/l16": {
      source: "iana"
    },
    "audio/l20": {
      source: "iana"
    },
    "audio/l24": {
      source: "iana",
      compressible: false
    },
    "audio/l8": {
      source: "iana"
    },
    "audio/lpc": {
      source: "iana"
    },
    "audio/melp": {
      source: "iana"
    },
    "audio/melp1200": {
      source: "iana"
    },
    "audio/melp2400": {
      source: "iana"
    },
    "audio/melp600": {
      source: "iana"
    },
    "audio/mhas": {
      source: "iana"
    },
    "audio/midi": {
      source: "apache",
      extensions: ["mid", "midi", "kar", "rmi"]
    },
    "audio/mobile-xmf": {
      source: "iana",
      extensions: ["mxmf"]
    },
    "audio/mp3": {
      compressible: false,
      extensions: ["mp3"]
    },
    "audio/mp4": {
      source: "iana",
      compressible: false,
      extensions: ["m4a", "mp4a"]
    },
    "audio/mp4a-latm": {
      source: "iana"
    },
    "audio/mpa": {
      source: "iana"
    },
    "audio/mpa-robust": {
      source: "iana"
    },
    "audio/mpeg": {
      source: "iana",
      compressible: false,
      extensions: ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"]
    },
    "audio/mpeg4-generic": {
      source: "iana"
    },
    "audio/musepack": {
      source: "apache"
    },
    "audio/ogg": {
      source: "iana",
      compressible: false,
      extensions: ["oga", "ogg", "spx", "opus"]
    },
    "audio/opus": {
      source: "iana"
    },
    "audio/parityfec": {
      source: "iana"
    },
    "audio/pcma": {
      source: "iana"
    },
    "audio/pcma-wb": {
      source: "iana"
    },
    "audio/pcmu": {
      source: "iana"
    },
    "audio/pcmu-wb": {
      source: "iana"
    },
    "audio/prs.sid": {
      source: "iana"
    },
    "audio/qcelp": {
      source: "iana"
    },
    "audio/raptorfec": {
      source: "iana"
    },
    "audio/red": {
      source: "iana"
    },
    "audio/rtp-enc-aescm128": {
      source: "iana"
    },
    "audio/rtp-midi": {
      source: "iana"
    },
    "audio/rtploopback": {
      source: "iana"
    },
    "audio/rtx": {
      source: "iana"
    },
    "audio/s3m": {
      source: "apache",
      extensions: ["s3m"]
    },
    "audio/scip": {
      source: "iana"
    },
    "audio/silk": {
      source: "apache",
      extensions: ["sil"]
    },
    "audio/smv": {
      source: "iana"
    },
    "audio/smv-qcp": {
      source: "iana"
    },
    "audio/smv0": {
      source: "iana"
    },
    "audio/sofa": {
      source: "iana"
    },
    "audio/sp-midi": {
      source: "iana"
    },
    "audio/speex": {
      source: "iana"
    },
    "audio/t140c": {
      source: "iana"
    },
    "audio/t38": {
      source: "iana"
    },
    "audio/telephone-event": {
      source: "iana"
    },
    "audio/tetra_acelp": {
      source: "iana"
    },
    "audio/tetra_acelp_bb": {
      source: "iana"
    },
    "audio/tone": {
      source: "iana"
    },
    "audio/tsvcis": {
      source: "iana"
    },
    "audio/uemclip": {
      source: "iana"
    },
    "audio/ulpfec": {
      source: "iana"
    },
    "audio/usac": {
      source: "iana"
    },
    "audio/vdvi": {
      source: "iana"
    },
    "audio/vmr-wb": {
      source: "iana"
    },
    "audio/vnd.3gpp.iufp": {
      source: "iana"
    },
    "audio/vnd.4sb": {
      source: "iana"
    },
    "audio/vnd.audiokoz": {
      source: "iana"
    },
    "audio/vnd.celp": {
      source: "iana"
    },
    "audio/vnd.cisco.nse": {
      source: "iana"
    },
    "audio/vnd.cmles.radio-events": {
      source: "iana"
    },
    "audio/vnd.cns.anp1": {
      source: "iana"
    },
    "audio/vnd.cns.inf1": {
      source: "iana"
    },
    "audio/vnd.dece.audio": {
      source: "iana",
      extensions: ["uva", "uvva"]
    },
    "audio/vnd.digital-winds": {
      source: "iana",
      extensions: ["eol"]
    },
    "audio/vnd.dlna.adts": {
      source: "iana"
    },
    "audio/vnd.dolby.heaac.1": {
      source: "iana"
    },
    "audio/vnd.dolby.heaac.2": {
      source: "iana"
    },
    "audio/vnd.dolby.mlp": {
      source: "iana"
    },
    "audio/vnd.dolby.mps": {
      source: "iana"
    },
    "audio/vnd.dolby.pl2": {
      source: "iana"
    },
    "audio/vnd.dolby.pl2x": {
      source: "iana"
    },
    "audio/vnd.dolby.pl2z": {
      source: "iana"
    },
    "audio/vnd.dolby.pulse.1": {
      source: "iana"
    },
    "audio/vnd.dra": {
      source: "iana",
      extensions: ["dra"]
    },
    "audio/vnd.dts": {
      source: "iana",
      extensions: ["dts"]
    },
    "audio/vnd.dts.hd": {
      source: "iana",
      extensions: ["dtshd"]
    },
    "audio/vnd.dts.uhd": {
      source: "iana"
    },
    "audio/vnd.dvb.file": {
      source: "iana"
    },
    "audio/vnd.everad.plj": {
      source: "iana"
    },
    "audio/vnd.hns.audio": {
      source: "iana"
    },
    "audio/vnd.lucent.voice": {
      source: "iana",
      extensions: ["lvp"]
    },
    "audio/vnd.ms-playready.media.pya": {
      source: "iana",
      extensions: ["pya"]
    },
    "audio/vnd.nokia.mobile-xmf": {
      source: "iana"
    },
    "audio/vnd.nortel.vbk": {
      source: "iana"
    },
    "audio/vnd.nuera.ecelp4800": {
      source: "iana",
      extensions: ["ecelp4800"]
    },
    "audio/vnd.nuera.ecelp7470": {
      source: "iana",
      extensions: ["ecelp7470"]
    },
    "audio/vnd.nuera.ecelp9600": {
      source: "iana",
      extensions: ["ecelp9600"]
    },
    "audio/vnd.octel.sbc": {
      source: "iana"
    },
    "audio/vnd.presonus.multitrack": {
      source: "iana"
    },
    "audio/vnd.qcelp": {
      source: "iana"
    },
    "audio/vnd.rhetorex.32kadpcm": {
      source: "iana"
    },
    "audio/vnd.rip": {
      source: "iana",
      extensions: ["rip"]
    },
    "audio/vnd.rn-realaudio": {
      compressible: false
    },
    "audio/vnd.sealedmedia.softseal.mpeg": {
      source: "iana"
    },
    "audio/vnd.vmx.cvsd": {
      source: "iana"
    },
    "audio/vnd.wave": {
      compressible: false
    },
    "audio/vorbis": {
      source: "iana",
      compressible: false
    },
    "audio/vorbis-config": {
      source: "iana"
    },
    "audio/wav": {
      compressible: false,
      extensions: ["wav"]
    },
    "audio/wave": {
      compressible: false,
      extensions: ["wav"]
    },
    "audio/webm": {
      source: "apache",
      compressible: false,
      extensions: ["weba"]
    },
    "audio/x-aac": {
      source: "apache",
      compressible: false,
      extensions: ["aac"]
    },
    "audio/x-aiff": {
      source: "apache",
      extensions: ["aif", "aiff", "aifc"]
    },
    "audio/x-caf": {
      source: "apache",
      compressible: false,
      extensions: ["caf"]
    },
    "audio/x-flac": {
      source: "apache",
      extensions: ["flac"]
    },
    "audio/x-m4a": {
      source: "nginx",
      extensions: ["m4a"]
    },
    "audio/x-matroska": {
      source: "apache",
      extensions: ["mka"]
    },
    "audio/x-mpegurl": {
      source: "apache",
      extensions: ["m3u"]
    },
    "audio/x-ms-wax": {
      source: "apache",
      extensions: ["wax"]
    },
    "audio/x-ms-wma": {
      source: "apache",
      extensions: ["wma"]
    },
    "audio/x-pn-realaudio": {
      source: "apache",
      extensions: ["ram", "ra"]
    },
    "audio/x-pn-realaudio-plugin": {
      source: "apache",
      extensions: ["rmp"]
    },
    "audio/x-realaudio": {
      source: "nginx",
      extensions: ["ra"]
    },
    "audio/x-tta": {
      source: "apache"
    },
    "audio/x-wav": {
      source: "apache",
      extensions: ["wav"]
    },
    "audio/xm": {
      source: "apache",
      extensions: ["xm"]
    },
    "chemical/x-cdx": {
      source: "apache",
      extensions: ["cdx"]
    },
    "chemical/x-cif": {
      source: "apache",
      extensions: ["cif"]
    },
    "chemical/x-cmdf": {
      source: "apache",
      extensions: ["cmdf"]
    },
    "chemical/x-cml": {
      source: "apache",
      extensions: ["cml"]
    },
    "chemical/x-csml": {
      source: "apache",
      extensions: ["csml"]
    },
    "chemical/x-pdb": {
      source: "apache"
    },
    "chemical/x-xyz": {
      source: "apache",
      extensions: ["xyz"]
    },
    "font/collection": {
      source: "iana",
      extensions: ["ttc"]
    },
    "font/otf": {
      source: "iana",
      compressible: true,
      extensions: ["otf"]
    },
    "font/sfnt": {
      source: "iana"
    },
    "font/ttf": {
      source: "iana",
      compressible: true,
      extensions: ["ttf"]
    },
    "font/woff": {
      source: "iana",
      extensions: ["woff"]
    },
    "font/woff2": {
      source: "iana",
      extensions: ["woff2"]
    },
    "image/aces": {
      source: "iana",
      extensions: ["exr"]
    },
    "image/apng": {
      compressible: false,
      extensions: ["apng"]
    },
    "image/avci": {
      source: "iana",
      extensions: ["avci"]
    },
    "image/avcs": {
      source: "iana",
      extensions: ["avcs"]
    },
    "image/avif": {
      source: "iana",
      compressible: false,
      extensions: ["avif"]
    },
    "image/bmp": {
      source: "iana",
      compressible: true,
      extensions: ["bmp"]
    },
    "image/cgm": {
      source: "iana",
      extensions: ["cgm"]
    },
    "image/dicom-rle": {
      source: "iana",
      extensions: ["drle"]
    },
    "image/emf": {
      source: "iana",
      extensions: ["emf"]
    },
    "image/fits": {
      source: "iana",
      extensions: ["fits"]
    },
    "image/g3fax": {
      source: "iana",
      extensions: ["g3"]
    },
    "image/gif": {
      source: "iana",
      compressible: false,
      extensions: ["gif"]
    },
    "image/heic": {
      source: "iana",
      extensions: ["heic"]
    },
    "image/heic-sequence": {
      source: "iana",
      extensions: ["heics"]
    },
    "image/heif": {
      source: "iana",
      extensions: ["heif"]
    },
    "image/heif-sequence": {
      source: "iana",
      extensions: ["heifs"]
    },
    "image/hej2k": {
      source: "iana",
      extensions: ["hej2"]
    },
    "image/hsj2": {
      source: "iana",
      extensions: ["hsj2"]
    },
    "image/ief": {
      source: "iana",
      extensions: ["ief"]
    },
    "image/jls": {
      source: "iana",
      extensions: ["jls"]
    },
    "image/jp2": {
      source: "iana",
      compressible: false,
      extensions: ["jp2", "jpg2"]
    },
    "image/jpeg": {
      source: "iana",
      compressible: false,
      extensions: ["jpeg", "jpg", "jpe"]
    },
    "image/jph": {
      source: "iana",
      extensions: ["jph"]
    },
    "image/jphc": {
      source: "iana",
      extensions: ["jhc"]
    },
    "image/jpm": {
      source: "iana",
      compressible: false,
      extensions: ["jpm"]
    },
    "image/jpx": {
      source: "iana",
      compressible: false,
      extensions: ["jpx", "jpf"]
    },
    "image/jxr": {
      source: "iana",
      extensions: ["jxr"]
    },
    "image/jxra": {
      source: "iana",
      extensions: ["jxra"]
    },
    "image/jxrs": {
      source: "iana",
      extensions: ["jxrs"]
    },
    "image/jxs": {
      source: "iana",
      extensions: ["jxs"]
    },
    "image/jxsc": {
      source: "iana",
      extensions: ["jxsc"]
    },
    "image/jxsi": {
      source: "iana",
      extensions: ["jxsi"]
    },
    "image/jxss": {
      source: "iana",
      extensions: ["jxss"]
    },
    "image/ktx": {
      source: "iana",
      extensions: ["ktx"]
    },
    "image/ktx2": {
      source: "iana",
      extensions: ["ktx2"]
    },
    "image/naplps": {
      source: "iana"
    },
    "image/pjpeg": {
      compressible: false
    },
    "image/png": {
      source: "iana",
      compressible: false,
      extensions: ["png"]
    },
    "image/prs.btif": {
      source: "iana",
      extensions: ["btif"]
    },
    "image/prs.pti": {
      source: "iana",
      extensions: ["pti"]
    },
    "image/pwg-raster": {
      source: "iana"
    },
    "image/sgi": {
      source: "apache",
      extensions: ["sgi"]
    },
    "image/svg+xml": {
      source: "iana",
      compressible: true,
      extensions: ["svg", "svgz"]
    },
    "image/t38": {
      source: "iana",
      extensions: ["t38"]
    },
    "image/tiff": {
      source: "iana",
      compressible: false,
      extensions: ["tif", "tiff"]
    },
    "image/tiff-fx": {
      source: "iana",
      extensions: ["tfx"]
    },
    "image/vnd.adobe.photoshop": {
      source: "iana",
      compressible: true,
      extensions: ["psd"]
    },
    "image/vnd.airzip.accelerator.azv": {
      source: "iana",
      extensions: ["azv"]
    },
    "image/vnd.cns.inf2": {
      source: "iana"
    },
    "image/vnd.dece.graphic": {
      source: "iana",
      extensions: ["uvi", "uvvi", "uvg", "uvvg"]
    },
    "image/vnd.djvu": {
      source: "iana",
      extensions: ["djvu", "djv"]
    },
    "image/vnd.dvb.subtitle": {
      source: "iana",
      extensions: ["sub"]
    },
    "image/vnd.dwg": {
      source: "iana",
      extensions: ["dwg"]
    },
    "image/vnd.dxf": {
      source: "iana",
      extensions: ["dxf"]
    },
    "image/vnd.fastbidsheet": {
      source: "iana",
      extensions: ["fbs"]
    },
    "image/vnd.fpx": {
      source: "iana",
      extensions: ["fpx"]
    },
    "image/vnd.fst": {
      source: "iana",
      extensions: ["fst"]
    },
    "image/vnd.fujixerox.edmics-mmr": {
      source: "iana",
      extensions: ["mmr"]
    },
    "image/vnd.fujixerox.edmics-rlc": {
      source: "iana",
      extensions: ["rlc"]
    },
    "image/vnd.globalgraphics.pgb": {
      source: "iana"
    },
    "image/vnd.microsoft.icon": {
      source: "iana",
      compressible: true,
      extensions: ["ico"]
    },
    "image/vnd.mix": {
      source: "iana"
    },
    "image/vnd.mozilla.apng": {
      source: "iana"
    },
    "image/vnd.ms-dds": {
      compressible: true,
      extensions: ["dds"]
    },
    "image/vnd.ms-modi": {
      source: "iana",
      extensions: ["mdi"]
    },
    "image/vnd.ms-photo": {
      source: "apache",
      extensions: ["wdp"]
    },
    "image/vnd.net-fpx": {
      source: "iana",
      extensions: ["npx"]
    },
    "image/vnd.pco.b16": {
      source: "iana",
      extensions: ["b16"]
    },
    "image/vnd.radiance": {
      source: "iana"
    },
    "image/vnd.sealed.png": {
      source: "iana"
    },
    "image/vnd.sealedmedia.softseal.gif": {
      source: "iana"
    },
    "image/vnd.sealedmedia.softseal.jpg": {
      source: "iana"
    },
    "image/vnd.svf": {
      source: "iana"
    },
    "image/vnd.tencent.tap": {
      source: "iana",
      extensions: ["tap"]
    },
    "image/vnd.valve.source.texture": {
      source: "iana",
      extensions: ["vtf"]
    },
    "image/vnd.wap.wbmp": {
      source: "iana",
      extensions: ["wbmp"]
    },
    "image/vnd.xiff": {
      source: "iana",
      extensions: ["xif"]
    },
    "image/vnd.zbrush.pcx": {
      source: "iana",
      extensions: ["pcx"]
    },
    "image/webp": {
      source: "apache",
      extensions: ["webp"]
    },
    "image/wmf": {
      source: "iana",
      extensions: ["wmf"]
    },
    "image/x-3ds": {
      source: "apache",
      extensions: ["3ds"]
    },
    "image/x-cmu-raster": {
      source: "apache",
      extensions: ["ras"]
    },
    "image/x-cmx": {
      source: "apache",
      extensions: ["cmx"]
    },
    "image/x-freehand": {
      source: "apache",
      extensions: ["fh", "fhc", "fh4", "fh5", "fh7"]
    },
    "image/x-icon": {
      source: "apache",
      compressible: true,
      extensions: ["ico"]
    },
    "image/x-jng": {
      source: "nginx",
      extensions: ["jng"]
    },
    "image/x-mrsid-image": {
      source: "apache",
      extensions: ["sid"]
    },
    "image/x-ms-bmp": {
      source: "nginx",
      compressible: true,
      extensions: ["bmp"]
    },
    "image/x-pcx": {
      source: "apache",
      extensions: ["pcx"]
    },
    "image/x-pict": {
      source: "apache",
      extensions: ["pic", "pct"]
    },
    "image/x-portable-anymap": {
      source: "apache",
      extensions: ["pnm"]
    },
    "image/x-portable-bitmap": {
      source: "apache",
      extensions: ["pbm"]
    },
    "image/x-portable-graymap": {
      source: "apache",
      extensions: ["pgm"]
    },
    "image/x-portable-pixmap": {
      source: "apache",
      extensions: ["ppm"]
    },
    "image/x-rgb": {
      source: "apache",
      extensions: ["rgb"]
    },
    "image/x-tga": {
      source: "apache",
      extensions: ["tga"]
    },
    "image/x-xbitmap": {
      source: "apache",
      extensions: ["xbm"]
    },
    "image/x-xcf": {
      compressible: false
    },
    "image/x-xpixmap": {
      source: "apache",
      extensions: ["xpm"]
    },
    "image/x-xwindowdump": {
      source: "apache",
      extensions: ["xwd"]
    },
    "message/cpim": {
      source: "iana"
    },
    "message/delivery-status": {
      source: "iana"
    },
    "message/disposition-notification": {
      source: "iana",
      extensions: [
        "disposition-notification"
      ]
    },
    "message/external-body": {
      source: "iana"
    },
    "message/feedback-report": {
      source: "iana"
    },
    "message/global": {
      source: "iana",
      extensions: ["u8msg"]
    },
    "message/global-delivery-status": {
      source: "iana",
      extensions: ["u8dsn"]
    },
    "message/global-disposition-notification": {
      source: "iana",
      extensions: ["u8mdn"]
    },
    "message/global-headers": {
      source: "iana",
      extensions: ["u8hdr"]
    },
    "message/http": {
      source: "iana",
      compressible: false
    },
    "message/imdn+xml": {
      source: "iana",
      compressible: true
    },
    "message/news": {
      source: "iana"
    },
    "message/partial": {
      source: "iana",
      compressible: false
    },
    "message/rfc822": {
      source: "iana",
      compressible: true,
      extensions: ["eml", "mime"]
    },
    "message/s-http": {
      source: "iana"
    },
    "message/sip": {
      source: "iana"
    },
    "message/sipfrag": {
      source: "iana"
    },
    "message/tracking-status": {
      source: "iana"
    },
    "message/vnd.si.simp": {
      source: "iana"
    },
    "message/vnd.wfa.wsc": {
      source: "iana",
      extensions: ["wsc"]
    },
    "model/3mf": {
      source: "iana",
      extensions: ["3mf"]
    },
    "model/e57": {
      source: "iana"
    },
    "model/gltf+json": {
      source: "iana",
      compressible: true,
      extensions: ["gltf"]
    },
    "model/gltf-binary": {
      source: "iana",
      compressible: true,
      extensions: ["glb"]
    },
    "model/iges": {
      source: "iana",
      compressible: false,
      extensions: ["igs", "iges"]
    },
    "model/mesh": {
      source: "iana",
      compressible: false,
      extensions: ["msh", "mesh", "silo"]
    },
    "model/mtl": {
      source: "iana",
      extensions: ["mtl"]
    },
    "model/obj": {
      source: "iana",
      extensions: ["obj"]
    },
    "model/step": {
      source: "iana"
    },
    "model/step+xml": {
      source: "iana",
      compressible: true,
      extensions: ["stpx"]
    },
    "model/step+zip": {
      source: "iana",
      compressible: false,
      extensions: ["stpz"]
    },
    "model/step-xml+zip": {
      source: "iana",
      compressible: false,
      extensions: ["stpxz"]
    },
    "model/stl": {
      source: "iana",
      extensions: ["stl"]
    },
    "model/vnd.collada+xml": {
      source: "iana",
      compressible: true,
      extensions: ["dae"]
    },
    "model/vnd.dwf": {
      source: "iana",
      extensions: ["dwf"]
    },
    "model/vnd.flatland.3dml": {
      source: "iana"
    },
    "model/vnd.gdl": {
      source: "iana",
      extensions: ["gdl"]
    },
    "model/vnd.gs-gdl": {
      source: "apache"
    },
    "model/vnd.gs.gdl": {
      source: "iana"
    },
    "model/vnd.gtw": {
      source: "iana",
      extensions: ["gtw"]
    },
    "model/vnd.moml+xml": {
      source: "iana",
      compressible: true
    },
    "model/vnd.mts": {
      source: "iana",
      extensions: ["mts"]
    },
    "model/vnd.opengex": {
      source: "iana",
      extensions: ["ogex"]
    },
    "model/vnd.parasolid.transmit.binary": {
      source: "iana",
      extensions: ["x_b"]
    },
    "model/vnd.parasolid.transmit.text": {
      source: "iana",
      extensions: ["x_t"]
    },
    "model/vnd.pytha.pyox": {
      source: "iana"
    },
    "model/vnd.rosette.annotated-data-model": {
      source: "iana"
    },
    "model/vnd.sap.vds": {
      source: "iana",
      extensions: ["vds"]
    },
    "model/vnd.usdz+zip": {
      source: "iana",
      compressible: false,
      extensions: ["usdz"]
    },
    "model/vnd.valve.source.compiled-map": {
      source: "iana",
      extensions: ["bsp"]
    },
    "model/vnd.vtu": {
      source: "iana",
      extensions: ["vtu"]
    },
    "model/vrml": {
      source: "iana",
      compressible: false,
      extensions: ["wrl", "vrml"]
    },
    "model/x3d+binary": {
      source: "apache",
      compressible: false,
      extensions: ["x3db", "x3dbz"]
    },
    "model/x3d+fastinfoset": {
      source: "iana",
      extensions: ["x3db"]
    },
    "model/x3d+vrml": {
      source: "apache",
      compressible: false,
      extensions: ["x3dv", "x3dvz"]
    },
    "model/x3d+xml": {
      source: "iana",
      compressible: true,
      extensions: ["x3d", "x3dz"]
    },
    "model/x3d-vrml": {
      source: "iana",
      extensions: ["x3dv"]
    },
    "multipart/alternative": {
      source: "iana",
      compressible: false
    },
    "multipart/appledouble": {
      source: "iana"
    },
    "multipart/byteranges": {
      source: "iana"
    },
    "multipart/digest": {
      source: "iana"
    },
    "multipart/encrypted": {
      source: "iana",
      compressible: false
    },
    "multipart/form-data": {
      source: "iana",
      compressible: false
    },
    "multipart/header-set": {
      source: "iana"
    },
    "multipart/mixed": {
      source: "iana"
    },
    "multipart/multilingual": {
      source: "iana"
    },
    "multipart/parallel": {
      source: "iana"
    },
    "multipart/related": {
      source: "iana",
      compressible: false
    },
    "multipart/report": {
      source: "iana"
    },
    "multipart/signed": {
      source: "iana",
      compressible: false
    },
    "multipart/vnd.bint.med-plus": {
      source: "iana"
    },
    "multipart/voice-message": {
      source: "iana"
    },
    "multipart/x-mixed-replace": {
      source: "iana"
    },
    "text/1d-interleaved-parityfec": {
      source: "iana"
    },
    "text/cache-manifest": {
      source: "iana",
      compressible: true,
      extensions: ["appcache", "manifest"]
    },
    "text/calendar": {
      source: "iana",
      extensions: ["ics", "ifb"]
    },
    "text/calender": {
      compressible: true
    },
    "text/cmd": {
      compressible: true
    },
    "text/coffeescript": {
      extensions: ["coffee", "litcoffee"]
    },
    "text/cql": {
      source: "iana"
    },
    "text/cql-expression": {
      source: "iana"
    },
    "text/cql-identifier": {
      source: "iana"
    },
    "text/css": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["css"]
    },
    "text/csv": {
      source: "iana",
      compressible: true,
      extensions: ["csv"]
    },
    "text/csv-schema": {
      source: "iana"
    },
    "text/directory": {
      source: "iana"
    },
    "text/dns": {
      source: "iana"
    },
    "text/ecmascript": {
      source: "iana"
    },
    "text/encaprtp": {
      source: "iana"
    },
    "text/enriched": {
      source: "iana"
    },
    "text/fhirpath": {
      source: "iana"
    },
    "text/flexfec": {
      source: "iana"
    },
    "text/fwdred": {
      source: "iana"
    },
    "text/gff3": {
      source: "iana"
    },
    "text/grammar-ref-list": {
      source: "iana"
    },
    "text/html": {
      source: "iana",
      compressible: true,
      extensions: ["html", "htm", "shtml"]
    },
    "text/jade": {
      extensions: ["jade"]
    },
    "text/javascript": {
      source: "iana",
      compressible: true
    },
    "text/jcr-cnd": {
      source: "iana"
    },
    "text/jsx": {
      compressible: true,
      extensions: ["jsx"]
    },
    "text/less": {
      compressible: true,
      extensions: ["less"]
    },
    "text/markdown": {
      source: "iana",
      compressible: true,
      extensions: ["markdown", "md"]
    },
    "text/mathml": {
      source: "nginx",
      extensions: ["mml"]
    },
    "text/mdx": {
      compressible: true,
      extensions: ["mdx"]
    },
    "text/mizar": {
      source: "iana"
    },
    "text/n3": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["n3"]
    },
    "text/parameters": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/parityfec": {
      source: "iana"
    },
    "text/plain": {
      source: "iana",
      compressible: true,
      extensions: ["txt", "text", "conf", "def", "list", "log", "in", "ini"]
    },
    "text/provenance-notation": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/prs.fallenstein.rst": {
      source: "iana"
    },
    "text/prs.lines.tag": {
      source: "iana",
      extensions: ["dsc"]
    },
    "text/prs.prop.logic": {
      source: "iana"
    },
    "text/raptorfec": {
      source: "iana"
    },
    "text/red": {
      source: "iana"
    },
    "text/rfc822-headers": {
      source: "iana"
    },
    "text/richtext": {
      source: "iana",
      compressible: true,
      extensions: ["rtx"]
    },
    "text/rtf": {
      source: "iana",
      compressible: true,
      extensions: ["rtf"]
    },
    "text/rtp-enc-aescm128": {
      source: "iana"
    },
    "text/rtploopback": {
      source: "iana"
    },
    "text/rtx": {
      source: "iana"
    },
    "text/sgml": {
      source: "iana",
      extensions: ["sgml", "sgm"]
    },
    "text/shaclc": {
      source: "iana"
    },
    "text/shex": {
      source: "iana",
      extensions: ["shex"]
    },
    "text/slim": {
      extensions: ["slim", "slm"]
    },
    "text/spdx": {
      source: "iana",
      extensions: ["spdx"]
    },
    "text/strings": {
      source: "iana"
    },
    "text/stylus": {
      extensions: ["stylus", "styl"]
    },
    "text/t140": {
      source: "iana"
    },
    "text/tab-separated-values": {
      source: "iana",
      compressible: true,
      extensions: ["tsv"]
    },
    "text/troff": {
      source: "iana",
      extensions: ["t", "tr", "roff", "man", "me", "ms"]
    },
    "text/turtle": {
      source: "iana",
      charset: "UTF-8",
      extensions: ["ttl"]
    },
    "text/ulpfec": {
      source: "iana"
    },
    "text/uri-list": {
      source: "iana",
      compressible: true,
      extensions: ["uri", "uris", "urls"]
    },
    "text/vcard": {
      source: "iana",
      compressible: true,
      extensions: ["vcard"]
    },
    "text/vnd.a": {
      source: "iana"
    },
    "text/vnd.abc": {
      source: "iana"
    },
    "text/vnd.ascii-art": {
      source: "iana"
    },
    "text/vnd.curl": {
      source: "iana",
      extensions: ["curl"]
    },
    "text/vnd.curl.dcurl": {
      source: "apache",
      extensions: ["dcurl"]
    },
    "text/vnd.curl.mcurl": {
      source: "apache",
      extensions: ["mcurl"]
    },
    "text/vnd.curl.scurl": {
      source: "apache",
      extensions: ["scurl"]
    },
    "text/vnd.debian.copyright": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/vnd.dmclientscript": {
      source: "iana"
    },
    "text/vnd.dvb.subtitle": {
      source: "iana",
      extensions: ["sub"]
    },
    "text/vnd.esmertec.theme-descriptor": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/vnd.familysearch.gedcom": {
      source: "iana",
      extensions: ["ged"]
    },
    "text/vnd.ficlab.flt": {
      source: "iana"
    },
    "text/vnd.fly": {
      source: "iana",
      extensions: ["fly"]
    },
    "text/vnd.fmi.flexstor": {
      source: "iana",
      extensions: ["flx"]
    },
    "text/vnd.gml": {
      source: "iana"
    },
    "text/vnd.graphviz": {
      source: "iana",
      extensions: ["gv"]
    },
    "text/vnd.hans": {
      source: "iana"
    },
    "text/vnd.hgl": {
      source: "iana"
    },
    "text/vnd.in3d.3dml": {
      source: "iana",
      extensions: ["3dml"]
    },
    "text/vnd.in3d.spot": {
      source: "iana",
      extensions: ["spot"]
    },
    "text/vnd.iptc.newsml": {
      source: "iana"
    },
    "text/vnd.iptc.nitf": {
      source: "iana"
    },
    "text/vnd.latex-z": {
      source: "iana"
    },
    "text/vnd.motorola.reflex": {
      source: "iana"
    },
    "text/vnd.ms-mediapackage": {
      source: "iana"
    },
    "text/vnd.net2phone.commcenter.command": {
      source: "iana"
    },
    "text/vnd.radisys.msml-basic-layout": {
      source: "iana"
    },
    "text/vnd.senx.warpscript": {
      source: "iana"
    },
    "text/vnd.si.uricatalogue": {
      source: "iana"
    },
    "text/vnd.sosi": {
      source: "iana"
    },
    "text/vnd.sun.j2me.app-descriptor": {
      source: "iana",
      charset: "UTF-8",
      extensions: ["jad"]
    },
    "text/vnd.trolltech.linguist": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/vnd.wap.si": {
      source: "iana"
    },
    "text/vnd.wap.sl": {
      source: "iana"
    },
    "text/vnd.wap.wml": {
      source: "iana",
      extensions: ["wml"]
    },
    "text/vnd.wap.wmlscript": {
      source: "iana",
      extensions: ["wmls"]
    },
    "text/vtt": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["vtt"]
    },
    "text/x-asm": {
      source: "apache",
      extensions: ["s", "asm"]
    },
    "text/x-c": {
      source: "apache",
      extensions: ["c", "cc", "cxx", "cpp", "h", "hh", "dic"]
    },
    "text/x-component": {
      source: "nginx",
      extensions: ["htc"]
    },
    "text/x-fortran": {
      source: "apache",
      extensions: ["f", "for", "f77", "f90"]
    },
    "text/x-gwt-rpc": {
      compressible: true
    },
    "text/x-handlebars-template": {
      extensions: ["hbs"]
    },
    "text/x-java-source": {
      source: "apache",
      extensions: ["java"]
    },
    "text/x-jquery-tmpl": {
      compressible: true
    },
    "text/x-lua": {
      extensions: ["lua"]
    },
    "text/x-markdown": {
      compressible: true,
      extensions: ["mkd"]
    },
    "text/x-nfo": {
      source: "apache",
      extensions: ["nfo"]
    },
    "text/x-opml": {
      source: "apache",
      extensions: ["opml"]
    },
    "text/x-org": {
      compressible: true,
      extensions: ["org"]
    },
    "text/x-pascal": {
      source: "apache",
      extensions: ["p", "pas"]
    },
    "text/x-processing": {
      compressible: true,
      extensions: ["pde"]
    },
    "text/x-sass": {
      extensions: ["sass"]
    },
    "text/x-scss": {
      extensions: ["scss"]
    },
    "text/x-setext": {
      source: "apache",
      extensions: ["etx"]
    },
    "text/x-sfv": {
      source: "apache",
      extensions: ["sfv"]
    },
    "text/x-suse-ymp": {
      compressible: true,
      extensions: ["ymp"]
    },
    "text/x-uuencode": {
      source: "apache",
      extensions: ["uu"]
    },
    "text/x-vcalendar": {
      source: "apache",
      extensions: ["vcs"]
    },
    "text/x-vcard": {
      source: "apache",
      extensions: ["vcf"]
    },
    "text/xml": {
      source: "iana",
      compressible: true,
      extensions: ["xml"]
    },
    "text/xml-external-parsed-entity": {
      source: "iana"
    },
    "text/yaml": {
      compressible: true,
      extensions: ["yaml", "yml"]
    },
    "video/1d-interleaved-parityfec": {
      source: "iana"
    },
    "video/3gpp": {
      source: "iana",
      extensions: ["3gp", "3gpp"]
    },
    "video/3gpp-tt": {
      source: "iana"
    },
    "video/3gpp2": {
      source: "iana",
      extensions: ["3g2"]
    },
    "video/av1": {
      source: "iana"
    },
    "video/bmpeg": {
      source: "iana"
    },
    "video/bt656": {
      source: "iana"
    },
    "video/celb": {
      source: "iana"
    },
    "video/dv": {
      source: "iana"
    },
    "video/encaprtp": {
      source: "iana"
    },
    "video/ffv1": {
      source: "iana"
    },
    "video/flexfec": {
      source: "iana"
    },
    "video/h261": {
      source: "iana",
      extensions: ["h261"]
    },
    "video/h263": {
      source: "iana",
      extensions: ["h263"]
    },
    "video/h263-1998": {
      source: "iana"
    },
    "video/h263-2000": {
      source: "iana"
    },
    "video/h264": {
      source: "iana",
      extensions: ["h264"]
    },
    "video/h264-rcdo": {
      source: "iana"
    },
    "video/h264-svc": {
      source: "iana"
    },
    "video/h265": {
      source: "iana"
    },
    "video/iso.segment": {
      source: "iana",
      extensions: ["m4s"]
    },
    "video/jpeg": {
      source: "iana",
      extensions: ["jpgv"]
    },
    "video/jpeg2000": {
      source: "iana"
    },
    "video/jpm": {
      source: "apache",
      extensions: ["jpm", "jpgm"]
    },
    "video/jxsv": {
      source: "iana"
    },
    "video/mj2": {
      source: "iana",
      extensions: ["mj2", "mjp2"]
    },
    "video/mp1s": {
      source: "iana"
    },
    "video/mp2p": {
      source: "iana"
    },
    "video/mp2t": {
      source: "iana",
      extensions: ["ts"]
    },
    "video/mp4": {
      source: "iana",
      compressible: false,
      extensions: ["mp4", "mp4v", "mpg4"]
    },
    "video/mp4v-es": {
      source: "iana"
    },
    "video/mpeg": {
      source: "iana",
      compressible: false,
      extensions: ["mpeg", "mpg", "mpe", "m1v", "m2v"]
    },
    "video/mpeg4-generic": {
      source: "iana"
    },
    "video/mpv": {
      source: "iana"
    },
    "video/nv": {
      source: "iana"
    },
    "video/ogg": {
      source: "iana",
      compressible: false,
      extensions: ["ogv"]
    },
    "video/parityfec": {
      source: "iana"
    },
    "video/pointer": {
      source: "iana"
    },
    "video/quicktime": {
      source: "iana",
      compressible: false,
      extensions: ["qt", "mov"]
    },
    "video/raptorfec": {
      source: "iana"
    },
    "video/raw": {
      source: "iana"
    },
    "video/rtp-enc-aescm128": {
      source: "iana"
    },
    "video/rtploopback": {
      source: "iana"
    },
    "video/rtx": {
      source: "iana"
    },
    "video/scip": {
      source: "iana"
    },
    "video/smpte291": {
      source: "iana"
    },
    "video/smpte292m": {
      source: "iana"
    },
    "video/ulpfec": {
      source: "iana"
    },
    "video/vc1": {
      source: "iana"
    },
    "video/vc2": {
      source: "iana"
    },
    "video/vnd.cctv": {
      source: "iana"
    },
    "video/vnd.dece.hd": {
      source: "iana",
      extensions: ["uvh", "uvvh"]
    },
    "video/vnd.dece.mobile": {
      source: "iana",
      extensions: ["uvm", "uvvm"]
    },
    "video/vnd.dece.mp4": {
      source: "iana"
    },
    "video/vnd.dece.pd": {
      source: "iana",
      extensions: ["uvp", "uvvp"]
    },
    "video/vnd.dece.sd": {
      source: "iana",
      extensions: ["uvs", "uvvs"]
    },
    "video/vnd.dece.video": {
      source: "iana",
      extensions: ["uvv", "uvvv"]
    },
    "video/vnd.directv.mpeg": {
      source: "iana"
    },
    "video/vnd.directv.mpeg-tts": {
      source: "iana"
    },
    "video/vnd.dlna.mpeg-tts": {
      source: "iana"
    },
    "video/vnd.dvb.file": {
      source: "iana",
      extensions: ["dvb"]
    },
    "video/vnd.fvt": {
      source: "iana",
      extensions: ["fvt"]
    },
    "video/vnd.hns.video": {
      source: "iana"
    },
    "video/vnd.iptvforum.1dparityfec-1010": {
      source: "iana"
    },
    "video/vnd.iptvforum.1dparityfec-2005": {
      source: "iana"
    },
    "video/vnd.iptvforum.2dparityfec-1010": {
      source: "iana"
    },
    "video/vnd.iptvforum.2dparityfec-2005": {
      source: "iana"
    },
    "video/vnd.iptvforum.ttsavc": {
      source: "iana"
    },
    "video/vnd.iptvforum.ttsmpeg2": {
      source: "iana"
    },
    "video/vnd.motorola.video": {
      source: "iana"
    },
    "video/vnd.motorola.videop": {
      source: "iana"
    },
    "video/vnd.mpegurl": {
      source: "iana",
      extensions: ["mxu", "m4u"]
    },
    "video/vnd.ms-playready.media.pyv": {
      source: "iana",
      extensions: ["pyv"]
    },
    "video/vnd.nokia.interleaved-multimedia": {
      source: "iana"
    },
    "video/vnd.nokia.mp4vr": {
      source: "iana"
    },
    "video/vnd.nokia.videovoip": {
      source: "iana"
    },
    "video/vnd.objectvideo": {
      source: "iana"
    },
    "video/vnd.radgamettools.bink": {
      source: "iana"
    },
    "video/vnd.radgamettools.smacker": {
      source: "iana"
    },
    "video/vnd.sealed.mpeg1": {
      source: "iana"
    },
    "video/vnd.sealed.mpeg4": {
      source: "iana"
    },
    "video/vnd.sealed.swf": {
      source: "iana"
    },
    "video/vnd.sealedmedia.softseal.mov": {
      source: "iana"
    },
    "video/vnd.uvvu.mp4": {
      source: "iana",
      extensions: ["uvu", "uvvu"]
    },
    "video/vnd.vivo": {
      source: "iana",
      extensions: ["viv"]
    },
    "video/vnd.youtube.yt": {
      source: "iana"
    },
    "video/vp8": {
      source: "iana"
    },
    "video/vp9": {
      source: "iana"
    },
    "video/webm": {
      source: "apache",
      compressible: false,
      extensions: ["webm"]
    },
    "video/x-f4v": {
      source: "apache",
      extensions: ["f4v"]
    },
    "video/x-fli": {
      source: "apache",
      extensions: ["fli"]
    },
    "video/x-flv": {
      source: "apache",
      compressible: false,
      extensions: ["flv"]
    },
    "video/x-m4v": {
      source: "apache",
      extensions: ["m4v"]
    },
    "video/x-matroska": {
      source: "apache",
      compressible: false,
      extensions: ["mkv", "mk3d", "mks"]
    },
    "video/x-mng": {
      source: "apache",
      extensions: ["mng"]
    },
    "video/x-ms-asf": {
      source: "apache",
      extensions: ["asf", "asx"]
    },
    "video/x-ms-vob": {
      source: "apache",
      extensions: ["vob"]
    },
    "video/x-ms-wm": {
      source: "apache",
      extensions: ["wm"]
    },
    "video/x-ms-wmv": {
      source: "apache",
      compressible: false,
      extensions: ["wmv"]
    },
    "video/x-ms-wmx": {
      source: "apache",
      extensions: ["wmx"]
    },
    "video/x-ms-wvx": {
      source: "apache",
      extensions: ["wvx"]
    },
    "video/x-msvideo": {
      source: "apache",
      extensions: ["avi"]
    },
    "video/x-sgi-movie": {
      source: "apache",
      extensions: ["movie"]
    },
    "video/x-smv": {
      source: "apache",
      extensions: ["smv"]
    },
    "x-conference/x-cooltalk": {
      source: "apache",
      extensions: ["ice"]
    },
    "x-shader/x-fragment": {
      compressible: true
    },
    "x-shader/x-vertex": {
      compressible: true
    }
  };
});

// node_modules/mime-db/index.js
var require_mime_db = __commonJS((exports, module) => {
  /*!
   * mime-db
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015-2022 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = require_db();
});

// node_modules/mime-types/index.js
var require_mime_types = __commonJS((exports) => {
  var charset = function(type) {
    if (!type || typeof type !== "string") {
      return false;
    }
    var match = EXTRACT_TYPE_REGEXP.exec(type);
    var mime2 = match && db[match[1].toLowerCase()];
    if (mime2 && mime2.charset) {
      return mime2.charset;
    }
    if (match && TEXT_TYPE_REGEXP.test(match[1])) {
      return "UTF-8";
    }
    return false;
  };
  var contentType = function(str) {
    if (!str || typeof str !== "string") {
      return false;
    }
    var mime2 = str.indexOf("/") === -1 ? exports.lookup(str) : str;
    if (!mime2) {
      return false;
    }
    if (mime2.indexOf("charset") === -1) {
      var charset2 = exports.charset(mime2);
      if (charset2)
        mime2 += "; charset=" + charset2.toLowerCase();
    }
    return mime2;
  };
  var extension = function(type) {
    if (!type || typeof type !== "string") {
      return false;
    }
    var match = EXTRACT_TYPE_REGEXP.exec(type);
    var exts = match && exports.extensions[match[1].toLowerCase()];
    if (!exts || !exts.length) {
      return false;
    }
    return exts[0];
  };
  var lookup = function(path) {
    if (!path || typeof path !== "string") {
      return false;
    }
    var extension2 = extname("x." + path).toLowerCase().substr(1);
    if (!extension2) {
      return false;
    }
    return exports.types[extension2] || false;
  };
  var populateMaps = function(extensions, types) {
    var preference = ["nginx", "apache", undefined, "iana"];
    Object.keys(db).forEach(function forEachMimeType(type) {
      var mime2 = db[type];
      var exts = mime2.extensions;
      if (!exts || !exts.length) {
        return;
      }
      extensions[type] = exts;
      for (var i = 0;i < exts.length; i++) {
        var extension2 = exts[i];
        if (types[extension2]) {
          var from = preference.indexOf(db[types[extension2]].source);
          var to = preference.indexOf(mime2.source);
          if (types[extension2] !== "application/octet-stream" && (from > to || from === to && types[extension2].substr(0, 12) === "application/")) {
            continue;
          }
        }
        types[extension2] = type;
      }
    });
  };
  /*!
   * mime-types
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var db = require_mime_db();
  var extname = import.meta.require("path").extname;
  var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
  var TEXT_TYPE_REGEXP = /^text\//i;
  exports.charset = charset;
  exports.charsets = { lookup: charset };
  exports.contentType = contentType;
  exports.extension = extension;
  exports.extensions = Object.create(null);
  exports.lookup = lookup;
  exports.types = Object.create(null);
  populateMaps(exports.extensions, exports.types);
});

// node_modules/asynckit/lib/defer.js
var require_defer = __commonJS((exports, module) => {
  var defer = function(fn) {
    var nextTick = typeof setImmediate == "function" ? setImmediate : typeof process == "object" && typeof process.nextTick == "function" ? process.nextTick : null;
    if (nextTick) {
      nextTick(fn);
    } else {
      setTimeout(fn, 0);
    }
  };
  module.exports = defer;
});

// node_modules/asynckit/lib/async.js
var require_async = __commonJS((exports, module) => {
  var async = function(callback) {
    var isAsync = false;
    defer(function() {
      isAsync = true;
    });
    return function async_callback(err, result) {
      if (isAsync) {
        callback(err, result);
      } else {
        defer(function nextTick_callback() {
          callback(err, result);
        });
      }
    };
  };
  var defer = require_defer();
  module.exports = async;
});

// node_modules/asynckit/lib/abort.js
var require_abort = __commonJS((exports, module) => {
  var abort = function(state) {
    Object.keys(state.jobs).forEach(clean.bind(state));
    state.jobs = {};
  };
  var clean = function(key) {
    if (typeof this.jobs[key] == "function") {
      this.jobs[key]();
    }
  };
  module.exports = abort;
});

// node_modules/asynckit/lib/iterate.js
var require_iterate = __commonJS((exports, module) => {
  var iterate = function(list, iterator, state, callback) {
    var key = state["keyedList"] ? state["keyedList"][state.index] : state.index;
    state.jobs[key] = runJob(iterator, key, list[key], function(error, output) {
      if (!(key in state.jobs)) {
        return;
      }
      delete state.jobs[key];
      if (error) {
        abort(state);
      } else {
        state.results[key] = output;
      }
      callback(error, state.results);
    });
  };
  var runJob = function(iterator, key, item, callback) {
    var aborter;
    if (iterator.length == 2) {
      aborter = iterator(item, async(callback));
    } else {
      aborter = iterator(item, key, async(callback));
    }
    return aborter;
  };
  var async = require_async();
  var abort = require_abort();
  module.exports = iterate;
});

// node_modules/asynckit/lib/state.js
var require_state = __commonJS((exports, module) => {
  var state = function(list, sortMethod) {
    var isNamedList = !Array.isArray(list), initState = {
      index: 0,
      keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
      jobs: {},
      results: isNamedList ? {} : [],
      size: isNamedList ? Object.keys(list).length : list.length
    };
    if (sortMethod) {
      initState.keyedList.sort(isNamedList ? sortMethod : function(a, b) {
        return sortMethod(list[a], list[b]);
      });
    }
    return initState;
  };
  module.exports = state;
});

// node_modules/asynckit/lib/terminator.js
var require_terminator = __commonJS((exports, module) => {
  var terminator = function(callback) {
    if (!Object.keys(this.jobs).length) {
      return;
    }
    this.index = this.size;
    abort(this);
    async(callback)(null, this.results);
  };
  var abort = require_abort();
  var async = require_async();
  module.exports = terminator;
});

// node_modules/asynckit/parallel.js
var require_parallel = __commonJS((exports, module) => {
  var parallel = function(list, iterator, callback) {
    var state = initState(list);
    while (state.index < (state["keyedList"] || list).length) {
      iterate(list, iterator, state, function(error, result) {
        if (error) {
          callback(error, result);
          return;
        }
        if (Object.keys(state.jobs).length === 0) {
          callback(null, state.results);
          return;
        }
      });
      state.index++;
    }
    return terminator.bind(state, callback);
  };
  var iterate = require_iterate();
  var initState = require_state();
  var terminator = require_terminator();
  module.exports = parallel;
});

// node_modules/asynckit/serialOrdered.js
var require_serialOrdered = __commonJS((exports, module) => {
  var serialOrdered = function(list, iterator, sortMethod, callback) {
    var state = initState(list, sortMethod);
    iterate(list, iterator, state, function iteratorHandler(error, result) {
      if (error) {
        callback(error, result);
        return;
      }
      state.index++;
      if (state.index < (state["keyedList"] || list).length) {
        iterate(list, iterator, state, iteratorHandler);
        return;
      }
      callback(null, state.results);
    });
    return terminator.bind(state, callback);
  };
  var ascending = function(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  };
  var descending = function(a, b) {
    return -1 * ascending(a, b);
  };
  var iterate = require_iterate();
  var initState = require_state();
  var terminator = require_terminator();
  module.exports = serialOrdered;
  module.exports.ascending = ascending;
  module.exports.descending = descending;
});

// node_modules/asynckit/serial.js
var require_serial = __commonJS((exports, module) => {
  var serial = function(list, iterator, callback) {
    return serialOrdered(list, iterator, null, callback);
  };
  var serialOrdered = require_serialOrdered();
  module.exports = serial;
});

// node_modules/asynckit/index.js
var require_asynckit = __commonJS((exports, module) => {
  module.exports = {
    parallel: require_parallel(),
    serial: require_serial(),
    serialOrdered: require_serialOrdered()
  };
});

// node_modules/form-data/lib/populate.js
var require_populate = __commonJS((exports, module) => {
  module.exports = function(dst, src) {
    Object.keys(src).forEach(function(prop) {
      dst[prop] = dst[prop] || src[prop];
    });
    return dst;
  };
});

// node_modules/form-data/lib/form_data.js
var require_form_data = __commonJS((exports, module) => {
  var FormData2 = function(options) {
    if (!(this instanceof FormData2)) {
      return new FormData2(options);
    }
    this._overheadLength = 0;
    this._valueLength = 0;
    this._valuesToMeasure = [];
    CombinedStream.call(this);
    options = options || {};
    for (var option in options) {
      this[option] = options[option];
    }
  };
  var CombinedStream = require_combined_stream();
  var util = import.meta.require("util");
  var path = import.meta.require("path");
  var http = import.meta.require("http");
  var https = import.meta.require("https");
  var parseUrl = import.meta.require("url").parse;
  var fs = import.meta.require("fs");
  var Stream = import.meta.require("stream").Stream;
  var mime2 = require_mime_types();
  var asynckit = require_asynckit();
  var populate = require_populate();
  module.exports = FormData2;
  util.inherits(FormData2, CombinedStream);
  FormData2.LINE_BREAK = "\r\n";
  FormData2.DEFAULT_CONTENT_TYPE = "application/octet-stream";
  FormData2.prototype.append = function(field, value, options) {
    options = options || {};
    if (typeof options == "string") {
      options = { filename: options };
    }
    var append = CombinedStream.prototype.append.bind(this);
    if (typeof value == "number") {
      value = "" + value;
    }
    if (util.isArray(value)) {
      this._error(new Error("Arrays are not supported."));
      return;
    }
    var header = this._multiPartHeader(field, value, options);
    var footer = this._multiPartFooter();
    append(header);
    append(value);
    append(footer);
    this._trackLength(header, value, options);
  };
  FormData2.prototype._trackLength = function(header, value, options) {
    var valueLength = 0;
    if (options.knownLength != null) {
      valueLength += +options.knownLength;
    } else if (Buffer.isBuffer(value)) {
      valueLength = value.length;
    } else if (typeof value === "string") {
      valueLength = Buffer.byteLength(value);
    }
    this._valueLength += valueLength;
    this._overheadLength += Buffer.byteLength(header) + FormData2.LINE_BREAK.length;
    if (!value || !value.path && !(value.readable && value.hasOwnProperty("httpVersion")) && !(value instanceof Stream)) {
      return;
    }
    if (!options.knownLength) {
      this._valuesToMeasure.push(value);
    }
  };
  FormData2.prototype._lengthRetriever = function(value, callback) {
    if (value.hasOwnProperty("fd")) {
      if (value.end != null && value.end != Infinity && value.start != null) {
        callback(null, value.end + 1 - (value.start ? value.start : 0));
      } else {
        fs.stat(value.path, function(err, stat) {
          var fileSize;
          if (err) {
            callback(err);
            return;
          }
          fileSize = stat.size - (value.start ? value.start : 0);
          callback(null, fileSize);
        });
      }
    } else if (value.hasOwnProperty("httpVersion")) {
      callback(null, +value.headers["content-length"]);
    } else if (value.hasOwnProperty("httpModule")) {
      value.on("response", function(response) {
        value.pause();
        callback(null, +response.headers["content-length"]);
      });
      value.resume();
    } else {
      callback("Unknown stream");
    }
  };
  FormData2.prototype._multiPartHeader = function(field, value, options) {
    if (typeof options.header == "string") {
      return options.header;
    }
    var contentDisposition = this._getContentDisposition(value, options);
    var contentType = this._getContentType(value, options);
    var contents = "";
    var headers = {
      "Content-Disposition": ["form-data", 'name="' + field + '"'].concat(contentDisposition || []),
      "Content-Type": [].concat(contentType || [])
    };
    if (typeof options.header == "object") {
      populate(headers, options.header);
    }
    var header;
    for (var prop in headers) {
      if (!headers.hasOwnProperty(prop))
        continue;
      header = headers[prop];
      if (header == null) {
        continue;
      }
      if (!Array.isArray(header)) {
        header = [header];
      }
      if (header.length) {
        contents += prop + ": " + header.join("; ") + FormData2.LINE_BREAK;
      }
    }
    return "--" + this.getBoundary() + FormData2.LINE_BREAK + contents + FormData2.LINE_BREAK;
  };
  FormData2.prototype._getContentDisposition = function(value, options) {
    var filename, contentDisposition;
    if (typeof options.filepath === "string") {
      filename = path.normalize(options.filepath).replace(/\\/g, "/");
    } else if (options.filename || value.name || value.path) {
      filename = path.basename(options.filename || value.name || value.path);
    } else if (value.readable && value.hasOwnProperty("httpVersion")) {
      filename = path.basename(value.client._httpMessage.path || "");
    }
    if (filename) {
      contentDisposition = 'filename="' + filename + '"';
    }
    return contentDisposition;
  };
  FormData2.prototype._getContentType = function(value, options) {
    var contentType = options.contentType;
    if (!contentType && value.name) {
      contentType = mime2.lookup(value.name);
    }
    if (!contentType && value.path) {
      contentType = mime2.lookup(value.path);
    }
    if (!contentType && value.readable && value.hasOwnProperty("httpVersion")) {
      contentType = value.headers["content-type"];
    }
    if (!contentType && (options.filepath || options.filename)) {
      contentType = mime2.lookup(options.filepath || options.filename);
    }
    if (!contentType && typeof value == "object") {
      contentType = FormData2.DEFAULT_CONTENT_TYPE;
    }
    return contentType;
  };
  FormData2.prototype._multiPartFooter = function() {
    return function(next) {
      var footer = FormData2.LINE_BREAK;
      var lastPart = this._streams.length === 0;
      if (lastPart) {
        footer += this._lastBoundary();
      }
      next(footer);
    }.bind(this);
  };
  FormData2.prototype._lastBoundary = function() {
    return "--" + this.getBoundary() + "--" + FormData2.LINE_BREAK;
  };
  FormData2.prototype.getHeaders = function(userHeaders) {
    var header;
    var formHeaders = {
      "content-type": "multipart/form-data; boundary=" + this.getBoundary()
    };
    for (header in userHeaders) {
      if (userHeaders.hasOwnProperty(header)) {
        formHeaders[header.toLowerCase()] = userHeaders[header];
      }
    }
    return formHeaders;
  };
  FormData2.prototype.setBoundary = function(boundary) {
    this._boundary = boundary;
  };
  FormData2.prototype.getBoundary = function() {
    if (!this._boundary) {
      this._generateBoundary();
    }
    return this._boundary;
  };
  FormData2.prototype.getBuffer = function() {
    var dataBuffer = new Buffer.alloc(0);
    var boundary = this.getBoundary();
    for (var i = 0, len = this._streams.length;i < len; i++) {
      if (typeof this._streams[i] !== "function") {
        if (Buffer.isBuffer(this._streams[i])) {
          dataBuffer = Buffer.concat([dataBuffer, this._streams[i]]);
        } else {
          dataBuffer = Buffer.concat([dataBuffer, Buffer.from(this._streams[i])]);
        }
        if (typeof this._streams[i] !== "string" || this._streams[i].substring(2, boundary.length + 2) !== boundary) {
          dataBuffer = Buffer.concat([dataBuffer, Buffer.from(FormData2.LINE_BREAK)]);
        }
      }
    }
    return Buffer.concat([dataBuffer, Buffer.from(this._lastBoundary())]);
  };
  FormData2.prototype._generateBoundary = function() {
    var boundary = "--------------------------";
    for (var i = 0;i < 24; i++) {
      boundary += Math.floor(Math.random() * 10).toString(16);
    }
    this._boundary = boundary;
  };
  FormData2.prototype.getLengthSync = function() {
    var knownLength = this._overheadLength + this._valueLength;
    if (this._streams.length) {
      knownLength += this._lastBoundary().length;
    }
    if (!this.hasKnownLength()) {
      this._error(new Error("Cannot calculate proper length in synchronous way."));
    }
    return knownLength;
  };
  FormData2.prototype.hasKnownLength = function() {
    var hasKnownLength = true;
    if (this._valuesToMeasure.length) {
      hasKnownLength = false;
    }
    return hasKnownLength;
  };
  FormData2.prototype.getLength = function(cb) {
    var knownLength = this._overheadLength + this._valueLength;
    if (this._streams.length) {
      knownLength += this._lastBoundary().length;
    }
    if (!this._valuesToMeasure.length) {
      process.nextTick(cb.bind(this, null, knownLength));
      return;
    }
    asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {
      if (err) {
        cb(err);
        return;
      }
      values.forEach(function(length) {
        knownLength += length;
      });
      cb(null, knownLength);
    });
  };
  FormData2.prototype.submit = function(params, cb) {
    var request, options, defaults = { method: "post" };
    if (typeof params == "string") {
      params = parseUrl(params);
      options = populate({
        port: params.port,
        path: params.pathname,
        host: params.hostname,
        protocol: params.protocol
      }, defaults);
    } else {
      options = populate(params, defaults);
      if (!options.port) {
        options.port = options.protocol == "https:" ? 443 : 80;
      }
    }
    options.headers = this.getHeaders(params.headers);
    if (options.protocol == "https:") {
      request = https.request(options);
    } else {
      request = http.request(options);
    }
    this.getLength(function(err, length) {
      if (err && err !== "Unknown stream") {
        this._error(err);
        return;
      }
      if (length) {
        request.setHeader("Content-Length", length);
      }
      this.pipe(request);
      if (cb) {
        var onResponse;
        var callback = function(error, responce) {
          request.removeListener("error", callback);
          request.removeListener("response", onResponse);
          return cb.call(this, error, responce);
        };
        onResponse = callback.bind(this, null);
        request.on("error", callback);
        request.on("response", onResponse);
      }
    }.bind(this));
    return request;
  };
  FormData2.prototype._error = function(err) {
    if (!this.error) {
      this.error = err;
      this.pause();
      this.emit("error", err);
    }
  };
  FormData2.prototype.toString = function() {
    return "[object FormData]";
  };
});

// node_modules/bytes/index.js
var require_bytes = __commonJS((exports, module) => {
  var bytes = function(value, options) {
    if (typeof value === "string") {
      return parse(value);
    }
    if (typeof value === "number") {
      return format(value, options);
    }
    return null;
  };
  var format = function(value, options) {
    if (!Number.isFinite(value)) {
      return null;
    }
    var mag = Math.abs(value);
    var thousandsSeparator = options && options.thousandsSeparator || "";
    var unitSeparator = options && options.unitSeparator || "";
    var decimalPlaces = options && options.decimalPlaces !== undefined ? options.decimalPlaces : 2;
    var fixedDecimals = Boolean(options && options.fixedDecimals);
    var unit = options && options.unit || "";
    if (!unit || !map[unit.toLowerCase()]) {
      if (mag >= map.pb) {
        unit = "PB";
      } else if (mag >= map.tb) {
        unit = "TB";
      } else if (mag >= map.gb) {
        unit = "GB";
      } else if (mag >= map.mb) {
        unit = "MB";
      } else if (mag >= map.kb) {
        unit = "KB";
      } else {
        unit = "B";
      }
    }
    var val = value / map[unit.toLowerCase()];
    var str = val.toFixed(decimalPlaces);
    if (!fixedDecimals) {
      str = str.replace(formatDecimalsRegExp, "$1");
    }
    if (thousandsSeparator) {
      str = str.split(".").map(function(s, i) {
        return i === 0 ? s.replace(formatThousandsRegExp, thousandsSeparator) : s;
      }).join(".");
    }
    return str + unitSeparator + unit;
  };
  var parse = function(val) {
    if (typeof val === "number" && !isNaN(val)) {
      return val;
    }
    if (typeof val !== "string") {
      return null;
    }
    var results = parseRegExp.exec(val);
    var floatValue;
    var unit = "b";
    if (!results) {
      floatValue = parseInt(val, 10);
      unit = "b";
    } else {
      floatValue = parseFloat(results[1]);
      unit = results[4].toLowerCase();
    }
    if (isNaN(floatValue)) {
      return null;
    }
    return Math.floor(map[unit] * floatValue);
  };
  /*!
   * bytes
   * Copyright(c) 2012-2014 TJ Holowaychuk
   * Copyright(c) 2015 Jed Watson
   * MIT Licensed
   */
  module.exports = bytes;
  module.exports.format = format;
  module.exports.parse = parse;
  var formatThousandsRegExp = /\B(?=(\d{3})+(?!\d))/g;
  var formatDecimalsRegExp = /(?:\.0*|(\.[^0]+)0+)$/;
  var map = {
    b: 1,
    kb: 1 << 10,
    mb: 1 << 20,
    gb: 1 << 30,
    tb: Math.pow(1024, 4),
    pb: Math.pow(1024, 5)
  };
  var parseRegExp = /^((-|\+)?(\d+(?:\.\d+)?)) *(kb|mb|gb|tb|pb)$/i;
});

// node_modules/content-type/index.js
var require_content_type = __commonJS((exports) => {
  var format = function(obj) {
    if (!obj || typeof obj !== "object") {
      throw new TypeError("argument obj is required");
    }
    var parameters = obj.parameters;
    var type = obj.type;
    if (!type || !TYPE_REGEXP.test(type)) {
      throw new TypeError("invalid type");
    }
    var string = type;
    if (parameters && typeof parameters === "object") {
      var param;
      var params = Object.keys(parameters).sort();
      for (var i = 0;i < params.length; i++) {
        param = params[i];
        if (!TOKEN_REGEXP.test(param)) {
          throw new TypeError("invalid parameter name");
        }
        string += "; " + param + "=" + qstring(parameters[param]);
      }
    }
    return string;
  };
  var parse = function(string) {
    if (!string) {
      throw new TypeError("argument string is required");
    }
    var header = typeof string === "object" ? getcontenttype(string) : string;
    if (typeof header !== "string") {
      throw new TypeError("argument string is required to be a string");
    }
    var index = header.indexOf(";");
    var type = index !== -1 ? header.slice(0, index).trim() : header.trim();
    if (!TYPE_REGEXP.test(type)) {
      throw new TypeError("invalid media type");
    }
    var obj = new ContentType(type.toLowerCase());
    if (index !== -1) {
      var key;
      var match;
      var value;
      PARAM_REGEXP.lastIndex = index;
      while (match = PARAM_REGEXP.exec(header)) {
        if (match.index !== index) {
          throw new TypeError("invalid parameter format");
        }
        index += match[0].length;
        key = match[1].toLowerCase();
        value = match[2];
        if (value.charCodeAt(0) === 34) {
          value = value.slice(1, -1);
          if (value.indexOf("\\") !== -1) {
            value = value.replace(QESC_REGEXP, "$1");
          }
        }
        obj.parameters[key] = value;
      }
      if (index !== header.length) {
        throw new TypeError("invalid parameter format");
      }
    }
    return obj;
  };
  var getcontenttype = function(obj) {
    var header;
    if (typeof obj.getHeader === "function") {
      header = obj.getHeader("content-type");
    } else if (typeof obj.headers === "object") {
      header = obj.headers && obj.headers["content-type"];
    }
    if (typeof header !== "string") {
      throw new TypeError("content-type header is missing from object");
    }
    return header;
  };
  var qstring = function(val) {
    var str = String(val);
    if (TOKEN_REGEXP.test(str)) {
      return str;
    }
    if (str.length > 0 && !TEXT_REGEXP.test(str)) {
      throw new TypeError("invalid parameter value");
    }
    return '"' + str.replace(QUOTE_REGEXP, "\\$1") + '"';
  };
  var ContentType = function(type) {
    this.parameters = Object.create(null);
    this.type = type;
  };
  /*!
   * content-type
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var PARAM_REGEXP = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *("(?:[\u000b\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u000b\u0020-\u00ff])*"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g;
  var TEXT_REGEXP = /^[\u000b\u0020-\u007e\u0080-\u00ff]+$/;
  var TOKEN_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;
  var QESC_REGEXP = /\\([\u000b\u0020-\u00ff])/g;
  var QUOTE_REGEXP = /([\\"])/g;
  var TYPE_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;
  exports.format = format;
  exports.parse = parse;
});

// node_modules/depd/index.js
var require_depd = __commonJS((exports, module) => {
  var containsNamespace = function(str, namespace) {
    var vals = str.split(/[ ,]+/);
    var ns = String(namespace).toLowerCase();
    for (var i = 0;i < vals.length; i++) {
      var val = vals[i];
      if (val && (val === "*" || val.toLowerCase() === ns)) {
        return true;
      }
    }
    return false;
  };
  var convertDataDescriptorToAccessor = function(obj, prop, message) {
    var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
    var value = descriptor.value;
    descriptor.get = function getter() {
      return value;
    };
    if (descriptor.writable) {
      descriptor.set = function setter(val) {
        return value = val;
      };
    }
    delete descriptor.value;
    delete descriptor.writable;
    Object.defineProperty(obj, prop, descriptor);
    return descriptor;
  };
  var createArgumentsString = function(arity) {
    var str = "";
    for (var i = 0;i < arity; i++) {
      str += ", arg" + i;
    }
    return str.substr(2);
  };
  var createStackString = function(stack) {
    var str = this.name + ": " + this.namespace;
    if (this.message) {
      str += " deprecated " + this.message;
    }
    for (var i = 0;i < stack.length; i++) {
      str += "\n    at " + stack[i].toString();
    }
    return str;
  };
  var depd = function(namespace) {
    if (!namespace) {
      throw new TypeError("argument namespace is required");
    }
    var stack = getStack();
    var site = callSiteLocation(stack[1]);
    var file = site[0];
    function deprecate(message) {
      log.call(deprecate, message);
    }
    deprecate._file = file;
    deprecate._ignored = isignored(namespace);
    deprecate._namespace = namespace;
    deprecate._traced = istraced(namespace);
    deprecate._warned = Object.create(null);
    deprecate.function = wrapfunction;
    deprecate.property = wrapproperty;
    return deprecate;
  };
  var eehaslisteners = function(emitter, type) {
    var count = typeof emitter.listenerCount !== "function" ? emitter.listeners(type).length : emitter.listenerCount(type);
    return count > 0;
  };
  var isignored = function(namespace) {
    if (process.noDeprecation) {
      return true;
    }
    var str = process.env.NO_DEPRECATION || "";
    return containsNamespace(str, namespace);
  };
  var istraced = function(namespace) {
    if (process.traceDeprecation) {
      return true;
    }
    var str = process.env.TRACE_DEPRECATION || "";
    return containsNamespace(str, namespace);
  };
  var log = function(message, site) {
    var haslisteners = eehaslisteners(process, "deprecation");
    if (!haslisteners && this._ignored) {
      return;
    }
    var caller;
    var callFile;
    var callSite;
    var depSite;
    var i = 0;
    var seen = false;
    var stack = getStack();
    var file = this._file;
    if (site) {
      depSite = site;
      callSite = callSiteLocation(stack[1]);
      callSite.name = depSite.name;
      file = callSite[0];
    } else {
      i = 2;
      depSite = callSiteLocation(stack[i]);
      callSite = depSite;
    }
    for (;i < stack.length; i++) {
      caller = callSiteLocation(stack[i]);
      callFile = caller[0];
      if (callFile === file) {
        seen = true;
      } else if (callFile === this._file) {
        file = this._file;
      } else if (seen) {
        break;
      }
    }
    var key = caller ? depSite.join(":") + "__" + caller.join(":") : undefined;
    if (key !== undefined && key in this._warned) {
      return;
    }
    this._warned[key] = true;
    var msg = message;
    if (!msg) {
      msg = callSite === depSite || !callSite.name ? defaultMessage(depSite) : defaultMessage(callSite);
    }
    if (haslisteners) {
      var err = DeprecationError(this._namespace, msg, stack.slice(i));
      process.emit("deprecation", err);
      return;
    }
    var format = process.stderr.isTTY ? formatColor : formatPlain;
    var output = format.call(this, msg, caller, stack.slice(i));
    process.stderr.write(output + "\n", "utf8");
  };
  var callSiteLocation = function(callSite) {
    var file = callSite.getFileName() || "<anonymous>";
    var line = callSite.getLineNumber();
    var colm = callSite.getColumnNumber();
    if (callSite.isEval()) {
      file = callSite.getEvalOrigin() + ", " + file;
    }
    var site = [file, line, colm];
    site.callSite = callSite;
    site.name = callSite.getFunctionName();
    return site;
  };
  var defaultMessage = function(site) {
    var callSite = site.callSite;
    var funcName = site.name;
    if (!funcName) {
      funcName = "<anonymous@" + formatLocation(site) + ">";
    }
    var context = callSite.getThis();
    var typeName = context && callSite.getTypeName();
    if (typeName === "Object") {
      typeName = undefined;
    }
    if (typeName === "Function") {
      typeName = context.name || typeName;
    }
    return typeName && callSite.getMethodName() ? typeName + "." + funcName : funcName;
  };
  var formatPlain = function(msg, caller, stack) {
    var timestamp = new Date().toUTCString();
    var formatted = timestamp + " " + this._namespace + " deprecated " + msg;
    if (this._traced) {
      for (var i = 0;i < stack.length; i++) {
        formatted += "\n    at " + stack[i].toString();
      }
      return formatted;
    }
    if (caller) {
      formatted += " at " + formatLocation(caller);
    }
    return formatted;
  };
  var formatColor = function(msg, caller, stack) {
    var formatted = "\x1B[36;1m" + this._namespace + "\x1B[22;39m" + " \x1B[33;1mdeprecated\x1B[22;39m" + " \x1B[0m" + msg + "\x1B[39m";
    if (this._traced) {
      for (var i = 0;i < stack.length; i++) {
        formatted += `
    \x1B[36mat ` + stack[i].toString() + "\x1B[39m";
      }
      return formatted;
    }
    if (caller) {
      formatted += " \x1B[36m" + formatLocation(caller) + "\x1B[39m";
    }
    return formatted;
  };
  var formatLocation = function(callSite) {
    return relative(basePath, callSite[0]) + ":" + callSite[1] + ":" + callSite[2];
  };
  var getStack = function() {
    var limit = Error.stackTraceLimit;
    var obj = {};
    var prep = Error.prepareStackTrace;
    Error.prepareStackTrace = prepareObjectStackTrace;
    Error.stackTraceLimit = Math.max(10, limit);
    Error.captureStackTrace(obj);
    var stack = obj.stack.slice(1);
    Error.prepareStackTrace = prep;
    Error.stackTraceLimit = limit;
    return stack;
  };
  var prepareObjectStackTrace = function(obj, stack) {
    return stack;
  };
  var wrapfunction = function(fn, message) {
    if (typeof fn !== "function") {
      throw new TypeError("argument fn must be a function");
    }
    var args = createArgumentsString(fn.length);
    var stack = getStack();
    var site = callSiteLocation(stack[1]);
    site.name = fn.name;
    var deprecatedfn = new Function("fn", "log", "deprecate", "message", "site", '"use strict"\nreturn function (' + args + ") {log.call(deprecate, message, site)\nreturn fn.apply(this, arguments)\n}")(fn, log, this, message, site);
    return deprecatedfn;
  };
  var wrapproperty = function(obj, prop, message) {
    if (!obj || typeof obj !== "object" && typeof obj !== "function") {
      throw new TypeError("argument obj must be object");
    }
    var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
    if (!descriptor) {
      throw new TypeError("must call property on owner object");
    }
    if (!descriptor.configurable) {
      throw new TypeError("property must be configurable");
    }
    var deprecate = this;
    var stack = getStack();
    var site = callSiteLocation(stack[1]);
    site.name = prop;
    if ("value" in descriptor) {
      descriptor = convertDataDescriptorToAccessor(obj, prop, message);
    }
    var get = descriptor.get;
    var set = descriptor.set;
    if (typeof get === "function") {
      descriptor.get = function getter() {
        log.call(deprecate, message, site);
        return get.apply(this, arguments);
      };
    }
    if (typeof set === "function") {
      descriptor.set = function setter() {
        log.call(deprecate, message, site);
        return set.apply(this, arguments);
      };
    }
    Object.defineProperty(obj, prop, descriptor);
  };
  var DeprecationError = function(namespace, message, stack) {
    var error = new Error;
    var stackString;
    Object.defineProperty(error, "constructor", {
      value: DeprecationError
    });
    Object.defineProperty(error, "message", {
      configurable: true,
      enumerable: false,
      value: message,
      writable: true
    });
    Object.defineProperty(error, "name", {
      enumerable: false,
      configurable: true,
      value: "DeprecationError",
      writable: true
    });
    Object.defineProperty(error, "namespace", {
      configurable: true,
      enumerable: false,
      value: namespace,
      writable: true
    });
    Object.defineProperty(error, "stack", {
      configurable: true,
      enumerable: false,
      get: function() {
        if (stackString !== undefined) {
          return stackString;
        }
        return stackString = createStackString.call(this, stack);
      },
      set: function setter(val) {
        stackString = val;
      }
    });
    return error;
  };
  /*!
   * depd
   * Copyright(c) 2014-2018 Douglas Christopher Wilson
   * MIT Licensed
   */
  var relative = import.meta.require("path").relative;
  module.exports = depd;
  var basePath = process.cwd();
});

// node_modules/setprototypeof/index.js
var require_setprototypeof = __commonJS((exports, module) => {
  var setProtoOf = function(obj, proto) {
    obj.__proto__ = proto;
    return obj;
  };
  var mixinProperties = function(obj, proto) {
    for (var prop in proto) {
      if (!Object.prototype.hasOwnProperty.call(obj, prop)) {
        obj[prop] = proto[prop];
      }
    }
    return obj;
  };
  module.exports = Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties);
});

// node_modules/statuses/codes.json
var require_codes = __commonJS((exports, module) => {
  module.exports = {
    "100": "Continue",
    "101": "Switching Protocols",
    "102": "Processing",
    "103": "Early Hints",
    "200": "OK",
    "201": "Created",
    "202": "Accepted",
    "203": "Non-Authoritative Information",
    "204": "No Content",
    "205": "Reset Content",
    "206": "Partial Content",
    "207": "Multi-Status",
    "208": "Already Reported",
    "226": "IM Used",
    "300": "Multiple Choices",
    "301": "Moved Permanently",
    "302": "Found",
    "303": "See Other",
    "304": "Not Modified",
    "305": "Use Proxy",
    "307": "Temporary Redirect",
    "308": "Permanent Redirect",
    "400": "Bad Request",
    "401": "Unauthorized",
    "402": "Payment Required",
    "403": "Forbidden",
    "404": "Not Found",
    "405": "Method Not Allowed",
    "406": "Not Acceptable",
    "407": "Proxy Authentication Required",
    "408": "Request Timeout",
    "409": "Conflict",
    "410": "Gone",
    "411": "Length Required",
    "412": "Precondition Failed",
    "413": "Payload Too Large",
    "414": "URI Too Long",
    "415": "Unsupported Media Type",
    "416": "Range Not Satisfiable",
    "417": "Expectation Failed",
    "418": "I'm a Teapot",
    "421": "Misdirected Request",
    "422": "Unprocessable Entity",
    "423": "Locked",
    "424": "Failed Dependency",
    "425": "Too Early",
    "426": "Upgrade Required",
    "428": "Precondition Required",
    "429": "Too Many Requests",
    "431": "Request Header Fields Too Large",
    "451": "Unavailable For Legal Reasons",
    "500": "Internal Server Error",
    "501": "Not Implemented",
    "502": "Bad Gateway",
    "503": "Service Unavailable",
    "504": "Gateway Timeout",
    "505": "HTTP Version Not Supported",
    "506": "Variant Also Negotiates",
    "507": "Insufficient Storage",
    "508": "Loop Detected",
    "509": "Bandwidth Limit Exceeded",
    "510": "Not Extended",
    "511": "Network Authentication Required"
  };
});

// node_modules/statuses/index.js
var require_statuses = __commonJS((exports, module) => {
  var createMessageToStatusCodeMap = function(codes2) {
    var map = {};
    Object.keys(codes2).forEach(function forEachCode(code) {
      var message = codes2[code];
      var status2 = Number(code);
      map[message.toLowerCase()] = status2;
    });
    return map;
  };
  var createStatusCodeList = function(codes2) {
    return Object.keys(codes2).map(function mapCode(code) {
      return Number(code);
    });
  };
  var getStatusCode = function(message) {
    var msg = message.toLowerCase();
    if (!Object.prototype.hasOwnProperty.call(status.code, msg)) {
      throw new Error('invalid status message: "' + message + '"');
    }
    return status.code[msg];
  };
  var getStatusMessage = function(code) {
    if (!Object.prototype.hasOwnProperty.call(status.message, code)) {
      throw new Error("invalid status code: " + code);
    }
    return status.message[code];
  };
  var status = function(code) {
    if (typeof code === "number") {
      return getStatusMessage(code);
    }
    if (typeof code !== "string") {
      throw new TypeError("code must be a number or string");
    }
    var n = parseInt(code, 10);
    if (!isNaN(n)) {
      return getStatusMessage(n);
    }
    return getStatusCode(code);
  };
  /*!
   * statuses
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  var codes = require_codes();
  module.exports = status;
  status.message = codes;
  status.code = createMessageToStatusCodeMap(codes);
  status.codes = createStatusCodeList(codes);
  status.redirect = {
    300: true,
    301: true,
    302: true,
    303: true,
    305: true,
    307: true,
    308: true
  };
  status.empty = {
    204: true,
    205: true,
    304: true
  };
  status.retry = {
    502: true,
    503: true,
    504: true
  };
});

// node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS((exports, module) => {
  if (typeof Object.create === "function") {
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor;
        ctor.prototype.constructor = ctor;
      }
    };
  }
});

// node_modules/inherits/inherits.js
var require_inherits = __commonJS((exports, module) => {
  try {
    util = import.meta.require("util");
    if (typeof util.inherits !== "function")
      throw "";
    module.exports = util.inherits;
  } catch (e) {
    module.exports = require_inherits_browser();
  }
  var util;
});

// node_modules/toidentifier/index.js
var require_toidentifier = __commonJS((exports, module) => {
  var toIdentifier = function(str) {
    return str.split(" ").map(function(token) {
      return token.slice(0, 1).toUpperCase() + token.slice(1);
    }).join("").replace(/[^ _0-9a-z]/gi, "");
  };
  /*!
   * toidentifier
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = toIdentifier;
});

// node_modules/http-errors/index.js
var require_http_errors = __commonJS((exports, module) => {
  var codeClass = function(status) {
    return Number(String(status).charAt(0) + "00");
  };
  var createError = function() {
    var err;
    var msg;
    var status = 500;
    var props = {};
    for (var i = 0;i < arguments.length; i++) {
      var arg = arguments[i];
      var type = typeof arg;
      if (type === "object" && arg instanceof Error) {
        err = arg;
        status = err.status || err.statusCode || status;
      } else if (type === "number" && i === 0) {
        status = arg;
      } else if (type === "string") {
        msg = arg;
      } else if (type === "object") {
        props = arg;
      } else {
        throw new TypeError("argument #" + (i + 1) + " unsupported type " + type);
      }
    }
    if (typeof status === "number" && (status < 400 || status >= 600)) {
      deprecate("non-error status code; use only 4xx or 5xx status codes");
    }
    if (typeof status !== "number" || !statuses.message[status] && (status < 400 || status >= 600)) {
      status = 500;
    }
    var HttpError = createError[status] || createError[codeClass(status)];
    if (!err) {
      err = HttpError ? new HttpError(msg) : new Error(msg || statuses.message[status]);
      Error.captureStackTrace(err, createError);
    }
    if (!HttpError || !(err instanceof HttpError) || err.status !== status) {
      err.expose = status < 500;
      err.status = err.statusCode = status;
    }
    for (var key in props) {
      if (key !== "status" && key !== "statusCode") {
        err[key] = props[key];
      }
    }
    return err;
  };
  var createHttpErrorConstructor = function() {
    function HttpError() {
      throw new TypeError("cannot construct abstract class");
    }
    inherits(HttpError, Error);
    return HttpError;
  };
  var createClientErrorConstructor = function(HttpError, name, code) {
    var className = toClassName(name);
    function ClientError(message) {
      var msg = message != null ? message : statuses.message[code];
      var err = new Error(msg);
      Error.captureStackTrace(err, ClientError);
      setPrototypeOf(err, ClientError.prototype);
      Object.defineProperty(err, "message", {
        enumerable: true,
        configurable: true,
        value: msg,
        writable: true
      });
      Object.defineProperty(err, "name", {
        enumerable: false,
        configurable: true,
        value: className,
        writable: true
      });
      return err;
    }
    inherits(ClientError, HttpError);
    nameFunc(ClientError, className);
    ClientError.prototype.status = code;
    ClientError.prototype.statusCode = code;
    ClientError.prototype.expose = true;
    return ClientError;
  };
  var createIsHttpErrorFunction = function(HttpError) {
    return function isHttpError(val) {
      if (!val || typeof val !== "object") {
        return false;
      }
      if (val instanceof HttpError) {
        return true;
      }
      return val instanceof Error && typeof val.expose === "boolean" && typeof val.statusCode === "number" && val.status === val.statusCode;
    };
  };
  var createServerErrorConstructor = function(HttpError, name, code) {
    var className = toClassName(name);
    function ServerError(message) {
      var msg = message != null ? message : statuses.message[code];
      var err = new Error(msg);
      Error.captureStackTrace(err, ServerError);
      setPrototypeOf(err, ServerError.prototype);
      Object.defineProperty(err, "message", {
        enumerable: true,
        configurable: true,
        value: msg,
        writable: true
      });
      Object.defineProperty(err, "name", {
        enumerable: false,
        configurable: true,
        value: className,
        writable: true
      });
      return err;
    }
    inherits(ServerError, HttpError);
    nameFunc(ServerError, className);
    ServerError.prototype.status = code;
    ServerError.prototype.statusCode = code;
    ServerError.prototype.expose = false;
    return ServerError;
  };
  var nameFunc = function(func, name) {
    var desc = Object.getOwnPropertyDescriptor(func, "name");
    if (desc && desc.configurable) {
      desc.value = name;
      Object.defineProperty(func, "name", desc);
    }
  };
  var populateConstructorExports = function(exports2, codes, HttpError) {
    codes.forEach(function forEachCode(code) {
      var CodeError;
      var name = toIdentifier(statuses.message[code]);
      switch (codeClass(code)) {
        case 400:
          CodeError = createClientErrorConstructor(HttpError, name, code);
          break;
        case 500:
          CodeError = createServerErrorConstructor(HttpError, name, code);
          break;
      }
      if (CodeError) {
        exports2[code] = CodeError;
        exports2[name] = CodeError;
      }
    });
  };
  var toClassName = function(name) {
    return name.substr(-5) !== "Error" ? name + "Error" : name;
  };
  /*!
   * http-errors
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  var deprecate = require_depd()("http-errors");
  var setPrototypeOf = require_setprototypeof();
  var statuses = require_statuses();
  var inherits = require_inherits();
  var toIdentifier = require_toidentifier();
  module.exports = createError;
  module.exports.HttpError = createHttpErrorConstructor();
  module.exports.isHttpError = createIsHttpErrorFunction(module.exports.HttpError);
  populateConstructorExports(module.exports, statuses.codes, module.exports.HttpError);
});

// node_modules/body-parser/node_modules/debug/node_modules/ms/index.js
var require_ms = __commonJS((exports, module) => {
  var parse = function(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch (type) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return n * y;
      case "days":
      case "day":
      case "d":
        return n * d;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return n * h;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return n * m;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return n * s;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return n;
      default:
        return;
    }
  };
  var fmtShort = function(ms) {
    if (ms >= d) {
      return Math.round(ms / d) + "d";
    }
    if (ms >= h) {
      return Math.round(ms / h) + "h";
    }
    if (ms >= m) {
      return Math.round(ms / m) + "m";
    }
    if (ms >= s) {
      return Math.round(ms / s) + "s";
    }
    return ms + "ms";
  };
  var fmtLong = function(ms) {
    return plural(ms, d, "day") || plural(ms, h, "hour") || plural(ms, m, "minute") || plural(ms, s, "second") || ms + " ms";
  };
  var plural = function(ms, n, name) {
    if (ms < n) {
      return;
    }
    if (ms < n * 1.5) {
      return Math.floor(ms / n) + " " + name;
    }
    return Math.ceil(ms / n) + " " + name + "s";
  };
  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var y = d * 365.25;
  module.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
      return parse(val);
    } else if (type === "number" && isNaN(val) === false) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
  };
});

// node_modules/body-parser/node_modules/debug/src/debug.js
var require_debug = __commonJS((exports, module) => {
  var selectColor = function(namespace) {
    var hash = 0, i;
    for (i in namespace) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0;
    }
    return exports.colors[Math.abs(hash) % exports.colors.length];
  };
  var createDebug = function(namespace) {
    function debug2() {
      if (!debug2.enabled)
        return;
      var self2 = debug2;
      var curr = +new Date;
      var ms = curr - (prevTime || curr);
      self2.diff = ms;
      self2.prev = prevTime;
      self2.curr = curr;
      prevTime = curr;
      var args = new Array(arguments.length);
      for (var i = 0;i < args.length; i++) {
        args[i] = arguments[i];
      }
      args[0] = exports.coerce(args[0]);
      if (typeof args[0] !== "string") {
        args.unshift("%O");
      }
      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
        if (match === "%%")
          return match;
        index++;
        var formatter = exports.formatters[format];
        if (typeof formatter === "function") {
          var val = args[index];
          match = formatter.call(self2, val);
          args.splice(index, 1);
          index--;
        }
        return match;
      });
      exports.formatArgs.call(self2, args);
      var logFn = debug2.log || exports.log || console.log.bind(console);
      logFn.apply(self2, args);
    }
    debug2.namespace = namespace;
    debug2.enabled = exports.enabled(namespace);
    debug2.useColors = exports.useColors();
    debug2.color = selectColor(namespace);
    if (typeof exports.init === "function") {
      exports.init(debug2);
    }
    return debug2;
  };
  var enable = function(namespaces) {
    exports.save(namespaces);
    exports.names = [];
    exports.skips = [];
    var split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
    var len = split.length;
    for (var i = 0;i < len; i++) {
      if (!split[i])
        continue;
      namespaces = split[i].replace(/\*/g, ".*?");
      if (namespaces[0] === "-") {
        exports.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
      } else {
        exports.names.push(new RegExp("^" + namespaces + "$"));
      }
    }
  };
  var disable = function() {
    exports.enable("");
  };
  var enabled = function(name) {
    var i, len;
    for (i = 0, len = exports.skips.length;i < len; i++) {
      if (exports.skips[i].test(name)) {
        return false;
      }
    }
    for (i = 0, len = exports.names.length;i < len; i++) {
      if (exports.names[i].test(name)) {
        return true;
      }
    }
    return false;
  };
  var coerce = function(val) {
    if (val instanceof Error)
      return val.stack || val.message;
    return val;
  };
  exports = module.exports = createDebug.debug = createDebug["default"] = createDebug;
  exports.coerce = coerce;
  exports.disable = disable;
  exports.enable = enable;
  exports.enabled = enabled;
  exports.humanize = require_ms();
  exports.names = [];
  exports.skips = [];
  exports.formatters = {};
  var prevTime;
});

// node_modules/body-parser/node_modules/debug/src/browser.js
var require_browser = __commonJS((exports, module) => {
  var useColors = function() {
    if (typeof window !== "undefined" && window.process && window.process.type === "renderer") {
      return true;
    }
    return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  };
  var formatArgs = function(args) {
    var useColors2 = this.useColors;
    args[0] = (useColors2 ? "%c" : "") + this.namespace + (useColors2 ? " %c" : " ") + args[0] + (useColors2 ? "%c " : " ") + "+" + exports.humanize(this.diff);
    if (!useColors2)
      return;
    var c = "color: " + this.color;
    args.splice(1, 0, c, "color: inherit");
    var index = 0;
    var lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, function(match) {
      if (match === "%%")
        return;
      index++;
      if (match === "%c") {
        lastC = index;
      }
    });
    args.splice(lastC, 0, c);
  };
  var log = function() {
    return typeof console === "object" && console.log && Function.prototype.apply.call(console.log, console, arguments);
  };
  var save = function(namespaces) {
    try {
      if (namespaces == null) {
        exports.storage.removeItem("debug");
      } else {
        exports.storage.debug = namespaces;
      }
    } catch (e) {
    }
  };
  var load = function() {
    var r;
    try {
      r = exports.storage.debug;
    } catch (e) {
    }
    if (!r && typeof process !== "undefined" && "env" in process) {
      r = process.env.DEBUG;
    }
    return r;
  };
  var localstorage = function() {
    try {
      return window.localStorage;
    } catch (e) {
    }
  };
  exports = module.exports = require_debug();
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = typeof chrome != "undefined" && typeof chrome.storage != "undefined" ? chrome.storage.local : localstorage();
  exports.colors = [
    "lightseagreen",
    "forestgreen",
    "goldenrod",
    "dodgerblue",
    "darkorchid",
    "crimson"
  ];
  exports.formatters.j = function(v) {
    try {
      return JSON.stringify(v);
    } catch (err) {
      return "[UnexpectedJSONParseError]: " + err.message;
    }
  };
  exports.enable(load());
});

// node_modules/body-parser/node_modules/debug/src/node.js
var require_node = __commonJS((exports, module) => {
  var useColors = function() {
    return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(fd);
  };
  var formatArgs = function(args) {
    var name = this.namespace;
    var useColors2 = this.useColors;
    if (useColors2) {
      var c = this.color;
      var prefix = "  \x1B[3" + c + ";1m" + name + " " + "\x1B[0m";
      args[0] = prefix + args[0].split("\n").join("\n" + prefix);
      args.push("\x1B[3" + c + "m+" + exports.humanize(this.diff) + "\x1B[0m");
    } else {
      args[0] = new Date().toUTCString() + " " + name + " " + args[0];
    }
  };
  var log = function() {
    return stream.write(util.format.apply(util, arguments) + "\n");
  };
  var save = function(namespaces) {
    if (namespaces == null) {
      delete process.env.DEBUG;
    } else {
      process.env.DEBUG = namespaces;
    }
  };
  var load = function() {
    return process.env.DEBUG;
  };
  var createWritableStdioStream = function(fd2) {
    var stream2;
    var tty_wrap = process.binding("tty_wrap");
    switch (tty_wrap.guessHandleType(fd2)) {
      case "TTY":
        stream2 = new tty.WriteStream(fd2);
        stream2._type = "tty";
        if (stream2._handle && stream2._handle.unref) {
          stream2._handle.unref();
        }
        break;
      case "FILE":
        var fs = import.meta.require("fs");
        stream2 = new fs.SyncWriteStream(fd2, { autoClose: false });
        stream2._type = "fs";
        break;
      case "PIPE":
      case "TCP":
        var net = import.meta.require("net");
        stream2 = new net.Socket({
          fd: fd2,
          readable: false,
          writable: true
        });
        stream2.readable = false;
        stream2.read = null;
        stream2._type = "pipe";
        if (stream2._handle && stream2._handle.unref) {
          stream2._handle.unref();
        }
        break;
      default:
        throw new Error("Implement me. Unknown stream file type!");
    }
    stream2.fd = fd2;
    stream2._isStdio = true;
    return stream2;
  };
  var init = function(debug2) {
    debug2.inspectOpts = {};
    var keys = Object.keys(exports.inspectOpts);
    for (var i = 0;i < keys.length; i++) {
      debug2.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
  };
  var tty = import.meta.require("tty");
  var util = import.meta.require("util");
  exports = module.exports = require_debug();
  exports.init = init;
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.colors = [6, 2, 3, 4, 5, 1];
  exports.inspectOpts = Object.keys(process.env).filter(function(key) {
    return /^debug_/i.test(key);
  }).reduce(function(obj, key) {
    var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function(_, k) {
      return k.toUpperCase();
    });
    var val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val))
      val = true;
    else if (/^(no|off|false|disabled)$/i.test(val))
      val = false;
    else if (val === "null")
      val = null;
    else
      val = Number(val);
    obj[prop] = val;
    return obj;
  }, {});
  var fd = parseInt(process.env.DEBUG_FD, 10) || 2;
  if (fd !== 1 && fd !== 2) {
    util.deprecate(function() {
    }, "except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)")();
  }
  var stream = fd === 1 ? process.stdout : fd === 2 ? process.stderr : createWritableStdioStream(fd);
  exports.formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts).split("\n").map(function(str) {
      return str.trim();
    }).join(" ");
  };
  exports.formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts);
  };
  exports.enable(load());
});

// node_modules/body-parser/node_modules/debug/src/index.js
var require_src = __commonJS((exports, module) => {
  if (typeof process !== "undefined" && process.type === "renderer") {
    module.exports = require_browser();
  } else {
    module.exports = require_node();
  }
});

// node_modules/destroy/index.js
var require_destroy = __commonJS((exports, module) => {
  var destroy = function(stream, suppress) {
    if (isFsReadStream(stream)) {
      destroyReadStream(stream);
    } else if (isZlibStream(stream)) {
      destroyZlibStream(stream);
    } else if (hasDestroy(stream)) {
      stream.destroy();
    }
    if (isEventEmitter(stream) && suppress) {
      stream.removeAllListeners("error");
      stream.addListener("error", noop);
    }
    return stream;
  };
  var destroyReadStream = function(stream) {
    stream.destroy();
    if (typeof stream.close === "function") {
      stream.on("open", onOpenClose);
    }
  };
  var closeZlibStream = function(stream) {
    if (stream._hadError === true) {
      var prop = stream._binding === null ? "_binding" : "_handle";
      stream[prop] = {
        close: function() {
          this[prop] = null;
        }
      };
    }
    stream.close();
  };
  var destroyZlibStream = function(stream) {
    if (typeof stream.destroy === "function") {
      if (stream._binding) {
        stream.destroy();
        if (stream._processing) {
          stream._needDrain = true;
          stream.once("drain", onDrainClearBinding);
        } else {
          stream._binding.clear();
        }
      } else if (stream._destroy && stream._destroy !== Stream.Transform.prototype._destroy) {
        stream.destroy();
      } else if (stream._destroy && typeof stream.close === "function") {
        stream.destroyed = true;
        stream.close();
      } else {
        stream.destroy();
      }
    } else if (typeof stream.close === "function") {
      closeZlibStream(stream);
    }
  };
  var hasDestroy = function(stream) {
    return stream instanceof Stream && typeof stream.destroy === "function";
  };
  var isEventEmitter = function(val) {
    return val instanceof EventEmitter;
  };
  var isFsReadStream = function(stream) {
    return stream instanceof ReadStream;
  };
  var isZlibStream = function(stream) {
    return stream instanceof Zlib.Gzip || stream instanceof Zlib.Gunzip || stream instanceof Zlib.Deflate || stream instanceof Zlib.DeflateRaw || stream instanceof Zlib.Inflate || stream instanceof Zlib.InflateRaw || stream instanceof Zlib.Unzip;
  };
  var noop = function() {
  };
  var onDrainClearBinding = function() {
    this._binding.clear();
  };
  var onOpenClose = function() {
    if (typeof this.fd === "number") {
      this.close();
    }
  };
  /*!
   * destroy
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015-2022 Douglas Christopher Wilson
   * MIT Licensed
   */
  var EventEmitter = import.meta.require("events").EventEmitter;
  var ReadStream = import.meta.require("fs").ReadStream;
  var Stream = import.meta.require("stream");
  var Zlib = import.meta.require("zlib");
  module.exports = destroy;
});

// node_modules/safer-buffer/safer.js
var require_safer = __commonJS((exports, module) => {
  var buffer = import.meta.require("buffer");
  var Buffer2 = buffer.Buffer;
  var safer = {};
  var key;
  for (key in buffer) {
    if (!buffer.hasOwnProperty(key))
      continue;
    if (key === "SlowBuffer" || key === "Buffer")
      continue;
    safer[key] = buffer[key];
  }
  var Safer = safer.Buffer = {};
  for (key in Buffer2) {
    if (!Buffer2.hasOwnProperty(key))
      continue;
    if (key === "allocUnsafe" || key === "allocUnsafeSlow")
      continue;
    Safer[key] = Buffer2[key];
  }
  safer.Buffer.prototype = Buffer2.prototype;
  if (!Safer.from || Safer.from === Uint8Array.from) {
    Safer.from = function(value, encodingOrOffset, length) {
      if (typeof value === "number") {
        throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value);
      }
      if (value && typeof value.length === "undefined") {
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
      }
      return Buffer2(value, encodingOrOffset, length);
    };
  }
  if (!Safer.alloc) {
    Safer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size);
      }
      if (size < 0 || size >= 2 * (1 << 30)) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"');
      }
      var buf = Buffer2(size);
      if (!fill || fill.length === 0) {
        buf.fill(0);
      } else if (typeof encoding === "string") {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
      return buf;
    };
  }
  if (!safer.kStringMaxLength) {
    try {
      safer.kStringMaxLength = process.binding("buffer").kStringMaxLength;
    } catch (e) {
    }
  }
  if (!safer.constants) {
    safer.constants = {
      MAX_LENGTH: safer.kMaxLength
    };
    if (safer.kStringMaxLength) {
      safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
    }
  }
  module.exports = safer;
});

// node_modules/iconv-lite/lib/bom-handling.js
var require_bom_handling = __commonJS((exports) => {
  var PrependBOMWrapper = function(encoder, options) {
    this.encoder = encoder;
    this.addBOM = true;
  };
  var StripBOMWrapper = function(decoder, options) {
    this.decoder = decoder;
    this.pass = false;
    this.options = options || {};
  };
  var BOMChar = "\uFEFF";
  exports.PrependBOM = PrependBOMWrapper;
  PrependBOMWrapper.prototype.write = function(str) {
    if (this.addBOM) {
      str = BOMChar + str;
      this.addBOM = false;
    }
    return this.encoder.write(str);
  };
  PrependBOMWrapper.prototype.end = function() {
    return this.encoder.end();
  };
  exports.StripBOM = StripBOMWrapper;
  StripBOMWrapper.prototype.write = function(buf) {
    var res = this.decoder.write(buf);
    if (this.pass || !res)
      return res;
    if (res[0] === BOMChar) {
      res = res.slice(1);
      if (typeof this.options.stripBOM === "function")
        this.options.stripBOM();
    }
    this.pass = true;
    return res;
  };
  StripBOMWrapper.prototype.end = function() {
    return this.decoder.end();
  };
});

// node_modules/iconv-lite/encodings/internal.js
var require_internal = __commonJS((exports, module) => {
  var InternalCodec = function(codecOptions, iconv) {
    this.enc = codecOptions.encodingName;
    this.bomAware = codecOptions.bomAware;
    if (this.enc === "base64")
      this.encoder = InternalEncoderBase64;
    else if (this.enc === "cesu8") {
      this.enc = "utf8";
      this.encoder = InternalEncoderCesu8;
      if (Buffer2.from("eda0bdedb2a9", "hex").toString() !== "\uD83D\uDCA9") {
        this.decoder = InternalDecoderCesu8;
        this.defaultCharUnicode = iconv.defaultCharUnicode;
      }
    }
  };
  var InternalDecoder = function(options, codec) {
    StringDecoder.call(this, codec.enc);
  };
  var InternalEncoder = function(options, codec) {
    this.enc = codec.enc;
  };
  var InternalEncoderBase64 = function(options, codec) {
    this.prevStr = "";
  };
  var InternalEncoderCesu8 = function(options, codec) {
  };
  var InternalDecoderCesu8 = function(options, codec) {
    this.acc = 0;
    this.contBytes = 0;
    this.accBytes = 0;
    this.defaultCharUnicode = codec.defaultCharUnicode;
  };
  var Buffer2 = require_safer().Buffer;
  module.exports = {
    utf8: { type: "_internal", bomAware: true },
    cesu8: { type: "_internal", bomAware: true },
    unicode11utf8: "utf8",
    ucs2: { type: "_internal", bomAware: true },
    utf16le: "ucs2",
    binary: { type: "_internal" },
    base64: { type: "_internal" },
    hex: { type: "_internal" },
    _internal: InternalCodec
  };
  InternalCodec.prototype.encoder = InternalEncoder;
  InternalCodec.prototype.decoder = InternalDecoder;
  var StringDecoder = import.meta.require("string_decoder").StringDecoder;
  if (!StringDecoder.prototype.end)
    StringDecoder.prototype.end = function() {
    };
  InternalDecoder.prototype = StringDecoder.prototype;
  InternalEncoder.prototype.write = function(str) {
    return Buffer2.from(str, this.enc);
  };
  InternalEncoder.prototype.end = function() {
  };
  InternalEncoderBase64.prototype.write = function(str) {
    str = this.prevStr + str;
    var completeQuads = str.length - str.length % 4;
    this.prevStr = str.slice(completeQuads);
    str = str.slice(0, completeQuads);
    return Buffer2.from(str, "base64");
  };
  InternalEncoderBase64.prototype.end = function() {
    return Buffer2.from(this.prevStr, "base64");
  };
  InternalEncoderCesu8.prototype.write = function(str) {
    var buf = Buffer2.alloc(str.length * 3), bufIdx = 0;
    for (var i = 0;i < str.length; i++) {
      var charCode = str.charCodeAt(i);
      if (charCode < 128)
        buf[bufIdx++] = charCode;
      else if (charCode < 2048) {
        buf[bufIdx++] = 192 + (charCode >>> 6);
        buf[bufIdx++] = 128 + (charCode & 63);
      } else {
        buf[bufIdx++] = 224 + (charCode >>> 12);
        buf[bufIdx++] = 128 + (charCode >>> 6 & 63);
        buf[bufIdx++] = 128 + (charCode & 63);
      }
    }
    return buf.slice(0, bufIdx);
  };
  InternalEncoderCesu8.prototype.end = function() {
  };
  InternalDecoderCesu8.prototype.write = function(buf) {
    var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes, res = "";
    for (var i = 0;i < buf.length; i++) {
      var curByte = buf[i];
      if ((curByte & 192) !== 128) {
        if (contBytes > 0) {
          res += this.defaultCharUnicode;
          contBytes = 0;
        }
        if (curByte < 128) {
          res += String.fromCharCode(curByte);
        } else if (curByte < 224) {
          acc = curByte & 31;
          contBytes = 1;
          accBytes = 1;
        } else if (curByte < 240) {
          acc = curByte & 15;
          contBytes = 2;
          accBytes = 1;
        } else {
          res += this.defaultCharUnicode;
        }
      } else {
        if (contBytes > 0) {
          acc = acc << 6 | curByte & 63;
          contBytes--;
          accBytes++;
          if (contBytes === 0) {
            if (accBytes === 2 && acc < 128 && acc > 0)
              res += this.defaultCharUnicode;
            else if (accBytes === 3 && acc < 2048)
              res += this.defaultCharUnicode;
            else
              res += String.fromCharCode(acc);
          }
        } else {
          res += this.defaultCharUnicode;
        }
      }
    }
    this.acc = acc;
    this.contBytes = contBytes;
    this.accBytes = accBytes;
    return res;
  };
  InternalDecoderCesu8.prototype.end = function() {
    var res = 0;
    if (this.contBytes > 0)
      res += this.defaultCharUnicode;
    return res;
  };
});

// node_modules/iconv-lite/encodings/utf16.js
var require_utf16 = __commonJS((exports) => {
  var Utf16BECodec = function() {
  };
  var Utf16BEEncoder = function() {
  };
  var Utf16BEDecoder = function() {
    this.overflowByte = -1;
  };
  var Utf16Codec = function(codecOptions, iconv) {
    this.iconv = iconv;
  };
  var Utf16Encoder = function(options, codec) {
    options = options || {};
    if (options.addBOM === undefined)
      options.addBOM = true;
    this.encoder = codec.iconv.getEncoder("utf-16le", options);
  };
  var Utf16Decoder = function(options, codec) {
    this.decoder = null;
    this.initialBytes = [];
    this.initialBytesLen = 0;
    this.options = options || {};
    this.iconv = codec.iconv;
  };
  var detectEncoding = function(buf, defaultEncoding) {
    var enc = defaultEncoding || "utf-16le";
    if (buf.length >= 2) {
      if (buf[0] == 254 && buf[1] == 255)
        enc = "utf-16be";
      else if (buf[0] == 255 && buf[1] == 254)
        enc = "utf-16le";
      else {
        var asciiCharsLE = 0, asciiCharsBE = 0, _len = Math.min(buf.length - buf.length % 2, 64);
        for (var i = 0;i < _len; i += 2) {
          if (buf[i] === 0 && buf[i + 1] !== 0)
            asciiCharsBE++;
          if (buf[i] !== 0 && buf[i + 1] === 0)
            asciiCharsLE++;
        }
        if (asciiCharsBE > asciiCharsLE)
          enc = "utf-16be";
        else if (asciiCharsBE < asciiCharsLE)
          enc = "utf-16le";
      }
    }
    return enc;
  };
  var Buffer2 = require_safer().Buffer;
  exports.utf16be = Utf16BECodec;
  Utf16BECodec.prototype.encoder = Utf16BEEncoder;
  Utf16BECodec.prototype.decoder = Utf16BEDecoder;
  Utf16BECodec.prototype.bomAware = true;
  Utf16BEEncoder.prototype.write = function(str) {
    var buf = Buffer2.from(str, "ucs2");
    for (var i = 0;i < buf.length; i += 2) {
      var tmp = buf[i];
      buf[i] = buf[i + 1];
      buf[i + 1] = tmp;
    }
    return buf;
  };
  Utf16BEEncoder.prototype.end = function() {
  };
  Utf16BEDecoder.prototype.write = function(buf) {
    if (buf.length == 0)
      return "";
    var buf2 = Buffer2.alloc(buf.length + 1), i = 0, j = 0;
    if (this.overflowByte !== -1) {
      buf2[0] = buf[0];
      buf2[1] = this.overflowByte;
      i = 1;
      j = 2;
    }
    for (;i < buf.length - 1; i += 2, j += 2) {
      buf2[j] = buf[i + 1];
      buf2[j + 1] = buf[i];
    }
    this.overflowByte = i == buf.length - 1 ? buf[buf.length - 1] : -1;
    return buf2.slice(0, j).toString("ucs2");
  };
  Utf16BEDecoder.prototype.end = function() {
  };
  exports.utf16 = Utf16Codec;
  Utf16Codec.prototype.encoder = Utf16Encoder;
  Utf16Codec.prototype.decoder = Utf16Decoder;
  Utf16Encoder.prototype.write = function(str) {
    return this.encoder.write(str);
  };
  Utf16Encoder.prototype.end = function() {
    return this.encoder.end();
  };
  Utf16Decoder.prototype.write = function(buf) {
    if (!this.decoder) {
      this.initialBytes.push(buf);
      this.initialBytesLen += buf.length;
      if (this.initialBytesLen < 16)
        return "";
      var buf = Buffer2.concat(this.initialBytes), encoding = detectEncoding(buf, this.options.defaultEncoding);
      this.decoder = this.iconv.getDecoder(encoding, this.options);
      this.initialBytes.length = this.initialBytesLen = 0;
    }
    return this.decoder.write(buf);
  };
  Utf16Decoder.prototype.end = function() {
    if (!this.decoder) {
      var buf = Buffer2.concat(this.initialBytes), encoding = detectEncoding(buf, this.options.defaultEncoding);
      this.decoder = this.iconv.getDecoder(encoding, this.options);
      var res = this.decoder.write(buf), trail = this.decoder.end();
      return trail ? res + trail : res;
    }
    return this.decoder.end();
  };
});

// node_modules/iconv-lite/encodings/utf7.js
var require_utf7 = __commonJS((exports) => {
  var Utf7Codec = function(codecOptions, iconv) {
    this.iconv = iconv;
  };
  var Utf7Encoder = function(options, codec) {
    this.iconv = codec.iconv;
  };
  var Utf7Decoder = function(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = "";
  };
  var Utf7IMAPCodec = function(codecOptions, iconv) {
    this.iconv = iconv;
  };
  var Utf7IMAPEncoder = function(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = Buffer2.alloc(6);
    this.base64AccumIdx = 0;
  };
  var Utf7IMAPDecoder = function(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = "";
  };
  var Buffer2 = require_safer().Buffer;
  exports.utf7 = Utf7Codec;
  exports.unicode11utf7 = "utf7";
  Utf7Codec.prototype.encoder = Utf7Encoder;
  Utf7Codec.prototype.decoder = Utf7Decoder;
  Utf7Codec.prototype.bomAware = true;
  var nonDirectChars = /[^A-Za-z0-9'\(\),-\.\/:\? \n\r\t]+/g;
  Utf7Encoder.prototype.write = function(str) {
    return Buffer2.from(str.replace(nonDirectChars, function(chunk) {
      return "+" + (chunk === "+" ? "" : this.iconv.encode(chunk, "utf16-be").toString("base64").replace(/=+$/, "")) + "-";
    }.bind(this)));
  };
  Utf7Encoder.prototype.end = function() {
  };
  var base64Regex = /[A-Za-z0-9\/+]/;
  var base64Chars = [];
  for (i = 0;i < 256; i++)
    base64Chars[i] = base64Regex.test(String.fromCharCode(i));
  var i;
  var plusChar = "+".charCodeAt(0);
  var minusChar = "-".charCodeAt(0);
  var andChar = "&".charCodeAt(0);
  Utf7Decoder.prototype.write = function(buf) {
    var res = "", lastI = 0, inBase64 = this.inBase64, base64Accum = this.base64Accum;
    for (var i2 = 0;i2 < buf.length; i2++) {
      if (!inBase64) {
        if (buf[i2] == plusChar) {
          res += this.iconv.decode(buf.slice(lastI, i2), "ascii");
          lastI = i2 + 1;
          inBase64 = true;
        }
      } else {
        if (!base64Chars[buf[i2]]) {
          if (i2 == lastI && buf[i2] == minusChar) {
            res += "+";
          } else {
            var b64str = base64Accum + buf.slice(lastI, i2).toString();
            res += this.iconv.decode(Buffer2.from(b64str, "base64"), "utf16-be");
          }
          if (buf[i2] != minusChar)
            i2--;
          lastI = i2 + 1;
          inBase64 = false;
          base64Accum = "";
        }
      }
    }
    if (!inBase64) {
      res += this.iconv.decode(buf.slice(lastI), "ascii");
    } else {
      var b64str = base64Accum + buf.slice(lastI).toString();
      var canBeDecoded = b64str.length - b64str.length % 8;
      base64Accum = b64str.slice(canBeDecoded);
      b64str = b64str.slice(0, canBeDecoded);
      res += this.iconv.decode(Buffer2.from(b64str, "base64"), "utf16-be");
    }
    this.inBase64 = inBase64;
    this.base64Accum = base64Accum;
    return res;
  };
  Utf7Decoder.prototype.end = function() {
    var res = "";
    if (this.inBase64 && this.base64Accum.length > 0)
      res = this.iconv.decode(Buffer2.from(this.base64Accum, "base64"), "utf16-be");
    this.inBase64 = false;
    this.base64Accum = "";
    return res;
  };
  exports.utf7imap = Utf7IMAPCodec;
  Utf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;
  Utf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;
  Utf7IMAPCodec.prototype.bomAware = true;
  Utf7IMAPEncoder.prototype.write = function(str) {
    var inBase64 = this.inBase64, base64Accum = this.base64Accum, base64AccumIdx = this.base64AccumIdx, buf = Buffer2.alloc(str.length * 5 + 10), bufIdx = 0;
    for (var i2 = 0;i2 < str.length; i2++) {
      var uChar = str.charCodeAt(i2);
      if (32 <= uChar && uChar <= 126) {
        if (inBase64) {
          if (base64AccumIdx > 0) {
            bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString("base64").replace(/\//g, ",").replace(/=+$/, ""), bufIdx);
            base64AccumIdx = 0;
          }
          buf[bufIdx++] = minusChar;
          inBase64 = false;
        }
        if (!inBase64) {
          buf[bufIdx++] = uChar;
          if (uChar === andChar)
            buf[bufIdx++] = minusChar;
        }
      } else {
        if (!inBase64) {
          buf[bufIdx++] = andChar;
          inBase64 = true;
        }
        if (inBase64) {
          base64Accum[base64AccumIdx++] = uChar >> 8;
          base64Accum[base64AccumIdx++] = uChar & 255;
          if (base64AccumIdx == base64Accum.length) {
            bufIdx += buf.write(base64Accum.toString("base64").replace(/\//g, ","), bufIdx);
            base64AccumIdx = 0;
          }
        }
      }
    }
    this.inBase64 = inBase64;
    this.base64AccumIdx = base64AccumIdx;
    return buf.slice(0, bufIdx);
  };
  Utf7IMAPEncoder.prototype.end = function() {
    var buf = Buffer2.alloc(10), bufIdx = 0;
    if (this.inBase64) {
      if (this.base64AccumIdx > 0) {
        bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString("base64").replace(/\//g, ",").replace(/=+$/, ""), bufIdx);
        this.base64AccumIdx = 0;
      }
      buf[bufIdx++] = minusChar;
      this.inBase64 = false;
    }
    return buf.slice(0, bufIdx);
  };
  var base64IMAPChars = base64Chars.slice();
  base64IMAPChars[",".charCodeAt(0)] = true;
  Utf7IMAPDecoder.prototype.write = function(buf) {
    var res = "", lastI = 0, inBase64 = this.inBase64, base64Accum = this.base64Accum;
    for (var i2 = 0;i2 < buf.length; i2++) {
      if (!inBase64) {
        if (buf[i2] == andChar) {
          res += this.iconv.decode(buf.slice(lastI, i2), "ascii");
          lastI = i2 + 1;
          inBase64 = true;
        }
      } else {
        if (!base64IMAPChars[buf[i2]]) {
          if (i2 == lastI && buf[i2] == minusChar) {
            res += "&";
          } else {
            var b64str = base64Accum + buf.slice(lastI, i2).toString().replace(/,/g, "/");
            res += this.iconv.decode(Buffer2.from(b64str, "base64"), "utf16-be");
          }
          if (buf[i2] != minusChar)
            i2--;
          lastI = i2 + 1;
          inBase64 = false;
          base64Accum = "";
        }
      }
    }
    if (!inBase64) {
      res += this.iconv.decode(buf.slice(lastI), "ascii");
    } else {
      var b64str = base64Accum + buf.slice(lastI).toString().replace(/,/g, "/");
      var canBeDecoded = b64str.length - b64str.length % 8;
      base64Accum = b64str.slice(canBeDecoded);
      b64str = b64str.slice(0, canBeDecoded);
      res += this.iconv.decode(Buffer2.from(b64str, "base64"), "utf16-be");
    }
    this.inBase64 = inBase64;
    this.base64Accum = base64Accum;
    return res;
  };
  Utf7IMAPDecoder.prototype.end = function() {
    var res = "";
    if (this.inBase64 && this.base64Accum.length > 0)
      res = this.iconv.decode(Buffer2.from(this.base64Accum, "base64"), "utf16-be");
    this.inBase64 = false;
    this.base64Accum = "";
    return res;
  };
});

// node_modules/iconv-lite/encodings/sbcs-codec.js
var require_sbcs_codec = __commonJS((exports) => {
  var SBCSCodec = function(codecOptions, iconv) {
    if (!codecOptions)
      throw new Error("SBCS codec is called without the data.");
    if (!codecOptions.chars || codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256)
      throw new Error("Encoding '" + codecOptions.type + "' has incorrect 'chars' (must be of len 128 or 256)");
    if (codecOptions.chars.length === 128) {
      var asciiString = "";
      for (var i = 0;i < 128; i++)
        asciiString += String.fromCharCode(i);
      codecOptions.chars = asciiString + codecOptions.chars;
    }
    this.decodeBuf = Buffer2.from(codecOptions.chars, "ucs2");
    var encodeBuf = Buffer2.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));
    for (var i = 0;i < codecOptions.chars.length; i++)
      encodeBuf[codecOptions.chars.charCodeAt(i)] = i;
    this.encodeBuf = encodeBuf;
  };
  var SBCSEncoder = function(options, codec) {
    this.encodeBuf = codec.encodeBuf;
  };
  var SBCSDecoder = function(options, codec) {
    this.decodeBuf = codec.decodeBuf;
  };
  var Buffer2 = require_safer().Buffer;
  exports._sbcs = SBCSCodec;
  SBCSCodec.prototype.encoder = SBCSEncoder;
  SBCSCodec.prototype.decoder = SBCSDecoder;
  SBCSEncoder.prototype.write = function(str) {
    var buf = Buffer2.alloc(str.length);
    for (var i = 0;i < str.length; i++)
      buf[i] = this.encodeBuf[str.charCodeAt(i)];
    return buf;
  };
  SBCSEncoder.prototype.end = function() {
  };
  SBCSDecoder.prototype.write = function(buf) {
    var decodeBuf = this.decodeBuf;
    var newBuf = Buffer2.alloc(buf.length * 2);
    var idx1 = 0, idx2 = 0;
    for (var i = 0;i < buf.length; i++) {
      idx1 = buf[i] * 2;
      idx2 = i * 2;
      newBuf[idx2] = decodeBuf[idx1];
      newBuf[idx2 + 1] = decodeBuf[idx1 + 1];
    }
    return newBuf.toString("ucs2");
  };
  SBCSDecoder.prototype.end = function() {
  };
});

// node_modules/iconv-lite/encodings/sbcs-data.js
var require_sbcs_data = __commonJS((exports, module) => {
  module.exports = {
    "10029": "maccenteuro",
    maccenteuro: {
      type: "_sbcs",
      chars: "\xC4\u0100\u0101\xC9\u0104\xD6\xDC\xE1\u0105\u010C\xE4\u010D\u0106\u0107\xE9\u0179\u017A\u010E\xED\u010F\u0112\u0113\u0116\xF3\u0117\xF4\xF6\xF5\xFA\u011A\u011B\xFC\u2020\xB0\u0118\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\u0119\xA8\u2260\u0123\u012E\u012F\u012A\u2264\u2265\u012B\u0136\u2202\u2211\u0142\u013B\u013C\u013D\u013E\u0139\u013A\u0145\u0146\u0143\xAC\u221A\u0144\u0147\u2206\xAB\xBB\u2026\xA0\u0148\u0150\xD5\u0151\u014C\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\u014D\u0154\u0155\u0158\u2039\u203A\u0159\u0156\u0157\u0160\u201A\u201E\u0161\u015A\u015B\xC1\u0164\u0165\xCD\u017D\u017E\u016A\xD3\xD4\u016B\u016E\xDA\u016F\u0170\u0171\u0172\u0173\xDD\xFD\u0137\u017B\u0141\u017C\u0122\u02C7"
    },
    "808": "cp808",
    ibm808: "cp808",
    cp808: {
      type: "_sbcs",
      chars: "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u0401\u0451\u0404\u0454\u0407\u0457\u040E\u045E\xB0\u2219\xB7\u221A\u2116\u20AC\u25A0\xA0"
    },
    mik: {
      type: "_sbcs",
      chars: "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u2514\u2534\u252C\u251C\u2500\u253C\u2563\u2551\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2510\u2591\u2592\u2593\u2502\u2524\u2116\xA7\u2557\u255D\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
    },
    ascii8bit: "ascii",
    usascii: "ascii",
    ansix34: "ascii",
    ansix341968: "ascii",
    ansix341986: "ascii",
    csascii: "ascii",
    cp367: "ascii",
    ibm367: "ascii",
    isoir6: "ascii",
    iso646us: "ascii",
    iso646irv: "ascii",
    us: "ascii",
    latin1: "iso88591",
    latin2: "iso88592",
    latin3: "iso88593",
    latin4: "iso88594",
    latin5: "iso88599",
    latin6: "iso885910",
    latin7: "iso885913",
    latin8: "iso885914",
    latin9: "iso885915",
    latin10: "iso885916",
    csisolatin1: "iso88591",
    csisolatin2: "iso88592",
    csisolatin3: "iso88593",
    csisolatin4: "iso88594",
    csisolatincyrillic: "iso88595",
    csisolatinarabic: "iso88596",
    csisolatingreek: "iso88597",
    csisolatinhebrew: "iso88598",
    csisolatin5: "iso88599",
    csisolatin6: "iso885910",
    l1: "iso88591",
    l2: "iso88592",
    l3: "iso88593",
    l4: "iso88594",
    l5: "iso88599",
    l6: "iso885910",
    l7: "iso885913",
    l8: "iso885914",
    l9: "iso885915",
    l10: "iso885916",
    isoir14: "iso646jp",
    isoir57: "iso646cn",
    isoir100: "iso88591",
    isoir101: "iso88592",
    isoir109: "iso88593",
    isoir110: "iso88594",
    isoir144: "iso88595",
    isoir127: "iso88596",
    isoir126: "iso88597",
    isoir138: "iso88598",
    isoir148: "iso88599",
    isoir157: "iso885910",
    isoir166: "tis620",
    isoir179: "iso885913",
    isoir199: "iso885914",
    isoir203: "iso885915",
    isoir226: "iso885916",
    cp819: "iso88591",
    ibm819: "iso88591",
    cyrillic: "iso88595",
    arabic: "iso88596",
    arabic8: "iso88596",
    ecma114: "iso88596",
    asmo708: "iso88596",
    greek: "iso88597",
    greek8: "iso88597",
    ecma118: "iso88597",
    elot928: "iso88597",
    hebrew: "iso88598",
    hebrew8: "iso88598",
    turkish: "iso88599",
    turkish8: "iso88599",
    thai: "iso885911",
    thai8: "iso885911",
    celtic: "iso885914",
    celtic8: "iso885914",
    isoceltic: "iso885914",
    tis6200: "tis620",
    tis62025291: "tis620",
    tis62025330: "tis620",
    "10000": "macroman",
    "10006": "macgreek",
    "10007": "maccyrillic",
    "10079": "maciceland",
    "10081": "macturkish",
    cspc8codepage437: "cp437",
    cspc775baltic: "cp775",
    cspc850multilingual: "cp850",
    cspcp852: "cp852",
    cspc862latinhebrew: "cp862",
    cpgr: "cp869",
    msee: "cp1250",
    mscyrl: "cp1251",
    msansi: "cp1252",
    msgreek: "cp1253",
    msturk: "cp1254",
    mshebr: "cp1255",
    msarab: "cp1256",
    winbaltrim: "cp1257",
    cp20866: "koi8r",
    "20866": "koi8r",
    ibm878: "koi8r",
    cskoi8r: "koi8r",
    cp21866: "koi8u",
    "21866": "koi8u",
    ibm1168: "koi8u",
    strk10482002: "rk1048",
    tcvn5712: "tcvn",
    tcvn57121: "tcvn",
    gb198880: "iso646cn",
    cn: "iso646cn",
    csiso14jisc6220ro: "iso646jp",
    jisc62201969ro: "iso646jp",
    jp: "iso646jp",
    cshproman8: "hproman8",
    r8: "hproman8",
    roman8: "hproman8",
    xroman8: "hproman8",
    ibm1051: "hproman8",
    mac: "macintosh",
    csmacintosh: "macintosh"
  };
});

// node_modules/iconv-lite/encodings/sbcs-data-generated.js
var require_sbcs_data_generated = __commonJS((exports, module) => {
  module.exports = {
    "437": "cp437",
    "737": "cp737",
    "775": "cp775",
    "850": "cp850",
    "852": "cp852",
    "855": "cp855",
    "856": "cp856",
    "857": "cp857",
    "858": "cp858",
    "860": "cp860",
    "861": "cp861",
    "862": "cp862",
    "863": "cp863",
    "864": "cp864",
    "865": "cp865",
    "866": "cp866",
    "869": "cp869",
    "874": "windows874",
    "922": "cp922",
    "1046": "cp1046",
    "1124": "cp1124",
    "1125": "cp1125",
    "1129": "cp1129",
    "1133": "cp1133",
    "1161": "cp1161",
    "1162": "cp1162",
    "1163": "cp1163",
    "1250": "windows1250",
    "1251": "windows1251",
    "1252": "windows1252",
    "1253": "windows1253",
    "1254": "windows1254",
    "1255": "windows1255",
    "1256": "windows1256",
    "1257": "windows1257",
    "1258": "windows1258",
    "28591": "iso88591",
    "28592": "iso88592",
    "28593": "iso88593",
    "28594": "iso88594",
    "28595": "iso88595",
    "28596": "iso88596",
    "28597": "iso88597",
    "28598": "iso88598",
    "28599": "iso88599",
    "28600": "iso885910",
    "28601": "iso885911",
    "28603": "iso885913",
    "28604": "iso885914",
    "28605": "iso885915",
    "28606": "iso885916",
    windows874: {
      type: "_sbcs",
      chars: "\u20AC\uFFFD\uFFFD\uFFFD\uFFFD\u2026\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\xA0\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFFFD\uFFFD\uFFFD\uFFFD\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\uFFFD\uFFFD\uFFFD\uFFFD"
    },
    win874: "windows874",
    cp874: "windows874",
    windows1250: {
      type: "_sbcs",
      chars: "\u20AC\uFFFD\u201A\uFFFD\u201E\u2026\u2020\u2021\uFFFD\u2030\u0160\u2039\u015A\u0164\u017D\u0179\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\u0161\u203A\u015B\u0165\u017E\u017A\xA0\u02C7\u02D8\u0141\xA4\u0104\xA6\xA7\xA8\xA9\u015E\xAB\xAC\xAD\xAE\u017B\xB0\xB1\u02DB\u0142\xB4\xB5\xB6\xB7\xB8\u0105\u015F\xBB\u013D\u02DD\u013E\u017C\u0154\xC1\xC2\u0102\xC4\u0139\u0106\xC7\u010C\xC9\u0118\xCB\u011A\xCD\xCE\u010E\u0110\u0143\u0147\xD3\xD4\u0150\xD6\xD7\u0158\u016E\xDA\u0170\xDC\xDD\u0162\xDF\u0155\xE1\xE2\u0103\xE4\u013A\u0107\xE7\u010D\xE9\u0119\xEB\u011B\xED\xEE\u010F\u0111\u0144\u0148\xF3\xF4\u0151\xF6\xF7\u0159\u016F\xFA\u0171\xFC\xFD\u0163\u02D9"
    },
    win1250: "windows1250",
    cp1250: "windows1250",
    windows1251: {
      type: "_sbcs",
      chars: "\u0402\u0403\u201A\u0453\u201E\u2026\u2020\u2021\u20AC\u2030\u0409\u2039\u040A\u040C\u040B\u040F\u0452\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\u0459\u203A\u045A\u045C\u045B\u045F\xA0\u040E\u045E\u0408\xA4\u0490\xA6\xA7\u0401\xA9\u0404\xAB\xAC\xAD\xAE\u0407\xB0\xB1\u0406\u0456\u0491\xB5\xB6\xB7\u0451\u2116\u0454\xBB\u0458\u0405\u0455\u0457\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F"
    },
    win1251: "windows1251",
    cp1251: "windows1251",
    windows1252: {
      type: "_sbcs",
      chars: "\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0160\u2039\u0152\uFFFD\u017D\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\u0161\u203A\u0153\uFFFD\u017E\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
    },
    win1252: "windows1252",
    cp1252: "windows1252",
    windows1253: {
      type: "_sbcs",
      chars: "\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\uFFFD\u2030\uFFFD\u2039\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\uFFFD\u203A\uFFFD\uFFFD\uFFFD\uFFFD\xA0\u0385\u0386\xA3\xA4\xA5\xA6\xA7\xA8\xA9\uFFFD\xAB\xAC\xAD\xAE\u2015\xB0\xB1\xB2\xB3\u0384\xB5\xB6\xB7\u0388\u0389\u038A\xBB\u038C\xBD\u038E\u038F\u0390\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\uFFFD\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03AA\u03AB\u03AC\u03AD\u03AE\u03AF\u03B0\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C2\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\u03CA\u03CB\u03CC\u03CD\u03CE\uFFFD"
    },
    win1253: "windows1253",
    cp1253: "windows1253",
    windows1254: {
      type: "_sbcs",
      chars: "\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0160\u2039\u0152\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\u0161\u203A\u0153\uFFFD\uFFFD\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u011E\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u0130\u015E\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u011F\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u0131\u015F\xFF"
    },
    win1254: "windows1254",
    cp1254: "windows1254",
    windows1255: {
      type: "_sbcs",
      chars: "\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\uFFFD\u2039\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\uFFFD\u203A\uFFFD\uFFFD\uFFFD\uFFFD\xA0\xA1\xA2\xA3\u20AA\xA5\xA6\xA7\xA8\xA9\xD7\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xF7\xBB\xBC\xBD\xBE\xBF\u05B0\u05B1\u05B2\u05B3\u05B4\u05B5\u05B6\u05B7\u05B8\u05B9\u05BA\u05BB\u05BC\u05BD\u05BE\u05BF\u05C0\u05C1\u05C2\u05C3\u05F0\u05F1\u05F2\u05F3\u05F4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u05D0\u05D1\u05D2\u05D3\u05D4\u05D5\u05D6\u05D7\u05D8\u05D9\u05DA\u05DB\u05DC\u05DD\u05DE\u05DF\u05E0\u05E1\u05E2\u05E3\u05E4\u05E5\u05E6\u05E7\u05E8\u05E9\u05EA\uFFFD\uFFFD\u200E\u200F\uFFFD"
    },
    win1255: "windows1255",
    cp1255: "windows1255",
    windows1256: {
      type: "_sbcs",
      chars: "\u20AC\u067E\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0679\u2039\u0152\u0686\u0698\u0688\u06AF\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u06A9\u2122\u0691\u203A\u0153\u200C\u200D\u06BA\xA0\u060C\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\u06BE\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\u061B\xBB\xBC\xBD\xBE\u061F\u06C1\u0621\u0622\u0623\u0624\u0625\u0626\u0627\u0628\u0629\u062A\u062B\u062C\u062D\u062E\u062F\u0630\u0631\u0632\u0633\u0634\u0635\u0636\xD7\u0637\u0638\u0639\u063A\u0640\u0641\u0642\u0643\xE0\u0644\xE2\u0645\u0646\u0647\u0648\xE7\xE8\xE9\xEA\xEB\u0649\u064A\xEE\xEF\u064B\u064C\u064D\u064E\xF4\u064F\u0650\xF7\u0651\xF9\u0652\xFB\xFC\u200E\u200F\u06D2"
    },
    win1256: "windows1256",
    cp1256: "windows1256",
    windows1257: {
      type: "_sbcs",
      chars: "\u20AC\uFFFD\u201A\uFFFD\u201E\u2026\u2020\u2021\uFFFD\u2030\uFFFD\u2039\uFFFD\xA8\u02C7\xB8\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\uFFFD\u203A\uFFFD\xAF\u02DB\uFFFD\xA0\uFFFD\xA2\xA3\xA4\uFFFD\xA6\xA7\xD8\xA9\u0156\xAB\xAC\xAD\xAE\xC6\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xF8\xB9\u0157\xBB\xBC\xBD\xBE\xE6\u0104\u012E\u0100\u0106\xC4\xC5\u0118\u0112\u010C\xC9\u0179\u0116\u0122\u0136\u012A\u013B\u0160\u0143\u0145\xD3\u014C\xD5\xD6\xD7\u0172\u0141\u015A\u016A\xDC\u017B\u017D\xDF\u0105\u012F\u0101\u0107\xE4\xE5\u0119\u0113\u010D\xE9\u017A\u0117\u0123\u0137\u012B\u013C\u0161\u0144\u0146\xF3\u014D\xF5\xF6\xF7\u0173\u0142\u015B\u016B\xFC\u017C\u017E\u02D9"
    },
    win1257: "windows1257",
    cp1257: "windows1257",
    windows1258: {
      type: "_sbcs",
      chars: "\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\uFFFD\u2039\u0152\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\uFFFD\u203A\u0153\uFFFD\uFFFD\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\u0102\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\u0300\xCD\xCE\xCF\u0110\xD1\u0309\xD3\xD4\u01A0\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u01AF\u0303\xDF\xE0\xE1\xE2\u0103\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\u0301\xED\xEE\xEF\u0111\xF1\u0323\xF3\xF4\u01A1\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u01B0\u20AB\xFF"
    },
    win1258: "windows1258",
    cp1258: "windows1258",
    iso88591: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
    },
    cp28591: "iso88591",
    iso88592: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0104\u02D8\u0141\xA4\u013D\u015A\xA7\xA8\u0160\u015E\u0164\u0179\xAD\u017D\u017B\xB0\u0105\u02DB\u0142\xB4\u013E\u015B\u02C7\xB8\u0161\u015F\u0165\u017A\u02DD\u017E\u017C\u0154\xC1\xC2\u0102\xC4\u0139\u0106\xC7\u010C\xC9\u0118\xCB\u011A\xCD\xCE\u010E\u0110\u0143\u0147\xD3\xD4\u0150\xD6\xD7\u0158\u016E\xDA\u0170\xDC\xDD\u0162\xDF\u0155\xE1\xE2\u0103\xE4\u013A\u0107\xE7\u010D\xE9\u0119\xEB\u011B\xED\xEE\u010F\u0111\u0144\u0148\xF3\xF4\u0151\xF6\xF7\u0159\u016F\xFA\u0171\xFC\xFD\u0163\u02D9"
    },
    cp28592: "iso88592",
    iso88593: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0126\u02D8\xA3\xA4\uFFFD\u0124\xA7\xA8\u0130\u015E\u011E\u0134\xAD\uFFFD\u017B\xB0\u0127\xB2\xB3\xB4\xB5\u0125\xB7\xB8\u0131\u015F\u011F\u0135\xBD\uFFFD\u017C\xC0\xC1\xC2\uFFFD\xC4\u010A\u0108\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\uFFFD\xD1\xD2\xD3\xD4\u0120\xD6\xD7\u011C\xD9\xDA\xDB\xDC\u016C\u015C\xDF\xE0\xE1\xE2\uFFFD\xE4\u010B\u0109\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\uFFFD\xF1\xF2\xF3\xF4\u0121\xF6\xF7\u011D\xF9\xFA\xFB\xFC\u016D\u015D\u02D9"
    },
    cp28593: "iso88593",
    iso88594: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0104\u0138\u0156\xA4\u0128\u013B\xA7\xA8\u0160\u0112\u0122\u0166\xAD\u017D\xAF\xB0\u0105\u02DB\u0157\xB4\u0129\u013C\u02C7\xB8\u0161\u0113\u0123\u0167\u014A\u017E\u014B\u0100\xC1\xC2\xC3\xC4\xC5\xC6\u012E\u010C\xC9\u0118\xCB\u0116\xCD\xCE\u012A\u0110\u0145\u014C\u0136\xD4\xD5\xD6\xD7\xD8\u0172\xDA\xDB\xDC\u0168\u016A\xDF\u0101\xE1\xE2\xE3\xE4\xE5\xE6\u012F\u010D\xE9\u0119\xEB\u0117\xED\xEE\u012B\u0111\u0146\u014D\u0137\xF4\xF5\xF6\xF7\xF8\u0173\xFA\xFB\xFC\u0169\u016B\u02D9"
    },
    cp28594: "iso88594",
    iso88595: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0401\u0402\u0403\u0404\u0405\u0406\u0407\u0408\u0409\u040A\u040B\u040C\xAD\u040E\u040F\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u2116\u0451\u0452\u0453\u0454\u0455\u0456\u0457\u0458\u0459\u045A\u045B\u045C\xA7\u045E\u045F"
    },
    cp28595: "iso88595",
    iso88596: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\uFFFD\uFFFD\uFFFD\xA4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u060C\xAD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u061B\uFFFD\uFFFD\uFFFD\u061F\uFFFD\u0621\u0622\u0623\u0624\u0625\u0626\u0627\u0628\u0629\u062A\u062B\u062C\u062D\u062E\u062F\u0630\u0631\u0632\u0633\u0634\u0635\u0636\u0637\u0638\u0639\u063A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0640\u0641\u0642\u0643\u0644\u0645\u0646\u0647\u0648\u0649\u064A\u064B\u064C\u064D\u064E\u064F\u0650\u0651\u0652\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"
    },
    cp28596: "iso88596",
    iso88597: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u2018\u2019\xA3\u20AC\u20AF\xA6\xA7\xA8\xA9\u037A\xAB\xAC\xAD\uFFFD\u2015\xB0\xB1\xB2\xB3\u0384\u0385\u0386\xB7\u0388\u0389\u038A\xBB\u038C\xBD\u038E\u038F\u0390\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\uFFFD\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03AA\u03AB\u03AC\u03AD\u03AE\u03AF\u03B0\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C2\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\u03CA\u03CB\u03CC\u03CD\u03CE\uFFFD"
    },
    cp28597: "iso88597",
    iso88598: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\uFFFD\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xD7\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xF7\xBB\xBC\xBD\xBE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2017\u05D0\u05D1\u05D2\u05D3\u05D4\u05D5\u05D6\u05D7\u05D8\u05D9\u05DA\u05DB\u05DC\u05DD\u05DE\u05DF\u05E0\u05E1\u05E2\u05E3\u05E4\u05E5\u05E6\u05E7\u05E8\u05E9\u05EA\uFFFD\uFFFD\u200E\u200F\uFFFD"
    },
    cp28598: "iso88598",
    iso88599: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u011E\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u0130\u015E\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u011F\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u0131\u015F\xFF"
    },
    cp28599: "iso88599",
    iso885910: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0104\u0112\u0122\u012A\u0128\u0136\xA7\u013B\u0110\u0160\u0166\u017D\xAD\u016A\u014A\xB0\u0105\u0113\u0123\u012B\u0129\u0137\xB7\u013C\u0111\u0161\u0167\u017E\u2015\u016B\u014B\u0100\xC1\xC2\xC3\xC4\xC5\xC6\u012E\u010C\xC9\u0118\xCB\u0116\xCD\xCE\xCF\xD0\u0145\u014C\xD3\xD4\xD5\xD6\u0168\xD8\u0172\xDA\xDB\xDC\xDD\xDE\xDF\u0101\xE1\xE2\xE3\xE4\xE5\xE6\u012F\u010D\xE9\u0119\xEB\u0117\xED\xEE\xEF\xF0\u0146\u014D\xF3\xF4\xF5\xF6\u0169\xF8\u0173\xFA\xFB\xFC\xFD\xFE\u0138"
    },
    cp28600: "iso885910",
    iso885911: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFFFD\uFFFD\uFFFD\uFFFD\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\uFFFD\uFFFD\uFFFD\uFFFD"
    },
    cp28601: "iso885911",
    iso885913: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u201D\xA2\xA3\xA4\u201E\xA6\xA7\xD8\xA9\u0156\xAB\xAC\xAD\xAE\xC6\xB0\xB1\xB2\xB3\u201C\xB5\xB6\xB7\xF8\xB9\u0157\xBB\xBC\xBD\xBE\xE6\u0104\u012E\u0100\u0106\xC4\xC5\u0118\u0112\u010C\xC9\u0179\u0116\u0122\u0136\u012A\u013B\u0160\u0143\u0145\xD3\u014C\xD5\xD6\xD7\u0172\u0141\u015A\u016A\xDC\u017B\u017D\xDF\u0105\u012F\u0101\u0107\xE4\xE5\u0119\u0113\u010D\xE9\u017A\u0117\u0123\u0137\u012B\u013C\u0161\u0144\u0146\xF3\u014D\xF5\xF6\xF7\u0173\u0142\u015B\u016B\xFC\u017C\u017E\u2019"
    },
    cp28603: "iso885913",
    iso885914: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u1E02\u1E03\xA3\u010A\u010B\u1E0A\xA7\u1E80\xA9\u1E82\u1E0B\u1EF2\xAD\xAE\u0178\u1E1E\u1E1F\u0120\u0121\u1E40\u1E41\xB6\u1E56\u1E81\u1E57\u1E83\u1E60\u1EF3\u1E84\u1E85\u1E61\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u0174\xD1\xD2\xD3\xD4\xD5\xD6\u1E6A\xD8\xD9\xDA\xDB\xDC\xDD\u0176\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u0175\xF1\xF2\xF3\xF4\xF5\xF6\u1E6B\xF8\xF9\xFA\xFB\xFC\xFD\u0177\xFF"
    },
    cp28604: "iso885914",
    iso885915: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\u20AC\xA5\u0160\xA7\u0161\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\u017D\xB5\xB6\xB7\u017E\xB9\xBA\xBB\u0152\u0153\u0178\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
    },
    cp28605: "iso885915",
    iso885916: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0104\u0105\u0141\u20AC\u201E\u0160\xA7\u0161\xA9\u0218\xAB\u0179\xAD\u017A\u017B\xB0\xB1\u010C\u0142\u017D\u201D\xB6\xB7\u017E\u010D\u0219\xBB\u0152\u0153\u0178\u017C\xC0\xC1\xC2\u0102\xC4\u0106\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u0110\u0143\xD2\xD3\xD4\u0150\xD6\u015A\u0170\xD9\xDA\xDB\xDC\u0118\u021A\xDF\xE0\xE1\xE2\u0103\xE4\u0107\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u0111\u0144\xF2\xF3\xF4\u0151\xF6\u015B\u0171\xF9\xFA\xFB\xFC\u0119\u021B\xFF"
    },
    cp28606: "iso885916",
    cp437: {
      type: "_sbcs",
      chars: "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xA2\xA3\xA5\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
    },
    ibm437: "cp437",
    csibm437: "cp437",
    cp737: {
      type: "_sbcs",
      chars: "\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C2\u03C4\u03C5\u03C6\u03C7\u03C8\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03C9\u03AC\u03AD\u03AE\u03CA\u03AF\u03CC\u03CD\u03CB\u03CE\u0386\u0388\u0389\u038A\u038C\u038E\u038F\xB1\u2265\u2264\u03AA\u03AB\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
    },
    ibm737: "cp737",
    csibm737: "cp737",
    cp775: {
      type: "_sbcs",
      chars: "\u0106\xFC\xE9\u0101\xE4\u0123\xE5\u0107\u0142\u0113\u0156\u0157\u012B\u0179\xC4\xC5\xC9\xE6\xC6\u014D\xF6\u0122\xA2\u015A\u015B\xD6\xDC\xF8\xA3\xD8\xD7\xA4\u0100\u012A\xF3\u017B\u017C\u017A\u201D\xA6\xA9\xAE\xAC\xBD\xBC\u0141\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u0104\u010C\u0118\u0116\u2563\u2551\u2557\u255D\u012E\u0160\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u0172\u016A\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u017D\u0105\u010D\u0119\u0117\u012F\u0161\u0173\u016B\u017E\u2518\u250C\u2588\u2584\u258C\u2590\u2580\xD3\xDF\u014C\u0143\xF5\xD5\xB5\u0144\u0136\u0137\u013B\u013C\u0146\u0112\u0145\u2019\xAD\xB1\u201C\xBE\xB6\xA7\xF7\u201E\xB0\u2219\xB7\xB9\xB3\xB2\u25A0\xA0"
    },
    ibm775: "cp775",
    csibm775: "cp775",
    cp850: {
      type: "_sbcs",
      chars: "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xF8\xA3\xD8\xD7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\xAE\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\xC0\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\xE3\xC3\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\xF0\xD0\xCA\xCB\xC8\u0131\xCD\xCE\xCF\u2518\u250C\u2588\u2584\xA6\xCC\u2580\xD3\xDF\xD4\xD2\xF5\xD5\xB5\xFE\xDE\xDA\xDB\xD9\xFD\xDD\xAF\xB4\xAD\xB1\u2017\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0"
    },
    ibm850: "cp850",
    csibm850: "cp850",
    cp852: {
      type: "_sbcs",
      chars: "\xC7\xFC\xE9\xE2\xE4\u016F\u0107\xE7\u0142\xEB\u0150\u0151\xEE\u0179\xC4\u0106\xC9\u0139\u013A\xF4\xF6\u013D\u013E\u015A\u015B\xD6\xDC\u0164\u0165\u0141\xD7\u010D\xE1\xED\xF3\xFA\u0104\u0105\u017D\u017E\u0118\u0119\xAC\u017A\u010C\u015F\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\u011A\u015E\u2563\u2551\u2557\u255D\u017B\u017C\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u0102\u0103\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\u0111\u0110\u010E\xCB\u010F\u0147\xCD\xCE\u011B\u2518\u250C\u2588\u2584\u0162\u016E\u2580\xD3\xDF\xD4\u0143\u0144\u0148\u0160\u0161\u0154\xDA\u0155\u0170\xFD\xDD\u0163\xB4\xAD\u02DD\u02DB\u02C7\u02D8\xA7\xF7\xB8\xB0\xA8\u02D9\u0171\u0158\u0159\u25A0\xA0"
    },
    ibm852: "cp852",
    csibm852: "cp852",
    cp855: {
      type: "_sbcs",
      chars: "\u0452\u0402\u0453\u0403\u0451\u0401\u0454\u0404\u0455\u0405\u0456\u0406\u0457\u0407\u0458\u0408\u0459\u0409\u045A\u040A\u045B\u040B\u045C\u040C\u045E\u040E\u045F\u040F\u044E\u042E\u044A\u042A\u0430\u0410\u0431\u0411\u0446\u0426\u0434\u0414\u0435\u0415\u0444\u0424\u0433\u0413\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u0445\u0425\u0438\u0418\u2563\u2551\u2557\u255D\u0439\u0419\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u043A\u041A\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\u043B\u041B\u043C\u041C\u043D\u041D\u043E\u041E\u043F\u2518\u250C\u2588\u2584\u041F\u044F\u2580\u042F\u0440\u0420\u0441\u0421\u0442\u0422\u0443\u0423\u0436\u0416\u0432\u0412\u044C\u042C\u2116\xAD\u044B\u042B\u0437\u0417\u0448\u0428\u044D\u042D\u0449\u0429\u0447\u0427\xA7\u25A0\xA0"
    },
    ibm855: "cp855",
    csibm855: "cp855",
    cp856: {
      type: "_sbcs",
      chars: "\u05D0\u05D1\u05D2\u05D3\u05D4\u05D5\u05D6\u05D7\u05D8\u05D9\u05DA\u05DB\u05DC\u05DD\u05DE\u05DF\u05E0\u05E1\u05E2\u05E3\u05E4\u05E5\u05E6\u05E7\u05E8\u05E9\u05EA\uFFFD\xA3\uFFFD\xD7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\xAE\xAC\xBD\xBC\uFFFD\xAB\xBB\u2591\u2592\u2593\u2502\u2524\uFFFD\uFFFD\uFFFD\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\uFFFD\uFFFD\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2518\u250C\u2588\u2584\xA6\uFFFD\u2580\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\xB5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\xAF\xB4\xAD\xB1\u2017\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0"
    },
    ibm856: "cp856",
    csibm856: "cp856",
    cp857: {
      type: "_sbcs",
      chars: "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\u0131\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\u0130\xD6\xDC\xF8\xA3\xD8\u015E\u015F\xE1\xED\xF3\xFA\xF1\xD1\u011E\u011F\xBF\xAE\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\xC0\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\xE3\xC3\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\xBA\xAA\xCA\xCB\xC8\uFFFD\xCD\xCE\xCF\u2518\u250C\u2588\u2584\xA6\xCC\u2580\xD3\xDF\xD4\xD2\xF5\xD5\xB5\uFFFD\xD7\xDA\xDB\xD9\xEC\xFF\xAF\xB4\xAD\xB1\uFFFD\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0"
    },
    ibm857: "cp857",
    csibm857: "cp857",
    cp858: {
      type: "_sbcs",
      chars: "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xF8\xA3\xD8\xD7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\xAE\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\xC0\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\xE3\xC3\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\xF0\xD0\xCA\xCB\xC8\u20AC\xCD\xCE\xCF\u2518\u250C\u2588\u2584\xA6\xCC\u2580\xD3\xDF\xD4\xD2\xF5\xD5\xB5\xFE\xDE\xDA\xDB\xD9\xFD\xDD\xAF\xB4\xAD\xB1\u2017\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0"
    },
    ibm858: "cp858",
    csibm858: "cp858",
    cp860: {
      type: "_sbcs",
      chars: "\xC7\xFC\xE9\xE2\xE3\xE0\xC1\xE7\xEA\xCA\xE8\xCD\xD4\xEC\xC3\xC2\xC9\xC0\xC8\xF4\xF5\xF2\xDA\xF9\xCC\xD5\xDC\xA2\xA3\xD9\u20A7\xD3\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\xD2\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
    },
    ibm860: "cp860",
    csibm860: "cp860",
    cp861: {
      type: "_sbcs",
      chars: "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xD0\xF0\xDE\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xFE\xFB\xDD\xFD\xD6\xDC\xF8\xA3\xD8\u20A7\u0192\xE1\xED\xF3\xFA\xC1\xCD\xD3\xDA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
    },
    ibm861: "cp861",
    csibm861: "cp861",
    cp862: {
      type: "_sbcs",
      chars: "\u05D0\u05D1\u05D2\u05D3\u05D4\u05D5\u05D6\u05D7\u05D8\u05D9\u05DA\u05DB\u05DC\u05DD\u05DE\u05DF\u05E0\u05E1\u05E2\u05E3\u05E4\u05E5\u05E6\u05E7\u05E8\u05E9\u05EA\xA2\xA3\xA5\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
    },
    ibm862: "cp862",
    csibm862: "cp862",
    cp863: {
      type: "_sbcs",
      chars: "\xC7\xFC\xE9\xE2\xC2\xE0\xB6\xE7\xEA\xEB\xE8\xEF\xEE\u2017\xC0\xA7\xC9\xC8\xCA\xF4\xCB\xCF\xFB\xF9\xA4\xD4\xDC\xA2\xA3\xD9\xDB\u0192\xA6\xB4\xF3\xFA\xA8\xB8\xB3\xAF\xCE\u2310\xAC\xBD\xBC\xBE\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
    },
    ibm863: "cp863",
    csibm863: "cp863",
    cp864: {
      type: "_sbcs",
      chars: `\0\x01\x02\x03\x04\x05\x06\x07	
\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !"#$\u066A&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xB0\xB7\u2219\u221A\u2592\u2500\u2502\u253C\u2524\u252C\u251C\u2534\u2510\u250C\u2514\u2518\u03B2\u221E\u03C6\xB1\xBD\xBC\u2248\xAB\xBB\uFEF7\uFEF8\uFFFD\uFFFD\uFEFB\uFEFC\uFFFD\xA0\xAD\uFE82\xA3\xA4\uFE84\uFFFD\uFFFD\uFE8E\uFE8F\uFE95\uFE99\u060C\uFE9D\uFEA1\uFEA5\u0660\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\uFED1\u061B\uFEB1\uFEB5\uFEB9\u061F\xA2\uFE80\uFE81\uFE83\uFE85\uFECA\uFE8B\uFE8D\uFE91\uFE93\uFE97\uFE9B\uFE9F\uFEA3\uFEA7\uFEA9\uFEAB\uFEAD\uFEAF\uFEB3\uFEB7\uFEBB\uFEBF\uFEC1\uFEC5\uFECB\uFECF\xA6\xAC\xF7\xD7\uFEC9\u0640\uFED3\uFED7\uFEDB\uFEDF\uFEE3\uFEE7\uFEEB\uFEED\uFEEF\uFEF3\uFEBD\uFECC\uFECE\uFECD\uFEE1\uFE7D\u0651\uFEE5\uFEE9\uFEEC\uFEF0\uFEF2\uFED0\uFED5\uFEF5\uFEF6\uFEDD\uFED9\uFEF1\u25A0\uFFFD`
    },
    ibm864: "cp864",
    csibm864: "cp864",
    cp865: {
      type: "_sbcs",
      chars: "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xF8\xA3\xD8\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xA4\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
    },
    ibm865: "cp865",
    csibm865: "cp865",
    cp866: {
      type: "_sbcs",
      chars: "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u0401\u0451\u0404\u0454\u0407\u0457\u040E\u045E\xB0\u2219\xB7\u221A\u2116\xA4\u25A0\xA0"
    },
    ibm866: "cp866",
    csibm866: "cp866",
    cp869: {
      type: "_sbcs",
      chars: "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0386\uFFFD\xB7\xAC\xA6\u2018\u2019\u0388\u2015\u0389\u038A\u03AA\u038C\uFFFD\uFFFD\u038E\u03AB\xA9\u038F\xB2\xB3\u03AC\xA3\u03AD\u03AE\u03AF\u03CA\u0390\u03CC\u03CD\u0391\u0392\u0393\u0394\u0395\u0396\u0397\xBD\u0398\u0399\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u039A\u039B\u039C\u039D\u2563\u2551\u2557\u255D\u039E\u039F\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u03A0\u03A1\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03B1\u03B2\u03B3\u2518\u250C\u2588\u2584\u03B4\u03B5\u2580\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C2\u03C4\u0384\xAD\xB1\u03C5\u03C6\u03C7\xA7\u03C8\u0385\xB0\xA8\u03C9\u03CB\u03B0\u03CE\u25A0\xA0"
    },
    ibm869: "cp869",
    csibm869: "cp869",
    cp922: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\u203E\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u0160\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\u017D\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u0161\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\u017E\xFF"
    },
    ibm922: "cp922",
    csibm922: "cp922",
    cp1046: {
      type: "_sbcs",
      chars: "\uFE88\xD7\xF7\uF8F6\uF8F5\uF8F4\uF8F7\uFE71\x88\u25A0\u2502\u2500\u2510\u250C\u2514\u2518\uFE79\uFE7B\uFE7D\uFE7F\uFE77\uFE8A\uFEF0\uFEF3\uFEF2\uFECE\uFECF\uFED0\uFEF6\uFEF8\uFEFA\uFEFC\xA0\uF8FA\uF8F9\uF8F8\xA4\uF8FB\uFE8B\uFE91\uFE97\uFE9B\uFE9F\uFEA3\u060C\xAD\uFEA7\uFEB3\u0660\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\uFEB7\u061B\uFEBB\uFEBF\uFECA\u061F\uFECB\u0621\u0622\u0623\u0624\u0625\u0626\u0627\u0628\u0629\u062A\u062B\u062C\u062D\u062E\u062F\u0630\u0631\u0632\u0633\u0634\u0635\u0636\u0637\uFEC7\u0639\u063A\uFECC\uFE82\uFE84\uFE8E\uFED3\u0640\u0641\u0642\u0643\u0644\u0645\u0646\u0647\u0648\u0649\u064A\u064B\u064C\u064D\u064E\u064F\u0650\u0651\u0652\uFED7\uFEDB\uFEDF\uF8FC\uFEF5\uFEF7\uFEF9\uFEFB\uFEE3\uFEE7\uFEEC\uFEE9\uFFFD"
    },
    ibm1046: "cp1046",
    csibm1046: "cp1046",
    cp1124: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0401\u0402\u0490\u0404\u0405\u0406\u0407\u0408\u0409\u040A\u040B\u040C\xAD\u040E\u040F\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u2116\u0451\u0452\u0491\u0454\u0455\u0456\u0457\u0458\u0459\u045A\u045B\u045C\xA7\u045E\u045F"
    },
    ibm1124: "cp1124",
    csibm1124: "cp1124",
    cp1125: {
      type: "_sbcs",
      chars: "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u0401\u0451\u0490\u0491\u0404\u0454\u0406\u0456\u0407\u0457\xB7\u221A\u2116\xA4\u25A0\xA0"
    },
    ibm1125: "cp1125",
    csibm1125: "cp1125",
    cp1129: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\u0153\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\u0178\xB5\xB6\xB7\u0152\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\u0102\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\u0300\xCD\xCE\xCF\u0110\xD1\u0309\xD3\xD4\u01A0\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u01AF\u0303\xDF\xE0\xE1\xE2\u0103\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\u0301\xED\xEE\xEF\u0111\xF1\u0323\xF3\xF4\u01A1\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u01B0\u20AB\xFF"
    },
    ibm1129: "cp1129",
    csibm1129: "cp1129",
    cp1133: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0E81\u0E82\u0E84\u0E87\u0E88\u0EAA\u0E8A\u0E8D\u0E94\u0E95\u0E96\u0E97\u0E99\u0E9A\u0E9B\u0E9C\u0E9D\u0E9E\u0E9F\u0EA1\u0EA2\u0EA3\u0EA5\u0EA7\u0EAB\u0EAD\u0EAE\uFFFD\uFFFD\uFFFD\u0EAF\u0EB0\u0EB2\u0EB3\u0EB4\u0EB5\u0EB6\u0EB7\u0EB8\u0EB9\u0EBC\u0EB1\u0EBB\u0EBD\uFFFD\uFFFD\uFFFD\u0EC0\u0EC1\u0EC2\u0EC3\u0EC4\u0EC8\u0EC9\u0ECA\u0ECB\u0ECC\u0ECD\u0EC6\uFFFD\u0EDC\u0EDD\u20AD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0ED0\u0ED1\u0ED2\u0ED3\u0ED4\u0ED5\u0ED6\u0ED7\u0ED8\u0ED9\uFFFD\uFFFD\xA2\xAC\xA6\uFFFD"
    },
    ibm1133: "cp1133",
    csibm1133: "cp1133",
    cp1161: {
      type: "_sbcs",
      chars: "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0E48\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\u0E49\u0E4A\u0E4B\u20AC\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\xA2\xAC\xA6\xA0"
    },
    ibm1161: "cp1161",
    csibm1161: "cp1161",
    cp1162: {
      type: "_sbcs",
      chars: "\u20AC\x81\x82\x83\x84\u2026\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\u2018\u2019\u201C\u201D\u2022\u2013\u2014\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFFFD\uFFFD\uFFFD\uFFFD\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\uFFFD\uFFFD\uFFFD\uFFFD"
    },
    ibm1162: "cp1162",
    csibm1162: "cp1162",
    cp1163: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\u20AC\xA5\xA6\xA7\u0153\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\u0178\xB5\xB6\xB7\u0152\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\u0102\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\u0300\xCD\xCE\xCF\u0110\xD1\u0309\xD3\xD4\u01A0\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u01AF\u0303\xDF\xE0\xE1\xE2\u0103\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\u0301\xED\xEE\xEF\u0111\xF1\u0323\xF3\xF4\u01A1\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u01B0\u20AB\xFF"
    },
    ibm1163: "cp1163",
    csibm1163: "cp1163",
    maccroatian: {
      type: "_sbcs",
      chars: "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\u0160\u2122\xB4\xA8\u2260\u017D\xD8\u221E\xB1\u2264\u2265\u2206\xB5\u2202\u2211\u220F\u0161\u222B\xAA\xBA\u2126\u017E\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u0106\xAB\u010C\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u0110\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\uFFFD\xA9\u2044\xA4\u2039\u203A\xC6\xBB\u2013\xB7\u201A\u201E\u2030\xC2\u0107\xC1\u010D\xC8\xCD\xCE\xCF\xCC\xD3\xD4\u0111\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u03C0\xCB\u02DA\xB8\xCA\xE6\u02C7"
    },
    maccyrillic: {
      type: "_sbcs",
      chars: "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u2020\xB0\xA2\xA3\xA7\u2022\xB6\u0406\xAE\xA9\u2122\u0402\u0452\u2260\u0403\u0453\u221E\xB1\u2264\u2265\u0456\xB5\u2202\u0408\u0404\u0454\u0407\u0457\u0409\u0459\u040A\u045A\u0458\u0405\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\u040B\u045B\u040C\u045C\u0455\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u201E\u040E\u045E\u040F\u045F\u2116\u0401\u0451\u044F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\xA4"
    },
    macgreek: {
      type: "_sbcs",
      chars: "\xC4\xB9\xB2\xC9\xB3\xD6\xDC\u0385\xE0\xE2\xE4\u0384\xA8\xE7\xE9\xE8\xEA\xEB\xA3\u2122\xEE\xEF\u2022\xBD\u2030\xF4\xF6\xA6\xAD\xF9\xFB\xFC\u2020\u0393\u0394\u0398\u039B\u039E\u03A0\xDF\xAE\xA9\u03A3\u03AA\xA7\u2260\xB0\u0387\u0391\xB1\u2264\u2265\xA5\u0392\u0395\u0396\u0397\u0399\u039A\u039C\u03A6\u03AB\u03A8\u03A9\u03AC\u039D\xAC\u039F\u03A1\u2248\u03A4\xAB\xBB\u2026\xA0\u03A5\u03A7\u0386\u0388\u0153\u2013\u2015\u201C\u201D\u2018\u2019\xF7\u0389\u038A\u038C\u038E\u03AD\u03AE\u03AF\u03CC\u038F\u03CD\u03B1\u03B2\u03C8\u03B4\u03B5\u03C6\u03B3\u03B7\u03B9\u03BE\u03BA\u03BB\u03BC\u03BD\u03BF\u03C0\u03CE\u03C1\u03C3\u03C4\u03B8\u03C9\u03C2\u03C7\u03C5\u03B6\u03CA\u03CB\u0390\u03B0\uFFFD"
    },
    maciceland: {
      type: "_sbcs",
      chars: "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\xDD\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\xA4\xD0\xF0\xDE\xFE\xFD\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7"
    },
    macroman: {
      type: "_sbcs",
      chars: "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\xA4\u2039\u203A\uFB01\uFB02\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7"
    },
    macromania: {
      type: "_sbcs",
      chars: "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\u0102\u015E\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\u0103\u015F\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\xA4\u2039\u203A\u0162\u0163\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7"
    },
    macthai: {
      type: "_sbcs",
      chars: "\xAB\xBB\u2026\uF88C\uF88F\uF892\uF895\uF898\uF88B\uF88E\uF891\uF894\uF897\u201C\u201D\uF899\uFFFD\u2022\uF884\uF889\uF885\uF886\uF887\uF888\uF88A\uF88D\uF890\uF893\uF896\u2018\u2019\uFFFD\xA0\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFEFF\u200B\u2013\u2014\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u2122\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\xAE\xA9\uFFFD\uFFFD\uFFFD\uFFFD"
    },
    macturkish: {
      type: "_sbcs",
      chars: "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u011E\u011F\u0130\u0131\u015E\u015F\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\uFFFD\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7"
    },
    macukraine: {
      type: "_sbcs",
      chars: "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u2020\xB0\u0490\xA3\xA7\u2022\xB6\u0406\xAE\xA9\u2122\u0402\u0452\u2260\u0403\u0453\u221E\xB1\u2264\u2265\u0456\xB5\u0491\u0408\u0404\u0454\u0407\u0457\u0409\u0459\u040A\u045A\u0458\u0405\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\u040B\u045B\u040C\u045C\u0455\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u201E\u040E\u045E\u040F\u045F\u2116\u0401\u0451\u044F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\xA4"
    },
    koi8r: {
      type: "_sbcs",
      chars: "\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2580\u2584\u2588\u258C\u2590\u2591\u2592\u2593\u2320\u25A0\u2219\u221A\u2248\u2264\u2265\xA0\u2321\xB0\xB2\xB7\xF7\u2550\u2551\u2552\u0451\u2553\u2554\u2555\u2556\u2557\u2558\u2559\u255A\u255B\u255C\u255D\u255E\u255F\u2560\u2561\u0401\u2562\u2563\u2564\u2565\u2566\u2567\u2568\u2569\u256A\u256B\u256C\xA9\u044E\u0430\u0431\u0446\u0434\u0435\u0444\u0433\u0445\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u044F\u0440\u0441\u0442\u0443\u0436\u0432\u044C\u044B\u0437\u0448\u044D\u0449\u0447\u044A\u042E\u0410\u0411\u0426\u0414\u0415\u0424\u0413\u0425\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u042F\u0420\u0421\u0422\u0423\u0416\u0412\u042C\u042B\u0417\u0428\u042D\u0429\u0427\u042A"
    },
    koi8u: {
      type: "_sbcs",
      chars: "\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2580\u2584\u2588\u258C\u2590\u2591\u2592\u2593\u2320\u25A0\u2219\u221A\u2248\u2264\u2265\xA0\u2321\xB0\xB2\xB7\xF7\u2550\u2551\u2552\u0451\u0454\u2554\u0456\u0457\u2557\u2558\u2559\u255A\u255B\u0491\u255D\u255E\u255F\u2560\u2561\u0401\u0404\u2563\u0406\u0407\u2566\u2567\u2568\u2569\u256A\u0490\u256C\xA9\u044E\u0430\u0431\u0446\u0434\u0435\u0444\u0433\u0445\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u044F\u0440\u0441\u0442\u0443\u0436\u0432\u044C\u044B\u0437\u0448\u044D\u0449\u0447\u044A\u042E\u0410\u0411\u0426\u0414\u0415\u0424\u0413\u0425\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u042F\u0420\u0421\u0422\u0423\u0416\u0412\u042C\u042B\u0417\u0428\u042D\u0429\u0427\u042A"
    },
    koi8ru: {
      type: "_sbcs",
      chars: "\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2580\u2584\u2588\u258C\u2590\u2591\u2592\u2593\u2320\u25A0\u2219\u221A\u2248\u2264\u2265\xA0\u2321\xB0\xB2\xB7\xF7\u2550\u2551\u2552\u0451\u0454\u2554\u0456\u0457\u2557\u2558\u2559\u255A\u255B\u0491\u045E\u255E\u255F\u2560\u2561\u0401\u0404\u2563\u0406\u0407\u2566\u2567\u2568\u2569\u256A\u0490\u040E\xA9\u044E\u0430\u0431\u0446\u0434\u0435\u0444\u0433\u0445\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u044F\u0440\u0441\u0442\u0443\u0436\u0432\u044C\u044B\u0437\u0448\u044D\u0449\u0447\u044A\u042E\u0410\u0411\u0426\u0414\u0415\u0424\u0413\u0425\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u042F\u0420\u0421\u0422\u0423\u0416\u0412\u042C\u042B\u0417\u0428\u042D\u0429\u0427\u042A"
    },
    koi8t: {
      type: "_sbcs",
      chars: "\u049B\u0493\u201A\u0492\u201E\u2026\u2020\u2021\uFFFD\u2030\u04B3\u2039\u04B2\u04B7\u04B6\uFFFD\u049A\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\uFFFD\u203A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u04EF\u04EE\u0451\xA4\u04E3\xA6\xA7\uFFFD\uFFFD\uFFFD\xAB\xAC\xAD\xAE\uFFFD\xB0\xB1\xB2\u0401\uFFFD\u04E2\xB6\xB7\uFFFD\u2116\uFFFD\xBB\uFFFD\uFFFD\uFFFD\xA9\u044E\u0430\u0431\u0446\u0434\u0435\u0444\u0433\u0445\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u044F\u0440\u0441\u0442\u0443\u0436\u0432\u044C\u044B\u0437\u0448\u044D\u0449\u0447\u044A\u042E\u0410\u0411\u0426\u0414\u0415\u0424\u0413\u0425\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u042F\u0420\u0421\u0422\u0423\u0416\u0412\u042C\u042B\u0417\u0428\u042D\u0429\u0427\u042A"
    },
    armscii8: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\uFFFD\u0587\u0589)(\xBB\xAB\u2014.\u055D,-\u058A\u2026\u055C\u055B\u055E\u0531\u0561\u0532\u0562\u0533\u0563\u0534\u0564\u0535\u0565\u0536\u0566\u0537\u0567\u0538\u0568\u0539\u0569\u053A\u056A\u053B\u056B\u053C\u056C\u053D\u056D\u053E\u056E\u053F\u056F\u0540\u0570\u0541\u0571\u0542\u0572\u0543\u0573\u0544\u0574\u0545\u0575\u0546\u0576\u0547\u0577\u0548\u0578\u0549\u0579\u054A\u057A\u054B\u057B\u054C\u057C\u054D\u057D\u054E\u057E\u054F\u057F\u0550\u0580\u0551\u0581\u0552\u0582\u0553\u0583\u0554\u0584\u0555\u0585\u0556\u0586\u055A\uFFFD"
    },
    rk1048: {
      type: "_sbcs",
      chars: "\u0402\u0403\u201A\u0453\u201E\u2026\u2020\u2021\u20AC\u2030\u0409\u2039\u040A\u049A\u04BA\u040F\u0452\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\u0459\u203A\u045A\u049B\u04BB\u045F\xA0\u04B0\u04B1\u04D8\xA4\u04E8\xA6\xA7\u0401\xA9\u0492\xAB\xAC\xAD\xAE\u04AE\xB0\xB1\u0406\u0456\u04E9\xB5\xB6\xB7\u0451\u2116\u0493\xBB\u04D9\u04A2\u04A3\u04AF\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F"
    },
    tcvn: {
      type: "_sbcs",
      chars: `\0\xDA\u1EE4\x03\u1EEA\u1EEC\u1EEE\x07	
\r\x0E\x0F\x10\u1EE8\u1EF0\u1EF2\u1EF6\u1EF8\xDD\u1EF4\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC0\u1EA2\xC3\xC1\u1EA0\u1EB6\u1EAC\xC8\u1EBA\u1EBC\xC9\u1EB8\u1EC6\xCC\u1EC8\u0128\xCD\u1ECA\xD2\u1ECE\xD5\xD3\u1ECC\u1ED8\u1EDC\u1EDE\u1EE0\u1EDA\u1EE2\xD9\u1EE6\u0168\xA0\u0102\xC2\xCA\xD4\u01A0\u01AF\u0110\u0103\xE2\xEA\xF4\u01A1\u01B0\u0111\u1EB0\u0300\u0309\u0303\u0301\u0323\xE0\u1EA3\xE3\xE1\u1EA1\u1EB2\u1EB1\u1EB3\u1EB5\u1EAF\u1EB4\u1EAE\u1EA6\u1EA8\u1EAA\u1EA4\u1EC0\u1EB7\u1EA7\u1EA9\u1EAB\u1EA5\u1EAD\xE8\u1EC2\u1EBB\u1EBD\xE9\u1EB9\u1EC1\u1EC3\u1EC5\u1EBF\u1EC7\xEC\u1EC9\u1EC4\u1EBE\u1ED2\u0129\xED\u1ECB\xF2\u1ED4\u1ECF\xF5\xF3\u1ECD\u1ED3\u1ED5\u1ED7\u1ED1\u1ED9\u1EDD\u1EDF\u1EE1\u1EDB\u1EE3\xF9\u1ED6\u1EE7\u0169\xFA\u1EE5\u1EEB\u1EED\u1EEF\u1EE9\u1EF1\u1EF3\u1EF7\u1EF9\xFD\u1EF5\u1ED0`
    },
    georgianacademy: {
      type: "_sbcs",
      chars: "\x80\x81\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0160\u2039\u0152\x8D\x8E\x8F\x90\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\u0161\u203A\u0153\x9D\x9E\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\u10D0\u10D1\u10D2\u10D3\u10D4\u10D5\u10D6\u10D7\u10D8\u10D9\u10DA\u10DB\u10DC\u10DD\u10DE\u10DF\u10E0\u10E1\u10E2\u10E3\u10E4\u10E5\u10E6\u10E7\u10E8\u10E9\u10EA\u10EB\u10EC\u10ED\u10EE\u10EF\u10F0\u10F1\u10F2\u10F3\u10F4\u10F5\u10F6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
    },
    georgianps: {
      type: "_sbcs",
      chars: "\x80\x81\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0160\u2039\u0152\x8D\x8E\x8F\x90\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\u0161\u203A\u0153\x9D\x9E\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\u10D0\u10D1\u10D2\u10D3\u10D4\u10D5\u10D6\u10F1\u10D7\u10D8\u10D9\u10DA\u10DB\u10DC\u10F2\u10DD\u10DE\u10DF\u10E0\u10E1\u10E2\u10F3\u10E3\u10E4\u10E5\u10E6\u10E7\u10E8\u10E9\u10EA\u10EB\u10EC\u10ED\u10EE\u10F4\u10EF\u10F0\u10F5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
    },
    pt154: {
      type: "_sbcs",
      chars: "\u0496\u0492\u04EE\u0493\u201E\u2026\u04B6\u04AE\u04B2\u04AF\u04A0\u04E2\u04A2\u049A\u04BA\u04B8\u0497\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u04B3\u04B7\u04A1\u04E3\u04A3\u049B\u04BB\u04B9\xA0\u040E\u045E\u0408\u04E8\u0498\u04B0\xA7\u0401\xA9\u04D8\xAB\xAC\u04EF\xAE\u049C\xB0\u04B1\u0406\u0456\u0499\u04E9\xB6\xB7\u0451\u2116\u04D9\xBB\u0458\u04AA\u04AB\u049D\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F"
    },
    viscii: {
      type: "_sbcs",
      chars: `\0\x01\u1EB2\x03\x04\u1EB4\u1EAA\x07	
\r\x0E\x0F\x10\x11\x12\x13\u1EF6\x15\x16\x17\x18\u1EF8\x1A\x1B\x1C\x1D\u1EF4\x1F !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u1EA0\u1EAE\u1EB0\u1EB6\u1EA4\u1EA6\u1EA8\u1EAC\u1EBC\u1EB8\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EE2\u1EDA\u1EDC\u1EDE\u1ECA\u1ECE\u1ECC\u1EC8\u1EE6\u0168\u1EE4\u1EF2\xD5\u1EAF\u1EB1\u1EB7\u1EA5\u1EA7\u1EA9\u1EAD\u1EBD\u1EB9\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1ED1\u1ED3\u1ED5\u1ED7\u1EE0\u01A0\u1ED9\u1EDD\u1EDF\u1ECB\u1EF0\u1EE8\u1EEA\u1EEC\u01A1\u1EDB\u01AF\xC0\xC1\xC2\xC3\u1EA2\u0102\u1EB3\u1EB5\xC8\xC9\xCA\u1EBA\xCC\xCD\u0128\u1EF3\u0110\u1EE9\xD2\xD3\xD4\u1EA1\u1EF7\u1EEB\u1EED\xD9\xDA\u1EF9\u1EF5\xDD\u1EE1\u01B0\xE0\xE1\xE2\xE3\u1EA3\u0103\u1EEF\u1EAB\xE8\xE9\xEA\u1EBB\xEC\xED\u0129\u1EC9\u0111\u1EF1\xF2\xF3\xF4\xF5\u1ECF\u1ECD\u1EE5\xF9\xFA\u0169\u1EE7\xFD\u1EE3\u1EEE`
    },
    iso646cn: {
      type: "_sbcs",
      chars: `\0\x01\x02\x03\x04\x05\x06\x07	
\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !"#\xA5%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\`abcdefghijklmnopqrstuvwxyz{|}\u203E\x7F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD`
    },
    iso646jp: {
      type: "_sbcs",
      chars: `\0\x01\x02\x03\x04\x05\x06\x07	
\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\xA5]^_\`abcdefghijklmnopqrstuvwxyz{|}\u203E\x7F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD`
    },
    hproman8: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xC0\xC2\xC8\xCA\xCB\xCE\xCF\xB4\u02CB\u02C6\xA8\u02DC\xD9\xDB\u20A4\xAF\xDD\xFD\xB0\xC7\xE7\xD1\xF1\xA1\xBF\xA4\xA3\xA5\xA7\u0192\xA2\xE2\xEA\xF4\xFB\xE1\xE9\xF3\xFA\xE0\xE8\xF2\xF9\xE4\xEB\xF6\xFC\xC5\xEE\xD8\xC6\xE5\xED\xF8\xE6\xC4\xEC\xD6\xDC\xC9\xEF\xDF\xD4\xC1\xC3\xE3\xD0\xF0\xCD\xCC\xD3\xD2\xD5\xF5\u0160\u0161\xDA\u0178\xFF\xDE\xFE\xB7\xB5\xB6\xBE\u2014\xBC\xBD\xAA\xBA\xAB\u25A0\xBB\xB1\uFFFD"
    },
    macintosh: {
      type: "_sbcs",
      chars: "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\xA4\u2039\u203A\uFB01\uFB02\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7"
    },
    ascii: {
      type: "_sbcs",
      chars: "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"
    },
    tis620: {
      type: "_sbcs",
      chars: "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFFFD\uFFFD\uFFFD\uFFFD\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\uFFFD\uFFFD\uFFFD\uFFFD"
    }
  };
});

// node_modules/iconv-lite/encodings/dbcs-codec.js
var require_dbcs_codec = __commonJS((exports) => {
  var DBCSCodec = function(codecOptions, iconv) {
    this.encodingName = codecOptions.encodingName;
    if (!codecOptions)
      throw new Error("DBCS codec is called without the data.");
    if (!codecOptions.table)
      throw new Error("Encoding '" + this.encodingName + "' has no data.");
    var mappingTable = codecOptions.table();
    this.decodeTables = [];
    this.decodeTables[0] = UNASSIGNED_NODE.slice(0);
    this.decodeTableSeq = [];
    for (var i2 = 0;i2 < mappingTable.length; i2++)
      this._addDecodeChunk(mappingTable[i2]);
    this.defaultCharUnicode = iconv.defaultCharUnicode;
    this.encodeTable = [];
    this.encodeTableSeq = [];
    var skipEncodeChars = {};
    if (codecOptions.encodeSkipVals)
      for (var i2 = 0;i2 < codecOptions.encodeSkipVals.length; i2++) {
        var val = codecOptions.encodeSkipVals[i2];
        if (typeof val === "number")
          skipEncodeChars[val] = true;
        else
          for (var j = val.from;j <= val.to; j++)
            skipEncodeChars[j] = true;
      }
    this._fillEncodeTable(0, 0, skipEncodeChars);
    if (codecOptions.encodeAdd) {
      for (var uChar in codecOptions.encodeAdd)
        if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))
          this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);
    }
    this.defCharSB = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];
    if (this.defCharSB === UNASSIGNED)
      this.defCharSB = this.encodeTable[0]["?"];
    if (this.defCharSB === UNASSIGNED)
      this.defCharSB = "?".charCodeAt(0);
    if (typeof codecOptions.gb18030 === "function") {
      this.gb18030 = codecOptions.gb18030();
      var thirdByteNodeIdx = this.decodeTables.length;
      var thirdByteNode = this.decodeTables[thirdByteNodeIdx] = UNASSIGNED_NODE.slice(0);
      var fourthByteNodeIdx = this.decodeTables.length;
      var fourthByteNode = this.decodeTables[fourthByteNodeIdx] = UNASSIGNED_NODE.slice(0);
      for (var i2 = 129;i2 <= 254; i2++) {
        var secondByteNodeIdx = NODE_START - this.decodeTables[0][i2];
        var secondByteNode = this.decodeTables[secondByteNodeIdx];
        for (var j = 48;j <= 57; j++)
          secondByteNode[j] = NODE_START - thirdByteNodeIdx;
      }
      for (var i2 = 129;i2 <= 254; i2++)
        thirdByteNode[i2] = NODE_START - fourthByteNodeIdx;
      for (var i2 = 48;i2 <= 57; i2++)
        fourthByteNode[i2] = GB18030_CODE;
    }
  };
  var DBCSEncoder = function(options, codec) {
    this.leadSurrogate = -1;
    this.seqObj = undefined;
    this.encodeTable = codec.encodeTable;
    this.encodeTableSeq = codec.encodeTableSeq;
    this.defaultCharSingleByte = codec.defCharSB;
    this.gb18030 = codec.gb18030;
  };
  var DBCSDecoder = function(options, codec) {
    this.nodeIdx = 0;
    this.prevBuf = Buffer2.alloc(0);
    this.decodeTables = codec.decodeTables;
    this.decodeTableSeq = codec.decodeTableSeq;
    this.defaultCharUnicode = codec.defaultCharUnicode;
    this.gb18030 = codec.gb18030;
  };
  var findIdx = function(table, val) {
    if (table[0] > val)
      return -1;
    var l = 0, r = table.length;
    while (l < r - 1) {
      var mid = l + Math.floor((r - l + 1) / 2);
      if (table[mid] <= val)
        l = mid;
      else
        r = mid;
    }
    return l;
  };
  var Buffer2 = require_safer().Buffer;
  exports._dbcs = DBCSCodec;
  var UNASSIGNED = -1;
  var GB18030_CODE = -2;
  var SEQ_START = -10;
  var NODE_START = -1000;
  var UNASSIGNED_NODE = new Array(256);
  var DEF_CHAR = -1;
  for (i = 0;i < 256; i++)
    UNASSIGNED_NODE[i] = UNASSIGNED;
  var i;
  DBCSCodec.prototype.encoder = DBCSEncoder;
  DBCSCodec.prototype.decoder = DBCSDecoder;
  DBCSCodec.prototype._getDecodeTrieNode = function(addr) {
    var bytes = [];
    for (;addr > 0; addr >>= 8)
      bytes.push(addr & 255);
    if (bytes.length == 0)
      bytes.push(0);
    var node = this.decodeTables[0];
    for (var i2 = bytes.length - 1;i2 > 0; i2--) {
      var val = node[bytes[i2]];
      if (val == UNASSIGNED) {
        node[bytes[i2]] = NODE_START - this.decodeTables.length;
        this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));
      } else if (val <= NODE_START) {
        node = this.decodeTables[NODE_START - val];
      } else
        throw new Error("Overwrite byte in " + this.encodingName + ", addr: " + addr.toString(16));
    }
    return node;
  };
  DBCSCodec.prototype._addDecodeChunk = function(chunk) {
    var curAddr = parseInt(chunk[0], 16);
    var writeTable = this._getDecodeTrieNode(curAddr);
    curAddr = curAddr & 255;
    for (var k = 1;k < chunk.length; k++) {
      var part = chunk[k];
      if (typeof part === "string") {
        for (var l = 0;l < part.length; ) {
          var code = part.charCodeAt(l++);
          if (55296 <= code && code < 56320) {
            var codeTrail = part.charCodeAt(l++);
            if (56320 <= codeTrail && codeTrail < 57344)
              writeTable[curAddr++] = 65536 + (code - 55296) * 1024 + (codeTrail - 56320);
            else
              throw new Error("Incorrect surrogate pair in " + this.encodingName + " at chunk " + chunk[0]);
          } else if (4080 < code && code <= 4095) {
            var len = 4095 - code + 2;
            var seq = [];
            for (var m = 0;m < len; m++)
              seq.push(part.charCodeAt(l++));
            writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;
            this.decodeTableSeq.push(seq);
          } else
            writeTable[curAddr++] = code;
        }
      } else if (typeof part === "number") {
        var charCode = writeTable[curAddr - 1] + 1;
        for (var l = 0;l < part; l++)
          writeTable[curAddr++] = charCode++;
      } else
        throw new Error("Incorrect type '" + typeof part + "' given in " + this.encodingName + " at chunk " + chunk[0]);
    }
    if (curAddr > 255)
      throw new Error("Incorrect chunk in " + this.encodingName + " at addr " + chunk[0] + ": too long" + curAddr);
  };
  DBCSCodec.prototype._getEncodeBucket = function(uCode) {
    var high = uCode >> 8;
    if (this.encodeTable[high] === undefined)
      this.encodeTable[high] = UNASSIGNED_NODE.slice(0);
    return this.encodeTable[high];
  };
  DBCSCodec.prototype._setEncodeChar = function(uCode, dbcsCode) {
    var bucket = this._getEncodeBucket(uCode);
    var low = uCode & 255;
    if (bucket[low] <= SEQ_START)
      this.encodeTableSeq[SEQ_START - bucket[low]][DEF_CHAR] = dbcsCode;
    else if (bucket[low] == UNASSIGNED)
      bucket[low] = dbcsCode;
  };
  DBCSCodec.prototype._setEncodeSequence = function(seq, dbcsCode) {
    var uCode = seq[0];
    var bucket = this._getEncodeBucket(uCode);
    var low = uCode & 255;
    var node;
    if (bucket[low] <= SEQ_START) {
      node = this.encodeTableSeq[SEQ_START - bucket[low]];
    } else {
      node = {};
      if (bucket[low] !== UNASSIGNED)
        node[DEF_CHAR] = bucket[low];
      bucket[low] = SEQ_START - this.encodeTableSeq.length;
      this.encodeTableSeq.push(node);
    }
    for (var j = 1;j < seq.length - 1; j++) {
      var oldVal = node[uCode];
      if (typeof oldVal === "object")
        node = oldVal;
      else {
        node = node[uCode] = {};
        if (oldVal !== undefined)
          node[DEF_CHAR] = oldVal;
      }
    }
    uCode = seq[seq.length - 1];
    node[uCode] = dbcsCode;
  };
  DBCSCodec.prototype._fillEncodeTable = function(nodeIdx, prefix, skipEncodeChars) {
    var node = this.decodeTables[nodeIdx];
    for (var i2 = 0;i2 < 256; i2++) {
      var uCode = node[i2];
      var mbCode = prefix + i2;
      if (skipEncodeChars[mbCode])
        continue;
      if (uCode >= 0)
        this._setEncodeChar(uCode, mbCode);
      else if (uCode <= NODE_START)
        this._fillEncodeTable(NODE_START - uCode, mbCode << 8, skipEncodeChars);
      else if (uCode <= SEQ_START)
        this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);
    }
  };
  DBCSEncoder.prototype.write = function(str) {
    var newBuf = Buffer2.alloc(str.length * (this.gb18030 ? 4 : 3)), leadSurrogate = this.leadSurrogate, seqObj = this.seqObj, nextChar = -1, i2 = 0, j = 0;
    while (true) {
      if (nextChar === -1) {
        if (i2 == str.length)
          break;
        var uCode = str.charCodeAt(i2++);
      } else {
        var uCode = nextChar;
        nextChar = -1;
      }
      if (55296 <= uCode && uCode < 57344) {
        if (uCode < 56320) {
          if (leadSurrogate === -1) {
            leadSurrogate = uCode;
            continue;
          } else {
            leadSurrogate = uCode;
            uCode = UNASSIGNED;
          }
        } else {
          if (leadSurrogate !== -1) {
            uCode = 65536 + (leadSurrogate - 55296) * 1024 + (uCode - 56320);
            leadSurrogate = -1;
          } else {
            uCode = UNASSIGNED;
          }
        }
      } else if (leadSurrogate !== -1) {
        nextChar = uCode;
        uCode = UNASSIGNED;
        leadSurrogate = -1;
      }
      var dbcsCode = UNASSIGNED;
      if (seqObj !== undefined && uCode != UNASSIGNED) {
        var resCode = seqObj[uCode];
        if (typeof resCode === "object") {
          seqObj = resCode;
          continue;
        } else if (typeof resCode == "number") {
          dbcsCode = resCode;
        } else if (resCode == undefined) {
          resCode = seqObj[DEF_CHAR];
          if (resCode !== undefined) {
            dbcsCode = resCode;
            nextChar = uCode;
          } else {
          }
        }
        seqObj = undefined;
      } else if (uCode >= 0) {
        var subtable = this.encodeTable[uCode >> 8];
        if (subtable !== undefined)
          dbcsCode = subtable[uCode & 255];
        if (dbcsCode <= SEQ_START) {
          seqObj = this.encodeTableSeq[SEQ_START - dbcsCode];
          continue;
        }
        if (dbcsCode == UNASSIGNED && this.gb18030) {
          var idx = findIdx(this.gb18030.uChars, uCode);
          if (idx != -1) {
            var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);
            newBuf[j++] = 129 + Math.floor(dbcsCode / 12600);
            dbcsCode = dbcsCode % 12600;
            newBuf[j++] = 48 + Math.floor(dbcsCode / 1260);
            dbcsCode = dbcsCode % 1260;
            newBuf[j++] = 129 + Math.floor(dbcsCode / 10);
            dbcsCode = dbcsCode % 10;
            newBuf[j++] = 48 + dbcsCode;
            continue;
          }
        }
      }
      if (dbcsCode === UNASSIGNED)
        dbcsCode = this.defaultCharSingleByte;
      if (dbcsCode < 256) {
        newBuf[j++] = dbcsCode;
      } else if (dbcsCode < 65536) {
        newBuf[j++] = dbcsCode >> 8;
        newBuf[j++] = dbcsCode & 255;
      } else {
        newBuf[j++] = dbcsCode >> 16;
        newBuf[j++] = dbcsCode >> 8 & 255;
        newBuf[j++] = dbcsCode & 255;
      }
    }
    this.seqObj = seqObj;
    this.leadSurrogate = leadSurrogate;
    return newBuf.slice(0, j);
  };
  DBCSEncoder.prototype.end = function() {
    if (this.leadSurrogate === -1 && this.seqObj === undefined)
      return;
    var newBuf = Buffer2.alloc(10), j = 0;
    if (this.seqObj) {
      var dbcsCode = this.seqObj[DEF_CHAR];
      if (dbcsCode !== undefined) {
        if (dbcsCode < 256) {
          newBuf[j++] = dbcsCode;
        } else {
          newBuf[j++] = dbcsCode >> 8;
          newBuf[j++] = dbcsCode & 255;
        }
      } else {
      }
      this.seqObj = undefined;
    }
    if (this.leadSurrogate !== -1) {
      newBuf[j++] = this.defaultCharSingleByte;
      this.leadSurrogate = -1;
    }
    return newBuf.slice(0, j);
  };
  DBCSEncoder.prototype.findIdx = findIdx;
  DBCSDecoder.prototype.write = function(buf) {
    var newBuf = Buffer2.alloc(buf.length * 2), nodeIdx = this.nodeIdx, prevBuf = this.prevBuf, prevBufOffset = this.prevBuf.length, seqStart = -this.prevBuf.length, uCode;
    if (prevBufOffset > 0)
      prevBuf = Buffer2.concat([prevBuf, buf.slice(0, 10)]);
    for (var i2 = 0, j = 0;i2 < buf.length; i2++) {
      var curByte = i2 >= 0 ? buf[i2] : prevBuf[i2 + prevBufOffset];
      var uCode = this.decodeTables[nodeIdx][curByte];
      if (uCode >= 0) {
      } else if (uCode === UNASSIGNED) {
        i2 = seqStart;
        uCode = this.defaultCharUnicode.charCodeAt(0);
      } else if (uCode === GB18030_CODE) {
        var curSeq = seqStart >= 0 ? buf.slice(seqStart, i2 + 1) : prevBuf.slice(seqStart + prevBufOffset, i2 + 1 + prevBufOffset);
        var ptr = (curSeq[0] - 129) * 12600 + (curSeq[1] - 48) * 1260 + (curSeq[2] - 129) * 10 + (curSeq[3] - 48);
        var idx = findIdx(this.gb18030.gbChars, ptr);
        uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];
      } else if (uCode <= NODE_START) {
        nodeIdx = NODE_START - uCode;
        continue;
      } else if (uCode <= SEQ_START) {
        var seq = this.decodeTableSeq[SEQ_START - uCode];
        for (var k = 0;k < seq.length - 1; k++) {
          uCode = seq[k];
          newBuf[j++] = uCode & 255;
          newBuf[j++] = uCode >> 8;
        }
        uCode = seq[seq.length - 1];
      } else
        throw new Error("iconv-lite internal error: invalid decoding table value " + uCode + " at " + nodeIdx + "/" + curByte);
      if (uCode > 65535) {
        uCode -= 65536;
        var uCodeLead = 55296 + Math.floor(uCode / 1024);
        newBuf[j++] = uCodeLead & 255;
        newBuf[j++] = uCodeLead >> 8;
        uCode = 56320 + uCode % 1024;
      }
      newBuf[j++] = uCode & 255;
      newBuf[j++] = uCode >> 8;
      nodeIdx = 0;
      seqStart = i2 + 1;
    }
    this.nodeIdx = nodeIdx;
    this.prevBuf = seqStart >= 0 ? buf.slice(seqStart) : prevBuf.slice(seqStart + prevBufOffset);
    return newBuf.slice(0, j).toString("ucs2");
  };
  DBCSDecoder.prototype.end = function() {
    var ret = "";
    while (this.prevBuf.length > 0) {
      ret += this.defaultCharUnicode;
      var buf = this.prevBuf.slice(1);
      this.prevBuf = Buffer2.alloc(0);
      this.nodeIdx = 0;
      if (buf.length > 0)
        ret += this.write(buf);
    }
    this.nodeIdx = 0;
    return ret;
  };
});

// node_modules/iconv-lite/encodings/tables/shiftjis.json
var require_shiftjis = __commonJS((exports, module) => {
  module.exports = [
    ["0", "\0", 128],
    ["a1", "\uFF61", 62],
    ["8140", "\u3000\u3001\u3002\uFF0C\uFF0E\u30FB\uFF1A\uFF1B\uFF1F\uFF01\u309B\u309C\xB4\uFF40\xA8\uFF3E\uFFE3\uFF3F\u30FD\u30FE\u309D\u309E\u3003\u4EDD\u3005\u3006\u3007\u30FC\u2015\u2010\uFF0F\uFF3C\uFF5E\u2225\uFF5C\u2026\u2025\u2018\u2019\u201C\u201D\uFF08\uFF09\u3014\u3015\uFF3B\uFF3D\uFF5B\uFF5D\u3008", 9, "\uFF0B\uFF0D\xB1\xD7"],
    ["8180", "\xF7\uFF1D\u2260\uFF1C\uFF1E\u2266\u2267\u221E\u2234\u2642\u2640\xB0\u2032\u2033\u2103\uFFE5\uFF04\uFFE0\uFFE1\uFF05\uFF03\uFF06\uFF0A\uFF20\xA7\u2606\u2605\u25CB\u25CF\u25CE\u25C7\u25C6\u25A1\u25A0\u25B3\u25B2\u25BD\u25BC\u203B\u3012\u2192\u2190\u2191\u2193\u3013"],
    ["81b8", "\u2208\u220B\u2286\u2287\u2282\u2283\u222A\u2229"],
    ["81c8", "\u2227\u2228\uFFE2\u21D2\u21D4\u2200\u2203"],
    ["81da", "\u2220\u22A5\u2312\u2202\u2207\u2261\u2252\u226A\u226B\u221A\u223D\u221D\u2235\u222B\u222C"],
    ["81f0", "\u212B\u2030\u266F\u266D\u266A\u2020\u2021\xB6"],
    ["81fc", "\u25EF"],
    ["824f", "\uFF10", 9],
    ["8260", "\uFF21", 25],
    ["8281", "\uFF41", 25],
    ["829f", "\u3041", 82],
    ["8340", "\u30A1", 62],
    ["8380", "\u30E0", 22],
    ["839f", "\u0391", 16, "\u03A3", 6],
    ["83bf", "\u03B1", 16, "\u03C3", 6],
    ["8440", "\u0410", 5, "\u0401\u0416", 25],
    ["8470", "\u0430", 5, "\u0451\u0436", 7],
    ["8480", "\u043E", 17],
    ["849f", "\u2500\u2502\u250C\u2510\u2518\u2514\u251C\u252C\u2524\u2534\u253C\u2501\u2503\u250F\u2513\u251B\u2517\u2523\u2533\u252B\u253B\u254B\u2520\u252F\u2528\u2537\u253F\u251D\u2530\u2525\u2538\u2542"],
    ["8740", "\u2460", 19, "\u2160", 9],
    ["875f", "\u3349\u3314\u3322\u334D\u3318\u3327\u3303\u3336\u3351\u3357\u330D\u3326\u3323\u332B\u334A\u333B\u339C\u339D\u339E\u338E\u338F\u33C4\u33A1"],
    ["877e", "\u337B"],
    ["8780", "\u301D\u301F\u2116\u33CD\u2121\u32A4", 4, "\u3231\u3232\u3239\u337E\u337D\u337C\u2252\u2261\u222B\u222E\u2211\u221A\u22A5\u2220\u221F\u22BF\u2235\u2229\u222A"],
    ["889f", "\u4E9C\u5516\u5A03\u963F\u54C0\u611B\u6328\u59F6\u9022\u8475\u831C\u7A50\u60AA\u63E1\u6E25\u65ED\u8466\u82A6\u9BF5\u6893\u5727\u65A1\u6271\u5B9B\u59D0\u867B\u98F4\u7D62\u7DBE\u9B8E\u6216\u7C9F\u88B7\u5B89\u5EB5\u6309\u6697\u6848\u95C7\u978D\u674F\u4EE5\u4F0A\u4F4D\u4F9D\u5049\u56F2\u5937\u59D4\u5A01\u5C09\u60DF\u610F\u6170\u6613\u6905\u70BA\u754F\u7570\u79FB\u7DAD\u7DEF\u80C3\u840E\u8863\u8B02\u9055\u907A\u533B\u4E95\u4EA5\u57DF\u80B2\u90C1\u78EF\u4E00\u58F1\u6EA2\u9038\u7A32\u8328\u828B\u9C2F\u5141\u5370\u54BD\u54E1\u56E0\u59FB\u5F15\u98F2\u6DEB\u80E4\u852D"],
    ["8940", "\u9662\u9670\u96A0\u97FB\u540B\u53F3\u5B87\u70CF\u7FBD\u8FC2\u96E8\u536F\u9D5C\u7ABA\u4E11\u7893\u81FC\u6E26\u5618\u5504\u6B1D\u851A\u9C3B\u59E5\u53A9\u6D66\u74DC\u958F\u5642\u4E91\u904B\u96F2\u834F\u990C\u53E1\u55B6\u5B30\u5F71\u6620\u66F3\u6804\u6C38\u6CF3\u6D29\u745B\u76C8\u7A4E\u9834\u82F1\u885B\u8A60\u92ED\u6DB2\u75AB\u76CA\u99C5\u60A6\u8B01\u8D8A\u95B2\u698E\u53AD\u5186"],
    ["8980", "\u5712\u5830\u5944\u5BB4\u5EF6\u6028\u63A9\u63F4\u6CBF\u6F14\u708E\u7114\u7159\u71D5\u733F\u7E01\u8276\u82D1\u8597\u9060\u925B\u9D1B\u5869\u65BC\u6C5A\u7525\u51F9\u592E\u5965\u5F80\u5FDC\u62BC\u65FA\u6A2A\u6B27\u6BB4\u738B\u7FC1\u8956\u9D2C\u9D0E\u9EC4\u5CA1\u6C96\u837B\u5104\u5C4B\u61B6\u81C6\u6876\u7261\u4E59\u4FFA\u5378\u6069\u6E29\u7A4F\u97F3\u4E0B\u5316\u4EEE\u4F55\u4F3D\u4FA1\u4F73\u52A0\u53EF\u5609\u590F\u5AC1\u5BB6\u5BE1\u79D1\u6687\u679C\u67B6\u6B4C\u6CB3\u706B\u73C2\u798D\u79BE\u7A3C\u7B87\u82B1\u82DB\u8304\u8377\u83EF\u83D3\u8766\u8AB2\u5629\u8CA8\u8FE6\u904E\u971E\u868A\u4FC4\u5CE8\u6211\u7259\u753B\u81E5\u82BD\u86FE\u8CC0\u96C5\u9913\u99D5\u4ECB\u4F1A\u89E3\u56DE\u584A\u58CA\u5EFB\u5FEB\u602A\u6094\u6062\u61D0\u6212\u62D0\u6539"],
    ["8a40", "\u9B41\u6666\u68B0\u6D77\u7070\u754C\u7686\u7D75\u82A5\u87F9\u958B\u968E\u8C9D\u51F1\u52BE\u5916\u54B3\u5BB3\u5D16\u6168\u6982\u6DAF\u788D\u84CB\u8857\u8A72\u93A7\u9AB8\u6D6C\u99A8\u86D9\u57A3\u67FF\u86CE\u920E\u5283\u5687\u5404\u5ED3\u62E1\u64B9\u683C\u6838\u6BBB\u7372\u78BA\u7A6B\u899A\u89D2\u8D6B\u8F03\u90ED\u95A3\u9694\u9769\u5B66\u5CB3\u697D\u984D\u984E\u639B\u7B20\u6A2B"],
    ["8a80", "\u6A7F\u68B6\u9C0D\u6F5F\u5272\u559D\u6070\u62EC\u6D3B\u6E07\u6ED1\u845B\u8910\u8F44\u4E14\u9C39\u53F6\u691B\u6A3A\u9784\u682A\u515C\u7AC3\u84B2\u91DC\u938C\u565B\u9D28\u6822\u8305\u8431\u7CA5\u5208\u82C5\u74E6\u4E7E\u4F83\u51A0\u5BD2\u520A\u52D8\u52E7\u5DFB\u559A\u582A\u59E6\u5B8C\u5B98\u5BDB\u5E72\u5E79\u60A3\u611F\u6163\u61BE\u63DB\u6562\u67D1\u6853\u68FA\u6B3E\u6B53\u6C57\u6F22\u6F97\u6F45\u74B0\u7518\u76E3\u770B\u7AFF\u7BA1\u7C21\u7DE9\u7F36\u7FF0\u809D\u8266\u839E\u89B3\u8ACC\u8CAB\u9084\u9451\u9593\u9591\u95A2\u9665\u97D3\u9928\u8218\u4E38\u542B\u5CB8\u5DCC\u73A9\u764C\u773C\u5CA9\u7FEB\u8D0B\u96C1\u9811\u9854\u9858\u4F01\u4F0E\u5371\u559C\u5668\u57FA\u5947\u5B09\u5BC4\u5C90\u5E0C\u5E7E\u5FCC\u63EE\u673A\u65D7\u65E2\u671F\u68CB\u68C4"],
    ["8b40", "\u6A5F\u5E30\u6BC5\u6C17\u6C7D\u757F\u7948\u5B63\u7A00\u7D00\u5FBD\u898F\u8A18\u8CB4\u8D77\u8ECC\u8F1D\u98E2\u9A0E\u9B3C\u4E80\u507D\u5100\u5993\u5B9C\u622F\u6280\u64EC\u6B3A\u72A0\u7591\u7947\u7FA9\u87FB\u8ABC\u8B70\u63AC\u83CA\u97A0\u5409\u5403\u55AB\u6854\u6A58\u8A70\u7827\u6775\u9ECD\u5374\u5BA2\u811A\u8650\u9006\u4E18\u4E45\u4EC7\u4F11\u53CA\u5438\u5BAE\u5F13\u6025\u6551"],
    ["8b80", "\u673D\u6C42\u6C72\u6CE3\u7078\u7403\u7A76\u7AAE\u7B08\u7D1A\u7CFE\u7D66\u65E7\u725B\u53BB\u5C45\u5DE8\u62D2\u62E0\u6319\u6E20\u865A\u8A31\u8DDD\u92F8\u6F01\u79A6\u9B5A\u4EA8\u4EAB\u4EAC\u4F9B\u4FA0\u50D1\u5147\u7AF6\u5171\u51F6\u5354\u5321\u537F\u53EB\u55AC\u5883\u5CE1\u5F37\u5F4A\u602F\u6050\u606D\u631F\u6559\u6A4B\u6CC1\u72C2\u72ED\u77EF\u80F8\u8105\u8208\u854E\u90F7\u93E1\u97FF\u9957\u9A5A\u4EF0\u51DD\u5C2D\u6681\u696D\u5C40\u66F2\u6975\u7389\u6850\u7C81\u50C5\u52E4\u5747\u5DFE\u9326\u65A4\u6B23\u6B3D\u7434\u7981\u79BD\u7B4B\u7DCA\u82B9\u83CC\u887F\u895F\u8B39\u8FD1\u91D1\u541F\u9280\u4E5D\u5036\u53E5\u533A\u72D7\u7396\u77E9\u82E6\u8EAF\u99C6\u99C8\u99D2\u5177\u611A\u865E\u55B0\u7A7A\u5076\u5BD3\u9047\u9685\u4E32\u6ADB\u91E7\u5C51\u5C48"],
    ["8c40", "\u6398\u7A9F\u6C93\u9774\u8F61\u7AAA\u718A\u9688\u7C82\u6817\u7E70\u6851\u936C\u52F2\u541B\u85AB\u8A13\u7FA4\u8ECD\u90E1\u5366\u8888\u7941\u4FC2\u50BE\u5211\u5144\u5553\u572D\u73EA\u578B\u5951\u5F62\u5F84\u6075\u6176\u6167\u61A9\u63B2\u643A\u656C\u666F\u6842\u6E13\u7566\u7A3D\u7CFB\u7D4C\u7D99\u7E4B\u7F6B\u830E\u834A\u86CD\u8A08\u8A63\u8B66\u8EFD\u981A\u9D8F\u82B8\u8FCE\u9BE8"],
    ["8c80", "\u5287\u621F\u6483\u6FC0\u9699\u6841\u5091\u6B20\u6C7A\u6F54\u7A74\u7D50\u8840\u8A23\u6708\u4EF6\u5039\u5026\u5065\u517C\u5238\u5263\u55A7\u570F\u5805\u5ACC\u5EFA\u61B2\u61F8\u62F3\u6372\u691C\u6A29\u727D\u72AC\u732E\u7814\u786F\u7D79\u770C\u80A9\u898B\u8B19\u8CE2\u8ED2\u9063\u9375\u967A\u9855\u9A13\u9E78\u5143\u539F\u53B3\u5E7B\u5F26\u6E1B\u6E90\u7384\u73FE\u7D43\u8237\u8A00\u8AFA\u9650\u4E4E\u500B\u53E4\u547C\u56FA\u59D1\u5B64\u5DF1\u5EAB\u5F27\u6238\u6545\u67AF\u6E56\u72D0\u7CCA\u88B4\u80A1\u80E1\u83F0\u864E\u8A87\u8DE8\u9237\u96C7\u9867\u9F13\u4E94\u4E92\u4F0D\u5348\u5449\u543E\u5A2F\u5F8C\u5FA1\u609F\u68A7\u6A8E\u745A\u7881\u8A9E\u8AA4\u8B77\u9190\u4E5E\u9BC9\u4EA4\u4F7C\u4FAF\u5019\u5016\u5149\u516C\u529F\u52B9\u52FE\u539A\u53E3\u5411"],
    ["8d40", "\u540E\u5589\u5751\u57A2\u597D\u5B54\u5B5D\u5B8F\u5DE5\u5DE7\u5DF7\u5E78\u5E83\u5E9A\u5EB7\u5F18\u6052\u614C\u6297\u62D8\u63A7\u653B\u6602\u6643\u66F4\u676D\u6821\u6897\u69CB\u6C5F\u6D2A\u6D69\u6E2F\u6E9D\u7532\u7687\u786C\u7A3F\u7CE0\u7D05\u7D18\u7D5E\u7DB1\u8015\u8003\u80AF\u80B1\u8154\u818F\u822A\u8352\u884C\u8861\u8B1B\u8CA2\u8CFC\u90CA\u9175\u9271\u783F\u92FC\u95A4\u964D"],
    ["8d80", "\u9805\u9999\u9AD8\u9D3B\u525B\u52AB\u53F7\u5408\u58D5\u62F7\u6FE0\u8C6A\u8F5F\u9EB9\u514B\u523B\u544A\u56FD\u7A40\u9177\u9D60\u9ED2\u7344\u6F09\u8170\u7511\u5FFD\u60DA\u9AA8\u72DB\u8FBC\u6B64\u9803\u4ECA\u56F0\u5764\u58BE\u5A5A\u6068\u61C7\u660F\u6606\u6839\u68B1\u6DF7\u75D5\u7D3A\u826E\u9B42\u4E9B\u4F50\u53C9\u5506\u5D6F\u5DE6\u5DEE\u67FB\u6C99\u7473\u7802\u8A50\u9396\u88DF\u5750\u5EA7\u632B\u50B5\u50AC\u518D\u6700\u54C9\u585E\u59BB\u5BB0\u5F69\u624D\u63A1\u683D\u6B73\u6E08\u707D\u91C7\u7280\u7815\u7826\u796D\u658E\u7D30\u83DC\u88C1\u8F09\u969B\u5264\u5728\u6750\u7F6A\u8CA1\u51B4\u5742\u962A\u583A\u698A\u80B4\u54B2\u5D0E\u57FC\u7895\u9DFA\u4F5C\u524A\u548B\u643E\u6628\u6714\u67F5\u7A84\u7B56\u7D22\u932F\u685C\u9BAD\u7B39\u5319\u518A\u5237"],
    ["8e40", "\u5BDF\u62F6\u64AE\u64E6\u672D\u6BBA\u85A9\u96D1\u7690\u9BD6\u634C\u9306\u9BAB\u76BF\u6652\u4E09\u5098\u53C2\u5C71\u60E8\u6492\u6563\u685F\u71E6\u73CA\u7523\u7B97\u7E82\u8695\u8B83\u8CDB\u9178\u9910\u65AC\u66AB\u6B8B\u4ED5\u4ED4\u4F3A\u4F7F\u523A\u53F8\u53F2\u55E3\u56DB\u58EB\u59CB\u59C9\u59FF\u5B50\u5C4D\u5E02\u5E2B\u5FD7\u601D\u6307\u652F\u5B5C\u65AF\u65BD\u65E8\u679D\u6B62"],
    ["8e80", "\u6B7B\u6C0F\u7345\u7949\u79C1\u7CF8\u7D19\u7D2B\u80A2\u8102\u81F3\u8996\u8A5E\u8A69\u8A66\u8A8C\u8AEE\u8CC7\u8CDC\u96CC\u98FC\u6B6F\u4E8B\u4F3C\u4F8D\u5150\u5B57\u5BFA\u6148\u6301\u6642\u6B21\u6ECB\u6CBB\u723E\u74BD\u75D4\u78C1\u793A\u800C\u8033\u81EA\u8494\u8F9E\u6C50\u9E7F\u5F0F\u8B58\u9D2B\u7AFA\u8EF8\u5B8D\u96EB\u4E03\u53F1\u57F7\u5931\u5AC9\u5BA4\u6089\u6E7F\u6F06\u75BE\u8CEA\u5B9F\u8500\u7BE0\u5072\u67F4\u829D\u5C61\u854A\u7E1E\u820E\u5199\u5C04\u6368\u8D66\u659C\u716E\u793E\u7D17\u8005\u8B1D\u8ECA\u906E\u86C7\u90AA\u501F\u52FA\u5C3A\u6753\u707C\u7235\u914C\u91C8\u932B\u82E5\u5BC2\u5F31\u60F9\u4E3B\u53D6\u5B88\u624B\u6731\u6B8A\u72E9\u73E0\u7A2E\u816B\u8DA3\u9152\u9996\u5112\u53D7\u546A\u5BFF\u6388\u6A39\u7DAC\u9700\u56DA\u53CE\u5468"],
    ["8f40", "\u5B97\u5C31\u5DDE\u4FEE\u6101\u62FE\u6D32\u79C0\u79CB\u7D42\u7E4D\u7FD2\u81ED\u821F\u8490\u8846\u8972\u8B90\u8E74\u8F2F\u9031\u914B\u916C\u96C6\u919C\u4EC0\u4F4F\u5145\u5341\u5F93\u620E\u67D4\u6C41\u6E0B\u7363\u7E26\u91CD\u9283\u53D4\u5919\u5BBF\u6DD1\u795D\u7E2E\u7C9B\u587E\u719F\u51FA\u8853\u8FF0\u4FCA\u5CFB\u6625\u77AC\u7AE3\u821C\u99FF\u51C6\u5FAA\u65EC\u696F\u6B89\u6DF3"],
    ["8f80", "\u6E96\u6F64\u76FE\u7D14\u5DE1\u9075\u9187\u9806\u51E6\u521D\u6240\u6691\u66D9\u6E1A\u5EB6\u7DD2\u7F72\u66F8\u85AF\u85F7\u8AF8\u52A9\u53D9\u5973\u5E8F\u5F90\u6055\u92E4\u9664\u50B7\u511F\u52DD\u5320\u5347\u53EC\u54E8\u5546\u5531\u5617\u5968\u59BE\u5A3C\u5BB5\u5C06\u5C0F\u5C11\u5C1A\u5E84\u5E8A\u5EE0\u5F70\u627F\u6284\u62DB\u638C\u6377\u6607\u660C\u662D\u6676\u677E\u68A2\u6A1F\u6A35\u6CBC\u6D88\u6E09\u6E58\u713C\u7126\u7167\u75C7\u7701\u785D\u7901\u7965\u79F0\u7AE0\u7B11\u7CA7\u7D39\u8096\u83D6\u848B\u8549\u885D\u88F3\u8A1F\u8A3C\u8A54\u8A73\u8C61\u8CDE\u91A4\u9266\u937E\u9418\u969C\u9798\u4E0A\u4E08\u4E1E\u4E57\u5197\u5270\u57CE\u5834\u58CC\u5B22\u5E38\u60C5\u64FE\u6761\u6756\u6D44\u72B6\u7573\u7A63\u84B8\u8B72\u91B8\u9320\u5631\u57F4\u98FE"],
    ["9040", "\u62ED\u690D\u6B96\u71ED\u7E54\u8077\u8272\u89E6\u98DF\u8755\u8FB1\u5C3B\u4F38\u4FE1\u4FB5\u5507\u5A20\u5BDD\u5BE9\u5FC3\u614E\u632F\u65B0\u664B\u68EE\u699B\u6D78\u6DF1\u7533\u75B9\u771F\u795E\u79E6\u7D33\u81E3\u82AF\u85AA\u89AA\u8A3A\u8EAB\u8F9B\u9032\u91DD\u9707\u4EBA\u4EC1\u5203\u5875\u58EC\u5C0B\u751A\u5C3D\u814E\u8A0A\u8FC5\u9663\u976D\u7B25\u8ACF\u9808\u9162\u56F3\u53A8"],
    ["9080", "\u9017\u5439\u5782\u5E25\u63A8\u6C34\u708A\u7761\u7C8B\u7FE0\u8870\u9042\u9154\u9310\u9318\u968F\u745E\u9AC4\u5D07\u5D69\u6570\u67A2\u8DA8\u96DB\u636E\u6749\u6919\u83C5\u9817\u96C0\u88FE\u6F84\u647A\u5BF8\u4E16\u702C\u755D\u662F\u51C4\u5236\u52E2\u59D3\u5F81\u6027\u6210\u653F\u6574\u661F\u6674\u68F2\u6816\u6B63\u6E05\u7272\u751F\u76DB\u7CBE\u8056\u58F0\u88FD\u897F\u8AA0\u8A93\u8ACB\u901D\u9192\u9752\u9759\u6589\u7A0E\u8106\u96BB\u5E2D\u60DC\u621A\u65A5\u6614\u6790\u77F3\u7A4D\u7C4D\u7E3E\u810A\u8CAC\u8D64\u8DE1\u8E5F\u78A9\u5207\u62D9\u63A5\u6442\u6298\u8A2D\u7A83\u7BC0\u8AAC\u96EA\u7D76\u820C\u8749\u4ED9\u5148\u5343\u5360\u5BA3\u5C02\u5C16\u5DDD\u6226\u6247\u64B0\u6813\u6834\u6CC9\u6D45\u6D17\u67D3\u6F5C\u714E\u717D\u65CB\u7A7F\u7BAD\u7DDA"],
    ["9140", "\u7E4A\u7FA8\u817A\u821B\u8239\u85A6\u8A6E\u8CCE\u8DF5\u9078\u9077\u92AD\u9291\u9583\u9BAE\u524D\u5584\u6F38\u7136\u5168\u7985\u7E55\u81B3\u7CCE\u564C\u5851\u5CA8\u63AA\u66FE\u66FD\u695A\u72D9\u758F\u758E\u790E\u7956\u79DF\u7C97\u7D20\u7D44\u8607\u8A34\u963B\u9061\u9F20\u50E7\u5275\u53CC\u53E2\u5009\u55AA\u58EE\u594F\u723D\u5B8B\u5C64\u531D\u60E3\u60F3\u635C\u6383\u633F\u63BB"],
    ["9180", "\u64CD\u65E9\u66F9\u5DE3\u69CD\u69FD\u6F15\u71E5\u4E89\u75E9\u76F8\u7A93\u7CDF\u7DCF\u7D9C\u8061\u8349\u8358\u846C\u84BC\u85FB\u88C5\u8D70\u9001\u906D\u9397\u971C\u9A12\u50CF\u5897\u618E\u81D3\u8535\u8D08\u9020\u4FC3\u5074\u5247\u5373\u606F\u6349\u675F\u6E2C\u8DB3\u901F\u4FD7\u5C5E\u8CCA\u65CF\u7D9A\u5352\u8896\u5176\u63C3\u5B58\u5B6B\u5C0A\u640D\u6751\u905C\u4ED6\u591A\u592A\u6C70\u8A51\u553E\u5815\u59A5\u60F0\u6253\u67C1\u8235\u6955\u9640\u99C4\u9A28\u4F53\u5806\u5BFE\u8010\u5CB1\u5E2F\u5F85\u6020\u614B\u6234\u66FF\u6CF0\u6EDE\u80CE\u817F\u82D4\u888B\u8CB8\u9000\u902E\u968A\u9EDB\u9BDB\u4EE3\u53F0\u5927\u7B2C\u918D\u984C\u9DF9\u6EDD\u7027\u5353\u5544\u5B85\u6258\u629E\u62D3\u6CA2\u6FEF\u7422\u8A17\u9438\u6FC1\u8AFE\u8338\u51E7\u86F8\u53EA"],
    ["9240", "\u53E9\u4F46\u9054\u8FB0\u596A\u8131\u5DFD\u7AEA\u8FBF\u68DA\u8C37\u72F8\u9C48\u6A3D\u8AB0\u4E39\u5358\u5606\u5766\u62C5\u63A2\u65E6\u6B4E\u6DE1\u6E5B\u70AD\u77ED\u7AEF\u7BAA\u7DBB\u803D\u80C6\u86CB\u8A95\u935B\u56E3\u58C7\u5F3E\u65AD\u6696\u6A80\u6BB5\u7537\u8AC7\u5024\u77E5\u5730\u5F1B\u6065\u667A\u6C60\u75F4\u7A1A\u7F6E\u81F4\u8718\u9045\u99B3\u7BC9\u755C\u7AF9\u7B51\u84C4"],
    ["9280", "\u9010\u79E9\u7A92\u8336\u5AE1\u7740\u4E2D\u4EF2\u5B99\u5FE0\u62BD\u663C\u67F1\u6CE8\u866B\u8877\u8A3B\u914E\u92F3\u99D0\u6A17\u7026\u732A\u82E7\u8457\u8CAF\u4E01\u5146\u51CB\u558B\u5BF5\u5E16\u5E33\u5E81\u5F14\u5F35\u5F6B\u5FB4\u61F2\u6311\u66A2\u671D\u6F6E\u7252\u753A\u773A\u8074\u8139\u8178\u8776\u8ABF\u8ADC\u8D85\u8DF3\u929A\u9577\u9802\u9CE5\u52C5\u6357\u76F4\u6715\u6C88\u73CD\u8CC3\u93AE\u9673\u6D25\u589C\u690E\u69CC\u8FFD\u939A\u75DB\u901A\u585A\u6802\u63B4\u69FB\u4F43\u6F2C\u67D8\u8FBB\u8526\u7DB4\u9354\u693F\u6F70\u576A\u58F7\u5B2C\u7D2C\u722A\u540A\u91E3\u9DB4\u4EAD\u4F4E\u505C\u5075\u5243\u8C9E\u5448\u5824\u5B9A\u5E1D\u5E95\u5EAD\u5EF7\u5F1F\u608C\u62B5\u633A\u63D0\u68AF\u6C40\u7887\u798E\u7A0B\u7DE0\u8247\u8A02\u8AE6\u8E44\u9013"],
    ["9340", "\u90B8\u912D\u91D8\u9F0E\u6CE5\u6458\u64E2\u6575\u6EF4\u7684\u7B1B\u9069\u93D1\u6EBA\u54F2\u5FB9\u64A4\u8F4D\u8FED\u9244\u5178\u586B\u5929\u5C55\u5E97\u6DFB\u7E8F\u751C\u8CBC\u8EE2\u985B\u70B9\u4F1D\u6BBF\u6FB1\u7530\u96FB\u514E\u5410\u5835\u5857\u59AC\u5C60\u5F92\u6597\u675C\u6E21\u767B\u83DF\u8CED\u9014\u90FD\u934D\u7825\u783A\u52AA\u5EA6\u571F\u5974\u6012\u5012\u515A\u51AC"],
    ["9380", "\u51CD\u5200\u5510\u5854\u5858\u5957\u5B95\u5CF6\u5D8B\u60BC\u6295\u642D\u6771\u6843\u68BC\u68DF\u76D7\u6DD8\u6E6F\u6D9B\u706F\u71C8\u5F53\u75D8\u7977\u7B49\u7B54\u7B52\u7CD6\u7D71\u5230\u8463\u8569\u85E4\u8A0E\u8B04\u8C46\u8E0F\u9003\u900F\u9419\u9676\u982D\u9A30\u95D8\u50CD\u52D5\u540C\u5802\u5C0E\u61A7\u649E\u6D1E\u77B3\u7AE5\u80F4\u8404\u9053\u9285\u5CE0\u9D07\u533F\u5F97\u5FB3\u6D9C\u7279\u7763\u79BF\u7BE4\u6BD2\u72EC\u8AAD\u6803\u6A61\u51F8\u7A81\u6934\u5C4A\u9CF6\u82EB\u5BC5\u9149\u701E\u5678\u5C6F\u60C7\u6566\u6C8C\u8C5A\u9041\u9813\u5451\u66C7\u920D\u5948\u90A3\u5185\u4E4D\u51EA\u8599\u8B0E\u7058\u637A\u934B\u6962\u99B4\u7E04\u7577\u5357\u6960\u8EDF\u96E3\u6C5D\u4E8C\u5C3C\u5F10\u8FE9\u5302\u8CD1\u8089\u8679\u5EFF\u65E5\u4E73\u5165"],
    ["9440", "\u5982\u5C3F\u97EE\u4EFB\u598A\u5FCD\u8A8D\u6FE1\u79B0\u7962\u5BE7\u8471\u732B\u71B1\u5E74\u5FF5\u637B\u649A\u71C3\u7C98\u4E43\u5EFC\u4E4B\u57DC\u56A2\u60A9\u6FC3\u7D0D\u80FD\u8133\u81BF\u8FB2\u8997\u86A4\u5DF4\u628A\u64AD\u8987\u6777\u6CE2\u6D3E\u7436\u7834\u5A46\u7F75\u82AD\u99AC\u4FF3\u5EC3\u62DD\u6392\u6557\u676F\u76C3\u724C\u80CC\u80BA\u8F29\u914D\u500D\u57F9\u5A92\u6885"],
    ["9480", "\u6973\u7164\u72FD\u8CB7\u58F2\u8CE0\u966A\u9019\u877F\u79E4\u77E7\u8429\u4F2F\u5265\u535A\u62CD\u67CF\u6CCA\u767D\u7B94\u7C95\u8236\u8584\u8FEB\u66DD\u6F20\u7206\u7E1B\u83AB\u99C1\u9EA6\u51FD\u7BB1\u7872\u7BB8\u8087\u7B48\u6AE8\u5E61\u808C\u7551\u7560\u516B\u9262\u6E8C\u767A\u9197\u9AEA\u4F10\u7F70\u629C\u7B4F\u95A5\u9CE9\u567A\u5859\u86E4\u96BC\u4F34\u5224\u534A\u53CD\u53DB\u5E06\u642C\u6591\u677F\u6C3E\u6C4E\u7248\u72AF\u73ED\u7554\u7E41\u822C\u85E9\u8CA9\u7BC4\u91C6\u7169\u9812\u98EF\u633D\u6669\u756A\u76E4\u78D0\u8543\u86EE\u532A\u5351\u5426\u5983\u5E87\u5F7C\u60B2\u6249\u6279\u62AB\u6590\u6BD4\u6CCC\u75B2\u76AE\u7891\u79D8\u7DCB\u7F77\u80A5\u88AB\u8AB9\u8CBB\u907F\u975E\u98DB\u6A0B\u7C38\u5099\u5C3E\u5FAE\u6787\u6BD8\u7435\u7709\u7F8E"],
    ["9540", "\u9F3B\u67CA\u7A17\u5339\u758B\u9AED\u5F66\u819D\u83F1\u8098\u5F3C\u5FC5\u7562\u7B46\u903C\u6867\u59EB\u5A9B\u7D10\u767E\u8B2C\u4FF5\u5F6A\u6A19\u6C37\u6F02\u74E2\u7968\u8868\u8A55\u8C79\u5EDF\u63CF\u75C5\u79D2\u82D7\u9328\u92F2\u849C\u86ED\u9C2D\u54C1\u5F6C\u658C\u6D5C\u7015\u8CA7\u8CD3\u983B\u654F\u74F6\u4E0D\u4ED8\u57E0\u592B\u5A66\u5BCC\u51A8\u5E03\u5E9C\u6016\u6276\u6577"],
    ["9580", "\u65A7\u666E\u6D6E\u7236\u7B26\u8150\u819A\u8299\u8B5C\u8CA0\u8CE6\u8D74\u961C\u9644\u4FAE\u64AB\u6B66\u821E\u8461\u856A\u90E8\u5C01\u6953\u98A8\u847A\u8557\u4F0F\u526F\u5FA9\u5E45\u670D\u798F\u8179\u8907\u8986\u6DF5\u5F17\u6255\u6CB8\u4ECF\u7269\u9B92\u5206\u543B\u5674\u58B3\u61A4\u626E\u711A\u596E\u7C89\u7CDE\u7D1B\u96F0\u6587\u805E\u4E19\u4F75\u5175\u5840\u5E63\u5E73\u5F0A\u67C4\u4E26\u853D\u9589\u965B\u7C73\u9801\u50FB\u58C1\u7656\u78A7\u5225\u77A5\u8511\u7B86\u504F\u5909\u7247\u7BC7\u7DE8\u8FBA\u8FD4\u904D\u4FBF\u52C9\u5A29\u5F01\u97AD\u4FDD\u8217\u92EA\u5703\u6355\u6B69\u752B\u88DC\u8F14\u7A42\u52DF\u5893\u6155\u620A\u66AE\u6BCD\u7C3F\u83E9\u5023\u4FF8\u5305\u5446\u5831\u5949\u5B9D\u5CF0\u5CEF\u5D29\u5E96\u62B1\u6367\u653E\u65B9\u670B"],
    ["9640", "\u6CD5\u6CE1\u70F9\u7832\u7E2B\u80DE\u82B3\u840C\u84EC\u8702\u8912\u8A2A\u8C4A\u90A6\u92D2\u98FD\u9CF3\u9D6C\u4E4F\u4EA1\u508D\u5256\u574A\u59A8\u5E3D\u5FD8\u5FD9\u623F\u66B4\u671B\u67D0\u68D2\u5192\u7D21\u80AA\u81A8\u8B00\u8C8C\u8CBF\u927E\u9632\u5420\u982C\u5317\u50D5\u535C\u58A8\u64B2\u6734\u7267\u7766\u7A46\u91E6\u52C3\u6CA1\u6B86\u5800\u5E4C\u5954\u672C\u7FFB\u51E1\u76C6"],
    ["9680", "\u6469\u78E8\u9B54\u9EBB\u57CB\u59B9\u6627\u679A\u6BCE\u54E9\u69D9\u5E55\u819C\u6795\u9BAA\u67FE\u9C52\u685D\u4EA6\u4FE3\u53C8\u62B9\u672B\u6CAB\u8FC4\u4FAD\u7E6D\u9EBF\u4E07\u6162\u6E80\u6F2B\u8513\u5473\u672A\u9B45\u5DF3\u7B95\u5CAC\u5BC6\u871C\u6E4A\u84D1\u7A14\u8108\u5999\u7C8D\u6C11\u7720\u52D9\u5922\u7121\u725F\u77DB\u9727\u9D61\u690B\u5A7F\u5A18\u51A5\u540D\u547D\u660E\u76DF\u8FF7\u9298\u9CF4\u59EA\u725D\u6EC5\u514D\u68C9\u7DBF\u7DEC\u9762\u9EBA\u6478\u6A21\u8302\u5984\u5B5F\u6BDB\u731B\u76F2\u7DB2\u8017\u8499\u5132\u6728\u9ED9\u76EE\u6762\u52FF\u9905\u5C24\u623B\u7C7E\u8CB0\u554F\u60B6\u7D0B\u9580\u5301\u4E5F\u51B6\u591C\u723A\u8036\u91CE\u5F25\u77E2\u5384\u5F79\u7D04\u85AC\u8A33\u8E8D\u9756\u67F3\u85AE\u9453\u6109\u6108\u6CB9\u7652"],
    ["9740", "\u8AED\u8F38\u552F\u4F51\u512A\u52C7\u53CB\u5BA5\u5E7D\u60A0\u6182\u63D6\u6709\u67DA\u6E67\u6D8C\u7336\u7337\u7531\u7950\u88D5\u8A98\u904A\u9091\u90F5\u96C4\u878D\u5915\u4E88\u4F59\u4E0E\u8A89\u8F3F\u9810\u50AD\u5E7C\u5996\u5BB9\u5EB8\u63DA\u63FA\u64C1\u66DC\u694A\u69D8\u6D0B\u6EB6\u7194\u7528\u7AAF\u7F8A\u8000\u8449\u84C9\u8981\u8B21\u8E0A\u9065\u967D\u990A\u617E\u6291\u6B32"],
    ["9780", "\u6C83\u6D74\u7FCC\u7FFC\u6DC0\u7F85\u87BA\u88F8\u6765\u83B1\u983C\u96F7\u6D1B\u7D61\u843D\u916A\u4E71\u5375\u5D50\u6B04\u6FEB\u85CD\u862D\u89A7\u5229\u540F\u5C65\u674E\u68A8\u7406\u7483\u75E2\u88CF\u88E1\u91CC\u96E2\u9678\u5F8B\u7387\u7ACB\u844E\u63A0\u7565\u5289\u6D41\u6E9C\u7409\u7559\u786B\u7C92\u9686\u7ADC\u9F8D\u4FB6\u616E\u65C5\u865C\u4E86\u4EAE\u50DA\u4E21\u51CC\u5BEE\u6599\u6881\u6DBC\u731F\u7642\u77AD\u7A1C\u7CE7\u826F\u8AD2\u907C\u91CF\u9675\u9818\u529B\u7DD1\u502B\u5398\u6797\u6DCB\u71D0\u7433\u81E8\u8F2A\u96A3\u9C57\u9E9F\u7460\u5841\u6D99\u7D2F\u985E\u4EE4\u4F36\u4F8B\u51B7\u52B1\u5DBA\u601C\u73B2\u793C\u82D3\u9234\u96B7\u96F6\u970A\u9E97\u9F62\u66A6\u6B74\u5217\u52A3\u70C8\u88C2\u5EC9\u604B\u6190\u6F23\u7149\u7C3E\u7DF4\u806F"],
    ["9840", "\u84EE\u9023\u932C\u5442\u9B6F\u6AD3\u7089\u8CC2\u8DEF\u9732\u52B4\u5A41\u5ECA\u5F04\u6717\u697C\u6994\u6D6A\u6F0F\u7262\u72FC\u7BED\u8001\u807E\u874B\u90CE\u516D\u9E93\u7984\u808B\u9332\u8AD6\u502D\u548C\u8A71\u6B6A\u8CC4\u8107\u60D1\u67A0\u9DF2\u4E99\u4E98\u9C10\u8A6B\u85C1\u8568\u6900\u6E7E\u7897\u8155"],
    ["989f", "\u5F0C\u4E10\u4E15\u4E2A\u4E31\u4E36\u4E3C\u4E3F\u4E42\u4E56\u4E58\u4E82\u4E85\u8C6B\u4E8A\u8212\u5F0D\u4E8E\u4E9E\u4E9F\u4EA0\u4EA2\u4EB0\u4EB3\u4EB6\u4ECE\u4ECD\u4EC4\u4EC6\u4EC2\u4ED7\u4EDE\u4EED\u4EDF\u4EF7\u4F09\u4F5A\u4F30\u4F5B\u4F5D\u4F57\u4F47\u4F76\u4F88\u4F8F\u4F98\u4F7B\u4F69\u4F70\u4F91\u4F6F\u4F86\u4F96\u5118\u4FD4\u4FDF\u4FCE\u4FD8\u4FDB\u4FD1\u4FDA\u4FD0\u4FE4\u4FE5\u501A\u5028\u5014\u502A\u5025\u5005\u4F1C\u4FF6\u5021\u5029\u502C\u4FFE\u4FEF\u5011\u5006\u5043\u5047\u6703\u5055\u5050\u5048\u505A\u5056\u506C\u5078\u5080\u509A\u5085\u50B4\u50B2"],
    ["9940", "\u50C9\u50CA\u50B3\u50C2\u50D6\u50DE\u50E5\u50ED\u50E3\u50EE\u50F9\u50F5\u5109\u5101\u5102\u5116\u5115\u5114\u511A\u5121\u513A\u5137\u513C\u513B\u513F\u5140\u5152\u514C\u5154\u5162\u7AF8\u5169\u516A\u516E\u5180\u5182\u56D8\u518C\u5189\u518F\u5191\u5193\u5195\u5196\u51A4\u51A6\u51A2\u51A9\u51AA\u51AB\u51B3\u51B1\u51B2\u51B0\u51B5\u51BD\u51C5\u51C9\u51DB\u51E0\u8655\u51E9\u51ED"],
    ["9980", "\u51F0\u51F5\u51FE\u5204\u520B\u5214\u520E\u5227\u522A\u522E\u5233\u5239\u524F\u5244\u524B\u524C\u525E\u5254\u526A\u5274\u5269\u5273\u527F\u527D\u528D\u5294\u5292\u5271\u5288\u5291\u8FA8\u8FA7\u52AC\u52AD\u52BC\u52B5\u52C1\u52CD\u52D7\u52DE\u52E3\u52E6\u98ED\u52E0\u52F3\u52F5\u52F8\u52F9\u5306\u5308\u7538\u530D\u5310\u530F\u5315\u531A\u5323\u532F\u5331\u5333\u5338\u5340\u5346\u5345\u4E17\u5349\u534D\u51D6\u535E\u5369\u536E\u5918\u537B\u5377\u5382\u5396\u53A0\u53A6\u53A5\u53AE\u53B0\u53B6\u53C3\u7C12\u96D9\u53DF\u66FC\u71EE\u53EE\u53E8\u53ED\u53FA\u5401\u543D\u5440\u542C\u542D\u543C\u542E\u5436\u5429\u541D\u544E\u548F\u5475\u548E\u545F\u5471\u5477\u5470\u5492\u547B\u5480\u5476\u5484\u5490\u5486\u54C7\u54A2\u54B8\u54A5\u54AC\u54C4\u54C8\u54A8"],
    ["9a40", "\u54AB\u54C2\u54A4\u54BE\u54BC\u54D8\u54E5\u54E6\u550F\u5514\u54FD\u54EE\u54ED\u54FA\u54E2\u5539\u5540\u5563\u554C\u552E\u555C\u5545\u5556\u5557\u5538\u5533\u555D\u5599\u5580\u54AF\u558A\u559F\u557B\u557E\u5598\u559E\u55AE\u557C\u5583\u55A9\u5587\u55A8\u55DA\u55C5\u55DF\u55C4\u55DC\u55E4\u55D4\u5614\u55F7\u5616\u55FE\u55FD\u561B\u55F9\u564E\u5650\u71DF\u5634\u5636\u5632\u5638"],
    ["9a80", "\u566B\u5664\u562F\u566C\u566A\u5686\u5680\u568A\u56A0\u5694\u568F\u56A5\u56AE\u56B6\u56B4\u56C2\u56BC\u56C1\u56C3\u56C0\u56C8\u56CE\u56D1\u56D3\u56D7\u56EE\u56F9\u5700\u56FF\u5704\u5709\u5708\u570B\u570D\u5713\u5718\u5716\u55C7\u571C\u5726\u5737\u5738\u574E\u573B\u5740\u574F\u5769\u57C0\u5788\u5761\u577F\u5789\u5793\u57A0\u57B3\u57A4\u57AA\u57B0\u57C3\u57C6\u57D4\u57D2\u57D3\u580A\u57D6\u57E3\u580B\u5819\u581D\u5872\u5821\u5862\u584B\u5870\u6BC0\u5852\u583D\u5879\u5885\u58B9\u589F\u58AB\u58BA\u58DE\u58BB\u58B8\u58AE\u58C5\u58D3\u58D1\u58D7\u58D9\u58D8\u58E5\u58DC\u58E4\u58DF\u58EF\u58FA\u58F9\u58FB\u58FC\u58FD\u5902\u590A\u5910\u591B\u68A6\u5925\u592C\u592D\u5932\u5938\u593E\u7AD2\u5955\u5950\u594E\u595A\u5958\u5962\u5960\u5967\u596C\u5969"],
    ["9b40", "\u5978\u5981\u599D\u4F5E\u4FAB\u59A3\u59B2\u59C6\u59E8\u59DC\u598D\u59D9\u59DA\u5A25\u5A1F\u5A11\u5A1C\u5A09\u5A1A\u5A40\u5A6C\u5A49\u5A35\u5A36\u5A62\u5A6A\u5A9A\u5ABC\u5ABE\u5ACB\u5AC2\u5ABD\u5AE3\u5AD7\u5AE6\u5AE9\u5AD6\u5AFA\u5AFB\u5B0C\u5B0B\u5B16\u5B32\u5AD0\u5B2A\u5B36\u5B3E\u5B43\u5B45\u5B40\u5B51\u5B55\u5B5A\u5B5B\u5B65\u5B69\u5B70\u5B73\u5B75\u5B78\u6588\u5B7A\u5B80"],
    ["9b80", "\u5B83\u5BA6\u5BB8\u5BC3\u5BC7\u5BC9\u5BD4\u5BD0\u5BE4\u5BE6\u5BE2\u5BDE\u5BE5\u5BEB\u5BF0\u5BF6\u5BF3\u5C05\u5C07\u5C08\u5C0D\u5C13\u5C20\u5C22\u5C28\u5C38\u5C39\u5C41\u5C46\u5C4E\u5C53\u5C50\u5C4F\u5B71\u5C6C\u5C6E\u4E62\u5C76\u5C79\u5C8C\u5C91\u5C94\u599B\u5CAB\u5CBB\u5CB6\u5CBC\u5CB7\u5CC5\u5CBE\u5CC7\u5CD9\u5CE9\u5CFD\u5CFA\u5CED\u5D8C\u5CEA\u5D0B\u5D15\u5D17\u5D5C\u5D1F\u5D1B\u5D11\u5D14\u5D22\u5D1A\u5D19\u5D18\u5D4C\u5D52\u5D4E\u5D4B\u5D6C\u5D73\u5D76\u5D87\u5D84\u5D82\u5DA2\u5D9D\u5DAC\u5DAE\u5DBD\u5D90\u5DB7\u5DBC\u5DC9\u5DCD\u5DD3\u5DD2\u5DD6\u5DDB\u5DEB\u5DF2\u5DF5\u5E0B\u5E1A\u5E19\u5E11\u5E1B\u5E36\u5E37\u5E44\u5E43\u5E40\u5E4E\u5E57\u5E54\u5E5F\u5E62\u5E64\u5E47\u5E75\u5E76\u5E7A\u9EBC\u5E7F\u5EA0\u5EC1\u5EC2\u5EC8\u5ED0\u5ECF"],
    ["9c40", "\u5ED6\u5EE3\u5EDD\u5EDA\u5EDB\u5EE2\u5EE1\u5EE8\u5EE9\u5EEC\u5EF1\u5EF3\u5EF0\u5EF4\u5EF8\u5EFE\u5F03\u5F09\u5F5D\u5F5C\u5F0B\u5F11\u5F16\u5F29\u5F2D\u5F38\u5F41\u5F48\u5F4C\u5F4E\u5F2F\u5F51\u5F56\u5F57\u5F59\u5F61\u5F6D\u5F73\u5F77\u5F83\u5F82\u5F7F\u5F8A\u5F88\u5F91\u5F87\u5F9E\u5F99\u5F98\u5FA0\u5FA8\u5FAD\u5FBC\u5FD6\u5FFB\u5FE4\u5FF8\u5FF1\u5FDD\u60B3\u5FFF\u6021\u6060"],
    ["9c80", "\u6019\u6010\u6029\u600E\u6031\u601B\u6015\u602B\u6026\u600F\u603A\u605A\u6041\u606A\u6077\u605F\u604A\u6046\u604D\u6063\u6043\u6064\u6042\u606C\u606B\u6059\u6081\u608D\u60E7\u6083\u609A\u6084\u609B\u6096\u6097\u6092\u60A7\u608B\u60E1\u60B8\u60E0\u60D3\u60B4\u5FF0\u60BD\u60C6\u60B5\u60D8\u614D\u6115\u6106\u60F6\u60F7\u6100\u60F4\u60FA\u6103\u6121\u60FB\u60F1\u610D\u610E\u6147\u613E\u6128\u6127\u614A\u613F\u613C\u612C\u6134\u613D\u6142\u6144\u6173\u6177\u6158\u6159\u615A\u616B\u6174\u616F\u6165\u6171\u615F\u615D\u6153\u6175\u6199\u6196\u6187\u61AC\u6194\u619A\u618A\u6191\u61AB\u61AE\u61CC\u61CA\u61C9\u61F7\u61C8\u61C3\u61C6\u61BA\u61CB\u7F79\u61CD\u61E6\u61E3\u61F6\u61FA\u61F4\u61FF\u61FD\u61FC\u61FE\u6200\u6208\u6209\u620D\u620C\u6214\u621B"],
    ["9d40", "\u621E\u6221\u622A\u622E\u6230\u6232\u6233\u6241\u624E\u625E\u6263\u625B\u6260\u6268\u627C\u6282\u6289\u627E\u6292\u6293\u6296\u62D4\u6283\u6294\u62D7\u62D1\u62BB\u62CF\u62FF\u62C6\u64D4\u62C8\u62DC\u62CC\u62CA\u62C2\u62C7\u629B\u62C9\u630C\u62EE\u62F1\u6327\u6302\u6308\u62EF\u62F5\u6350\u633E\u634D\u641C\u634F\u6396\u638E\u6380\u63AB\u6376\u63A3\u638F\u6389\u639F\u63B5\u636B"],
    ["9d80", "\u6369\u63BE\u63E9\u63C0\u63C6\u63E3\u63C9\u63D2\u63F6\u63C4\u6416\u6434\u6406\u6413\u6426\u6436\u651D\u6417\u6428\u640F\u6467\u646F\u6476\u644E\u652A\u6495\u6493\u64A5\u64A9\u6488\u64BC\u64DA\u64D2\u64C5\u64C7\u64BB\u64D8\u64C2\u64F1\u64E7\u8209\u64E0\u64E1\u62AC\u64E3\u64EF\u652C\u64F6\u64F4\u64F2\u64FA\u6500\u64FD\u6518\u651C\u6505\u6524\u6523\u652B\u6534\u6535\u6537\u6536\u6538\u754B\u6548\u6556\u6555\u654D\u6558\u655E\u655D\u6572\u6578\u6582\u6583\u8B8A\u659B\u659F\u65AB\u65B7\u65C3\u65C6\u65C1\u65C4\u65CC\u65D2\u65DB\u65D9\u65E0\u65E1\u65F1\u6772\u660A\u6603\u65FB\u6773\u6635\u6636\u6634\u661C\u664F\u6644\u6649\u6641\u665E\u665D\u6664\u6667\u6668\u665F\u6662\u6670\u6683\u6688\u668E\u6689\u6684\u6698\u669D\u66C1\u66B9\u66C9\u66BE\u66BC"],
    ["9e40", "\u66C4\u66B8\u66D6\u66DA\u66E0\u663F\u66E6\u66E9\u66F0\u66F5\u66F7\u670F\u6716\u671E\u6726\u6727\u9738\u672E\u673F\u6736\u6741\u6738\u6737\u6746\u675E\u6760\u6759\u6763\u6764\u6789\u6770\u67A9\u677C\u676A\u678C\u678B\u67A6\u67A1\u6785\u67B7\u67EF\u67B4\u67EC\u67B3\u67E9\u67B8\u67E4\u67DE\u67DD\u67E2\u67EE\u67B9\u67CE\u67C6\u67E7\u6A9C\u681E\u6846\u6829\u6840\u684D\u6832\u684E"],
    ["9e80", "\u68B3\u682B\u6859\u6863\u6877\u687F\u689F\u688F\u68AD\u6894\u689D\u689B\u6883\u6AAE\u68B9\u6874\u68B5\u68A0\u68BA\u690F\u688D\u687E\u6901\u68CA\u6908\u68D8\u6922\u6926\u68E1\u690C\u68CD\u68D4\u68E7\u68D5\u6936\u6912\u6904\u68D7\u68E3\u6925\u68F9\u68E0\u68EF\u6928\u692A\u691A\u6923\u6921\u68C6\u6979\u6977\u695C\u6978\u696B\u6954\u697E\u696E\u6939\u6974\u693D\u6959\u6930\u6961\u695E\u695D\u6981\u696A\u69B2\u69AE\u69D0\u69BF\u69C1\u69D3\u69BE\u69CE\u5BE8\u69CA\u69DD\u69BB\u69C3\u69A7\u6A2E\u6991\u69A0\u699C\u6995\u69B4\u69DE\u69E8\u6A02\u6A1B\u69FF\u6B0A\u69F9\u69F2\u69E7\u6A05\u69B1\u6A1E\u69ED\u6A14\u69EB\u6A0A\u6A12\u6AC1\u6A23\u6A13\u6A44\u6A0C\u6A72\u6A36\u6A78\u6A47\u6A62\u6A59\u6A66\u6A48\u6A38\u6A22\u6A90\u6A8D\u6AA0\u6A84\u6AA2\u6AA3"],
    ["9f40", "\u6A97\u8617\u6ABB\u6AC3\u6AC2\u6AB8\u6AB3\u6AAC\u6ADE\u6AD1\u6ADF\u6AAA\u6ADA\u6AEA\u6AFB\u6B05\u8616\u6AFA\u6B12\u6B16\u9B31\u6B1F\u6B38\u6B37\u76DC\u6B39\u98EE\u6B47\u6B43\u6B49\u6B50\u6B59\u6B54\u6B5B\u6B5F\u6B61\u6B78\u6B79\u6B7F\u6B80\u6B84\u6B83\u6B8D\u6B98\u6B95\u6B9E\u6BA4\u6BAA\u6BAB\u6BAF\u6BB2\u6BB1\u6BB3\u6BB7\u6BBC\u6BC6\u6BCB\u6BD3\u6BDF\u6BEC\u6BEB\u6BF3\u6BEF"],
    ["9f80", "\u9EBE\u6C08\u6C13\u6C14\u6C1B\u6C24\u6C23\u6C5E\u6C55\u6C62\u6C6A\u6C82\u6C8D\u6C9A\u6C81\u6C9B\u6C7E\u6C68\u6C73\u6C92\u6C90\u6CC4\u6CF1\u6CD3\u6CBD\u6CD7\u6CC5\u6CDD\u6CAE\u6CB1\u6CBE\u6CBA\u6CDB\u6CEF\u6CD9\u6CEA\u6D1F\u884D\u6D36\u6D2B\u6D3D\u6D38\u6D19\u6D35\u6D33\u6D12\u6D0C\u6D63\u6D93\u6D64\u6D5A\u6D79\u6D59\u6D8E\u6D95\u6FE4\u6D85\u6DF9\u6E15\u6E0A\u6DB5\u6DC7\u6DE6\u6DB8\u6DC6\u6DEC\u6DDE\u6DCC\u6DE8\u6DD2\u6DC5\u6DFA\u6DD9\u6DE4\u6DD5\u6DEA\u6DEE\u6E2D\u6E6E\u6E2E\u6E19\u6E72\u6E5F\u6E3E\u6E23\u6E6B\u6E2B\u6E76\u6E4D\u6E1F\u6E43\u6E3A\u6E4E\u6E24\u6EFF\u6E1D\u6E38\u6E82\u6EAA\u6E98\u6EC9\u6EB7\u6ED3\u6EBD\u6EAF\u6EC4\u6EB2\u6ED4\u6ED5\u6E8F\u6EA5\u6EC2\u6E9F\u6F41\u6F11\u704C\u6EEC\u6EF8\u6EFE\u6F3F\u6EF2\u6F31\u6EEF\u6F32\u6ECC"],
    ["e040", "\u6F3E\u6F13\u6EF7\u6F86\u6F7A\u6F78\u6F81\u6F80\u6F6F\u6F5B\u6FF3\u6F6D\u6F82\u6F7C\u6F58\u6F8E\u6F91\u6FC2\u6F66\u6FB3\u6FA3\u6FA1\u6FA4\u6FB9\u6FC6\u6FAA\u6FDF\u6FD5\u6FEC\u6FD4\u6FD8\u6FF1\u6FEE\u6FDB\u7009\u700B\u6FFA\u7011\u7001\u700F\u6FFE\u701B\u701A\u6F74\u701D\u7018\u701F\u7030\u703E\u7032\u7051\u7063\u7099\u7092\u70AF\u70F1\u70AC\u70B8\u70B3\u70AE\u70DF\u70CB\u70DD"],
    ["e080", "\u70D9\u7109\u70FD\u711C\u7119\u7165\u7155\u7188\u7166\u7162\u714C\u7156\u716C\u718F\u71FB\u7184\u7195\u71A8\u71AC\u71D7\u71B9\u71BE\u71D2\u71C9\u71D4\u71CE\u71E0\u71EC\u71E7\u71F5\u71FC\u71F9\u71FF\u720D\u7210\u721B\u7228\u722D\u722C\u7230\u7232\u723B\u723C\u723F\u7240\u7246\u724B\u7258\u7274\u727E\u7282\u7281\u7287\u7292\u7296\u72A2\u72A7\u72B9\u72B2\u72C3\u72C6\u72C4\u72CE\u72D2\u72E2\u72E0\u72E1\u72F9\u72F7\u500F\u7317\u730A\u731C\u7316\u731D\u7334\u732F\u7329\u7325\u733E\u734E\u734F\u9ED8\u7357\u736A\u7368\u7370\u7378\u7375\u737B\u737A\u73C8\u73B3\u73CE\u73BB\u73C0\u73E5\u73EE\u73DE\u74A2\u7405\u746F\u7425\u73F8\u7432\u743A\u7455\u743F\u745F\u7459\u7441\u745C\u7469\u7470\u7463\u746A\u7476\u747E\u748B\u749E\u74A7\u74CA\u74CF\u74D4\u73F1"],
    ["e140", "\u74E0\u74E3\u74E7\u74E9\u74EE\u74F2\u74F0\u74F1\u74F8\u74F7\u7504\u7503\u7505\u750C\u750E\u750D\u7515\u7513\u751E\u7526\u752C\u753C\u7544\u754D\u754A\u7549\u755B\u7546\u755A\u7569\u7564\u7567\u756B\u756D\u7578\u7576\u7586\u7587\u7574\u758A\u7589\u7582\u7594\u759A\u759D\u75A5\u75A3\u75C2\u75B3\u75C3\u75B5\u75BD\u75B8\u75BC\u75B1\u75CD\u75CA\u75D2\u75D9\u75E3\u75DE\u75FE\u75FF"],
    ["e180", "\u75FC\u7601\u75F0\u75FA\u75F2\u75F3\u760B\u760D\u7609\u761F\u7627\u7620\u7621\u7622\u7624\u7634\u7630\u763B\u7647\u7648\u7646\u765C\u7658\u7661\u7662\u7668\u7669\u766A\u7667\u766C\u7670\u7672\u7676\u7678\u767C\u7680\u7683\u7688\u768B\u768E\u7696\u7693\u7699\u769A\u76B0\u76B4\u76B8\u76B9\u76BA\u76C2\u76CD\u76D6\u76D2\u76DE\u76E1\u76E5\u76E7\u76EA\u862F\u76FB\u7708\u7707\u7704\u7729\u7724\u771E\u7725\u7726\u771B\u7737\u7738\u7747\u775A\u7768\u776B\u775B\u7765\u777F\u777E\u7779\u778E\u778B\u7791\u77A0\u779E\u77B0\u77B6\u77B9\u77BF\u77BC\u77BD\u77BB\u77C7\u77CD\u77D7\u77DA\u77DC\u77E3\u77EE\u77FC\u780C\u7812\u7926\u7820\u792A\u7845\u788E\u7874\u7886\u787C\u789A\u788C\u78A3\u78B5\u78AA\u78AF\u78D1\u78C6\u78CB\u78D4\u78BE\u78BC\u78C5\u78CA\u78EC"],
    ["e240", "\u78E7\u78DA\u78FD\u78F4\u7907\u7912\u7911\u7919\u792C\u792B\u7940\u7960\u7957\u795F\u795A\u7955\u7953\u797A\u797F\u798A\u799D\u79A7\u9F4B\u79AA\u79AE\u79B3\u79B9\u79BA\u79C9\u79D5\u79E7\u79EC\u79E1\u79E3\u7A08\u7A0D\u7A18\u7A19\u7A20\u7A1F\u7980\u7A31\u7A3B\u7A3E\u7A37\u7A43\u7A57\u7A49\u7A61\u7A62\u7A69\u9F9D\u7A70\u7A79\u7A7D\u7A88\u7A97\u7A95\u7A98\u7A96\u7AA9\u7AC8\u7AB0"],
    ["e280", "\u7AB6\u7AC5\u7AC4\u7ABF\u9083\u7AC7\u7ACA\u7ACD\u7ACF\u7AD5\u7AD3\u7AD9\u7ADA\u7ADD\u7AE1\u7AE2\u7AE6\u7AED\u7AF0\u7B02\u7B0F\u7B0A\u7B06\u7B33\u7B18\u7B19\u7B1E\u7B35\u7B28\u7B36\u7B50\u7B7A\u7B04\u7B4D\u7B0B\u7B4C\u7B45\u7B75\u7B65\u7B74\u7B67\u7B70\u7B71\u7B6C\u7B6E\u7B9D\u7B98\u7B9F\u7B8D\u7B9C\u7B9A\u7B8B\u7B92\u7B8F\u7B5D\u7B99\u7BCB\u7BC1\u7BCC\u7BCF\u7BB4\u7BC6\u7BDD\u7BE9\u7C11\u7C14\u7BE6\u7BE5\u7C60\u7C00\u7C07\u7C13\u7BF3\u7BF7\u7C17\u7C0D\u7BF6\u7C23\u7C27\u7C2A\u7C1F\u7C37\u7C2B\u7C3D\u7C4C\u7C43\u7C54\u7C4F\u7C40\u7C50\u7C58\u7C5F\u7C64\u7C56\u7C65\u7C6C\u7C75\u7C83\u7C90\u7CA4\u7CAD\u7CA2\u7CAB\u7CA1\u7CA8\u7CB3\u7CB2\u7CB1\u7CAE\u7CB9\u7CBD\u7CC0\u7CC5\u7CC2\u7CD8\u7CD2\u7CDC\u7CE2\u9B3B\u7CEF\u7CF2\u7CF4\u7CF6\u7CFA\u7D06"],
    ["e340", "\u7D02\u7D1C\u7D15\u7D0A\u7D45\u7D4B\u7D2E\u7D32\u7D3F\u7D35\u7D46\u7D73\u7D56\u7D4E\u7D72\u7D68\u7D6E\u7D4F\u7D63\u7D93\u7D89\u7D5B\u7D8F\u7D7D\u7D9B\u7DBA\u7DAE\u7DA3\u7DB5\u7DC7\u7DBD\u7DAB\u7E3D\u7DA2\u7DAF\u7DDC\u7DB8\u7D9F\u7DB0\u7DD8\u7DDD\u7DE4\u7DDE\u7DFB\u7DF2\u7DE1\u7E05\u7E0A\u7E23\u7E21\u7E12\u7E31\u7E1F\u7E09\u7E0B\u7E22\u7E46\u7E66\u7E3B\u7E35\u7E39\u7E43\u7E37"],
    ["e380", "\u7E32\u7E3A\u7E67\u7E5D\u7E56\u7E5E\u7E59\u7E5A\u7E79\u7E6A\u7E69\u7E7C\u7E7B\u7E83\u7DD5\u7E7D\u8FAE\u7E7F\u7E88\u7E89\u7E8C\u7E92\u7E90\u7E93\u7E94\u7E96\u7E8E\u7E9B\u7E9C\u7F38\u7F3A\u7F45\u7F4C\u7F4D\u7F4E\u7F50\u7F51\u7F55\u7F54\u7F58\u7F5F\u7F60\u7F68\u7F69\u7F67\u7F78\u7F82\u7F86\u7F83\u7F88\u7F87\u7F8C\u7F94\u7F9E\u7F9D\u7F9A\u7FA3\u7FAF\u7FB2\u7FB9\u7FAE\u7FB6\u7FB8\u8B71\u7FC5\u7FC6\u7FCA\u7FD5\u7FD4\u7FE1\u7FE6\u7FE9\u7FF3\u7FF9\u98DC\u8006\u8004\u800B\u8012\u8018\u8019\u801C\u8021\u8028\u803F\u803B\u804A\u8046\u8052\u8058\u805A\u805F\u8062\u8068\u8073\u8072\u8070\u8076\u8079\u807D\u807F\u8084\u8086\u8085\u809B\u8093\u809A\u80AD\u5190\u80AC\u80DB\u80E5\u80D9\u80DD\u80C4\u80DA\u80D6\u8109\u80EF\u80F1\u811B\u8129\u8123\u812F\u814B"],
    ["e440", "\u968B\u8146\u813E\u8153\u8151\u80FC\u8171\u816E\u8165\u8166\u8174\u8183\u8188\u818A\u8180\u8182\u81A0\u8195\u81A4\u81A3\u815F\u8193\u81A9\u81B0\u81B5\u81BE\u81B8\u81BD\u81C0\u81C2\u81BA\u81C9\u81CD\u81D1\u81D9\u81D8\u81C8\u81DA\u81DF\u81E0\u81E7\u81FA\u81FB\u81FE\u8201\u8202\u8205\u8207\u820A\u820D\u8210\u8216\u8229\u822B\u8238\u8233\u8240\u8259\u8258\u825D\u825A\u825F\u8264"],
    ["e480", "\u8262\u8268\u826A\u826B\u822E\u8271\u8277\u8278\u827E\u828D\u8292\u82AB\u829F\u82BB\u82AC\u82E1\u82E3\u82DF\u82D2\u82F4\u82F3\u82FA\u8393\u8303\u82FB\u82F9\u82DE\u8306\u82DC\u8309\u82D9\u8335\u8334\u8316\u8332\u8331\u8340\u8339\u8350\u8345\u832F\u832B\u8317\u8318\u8385\u839A\u83AA\u839F\u83A2\u8396\u8323\u838E\u8387\u838A\u837C\u83B5\u8373\u8375\u83A0\u8389\u83A8\u83F4\u8413\u83EB\u83CE\u83FD\u8403\u83D8\u840B\u83C1\u83F7\u8407\u83E0\u83F2\u840D\u8422\u8420\u83BD\u8438\u8506\u83FB\u846D\u842A\u843C\u855A\u8484\u8477\u846B\u84AD\u846E\u8482\u8469\u8446\u842C\u846F\u8479\u8435\u84CA\u8462\u84B9\u84BF\u849F\u84D9\u84CD\u84BB\u84DA\u84D0\u84C1\u84C6\u84D6\u84A1\u8521\u84FF\u84F4\u8517\u8518\u852C\u851F\u8515\u8514\u84FC\u8540\u8563\u8558\u8548"],
    ["e540", "\u8541\u8602\u854B\u8555\u8580\u85A4\u8588\u8591\u858A\u85A8\u856D\u8594\u859B\u85EA\u8587\u859C\u8577\u857E\u8590\u85C9\u85BA\u85CF\u85B9\u85D0\u85D5\u85DD\u85E5\u85DC\u85F9\u860A\u8613\u860B\u85FE\u85FA\u8606\u8622\u861A\u8630\u863F\u864D\u4E55\u8654\u865F\u8667\u8671\u8693\u86A3\u86A9\u86AA\u868B\u868C\u86B6\u86AF\u86C4\u86C6\u86B0\u86C9\u8823\u86AB\u86D4\u86DE\u86E9\u86EC"],
    ["e580", "\u86DF\u86DB\u86EF\u8712\u8706\u8708\u8700\u8703\u86FB\u8711\u8709\u870D\u86F9\u870A\u8734\u873F\u8737\u873B\u8725\u8729\u871A\u8760\u875F\u8778\u874C\u874E\u8774\u8757\u8768\u876E\u8759\u8753\u8763\u876A\u8805\u87A2\u879F\u8782\u87AF\u87CB\u87BD\u87C0\u87D0\u96D6\u87AB\u87C4\u87B3\u87C7\u87C6\u87BB\u87EF\u87F2\u87E0\u880F\u880D\u87FE\u87F6\u87F7\u880E\u87D2\u8811\u8816\u8815\u8822\u8821\u8831\u8836\u8839\u8827\u883B\u8844\u8842\u8852\u8859\u885E\u8862\u886B\u8881\u887E\u889E\u8875\u887D\u88B5\u8872\u8882\u8897\u8892\u88AE\u8899\u88A2\u888D\u88A4\u88B0\u88BF\u88B1\u88C3\u88C4\u88D4\u88D8\u88D9\u88DD\u88F9\u8902\u88FC\u88F4\u88E8\u88F2\u8904\u890C\u890A\u8913\u8943\u891E\u8925\u892A\u892B\u8941\u8944\u893B\u8936\u8938\u894C\u891D\u8960\u895E"],
    ["e640", "\u8966\u8964\u896D\u896A\u896F\u8974\u8977\u897E\u8983\u8988\u898A\u8993\u8998\u89A1\u89A9\u89A6\u89AC\u89AF\u89B2\u89BA\u89BD\u89BF\u89C0\u89DA\u89DC\u89DD\u89E7\u89F4\u89F8\u8A03\u8A16\u8A10\u8A0C\u8A1B\u8A1D\u8A25\u8A36\u8A41\u8A5B\u8A52\u8A46\u8A48\u8A7C\u8A6D\u8A6C\u8A62\u8A85\u8A82\u8A84\u8AA8\u8AA1\u8A91\u8AA5\u8AA6\u8A9A\u8AA3\u8AC4\u8ACD\u8AC2\u8ADA\u8AEB\u8AF3\u8AE7"],
    ["e680", "\u8AE4\u8AF1\u8B14\u8AE0\u8AE2\u8AF7\u8ADE\u8ADB\u8B0C\u8B07\u8B1A\u8AE1\u8B16\u8B10\u8B17\u8B20\u8B33\u97AB\u8B26\u8B2B\u8B3E\u8B28\u8B41\u8B4C\u8B4F\u8B4E\u8B49\u8B56\u8B5B\u8B5A\u8B6B\u8B5F\u8B6C\u8B6F\u8B74\u8B7D\u8B80\u8B8C\u8B8E\u8B92\u8B93\u8B96\u8B99\u8B9A\u8C3A\u8C41\u8C3F\u8C48\u8C4C\u8C4E\u8C50\u8C55\u8C62\u8C6C\u8C78\u8C7A\u8C82\u8C89\u8C85\u8C8A\u8C8D\u8C8E\u8C94\u8C7C\u8C98\u621D\u8CAD\u8CAA\u8CBD\u8CB2\u8CB3\u8CAE\u8CB6\u8CC8\u8CC1\u8CE4\u8CE3\u8CDA\u8CFD\u8CFA\u8CFB\u8D04\u8D05\u8D0A\u8D07\u8D0F\u8D0D\u8D10\u9F4E\u8D13\u8CCD\u8D14\u8D16\u8D67\u8D6D\u8D71\u8D73\u8D81\u8D99\u8DC2\u8DBE\u8DBA\u8DCF\u8DDA\u8DD6\u8DCC\u8DDB\u8DCB\u8DEA\u8DEB\u8DDF\u8DE3\u8DFC\u8E08\u8E09\u8DFF\u8E1D\u8E1E\u8E10\u8E1F\u8E42\u8E35\u8E30\u8E34\u8E4A"],
    ["e740", "\u8E47\u8E49\u8E4C\u8E50\u8E48\u8E59\u8E64\u8E60\u8E2A\u8E63\u8E55\u8E76\u8E72\u8E7C\u8E81\u8E87\u8E85\u8E84\u8E8B\u8E8A\u8E93\u8E91\u8E94\u8E99\u8EAA\u8EA1\u8EAC\u8EB0\u8EC6\u8EB1\u8EBE\u8EC5\u8EC8\u8ECB\u8EDB\u8EE3\u8EFC\u8EFB\u8EEB\u8EFE\u8F0A\u8F05\u8F15\u8F12\u8F19\u8F13\u8F1C\u8F1F\u8F1B\u8F0C\u8F26\u8F33\u8F3B\u8F39\u8F45\u8F42\u8F3E\u8F4C\u8F49\u8F46\u8F4E\u8F57\u8F5C"],
    ["e780", "\u8F62\u8F63\u8F64\u8F9C\u8F9F\u8FA3\u8FAD\u8FAF\u8FB7\u8FDA\u8FE5\u8FE2\u8FEA\u8FEF\u9087\u8FF4\u9005\u8FF9\u8FFA\u9011\u9015\u9021\u900D\u901E\u9016\u900B\u9027\u9036\u9035\u9039\u8FF8\u904F\u9050\u9051\u9052\u900E\u9049\u903E\u9056\u9058\u905E\u9068\u906F\u9076\u96A8\u9072\u9082\u907D\u9081\u9080\u908A\u9089\u908F\u90A8\u90AF\u90B1\u90B5\u90E2\u90E4\u6248\u90DB\u9102\u9112\u9119\u9132\u9130\u914A\u9156\u9158\u9163\u9165\u9169\u9173\u9172\u918B\u9189\u9182\u91A2\u91AB\u91AF\u91AA\u91B5\u91B4\u91BA\u91C0\u91C1\u91C9\u91CB\u91D0\u91D6\u91DF\u91E1\u91DB\u91FC\u91F5\u91F6\u921E\u91FF\u9214\u922C\u9215\u9211\u925E\u9257\u9245\u9249\u9264\u9248\u9295\u923F\u924B\u9250\u929C\u9296\u9293\u929B\u925A\u92CF\u92B9\u92B7\u92E9\u930F\u92FA\u9344\u932E"],
    ["e840", "\u9319\u9322\u931A\u9323\u933A\u9335\u933B\u935C\u9360\u937C\u936E\u9356\u93B0\u93AC\u93AD\u9394\u93B9\u93D6\u93D7\u93E8\u93E5\u93D8\u93C3\u93DD\u93D0\u93C8\u93E4\u941A\u9414\u9413\u9403\u9407\u9410\u9436\u942B\u9435\u9421\u943A\u9441\u9452\u9444\u945B\u9460\u9462\u945E\u946A\u9229\u9470\u9475\u9477\u947D\u945A\u947C\u947E\u9481\u947F\u9582\u9587\u958A\u9594\u9596\u9598\u9599"],
    ["e880", "\u95A0\u95A8\u95A7\u95AD\u95BC\u95BB\u95B9\u95BE\u95CA\u6FF6\u95C3\u95CD\u95CC\u95D5\u95D4\u95D6\u95DC\u95E1\u95E5\u95E2\u9621\u9628\u962E\u962F\u9642\u964C\u964F\u964B\u9677\u965C\u965E\u965D\u965F\u9666\u9672\u966C\u968D\u9698\u9695\u9697\u96AA\u96A7\u96B1\u96B2\u96B0\u96B4\u96B6\u96B8\u96B9\u96CE\u96CB\u96C9\u96CD\u894D\u96DC\u970D\u96D5\u96F9\u9704\u9706\u9708\u9713\u970E\u9711\u970F\u9716\u9719\u9724\u972A\u9730\u9739\u973D\u973E\u9744\u9746\u9748\u9742\u9749\u975C\u9760\u9764\u9766\u9768\u52D2\u976B\u9771\u9779\u9785\u977C\u9781\u977A\u9786\u978B\u978F\u9790\u979C\u97A8\u97A6\u97A3\u97B3\u97B4\u97C3\u97C6\u97C8\u97CB\u97DC\u97ED\u9F4F\u97F2\u7ADF\u97F6\u97F5\u980F\u980C\u9838\u9824\u9821\u9837\u983D\u9846\u984F\u984B\u986B\u986F\u9870"],
    ["e940", "\u9871\u9874\u9873\u98AA\u98AF\u98B1\u98B6\u98C4\u98C3\u98C6\u98E9\u98EB\u9903\u9909\u9912\u9914\u9918\u9921\u991D\u991E\u9924\u9920\u992C\u992E\u993D\u993E\u9942\u9949\u9945\u9950\u994B\u9951\u9952\u994C\u9955\u9997\u9998\u99A5\u99AD\u99AE\u99BC\u99DF\u99DB\u99DD\u99D8\u99D1\u99ED\u99EE\u99F1\u99F2\u99FB\u99F8\u9A01\u9A0F\u9A05\u99E2\u9A19\u9A2B\u9A37\u9A45\u9A42\u9A40\u9A43"],
    ["e980", "\u9A3E\u9A55\u9A4D\u9A5B\u9A57\u9A5F\u9A62\u9A65\u9A64\u9A69\u9A6B\u9A6A\u9AAD\u9AB0\u9ABC\u9AC0\u9ACF\u9AD1\u9AD3\u9AD4\u9ADE\u9ADF\u9AE2\u9AE3\u9AE6\u9AEF\u9AEB\u9AEE\u9AF4\u9AF1\u9AF7\u9AFB\u9B06\u9B18\u9B1A\u9B1F\u9B22\u9B23\u9B25\u9B27\u9B28\u9B29\u9B2A\u9B2E\u9B2F\u9B32\u9B44\u9B43\u9B4F\u9B4D\u9B4E\u9B51\u9B58\u9B74\u9B93\u9B83\u9B91\u9B96\u9B97\u9B9F\u9BA0\u9BA8\u9BB4\u9BC0\u9BCA\u9BB9\u9BC6\u9BCF\u9BD1\u9BD2\u9BE3\u9BE2\u9BE4\u9BD4\u9BE1\u9C3A\u9BF2\u9BF1\u9BF0\u9C15\u9C14\u9C09\u9C13\u9C0C\u9C06\u9C08\u9C12\u9C0A\u9C04\u9C2E\u9C1B\u9C25\u9C24\u9C21\u9C30\u9C47\u9C32\u9C46\u9C3E\u9C5A\u9C60\u9C67\u9C76\u9C78\u9CE7\u9CEC\u9CF0\u9D09\u9D08\u9CEB\u9D03\u9D06\u9D2A\u9D26\u9DAF\u9D23\u9D1F\u9D44\u9D15\u9D12\u9D41\u9D3F\u9D3E\u9D46\u9D48"],
    ["ea40", "\u9D5D\u9D5E\u9D64\u9D51\u9D50\u9D59\u9D72\u9D89\u9D87\u9DAB\u9D6F\u9D7A\u9D9A\u9DA4\u9DA9\u9DB2\u9DC4\u9DC1\u9DBB\u9DB8\u9DBA\u9DC6\u9DCF\u9DC2\u9DD9\u9DD3\u9DF8\u9DE6\u9DED\u9DEF\u9DFD\u9E1A\u9E1B\u9E1E\u9E75\u9E79\u9E7D\u9E81\u9E88\u9E8B\u9E8C\u9E92\u9E95\u9E91\u9E9D\u9EA5\u9EA9\u9EB8\u9EAA\u9EAD\u9761\u9ECC\u9ECE\u9ECF\u9ED0\u9ED4\u9EDC\u9EDE\u9EDD\u9EE0\u9EE5\u9EE8\u9EEF"],
    ["ea80", "\u9EF4\u9EF6\u9EF7\u9EF9\u9EFB\u9EFC\u9EFD\u9F07\u9F08\u76B7\u9F15\u9F21\u9F2C\u9F3E\u9F4A\u9F52\u9F54\u9F63\u9F5F\u9F60\u9F61\u9F66\u9F67\u9F6C\u9F6A\u9F77\u9F72\u9F76\u9F95\u9F9C\u9FA0\u582F\u69C7\u9059\u7464\u51DC\u7199"],
    ["ed40", "\u7E8A\u891C\u9348\u9288\u84DC\u4FC9\u70BB\u6631\u68C8\u92F9\u66FB\u5F45\u4E28\u4EE1\u4EFC\u4F00\u4F03\u4F39\u4F56\u4F92\u4F8A\u4F9A\u4F94\u4FCD\u5040\u5022\u4FFF\u501E\u5046\u5070\u5042\u5094\u50F4\u50D8\u514A\u5164\u519D\u51BE\u51EC\u5215\u529C\u52A6\u52C0\u52DB\u5300\u5307\u5324\u5372\u5393\u53B2\u53DD\uFA0E\u549C\u548A\u54A9\u54FF\u5586\u5759\u5765\u57AC\u57C8\u57C7\uFA0F"],
    ["ed80", "\uFA10\u589E\u58B2\u590B\u5953\u595B\u595D\u5963\u59A4\u59BA\u5B56\u5BC0\u752F\u5BD8\u5BEC\u5C1E\u5CA6\u5CBA\u5CF5\u5D27\u5D53\uFA11\u5D42\u5D6D\u5DB8\u5DB9\u5DD0\u5F21\u5F34\u5F67\u5FB7\u5FDE\u605D\u6085\u608A\u60DE\u60D5\u6120\u60F2\u6111\u6137\u6130\u6198\u6213\u62A6\u63F5\u6460\u649D\u64CE\u654E\u6600\u6615\u663B\u6609\u662E\u661E\u6624\u6665\u6657\u6659\uFA12\u6673\u6699\u66A0\u66B2\u66BF\u66FA\u670E\uF929\u6766\u67BB\u6852\u67C0\u6801\u6844\u68CF\uFA13\u6968\uFA14\u6998\u69E2\u6A30\u6A6B\u6A46\u6A73\u6A7E\u6AE2\u6AE4\u6BD6\u6C3F\u6C5C\u6C86\u6C6F\u6CDA\u6D04\u6D87\u6D6F\u6D96\u6DAC\u6DCF\u6DF8\u6DF2\u6DFC\u6E39\u6E5C\u6E27\u6E3C\u6EBF\u6F88\u6FB5\u6FF5\u7005\u7007\u7028\u7085\u70AB\u710F\u7104\u715C\u7146\u7147\uFA15\u71C1\u71FE\u72B1"],
    ["ee40", "\u72BE\u7324\uFA16\u7377\u73BD\u73C9\u73D6\u73E3\u73D2\u7407\u73F5\u7426\u742A\u7429\u742E\u7462\u7489\u749F\u7501\u756F\u7682\u769C\u769E\u769B\u76A6\uFA17\u7746\u52AF\u7821\u784E\u7864\u787A\u7930\uFA18\uFA19\uFA1A\u7994\uFA1B\u799B\u7AD1\u7AE7\uFA1C\u7AEB\u7B9E\uFA1D\u7D48\u7D5C\u7DB7\u7DA0\u7DD6\u7E52\u7F47\u7FA1\uFA1E\u8301\u8362\u837F\u83C7\u83F6\u8448\u84B4\u8553\u8559"],
    ["ee80", "\u856B\uFA1F\u85B0\uFA20\uFA21\u8807\u88F5\u8A12\u8A37\u8A79\u8AA7\u8ABE\u8ADF\uFA22\u8AF6\u8B53\u8B7F\u8CF0\u8CF4\u8D12\u8D76\uFA23\u8ECF\uFA24\uFA25\u9067\u90DE\uFA26\u9115\u9127\u91DA\u91D7\u91DE\u91ED\u91EE\u91E4\u91E5\u9206\u9210\u920A\u923A\u9240\u923C\u924E\u9259\u9251\u9239\u9267\u92A7\u9277\u9278\u92E7\u92D7\u92D9\u92D0\uFA27\u92D5\u92E0\u92D3\u9325\u9321\u92FB\uFA28\u931E\u92FF\u931D\u9302\u9370\u9357\u93A4\u93C6\u93DE\u93F8\u9431\u9445\u9448\u9592\uF9DC\uFA29\u969D\u96AF\u9733\u973B\u9743\u974D\u974F\u9751\u9755\u9857\u9865\uFA2A\uFA2B\u9927\uFA2C\u999E\u9A4E\u9AD9\u9ADC\u9B75\u9B72\u9B8F\u9BB1\u9BBB\u9C00\u9D70\u9D6B\uFA2D\u9E19\u9ED1"],
    ["eeef", "\u2170", 9, "\uFFE2\uFFE4\uFF07\uFF02"],
    ["f040", "\uE000", 62],
    ["f080", "\uE03F", 124],
    ["f140", "\uE0BC", 62],
    ["f180", "\uE0FB", 124],
    ["f240", "\uE178", 62],
    ["f280", "\uE1B7", 124],
    ["f340", "\uE234", 62],
    ["f380", "\uE273", 124],
    ["f440", "\uE2F0", 62],
    ["f480", "\uE32F", 124],
    ["f540", "\uE3AC", 62],
    ["f580", "\uE3EB", 124],
    ["f640", "\uE468", 62],
    ["f680", "\uE4A7", 124],
    ["f740", "\uE524", 62],
    ["f780", "\uE563", 124],
    ["f840", "\uE5E0", 62],
    ["f880", "\uE61F", 124],
    ["f940", "\uE69C"],
    ["fa40", "\u2170", 9, "\u2160", 9, "\uFFE2\uFFE4\uFF07\uFF02\u3231\u2116\u2121\u2235\u7E8A\u891C\u9348\u9288\u84DC\u4FC9\u70BB\u6631\u68C8\u92F9\u66FB\u5F45\u4E28\u4EE1\u4EFC\u4F00\u4F03\u4F39\u4F56\u4F92\u4F8A\u4F9A\u4F94\u4FCD\u5040\u5022\u4FFF\u501E\u5046\u5070\u5042\u5094\u50F4\u50D8\u514A"],
    ["fa80", "\u5164\u519D\u51BE\u51EC\u5215\u529C\u52A6\u52C0\u52DB\u5300\u5307\u5324\u5372\u5393\u53B2\u53DD\uFA0E\u549C\u548A\u54A9\u54FF\u5586\u5759\u5765\u57AC\u57C8\u57C7\uFA0F\uFA10\u589E\u58B2\u590B\u5953\u595B\u595D\u5963\u59A4\u59BA\u5B56\u5BC0\u752F\u5BD8\u5BEC\u5C1E\u5CA6\u5CBA\u5CF5\u5D27\u5D53\uFA11\u5D42\u5D6D\u5DB8\u5DB9\u5DD0\u5F21\u5F34\u5F67\u5FB7\u5FDE\u605D\u6085\u608A\u60DE\u60D5\u6120\u60F2\u6111\u6137\u6130\u6198\u6213\u62A6\u63F5\u6460\u649D\u64CE\u654E\u6600\u6615\u663B\u6609\u662E\u661E\u6624\u6665\u6657\u6659\uFA12\u6673\u6699\u66A0\u66B2\u66BF\u66FA\u670E\uF929\u6766\u67BB\u6852\u67C0\u6801\u6844\u68CF\uFA13\u6968\uFA14\u6998\u69E2\u6A30\u6A6B\u6A46\u6A73\u6A7E\u6AE2\u6AE4\u6BD6\u6C3F\u6C5C\u6C86\u6C6F\u6CDA\u6D04\u6D87\u6D6F"],
    ["fb40", "\u6D96\u6DAC\u6DCF\u6DF8\u6DF2\u6DFC\u6E39\u6E5C\u6E27\u6E3C\u6EBF\u6F88\u6FB5\u6FF5\u7005\u7007\u7028\u7085\u70AB\u710F\u7104\u715C\u7146\u7147\uFA15\u71C1\u71FE\u72B1\u72BE\u7324\uFA16\u7377\u73BD\u73C9\u73D6\u73E3\u73D2\u7407\u73F5\u7426\u742A\u7429\u742E\u7462\u7489\u749F\u7501\u756F\u7682\u769C\u769E\u769B\u76A6\uFA17\u7746\u52AF\u7821\u784E\u7864\u787A\u7930\uFA18\uFA19"],
    ["fb80", "\uFA1A\u7994\uFA1B\u799B\u7AD1\u7AE7\uFA1C\u7AEB\u7B9E\uFA1D\u7D48\u7D5C\u7DB7\u7DA0\u7DD6\u7E52\u7F47\u7FA1\uFA1E\u8301\u8362\u837F\u83C7\u83F6\u8448\u84B4\u8553\u8559\u856B\uFA1F\u85B0\uFA20\uFA21\u8807\u88F5\u8A12\u8A37\u8A79\u8AA7\u8ABE\u8ADF\uFA22\u8AF6\u8B53\u8B7F\u8CF0\u8CF4\u8D12\u8D76\uFA23\u8ECF\uFA24\uFA25\u9067\u90DE\uFA26\u9115\u9127\u91DA\u91D7\u91DE\u91ED\u91EE\u91E4\u91E5\u9206\u9210\u920A\u923A\u9240\u923C\u924E\u9259\u9251\u9239\u9267\u92A7\u9277\u9278\u92E7\u92D7\u92D9\u92D0\uFA27\u92D5\u92E0\u92D3\u9325\u9321\u92FB\uFA28\u931E\u92FF\u931D\u9302\u9370\u9357\u93A4\u93C6\u93DE\u93F8\u9431\u9445\u9448\u9592\uF9DC\uFA29\u969D\u96AF\u9733\u973B\u9743\u974D\u974F\u9751\u9755\u9857\u9865\uFA2A\uFA2B\u9927\uFA2C\u999E\u9A4E\u9AD9"],
    ["fc40", "\u9ADC\u9B75\u9B72\u9B8F\u9BB1\u9BBB\u9C00\u9D70\u9D6B\uFA2D\u9E19\u9ED1"]
  ];
});

// node_modules/iconv-lite/encodings/tables/eucjp.json
var require_eucjp = __commonJS((exports, module) => {
  module.exports = [
    ["0", "\0", 127],
    ["8ea1", "\uFF61", 62],
    ["a1a1", "\u3000\u3001\u3002\uFF0C\uFF0E\u30FB\uFF1A\uFF1B\uFF1F\uFF01\u309B\u309C\xB4\uFF40\xA8\uFF3E\uFFE3\uFF3F\u30FD\u30FE\u309D\u309E\u3003\u4EDD\u3005\u3006\u3007\u30FC\u2015\u2010\uFF0F\uFF3C\uFF5E\u2225\uFF5C\u2026\u2025\u2018\u2019\u201C\u201D\uFF08\uFF09\u3014\u3015\uFF3B\uFF3D\uFF5B\uFF5D\u3008", 9, "\uFF0B\uFF0D\xB1\xD7\xF7\uFF1D\u2260\uFF1C\uFF1E\u2266\u2267\u221E\u2234\u2642\u2640\xB0\u2032\u2033\u2103\uFFE5\uFF04\uFFE0\uFFE1\uFF05\uFF03\uFF06\uFF0A\uFF20\xA7\u2606\u2605\u25CB\u25CF\u25CE\u25C7"],
    ["a2a1", "\u25C6\u25A1\u25A0\u25B3\u25B2\u25BD\u25BC\u203B\u3012\u2192\u2190\u2191\u2193\u3013"],
    ["a2ba", "\u2208\u220B\u2286\u2287\u2282\u2283\u222A\u2229"],
    ["a2ca", "\u2227\u2228\uFFE2\u21D2\u21D4\u2200\u2203"],
    ["a2dc", "\u2220\u22A5\u2312\u2202\u2207\u2261\u2252\u226A\u226B\u221A\u223D\u221D\u2235\u222B\u222C"],
    ["a2f2", "\u212B\u2030\u266F\u266D\u266A\u2020\u2021\xB6"],
    ["a2fe", "\u25EF"],
    ["a3b0", "\uFF10", 9],
    ["a3c1", "\uFF21", 25],
    ["a3e1", "\uFF41", 25],
    ["a4a1", "\u3041", 82],
    ["a5a1", "\u30A1", 85],
    ["a6a1", "\u0391", 16, "\u03A3", 6],
    ["a6c1", "\u03B1", 16, "\u03C3", 6],
    ["a7a1", "\u0410", 5, "\u0401\u0416", 25],
    ["a7d1", "\u0430", 5, "\u0451\u0436", 25],
    ["a8a1", "\u2500\u2502\u250C\u2510\u2518\u2514\u251C\u252C\u2524\u2534\u253C\u2501\u2503\u250F\u2513\u251B\u2517\u2523\u2533\u252B\u253B\u254B\u2520\u252F\u2528\u2537\u253F\u251D\u2530\u2525\u2538\u2542"],
    ["ada1", "\u2460", 19, "\u2160", 9],
    ["adc0", "\u3349\u3314\u3322\u334D\u3318\u3327\u3303\u3336\u3351\u3357\u330D\u3326\u3323\u332B\u334A\u333B\u339C\u339D\u339E\u338E\u338F\u33C4\u33A1"],
    ["addf", "\u337B\u301D\u301F\u2116\u33CD\u2121\u32A4", 4, "\u3231\u3232\u3239\u337E\u337D\u337C\u2252\u2261\u222B\u222E\u2211\u221A\u22A5\u2220\u221F\u22BF\u2235\u2229\u222A"],
    ["b0a1", "\u4E9C\u5516\u5A03\u963F\u54C0\u611B\u6328\u59F6\u9022\u8475\u831C\u7A50\u60AA\u63E1\u6E25\u65ED\u8466\u82A6\u9BF5\u6893\u5727\u65A1\u6271\u5B9B\u59D0\u867B\u98F4\u7D62\u7DBE\u9B8E\u6216\u7C9F\u88B7\u5B89\u5EB5\u6309\u6697\u6848\u95C7\u978D\u674F\u4EE5\u4F0A\u4F4D\u4F9D\u5049\u56F2\u5937\u59D4\u5A01\u5C09\u60DF\u610F\u6170\u6613\u6905\u70BA\u754F\u7570\u79FB\u7DAD\u7DEF\u80C3\u840E\u8863\u8B02\u9055\u907A\u533B\u4E95\u4EA5\u57DF\u80B2\u90C1\u78EF\u4E00\u58F1\u6EA2\u9038\u7A32\u8328\u828B\u9C2F\u5141\u5370\u54BD\u54E1\u56E0\u59FB\u5F15\u98F2\u6DEB\u80E4\u852D"],
    ["b1a1", "\u9662\u9670\u96A0\u97FB\u540B\u53F3\u5B87\u70CF\u7FBD\u8FC2\u96E8\u536F\u9D5C\u7ABA\u4E11\u7893\u81FC\u6E26\u5618\u5504\u6B1D\u851A\u9C3B\u59E5\u53A9\u6D66\u74DC\u958F\u5642\u4E91\u904B\u96F2\u834F\u990C\u53E1\u55B6\u5B30\u5F71\u6620\u66F3\u6804\u6C38\u6CF3\u6D29\u745B\u76C8\u7A4E\u9834\u82F1\u885B\u8A60\u92ED\u6DB2\u75AB\u76CA\u99C5\u60A6\u8B01\u8D8A\u95B2\u698E\u53AD\u5186\u5712\u5830\u5944\u5BB4\u5EF6\u6028\u63A9\u63F4\u6CBF\u6F14\u708E\u7114\u7159\u71D5\u733F\u7E01\u8276\u82D1\u8597\u9060\u925B\u9D1B\u5869\u65BC\u6C5A\u7525\u51F9\u592E\u5965\u5F80\u5FDC"],
    ["b2a1", "\u62BC\u65FA\u6A2A\u6B27\u6BB4\u738B\u7FC1\u8956\u9D2C\u9D0E\u9EC4\u5CA1\u6C96\u837B\u5104\u5C4B\u61B6\u81C6\u6876\u7261\u4E59\u4FFA\u5378\u6069\u6E29\u7A4F\u97F3\u4E0B\u5316\u4EEE\u4F55\u4F3D\u4FA1\u4F73\u52A0\u53EF\u5609\u590F\u5AC1\u5BB6\u5BE1\u79D1\u6687\u679C\u67B6\u6B4C\u6CB3\u706B\u73C2\u798D\u79BE\u7A3C\u7B87\u82B1\u82DB\u8304\u8377\u83EF\u83D3\u8766\u8AB2\u5629\u8CA8\u8FE6\u904E\u971E\u868A\u4FC4\u5CE8\u6211\u7259\u753B\u81E5\u82BD\u86FE\u8CC0\u96C5\u9913\u99D5\u4ECB\u4F1A\u89E3\u56DE\u584A\u58CA\u5EFB\u5FEB\u602A\u6094\u6062\u61D0\u6212\u62D0\u6539"],
    ["b3a1", "\u9B41\u6666\u68B0\u6D77\u7070\u754C\u7686\u7D75\u82A5\u87F9\u958B\u968E\u8C9D\u51F1\u52BE\u5916\u54B3\u5BB3\u5D16\u6168\u6982\u6DAF\u788D\u84CB\u8857\u8A72\u93A7\u9AB8\u6D6C\u99A8\u86D9\u57A3\u67FF\u86CE\u920E\u5283\u5687\u5404\u5ED3\u62E1\u64B9\u683C\u6838\u6BBB\u7372\u78BA\u7A6B\u899A\u89D2\u8D6B\u8F03\u90ED\u95A3\u9694\u9769\u5B66\u5CB3\u697D\u984D\u984E\u639B\u7B20\u6A2B\u6A7F\u68B6\u9C0D\u6F5F\u5272\u559D\u6070\u62EC\u6D3B\u6E07\u6ED1\u845B\u8910\u8F44\u4E14\u9C39\u53F6\u691B\u6A3A\u9784\u682A\u515C\u7AC3\u84B2\u91DC\u938C\u565B\u9D28\u6822\u8305\u8431"],
    ["b4a1", "\u7CA5\u5208\u82C5\u74E6\u4E7E\u4F83\u51A0\u5BD2\u520A\u52D8\u52E7\u5DFB\u559A\u582A\u59E6\u5B8C\u5B98\u5BDB\u5E72\u5E79\u60A3\u611F\u6163\u61BE\u63DB\u6562\u67D1\u6853\u68FA\u6B3E\u6B53\u6C57\u6F22\u6F97\u6F45\u74B0\u7518\u76E3\u770B\u7AFF\u7BA1\u7C21\u7DE9\u7F36\u7FF0\u809D\u8266\u839E\u89B3\u8ACC\u8CAB\u9084\u9451\u9593\u9591\u95A2\u9665\u97D3\u9928\u8218\u4E38\u542B\u5CB8\u5DCC\u73A9\u764C\u773C\u5CA9\u7FEB\u8D0B\u96C1\u9811\u9854\u9858\u4F01\u4F0E\u5371\u559C\u5668\u57FA\u5947\u5B09\u5BC4\u5C90\u5E0C\u5E7E\u5FCC\u63EE\u673A\u65D7\u65E2\u671F\u68CB\u68C4"],
    ["b5a1", "\u6A5F\u5E30\u6BC5\u6C17\u6C7D\u757F\u7948\u5B63\u7A00\u7D00\u5FBD\u898F\u8A18\u8CB4\u8D77\u8ECC\u8F1D\u98E2\u9A0E\u9B3C\u4E80\u507D\u5100\u5993\u5B9C\u622F\u6280\u64EC\u6B3A\u72A0\u7591\u7947\u7FA9\u87FB\u8ABC\u8B70\u63AC\u83CA\u97A0\u5409\u5403\u55AB\u6854\u6A58\u8A70\u7827\u6775\u9ECD\u5374\u5BA2\u811A\u8650\u9006\u4E18\u4E45\u4EC7\u4F11\u53CA\u5438\u5BAE\u5F13\u6025\u6551\u673D\u6C42\u6C72\u6CE3\u7078\u7403\u7A76\u7AAE\u7B08\u7D1A\u7CFE\u7D66\u65E7\u725B\u53BB\u5C45\u5DE8\u62D2\u62E0\u6319\u6E20\u865A\u8A31\u8DDD\u92F8\u6F01\u79A6\u9B5A\u4EA8\u4EAB\u4EAC"],
    ["b6a1", "\u4F9B\u4FA0\u50D1\u5147\u7AF6\u5171\u51F6\u5354\u5321\u537F\u53EB\u55AC\u5883\u5CE1\u5F37\u5F4A\u602F\u6050\u606D\u631F\u6559\u6A4B\u6CC1\u72C2\u72ED\u77EF\u80F8\u8105\u8208\u854E\u90F7\u93E1\u97FF\u9957\u9A5A\u4EF0\u51DD\u5C2D\u6681\u696D\u5C40\u66F2\u6975\u7389\u6850\u7C81\u50C5\u52E4\u5747\u5DFE\u9326\u65A4\u6B23\u6B3D\u7434\u7981\u79BD\u7B4B\u7DCA\u82B9\u83CC\u887F\u895F\u8B39\u8FD1\u91D1\u541F\u9280\u4E5D\u5036\u53E5\u533A\u72D7\u7396\u77E9\u82E6\u8EAF\u99C6\u99C8\u99D2\u5177\u611A\u865E\u55B0\u7A7A\u5076\u5BD3\u9047\u9685\u4E32\u6ADB\u91E7\u5C51\u5C48"],
    ["b7a1", "\u6398\u7A9F\u6C93\u9774\u8F61\u7AAA\u718A\u9688\u7C82\u6817\u7E70\u6851\u936C\u52F2\u541B\u85AB\u8A13\u7FA4\u8ECD\u90E1\u5366\u8888\u7941\u4FC2\u50BE\u5211\u5144\u5553\u572D\u73EA\u578B\u5951\u5F62\u5F84\u6075\u6176\u6167\u61A9\u63B2\u643A\u656C\u666F\u6842\u6E13\u7566\u7A3D\u7CFB\u7D4C\u7D99\u7E4B\u7F6B\u830E\u834A\u86CD\u8A08\u8A63\u8B66\u8EFD\u981A\u9D8F\u82B8\u8FCE\u9BE8\u5287\u621F\u6483\u6FC0\u9699\u6841\u5091\u6B20\u6C7A\u6F54\u7A74\u7D50\u8840\u8A23\u6708\u4EF6\u5039\u5026\u5065\u517C\u5238\u5263\u55A7\u570F\u5805\u5ACC\u5EFA\u61B2\u61F8\u62F3\u6372"],
    ["b8a1", "\u691C\u6A29\u727D\u72AC\u732E\u7814\u786F\u7D79\u770C\u80A9\u898B\u8B19\u8CE2\u8ED2\u9063\u9375\u967A\u9855\u9A13\u9E78\u5143\u539F\u53B3\u5E7B\u5F26\u6E1B\u6E90\u7384\u73FE\u7D43\u8237\u8A00\u8AFA\u9650\u4E4E\u500B\u53E4\u547C\u56FA\u59D1\u5B64\u5DF1\u5EAB\u5F27\u6238\u6545\u67AF\u6E56\u72D0\u7CCA\u88B4\u80A1\u80E1\u83F0\u864E\u8A87\u8DE8\u9237\u96C7\u9867\u9F13\u4E94\u4E92\u4F0D\u5348\u5449\u543E\u5A2F\u5F8C\u5FA1\u609F\u68A7\u6A8E\u745A\u7881\u8A9E\u8AA4\u8B77\u9190\u4E5E\u9BC9\u4EA4\u4F7C\u4FAF\u5019\u5016\u5149\u516C\u529F\u52B9\u52FE\u539A\u53E3\u5411"],
    ["b9a1", "\u540E\u5589\u5751\u57A2\u597D\u5B54\u5B5D\u5B8F\u5DE5\u5DE7\u5DF7\u5E78\u5E83\u5E9A\u5EB7\u5F18\u6052\u614C\u6297\u62D8\u63A7\u653B\u6602\u6643\u66F4\u676D\u6821\u6897\u69CB\u6C5F\u6D2A\u6D69\u6E2F\u6E9D\u7532\u7687\u786C\u7A3F\u7CE0\u7D05\u7D18\u7D5E\u7DB1\u8015\u8003\u80AF\u80B1\u8154\u818F\u822A\u8352\u884C\u8861\u8B1B\u8CA2\u8CFC\u90CA\u9175\u9271\u783F\u92FC\u95A4\u964D\u9805\u9999\u9AD8\u9D3B\u525B\u52AB\u53F7\u5408\u58D5\u62F7\u6FE0\u8C6A\u8F5F\u9EB9\u514B\u523B\u544A\u56FD\u7A40\u9177\u9D60\u9ED2\u7344\u6F09\u8170\u7511\u5FFD\u60DA\u9AA8\u72DB\u8FBC"],
    ["baa1", "\u6B64\u9803\u4ECA\u56F0\u5764\u58BE\u5A5A\u6068\u61C7\u660F\u6606\u6839\u68B1\u6DF7\u75D5\u7D3A\u826E\u9B42\u4E9B\u4F50\u53C9\u5506\u5D6F\u5DE6\u5DEE\u67FB\u6C99\u7473\u7802\u8A50\u9396\u88DF\u5750\u5EA7\u632B\u50B5\u50AC\u518D\u6700\u54C9\u585E\u59BB\u5BB0\u5F69\u624D\u63A1\u683D\u6B73\u6E08\u707D\u91C7\u7280\u7815\u7826\u796D\u658E\u7D30\u83DC\u88C1\u8F09\u969B\u5264\u5728\u6750\u7F6A\u8CA1\u51B4\u5742\u962A\u583A\u698A\u80B4\u54B2\u5D0E\u57FC\u7895\u9DFA\u4F5C\u524A\u548B\u643E\u6628\u6714\u67F5\u7A84\u7B56\u7D22\u932F\u685C\u9BAD\u7B39\u5319\u518A\u5237"],
    ["bba1", "\u5BDF\u62F6\u64AE\u64E6\u672D\u6BBA\u85A9\u96D1\u7690\u9BD6\u634C\u9306\u9BAB\u76BF\u6652\u4E09\u5098\u53C2\u5C71\u60E8\u6492\u6563\u685F\u71E6\u73CA\u7523\u7B97\u7E82\u8695\u8B83\u8CDB\u9178\u9910\u65AC\u66AB\u6B8B\u4ED5\u4ED4\u4F3A\u4F7F\u523A\u53F8\u53F2\u55E3\u56DB\u58EB\u59CB\u59C9\u59FF\u5B50\u5C4D\u5E02\u5E2B\u5FD7\u601D\u6307\u652F\u5B5C\u65AF\u65BD\u65E8\u679D\u6B62\u6B7B\u6C0F\u7345\u7949\u79C1\u7CF8\u7D19\u7D2B\u80A2\u8102\u81F3\u8996\u8A5E\u8A69\u8A66\u8A8C\u8AEE\u8CC7\u8CDC\u96CC\u98FC\u6B6F\u4E8B\u4F3C\u4F8D\u5150\u5B57\u5BFA\u6148\u6301\u6642"],
    ["bca1", "\u6B21\u6ECB\u6CBB\u723E\u74BD\u75D4\u78C1\u793A\u800C\u8033\u81EA\u8494\u8F9E\u6C50\u9E7F\u5F0F\u8B58\u9D2B\u7AFA\u8EF8\u5B8D\u96EB\u4E03\u53F1\u57F7\u5931\u5AC9\u5BA4\u6089\u6E7F\u6F06\u75BE\u8CEA\u5B9F\u8500\u7BE0\u5072\u67F4\u829D\u5C61\u854A\u7E1E\u820E\u5199\u5C04\u6368\u8D66\u659C\u716E\u793E\u7D17\u8005\u8B1D\u8ECA\u906E\u86C7\u90AA\u501F\u52FA\u5C3A\u6753\u707C\u7235\u914C\u91C8\u932B\u82E5\u5BC2\u5F31\u60F9\u4E3B\u53D6\u5B88\u624B\u6731\u6B8A\u72E9\u73E0\u7A2E\u816B\u8DA3\u9152\u9996\u5112\u53D7\u546A\u5BFF\u6388\u6A39\u7DAC\u9700\u56DA\u53CE\u5468"],
    ["bda1", "\u5B97\u5C31\u5DDE\u4FEE\u6101\u62FE\u6D32\u79C0\u79CB\u7D42\u7E4D\u7FD2\u81ED\u821F\u8490\u8846\u8972\u8B90\u8E74\u8F2F\u9031\u914B\u916C\u96C6\u919C\u4EC0\u4F4F\u5145\u5341\u5F93\u620E\u67D4\u6C41\u6E0B\u7363\u7E26\u91CD\u9283\u53D4\u5919\u5BBF\u6DD1\u795D\u7E2E\u7C9B\u587E\u719F\u51FA\u8853\u8FF0\u4FCA\u5CFB\u6625\u77AC\u7AE3\u821C\u99FF\u51C6\u5FAA\u65EC\u696F\u6B89\u6DF3\u6E96\u6F64\u76FE\u7D14\u5DE1\u9075\u9187\u9806\u51E6\u521D\u6240\u6691\u66D9\u6E1A\u5EB6\u7DD2\u7F72\u66F8\u85AF\u85F7\u8AF8\u52A9\u53D9\u5973\u5E8F\u5F90\u6055\u92E4\u9664\u50B7\u511F"],
    ["bea1", "\u52DD\u5320\u5347\u53EC\u54E8\u5546\u5531\u5617\u5968\u59BE\u5A3C\u5BB5\u5C06\u5C0F\u5C11\u5C1A\u5E84\u5E8A\u5EE0\u5F70\u627F\u6284\u62DB\u638C\u6377\u6607\u660C\u662D\u6676\u677E\u68A2\u6A1F\u6A35\u6CBC\u6D88\u6E09\u6E58\u713C\u7126\u7167\u75C7\u7701\u785D\u7901\u7965\u79F0\u7AE0\u7B11\u7CA7\u7D39\u8096\u83D6\u848B\u8549\u885D\u88F3\u8A1F\u8A3C\u8A54\u8A73\u8C61\u8CDE\u91A4\u9266\u937E\u9418\u969C\u9798\u4E0A\u4E08\u4E1E\u4E57\u5197\u5270\u57CE\u5834\u58CC\u5B22\u5E38\u60C5\u64FE\u6761\u6756\u6D44\u72B6\u7573\u7A63\u84B8\u8B72\u91B8\u9320\u5631\u57F4\u98FE"],
    ["bfa1", "\u62ED\u690D\u6B96\u71ED\u7E54\u8077\u8272\u89E6\u98DF\u8755\u8FB1\u5C3B\u4F38\u4FE1\u4FB5\u5507\u5A20\u5BDD\u5BE9\u5FC3\u614E\u632F\u65B0\u664B\u68EE\u699B\u6D78\u6DF1\u7533\u75B9\u771F\u795E\u79E6\u7D33\u81E3\u82AF\u85AA\u89AA\u8A3A\u8EAB\u8F9B\u9032\u91DD\u9707\u4EBA\u4EC1\u5203\u5875\u58EC\u5C0B\u751A\u5C3D\u814E\u8A0A\u8FC5\u9663\u976D\u7B25\u8ACF\u9808\u9162\u56F3\u53A8\u9017\u5439\u5782\u5E25\u63A8\u6C34\u708A\u7761\u7C8B\u7FE0\u8870\u9042\u9154\u9310\u9318\u968F\u745E\u9AC4\u5D07\u5D69\u6570\u67A2\u8DA8\u96DB\u636E\u6749\u6919\u83C5\u9817\u96C0\u88FE"],
    ["c0a1", "\u6F84\u647A\u5BF8\u4E16\u702C\u755D\u662F\u51C4\u5236\u52E2\u59D3\u5F81\u6027\u6210\u653F\u6574\u661F\u6674\u68F2\u6816\u6B63\u6E05\u7272\u751F\u76DB\u7CBE\u8056\u58F0\u88FD\u897F\u8AA0\u8A93\u8ACB\u901D\u9192\u9752\u9759\u6589\u7A0E\u8106\u96BB\u5E2D\u60DC\u621A\u65A5\u6614\u6790\u77F3\u7A4D\u7C4D\u7E3E\u810A\u8CAC\u8D64\u8DE1\u8E5F\u78A9\u5207\u62D9\u63A5\u6442\u6298\u8A2D\u7A83\u7BC0\u8AAC\u96EA\u7D76\u820C\u8749\u4ED9\u5148\u5343\u5360\u5BA3\u5C02\u5C16\u5DDD\u6226\u6247\u64B0\u6813\u6834\u6CC9\u6D45\u6D17\u67D3\u6F5C\u714E\u717D\u65CB\u7A7F\u7BAD\u7DDA"],
    ["c1a1", "\u7E4A\u7FA8\u817A\u821B\u8239\u85A6\u8A6E\u8CCE\u8DF5\u9078\u9077\u92AD\u9291\u9583\u9BAE\u524D\u5584\u6F38\u7136\u5168\u7985\u7E55\u81B3\u7CCE\u564C\u5851\u5CA8\u63AA\u66FE\u66FD\u695A\u72D9\u758F\u758E\u790E\u7956\u79DF\u7C97\u7D20\u7D44\u8607\u8A34\u963B\u9061\u9F20\u50E7\u5275\u53CC\u53E2\u5009\u55AA\u58EE\u594F\u723D\u5B8B\u5C64\u531D\u60E3\u60F3\u635C\u6383\u633F\u63BB\u64CD\u65E9\u66F9\u5DE3\u69CD\u69FD\u6F15\u71E5\u4E89\u75E9\u76F8\u7A93\u7CDF\u7DCF\u7D9C\u8061\u8349\u8358\u846C\u84BC\u85FB\u88C5\u8D70\u9001\u906D\u9397\u971C\u9A12\u50CF\u5897\u618E"],
    ["c2a1", "\u81D3\u8535\u8D08\u9020\u4FC3\u5074\u5247\u5373\u606F\u6349\u675F\u6E2C\u8DB3\u901F\u4FD7\u5C5E\u8CCA\u65CF\u7D9A\u5352\u8896\u5176\u63C3\u5B58\u5B6B\u5C0A\u640D\u6751\u905C\u4ED6\u591A\u592A\u6C70\u8A51\u553E\u5815\u59A5\u60F0\u6253\u67C1\u8235\u6955\u9640\u99C4\u9A28\u4F53\u5806\u5BFE\u8010\u5CB1\u5E2F\u5F85\u6020\u614B\u6234\u66FF\u6CF0\u6EDE\u80CE\u817F\u82D4\u888B\u8CB8\u9000\u902E\u968A\u9EDB\u9BDB\u4EE3\u53F0\u5927\u7B2C\u918D\u984C\u9DF9\u6EDD\u7027\u5353\u5544\u5B85\u6258\u629E\u62D3\u6CA2\u6FEF\u7422\u8A17\u9438\u6FC1\u8AFE\u8338\u51E7\u86F8\u53EA"],
    ["c3a1", "\u53E9\u4F46\u9054\u8FB0\u596A\u8131\u5DFD\u7AEA\u8FBF\u68DA\u8C37\u72F8\u9C48\u6A3D\u8AB0\u4E39\u5358\u5606\u5766\u62C5\u63A2\u65E6\u6B4E\u6DE1\u6E5B\u70AD\u77ED\u7AEF\u7BAA\u7DBB\u803D\u80C6\u86CB\u8A95\u935B\u56E3\u58C7\u5F3E\u65AD\u6696\u6A80\u6BB5\u7537\u8AC7\u5024\u77E5\u5730\u5F1B\u6065\u667A\u6C60\u75F4\u7A1A\u7F6E\u81F4\u8718\u9045\u99B3\u7BC9\u755C\u7AF9\u7B51\u84C4\u9010\u79E9\u7A92\u8336\u5AE1\u7740\u4E2D\u4EF2\u5B99\u5FE0\u62BD\u663C\u67F1\u6CE8\u866B\u8877\u8A3B\u914E\u92F3\u99D0\u6A17\u7026\u732A\u82E7\u8457\u8CAF\u4E01\u5146\u51CB\u558B\u5BF5"],
    ["c4a1", "\u5E16\u5E33\u5E81\u5F14\u5F35\u5F6B\u5FB4\u61F2\u6311\u66A2\u671D\u6F6E\u7252\u753A\u773A\u8074\u8139\u8178\u8776\u8ABF\u8ADC\u8D85\u8DF3\u929A\u9577\u9802\u9CE5\u52C5\u6357\u76F4\u6715\u6C88\u73CD\u8CC3\u93AE\u9673\u6D25\u589C\u690E\u69CC\u8FFD\u939A\u75DB\u901A\u585A\u6802\u63B4\u69FB\u4F43\u6F2C\u67D8\u8FBB\u8526\u7DB4\u9354\u693F\u6F70\u576A\u58F7\u5B2C\u7D2C\u722A\u540A\u91E3\u9DB4\u4EAD\u4F4E\u505C\u5075\u5243\u8C9E\u5448\u5824\u5B9A\u5E1D\u5E95\u5EAD\u5EF7\u5F1F\u608C\u62B5\u633A\u63D0\u68AF\u6C40\u7887\u798E\u7A0B\u7DE0\u8247\u8A02\u8AE6\u8E44\u9013"],
    ["c5a1", "\u90B8\u912D\u91D8\u9F0E\u6CE5\u6458\u64E2\u6575\u6EF4\u7684\u7B1B\u9069\u93D1\u6EBA\u54F2\u5FB9\u64A4\u8F4D\u8FED\u9244\u5178\u586B\u5929\u5C55\u5E97\u6DFB\u7E8F\u751C\u8CBC\u8EE2\u985B\u70B9\u4F1D\u6BBF\u6FB1\u7530\u96FB\u514E\u5410\u5835\u5857\u59AC\u5C60\u5F92\u6597\u675C\u6E21\u767B\u83DF\u8CED\u9014\u90FD\u934D\u7825\u783A\u52AA\u5EA6\u571F\u5974\u6012\u5012\u515A\u51AC\u51CD\u5200\u5510\u5854\u5858\u5957\u5B95\u5CF6\u5D8B\u60BC\u6295\u642D\u6771\u6843\u68BC\u68DF\u76D7\u6DD8\u6E6F\u6D9B\u706F\u71C8\u5F53\u75D8\u7977\u7B49\u7B54\u7B52\u7CD6\u7D71\u5230"],
    ["c6a1", "\u8463\u8569\u85E4\u8A0E\u8B04\u8C46\u8E0F\u9003\u900F\u9419\u9676\u982D\u9A30\u95D8\u50CD\u52D5\u540C\u5802\u5C0E\u61A7\u649E\u6D1E\u77B3\u7AE5\u80F4\u8404\u9053\u9285\u5CE0\u9D07\u533F\u5F97\u5FB3\u6D9C\u7279\u7763\u79BF\u7BE4\u6BD2\u72EC\u8AAD\u6803\u6A61\u51F8\u7A81\u6934\u5C4A\u9CF6\u82EB\u5BC5\u9149\u701E\u5678\u5C6F\u60C7\u6566\u6C8C\u8C5A\u9041\u9813\u5451\u66C7\u920D\u5948\u90A3\u5185\u4E4D\u51EA\u8599\u8B0E\u7058\u637A\u934B\u6962\u99B4\u7E04\u7577\u5357\u6960\u8EDF\u96E3\u6C5D\u4E8C\u5C3C\u5F10\u8FE9\u5302\u8CD1\u8089\u8679\u5EFF\u65E5\u4E73\u5165"],
    ["c7a1", "\u5982\u5C3F\u97EE\u4EFB\u598A\u5FCD\u8A8D\u6FE1\u79B0\u7962\u5BE7\u8471\u732B\u71B1\u5E74\u5FF5\u637B\u649A\u71C3\u7C98\u4E43\u5EFC\u4E4B\u57DC\u56A2\u60A9\u6FC3\u7D0D\u80FD\u8133\u81BF\u8FB2\u8997\u86A4\u5DF4\u628A\u64AD\u8987\u6777\u6CE2\u6D3E\u7436\u7834\u5A46\u7F75\u82AD\u99AC\u4FF3\u5EC3\u62DD\u6392\u6557\u676F\u76C3\u724C\u80CC\u80BA\u8F29\u914D\u500D\u57F9\u5A92\u6885\u6973\u7164\u72FD\u8CB7\u58F2\u8CE0\u966A\u9019\u877F\u79E4\u77E7\u8429\u4F2F\u5265\u535A\u62CD\u67CF\u6CCA\u767D\u7B94\u7C95\u8236\u8584\u8FEB\u66DD\u6F20\u7206\u7E1B\u83AB\u99C1\u9EA6"],
    ["c8a1", "\u51FD\u7BB1\u7872\u7BB8\u8087\u7B48\u6AE8\u5E61\u808C\u7551\u7560\u516B\u9262\u6E8C\u767A\u9197\u9AEA\u4F10\u7F70\u629C\u7B4F\u95A5\u9CE9\u567A\u5859\u86E4\u96BC\u4F34\u5224\u534A\u53CD\u53DB\u5E06\u642C\u6591\u677F\u6C3E\u6C4E\u7248\u72AF\u73ED\u7554\u7E41\u822C\u85E9\u8CA9\u7BC4\u91C6\u7169\u9812\u98EF\u633D\u6669\u756A\u76E4\u78D0\u8543\u86EE\u532A\u5351\u5426\u5983\u5E87\u5F7C\u60B2\u6249\u6279\u62AB\u6590\u6BD4\u6CCC\u75B2\u76AE\u7891\u79D8\u7DCB\u7F77\u80A5\u88AB\u8AB9\u8CBB\u907F\u975E\u98DB\u6A0B\u7C38\u5099\u5C3E\u5FAE\u6787\u6BD8\u7435\u7709\u7F8E"],
    ["c9a1", "\u9F3B\u67CA\u7A17\u5339\u758B\u9AED\u5F66\u819D\u83F1\u8098\u5F3C\u5FC5\u7562\u7B46\u903C\u6867\u59EB\u5A9B\u7D10\u767E\u8B2C\u4FF5\u5F6A\u6A19\u6C37\u6F02\u74E2\u7968\u8868\u8A55\u8C79\u5EDF\u63CF\u75C5\u79D2\u82D7\u9328\u92F2\u849C\u86ED\u9C2D\u54C1\u5F6C\u658C\u6D5C\u7015\u8CA7\u8CD3\u983B\u654F\u74F6\u4E0D\u4ED8\u57E0\u592B\u5A66\u5BCC\u51A8\u5E03\u5E9C\u6016\u6276\u6577\u65A7\u666E\u6D6E\u7236\u7B26\u8150\u819A\u8299\u8B5C\u8CA0\u8CE6\u8D74\u961C\u9644\u4FAE\u64AB\u6B66\u821E\u8461\u856A\u90E8\u5C01\u6953\u98A8\u847A\u8557\u4F0F\u526F\u5FA9\u5E45\u670D"],
    ["caa1", "\u798F\u8179\u8907\u8986\u6DF5\u5F17\u6255\u6CB8\u4ECF\u7269\u9B92\u5206\u543B\u5674\u58B3\u61A4\u626E\u711A\u596E\u7C89\u7CDE\u7D1B\u96F0\u6587\u805E\u4E19\u4F75\u5175\u5840\u5E63\u5E73\u5F0A\u67C4\u4E26\u853D\u9589\u965B\u7C73\u9801\u50FB\u58C1\u7656\u78A7\u5225\u77A5\u8511\u7B86\u504F\u5909\u7247\u7BC7\u7DE8\u8FBA\u8FD4\u904D\u4FBF\u52C9\u5A29\u5F01\u97AD\u4FDD\u8217\u92EA\u5703\u6355\u6B69\u752B\u88DC\u8F14\u7A42\u52DF\u5893\u6155\u620A\u66AE\u6BCD\u7C3F\u83E9\u5023\u4FF8\u5305\u5446\u5831\u5949\u5B9D\u5CF0\u5CEF\u5D29\u5E96\u62B1\u6367\u653E\u65B9\u670B"],
    ["cba1", "\u6CD5\u6CE1\u70F9\u7832\u7E2B\u80DE\u82B3\u840C\u84EC\u8702\u8912\u8A2A\u8C4A\u90A6\u92D2\u98FD\u9CF3\u9D6C\u4E4F\u4EA1\u508D\u5256\u574A\u59A8\u5E3D\u5FD8\u5FD9\u623F\u66B4\u671B\u67D0\u68D2\u5192\u7D21\u80AA\u81A8\u8B00\u8C8C\u8CBF\u927E\u9632\u5420\u982C\u5317\u50D5\u535C\u58A8\u64B2\u6734\u7267\u7766\u7A46\u91E6\u52C3\u6CA1\u6B86\u5800\u5E4C\u5954\u672C\u7FFB\u51E1\u76C6\u6469\u78E8\u9B54\u9EBB\u57CB\u59B9\u6627\u679A\u6BCE\u54E9\u69D9\u5E55\u819C\u6795\u9BAA\u67FE\u9C52\u685D\u4EA6\u4FE3\u53C8\u62B9\u672B\u6CAB\u8FC4\u4FAD\u7E6D\u9EBF\u4E07\u6162\u6E80"],
    ["cca1", "\u6F2B\u8513\u5473\u672A\u9B45\u5DF3\u7B95\u5CAC\u5BC6\u871C\u6E4A\u84D1\u7A14\u8108\u5999\u7C8D\u6C11\u7720\u52D9\u5922\u7121\u725F\u77DB\u9727\u9D61\u690B\u5A7F\u5A18\u51A5\u540D\u547D\u660E\u76DF\u8FF7\u9298\u9CF4\u59EA\u725D\u6EC5\u514D\u68C9\u7DBF\u7DEC\u9762\u9EBA\u6478\u6A21\u8302\u5984\u5B5F\u6BDB\u731B\u76F2\u7DB2\u8017\u8499\u5132\u6728\u9ED9\u76EE\u6762\u52FF\u9905\u5C24\u623B\u7C7E\u8CB0\u554F\u60B6\u7D0B\u9580\u5301\u4E5F\u51B6\u591C\u723A\u8036\u91CE\u5F25\u77E2\u5384\u5F79\u7D04\u85AC\u8A33\u8E8D\u9756\u67F3\u85AE\u9453\u6109\u6108\u6CB9\u7652"],
    ["cda1", "\u8AED\u8F38\u552F\u4F51\u512A\u52C7\u53CB\u5BA5\u5E7D\u60A0\u6182\u63D6\u6709\u67DA\u6E67\u6D8C\u7336\u7337\u7531\u7950\u88D5\u8A98\u904A\u9091\u90F5\u96C4\u878D\u5915\u4E88\u4F59\u4E0E\u8A89\u8F3F\u9810\u50AD\u5E7C\u5996\u5BB9\u5EB8\u63DA\u63FA\u64C1\u66DC\u694A\u69D8\u6D0B\u6EB6\u7194\u7528\u7AAF\u7F8A\u8000\u8449\u84C9\u8981\u8B21\u8E0A\u9065\u967D\u990A\u617E\u6291\u6B32\u6C83\u6D74\u7FCC\u7FFC\u6DC0\u7F85\u87BA\u88F8\u6765\u83B1\u983C\u96F7\u6D1B\u7D61\u843D\u916A\u4E71\u5375\u5D50\u6B04\u6FEB\u85CD\u862D\u89A7\u5229\u540F\u5C65\u674E\u68A8\u7406\u7483"],
    ["cea1", "\u75E2\u88CF\u88E1\u91CC\u96E2\u9678\u5F8B\u7387\u7ACB\u844E\u63A0\u7565\u5289\u6D41\u6E9C\u7409\u7559\u786B\u7C92\u9686\u7ADC\u9F8D\u4FB6\u616E\u65C5\u865C\u4E86\u4EAE\u50DA\u4E21\u51CC\u5BEE\u6599\u6881\u6DBC\u731F\u7642\u77AD\u7A1C\u7CE7\u826F\u8AD2\u907C\u91CF\u9675\u9818\u529B\u7DD1\u502B\u5398\u6797\u6DCB\u71D0\u7433\u81E8\u8F2A\u96A3\u9C57\u9E9F\u7460\u5841\u6D99\u7D2F\u985E\u4EE4\u4F36\u4F8B\u51B7\u52B1\u5DBA\u601C\u73B2\u793C\u82D3\u9234\u96B7\u96F6\u970A\u9E97\u9F62\u66A6\u6B74\u5217\u52A3\u70C8\u88C2\u5EC9\u604B\u6190\u6F23\u7149\u7C3E\u7DF4\u806F"],
    ["cfa1", "\u84EE\u9023\u932C\u5442\u9B6F\u6AD3\u7089\u8CC2\u8DEF\u9732\u52B4\u5A41\u5ECA\u5F04\u6717\u697C\u6994\u6D6A\u6F0F\u7262\u72FC\u7BED\u8001\u807E\u874B\u90CE\u516D\u9E93\u7984\u808B\u9332\u8AD6\u502D\u548C\u8A71\u6B6A\u8CC4\u8107\u60D1\u67A0\u9DF2\u4E99\u4E98\u9C10\u8A6B\u85C1\u8568\u6900\u6E7E\u7897\u8155"],
    ["d0a1", "\u5F0C\u4E10\u4E15\u4E2A\u4E31\u4E36\u4E3C\u4E3F\u4E42\u4E56\u4E58\u4E82\u4E85\u8C6B\u4E8A\u8212\u5F0D\u4E8E\u4E9E\u4E9F\u4EA0\u4EA2\u4EB0\u4EB3\u4EB6\u4ECE\u4ECD\u4EC4\u4EC6\u4EC2\u4ED7\u4EDE\u4EED\u4EDF\u4EF7\u4F09\u4F5A\u4F30\u4F5B\u4F5D\u4F57\u4F47\u4F76\u4F88\u4F8F\u4F98\u4F7B\u4F69\u4F70\u4F91\u4F6F\u4F86\u4F96\u5118\u4FD4\u4FDF\u4FCE\u4FD8\u4FDB\u4FD1\u4FDA\u4FD0\u4FE4\u4FE5\u501A\u5028\u5014\u502A\u5025\u5005\u4F1C\u4FF6\u5021\u5029\u502C\u4FFE\u4FEF\u5011\u5006\u5043\u5047\u6703\u5055\u5050\u5048\u505A\u5056\u506C\u5078\u5080\u509A\u5085\u50B4\u50B2"],
    ["d1a1", "\u50C9\u50CA\u50B3\u50C2\u50D6\u50DE\u50E5\u50ED\u50E3\u50EE\u50F9\u50F5\u5109\u5101\u5102\u5116\u5115\u5114\u511A\u5121\u513A\u5137\u513C\u513B\u513F\u5140\u5152\u514C\u5154\u5162\u7AF8\u5169\u516A\u516E\u5180\u5182\u56D8\u518C\u5189\u518F\u5191\u5193\u5195\u5196\u51A4\u51A6\u51A2\u51A9\u51AA\u51AB\u51B3\u51B1\u51B2\u51B0\u51B5\u51BD\u51C5\u51C9\u51DB\u51E0\u8655\u51E9\u51ED\u51F0\u51F5\u51FE\u5204\u520B\u5214\u520E\u5227\u522A\u522E\u5233\u5239\u524F\u5244\u524B\u524C\u525E\u5254\u526A\u5274\u5269\u5273\u527F\u527D\u528D\u5294\u5292\u5271\u5288\u5291\u8FA8"],
    ["d2a1", "\u8FA7\u52AC\u52AD\u52BC\u52B5\u52C1\u52CD\u52D7\u52DE\u52E3\u52E6\u98ED\u52E0\u52F3\u52F5\u52F8\u52F9\u5306\u5308\u7538\u530D\u5310\u530F\u5315\u531A\u5323\u532F\u5331\u5333\u5338\u5340\u5346\u5345\u4E17\u5349\u534D\u51D6\u535E\u5369\u536E\u5918\u537B\u5377\u5382\u5396\u53A0\u53A6\u53A5\u53AE\u53B0\u53B6\u53C3\u7C12\u96D9\u53DF\u66FC\u71EE\u53EE\u53E8\u53ED\u53FA\u5401\u543D\u5440\u542C\u542D\u543C\u542E\u5436\u5429\u541D\u544E\u548F\u5475\u548E\u545F\u5471\u5477\u5470\u5492\u547B\u5480\u5476\u5484\u5490\u5486\u54C7\u54A2\u54B8\u54A5\u54AC\u54C4\u54C8\u54A8"],
    ["d3a1", "\u54AB\u54C2\u54A4\u54BE\u54BC\u54D8\u54E5\u54E6\u550F\u5514\u54FD\u54EE\u54ED\u54FA\u54E2\u5539\u5540\u5563\u554C\u552E\u555C\u5545\u5556\u5557\u5538\u5533\u555D\u5599\u5580\u54AF\u558A\u559F\u557B\u557E\u5598\u559E\u55AE\u557C\u5583\u55A9\u5587\u55A8\u55DA\u55C5\u55DF\u55C4\u55DC\u55E4\u55D4\u5614\u55F7\u5616\u55FE\u55FD\u561B\u55F9\u564E\u5650\u71DF\u5634\u5636\u5632\u5638\u566B\u5664\u562F\u566C\u566A\u5686\u5680\u568A\u56A0\u5694\u568F\u56A5\u56AE\u56B6\u56B4\u56C2\u56BC\u56C1\u56C3\u56C0\u56C8\u56CE\u56D1\u56D3\u56D7\u56EE\u56F9\u5700\u56FF\u5704\u5709"],
    ["d4a1", "\u5708\u570B\u570D\u5713\u5718\u5716\u55C7\u571C\u5726\u5737\u5738\u574E\u573B\u5740\u574F\u5769\u57C0\u5788\u5761\u577F\u5789\u5793\u57A0\u57B3\u57A4\u57AA\u57B0\u57C3\u57C6\u57D4\u57D2\u57D3\u580A\u57D6\u57E3\u580B\u5819\u581D\u5872\u5821\u5862\u584B\u5870\u6BC0\u5852\u583D\u5879\u5885\u58B9\u589F\u58AB\u58BA\u58DE\u58BB\u58B8\u58AE\u58C5\u58D3\u58D1\u58D7\u58D9\u58D8\u58E5\u58DC\u58E4\u58DF\u58EF\u58FA\u58F9\u58FB\u58FC\u58FD\u5902\u590A\u5910\u591B\u68A6\u5925\u592C\u592D\u5932\u5938\u593E\u7AD2\u5955\u5950\u594E\u595A\u5958\u5962\u5960\u5967\u596C\u5969"],
    ["d5a1", "\u5978\u5981\u599D\u4F5E\u4FAB\u59A3\u59B2\u59C6\u59E8\u59DC\u598D\u59D9\u59DA\u5A25\u5A1F\u5A11\u5A1C\u5A09\u5A1A\u5A40\u5A6C\u5A49\u5A35\u5A36\u5A62\u5A6A\u5A9A\u5ABC\u5ABE\u5ACB\u5AC2\u5ABD\u5AE3\u5AD7\u5AE6\u5AE9\u5AD6\u5AFA\u5AFB\u5B0C\u5B0B\u5B16\u5B32\u5AD0\u5B2A\u5B36\u5B3E\u5B43\u5B45\u5B40\u5B51\u5B55\u5B5A\u5B5B\u5B65\u5B69\u5B70\u5B73\u5B75\u5B78\u6588\u5B7A\u5B80\u5B83\u5BA6\u5BB8\u5BC3\u5BC7\u5BC9\u5BD4\u5BD0\u5BE4\u5BE6\u5BE2\u5BDE\u5BE5\u5BEB\u5BF0\u5BF6\u5BF3\u5C05\u5C07\u5C08\u5C0D\u5C13\u5C20\u5C22\u5C28\u5C38\u5C39\u5C41\u5C46\u5C4E\u5C53"],
    ["d6a1", "\u5C50\u5C4F\u5B71\u5C6C\u5C6E\u4E62\u5C76\u5C79\u5C8C\u5C91\u5C94\u599B\u5CAB\u5CBB\u5CB6\u5CBC\u5CB7\u5CC5\u5CBE\u5CC7\u5CD9\u5CE9\u5CFD\u5CFA\u5CED\u5D8C\u5CEA\u5D0B\u5D15\u5D17\u5D5C\u5D1F\u5D1B\u5D11\u5D14\u5D22\u5D1A\u5D19\u5D18\u5D4C\u5D52\u5D4E\u5D4B\u5D6C\u5D73\u5D76\u5D87\u5D84\u5D82\u5DA2\u5D9D\u5DAC\u5DAE\u5DBD\u5D90\u5DB7\u5DBC\u5DC9\u5DCD\u5DD3\u5DD2\u5DD6\u5DDB\u5DEB\u5DF2\u5DF5\u5E0B\u5E1A\u5E19\u5E11\u5E1B\u5E36\u5E37\u5E44\u5E43\u5E40\u5E4E\u5E57\u5E54\u5E5F\u5E62\u5E64\u5E47\u5E75\u5E76\u5E7A\u9EBC\u5E7F\u5EA0\u5EC1\u5EC2\u5EC8\u5ED0\u5ECF"],
    ["d7a1", "\u5ED6\u5EE3\u5EDD\u5EDA\u5EDB\u5EE2\u5EE1\u5EE8\u5EE9\u5EEC\u5EF1\u5EF3\u5EF0\u5EF4\u5EF8\u5EFE\u5F03\u5F09\u5F5D\u5F5C\u5F0B\u5F11\u5F16\u5F29\u5F2D\u5F38\u5F41\u5F48\u5F4C\u5F4E\u5F2F\u5F51\u5F56\u5F57\u5F59\u5F61\u5F6D\u5F73\u5F77\u5F83\u5F82\u5F7F\u5F8A\u5F88\u5F91\u5F87\u5F9E\u5F99\u5F98\u5FA0\u5FA8\u5FAD\u5FBC\u5FD6\u5FFB\u5FE4\u5FF8\u5FF1\u5FDD\u60B3\u5FFF\u6021\u6060\u6019\u6010\u6029\u600E\u6031\u601B\u6015\u602B\u6026\u600F\u603A\u605A\u6041\u606A\u6077\u605F\u604A\u6046\u604D\u6063\u6043\u6064\u6042\u606C\u606B\u6059\u6081\u608D\u60E7\u6083\u609A"],
    ["d8a1", "\u6084\u609B\u6096\u6097\u6092\u60A7\u608B\u60E1\u60B8\u60E0\u60D3\u60B4\u5FF0\u60BD\u60C6\u60B5\u60D8\u614D\u6115\u6106\u60F6\u60F7\u6100\u60F4\u60FA\u6103\u6121\u60FB\u60F1\u610D\u610E\u6147\u613E\u6128\u6127\u614A\u613F\u613C\u612C\u6134\u613D\u6142\u6144\u6173\u6177\u6158\u6159\u615A\u616B\u6174\u616F\u6165\u6171\u615F\u615D\u6153\u6175\u6199\u6196\u6187\u61AC\u6194\u619A\u618A\u6191\u61AB\u61AE\u61CC\u61CA\u61C9\u61F7\u61C8\u61C3\u61C6\u61BA\u61CB\u7F79\u61CD\u61E6\u61E3\u61F6\u61FA\u61F4\u61FF\u61FD\u61FC\u61FE\u6200\u6208\u6209\u620D\u620C\u6214\u621B"],
    ["d9a1", "\u621E\u6221\u622A\u622E\u6230\u6232\u6233\u6241\u624E\u625E\u6263\u625B\u6260\u6268\u627C\u6282\u6289\u627E\u6292\u6293\u6296\u62D4\u6283\u6294\u62D7\u62D1\u62BB\u62CF\u62FF\u62C6\u64D4\u62C8\u62DC\u62CC\u62CA\u62C2\u62C7\u629B\u62C9\u630C\u62EE\u62F1\u6327\u6302\u6308\u62EF\u62F5\u6350\u633E\u634D\u641C\u634F\u6396\u638E\u6380\u63AB\u6376\u63A3\u638F\u6389\u639F\u63B5\u636B\u6369\u63BE\u63E9\u63C0\u63C6\u63E3\u63C9\u63D2\u63F6\u63C4\u6416\u6434\u6406\u6413\u6426\u6436\u651D\u6417\u6428\u640F\u6467\u646F\u6476\u644E\u652A\u6495\u6493\u64A5\u64A9\u6488\u64BC"],
    ["daa1", "\u64DA\u64D2\u64C5\u64C7\u64BB\u64D8\u64C2\u64F1\u64E7\u8209\u64E0\u64E1\u62AC\u64E3\u64EF\u652C\u64F6\u64F4\u64F2\u64FA\u6500\u64FD\u6518\u651C\u6505\u6524\u6523\u652B\u6534\u6535\u6537\u6536\u6538\u754B\u6548\u6556\u6555\u654D\u6558\u655E\u655D\u6572\u6578\u6582\u6583\u8B8A\u659B\u659F\u65AB\u65B7\u65C3\u65C6\u65C1\u65C4\u65CC\u65D2\u65DB\u65D9\u65E0\u65E1\u65F1\u6772\u660A\u6603\u65FB\u6773\u6635\u6636\u6634\u661C\u664F\u6644\u6649\u6641\u665E\u665D\u6664\u6667\u6668\u665F\u6662\u6670\u6683\u6688\u668E\u6689\u6684\u6698\u669D\u66C1\u66B9\u66C9\u66BE\u66BC"],
    ["dba1", "\u66C4\u66B8\u66D6\u66DA\u66E0\u663F\u66E6\u66E9\u66F0\u66F5\u66F7\u670F\u6716\u671E\u6726\u6727\u9738\u672E\u673F\u6736\u6741\u6738\u6737\u6746\u675E\u6760\u6759\u6763\u6764\u6789\u6770\u67A9\u677C\u676A\u678C\u678B\u67A6\u67A1\u6785\u67B7\u67EF\u67B4\u67EC\u67B3\u67E9\u67B8\u67E4\u67DE\u67DD\u67E2\u67EE\u67B9\u67CE\u67C6\u67E7\u6A9C\u681E\u6846\u6829\u6840\u684D\u6832\u684E\u68B3\u682B\u6859\u6863\u6877\u687F\u689F\u688F\u68AD\u6894\u689D\u689B\u6883\u6AAE\u68B9\u6874\u68B5\u68A0\u68BA\u690F\u688D\u687E\u6901\u68CA\u6908\u68D8\u6922\u6926\u68E1\u690C\u68CD"],
    ["dca1", "\u68D4\u68E7\u68D5\u6936\u6912\u6904\u68D7\u68E3\u6925\u68F9\u68E0\u68EF\u6928\u692A\u691A\u6923\u6921\u68C6\u6979\u6977\u695C\u6978\u696B\u6954\u697E\u696E\u6939\u6974\u693D\u6959\u6930\u6961\u695E\u695D\u6981\u696A\u69B2\u69AE\u69D0\u69BF\u69C1\u69D3\u69BE\u69CE\u5BE8\u69CA\u69DD\u69BB\u69C3\u69A7\u6A2E\u6991\u69A0\u699C\u6995\u69B4\u69DE\u69E8\u6A02\u6A1B\u69FF\u6B0A\u69F9\u69F2\u69E7\u6A05\u69B1\u6A1E\u69ED\u6A14\u69EB\u6A0A\u6A12\u6AC1\u6A23\u6A13\u6A44\u6A0C\u6A72\u6A36\u6A78\u6A47\u6A62\u6A59\u6A66\u6A48\u6A38\u6A22\u6A90\u6A8D\u6AA0\u6A84\u6AA2\u6AA3"],
    ["dda1", "\u6A97\u8617\u6ABB\u6AC3\u6AC2\u6AB8\u6AB3\u6AAC\u6ADE\u6AD1\u6ADF\u6AAA\u6ADA\u6AEA\u6AFB\u6B05\u8616\u6AFA\u6B12\u6B16\u9B31\u6B1F\u6B38\u6B37\u76DC\u6B39\u98EE\u6B47\u6B43\u6B49\u6B50\u6B59\u6B54\u6B5B\u6B5F\u6B61\u6B78\u6B79\u6B7F\u6B80\u6B84\u6B83\u6B8D\u6B98\u6B95\u6B9E\u6BA4\u6BAA\u6BAB\u6BAF\u6BB2\u6BB1\u6BB3\u6BB7\u6BBC\u6BC6\u6BCB\u6BD3\u6BDF\u6BEC\u6BEB\u6BF3\u6BEF\u9EBE\u6C08\u6C13\u6C14\u6C1B\u6C24\u6C23\u6C5E\u6C55\u6C62\u6C6A\u6C82\u6C8D\u6C9A\u6C81\u6C9B\u6C7E\u6C68\u6C73\u6C92\u6C90\u6CC4\u6CF1\u6CD3\u6CBD\u6CD7\u6CC5\u6CDD\u6CAE\u6CB1\u6CBE"],
    ["dea1", "\u6CBA\u6CDB\u6CEF\u6CD9\u6CEA\u6D1F\u884D\u6D36\u6D2B\u6D3D\u6D38\u6D19\u6D35\u6D33\u6D12\u6D0C\u6D63\u6D93\u6D64\u6D5A\u6D79\u6D59\u6D8E\u6D95\u6FE4\u6D85\u6DF9\u6E15\u6E0A\u6DB5\u6DC7\u6DE6\u6DB8\u6DC6\u6DEC\u6DDE\u6DCC\u6DE8\u6DD2\u6DC5\u6DFA\u6DD9\u6DE4\u6DD5\u6DEA\u6DEE\u6E2D\u6E6E\u6E2E\u6E19\u6E72\u6E5F\u6E3E\u6E23\u6E6B\u6E2B\u6E76\u6E4D\u6E1F\u6E43\u6E3A\u6E4E\u6E24\u6EFF\u6E1D\u6E38\u6E82\u6EAA\u6E98\u6EC9\u6EB7\u6ED3\u6EBD\u6EAF\u6EC4\u6EB2\u6ED4\u6ED5\u6E8F\u6EA5\u6EC2\u6E9F\u6F41\u6F11\u704C\u6EEC\u6EF8\u6EFE\u6F3F\u6EF2\u6F31\u6EEF\u6F32\u6ECC"],
    ["dfa1", "\u6F3E\u6F13\u6EF7\u6F86\u6F7A\u6F78\u6F81\u6F80\u6F6F\u6F5B\u6FF3\u6F6D\u6F82\u6F7C\u6F58\u6F8E\u6F91\u6FC2\u6F66\u6FB3\u6FA3\u6FA1\u6FA4\u6FB9\u6FC6\u6FAA\u6FDF\u6FD5\u6FEC\u6FD4\u6FD8\u6FF1\u6FEE\u6FDB\u7009\u700B\u6FFA\u7011\u7001\u700F\u6FFE\u701B\u701A\u6F74\u701D\u7018\u701F\u7030\u703E\u7032\u7051\u7063\u7099\u7092\u70AF\u70F1\u70AC\u70B8\u70B3\u70AE\u70DF\u70CB\u70DD\u70D9\u7109\u70FD\u711C\u7119\u7165\u7155\u7188\u7166\u7162\u714C\u7156\u716C\u718F\u71FB\u7184\u7195\u71A8\u71AC\u71D7\u71B9\u71BE\u71D2\u71C9\u71D4\u71CE\u71E0\u71EC\u71E7\u71F5\u71FC"],
    ["e0a1", "\u71F9\u71FF\u720D\u7210\u721B\u7228\u722D\u722C\u7230\u7232\u723B\u723C\u723F\u7240\u7246\u724B\u7258\u7274\u727E\u7282\u7281\u7287\u7292\u7296\u72A2\u72A7\u72B9\u72B2\u72C3\u72C6\u72C4\u72CE\u72D2\u72E2\u72E0\u72E1\u72F9\u72F7\u500F\u7317\u730A\u731C\u7316\u731D\u7334\u732F\u7329\u7325\u733E\u734E\u734F\u9ED8\u7357\u736A\u7368\u7370\u7378\u7375\u737B\u737A\u73C8\u73B3\u73CE\u73BB\u73C0\u73E5\u73EE\u73DE\u74A2\u7405\u746F\u7425\u73F8\u7432\u743A\u7455\u743F\u745F\u7459\u7441\u745C\u7469\u7470\u7463\u746A\u7476\u747E\u748B\u749E\u74A7\u74CA\u74CF\u74D4\u73F1"],
    ["e1a1", "\u74E0\u74E3\u74E7\u74E9\u74EE\u74F2\u74F0\u74F1\u74F8\u74F7\u7504\u7503\u7505\u750C\u750E\u750D\u7515\u7513\u751E\u7526\u752C\u753C\u7544\u754D\u754A\u7549\u755B\u7546\u755A\u7569\u7564\u7567\u756B\u756D\u7578\u7576\u7586\u7587\u7574\u758A\u7589\u7582\u7594\u759A\u759D\u75A5\u75A3\u75C2\u75B3\u75C3\u75B5\u75BD\u75B8\u75BC\u75B1\u75CD\u75CA\u75D2\u75D9\u75E3\u75DE\u75FE\u75FF\u75FC\u7601\u75F0\u75FA\u75F2\u75F3\u760B\u760D\u7609\u761F\u7627\u7620\u7621\u7622\u7624\u7634\u7630\u763B\u7647\u7648\u7646\u765C\u7658\u7661\u7662\u7668\u7669\u766A\u7667\u766C\u7670"],
    ["e2a1", "\u7672\u7676\u7678\u767C\u7680\u7683\u7688\u768B\u768E\u7696\u7693\u7699\u769A\u76B0\u76B4\u76B8\u76B9\u76BA\u76C2\u76CD\u76D6\u76D2\u76DE\u76E1\u76E5\u76E7\u76EA\u862F\u76FB\u7708\u7707\u7704\u7729\u7724\u771E\u7725\u7726\u771B\u7737\u7738\u7747\u775A\u7768\u776B\u775B\u7765\u777F\u777E\u7779\u778E\u778B\u7791\u77A0\u779E\u77B0\u77B6\u77B9\u77BF\u77BC\u77BD\u77BB\u77C7\u77CD\u77D7\u77DA\u77DC\u77E3\u77EE\u77FC\u780C\u7812\u7926\u7820\u792A\u7845\u788E\u7874\u7886\u787C\u789A\u788C\u78A3\u78B5\u78AA\u78AF\u78D1\u78C6\u78CB\u78D4\u78BE\u78BC\u78C5\u78CA\u78EC"],
    ["e3a1", "\u78E7\u78DA\u78FD\u78F4\u7907\u7912\u7911\u7919\u792C\u792B\u7940\u7960\u7957\u795F\u795A\u7955\u7953\u797A\u797F\u798A\u799D\u79A7\u9F4B\u79AA\u79AE\u79B3\u79B9\u79BA\u79C9\u79D5\u79E7\u79EC\u79E1\u79E3\u7A08\u7A0D\u7A18\u7A19\u7A20\u7A1F\u7980\u7A31\u7A3B\u7A3E\u7A37\u7A43\u7A57\u7A49\u7A61\u7A62\u7A69\u9F9D\u7A70\u7A79\u7A7D\u7A88\u7A97\u7A95\u7A98\u7A96\u7AA9\u7AC8\u7AB0\u7AB6\u7AC5\u7AC4\u7ABF\u9083\u7AC7\u7ACA\u7ACD\u7ACF\u7AD5\u7AD3\u7AD9\u7ADA\u7ADD\u7AE1\u7AE2\u7AE6\u7AED\u7AF0\u7B02\u7B0F\u7B0A\u7B06\u7B33\u7B18\u7B19\u7B1E\u7B35\u7B28\u7B36\u7B50"],
    ["e4a1", "\u7B7A\u7B04\u7B4D\u7B0B\u7B4C\u7B45\u7B75\u7B65\u7B74\u7B67\u7B70\u7B71\u7B6C\u7B6E\u7B9D\u7B98\u7B9F\u7B8D\u7B9C\u7B9A\u7B8B\u7B92\u7B8F\u7B5D\u7B99\u7BCB\u7BC1\u7BCC\u7BCF\u7BB4\u7BC6\u7BDD\u7BE9\u7C11\u7C14\u7BE6\u7BE5\u7C60\u7C00\u7C07\u7C13\u7BF3\u7BF7\u7C17\u7C0D\u7BF6\u7C23\u7C27\u7C2A\u7C1F\u7C37\u7C2B\u7C3D\u7C4C\u7C43\u7C54\u7C4F\u7C40\u7C50\u7C58\u7C5F\u7C64\u7C56\u7C65\u7C6C\u7C75\u7C83\u7C90\u7CA4\u7CAD\u7CA2\u7CAB\u7CA1\u7CA8\u7CB3\u7CB2\u7CB1\u7CAE\u7CB9\u7CBD\u7CC0\u7CC5\u7CC2\u7CD8\u7CD2\u7CDC\u7CE2\u9B3B\u7CEF\u7CF2\u7CF4\u7CF6\u7CFA\u7D06"],
    ["e5a1", "\u7D02\u7D1C\u7D15\u7D0A\u7D45\u7D4B\u7D2E\u7D32\u7D3F\u7D35\u7D46\u7D73\u7D56\u7D4E\u7D72\u7D68\u7D6E\u7D4F\u7D63\u7D93\u7D89\u7D5B\u7D8F\u7D7D\u7D9B\u7DBA\u7DAE\u7DA3\u7DB5\u7DC7\u7DBD\u7DAB\u7E3D\u7DA2\u7DAF\u7DDC\u7DB8\u7D9F\u7DB0\u7DD8\u7DDD\u7DE4\u7DDE\u7DFB\u7DF2\u7DE1\u7E05\u7E0A\u7E23\u7E21\u7E12\u7E31\u7E1F\u7E09\u7E0B\u7E22\u7E46\u7E66\u7E3B\u7E35\u7E39\u7E43\u7E37\u7E32\u7E3A\u7E67\u7E5D\u7E56\u7E5E\u7E59\u7E5A\u7E79\u7E6A\u7E69\u7E7C\u7E7B\u7E83\u7DD5\u7E7D\u8FAE\u7E7F\u7E88\u7E89\u7E8C\u7E92\u7E90\u7E93\u7E94\u7E96\u7E8E\u7E9B\u7E9C\u7F38\u7F3A"],
    ["e6a1", "\u7F45\u7F4C\u7F4D\u7F4E\u7F50\u7F51\u7F55\u7F54\u7F58\u7F5F\u7F60\u7F68\u7F69\u7F67\u7F78\u7F82\u7F86\u7F83\u7F88\u7F87\u7F8C\u7F94\u7F9E\u7F9D\u7F9A\u7FA3\u7FAF\u7FB2\u7FB9\u7FAE\u7FB6\u7FB8\u8B71\u7FC5\u7FC6\u7FCA\u7FD5\u7FD4\u7FE1\u7FE6\u7FE9\u7FF3\u7FF9\u98DC\u8006\u8004\u800B\u8012\u8018\u8019\u801C\u8021\u8028\u803F\u803B\u804A\u8046\u8052\u8058\u805A\u805F\u8062\u8068\u8073\u8072\u8070\u8076\u8079\u807D\u807F\u8084\u8086\u8085\u809B\u8093\u809A\u80AD\u5190\u80AC\u80DB\u80E5\u80D9\u80DD\u80C4\u80DA\u80D6\u8109\u80EF\u80F1\u811B\u8129\u8123\u812F\u814B"],
    ["e7a1", "\u968B\u8146\u813E\u8153\u8151\u80FC\u8171\u816E\u8165\u8166\u8174\u8183\u8188\u818A\u8180\u8182\u81A0\u8195\u81A4\u81A3\u815F\u8193\u81A9\u81B0\u81B5\u81BE\u81B8\u81BD\u81C0\u81C2\u81BA\u81C9\u81CD\u81D1\u81D9\u81D8\u81C8\u81DA\u81DF\u81E0\u81E7\u81FA\u81FB\u81FE\u8201\u8202\u8205\u8207\u820A\u820D\u8210\u8216\u8229\u822B\u8238\u8233\u8240\u8259\u8258\u825D\u825A\u825F\u8264\u8262\u8268\u826A\u826B\u822E\u8271\u8277\u8278\u827E\u828D\u8292\u82AB\u829F\u82BB\u82AC\u82E1\u82E3\u82DF\u82D2\u82F4\u82F3\u82FA\u8393\u8303\u82FB\u82F9\u82DE\u8306\u82DC\u8309\u82D9"],
    ["e8a1", "\u8335\u8334\u8316\u8332\u8331\u8340\u8339\u8350\u8345\u832F\u832B\u8317\u8318\u8385\u839A\u83AA\u839F\u83A2\u8396\u8323\u838E\u8387\u838A\u837C\u83B5\u8373\u8375\u83A0\u8389\u83A8\u83F4\u8413\u83EB\u83CE\u83FD\u8403\u83D8\u840B\u83C1\u83F7\u8407\u83E0\u83F2\u840D\u8422\u8420\u83BD\u8438\u8506\u83FB\u846D\u842A\u843C\u855A\u8484\u8477\u846B\u84AD\u846E\u8482\u8469\u8446\u842C\u846F\u8479\u8435\u84CA\u8462\u84B9\u84BF\u849F\u84D9\u84CD\u84BB\u84DA\u84D0\u84C1\u84C6\u84D6\u84A1\u8521\u84FF\u84F4\u8517\u8518\u852C\u851F\u8515\u8514\u84FC\u8540\u8563\u8558\u8548"],
    ["e9a1", "\u8541\u8602\u854B\u8555\u8580\u85A4\u8588\u8591\u858A\u85A8\u856D\u8594\u859B\u85EA\u8587\u859C\u8577\u857E\u8590\u85C9\u85BA\u85CF\u85B9\u85D0\u85D5\u85DD\u85E5\u85DC\u85F9\u860A\u8613\u860B\u85FE\u85FA\u8606\u8622\u861A\u8630\u863F\u864D\u4E55\u8654\u865F\u8667\u8671\u8693\u86A3\u86A9\u86AA\u868B\u868C\u86B6\u86AF\u86C4\u86C6\u86B0\u86C9\u8823\u86AB\u86D4\u86DE\u86E9\u86EC\u86DF\u86DB\u86EF\u8712\u8706\u8708\u8700\u8703\u86FB\u8711\u8709\u870D\u86F9\u870A\u8734\u873F\u8737\u873B\u8725\u8729\u871A\u8760\u875F\u8778\u874C\u874E\u8774\u8757\u8768\u876E\u8759"],
    ["eaa1", "\u8753\u8763\u876A\u8805\u87A2\u879F\u8782\u87AF\u87CB\u87BD\u87C0\u87D0\u96D6\u87AB\u87C4\u87B3\u87C7\u87C6\u87BB\u87EF\u87F2\u87E0\u880F\u880D\u87FE\u87F6\u87F7\u880E\u87D2\u8811\u8816\u8815\u8822\u8821\u8831\u8836\u8839\u8827\u883B\u8844\u8842\u8852\u8859\u885E\u8862\u886B\u8881\u887E\u889E\u8875\u887D\u88B5\u8872\u8882\u8897\u8892\u88AE\u8899\u88A2\u888D\u88A4\u88B0\u88BF\u88B1\u88C3\u88C4\u88D4\u88D8\u88D9\u88DD\u88F9\u8902\u88FC\u88F4\u88E8\u88F2\u8904\u890C\u890A\u8913\u8943\u891E\u8925\u892A\u892B\u8941\u8944\u893B\u8936\u8938\u894C\u891D\u8960\u895E"],
    ["eba1", "\u8966\u8964\u896D\u896A\u896F\u8974\u8977\u897E\u8983\u8988\u898A\u8993\u8998\u89A1\u89A9\u89A6\u89AC\u89AF\u89B2\u89BA\u89BD\u89BF\u89C0\u89DA\u89DC\u89DD\u89E7\u89F4\u89F8\u8A03\u8A16\u8A10\u8A0C\u8A1B\u8A1D\u8A25\u8A36\u8A41\u8A5B\u8A52\u8A46\u8A48\u8A7C\u8A6D\u8A6C\u8A62\u8A85\u8A82\u8A84\u8AA8\u8AA1\u8A91\u8AA5\u8AA6\u8A9A\u8AA3\u8AC4\u8ACD\u8AC2\u8ADA\u8AEB\u8AF3\u8AE7\u8AE4\u8AF1\u8B14\u8AE0\u8AE2\u8AF7\u8ADE\u8ADB\u8B0C\u8B07\u8B1A\u8AE1\u8B16\u8B10\u8B17\u8B20\u8B33\u97AB\u8B26\u8B2B\u8B3E\u8B28\u8B41\u8B4C\u8B4F\u8B4E\u8B49\u8B56\u8B5B\u8B5A\u8B6B"],
    ["eca1", "\u8B5F\u8B6C\u8B6F\u8B74\u8B7D\u8B80\u8B8C\u8B8E\u8B92\u8B93\u8B96\u8B99\u8B9A\u8C3A\u8C41\u8C3F\u8C48\u8C4C\u8C4E\u8C50\u8C55\u8C62\u8C6C\u8C78\u8C7A\u8C82\u8C89\u8C85\u8C8A\u8C8D\u8C8E\u8C94\u8C7C\u8C98\u621D\u8CAD\u8CAA\u8CBD\u8CB2\u8CB3\u8CAE\u8CB6\u8CC8\u8CC1\u8CE4\u8CE3\u8CDA\u8CFD\u8CFA\u8CFB\u8D04\u8D05\u8D0A\u8D07\u8D0F\u8D0D\u8D10\u9F4E\u8D13\u8CCD\u8D14\u8D16\u8D67\u8D6D\u8D71\u8D73\u8D81\u8D99\u8DC2\u8DBE\u8DBA\u8DCF\u8DDA\u8DD6\u8DCC\u8DDB\u8DCB\u8DEA\u8DEB\u8DDF\u8DE3\u8DFC\u8E08\u8E09\u8DFF\u8E1D\u8E1E\u8E10\u8E1F\u8E42\u8E35\u8E30\u8E34\u8E4A"],
    ["eda1", "\u8E47\u8E49\u8E4C\u8E50\u8E48\u8E59\u8E64\u8E60\u8E2A\u8E63\u8E55\u8E76\u8E72\u8E7C\u8E81\u8E87\u8E85\u8E84\u8E8B\u8E8A\u8E93\u8E91\u8E94\u8E99\u8EAA\u8EA1\u8EAC\u8EB0\u8EC6\u8EB1\u8EBE\u8EC5\u8EC8\u8ECB\u8EDB\u8EE3\u8EFC\u8EFB\u8EEB\u8EFE\u8F0A\u8F05\u8F15\u8F12\u8F19\u8F13\u8F1C\u8F1F\u8F1B\u8F0C\u8F26\u8F33\u8F3B\u8F39\u8F45\u8F42\u8F3E\u8F4C\u8F49\u8F46\u8F4E\u8F57\u8F5C\u8F62\u8F63\u8F64\u8F9C\u8F9F\u8FA3\u8FAD\u8FAF\u8FB7\u8FDA\u8FE5\u8FE2\u8FEA\u8FEF\u9087\u8FF4\u9005\u8FF9\u8FFA\u9011\u9015\u9021\u900D\u901E\u9016\u900B\u9027\u9036\u9035\u9039\u8FF8"],
    ["eea1", "\u904F\u9050\u9051\u9052\u900E\u9049\u903E\u9056\u9058\u905E\u9068\u906F\u9076\u96A8\u9072\u9082\u907D\u9081\u9080\u908A\u9089\u908F\u90A8\u90AF\u90B1\u90B5\u90E2\u90E4\u6248\u90DB\u9102\u9112\u9119\u9132\u9130\u914A\u9156\u9158\u9163\u9165\u9169\u9173\u9172\u918B\u9189\u9182\u91A2\u91AB\u91AF\u91AA\u91B5\u91B4\u91BA\u91C0\u91C1\u91C9\u91CB\u91D0\u91D6\u91DF\u91E1\u91DB\u91FC\u91F5\u91F6\u921E\u91FF\u9214\u922C\u9215\u9211\u925E\u9257\u9245\u9249\u9264\u9248\u9295\u923F\u924B\u9250\u929C\u9296\u9293\u929B\u925A\u92CF\u92B9\u92B7\u92E9\u930F\u92FA\u9344\u932E"],
    ["efa1", "\u9319\u9322\u931A\u9323\u933A\u9335\u933B\u935C\u9360\u937C\u936E\u9356\u93B0\u93AC\u93AD\u9394\u93B9\u93D6\u93D7\u93E8\u93E5\u93D8\u93C3\u93DD\u93D0\u93C8\u93E4\u941A\u9414\u9413\u9403\u9407\u9410\u9436\u942B\u9435\u9421\u943A\u9441\u9452\u9444\u945B\u9460\u9462\u945E\u946A\u9229\u9470\u9475\u9477\u947D\u945A\u947C\u947E\u9481\u947F\u9582\u9587\u958A\u9594\u9596\u9598\u9599\u95A0\u95A8\u95A7\u95AD\u95BC\u95BB\u95B9\u95BE\u95CA\u6FF6\u95C3\u95CD\u95CC\u95D5\u95D4\u95D6\u95DC\u95E1\u95E5\u95E2\u9621\u9628\u962E\u962F\u9642\u964C\u964F\u964B\u9677\u965C\u965E"],
    ["f0a1", "\u965D\u965F\u9666\u9672\u966C\u968D\u9698\u9695\u9697\u96AA\u96A7\u96B1\u96B2\u96B0\u96B4\u96B6\u96B8\u96B9\u96CE\u96CB\u96C9\u96CD\u894D\u96DC\u970D\u96D5\u96F9\u9704\u9706\u9708\u9713\u970E\u9711\u970F\u9716\u9719\u9724\u972A\u9730\u9739\u973D\u973E\u9744\u9746\u9748\u9742\u9749\u975C\u9760\u9764\u9766\u9768\u52D2\u976B\u9771\u9779\u9785\u977C\u9781\u977A\u9786\u978B\u978F\u9790\u979C\u97A8\u97A6\u97A3\u97B3\u97B4\u97C3\u97C6\u97C8\u97CB\u97DC\u97ED\u9F4F\u97F2\u7ADF\u97F6\u97F5\u980F\u980C\u9838\u9824\u9821\u9837\u983D\u9846\u984F\u984B\u986B\u986F\u9870"],
    ["f1a1", "\u9871\u9874\u9873\u98AA\u98AF\u98B1\u98B6\u98C4\u98C3\u98C6\u98E9\u98EB\u9903\u9909\u9912\u9914\u9918\u9921\u991D\u991E\u9924\u9920\u992C\u992E\u993D\u993E\u9942\u9949\u9945\u9950\u994B\u9951\u9952\u994C\u9955\u9997\u9998\u99A5\u99AD\u99AE\u99BC\u99DF\u99DB\u99DD\u99D8\u99D1\u99ED\u99EE\u99F1\u99F2\u99FB\u99F8\u9A01\u9A0F\u9A05\u99E2\u9A19\u9A2B\u9A37\u9A45\u9A42\u9A40\u9A43\u9A3E\u9A55\u9A4D\u9A5B\u9A57\u9A5F\u9A62\u9A65\u9A64\u9A69\u9A6B\u9A6A\u9AAD\u9AB0\u9ABC\u9AC0\u9ACF\u9AD1\u9AD3\u9AD4\u9ADE\u9ADF\u9AE2\u9AE3\u9AE6\u9AEF\u9AEB\u9AEE\u9AF4\u9AF1\u9AF7"],
    ["f2a1", "\u9AFB\u9B06\u9B18\u9B1A\u9B1F\u9B22\u9B23\u9B25\u9B27\u9B28\u9B29\u9B2A\u9B2E\u9B2F\u9B32\u9B44\u9B43\u9B4F\u9B4D\u9B4E\u9B51\u9B58\u9B74\u9B93\u9B83\u9B91\u9B96\u9B97\u9B9F\u9BA0\u9BA8\u9BB4\u9BC0\u9BCA\u9BB9\u9BC6\u9BCF\u9BD1\u9BD2\u9BE3\u9BE2\u9BE4\u9BD4\u9BE1\u9C3A\u9BF2\u9BF1\u9BF0\u9C15\u9C14\u9C09\u9C13\u9C0C\u9C06\u9C08\u9C12\u9C0A\u9C04\u9C2E\u9C1B\u9C25\u9C24\u9C21\u9C30\u9C47\u9C32\u9C46\u9C3E\u9C5A\u9C60\u9C67\u9C76\u9C78\u9CE7\u9CEC\u9CF0\u9D09\u9D08\u9CEB\u9D03\u9D06\u9D2A\u9D26\u9DAF\u9D23\u9D1F\u9D44\u9D15\u9D12\u9D41\u9D3F\u9D3E\u9D46\u9D48"],
    ["f3a1", "\u9D5D\u9D5E\u9D64\u9D51\u9D50\u9D59\u9D72\u9D89\u9D87\u9DAB\u9D6F\u9D7A\u9D9A\u9DA4\u9DA9\u9DB2\u9DC4\u9DC1\u9DBB\u9DB8\u9DBA\u9DC6\u9DCF\u9DC2\u9DD9\u9DD3\u9DF8\u9DE6\u9DED\u9DEF\u9DFD\u9E1A\u9E1B\u9E1E\u9E75\u9E79\u9E7D\u9E81\u9E88\u9E8B\u9E8C\u9E92\u9E95\u9E91\u9E9D\u9EA5\u9EA9\u9EB8\u9EAA\u9EAD\u9761\u9ECC\u9ECE\u9ECF\u9ED0\u9ED4\u9EDC\u9EDE\u9EDD\u9EE0\u9EE5\u9EE8\u9EEF\u9EF4\u9EF6\u9EF7\u9EF9\u9EFB\u9EFC\u9EFD\u9F07\u9F08\u76B7\u9F15\u9F21\u9F2C\u9F3E\u9F4A\u9F52\u9F54\u9F63\u9F5F\u9F60\u9F61\u9F66\u9F67\u9F6C\u9F6A\u9F77\u9F72\u9F76\u9F95\u9F9C\u9FA0"],
    ["f4a1", "\u582F\u69C7\u9059\u7464\u51DC\u7199"],
    ["f9a1", "\u7E8A\u891C\u9348\u9288\u84DC\u4FC9\u70BB\u6631\u68C8\u92F9\u66FB\u5F45\u4E28\u4EE1\u4EFC\u4F00\u4F03\u4F39\u4F56\u4F92\u4F8A\u4F9A\u4F94\u4FCD\u5040\u5022\u4FFF\u501E\u5046\u5070\u5042\u5094\u50F4\u50D8\u514A\u5164\u519D\u51BE\u51EC\u5215\u529C\u52A6\u52C0\u52DB\u5300\u5307\u5324\u5372\u5393\u53B2\u53DD\uFA0E\u549C\u548A\u54A9\u54FF\u5586\u5759\u5765\u57AC\u57C8\u57C7\uFA0F\uFA10\u589E\u58B2\u590B\u5953\u595B\u595D\u5963\u59A4\u59BA\u5B56\u5BC0\u752F\u5BD8\u5BEC\u5C1E\u5CA6\u5CBA\u5CF5\u5D27\u5D53\uFA11\u5D42\u5D6D\u5DB8\u5DB9\u5DD0\u5F21\u5F34\u5F67\u5FB7"],
    ["faa1", "\u5FDE\u605D\u6085\u608A\u60DE\u60D5\u6120\u60F2\u6111\u6137\u6130\u6198\u6213\u62A6\u63F5\u6460\u649D\u64CE\u654E\u6600\u6615\u663B\u6609\u662E\u661E\u6624\u6665\u6657\u6659\uFA12\u6673\u6699\u66A0\u66B2\u66BF\u66FA\u670E\uF929\u6766\u67BB\u6852\u67C0\u6801\u6844\u68CF\uFA13\u6968\uFA14\u6998\u69E2\u6A30\u6A6B\u6A46\u6A73\u6A7E\u6AE2\u6AE4\u6BD6\u6C3F\u6C5C\u6C86\u6C6F\u6CDA\u6D04\u6D87\u6D6F\u6D96\u6DAC\u6DCF\u6DF8\u6DF2\u6DFC\u6E39\u6E5C\u6E27\u6E3C\u6EBF\u6F88\u6FB5\u6FF5\u7005\u7007\u7028\u7085\u70AB\u710F\u7104\u715C\u7146\u7147\uFA15\u71C1\u71FE\u72B1"],
    ["fba1", "\u72BE\u7324\uFA16\u7377\u73BD\u73C9\u73D6\u73E3\u73D2\u7407\u73F5\u7426\u742A\u7429\u742E\u7462\u7489\u749F\u7501\u756F\u7682\u769C\u769E\u769B\u76A6\uFA17\u7746\u52AF\u7821\u784E\u7864\u787A\u7930\uFA18\uFA19\uFA1A\u7994\uFA1B\u799B\u7AD1\u7AE7\uFA1C\u7AEB\u7B9E\uFA1D\u7D48\u7D5C\u7DB7\u7DA0\u7DD6\u7E52\u7F47\u7FA1\uFA1E\u8301\u8362\u837F\u83C7\u83F6\u8448\u84B4\u8553\u8559\u856B\uFA1F\u85B0\uFA20\uFA21\u8807\u88F5\u8A12\u8A37\u8A79\u8AA7\u8ABE\u8ADF\uFA22\u8AF6\u8B53\u8B7F\u8CF0\u8CF4\u8D12\u8D76\uFA23\u8ECF\uFA24\uFA25\u9067\u90DE\uFA26\u9115\u9127\u91DA"],
    ["fca1", "\u91D7\u91DE\u91ED\u91EE\u91E4\u91E5\u9206\u9210\u920A\u923A\u9240\u923C\u924E\u9259\u9251\u9239\u9267\u92A7\u9277\u9278\u92E7\u92D7\u92D9\u92D0\uFA27\u92D5\u92E0\u92D3\u9325\u9321\u92FB\uFA28\u931E\u92FF\u931D\u9302\u9370\u9357\u93A4\u93C6\u93DE\u93F8\u9431\u9445\u9448\u9592\uF9DC\uFA29\u969D\u96AF\u9733\u973B\u9743\u974D\u974F\u9751\u9755\u9857\u9865\uFA2A\uFA2B\u9927\uFA2C\u999E\u9A4E\u9AD9\u9ADC\u9B75\u9B72\u9B8F\u9BB1\u9BBB\u9C00\u9D70\u9D6B\uFA2D\u9E19\u9ED1"],
    ["fcf1", "\u2170", 9, "\uFFE2\uFFE4\uFF07\uFF02"],
    ["8fa2af", "\u02D8\u02C7\xB8\u02D9\u02DD\xAF\u02DB\u02DA\uFF5E\u0384\u0385"],
    ["8fa2c2", "\xA1\xA6\xBF"],
    ["8fa2eb", "\xBA\xAA\xA9\xAE\u2122\xA4\u2116"],
    ["8fa6e1", "\u0386\u0388\u0389\u038A\u03AA"],
    ["8fa6e7", "\u038C"],
    ["8fa6e9", "\u038E\u03AB"],
    ["8fa6ec", "\u038F"],
    ["8fa6f1", "\u03AC\u03AD\u03AE\u03AF\u03CA\u0390\u03CC\u03C2\u03CD\u03CB\u03B0\u03CE"],
    ["8fa7c2", "\u0402", 10, "\u040E\u040F"],
    ["8fa7f2", "\u0452", 10, "\u045E\u045F"],
    ["8fa9a1", "\xC6\u0110"],
    ["8fa9a4", "\u0126"],
    ["8fa9a6", "\u0132"],
    ["8fa9a8", "\u0141\u013F"],
    ["8fa9ab", "\u014A\xD8\u0152"],
    ["8fa9af", "\u0166\xDE"],
    ["8fa9c1", "\xE6\u0111\xF0\u0127\u0131\u0133\u0138\u0142\u0140\u0149\u014B\xF8\u0153\xDF\u0167\xFE"],
    ["8faaa1", "\xC1\xC0\xC4\xC2\u0102\u01CD\u0100\u0104\xC5\xC3\u0106\u0108\u010C\xC7\u010A\u010E\xC9\xC8\xCB\xCA\u011A\u0116\u0112\u0118"],
    ["8faaba", "\u011C\u011E\u0122\u0120\u0124\xCD\xCC\xCF\xCE\u01CF\u0130\u012A\u012E\u0128\u0134\u0136\u0139\u013D\u013B\u0143\u0147\u0145\xD1\xD3\xD2\xD6\xD4\u01D1\u0150\u014C\xD5\u0154\u0158\u0156\u015A\u015C\u0160\u015E\u0164\u0162\xDA\xD9\xDC\xDB\u016C\u01D3\u0170\u016A\u0172\u016E\u0168\u01D7\u01DB\u01D9\u01D5\u0174\xDD\u0178\u0176\u0179\u017D\u017B"],
    ["8faba1", "\xE1\xE0\xE4\xE2\u0103\u01CE\u0101\u0105\xE5\xE3\u0107\u0109\u010D\xE7\u010B\u010F\xE9\xE8\xEB\xEA\u011B\u0117\u0113\u0119\u01F5\u011D\u011F"],
    ["8fabbd", "\u0121\u0125\xED\xEC\xEF\xEE\u01D0"],
    ["8fabc5", "\u012B\u012F\u0129\u0135\u0137\u013A\u013E\u013C\u0144\u0148\u0146\xF1\xF3\xF2\xF6\xF4\u01D2\u0151\u014D\xF5\u0155\u0159\u0157\u015B\u015D\u0161\u015F\u0165\u0163\xFA\xF9\xFC\xFB\u016D\u01D4\u0171\u016B\u0173\u016F\u0169\u01D8\u01DC\u01DA\u01D6\u0175\xFD\xFF\u0177\u017A\u017E\u017C"],
    ["8fb0a1", "\u4E02\u4E04\u4E05\u4E0C\u4E12\u4E1F\u4E23\u4E24\u4E28\u4E2B\u4E2E\u4E2F\u4E30\u4E35\u4E40\u4E41\u4E44\u4E47\u4E51\u4E5A\u4E5C\u4E63\u4E68\u4E69\u4E74\u4E75\u4E79\u4E7F\u4E8D\u4E96\u4E97\u4E9D\u4EAF\u4EB9\u4EC3\u4ED0\u4EDA\u4EDB\u4EE0\u4EE1\u4EE2\u4EE8\u4EEF\u4EF1\u4EF3\u4EF5\u4EFD\u4EFE\u4EFF\u4F00\u4F02\u4F03\u4F08\u4F0B\u4F0C\u4F12\u4F15\u4F16\u4F17\u4F19\u4F2E\u4F31\u4F60\u4F33\u4F35\u4F37\u4F39\u4F3B\u4F3E\u4F40\u4F42\u4F48\u4F49\u4F4B\u4F4C\u4F52\u4F54\u4F56\u4F58\u4F5F\u4F63\u4F6A\u4F6C\u4F6E\u4F71\u4F77\u4F78\u4F79\u4F7A\u4F7D\u4F7E\u4F81\u4F82\u4F84"],
    ["8fb1a1", "\u4F85\u4F89\u4F8A\u4F8C\u4F8E\u4F90\u4F92\u4F93\u4F94\u4F97\u4F99\u4F9A\u4F9E\u4F9F\u4FB2\u4FB7\u4FB9\u4FBB\u4FBC\u4FBD\u4FBE\u4FC0\u4FC1\u4FC5\u4FC6\u4FC8\u4FC9\u4FCB\u4FCC\u4FCD\u4FCF\u4FD2\u4FDC\u4FE0\u4FE2\u4FF0\u4FF2\u4FFC\u4FFD\u4FFF\u5000\u5001\u5004\u5007\u500A\u500C\u500E\u5010\u5013\u5017\u5018\u501B\u501C\u501D\u501E\u5022\u5027\u502E\u5030\u5032\u5033\u5035\u5040\u5041\u5042\u5045\u5046\u504A\u504C\u504E\u5051\u5052\u5053\u5057\u5059\u505F\u5060\u5062\u5063\u5066\u5067\u506A\u506D\u5070\u5071\u503B\u5081\u5083\u5084\u5086\u508A\u508E\u508F\u5090"],
    ["8fb2a1", "\u5092\u5093\u5094\u5096\u509B\u509C\u509E", 4, "\u50AA\u50AF\u50B0\u50B9\u50BA\u50BD\u50C0\u50C3\u50C4\u50C7\u50CC\u50CE\u50D0\u50D3\u50D4\u50D8\u50DC\u50DD\u50DF\u50E2\u50E4\u50E6\u50E8\u50E9\u50EF\u50F1\u50F6\u50FA\u50FE\u5103\u5106\u5107\u5108\u510B\u510C\u510D\u510E\u50F2\u5110\u5117\u5119\u511B\u511C\u511D\u511E\u5123\u5127\u5128\u512C\u512D\u512F\u5131\u5133\u5134\u5135\u5138\u5139\u5142\u514A\u514F\u5153\u5155\u5157\u5158\u515F\u5164\u5166\u517E\u5183\u5184\u518B\u518E\u5198\u519D\u51A1\u51A3\u51AD\u51B8\u51BA\u51BC\u51BE\u51BF\u51C2"],
    ["8fb3a1", "\u51C8\u51CF\u51D1\u51D2\u51D3\u51D5\u51D8\u51DE\u51E2\u51E5\u51EE\u51F2\u51F3\u51F4\u51F7\u5201\u5202\u5205\u5212\u5213\u5215\u5216\u5218\u5222\u5228\u5231\u5232\u5235\u523C\u5245\u5249\u5255\u5257\u5258\u525A\u525C\u525F\u5260\u5261\u5266\u526E\u5277\u5278\u5279\u5280\u5282\u5285\u528A\u528C\u5293\u5295\u5296\u5297\u5298\u529A\u529C\u52A4\u52A5\u52A6\u52A7\u52AF\u52B0\u52B6\u52B7\u52B8\u52BA\u52BB\u52BD\u52C0\u52C4\u52C6\u52C8\u52CC\u52CF\u52D1\u52D4\u52D6\u52DB\u52DC\u52E1\u52E5\u52E8\u52E9\u52EA\u52EC\u52F0\u52F1\u52F4\u52F6\u52F7\u5300\u5303\u530A\u530B"],
    ["8fb4a1", "\u530C\u5311\u5313\u5318\u531B\u531C\u531E\u531F\u5325\u5327\u5328\u5329\u532B\u532C\u532D\u5330\u5332\u5335\u533C\u533D\u533E\u5342\u534C\u534B\u5359\u535B\u5361\u5363\u5365\u536C\u536D\u5372\u5379\u537E\u5383\u5387\u5388\u538E\u5393\u5394\u5399\u539D\u53A1\u53A4\u53AA\u53AB\u53AF\u53B2\u53B4\u53B5\u53B7\u53B8\u53BA\u53BD\u53C0\u53C5\u53CF\u53D2\u53D3\u53D5\u53DA\u53DD\u53DE\u53E0\u53E6\u53E7\u53F5\u5402\u5413\u541A\u5421\u5427\u5428\u542A\u542F\u5431\u5434\u5435\u5443\u5444\u5447\u544D\u544F\u545E\u5462\u5464\u5466\u5467\u5469\u546B\u546D\u546E\u5474\u547F"],
    ["8fb5a1", "\u5481\u5483\u5485\u5488\u5489\u548D\u5491\u5495\u5496\u549C\u549F\u54A1\u54A6\u54A7\u54A9\u54AA\u54AD\u54AE\u54B1\u54B7\u54B9\u54BA\u54BB\u54BF\u54C6\u54CA\u54CD\u54CE\u54E0\u54EA\u54EC\u54EF\u54F6\u54FC\u54FE\u54FF\u5500\u5501\u5505\u5508\u5509\u550C\u550D\u550E\u5515\u552A\u552B\u5532\u5535\u5536\u553B\u553C\u553D\u5541\u5547\u5549\u554A\u554D\u5550\u5551\u5558\u555A\u555B\u555E\u5560\u5561\u5564\u5566\u557F\u5581\u5582\u5586\u5588\u558E\u558F\u5591\u5592\u5593\u5594\u5597\u55A3\u55A4\u55AD\u55B2\u55BF\u55C1\u55C3\u55C6\u55C9\u55CB\u55CC\u55CE\u55D1\u55D2"],
    ["8fb6a1", "\u55D3\u55D7\u55D8\u55DB\u55DE\u55E2\u55E9\u55F6\u55FF\u5605\u5608\u560A\u560D", 5, "\u5619\u562C\u5630\u5633\u5635\u5637\u5639\u563B\u563C\u563D\u563F\u5640\u5641\u5643\u5644\u5646\u5649\u564B\u564D\u564F\u5654\u565E\u5660\u5661\u5662\u5663\u5666\u5669\u566D\u566F\u5671\u5672\u5675\u5684\u5685\u5688\u568B\u568C\u5695\u5699\u569A\u569D\u569E\u569F\u56A6\u56A7\u56A8\u56A9\u56AB\u56AC\u56AD\u56B1\u56B3\u56B7\u56BE\u56C5\u56C9\u56CA\u56CB\u56CF\u56D0\u56CC\u56CD\u56D9\u56DC\u56DD\u56DF\u56E1\u56E4", 4, "\u56F1\u56EB\u56ED"],
    ["8fb7a1", "\u56F6\u56F7\u5701\u5702\u5707\u570A\u570C\u5711\u5715\u571A\u571B\u571D\u5720\u5722\u5723\u5724\u5725\u5729\u572A\u572C\u572E\u572F\u5733\u5734\u573D\u573E\u573F\u5745\u5746\u574C\u574D\u5752\u5762\u5765\u5767\u5768\u576B\u576D", 4, "\u5773\u5774\u5775\u5777\u5779\u577A\u577B\u577C\u577E\u5781\u5783\u578C\u5794\u5797\u5799\u579A\u579C\u579D\u579E\u579F\u57A1\u5795\u57A7\u57A8\u57A9\u57AC\u57B8\u57BD\u57C7\u57C8\u57CC\u57CF\u57D5\u57DD\u57DE\u57E4\u57E6\u57E7\u57E9\u57ED\u57F0\u57F5\u57F6\u57F8\u57FD\u57FE\u57FF\u5803\u5804\u5808\u5809\u57E1"],
    ["8fb8a1", "\u580C\u580D\u581B\u581E\u581F\u5820\u5826\u5827\u582D\u5832\u5839\u583F\u5849\u584C\u584D\u584F\u5850\u5855\u585F\u5861\u5864\u5867\u5868\u5878\u587C\u587F\u5880\u5881\u5887\u5888\u5889\u588A\u588C\u588D\u588F\u5890\u5894\u5896\u589D\u58A0\u58A1\u58A2\u58A6\u58A9\u58B1\u58B2\u58C4\u58BC\u58C2\u58C8\u58CD\u58CE\u58D0\u58D2\u58D4\u58D6\u58DA\u58DD\u58E1\u58E2\u58E9\u58F3\u5905\u5906\u590B\u590C\u5912\u5913\u5914\u8641\u591D\u5921\u5923\u5924\u5928\u592F\u5930\u5933\u5935\u5936\u593F\u5943\u5946\u5952\u5953\u5959\u595B\u595D\u595E\u595F\u5961\u5963\u596B\u596D"],
    ["8fb9a1", "\u596F\u5972\u5975\u5976\u5979\u597B\u597C\u598B\u598C\u598E\u5992\u5995\u5997\u599F\u59A4\u59A7\u59AD\u59AE\u59AF\u59B0\u59B3\u59B7\u59BA\u59BC\u59C1\u59C3\u59C4\u59C8\u59CA\u59CD\u59D2\u59DD\u59DE\u59DF\u59E3\u59E4\u59E7\u59EE\u59EF\u59F1\u59F2\u59F4\u59F7\u5A00\u5A04\u5A0C\u5A0D\u5A0E\u5A12\u5A13\u5A1E\u5A23\u5A24\u5A27\u5A28\u5A2A\u5A2D\u5A30\u5A44\u5A45\u5A47\u5A48\u5A4C\u5A50\u5A55\u5A5E\u5A63\u5A65\u5A67\u5A6D\u5A77\u5A7A\u5A7B\u5A7E\u5A8B\u5A90\u5A93\u5A96\u5A99\u5A9C\u5A9E\u5A9F\u5AA0\u5AA2\u5AA7\u5AAC\u5AB1\u5AB2\u5AB3\u5AB5\u5AB8\u5ABA\u5ABB\u5ABF"],
    ["8fbaa1", "\u5AC4\u5AC6\u5AC8\u5ACF\u5ADA\u5ADC\u5AE0\u5AE5\u5AEA\u5AEE\u5AF5\u5AF6\u5AFD\u5B00\u5B01\u5B08\u5B17\u5B34\u5B19\u5B1B\u5B1D\u5B21\u5B25\u5B2D\u5B38\u5B41\u5B4B\u5B4C\u5B52\u5B56\u5B5E\u5B68\u5B6E\u5B6F\u5B7C\u5B7D\u5B7E\u5B7F\u5B81\u5B84\u5B86\u5B8A\u5B8E\u5B90\u5B91\u5B93\u5B94\u5B96\u5BA8\u5BA9\u5BAC\u5BAD\u5BAF\u5BB1\u5BB2\u5BB7\u5BBA\u5BBC\u5BC0\u5BC1\u5BCD\u5BCF\u5BD6", 4, "\u5BE0\u5BEF\u5BF1\u5BF4\u5BFD\u5C0C\u5C17\u5C1E\u5C1F\u5C23\u5C26\u5C29\u5C2B\u5C2C\u5C2E\u5C30\u5C32\u5C35\u5C36\u5C59\u5C5A\u5C5C\u5C62\u5C63\u5C67\u5C68\u5C69"],
    ["8fbba1", "\u5C6D\u5C70\u5C74\u5C75\u5C7A\u5C7B\u5C7C\u5C7D\u5C87\u5C88\u5C8A\u5C8F\u5C92\u5C9D\u5C9F\u5CA0\u5CA2\u5CA3\u5CA6\u5CAA\u5CB2\u5CB4\u5CB5\u5CBA\u5CC9\u5CCB\u5CD2\u5CDD\u5CD7\u5CEE\u5CF1\u5CF2\u5CF4\u5D01\u5D06\u5D0D\u5D12\u5D2B\u5D23\u5D24\u5D26\u5D27\u5D31\u5D34\u5D39\u5D3D\u5D3F\u5D42\u5D43\u5D46\u5D48\u5D55\u5D51\u5D59\u5D4A\u5D5F\u5D60\u5D61\u5D62\u5D64\u5D6A\u5D6D\u5D70\u5D79\u5D7A\u5D7E\u5D7F\u5D81\u5D83\u5D88\u5D8A\u5D92\u5D93\u5D94\u5D95\u5D99\u5D9B\u5D9F\u5DA0\u5DA7\u5DAB\u5DB0\u5DB4\u5DB8\u5DB9\u5DC3\u5DC7\u5DCB\u5DD0\u5DCE\u5DD8\u5DD9\u5DE0\u5DE4"],
    ["8fbca1", "\u5DE9\u5DF8\u5DF9\u5E00\u5E07\u5E0D\u5E12\u5E14\u5E15\u5E18\u5E1F\u5E20\u5E2E\u5E28\u5E32\u5E35\u5E3E\u5E4B\u5E50\u5E49\u5E51\u5E56\u5E58\u5E5B\u5E5C\u5E5E\u5E68\u5E6A", 4, "\u5E70\u5E80\u5E8B\u5E8E\u5EA2\u5EA4\u5EA5\u5EA8\u5EAA\u5EAC\u5EB1\u5EB3\u5EBD\u5EBE\u5EBF\u5EC6\u5ECC\u5ECB\u5ECE\u5ED1\u5ED2\u5ED4\u5ED5\u5EDC\u5EDE\u5EE5\u5EEB\u5F02\u5F06\u5F07\u5F08\u5F0E\u5F19\u5F1C\u5F1D\u5F21\u5F22\u5F23\u5F24\u5F28\u5F2B\u5F2C\u5F2E\u5F30\u5F34\u5F36\u5F3B\u5F3D\u5F3F\u5F40\u5F44\u5F45\u5F47\u5F4D\u5F50\u5F54\u5F58\u5F5B\u5F60\u5F63\u5F64\u5F67"],
    ["8fbda1", "\u5F6F\u5F72\u5F74\u5F75\u5F78\u5F7A\u5F7D\u5F7E\u5F89\u5F8D\u5F8F\u5F96\u5F9C\u5F9D\u5FA2\u5FA7\u5FAB\u5FA4\u5FAC\u5FAF\u5FB0\u5FB1\u5FB8\u5FC4\u5FC7\u5FC8\u5FC9\u5FCB\u5FD0", 4, "\u5FDE\u5FE1\u5FE2\u5FE8\u5FE9\u5FEA\u5FEC\u5FED\u5FEE\u5FEF\u5FF2\u5FF3\u5FF6\u5FFA\u5FFC\u6007\u600A\u600D\u6013\u6014\u6017\u6018\u601A\u601F\u6024\u602D\u6033\u6035\u6040\u6047\u6048\u6049\u604C\u6051\u6054\u6056\u6057\u605D\u6061\u6067\u6071\u607E\u607F\u6082\u6086\u6088\u608A\u608E\u6091\u6093\u6095\u6098\u609D\u609E\u60A2\u60A4\u60A5\u60A8\u60B0\u60B1\u60B7"],
    ["8fbea1", "\u60BB\u60BE\u60C2\u60C4\u60C8\u60C9\u60CA\u60CB\u60CE\u60CF\u60D4\u60D5\u60D9\u60DB\u60DD\u60DE\u60E2\u60E5\u60F2\u60F5\u60F8\u60FC\u60FD\u6102\u6107\u610A\u610C\u6110", 4, "\u6116\u6117\u6119\u611C\u611E\u6122\u612A\u612B\u6130\u6131\u6135\u6136\u6137\u6139\u6141\u6145\u6146\u6149\u615E\u6160\u616C\u6172\u6178\u617B\u617C\u617F\u6180\u6181\u6183\u6184\u618B\u618D\u6192\u6193\u6197\u6198\u619C\u619D\u619F\u61A0\u61A5\u61A8\u61AA\u61AD\u61B8\u61B9\u61BC\u61C0\u61C1\u61C2\u61CE\u61CF\u61D5\u61DC\u61DD\u61DE\u61DF\u61E1\u61E2\u61E7\u61E9\u61E5"],
    ["8fbfa1", "\u61EC\u61ED\u61EF\u6201\u6203\u6204\u6207\u6213\u6215\u621C\u6220\u6222\u6223\u6227\u6229\u622B\u6239\u623D\u6242\u6243\u6244\u6246\u624C\u6250\u6251\u6252\u6254\u6256\u625A\u625C\u6264\u626D\u626F\u6273\u627A\u627D\u628D\u628E\u628F\u6290\u62A6\u62A8\u62B3\u62B6\u62B7\u62BA\u62BE\u62BF\u62C4\u62CE\u62D5\u62D6\u62DA\u62EA\u62F2\u62F4\u62FC\u62FD\u6303\u6304\u630A\u630B\u630D\u6310\u6313\u6316\u6318\u6329\u632A\u632D\u6335\u6336\u6339\u633C\u6341\u6342\u6343\u6344\u6346\u634A\u634B\u634E\u6352\u6353\u6354\u6358\u635B\u6365\u6366\u636C\u636D\u6371\u6374\u6375"],
    ["8fc0a1", "\u6378\u637C\u637D\u637F\u6382\u6384\u6387\u638A\u6390\u6394\u6395\u6399\u639A\u639E\u63A4\u63A6\u63AD\u63AE\u63AF\u63BD\u63C1\u63C5\u63C8\u63CE\u63D1\u63D3\u63D4\u63D5\u63DC\u63E0\u63E5\u63EA\u63EC\u63F2\u63F3\u63F5\u63F8\u63F9\u6409\u640A\u6410\u6412\u6414\u6418\u641E\u6420\u6422\u6424\u6425\u6429\u642A\u642F\u6430\u6435\u643D\u643F\u644B\u644F\u6451\u6452\u6453\u6454\u645A\u645B\u645C\u645D\u645F\u6460\u6461\u6463\u646D\u6473\u6474\u647B\u647D\u6485\u6487\u648F\u6490\u6491\u6498\u6499\u649B\u649D\u649F\u64A1\u64A3\u64A6\u64A8\u64AC\u64B3\u64BD\u64BE\u64BF"],
    ["8fc1a1", "\u64C4\u64C9\u64CA\u64CB\u64CC\u64CE\u64D0\u64D1\u64D5\u64D7\u64E4\u64E5\u64E9\u64EA\u64ED\u64F0\u64F5\u64F7\u64FB\u64FF\u6501\u6504\u6508\u6509\u650A\u650F\u6513\u6514\u6516\u6519\u651B\u651E\u651F\u6522\u6526\u6529\u652E\u6531\u653A\u653C\u653D\u6543\u6547\u6549\u6550\u6552\u6554\u655F\u6560\u6567\u656B\u657A\u657D\u6581\u6585\u658A\u6592\u6595\u6598\u659D\u65A0\u65A3\u65A6\u65AE\u65B2\u65B3\u65B4\u65BF\u65C2\u65C8\u65C9\u65CE\u65D0\u65D4\u65D6\u65D8\u65DF\u65F0\u65F2\u65F4\u65F5\u65F9\u65FE\u65FF\u6600\u6604\u6608\u6609\u660D\u6611\u6612\u6615\u6616\u661D"],
    ["8fc2a1", "\u661E\u6621\u6622\u6623\u6624\u6626\u6629\u662A\u662B\u662C\u662E\u6630\u6631\u6633\u6639\u6637\u6640\u6645\u6646\u664A\u664C\u6651\u664E\u6657\u6658\u6659\u665B\u665C\u6660\u6661\u66FB\u666A\u666B\u666C\u667E\u6673\u6675\u667F\u6677\u6678\u6679\u667B\u6680\u667C\u668B\u668C\u668D\u6690\u6692\u6699\u669A\u669B\u669C\u669F\u66A0\u66A4\u66AD\u66B1\u66B2\u66B5\u66BB\u66BF\u66C0\u66C2\u66C3\u66C8\u66CC\u66CE\u66CF\u66D4\u66DB\u66DF\u66E8\u66EB\u66EC\u66EE\u66FA\u6705\u6707\u670E\u6713\u6719\u671C\u6720\u6722\u6733\u673E\u6745\u6747\u6748\u674C\u6754\u6755\u675D"],
    ["8fc3a1", "\u6766\u676C\u676E\u6774\u6776\u677B\u6781\u6784\u678E\u678F\u6791\u6793\u6796\u6798\u6799\u679B\u67B0\u67B1\u67B2\u67B5\u67BB\u67BC\u67BD\u67F9\u67C0\u67C2\u67C3\u67C5\u67C8\u67C9\u67D2\u67D7\u67D9\u67DC\u67E1\u67E6\u67F0\u67F2\u67F6\u67F7\u6852\u6814\u6819\u681D\u681F\u6828\u6827\u682C\u682D\u682F\u6830\u6831\u6833\u683B\u683F\u6844\u6845\u684A\u684C\u6855\u6857\u6858\u685B\u686B\u686E", 4, "\u6875\u6879\u687A\u687B\u687C\u6882\u6884\u6886\u6888\u6896\u6898\u689A\u689C\u68A1\u68A3\u68A5\u68A9\u68AA\u68AE\u68B2\u68BB\u68C5\u68C8\u68CC\u68CF"],
    ["8fc4a1", "\u68D0\u68D1\u68D3\u68D6\u68D9\u68DC\u68DD\u68E5\u68E8\u68EA\u68EB\u68EC\u68ED\u68F0\u68F1\u68F5\u68F6\u68FB\u68FC\u68FD\u6906\u6909\u690A\u6910\u6911\u6913\u6916\u6917\u6931\u6933\u6935\u6938\u693B\u6942\u6945\u6949\u694E\u6957\u695B\u6963\u6964\u6965\u6966\u6968\u6969\u696C\u6970\u6971\u6972\u697A\u697B\u697F\u6980\u698D\u6992\u6996\u6998\u69A1\u69A5\u69A6\u69A8\u69AB\u69AD\u69AF\u69B7\u69B8\u69BA\u69BC\u69C5\u69C8\u69D1\u69D6\u69D7\u69E2\u69E5\u69EE\u69EF\u69F1\u69F3\u69F5\u69FE\u6A00\u6A01\u6A03\u6A0F\u6A11\u6A15\u6A1A\u6A1D\u6A20\u6A24\u6A28\u6A30\u6A32"],
    ["8fc5a1", "\u6A34\u6A37\u6A3B\u6A3E\u6A3F\u6A45\u6A46\u6A49\u6A4A\u6A4E\u6A50\u6A51\u6A52\u6A55\u6A56\u6A5B\u6A64\u6A67\u6A6A\u6A71\u6A73\u6A7E\u6A81\u6A83\u6A86\u6A87\u6A89\u6A8B\u6A91\u6A9B\u6A9D\u6A9E\u6A9F\u6AA5\u6AAB\u6AAF\u6AB0\u6AB1\u6AB4\u6ABD\u6ABE\u6ABF\u6AC6\u6AC9\u6AC8\u6ACC\u6AD0\u6AD4\u6AD5\u6AD6\u6ADC\u6ADD\u6AE4\u6AE7\u6AEC\u6AF0\u6AF1\u6AF2\u6AFC\u6AFD\u6B02\u6B03\u6B06\u6B07\u6B09\u6B0F\u6B10\u6B11\u6B17\u6B1B\u6B1E\u6B24\u6B28\u6B2B\u6B2C\u6B2F\u6B35\u6B36\u6B3B\u6B3F\u6B46\u6B4A\u6B4D\u6B52\u6B56\u6B58\u6B5D\u6B60\u6B67\u6B6B\u6B6E\u6B70\u6B75\u6B7D"],
    ["8fc6a1", "\u6B7E\u6B82\u6B85\u6B97\u6B9B\u6B9F\u6BA0\u6BA2\u6BA3\u6BA8\u6BA9\u6BAC\u6BAD\u6BAE\u6BB0\u6BB8\u6BB9\u6BBD\u6BBE\u6BC3\u6BC4\u6BC9\u6BCC\u6BD6\u6BDA\u6BE1\u6BE3\u6BE6\u6BE7\u6BEE\u6BF1\u6BF7\u6BF9\u6BFF\u6C02\u6C04\u6C05\u6C09\u6C0D\u6C0E\u6C10\u6C12\u6C19\u6C1F\u6C26\u6C27\u6C28\u6C2C\u6C2E\u6C33\u6C35\u6C36\u6C3A\u6C3B\u6C3F\u6C4A\u6C4B\u6C4D\u6C4F\u6C52\u6C54\u6C59\u6C5B\u6C5C\u6C6B\u6C6D\u6C6F\u6C74\u6C76\u6C78\u6C79\u6C7B\u6C85\u6C86\u6C87\u6C89\u6C94\u6C95\u6C97\u6C98\u6C9C\u6C9F\u6CB0\u6CB2\u6CB4\u6CC2\u6CC6\u6CCD\u6CCF\u6CD0\u6CD1\u6CD2\u6CD4\u6CD6"],
    ["8fc7a1", "\u6CDA\u6CDC\u6CE0\u6CE7\u6CE9\u6CEB\u6CEC\u6CEE\u6CF2\u6CF4\u6D04\u6D07\u6D0A\u6D0E\u6D0F\u6D11\u6D13\u6D1A\u6D26\u6D27\u6D28\u6C67\u6D2E\u6D2F\u6D31\u6D39\u6D3C\u6D3F\u6D57\u6D5E\u6D5F\u6D61\u6D65\u6D67\u6D6F\u6D70\u6D7C\u6D82\u6D87\u6D91\u6D92\u6D94\u6D96\u6D97\u6D98\u6DAA\u6DAC\u6DB4\u6DB7\u6DB9\u6DBD\u6DBF\u6DC4\u6DC8\u6DCA\u6DCE\u6DCF\u6DD6\u6DDB\u6DDD\u6DDF\u6DE0\u6DE2\u6DE5\u6DE9\u6DEF\u6DF0\u6DF4\u6DF6\u6DFC\u6E00\u6E04\u6E1E\u6E22\u6E27\u6E32\u6E36\u6E39\u6E3B\u6E3C\u6E44\u6E45\u6E48\u6E49\u6E4B\u6E4F\u6E51\u6E52\u6E53\u6E54\u6E57\u6E5C\u6E5D\u6E5E"],
    ["8fc8a1", "\u6E62\u6E63\u6E68\u6E73\u6E7B\u6E7D\u6E8D\u6E93\u6E99\u6EA0\u6EA7\u6EAD\u6EAE\u6EB1\u6EB3\u6EBB\u6EBF\u6EC0\u6EC1\u6EC3\u6EC7\u6EC8\u6ECA\u6ECD\u6ECE\u6ECF\u6EEB\u6EED\u6EEE\u6EF9\u6EFB\u6EFD\u6F04\u6F08\u6F0A\u6F0C\u6F0D\u6F16\u6F18\u6F1A\u6F1B\u6F26\u6F29\u6F2A\u6F2F\u6F30\u6F33\u6F36\u6F3B\u6F3C\u6F2D\u6F4F\u6F51\u6F52\u6F53\u6F57\u6F59\u6F5A\u6F5D\u6F5E\u6F61\u6F62\u6F68\u6F6C\u6F7D\u6F7E\u6F83\u6F87\u6F88\u6F8B\u6F8C\u6F8D\u6F90\u6F92\u6F93\u6F94\u6F96\u6F9A\u6F9F\u6FA0\u6FA5\u6FA6\u6FA7\u6FA8\u6FAE\u6FAF\u6FB0\u6FB5\u6FB6\u6FBC\u6FC5\u6FC7\u6FC8\u6FCA"],
    ["8fc9a1", "\u6FDA\u6FDE\u6FE8\u6FE9\u6FF0\u6FF5\u6FF9\u6FFC\u6FFD\u7000\u7005\u7006\u7007\u700D\u7017\u7020\u7023\u702F\u7034\u7037\u7039\u703C\u7043\u7044\u7048\u7049\u704A\u704B\u7054\u7055\u705D\u705E\u704E\u7064\u7065\u706C\u706E\u7075\u7076\u707E\u7081\u7085\u7086\u7094", 4, "\u709B\u70A4\u70AB\u70B0\u70B1\u70B4\u70B7\u70CA\u70D1\u70D3\u70D4\u70D5\u70D6\u70D8\u70DC\u70E4\u70FA\u7103", 4, "\u710B\u710C\u710F\u711E\u7120\u712B\u712D\u712F\u7130\u7131\u7138\u7141\u7145\u7146\u7147\u714A\u714B\u7150\u7152\u7157\u715A\u715C\u715E\u7160"],
    ["8fcaa1", "\u7168\u7179\u7180\u7185\u7187\u718C\u7192\u719A\u719B\u71A0\u71A2\u71AF\u71B0\u71B2\u71B3\u71BA\u71BF\u71C0\u71C1\u71C4\u71CB\u71CC\u71D3\u71D6\u71D9\u71DA\u71DC\u71F8\u71FE\u7200\u7207\u7208\u7209\u7213\u7217\u721A\u721D\u721F\u7224\u722B\u722F\u7234\u7238\u7239\u7241\u7242\u7243\u7245\u724E\u724F\u7250\u7253\u7255\u7256\u725A\u725C\u725E\u7260\u7263\u7268\u726B\u726E\u726F\u7271\u7277\u7278\u727B\u727C\u727F\u7284\u7289\u728D\u728E\u7293\u729B\u72A8\u72AD\u72AE\u72B1\u72B4\u72BE\u72C1\u72C7\u72C9\u72CC\u72D5\u72D6\u72D8\u72DF\u72E5\u72F3\u72F4\u72FA\u72FB"],
    ["8fcba1", "\u72FE\u7302\u7304\u7305\u7307\u730B\u730D\u7312\u7313\u7318\u7319\u731E\u7322\u7324\u7327\u7328\u732C\u7331\u7332\u7335\u733A\u733B\u733D\u7343\u734D\u7350\u7352\u7356\u7358\u735D\u735E\u735F\u7360\u7366\u7367\u7369\u736B\u736C\u736E\u736F\u7371\u7377\u7379\u737C\u7380\u7381\u7383\u7385\u7386\u738E\u7390\u7393\u7395\u7397\u7398\u739C\u739E\u739F\u73A0\u73A2\u73A5\u73A6\u73AA\u73AB\u73AD\u73B5\u73B7\u73B9\u73BC\u73BD\u73BF\u73C5\u73C6\u73C9\u73CB\u73CC\u73CF\u73D2\u73D3\u73D6\u73D9\u73DD\u73E1\u73E3\u73E6\u73E7\u73E9\u73F4\u73F5\u73F7\u73F9\u73FA\u73FB\u73FD"],
    ["8fcca1", "\u73FF\u7400\u7401\u7404\u7407\u740A\u7411\u741A\u741B\u7424\u7426\u7428", 9, "\u7439\u7440\u7443\u7444\u7446\u7447\u744B\u744D\u7451\u7452\u7457\u745D\u7462\u7466\u7467\u7468\u746B\u746D\u746E\u7471\u7472\u7480\u7481\u7485\u7486\u7487\u7489\u748F\u7490\u7491\u7492\u7498\u7499\u749A\u749C\u749F\u74A0\u74A1\u74A3\u74A6\u74A8\u74A9\u74AA\u74AB\u74AE\u74AF\u74B1\u74B2\u74B5\u74B9\u74BB\u74BF\u74C8\u74C9\u74CC\u74D0\u74D3\u74D8\u74DA\u74DB\u74DE\u74DF\u74E4\u74E8\u74EA\u74EB\u74EF\u74F4\u74FA\u74FB\u74FC\u74FF\u7506"],
    ["8fcda1", "\u7512\u7516\u7517\u7520\u7521\u7524\u7527\u7529\u752A\u752F\u7536\u7539\u753D\u753E\u753F\u7540\u7543\u7547\u7548\u754E\u7550\u7552\u7557\u755E\u755F\u7561\u756F\u7571\u7579", 5, "\u7581\u7585\u7590\u7592\u7593\u7595\u7599\u759C\u75A2\u75A4\u75B4\u75BA\u75BF\u75C0\u75C1\u75C4\u75C6\u75CC\u75CE\u75CF\u75D7\u75DC\u75DF\u75E0\u75E1\u75E4\u75E7\u75EC\u75EE\u75EF\u75F1\u75F9\u7600\u7602\u7603\u7604\u7607\u7608\u760A\u760C\u760F\u7612\u7613\u7615\u7616\u7619\u761B\u761C\u761D\u761E\u7623\u7625\u7626\u7629\u762D\u7632\u7633\u7635\u7638\u7639"],
    ["8fcea1", "\u763A\u763C\u764A\u7640\u7641\u7643\u7644\u7645\u7649\u764B\u7655\u7659\u765F\u7664\u7665\u766D\u766E\u766F\u7671\u7674\u7681\u7685\u768C\u768D\u7695\u769B\u769C\u769D\u769F\u76A0\u76A2", 6, "\u76AA\u76AD\u76BD\u76C1\u76C5\u76C9\u76CB\u76CC\u76CE\u76D4\u76D9\u76E0\u76E6\u76E8\u76EC\u76F0\u76F1\u76F6\u76F9\u76FC\u7700\u7706\u770A\u770E\u7712\u7714\u7715\u7717\u7719\u771A\u771C\u7722\u7728\u772D\u772E\u772F\u7734\u7735\u7736\u7739\u773D\u773E\u7742\u7745\u7746\u774A\u774D\u774E\u774F\u7752\u7756\u7757\u775C\u775E\u775F\u7760\u7762"],
    ["8fcfa1", "\u7764\u7767\u776A\u776C\u7770\u7772\u7773\u7774\u777A\u777D\u7780\u7784\u778C\u778D\u7794\u7795\u7796\u779A\u779F\u77A2\u77A7\u77AA\u77AE\u77AF\u77B1\u77B5\u77BE\u77C3\u77C9\u77D1\u77D2\u77D5\u77D9\u77DE\u77DF\u77E0\u77E4\u77E6\u77EA\u77EC\u77F0\u77F1\u77F4\u77F8\u77FB\u7805\u7806\u7809\u780D\u780E\u7811\u781D\u7821\u7822\u7823\u782D\u782E\u7830\u7835\u7837\u7843\u7844\u7847\u7848\u784C\u784E\u7852\u785C\u785E\u7860\u7861\u7863\u7864\u7868\u786A\u786E\u787A\u787E\u788A\u788F\u7894\u7898\u78A1\u789D\u789E\u789F\u78A4\u78A8\u78AC\u78AD\u78B0\u78B1\u78B2\u78B3"],
    ["8fd0a1", "\u78BB\u78BD\u78BF\u78C7\u78C8\u78C9\u78CC\u78CE\u78D2\u78D3\u78D5\u78D6\u78E4\u78DB\u78DF\u78E0\u78E1\u78E6\u78EA\u78F2\u78F3\u7900\u78F6\u78F7\u78FA\u78FB\u78FF\u7906\u790C\u7910\u791A\u791C\u791E\u791F\u7920\u7925\u7927\u7929\u792D\u7931\u7934\u7935\u793B\u793D\u793F\u7944\u7945\u7946\u794A\u794B\u794F\u7951\u7954\u7958\u795B\u795C\u7967\u7969\u796B\u7972\u7979\u797B\u797C\u797E\u798B\u798C\u7991\u7993\u7994\u7995\u7996\u7998\u799B\u799C\u79A1\u79A8\u79A9\u79AB\u79AF\u79B1\u79B4\u79B8\u79BB\u79C2\u79C4\u79C7\u79C8\u79CA\u79CF\u79D4\u79D6\u79DA\u79DD\u79DE"],
    ["8fd1a1", "\u79E0\u79E2\u79E5\u79EA\u79EB\u79ED\u79F1\u79F8\u79FC\u7A02\u7A03\u7A07\u7A09\u7A0A\u7A0C\u7A11\u7A15\u7A1B\u7A1E\u7A21\u7A27\u7A2B\u7A2D\u7A2F\u7A30\u7A34\u7A35\u7A38\u7A39\u7A3A\u7A44\u7A45\u7A47\u7A48\u7A4C\u7A55\u7A56\u7A59\u7A5C\u7A5D\u7A5F\u7A60\u7A65\u7A67\u7A6A\u7A6D\u7A75\u7A78\u7A7E\u7A80\u7A82\u7A85\u7A86\u7A8A\u7A8B\u7A90\u7A91\u7A94\u7A9E\u7AA0\u7AA3\u7AAC\u7AB3\u7AB5\u7AB9\u7ABB\u7ABC\u7AC6\u7AC9\u7ACC\u7ACE\u7AD1\u7ADB\u7AE8\u7AE9\u7AEB\u7AEC\u7AF1\u7AF4\u7AFB\u7AFD\u7AFE\u7B07\u7B14\u7B1F\u7B23\u7B27\u7B29\u7B2A\u7B2B\u7B2D\u7B2E\u7B2F\u7B30"],
    ["8fd2a1", "\u7B31\u7B34\u7B3D\u7B3F\u7B40\u7B41\u7B47\u7B4E\u7B55\u7B60\u7B64\u7B66\u7B69\u7B6A\u7B6D\u7B6F\u7B72\u7B73\u7B77\u7B84\u7B89\u7B8E\u7B90\u7B91\u7B96\u7B9B\u7B9E\u7BA0\u7BA5\u7BAC\u7BAF\u7BB0\u7BB2\u7BB5\u7BB6\u7BBA\u7BBB\u7BBC\u7BBD\u7BC2\u7BC5\u7BC8\u7BCA\u7BD4\u7BD6\u7BD7\u7BD9\u7BDA\u7BDB\u7BE8\u7BEA\u7BF2\u7BF4\u7BF5\u7BF8\u7BF9\u7BFA\u7BFC\u7BFE\u7C01\u7C02\u7C03\u7C04\u7C06\u7C09\u7C0B\u7C0C\u7C0E\u7C0F\u7C19\u7C1B\u7C20\u7C25\u7C26\u7C28\u7C2C\u7C31\u7C33\u7C34\u7C36\u7C39\u7C3A\u7C46\u7C4A\u7C55\u7C51\u7C52\u7C53\u7C59", 5],
    ["8fd3a1", "\u7C61\u7C63\u7C67\u7C69\u7C6D\u7C6E\u7C70\u7C72\u7C79\u7C7C\u7C7D\u7C86\u7C87\u7C8F\u7C94\u7C9E\u7CA0\u7CA6\u7CB0\u7CB6\u7CB7\u7CBA\u7CBB\u7CBC\u7CBF\u7CC4\u7CC7\u7CC8\u7CC9\u7CCD\u7CCF\u7CD3\u7CD4\u7CD5\u7CD7\u7CD9\u7CDA\u7CDD\u7CE6\u7CE9\u7CEB\u7CF5\u7D03\u7D07\u7D08\u7D09\u7D0F\u7D11\u7D12\u7D13\u7D16\u7D1D\u7D1E\u7D23\u7D26\u7D2A\u7D2D\u7D31\u7D3C\u7D3D\u7D3E\u7D40\u7D41\u7D47\u7D48\u7D4D\u7D51\u7D53\u7D57\u7D59\u7D5A\u7D5C\u7D5D\u7D65\u7D67\u7D6A\u7D70\u7D78\u7D7A\u7D7B\u7D7F\u7D81\u7D82\u7D83\u7D85\u7D86\u7D88\u7D8B\u7D8C\u7D8D\u7D91\u7D96\u7D97\u7D9D"],
    ["8fd4a1", "\u7D9E\u7DA6\u7DA7\u7DAA\u7DB3\u7DB6\u7DB7\u7DB9\u7DC2", 4, "\u7DCC\u7DCD\u7DCE\u7DD7\u7DD9\u7E00\u7DE2\u7DE5\u7DE6\u7DEA\u7DEB\u7DED\u7DF1\u7DF5\u7DF6\u7DF9\u7DFA\u7E08\u7E10\u7E11\u7E15\u7E17\u7E1C\u7E1D\u7E20\u7E27\u7E28\u7E2C\u7E2D\u7E2F\u7E33\u7E36\u7E3F\u7E44\u7E45\u7E47\u7E4E\u7E50\u7E52\u7E58\u7E5F\u7E61\u7E62\u7E65\u7E6B\u7E6E\u7E6F\u7E73\u7E78\u7E7E\u7E81\u7E86\u7E87\u7E8A\u7E8D\u7E91\u7E95\u7E98\u7E9A\u7E9D\u7E9E\u7F3C\u7F3B\u7F3D\u7F3E\u7F3F\u7F43\u7F44\u7F47\u7F4F\u7F52\u7F53\u7F5B\u7F5C\u7F5D\u7F61\u7F63\u7F64\u7F65\u7F66\u7F6D"],
    ["8fd5a1", "\u7F71\u7F7D\u7F7E\u7F7F\u7F80\u7F8B\u7F8D\u7F8F\u7F90\u7F91\u7F96\u7F97\u7F9C\u7FA1\u7FA2\u7FA6\u7FAA\u7FAD\u7FB4\u7FBC\u7FBF\u7FC0\u7FC3\u7FC8\u7FCE\u7FCF\u7FDB\u7FDF\u7FE3\u7FE5\u7FE8\u7FEC\u7FEE\u7FEF\u7FF2\u7FFA\u7FFD\u7FFE\u7FFF\u8007\u8008\u800A\u800D\u800E\u800F\u8011\u8013\u8014\u8016\u801D\u801E\u801F\u8020\u8024\u8026\u802C\u802E\u8030\u8034\u8035\u8037\u8039\u803A\u803C\u803E\u8040\u8044\u8060\u8064\u8066\u806D\u8071\u8075\u8081\u8088\u808E\u809C\u809E\u80A6\u80A7\u80AB\u80B8\u80B9\u80C8\u80CD\u80CF\u80D2\u80D4\u80D5\u80D7\u80D8\u80E0\u80ED\u80EE"],
    ["8fd6a1", "\u80F0\u80F2\u80F3\u80F6\u80F9\u80FA\u80FE\u8103\u810B\u8116\u8117\u8118\u811C\u811E\u8120\u8124\u8127\u812C\u8130\u8135\u813A\u813C\u8145\u8147\u814A\u814C\u8152\u8157\u8160\u8161\u8167\u8168\u8169\u816D\u816F\u8177\u8181\u8190\u8184\u8185\u8186\u818B\u818E\u8196\u8198\u819B\u819E\u81A2\u81AE\u81B2\u81B4\u81BB\u81CB\u81C3\u81C5\u81CA\u81CE\u81CF\u81D5\u81D7\u81DB\u81DD\u81DE\u81E1\u81E4\u81EB\u81EC\u81F0\u81F1\u81F2\u81F5\u81F6\u81F8\u81F9\u81FD\u81FF\u8200\u8203\u820F\u8213\u8214\u8219\u821A\u821D\u8221\u8222\u8228\u8232\u8234\u823A\u8243\u8244\u8245\u8246"],
    ["8fd7a1", "\u824B\u824E\u824F\u8251\u8256\u825C\u8260\u8263\u8267\u826D\u8274\u827B\u827D\u827F\u8280\u8281\u8283\u8284\u8287\u8289\u828A\u828E\u8291\u8294\u8296\u8298\u829A\u829B\u82A0\u82A1\u82A3\u82A4\u82A7\u82A8\u82A9\u82AA\u82AE\u82B0\u82B2\u82B4\u82B7\u82BA\u82BC\u82BE\u82BF\u82C6\u82D0\u82D5\u82DA\u82E0\u82E2\u82E4\u82E8\u82EA\u82ED\u82EF\u82F6\u82F7\u82FD\u82FE\u8300\u8301\u8307\u8308\u830A\u830B\u8354\u831B\u831D\u831E\u831F\u8321\u8322\u832C\u832D\u832E\u8330\u8333\u8337\u833A\u833C\u833D\u8342\u8343\u8344\u8347\u834D\u834E\u8351\u8355\u8356\u8357\u8370\u8378"],
    ["8fd8a1", "\u837D\u837F\u8380\u8382\u8384\u8386\u838D\u8392\u8394\u8395\u8398\u8399\u839B\u839C\u839D\u83A6\u83A7\u83A9\u83AC\u83BE\u83BF\u83C0\u83C7\u83C9\u83CF\u83D0\u83D1\u83D4\u83DD\u8353\u83E8\u83EA\u83F6\u83F8\u83F9\u83FC\u8401\u8406\u840A\u840F\u8411\u8415\u8419\u83AD\u842F\u8439\u8445\u8447\u8448\u844A\u844D\u844F\u8451\u8452\u8456\u8458\u8459\u845A\u845C\u8460\u8464\u8465\u8467\u846A\u8470\u8473\u8474\u8476\u8478\u847C\u847D\u8481\u8485\u8492\u8493\u8495\u849E\u84A6\u84A8\u84A9\u84AA\u84AF\u84B1\u84B4\u84BA\u84BD\u84BE\u84C0\u84C2\u84C7\u84C8\u84CC\u84CF\u84D3"],
    ["8fd9a1", "\u84DC\u84E7\u84EA\u84EF\u84F0\u84F1\u84F2\u84F7\u8532\u84FA\u84FB\u84FD\u8502\u8503\u8507\u850C\u850E\u8510\u851C\u851E\u8522\u8523\u8524\u8525\u8527\u852A\u852B\u852F\u8533\u8534\u8536\u853F\u8546\u854F", 4, "\u8556\u8559\u855C", 6, "\u8564\u856B\u856F\u8579\u857A\u857B\u857D\u857F\u8581\u8585\u8586\u8589\u858B\u858C\u858F\u8593\u8598\u859D\u859F\u85A0\u85A2\u85A5\u85A7\u85B4\u85B6\u85B7\u85B8\u85BC\u85BD\u85BE\u85BF\u85C2\u85C7\u85CA\u85CB\u85CE\u85AD\u85D8\u85DA\u85DF\u85E0\u85E6\u85E8\u85ED\u85F3\u85F6\u85FC"],
    ["8fdaa1", "\u85FF\u8600\u8604\u8605\u860D\u860E\u8610\u8611\u8612\u8618\u8619\u861B\u861E\u8621\u8627\u8629\u8636\u8638\u863A\u863C\u863D\u8640\u8642\u8646\u8652\u8653\u8656\u8657\u8658\u8659\u865D\u8660", 4, "\u8669\u866C\u866F\u8675\u8676\u8677\u867A\u868D\u8691\u8696\u8698\u869A\u869C\u86A1\u86A6\u86A7\u86A8\u86AD\u86B1\u86B3\u86B4\u86B5\u86B7\u86B8\u86B9\u86BF\u86C0\u86C1\u86C3\u86C5\u86D1\u86D2\u86D5\u86D7\u86DA\u86DC\u86E0\u86E3\u86E5\u86E7\u8688\u86FA\u86FC\u86FD\u8704\u8705\u8707\u870B\u870E\u870F\u8710\u8713\u8714\u8719\u871E\u871F\u8721\u8723"],
    ["8fdba1", "\u8728\u872E\u872F\u8731\u8732\u8739\u873A\u873C\u873D\u873E\u8740\u8743\u8745\u874D\u8758\u875D\u8761\u8764\u8765\u876F\u8771\u8772\u877B\u8783", 6, "\u878B\u878C\u8790\u8793\u8795\u8797\u8798\u8799\u879E\u87A0\u87A3\u87A7\u87AC\u87AD\u87AE\u87B1\u87B5\u87BE\u87BF\u87C1\u87C8\u87C9\u87CA\u87CE\u87D5\u87D6\u87D9\u87DA\u87DC\u87DF\u87E2\u87E3\u87E4\u87EA\u87EB\u87ED\u87F1\u87F3\u87F8\u87FA\u87FF\u8801\u8803\u8806\u8809\u880A\u880B\u8810\u8819\u8812\u8813\u8814\u8818\u881A\u881B\u881C\u881E\u881F\u8828\u882D\u882E\u8830\u8832\u8835"],
    ["8fdca1", "\u883A\u883C\u8841\u8843\u8845\u8848\u8849\u884A\u884B\u884E\u8851\u8855\u8856\u8858\u885A\u885C\u885F\u8860\u8864\u8869\u8871\u8879\u887B\u8880\u8898\u889A\u889B\u889C\u889F\u88A0\u88A8\u88AA\u88BA\u88BD\u88BE\u88C0\u88CA", 4, "\u88D1\u88D2\u88D3\u88DB\u88DE\u88E7\u88EF\u88F0\u88F1\u88F5\u88F7\u8901\u8906\u890D\u890E\u890F\u8915\u8916\u8918\u8919\u891A\u891C\u8920\u8926\u8927\u8928\u8930\u8931\u8932\u8935\u8939\u893A\u893E\u8940\u8942\u8945\u8946\u8949\u894F\u8952\u8957\u895A\u895B\u895C\u8961\u8962\u8963\u896B\u896E\u8970\u8973\u8975\u897A"],
    ["8fdda1", "\u897B\u897C\u897D\u8989\u898D\u8990\u8994\u8995\u899B\u899C\u899F\u89A0\u89A5\u89B0\u89B4\u89B5\u89B6\u89B7\u89BC\u89D4", 4, "\u89E5\u89E9\u89EB\u89ED\u89F1\u89F3\u89F6\u89F9\u89FD\u89FF\u8A04\u8A05\u8A07\u8A0F\u8A11\u8A12\u8A14\u8A15\u8A1E\u8A20\u8A22\u8A24\u8A26\u8A2B\u8A2C\u8A2F\u8A35\u8A37\u8A3D\u8A3E\u8A40\u8A43\u8A45\u8A47\u8A49\u8A4D\u8A4E\u8A53\u8A56\u8A57\u8A58\u8A5C\u8A5D\u8A61\u8A65\u8A67\u8A75\u8A76\u8A77\u8A79\u8A7A\u8A7B\u8A7E\u8A7F\u8A80\u8A83\u8A86\u8A8B\u8A8F\u8A90\u8A92\u8A96\u8A97\u8A99\u8A9F\u8AA7\u8AA9\u8AAE\u8AAF\u8AB3"],
    ["8fdea1", "\u8AB6\u8AB7\u8ABB\u8ABE\u8AC3\u8AC6\u8AC8\u8AC9\u8ACA\u8AD1\u8AD3\u8AD4\u8AD5\u8AD7\u8ADD\u8ADF\u8AEC\u8AF0\u8AF4\u8AF5\u8AF6\u8AFC\u8AFF\u8B05\u8B06\u8B0B\u8B11\u8B1C\u8B1E\u8B1F\u8B0A\u8B2D\u8B30\u8B37\u8B3C\u8B42", 4, "\u8B48\u8B52\u8B53\u8B54\u8B59\u8B4D\u8B5E\u8B63\u8B6D\u8B76\u8B78\u8B79\u8B7C\u8B7E\u8B81\u8B84\u8B85\u8B8B\u8B8D\u8B8F\u8B94\u8B95\u8B9C\u8B9E\u8B9F\u8C38\u8C39\u8C3D\u8C3E\u8C45\u8C47\u8C49\u8C4B\u8C4F\u8C51\u8C53\u8C54\u8C57\u8C58\u8C5B\u8C5D\u8C59\u8C63\u8C64\u8C66\u8C68\u8C69\u8C6D\u8C73\u8C75\u8C76\u8C7B\u8C7E\u8C86"],
    ["8fdfa1", "\u8C87\u8C8B\u8C90\u8C92\u8C93\u8C99\u8C9B\u8C9C\u8CA4\u8CB9\u8CBA\u8CC5\u8CC6\u8CC9\u8CCB\u8CCF\u8CD6\u8CD5\u8CD9\u8CDD\u8CE1\u8CE8\u8CEC\u8CEF\u8CF0\u8CF2\u8CF5\u8CF7\u8CF8\u8CFE\u8CFF\u8D01\u8D03\u8D09\u8D12\u8D17\u8D1B\u8D65\u8D69\u8D6C\u8D6E\u8D7F\u8D82\u8D84\u8D88\u8D8D\u8D90\u8D91\u8D95\u8D9E\u8D9F\u8DA0\u8DA6\u8DAB\u8DAC\u8DAF\u8DB2\u8DB5\u8DB7\u8DB9\u8DBB\u8DC0\u8DC5\u8DC6\u8DC7\u8DC8\u8DCA\u8DCE\u8DD1\u8DD4\u8DD5\u8DD7\u8DD9\u8DE4\u8DE5\u8DE7\u8DEC\u8DF0\u8DBC\u8DF1\u8DF2\u8DF4\u8DFD\u8E01\u8E04\u8E05\u8E06\u8E0B\u8E11\u8E14\u8E16\u8E20\u8E21\u8E22"],
    ["8fe0a1", "\u8E23\u8E26\u8E27\u8E31\u8E33\u8E36\u8E37\u8E38\u8E39\u8E3D\u8E40\u8E41\u8E4B\u8E4D\u8E4E\u8E4F\u8E54\u8E5B\u8E5C\u8E5D\u8E5E\u8E61\u8E62\u8E69\u8E6C\u8E6D\u8E6F\u8E70\u8E71\u8E79\u8E7A\u8E7B\u8E82\u8E83\u8E89\u8E90\u8E92\u8E95\u8E9A\u8E9B\u8E9D\u8E9E\u8EA2\u8EA7\u8EA9\u8EAD\u8EAE\u8EB3\u8EB5\u8EBA\u8EBB\u8EC0\u8EC1\u8EC3\u8EC4\u8EC7\u8ECF\u8ED1\u8ED4\u8EDC\u8EE8\u8EEE\u8EF0\u8EF1\u8EF7\u8EF9\u8EFA\u8EED\u8F00\u8F02\u8F07\u8F08\u8F0F\u8F10\u8F16\u8F17\u8F18\u8F1E\u8F20\u8F21\u8F23\u8F25\u8F27\u8F28\u8F2C\u8F2D\u8F2E\u8F34\u8F35\u8F36\u8F37\u8F3A\u8F40\u8F41"],
    ["8fe1a1", "\u8F43\u8F47\u8F4F\u8F51", 4, "\u8F58\u8F5D\u8F5E\u8F65\u8F9D\u8FA0\u8FA1\u8FA4\u8FA5\u8FA6\u8FB5\u8FB6\u8FB8\u8FBE\u8FC0\u8FC1\u8FC6\u8FCA\u8FCB\u8FCD\u8FD0\u8FD2\u8FD3\u8FD5\u8FE0\u8FE3\u8FE4\u8FE8\u8FEE\u8FF1\u8FF5\u8FF6\u8FFB\u8FFE\u9002\u9004\u9008\u900C\u9018\u901B\u9028\u9029\u902F\u902A\u902C\u902D\u9033\u9034\u9037\u903F\u9043\u9044\u904C\u905B\u905D\u9062\u9066\u9067\u906C\u9070\u9074\u9079\u9085\u9088\u908B\u908C\u908E\u9090\u9095\u9097\u9098\u9099\u909B\u90A0\u90A1\u90A2\u90A5\u90B0\u90B2\u90B3\u90B4\u90B6\u90BD\u90CC\u90BE\u90C3"],
    ["8fe2a1", "\u90C4\u90C5\u90C7\u90C8\u90D5\u90D7\u90D8\u90D9\u90DC\u90DD\u90DF\u90E5\u90D2\u90F6\u90EB\u90EF\u90F0\u90F4\u90FE\u90FF\u9100\u9104\u9105\u9106\u9108\u910D\u9110\u9114\u9116\u9117\u9118\u911A\u911C\u911E\u9120\u9125\u9122\u9123\u9127\u9129\u912E\u912F\u9131\u9134\u9136\u9137\u9139\u913A\u913C\u913D\u9143\u9147\u9148\u914F\u9153\u9157\u9159\u915A\u915B\u9161\u9164\u9167\u916D\u9174\u9179\u917A\u917B\u9181\u9183\u9185\u9186\u918A\u918E\u9191\u9193\u9194\u9195\u9198\u919E\u91A1\u91A6\u91A8\u91AC\u91AD\u91AE\u91B0\u91B1\u91B2\u91B3\u91B6\u91BB\u91BC\u91BD\u91BF"],
    ["8fe3a1", "\u91C2\u91C3\u91C5\u91D3\u91D4\u91D7\u91D9\u91DA\u91DE\u91E4\u91E5\u91E9\u91EA\u91EC", 5, "\u91F7\u91F9\u91FB\u91FD\u9200\u9201\u9204\u9205\u9206\u9207\u9209\u920A\u920C\u9210\u9212\u9213\u9216\u9218\u921C\u921D\u9223\u9224\u9225\u9226\u9228\u922E\u922F\u9230\u9233\u9235\u9236\u9238\u9239\u923A\u923C\u923E\u9240\u9242\u9243\u9246\u9247\u924A\u924D\u924E\u924F\u9251\u9258\u9259\u925C\u925D\u9260\u9261\u9265\u9267\u9268\u9269\u926E\u926F\u9270\u9275", 4, "\u927B\u927C\u927D\u927F\u9288\u9289\u928A\u928D\u928E\u9292\u9297"],
    ["8fe4a1", "\u9299\u929F\u92A0\u92A4\u92A5\u92A7\u92A8\u92AB\u92AF\u92B2\u92B6\u92B8\u92BA\u92BB\u92BC\u92BD\u92BF", 4, "\u92C5\u92C6\u92C7\u92C8\u92CB\u92CC\u92CD\u92CE\u92D0\u92D3\u92D5\u92D7\u92D8\u92D9\u92DC\u92DD\u92DF\u92E0\u92E1\u92E3\u92E5\u92E7\u92E8\u92EC\u92EE\u92F0\u92F9\u92FB\u92FF\u9300\u9302\u9308\u930D\u9311\u9314\u9315\u931C\u931D\u931E\u931F\u9321\u9324\u9325\u9327\u9329\u932A\u9333\u9334\u9336\u9337\u9347\u9348\u9349\u9350\u9351\u9352\u9355\u9357\u9358\u935A\u935E\u9364\u9365\u9367\u9369\u936A\u936D\u936F\u9370\u9371\u9373\u9374\u9376"],
    ["8fe5a1", "\u937A\u937D\u937F\u9380\u9381\u9382\u9388\u938A\u938B\u938D\u938F\u9392\u9395\u9398\u939B\u939E\u93A1\u93A3\u93A4\u93A6\u93A8\u93AB\u93B4\u93B5\u93B6\u93BA\u93A9\u93C1\u93C4\u93C5\u93C6\u93C7\u93C9", 4, "\u93D3\u93D9\u93DC\u93DE\u93DF\u93E2\u93E6\u93E7\u93F9\u93F7\u93F8\u93FA\u93FB\u93FD\u9401\u9402\u9404\u9408\u9409\u940D\u940E\u940F\u9415\u9416\u9417\u941F\u942E\u942F\u9431\u9432\u9433\u9434\u943B\u943F\u943D\u9443\u9445\u9448\u944A\u944C\u9455\u9459\u945C\u945F\u9461\u9463\u9468\u946B\u946D\u946E\u946F\u9471\u9472\u9484\u9483\u9578\u9579"],
    ["8fe6a1", "\u957E\u9584\u9588\u958C\u958D\u958E\u959D\u959E\u959F\u95A1\u95A6\u95A9\u95AB\u95AC\u95B4\u95B6\u95BA\u95BD\u95BF\u95C6\u95C8\u95C9\u95CB\u95D0\u95D1\u95D2\u95D3\u95D9\u95DA\u95DD\u95DE\u95DF\u95E0\u95E4\u95E6\u961D\u961E\u9622\u9624\u9625\u9626\u962C\u9631\u9633\u9637\u9638\u9639\u963A\u963C\u963D\u9641\u9652\u9654\u9656\u9657\u9658\u9661\u966E\u9674\u967B\u967C\u967E\u967F\u9681\u9682\u9683\u9684\u9689\u9691\u9696\u969A\u969D\u969F\u96A4\u96A5\u96A6\u96A9\u96AE\u96AF\u96B3\u96BA\u96CA\u96D2\u5DB2\u96D8\u96DA\u96DD\u96DE\u96DF\u96E9\u96EF\u96F1\u96FA\u9702"],
    ["8fe7a1", "\u9703\u9705\u9709\u971A\u971B\u971D\u9721\u9722\u9723\u9728\u9731\u9733\u9741\u9743\u974A\u974E\u974F\u9755\u9757\u9758\u975A\u975B\u9763\u9767\u976A\u976E\u9773\u9776\u9777\u9778\u977B\u977D\u977F\u9780\u9789\u9795\u9796\u9797\u9799\u979A\u979E\u979F\u97A2\u97AC\u97AE\u97B1\u97B2\u97B5\u97B6\u97B8\u97B9\u97BA\u97BC\u97BE\u97BF\u97C1\u97C4\u97C5\u97C7\u97C9\u97CA\u97CC\u97CD\u97CE\u97D0\u97D1\u97D4\u97D7\u97D8\u97D9\u97DD\u97DE\u97E0\u97DB\u97E1\u97E4\u97EF\u97F1\u97F4\u97F7\u97F8\u97FA\u9807\u980A\u9819\u980D\u980E\u9814\u9816\u981C\u981E\u9820\u9823\u9826"],
    ["8fe8a1", "\u982B\u982E\u982F\u9830\u9832\u9833\u9835\u9825\u983E\u9844\u9847\u984A\u9851\u9852\u9853\u9856\u9857\u9859\u985A\u9862\u9863\u9865\u9866\u986A\u986C\u98AB\u98AD\u98AE\u98B0\u98B4\u98B7\u98B8\u98BA\u98BB\u98BF\u98C2\u98C5\u98C8\u98CC\u98E1\u98E3\u98E5\u98E6\u98E7\u98EA\u98F3\u98F6\u9902\u9907\u9908\u9911\u9915\u9916\u9917\u991A\u991B\u991C\u991F\u9922\u9926\u9927\u992B\u9931", 4, "\u9939\u993A\u993B\u993C\u9940\u9941\u9946\u9947\u9948\u994D\u994E\u9954\u9958\u9959\u995B\u995C\u995E\u995F\u9960\u999B\u999D\u999F\u99A6\u99B0\u99B1\u99B2\u99B5"],
    ["8fe9a1", "\u99B9\u99BA\u99BD\u99BF\u99C3\u99C9\u99D3\u99D4\u99D9\u99DA\u99DC\u99DE\u99E7\u99EA\u99EB\u99EC\u99F0\u99F4\u99F5\u99F9\u99FD\u99FE\u9A02\u9A03\u9A04\u9A0B\u9A0C\u9A10\u9A11\u9A16\u9A1E\u9A20\u9A22\u9A23\u9A24\u9A27\u9A2D\u9A2E\u9A33\u9A35\u9A36\u9A38\u9A47\u9A41\u9A44\u9A4A\u9A4B\u9A4C\u9A4E\u9A51\u9A54\u9A56\u9A5D\u9AAA\u9AAC\u9AAE\u9AAF\u9AB2\u9AB4\u9AB5\u9AB6\u9AB9\u9ABB\u9ABE\u9ABF\u9AC1\u9AC3\u9AC6\u9AC8\u9ACE\u9AD0\u9AD2\u9AD5\u9AD6\u9AD7\u9ADB\u9ADC\u9AE0\u9AE4\u9AE5\u9AE7\u9AE9\u9AEC\u9AF2\u9AF3\u9AF5\u9AF9\u9AFA\u9AFD\u9AFF", 4],
    ["8feaa1", "\u9B04\u9B05\u9B08\u9B09\u9B0B\u9B0C\u9B0D\u9B0E\u9B10\u9B12\u9B16\u9B19\u9B1B\u9B1C\u9B20\u9B26\u9B2B\u9B2D\u9B33\u9B34\u9B35\u9B37\u9B39\u9B3A\u9B3D\u9B48\u9B4B\u9B4C\u9B55\u9B56\u9B57\u9B5B\u9B5E\u9B61\u9B63\u9B65\u9B66\u9B68\u9B6A", 4, "\u9B73\u9B75\u9B77\u9B78\u9B79\u9B7F\u9B80\u9B84\u9B85\u9B86\u9B87\u9B89\u9B8A\u9B8B\u9B8D\u9B8F\u9B90\u9B94\u9B9A\u9B9D\u9B9E\u9BA6\u9BA7\u9BA9\u9BAC\u9BB0\u9BB1\u9BB2\u9BB7\u9BB8\u9BBB\u9BBC\u9BBE\u9BBF\u9BC1\u9BC7\u9BC8\u9BCE\u9BD0\u9BD7\u9BD8\u9BDD\u9BDF\u9BE5\u9BE7\u9BEA\u9BEB\u9BEF\u9BF3\u9BF7\u9BF8"],
    ["8feba1", "\u9BF9\u9BFA\u9BFD\u9BFF\u9C00\u9C02\u9C0B\u9C0F\u9C11\u9C16\u9C18\u9C19\u9C1A\u9C1C\u9C1E\u9C22\u9C23\u9C26", 4, "\u9C31\u9C35\u9C36\u9C37\u9C3D\u9C41\u9C43\u9C44\u9C45\u9C49\u9C4A\u9C4E\u9C4F\u9C50\u9C53\u9C54\u9C56\u9C58\u9C5B\u9C5D\u9C5E\u9C5F\u9C63\u9C69\u9C6A\u9C5C\u9C6B\u9C68\u9C6E\u9C70\u9C72\u9C75\u9C77\u9C7B\u9CE6\u9CF2\u9CF7\u9CF9\u9D0B\u9D02\u9D11\u9D17\u9D18\u9D1C\u9D1D\u9D1E\u9D2F\u9D30\u9D32\u9D33\u9D34\u9D3A\u9D3C\u9D45\u9D3D\u9D42\u9D43\u9D47\u9D4A\u9D53\u9D54\u9D5F\u9D63\u9D62\u9D65\u9D69\u9D6A\u9D6B\u9D70\u9D76\u9D77\u9D7B"],
    ["8feca1", "\u9D7C\u9D7E\u9D83\u9D84\u9D86\u9D8A\u9D8D\u9D8E\u9D92\u9D93\u9D95\u9D96\u9D97\u9D98\u9DA1\u9DAA\u9DAC\u9DAE\u9DB1\u9DB5\u9DB9\u9DBC\u9DBF\u9DC3\u9DC7\u9DC9\u9DCA\u9DD4\u9DD5\u9DD6\u9DD7\u9DDA\u9DDE\u9DDF\u9DE0\u9DE5\u9DE7\u9DE9\u9DEB\u9DEE\u9DF0\u9DF3\u9DF4\u9DFE\u9E0A\u9E02\u9E07\u9E0E\u9E10\u9E11\u9E12\u9E15\u9E16\u9E19\u9E1C\u9E1D\u9E7A\u9E7B\u9E7C\u9E80\u9E82\u9E83\u9E84\u9E85\u9E87\u9E8E\u9E8F\u9E96\u9E98\u9E9B\u9E9E\u9EA4\u9EA8\u9EAC\u9EAE\u9EAF\u9EB0\u9EB3\u9EB4\u9EB5\u9EC6\u9EC8\u9ECB\u9ED5\u9EDF\u9EE4\u9EE7\u9EEC\u9EED\u9EEE\u9EF0\u9EF1\u9EF2\u9EF5"],
    ["8feda1", "\u9EF8\u9EFF\u9F02\u9F03\u9F09\u9F0F\u9F10\u9F11\u9F12\u9F14\u9F16\u9F17\u9F19\u9F1A\u9F1B\u9F1F\u9F22\u9F26\u9F2A\u9F2B\u9F2F\u9F31\u9F32\u9F34\u9F37\u9F39\u9F3A\u9F3C\u9F3D\u9F3F\u9F41\u9F43", 4, "\u9F53\u9F55\u9F56\u9F57\u9F58\u9F5A\u9F5D\u9F5E\u9F68\u9F69\u9F6D", 4, "\u9F73\u9F75\u9F7A\u9F7D\u9F8F\u9F90\u9F91\u9F92\u9F94\u9F96\u9F97\u9F9E\u9FA1\u9FA2\u9FA3\u9FA5"]
  ];
});

// node_modules/iconv-lite/encodings/tables/cp936.json
var require_cp936 = __commonJS((exports, module) => {
  module.exports = [
    ["0", "\0", 127, "\u20AC"],
    ["8140", "\u4E02\u4E04\u4E05\u4E06\u4E0F\u4E12\u4E17\u4E1F\u4E20\u4E21\u4E23\u4E26\u4E29\u4E2E\u4E2F\u4E31\u4E33\u4E35\u4E37\u4E3C\u4E40\u4E41\u4E42\u4E44\u4E46\u4E4A\u4E51\u4E55\u4E57\u4E5A\u4E5B\u4E62\u4E63\u4E64\u4E65\u4E67\u4E68\u4E6A", 5, "\u4E72\u4E74", 9, "\u4E7F", 6, "\u4E87\u4E8A"],
    ["8180", "\u4E90\u4E96\u4E97\u4E99\u4E9C\u4E9D\u4E9E\u4EA3\u4EAA\u4EAF\u4EB0\u4EB1\u4EB4\u4EB6\u4EB7\u4EB8\u4EB9\u4EBC\u4EBD\u4EBE\u4EC8\u4ECC\u4ECF\u4ED0\u4ED2\u4EDA\u4EDB\u4EDC\u4EE0\u4EE2\u4EE6\u4EE7\u4EE9\u4EED\u4EEE\u4EEF\u4EF1\u4EF4\u4EF8\u4EF9\u4EFA\u4EFC\u4EFE\u4F00\u4F02", 6, "\u4F0B\u4F0C\u4F12", 4, "\u4F1C\u4F1D\u4F21\u4F23\u4F28\u4F29\u4F2C\u4F2D\u4F2E\u4F31\u4F33\u4F35\u4F37\u4F39\u4F3B\u4F3E", 4, "\u4F44\u4F45\u4F47", 5, "\u4F52\u4F54\u4F56\u4F61\u4F62\u4F66\u4F68\u4F6A\u4F6B\u4F6D\u4F6E\u4F71\u4F72\u4F75\u4F77\u4F78\u4F79\u4F7A\u4F7D\u4F80\u4F81\u4F82\u4F85\u4F86\u4F87\u4F8A\u4F8C\u4F8E\u4F90\u4F92\u4F93\u4F95\u4F96\u4F98\u4F99\u4F9A\u4F9C\u4F9E\u4F9F\u4FA1\u4FA2"],
    ["8240", "\u4FA4\u4FAB\u4FAD\u4FB0", 4, "\u4FB6", 8, "\u4FC0\u4FC1\u4FC2\u4FC6\u4FC7\u4FC8\u4FC9\u4FCB\u4FCC\u4FCD\u4FD2", 4, "\u4FD9\u4FDB\u4FE0\u4FE2\u4FE4\u4FE5\u4FE7\u4FEB\u4FEC\u4FF0\u4FF2\u4FF4\u4FF5\u4FF6\u4FF7\u4FF9\u4FFB\u4FFC\u4FFD\u4FFF", 11],
    ["8280", "\u500B\u500E\u5010\u5011\u5013\u5015\u5016\u5017\u501B\u501D\u501E\u5020\u5022\u5023\u5024\u5027\u502B\u502F", 10, "\u503B\u503D\u503F\u5040\u5041\u5042\u5044\u5045\u5046\u5049\u504A\u504B\u504D\u5050", 4, "\u5056\u5057\u5058\u5059\u505B\u505D", 7, "\u5066", 5, "\u506D", 8, "\u5078\u5079\u507A\u507C\u507D\u5081\u5082\u5083\u5084\u5086\u5087\u5089\u508A\u508B\u508C\u508E", 20, "\u50A4\u50A6\u50AA\u50AB\u50AD", 4, "\u50B3", 6, "\u50BC"],
    ["8340", "\u50BD", 17, "\u50D0", 5, "\u50D7\u50D8\u50D9\u50DB", 10, "\u50E8\u50E9\u50EA\u50EB\u50EF\u50F0\u50F1\u50F2\u50F4\u50F6", 4, "\u50FC", 9, "\u5108"],
    ["8380", "\u5109\u510A\u510C", 5, "\u5113", 13, "\u5122", 28, "\u5142\u5147\u514A\u514C\u514E\u514F\u5150\u5152\u5153\u5157\u5158\u5159\u515B\u515D", 4, "\u5163\u5164\u5166\u5167\u5169\u516A\u516F\u5172\u517A\u517E\u517F\u5183\u5184\u5186\u5187\u518A\u518B\u518E\u518F\u5190\u5191\u5193\u5194\u5198\u519A\u519D\u519E\u519F\u51A1\u51A3\u51A6", 4, "\u51AD\u51AE\u51B4\u51B8\u51B9\u51BA\u51BE\u51BF\u51C1\u51C2\u51C3\u51C5\u51C8\u51CA\u51CD\u51CE\u51D0\u51D2", 5],
    ["8440", "\u51D8\u51D9\u51DA\u51DC\u51DE\u51DF\u51E2\u51E3\u51E5", 5, "\u51EC\u51EE\u51F1\u51F2\u51F4\u51F7\u51FE\u5204\u5205\u5209\u520B\u520C\u520F\u5210\u5213\u5214\u5215\u521C\u521E\u521F\u5221\u5222\u5223\u5225\u5226\u5227\u522A\u522C\u522F\u5231\u5232\u5234\u5235\u523C\u523E\u5244", 5, "\u524B\u524E\u524F\u5252\u5253\u5255\u5257\u5258"],
    ["8480", "\u5259\u525A\u525B\u525D\u525F\u5260\u5262\u5263\u5264\u5266\u5268\u526B\u526C\u526D\u526E\u5270\u5271\u5273", 9, "\u527E\u5280\u5283", 4, "\u5289", 6, "\u5291\u5292\u5294", 6, "\u529C\u52A4\u52A5\u52A6\u52A7\u52AE\u52AF\u52B0\u52B4", 9, "\u52C0\u52C1\u52C2\u52C4\u52C5\u52C6\u52C8\u52CA\u52CC\u52CD\u52CE\u52CF\u52D1\u52D3\u52D4\u52D5\u52D7\u52D9", 5, "\u52E0\u52E1\u52E2\u52E3\u52E5", 10, "\u52F1", 7, "\u52FB\u52FC\u52FD\u5301\u5302\u5303\u5304\u5307\u5309\u530A\u530B\u530C\u530E"],
    ["8540", "\u5311\u5312\u5313\u5314\u5318\u531B\u531C\u531E\u531F\u5322\u5324\u5325\u5327\u5328\u5329\u532B\u532C\u532D\u532F", 9, "\u533C\u533D\u5340\u5342\u5344\u5346\u534B\u534C\u534D\u5350\u5354\u5358\u5359\u535B\u535D\u5365\u5368\u536A\u536C\u536D\u5372\u5376\u5379\u537B\u537C\u537D\u537E\u5380\u5381\u5383\u5387\u5388\u538A\u538E\u538F"],
    ["8580", "\u5390", 4, "\u5396\u5397\u5399\u539B\u539C\u539E\u53A0\u53A1\u53A4\u53A7\u53AA\u53AB\u53AC\u53AD\u53AF", 6, "\u53B7\u53B8\u53B9\u53BA\u53BC\u53BD\u53BE\u53C0\u53C3", 4, "\u53CE\u53CF\u53D0\u53D2\u53D3\u53D5\u53DA\u53DC\u53DD\u53DE\u53E1\u53E2\u53E7\u53F4\u53FA\u53FE\u53FF\u5400\u5402\u5405\u5407\u540B\u5414\u5418\u5419\u541A\u541C\u5422\u5424\u5425\u542A\u5430\u5433\u5436\u5437\u543A\u543D\u543F\u5441\u5442\u5444\u5445\u5447\u5449\u544C\u544D\u544E\u544F\u5451\u545A\u545D", 4, "\u5463\u5465\u5467\u5469", 7, "\u5474\u5479\u547A\u547E\u547F\u5481\u5483\u5485\u5487\u5488\u5489\u548A\u548D\u5491\u5493\u5497\u5498\u549C\u549E\u549F\u54A0\u54A1"],
    ["8640", "\u54A2\u54A5\u54AE\u54B0\u54B2\u54B5\u54B6\u54B7\u54B9\u54BA\u54BC\u54BE\u54C3\u54C5\u54CA\u54CB\u54D6\u54D8\u54DB\u54E0", 4, "\u54EB\u54EC\u54EF\u54F0\u54F1\u54F4", 5, "\u54FB\u54FE\u5500\u5502\u5503\u5504\u5505\u5508\u550A", 4, "\u5512\u5513\u5515", 5, "\u551C\u551D\u551E\u551F\u5521\u5525\u5526"],
    ["8680", "\u5528\u5529\u552B\u552D\u5532\u5534\u5535\u5536\u5538\u5539\u553A\u553B\u553D\u5540\u5542\u5545\u5547\u5548\u554B", 4, "\u5551\u5552\u5553\u5554\u5557", 4, "\u555D\u555E\u555F\u5560\u5562\u5563\u5568\u5569\u556B\u556F", 5, "\u5579\u557A\u557D\u557F\u5585\u5586\u558C\u558D\u558E\u5590\u5592\u5593\u5595\u5596\u5597\u559A\u559B\u559E\u55A0", 6, "\u55A8", 8, "\u55B2\u55B4\u55B6\u55B8\u55BA\u55BC\u55BF", 4, "\u55C6\u55C7\u55C8\u55CA\u55CB\u55CE\u55CF\u55D0\u55D5\u55D7", 4, "\u55DE\u55E0\u55E2\u55E7\u55E9\u55ED\u55EE\u55F0\u55F1\u55F4\u55F6\u55F8", 4, "\u55FF\u5602\u5603\u5604\u5605"],
    ["8740", "\u5606\u5607\u560A\u560B\u560D\u5610", 7, "\u5619\u561A\u561C\u561D\u5620\u5621\u5622\u5625\u5626\u5628\u5629\u562A\u562B\u562E\u562F\u5630\u5633\u5635\u5637\u5638\u563A\u563C\u563D\u563E\u5640", 11, "\u564F", 4, "\u5655\u5656\u565A\u565B\u565D", 4],
    ["8780", "\u5663\u5665\u5666\u5667\u566D\u566E\u566F\u5670\u5672\u5673\u5674\u5675\u5677\u5678\u5679\u567A\u567D", 7, "\u5687", 6, "\u5690\u5691\u5692\u5694", 14, "\u56A4", 10, "\u56B0", 6, "\u56B8\u56B9\u56BA\u56BB\u56BD", 12, "\u56CB", 8, "\u56D5\u56D6\u56D8\u56D9\u56DC\u56E3\u56E5", 5, "\u56EC\u56EE\u56EF\u56F2\u56F3\u56F6\u56F7\u56F8\u56FB\u56FC\u5700\u5701\u5702\u5705\u5707\u570B", 6],
    ["8840", "\u5712", 9, "\u571D\u571E\u5720\u5721\u5722\u5724\u5725\u5726\u5727\u572B\u5731\u5732\u5734", 4, "\u573C\u573D\u573F\u5741\u5743\u5744\u5745\u5746\u5748\u5749\u574B\u5752", 4, "\u5758\u5759\u5762\u5763\u5765\u5767\u576C\u576E\u5770\u5771\u5772\u5774\u5775\u5778\u5779\u577A\u577D\u577E\u577F\u5780"],
    ["8880", "\u5781\u5787\u5788\u5789\u578A\u578D", 4, "\u5794", 6, "\u579C\u579D\u579E\u579F\u57A5\u57A8\u57AA\u57AC\u57AF\u57B0\u57B1\u57B3\u57B5\u57B6\u57B7\u57B9", 8, "\u57C4", 6, "\u57CC\u57CD\u57D0\u57D1\u57D3\u57D6\u57D7\u57DB\u57DC\u57DE\u57E1\u57E2\u57E3\u57E5", 7, "\u57EE\u57F0\u57F1\u57F2\u57F3\u57F5\u57F6\u57F7\u57FB\u57FC\u57FE\u57FF\u5801\u5803\u5804\u5805\u5808\u5809\u580A\u580C\u580E\u580F\u5810\u5812\u5813\u5814\u5816\u5817\u5818\u581A\u581B\u581C\u581D\u581F\u5822\u5823\u5825", 4, "\u582B", 4, "\u5831\u5832\u5833\u5834\u5836", 7],
    ["8940", "\u583E", 5, "\u5845", 6, "\u584E\u584F\u5850\u5852\u5853\u5855\u5856\u5857\u5859", 4, "\u585F", 5, "\u5866", 4, "\u586D", 16, "\u587F\u5882\u5884\u5886\u5887\u5888\u588A\u588B\u588C"],
    ["8980", "\u588D", 4, "\u5894", 4, "\u589B\u589C\u589D\u58A0", 7, "\u58AA", 17, "\u58BD\u58BE\u58BF\u58C0\u58C2\u58C3\u58C4\u58C6", 10, "\u58D2\u58D3\u58D4\u58D6", 13, "\u58E5", 5, "\u58ED\u58EF\u58F1\u58F2\u58F4\u58F5\u58F7\u58F8\u58FA", 7, "\u5903\u5905\u5906\u5908", 4, "\u590E\u5910\u5911\u5912\u5913\u5917\u5918\u591B\u591D\u591E\u5920\u5921\u5922\u5923\u5926\u5928\u592C\u5930\u5932\u5933\u5935\u5936\u593B"],
    ["8a40", "\u593D\u593E\u593F\u5940\u5943\u5945\u5946\u594A\u594C\u594D\u5950\u5952\u5953\u5959\u595B", 4, "\u5961\u5963\u5964\u5966", 12, "\u5975\u5977\u597A\u597B\u597C\u597E\u597F\u5980\u5985\u5989\u598B\u598C\u598E\u598F\u5990\u5991\u5994\u5995\u5998\u599A\u599B\u599C\u599D\u599F\u59A0\u59A1\u59A2\u59A6"],
    ["8a80", "\u59A7\u59AC\u59AD\u59B0\u59B1\u59B3", 5, "\u59BA\u59BC\u59BD\u59BF", 6, "\u59C7\u59C8\u59C9\u59CC\u59CD\u59CE\u59CF\u59D5\u59D6\u59D9\u59DB\u59DE", 4, "\u59E4\u59E6\u59E7\u59E9\u59EA\u59EB\u59ED", 11, "\u59FA\u59FC\u59FD\u59FE\u5A00\u5A02\u5A0A\u5A0B\u5A0D\u5A0E\u5A0F\u5A10\u5A12\u5A14\u5A15\u5A16\u5A17\u5A19\u5A1A\u5A1B\u5A1D\u5A1E\u5A21\u5A22\u5A24\u5A26\u5A27\u5A28\u5A2A", 6, "\u5A33\u5A35\u5A37", 4, "\u5A3D\u5A3E\u5A3F\u5A41", 4, "\u5A47\u5A48\u5A4B", 9, "\u5A56\u5A57\u5A58\u5A59\u5A5B", 5],
    ["8b40", "\u5A61\u5A63\u5A64\u5A65\u5A66\u5A68\u5A69\u5A6B", 8, "\u5A78\u5A79\u5A7B\u5A7C\u5A7D\u5A7E\u5A80", 17, "\u5A93", 6, "\u5A9C", 13, "\u5AAB\u5AAC"],
    ["8b80", "\u5AAD", 4, "\u5AB4\u5AB6\u5AB7\u5AB9", 4, "\u5ABF\u5AC0\u5AC3", 5, "\u5ACA\u5ACB\u5ACD", 4, "\u5AD3\u5AD5\u5AD7\u5AD9\u5ADA\u5ADB\u5ADD\u5ADE\u5ADF\u5AE2\u5AE4\u5AE5\u5AE7\u5AE8\u5AEA\u5AEC", 4, "\u5AF2", 22, "\u5B0A", 11, "\u5B18", 25, "\u5B33\u5B35\u5B36\u5B38", 7, "\u5B41", 6],
    ["8c40", "\u5B48", 7, "\u5B52\u5B56\u5B5E\u5B60\u5B61\u5B67\u5B68\u5B6B\u5B6D\u5B6E\u5B6F\u5B72\u5B74\u5B76\u5B77\u5B78\u5B79\u5B7B\u5B7C\u5B7E\u5B7F\u5B82\u5B86\u5B8A\u5B8D\u5B8E\u5B90\u5B91\u5B92\u5B94\u5B96\u5B9F\u5BA7\u5BA8\u5BA9\u5BAC\u5BAD\u5BAE\u5BAF\u5BB1\u5BB2\u5BB7\u5BBA\u5BBB\u5BBC\u5BC0\u5BC1\u5BC3\u5BC8\u5BC9\u5BCA\u5BCB\u5BCD\u5BCE\u5BCF"],
    ["8c80", "\u5BD1\u5BD4", 8, "\u5BE0\u5BE2\u5BE3\u5BE6\u5BE7\u5BE9", 4, "\u5BEF\u5BF1", 6, "\u5BFD\u5BFE\u5C00\u5C02\u5C03\u5C05\u5C07\u5C08\u5C0B\u5C0C\u5C0D\u5C0E\u5C10\u5C12\u5C13\u5C17\u5C19\u5C1B\u5C1E\u5C1F\u5C20\u5C21\u5C23\u5C26\u5C28\u5C29\u5C2A\u5C2B\u5C2D\u5C2E\u5C2F\u5C30\u5C32\u5C33\u5C35\u5C36\u5C37\u5C43\u5C44\u5C46\u5C47\u5C4C\u5C4D\u5C52\u5C53\u5C54\u5C56\u5C57\u5C58\u5C5A\u5C5B\u5C5C\u5C5D\u5C5F\u5C62\u5C64\u5C67", 6, "\u5C70\u5C72", 6, "\u5C7B\u5C7C\u5C7D\u5C7E\u5C80\u5C83", 4, "\u5C89\u5C8A\u5C8B\u5C8E\u5C8F\u5C92\u5C93\u5C95\u5C9D", 4, "\u5CA4", 4],
    ["8d40", "\u5CAA\u5CAE\u5CAF\u5CB0\u5CB2\u5CB4\u5CB6\u5CB9\u5CBA\u5CBB\u5CBC\u5CBE\u5CC0\u5CC2\u5CC3\u5CC5", 5, "\u5CCC", 5, "\u5CD3", 5, "\u5CDA", 6, "\u5CE2\u5CE3\u5CE7\u5CE9\u5CEB\u5CEC\u5CEE\u5CEF\u5CF1", 9, "\u5CFC", 4],
    ["8d80", "\u5D01\u5D04\u5D05\u5D08", 5, "\u5D0F", 4, "\u5D15\u5D17\u5D18\u5D19\u5D1A\u5D1C\u5D1D\u5D1F", 4, "\u5D25\u5D28\u5D2A\u5D2B\u5D2C\u5D2F", 4, "\u5D35", 7, "\u5D3F", 7, "\u5D48\u5D49\u5D4D", 10, "\u5D59\u5D5A\u5D5C\u5D5E", 10, "\u5D6A\u5D6D\u5D6E\u5D70\u5D71\u5D72\u5D73\u5D75", 12, "\u5D83", 21, "\u5D9A\u5D9B\u5D9C\u5D9E\u5D9F\u5DA0"],
    ["8e40", "\u5DA1", 21, "\u5DB8", 12, "\u5DC6", 6, "\u5DCE", 12, "\u5DDC\u5DDF\u5DE0\u5DE3\u5DE4\u5DEA\u5DEC\u5DED"],
    ["8e80", "\u5DF0\u5DF5\u5DF6\u5DF8", 4, "\u5DFF\u5E00\u5E04\u5E07\u5E09\u5E0A\u5E0B\u5E0D\u5E0E\u5E12\u5E13\u5E17\u5E1E", 7, "\u5E28", 4, "\u5E2F\u5E30\u5E32", 4, "\u5E39\u5E3A\u5E3E\u5E3F\u5E40\u5E41\u5E43\u5E46", 5, "\u5E4D", 6, "\u5E56", 4, "\u5E5C\u5E5D\u5E5F\u5E60\u5E63", 14, "\u5E75\u5E77\u5E79\u5E7E\u5E81\u5E82\u5E83\u5E85\u5E88\u5E89\u5E8C\u5E8D\u5E8E\u5E92\u5E98\u5E9B\u5E9D\u5EA1\u5EA2\u5EA3\u5EA4\u5EA8", 4, "\u5EAE", 4, "\u5EB4\u5EBA\u5EBB\u5EBC\u5EBD\u5EBF", 6],
    ["8f40", "\u5EC6\u5EC7\u5EC8\u5ECB", 5, "\u5ED4\u5ED5\u5ED7\u5ED8\u5ED9\u5EDA\u5EDC", 11, "\u5EE9\u5EEB", 8, "\u5EF5\u5EF8\u5EF9\u5EFB\u5EFC\u5EFD\u5F05\u5F06\u5F07\u5F09\u5F0C\u5F0D\u5F0E\u5F10\u5F12\u5F14\u5F16\u5F19\u5F1A\u5F1C\u5F1D\u5F1E\u5F21\u5F22\u5F23\u5F24"],
    ["8f80", "\u5F28\u5F2B\u5F2C\u5F2E\u5F30\u5F32", 6, "\u5F3B\u5F3D\u5F3E\u5F3F\u5F41", 14, "\u5F51\u5F54\u5F59\u5F5A\u5F5B\u5F5C\u5F5E\u5F5F\u5F60\u5F63\u5F65\u5F67\u5F68\u5F6B\u5F6E\u5F6F\u5F72\u5F74\u5F75\u5F76\u5F78\u5F7A\u5F7D\u5F7E\u5F7F\u5F83\u5F86\u5F8D\u5F8E\u5F8F\u5F91\u5F93\u5F94\u5F96\u5F9A\u5F9B\u5F9D\u5F9E\u5F9F\u5FA0\u5FA2", 5, "\u5FA9\u5FAB\u5FAC\u5FAF", 5, "\u5FB6\u5FB8\u5FB9\u5FBA\u5FBB\u5FBE", 4, "\u5FC7\u5FC8\u5FCA\u5FCB\u5FCE\u5FD3\u5FD4\u5FD5\u5FDA\u5FDB\u5FDC\u5FDE\u5FDF\u5FE2\u5FE3\u5FE5\u5FE6\u5FE8\u5FE9\u5FEC\u5FEF\u5FF0\u5FF2\u5FF3\u5FF4\u5FF6\u5FF7\u5FF9\u5FFA\u5FFC\u6007"],
    ["9040", "\u6008\u6009\u600B\u600C\u6010\u6011\u6013\u6017\u6018\u601A\u601E\u601F\u6022\u6023\u6024\u602C\u602D\u602E\u6030", 4, "\u6036", 4, "\u603D\u603E\u6040\u6044", 6, "\u604C\u604E\u604F\u6051\u6053\u6054\u6056\u6057\u6058\u605B\u605C\u605E\u605F\u6060\u6061\u6065\u6066\u606E\u6071\u6072\u6074\u6075\u6077\u607E\u6080"],
    ["9080", "\u6081\u6082\u6085\u6086\u6087\u6088\u608A\u608B\u608E\u608F\u6090\u6091\u6093\u6095\u6097\u6098\u6099\u609C\u609E\u60A1\u60A2\u60A4\u60A5\u60A7\u60A9\u60AA\u60AE\u60B0\u60B3\u60B5\u60B6\u60B7\u60B9\u60BA\u60BD", 7, "\u60C7\u60C8\u60C9\u60CC", 4, "\u60D2\u60D3\u60D4\u60D6\u60D7\u60D9\u60DB\u60DE\u60E1", 4, "\u60EA\u60F1\u60F2\u60F5\u60F7\u60F8\u60FB", 4, "\u6102\u6103\u6104\u6105\u6107\u610A\u610B\u610C\u6110", 4, "\u6116\u6117\u6118\u6119\u611B\u611C\u611D\u611E\u6121\u6122\u6125\u6128\u6129\u612A\u612C", 18, "\u6140", 6],
    ["9140", "\u6147\u6149\u614B\u614D\u614F\u6150\u6152\u6153\u6154\u6156", 6, "\u615E\u615F\u6160\u6161\u6163\u6164\u6165\u6166\u6169", 6, "\u6171\u6172\u6173\u6174\u6176\u6178", 18, "\u618C\u618D\u618F", 4, "\u6195"],
    ["9180", "\u6196", 6, "\u619E", 8, "\u61AA\u61AB\u61AD", 9, "\u61B8", 5, "\u61BF\u61C0\u61C1\u61C3", 4, "\u61C9\u61CC", 4, "\u61D3\u61D5", 16, "\u61E7", 13, "\u61F6", 8, "\u6200", 5, "\u6207\u6209\u6213\u6214\u6219\u621C\u621D\u621E\u6220\u6223\u6226\u6227\u6228\u6229\u622B\u622D\u622F\u6230\u6231\u6232\u6235\u6236\u6238", 4, "\u6242\u6244\u6245\u6246\u624A"],
    ["9240", "\u624F\u6250\u6255\u6256\u6257\u6259\u625A\u625C", 6, "\u6264\u6265\u6268\u6271\u6272\u6274\u6275\u6277\u6278\u627A\u627B\u627D\u6281\u6282\u6283\u6285\u6286\u6287\u6288\u628B", 5, "\u6294\u6299\u629C\u629D\u629E\u62A3\u62A6\u62A7\u62A9\u62AA\u62AD\u62AE\u62AF\u62B0\u62B2\u62B3\u62B4\u62B6\u62B7\u62B8\u62BA\u62BE\u62C0\u62C1"],
    ["9280", "\u62C3\u62CB\u62CF\u62D1\u62D5\u62DD\u62DE\u62E0\u62E1\u62E4\u62EA\u62EB\u62F0\u62F2\u62F5\u62F8\u62F9\u62FA\u62FB\u6300\u6303\u6304\u6305\u6306\u630A\u630B\u630C\u630D\u630F\u6310\u6312\u6313\u6314\u6315\u6317\u6318\u6319\u631C\u6326\u6327\u6329\u632C\u632D\u632E\u6330\u6331\u6333", 5, "\u633B\u633C\u633E\u633F\u6340\u6341\u6344\u6347\u6348\u634A\u6351\u6352\u6353\u6354\u6356", 7, "\u6360\u6364\u6365\u6366\u6368\u636A\u636B\u636C\u636F\u6370\u6372\u6373\u6374\u6375\u6378\u6379\u637C\u637D\u637E\u637F\u6381\u6383\u6384\u6385\u6386\u638B\u638D\u6391\u6393\u6394\u6395\u6397\u6399", 6, "\u63A1\u63A4\u63A6\u63AB\u63AF\u63B1\u63B2\u63B5\u63B6\u63B9\u63BB\u63BD\u63BF\u63C0"],
    ["9340", "\u63C1\u63C2\u63C3\u63C5\u63C7\u63C8\u63CA\u63CB\u63CC\u63D1\u63D3\u63D4\u63D5\u63D7", 6, "\u63DF\u63E2\u63E4", 4, "\u63EB\u63EC\u63EE\u63EF\u63F0\u63F1\u63F3\u63F5\u63F7\u63F9\u63FA\u63FB\u63FC\u63FE\u6403\u6404\u6406", 4, "\u640D\u640E\u6411\u6412\u6415", 5, "\u641D\u641F\u6422\u6423\u6424"],
    ["9380", "\u6425\u6427\u6428\u6429\u642B\u642E", 5, "\u6435", 4, "\u643B\u643C\u643E\u6440\u6442\u6443\u6449\u644B", 6, "\u6453\u6455\u6456\u6457\u6459", 4, "\u645F", 7, "\u6468\u646A\u646B\u646C\u646E", 9, "\u647B", 6, "\u6483\u6486\u6488", 8, "\u6493\u6494\u6497\u6498\u649A\u649B\u649C\u649D\u649F", 4, "\u64A5\u64A6\u64A7\u64A8\u64AA\u64AB\u64AF\u64B1\u64B2\u64B3\u64B4\u64B6\u64B9\u64BB\u64BD\u64BE\u64BF\u64C1\u64C3\u64C4\u64C6", 6, "\u64CF\u64D1\u64D3\u64D4\u64D5\u64D6\u64D9\u64DA"],
    ["9440", "\u64DB\u64DC\u64DD\u64DF\u64E0\u64E1\u64E3\u64E5\u64E7", 24, "\u6501", 7, "\u650A", 7, "\u6513", 4, "\u6519", 8],
    ["9480", "\u6522\u6523\u6524\u6526", 4, "\u652C\u652D\u6530\u6531\u6532\u6533\u6537\u653A\u653C\u653D\u6540", 4, "\u6546\u6547\u654A\u654B\u654D\u654E\u6550\u6552\u6553\u6554\u6557\u6558\u655A\u655C\u655F\u6560\u6561\u6564\u6565\u6567\u6568\u6569\u656A\u656D\u656E\u656F\u6571\u6573\u6575\u6576\u6578", 14, "\u6588\u6589\u658A\u658D\u658E\u658F\u6592\u6594\u6595\u6596\u6598\u659A\u659D\u659E\u65A0\u65A2\u65A3\u65A6\u65A8\u65AA\u65AC\u65AE\u65B1", 7, "\u65BA\u65BB\u65BE\u65BF\u65C0\u65C2\u65C7\u65C8\u65C9\u65CA\u65CD\u65D0\u65D1\u65D3\u65D4\u65D5\u65D8", 7, "\u65E1\u65E3\u65E4\u65EA\u65EB"],
    ["9540", "\u65F2\u65F3\u65F4\u65F5\u65F8\u65F9\u65FB", 4, "\u6601\u6604\u6605\u6607\u6608\u6609\u660B\u660D\u6610\u6611\u6612\u6616\u6617\u6618\u661A\u661B\u661C\u661E\u6621\u6622\u6623\u6624\u6626\u6629\u662A\u662B\u662C\u662E\u6630\u6632\u6633\u6637", 4, "\u663D\u663F\u6640\u6642\u6644", 6, "\u664D\u664E\u6650\u6651\u6658"],
    ["9580", "\u6659\u665B\u665C\u665D\u665E\u6660\u6662\u6663\u6665\u6667\u6669", 4, "\u6671\u6672\u6673\u6675\u6678\u6679\u667B\u667C\u667D\u667F\u6680\u6681\u6683\u6685\u6686\u6688\u6689\u668A\u668B\u668D\u668E\u668F\u6690\u6692\u6693\u6694\u6695\u6698", 4, "\u669E", 8, "\u66A9", 4, "\u66AF", 4, "\u66B5\u66B6\u66B7\u66B8\u66BA\u66BB\u66BC\u66BD\u66BF", 25, "\u66DA\u66DE", 7, "\u66E7\u66E8\u66EA", 5, "\u66F1\u66F5\u66F6\u66F8\u66FA\u66FB\u66FD\u6701\u6702\u6703"],
    ["9640", "\u6704\u6705\u6706\u6707\u670C\u670E\u670F\u6711\u6712\u6713\u6716\u6718\u6719\u671A\u671C\u671E\u6720", 5, "\u6727\u6729\u672E\u6730\u6732\u6733\u6736\u6737\u6738\u6739\u673B\u673C\u673E\u673F\u6741\u6744\u6745\u6747\u674A\u674B\u674D\u6752\u6754\u6755\u6757", 4, "\u675D\u6762\u6763\u6764\u6766\u6767\u676B\u676C\u676E\u6771\u6774\u6776"],
    ["9680", "\u6778\u6779\u677A\u677B\u677D\u6780\u6782\u6783\u6785\u6786\u6788\u678A\u678C\u678D\u678E\u678F\u6791\u6792\u6793\u6794\u6796\u6799\u679B\u679F\u67A0\u67A1\u67A4\u67A6\u67A9\u67AC\u67AE\u67B1\u67B2\u67B4\u67B9", 7, "\u67C2\u67C5", 9, "\u67D5\u67D6\u67D7\u67DB\u67DF\u67E1\u67E3\u67E4\u67E6\u67E7\u67E8\u67EA\u67EB\u67ED\u67EE\u67F2\u67F5", 7, "\u67FE\u6801\u6802\u6803\u6804\u6806\u680D\u6810\u6812\u6814\u6815\u6818", 4, "\u681E\u681F\u6820\u6822", 6, "\u682B", 6, "\u6834\u6835\u6836\u683A\u683B\u683F\u6847\u684B\u684D\u684F\u6852\u6856", 5],
    ["9740", "\u685C\u685D\u685E\u685F\u686A\u686C", 7, "\u6875\u6878", 8, "\u6882\u6884\u6887", 7, "\u6890\u6891\u6892\u6894\u6895\u6896\u6898", 9, "\u68A3\u68A4\u68A5\u68A9\u68AA\u68AB\u68AC\u68AE\u68B1\u68B2\u68B4\u68B6\u68B7\u68B8"],
    ["9780", "\u68B9", 6, "\u68C1\u68C3", 5, "\u68CA\u68CC\u68CE\u68CF\u68D0\u68D1\u68D3\u68D4\u68D6\u68D7\u68D9\u68DB", 4, "\u68E1\u68E2\u68E4", 9, "\u68EF\u68F2\u68F3\u68F4\u68F6\u68F7\u68F8\u68FB\u68FD\u68FE\u68FF\u6900\u6902\u6903\u6904\u6906", 4, "\u690C\u690F\u6911\u6913", 11, "\u6921\u6922\u6923\u6925", 7, "\u692E\u692F\u6931\u6932\u6933\u6935\u6936\u6937\u6938\u693A\u693B\u693C\u693E\u6940\u6941\u6943", 16, "\u6955\u6956\u6958\u6959\u695B\u695C\u695F"],
    ["9840", "\u6961\u6962\u6964\u6965\u6967\u6968\u6969\u696A\u696C\u696D\u696F\u6970\u6972", 4, "\u697A\u697B\u697D\u697E\u697F\u6981\u6983\u6985\u698A\u698B\u698C\u698E", 5, "\u6996\u6997\u6999\u699A\u699D", 9, "\u69A9\u69AA\u69AC\u69AE\u69AF\u69B0\u69B2\u69B3\u69B5\u69B6\u69B8\u69B9\u69BA\u69BC\u69BD"],
    ["9880", "\u69BE\u69BF\u69C0\u69C2", 7, "\u69CB\u69CD\u69CF\u69D1\u69D2\u69D3\u69D5", 5, "\u69DC\u69DD\u69DE\u69E1", 11, "\u69EE\u69EF\u69F0\u69F1\u69F3", 9, "\u69FE\u6A00", 9, "\u6A0B", 11, "\u6A19", 5, "\u6A20\u6A22", 5, "\u6A29\u6A2B\u6A2C\u6A2D\u6A2E\u6A30\u6A32\u6A33\u6A34\u6A36", 6, "\u6A3F", 4, "\u6A45\u6A46\u6A48", 7, "\u6A51", 6, "\u6A5A"],
    ["9940", "\u6A5C", 4, "\u6A62\u6A63\u6A64\u6A66", 10, "\u6A72", 6, "\u6A7A\u6A7B\u6A7D\u6A7E\u6A7F\u6A81\u6A82\u6A83\u6A85", 8, "\u6A8F\u6A92", 4, "\u6A98", 7, "\u6AA1", 5],
    ["9980", "\u6AA7\u6AA8\u6AAA\u6AAD", 114, "\u6B25\u6B26\u6B28", 6],
    ["9a40", "\u6B2F\u6B30\u6B31\u6B33\u6B34\u6B35\u6B36\u6B38\u6B3B\u6B3C\u6B3D\u6B3F\u6B40\u6B41\u6B42\u6B44\u6B45\u6B48\u6B4A\u6B4B\u6B4D", 11, "\u6B5A", 7, "\u6B68\u6B69\u6B6B", 13, "\u6B7A\u6B7D\u6B7E\u6B7F\u6B80\u6B85\u6B88"],
    ["9a80", "\u6B8C\u6B8E\u6B8F\u6B90\u6B91\u6B94\u6B95\u6B97\u6B98\u6B99\u6B9C", 4, "\u6BA2", 7, "\u6BAB", 7, "\u6BB6\u6BB8", 6, "\u6BC0\u6BC3\u6BC4\u6BC6", 4, "\u6BCC\u6BCE\u6BD0\u6BD1\u6BD8\u6BDA\u6BDC", 4, "\u6BE2", 7, "\u6BEC\u6BED\u6BEE\u6BF0\u6BF1\u6BF2\u6BF4\u6BF6\u6BF7\u6BF8\u6BFA\u6BFB\u6BFC\u6BFE", 6, "\u6C08", 4, "\u6C0E\u6C12\u6C17\u6C1C\u6C1D\u6C1E\u6C20\u6C23\u6C25\u6C2B\u6C2C\u6C2D\u6C31\u6C33\u6C36\u6C37\u6C39\u6C3A\u6C3B\u6C3C\u6C3E\u6C3F\u6C43\u6C44\u6C45\u6C48\u6C4B", 4, "\u6C51\u6C52\u6C53\u6C56\u6C58"],
    ["9b40", "\u6C59\u6C5A\u6C62\u6C63\u6C65\u6C66\u6C67\u6C6B", 4, "\u6C71\u6C73\u6C75\u6C77\u6C78\u6C7A\u6C7B\u6C7C\u6C7F\u6C80\u6C84\u6C87\u6C8A\u6C8B\u6C8D\u6C8E\u6C91\u6C92\u6C95\u6C96\u6C97\u6C98\u6C9A\u6C9C\u6C9D\u6C9E\u6CA0\u6CA2\u6CA8\u6CAC\u6CAF\u6CB0\u6CB4\u6CB5\u6CB6\u6CB7\u6CBA\u6CC0\u6CC1\u6CC2\u6CC3\u6CC6\u6CC7\u6CC8\u6CCB\u6CCD\u6CCE\u6CCF\u6CD1\u6CD2\u6CD8"],
    ["9b80", "\u6CD9\u6CDA\u6CDC\u6CDD\u6CDF\u6CE4\u6CE6\u6CE7\u6CE9\u6CEC\u6CED\u6CF2\u6CF4\u6CF9\u6CFF\u6D00\u6D02\u6D03\u6D05\u6D06\u6D08\u6D09\u6D0A\u6D0D\u6D0F\u6D10\u6D11\u6D13\u6D14\u6D15\u6D16\u6D18\u6D1C\u6D1D\u6D1F", 5, "\u6D26\u6D28\u6D29\u6D2C\u6D2D\u6D2F\u6D30\u6D34\u6D36\u6D37\u6D38\u6D3A\u6D3F\u6D40\u6D42\u6D44\u6D49\u6D4C\u6D50\u6D55\u6D56\u6D57\u6D58\u6D5B\u6D5D\u6D5F\u6D61\u6D62\u6D64\u6D65\u6D67\u6D68\u6D6B\u6D6C\u6D6D\u6D70\u6D71\u6D72\u6D73\u6D75\u6D76\u6D79\u6D7A\u6D7B\u6D7D", 4, "\u6D83\u6D84\u6D86\u6D87\u6D8A\u6D8B\u6D8D\u6D8F\u6D90\u6D92\u6D96", 4, "\u6D9C\u6DA2\u6DA5\u6DAC\u6DAD\u6DB0\u6DB1\u6DB3\u6DB4\u6DB6\u6DB7\u6DB9", 5, "\u6DC1\u6DC2\u6DC3\u6DC8\u6DC9\u6DCA"],
    ["9c40", "\u6DCD\u6DCE\u6DCF\u6DD0\u6DD2\u6DD3\u6DD4\u6DD5\u6DD7\u6DDA\u6DDB\u6DDC\u6DDF\u6DE2\u6DE3\u6DE5\u6DE7\u6DE8\u6DE9\u6DEA\u6DED\u6DEF\u6DF0\u6DF2\u6DF4\u6DF5\u6DF6\u6DF8\u6DFA\u6DFD", 7, "\u6E06\u6E07\u6E08\u6E09\u6E0B\u6E0F\u6E12\u6E13\u6E15\u6E18\u6E19\u6E1B\u6E1C\u6E1E\u6E1F\u6E22\u6E26\u6E27\u6E28\u6E2A\u6E2C\u6E2E\u6E30\u6E31\u6E33\u6E35"],
    ["9c80", "\u6E36\u6E37\u6E39\u6E3B", 7, "\u6E45", 7, "\u6E4F\u6E50\u6E51\u6E52\u6E55\u6E57\u6E59\u6E5A\u6E5C\u6E5D\u6E5E\u6E60", 10, "\u6E6C\u6E6D\u6E6F", 14, "\u6E80\u6E81\u6E82\u6E84\u6E87\u6E88\u6E8A", 4, "\u6E91", 6, "\u6E99\u6E9A\u6E9B\u6E9D\u6E9E\u6EA0\u6EA1\u6EA3\u6EA4\u6EA6\u6EA8\u6EA9\u6EAB\u6EAC\u6EAD\u6EAE\u6EB0\u6EB3\u6EB5\u6EB8\u6EB9\u6EBC\u6EBE\u6EBF\u6EC0\u6EC3\u6EC4\u6EC5\u6EC6\u6EC8\u6EC9\u6ECA\u6ECC\u6ECD\u6ECE\u6ED0\u6ED2\u6ED6\u6ED8\u6ED9\u6EDB\u6EDC\u6EDD\u6EE3\u6EE7\u6EEA", 5],
    ["9d40", "\u6EF0\u6EF1\u6EF2\u6EF3\u6EF5\u6EF6\u6EF7\u6EF8\u6EFA", 7, "\u6F03\u6F04\u6F05\u6F07\u6F08\u6F0A", 4, "\u6F10\u6F11\u6F12\u6F16", 9, "\u6F21\u6F22\u6F23\u6F25\u6F26\u6F27\u6F28\u6F2C\u6F2E\u6F30\u6F32\u6F34\u6F35\u6F37", 6, "\u6F3F\u6F40\u6F41\u6F42"],
    ["9d80", "\u6F43\u6F44\u6F45\u6F48\u6F49\u6F4A\u6F4C\u6F4E", 9, "\u6F59\u6F5A\u6F5B\u6F5D\u6F5F\u6F60\u6F61\u6F63\u6F64\u6F65\u6F67", 5, "\u6F6F\u6F70\u6F71\u6F73\u6F75\u6F76\u6F77\u6F79\u6F7B\u6F7D", 6, "\u6F85\u6F86\u6F87\u6F8A\u6F8B\u6F8F", 12, "\u6F9D\u6F9E\u6F9F\u6FA0\u6FA2", 4, "\u6FA8", 10, "\u6FB4\u6FB5\u6FB7\u6FB8\u6FBA", 5, "\u6FC1\u6FC3", 5, "\u6FCA", 6, "\u6FD3", 10, "\u6FDF\u6FE2\u6FE3\u6FE4\u6FE5"],
    ["9e40", "\u6FE6", 7, "\u6FF0", 32, "\u7012", 7, "\u701C", 6, "\u7024", 6],
    ["9e80", "\u702B", 9, "\u7036\u7037\u7038\u703A", 17, "\u704D\u704E\u7050", 13, "\u705F", 11, "\u706E\u7071\u7072\u7073\u7074\u7077\u7079\u707A\u707B\u707D\u7081\u7082\u7083\u7084\u7086\u7087\u7088\u708B\u708C\u708D\u708F\u7090\u7091\u7093\u7097\u7098\u709A\u709B\u709E", 12, "\u70B0\u70B2\u70B4\u70B5\u70B6\u70BA\u70BE\u70BF\u70C4\u70C5\u70C6\u70C7\u70C9\u70CB", 12, "\u70DA"],
    ["9f40", "\u70DC\u70DD\u70DE\u70E0\u70E1\u70E2\u70E3\u70E5\u70EA\u70EE\u70F0", 6, "\u70F8\u70FA\u70FB\u70FC\u70FE", 10, "\u710B", 4, "\u7111\u7112\u7114\u7117\u711B", 10, "\u7127", 7, "\u7132\u7133\u7134"],
    ["9f80", "\u7135\u7137", 13, "\u7146\u7147\u7148\u7149\u714B\u714D\u714F", 12, "\u715D\u715F", 4, "\u7165\u7169", 4, "\u716F\u7170\u7171\u7174\u7175\u7176\u7177\u7179\u717B\u717C\u717E", 5, "\u7185", 4, "\u718B\u718C\u718D\u718E\u7190\u7191\u7192\u7193\u7195\u7196\u7197\u719A", 4, "\u71A1", 6, "\u71A9\u71AA\u71AB\u71AD", 5, "\u71B4\u71B6\u71B7\u71B8\u71BA", 8, "\u71C4", 9, "\u71CF", 4],
    ["a040", "\u71D6", 9, "\u71E1\u71E2\u71E3\u71E4\u71E6\u71E8", 5, "\u71EF", 9, "\u71FA", 11, "\u7207", 19],
    ["a080", "\u721B\u721C\u721E", 9, "\u7229\u722B\u722D\u722E\u722F\u7232\u7233\u7234\u723A\u723C\u723E\u7240", 6, "\u7249\u724A\u724B\u724E\u724F\u7250\u7251\u7253\u7254\u7255\u7257\u7258\u725A\u725C\u725E\u7260\u7263\u7264\u7265\u7268\u726A\u726B\u726C\u726D\u7270\u7271\u7273\u7274\u7276\u7277\u7278\u727B\u727C\u727D\u7282\u7283\u7285", 4, "\u728C\u728E\u7290\u7291\u7293", 11, "\u72A0", 11, "\u72AE\u72B1\u72B2\u72B3\u72B5\u72BA", 6, "\u72C5\u72C6\u72C7\u72C9\u72CA\u72CB\u72CC\u72CF\u72D1\u72D3\u72D4\u72D5\u72D6\u72D8\u72DA\u72DB"],
    ["a1a1", "\u3000\u3001\u3002\xB7\u02C9\u02C7\xA8\u3003\u3005\u2014\uFF5E\u2016\u2026\u2018\u2019\u201C\u201D\u3014\u3015\u3008", 7, "\u3016\u3017\u3010\u3011\xB1\xD7\xF7\u2236\u2227\u2228\u2211\u220F\u222A\u2229\u2208\u2237\u221A\u22A5\u2225\u2220\u2312\u2299\u222B\u222E\u2261\u224C\u2248\u223D\u221D\u2260\u226E\u226F\u2264\u2265\u221E\u2235\u2234\u2642\u2640\xB0\u2032\u2033\u2103\uFF04\xA4\uFFE0\uFFE1\u2030\xA7\u2116\u2606\u2605\u25CB\u25CF\u25CE\u25C7\u25C6\u25A1\u25A0\u25B3\u25B2\u203B\u2192\u2190\u2191\u2193\u3013"],
    ["a2a1", "\u2170", 9],
    ["a2b1", "\u2488", 19, "\u2474", 19, "\u2460", 9],
    ["a2e5", "\u3220", 9],
    ["a2f1", "\u2160", 11],
    ["a3a1", "\uFF01\uFF02\uFF03\uFFE5\uFF05", 88, "\uFFE3"],
    ["a4a1", "\u3041", 82],
    ["a5a1", "\u30A1", 85],
    ["a6a1", "\u0391", 16, "\u03A3", 6],
    ["a6c1", "\u03B1", 16, "\u03C3", 6],
    ["a6e0", "\uFE35\uFE36\uFE39\uFE3A\uFE3F\uFE40\uFE3D\uFE3E\uFE41\uFE42\uFE43\uFE44"],
    ["a6ee", "\uFE3B\uFE3C\uFE37\uFE38\uFE31"],
    ["a6f4", "\uFE33\uFE34"],
    ["a7a1", "\u0410", 5, "\u0401\u0416", 25],
    ["a7d1", "\u0430", 5, "\u0451\u0436", 25],
    ["a840", "\u02CA\u02CB\u02D9\u2013\u2015\u2025\u2035\u2105\u2109\u2196\u2197\u2198\u2199\u2215\u221F\u2223\u2252\u2266\u2267\u22BF\u2550", 35, "\u2581", 6],
    ["a880", "\u2588", 7, "\u2593\u2594\u2595\u25BC\u25BD\u25E2\u25E3\u25E4\u25E5\u2609\u2295\u3012\u301D\u301E"],
    ["a8a1", "\u0101\xE1\u01CE\xE0\u0113\xE9\u011B\xE8\u012B\xED\u01D0\xEC\u014D\xF3\u01D2\xF2\u016B\xFA\u01D4\xF9\u01D6\u01D8\u01DA\u01DC\xFC\xEA\u0251"],
    ["a8bd", "\u0144\u0148"],
    ["a8c0", "\u0261"],
    ["a8c5", "\u3105", 36],
    ["a940", "\u3021", 8, "\u32A3\u338E\u338F\u339C\u339D\u339E\u33A1\u33C4\u33CE\u33D1\u33D2\u33D5\uFE30\uFFE2\uFFE4"],
    ["a959", "\u2121\u3231"],
    ["a95c", "\u2010"],
    ["a960", "\u30FC\u309B\u309C\u30FD\u30FE\u3006\u309D\u309E\uFE49", 9, "\uFE54\uFE55\uFE56\uFE57\uFE59", 8],
    ["a980", "\uFE62", 4, "\uFE68\uFE69\uFE6A\uFE6B"],
    ["a996", "\u3007"],
    ["a9a4", "\u2500", 75],
    ["aa40", "\u72DC\u72DD\u72DF\u72E2", 5, "\u72EA\u72EB\u72F5\u72F6\u72F9\u72FD\u72FE\u72FF\u7300\u7302\u7304", 5, "\u730B\u730C\u730D\u730F\u7310\u7311\u7312\u7314\u7318\u7319\u731A\u731F\u7320\u7323\u7324\u7326\u7327\u7328\u732D\u732F\u7330\u7332\u7333\u7335\u7336\u733A\u733B\u733C\u733D\u7340", 8],
    ["aa80", "\u7349\u734A\u734B\u734C\u734E\u734F\u7351\u7353\u7354\u7355\u7356\u7358", 7, "\u7361", 10, "\u736E\u7370\u7371"],
    ["ab40", "\u7372", 11, "\u737F", 4, "\u7385\u7386\u7388\u738A\u738C\u738D\u738F\u7390\u7392\u7393\u7394\u7395\u7397\u7398\u7399\u739A\u739C\u739D\u739E\u73A0\u73A1\u73A3", 5, "\u73AA\u73AC\u73AD\u73B1\u73B4\u73B5\u73B6\u73B8\u73B9\u73BC\u73BD\u73BE\u73BF\u73C1\u73C3", 4],
    ["ab80", "\u73CB\u73CC\u73CE\u73D2", 6, "\u73DA\u73DB\u73DC\u73DD\u73DF\u73E1\u73E2\u73E3\u73E4\u73E6\u73E8\u73EA\u73EB\u73EC\u73EE\u73EF\u73F0\u73F1\u73F3", 4],
    ["ac40", "\u73F8", 10, "\u7404\u7407\u7408\u740B\u740C\u740D\u740E\u7411", 8, "\u741C", 5, "\u7423\u7424\u7427\u7429\u742B\u742D\u742F\u7431\u7432\u7437", 4, "\u743D\u743E\u743F\u7440\u7442", 11],
    ["ac80", "\u744E", 6, "\u7456\u7458\u745D\u7460", 12, "\u746E\u746F\u7471", 4, "\u7478\u7479\u747A"],
    ["ad40", "\u747B\u747C\u747D\u747F\u7482\u7484\u7485\u7486\u7488\u7489\u748A\u748C\u748D\u748F\u7491", 10, "\u749D\u749F", 7, "\u74AA", 15, "\u74BB", 12],
    ["ad80", "\u74C8", 9, "\u74D3", 8, "\u74DD\u74DF\u74E1\u74E5\u74E7", 6, "\u74F0\u74F1\u74F2"],
    ["ae40", "\u74F3\u74F5\u74F8", 6, "\u7500\u7501\u7502\u7503\u7505", 7, "\u750E\u7510\u7512\u7514\u7515\u7516\u7517\u751B\u751D\u751E\u7520", 4, "\u7526\u7527\u752A\u752E\u7534\u7536\u7539\u753C\u753D\u753F\u7541\u7542\u7543\u7544\u7546\u7547\u7549\u754A\u754D\u7550\u7551\u7552\u7553\u7555\u7556\u7557\u7558"],
    ["ae80", "\u755D", 7, "\u7567\u7568\u7569\u756B", 6, "\u7573\u7575\u7576\u7577\u757A", 4, "\u7580\u7581\u7582\u7584\u7585\u7587"],
    ["af40", "\u7588\u7589\u758A\u758C\u758D\u758E\u7590\u7593\u7595\u7598\u759B\u759C\u759E\u75A2\u75A6", 4, "\u75AD\u75B6\u75B7\u75BA\u75BB\u75BF\u75C0\u75C1\u75C6\u75CB\u75CC\u75CE\u75CF\u75D0\u75D1\u75D3\u75D7\u75D9\u75DA\u75DC\u75DD\u75DF\u75E0\u75E1\u75E5\u75E9\u75EC\u75ED\u75EE\u75EF\u75F2\u75F3\u75F5\u75F6\u75F7\u75F8\u75FA\u75FB\u75FD\u75FE\u7602\u7604\u7606\u7607"],
    ["af80", "\u7608\u7609\u760B\u760D\u760E\u760F\u7611\u7612\u7613\u7614\u7616\u761A\u761C\u761D\u761E\u7621\u7623\u7627\u7628\u762C\u762E\u762F\u7631\u7632\u7636\u7637\u7639\u763A\u763B\u763D\u7641\u7642\u7644"],
    ["b040", "\u7645", 6, "\u764E", 5, "\u7655\u7657", 4, "\u765D\u765F\u7660\u7661\u7662\u7664", 6, "\u766C\u766D\u766E\u7670", 7, "\u7679\u767A\u767C\u767F\u7680\u7681\u7683\u7685\u7689\u768A\u768C\u768D\u768F\u7690\u7692\u7694\u7695\u7697\u7698\u769A\u769B"],
    ["b080", "\u769C", 7, "\u76A5", 8, "\u76AF\u76B0\u76B3\u76B5", 9, "\u76C0\u76C1\u76C3\u554A\u963F\u57C3\u6328\u54CE\u5509\u54C0\u7691\u764C\u853C\u77EE\u827E\u788D\u7231\u9698\u978D\u6C28\u5B89\u4FFA\u6309\u6697\u5CB8\u80FA\u6848\u80AE\u6602\u76CE\u51F9\u6556\u71AC\u7FF1\u8884\u50B2\u5965\u61CA\u6FB3\u82AD\u634C\u6252\u53ED\u5427\u7B06\u516B\u75A4\u5DF4\u62D4\u8DCB\u9776\u628A\u8019\u575D\u9738\u7F62\u7238\u767D\u67CF\u767E\u6446\u4F70\u8D25\u62DC\u7A17\u6591\u73ED\u642C\u6273\u822C\u9881\u677F\u7248\u626E\u62CC\u4F34\u74E3\u534A\u529E\u7ECA\u90A6\u5E2E\u6886\u699C\u8180\u7ED1\u68D2\u78C5\u868C\u9551\u508D\u8C24\u82DE\u80DE\u5305\u8912\u5265"],
    ["b140", "\u76C4\u76C7\u76C9\u76CB\u76CC\u76D3\u76D5\u76D9\u76DA\u76DC\u76DD\u76DE\u76E0", 4, "\u76E6", 7, "\u76F0\u76F3\u76F5\u76F6\u76F7\u76FA\u76FB\u76FD\u76FF\u7700\u7702\u7703\u7705\u7706\u770A\u770C\u770E", 10, "\u771B\u771C\u771D\u771E\u7721\u7723\u7724\u7725\u7727\u772A\u772B"],
    ["b180", "\u772C\u772E\u7730", 4, "\u7739\u773B\u773D\u773E\u773F\u7742\u7744\u7745\u7746\u7748", 7, "\u7752", 7, "\u775C\u8584\u96F9\u4FDD\u5821\u9971\u5B9D\u62B1\u62A5\u66B4\u8C79\u9C8D\u7206\u676F\u7891\u60B2\u5351\u5317\u8F88\u80CC\u8D1D\u94A1\u500D\u72C8\u5907\u60EB\u7119\u88AB\u5954\u82EF\u672C\u7B28\u5D29\u7EF7\u752D\u6CF5\u8E66\u8FF8\u903C\u9F3B\u6BD4\u9119\u7B14\u5F7C\u78A7\u84D6\u853D\u6BD5\u6BD9\u6BD6\u5E01\u5E87\u75F9\u95ED\u655D\u5F0A\u5FC5\u8F9F\u58C1\u81C2\u907F\u965B\u97AD\u8FB9\u7F16\u8D2C\u6241\u4FBF\u53D8\u535E\u8FA8\u8FA9\u8FAB\u904D\u6807\u5F6A\u8198\u8868\u9CD6\u618B\u522B\u762A\u5F6C\u658C\u6FD2\u6EE8\u5BBE\u6448\u5175\u51B0\u67C4\u4E19\u79C9\u997C\u70B3"],
    ["b240", "\u775D\u775E\u775F\u7760\u7764\u7767\u7769\u776A\u776D", 11, "\u777A\u777B\u777C\u7781\u7782\u7783\u7786", 5, "\u778F\u7790\u7793", 11, "\u77A1\u77A3\u77A4\u77A6\u77A8\u77AB\u77AD\u77AE\u77AF\u77B1\u77B2\u77B4\u77B6", 4],
    ["b280", "\u77BC\u77BE\u77C0", 12, "\u77CE", 8, "\u77D8\u77D9\u77DA\u77DD", 4, "\u77E4\u75C5\u5E76\u73BB\u83E0\u64AD\u62E8\u94B5\u6CE2\u535A\u52C3\u640F\u94C2\u7B94\u4F2F\u5E1B\u8236\u8116\u818A\u6E24\u6CCA\u9A73\u6355\u535C\u54FA\u8865\u57E0\u4E0D\u5E03\u6B65\u7C3F\u90E8\u6016\u64E6\u731C\u88C1\u6750\u624D\u8D22\u776C\u8E29\u91C7\u5F69\u83DC\u8521\u9910\u53C2\u8695\u6B8B\u60ED\u60E8\u707F\u82CD\u8231\u4ED3\u6CA7\u85CF\u64CD\u7CD9\u69FD\u66F9\u8349\u5395\u7B56\u4FA7\u518C\u6D4B\u5C42\u8E6D\u63D2\u53C9\u832C\u8336\u67E5\u78B4\u643D\u5BDF\u5C94\u5DEE\u8BE7\u62C6\u67F4\u8C7A\u6400\u63BA\u8749\u998B\u8C17\u7F20\u94F2\u4EA7\u9610\u98A4\u660C\u7316"],
    ["b340", "\u77E6\u77E8\u77EA\u77EF\u77F0\u77F1\u77F2\u77F4\u77F5\u77F7\u77F9\u77FA\u77FB\u77FC\u7803", 5, "\u780A\u780B\u780E\u780F\u7810\u7813\u7815\u7819\u781B\u781E\u7820\u7821\u7822\u7824\u7828\u782A\u782B\u782E\u782F\u7831\u7832\u7833\u7835\u7836\u783D\u783F\u7841\u7842\u7843\u7844\u7846\u7848\u7849\u784A\u784B\u784D\u784F\u7851\u7853\u7854\u7858\u7859\u785A"],
    ["b380", "\u785B\u785C\u785E", 11, "\u786F", 7, "\u7878\u7879\u787A\u787B\u787D", 6, "\u573A\u5C1D\u5E38\u957F\u507F\u80A0\u5382\u655E\u7545\u5531\u5021\u8D85\u6284\u949E\u671D\u5632\u6F6E\u5DE2\u5435\u7092\u8F66\u626F\u64A4\u63A3\u5F7B\u6F88\u90F4\u81E3\u8FB0\u5C18\u6668\u5FF1\u6C89\u9648\u8D81\u886C\u6491\u79F0\u57CE\u6A59\u6210\u5448\u4E58\u7A0B\u60E9\u6F84\u8BDA\u627F\u901E\u9A8B\u79E4\u5403\u75F4\u6301\u5319\u6C60\u8FDF\u5F1B\u9A70\u803B\u9F7F\u4F88\u5C3A\u8D64\u7FC5\u65A5\u70BD\u5145\u51B2\u866B\u5D07\u5BA0\u62BD\u916C\u7574\u8E0C\u7A20\u6101\u7B79\u4EC7\u7EF8\u7785\u4E11\u81ED\u521D\u51FA\u6A71\u53A8\u8E87\u9504\u96CF\u6EC1\u9664\u695A"],
    ["b440", "\u7884\u7885\u7886\u7888\u788A\u788B\u788F\u7890\u7892\u7894\u7895\u7896\u7899\u789D\u789E\u78A0\u78A2\u78A4\u78A6\u78A8", 7, "\u78B5\u78B6\u78B7\u78B8\u78BA\u78BB\u78BC\u78BD\u78BF\u78C0\u78C2\u78C3\u78C4\u78C6\u78C7\u78C8\u78CC\u78CD\u78CE\u78CF\u78D1\u78D2\u78D3\u78D6\u78D7\u78D8\u78DA", 9],
    ["b480", "\u78E4\u78E5\u78E6\u78E7\u78E9\u78EA\u78EB\u78ED", 4, "\u78F3\u78F5\u78F6\u78F8\u78F9\u78FB", 5, "\u7902\u7903\u7904\u7906", 6, "\u7840\u50A8\u77D7\u6410\u89E6\u5904\u63E3\u5DDD\u7A7F\u693D\u4F20\u8239\u5598\u4E32\u75AE\u7A97\u5E62\u5E8A\u95EF\u521B\u5439\u708A\u6376\u9524\u5782\u6625\u693F\u9187\u5507\u6DF3\u7EAF\u8822\u6233\u7EF0\u75B5\u8328\u78C1\u96CC\u8F9E\u6148\u74F7\u8BCD\u6B64\u523A\u8D50\u6B21\u806A\u8471\u56F1\u5306\u4ECE\u4E1B\u51D1\u7C97\u918B\u7C07\u4FC3\u8E7F\u7BE1\u7A9C\u6467\u5D14\u50AC\u8106\u7601\u7CB9\u6DEC\u7FE0\u6751\u5B58\u5BF8\u78CB\u64AE\u6413\u63AA\u632B\u9519\u642D\u8FBE\u7B54\u7629\u6253\u5927\u5446\u6B79\u50A3\u6234\u5E26\u6B86\u4EE3\u8D37\u888B\u5F85\u902E"],
    ["b540", "\u790D", 5, "\u7914", 9, "\u791F", 4, "\u7925", 14, "\u7935", 4, "\u793D\u793F\u7942\u7943\u7944\u7945\u7947\u794A", 8, "\u7954\u7955\u7958\u7959\u7961\u7963"],
    ["b580", "\u7964\u7966\u7969\u796A\u796B\u796C\u796E\u7970", 6, "\u7979\u797B", 4, "\u7982\u7983\u7986\u7987\u7988\u7989\u798B\u798C\u798D\u798E\u7990\u7991\u7992\u6020\u803D\u62C5\u4E39\u5355\u90F8\u63B8\u80C6\u65E6\u6C2E\u4F46\u60EE\u6DE1\u8BDE\u5F39\u86CB\u5F53\u6321\u515A\u8361\u6863\u5200\u6363\u8E48\u5012\u5C9B\u7977\u5BFC\u5230\u7A3B\u60BC\u9053\u76D7\u5FB7\u5F97\u7684\u8E6C\u706F\u767B\u7B49\u77AA\u51F3\u9093\u5824\u4F4E\u6EF4\u8FEA\u654C\u7B1B\u72C4\u6DA4\u7FDF\u5AE1\u62B5\u5E95\u5730\u8482\u7B2C\u5E1D\u5F1F\u9012\u7F14\u98A0\u6382\u6EC7\u7898\u70B9\u5178\u975B\u57AB\u7535\u4F43\u7538\u5E97\u60E6\u5960\u6DC0\u6BBF\u7889\u53FC\u96D5\u51CB\u5201\u6389\u540A\u9493\u8C03\u8DCC\u7239\u789F\u8776\u8FED\u8C0D\u53E0"],
    ["b640", "\u7993", 6, "\u799B", 11, "\u79A8", 10, "\u79B4", 4, "\u79BC\u79BF\u79C2\u79C4\u79C5\u79C7\u79C8\u79CA\u79CC\u79CE\u79CF\u79D0\u79D3\u79D4\u79D6\u79D7\u79D9", 5, "\u79E0\u79E1\u79E2\u79E5\u79E8\u79EA"],
    ["b680", "\u79EC\u79EE\u79F1", 6, "\u79F9\u79FA\u79FC\u79FE\u79FF\u7A01\u7A04\u7A05\u7A07\u7A08\u7A09\u7A0A\u7A0C\u7A0F", 4, "\u7A15\u7A16\u7A18\u7A19\u7A1B\u7A1C\u4E01\u76EF\u53EE\u9489\u9876\u9F0E\u952D\u5B9A\u8BA2\u4E22\u4E1C\u51AC\u8463\u61C2\u52A8\u680B\u4F97\u606B\u51BB\u6D1E\u515C\u6296\u6597\u9661\u8C46\u9017\u75D8\u90FD\u7763\u6BD2\u728A\u72EC\u8BFB\u5835\u7779\u8D4C\u675C\u9540\u809A\u5EA6\u6E21\u5992\u7AEF\u77ED\u953B\u6BB5\u65AD\u7F0E\u5806\u5151\u961F\u5BF9\u58A9\u5428\u8E72\u6566\u987F\u56E4\u949D\u76FE\u9041\u6387\u54C6\u591A\u593A\u579B\u8EB2\u6735\u8DFA\u8235\u5241\u60F0\u5815\u86FE\u5CE8\u9E45\u4FC4\u989D\u8BB9\u5A25\u6076\u5384\u627C\u904F\u9102\u997F\u6069\u800C\u513F\u8033\u5C14\u9975\u6D31\u4E8C"],
    ["b740", "\u7A1D\u7A1F\u7A21\u7A22\u7A24", 14, "\u7A34\u7A35\u7A36\u7A38\u7A3A\u7A3E\u7A40", 5, "\u7A47", 9, "\u7A52", 4, "\u7A58", 16],
    ["b780", "\u7A69", 6, "\u7A71\u7A72\u7A73\u7A75\u7A7B\u7A7C\u7A7D\u7A7E\u7A82\u7A85\u7A87\u7A89\u7A8A\u7A8B\u7A8C\u7A8E\u7A8F\u7A90\u7A93\u7A94\u7A99\u7A9A\u7A9B\u7A9E\u7AA1\u7AA2\u8D30\u53D1\u7F5A\u7B4F\u4F10\u4E4F\u9600\u6CD5\u73D0\u85E9\u5E06\u756A\u7FFB\u6A0A\u77FE\u9492\u7E41\u51E1\u70E6\u53CD\u8FD4\u8303\u8D29\u72AF\u996D\u6CDB\u574A\u82B3\u65B9\u80AA\u623F\u9632\u59A8\u4EFF\u8BBF\u7EBA\u653E\u83F2\u975E\u5561\u98DE\u80A5\u532A\u8BFD\u5420\u80BA\u5E9F\u6CB8\u8D39\u82AC\u915A\u5429\u6C1B\u5206\u7EB7\u575F\u711A\u6C7E\u7C89\u594B\u4EFD\u5FFF\u6124\u7CAA\u4E30\u5C01\u67AB\u8702\u5CF0\u950B\u98CE\u75AF\u70FD\u9022\u51AF\u7F1D\u8BBD\u5949\u51E4\u4F5B\u5426\u592B\u6577\u80A4\u5B75\u6276\u62C2\u8F90\u5E45\u6C1F\u7B26\u4F0F\u4FD8\u670D"],
    ["b840", "\u7AA3\u7AA4\u7AA7\u7AA9\u7AAA\u7AAB\u7AAE", 4, "\u7AB4", 10, "\u7AC0", 10, "\u7ACC", 9, "\u7AD7\u7AD8\u7ADA\u7ADB\u7ADC\u7ADD\u7AE1\u7AE2\u7AE4\u7AE7", 5, "\u7AEE\u7AF0\u7AF1\u7AF2\u7AF3"],
    ["b880", "\u7AF4", 4, "\u7AFB\u7AFC\u7AFE\u7B00\u7B01\u7B02\u7B05\u7B07\u7B09\u7B0C\u7B0D\u7B0E\u7B10\u7B12\u7B13\u7B16\u7B17\u7B18\u7B1A\u7B1C\u7B1D\u7B1F\u7B21\u7B22\u7B23\u7B27\u7B29\u7B2D\u6D6E\u6DAA\u798F\u88B1\u5F17\u752B\u629A\u8F85\u4FEF\u91DC\u65A7\u812F\u8151\u5E9C\u8150\u8D74\u526F\u8986\u8D4B\u590D\u5085\u4ED8\u961C\u7236\u8179\u8D1F\u5BCC\u8BA3\u9644\u5987\u7F1A\u5490\u5676\u560E\u8BE5\u6539\u6982\u9499\u76D6\u6E89\u5E72\u7518\u6746\u67D1\u7AFF\u809D\u8D76\u611F\u79C6\u6562\u8D63\u5188\u521A\u94A2\u7F38\u809B\u7EB2\u5C97\u6E2F\u6760\u7BD9\u768B\u9AD8\u818F\u7F94\u7CD5\u641E\u9550\u7A3F\u544A\u54E5\u6B4C\u6401\u6208\u9E3D\u80F3\u7599\u5272\u9769\u845B\u683C\u86E4\u9601\u9694\u94EC\u4E2A\u5404\u7ED9\u6839\u8DDF\u8015\u66F4\u5E9A\u7FB9"],
    ["b940", "\u7B2F\u7B30\u7B32\u7B34\u7B35\u7B36\u7B37\u7B39\u7B3B\u7B3D\u7B3F", 5, "\u7B46\u7B48\u7B4A\u7B4D\u7B4E\u7B53\u7B55\u7B57\u7B59\u7B5C\u7B5E\u7B5F\u7B61\u7B63", 10, "\u7B6F\u7B70\u7B73\u7B74\u7B76\u7B78\u7B7A\u7B7C\u7B7D\u7B7F\u7B81\u7B82\u7B83\u7B84\u7B86", 6, "\u7B8E\u7B8F"],
    ["b980", "\u7B91\u7B92\u7B93\u7B96\u7B98\u7B99\u7B9A\u7B9B\u7B9E\u7B9F\u7BA0\u7BA3\u7BA4\u7BA5\u7BAE\u7BAF\u7BB0\u7BB2\u7BB3\u7BB5\u7BB6\u7BB7\u7BB9", 7, "\u7BC2\u7BC3\u7BC4\u57C2\u803F\u6897\u5DE5\u653B\u529F\u606D\u9F9A\u4F9B\u8EAC\u516C\u5BAB\u5F13\u5DE9\u6C5E\u62F1\u8D21\u5171\u94A9\u52FE\u6C9F\u82DF\u72D7\u57A2\u6784\u8D2D\u591F\u8F9C\u83C7\u5495\u7B8D\u4F30\u6CBD\u5B64\u59D1\u9F13\u53E4\u86CA\u9AA8\u8C37\u80A1\u6545\u987E\u56FA\u96C7\u522E\u74DC\u5250\u5BE1\u6302\u8902\u4E56\u62D0\u602A\u68FA\u5173\u5B98\u51A0\u89C2\u7BA1\u9986\u7F50\u60EF\u704C\u8D2F\u5149\u5E7F\u901B\u7470\u89C4\u572D\u7845\u5F52\u9F9F\u95FA\u8F68\u9B3C\u8BE1\u7678\u6842\u67DC\u8DEA\u8D35\u523D\u8F8A\u6EDA\u68CD\u9505\u90ED\u56FD\u679C\u88F9\u8FC7\u54C8"],
    ["ba40", "\u7BC5\u7BC8\u7BC9\u7BCA\u7BCB\u7BCD\u7BCE\u7BCF\u7BD0\u7BD2\u7BD4", 4, "\u7BDB\u7BDC\u7BDE\u7BDF\u7BE0\u7BE2\u7BE3\u7BE4\u7BE7\u7BE8\u7BE9\u7BEB\u7BEC\u7BED\u7BEF\u7BF0\u7BF2", 4, "\u7BF8\u7BF9\u7BFA\u7BFB\u7BFD\u7BFF", 7, "\u7C08\u7C09\u7C0A\u7C0D\u7C0E\u7C10", 5, "\u7C17\u7C18\u7C19"],
    ["ba80", "\u7C1A", 4, "\u7C20", 5, "\u7C28\u7C29\u7C2B", 12, "\u7C39", 5, "\u7C42\u9AB8\u5B69\u6D77\u6C26\u4EA5\u5BB3\u9A87\u9163\u61A8\u90AF\u97E9\u542B\u6DB5\u5BD2\u51FD\u558A\u7F55\u7FF0\u64BC\u634D\u65F1\u61BE\u608D\u710A\u6C57\u6C49\u592F\u676D\u822A\u58D5\u568E\u8C6A\u6BEB\u90DD\u597D\u8017\u53F7\u6D69\u5475\u559D\u8377\u83CF\u6838\u79BE\u548C\u4F55\u5408\u76D2\u8C89\u9602\u6CB3\u6DB8\u8D6B\u8910\u9E64\u8D3A\u563F\u9ED1\u75D5\u5F88\u72E0\u6068\u54FC\u4EA8\u6A2A\u8861\u6052\u8F70\u54C4\u70D8\u8679\u9E3F\u6D2A\u5B8F\u5F18\u7EA2\u5589\u4FAF\u7334\u543C\u539A\u5019\u540E\u547C\u4E4E\u5FFD\u745A\u58F6\u846B\u80E1\u8774\u72D0\u7CCA\u6E56"],
    ["bb40", "\u7C43", 9, "\u7C4E", 36, "\u7C75", 5, "\u7C7E", 9],
    ["bb80", "\u7C88\u7C8A", 6, "\u7C93\u7C94\u7C96\u7C99\u7C9A\u7C9B\u7CA0\u7CA1\u7CA3\u7CA6\u7CA7\u7CA8\u7CA9\u7CAB\u7CAC\u7CAD\u7CAF\u7CB0\u7CB4", 4, "\u7CBA\u7CBB\u5F27\u864E\u552C\u62A4\u4E92\u6CAA\u6237\u82B1\u54D7\u534E\u733E\u6ED1\u753B\u5212\u5316\u8BDD\u69D0\u5F8A\u6000\u6DEE\u574F\u6B22\u73AF\u6853\u8FD8\u7F13\u6362\u60A3\u5524\u75EA\u8C62\u7115\u6DA3\u5BA6\u5E7B\u8352\u614C\u9EC4\u78FA\u8757\u7C27\u7687\u51F0\u60F6\u714C\u6643\u5E4C\u604D\u8C0E\u7070\u6325\u8F89\u5FBD\u6062\u86D4\u56DE\u6BC1\u6094\u6167\u5349\u60E0\u6666\u8D3F\u79FD\u4F1A\u70E9\u6C47\u8BB3\u8BF2\u7ED8\u8364\u660F\u5A5A\u9B42\u6D51\u6DF7\u8C41\u6D3B\u4F19\u706B\u83B7\u6216\u60D1\u970D\u8D27\u7978\u51FB\u573E\u57FA\u673A\u7578\u7A3D\u79EF\u7B95"],
    ["bc40", "\u7CBF\u7CC0\u7CC2\u7CC3\u7CC4\u7CC6\u7CC9\u7CCB\u7CCE", 6, "\u7CD8\u7CDA\u7CDB\u7CDD\u7CDE\u7CE1", 6, "\u7CE9", 5, "\u7CF0", 7, "\u7CF9\u7CFA\u7CFC", 13, "\u7D0B", 5],
    ["bc80", "\u7D11", 14, "\u7D21\u7D23\u7D24\u7D25\u7D26\u7D28\u7D29\u7D2A\u7D2C\u7D2D\u7D2E\u7D30", 6, "\u808C\u9965\u8FF9\u6FC0\u8BA5\u9E21\u59EC\u7EE9\u7F09\u5409\u6781\u68D8\u8F91\u7C4D\u96C6\u53CA\u6025\u75BE\u6C72\u5373\u5AC9\u7EA7\u6324\u51E0\u810A\u5DF1\u84DF\u6280\u5180\u5B63\u4F0E\u796D\u5242\u60B8\u6D4E\u5BC4\u5BC2\u8BA1\u8BB0\u65E2\u5FCC\u9645\u5993\u7EE7\u7EAA\u5609\u67B7\u5939\u4F73\u5BB6\u52A0\u835A\u988A\u8D3E\u7532\u94BE\u5047\u7A3C\u4EF7\u67B6\u9A7E\u5AC1\u6B7C\u76D1\u575A\u5C16\u7B3A\u95F4\u714E\u517C\u80A9\u8270\u5978\u7F04\u8327\u68C0\u67EC\u78B1\u7877\u62E3\u6361\u7B80\u4FED\u526A\u51CF\u8350\u69DB\u9274\u8DF5\u8D31\u89C1\u952E\u7BAD\u4EF6"],
    ["bd40", "\u7D37", 54, "\u7D6F", 7],
    ["bd80", "\u7D78", 32, "\u5065\u8230\u5251\u996F\u6E10\u6E85\u6DA7\u5EFA\u50F5\u59DC\u5C06\u6D46\u6C5F\u7586\u848B\u6868\u5956\u8BB2\u5320\u9171\u964D\u8549\u6912\u7901\u7126\u80F6\u4EA4\u90CA\u6D47\u9A84\u5A07\u56BC\u6405\u94F0\u77EB\u4FA5\u811A\u72E1\u89D2\u997A\u7F34\u7EDE\u527F\u6559\u9175\u8F7F\u8F83\u53EB\u7A96\u63ED\u63A5\u7686\u79F8\u8857\u9636\u622A\u52AB\u8282\u6854\u6770\u6377\u776B\u7AED\u6D01\u7ED3\u89E3\u59D0\u6212\u85C9\u82A5\u754C\u501F\u4ECB\u75A5\u8BEB\u5C4A\u5DFE\u7B4B\u65A4\u91D1\u4ECA\u6D25\u895F\u7D27\u9526\u4EC5\u8C28\u8FDB\u9773\u664B\u7981\u8FD1\u70EC\u6D78"],
    ["be40", "\u7D99", 12, "\u7DA7", 6, "\u7DAF", 42],
    ["be80", "\u7DDA", 32, "\u5C3D\u52B2\u8346\u5162\u830E\u775B\u6676\u9CB8\u4EAC\u60CA\u7CBE\u7CB3\u7ECF\u4E95\u8B66\u666F\u9888\u9759\u5883\u656C\u955C\u5F84\u75C9\u9756\u7ADF\u7ADE\u51C0\u70AF\u7A98\u63EA\u7A76\u7EA0\u7396\u97ED\u4E45\u7078\u4E5D\u9152\u53A9\u6551\u65E7\u81FC\u8205\u548E\u5C31\u759A\u97A0\u62D8\u72D9\u75BD\u5C45\u9A79\u83CA\u5C40\u5480\u77E9\u4E3E\u6CAE\u805A\u62D2\u636E\u5DE8\u5177\u8DDD\u8E1E\u952F\u4FF1\u53E5\u60E7\u70AC\u5267\u6350\u9E43\u5A1F\u5026\u7737\u5377\u7EE2\u6485\u652B\u6289\u6398\u5014\u7235\u89C9\u51B3\u8BC0\u7EDD\u5747\u83CC\u94A7\u519B\u541B\u5CFB"],
    ["bf40", "\u7DFB", 62],
    ["bf80", "\u7E3A\u7E3C", 4, "\u7E42", 4, "\u7E48", 21, "\u4FCA\u7AE3\u6D5A\u90E1\u9A8F\u5580\u5496\u5361\u54AF\u5F00\u63E9\u6977\u51EF\u6168\u520A\u582A\u52D8\u574E\u780D\u770B\u5EB7\u6177\u7CE0\u625B\u6297\u4EA2\u7095\u8003\u62F7\u70E4\u9760\u5777\u82DB\u67EF\u68F5\u78D5\u9897\u79D1\u58F3\u54B3\u53EF\u6E34\u514B\u523B\u5BA2\u8BFE\u80AF\u5543\u57A6\u6073\u5751\u542D\u7A7A\u6050\u5B54\u63A7\u62A0\u53E3\u6263\u5BC7\u67AF\u54ED\u7A9F\u82E6\u9177\u5E93\u88E4\u5938\u57AE\u630E\u8DE8\u80EF\u5757\u7B77\u4FA9\u5FEB\u5BBD\u6B3E\u5321\u7B50\u72C2\u6846\u77FF\u7736\u65F7\u51B5\u4E8F\u76D4\u5CBF\u7AA5\u8475\u594E\u9B41\u5080"],
    ["c040", "\u7E5E", 35, "\u7E83", 23, "\u7E9C\u7E9D\u7E9E"],
    ["c080", "\u7EAE\u7EB4\u7EBB\u7EBC\u7ED6\u7EE4\u7EEC\u7EF9\u7F0A\u7F10\u7F1E\u7F37\u7F39\u7F3B", 6, "\u7F43\u7F46", 9, "\u7F52\u7F53\u9988\u6127\u6E83\u5764\u6606\u6346\u56F0\u62EC\u6269\u5ED3\u9614\u5783\u62C9\u5587\u8721\u814A\u8FA3\u5566\u83B1\u6765\u8D56\u84DD\u5A6A\u680F\u62E6\u7BEE\u9611\u5170\u6F9C\u8C30\u63FD\u89C8\u61D2\u7F06\u70C2\u6EE5\u7405\u6994\u72FC\u5ECA\u90CE\u6717\u6D6A\u635E\u52B3\u7262\u8001\u4F6C\u59E5\u916A\u70D9\u6D9D\u52D2\u4E50\u96F7\u956D\u857E\u78CA\u7D2F\u5121\u5792\u64C2\u808B\u7C7B\u6CEA\u68F1\u695E\u51B7\u5398\u68A8\u7281\u9ECE\u7BF1\u72F8\u79BB\u6F13\u7406\u674E\u91CC\u9CA4\u793C\u8389\u8354\u540F\u6817\u4E3D\u5389\u52B1\u783E\u5386\u5229\u5088\u4F8B\u4FD0"],
    ["c140", "\u7F56\u7F59\u7F5B\u7F5C\u7F5D\u7F5E\u7F60\u7F63", 4, "\u7F6B\u7F6C\u7F6D\u7F6F\u7F70\u7F73\u7F75\u7F76\u7F77\u7F78\u7F7A\u7F7B\u7F7C\u7F7D\u7F7F\u7F80\u7F82", 7, "\u7F8B\u7F8D\u7F8F", 4, "\u7F95", 4, "\u7F9B\u7F9C\u7FA0\u7FA2\u7FA3\u7FA5\u7FA6\u7FA8", 6, "\u7FB1"],
    ["c180", "\u7FB3", 4, "\u7FBA\u7FBB\u7FBE\u7FC0\u7FC2\u7FC3\u7FC4\u7FC6\u7FC7\u7FC8\u7FC9\u7FCB\u7FCD\u7FCF", 4, "\u7FD6\u7FD7\u7FD9", 5, "\u7FE2\u7FE3\u75E2\u7ACB\u7C92\u6CA5\u96B6\u529B\u7483\u54E9\u4FE9\u8054\u83B2\u8FDE\u9570\u5EC9\u601C\u6D9F\u5E18\u655B\u8138\u94FE\u604B\u70BC\u7EC3\u7CAE\u51C9\u6881\u7CB1\u826F\u4E24\u8F86\u91CF\u667E\u4EAE\u8C05\u64A9\u804A\u50DA\u7597\u71CE\u5BE5\u8FBD\u6F66\u4E86\u6482\u9563\u5ED6\u6599\u5217\u88C2\u70C8\u52A3\u730E\u7433\u6797\u78F7\u9716\u4E34\u90BB\u9CDE\u6DCB\u51DB\u8D41\u541D\u62CE\u73B2\u83F1\u96F6\u9F84\u94C3\u4F36\u7F9A\u51CC\u7075\u9675\u5CAD\u9886\u53E6\u4EE4\u6E9C\u7409\u69B4\u786B\u998F\u7559\u5218\u7624\u6D41\u67F3\u516D\u9F99\u804B\u5499\u7B3C\u7ABF"],
    ["c240", "\u7FE4\u7FE7\u7FE8\u7FEA\u7FEB\u7FEC\u7FED\u7FEF\u7FF2\u7FF4", 6, "\u7FFD\u7FFE\u7FFF\u8002\u8007\u8008\u8009\u800A\u800E\u800F\u8011\u8013\u801A\u801B\u801D\u801E\u801F\u8021\u8023\u8024\u802B", 5, "\u8032\u8034\u8039\u803A\u803C\u803E\u8040\u8041\u8044\u8045\u8047\u8048\u8049\u804E\u804F\u8050\u8051\u8053\u8055\u8056\u8057"],
    ["c280", "\u8059\u805B", 13, "\u806B", 5, "\u8072", 11, "\u9686\u5784\u62E2\u9647\u697C\u5A04\u6402\u7BD3\u6F0F\u964B\u82A6\u5362\u9885\u5E90\u7089\u63B3\u5364\u864F\u9C81\u9E93\u788C\u9732\u8DEF\u8D42\u9E7F\u6F5E\u7984\u5F55\u9646\u622E\u9A74\u5415\u94DD\u4FA3\u65C5\u5C65\u5C61\u7F15\u8651\u6C2F\u5F8B\u7387\u6EE4\u7EFF\u5CE6\u631B\u5B6A\u6EE6\u5375\u4E71\u63A0\u7565\u62A1\u8F6E\u4F26\u4ED1\u6CA6\u7EB6\u8BBA\u841D\u87BA\u7F57\u903B\u9523\u7BA9\u9AA1\u88F8\u843D\u6D1B\u9A86\u7EDC\u5988\u9EBB\u739B\u7801\u8682\u9A6C\u9A82\u561B\u5417\u57CB\u4E70\u9EA6\u5356\u8FC8\u8109\u7792\u9992\u86EE\u6EE1\u8513\u66FC\u6162\u6F2B"],
    ["c340", "\u807E\u8081\u8082\u8085\u8088\u808A\u808D", 5, "\u8094\u8095\u8097\u8099\u809E\u80A3\u80A6\u80A7\u80A8\u80AC\u80B0\u80B3\u80B5\u80B6\u80B8\u80B9\u80BB\u80C5\u80C7", 4, "\u80CF", 6, "\u80D8\u80DF\u80E0\u80E2\u80E3\u80E6\u80EE\u80F5\u80F7\u80F9\u80FB\u80FE\u80FF\u8100\u8101\u8103\u8104\u8105\u8107\u8108\u810B"],
    ["c380", "\u810C\u8115\u8117\u8119\u811B\u811C\u811D\u811F", 12, "\u812D\u812E\u8130\u8133\u8134\u8135\u8137\u8139", 4, "\u813F\u8C29\u8292\u832B\u76F2\u6C13\u5FD9\u83BD\u732B\u8305\u951A\u6BDB\u77DB\u94C6\u536F\u8302\u5192\u5E3D\u8C8C\u8D38\u4E48\u73AB\u679A\u6885\u9176\u9709\u7164\u6CA1\u7709\u5A92\u9541\u6BCF\u7F8E\u6627\u5BD0\u59B9\u5A9A\u95E8\u95F7\u4EEC\u840C\u8499\u6AAC\u76DF\u9530\u731B\u68A6\u5B5F\u772F\u919A\u9761\u7CDC\u8FF7\u8C1C\u5F25\u7C73\u79D8\u89C5\u6CCC\u871C\u5BC6\u5E42\u68C9\u7720\u7EF5\u5195\u514D\u52C9\u5A29\u7F05\u9762\u82D7\u63CF\u7784\u85D0\u79D2\u6E3A\u5E99\u5999\u8511\u706D\u6C11\u62BF\u76BF\u654F\u60AF\u95FD\u660E\u879F\u9E23\u94ED\u540D\u547D\u8C2C\u6478"],
    ["c440", "\u8140", 5, "\u8147\u8149\u814D\u814E\u814F\u8152\u8156\u8157\u8158\u815B", 4, "\u8161\u8162\u8163\u8164\u8166\u8168\u816A\u816B\u816C\u816F\u8172\u8173\u8175\u8176\u8177\u8178\u8181\u8183", 4, "\u8189\u818B\u818C\u818D\u818E\u8190\u8192", 5, "\u8199\u819A\u819E", 4, "\u81A4\u81A5"],
    ["c480", "\u81A7\u81A9\u81AB", 7, "\u81B4", 5, "\u81BC\u81BD\u81BE\u81BF\u81C4\u81C5\u81C7\u81C8\u81C9\u81CB\u81CD", 6, "\u6479\u8611\u6A21\u819C\u78E8\u6469\u9B54\u62B9\u672B\u83AB\u58A8\u9ED8\u6CAB\u6F20\u5BDE\u964C\u8C0B\u725F\u67D0\u62C7\u7261\u4EA9\u59C6\u6BCD\u5893\u66AE\u5E55\u52DF\u6155\u6728\u76EE\u7766\u7267\u7A46\u62FF\u54EA\u5450\u94A0\u90A3\u5A1C\u7EB3\u6C16\u4E43\u5976\u8010\u5948\u5357\u7537\u96BE\u56CA\u6320\u8111\u607C\u95F9\u6DD6\u5462\u9981\u5185\u5AE9\u80FD\u59AE\u9713\u502A\u6CE5\u5C3C\u62DF\u4F60\u533F\u817B\u9006\u6EBA\u852B\u62C8\u5E74\u78BE\u64B5\u637B\u5FF5\u5A18\u917F\u9E1F\u5C3F\u634F\u8042\u5B7D\u556E\u954A\u954D\u6D85\u60A8\u67E0\u72DE\u51DD\u5B81"],
    ["c540", "\u81D4", 14, "\u81E4\u81E5\u81E6\u81E8\u81E9\u81EB\u81EE", 4, "\u81F5", 5, "\u81FD\u81FF\u8203\u8207", 4, "\u820E\u820F\u8211\u8213\u8215", 5, "\u821D\u8220\u8224\u8225\u8226\u8227\u8229\u822E\u8232\u823A\u823C\u823D\u823F"],
    ["c580", "\u8240\u8241\u8242\u8243\u8245\u8246\u8248\u824A\u824C\u824D\u824E\u8250", 7, "\u8259\u825B\u825C\u825D\u825E\u8260", 7, "\u8269\u62E7\u6CDE\u725B\u626D\u94AE\u7EBD\u8113\u6D53\u519C\u5F04\u5974\u52AA\u6012\u5973\u6696\u8650\u759F\u632A\u61E6\u7CEF\u8BFA\u54E6\u6B27\u9E25\u6BB4\u85D5\u5455\u5076\u6CA4\u556A\u8DB4\u722C\u5E15\u6015\u7436\u62CD\u6392\u724C\u5F98\u6E43\u6D3E\u6500\u6F58\u76D8\u78D0\u76FC\u7554\u5224\u53DB\u4E53\u5E9E\u65C1\u802A\u80D6\u629B\u5486\u5228\u70AE\u888D\u8DD1\u6CE1\u5478\u80DA\u57F9\u88F4\u8D54\u966A\u914D\u4F69\u6C9B\u55B7\u76C6\u7830\u62A8\u70F9\u6F8E\u5F6D\u84EC\u68DA\u787C\u7BF7\u81A8\u670B\u9E4F\u6367\u78B0\u576F\u7812\u9739\u6279\u62AB\u5288\u7435\u6BD7"],
    ["c640", "\u826A\u826B\u826C\u826D\u8271\u8275\u8276\u8277\u8278\u827B\u827C\u8280\u8281\u8283\u8285\u8286\u8287\u8289\u828C\u8290\u8293\u8294\u8295\u8296\u829A\u829B\u829E\u82A0\u82A2\u82A3\u82A7\u82B2\u82B5\u82B6\u82BA\u82BB\u82BC\u82BF\u82C0\u82C2\u82C3\u82C5\u82C6\u82C9\u82D0\u82D6\u82D9\u82DA\u82DD\u82E2\u82E7\u82E8\u82E9\u82EA\u82EC\u82ED\u82EE\u82F0\u82F2\u82F3\u82F5\u82F6\u82F8"],
    ["c680", "\u82FA\u82FC", 4, "\u830A\u830B\u830D\u8310\u8312\u8313\u8316\u8318\u8319\u831D", 9, "\u8329\u832A\u832E\u8330\u8332\u8337\u833B\u833D\u5564\u813E\u75B2\u76AE\u5339\u75DE\u50FB\u5C41\u8B6C\u7BC7\u504F\u7247\u9A97\u98D8\u6F02\u74E2\u7968\u6487\u77A5\u62FC\u9891\u8D2B\u54C1\u8058\u4E52\u576A\u82F9\u840D\u5E73\u51ED\u74F6\u8BC4\u5C4F\u5761\u6CFC\u9887\u5A46\u7834\u9B44\u8FEB\u7C95\u5256\u6251\u94FA\u4EC6\u8386\u8461\u83E9\u84B2\u57D4\u6734\u5703\u666E\u6D66\u8C31\u66DD\u7011\u671F\u6B3A\u6816\u621A\u59BB\u4E03\u51C4\u6F06\u67D2\u6C8F\u5176\u68CB\u5947\u6B67\u7566\u5D0E\u8110\u9F50\u65D7\u7948\u7941\u9A91\u8D77\u5C82\u4E5E\u4F01\u542F\u5951\u780C\u5668\u6C14\u8FC4\u5F03\u6C7D\u6CE3\u8BAB\u6390"],
    ["c740", "\u833E\u833F\u8341\u8342\u8344\u8345\u8348\u834A", 4, "\u8353\u8355", 4, "\u835D\u8362\u8370", 6, "\u8379\u837A\u837E", 6, "\u8387\u8388\u838A\u838B\u838C\u838D\u838F\u8390\u8391\u8394\u8395\u8396\u8397\u8399\u839A\u839D\u839F\u83A1", 6, "\u83AC\u83AD\u83AE"],
    ["c780", "\u83AF\u83B5\u83BB\u83BE\u83BF\u83C2\u83C3\u83C4\u83C6\u83C8\u83C9\u83CB\u83CD\u83CE\u83D0\u83D1\u83D2\u83D3\u83D5\u83D7\u83D9\u83DA\u83DB\u83DE\u83E2\u83E3\u83E4\u83E6\u83E7\u83E8\u83EB\u83EC\u83ED\u6070\u6D3D\u7275\u6266\u948E\u94C5\u5343\u8FC1\u7B7E\u4EDF\u8C26\u4E7E\u9ED4\u94B1\u94B3\u524D\u6F5C\u9063\u6D45\u8C34\u5811\u5D4C\u6B20\u6B49\u67AA\u545B\u8154\u7F8C\u5899\u8537\u5F3A\u62A2\u6A47\u9539\u6572\u6084\u6865\u77A7\u4E54\u4FA8\u5DE7\u9798\u64AC\u7FD8\u5CED\u4FCF\u7A8D\u5207\u8304\u4E14\u602F\u7A83\u94A6\u4FB5\u4EB2\u79E6\u7434\u52E4\u82B9\u64D2\u79BD\u5BDD\u6C81\u9752\u8F7B\u6C22\u503E\u537F\u6E05\u64CE\u6674\u6C30\u60C5\u9877\u8BF7\u5E86\u743C\u7A77\u79CB\u4E18\u90B1\u7403\u6C42\u56DA\u914B\u6CC5\u8D8B\u533A\u86C6\u66F2\u8EAF\u5C48\u9A71\u6E20"],
    ["c840", "\u83EE\u83EF\u83F3", 4, "\u83FA\u83FB\u83FC\u83FE\u83FF\u8400\u8402\u8405\u8407\u8408\u8409\u840A\u8410\u8412", 5, "\u8419\u841A\u841B\u841E", 5, "\u8429", 7, "\u8432", 5, "\u8439\u843A\u843B\u843E", 7, "\u8447\u8448\u8449"],
    ["c880", "\u844A", 6, "\u8452", 4, "\u8458\u845D\u845E\u845F\u8460\u8462\u8464", 4, "\u846A\u846E\u846F\u8470\u8472\u8474\u8477\u8479\u847B\u847C\u53D6\u5A36\u9F8B\u8DA3\u53BB\u5708\u98A7\u6743\u919B\u6CC9\u5168\u75CA\u62F3\u72AC\u5238\u529D\u7F3A\u7094\u7638\u5374\u9E4A\u69B7\u786E\u96C0\u88D9\u7FA4\u7136\u71C3\u5189\u67D3\u74E4\u58E4\u6518\u56B7\u8BA9\u9976\u6270\u7ED5\u60F9\u70ED\u58EC\u4EC1\u4EBA\u5FCD\u97E7\u4EFB\u8BA4\u5203\u598A\u7EAB\u6254\u4ECD\u65E5\u620E\u8338\u84C9\u8363\u878D\u7194\u6EB6\u5BB9\u7ED2\u5197\u63C9\u67D4\u8089\u8339\u8815\u5112\u5B7A\u5982\u8FB1\u4E73\u6C5D\u5165\u8925\u8F6F\u962E\u854A\u745E\u9510\u95F0\u6DA6\u82E5\u5F31\u6492\u6D12\u8428\u816E\u9CC3\u585E\u8D5B\u4E09\u53C1"],
    ["c940", "\u847D", 4, "\u8483\u8484\u8485\u8486\u848A\u848D\u848F", 7, "\u8498\u849A\u849B\u849D\u849E\u849F\u84A0\u84A2", 12, "\u84B0\u84B1\u84B3\u84B5\u84B6\u84B7\u84BB\u84BC\u84BE\u84C0\u84C2\u84C3\u84C5\u84C6\u84C7\u84C8\u84CB\u84CC\u84CE\u84CF\u84D2\u84D4\u84D5\u84D7"],
    ["c980", "\u84D8", 4, "\u84DE\u84E1\u84E2\u84E4\u84E7", 4, "\u84ED\u84EE\u84EF\u84F1", 10, "\u84FD\u84FE\u8500\u8501\u8502\u4F1E\u6563\u6851\u55D3\u4E27\u6414\u9A9A\u626B\u5AC2\u745F\u8272\u6DA9\u68EE\u50E7\u838E\u7802\u6740\u5239\u6C99\u7EB1\u50BB\u5565\u715E\u7B5B\u6652\u73CA\u82EB\u6749\u5C71\u5220\u717D\u886B\u95EA\u9655\u64C5\u8D61\u81B3\u5584\u6C55\u6247\u7F2E\u5892\u4F24\u5546\u8D4F\u664C\u4E0A\u5C1A\u88F3\u68A2\u634E\u7A0D\u70E7\u828D\u52FA\u97F6\u5C11\u54E8\u90B5\u7ECD\u5962\u8D4A\u86C7\u820C\u820D\u8D66\u6444\u5C04\u6151\u6D89\u793E\u8BBE\u7837\u7533\u547B\u4F38\u8EAB\u6DF1\u5A20\u7EC5\u795E\u6C88\u5BA1\u5A76\u751A\u80BE\u614E\u6E17\u58F0\u751F\u7525\u7272\u5347\u7EF3"],
    ["ca40", "\u8503", 8, "\u850D\u850E\u850F\u8510\u8512\u8514\u8515\u8516\u8518\u8519\u851B\u851C\u851D\u851E\u8520\u8522", 8, "\u852D", 9, "\u853E", 4, "\u8544\u8545\u8546\u8547\u854B", 10],
    ["ca80", "\u8557\u8558\u855A\u855B\u855C\u855D\u855F", 4, "\u8565\u8566\u8567\u8569", 8, "\u8573\u8575\u8576\u8577\u8578\u857C\u857D\u857F\u8580\u8581\u7701\u76DB\u5269\u80DC\u5723\u5E08\u5931\u72EE\u65BD\u6E7F\u8BD7\u5C38\u8671\u5341\u77F3\u62FE\u65F6\u4EC0\u98DF\u8680\u5B9E\u8BC6\u53F2\u77E2\u4F7F\u5C4E\u9A76\u59CB\u5F0F\u793A\u58EB\u4E16\u67FF\u4E8B\u62ED\u8A93\u901D\u52BF\u662F\u55DC\u566C\u9002\u4ED5\u4F8D\u91CA\u9970\u6C0F\u5E02\u6043\u5BA4\u89C6\u8BD5\u6536\u624B\u9996\u5B88\u5BFF\u6388\u552E\u53D7\u7626\u517D\u852C\u67A2\u68B3\u6B8A\u6292\u8F93\u53D4\u8212\u6DD1\u758F\u4E66\u8D4E\u5B70\u719F\u85AF\u6691\u66D9\u7F72\u8700\u9ECD\u9F20\u5C5E\u672F\u8FF0\u6811\u675F\u620D\u7AD6\u5885\u5EB6\u6570\u6F31"],
    ["cb40", "\u8582\u8583\u8586\u8588", 6, "\u8590", 10, "\u859D", 6, "\u85A5\u85A6\u85A7\u85A9\u85AB\u85AC\u85AD\u85B1", 5, "\u85B8\u85BA", 6, "\u85C2", 6, "\u85CA", 4, "\u85D1\u85D2"],
    ["cb80", "\u85D4\u85D6", 5, "\u85DD", 6, "\u85E5\u85E6\u85E7\u85E8\u85EA", 14, "\u6055\u5237\u800D\u6454\u8870\u7529\u5E05\u6813\u62F4\u971C\u53CC\u723D\u8C01\u6C34\u7761\u7A0E\u542E\u77AC\u987A\u821C\u8BF4\u7855\u6714\u70C1\u65AF\u6495\u5636\u601D\u79C1\u53F8\u4E1D\u6B7B\u8086\u5BFA\u55E3\u56DB\u4F3A\u4F3C\u9972\u5DF3\u677E\u8038\u6002\u9882\u9001\u5B8B\u8BBC\u8BF5\u641C\u8258\u64DE\u55FD\u82CF\u9165\u4FD7\u7D20\u901F\u7C9F\u50F3\u5851\u6EAF\u5BBF\u8BC9\u8083\u9178\u849C\u7B97\u867D\u968B\u968F\u7EE5\u9AD3\u788E\u5C81\u7A57\u9042\u96A7\u795F\u5B59\u635F\u7B0B\u84D1\u68AD\u5506\u7F29\u7410\u7D22\u9501\u6240\u584C\u4ED6\u5B83\u5979\u5854"],
    ["cc40", "\u85F9\u85FA\u85FC\u85FD\u85FE\u8600", 4, "\u8606", 10, "\u8612\u8613\u8614\u8615\u8617", 15, "\u8628\u862A", 13, "\u8639\u863A\u863B\u863D\u863E\u863F\u8640"],
    ["cc80", "\u8641", 11, "\u8652\u8653\u8655", 4, "\u865B\u865C\u865D\u865F\u8660\u8661\u8663", 7, "\u736D\u631E\u8E4B\u8E0F\u80CE\u82D4\u62AC\u53F0\u6CF0\u915E\u592A\u6001\u6C70\u574D\u644A\u8D2A\u762B\u6EE9\u575B\u6A80\u75F0\u6F6D\u8C2D\u8C08\u5766\u6BEF\u8892\u78B3\u63A2\u53F9\u70AD\u6C64\u5858\u642A\u5802\u68E0\u819B\u5510\u7CD6\u5018\u8EBA\u6DCC\u8D9F\u70EB\u638F\u6D9B\u6ED4\u7EE6\u8404\u6843\u9003\u6DD8\u9676\u8BA8\u5957\u7279\u85E4\u817E\u75BC\u8A8A\u68AF\u5254\u8E22\u9511\u63D0\u9898\u8E44\u557C\u4F53\u66FF\u568F\u60D5\u6D95\u5243\u5C49\u5929\u6DFB\u586B\u7530\u751C\u606C\u8214\u8146\u6311\u6761\u8FE2\u773A\u8DF3\u8D34\u94C1\u5E16\u5385\u542C\u70C3"],
    ["cd40", "\u866D\u866F\u8670\u8672", 6, "\u8683", 6, "\u868E", 4, "\u8694\u8696", 5, "\u869E", 4, "\u86A5\u86A6\u86AB\u86AD\u86AE\u86B2\u86B3\u86B7\u86B8\u86B9\u86BB", 4, "\u86C1\u86C2\u86C3\u86C5\u86C8\u86CC\u86CD\u86D2\u86D3\u86D5\u86D6\u86D7\u86DA\u86DC"],
    ["cd80", "\u86DD\u86E0\u86E1\u86E2\u86E3\u86E5\u86E6\u86E7\u86E8\u86EA\u86EB\u86EC\u86EF\u86F5\u86F6\u86F7\u86FA\u86FB\u86FC\u86FD\u86FF\u8701\u8704\u8705\u8706\u870B\u870C\u870E\u870F\u8710\u8711\u8714\u8716\u6C40\u5EF7\u505C\u4EAD\u5EAD\u633A\u8247\u901A\u6850\u916E\u77B3\u540C\u94DC\u5F64\u7AE5\u6876\u6345\u7B52\u7EDF\u75DB\u5077\u6295\u5934\u900F\u51F8\u79C3\u7A81\u56FE\u5F92\u9014\u6D82\u5C60\u571F\u5410\u5154\u6E4D\u56E2\u63A8\u9893\u817F\u8715\u892A\u9000\u541E\u5C6F\u81C0\u62D6\u6258\u8131\u9E35\u9640\u9A6E\u9A7C\u692D\u59A5\u62D3\u553E\u6316\u54C7\u86D9\u6D3C\u5A03\u74E6\u889C\u6B6A\u5916\u8C4C\u5F2F\u6E7E\u73A9\u987D\u4E38\u70F7\u5B8C\u7897\u633D\u665A\u7696\u60CB\u5B9B\u5A49\u4E07\u8155\u6C6A\u738B\u4EA1\u6789\u7F51\u5F80\u65FA\u671B\u5FD8\u5984\u5A01"],
    ["ce40", "\u8719\u871B\u871D\u871F\u8720\u8724\u8726\u8727\u8728\u872A\u872B\u872C\u872D\u872F\u8730\u8732\u8733\u8735\u8736\u8738\u8739\u873A\u873C\u873D\u8740", 6, "\u874A\u874B\u874D\u874F\u8750\u8751\u8752\u8754\u8755\u8756\u8758\u875A", 5, "\u8761\u8762\u8766", 7, "\u876F\u8771\u8772\u8773\u8775"],
    ["ce80", "\u8777\u8778\u8779\u877A\u877F\u8780\u8781\u8784\u8786\u8787\u8789\u878A\u878C\u878E", 4, "\u8794\u8795\u8796\u8798", 6, "\u87A0", 4, "\u5DCD\u5FAE\u5371\u97E6\u8FDD\u6845\u56F4\u552F\u60DF\u4E3A\u6F4D\u7EF4\u82C7\u840E\u59D4\u4F1F\u4F2A\u5C3E\u7EAC\u672A\u851A\u5473\u754F\u80C3\u5582\u9B4F\u4F4D\u6E2D\u8C13\u5C09\u6170\u536B\u761F\u6E29\u868A\u6587\u95FB\u7EB9\u543B\u7A33\u7D0A\u95EE\u55E1\u7FC1\u74EE\u631D\u8717\u6DA1\u7A9D\u6211\u65A1\u5367\u63E1\u6C83\u5DEB\u545C\u94A8\u4E4C\u6C61\u8BEC\u5C4B\u65E0\u829C\u68A7\u543E\u5434\u6BCB\u6B66\u4E94\u6342\u5348\u821E\u4F0D\u4FAE\u575E\u620A\u96FE\u6664\u7269\u52FF\u52A1\u609F\u8BEF\u6614\u7199\u6790\u897F\u7852\u77FD\u6670\u563B\u5438\u9521\u727A"],
    ["cf40", "\u87A5\u87A6\u87A7\u87A9\u87AA\u87AE\u87B0\u87B1\u87B2\u87B4\u87B6\u87B7\u87B8\u87B9\u87BB\u87BC\u87BE\u87BF\u87C1", 4, "\u87C7\u87C8\u87C9\u87CC", 4, "\u87D4", 6, "\u87DC\u87DD\u87DE\u87DF\u87E1\u87E2\u87E3\u87E4\u87E6\u87E7\u87E8\u87E9\u87EB\u87EC\u87ED\u87EF", 9],
    ["cf80", "\u87FA\u87FB\u87FC\u87FD\u87FF\u8800\u8801\u8802\u8804", 5, "\u880B", 7, "\u8814\u8817\u8818\u8819\u881A\u881C", 4, "\u8823\u7A00\u606F\u5E0C\u6089\u819D\u5915\u60DC\u7184\u70EF\u6EAA\u6C50\u7280\u6A84\u88AD\u5E2D\u4E60\u5AB3\u559C\u94E3\u6D17\u7CFB\u9699\u620F\u7EC6\u778E\u867E\u5323\u971E\u8F96\u6687\u5CE1\u4FA0\u72ED\u4E0B\u53A6\u590F\u5413\u6380\u9528\u5148\u4ED9\u9C9C\u7EA4\u54B8\u8D24\u8854\u8237\u95F2\u6D8E\u5F26\u5ACC\u663E\u9669\u73B0\u732E\u53BF\u817A\u9985\u7FA1\u5BAA\u9677\u9650\u7EBF\u76F8\u53A2\u9576\u9999\u7BB1\u8944\u6E58\u4E61\u7FD4\u7965\u8BE6\u60F3\u54CD\u4EAB\u9879\u5DF7\u6A61\u50CF\u5411\u8C61\u8427\u785D\u9704\u524A\u54EE\u56A3\u9500\u6D88\u5BB5\u6DC6\u6653"],
    ["d040", "\u8824", 13, "\u8833", 5, "\u883A\u883B\u883D\u883E\u883F\u8841\u8842\u8843\u8846", 5, "\u884E", 5, "\u8855\u8856\u8858\u885A", 6, "\u8866\u8867\u886A\u886D\u886F\u8871\u8873\u8874\u8875\u8876\u8878\u8879\u887A"],
    ["d080", "\u887B\u887C\u8880\u8883\u8886\u8887\u8889\u888A\u888C\u888E\u888F\u8890\u8891\u8893\u8894\u8895\u8897", 4, "\u889D", 4, "\u88A3\u88A5", 5, "\u5C0F\u5B5D\u6821\u8096\u5578\u7B11\u6548\u6954\u4E9B\u6B47\u874E\u978B\u534F\u631F\u643A\u90AA\u659C\u80C1\u8C10\u5199\u68B0\u5378\u87F9\u61C8\u6CC4\u6CFB\u8C22\u5C51\u85AA\u82AF\u950C\u6B23\u8F9B\u65B0\u5FFB\u5FC3\u4FE1\u8845\u661F\u8165\u7329\u60FA\u5174\u5211\u578B\u5F62\u90A2\u884C\u9192\u5E78\u674F\u6027\u59D3\u5144\u51F6\u80F8\u5308\u6C79\u96C4\u718A\u4F11\u4FEE\u7F9E\u673D\u55C5\u9508\u79C0\u8896\u7EE3\u589F\u620C\u9700\u865A\u5618\u987B\u5F90\u8BB8\u84C4\u9157\u53D9\u65ED\u5E8F\u755C\u6064\u7D6E\u5A7F\u7EEA\u7EED\u8F69\u55A7\u5BA3\u60AC\u65CB\u7384"],
    ["d140", "\u88AC\u88AE\u88AF\u88B0\u88B2", 4, "\u88B8\u88B9\u88BA\u88BB\u88BD\u88BE\u88BF\u88C0\u88C3\u88C4\u88C7\u88C8\u88CA\u88CB\u88CC\u88CD\u88CF\u88D0\u88D1\u88D3\u88D6\u88D7\u88DA", 4, "\u88E0\u88E1\u88E6\u88E7\u88E9", 6, "\u88F2\u88F5\u88F6\u88F7\u88FA\u88FB\u88FD\u88FF\u8900\u8901\u8903", 5],
    ["d180", "\u8909\u890B", 4, "\u8911\u8914", 4, "\u891C", 4, "\u8922\u8923\u8924\u8926\u8927\u8928\u8929\u892C\u892D\u892E\u892F\u8931\u8932\u8933\u8935\u8937\u9009\u7663\u7729\u7EDA\u9774\u859B\u5B66\u7A74\u96EA\u8840\u52CB\u718F\u5FAA\u65EC\u8BE2\u5BFB\u9A6F\u5DE1\u6B89\u6C5B\u8BAD\u8BAF\u900A\u8FC5\u538B\u62BC\u9E26\u9E2D\u5440\u4E2B\u82BD\u7259\u869C\u5D16\u8859\u6DAF\u96C5\u54D1\u4E9A\u8BB6\u7109\u54BD\u9609\u70DF\u6DF9\u76D0\u4E25\u7814\u8712\u5CA9\u5EF6\u8A00\u989C\u960E\u708E\u6CBF\u5944\u63A9\u773C\u884D\u6F14\u8273\u5830\u71D5\u538C\u781A\u96C1\u5501\u5F66\u7130\u5BB4\u8C1A\u9A8C\u6B83\u592E\u9E2F\u79E7\u6768\u626C\u4F6F\u75A1\u7F8A\u6D0B\u9633\u6C27\u4EF0\u75D2\u517B\u6837\u6F3E\u9080\u8170\u5996\u7476"],
    ["d240", "\u8938", 8, "\u8942\u8943\u8945", 24, "\u8960", 5, "\u8967", 19, "\u897C"],
    ["d280", "\u897D\u897E\u8980\u8982\u8984\u8985\u8987", 26, "\u6447\u5C27\u9065\u7A91\u8C23\u59DA\u54AC\u8200\u836F\u8981\u8000\u6930\u564E\u8036\u7237\u91CE\u51B6\u4E5F\u9875\u6396\u4E1A\u53F6\u66F3\u814B\u591C\u6DB2\u4E00\u58F9\u533B\u63D6\u94F1\u4F9D\u4F0A\u8863\u9890\u5937\u9057\u79FB\u4EEA\u80F0\u7591\u6C82\u5B9C\u59E8\u5F5D\u6905\u8681\u501A\u5DF2\u4E59\u77E3\u4EE5\u827A\u6291\u6613\u9091\u5C79\u4EBF\u5F79\u81C6\u9038\u8084\u75AB\u4EA6\u88D4\u610F\u6BC5\u5FC6\u4E49\u76CA\u6EA2\u8BE3\u8BAE\u8C0A\u8BD1\u5F02\u7FFC\u7FCC\u7ECE\u8335\u836B\u56E0\u6BB7\u97F3\u9634\u59FB\u541F\u94F6\u6DEB\u5BC5\u996E\u5C39\u5F15\u9690"],
    ["d340", "\u89A2", 30, "\u89C3\u89CD\u89D3\u89D4\u89D5\u89D7\u89D8\u89D9\u89DB\u89DD\u89DF\u89E0\u89E1\u89E2\u89E4\u89E7\u89E8\u89E9\u89EA\u89EC\u89ED\u89EE\u89F0\u89F1\u89F2\u89F4", 6],
    ["d380", "\u89FB", 4, "\u8A01", 5, "\u8A08", 21, "\u5370\u82F1\u6A31\u5A74\u9E70\u5E94\u7F28\u83B9\u8424\u8425\u8367\u8747\u8FCE\u8D62\u76C8\u5F71\u9896\u786C\u6620\u54DF\u62E5\u4F63\u81C3\u75C8\u5EB8\u96CD\u8E0A\u86F9\u548F\u6CF3\u6D8C\u6C38\u607F\u52C7\u7528\u5E7D\u4F18\u60A0\u5FE7\u5C24\u7531\u90AE\u94C0\u72B9\u6CB9\u6E38\u9149\u6709\u53CB\u53F3\u4F51\u91C9\u8BF1\u53C8\u5E7C\u8FC2\u6DE4\u4E8E\u76C2\u6986\u865E\u611A\u8206\u4F59\u4FDE\u903E\u9C7C\u6109\u6E1D\u6E14\u9685\u4E88\u5A31\u96E8\u4E0E\u5C7F\u79B9\u5B87\u8BED\u7FBD\u7389\u57DF\u828B\u90C1\u5401\u9047\u55BB\u5CEA\u5FA1\u6108\u6B32\u72F1\u80B2\u8A89"],
    ["d440", "\u8A1E", 31, "\u8A3F", 8, "\u8A49", 21],
    ["d480", "\u8A5F", 25, "\u8A7A", 6, "\u6D74\u5BD3\u88D5\u9884\u8C6B\u9A6D\u9E33\u6E0A\u51A4\u5143\u57A3\u8881\u539F\u63F4\u8F95\u56ED\u5458\u5706\u733F\u6E90\u7F18\u8FDC\u82D1\u613F\u6028\u9662\u66F0\u7EA6\u8D8A\u8DC3\u94A5\u5CB3\u7CA4\u6708\u60A6\u9605\u8018\u4E91\u90E7\u5300\u9668\u5141\u8FD0\u8574\u915D\u6655\u97F5\u5B55\u531D\u7838\u6742\u683D\u54C9\u707E\u5BB0\u8F7D\u518D\u5728\u54B1\u6512\u6682\u8D5E\u8D43\u810F\u846C\u906D\u7CDF\u51FF\u85FB\u67A3\u65E9\u6FA1\u86A4\u8E81\u566A\u9020\u7682\u7076\u71E5\u8D23\u62E9\u5219\u6CFD\u8D3C\u600E\u589E\u618E\u66FE\u8D60\u624E\u55B3\u6E23\u672D\u8F67"],
    ["d540", "\u8A81", 7, "\u8A8B", 7, "\u8A94", 46],
    ["d580", "\u8AC3", 32, "\u94E1\u95F8\u7728\u6805\u69A8\u548B\u4E4D\u70B8\u8BC8\u6458\u658B\u5B85\u7A84\u503A\u5BE8\u77BB\u6BE1\u8A79\u7C98\u6CBE\u76CF\u65A9\u8F97\u5D2D\u5C55\u8638\u6808\u5360\u6218\u7AD9\u6E5B\u7EFD\u6A1F\u7AE0\u5F70\u6F33\u5F20\u638C\u6DA8\u6756\u4E08\u5E10\u8D26\u4ED7\u80C0\u7634\u969C\u62DB\u662D\u627E\u6CBC\u8D75\u7167\u7F69\u5146\u8087\u53EC\u906E\u6298\u54F2\u86F0\u8F99\u8005\u9517\u8517\u8FD9\u6D59\u73CD\u659F\u771F\u7504\u7827\u81FB\u8D1E\u9488\u4FA6\u6795\u75B9\u8BCA\u9707\u632F\u9547\u9635\u84B8\u6323\u7741\u5F81\u72F0\u4E89\u6014\u6574\u62EF\u6B63\u653F"],
    ["d640", "\u8AE4", 34, "\u8B08", 27],
    ["d680", "\u8B24\u8B25\u8B27", 30, "\u5E27\u75C7\u90D1\u8BC1\u829D\u679D\u652F\u5431\u8718\u77E5\u80A2\u8102\u6C41\u4E4B\u7EC7\u804C\u76F4\u690D\u6B96\u6267\u503C\u4F84\u5740\u6307\u6B62\u8DBE\u53EA\u65E8\u7EB8\u5FD7\u631A\u63B7\u81F3\u81F4\u7F6E\u5E1C\u5CD9\u5236\u667A\u79E9\u7A1A\u8D28\u7099\u75D4\u6EDE\u6CBB\u7A92\u4E2D\u76C5\u5FE0\u949F\u8877\u7EC8\u79CD\u80BF\u91CD\u4EF2\u4F17\u821F\u5468\u5DDE\u6D32\u8BCC\u7CA5\u8F74\u8098\u5E1A\u5492\u76B1\u5B99\u663C\u9AA4\u73E0\u682A\u86DB\u6731\u732A\u8BF8\u8BDB\u9010\u7AF9\u70DB\u716E\u62C4\u77A9\u5631\u4E3B\u8457\u67F1\u52A9\u86C0\u8D2E\u94F8\u7B51"],
    ["d740", "\u8B46", 31, "\u8B67", 4, "\u8B6D", 25],
    ["d780", "\u8B87", 24, "\u8BAC\u8BB1\u8BBB\u8BC7\u8BD0\u8BEA\u8C09\u8C1E\u4F4F\u6CE8\u795D\u9A7B\u6293\u722A\u62FD\u4E13\u7816\u8F6C\u64B0\u8D5A\u7BC6\u6869\u5E84\u88C5\u5986\u649E\u58EE\u72B6\u690E\u9525\u8FFD\u8D58\u5760\u7F00\u8C06\u51C6\u6349\u62D9\u5353\u684C\u7422\u8301\u914C\u5544\u7740\u707C\u6D4A\u5179\u54A8\u8D44\u59FF\u6ECB\u6DC4\u5B5C\u7D2B\u4ED4\u7C7D\u6ED3\u5B50\u81EA\u6E0D\u5B57\u9B03\u68D5\u8E2A\u5B97\u7EFC\u603B\u7EB5\u90B9\u8D70\u594F\u63CD\u79DF\u8DB3\u5352\u65CF\u7956\u8BC5\u963B\u7EC4\u94BB\u7E82\u5634\u9189\u6700\u7F6A\u5C0A\u9075\u6628\u5DE6\u4F50\u67DE\u505A\u4F5C\u5750\u5EA7"],
    ["d840", "\u8C38", 8, "\u8C42\u8C43\u8C44\u8C45\u8C48\u8C4A\u8C4B\u8C4D", 7, "\u8C56\u8C57\u8C58\u8C59\u8C5B", 5, "\u8C63", 6, "\u8C6C", 6, "\u8C74\u8C75\u8C76\u8C77\u8C7B", 6, "\u8C83\u8C84\u8C86\u8C87"],
    ["d880", "\u8C88\u8C8B\u8C8D", 6, "\u8C95\u8C96\u8C97\u8C99", 20, "\u4E8D\u4E0C\u5140\u4E10\u5EFF\u5345\u4E15\u4E98\u4E1E\u9B32\u5B6C\u5669\u4E28\u79BA\u4E3F\u5315\u4E47\u592D\u723B\u536E\u6C10\u56DF\u80E4\u9997\u6BD3\u777E\u9F17\u4E36\u4E9F\u9F10\u4E5C\u4E69\u4E93\u8288\u5B5B\u556C\u560F\u4EC4\u538D\u539D\u53A3\u53A5\u53AE\u9765\u8D5D\u531A\u53F5\u5326\u532E\u533E\u8D5C\u5366\u5363\u5202\u5208\u520E\u522D\u5233\u523F\u5240\u524C\u525E\u5261\u525C\u84AF\u527D\u5282\u5281\u5290\u5293\u5182\u7F54\u4EBB\u4EC3\u4EC9\u4EC2\u4EE8\u4EE1\u4EEB\u4EDE\u4F1B\u4EF3\u4F22\u4F64\u4EF5\u4F25\u4F27\u4F09\u4F2B\u4F5E\u4F67\u6538\u4F5A\u4F5D"],
    ["d940", "\u8CAE", 62],
    ["d980", "\u8CED", 32, "\u4F5F\u4F57\u4F32\u4F3D\u4F76\u4F74\u4F91\u4F89\u4F83\u4F8F\u4F7E\u4F7B\u4FAA\u4F7C\u4FAC\u4F94\u4FE6\u4FE8\u4FEA\u4FC5\u4FDA\u4FE3\u4FDC\u4FD1\u4FDF\u4FF8\u5029\u504C\u4FF3\u502C\u500F\u502E\u502D\u4FFE\u501C\u500C\u5025\u5028\u507E\u5043\u5055\u5048\u504E\u506C\u507B\u50A5\u50A7\u50A9\u50BA\u50D6\u5106\u50ED\u50EC\u50E6\u50EE\u5107\u510B\u4EDD\u6C3D\u4F58\u4F65\u4FCE\u9FA0\u6C46\u7C74\u516E\u5DFD\u9EC9\u9998\u5181\u5914\u52F9\u530D\u8A07\u5310\u51EB\u5919\u5155\u4EA0\u5156\u4EB3\u886E\u88A4\u4EB5\u8114\u88D2\u7980\u5B34\u8803\u7FB8\u51AB\u51B1\u51BD\u51BC"],
    ["da40", "\u8D0E", 14, "\u8D20\u8D51\u8D52\u8D57\u8D5F\u8D65\u8D68\u8D69\u8D6A\u8D6C\u8D6E\u8D6F\u8D71\u8D72\u8D78", 8, "\u8D82\u8D83\u8D86\u8D87\u8D88\u8D89\u8D8C", 4, "\u8D92\u8D93\u8D95", 9, "\u8DA0\u8DA1"],
    ["da80", "\u8DA2\u8DA4", 12, "\u8DB2\u8DB6\u8DB7\u8DB9\u8DBB\u8DBD\u8DC0\u8DC1\u8DC2\u8DC5\u8DC7\u8DC8\u8DC9\u8DCA\u8DCD\u8DD0\u8DD2\u8DD3\u8DD4\u51C7\u5196\u51A2\u51A5\u8BA0\u8BA6\u8BA7\u8BAA\u8BB4\u8BB5\u8BB7\u8BC2\u8BC3\u8BCB\u8BCF\u8BCE\u8BD2\u8BD3\u8BD4\u8BD6\u8BD8\u8BD9\u8BDC\u8BDF\u8BE0\u8BE4\u8BE8\u8BE9\u8BEE\u8BF0\u8BF3\u8BF6\u8BF9\u8BFC\u8BFF\u8C00\u8C02\u8C04\u8C07\u8C0C\u8C0F\u8C11\u8C12\u8C14\u8C15\u8C16\u8C19\u8C1B\u8C18\u8C1D\u8C1F\u8C20\u8C21\u8C25\u8C27\u8C2A\u8C2B\u8C2E\u8C2F\u8C32\u8C33\u8C35\u8C36\u5369\u537A\u961D\u9622\u9621\u9631\u962A\u963D\u963C\u9642\u9649\u9654\u965F\u9667\u966C\u9672\u9674\u9688\u968D\u9697\u96B0\u9097\u909B\u909D\u9099\u90AC\u90A1\u90B4\u90B3\u90B6\u90BA"],
    ["db40", "\u8DD5\u8DD8\u8DD9\u8DDC\u8DE0\u8DE1\u8DE2\u8DE5\u8DE6\u8DE7\u8DE9\u8DED\u8DEE\u8DF0\u8DF1\u8DF2\u8DF4\u8DF6\u8DFC\u8DFE", 6, "\u8E06\u8E07\u8E08\u8E0B\u8E0D\u8E0E\u8E10\u8E11\u8E12\u8E13\u8E15", 7, "\u8E20\u8E21\u8E24", 4, "\u8E2B\u8E2D\u8E30\u8E32\u8E33\u8E34\u8E36\u8E37\u8E38\u8E3B\u8E3C\u8E3E"],
    ["db80", "\u8E3F\u8E43\u8E45\u8E46\u8E4C", 4, "\u8E53", 5, "\u8E5A", 11, "\u8E67\u8E68\u8E6A\u8E6B\u8E6E\u8E71\u90B8\u90B0\u90CF\u90C5\u90BE\u90D0\u90C4\u90C7\u90D3\u90E6\u90E2\u90DC\u90D7\u90DB\u90EB\u90EF\u90FE\u9104\u9122\u911E\u9123\u9131\u912F\u9139\u9143\u9146\u520D\u5942\u52A2\u52AC\u52AD\u52BE\u54FF\u52D0\u52D6\u52F0\u53DF\u71EE\u77CD\u5EF4\u51F5\u51FC\u9B2F\u53B6\u5F01\u755A\u5DEF\u574C\u57A9\u57A1\u587E\u58BC\u58C5\u58D1\u5729\u572C\u572A\u5733\u5739\u572E\u572F\u575C\u573B\u5742\u5769\u5785\u576B\u5786\u577C\u577B\u5768\u576D\u5776\u5773\u57AD\u57A4\u578C\u57B2\u57CF\u57A7\u57B4\u5793\u57A0\u57D5\u57D8\u57DA\u57D9\u57D2\u57B8\u57F4\u57EF\u57F8\u57E4\u57DD"],
    ["dc40", "\u8E73\u8E75\u8E77", 4, "\u8E7D\u8E7E\u8E80\u8E82\u8E83\u8E84\u8E86\u8E88", 6, "\u8E91\u8E92\u8E93\u8E95", 6, "\u8E9D\u8E9F", 11, "\u8EAD\u8EAE\u8EB0\u8EB1\u8EB3", 6, "\u8EBB", 7],
    ["dc80", "\u8EC3", 10, "\u8ECF", 21, "\u580B\u580D\u57FD\u57ED\u5800\u581E\u5819\u5844\u5820\u5865\u586C\u5881\u5889\u589A\u5880\u99A8\u9F19\u61FF\u8279\u827D\u827F\u828F\u828A\u82A8\u8284\u828E\u8291\u8297\u8299\u82AB\u82B8\u82BE\u82B0\u82C8\u82CA\u82E3\u8298\u82B7\u82AE\u82CB\u82CC\u82C1\u82A9\u82B4\u82A1\u82AA\u829F\u82C4\u82CE\u82A4\u82E1\u8309\u82F7\u82E4\u830F\u8307\u82DC\u82F4\u82D2\u82D8\u830C\u82FB\u82D3\u8311\u831A\u8306\u8314\u8315\u82E0\u82D5\u831C\u8351\u835B\u835C\u8308\u8392\u833C\u8334\u8331\u839B\u835E\u832F\u834F\u8347\u8343\u835F\u8340\u8317\u8360\u832D\u833A\u8333\u8366\u8365"],
    ["dd40", "\u8EE5", 62],
    ["dd80", "\u8F24", 32, "\u8368\u831B\u8369\u836C\u836A\u836D\u836E\u83B0\u8378\u83B3\u83B4\u83A0\u83AA\u8393\u839C\u8385\u837C\u83B6\u83A9\u837D\u83B8\u837B\u8398\u839E\u83A8\u83BA\u83BC\u83C1\u8401\u83E5\u83D8\u5807\u8418\u840B\u83DD\u83FD\u83D6\u841C\u8438\u8411\u8406\u83D4\u83DF\u840F\u8403\u83F8\u83F9\u83EA\u83C5\u83C0\u8426\u83F0\u83E1\u845C\u8451\u845A\u8459\u8473\u8487\u8488\u847A\u8489\u8478\u843C\u8446\u8469\u8476\u848C\u848E\u8431\u846D\u84C1\u84CD\u84D0\u84E6\u84BD\u84D3\u84CA\u84BF\u84BA\u84E0\u84A1\u84B9\u84B4\u8497\u84E5\u84E3\u850C\u750D\u8538\u84F0\u8539\u851F\u853A"],
    ["de40", "\u8F45", 32, "\u8F6A\u8F80\u8F8C\u8F92\u8F9D\u8FA0\u8FA1\u8FA2\u8FA4\u8FA5\u8FA6\u8FA7\u8FAA\u8FAC\u8FAD\u8FAE\u8FAF\u8FB2\u8FB3\u8FB4\u8FB5\u8FB7\u8FB8\u8FBA\u8FBB\u8FBC\u8FBF\u8FC0\u8FC3\u8FC6"],
    ["de80", "\u8FC9", 4, "\u8FCF\u8FD2\u8FD6\u8FD7\u8FDA\u8FE0\u8FE1\u8FE3\u8FE7\u8FEC\u8FEF\u8FF1\u8FF2\u8FF4\u8FF5\u8FF6\u8FFA\u8FFB\u8FFC\u8FFE\u8FFF\u9007\u9008\u900C\u900E\u9013\u9015\u9018\u8556\u853B\u84FF\u84FC\u8559\u8548\u8568\u8564\u855E\u857A\u77A2\u8543\u8572\u857B\u85A4\u85A8\u8587\u858F\u8579\u85AE\u859C\u8585\u85B9\u85B7\u85B0\u85D3\u85C1\u85DC\u85FF\u8627\u8605\u8629\u8616\u863C\u5EFE\u5F08\u593C\u5941\u8037\u5955\u595A\u5958\u530F\u5C22\u5C25\u5C2C\u5C34\u624C\u626A\u629F\u62BB\u62CA\u62DA\u62D7\u62EE\u6322\u62F6\u6339\u634B\u6343\u63AD\u63F6\u6371\u637A\u638E\u63B4\u636D\u63AC\u638A\u6369\u63AE\u63BC\u63F2\u63F8\u63E0\u63FF\u63C4\u63DE\u63CE\u6452\u63C6\u63BE\u6445\u6441\u640B\u641B\u6420\u640C\u6426\u6421\u645E\u6484\u646D\u6496"],
    ["df40", "\u9019\u901C\u9023\u9024\u9025\u9027", 5, "\u9030", 4, "\u9037\u9039\u903A\u903D\u903F\u9040\u9043\u9045\u9046\u9048", 4, "\u904E\u9054\u9055\u9056\u9059\u905A\u905C", 5, "\u9064\u9066\u9067\u9069\u906A\u906B\u906C\u906F", 4, "\u9076", 6, "\u907E\u9081"],
    ["df80", "\u9084\u9085\u9086\u9087\u9089\u908A\u908C", 4, "\u9092\u9094\u9096\u9098\u909A\u909C\u909E\u909F\u90A0\u90A4\u90A5\u90A7\u90A8\u90A9\u90AB\u90AD\u90B2\u90B7\u90BC\u90BD\u90BF\u90C0\u647A\u64B7\u64B8\u6499\u64BA\u64C0\u64D0\u64D7\u64E4\u64E2\u6509\u6525\u652E\u5F0B\u5FD2\u7519\u5F11\u535F\u53F1\u53FD\u53E9\u53E8\u53FB\u5412\u5416\u5406\u544B\u5452\u5453\u5454\u5456\u5443\u5421\u5457\u5459\u5423\u5432\u5482\u5494\u5477\u5471\u5464\u549A\u549B\u5484\u5476\u5466\u549D\u54D0\u54AD\u54C2\u54B4\u54D2\u54A7\u54A6\u54D3\u54D4\u5472\u54A3\u54D5\u54BB\u54BF\u54CC\u54D9\u54DA\u54DC\u54A9\u54AA\u54A4\u54DD\u54CF\u54DE\u551B\u54E7\u5520\u54FD\u5514\u54F3\u5522\u5523\u550F\u5511\u5527\u552A\u5567\u558F\u55B5\u5549\u556D\u5541\u5555\u553F\u5550\u553C"],
    ["e040", "\u90C2\u90C3\u90C6\u90C8\u90C9\u90CB\u90CC\u90CD\u90D2\u90D4\u90D5\u90D6\u90D8\u90D9\u90DA\u90DE\u90DF\u90E0\u90E3\u90E4\u90E5\u90E9\u90EA\u90EC\u90EE\u90F0\u90F1\u90F2\u90F3\u90F5\u90F6\u90F7\u90F9\u90FA\u90FB\u90FC\u90FF\u9100\u9101\u9103\u9105", 19, "\u911A\u911B\u911C"],
    ["e080", "\u911D\u911F\u9120\u9121\u9124", 10, "\u9130\u9132", 6, "\u913A", 8, "\u9144\u5537\u5556\u5575\u5576\u5577\u5533\u5530\u555C\u558B\u55D2\u5583\u55B1\u55B9\u5588\u5581\u559F\u557E\u55D6\u5591\u557B\u55DF\u55BD\u55BE\u5594\u5599\u55EA\u55F7\u55C9\u561F\u55D1\u55EB\u55EC\u55D4\u55E6\u55DD\u55C4\u55EF\u55E5\u55F2\u55F3\u55CC\u55CD\u55E8\u55F5\u55E4\u8F94\u561E\u5608\u560C\u5601\u5624\u5623\u55FE\u5600\u5627\u562D\u5658\u5639\u5657\u562C\u564D\u5662\u5659\u565C\u564C\u5654\u5686\u5664\u5671\u566B\u567B\u567C\u5685\u5693\u56AF\u56D4\u56D7\u56DD\u56E1\u56F5\u56EB\u56F9\u56FF\u5704\u570A\u5709\u571C\u5E0F\u5E19\u5E14\u5E11\u5E31\u5E3B\u5E3C"],
    ["e140", "\u9145\u9147\u9148\u9151\u9153\u9154\u9155\u9156\u9158\u9159\u915B\u915C\u915F\u9160\u9166\u9167\u9168\u916B\u916D\u9173\u917A\u917B\u917C\u9180", 4, "\u9186\u9188\u918A\u918E\u918F\u9193", 6, "\u919C", 5, "\u91A4", 5, "\u91AB\u91AC\u91B0\u91B1\u91B2\u91B3\u91B6\u91B7\u91B8\u91B9\u91BB"],
    ["e180", "\u91BC", 10, "\u91C8\u91CB\u91D0\u91D2", 9, "\u91DD", 8, "\u5E37\u5E44\u5E54\u5E5B\u5E5E\u5E61\u5C8C\u5C7A\u5C8D\u5C90\u5C96\u5C88\u5C98\u5C99\u5C91\u5C9A\u5C9C\u5CB5\u5CA2\u5CBD\u5CAC\u5CAB\u5CB1\u5CA3\u5CC1\u5CB7\u5CC4\u5CD2\u5CE4\u5CCB\u5CE5\u5D02\u5D03\u5D27\u5D26\u5D2E\u5D24\u5D1E\u5D06\u5D1B\u5D58\u5D3E\u5D34\u5D3D\u5D6C\u5D5B\u5D6F\u5D5D\u5D6B\u5D4B\u5D4A\u5D69\u5D74\u5D82\u5D99\u5D9D\u8C73\u5DB7\u5DC5\u5F73\u5F77\u5F82\u5F87\u5F89\u5F8C\u5F95\u5F99\u5F9C\u5FA8\u5FAD\u5FB5\u5FBC\u8862\u5F61\u72AD\u72B0\u72B4\u72B7\u72B8\u72C3\u72C1\u72CE\u72CD\u72D2\u72E8\u72EF\u72E9\u72F2\u72F4\u72F7\u7301\u72F3\u7303\u72FA"],
    ["e240", "\u91E6", 62],
    ["e280", "\u9225", 32, "\u72FB\u7317\u7313\u7321\u730A\u731E\u731D\u7315\u7322\u7339\u7325\u732C\u7338\u7331\u7350\u734D\u7357\u7360\u736C\u736F\u737E\u821B\u5925\u98E7\u5924\u5902\u9963\u9967", 5, "\u9974\u9977\u997D\u9980\u9984\u9987\u998A\u998D\u9990\u9991\u9993\u9994\u9995\u5E80\u5E91\u5E8B\u5E96\u5EA5\u5EA0\u5EB9\u5EB5\u5EBE\u5EB3\u8D53\u5ED2\u5ED1\u5EDB\u5EE8\u5EEA\u81BA\u5FC4\u5FC9\u5FD6\u5FCF\u6003\u5FEE\u6004\u5FE1\u5FE4\u5FFE\u6005\u6006\u5FEA\u5FED\u5FF8\u6019\u6035\u6026\u601B\u600F\u600D\u6029\u602B\u600A\u603F\u6021\u6078\u6079\u607B\u607A\u6042"],
    ["e340", "\u9246", 45, "\u9275", 16],
    ["e380", "\u9286", 7, "\u928F", 24, "\u606A\u607D\u6096\u609A\u60AD\u609D\u6083\u6092\u608C\u609B\u60EC\u60BB\u60B1\u60DD\u60D8\u60C6\u60DA\u60B4\u6120\u6126\u6115\u6123\u60F4\u6100\u610E\u612B\u614A\u6175\u61AC\u6194\u61A7\u61B7\u61D4\u61F5\u5FDD\u96B3\u95E9\u95EB\u95F1\u95F3\u95F5\u95F6\u95FC\u95FE\u9603\u9604\u9606\u9608\u960A\u960B\u960C\u960D\u960F\u9612\u9615\u9616\u9617\u9619\u961A\u4E2C\u723F\u6215\u6C35\u6C54\u6C5C\u6C4A\u6CA3\u6C85\u6C90\u6C94\u6C8C\u6C68\u6C69\u6C74\u6C76\u6C86\u6CA9\u6CD0\u6CD4\u6CAD\u6CF7\u6CF8\u6CF1\u6CD7\u6CB2\u6CE0\u6CD6\u6CFA\u6CEB\u6CEE\u6CB1\u6CD3\u6CEF\u6CFE"],
    ["e440", "\u92A8", 5, "\u92AF", 24, "\u92C9", 31],
    ["e480", "\u92E9", 32, "\u6D39\u6D27\u6D0C\u6D43\u6D48\u6D07\u6D04\u6D19\u6D0E\u6D2B\u6D4D\u6D2E\u6D35\u6D1A\u6D4F\u6D52\u6D54\u6D33\u6D91\u6D6F\u6D9E\u6DA0\u6D5E\u6D93\u6D94\u6D5C\u6D60\u6D7C\u6D63\u6E1A\u6DC7\u6DC5\u6DDE\u6E0E\u6DBF\u6DE0\u6E11\u6DE6\u6DDD\u6DD9\u6E16\u6DAB\u6E0C\u6DAE\u6E2B\u6E6E\u6E4E\u6E6B\u6EB2\u6E5F\u6E86\u6E53\u6E54\u6E32\u6E25\u6E44\u6EDF\u6EB1\u6E98\u6EE0\u6F2D\u6EE2\u6EA5\u6EA7\u6EBD\u6EBB\u6EB7\u6ED7\u6EB4\u6ECF\u6E8F\u6EC2\u6E9F\u6F62\u6F46\u6F47\u6F24\u6F15\u6EF9\u6F2F\u6F36\u6F4B\u6F74\u6F2A\u6F09\u6F29\u6F89\u6F8D\u6F8C\u6F78\u6F72\u6F7C\u6F7A\u6FD1"],
    ["e540", "\u930A", 51, "\u933F", 10],
    ["e580", "\u934A", 31, "\u936B\u6FC9\u6FA7\u6FB9\u6FB6\u6FC2\u6FE1\u6FEE\u6FDE\u6FE0\u6FEF\u701A\u7023\u701B\u7039\u7035\u704F\u705E\u5B80\u5B84\u5B95\u5B93\u5BA5\u5BB8\u752F\u9A9E\u6434\u5BE4\u5BEE\u8930\u5BF0\u8E47\u8B07\u8FB6\u8FD3\u8FD5\u8FE5\u8FEE\u8FE4\u8FE9\u8FE6\u8FF3\u8FE8\u9005\u9004\u900B\u9026\u9011\u900D\u9016\u9021\u9035\u9036\u902D\u902F\u9044\u9051\u9052\u9050\u9068\u9058\u9062\u905B\u66B9\u9074\u907D\u9082\u9088\u9083\u908B\u5F50\u5F57\u5F56\u5F58\u5C3B\u54AB\u5C50\u5C59\u5B71\u5C63\u5C66\u7FBC\u5F2A\u5F29\u5F2D\u8274\u5F3C\u9B3B\u5C6E\u5981\u5983\u598D\u59A9\u59AA\u59A3"],
    ["e640", "\u936C", 34, "\u9390", 27],
    ["e680", "\u93AC", 29, "\u93CB\u93CC\u93CD\u5997\u59CA\u59AB\u599E\u59A4\u59D2\u59B2\u59AF\u59D7\u59BE\u5A05\u5A06\u59DD\u5A08\u59E3\u59D8\u59F9\u5A0C\u5A09\u5A32\u5A34\u5A11\u5A23\u5A13\u5A40\u5A67\u5A4A\u5A55\u5A3C\u5A62\u5A75\u80EC\u5AAA\u5A9B\u5A77\u5A7A\u5ABE\u5AEB\u5AB2\u5AD2\u5AD4\u5AB8\u5AE0\u5AE3\u5AF1\u5AD6\u5AE6\u5AD8\u5ADC\u5B09\u5B17\u5B16\u5B32\u5B37\u5B40\u5C15\u5C1C\u5B5A\u5B65\u5B73\u5B51\u5B53\u5B62\u9A75\u9A77\u9A78\u9A7A\u9A7F\u9A7D\u9A80\u9A81\u9A85\u9A88\u9A8A\u9A90\u9A92\u9A93\u9A96\u9A98\u9A9B\u9A9C\u9A9D\u9A9F\u9AA0\u9AA2\u9AA3\u9AA5\u9AA7\u7E9F\u7EA1\u7EA3\u7EA5\u7EA8\u7EA9"],
    ["e740", "\u93CE", 7, "\u93D7", 54],
    ["e780", "\u940E", 32, "\u7EAD\u7EB0\u7EBE\u7EC0\u7EC1\u7EC2\u7EC9\u7ECB\u7ECC\u7ED0\u7ED4\u7ED7\u7EDB\u7EE0\u7EE1\u7EE8\u7EEB\u7EEE\u7EEF\u7EF1\u7EF2\u7F0D\u7EF6\u7EFA\u7EFB\u7EFE\u7F01\u7F02\u7F03\u7F07\u7F08\u7F0B\u7F0C\u7F0F\u7F11\u7F12\u7F17\u7F19\u7F1C\u7F1B\u7F1F\u7F21", 6, "\u7F2A\u7F2B\u7F2C\u7F2D\u7F2F", 4, "\u7F35\u5E7A\u757F\u5DDB\u753E\u9095\u738E\u7391\u73AE\u73A2\u739F\u73CF\u73C2\u73D1\u73B7\u73B3\u73C0\u73C9\u73C8\u73E5\u73D9\u987C\u740A\u73E9\u73E7\u73DE\u73BA\u73F2\u740F\u742A\u745B\u7426\u7425\u7428\u7430\u742E\u742C"],
    ["e840", "\u942F", 14, "\u943F", 43, "\u946C\u946D\u946E\u946F"],
    ["e880", "\u9470", 20, "\u9491\u9496\u9498\u94C7\u94CF\u94D3\u94D4\u94DA\u94E6\u94FB\u951C\u9520\u741B\u741A\u7441\u745C\u7457\u7455\u7459\u7477\u746D\u747E\u749C\u748E\u7480\u7481\u7487\u748B\u749E\u74A8\u74A9\u7490\u74A7\u74D2\u74BA\u97EA\u97EB\u97EC\u674C\u6753\u675E\u6748\u6769\u67A5\u6787\u676A\u6773\u6798\u67A7\u6775\u67A8\u679E\u67AD\u678B\u6777\u677C\u67F0\u6809\u67D8\u680A\u67E9\u67B0\u680C\u67D9\u67B5\u67DA\u67B3\u67DD\u6800\u67C3\u67B8\u67E2\u680E\u67C1\u67FD\u6832\u6833\u6860\u6861\u684E\u6862\u6844\u6864\u6883\u681D\u6855\u6866\u6841\u6867\u6840\u683E\u684A\u6849\u6829\u68B5\u688F\u6874\u6877\u6893\u686B\u68C2\u696E\u68FC\u691F\u6920\u68F9"],
    ["e940", "\u9527\u9533\u953D\u9543\u9548\u954B\u9555\u955A\u9560\u956E\u9574\u9575\u9577", 7, "\u9580", 42],
    ["e980", "\u95AB", 32, "\u6924\u68F0\u690B\u6901\u6957\u68E3\u6910\u6971\u6939\u6960\u6942\u695D\u6984\u696B\u6980\u6998\u6978\u6934\u69CC\u6987\u6988\u69CE\u6989\u6966\u6963\u6979\u699B\u69A7\u69BB\u69AB\u69AD\u69D4\u69B1\u69C1\u69CA\u69DF\u6995\u69E0\u698D\u69FF\u6A2F\u69ED\u6A17\u6A18\u6A65\u69F2\u6A44\u6A3E\u6AA0\u6A50\u6A5B\u6A35\u6A8E\u6A79\u6A3D\u6A28\u6A58\u6A7C\u6A91\u6A90\u6AA9\u6A97\u6AAB\u7337\u7352\u6B81\u6B82\u6B87\u6B84\u6B92\u6B93\u6B8D\u6B9A\u6B9B\u6BA1\u6BAA\u8F6B\u8F6D\u8F71\u8F72\u8F73\u8F75\u8F76\u8F78\u8F77\u8F79\u8F7A\u8F7C\u8F7E\u8F81\u8F82\u8F84\u8F87\u8F8B"],
    ["ea40", "\u95CC", 27, "\u95EC\u95FF\u9607\u9613\u9618\u961B\u961E\u9620\u9623", 6, "\u962B\u962C\u962D\u962F\u9630\u9637\u9638\u9639\u963A\u963E\u9641\u9643\u964A\u964E\u964F\u9651\u9652\u9653\u9656\u9657"],
    ["ea80", "\u9658\u9659\u965A\u965C\u965D\u965E\u9660\u9663\u9665\u9666\u966B\u966D", 4, "\u9673\u9678", 12, "\u9687\u9689\u968A\u8F8D\u8F8E\u8F8F\u8F98\u8F9A\u8ECE\u620B\u6217\u621B\u621F\u6222\u6221\u6225\u6224\u622C\u81E7\u74EF\u74F4\u74FF\u750F\u7511\u7513\u6534\u65EE\u65EF\u65F0\u660A\u6619\u6772\u6603\u6615\u6600\u7085\u66F7\u661D\u6634\u6631\u6636\u6635\u8006\u665F\u6654\u6641\u664F\u6656\u6661\u6657\u6677\u6684\u668C\u66A7\u669D\u66BE\u66DB\u66DC\u66E6\u66E9\u8D32\u8D33\u8D36\u8D3B\u8D3D\u8D40\u8D45\u8D46\u8D48\u8D49\u8D47\u8D4D\u8D55\u8D59\u89C7\u89CA\u89CB\u89CC\u89CE\u89CF\u89D0\u89D1\u726E\u729F\u725D\u7266\u726F\u727E\u727F\u7284\u728B\u728D\u728F\u7292\u6308\u6332\u63B0"],
    ["eb40", "\u968C\u968E\u9691\u9692\u9693\u9695\u9696\u969A\u969B\u969D", 9, "\u96A8", 7, "\u96B1\u96B2\u96B4\u96B5\u96B7\u96B8\u96BA\u96BB\u96BF\u96C2\u96C3\u96C8\u96CA\u96CB\u96D0\u96D1\u96D3\u96D4\u96D6", 9, "\u96E1", 6, "\u96EB"],
    ["eb80", "\u96EC\u96ED\u96EE\u96F0\u96F1\u96F2\u96F4\u96F5\u96F8\u96FA\u96FB\u96FC\u96FD\u96FF\u9702\u9703\u9705\u970A\u970B\u970C\u9710\u9711\u9712\u9714\u9715\u9717", 4, "\u971D\u971F\u9720\u643F\u64D8\u8004\u6BEA\u6BF3\u6BFD\u6BF5\u6BF9\u6C05\u6C07\u6C06\u6C0D\u6C15\u6C18\u6C19\u6C1A\u6C21\u6C29\u6C24\u6C2A\u6C32\u6535\u6555\u656B\u724D\u7252\u7256\u7230\u8662\u5216\u809F\u809C\u8093\u80BC\u670A\u80BD\u80B1\u80AB\u80AD\u80B4\u80B7\u80E7\u80E8\u80E9\u80EA\u80DB\u80C2\u80C4\u80D9\u80CD\u80D7\u6710\u80DD\u80EB\u80F1\u80F4\u80ED\u810D\u810E\u80F2\u80FC\u6715\u8112\u8C5A\u8136\u811E\u812C\u8118\u8132\u8148\u814C\u8153\u8174\u8159\u815A\u8171\u8160\u8169\u817C\u817D\u816D\u8167\u584D\u5AB5\u8188\u8182\u8191\u6ED5\u81A3\u81AA\u81CC\u6726\u81CA\u81BB"],
    ["ec40", "\u9721", 8, "\u972B\u972C\u972E\u972F\u9731\u9733", 4, "\u973A\u973B\u973C\u973D\u973F", 18, "\u9754\u9755\u9757\u9758\u975A\u975C\u975D\u975F\u9763\u9764\u9766\u9767\u9768\u976A", 7],
    ["ec80", "\u9772\u9775\u9777", 4, "\u977D", 7, "\u9786", 4, "\u978C\u978E\u978F\u9790\u9793\u9795\u9796\u9797\u9799", 4, "\u81C1\u81A6\u6B24\u6B37\u6B39\u6B43\u6B46\u6B59\u98D1\u98D2\u98D3\u98D5\u98D9\u98DA\u6BB3\u5F40\u6BC2\u89F3\u6590\u9F51\u6593\u65BC\u65C6\u65C4\u65C3\u65CC\u65CE\u65D2\u65D6\u7080\u709C\u7096\u709D\u70BB\u70C0\u70B7\u70AB\u70B1\u70E8\u70CA\u7110\u7113\u7116\u712F\u7131\u7173\u715C\u7168\u7145\u7172\u714A\u7178\u717A\u7198\u71B3\u71B5\u71A8\u71A0\u71E0\u71D4\u71E7\u71F9\u721D\u7228\u706C\u7118\u7166\u71B9\u623E\u623D\u6243\u6248\u6249\u793B\u7940\u7946\u7949\u795B\u795C\u7953\u795A\u7962\u7957\u7960\u796F\u7967\u797A\u7985\u798A\u799A\u79A7\u79B3\u5FD1\u5FD0"],
    ["ed40", "\u979E\u979F\u97A1\u97A2\u97A4", 6, "\u97AC\u97AE\u97B0\u97B1\u97B3\u97B5", 46],
    ["ed80", "\u97E4\u97E5\u97E8\u97EE", 4, "\u97F4\u97F7", 23, "\u603C\u605D\u605A\u6067\u6041\u6059\u6063\u60AB\u6106\u610D\u615D\u61A9\u619D\u61CB\u61D1\u6206\u8080\u807F\u6C93\u6CF6\u6DFC\u77F6\u77F8\u7800\u7809\u7817\u7818\u7811\u65AB\u782D\u781C\u781D\u7839\u783A\u783B\u781F\u783C\u7825\u782C\u7823\u7829\u784E\u786D\u7856\u7857\u7826\u7850\u7847\u784C\u786A\u789B\u7893\u789A\u7887\u789C\u78A1\u78A3\u78B2\u78B9\u78A5\u78D4\u78D9\u78C9\u78EC\u78F2\u7905\u78F4\u7913\u7924\u791E\u7934\u9F9B\u9EF9\u9EFB\u9EFC\u76F1\u7704\u770D\u76F9\u7707\u7708\u771A\u7722\u7719\u772D\u7726\u7735\u7738\u7750\u7751\u7747\u7743\u775A\u7768"],
    ["ee40", "\u980F", 62],
    ["ee80", "\u984E", 32, "\u7762\u7765\u777F\u778D\u777D\u7780\u778C\u7791\u779F\u77A0\u77B0\u77B5\u77BD\u753A\u7540\u754E\u754B\u7548\u755B\u7572\u7579\u7583\u7F58\u7F61\u7F5F\u8A48\u7F68\u7F74\u7F71\u7F79\u7F81\u7F7E\u76CD\u76E5\u8832\u9485\u9486\u9487\u948B\u948A\u948C\u948D\u948F\u9490\u9494\u9497\u9495\u949A\u949B\u949C\u94A3\u94A4\u94AB\u94AA\u94AD\u94AC\u94AF\u94B0\u94B2\u94B4\u94B6", 4, "\u94BC\u94BD\u94BF\u94C4\u94C8", 6, "\u94D0\u94D1\u94D2\u94D5\u94D6\u94D7\u94D9\u94D8\u94DB\u94DE\u94DF\u94E0\u94E2\u94E4\u94E5\u94E7\u94E8\u94EA"],
    ["ef40", "\u986F", 5, "\u988B\u988E\u9892\u9895\u9899\u98A3\u98A8", 37, "\u98CF\u98D0\u98D4\u98D6\u98D7\u98DB\u98DC\u98DD\u98E0", 4],
    ["ef80", "\u98E5\u98E6\u98E9", 30, "\u94E9\u94EB\u94EE\u94EF\u94F3\u94F4\u94F5\u94F7\u94F9\u94FC\u94FD\u94FF\u9503\u9502\u9506\u9507\u9509\u950A\u950D\u950E\u950F\u9512", 4, "\u9518\u951B\u951D\u951E\u951F\u9522\u952A\u952B\u9529\u952C\u9531\u9532\u9534\u9536\u9537\u9538\u953C\u953E\u953F\u9542\u9535\u9544\u9545\u9546\u9549\u954C\u954E\u954F\u9552\u9553\u9554\u9556\u9557\u9558\u9559\u955B\u955E\u955F\u955D\u9561\u9562\u9564", 8, "\u956F\u9571\u9572\u9573\u953A\u77E7\u77EC\u96C9\u79D5\u79ED\u79E3\u79EB\u7A06\u5D47\u7A03\u7A02\u7A1E\u7A14"],
    ["f040", "\u9908", 4, "\u990E\u990F\u9911", 28, "\u992F", 26],
    ["f080", "\u994A", 9, "\u9956", 12, "\u9964\u9966\u9973\u9978\u9979\u997B\u997E\u9982\u9983\u9989\u7A39\u7A37\u7A51\u9ECF\u99A5\u7A70\u7688\u768E\u7693\u7699\u76A4\u74DE\u74E0\u752C\u9E20\u9E22\u9E28", 4, "\u9E32\u9E31\u9E36\u9E38\u9E37\u9E39\u9E3A\u9E3E\u9E41\u9E42\u9E44\u9E46\u9E47\u9E48\u9E49\u9E4B\u9E4C\u9E4E\u9E51\u9E55\u9E57\u9E5A\u9E5B\u9E5C\u9E5E\u9E63\u9E66", 6, "\u9E71\u9E6D\u9E73\u7592\u7594\u7596\u75A0\u759D\u75AC\u75A3\u75B3\u75B4\u75B8\u75C4\u75B1\u75B0\u75C3\u75C2\u75D6\u75CD\u75E3\u75E8\u75E6\u75E4\u75EB\u75E7\u7603\u75F1\u75FC\u75FF\u7610\u7600\u7605\u760C\u7617\u760A\u7625\u7618\u7615\u7619"],
    ["f140", "\u998C\u998E\u999A", 10, "\u99A6\u99A7\u99A9", 47],
    ["f180", "\u99D9", 32, "\u761B\u763C\u7622\u7620\u7640\u762D\u7630\u763F\u7635\u7643\u763E\u7633\u764D\u765E\u7654\u765C\u7656\u766B\u766F\u7FCA\u7AE6\u7A78\u7A79\u7A80\u7A86\u7A88\u7A95\u7AA6\u7AA0\u7AAC\u7AA8\u7AAD\u7AB3\u8864\u8869\u8872\u887D\u887F\u8882\u88A2\u88C6\u88B7\u88BC\u88C9\u88E2\u88CE\u88E3\u88E5\u88F1\u891A\u88FC\u88E8\u88FE\u88F0\u8921\u8919\u8913\u891B\u890A\u8934\u892B\u8936\u8941\u8966\u897B\u758B\u80E5\u76B2\u76B4\u77DC\u8012\u8014\u8016\u801C\u8020\u8022\u8025\u8026\u8027\u8029\u8028\u8031\u800B\u8035\u8043\u8046\u804D\u8052\u8069\u8071\u8983\u9878\u9880\u9883"],
    ["f240", "\u99FA", 62],
    ["f280", "\u9A39", 32, "\u9889\u988C\u988D\u988F\u9894\u989A\u989B\u989E\u989F\u98A1\u98A2\u98A5\u98A6\u864D\u8654\u866C\u866E\u867F\u867A\u867C\u867B\u86A8\u868D\u868B\u86AC\u869D\u86A7\u86A3\u86AA\u8693\u86A9\u86B6\u86C4\u86B5\u86CE\u86B0\u86BA\u86B1\u86AF\u86C9\u86CF\u86B4\u86E9\u86F1\u86F2\u86ED\u86F3\u86D0\u8713\u86DE\u86F4\u86DF\u86D8\u86D1\u8703\u8707\u86F8\u8708\u870A\u870D\u8709\u8723\u873B\u871E\u8725\u872E\u871A\u873E\u8748\u8734\u8731\u8729\u8737\u873F\u8782\u8722\u877D\u877E\u877B\u8760\u8770\u874C\u876E\u878B\u8753\u8763\u877C\u8764\u8759\u8765\u8793\u87AF\u87A8\u87D2"],
    ["f340", "\u9A5A", 17, "\u9A72\u9A83\u9A89\u9A8D\u9A8E\u9A94\u9A95\u9A99\u9AA6\u9AA9", 6, "\u9AB2\u9AB3\u9AB4\u9AB5\u9AB9\u9ABB\u9ABD\u9ABE\u9ABF\u9AC3\u9AC4\u9AC6", 4, "\u9ACD\u9ACE\u9ACF\u9AD0\u9AD2\u9AD4\u9AD5\u9AD6\u9AD7\u9AD9\u9ADA\u9ADB\u9ADC"],
    ["f380", "\u9ADD\u9ADE\u9AE0\u9AE2\u9AE3\u9AE4\u9AE5\u9AE7\u9AE8\u9AE9\u9AEA\u9AEC\u9AEE\u9AF0", 8, "\u9AFA\u9AFC", 6, "\u9B04\u9B05\u9B06\u87C6\u8788\u8785\u87AD\u8797\u8783\u87AB\u87E5\u87AC\u87B5\u87B3\u87CB\u87D3\u87BD\u87D1\u87C0\u87CA\u87DB\u87EA\u87E0\u87EE\u8816\u8813\u87FE\u880A\u881B\u8821\u8839\u883C\u7F36\u7F42\u7F44\u7F45\u8210\u7AFA\u7AFD\u7B08\u7B03\u7B04\u7B15\u7B0A\u7B2B\u7B0F\u7B47\u7B38\u7B2A\u7B19\u7B2E\u7B31\u7B20\u7B25\u7B24\u7B33\u7B3E\u7B1E\u7B58\u7B5A\u7B45\u7B75\u7B4C\u7B5D\u7B60\u7B6E\u7B7B\u7B62\u7B72\u7B71\u7B90\u7BA6\u7BA7\u7BB8\u7BAC\u7B9D\u7BA8\u7B85\u7BAA\u7B9C\u7BA2\u7BAB\u7BB4\u7BD1\u7BC1\u7BCC\u7BDD\u7BDA\u7BE5\u7BE6\u7BEA\u7C0C\u7BFE\u7BFC\u7C0F\u7C16\u7C0B"],
    ["f440", "\u9B07\u9B09", 5, "\u9B10\u9B11\u9B12\u9B14", 10, "\u9B20\u9B21\u9B22\u9B24", 10, "\u9B30\u9B31\u9B33", 7, "\u9B3D\u9B3E\u9B3F\u9B40\u9B46\u9B4A\u9B4B\u9B4C\u9B4E\u9B50\u9B52\u9B53\u9B55", 5],
    ["f480", "\u9B5B", 32, "\u7C1F\u7C2A\u7C26\u7C38\u7C41\u7C40\u81FE\u8201\u8202\u8204\u81EC\u8844\u8221\u8222\u8223\u822D\u822F\u8228\u822B\u8238\u823B\u8233\u8234\u823E\u8244\u8249\u824B\u824F\u825A\u825F\u8268\u887E\u8885\u8888\u88D8\u88DF\u895E\u7F9D\u7F9F\u7FA7\u7FAF\u7FB0\u7FB2\u7C7C\u6549\u7C91\u7C9D\u7C9C\u7C9E\u7CA2\u7CB2\u7CBC\u7CBD\u7CC1\u7CC7\u7CCC\u7CCD\u7CC8\u7CC5\u7CD7\u7CE8\u826E\u66A8\u7FBF\u7FCE\u7FD5\u7FE5\u7FE1\u7FE6\u7FE9\u7FEE\u7FF3\u7CF8\u7D77\u7DA6\u7DAE\u7E47\u7E9B\u9EB8\u9EB4\u8D73\u8D84\u8D94\u8D91\u8DB1\u8D67\u8D6D\u8C47\u8C49\u914A\u9150\u914E\u914F\u9164"],
    ["f540", "\u9B7C", 62],
    ["f580", "\u9BBB", 32, "\u9162\u9161\u9170\u9169\u916F\u917D\u917E\u9172\u9174\u9179\u918C\u9185\u9190\u918D\u9191\u91A2\u91A3\u91AA\u91AD\u91AE\u91AF\u91B5\u91B4\u91BA\u8C55\u9E7E\u8DB8\u8DEB\u8E05\u8E59\u8E69\u8DB5\u8DBF\u8DBC\u8DBA\u8DC4\u8DD6\u8DD7\u8DDA\u8DDE\u8DCE\u8DCF\u8DDB\u8DC6\u8DEC\u8DF7\u8DF8\u8DE3\u8DF9\u8DFB\u8DE4\u8E09\u8DFD\u8E14\u8E1D\u8E1F\u8E2C\u8E2E\u8E23\u8E2F\u8E3A\u8E40\u8E39\u8E35\u8E3D\u8E31\u8E49\u8E41\u8E42\u8E51\u8E52\u8E4A\u8E70\u8E76\u8E7C\u8E6F\u8E74\u8E85\u8E8F\u8E94\u8E90\u8E9C\u8E9E\u8C78\u8C82\u8C8A\u8C85\u8C98\u8C94\u659B\u89D6\u89DE\u89DA\u89DC"],
    ["f640", "\u9BDC", 62],
    ["f680", "\u9C1B", 32, "\u89E5\u89EB\u89EF\u8A3E\u8B26\u9753\u96E9\u96F3\u96EF\u9706\u9701\u9708\u970F\u970E\u972A\u972D\u9730\u973E\u9F80\u9F83\u9F85", 5, "\u9F8C\u9EFE\u9F0B\u9F0D\u96B9\u96BC\u96BD\u96CE\u96D2\u77BF\u96E0\u928E\u92AE\u92C8\u933E\u936A\u93CA\u938F\u943E\u946B\u9C7F\u9C82\u9C85\u9C86\u9C87\u9C88\u7A23\u9C8B\u9C8E\u9C90\u9C91\u9C92\u9C94\u9C95\u9C9A\u9C9B\u9C9E", 5, "\u9CA5", 4, "\u9CAB\u9CAD\u9CAE\u9CB0", 7, "\u9CBA\u9CBB\u9CBC\u9CBD\u9CC4\u9CC5\u9CC6\u9CC7\u9CCA\u9CCB"],
    ["f740", "\u9C3C", 62],
    ["f780", "\u9C7B\u9C7D\u9C7E\u9C80\u9C83\u9C84\u9C89\u9C8A\u9C8C\u9C8F\u9C93\u9C96\u9C97\u9C98\u9C99\u9C9D\u9CAA\u9CAC\u9CAF\u9CB9\u9CBE", 4, "\u9CC8\u9CC9\u9CD1\u9CD2\u9CDA\u9CDB\u9CE0\u9CE1\u9CCC", 4, "\u9CD3\u9CD4\u9CD5\u9CD7\u9CD8\u9CD9\u9CDC\u9CDD\u9CDF\u9CE2\u977C\u9785\u9791\u9792\u9794\u97AF\u97AB\u97A3\u97B2\u97B4\u9AB1\u9AB0\u9AB7\u9E58\u9AB6\u9ABA\u9ABC\u9AC1\u9AC0\u9AC5\u9AC2\u9ACB\u9ACC\u9AD1\u9B45\u9B43\u9B47\u9B49\u9B48\u9B4D\u9B51\u98E8\u990D\u992E\u9955\u9954\u9ADF\u9AE1\u9AE6\u9AEF\u9AEB\u9AFB\u9AED\u9AF9\u9B08\u9B0F\u9B13\u9B1F\u9B23\u9EBD\u9EBE\u7E3B\u9E82\u9E87\u9E88\u9E8B\u9E92\u93D6\u9E9D\u9E9F\u9EDB\u9EDC\u9EDD\u9EE0\u9EDF\u9EE2\u9EE9\u9EE7\u9EE5\u9EEA\u9EEF\u9F22\u9F2C\u9F2F\u9F39\u9F37\u9F3D\u9F3E\u9F44"],
    ["f840", "\u9CE3", 62],
    ["f880", "\u9D22", 32],
    ["f940", "\u9D43", 62],
    ["f980", "\u9D82", 32],
    ["fa40", "\u9DA3", 62],
    ["fa80", "\u9DE2", 32],
    ["fb40", "\u9E03", 27, "\u9E24\u9E27\u9E2E\u9E30\u9E34\u9E3B\u9E3C\u9E40\u9E4D\u9E50\u9E52\u9E53\u9E54\u9E56\u9E59\u9E5D\u9E5F\u9E60\u9E61\u9E62\u9E65\u9E6E\u9E6F\u9E72\u9E74", 9, "\u9E80"],
    ["fb80", "\u9E81\u9E83\u9E84\u9E85\u9E86\u9E89\u9E8A\u9E8C", 5, "\u9E94", 8, "\u9E9E\u9EA0", 5, "\u9EA7\u9EA8\u9EA9\u9EAA"],
    ["fc40", "\u9EAB", 8, "\u9EB5\u9EB6\u9EB7\u9EB9\u9EBA\u9EBC\u9EBF", 4, "\u9EC5\u9EC6\u9EC7\u9EC8\u9ECA\u9ECB\u9ECC\u9ED0\u9ED2\u9ED3\u9ED5\u9ED6\u9ED7\u9ED9\u9EDA\u9EDE\u9EE1\u9EE3\u9EE4\u9EE6\u9EE8\u9EEB\u9EEC\u9EED\u9EEE\u9EF0", 8, "\u9EFA\u9EFD\u9EFF", 6],
    ["fc80", "\u9F06", 4, "\u9F0C\u9F0F\u9F11\u9F12\u9F14\u9F15\u9F16\u9F18\u9F1A", 5, "\u9F21\u9F23", 8, "\u9F2D\u9F2E\u9F30\u9F31"],
    ["fd40", "\u9F32", 4, "\u9F38\u9F3A\u9F3C\u9F3F", 4, "\u9F45", 10, "\u9F52", 38],
    ["fd80", "\u9F79", 5, "\u9F81\u9F82\u9F8D", 11, "\u9F9C\u9F9D\u9F9E\u9FA1", 4, "\uF92C\uF979\uF995\uF9E7\uF9F1"],
    ["fe40", "\uFA0C\uFA0D\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA18\uFA1F\uFA20\uFA21\uFA23\uFA24\uFA27\uFA28\uFA29"]
  ];
});

// node_modules/iconv-lite/encodings/tables/gbk-added.json
var require_gbk_added = __commonJS((exports, module) => {
  module.exports = [
    ["a140", "\uE4C6", 62],
    ["a180", "\uE505", 32],
    ["a240", "\uE526", 62],
    ["a280", "\uE565", 32],
    ["a2ab", "\uE766", 5],
    ["a2e3", "\u20AC\uE76D"],
    ["a2ef", "\uE76E\uE76F"],
    ["a2fd", "\uE770\uE771"],
    ["a340", "\uE586", 62],
    ["a380", "\uE5C5", 31, "\u3000"],
    ["a440", "\uE5E6", 62],
    ["a480", "\uE625", 32],
    ["a4f4", "\uE772", 10],
    ["a540", "\uE646", 62],
    ["a580", "\uE685", 32],
    ["a5f7", "\uE77D", 7],
    ["a640", "\uE6A6", 62],
    ["a680", "\uE6E5", 32],
    ["a6b9", "\uE785", 7],
    ["a6d9", "\uE78D", 6],
    ["a6ec", "\uE794\uE795"],
    ["a6f3", "\uE796"],
    ["a6f6", "\uE797", 8],
    ["a740", "\uE706", 62],
    ["a780", "\uE745", 32],
    ["a7c2", "\uE7A0", 14],
    ["a7f2", "\uE7AF", 12],
    ["a896", "\uE7BC", 10],
    ["a8bc", "\uE7C7"],
    ["a8bf", "\u01F9"],
    ["a8c1", "\uE7C9\uE7CA\uE7CB\uE7CC"],
    ["a8ea", "\uE7CD", 20],
    ["a958", "\uE7E2"],
    ["a95b", "\uE7E3"],
    ["a95d", "\uE7E4\uE7E5\uE7E6"],
    ["a989", "\u303E\u2FF0", 11],
    ["a997", "\uE7F4", 12],
    ["a9f0", "\uE801", 14],
    ["aaa1", "\uE000", 93],
    ["aba1", "\uE05E", 93],
    ["aca1", "\uE0BC", 93],
    ["ada1", "\uE11A", 93],
    ["aea1", "\uE178", 93],
    ["afa1", "\uE1D6", 93],
    ["d7fa", "\uE810", 4],
    ["f8a1", "\uE234", 93],
    ["f9a1", "\uE292", 93],
    ["faa1", "\uE2F0", 93],
    ["fba1", "\uE34E", 93],
    ["fca1", "\uE3AC", 93],
    ["fda1", "\uE40A", 93],
    ["fe50", "\u2E81\uE816\uE817\uE818\u2E84\u3473\u3447\u2E88\u2E8B\uE81E\u359E\u361A\u360E\u2E8C\u2E97\u396E\u3918\uE826\u39CF\u39DF\u3A73\u39D0\uE82B\uE82C\u3B4E\u3C6E\u3CE0\u2EA7\uE831\uE832\u2EAA\u4056\u415F\u2EAE\u4337\u2EB3\u2EB6\u2EB7\uE83B\u43B1\u43AC\u2EBB\u43DD\u44D6\u4661\u464C\uE843"],
    ["fe80", "\u4723\u4729\u477C\u478D\u2ECA\u4947\u497A\u497D\u4982\u4983\u4985\u4986\u499F\u499B\u49B7\u49B6\uE854\uE855\u4CA3\u4C9F\u4CA0\u4CA1\u4C77\u4CA2\u4D13", 6, "\u4DAE\uE864\uE468", 93]
  ];
});

// node_modules/iconv-lite/encodings/tables/gb18030-ranges.json
var require_gb18030_ranges = __commonJS((exports, module) => {
  module.exports = { uChars: [128, 165, 169, 178, 184, 216, 226, 235, 238, 244, 248, 251, 253, 258, 276, 284, 300, 325, 329, 334, 364, 463, 465, 467, 469, 471, 473, 475, 477, 506, 594, 610, 712, 716, 730, 930, 938, 962, 970, 1026, 1104, 1106, 8209, 8215, 8218, 8222, 8231, 8241, 8244, 8246, 8252, 8365, 8452, 8454, 8458, 8471, 8482, 8556, 8570, 8596, 8602, 8713, 8720, 8722, 8726, 8731, 8737, 8740, 8742, 8748, 8751, 8760, 8766, 8777, 8781, 8787, 8802, 8808, 8816, 8854, 8858, 8870, 8896, 8979, 9322, 9372, 9548, 9588, 9616, 9622, 9634, 9652, 9662, 9672, 9676, 9680, 9702, 9735, 9738, 9793, 9795, 11906, 11909, 11913, 11917, 11928, 11944, 11947, 11951, 11956, 11960, 11964, 11979, 12284, 12292, 12312, 12319, 12330, 12351, 12436, 12447, 12535, 12543, 12586, 12842, 12850, 12964, 13200, 13215, 13218, 13253, 13263, 13267, 13270, 13384, 13428, 13727, 13839, 13851, 14617, 14703, 14801, 14816, 14964, 15183, 15471, 15585, 16471, 16736, 17208, 17325, 17330, 17374, 17623, 17997, 18018, 18212, 18218, 18301, 18318, 18760, 18811, 18814, 18820, 18823, 18844, 18848, 18872, 19576, 19620, 19738, 19887, 40870, 59244, 59336, 59367, 59413, 59417, 59423, 59431, 59437, 59443, 59452, 59460, 59478, 59493, 63789, 63866, 63894, 63976, 63986, 64016, 64018, 64021, 64025, 64034, 64037, 64042, 65074, 65093, 65107, 65112, 65127, 65132, 65375, 65510, 65536], gbChars: [0, 36, 38, 45, 50, 81, 89, 95, 96, 100, 103, 104, 105, 109, 126, 133, 148, 172, 175, 179, 208, 306, 307, 308, 309, 310, 311, 312, 313, 341, 428, 443, 544, 545, 558, 741, 742, 749, 750, 805, 819, 820, 7922, 7924, 7925, 7927, 7934, 7943, 7944, 7945, 7950, 8062, 8148, 8149, 8152, 8164, 8174, 8236, 8240, 8262, 8264, 8374, 8380, 8381, 8384, 8388, 8390, 8392, 8393, 8394, 8396, 8401, 8406, 8416, 8419, 8424, 8437, 8439, 8445, 8482, 8485, 8496, 8521, 8603, 8936, 8946, 9046, 9050, 9063, 9066, 9076, 9092, 9100, 9108, 9111, 9113, 9131, 9162, 9164, 9218, 9219, 11329, 11331, 11334, 11336, 11346, 11361, 11363, 11366, 11370, 11372, 11375, 11389, 11682, 11686, 11687, 11692, 11694, 11714, 11716, 11723, 11725, 11730, 11736, 11982, 11989, 12102, 12336, 12348, 12350, 12384, 12393, 12395, 12397, 12510, 12553, 12851, 12962, 12973, 13738, 13823, 13919, 13933, 14080, 14298, 14585, 14698, 15583, 15847, 16318, 16434, 16438, 16481, 16729, 17102, 17122, 17315, 17320, 17402, 17418, 17859, 17909, 17911, 17915, 17916, 17936, 17939, 17961, 18664, 18703, 18814, 18962, 19043, 33469, 33470, 33471, 33484, 33485, 33490, 33497, 33501, 33505, 33513, 33520, 33536, 33550, 37845, 37921, 37948, 38029, 38038, 38064, 38065, 38066, 38069, 38075, 38076, 38078, 39108, 39109, 39113, 39114, 39115, 39116, 39265, 39394, 189000] };
});

// node_modules/iconv-lite/encodings/tables/cp949.json
var require_cp949 = __commonJS((exports, module) => {
  module.exports = [
    ["0", "\0", 127],
    ["8141", "\uAC02\uAC03\uAC05\uAC06\uAC0B", 4, "\uAC18\uAC1E\uAC1F\uAC21\uAC22\uAC23\uAC25", 6, "\uAC2E\uAC32\uAC33\uAC34"],
    ["8161", "\uAC35\uAC36\uAC37\uAC3A\uAC3B\uAC3D\uAC3E\uAC3F\uAC41", 9, "\uAC4C\uAC4E", 5, "\uAC55"],
    ["8181", "\uAC56\uAC57\uAC59\uAC5A\uAC5B\uAC5D", 18, "\uAC72\uAC73\uAC75\uAC76\uAC79\uAC7B", 4, "\uAC82\uAC87\uAC88\uAC8D\uAC8E\uAC8F\uAC91\uAC92\uAC93\uAC95", 6, "\uAC9E\uACA2", 5, "\uACAB\uACAD\uACAE\uACB1", 6, "\uACBA\uACBE\uACBF\uACC0\uACC2\uACC3\uACC5\uACC6\uACC7\uACC9\uACCA\uACCB\uACCD", 7, "\uACD6\uACD8", 7, "\uACE2\uACE3\uACE5\uACE6\uACE9\uACEB\uACED\uACEE\uACF2\uACF4\uACF7", 4, "\uACFE\uACFF\uAD01\uAD02\uAD03\uAD05\uAD07", 4, "\uAD0E\uAD10\uAD12\uAD13"],
    ["8241", "\uAD14\uAD15\uAD16\uAD17\uAD19\uAD1A\uAD1B\uAD1D\uAD1E\uAD1F\uAD21", 7, "\uAD2A\uAD2B\uAD2E", 5],
    ["8261", "\uAD36\uAD37\uAD39\uAD3A\uAD3B\uAD3D", 6, "\uAD46\uAD48\uAD4A", 5, "\uAD51\uAD52\uAD53\uAD55\uAD56\uAD57"],
    ["8281", "\uAD59", 7, "\uAD62\uAD64", 7, "\uAD6E\uAD6F\uAD71\uAD72\uAD77\uAD78\uAD79\uAD7A\uAD7E\uAD80\uAD83", 4, "\uAD8A\uAD8B\uAD8D\uAD8E\uAD8F\uAD91", 10, "\uAD9E", 5, "\uADA5", 17, "\uADB8", 7, "\uADC2\uADC3\uADC5\uADC6\uADC7\uADC9", 6, "\uADD2\uADD4", 7, "\uADDD\uADDE\uADDF\uADE1\uADE2\uADE3\uADE5", 18],
    ["8341", "\uADFA\uADFB\uADFD\uADFE\uAE02", 5, "\uAE0A\uAE0C\uAE0E", 5, "\uAE15", 7],
    ["8361", "\uAE1D", 18, "\uAE32\uAE33\uAE35\uAE36\uAE39\uAE3B\uAE3C"],
    ["8381", "\uAE3D\uAE3E\uAE3F\uAE42\uAE44\uAE47\uAE48\uAE49\uAE4B\uAE4F\uAE51\uAE52\uAE53\uAE55\uAE57", 4, "\uAE5E\uAE62\uAE63\uAE64\uAE66\uAE67\uAE6A\uAE6B\uAE6D\uAE6E\uAE6F\uAE71", 6, "\uAE7A\uAE7E", 5, "\uAE86", 5, "\uAE8D", 46, "\uAEBF\uAEC1\uAEC2\uAEC3\uAEC5", 6, "\uAECE\uAED2", 5, "\uAEDA\uAEDB\uAEDD", 8],
    ["8441", "\uAEE6\uAEE7\uAEE9\uAEEA\uAEEC\uAEEE", 5, "\uAEF5\uAEF6\uAEF7\uAEF9\uAEFA\uAEFB\uAEFD", 8],
    ["8461", "\uAF06\uAF09\uAF0A\uAF0B\uAF0C\uAF0E\uAF0F\uAF11", 18],
    ["8481", "\uAF24", 7, "\uAF2E\uAF2F\uAF31\uAF33\uAF35", 6, "\uAF3E\uAF40\uAF44\uAF45\uAF46\uAF47\uAF4A", 5, "\uAF51", 10, "\uAF5E", 5, "\uAF66", 18, "\uAF7A", 5, "\uAF81\uAF82\uAF83\uAF85\uAF86\uAF87\uAF89", 6, "\uAF92\uAF93\uAF94\uAF96", 5, "\uAF9D", 26, "\uAFBA\uAFBB\uAFBD\uAFBE"],
    ["8541", "\uAFBF\uAFC1", 5, "\uAFCA\uAFCC\uAFCF", 4, "\uAFD5", 6, "\uAFDD", 4],
    ["8561", "\uAFE2", 5, "\uAFEA", 5, "\uAFF2\uAFF3\uAFF5\uAFF6\uAFF7\uAFF9", 6, "\uB002\uB003"],
    ["8581", "\uB005", 6, "\uB00D\uB00E\uB00F\uB011\uB012\uB013\uB015", 6, "\uB01E", 9, "\uB029", 26, "\uB046\uB047\uB049\uB04B\uB04D\uB04F\uB050\uB051\uB052\uB056\uB058\uB05A\uB05B\uB05C\uB05E", 29, "\uB07E\uB07F\uB081\uB082\uB083\uB085", 6, "\uB08E\uB090\uB092", 5, "\uB09B\uB09D\uB09E\uB0A3\uB0A4"],
    ["8641", "\uB0A5\uB0A6\uB0A7\uB0AA\uB0B0\uB0B2\uB0B6\uB0B7\uB0B9\uB0BA\uB0BB\uB0BD", 6, "\uB0C6\uB0CA", 5, "\uB0D2"],
    ["8661", "\uB0D3\uB0D5\uB0D6\uB0D7\uB0D9", 6, "\uB0E1\uB0E2\uB0E3\uB0E4\uB0E6", 10],
    ["8681", "\uB0F1", 22, "\uB10A\uB10D\uB10E\uB10F\uB111\uB114\uB115\uB116\uB117\uB11A\uB11E", 4, "\uB126\uB127\uB129\uB12A\uB12B\uB12D", 6, "\uB136\uB13A", 5, "\uB142\uB143\uB145\uB146\uB147\uB149", 6, "\uB152\uB153\uB156\uB157\uB159\uB15A\uB15B\uB15D\uB15E\uB15F\uB161", 22, "\uB17A\uB17B\uB17D\uB17E\uB17F\uB181\uB183", 4, "\uB18A\uB18C\uB18E\uB18F\uB190\uB191\uB195\uB196\uB197\uB199\uB19A\uB19B\uB19D"],
    ["8741", "\uB19E", 9, "\uB1A9", 15],
    ["8761", "\uB1B9", 18, "\uB1CD\uB1CE\uB1CF\uB1D1\uB1D2\uB1D3\uB1D5"],
    ["8781", "\uB1D6", 5, "\uB1DE\uB1E0", 7, "\uB1EA\uB1EB\uB1ED\uB1EE\uB1EF\uB1F1", 7, "\uB1FA\uB1FC\uB1FE", 5, "\uB206\uB207\uB209\uB20A\uB20D", 6, "\uB216\uB218\uB21A", 5, "\uB221", 18, "\uB235", 6, "\uB23D", 26, "\uB259\uB25A\uB25B\uB25D\uB25E\uB25F\uB261", 6, "\uB26A", 4],
    ["8841", "\uB26F", 4, "\uB276", 5, "\uB27D", 6, "\uB286\uB287\uB288\uB28A", 4],
    ["8861", "\uB28F\uB292\uB293\uB295\uB296\uB297\uB29B", 4, "\uB2A2\uB2A4\uB2A7\uB2A8\uB2A9\uB2AB\uB2AD\uB2AE\uB2AF\uB2B1\uB2B2\uB2B3\uB2B5\uB2B6\uB2B7"],
    ["8881", "\uB2B8", 15, "\uB2CA\uB2CB\uB2CD\uB2CE\uB2CF\uB2D1\uB2D3", 4, "\uB2DA\uB2DC\uB2DE\uB2DF\uB2E0\uB2E1\uB2E3\uB2E7\uB2E9\uB2EA\uB2F0\uB2F1\uB2F2\uB2F6\uB2FC\uB2FD\uB2FE\uB302\uB303\uB305\uB306\uB307\uB309", 6, "\uB312\uB316", 5, "\uB31D", 54, "\uB357\uB359\uB35A\uB35D\uB360\uB361\uB362\uB363"],
    ["8941", "\uB366\uB368\uB36A\uB36C\uB36D\uB36F\uB372\uB373\uB375\uB376\uB377\uB379", 6, "\uB382\uB386", 5, "\uB38D"],
    ["8961", "\uB38E\uB38F\uB391\uB392\uB393\uB395", 10, "\uB3A2", 5, "\uB3A9\uB3AA\uB3AB\uB3AD"],
    ["8981", "\uB3AE", 21, "\uB3C6\uB3C7\uB3C9\uB3CA\uB3CD\uB3CF\uB3D1\uB3D2\uB3D3\uB3D6\uB3D8\uB3DA\uB3DC\uB3DE\uB3DF\uB3E1\uB3E2\uB3E3\uB3E5\uB3E6\uB3E7\uB3E9", 18, "\uB3FD", 18, "\uB411", 6, "\uB419\uB41A\uB41B\uB41D\uB41E\uB41F\uB421", 6, "\uB42A\uB42C", 7, "\uB435", 15],
    ["8a41", "\uB445", 10, "\uB452\uB453\uB455\uB456\uB457\uB459", 6, "\uB462\uB464\uB466"],
    ["8a61", "\uB467", 4, "\uB46D", 18, "\uB481\uB482"],
    ["8a81", "\uB483", 4, "\uB489", 19, "\uB49E", 5, "\uB4A5\uB4A6\uB4A7\uB4A9\uB4AA\uB4AB\uB4AD", 7, "\uB4B6\uB4B8\uB4BA", 5, "\uB4C1\uB4C2\uB4C3\uB4C5\uB4C6\uB4C7\uB4C9", 6, "\uB4D1\uB4D2\uB4D3\uB4D4\uB4D6", 5, "\uB4DE\uB4DF\uB4E1\uB4E2\uB4E5\uB4E7", 4, "\uB4EE\uB4F0\uB4F2", 5, "\uB4F9", 26, "\uB516\uB517\uB519\uB51A\uB51D"],
    ["8b41", "\uB51E", 5, "\uB526\uB52B", 4, "\uB532\uB533\uB535\uB536\uB537\uB539", 6, "\uB542\uB546"],
    ["8b61", "\uB547\uB548\uB549\uB54A\uB54E\uB54F\uB551\uB552\uB553\uB555", 6, "\uB55E\uB562", 8],
    ["8b81", "\uB56B", 52, "\uB5A2\uB5A3\uB5A5\uB5A6\uB5A7\uB5A9\uB5AC\uB5AD\uB5AE\uB5AF\uB5B2\uB5B6", 4, "\uB5BE\uB5BF\uB5C1\uB5C2\uB5C3\uB5C5", 6, "\uB5CE\uB5D2", 5, "\uB5D9", 18, "\uB5ED", 18],
    ["8c41", "\uB600", 15, "\uB612\uB613\uB615\uB616\uB617\uB619", 4],
    ["8c61", "\uB61E", 6, "\uB626", 5, "\uB62D", 6, "\uB635", 5],
    ["8c81", "\uB63B", 12, "\uB649", 26, "\uB665\uB666\uB667\uB669", 50, "\uB69E\uB69F\uB6A1\uB6A2\uB6A3\uB6A5", 5, "\uB6AD\uB6AE\uB6AF\uB6B0\uB6B2", 16],
    ["8d41", "\uB6C3", 16, "\uB6D5", 8],
    ["8d61", "\uB6DE", 17, "\uB6F1\uB6F2\uB6F3\uB6F5\uB6F6\uB6F7\uB6F9\uB6FA"],
    ["8d81", "\uB6FB", 4, "\uB702\uB703\uB704\uB706", 33, "\uB72A\uB72B\uB72D\uB72E\uB731", 6, "\uB73A\uB73C", 7, "\uB745\uB746\uB747\uB749\uB74A\uB74B\uB74D", 6, "\uB756", 9, "\uB761\uB762\uB763\uB765\uB766\uB767\uB769", 6, "\uB772\uB774\uB776", 5, "\uB77E\uB77F\uB781\uB782\uB783\uB785", 6, "\uB78E\uB793\uB794\uB795\uB79A\uB79B\uB79D\uB79E"],
    ["8e41", "\uB79F\uB7A1", 6, "\uB7AA\uB7AE", 5, "\uB7B6\uB7B7\uB7B9", 8],
    ["8e61", "\uB7C2", 4, "\uB7C8\uB7CA", 19],
    ["8e81", "\uB7DE", 13, "\uB7EE\uB7EF\uB7F1\uB7F2\uB7F3\uB7F5", 6, "\uB7FE\uB802", 4, "\uB80A\uB80B\uB80D\uB80E\uB80F\uB811", 6, "\uB81A\uB81C\uB81E", 5, "\uB826\uB827\uB829\uB82A\uB82B\uB82D", 6, "\uB836\uB83A", 5, "\uB841\uB842\uB843\uB845", 11, "\uB852\uB854", 7, "\uB85E\uB85F\uB861\uB862\uB863\uB865", 6, "\uB86E\uB870\uB872", 5, "\uB879\uB87A\uB87B\uB87D", 7],
    ["8f41", "\uB885", 7, "\uB88E", 17],
    ["8f61", "\uB8A0", 7, "\uB8A9", 6, "\uB8B1\uB8B2\uB8B3\uB8B5\uB8B6\uB8B7\uB8B9", 4],
    ["8f81", "\uB8BE\uB8BF\uB8C2\uB8C4\uB8C6", 5, "\uB8CD\uB8CE\uB8CF\uB8D1\uB8D2\uB8D3\uB8D5", 7, "\uB8DE\uB8E0\uB8E2", 5, "\uB8EA\uB8EB\uB8ED\uB8EE\uB8EF\uB8F1", 6, "\uB8FA\uB8FC\uB8FE", 5, "\uB905", 18, "\uB919", 6, "\uB921", 26, "\uB93E\uB93F\uB941\uB942\uB943\uB945", 6, "\uB94D\uB94E\uB950\uB952", 5],
    ["9041", "\uB95A\uB95B\uB95D\uB95E\uB95F\uB961", 6, "\uB96A\uB96C\uB96E", 5, "\uB976\uB977\uB979\uB97A\uB97B\uB97D"],
    ["9061", "\uB97E", 5, "\uB986\uB988\uB98B\uB98C\uB98F", 15],
    ["9081", "\uB99F", 12, "\uB9AE\uB9AF\uB9B1\uB9B2\uB9B3\uB9B5", 6, "\uB9BE\uB9C0\uB9C2", 5, "\uB9CA\uB9CB\uB9CD\uB9D3", 4, "\uB9DA\uB9DC\uB9DF\uB9E0\uB9E2\uB9E6\uB9E7\uB9E9\uB9EA\uB9EB\uB9ED", 6, "\uB9F6\uB9FB", 4, "\uBA02", 5, "\uBA09", 11, "\uBA16", 33, "\uBA3A\uBA3B\uBA3D\uBA3E\uBA3F\uBA41\uBA43\uBA44\uBA45\uBA46"],
    ["9141", "\uBA47\uBA4A\uBA4C\uBA4F\uBA50\uBA51\uBA52\uBA56\uBA57\uBA59\uBA5A\uBA5B\uBA5D", 6, "\uBA66\uBA6A", 5],
    ["9161", "\uBA72\uBA73\uBA75\uBA76\uBA77\uBA79", 9, "\uBA86\uBA88\uBA89\uBA8A\uBA8B\uBA8D", 5],
    ["9181", "\uBA93", 20, "\uBAAA\uBAAD\uBAAE\uBAAF\uBAB1\uBAB3", 4, "\uBABA\uBABC\uBABE", 5, "\uBAC5\uBAC6\uBAC7\uBAC9", 14, "\uBADA", 33, "\uBAFD\uBAFE\uBAFF\uBB01\uBB02\uBB03\uBB05", 7, "\uBB0E\uBB10\uBB12", 5, "\uBB19\uBB1A\uBB1B\uBB1D\uBB1E\uBB1F\uBB21", 6],
    ["9241", "\uBB28\uBB2A\uBB2C", 7, "\uBB37\uBB39\uBB3A\uBB3F", 4, "\uBB46\uBB48\uBB4A\uBB4B\uBB4C\uBB4E\uBB51\uBB52"],
    ["9261", "\uBB53\uBB55\uBB56\uBB57\uBB59", 7, "\uBB62\uBB64", 7, "\uBB6D", 4],
    ["9281", "\uBB72", 21, "\uBB89\uBB8A\uBB8B\uBB8D\uBB8E\uBB8F\uBB91", 18, "\uBBA5\uBBA6\uBBA7\uBBA9\uBBAA\uBBAB\uBBAD", 6, "\uBBB5\uBBB6\uBBB8", 7, "\uBBC1\uBBC2\uBBC3\uBBC5\uBBC6\uBBC7\uBBC9", 6, "\uBBD1\uBBD2\uBBD4", 35, "\uBBFA\uBBFB\uBBFD\uBBFE\uBC01"],
    ["9341", "\uBC03", 4, "\uBC0A\uBC0E\uBC10\uBC12\uBC13\uBC19\uBC1A\uBC20\uBC21\uBC22\uBC23\uBC26\uBC28\uBC2A\uBC2B\uBC2C\uBC2E\uBC2F\uBC32\uBC33\uBC35"],
    ["9361", "\uBC36\uBC37\uBC39", 6, "\uBC42\uBC46\uBC47\uBC48\uBC4A\uBC4B\uBC4E\uBC4F\uBC51", 8],
    ["9381", "\uBC5A\uBC5B\uBC5C\uBC5E", 37, "\uBC86\uBC87\uBC89\uBC8A\uBC8D\uBC8F", 4, "\uBC96\uBC98\uBC9B", 4, "\uBCA2\uBCA3\uBCA5\uBCA6\uBCA9", 6, "\uBCB2\uBCB6", 5, "\uBCBE\uBCBF\uBCC1\uBCC2\uBCC3\uBCC5", 7, "\uBCCE\uBCD2\uBCD3\uBCD4\uBCD6\uBCD7\uBCD9\uBCDA\uBCDB\uBCDD", 22, "\uBCF7\uBCF9\uBCFA\uBCFB\uBCFD"],
    ["9441", "\uBCFE", 5, "\uBD06\uBD08\uBD0A", 5, "\uBD11\uBD12\uBD13\uBD15", 8],
    ["9461", "\uBD1E", 5, "\uBD25", 6, "\uBD2D", 12],
    ["9481", "\uBD3A", 5, "\uBD41", 6, "\uBD4A\uBD4B\uBD4D\uBD4E\uBD4F\uBD51", 6, "\uBD5A", 9, "\uBD65\uBD66\uBD67\uBD69", 22, "\uBD82\uBD83\uBD85\uBD86\uBD8B", 4, "\uBD92\uBD94\uBD96\uBD97\uBD98\uBD9B\uBD9D", 6, "\uBDA5", 10, "\uBDB1", 6, "\uBDB9", 24],
    ["9541", "\uBDD2\uBDD3\uBDD6\uBDD7\uBDD9\uBDDA\uBDDB\uBDDD", 11, "\uBDEA", 5, "\uBDF1"],
    ["9561", "\uBDF2\uBDF3\uBDF5\uBDF6\uBDF7\uBDF9", 6, "\uBE01\uBE02\uBE04\uBE06", 5, "\uBE0E\uBE0F\uBE11\uBE12\uBE13"],
    ["9581", "\uBE15", 6, "\uBE1E\uBE20", 35, "\uBE46\uBE47\uBE49\uBE4A\uBE4B\uBE4D\uBE4F", 4, "\uBE56\uBE58\uBE5C\uBE5D\uBE5E\uBE5F\uBE62\uBE63\uBE65\uBE66\uBE67\uBE69\uBE6B", 4, "\uBE72\uBE76", 4, "\uBE7E\uBE7F\uBE81\uBE82\uBE83\uBE85", 6, "\uBE8E\uBE92", 5, "\uBE9A", 13, "\uBEA9", 14],
    ["9641", "\uBEB8", 23, "\uBED2\uBED3"],
    ["9661", "\uBED5\uBED6\uBED9", 6, "\uBEE1\uBEE2\uBEE6", 5, "\uBEED", 8],
    ["9681", "\uBEF6", 10, "\uBF02", 5, "\uBF0A", 13, "\uBF1A\uBF1E", 33, "\uBF42\uBF43\uBF45\uBF46\uBF47\uBF49", 6, "\uBF52\uBF53\uBF54\uBF56", 44],
    ["9741", "\uBF83", 16, "\uBF95", 8],
    ["9761", "\uBF9E", 17, "\uBFB1", 7],
    ["9781", "\uBFB9", 11, "\uBFC6", 5, "\uBFCE\uBFCF\uBFD1\uBFD2\uBFD3\uBFD5", 6, "\uBFDD\uBFDE\uBFE0\uBFE2", 89, "\uC03D\uC03E\uC03F"],
    ["9841", "\uC040", 16, "\uC052", 5, "\uC059\uC05A\uC05B"],
    ["9861", "\uC05D\uC05E\uC05F\uC061", 6, "\uC06A", 15],
    ["9881", "\uC07A", 21, "\uC092\uC093\uC095\uC096\uC097\uC099", 6, "\uC0A2\uC0A4\uC0A6", 5, "\uC0AE\uC0B1\uC0B2\uC0B7", 4, "\uC0BE\uC0C2\uC0C3\uC0C4\uC0C6\uC0C7\uC0CA\uC0CB\uC0CD\uC0CE\uC0CF\uC0D1", 6, "\uC0DA\uC0DE", 5, "\uC0E6\uC0E7\uC0E9\uC0EA\uC0EB\uC0ED", 6, "\uC0F6\uC0F8\uC0FA", 5, "\uC101\uC102\uC103\uC105\uC106\uC107\uC109", 6, "\uC111\uC112\uC113\uC114\uC116", 5, "\uC121\uC122\uC125\uC128\uC129\uC12A\uC12B\uC12E"],
    ["9941", "\uC132\uC133\uC134\uC135\uC137\uC13A\uC13B\uC13D\uC13E\uC13F\uC141", 6, "\uC14A\uC14E", 5, "\uC156\uC157"],
    ["9961", "\uC159\uC15A\uC15B\uC15D", 6, "\uC166\uC16A", 5, "\uC171\uC172\uC173\uC175\uC176\uC177\uC179\uC17A\uC17B"],
    ["9981", "\uC17C", 8, "\uC186", 5, "\uC18F\uC191\uC192\uC193\uC195\uC197", 4, "\uC19E\uC1A0\uC1A2\uC1A3\uC1A4\uC1A6\uC1A7\uC1AA\uC1AB\uC1AD\uC1AE\uC1AF\uC1B1", 11, "\uC1BE", 5, "\uC1C5\uC1C6\uC1C7\uC1C9\uC1CA\uC1CB\uC1CD", 6, "\uC1D5\uC1D6\uC1D9", 6, "\uC1E1\uC1E2\uC1E3\uC1E5\uC1E6\uC1E7\uC1E9", 6, "\uC1F2\uC1F4", 7, "\uC1FE\uC1FF\uC201\uC202\uC203\uC205", 6, "\uC20E\uC210\uC212", 5, "\uC21A\uC21B\uC21D\uC21E\uC221\uC222\uC223"],
    ["9a41", "\uC224\uC225\uC226\uC227\uC22A\uC22C\uC22E\uC230\uC233\uC235", 16],
    ["9a61", "\uC246\uC247\uC249", 6, "\uC252\uC253\uC255\uC256\uC257\uC259", 6, "\uC261\uC262\uC263\uC264\uC266"],
    ["9a81", "\uC267", 4, "\uC26E\uC26F\uC271\uC272\uC273\uC275", 6, "\uC27E\uC280\uC282", 5, "\uC28A", 5, "\uC291", 6, "\uC299\uC29A\uC29C\uC29E", 5, "\uC2A6\uC2A7\uC2A9\uC2AA\uC2AB\uC2AE", 5, "\uC2B6\uC2B8\uC2BA", 33, "\uC2DE\uC2DF\uC2E1\uC2E2\uC2E5", 5, "\uC2EE\uC2F0\uC2F2\uC2F3\uC2F4\uC2F5\uC2F7\uC2FA\uC2FD\uC2FE\uC2FF\uC301", 6, "\uC30A\uC30B\uC30E\uC30F"],
    ["9b41", "\uC310\uC311\uC312\uC316\uC317\uC319\uC31A\uC31B\uC31D", 6, "\uC326\uC327\uC32A", 8],
    ["9b61", "\uC333", 17, "\uC346", 7],
    ["9b81", "\uC34E", 25, "\uC36A\uC36B\uC36D\uC36E\uC36F\uC371\uC373", 4, "\uC37A\uC37B\uC37E", 5, "\uC385\uC386\uC387\uC389\uC38A\uC38B\uC38D", 50, "\uC3C1", 22, "\uC3DA"],
    ["9c41", "\uC3DB\uC3DD\uC3DE\uC3E1\uC3E3", 4, "\uC3EA\uC3EB\uC3EC\uC3EE", 5, "\uC3F6\uC3F7\uC3F9", 5],
    ["9c61", "\uC3FF", 8, "\uC409", 6, "\uC411", 9],
    ["9c81", "\uC41B", 8, "\uC425", 6, "\uC42D\uC42E\uC42F\uC431\uC432\uC433\uC435", 6, "\uC43E", 9, "\uC449", 26, "\uC466\uC467\uC469\uC46A\uC46B\uC46D", 6, "\uC476\uC477\uC478\uC47A", 5, "\uC481", 18, "\uC495", 6, "\uC49D", 12],
    ["9d41", "\uC4AA", 13, "\uC4B9\uC4BA\uC4BB\uC4BD", 8],
    ["9d61", "\uC4C6", 25],
    ["9d81", "\uC4E0", 8, "\uC4EA", 5, "\uC4F2\uC4F3\uC4F5\uC4F6\uC4F7\uC4F9\uC4FB\uC4FC\uC4FD\uC4FE\uC502", 9, "\uC50D\uC50E\uC50F\uC511\uC512\uC513\uC515", 6, "\uC51D", 10, "\uC52A\uC52B\uC52D\uC52E\uC52F\uC531", 6, "\uC53A\uC53C\uC53E", 5, "\uC546\uC547\uC54B\uC54F\uC550\uC551\uC552\uC556\uC55A\uC55B\uC55C\uC55F\uC562\uC563\uC565\uC566\uC567\uC569", 6, "\uC572\uC576", 5, "\uC57E\uC57F\uC581\uC582\uC583\uC585\uC586\uC588\uC589\uC58A\uC58B\uC58E\uC590\uC592\uC593\uC594"],
    ["9e41", "\uC596\uC599\uC59A\uC59B\uC59D\uC59E\uC59F\uC5A1", 7, "\uC5AA", 9, "\uC5B6"],
    ["9e61", "\uC5B7\uC5BA\uC5BF", 4, "\uC5CB\uC5CD\uC5CF\uC5D2\uC5D3\uC5D5\uC5D6\uC5D7\uC5D9", 6, "\uC5E2\uC5E4\uC5E6\uC5E7"],
    ["9e81", "\uC5E8\uC5E9\uC5EA\uC5EB\uC5EF\uC5F1\uC5F2\uC5F3\uC5F5\uC5F8\uC5F9\uC5FA\uC5FB\uC602\uC603\uC604\uC609\uC60A\uC60B\uC60D\uC60E\uC60F\uC611", 6, "\uC61A\uC61D", 6, "\uC626\uC627\uC629\uC62A\uC62B\uC62F\uC631\uC632\uC636\uC638\uC63A\uC63C\uC63D\uC63E\uC63F\uC642\uC643\uC645\uC646\uC647\uC649", 6, "\uC652\uC656", 5, "\uC65E\uC65F\uC661", 10, "\uC66D\uC66E\uC670\uC672", 5, "\uC67A\uC67B\uC67D\uC67E\uC67F\uC681", 6, "\uC68A\uC68C\uC68E", 5, "\uC696\uC697\uC699\uC69A\uC69B\uC69D", 6, "\uC6A6"],
    ["9f41", "\uC6A8\uC6AA", 5, "\uC6B2\uC6B3\uC6B5\uC6B6\uC6B7\uC6BB", 4, "\uC6C2\uC6C4\uC6C6", 5, "\uC6CE"],
    ["9f61", "\uC6CF\uC6D1\uC6D2\uC6D3\uC6D5", 6, "\uC6DE\uC6DF\uC6E2", 5, "\uC6EA\uC6EB\uC6ED\uC6EE\uC6EF\uC6F1\uC6F2"],
    ["9f81", "\uC6F3", 4, "\uC6FA\uC6FB\uC6FC\uC6FE", 5, "\uC706\uC707\uC709\uC70A\uC70B\uC70D", 6, "\uC716\uC718\uC71A", 5, "\uC722\uC723\uC725\uC726\uC727\uC729", 6, "\uC732\uC734\uC736\uC738\uC739\uC73A\uC73B\uC73E\uC73F\uC741\uC742\uC743\uC745", 4, "\uC74B\uC74E\uC750\uC759\uC75A\uC75B\uC75D\uC75E\uC75F\uC761", 6, "\uC769\uC76A\uC76C", 7, "\uC776\uC777\uC779\uC77A\uC77B\uC77F\uC780\uC781\uC782\uC786\uC78B\uC78C\uC78D\uC78F\uC792\uC793\uC795\uC799\uC79B", 4, "\uC7A2\uC7A7", 4, "\uC7AE\uC7AF\uC7B1\uC7B2\uC7B3\uC7B5\uC7B6\uC7B7"],
    ["a041", "\uC7B8\uC7B9\uC7BA\uC7BB\uC7BE\uC7C2", 5, "\uC7CA\uC7CB\uC7CD\uC7CF\uC7D1", 6, "\uC7D9\uC7DA\uC7DB\uC7DC"],
    ["a061", "\uC7DE", 5, "\uC7E5\uC7E6\uC7E7\uC7E9\uC7EA\uC7EB\uC7ED", 13],
    ["a081", "\uC7FB", 4, "\uC802\uC803\uC805\uC806\uC807\uC809\uC80B", 4, "\uC812\uC814\uC817", 4, "\uC81E\uC81F\uC821\uC822\uC823\uC825", 6, "\uC82E\uC830\uC832", 5, "\uC839\uC83A\uC83B\uC83D\uC83E\uC83F\uC841", 6, "\uC84A\uC84B\uC84E", 5, "\uC855", 26, "\uC872\uC873\uC875\uC876\uC877\uC879\uC87B", 4, "\uC882\uC884\uC888\uC889\uC88A\uC88E", 5, "\uC895", 7, "\uC89E\uC8A0\uC8A2\uC8A3\uC8A4"],
    ["a141", "\uC8A5\uC8A6\uC8A7\uC8A9", 18, "\uC8BE\uC8BF\uC8C0\uC8C1"],
    ["a161", "\uC8C2\uC8C3\uC8C5\uC8C6\uC8C7\uC8C9\uC8CA\uC8CB\uC8CD", 6, "\uC8D6\uC8D8\uC8DA", 5, "\uC8E2\uC8E3\uC8E5"],
    ["a181", "\uC8E6", 14, "\uC8F6", 5, "\uC8FE\uC8FF\uC901\uC902\uC903\uC907", 4, "\uC90E\u3000\u3001\u3002\xB7\u2025\u2026\xA8\u3003\xAD\u2015\u2225\uFF3C\u223C\u2018\u2019\u201C\u201D\u3014\u3015\u3008", 9, "\xB1\xD7\xF7\u2260\u2264\u2265\u221E\u2234\xB0\u2032\u2033\u2103\u212B\uFFE0\uFFE1\uFFE5\u2642\u2640\u2220\u22A5\u2312\u2202\u2207\u2261\u2252\xA7\u203B\u2606\u2605\u25CB\u25CF\u25CE\u25C7\u25C6\u25A1\u25A0\u25B3\u25B2\u25BD\u25BC\u2192\u2190\u2191\u2193\u2194\u3013\u226A\u226B\u221A\u223D\u221D\u2235\u222B\u222C\u2208\u220B\u2286\u2287\u2282\u2283\u222A\u2229\u2227\u2228\uFFE2"],
    ["a241", "\uC910\uC912", 5, "\uC919", 18],
    ["a261", "\uC92D", 6, "\uC935", 18],
    ["a281", "\uC948", 7, "\uC952\uC953\uC955\uC956\uC957\uC959", 6, "\uC962\uC964", 7, "\uC96D\uC96E\uC96F\u21D2\u21D4\u2200\u2203\xB4\uFF5E\u02C7\u02D8\u02DD\u02DA\u02D9\xB8\u02DB\xA1\xBF\u02D0\u222E\u2211\u220F\xA4\u2109\u2030\u25C1\u25C0\u25B7\u25B6\u2664\u2660\u2661\u2665\u2667\u2663\u2299\u25C8\u25A3\u25D0\u25D1\u2592\u25A4\u25A5\u25A8\u25A7\u25A6\u25A9\u2668\u260F\u260E\u261C\u261E\xB6\u2020\u2021\u2195\u2197\u2199\u2196\u2198\u266D\u2669\u266A\u266C\u327F\u321C\u2116\u33C7\u2122\u33C2\u33D8\u2121\u20AC\xAE"],
    ["a341", "\uC971\uC972\uC973\uC975", 6, "\uC97D", 10, "\uC98A\uC98B\uC98D\uC98E\uC98F"],
    ["a361", "\uC991", 6, "\uC99A\uC99C\uC99E", 16],
    ["a381", "\uC9AF", 16, "\uC9C2\uC9C3\uC9C5\uC9C6\uC9C9\uC9CB", 4, "\uC9D2\uC9D4\uC9D7\uC9D8\uC9DB\uFF01", 58, "\uFFE6\uFF3D", 32, "\uFFE3"],
    ["a441", "\uC9DE\uC9DF\uC9E1\uC9E3\uC9E5\uC9E6\uC9E8\uC9E9\uC9EA\uC9EB\uC9EE\uC9F2", 5, "\uC9FA\uC9FB\uC9FD\uC9FE\uC9FF\uCA01\uCA02\uCA03\uCA04"],
    ["a461", "\uCA05\uCA06\uCA07\uCA0A\uCA0E", 5, "\uCA15\uCA16\uCA17\uCA19", 12],
    ["a481", "\uCA26\uCA27\uCA28\uCA2A", 28, "\u3131", 93],
    ["a541", "\uCA47", 4, "\uCA4E\uCA4F\uCA51\uCA52\uCA53\uCA55", 6, "\uCA5E\uCA62", 5, "\uCA69\uCA6A"],
    ["a561", "\uCA6B", 17, "\uCA7E", 5, "\uCA85\uCA86"],
    ["a581", "\uCA87", 16, "\uCA99", 14, "\u2170", 9],
    ["a5b0", "\u2160", 9],
    ["a5c1", "\u0391", 16, "\u03A3", 6],
    ["a5e1", "\u03B1", 16, "\u03C3", 6],
    ["a641", "\uCAA8", 19, "\uCABE\uCABF\uCAC1\uCAC2\uCAC3\uCAC5"],
    ["a661", "\uCAC6", 5, "\uCACE\uCAD0\uCAD2\uCAD4\uCAD5\uCAD6\uCAD7\uCADA", 5, "\uCAE1", 6],
    ["a681", "\uCAE8\uCAE9\uCAEA\uCAEB\uCAED", 6, "\uCAF5", 18, "\uCB09\uCB0A\u2500\u2502\u250C\u2510\u2518\u2514\u251C\u252C\u2524\u2534\u253C\u2501\u2503\u250F\u2513\u251B\u2517\u2523\u2533\u252B\u253B\u254B\u2520\u252F\u2528\u2537\u253F\u251D\u2530\u2525\u2538\u2542\u2512\u2511\u251A\u2519\u2516\u2515\u250E\u250D\u251E\u251F\u2521\u2522\u2526\u2527\u2529\u252A\u252D\u252E\u2531\u2532\u2535\u2536\u2539\u253A\u253D\u253E\u2540\u2541\u2543", 7],
    ["a741", "\uCB0B", 4, "\uCB11\uCB12\uCB13\uCB15\uCB16\uCB17\uCB19", 6, "\uCB22", 7],
    ["a761", "\uCB2A", 22, "\uCB42\uCB43\uCB44"],
    ["a781", "\uCB45\uCB46\uCB47\uCB4A\uCB4B\uCB4D\uCB4E\uCB4F\uCB51", 6, "\uCB5A\uCB5B\uCB5C\uCB5E", 5, "\uCB65", 7, "\u3395\u3396\u3397\u2113\u3398\u33C4\u33A3\u33A4\u33A5\u33A6\u3399", 9, "\u33CA\u338D\u338E\u338F\u33CF\u3388\u3389\u33C8\u33A7\u33A8\u33B0", 9, "\u3380", 4, "\u33BA", 5, "\u3390", 4, "\u2126\u33C0\u33C1\u338A\u338B\u338C\u33D6\u33C5\u33AD\u33AE\u33AF\u33DB\u33A9\u33AA\u33AB\u33AC\u33DD\u33D0\u33D3\u33C3\u33C9\u33DC\u33C6"],
    ["a841", "\uCB6D", 10, "\uCB7A", 14],
    ["a861", "\uCB89", 18, "\uCB9D", 6],
    ["a881", "\uCBA4", 19, "\uCBB9", 11, "\xC6\xD0\xAA\u0126"],
    ["a8a6", "\u0132"],
    ["a8a8", "\u013F\u0141\xD8\u0152\xBA\xDE\u0166\u014A"],
    ["a8b1", "\u3260", 27, "\u24D0", 25, "\u2460", 14, "\xBD\u2153\u2154\xBC\xBE\u215B\u215C\u215D\u215E"],
    ["a941", "\uCBC5", 14, "\uCBD5", 10],
    ["a961", "\uCBE0\uCBE1\uCBE2\uCBE3\uCBE5\uCBE6\uCBE8\uCBEA", 18],
    ["a981", "\uCBFD", 14, "\uCC0E\uCC0F\uCC11\uCC12\uCC13\uCC15", 6, "\uCC1E\uCC1F\uCC20\uCC23\uCC24\xE6\u0111\xF0\u0127\u0131\u0133\u0138\u0140\u0142\xF8\u0153\xDF\xFE\u0167\u014B\u0149\u3200", 27, "\u249C", 25, "\u2474", 14, "\xB9\xB2\xB3\u2074\u207F\u2081\u2082\u2083\u2084"],
    ["aa41", "\uCC25\uCC26\uCC2A\uCC2B\uCC2D\uCC2F\uCC31", 6, "\uCC3A\uCC3F", 4, "\uCC46\uCC47\uCC49\uCC4A\uCC4B\uCC4D\uCC4E"],
    ["aa61", "\uCC4F", 4, "\uCC56\uCC5A", 5, "\uCC61\uCC62\uCC63\uCC65\uCC67\uCC69", 6, "\uCC71\uCC72"],
    ["aa81", "\uCC73\uCC74\uCC76", 29, "\u3041", 82],
    ["ab41", "\uCC94\uCC95\uCC96\uCC97\uCC9A\uCC9B\uCC9D\uCC9E\uCC9F\uCCA1", 6, "\uCCAA\uCCAE", 5, "\uCCB6\uCCB7\uCCB9"],
    ["ab61", "\uCCBA\uCCBB\uCCBD", 6, "\uCCC6\uCCC8\uCCCA", 5, "\uCCD1\uCCD2\uCCD3\uCCD5", 5],
    ["ab81", "\uCCDB", 8, "\uCCE5", 6, "\uCCED\uCCEE\uCCEF\uCCF1", 12, "\u30A1", 85],
    ["ac41", "\uCCFE\uCCFF\uCD00\uCD02", 5, "\uCD0A\uCD0B\uCD0D\uCD0E\uCD0F\uCD11", 6, "\uCD1A\uCD1C\uCD1E\uCD1F\uCD20"],
    ["ac61", "\uCD21\uCD22\uCD23\uCD25\uCD26\uCD27\uCD29\uCD2A\uCD2B\uCD2D", 11, "\uCD3A", 4],
    ["ac81", "\uCD3F", 28, "\uCD5D\uCD5E\uCD5F\u0410", 5, "\u0401\u0416", 25],
    ["acd1", "\u0430", 5, "\u0451\u0436", 25],
    ["ad41", "\uCD61\uCD62\uCD63\uCD65", 6, "\uCD6E\uCD70\uCD72", 5, "\uCD79", 7],
    ["ad61", "\uCD81", 6, "\uCD89", 10, "\uCD96\uCD97\uCD99\uCD9A\uCD9B\uCD9D\uCD9E\uCD9F"],
    ["ad81", "\uCDA0\uCDA1\uCDA2\uCDA3\uCDA6\uCDA8\uCDAA", 5, "\uCDB1", 18, "\uCDC5"],
    ["ae41", "\uCDC6", 5, "\uCDCD\uCDCE\uCDCF\uCDD1", 16],
    ["ae61", "\uCDE2", 5, "\uCDE9\uCDEA\uCDEB\uCDED\uCDEE\uCDEF\uCDF1", 6, "\uCDFA\uCDFC\uCDFE", 4],
    ["ae81", "\uCE03\uCE05\uCE06\uCE07\uCE09\uCE0A\uCE0B\uCE0D", 6, "\uCE15\uCE16\uCE17\uCE18\uCE1A", 5, "\uCE22\uCE23\uCE25\uCE26\uCE27\uCE29\uCE2A\uCE2B"],
    ["af41", "\uCE2C\uCE2D\uCE2E\uCE2F\uCE32\uCE34\uCE36", 19],
    ["af61", "\uCE4A", 13, "\uCE5A\uCE5B\uCE5D\uCE5E\uCE62", 5, "\uCE6A\uCE6C"],
    ["af81", "\uCE6E", 5, "\uCE76\uCE77\uCE79\uCE7A\uCE7B\uCE7D", 6, "\uCE86\uCE88\uCE8A", 5, "\uCE92\uCE93\uCE95\uCE96\uCE97\uCE99"],
    ["b041", "\uCE9A", 5, "\uCEA2\uCEA6", 5, "\uCEAE", 12],
    ["b061", "\uCEBB", 5, "\uCEC2", 19],
    ["b081", "\uCED6", 13, "\uCEE6\uCEE7\uCEE9\uCEEA\uCEED", 6, "\uCEF6\uCEFA", 5, "\uAC00\uAC01\uAC04\uAC07\uAC08\uAC09\uAC0A\uAC10", 7, "\uAC19", 4, "\uAC20\uAC24\uAC2C\uAC2D\uAC2F\uAC30\uAC31\uAC38\uAC39\uAC3C\uAC40\uAC4B\uAC4D\uAC54\uAC58\uAC5C\uAC70\uAC71\uAC74\uAC77\uAC78\uAC7A\uAC80\uAC81\uAC83\uAC84\uAC85\uAC86\uAC89\uAC8A\uAC8B\uAC8C\uAC90\uAC94\uAC9C\uAC9D\uAC9F\uACA0\uACA1\uACA8\uACA9\uACAA\uACAC\uACAF\uACB0\uACB8\uACB9\uACBB\uACBC\uACBD\uACC1\uACC4\uACC8\uACCC\uACD5\uACD7\uACE0\uACE1\uACE4\uACE7\uACE8\uACEA\uACEC\uACEF\uACF0\uACF1\uACF3\uACF5\uACF6\uACFC\uACFD\uAD00\uAD04\uAD06"],
    ["b141", "\uCF02\uCF03\uCF05\uCF06\uCF07\uCF09", 6, "\uCF12\uCF14\uCF16", 5, "\uCF1D\uCF1E\uCF1F\uCF21\uCF22\uCF23"],
    ["b161", "\uCF25", 6, "\uCF2E\uCF32", 5, "\uCF39", 11],
    ["b181", "\uCF45", 14, "\uCF56\uCF57\uCF59\uCF5A\uCF5B\uCF5D", 6, "\uCF66\uCF68\uCF6A\uCF6B\uCF6C\uAD0C\uAD0D\uAD0F\uAD11\uAD18\uAD1C\uAD20\uAD29\uAD2C\uAD2D\uAD34\uAD35\uAD38\uAD3C\uAD44\uAD45\uAD47\uAD49\uAD50\uAD54\uAD58\uAD61\uAD63\uAD6C\uAD6D\uAD70\uAD73\uAD74\uAD75\uAD76\uAD7B\uAD7C\uAD7D\uAD7F\uAD81\uAD82\uAD88\uAD89\uAD8C\uAD90\uAD9C\uAD9D\uADA4\uADB7\uADC0\uADC1\uADC4\uADC8\uADD0\uADD1\uADD3\uADDC\uADE0\uADE4\uADF8\uADF9\uADFC\uADFF\uAE00\uAE01\uAE08\uAE09\uAE0B\uAE0D\uAE14\uAE30\uAE31\uAE34\uAE37\uAE38\uAE3A\uAE40\uAE41\uAE43\uAE45\uAE46\uAE4A\uAE4C\uAE4D\uAE4E\uAE50\uAE54\uAE56\uAE5C\uAE5D\uAE5F\uAE60\uAE61\uAE65\uAE68\uAE69\uAE6C\uAE70\uAE78"],
    ["b241", "\uCF6D\uCF6E\uCF6F\uCF72\uCF73\uCF75\uCF76\uCF77\uCF79", 6, "\uCF81\uCF82\uCF83\uCF84\uCF86", 5, "\uCF8D"],
    ["b261", "\uCF8E", 18, "\uCFA2", 5, "\uCFA9"],
    ["b281", "\uCFAA", 5, "\uCFB1", 18, "\uCFC5", 6, "\uAE79\uAE7B\uAE7C\uAE7D\uAE84\uAE85\uAE8C\uAEBC\uAEBD\uAEBE\uAEC0\uAEC4\uAECC\uAECD\uAECF\uAED0\uAED1\uAED8\uAED9\uAEDC\uAEE8\uAEEB\uAEED\uAEF4\uAEF8\uAEFC\uAF07\uAF08\uAF0D\uAF10\uAF2C\uAF2D\uAF30\uAF32\uAF34\uAF3C\uAF3D\uAF3F\uAF41\uAF42\uAF43\uAF48\uAF49\uAF50\uAF5C\uAF5D\uAF64\uAF65\uAF79\uAF80\uAF84\uAF88\uAF90\uAF91\uAF95\uAF9C\uAFB8\uAFB9\uAFBC\uAFC0\uAFC7\uAFC8\uAFC9\uAFCB\uAFCD\uAFCE\uAFD4\uAFDC\uAFE8\uAFE9\uAFF0\uAFF1\uAFF4\uAFF8\uB000\uB001\uB004\uB00C\uB010\uB014\uB01C\uB01D\uB028\uB044\uB045\uB048\uB04A\uB04C\uB04E\uB053\uB054\uB055\uB057\uB059"],
    ["b341", "\uCFCC", 19, "\uCFE2\uCFE3\uCFE5\uCFE6\uCFE7\uCFE9"],
    ["b361", "\uCFEA", 5, "\uCFF2\uCFF4\uCFF6", 5, "\uCFFD\uCFFE\uCFFF\uD001\uD002\uD003\uD005", 5],
    ["b381", "\uD00B", 5, "\uD012", 5, "\uD019", 19, "\uB05D\uB07C\uB07D\uB080\uB084\uB08C\uB08D\uB08F\uB091\uB098\uB099\uB09A\uB09C\uB09F\uB0A0\uB0A1\uB0A2\uB0A8\uB0A9\uB0AB", 4, "\uB0B1\uB0B3\uB0B4\uB0B5\uB0B8\uB0BC\uB0C4\uB0C5\uB0C7\uB0C8\uB0C9\uB0D0\uB0D1\uB0D4\uB0D8\uB0E0\uB0E5\uB108\uB109\uB10B\uB10C\uB110\uB112\uB113\uB118\uB119\uB11B\uB11C\uB11D\uB123\uB124\uB125\uB128\uB12C\uB134\uB135\uB137\uB138\uB139\uB140\uB141\uB144\uB148\uB150\uB151\uB154\uB155\uB158\uB15C\uB160\uB178\uB179\uB17C\uB180\uB182\uB188\uB189\uB18B\uB18D\uB192\uB193\uB194\uB198\uB19C\uB1A8\uB1CC\uB1D0\uB1D4\uB1DC\uB1DD"],
    ["b441", "\uD02E", 5, "\uD036\uD037\uD039\uD03A\uD03B\uD03D", 6, "\uD046\uD048\uD04A", 5],
    ["b461", "\uD051\uD052\uD053\uD055\uD056\uD057\uD059", 6, "\uD061", 10, "\uD06E\uD06F"],
    ["b481", "\uD071\uD072\uD073\uD075", 6, "\uD07E\uD07F\uD080\uD082", 18, "\uB1DF\uB1E8\uB1E9\uB1EC\uB1F0\uB1F9\uB1FB\uB1FD\uB204\uB205\uB208\uB20B\uB20C\uB214\uB215\uB217\uB219\uB220\uB234\uB23C\uB258\uB25C\uB260\uB268\uB269\uB274\uB275\uB27C\uB284\uB285\uB289\uB290\uB291\uB294\uB298\uB299\uB29A\uB2A0\uB2A1\uB2A3\uB2A5\uB2A6\uB2AA\uB2AC\uB2B0\uB2B4\uB2C8\uB2C9\uB2CC\uB2D0\uB2D2\uB2D8\uB2D9\uB2DB\uB2DD\uB2E2\uB2E4\uB2E5\uB2E6\uB2E8\uB2EB", 4, "\uB2F3\uB2F4\uB2F5\uB2F7", 4, "\uB2FF\uB300\uB301\uB304\uB308\uB310\uB311\uB313\uB314\uB315\uB31C\uB354\uB355\uB356\uB358\uB35B\uB35C\uB35E\uB35F\uB364\uB365"],
    ["b541", "\uD095", 14, "\uD0A6\uD0A7\uD0A9\uD0AA\uD0AB\uD0AD", 5],
    ["b561", "\uD0B3\uD0B6\uD0B8\uD0BA", 5, "\uD0C2\uD0C3\uD0C5\uD0C6\uD0C7\uD0CA", 5, "\uD0D2\uD0D6", 4],
    ["b581", "\uD0DB\uD0DE\uD0DF\uD0E1\uD0E2\uD0E3\uD0E5", 6, "\uD0EE\uD0F2", 5, "\uD0F9", 11, "\uB367\uB369\uB36B\uB36E\uB370\uB371\uB374\uB378\uB380\uB381\uB383\uB384\uB385\uB38C\uB390\uB394\uB3A0\uB3A1\uB3A8\uB3AC\uB3C4\uB3C5\uB3C8\uB3CB\uB3CC\uB3CE\uB3D0\uB3D4\uB3D5\uB3D7\uB3D9\uB3DB\uB3DD\uB3E0\uB3E4\uB3E8\uB3FC\uB410\uB418\uB41C\uB420\uB428\uB429\uB42B\uB434\uB450\uB451\uB454\uB458\uB460\uB461\uB463\uB465\uB46C\uB480\uB488\uB49D\uB4A4\uB4A8\uB4AC\uB4B5\uB4B7\uB4B9\uB4C0\uB4C4\uB4C8\uB4D0\uB4D5\uB4DC\uB4DD\uB4E0\uB4E3\uB4E4\uB4E6\uB4EC\uB4ED\uB4EF\uB4F1\uB4F8\uB514\uB515\uB518\uB51B\uB51C\uB524\uB525\uB527\uB528\uB529\uB52A\uB530\uB531\uB534\uB538"],
    ["b641", "\uD105", 7, "\uD10E", 17],
    ["b661", "\uD120", 15, "\uD132\uD133\uD135\uD136\uD137\uD139\uD13B\uD13C\uD13D\uD13E"],
    ["b681", "\uD13F\uD142\uD146", 5, "\uD14E\uD14F\uD151\uD152\uD153\uD155", 6, "\uD15E\uD160\uD162", 5, "\uD169\uD16A\uD16B\uD16D\uB540\uB541\uB543\uB544\uB545\uB54B\uB54C\uB54D\uB550\uB554\uB55C\uB55D\uB55F\uB560\uB561\uB5A0\uB5A1\uB5A4\uB5A8\uB5AA\uB5AB\uB5B0\uB5B1\uB5B3\uB5B4\uB5B5\uB5BB\uB5BC\uB5BD\uB5C0\uB5C4\uB5CC\uB5CD\uB5CF\uB5D0\uB5D1\uB5D8\uB5EC\uB610\uB611\uB614\uB618\uB625\uB62C\uB634\uB648\uB664\uB668\uB69C\uB69D\uB6A0\uB6A4\uB6AB\uB6AC\uB6B1\uB6D4\uB6F0\uB6F4\uB6F8\uB700\uB701\uB705\uB728\uB729\uB72C\uB72F\uB730\uB738\uB739\uB73B\uB744\uB748\uB74C\uB754\uB755\uB760\uB764\uB768\uB770\uB771\uB773\uB775\uB77C\uB77D\uB780\uB784\uB78C\uB78D\uB78F\uB790\uB791\uB792\uB796\uB797"],
    ["b741", "\uD16E", 13, "\uD17D", 6, "\uD185\uD186\uD187\uD189\uD18A"],
    ["b761", "\uD18B", 20, "\uD1A2\uD1A3\uD1A5\uD1A6\uD1A7"],
    ["b781", "\uD1A9", 6, "\uD1B2\uD1B4\uD1B6\uD1B7\uD1B8\uD1B9\uD1BB\uD1BD\uD1BE\uD1BF\uD1C1", 14, "\uB798\uB799\uB79C\uB7A0\uB7A8\uB7A9\uB7AB\uB7AC\uB7AD\uB7B4\uB7B5\uB7B8\uB7C7\uB7C9\uB7EC\uB7ED\uB7F0\uB7F4\uB7FC\uB7FD\uB7FF\uB800\uB801\uB807\uB808\uB809\uB80C\uB810\uB818\uB819\uB81B\uB81D\uB824\uB825\uB828\uB82C\uB834\uB835\uB837\uB838\uB839\uB840\uB844\uB851\uB853\uB85C\uB85D\uB860\uB864\uB86C\uB86D\uB86F\uB871\uB878\uB87C\uB88D\uB8A8\uB8B0\uB8B4\uB8B8\uB8C0\uB8C1\uB8C3\uB8C5\uB8CC\uB8D0\uB8D4\uB8DD\uB8DF\uB8E1\uB8E8\uB8E9\uB8EC\uB8F0\uB8F8\uB8F9\uB8FB\uB8FD\uB904\uB918\uB920\uB93C\uB93D\uB940\uB944\uB94C\uB94F\uB951\uB958\uB959\uB95C\uB960\uB968\uB969"],
    ["b841", "\uD1D0", 7, "\uD1D9", 17],
    ["b861", "\uD1EB", 8, "\uD1F5\uD1F6\uD1F7\uD1F9", 13],
    ["b881", "\uD208\uD20A", 5, "\uD211", 24, "\uB96B\uB96D\uB974\uB975\uB978\uB97C\uB984\uB985\uB987\uB989\uB98A\uB98D\uB98E\uB9AC\uB9AD\uB9B0\uB9B4\uB9BC\uB9BD\uB9BF\uB9C1\uB9C8\uB9C9\uB9CC\uB9CE", 4, "\uB9D8\uB9D9\uB9DB\uB9DD\uB9DE\uB9E1\uB9E3\uB9E4\uB9E5\uB9E8\uB9EC\uB9F4\uB9F5\uB9F7\uB9F8\uB9F9\uB9FA\uBA00\uBA01\uBA08\uBA15\uBA38\uBA39\uBA3C\uBA40\uBA42\uBA48\uBA49\uBA4B\uBA4D\uBA4E\uBA53\uBA54\uBA55\uBA58\uBA5C\uBA64\uBA65\uBA67\uBA68\uBA69\uBA70\uBA71\uBA74\uBA78\uBA83\uBA84\uBA85\uBA87\uBA8C\uBAA8\uBAA9\uBAAB\uBAAC\uBAB0\uBAB2\uBAB8\uBAB9\uBABB\uBABD\uBAC4\uBAC8\uBAD8\uBAD9\uBAFC"],
    ["b941", "\uD22A\uD22B\uD22E\uD22F\uD231\uD232\uD233\uD235", 6, "\uD23E\uD240\uD242", 5, "\uD249\uD24A\uD24B\uD24C"],
    ["b961", "\uD24D", 14, "\uD25D", 6, "\uD265\uD266\uD267\uD268"],
    ["b981", "\uD269", 22, "\uD282\uD283\uD285\uD286\uD287\uD289\uD28A\uD28B\uD28C\uBB00\uBB04\uBB0D\uBB0F\uBB11\uBB18\uBB1C\uBB20\uBB29\uBB2B\uBB34\uBB35\uBB36\uBB38\uBB3B\uBB3C\uBB3D\uBB3E\uBB44\uBB45\uBB47\uBB49\uBB4D\uBB4F\uBB50\uBB54\uBB58\uBB61\uBB63\uBB6C\uBB88\uBB8C\uBB90\uBBA4\uBBA8\uBBAC\uBBB4\uBBB7\uBBC0\uBBC4\uBBC8\uBBD0\uBBD3\uBBF8\uBBF9\uBBFC\uBBFF\uBC00\uBC02\uBC08\uBC09\uBC0B\uBC0C\uBC0D\uBC0F\uBC11\uBC14", 4, "\uBC1B", 4, "\uBC24\uBC25\uBC27\uBC29\uBC2D\uBC30\uBC31\uBC34\uBC38\uBC40\uBC41\uBC43\uBC44\uBC45\uBC49\uBC4C\uBC4D\uBC50\uBC5D\uBC84\uBC85\uBC88\uBC8B\uBC8C\uBC8E\uBC94\uBC95\uBC97"],
    ["ba41", "\uD28D\uD28E\uD28F\uD292\uD293\uD294\uD296", 5, "\uD29D\uD29E\uD29F\uD2A1\uD2A2\uD2A3\uD2A5", 6, "\uD2AD"],
    ["ba61", "\uD2AE\uD2AF\uD2B0\uD2B2", 5, "\uD2BA\uD2BB\uD2BD\uD2BE\uD2C1\uD2C3", 4, "\uD2CA\uD2CC", 5],
    ["ba81", "\uD2D2\uD2D3\uD2D5\uD2D6\uD2D7\uD2D9\uD2DA\uD2DB\uD2DD", 6, "\uD2E6", 9, "\uD2F2\uD2F3\uD2F5\uD2F6\uD2F7\uD2F9\uD2FA\uBC99\uBC9A\uBCA0\uBCA1\uBCA4\uBCA7\uBCA8\uBCB0\uBCB1\uBCB3\uBCB4\uBCB5\uBCBC\uBCBD\uBCC0\uBCC4\uBCCD\uBCCF\uBCD0\uBCD1\uBCD5\uBCD8\uBCDC\uBCF4\uBCF5\uBCF6\uBCF8\uBCFC\uBD04\uBD05\uBD07\uBD09\uBD10\uBD14\uBD24\uBD2C\uBD40\uBD48\uBD49\uBD4C\uBD50\uBD58\uBD59\uBD64\uBD68\uBD80\uBD81\uBD84\uBD87\uBD88\uBD89\uBD8A\uBD90\uBD91\uBD93\uBD95\uBD99\uBD9A\uBD9C\uBDA4\uBDB0\uBDB8\uBDD4\uBDD5\uBDD8\uBDDC\uBDE9\uBDF0\uBDF4\uBDF8\uBE00\uBE03\uBE05\uBE0C\uBE0D\uBE10\uBE14\uBE1C\uBE1D\uBE1F\uBE44\uBE45\uBE48\uBE4C\uBE4E\uBE54\uBE55\uBE57\uBE59\uBE5A\uBE5B\uBE60\uBE61\uBE64"],
    ["bb41", "\uD2FB", 4, "\uD302\uD304\uD306", 5, "\uD30F\uD311\uD312\uD313\uD315\uD317", 4, "\uD31E\uD322\uD323"],
    ["bb61", "\uD324\uD326\uD327\uD32A\uD32B\uD32D\uD32E\uD32F\uD331", 6, "\uD33A\uD33E", 5, "\uD346\uD347\uD348\uD349"],
    ["bb81", "\uD34A", 31, "\uBE68\uBE6A\uBE70\uBE71\uBE73\uBE74\uBE75\uBE7B\uBE7C\uBE7D\uBE80\uBE84\uBE8C\uBE8D\uBE8F\uBE90\uBE91\uBE98\uBE99\uBEA8\uBED0\uBED1\uBED4\uBED7\uBED8\uBEE0\uBEE3\uBEE4\uBEE5\uBEEC\uBF01\uBF08\uBF09\uBF18\uBF19\uBF1B\uBF1C\uBF1D\uBF40\uBF41\uBF44\uBF48\uBF50\uBF51\uBF55\uBF94\uBFB0\uBFC5\uBFCC\uBFCD\uBFD0\uBFD4\uBFDC\uBFDF\uBFE1\uC03C\uC051\uC058\uC05C\uC060\uC068\uC069\uC090\uC091\uC094\uC098\uC0A0\uC0A1\uC0A3\uC0A5\uC0AC\uC0AD\uC0AF\uC0B0\uC0B3\uC0B4\uC0B5\uC0B6\uC0BC\uC0BD\uC0BF\uC0C0\uC0C1\uC0C5\uC0C8\uC0C9\uC0CC\uC0D0\uC0D8\uC0D9\uC0DB\uC0DC\uC0DD\uC0E4"],
    ["bc41", "\uD36A", 17, "\uD37E\uD37F\uD381\uD382\uD383\uD385\uD386\uD387"],
    ["bc61", "\uD388\uD389\uD38A\uD38B\uD38E\uD392", 5, "\uD39A\uD39B\uD39D\uD39E\uD39F\uD3A1", 6, "\uD3AA\uD3AC\uD3AE"],
    ["bc81", "\uD3AF", 4, "\uD3B5\uD3B6\uD3B7\uD3B9\uD3BA\uD3BB\uD3BD", 6, "\uD3C6\uD3C7\uD3CA", 5, "\uD3D1", 5, "\uC0E5\uC0E8\uC0EC\uC0F4\uC0F5\uC0F7\uC0F9\uC100\uC104\uC108\uC110\uC115\uC11C", 4, "\uC123\uC124\uC126\uC127\uC12C\uC12D\uC12F\uC130\uC131\uC136\uC138\uC139\uC13C\uC140\uC148\uC149\uC14B\uC14C\uC14D\uC154\uC155\uC158\uC15C\uC164\uC165\uC167\uC168\uC169\uC170\uC174\uC178\uC185\uC18C\uC18D\uC18E\uC190\uC194\uC196\uC19C\uC19D\uC19F\uC1A1\uC1A5\uC1A8\uC1A9\uC1AC\uC1B0\uC1BD\uC1C4\uC1C8\uC1CC\uC1D4\uC1D7\uC1D8\uC1E0\uC1E4\uC1E8\uC1F0\uC1F1\uC1F3\uC1FC\uC1FD\uC200\uC204\uC20C\uC20D\uC20F\uC211\uC218\uC219\uC21C\uC21F\uC220\uC228\uC229\uC22B\uC22D"],
    ["bd41", "\uD3D7\uD3D9", 7, "\uD3E2\uD3E4", 7, "\uD3EE\uD3EF\uD3F1\uD3F2\uD3F3\uD3F5\uD3F6\uD3F7"],
    ["bd61", "\uD3F8\uD3F9\uD3FA\uD3FB\uD3FE\uD400\uD402", 5, "\uD409", 13],
    ["bd81", "\uD417", 5, "\uD41E", 25, "\uC22F\uC231\uC232\uC234\uC248\uC250\uC251\uC254\uC258\uC260\uC265\uC26C\uC26D\uC270\uC274\uC27C\uC27D\uC27F\uC281\uC288\uC289\uC290\uC298\uC29B\uC29D\uC2A4\uC2A5\uC2A8\uC2AC\uC2AD\uC2B4\uC2B5\uC2B7\uC2B9\uC2DC\uC2DD\uC2E0\uC2E3\uC2E4\uC2EB\uC2EC\uC2ED\uC2EF\uC2F1\uC2F6\uC2F8\uC2F9\uC2FB\uC2FC\uC300\uC308\uC309\uC30C\uC30D\uC313\uC314\uC315\uC318\uC31C\uC324\uC325\uC328\uC329\uC345\uC368\uC369\uC36C\uC370\uC372\uC378\uC379\uC37C\uC37D\uC384\uC388\uC38C\uC3C0\uC3D8\uC3D9\uC3DC\uC3DF\uC3E0\uC3E2\uC3E8\uC3E9\uC3ED\uC3F4\uC3F5\uC3F8\uC408\uC410\uC424\uC42C\uC430"],
    ["be41", "\uD438", 7, "\uD441\uD442\uD443\uD445", 14],
    ["be61", "\uD454", 7, "\uD45D\uD45E\uD45F\uD461\uD462\uD463\uD465", 7, "\uD46E\uD470\uD471\uD472"],
    ["be81", "\uD473", 4, "\uD47A\uD47B\uD47D\uD47E\uD481\uD483", 4, "\uD48A\uD48C\uD48E", 5, "\uD495", 8, "\uC434\uC43C\uC43D\uC448\uC464\uC465\uC468\uC46C\uC474\uC475\uC479\uC480\uC494\uC49C\uC4B8\uC4BC\uC4E9\uC4F0\uC4F1\uC4F4\uC4F8\uC4FA\uC4FF\uC500\uC501\uC50C\uC510\uC514\uC51C\uC528\uC529\uC52C\uC530\uC538\uC539\uC53B\uC53D\uC544\uC545\uC548\uC549\uC54A\uC54C\uC54D\uC54E\uC553\uC554\uC555\uC557\uC558\uC559\uC55D\uC55E\uC560\uC561\uC564\uC568\uC570\uC571\uC573\uC574\uC575\uC57C\uC57D\uC580\uC584\uC587\uC58C\uC58D\uC58F\uC591\uC595\uC597\uC598\uC59C\uC5A0\uC5A9\uC5B4\uC5B5\uC5B8\uC5B9\uC5BB\uC5BC\uC5BD\uC5BE\uC5C4", 6, "\uC5CC\uC5CE"],
    ["bf41", "\uD49E", 10, "\uD4AA", 14],
    ["bf61", "\uD4B9", 18, "\uD4CD\uD4CE\uD4CF\uD4D1\uD4D2\uD4D3\uD4D5"],
    ["bf81", "\uD4D6", 5, "\uD4DD\uD4DE\uD4E0", 7, "\uD4E9\uD4EA\uD4EB\uD4ED\uD4EE\uD4EF\uD4F1", 6, "\uD4F9\uD4FA\uD4FC\uC5D0\uC5D1\uC5D4\uC5D8\uC5E0\uC5E1\uC5E3\uC5E5\uC5EC\uC5ED\uC5EE\uC5F0\uC5F4\uC5F6\uC5F7\uC5FC", 5, "\uC605\uC606\uC607\uC608\uC60C\uC610\uC618\uC619\uC61B\uC61C\uC624\uC625\uC628\uC62C\uC62D\uC62E\uC630\uC633\uC634\uC635\uC637\uC639\uC63B\uC640\uC641\uC644\uC648\uC650\uC651\uC653\uC654\uC655\uC65C\uC65D\uC660\uC66C\uC66F\uC671\uC678\uC679\uC67C\uC680\uC688\uC689\uC68B\uC68D\uC694\uC695\uC698\uC69C\uC6A4\uC6A5\uC6A7\uC6A9\uC6B0\uC6B1\uC6B4\uC6B8\uC6B9\uC6BA\uC6C0\uC6C1\uC6C3\uC6C5\uC6CC\uC6CD\uC6D0\uC6D4\uC6DC\uC6DD\uC6E0\uC6E1\uC6E8"],
    ["c041", "\uD4FE", 5, "\uD505\uD506\uD507\uD509\uD50A\uD50B\uD50D", 6, "\uD516\uD518", 5],
    ["c061", "\uD51E", 25],
    ["c081", "\uD538\uD539\uD53A\uD53B\uD53E\uD53F\uD541\uD542\uD543\uD545", 6, "\uD54E\uD550\uD552", 5, "\uD55A\uD55B\uD55D\uD55E\uD55F\uD561\uD562\uD563\uC6E9\uC6EC\uC6F0\uC6F8\uC6F9\uC6FD\uC704\uC705\uC708\uC70C\uC714\uC715\uC717\uC719\uC720\uC721\uC724\uC728\uC730\uC731\uC733\uC735\uC737\uC73C\uC73D\uC740\uC744\uC74A\uC74C\uC74D\uC74F\uC751", 7, "\uC75C\uC760\uC768\uC76B\uC774\uC775\uC778\uC77C\uC77D\uC77E\uC783\uC784\uC785\uC787\uC788\uC789\uC78A\uC78E\uC790\uC791\uC794\uC796\uC797\uC798\uC79A\uC7A0\uC7A1\uC7A3\uC7A4\uC7A5\uC7A6\uC7AC\uC7AD\uC7B0\uC7B4\uC7BC\uC7BD\uC7BF\uC7C0\uC7C1\uC7C8\uC7C9\uC7CC\uC7CE\uC7D0\uC7D8\uC7DD\uC7E4\uC7E8\uC7EC\uC800\uC801\uC804\uC808\uC80A"],
    ["c141", "\uD564\uD566\uD567\uD56A\uD56C\uD56E", 5, "\uD576\uD577\uD579\uD57A\uD57B\uD57D", 6, "\uD586\uD58A\uD58B"],
    ["c161", "\uD58C\uD58D\uD58E\uD58F\uD591", 19, "\uD5A6\uD5A7"],
    ["c181", "\uD5A8", 31, "\uC810\uC811\uC813\uC815\uC816\uC81C\uC81D\uC820\uC824\uC82C\uC82D\uC82F\uC831\uC838\uC83C\uC840\uC848\uC849\uC84C\uC84D\uC854\uC870\uC871\uC874\uC878\uC87A\uC880\uC881\uC883\uC885\uC886\uC887\uC88B\uC88C\uC88D\uC894\uC89D\uC89F\uC8A1\uC8A8\uC8BC\uC8BD\uC8C4\uC8C8\uC8CC\uC8D4\uC8D5\uC8D7\uC8D9\uC8E0\uC8E1\uC8E4\uC8F5\uC8FC\uC8FD\uC900\uC904\uC905\uC906\uC90C\uC90D\uC90F\uC911\uC918\uC92C\uC934\uC950\uC951\uC954\uC958\uC960\uC961\uC963\uC96C\uC970\uC974\uC97C\uC988\uC989\uC98C\uC990\uC998\uC999\uC99B\uC99D\uC9C0\uC9C1\uC9C4\uC9C7\uC9C8\uC9CA\uC9D0\uC9D1\uC9D3"],
    ["c241", "\uD5CA\uD5CB\uD5CD\uD5CE\uD5CF\uD5D1\uD5D3", 4, "\uD5DA\uD5DC\uD5DE", 5, "\uD5E6\uD5E7\uD5E9\uD5EA\uD5EB\uD5ED\uD5EE"],
    ["c261", "\uD5EF", 4, "\uD5F6\uD5F8\uD5FA", 5, "\uD602\uD603\uD605\uD606\uD607\uD609", 6, "\uD612"],
    ["c281", "\uD616", 5, "\uD61D\uD61E\uD61F\uD621\uD622\uD623\uD625", 7, "\uD62E", 9, "\uD63A\uD63B\uC9D5\uC9D6\uC9D9\uC9DA\uC9DC\uC9DD\uC9E0\uC9E2\uC9E4\uC9E7\uC9EC\uC9ED\uC9EF\uC9F0\uC9F1\uC9F8\uC9F9\uC9FC\uCA00\uCA08\uCA09\uCA0B\uCA0C\uCA0D\uCA14\uCA18\uCA29\uCA4C\uCA4D\uCA50\uCA54\uCA5C\uCA5D\uCA5F\uCA60\uCA61\uCA68\uCA7D\uCA84\uCA98\uCABC\uCABD\uCAC0\uCAC4\uCACC\uCACD\uCACF\uCAD1\uCAD3\uCAD8\uCAD9\uCAE0\uCAEC\uCAF4\uCB08\uCB10\uCB14\uCB18\uCB20\uCB21\uCB41\uCB48\uCB49\uCB4C\uCB50\uCB58\uCB59\uCB5D\uCB64\uCB78\uCB79\uCB9C\uCBB8\uCBD4\uCBE4\uCBE7\uCBE9\uCC0C\uCC0D\uCC10\uCC14\uCC1C\uCC1D\uCC21\uCC22\uCC27\uCC28\uCC29\uCC2C\uCC2E\uCC30\uCC38\uCC39\uCC3B"],
    ["c341", "\uD63D\uD63E\uD63F\uD641\uD642\uD643\uD644\uD646\uD647\uD64A\uD64C\uD64E\uD64F\uD650\uD652\uD653\uD656\uD657\uD659\uD65A\uD65B\uD65D", 4],
    ["c361", "\uD662", 4, "\uD668\uD66A", 5, "\uD672\uD673\uD675", 11],
    ["c381", "\uD681\uD682\uD684\uD686", 5, "\uD68E\uD68F\uD691\uD692\uD693\uD695", 7, "\uD69E\uD6A0\uD6A2", 5, "\uD6A9\uD6AA\uCC3C\uCC3D\uCC3E\uCC44\uCC45\uCC48\uCC4C\uCC54\uCC55\uCC57\uCC58\uCC59\uCC60\uCC64\uCC66\uCC68\uCC70\uCC75\uCC98\uCC99\uCC9C\uCCA0\uCCA8\uCCA9\uCCAB\uCCAC\uCCAD\uCCB4\uCCB5\uCCB8\uCCBC\uCCC4\uCCC5\uCCC7\uCCC9\uCCD0\uCCD4\uCCE4\uCCEC\uCCF0\uCD01\uCD08\uCD09\uCD0C\uCD10\uCD18\uCD19\uCD1B\uCD1D\uCD24\uCD28\uCD2C\uCD39\uCD5C\uCD60\uCD64\uCD6C\uCD6D\uCD6F\uCD71\uCD78\uCD88\uCD94\uCD95\uCD98\uCD9C\uCDA4\uCDA5\uCDA7\uCDA9\uCDB0\uCDC4\uCDCC\uCDD0\uCDE8\uCDEC\uCDF0\uCDF8\uCDF9\uCDFB\uCDFD\uCE04\uCE08\uCE0C\uCE14\uCE19\uCE20\uCE21\uCE24\uCE28\uCE30\uCE31\uCE33\uCE35"],
    ["c441", "\uD6AB\uD6AD\uD6AE\uD6AF\uD6B1", 7, "\uD6BA\uD6BC", 7, "\uD6C6\uD6C7\uD6C9\uD6CA\uD6CB"],
    ["c461", "\uD6CD\uD6CE\uD6CF\uD6D0\uD6D2\uD6D3\uD6D5\uD6D6\uD6D8\uD6DA", 5, "\uD6E1\uD6E2\uD6E3\uD6E5\uD6E6\uD6E7\uD6E9", 4],
    ["c481", "\uD6EE\uD6EF\uD6F1\uD6F2\uD6F3\uD6F4\uD6F6", 5, "\uD6FE\uD6FF\uD701\uD702\uD703\uD705", 11, "\uD712\uD713\uD714\uCE58\uCE59\uCE5C\uCE5F\uCE60\uCE61\uCE68\uCE69\uCE6B\uCE6D\uCE74\uCE75\uCE78\uCE7C\uCE84\uCE85\uCE87\uCE89\uCE90\uCE91\uCE94\uCE98\uCEA0\uCEA1\uCEA3\uCEA4\uCEA5\uCEAC\uCEAD\uCEC1\uCEE4\uCEE5\uCEE8\uCEEB\uCEEC\uCEF4\uCEF5\uCEF7\uCEF8\uCEF9\uCF00\uCF01\uCF04\uCF08\uCF10\uCF11\uCF13\uCF15\uCF1C\uCF20\uCF24\uCF2C\uCF2D\uCF2F\uCF30\uCF31\uCF38\uCF54\uCF55\uCF58\uCF5C\uCF64\uCF65\uCF67\uCF69\uCF70\uCF71\uCF74\uCF78\uCF80\uCF85\uCF8C\uCFA1\uCFA8\uCFB0\uCFC4\uCFE0\uCFE1\uCFE4\uCFE8\uCFF0\uCFF1\uCFF3\uCFF5\uCFFC\uD000\uD004\uD011\uD018\uD02D\uD034\uD035\uD038\uD03C"],
    ["c541", "\uD715\uD716\uD717\uD71A\uD71B\uD71D\uD71E\uD71F\uD721", 6, "\uD72A\uD72C\uD72E", 5, "\uD736\uD737\uD739"],
    ["c561", "\uD73A\uD73B\uD73D", 6, "\uD745\uD746\uD748\uD74A", 5, "\uD752\uD753\uD755\uD75A", 4],
    ["c581", "\uD75F\uD762\uD764\uD766\uD767\uD768\uD76A\uD76B\uD76D\uD76E\uD76F\uD771\uD772\uD773\uD775", 6, "\uD77E\uD77F\uD780\uD782", 5, "\uD78A\uD78B\uD044\uD045\uD047\uD049\uD050\uD054\uD058\uD060\uD06C\uD06D\uD070\uD074\uD07C\uD07D\uD081\uD0A4\uD0A5\uD0A8\uD0AC\uD0B4\uD0B5\uD0B7\uD0B9\uD0C0\uD0C1\uD0C4\uD0C8\uD0C9\uD0D0\uD0D1\uD0D3\uD0D4\uD0D5\uD0DC\uD0DD\uD0E0\uD0E4\uD0EC\uD0ED\uD0EF\uD0F0\uD0F1\uD0F8\uD10D\uD130\uD131\uD134\uD138\uD13A\uD140\uD141\uD143\uD144\uD145\uD14C\uD14D\uD150\uD154\uD15C\uD15D\uD15F\uD161\uD168\uD16C\uD17C\uD184\uD188\uD1A0\uD1A1\uD1A4\uD1A8\uD1B0\uD1B1\uD1B3\uD1B5\uD1BA\uD1BC\uD1C0\uD1D8\uD1F4\uD1F8\uD207\uD209\uD210\uD22C\uD22D\uD230\uD234\uD23C\uD23D\uD23F\uD241\uD248\uD25C"],
    ["c641", "\uD78D\uD78E\uD78F\uD791", 6, "\uD79A\uD79C\uD79E", 5],
    ["c6a1", "\uD264\uD280\uD281\uD284\uD288\uD290\uD291\uD295\uD29C\uD2A0\uD2A4\uD2AC\uD2B1\uD2B8\uD2B9\uD2BC\uD2BF\uD2C0\uD2C2\uD2C8\uD2C9\uD2CB\uD2D4\uD2D8\uD2DC\uD2E4\uD2E5\uD2F0\uD2F1\uD2F4\uD2F8\uD300\uD301\uD303\uD305\uD30C\uD30D\uD30E\uD310\uD314\uD316\uD31C\uD31D\uD31F\uD320\uD321\uD325\uD328\uD329\uD32C\uD330\uD338\uD339\uD33B\uD33C\uD33D\uD344\uD345\uD37C\uD37D\uD380\uD384\uD38C\uD38D\uD38F\uD390\uD391\uD398\uD399\uD39C\uD3A0\uD3A8\uD3A9\uD3AB\uD3AD\uD3B4\uD3B8\uD3BC\uD3C4\uD3C5\uD3C8\uD3C9\uD3D0\uD3D8\uD3E1\uD3E3\uD3EC\uD3ED\uD3F0\uD3F4\uD3FC\uD3FD\uD3FF\uD401"],
    ["c7a1", "\uD408\uD41D\uD440\uD444\uD45C\uD460\uD464\uD46D\uD46F\uD478\uD479\uD47C\uD47F\uD480\uD482\uD488\uD489\uD48B\uD48D\uD494\uD4A9\uD4CC\uD4D0\uD4D4\uD4DC\uD4DF\uD4E8\uD4EC\uD4F0\uD4F8\uD4FB\uD4FD\uD504\uD508\uD50C\uD514\uD515\uD517\uD53C\uD53D\uD540\uD544\uD54C\uD54D\uD54F\uD551\uD558\uD559\uD55C\uD560\uD565\uD568\uD569\uD56B\uD56D\uD574\uD575\uD578\uD57C\uD584\uD585\uD587\uD588\uD589\uD590\uD5A5\uD5C8\uD5C9\uD5CC\uD5D0\uD5D2\uD5D8\uD5D9\uD5DB\uD5DD\uD5E4\uD5E5\uD5E8\uD5EC\uD5F4\uD5F5\uD5F7\uD5F9\uD600\uD601\uD604\uD608\uD610\uD611\uD613\uD614\uD615\uD61C\uD620"],
    ["c8a1", "\uD624\uD62D\uD638\uD639\uD63C\uD640\uD645\uD648\uD649\uD64B\uD64D\uD651\uD654\uD655\uD658\uD65C\uD667\uD669\uD670\uD671\uD674\uD683\uD685\uD68C\uD68D\uD690\uD694\uD69D\uD69F\uD6A1\uD6A8\uD6AC\uD6B0\uD6B9\uD6BB\uD6C4\uD6C5\uD6C8\uD6CC\uD6D1\uD6D4\uD6D7\uD6D9\uD6E0\uD6E4\uD6E8\uD6F0\uD6F5\uD6FC\uD6FD\uD700\uD704\uD711\uD718\uD719\uD71C\uD720\uD728\uD729\uD72B\uD72D\uD734\uD735\uD738\uD73C\uD744\uD747\uD749\uD750\uD751\uD754\uD756\uD757\uD758\uD759\uD760\uD761\uD763\uD765\uD769\uD76C\uD770\uD774\uD77C\uD77D\uD781\uD788\uD789\uD78C\uD790\uD798\uD799\uD79B\uD79D"],
    ["caa1", "\u4F3D\u4F73\u5047\u50F9\u52A0\u53EF\u5475\u54E5\u5609\u5AC1\u5BB6\u6687\u67B6\u67B7\u67EF\u6B4C\u73C2\u75C2\u7A3C\u82DB\u8304\u8857\u8888\u8A36\u8CC8\u8DCF\u8EFB\u8FE6\u99D5\u523B\u5374\u5404\u606A\u6164\u6BBC\u73CF\u811A\u89BA\u89D2\u95A3\u4F83\u520A\u58BE\u5978\u59E6\u5E72\u5E79\u61C7\u63C0\u6746\u67EC\u687F\u6F97\u764E\u770B\u78F5\u7A08\u7AFF\u7C21\u809D\u826E\u8271\u8AEB\u9593\u4E6B\u559D\u66F7\u6E34\u78A3\u7AED\u845B\u8910\u874E\u97A8\u52D8\u574E\u582A\u5D4C\u611F\u61BE\u6221\u6562\u67D1\u6A44\u6E1B\u7518\u75B3\u76E3\u77B0\u7D3A\u90AF\u9451\u9452\u9F95"],
    ["cba1", "\u5323\u5CAC\u7532\u80DB\u9240\u9598\u525B\u5808\u59DC\u5CA1\u5D17\u5EB7\u5F3A\u5F4A\u6177\u6C5F\u757A\u7586\u7CE0\u7D73\u7DB1\u7F8C\u8154\u8221\u8591\u8941\u8B1B\u92FC\u964D\u9C47\u4ECB\u4EF7\u500B\u51F1\u584F\u6137\u613E\u6168\u6539\u69EA\u6F11\u75A5\u7686\u76D6\u7B87\u82A5\u84CB\uF900\u93A7\u958B\u5580\u5BA2\u5751\uF901\u7CB3\u7FB9\u91B5\u5028\u53BB\u5C45\u5DE8\u62D2\u636E\u64DA\u64E7\u6E20\u70AC\u795B\u8DDD\u8E1E\uF902\u907D\u9245\u92F8\u4E7E\u4EF6\u5065\u5DFE\u5EFA\u6106\u6957\u8171\u8654\u8E47\u9375\u9A2B\u4E5E\u5091\u6770\u6840\u5109\u528D\u5292\u6AA2"],
    ["cca1", "\u77BC\u9210\u9ED4\u52AB\u602F\u8FF2\u5048\u61A9\u63ED\u64CA\u683C\u6A84\u6FC0\u8188\u89A1\u9694\u5805\u727D\u72AC\u7504\u7D79\u7E6D\u80A9\u898B\u8B74\u9063\u9D51\u6289\u6C7A\u6F54\u7D50\u7F3A\u8A23\u517C\u614A\u7B9D\u8B19\u9257\u938C\u4EAC\u4FD3\u501E\u50BE\u5106\u52C1\u52CD\u537F\u5770\u5883\u5E9A\u5F91\u6176\u61AC\u64CE\u656C\u666F\u66BB\u66F4\u6897\u6D87\u7085\u70F1\u749F\u74A5\u74CA\u75D9\u786C\u78EC\u7ADF\u7AF6\u7D45\u7D93\u8015\u803F\u811B\u8396\u8B66\u8F15\u9015\u93E1\u9803\u9838\u9A5A\u9BE8\u4FC2\u5553\u583A\u5951\u5B63\u5C46\u60B8\u6212\u6842\u68B0"],
    ["cda1", "\u68E8\u6EAA\u754C\u7678\u78CE\u7A3D\u7CFB\u7E6B\u7E7C\u8A08\u8AA1\u8C3F\u968E\u9DC4\u53E4\u53E9\u544A\u5471\u56FA\u59D1\u5B64\u5C3B\u5EAB\u62F7\u6537\u6545\u6572\u66A0\u67AF\u69C1\u6CBD\u75FC\u7690\u777E\u7A3F\u7F94\u8003\u80A1\u818F\u82E6\u82FD\u83F0\u85C1\u8831\u88B4\u8AA5\uF903\u8F9C\u932E\u96C7\u9867\u9AD8\u9F13\u54ED\u659B\u66F2\u688F\u7A40\u8C37\u9D60\u56F0\u5764\u5D11\u6606\u68B1\u68CD\u6EFE\u7428\u889E\u9BE4\u6C68\uF904\u9AA8\u4F9B\u516C\u5171\u529F\u5B54\u5DE5\u6050\u606D\u62F1\u63A7\u653B\u73D9\u7A7A\u86A3\u8CA2\u978F\u4E32\u5BE1\u6208\u679C\u74DC"],
    ["cea1", "\u79D1\u83D3\u8A87\u8AB2\u8DE8\u904E\u934B\u9846\u5ED3\u69E8\u85FF\u90ED\uF905\u51A0\u5B98\u5BEC\u6163\u68FA\u6B3E\u704C\u742F\u74D8\u7BA1\u7F50\u83C5\u89C0\u8CAB\u95DC\u9928\u522E\u605D\u62EC\u9002\u4F8A\u5149\u5321\u58D9\u5EE3\u66E0\u6D38\u709A\u72C2\u73D6\u7B50\u80F1\u945B\u5366\u639B\u7F6B\u4E56\u5080\u584A\u58DE\u602A\u6127\u62D0\u69D0\u9B41\u5B8F\u7D18\u80B1\u8F5F\u4EA4\u50D1\u54AC\u55AC\u5B0C\u5DA0\u5DE7\u652A\u654E\u6821\u6A4B\u72E1\u768E\u77EF\u7D5E\u7FF9\u81A0\u854E\u86DF\u8F03\u8F4E\u90CA\u9903\u9A55\u9BAB\u4E18\u4E45\u4E5D\u4EC7\u4FF1\u5177\u52FE"],
    ["cfa1", "\u5340\u53E3\u53E5\u548E\u5614\u5775\u57A2\u5BC7\u5D87\u5ED0\u61FC\u62D8\u6551\u67B8\u67E9\u69CB\u6B50\u6BC6\u6BEC\u6C42\u6E9D\u7078\u72D7\u7396\u7403\u77BF\u77E9\u7A76\u7D7F\u8009\u81FC\u8205\u820A\u82DF\u8862\u8B33\u8CFC\u8EC0\u9011\u90B1\u9264\u92B6\u99D2\u9A45\u9CE9\u9DD7\u9F9C\u570B\u5C40\u83CA\u97A0\u97AB\u9EB4\u541B\u7A98\u7FA4\u88D9\u8ECD\u90E1\u5800\u5C48\u6398\u7A9F\u5BAE\u5F13\u7A79\u7AAE\u828E\u8EAC\u5026\u5238\u52F8\u5377\u5708\u62F3\u6372\u6B0A\u6DC3\u7737\u53A5\u7357\u8568\u8E76\u95D5\u673A\u6AC3\u6F70\u8A6D\u8ECC\u994B\uF906\u6677\u6B78\u8CB4"],
    ["d0a1", "\u9B3C\uF907\u53EB\u572D\u594E\u63C6\u69FB\u73EA\u7845\u7ABA\u7AC5\u7CFE\u8475\u898F\u8D73\u9035\u95A8\u52FB\u5747\u7547\u7B60\u83CC\u921E\uF908\u6A58\u514B\u524B\u5287\u621F\u68D8\u6975\u9699\u50C5\u52A4\u52E4\u61C3\u65A4\u6839\u69FF\u747E\u7B4B\u82B9\u83EB\u89B2\u8B39\u8FD1\u9949\uF909\u4ECA\u5997\u64D2\u6611\u6A8E\u7434\u7981\u79BD\u82A9\u887E\u887F\u895F\uF90A\u9326\u4F0B\u53CA\u6025\u6271\u6C72\u7D1A\u7D66\u4E98\u5162\u77DC\u80AF\u4F01\u4F0E\u5176\u5180\u55DC\u5668\u573B\u57FA\u57FC\u5914\u5947\u5993\u5BC4\u5C90\u5D0E\u5DF1\u5E7E\u5FCC\u6280\u65D7\u65E3"],
    ["d1a1", "\u671E\u671F\u675E\u68CB\u68C4\u6A5F\u6B3A\u6C23\u6C7D\u6C82\u6DC7\u7398\u7426\u742A\u7482\u74A3\u7578\u757F\u7881\u78EF\u7941\u7947\u7948\u797A\u7B95\u7D00\u7DBA\u7F88\u8006\u802D\u808C\u8A18\u8B4F\u8C48\u8D77\u9321\u9324\u98E2\u9951\u9A0E\u9A0F\u9A65\u9E92\u7DCA\u4F76\u5409\u62EE\u6854\u91D1\u55AB\u513A\uF90B\uF90C\u5A1C\u61E6\uF90D\u62CF\u62FF\uF90E", 5, "\u90A3\uF914", 4, "\u8AFE\uF919\uF91A\uF91B\uF91C\u6696\uF91D\u7156\uF91E\uF91F\u96E3\uF920\u634F\u637A\u5357\uF921\u678F\u6960\u6E73\uF922\u7537\uF923\uF924\uF925"],
    ["d2a1", "\u7D0D\uF926\uF927\u8872\u56CA\u5A18\uF928", 4, "\u4E43\uF92D\u5167\u5948\u67F0\u8010\uF92E\u5973\u5E74\u649A\u79CA\u5FF5\u606C\u62C8\u637B\u5BE7\u5BD7\u52AA\uF92F\u5974\u5F29\u6012\uF930\uF931\uF932\u7459\uF933", 5, "\u99D1\uF939", 10, "\u6FC3\uF944\uF945\u81BF\u8FB2\u60F1\uF946\uF947\u8166\uF948\uF949\u5C3F\uF94A", 7, "\u5AE9\u8A25\u677B\u7D10\uF952", 5, "\u80FD\uF958\uF959\u5C3C\u6CE5\u533F\u6EBA\u591A\u8336"],
    ["d3a1", "\u4E39\u4EB6\u4F46\u55AE\u5718\u58C7\u5F56\u65B7\u65E6\u6A80\u6BB5\u6E4D\u77ED\u7AEF\u7C1E\u7DDE\u86CB\u8892\u9132\u935B\u64BB\u6FBE\u737A\u75B8\u9054\u5556\u574D\u61BA\u64D4\u66C7\u6DE1\u6E5B\u6F6D\u6FB9\u75F0\u8043\u81BD\u8541\u8983\u8AC7\u8B5A\u931F\u6C93\u7553\u7B54\u8E0F\u905D\u5510\u5802\u5858\u5E62\u6207\u649E\u68E0\u7576\u7CD6\u87B3\u9EE8\u4EE3\u5788\u576E\u5927\u5C0D\u5CB1\u5E36\u5F85\u6234\u64E1\u73B3\u81FA\u888B\u8CB8\u968A\u9EDB\u5B85\u5FB7\u60B3\u5012\u5200\u5230\u5716\u5835\u5857\u5C0E\u5C60\u5CF6\u5D8B\u5EA6\u5F92\u60BC\u6311\u6389\u6417\u6843"],
    ["d4a1", "\u68F9\u6AC2\u6DD8\u6E21\u6ED4\u6FE4\u71FE\u76DC\u7779\u79B1\u7A3B\u8404\u89A9\u8CED\u8DF3\u8E48\u9003\u9014\u9053\u90FD\u934D\u9676\u97DC\u6BD2\u7006\u7258\u72A2\u7368\u7763\u79BF\u7BE4\u7E9B\u8B80\u58A9\u60C7\u6566\u65FD\u66BE\u6C8C\u711E\u71C9\u8C5A\u9813\u4E6D\u7A81\u4EDD\u51AC\u51CD\u52D5\u540C\u61A7\u6771\u6850\u68DF\u6D1E\u6F7C\u75BC\u77B3\u7AE5\u80F4\u8463\u9285\u515C\u6597\u675C\u6793\u75D8\u7AC7\u8373\uF95A\u8C46\u9017\u982D\u5C6F\u81C0\u829A\u9041\u906F\u920D\u5F97\u5D9D\u6A59\u71C8\u767B\u7B49\u85E4\u8B04\u9127\u9A30\u5587\u61F6\uF95B\u7669\u7F85"],
    ["d5a1", "\u863F\u87BA\u88F8\u908F\uF95C\u6D1B\u70D9\u73DE\u7D61\u843D\uF95D\u916A\u99F1\uF95E\u4E82\u5375\u6B04\u6B12\u703E\u721B\u862D\u9E1E\u524C\u8FA3\u5D50\u64E5\u652C\u6B16\u6FEB\u7C43\u7E9C\u85CD\u8964\u89BD\u62C9\u81D8\u881F\u5ECA\u6717\u6D6A\u72FC\u7405\u746F\u8782\u90DE\u4F86\u5D0D\u5FA0\u840A\u51B7\u63A0\u7565\u4EAE\u5006\u5169\u51C9\u6881\u6A11\u7CAE\u7CB1\u7CE7\u826F\u8AD2\u8F1B\u91CF\u4FB6\u5137\u52F5\u5442\u5EEC\u616E\u623E\u65C5\u6ADA\u6FFE\u792A\u85DC\u8823\u95AD\u9A62\u9A6A\u9E97\u9ECE\u529B\u66C6\u6B77\u701D\u792B\u8F62\u9742\u6190\u6200\u6523\u6F23"],
    ["d6a1", "\u7149\u7489\u7DF4\u806F\u84EE\u8F26\u9023\u934A\u51BD\u5217\u52A3\u6D0C\u70C8\u88C2\u5EC9\u6582\u6BAE\u6FC2\u7C3E\u7375\u4EE4\u4F36\u56F9\uF95F\u5CBA\u5DBA\u601C\u73B2\u7B2D\u7F9A\u7FCE\u8046\u901E\u9234\u96F6\u9748\u9818\u9F61\u4F8B\u6FA7\u79AE\u91B4\u96B7\u52DE\uF960\u6488\u64C4\u6AD3\u6F5E\u7018\u7210\u76E7\u8001\u8606\u865C\u8DEF\u8F05\u9732\u9B6F\u9DFA\u9E75\u788C\u797F\u7DA0\u83C9\u9304\u9E7F\u9E93\u8AD6\u58DF\u5F04\u6727\u7027\u74CF\u7C60\u807E\u5121\u7028\u7262\u78CA\u8CC2\u8CDA\u8CF4\u96F7\u4E86\u50DA\u5BEE\u5ED6\u6599\u71CE\u7642\u77AD\u804A\u84FC"],
    ["d7a1", "\u907C\u9B27\u9F8D\u58D8\u5A41\u5C62\u6A13\u6DDA\u6F0F\u763B\u7D2F\u7E37\u851E\u8938\u93E4\u964B\u5289\u65D2\u67F3\u69B4\u6D41\u6E9C\u700F\u7409\u7460\u7559\u7624\u786B\u8B2C\u985E\u516D\u622E\u9678\u4F96\u502B\u5D19\u6DEA\u7DB8\u8F2A\u5F8B\u6144\u6817\uF961\u9686\u52D2\u808B\u51DC\u51CC\u695E\u7A1C\u7DBE\u83F1\u9675\u4FDA\u5229\u5398\u540F\u550E\u5C65\u60A7\u674E\u68A8\u6D6C\u7281\u72F8\u7406\u7483\uF962\u75E2\u7C6C\u7F79\u7FB8\u8389\u88CF\u88E1\u91CC\u91D0\u96E2\u9BC9\u541D\u6F7E\u71D0\u7498\u85FA\u8EAA\u96A3\u9C57\u9E9F\u6797\u6DCB\u7433\u81E8\u9716\u782C"],
    ["d8a1", "\u7ACB\u7B20\u7C92\u6469\u746A\u75F2\u78BC\u78E8\u99AC\u9B54\u9EBB\u5BDE\u5E55\u6F20\u819C\u83AB\u9088\u4E07\u534D\u5A29\u5DD2\u5F4E\u6162\u633D\u6669\u66FC\u6EFF\u6F2B\u7063\u779E\u842C\u8513\u883B\u8F13\u9945\u9C3B\u551C\u62B9\u672B\u6CAB\u8309\u896A\u977A\u4EA1\u5984\u5FD8\u5FD9\u671B\u7DB2\u7F54\u8292\u832B\u83BD\u8F1E\u9099\u57CB\u59B9\u5A92\u5BD0\u6627\u679A\u6885\u6BCF\u7164\u7F75\u8CB7\u8CE3\u9081\u9B45\u8108\u8C8A\u964C\u9A40\u9EA5\u5B5F\u6C13\u731B\u76F2\u76DF\u840C\u51AA\u8993\u514D\u5195\u52C9\u68C9\u6C94\u7704\u7720\u7DBF\u7DEC\u9762\u9EB5\u6EC5"],
    ["d9a1", "\u8511\u51A5\u540D\u547D\u660E\u669D\u6927\u6E9F\u76BF\u7791\u8317\u84C2\u879F\u9169\u9298\u9CF4\u8882\u4FAE\u5192\u52DF\u59C6\u5E3D\u6155\u6478\u6479\u66AE\u67D0\u6A21\u6BCD\u6BDB\u725F\u7261\u7441\u7738\u77DB\u8017\u82BC\u8305\u8B00\u8B28\u8C8C\u6728\u6C90\u7267\u76EE\u7766\u7A46\u9DA9\u6B7F\u6C92\u5922\u6726\u8499\u536F\u5893\u5999\u5EDF\u63CF\u6634\u6773\u6E3A\u732B\u7AD7\u82D7\u9328\u52D9\u5DEB\u61AE\u61CB\u620A\u62C7\u64AB\u65E0\u6959\u6B66\u6BCB\u7121\u73F7\u755D\u7E46\u821E\u8302\u856A\u8AA3\u8CBF\u9727\u9D61\u58A8\u9ED8\u5011\u520E\u543B\u554F\u6587"],
    ["daa1", "\u6C76\u7D0A\u7D0B\u805E\u868A\u9580\u96EF\u52FF\u6C95\u7269\u5473\u5A9A\u5C3E\u5D4B\u5F4C\u5FAE\u672A\u68B6\u6963\u6E3C\u6E44\u7709\u7C73\u7F8E\u8587\u8B0E\u8FF7\u9761\u9EF4\u5CB7\u60B6\u610D\u61AB\u654F\u65FB\u65FC\u6C11\u6CEF\u739F\u73C9\u7DE1\u9594\u5BC6\u871C\u8B10\u525D\u535A\u62CD\u640F\u64B2\u6734\u6A38\u6CCA\u73C0\u749E\u7B94\u7C95\u7E1B\u818A\u8236\u8584\u8FEB\u96F9\u99C1\u4F34\u534A\u53CD\u53DB\u62CC\u642C\u6500\u6591\u69C3\u6CEE\u6F58\u73ED\u7554\u7622\u76E4\u76FC\u78D0\u78FB\u792C\u7D46\u822C\u87E0\u8FD4\u9812\u98EF\u52C3\u62D4\u64A5\u6E24\u6F51"],
    ["dba1", "\u767C\u8DCB\u91B1\u9262\u9AEE\u9B43\u5023\u508D\u574A\u59A8\u5C28\u5E47\u5F77\u623F\u653E\u65B9\u65C1\u6609\u678B\u699C\u6EC2\u78C5\u7D21\u80AA\u8180\u822B\u82B3\u84A1\u868C\u8A2A\u8B17\u90A6\u9632\u9F90\u500D\u4FF3\uF963\u57F9\u5F98\u62DC\u6392\u676F\u6E43\u7119\u76C3\u80CC\u80DA\u88F4\u88F5\u8919\u8CE0\u8F29\u914D\u966A\u4F2F\u4F70\u5E1B\u67CF\u6822\u767D\u767E\u9B44\u5E61\u6A0A\u7169\u71D4\u756A\uF964\u7E41\u8543\u85E9\u98DC\u4F10\u7B4F\u7F70\u95A5\u51E1\u5E06\u68B5\u6C3E\u6C4E\u6CDB\u72AF\u7BC4\u8303\u6CD5\u743A\u50FB\u5288\u58C1\u64D8\u6A97\u74A7\u7656"],
    ["dca1", "\u78A7\u8617\u95E2\u9739\uF965\u535E\u5F01\u8B8A\u8FA8\u8FAF\u908A\u5225\u77A5\u9C49\u9F08\u4E19\u5002\u5175\u5C5B\u5E77\u661E\u663A\u67C4\u68C5\u70B3\u7501\u75C5\u79C9\u7ADD\u8F27\u9920\u9A08\u4FDD\u5821\u5831\u5BF6\u666E\u6B65\u6D11\u6E7A\u6F7D\u73E4\u752B\u83E9\u88DC\u8913\u8B5C\u8F14\u4F0F\u50D5\u5310\u535C\u5B93\u5FA9\u670D\u798F\u8179\u832F\u8514\u8907\u8986\u8F39\u8F3B\u99A5\u9C12\u672C\u4E76\u4FF8\u5949\u5C01\u5CEF\u5CF0\u6367\u68D2\u70FD\u71A2\u742B\u7E2B\u84EC\u8702\u9022\u92D2\u9CF3\u4E0D\u4ED8\u4FEF\u5085\u5256\u526F\u5426\u5490\u57E0\u592B\u5A66"],
    ["dda1", "\u5B5A\u5B75\u5BCC\u5E9C\uF966\u6276\u6577\u65A7\u6D6E\u6EA5\u7236\u7B26\u7C3F\u7F36\u8150\u8151\u819A\u8240\u8299\u83A9\u8A03\u8CA0\u8CE6\u8CFB\u8D74\u8DBA\u90E8\u91DC\u961C\u9644\u99D9\u9CE7\u5317\u5206\u5429\u5674\u58B3\u5954\u596E\u5FFF\u61A4\u626E\u6610\u6C7E\u711A\u76C6\u7C89\u7CDE\u7D1B\u82AC\u8CC1\u96F0\uF967\u4F5B\u5F17\u5F7F\u62C2\u5D29\u670B\u68DA\u787C\u7E43\u9D6C\u4E15\u5099\u5315\u532A\u5351\u5983\u5A62\u5E87\u60B2\u618A\u6249\u6279\u6590\u6787\u69A7\u6BD4\u6BD6\u6BD7\u6BD8\u6CB8\uF968\u7435\u75FA\u7812\u7891\u79D5\u79D8\u7C83\u7DCB\u7FE1\u80A5"],
    ["dea1", "\u813E\u81C2\u83F2\u871A\u88E8\u8AB9\u8B6C\u8CBB\u9119\u975E\u98DB\u9F3B\u56AC\u5B2A\u5F6C\u658C\u6AB3\u6BAF\u6D5C\u6FF1\u7015\u725D\u73AD\u8CA7\u8CD3\u983B\u6191\u6C37\u8058\u9A01\u4E4D\u4E8B\u4E9B\u4ED5\u4F3A\u4F3C\u4F7F\u4FDF\u50FF\u53F2\u53F8\u5506\u55E3\u56DB\u58EB\u5962\u5A11\u5BEB\u5BFA\u5C04\u5DF3\u5E2B\u5F99\u601D\u6368\u659C\u65AF\u67F6\u67FB\u68AD\u6B7B\u6C99\u6CD7\u6E23\u7009\u7345\u7802\u793E\u7940\u7960\u79C1\u7BE9\u7D17\u7D72\u8086\u820D\u838E\u84D1\u86C7\u88DF\u8A50\u8A5E\u8B1D\u8CDC\u8D66\u8FAD\u90AA\u98FC\u99DF\u9E9D\u524A\uF969\u6714\uF96A"],
    ["dfa1", "\u5098\u522A\u5C71\u6563\u6C55\u73CA\u7523\u759D\u7B97\u849C\u9178\u9730\u4E77\u6492\u6BBA\u715E\u85A9\u4E09\uF96B\u6749\u68EE\u6E17\u829F\u8518\u886B\u63F7\u6F81\u9212\u98AF\u4E0A\u50B7\u50CF\u511F\u5546\u55AA\u5617\u5B40\u5C19\u5CE0\u5E38\u5E8A\u5EA0\u5EC2\u60F3\u6851\u6A61\u6E58\u723D\u7240\u72C0\u76F8\u7965\u7BB1\u7FD4\u88F3\u89F4\u8A73\u8C61\u8CDE\u971C\u585E\u74BD\u8CFD\u55C7\uF96C\u7A61\u7D22\u8272\u7272\u751F\u7525\uF96D\u7B19\u5885\u58FB\u5DBC\u5E8F\u5EB6\u5F90\u6055\u6292\u637F\u654D\u6691\u66D9\u66F8\u6816\u68F2\u7280\u745E\u7B6E\u7D6E\u7DD6\u7F72"],
    ["e0a1", "\u80E5\u8212\u85AF\u897F\u8A93\u901D\u92E4\u9ECD\u9F20\u5915\u596D\u5E2D\u60DC\u6614\u6673\u6790\u6C50\u6DC5\u6F5F\u77F3\u78A9\u84C6\u91CB\u932B\u4ED9\u50CA\u5148\u5584\u5B0B\u5BA3\u6247\u657E\u65CB\u6E32\u717D\u7401\u7444\u7487\u74BF\u766C\u79AA\u7DDA\u7E55\u7FA8\u817A\u81B3\u8239\u861A\u87EC\u8A75\u8DE3\u9078\u9291\u9425\u994D\u9BAE\u5368\u5C51\u6954\u6CC4\u6D29\u6E2B\u820C\u859B\u893B\u8A2D\u8AAA\u96EA\u9F67\u5261\u66B9\u6BB2\u7E96\u87FE\u8D0D\u9583\u965D\u651D\u6D89\u71EE\uF96E\u57CE\u59D3\u5BAC\u6027\u60FA\u6210\u661F\u665F\u7329\u73F9\u76DB\u7701\u7B6C"],
    ["e1a1", "\u8056\u8072\u8165\u8AA0\u9192\u4E16\u52E2\u6B72\u6D17\u7A05\u7B39\u7D30\uF96F\u8CB0\u53EC\u562F\u5851\u5BB5\u5C0F\u5C11\u5DE2\u6240\u6383\u6414\u662D\u68B3\u6CBC\u6D88\u6EAF\u701F\u70A4\u71D2\u7526\u758F\u758E\u7619\u7B11\u7BE0\u7C2B\u7D20\u7D39\u852C\u856D\u8607\u8A34\u900D\u9061\u90B5\u92B7\u97F6\u9A37\u4FD7\u5C6C\u675F\u6D91\u7C9F\u7E8C\u8B16\u8D16\u901F\u5B6B\u5DFD\u640D\u84C0\u905C\u98E1\u7387\u5B8B\u609A\u677E\u6DDE\u8A1F\u8AA6\u9001\u980C\u5237\uF970\u7051\u788E\u9396\u8870\u91D7\u4FEE\u53D7\u55FD\u56DA\u5782\u58FD\u5AC2\u5B88\u5CAB\u5CC0\u5E25\u6101"],
    ["e2a1", "\u620D\u624B\u6388\u641C\u6536\u6578\u6A39\u6B8A\u6C34\u6D19\u6F31\u71E7\u72E9\u7378\u7407\u74B2\u7626\u7761\u79C0\u7A57\u7AEA\u7CB9\u7D8F\u7DAC\u7E61\u7F9E\u8129\u8331\u8490\u84DA\u85EA\u8896\u8AB0\u8B90\u8F38\u9042\u9083\u916C\u9296\u92B9\u968B\u96A7\u96A8\u96D6\u9700\u9808\u9996\u9AD3\u9B1A\u53D4\u587E\u5919\u5B70\u5BBF\u6DD1\u6F5A\u719F\u7421\u74B9\u8085\u83FD\u5DE1\u5F87\u5FAA\u6042\u65EC\u6812\u696F\u6A53\u6B89\u6D35\u6DF3\u73E3\u76FE\u77AC\u7B4D\u7D14\u8123\u821C\u8340\u84F4\u8563\u8A62\u8AC4\u9187\u931E\u9806\u99B4\u620C\u8853\u8FF0\u9265\u5D07\u5D27"],
    ["e3a1", "\u5D69\u745F\u819D\u8768\u6FD5\u62FE\u7FD2\u8936\u8972\u4E1E\u4E58\u50E7\u52DD\u5347\u627F\u6607\u7E69\u8805\u965E\u4F8D\u5319\u5636\u59CB\u5AA4\u5C38\u5C4E\u5C4D\u5E02\u5F11\u6043\u65BD\u662F\u6642\u67BE\u67F4\u731C\u77E2\u793A\u7FC5\u8494\u84CD\u8996\u8A66\u8A69\u8AE1\u8C55\u8C7A\u57F4\u5BD4\u5F0F\u606F\u62ED\u690D\u6B96\u6E5C\u7184\u7BD2\u8755\u8B58\u8EFE\u98DF\u98FE\u4F38\u4F81\u4FE1\u547B\u5A20\u5BB8\u613C\u65B0\u6668\u71FC\u7533\u795E\u7D33\u814E\u81E3\u8398\u85AA\u85CE\u8703\u8A0A\u8EAB\u8F9B\uF971\u8FC5\u5931\u5BA4\u5BE6\u6089\u5BE9\u5C0B\u5FC3\u6C81"],
    ["e4a1", "\uF972\u6DF1\u700B\u751A\u82AF\u8AF6\u4EC0\u5341\uF973\u96D9\u6C0F\u4E9E\u4FC4\u5152\u555E\u5A25\u5CE8\u6211\u7259\u82BD\u83AA\u86FE\u8859\u8A1D\u963F\u96C5\u9913\u9D09\u9D5D\u580A\u5CB3\u5DBD\u5E44\u60E1\u6115\u63E1\u6A02\u6E25\u9102\u9354\u984E\u9C10\u9F77\u5B89\u5CB8\u6309\u664F\u6848\u773C\u96C1\u978D\u9854\u9B9F\u65A1\u8B01\u8ECB\u95BC\u5535\u5CA9\u5DD6\u5EB5\u6697\u764C\u83F4\u95C7\u58D3\u62BC\u72CE\u9D28\u4EF0\u592E\u600F\u663B\u6B83\u79E7\u9D26\u5393\u54C0\u57C3\u5D16\u611B\u66D6\u6DAF\u788D\u827E\u9698\u9744\u5384\u627C\u6396\u6DB2\u7E0A\u814B\u984D"],
    ["e5a1", "\u6AFB\u7F4C\u9DAF\u9E1A\u4E5F\u503B\u51B6\u591C\u60F9\u63F6\u6930\u723A\u8036\uF974\u91CE\u5F31\uF975\uF976\u7D04\u82E5\u846F\u84BB\u85E5\u8E8D\uF977\u4F6F\uF978\uF979\u58E4\u5B43\u6059\u63DA\u6518\u656D\u6698\uF97A\u694A\u6A23\u6D0B\u7001\u716C\u75D2\u760D\u79B3\u7A70\uF97B\u7F8A\uF97C\u8944\uF97D\u8B93\u91C0\u967D\uF97E\u990A\u5704\u5FA1\u65BC\u6F01\u7600\u79A6\u8A9E\u99AD\u9B5A\u9F6C\u5104\u61B6\u6291\u6A8D\u81C6\u5043\u5830\u5F66\u7109\u8A00\u8AFA\u5B7C\u8616\u4FFA\u513C\u56B4\u5944\u63A9\u6DF9\u5DAA\u696D\u5186\u4E88\u4F59\uF97F\uF980\uF981\u5982\uF982"],
    ["e6a1", "\uF983\u6B5F\u6C5D\uF984\u74B5\u7916\uF985\u8207\u8245\u8339\u8F3F\u8F5D\uF986\u9918\uF987\uF988\uF989\u4EA6\uF98A\u57DF\u5F79\u6613\uF98B\uF98C\u75AB\u7E79\u8B6F\uF98D\u9006\u9A5B\u56A5\u5827\u59F8\u5A1F\u5BB4\uF98E\u5EF6\uF98F\uF990\u6350\u633B\uF991\u693D\u6C87\u6CBF\u6D8E\u6D93\u6DF5\u6F14\uF992\u70DF\u7136\u7159\uF993\u71C3\u71D5\uF994\u784F\u786F\uF995\u7B75\u7DE3\uF996\u7E2F\uF997\u884D\u8EDF\uF998\uF999\uF99A\u925B\uF99B\u9CF6\uF99C\uF99D\uF99E\u6085\u6D85\uF99F\u71B1\uF9A0\uF9A1\u95B1\u53AD\uF9A2\uF9A3\uF9A4\u67D3\uF9A5\u708E\u7130\u7430\u8276\u82D2"],
    ["e7a1", "\uF9A6\u95BB\u9AE5\u9E7D\u66C4\uF9A7\u71C1\u8449\uF9A8\uF9A9\u584B\uF9AA\uF9AB\u5DB8\u5F71\uF9AC\u6620\u668E\u6979\u69AE\u6C38\u6CF3\u6E36\u6F41\u6FDA\u701B\u702F\u7150\u71DF\u7370\uF9AD\u745B\uF9AE\u74D4\u76C8\u7A4E\u7E93\uF9AF\uF9B0\u82F1\u8A60\u8FCE\uF9B1\u9348\uF9B2\u9719\uF9B3\uF9B4\u4E42\u502A\uF9B5\u5208\u53E1\u66F3\u6C6D\u6FCA\u730A\u777F\u7A62\u82AE\u85DD\u8602\uF9B6\u88D4\u8A63\u8B7D\u8C6B\uF9B7\u92B3\uF9B8\u9713\u9810\u4E94\u4F0D\u4FC9\u50B2\u5348\u543E\u5433\u55DA\u5862\u58BA\u5967\u5A1B\u5BE4\u609F\uF9B9\u61CA\u6556\u65FF\u6664\u68A7\u6C5A\u6FB3"],
    ["e8a1", "\u70CF\u71AC\u7352\u7B7D\u8708\u8AA4\u9C32\u9F07\u5C4B\u6C83\u7344\u7389\u923A\u6EAB\u7465\u761F\u7A69\u7E15\u860A\u5140\u58C5\u64C1\u74EE\u7515\u7670\u7FC1\u9095\u96CD\u9954\u6E26\u74E6\u7AA9\u7AAA\u81E5\u86D9\u8778\u8A1B\u5A49\u5B8C\u5B9B\u68A1\u6900\u6D63\u73A9\u7413\u742C\u7897\u7DE9\u7FEB\u8118\u8155\u839E\u8C4C\u962E\u9811\u66F0\u5F80\u65FA\u6789\u6C6A\u738B\u502D\u5A03\u6B6A\u77EE\u5916\u5D6C\u5DCD\u7325\u754F\uF9BA\uF9BB\u50E5\u51F9\u582F\u592D\u5996\u59DA\u5BE5\uF9BC\uF9BD\u5DA2\u62D7\u6416\u6493\u64FE\uF9BE\u66DC\uF9BF\u6A48\uF9C0\u71FF\u7464\uF9C1"],
    ["e9a1", "\u7A88\u7AAF\u7E47\u7E5E\u8000\u8170\uF9C2\u87EF\u8981\u8B20\u9059\uF9C3\u9080\u9952\u617E\u6B32\u6D74\u7E1F\u8925\u8FB1\u4FD1\u50AD\u5197\u52C7\u57C7\u5889\u5BB9\u5EB8\u6142\u6995\u6D8C\u6E67\u6EB6\u7194\u7462\u7528\u752C\u8073\u8338\u84C9\u8E0A\u9394\u93DE\uF9C4\u4E8E\u4F51\u5076\u512A\u53C8\u53CB\u53F3\u5B87\u5BD3\u5C24\u611A\u6182\u65F4\u725B\u7397\u7440\u76C2\u7950\u7991\u79B9\u7D06\u7FBD\u828B\u85D5\u865E\u8FC2\u9047\u90F5\u91EA\u9685\u96E8\u96E9\u52D6\u5F67\u65ED\u6631\u682F\u715C\u7A36\u90C1\u980A\u4E91\uF9C5\u6A52\u6B9E\u6F90\u7189\u8018\u82B8\u8553"],
    ["eaa1", "\u904B\u9695\u96F2\u97FB\u851A\u9B31\u4E90\u718A\u96C4\u5143\u539F\u54E1\u5713\u5712\u57A3\u5A9B\u5AC4\u5BC3\u6028\u613F\u63F4\u6C85\u6D39\u6E72\u6E90\u7230\u733F\u7457\u82D1\u8881\u8F45\u9060\uF9C6\u9662\u9858\u9D1B\u6708\u8D8A\u925E\u4F4D\u5049\u50DE\u5371\u570D\u59D4\u5A01\u5C09\u6170\u6690\u6E2D\u7232\u744B\u7DEF\u80C3\u840E\u8466\u853F\u875F\u885B\u8918\u8B02\u9055\u97CB\u9B4F\u4E73\u4F91\u5112\u516A\uF9C7\u552F\u55A9\u5B7A\u5BA5\u5E7C\u5E7D\u5EBE\u60A0\u60DF\u6108\u6109\u63C4\u6538\u6709\uF9C8\u67D4\u67DA\uF9C9\u6961\u6962\u6CB9\u6D27\uF9CA\u6E38\uF9CB"],
    ["eba1", "\u6FE1\u7336\u7337\uF9CC\u745C\u7531\uF9CD\u7652\uF9CE\uF9CF\u7DAD\u81FE\u8438\u88D5\u8A98\u8ADB\u8AED\u8E30\u8E42\u904A\u903E\u907A\u9149\u91C9\u936E\uF9D0\uF9D1\u5809\uF9D2\u6BD3\u8089\u80B2\uF9D3\uF9D4\u5141\u596B\u5C39\uF9D5\uF9D6\u6F64\u73A7\u80E4\u8D07\uF9D7\u9217\u958F\uF9D8\uF9D9\uF9DA\uF9DB\u807F\u620E\u701C\u7D68\u878D\uF9DC\u57A0\u6069\u6147\u6BB7\u8ABE\u9280\u96B1\u4E59\u541F\u6DEB\u852D\u9670\u97F3\u98EE\u63D6\u6CE3\u9091\u51DD\u61C9\u81BA\u9DF9\u4F9D\u501A\u5100\u5B9C\u610F\u61FF\u64EC\u6905\u6BC5\u7591\u77E3\u7FA9\u8264\u858F\u87FB\u8863\u8ABC"],
    ["eca1", "\u8B70\u91AB\u4E8C\u4EE5\u4F0A\uF9DD\uF9DE\u5937\u59E8\uF9DF\u5DF2\u5F1B\u5F5B\u6021\uF9E0\uF9E1\uF9E2\uF9E3\u723E\u73E5\uF9E4\u7570\u75CD\uF9E5\u79FB\uF9E6\u800C\u8033\u8084\u82E1\u8351\uF9E7\uF9E8\u8CBD\u8CB3\u9087\uF9E9\uF9EA\u98F4\u990C\uF9EB\uF9EC\u7037\u76CA\u7FCA\u7FCC\u7FFC\u8B1A\u4EBA\u4EC1\u5203\u5370\uF9ED\u54BD\u56E0\u59FB\u5BC5\u5F15\u5FCD\u6E6E\uF9EE\uF9EF\u7D6A\u8335\uF9F0\u8693\u8A8D\uF9F1\u976D\u9777\uF9F2\uF9F3\u4E00\u4F5A\u4F7E\u58F9\u65E5\u6EA2\u9038\u93B0\u99B9\u4EFB\u58EC\u598A\u59D9\u6041\uF9F4\uF9F5\u7A14\uF9F6\u834F\u8CC3\u5165\u5344"],
    ["eda1", "\uF9F7\uF9F8\uF9F9\u4ECD\u5269\u5B55\u82BF\u4ED4\u523A\u54A8\u59C9\u59FF\u5B50\u5B57\u5B5C\u6063\u6148\u6ECB\u7099\u716E\u7386\u74F7\u75B5\u78C1\u7D2B\u8005\u81EA\u8328\u8517\u85C9\u8AEE\u8CC7\u96CC\u4F5C\u52FA\u56BC\u65AB\u6628\u707C\u70B8\u7235\u7DBD\u828D\u914C\u96C0\u9D72\u5B71\u68E7\u6B98\u6F7A\u76DE\u5C91\u66AB\u6F5B\u7BB4\u7C2A\u8836\u96DC\u4E08\u4ED7\u5320\u5834\u58BB\u58EF\u596C\u5C07\u5E33\u5E84\u5F35\u638C\u66B2\u6756\u6A1F\u6AA3\u6B0C\u6F3F\u7246\uF9FA\u7350\u748B\u7AE0\u7CA7\u8178\u81DF\u81E7\u838A\u846C\u8523\u8594\u85CF\u88DD\u8D13\u91AC\u9577"],
    ["eea1", "\u969C\u518D\u54C9\u5728\u5BB0\u624D\u6750\u683D\u6893\u6E3D\u6ED3\u707D\u7E21\u88C1\u8CA1\u8F09\u9F4B\u9F4E\u722D\u7B8F\u8ACD\u931A\u4F47\u4F4E\u5132\u5480\u59D0\u5E95\u62B5\u6775\u696E\u6A17\u6CAE\u6E1A\u72D9\u732A\u75BD\u7BB8\u7D35\u82E7\u83F9\u8457\u85F7\u8A5B\u8CAF\u8E87\u9019\u90B8\u96CE\u9F5F\u52E3\u540A\u5AE1\u5BC2\u6458\u6575\u6EF4\u72C4\uF9FB\u7684\u7A4D\u7B1B\u7C4D\u7E3E\u7FDF\u837B\u8B2B\u8CCA\u8D64\u8DE1\u8E5F\u8FEA\u8FF9\u9069\u93D1\u4F43\u4F7A\u50B3\u5168\u5178\u524D\u526A\u5861\u587C\u5960\u5C08\u5C55\u5EDB\u609B\u6230\u6813\u6BBF\u6C08\u6FB1"],
    ["efa1", "\u714E\u7420\u7530\u7538\u7551\u7672\u7B4C\u7B8B\u7BAD\u7BC6\u7E8F\u8A6E\u8F3E\u8F49\u923F\u9293\u9322\u942B\u96FB\u985A\u986B\u991E\u5207\u622A\u6298\u6D59\u7664\u7ACA\u7BC0\u7D76\u5360\u5CBE\u5E97\u6F38\u70B9\u7C98\u9711\u9B8E\u9EDE\u63A5\u647A\u8776\u4E01\u4E95\u4EAD\u505C\u5075\u5448\u59C3\u5B9A\u5E40\u5EAD\u5EF7\u5F81\u60C5\u633A\u653F\u6574\u65CC\u6676\u6678\u67FE\u6968\u6A89\u6B63\u6C40\u6DC0\u6DE8\u6E1F\u6E5E\u701E\u70A1\u738E\u73FD\u753A\u775B\u7887\u798E\u7A0B\u7A7D\u7CBE\u7D8E\u8247\u8A02\u8AEA\u8C9E\u912D\u914A\u91D8\u9266\u92CC\u9320\u9706\u9756"],
    ["f0a1", "\u975C\u9802\u9F0E\u5236\u5291\u557C\u5824\u5E1D\u5F1F\u608C\u63D0\u68AF\u6FDF\u796D\u7B2C\u81CD\u85BA\u88FD\u8AF8\u8E44\u918D\u9664\u969B\u973D\u984C\u9F4A\u4FCE\u5146\u51CB\u52A9\u5632\u5F14\u5F6B\u63AA\u64CD\u65E9\u6641\u66FA\u66F9\u671D\u689D\u68D7\u69FD\u6F15\u6F6E\u7167\u71E5\u722A\u74AA\u773A\u7956\u795A\u79DF\u7A20\u7A95\u7C97\u7CDF\u7D44\u7E70\u8087\u85FB\u86A4\u8A54\u8ABF\u8D99\u8E81\u9020\u906D\u91E3\u963B\u96D5\u9CE5\u65CF\u7C07\u8DB3\u93C3\u5B58\u5C0A\u5352\u62D9\u731D\u5027\u5B97\u5F9E\u60B0\u616B\u68D5\u6DD9\u742E\u7A2E\u7D42\u7D9C\u7E31\u816B"],
    ["f1a1", "\u8E2A\u8E35\u937E\u9418\u4F50\u5750\u5DE6\u5EA7\u632B\u7F6A\u4E3B\u4F4F\u4F8F\u505A\u59DD\u80C4\u546A\u5468\u55FE\u594F\u5B99\u5DDE\u5EDA\u665D\u6731\u67F1\u682A\u6CE8\u6D32\u6E4A\u6F8D\u70B7\u73E0\u7587\u7C4C\u7D02\u7D2C\u7DA2\u821F\u86DB\u8A3B\u8A85\u8D70\u8E8A\u8F33\u9031\u914E\u9152\u9444\u99D0\u7AF9\u7CA5\u4FCA\u5101\u51C6\u57C8\u5BEF\u5CFB\u6659\u6A3D\u6D5A\u6E96\u6FEC\u710C\u756F\u7AE3\u8822\u9021\u9075\u96CB\u99FF\u8301\u4E2D\u4EF2\u8846\u91CD\u537D\u6ADB\u696B\u6C41\u847A\u589E\u618E\u66FE\u62EF\u70DD\u7511\u75C7\u7E52\u84B8\u8B49\u8D08\u4E4B\u53EA"],
    ["f2a1", "\u54AB\u5730\u5740\u5FD7\u6301\u6307\u646F\u652F\u65E8\u667A\u679D\u67B3\u6B62\u6C60\u6C9A\u6F2C\u77E5\u7825\u7949\u7957\u7D19\u80A2\u8102\u81F3\u829D\u82B7\u8718\u8A8C\uF9FC\u8D04\u8DBE\u9072\u76F4\u7A19\u7A37\u7E54\u8077\u5507\u55D4\u5875\u632F\u6422\u6649\u664B\u686D\u699B\u6B84\u6D25\u6EB1\u73CD\u7468\u74A1\u755B\u75B9\u76E1\u771E\u778B\u79E6\u7E09\u7E1D\u81FB\u852F\u8897\u8A3A\u8CD1\u8EEB\u8FB0\u9032\u93AD\u9663\u9673\u9707\u4F84\u53F1\u59EA\u5AC9\u5E19\u684E\u74C6\u75BE\u79E9\u7A92\u81A3\u86ED\u8CEA\u8DCC\u8FED\u659F\u6715\uF9FD\u57F7\u6F57\u7DDD\u8F2F"],
    ["f3a1", "\u93F6\u96C6\u5FB5\u61F2\u6F84\u4E14\u4F98\u501F\u53C9\u55DF\u5D6F\u5DEE\u6B21\u6B64\u78CB\u7B9A\uF9FE\u8E49\u8ECA\u906E\u6349\u643E\u7740\u7A84\u932F\u947F\u9F6A\u64B0\u6FAF\u71E6\u74A8\u74DA\u7AC4\u7C12\u7E82\u7CB2\u7E98\u8B9A\u8D0A\u947D\u9910\u994C\u5239\u5BDF\u64E6\u672D\u7D2E\u50ED\u53C3\u5879\u6158\u6159\u61FA\u65AC\u7AD9\u8B92\u8B96\u5009\u5021\u5275\u5531\u5A3C\u5EE0\u5F70\u6134\u655E\u660C\u6636\u66A2\u69CD\u6EC4\u6F32\u7316\u7621\u7A93\u8139\u8259\u83D6\u84BC\u50B5\u57F0\u5BC0\u5BE8\u5F69\u63A1\u7826\u7DB5\u83DC\u8521\u91C7\u91F5\u518A\u67F5\u7B56"],
    ["f4a1", "\u8CAC\u51C4\u59BB\u60BD\u8655\u501C\uF9FF\u5254\u5C3A\u617D\u621A\u62D3\u64F2\u65A5\u6ECC\u7620\u810A\u8E60\u965F\u96BB\u4EDF\u5343\u5598\u5929\u5DDD\u64C5\u6CC9\u6DFA\u7394\u7A7F\u821B\u85A6\u8CE4\u8E10\u9077\u91E7\u95E1\u9621\u97C6\u51F8\u54F2\u5586\u5FB9\u64A4\u6F88\u7DB4\u8F1F\u8F4D\u9435\u50C9\u5C16\u6CBE\u6DFB\u751B\u77BB\u7C3D\u7C64\u8A79\u8AC2\u581E\u59BE\u5E16\u6377\u7252\u758A\u776B\u8ADC\u8CBC\u8F12\u5EF3\u6674\u6DF8\u807D\u83C1\u8ACB\u9751\u9BD6\uFA00\u5243\u66FF\u6D95\u6EEF\u7DE0\u8AE6\u902E\u905E\u9AD4\u521D\u527F\u54E8\u6194\u6284\u62DB\u68A2"],
    ["f5a1", "\u6912\u695A\u6A35\u7092\u7126\u785D\u7901\u790E\u79D2\u7A0D\u8096\u8278\u82D5\u8349\u8549\u8C82\u8D85\u9162\u918B\u91AE\u4FC3\u56D1\u71ED\u77D7\u8700\u89F8\u5BF8\u5FD6\u6751\u90A8\u53E2\u585A\u5BF5\u60A4\u6181\u6460\u7E3D\u8070\u8525\u9283\u64AE\u50AC\u5D14\u6700\u589C\u62BD\u63A8\u690E\u6978\u6A1E\u6E6B\u76BA\u79CB\u82BB\u8429\u8ACF\u8DA8\u8FFD\u9112\u914B\u919C\u9310\u9318\u939A\u96DB\u9A36\u9C0D\u4E11\u755C\u795D\u7AFA\u7B51\u7BC9\u7E2E\u84C4\u8E59\u8E74\u8EF8\u9010\u6625\u693F\u7443\u51FA\u672E\u9EDC\u5145\u5FE0\u6C96\u87F2\u885D\u8877\u60B4\u81B5\u8403"],
    ["f6a1", "\u8D05\u53D6\u5439\u5634\u5A36\u5C31\u708A\u7FE0\u805A\u8106\u81ED\u8DA3\u9189\u9A5F\u9DF2\u5074\u4EC4\u53A0\u60FB\u6E2C\u5C64\u4F88\u5024\u55E4\u5CD9\u5E5F\u6065\u6894\u6CBB\u6DC4\u71BE\u75D4\u75F4\u7661\u7A1A\u7A49\u7DC7\u7DFB\u7F6E\u81F4\u86A9\u8F1C\u96C9\u99B3\u9F52\u5247\u52C5\u98ED\u89AA\u4E03\u67D2\u6F06\u4FB5\u5BE2\u6795\u6C88\u6D78\u741B\u7827\u91DD\u937C\u87C4\u79E4\u7A31\u5FEB\u4ED6\u54A4\u553E\u58AE\u59A5\u60F0\u6253\u62D6\u6736\u6955\u8235\u9640\u99B1\u99DD\u502C\u5353\u5544\u577C\uFA01\u6258\uFA02\u64E2\u666B\u67DD\u6FC1\u6FEF\u7422\u7438\u8A17"],
    ["f7a1", "\u9438\u5451\u5606\u5766\u5F48\u619A\u6B4E\u7058\u70AD\u7DBB\u8A95\u596A\u812B\u63A2\u7708\u803D\u8CAA\u5854\u642D\u69BB\u5B95\u5E11\u6E6F\uFA03\u8569\u514C\u53F0\u592A\u6020\u614B\u6B86\u6C70\u6CF0\u7B1E\u80CE\u82D4\u8DC6\u90B0\u98B1\uFA04\u64C7\u6FA4\u6491\u6504\u514E\u5410\u571F\u8A0E\u615F\u6876\uFA05\u75DB\u7B52\u7D71\u901A\u5806\u69CC\u817F\u892A\u9000\u9839\u5078\u5957\u59AC\u6295\u900F\u9B2A\u615D\u7279\u95D6\u5761\u5A46\u5DF4\u628A\u64AD\u64FA\u6777\u6CE2\u6D3E\u722C\u7436\u7834\u7F77\u82AD\u8DDB\u9817\u5224\u5742\u677F\u7248\u74E3\u8CA9\u8FA6\u9211"],
    ["f8a1", "\u962A\u516B\u53ED\u634C\u4F69\u5504\u6096\u6557\u6C9B\u6D7F\u724C\u72FD\u7A17\u8987\u8C9D\u5F6D\u6F8E\u70F9\u81A8\u610E\u4FBF\u504F\u6241\u7247\u7BC7\u7DE8\u7FE9\u904D\u97AD\u9A19\u8CB6\u576A\u5E73\u67B0\u840D\u8A55\u5420\u5B16\u5E63\u5EE2\u5F0A\u6583\u80BA\u853D\u9589\u965B\u4F48\u5305\u530D\u530F\u5486\u54FA\u5703\u5E03\u6016\u629B\u62B1\u6355\uFA06\u6CE1\u6D66\u75B1\u7832\u80DE\u812F\u82DE\u8461\u84B2\u888D\u8912\u900B\u92EA\u98FD\u9B91\u5E45\u66B4\u66DD\u7011\u7206\uFA07\u4FF5\u527D\u5F6A\u6153\u6753\u6A19\u6F02\u74E2\u7968\u8868\u8C79\u98C7\u98C4\u9A43"],
    ["f9a1", "\u54C1\u7A1F\u6953\u8AF7\u8C4A\u98A8\u99AE\u5F7C\u62AB\u75B2\u76AE\u88AB\u907F\u9642\u5339\u5F3C\u5FC5\u6CCC\u73CC\u7562\u758B\u7B46\u82FE\u999D\u4E4F\u903C\u4E0B\u4F55\u53A6\u590F\u5EC8\u6630\u6CB3\u7455\u8377\u8766\u8CC0\u9050\u971E\u9C15\u58D1\u5B78\u8650\u8B14\u9DB4\u5BD2\u6068\u608D\u65F1\u6C57\u6F22\u6FA3\u701A\u7F55\u7FF0\u9591\u9592\u9650\u97D3\u5272\u8F44\u51FD\u542B\u54B8\u5563\u558A\u6ABB\u6DB5\u7DD8\u8266\u929C\u9677\u9E79\u5408\u54C8\u76D2\u86E4\u95A4\u95D4\u965C\u4EA2\u4F09\u59EE\u5AE6\u5DF7\u6052\u6297\u676D\u6841\u6C86\u6E2F\u7F38\u809B\u822A"],
    ["faa1", "\uFA08\uFA09\u9805\u4EA5\u5055\u54B3\u5793\u595A\u5B69\u5BB3\u61C8\u6977\u6D77\u7023\u87F9\u89E3\u8A72\u8AE7\u9082\u99ED\u9AB8\u52BE\u6838\u5016\u5E78\u674F\u8347\u884C\u4EAB\u5411\u56AE\u73E6\u9115\u97FF\u9909\u9957\u9999\u5653\u589F\u865B\u8A31\u61B2\u6AF6\u737B\u8ED2\u6B47\u96AA\u9A57\u5955\u7200\u8D6B\u9769\u4FD4\u5CF4\u5F26\u61F8\u665B\u6CEB\u70AB\u7384\u73B9\u73FE\u7729\u774D\u7D43\u7D62\u7E23\u8237\u8852\uFA0A\u8CE2\u9249\u986F\u5B51\u7A74\u8840\u9801\u5ACC\u4FE0\u5354\u593E\u5CFD\u633E\u6D79\u72F9\u8105\u8107\u83A2\u92CF\u9830\u4EA8\u5144\u5211\u578B"],
    ["fba1", "\u5F62\u6CC2\u6ECE\u7005\u7050\u70AF\u7192\u73E9\u7469\u834A\u87A2\u8861\u9008\u90A2\u93A3\u99A8\u516E\u5F57\u60E0\u6167\u66B3\u8559\u8E4A\u91AF\u978B\u4E4E\u4E92\u547C\u58D5\u58FA\u597D\u5CB5\u5F27\u6236\u6248\u660A\u6667\u6BEB\u6D69\u6DCF\u6E56\u6EF8\u6F94\u6FE0\u6FE9\u705D\u72D0\u7425\u745A\u74E0\u7693\u795C\u7CCA\u7E1E\u80E1\u82A6\u846B\u84BF\u864E\u865F\u8774\u8B77\u8C6A\u93AC\u9800\u9865\u60D1\u6216\u9177\u5A5A\u660F\u6DF7\u6E3E\u743F\u9B42\u5FFD\u60DA\u7B0F\u54C4\u5F18\u6C5E\u6CD3\u6D2A\u70D8\u7D05\u8679\u8A0C\u9D3B\u5316\u548C\u5B05\u6A3A\u706B\u7575"],
    ["fca1", "\u798D\u79BE\u82B1\u83EF\u8A71\u8B41\u8CA8\u9774\uFA0B\u64F4\u652B\u78BA\u78BB\u7A6B\u4E38\u559A\u5950\u5BA6\u5E7B\u60A3\u63DB\u6B61\u6665\u6853\u6E19\u7165\u74B0\u7D08\u9084\u9A69\u9C25\u6D3B\u6ED1\u733E\u8C41\u95CA\u51F0\u5E4C\u5FA8\u604D\u60F6\u6130\u614C\u6643\u6644\u69A5\u6CC1\u6E5F\u6EC9\u6F62\u714C\u749C\u7687\u7BC1\u7C27\u8352\u8757\u9051\u968D\u9EC3\u532F\u56DE\u5EFB\u5F8A\u6062\u6094\u61F7\u6666\u6703\u6A9C\u6DEE\u6FAE\u7070\u736A\u7E6A\u81BE\u8334\u86D4\u8AA8\u8CC4\u5283\u7372\u5B96\u6A6B\u9404\u54EE\u5686\u5B5D\u6548\u6585\u66C9\u689F\u6D8D\u6DC6"],
    ["fda1", "\u723B\u80B4\u9175\u9A4D\u4FAF\u5019\u539A\u540E\u543C\u5589\u55C5\u5E3F\u5F8C\u673D\u7166\u73DD\u9005\u52DB\u52F3\u5864\u58CE\u7104\u718F\u71FB\u85B0\u8A13\u6688\u85A8\u55A7\u6684\u714A\u8431\u5349\u5599\u6BC1\u5F59\u5FBD\u63EE\u6689\u7147\u8AF1\u8F1D\u9EBE\u4F11\u643A\u70CB\u7566\u8667\u6064\u8B4E\u9DF8\u5147\u51F6\u5308\u6D36\u80F8\u9ED1\u6615\u6B23\u7098\u75D5\u5403\u5C79\u7D07\u8A16\u6B20\u6B3D\u6B46\u5438\u6070\u6D3D\u7FD5\u8208\u50D6\u51DE\u559C\u566B\u56CD\u59EC\u5B09\u5E0C\u6199\u6198\u6231\u665E\u66E6\u7199\u71B9\u71BA\u72A7\u79A7\u7A00\u7FB2\u8A70"]
  ];
});

// node_modules/iconv-lite/encodings/tables/cp950.json
var require_cp950 = __commonJS((exports, module) => {
  module.exports = [
    ["0", "\0", 127],
    ["a140", "\u3000\uFF0C\u3001\u3002\uFF0E\u2027\uFF1B\uFF1A\uFF1F\uFF01\uFE30\u2026\u2025\uFE50\uFE51\uFE52\xB7\uFE54\uFE55\uFE56\uFE57\uFF5C\u2013\uFE31\u2014\uFE33\u2574\uFE34\uFE4F\uFF08\uFF09\uFE35\uFE36\uFF5B\uFF5D\uFE37\uFE38\u3014\u3015\uFE39\uFE3A\u3010\u3011\uFE3B\uFE3C\u300A\u300B\uFE3D\uFE3E\u3008\u3009\uFE3F\uFE40\u300C\u300D\uFE41\uFE42\u300E\u300F\uFE43\uFE44\uFE59\uFE5A"],
    ["a1a1", "\uFE5B\uFE5C\uFE5D\uFE5E\u2018\u2019\u201C\u201D\u301D\u301E\u2035\u2032\uFF03\uFF06\uFF0A\u203B\xA7\u3003\u25CB\u25CF\u25B3\u25B2\u25CE\u2606\u2605\u25C7\u25C6\u25A1\u25A0\u25BD\u25BC\u32A3\u2105\xAF\uFFE3\uFF3F\u02CD\uFE49\uFE4A\uFE4D\uFE4E\uFE4B\uFE4C\uFE5F\uFE60\uFE61\uFF0B\uFF0D\xD7\xF7\xB1\u221A\uFF1C\uFF1E\uFF1D\u2266\u2267\u2260\u221E\u2252\u2261\uFE62", 4, "\uFF5E\u2229\u222A\u22A5\u2220\u221F\u22BF\u33D2\u33D1\u222B\u222E\u2235\u2234\u2640\u2642\u2295\u2299\u2191\u2193\u2190\u2192\u2196\u2197\u2199\u2198\u2225\u2223\uFF0F"],
    ["a240", "\uFF3C\u2215\uFE68\uFF04\uFFE5\u3012\uFFE0\uFFE1\uFF05\uFF20\u2103\u2109\uFE69\uFE6A\uFE6B\u33D5\u339C\u339D\u339E\u33CE\u33A1\u338E\u338F\u33C4\xB0\u5159\u515B\u515E\u515D\u5161\u5163\u55E7\u74E9\u7CCE\u2581", 7, "\u258F\u258E\u258D\u258C\u258B\u258A\u2589\u253C\u2534\u252C\u2524\u251C\u2594\u2500\u2502\u2595\u250C\u2510\u2514\u2518\u256D"],
    ["a2a1", "\u256E\u2570\u256F\u2550\u255E\u256A\u2561\u25E2\u25E3\u25E5\u25E4\u2571\u2572\u2573\uFF10", 9, "\u2160", 9, "\u3021", 8, "\u5341\u5344\u5345\uFF21", 25, "\uFF41", 21],
    ["a340", "\uFF57\uFF58\uFF59\uFF5A\u0391", 16, "\u03A3", 6, "\u03B1", 16, "\u03C3", 6, "\u3105", 10],
    ["a3a1", "\u3110", 25, "\u02D9\u02C9\u02CA\u02C7\u02CB"],
    ["a3e1", "\u20AC"],
    ["a440", "\u4E00\u4E59\u4E01\u4E03\u4E43\u4E5D\u4E86\u4E8C\u4EBA\u513F\u5165\u516B\u51E0\u5200\u5201\u529B\u5315\u5341\u535C\u53C8\u4E09\u4E0B\u4E08\u4E0A\u4E2B\u4E38\u51E1\u4E45\u4E48\u4E5F\u4E5E\u4E8E\u4EA1\u5140\u5203\u52FA\u5343\u53C9\u53E3\u571F\u58EB\u5915\u5927\u5973\u5B50\u5B51\u5B53\u5BF8\u5C0F\u5C22\u5C38\u5C71\u5DDD\u5DE5\u5DF1\u5DF2\u5DF3\u5DFE\u5E72\u5EFE\u5F0B\u5F13\u624D"],
    ["a4a1", "\u4E11\u4E10\u4E0D\u4E2D\u4E30\u4E39\u4E4B\u5C39\u4E88\u4E91\u4E95\u4E92\u4E94\u4EA2\u4EC1\u4EC0\u4EC3\u4EC6\u4EC7\u4ECD\u4ECA\u4ECB\u4EC4\u5143\u5141\u5167\u516D\u516E\u516C\u5197\u51F6\u5206\u5207\u5208\u52FB\u52FE\u52FF\u5316\u5339\u5348\u5347\u5345\u535E\u5384\u53CB\u53CA\u53CD\u58EC\u5929\u592B\u592A\u592D\u5B54\u5C11\u5C24\u5C3A\u5C6F\u5DF4\u5E7B\u5EFF\u5F14\u5F15\u5FC3\u6208\u6236\u624B\u624E\u652F\u6587\u6597\u65A4\u65B9\u65E5\u66F0\u6708\u6728\u6B20\u6B62\u6B79\u6BCB\u6BD4\u6BDB\u6C0F\u6C34\u706B\u722A\u7236\u723B\u7247\u7259\u725B\u72AC\u738B\u4E19"],
    ["a540", "\u4E16\u4E15\u4E14\u4E18\u4E3B\u4E4D\u4E4F\u4E4E\u4EE5\u4ED8\u4ED4\u4ED5\u4ED6\u4ED7\u4EE3\u4EE4\u4ED9\u4EDE\u5145\u5144\u5189\u518A\u51AC\u51F9\u51FA\u51F8\u520A\u52A0\u529F\u5305\u5306\u5317\u531D\u4EDF\u534A\u5349\u5361\u5360\u536F\u536E\u53BB\u53EF\u53E4\u53F3\u53EC\u53EE\u53E9\u53E8\u53FC\u53F8\u53F5\u53EB\u53E6\u53EA\u53F2\u53F1\u53F0\u53E5\u53ED\u53FB\u56DB\u56DA\u5916"],
    ["a5a1", "\u592E\u5931\u5974\u5976\u5B55\u5B83\u5C3C\u5DE8\u5DE7\u5DE6\u5E02\u5E03\u5E73\u5E7C\u5F01\u5F18\u5F17\u5FC5\u620A\u6253\u6254\u6252\u6251\u65A5\u65E6\u672E\u672C\u672A\u672B\u672D\u6B63\u6BCD\u6C11\u6C10\u6C38\u6C41\u6C40\u6C3E\u72AF\u7384\u7389\u74DC\u74E6\u7518\u751F\u7528\u7529\u7530\u7531\u7532\u7533\u758B\u767D\u76AE\u76BF\u76EE\u77DB\u77E2\u77F3\u793A\u79BE\u7A74\u7ACB\u4E1E\u4E1F\u4E52\u4E53\u4E69\u4E99\u4EA4\u4EA6\u4EA5\u4EFF\u4F09\u4F19\u4F0A\u4F15\u4F0D\u4F10\u4F11\u4F0F\u4EF2\u4EF6\u4EFB\u4EF0\u4EF3\u4EFD\u4F01\u4F0B\u5149\u5147\u5146\u5148\u5168"],
    ["a640", "\u5171\u518D\u51B0\u5217\u5211\u5212\u520E\u5216\u52A3\u5308\u5321\u5320\u5370\u5371\u5409\u540F\u540C\u540A\u5410\u5401\u540B\u5404\u5411\u540D\u5408\u5403\u540E\u5406\u5412\u56E0\u56DE\u56DD\u5733\u5730\u5728\u572D\u572C\u572F\u5729\u5919\u591A\u5937\u5938\u5984\u5978\u5983\u597D\u5979\u5982\u5981\u5B57\u5B58\u5B87\u5B88\u5B85\u5B89\u5BFA\u5C16\u5C79\u5DDE\u5E06\u5E76\u5E74"],
    ["a6a1", "\u5F0F\u5F1B\u5FD9\u5FD6\u620E\u620C\u620D\u6210\u6263\u625B\u6258\u6536\u65E9\u65E8\u65EC\u65ED\u66F2\u66F3\u6709\u673D\u6734\u6731\u6735\u6B21\u6B64\u6B7B\u6C16\u6C5D\u6C57\u6C59\u6C5F\u6C60\u6C50\u6C55\u6C61\u6C5B\u6C4D\u6C4E\u7070\u725F\u725D\u767E\u7AF9\u7C73\u7CF8\u7F36\u7F8A\u7FBD\u8001\u8003\u800C\u8012\u8033\u807F\u8089\u808B\u808C\u81E3\u81EA\u81F3\u81FC\u820C\u821B\u821F\u826E\u8272\u827E\u866B\u8840\u884C\u8863\u897F\u9621\u4E32\u4EA8\u4F4D\u4F4F\u4F47\u4F57\u4F5E\u4F34\u4F5B\u4F55\u4F30\u4F50\u4F51\u4F3D\u4F3A\u4F38\u4F43\u4F54\u4F3C\u4F46\u4F63"],
    ["a740", "\u4F5C\u4F60\u4F2F\u4F4E\u4F36\u4F59\u4F5D\u4F48\u4F5A\u514C\u514B\u514D\u5175\u51B6\u51B7\u5225\u5224\u5229\u522A\u5228\u52AB\u52A9\u52AA\u52AC\u5323\u5373\u5375\u541D\u542D\u541E\u543E\u5426\u544E\u5427\u5446\u5443\u5433\u5448\u5442\u541B\u5429\u544A\u5439\u543B\u5438\u542E\u5435\u5436\u5420\u543C\u5440\u5431\u542B\u541F\u542C\u56EA\u56F0\u56E4\u56EB\u574A\u5751\u5740\u574D"],
    ["a7a1", "\u5747\u574E\u573E\u5750\u574F\u573B\u58EF\u593E\u599D\u5992\u59A8\u599E\u59A3\u5999\u5996\u598D\u59A4\u5993\u598A\u59A5\u5B5D\u5B5C\u5B5A\u5B5B\u5B8C\u5B8B\u5B8F\u5C2C\u5C40\u5C41\u5C3F\u5C3E\u5C90\u5C91\u5C94\u5C8C\u5DEB\u5E0C\u5E8F\u5E87\u5E8A\u5EF7\u5F04\u5F1F\u5F64\u5F62\u5F77\u5F79\u5FD8\u5FCC\u5FD7\u5FCD\u5FF1\u5FEB\u5FF8\u5FEA\u6212\u6211\u6284\u6297\u6296\u6280\u6276\u6289\u626D\u628A\u627C\u627E\u6279\u6273\u6292\u626F\u6298\u626E\u6295\u6293\u6291\u6286\u6539\u653B\u6538\u65F1\u66F4\u675F\u674E\u674F\u6750\u6751\u675C\u6756\u675E\u6749\u6746\u6760"],
    ["a840", "\u6753\u6757\u6B65\u6BCF\u6C42\u6C5E\u6C99\u6C81\u6C88\u6C89\u6C85\u6C9B\u6C6A\u6C7A\u6C90\u6C70\u6C8C\u6C68\u6C96\u6C92\u6C7D\u6C83\u6C72\u6C7E\u6C74\u6C86\u6C76\u6C8D\u6C94\u6C98\u6C82\u7076\u707C\u707D\u7078\u7262\u7261\u7260\u72C4\u72C2\u7396\u752C\u752B\u7537\u7538\u7682\u76EF\u77E3\u79C1\u79C0\u79BF\u7A76\u7CFB\u7F55\u8096\u8093\u809D\u8098\u809B\u809A\u80B2\u826F\u8292"],
    ["a8a1", "\u828B\u828D\u898B\u89D2\u8A00\u8C37\u8C46\u8C55\u8C9D\u8D64\u8D70\u8DB3\u8EAB\u8ECA\u8F9B\u8FB0\u8FC2\u8FC6\u8FC5\u8FC4\u5DE1\u9091\u90A2\u90AA\u90A6\u90A3\u9149\u91C6\u91CC\u9632\u962E\u9631\u962A\u962C\u4E26\u4E56\u4E73\u4E8B\u4E9B\u4E9E\u4EAB\u4EAC\u4F6F\u4F9D\u4F8D\u4F73\u4F7F\u4F6C\u4F9B\u4F8B\u4F86\u4F83\u4F70\u4F75\u4F88\u4F69\u4F7B\u4F96\u4F7E\u4F8F\u4F91\u4F7A\u5154\u5152\u5155\u5169\u5177\u5176\u5178\u51BD\u51FD\u523B\u5238\u5237\u523A\u5230\u522E\u5236\u5241\u52BE\u52BB\u5352\u5354\u5353\u5351\u5366\u5377\u5378\u5379\u53D6\u53D4\u53D7\u5473\u5475"],
    ["a940", "\u5496\u5478\u5495\u5480\u547B\u5477\u5484\u5492\u5486\u547C\u5490\u5471\u5476\u548C\u549A\u5462\u5468\u548B\u547D\u548E\u56FA\u5783\u5777\u576A\u5769\u5761\u5766\u5764\u577C\u591C\u5949\u5947\u5948\u5944\u5954\u59BE\u59BB\u59D4\u59B9\u59AE\u59D1\u59C6\u59D0\u59CD\u59CB\u59D3\u59CA\u59AF\u59B3\u59D2\u59C5\u5B5F\u5B64\u5B63\u5B97\u5B9A\u5B98\u5B9C\u5B99\u5B9B\u5C1A\u5C48\u5C45"],
    ["a9a1", "\u5C46\u5CB7\u5CA1\u5CB8\u5CA9\u5CAB\u5CB1\u5CB3\u5E18\u5E1A\u5E16\u5E15\u5E1B\u5E11\u5E78\u5E9A\u5E97\u5E9C\u5E95\u5E96\u5EF6\u5F26\u5F27\u5F29\u5F80\u5F81\u5F7F\u5F7C\u5FDD\u5FE0\u5FFD\u5FF5\u5FFF\u600F\u6014\u602F\u6035\u6016\u602A\u6015\u6021\u6027\u6029\u602B\u601B\u6216\u6215\u623F\u623E\u6240\u627F\u62C9\u62CC\u62C4\u62BF\u62C2\u62B9\u62D2\u62DB\u62AB\u62D3\u62D4\u62CB\u62C8\u62A8\u62BD\u62BC\u62D0\u62D9\u62C7\u62CD\u62B5\u62DA\u62B1\u62D8\u62D6\u62D7\u62C6\u62AC\u62CE\u653E\u65A7\u65BC\u65FA\u6614\u6613\u660C\u6606\u6602\u660E\u6600\u660F\u6615\u660A"],
    ["aa40", "\u6607\u670D\u670B\u676D\u678B\u6795\u6771\u679C\u6773\u6777\u6787\u679D\u6797\u676F\u6770\u677F\u6789\u677E\u6790\u6775\u679A\u6793\u677C\u676A\u6772\u6B23\u6B66\u6B67\u6B7F\u6C13\u6C1B\u6CE3\u6CE8\u6CF3\u6CB1\u6CCC\u6CE5\u6CB3\u6CBD\u6CBE\u6CBC\u6CE2\u6CAB\u6CD5\u6CD3\u6CB8\u6CC4\u6CB9\u6CC1\u6CAE\u6CD7\u6CC5\u6CF1\u6CBF\u6CBB\u6CE1\u6CDB\u6CCA\u6CAC\u6CEF\u6CDC\u6CD6\u6CE0"],
    ["aaa1", "\u7095\u708E\u7092\u708A\u7099\u722C\u722D\u7238\u7248\u7267\u7269\u72C0\u72CE\u72D9\u72D7\u72D0\u73A9\u73A8\u739F\u73AB\u73A5\u753D\u759D\u7599\u759A\u7684\u76C2\u76F2\u76F4\u77E5\u77FD\u793E\u7940\u7941\u79C9\u79C8\u7A7A\u7A79\u7AFA\u7CFE\u7F54\u7F8C\u7F8B\u8005\u80BA\u80A5\u80A2\u80B1\u80A1\u80AB\u80A9\u80B4\u80AA\u80AF\u81E5\u81FE\u820D\u82B3\u829D\u8299\u82AD\u82BD\u829F\u82B9\u82B1\u82AC\u82A5\u82AF\u82B8\u82A3\u82B0\u82BE\u82B7\u864E\u8671\u521D\u8868\u8ECB\u8FCE\u8FD4\u8FD1\u90B5\u90B8\u90B1\u90B6\u91C7\u91D1\u9577\u9580\u961C\u9640\u963F\u963B\u9644"],
    ["ab40", "\u9642\u96B9\u96E8\u9752\u975E\u4E9F\u4EAD\u4EAE\u4FE1\u4FB5\u4FAF\u4FBF\u4FE0\u4FD1\u4FCF\u4FDD\u4FC3\u4FB6\u4FD8\u4FDF\u4FCA\u4FD7\u4FAE\u4FD0\u4FC4\u4FC2\u4FDA\u4FCE\u4FDE\u4FB7\u5157\u5192\u5191\u51A0\u524E\u5243\u524A\u524D\u524C\u524B\u5247\u52C7\u52C9\u52C3\u52C1\u530D\u5357\u537B\u539A\u53DB\u54AC\u54C0\u54A8\u54CE\u54C9\u54B8\u54A6\u54B3\u54C7\u54C2\u54BD\u54AA\u54C1"],
    ["aba1", "\u54C4\u54C8\u54AF\u54AB\u54B1\u54BB\u54A9\u54A7\u54BF\u56FF\u5782\u578B\u57A0\u57A3\u57A2\u57CE\u57AE\u5793\u5955\u5951\u594F\u594E\u5950\u59DC\u59D8\u59FF\u59E3\u59E8\u5A03\u59E5\u59EA\u59DA\u59E6\u5A01\u59FB\u5B69\u5BA3\u5BA6\u5BA4\u5BA2\u5BA5\u5C01\u5C4E\u5C4F\u5C4D\u5C4B\u5CD9\u5CD2\u5DF7\u5E1D\u5E25\u5E1F\u5E7D\u5EA0\u5EA6\u5EFA\u5F08\u5F2D\u5F65\u5F88\u5F85\u5F8A\u5F8B\u5F87\u5F8C\u5F89\u6012\u601D\u6020\u6025\u600E\u6028\u604D\u6070\u6068\u6062\u6046\u6043\u606C\u606B\u606A\u6064\u6241\u62DC\u6316\u6309\u62FC\u62ED\u6301\u62EE\u62FD\u6307\u62F1\u62F7"],
    ["ac40", "\u62EF\u62EC\u62FE\u62F4\u6311\u6302\u653F\u6545\u65AB\u65BD\u65E2\u6625\u662D\u6620\u6627\u662F\u661F\u6628\u6631\u6624\u66F7\u67FF\u67D3\u67F1\u67D4\u67D0\u67EC\u67B6\u67AF\u67F5\u67E9\u67EF\u67C4\u67D1\u67B4\u67DA\u67E5\u67B8\u67CF\u67DE\u67F3\u67B0\u67D9\u67E2\u67DD\u67D2\u6B6A\u6B83\u6B86\u6BB5\u6BD2\u6BD7\u6C1F\u6CC9\u6D0B\u6D32\u6D2A\u6D41\u6D25\u6D0C\u6D31\u6D1E\u6D17"],
    ["aca1", "\u6D3B\u6D3D\u6D3E\u6D36\u6D1B\u6CF5\u6D39\u6D27\u6D38\u6D29\u6D2E\u6D35\u6D0E\u6D2B\u70AB\u70BA\u70B3\u70AC\u70AF\u70AD\u70B8\u70AE\u70A4\u7230\u7272\u726F\u7274\u72E9\u72E0\u72E1\u73B7\u73CA\u73BB\u73B2\u73CD\u73C0\u73B3\u751A\u752D\u754F\u754C\u754E\u754B\u75AB\u75A4\u75A5\u75A2\u75A3\u7678\u7686\u7687\u7688\u76C8\u76C6\u76C3\u76C5\u7701\u76F9\u76F8\u7709\u770B\u76FE\u76FC\u7707\u77DC\u7802\u7814\u780C\u780D\u7946\u7949\u7948\u7947\u79B9\u79BA\u79D1\u79D2\u79CB\u7A7F\u7A81\u7AFF\u7AFD\u7C7D\u7D02\u7D05\u7D00\u7D09\u7D07\u7D04\u7D06\u7F38\u7F8E\u7FBF\u8004"],
    ["ad40", "\u8010\u800D\u8011\u8036\u80D6\u80E5\u80DA\u80C3\u80C4\u80CC\u80E1\u80DB\u80CE\u80DE\u80E4\u80DD\u81F4\u8222\u82E7\u8303\u8305\u82E3\u82DB\u82E6\u8304\u82E5\u8302\u8309\u82D2\u82D7\u82F1\u8301\u82DC\u82D4\u82D1\u82DE\u82D3\u82DF\u82EF\u8306\u8650\u8679\u867B\u867A\u884D\u886B\u8981\u89D4\u8A08\u8A02\u8A03\u8C9E\u8CA0\u8D74\u8D73\u8DB4\u8ECD\u8ECC\u8FF0\u8FE6\u8FE2\u8FEA\u8FE5"],
    ["ada1", "\u8FED\u8FEB\u8FE4\u8FE8\u90CA\u90CE\u90C1\u90C3\u914B\u914A\u91CD\u9582\u9650\u964B\u964C\u964D\u9762\u9769\u97CB\u97ED\u97F3\u9801\u98A8\u98DB\u98DF\u9996\u9999\u4E58\u4EB3\u500C\u500D\u5023\u4FEF\u5026\u5025\u4FF8\u5029\u5016\u5006\u503C\u501F\u501A\u5012\u5011\u4FFA\u5000\u5014\u5028\u4FF1\u5021\u500B\u5019\u5018\u4FF3\u4FEE\u502D\u502A\u4FFE\u502B\u5009\u517C\u51A4\u51A5\u51A2\u51CD\u51CC\u51C6\u51CB\u5256\u525C\u5254\u525B\u525D\u532A\u537F\u539F\u539D\u53DF\u54E8\u5510\u5501\u5537\u54FC\u54E5\u54F2\u5506\u54FA\u5514\u54E9\u54ED\u54E1\u5509\u54EE\u54EA"],
    ["ae40", "\u54E6\u5527\u5507\u54FD\u550F\u5703\u5704\u57C2\u57D4\u57CB\u57C3\u5809\u590F\u5957\u5958\u595A\u5A11\u5A18\u5A1C\u5A1F\u5A1B\u5A13\u59EC\u5A20\u5A23\u5A29\u5A25\u5A0C\u5A09\u5B6B\u5C58\u5BB0\u5BB3\u5BB6\u5BB4\u5BAE\u5BB5\u5BB9\u5BB8\u5C04\u5C51\u5C55\u5C50\u5CED\u5CFD\u5CFB\u5CEA\u5CE8\u5CF0\u5CF6\u5D01\u5CF4\u5DEE\u5E2D\u5E2B\u5EAB\u5EAD\u5EA7\u5F31\u5F92\u5F91\u5F90\u6059"],
    ["aea1", "\u6063\u6065\u6050\u6055\u606D\u6069\u606F\u6084\u609F\u609A\u608D\u6094\u608C\u6085\u6096\u6247\u62F3\u6308\u62FF\u634E\u633E\u632F\u6355\u6342\u6346\u634F\u6349\u633A\u6350\u633D\u632A\u632B\u6328\u634D\u634C\u6548\u6549\u6599\u65C1\u65C5\u6642\u6649\u664F\u6643\u6652\u664C\u6645\u6641\u66F8\u6714\u6715\u6717\u6821\u6838\u6848\u6846\u6853\u6839\u6842\u6854\u6829\u68B3\u6817\u684C\u6851\u683D\u67F4\u6850\u6840\u683C\u6843\u682A\u6845\u6813\u6818\u6841\u6B8A\u6B89\u6BB7\u6C23\u6C27\u6C28\u6C26\u6C24\u6CF0\u6D6A\u6D95\u6D88\u6D87\u6D66\u6D78\u6D77\u6D59\u6D93"],
    ["af40", "\u6D6C\u6D89\u6D6E\u6D5A\u6D74\u6D69\u6D8C\u6D8A\u6D79\u6D85\u6D65\u6D94\u70CA\u70D8\u70E4\u70D9\u70C8\u70CF\u7239\u7279\u72FC\u72F9\u72FD\u72F8\u72F7\u7386\u73ED\u7409\u73EE\u73E0\u73EA\u73DE\u7554\u755D\u755C\u755A\u7559\u75BE\u75C5\u75C7\u75B2\u75B3\u75BD\u75BC\u75B9\u75C2\u75B8\u768B\u76B0\u76CA\u76CD\u76CE\u7729\u771F\u7720\u7728\u77E9\u7830\u7827\u7838\u781D\u7834\u7837"],
    ["afa1", "\u7825\u782D\u7820\u781F\u7832\u7955\u7950\u7960\u795F\u7956\u795E\u795D\u7957\u795A\u79E4\u79E3\u79E7\u79DF\u79E6\u79E9\u79D8\u7A84\u7A88\u7AD9\u7B06\u7B11\u7C89\u7D21\u7D17\u7D0B\u7D0A\u7D20\u7D22\u7D14\u7D10\u7D15\u7D1A\u7D1C\u7D0D\u7D19\u7D1B\u7F3A\u7F5F\u7F94\u7FC5\u7FC1\u8006\u8018\u8015\u8019\u8017\u803D\u803F\u80F1\u8102\u80F0\u8105\u80ED\u80F4\u8106\u80F8\u80F3\u8108\u80FD\u810A\u80FC\u80EF\u81ED\u81EC\u8200\u8210\u822A\u822B\u8228\u822C\u82BB\u832B\u8352\u8354\u834A\u8338\u8350\u8349\u8335\u8334\u834F\u8332\u8339\u8336\u8317\u8340\u8331\u8328\u8343"],
    ["b040", "\u8654\u868A\u86AA\u8693\u86A4\u86A9\u868C\u86A3\u869C\u8870\u8877\u8881\u8882\u887D\u8879\u8A18\u8A10\u8A0E\u8A0C\u8A15\u8A0A\u8A17\u8A13\u8A16\u8A0F\u8A11\u8C48\u8C7A\u8C79\u8CA1\u8CA2\u8D77\u8EAC\u8ED2\u8ED4\u8ECF\u8FB1\u9001\u9006\u8FF7\u9000\u8FFA\u8FF4\u9003\u8FFD\u9005\u8FF8\u9095\u90E1\u90DD\u90E2\u9152\u914D\u914C\u91D8\u91DD\u91D7\u91DC\u91D9\u9583\u9662\u9663\u9661"],
    ["b0a1", "\u965B\u965D\u9664\u9658\u965E\u96BB\u98E2\u99AC\u9AA8\u9AD8\u9B25\u9B32\u9B3C\u4E7E\u507A\u507D\u505C\u5047\u5043\u504C\u505A\u5049\u5065\u5076\u504E\u5055\u5075\u5074\u5077\u504F\u500F\u506F\u506D\u515C\u5195\u51F0\u526A\u526F\u52D2\u52D9\u52D8\u52D5\u5310\u530F\u5319\u533F\u5340\u533E\u53C3\u66FC\u5546\u556A\u5566\u5544\u555E\u5561\u5543\u554A\u5531\u5556\u554F\u5555\u552F\u5564\u5538\u552E\u555C\u552C\u5563\u5533\u5541\u5557\u5708\u570B\u5709\u57DF\u5805\u580A\u5806\u57E0\u57E4\u57FA\u5802\u5835\u57F7\u57F9\u5920\u5962\u5A36\u5A41\u5A49\u5A66\u5A6A\u5A40"],
    ["b140", "\u5A3C\u5A62\u5A5A\u5A46\u5A4A\u5B70\u5BC7\u5BC5\u5BC4\u5BC2\u5BBF\u5BC6\u5C09\u5C08\u5C07\u5C60\u5C5C\u5C5D\u5D07\u5D06\u5D0E\u5D1B\u5D16\u5D22\u5D11\u5D29\u5D14\u5D19\u5D24\u5D27\u5D17\u5DE2\u5E38\u5E36\u5E33\u5E37\u5EB7\u5EB8\u5EB6\u5EB5\u5EBE\u5F35\u5F37\u5F57\u5F6C\u5F69\u5F6B\u5F97\u5F99\u5F9E\u5F98\u5FA1\u5FA0\u5F9C\u607F\u60A3\u6089\u60A0\u60A8\u60CB\u60B4\u60E6\u60BD"],
    ["b1a1", "\u60C5\u60BB\u60B5\u60DC\u60BC\u60D8\u60D5\u60C6\u60DF\u60B8\u60DA\u60C7\u621A\u621B\u6248\u63A0\u63A7\u6372\u6396\u63A2\u63A5\u6377\u6367\u6398\u63AA\u6371\u63A9\u6389\u6383\u639B\u636B\u63A8\u6384\u6388\u6399\u63A1\u63AC\u6392\u638F\u6380\u637B\u6369\u6368\u637A\u655D\u6556\u6551\u6559\u6557\u555F\u654F\u6558\u6555\u6554\u659C\u659B\u65AC\u65CF\u65CB\u65CC\u65CE\u665D\u665A\u6664\u6668\u6666\u665E\u66F9\u52D7\u671B\u6881\u68AF\u68A2\u6893\u68B5\u687F\u6876\u68B1\u68A7\u6897\u68B0\u6883\u68C4\u68AD\u6886\u6885\u6894\u689D\u68A8\u689F\u68A1\u6882\u6B32\u6BBA"],
    ["b240", "\u6BEB\u6BEC\u6C2B\u6D8E\u6DBC\u6DF3\u6DD9\u6DB2\u6DE1\u6DCC\u6DE4\u6DFB\u6DFA\u6E05\u6DC7\u6DCB\u6DAF\u6DD1\u6DAE\u6DDE\u6DF9\u6DB8\u6DF7\u6DF5\u6DC5\u6DD2\u6E1A\u6DB5\u6DDA\u6DEB\u6DD8\u6DEA\u6DF1\u6DEE\u6DE8\u6DC6\u6DC4\u6DAA\u6DEC\u6DBF\u6DE6\u70F9\u7109\u710A\u70FD\u70EF\u723D\u727D\u7281\u731C\u731B\u7316\u7313\u7319\u7387\u7405\u740A\u7403\u7406\u73FE\u740D\u74E0\u74F6"],
    ["b2a1", "\u74F7\u751C\u7522\u7565\u7566\u7562\u7570\u758F\u75D4\u75D5\u75B5\u75CA\u75CD\u768E\u76D4\u76D2\u76DB\u7737\u773E\u773C\u7736\u7738\u773A\u786B\u7843\u784E\u7965\u7968\u796D\u79FB\u7A92\u7A95\u7B20\u7B28\u7B1B\u7B2C\u7B26\u7B19\u7B1E\u7B2E\u7C92\u7C97\u7C95\u7D46\u7D43\u7D71\u7D2E\u7D39\u7D3C\u7D40\u7D30\u7D33\u7D44\u7D2F\u7D42\u7D32\u7D31\u7F3D\u7F9E\u7F9A\u7FCC\u7FCE\u7FD2\u801C\u804A\u8046\u812F\u8116\u8123\u812B\u8129\u8130\u8124\u8202\u8235\u8237\u8236\u8239\u838E\u839E\u8398\u8378\u83A2\u8396\u83BD\u83AB\u8392\u838A\u8393\u8389\u83A0\u8377\u837B\u837C"],
    ["b340", "\u8386\u83A7\u8655\u5F6A\u86C7\u86C0\u86B6\u86C4\u86B5\u86C6\u86CB\u86B1\u86AF\u86C9\u8853\u889E\u8888\u88AB\u8892\u8896\u888D\u888B\u8993\u898F\u8A2A\u8A1D\u8A23\u8A25\u8A31\u8A2D\u8A1F\u8A1B\u8A22\u8C49\u8C5A\u8CA9\u8CAC\u8CAB\u8CA8\u8CAA\u8CA7\u8D67\u8D66\u8DBE\u8DBA\u8EDB\u8EDF\u9019\u900D\u901A\u9017\u9023\u901F\u901D\u9010\u9015\u901E\u9020\u900F\u9022\u9016\u901B\u9014"],
    ["b3a1", "\u90E8\u90ED\u90FD\u9157\u91CE\u91F5\u91E6\u91E3\u91E7\u91ED\u91E9\u9589\u966A\u9675\u9673\u9678\u9670\u9674\u9676\u9677\u966C\u96C0\u96EA\u96E9\u7AE0\u7ADF\u9802\u9803\u9B5A\u9CE5\u9E75\u9E7F\u9EA5\u9EBB\u50A2\u508D\u5085\u5099\u5091\u5080\u5096\u5098\u509A\u6700\u51F1\u5272\u5274\u5275\u5269\u52DE\u52DD\u52DB\u535A\u53A5\u557B\u5580\u55A7\u557C\u558A\u559D\u5598\u5582\u559C\u55AA\u5594\u5587\u558B\u5583\u55B3\u55AE\u559F\u553E\u55B2\u559A\u55BB\u55AC\u55B1\u557E\u5589\u55AB\u5599\u570D\u582F\u582A\u5834\u5824\u5830\u5831\u5821\u581D\u5820\u58F9\u58FA\u5960"],
    ["b440", "\u5A77\u5A9A\u5A7F\u5A92\u5A9B\u5AA7\u5B73\u5B71\u5BD2\u5BCC\u5BD3\u5BD0\u5C0A\u5C0B\u5C31\u5D4C\u5D50\u5D34\u5D47\u5DFD\u5E45\u5E3D\u5E40\u5E43\u5E7E\u5ECA\u5EC1\u5EC2\u5EC4\u5F3C\u5F6D\u5FA9\u5FAA\u5FA8\u60D1\u60E1\u60B2\u60B6\u60E0\u611C\u6123\u60FA\u6115\u60F0\u60FB\u60F4\u6168\u60F1\u610E\u60F6\u6109\u6100\u6112\u621F\u6249\u63A3\u638C\u63CF\u63C0\u63E9\u63C9\u63C6\u63CD"],
    ["b4a1", "\u63D2\u63E3\u63D0\u63E1\u63D6\u63ED\u63EE\u6376\u63F4\u63EA\u63DB\u6452\u63DA\u63F9\u655E\u6566\u6562\u6563\u6591\u6590\u65AF\u666E\u6670\u6674\u6676\u666F\u6691\u667A\u667E\u6677\u66FE\u66FF\u671F\u671D\u68FA\u68D5\u68E0\u68D8\u68D7\u6905\u68DF\u68F5\u68EE\u68E7\u68F9\u68D2\u68F2\u68E3\u68CB\u68CD\u690D\u6912\u690E\u68C9\u68DA\u696E\u68FB\u6B3E\u6B3A\u6B3D\u6B98\u6B96\u6BBC\u6BEF\u6C2E\u6C2F\u6C2C\u6E2F\u6E38\u6E54\u6E21\u6E32\u6E67\u6E4A\u6E20\u6E25\u6E23\u6E1B\u6E5B\u6E58\u6E24\u6E56\u6E6E\u6E2D\u6E26\u6E6F\u6E34\u6E4D\u6E3A\u6E2C\u6E43\u6E1D\u6E3E\u6ECB"],
    ["b540", "\u6E89\u6E19\u6E4E\u6E63\u6E44\u6E72\u6E69\u6E5F\u7119\u711A\u7126\u7130\u7121\u7136\u716E\u711C\u724C\u7284\u7280\u7336\u7325\u7334\u7329\u743A\u742A\u7433\u7422\u7425\u7435\u7436\u7434\u742F\u741B\u7426\u7428\u7525\u7526\u756B\u756A\u75E2\u75DB\u75E3\u75D9\u75D8\u75DE\u75E0\u767B\u767C\u7696\u7693\u76B4\u76DC\u774F\u77ED\u785D\u786C\u786F\u7A0D\u7A08\u7A0B\u7A05\u7A00\u7A98"],
    ["b5a1", "\u7A97\u7A96\u7AE5\u7AE3\u7B49\u7B56\u7B46\u7B50\u7B52\u7B54\u7B4D\u7B4B\u7B4F\u7B51\u7C9F\u7CA5\u7D5E\u7D50\u7D68\u7D55\u7D2B\u7D6E\u7D72\u7D61\u7D66\u7D62\u7D70\u7D73\u5584\u7FD4\u7FD5\u800B\u8052\u8085\u8155\u8154\u814B\u8151\u814E\u8139\u8146\u813E\u814C\u8153\u8174\u8212\u821C\u83E9\u8403\u83F8\u840D\u83E0\u83C5\u840B\u83C1\u83EF\u83F1\u83F4\u8457\u840A\u83F0\u840C\u83CC\u83FD\u83F2\u83CA\u8438\u840E\u8404\u83DC\u8407\u83D4\u83DF\u865B\u86DF\u86D9\u86ED\u86D4\u86DB\u86E4\u86D0\u86DE\u8857\u88C1\u88C2\u88B1\u8983\u8996\u8A3B\u8A60\u8A55\u8A5E\u8A3C\u8A41"],
    ["b640", "\u8A54\u8A5B\u8A50\u8A46\u8A34\u8A3A\u8A36\u8A56\u8C61\u8C82\u8CAF\u8CBC\u8CB3\u8CBD\u8CC1\u8CBB\u8CC0\u8CB4\u8CB7\u8CB6\u8CBF\u8CB8\u8D8A\u8D85\u8D81\u8DCE\u8DDD\u8DCB\u8DDA\u8DD1\u8DCC\u8DDB\u8DC6\u8EFB\u8EF8\u8EFC\u8F9C\u902E\u9035\u9031\u9038\u9032\u9036\u9102\u90F5\u9109\u90FE\u9163\u9165\u91CF\u9214\u9215\u9223\u9209\u921E\u920D\u9210\u9207\u9211\u9594\u958F\u958B\u9591"],
    ["b6a1", "\u9593\u9592\u958E\u968A\u968E\u968B\u967D\u9685\u9686\u968D\u9672\u9684\u96C1\u96C5\u96C4\u96C6\u96C7\u96EF\u96F2\u97CC\u9805\u9806\u9808\u98E7\u98EA\u98EF\u98E9\u98F2\u98ED\u99AE\u99AD\u9EC3\u9ECD\u9ED1\u4E82\u50AD\u50B5\u50B2\u50B3\u50C5\u50BE\u50AC\u50B7\u50BB\u50AF\u50C7\u527F\u5277\u527D\u52DF\u52E6\u52E4\u52E2\u52E3\u532F\u55DF\u55E8\u55D3\u55E6\u55CE\u55DC\u55C7\u55D1\u55E3\u55E4\u55EF\u55DA\u55E1\u55C5\u55C6\u55E5\u55C9\u5712\u5713\u585E\u5851\u5858\u5857\u585A\u5854\u586B\u584C\u586D\u584A\u5862\u5852\u584B\u5967\u5AC1\u5AC9\u5ACC\u5ABE\u5ABD\u5ABC"],
    ["b740", "\u5AB3\u5AC2\u5AB2\u5D69\u5D6F\u5E4C\u5E79\u5EC9\u5EC8\u5F12\u5F59\u5FAC\u5FAE\u611A\u610F\u6148\u611F\u60F3\u611B\u60F9\u6101\u6108\u614E\u614C\u6144\u614D\u613E\u6134\u6127\u610D\u6106\u6137\u6221\u6222\u6413\u643E\u641E\u642A\u642D\u643D\u642C\u640F\u641C\u6414\u640D\u6436\u6416\u6417\u6406\u656C\u659F\u65B0\u6697\u6689\u6687\u6688\u6696\u6684\u6698\u668D\u6703\u6994\u696D"],
    ["b7a1", "\u695A\u6977\u6960\u6954\u6975\u6930\u6982\u694A\u6968\u696B\u695E\u6953\u6979\u6986\u695D\u6963\u695B\u6B47\u6B72\u6BC0\u6BBF\u6BD3\u6BFD\u6EA2\u6EAF\u6ED3\u6EB6\u6EC2\u6E90\u6E9D\u6EC7\u6EC5\u6EA5\u6E98\u6EBC\u6EBA\u6EAB\u6ED1\u6E96\u6E9C\u6EC4\u6ED4\u6EAA\u6EA7\u6EB4\u714E\u7159\u7169\u7164\u7149\u7167\u715C\u716C\u7166\u714C\u7165\u715E\u7146\u7168\u7156\u723A\u7252\u7337\u7345\u733F\u733E\u746F\u745A\u7455\u745F\u745E\u7441\u743F\u7459\u745B\u745C\u7576\u7578\u7600\u75F0\u7601\u75F2\u75F1\u75FA\u75FF\u75F4\u75F3\u76DE\u76DF\u775B\u776B\u7766\u775E\u7763"],
    ["b840", "\u7779\u776A\u776C\u775C\u7765\u7768\u7762\u77EE\u788E\u78B0\u7897\u7898\u788C\u7889\u787C\u7891\u7893\u787F\u797A\u797F\u7981\u842C\u79BD\u7A1C\u7A1A\u7A20\u7A14\u7A1F\u7A1E\u7A9F\u7AA0\u7B77\u7BC0\u7B60\u7B6E\u7B67\u7CB1\u7CB3\u7CB5\u7D93\u7D79\u7D91\u7D81\u7D8F\u7D5B\u7F6E\u7F69\u7F6A\u7F72\u7FA9\u7FA8\u7FA4\u8056\u8058\u8086\u8084\u8171\u8170\u8178\u8165\u816E\u8173\u816B"],
    ["b8a1", "\u8179\u817A\u8166\u8205\u8247\u8482\u8477\u843D\u8431\u8475\u8466\u846B\u8449\u846C\u845B\u843C\u8435\u8461\u8463\u8469\u846D\u8446\u865E\u865C\u865F\u86F9\u8713\u8708\u8707\u8700\u86FE\u86FB\u8702\u8703\u8706\u870A\u8859\u88DF\u88D4\u88D9\u88DC\u88D8\u88DD\u88E1\u88CA\u88D5\u88D2\u899C\u89E3\u8A6B\u8A72\u8A73\u8A66\u8A69\u8A70\u8A87\u8A7C\u8A63\u8AA0\u8A71\u8A85\u8A6D\u8A62\u8A6E\u8A6C\u8A79\u8A7B\u8A3E\u8A68\u8C62\u8C8A\u8C89\u8CCA\u8CC7\u8CC8\u8CC4\u8CB2\u8CC3\u8CC2\u8CC5\u8DE1\u8DDF\u8DE8\u8DEF\u8DF3\u8DFA\u8DEA\u8DE4\u8DE6\u8EB2\u8F03\u8F09\u8EFE\u8F0A"],
    ["b940", "\u8F9F\u8FB2\u904B\u904A\u9053\u9042\u9054\u903C\u9055\u9050\u9047\u904F\u904E\u904D\u9051\u903E\u9041\u9112\u9117\u916C\u916A\u9169\u91C9\u9237\u9257\u9238\u923D\u9240\u923E\u925B\u924B\u9264\u9251\u9234\u9249\u924D\u9245\u9239\u923F\u925A\u9598\u9698\u9694\u9695\u96CD\u96CB\u96C9\u96CA\u96F7\u96FB\u96F9\u96F6\u9756\u9774\u9776\u9810\u9811\u9813\u980A\u9812\u980C\u98FC\u98F4"],
    ["b9a1", "\u98FD\u98FE\u99B3\u99B1\u99B4\u9AE1\u9CE9\u9E82\u9F0E\u9F13\u9F20\u50E7\u50EE\u50E5\u50D6\u50ED\u50DA\u50D5\u50CF\u50D1\u50F1\u50CE\u50E9\u5162\u51F3\u5283\u5282\u5331\u53AD\u55FE\u5600\u561B\u5617\u55FD\u5614\u5606\u5609\u560D\u560E\u55F7\u5616\u561F\u5608\u5610\u55F6\u5718\u5716\u5875\u587E\u5883\u5893\u588A\u5879\u5885\u587D\u58FD\u5925\u5922\u5924\u596A\u5969\u5AE1\u5AE6\u5AE9\u5AD7\u5AD6\u5AD8\u5AE3\u5B75\u5BDE\u5BE7\u5BE1\u5BE5\u5BE6\u5BE8\u5BE2\u5BE4\u5BDF\u5C0D\u5C62\u5D84\u5D87\u5E5B\u5E63\u5E55\u5E57\u5E54\u5ED3\u5ED6\u5F0A\u5F46\u5F70\u5FB9\u6147"],
    ["ba40", "\u613F\u614B\u6177\u6162\u6163\u615F\u615A\u6158\u6175\u622A\u6487\u6458\u6454\u64A4\u6478\u645F\u647A\u6451\u6467\u6434\u646D\u647B\u6572\u65A1\u65D7\u65D6\u66A2\u66A8\u669D\u699C\u69A8\u6995\u69C1\u69AE\u69D3\u69CB\u699B\u69B7\u69BB\u69AB\u69B4\u69D0\u69CD\u69AD\u69CC\u69A6\u69C3\u69A3\u6B49\u6B4C\u6C33\u6F33\u6F14\u6EFE\u6F13\u6EF4\u6F29\u6F3E\u6F20\u6F2C\u6F0F\u6F02\u6F22"],
    ["baa1", "\u6EFF\u6EEF\u6F06\u6F31\u6F38\u6F32\u6F23\u6F15\u6F2B\u6F2F\u6F88\u6F2A\u6EEC\u6F01\u6EF2\u6ECC\u6EF7\u7194\u7199\u717D\u718A\u7184\u7192\u723E\u7292\u7296\u7344\u7350\u7464\u7463\u746A\u7470\u746D\u7504\u7591\u7627\u760D\u760B\u7609\u7613\u76E1\u76E3\u7784\u777D\u777F\u7761\u78C1\u789F\u78A7\u78B3\u78A9\u78A3\u798E\u798F\u798D\u7A2E\u7A31\u7AAA\u7AA9\u7AED\u7AEF\u7BA1\u7B95\u7B8B\u7B75\u7B97\u7B9D\u7B94\u7B8F\u7BB8\u7B87\u7B84\u7CB9\u7CBD\u7CBE\u7DBB\u7DB0\u7D9C\u7DBD\u7DBE\u7DA0\u7DCA\u7DB4\u7DB2\u7DB1\u7DBA\u7DA2\u7DBF\u7DB5\u7DB8\u7DAD\u7DD2\u7DC7\u7DAC"],
    ["bb40", "\u7F70\u7FE0\u7FE1\u7FDF\u805E\u805A\u8087\u8150\u8180\u818F\u8188\u818A\u817F\u8182\u81E7\u81FA\u8207\u8214\u821E\u824B\u84C9\u84BF\u84C6\u84C4\u8499\u849E\u84B2\u849C\u84CB\u84B8\u84C0\u84D3\u8490\u84BC\u84D1\u84CA\u873F\u871C\u873B\u8722\u8725\u8734\u8718\u8755\u8737\u8729\u88F3\u8902\u88F4\u88F9\u88F8\u88FD\u88E8\u891A\u88EF\u8AA6\u8A8C\u8A9E\u8AA3\u8A8D\u8AA1\u8A93\u8AA4"],
    ["bba1", "\u8AAA\u8AA5\u8AA8\u8A98\u8A91\u8A9A\u8AA7\u8C6A\u8C8D\u8C8C\u8CD3\u8CD1\u8CD2\u8D6B\u8D99\u8D95\u8DFC\u8F14\u8F12\u8F15\u8F13\u8FA3\u9060\u9058\u905C\u9063\u9059\u905E\u9062\u905D\u905B\u9119\u9118\u911E\u9175\u9178\u9177\u9174\u9278\u9280\u9285\u9298\u9296\u927B\u9293\u929C\u92A8\u927C\u9291\u95A1\u95A8\u95A9\u95A3\u95A5\u95A4\u9699\u969C\u969B\u96CC\u96D2\u9700\u977C\u9785\u97F6\u9817\u9818\u98AF\u98B1\u9903\u9905\u990C\u9909\u99C1\u9AAF\u9AB0\u9AE6\u9B41\u9B42\u9CF4\u9CF6\u9CF3\u9EBC\u9F3B\u9F4A\u5104\u5100\u50FB\u50F5\u50F9\u5102\u5108\u5109\u5105\u51DC"],
    ["bc40", "\u5287\u5288\u5289\u528D\u528A\u52F0\u53B2\u562E\u563B\u5639\u5632\u563F\u5634\u5629\u5653\u564E\u5657\u5674\u5636\u562F\u5630\u5880\u589F\u589E\u58B3\u589C\u58AE\u58A9\u58A6\u596D\u5B09\u5AFB\u5B0B\u5AF5\u5B0C\u5B08\u5BEE\u5BEC\u5BE9\u5BEB\u5C64\u5C65\u5D9D\u5D94\u5E62\u5E5F\u5E61\u5EE2\u5EDA\u5EDF\u5EDD\u5EE3\u5EE0\u5F48\u5F71\u5FB7\u5FB5\u6176\u6167\u616E\u615D\u6155\u6182"],
    ["bca1", "\u617C\u6170\u616B\u617E\u61A7\u6190\u61AB\u618E\u61AC\u619A\u61A4\u6194\u61AE\u622E\u6469\u646F\u6479\u649E\u64B2\u6488\u6490\u64B0\u64A5\u6493\u6495\u64A9\u6492\u64AE\u64AD\u64AB\u649A\u64AC\u6499\u64A2\u64B3\u6575\u6577\u6578\u66AE\u66AB\u66B4\u66B1\u6A23\u6A1F\u69E8\u6A01\u6A1E\u6A19\u69FD\u6A21\u6A13\u6A0A\u69F3\u6A02\u6A05\u69ED\u6A11\u6B50\u6B4E\u6BA4\u6BC5\u6BC6\u6F3F\u6F7C\u6F84\u6F51\u6F66\u6F54\u6F86\u6F6D\u6F5B\u6F78\u6F6E\u6F8E\u6F7A\u6F70\u6F64\u6F97\u6F58\u6ED5\u6F6F\u6F60\u6F5F\u719F\u71AC\u71B1\u71A8\u7256\u729B\u734E\u7357\u7469\u748B\u7483"],
    ["bd40", "\u747E\u7480\u757F\u7620\u7629\u761F\u7624\u7626\u7621\u7622\u769A\u76BA\u76E4\u778E\u7787\u778C\u7791\u778B\u78CB\u78C5\u78BA\u78CA\u78BE\u78D5\u78BC\u78D0\u7A3F\u7A3C\u7A40\u7A3D\u7A37\u7A3B\u7AAF\u7AAE\u7BAD\u7BB1\u7BC4\u7BB4\u7BC6\u7BC7\u7BC1\u7BA0\u7BCC\u7CCA\u7DE0\u7DF4\u7DEF\u7DFB\u7DD8\u7DEC\u7DDD\u7DE8\u7DE3\u7DDA\u7DDE\u7DE9\u7D9E\u7DD9\u7DF2\u7DF9\u7F75\u7F77\u7FAF"],
    ["bda1", "\u7FE9\u8026\u819B\u819C\u819D\u81A0\u819A\u8198\u8517\u853D\u851A\u84EE\u852C\u852D\u8513\u8511\u8523\u8521\u8514\u84EC\u8525\u84FF\u8506\u8782\u8774\u8776\u8760\u8766\u8778\u8768\u8759\u8757\u874C\u8753\u885B\u885D\u8910\u8907\u8912\u8913\u8915\u890A\u8ABC\u8AD2\u8AC7\u8AC4\u8A95\u8ACB\u8AF8\u8AB2\u8AC9\u8AC2\u8ABF\u8AB0\u8AD6\u8ACD\u8AB6\u8AB9\u8ADB\u8C4C\u8C4E\u8C6C\u8CE0\u8CDE\u8CE6\u8CE4\u8CEC\u8CED\u8CE2\u8CE3\u8CDC\u8CEA\u8CE1\u8D6D\u8D9F\u8DA3\u8E2B\u8E10\u8E1D\u8E22\u8E0F\u8E29\u8E1F\u8E21\u8E1E\u8EBA\u8F1D\u8F1B\u8F1F\u8F29\u8F26\u8F2A\u8F1C\u8F1E"],
    ["be40", "\u8F25\u9069\u906E\u9068\u906D\u9077\u9130\u912D\u9127\u9131\u9187\u9189\u918B\u9183\u92C5\u92BB\u92B7\u92EA\u92AC\u92E4\u92C1\u92B3\u92BC\u92D2\u92C7\u92F0\u92B2\u95AD\u95B1\u9704\u9706\u9707\u9709\u9760\u978D\u978B\u978F\u9821\u982B\u981C\u98B3\u990A\u9913\u9912\u9918\u99DD\u99D0\u99DF\u99DB\u99D1\u99D5\u99D2\u99D9\u9AB7\u9AEE\u9AEF\u9B27\u9B45\u9B44\u9B77\u9B6F\u9D06\u9D09"],
    ["bea1", "\u9D03\u9EA9\u9EBE\u9ECE\u58A8\u9F52\u5112\u5118\u5114\u5110\u5115\u5180\u51AA\u51DD\u5291\u5293\u52F3\u5659\u566B\u5679\u5669\u5664\u5678\u566A\u5668\u5665\u5671\u566F\u566C\u5662\u5676\u58C1\u58BE\u58C7\u58C5\u596E\u5B1D\u5B34\u5B78\u5BF0\u5C0E\u5F4A\u61B2\u6191\u61A9\u618A\u61CD\u61B6\u61BE\u61CA\u61C8\u6230\u64C5\u64C1\u64CB\u64BB\u64BC\u64DA\u64C4\u64C7\u64C2\u64CD\u64BF\u64D2\u64D4\u64BE\u6574\u66C6\u66C9\u66B9\u66C4\u66C7\u66B8\u6A3D\u6A38\u6A3A\u6A59\u6A6B\u6A58\u6A39\u6A44\u6A62\u6A61\u6A4B\u6A47\u6A35\u6A5F\u6A48\u6B59\u6B77\u6C05\u6FC2\u6FB1\u6FA1"],
    ["bf40", "\u6FC3\u6FA4\u6FC1\u6FA7\u6FB3\u6FC0\u6FB9\u6FB6\u6FA6\u6FA0\u6FB4\u71BE\u71C9\u71D0\u71D2\u71C8\u71D5\u71B9\u71CE\u71D9\u71DC\u71C3\u71C4\u7368\u749C\u74A3\u7498\u749F\u749E\u74E2\u750C\u750D\u7634\u7638\u763A\u76E7\u76E5\u77A0\u779E\u779F\u77A5\u78E8\u78DA\u78EC\u78E7\u79A6\u7A4D\u7A4E\u7A46\u7A4C\u7A4B\u7ABA\u7BD9\u7C11\u7BC9\u7BE4\u7BDB\u7BE1\u7BE9\u7BE6\u7CD5\u7CD6\u7E0A"],
    ["bfa1", "\u7E11\u7E08\u7E1B\u7E23\u7E1E\u7E1D\u7E09\u7E10\u7F79\u7FB2\u7FF0\u7FF1\u7FEE\u8028\u81B3\u81A9\u81A8\u81FB\u8208\u8258\u8259\u854A\u8559\u8548\u8568\u8569\u8543\u8549\u856D\u856A\u855E\u8783\u879F\u879E\u87A2\u878D\u8861\u892A\u8932\u8925\u892B\u8921\u89AA\u89A6\u8AE6\u8AFA\u8AEB\u8AF1\u8B00\u8ADC\u8AE7\u8AEE\u8AFE\u8B01\u8B02\u8AF7\u8AED\u8AF3\u8AF6\u8AFC\u8C6B\u8C6D\u8C93\u8CF4\u8E44\u8E31\u8E34\u8E42\u8E39\u8E35\u8F3B\u8F2F\u8F38\u8F33\u8FA8\u8FA6\u9075\u9074\u9078\u9072\u907C\u907A\u9134\u9192\u9320\u9336\u92F8\u9333\u932F\u9322\u92FC\u932B\u9304\u931A"],
    ["c040", "\u9310\u9326\u9321\u9315\u932E\u9319\u95BB\u96A7\u96A8\u96AA\u96D5\u970E\u9711\u9716\u970D\u9713\u970F\u975B\u975C\u9766\u9798\u9830\u9838\u983B\u9837\u982D\u9839\u9824\u9910\u9928\u991E\u991B\u9921\u991A\u99ED\u99E2\u99F1\u9AB8\u9ABC\u9AFB\u9AED\u9B28\u9B91\u9D15\u9D23\u9D26\u9D28\u9D12\u9D1B\u9ED8\u9ED4\u9F8D\u9F9C\u512A\u511F\u5121\u5132\u52F5\u568E\u5680\u5690\u5685\u5687"],
    ["c0a1", "\u568F\u58D5\u58D3\u58D1\u58CE\u5B30\u5B2A\u5B24\u5B7A\u5C37\u5C68\u5DBC\u5DBA\u5DBD\u5DB8\u5E6B\u5F4C\u5FBD\u61C9\u61C2\u61C7\u61E6\u61CB\u6232\u6234\u64CE\u64CA\u64D8\u64E0\u64F0\u64E6\u64EC\u64F1\u64E2\u64ED\u6582\u6583\u66D9\u66D6\u6A80\u6A94\u6A84\u6AA2\u6A9C\u6ADB\u6AA3\u6A7E\u6A97\u6A90\u6AA0\u6B5C\u6BAE\u6BDA\u6C08\u6FD8\u6FF1\u6FDF\u6FE0\u6FDB\u6FE4\u6FEB\u6FEF\u6F80\u6FEC\u6FE1\u6FE9\u6FD5\u6FEE\u6FF0\u71E7\u71DF\u71EE\u71E6\u71E5\u71ED\u71EC\u71F4\u71E0\u7235\u7246\u7370\u7372\u74A9\u74B0\u74A6\u74A8\u7646\u7642\u764C\u76EA\u77B3\u77AA\u77B0\u77AC"],
    ["c140", "\u77A7\u77AD\u77EF\u78F7\u78FA\u78F4\u78EF\u7901\u79A7\u79AA\u7A57\u7ABF\u7C07\u7C0D\u7BFE\u7BF7\u7C0C\u7BE0\u7CE0\u7CDC\u7CDE\u7CE2\u7CDF\u7CD9\u7CDD\u7E2E\u7E3E\u7E46\u7E37\u7E32\u7E43\u7E2B\u7E3D\u7E31\u7E45\u7E41\u7E34\u7E39\u7E48\u7E35\u7E3F\u7E2F\u7F44\u7FF3\u7FFC\u8071\u8072\u8070\u806F\u8073\u81C6\u81C3\u81BA\u81C2\u81C0\u81BF\u81BD\u81C9\u81BE\u81E8\u8209\u8271\u85AA"],
    ["c1a1", "\u8584\u857E\u859C\u8591\u8594\u85AF\u859B\u8587\u85A8\u858A\u8667\u87C0\u87D1\u87B3\u87D2\u87C6\u87AB\u87BB\u87BA\u87C8\u87CB\u893B\u8936\u8944\u8938\u893D\u89AC\u8B0E\u8B17\u8B19\u8B1B\u8B0A\u8B20\u8B1D\u8B04\u8B10\u8C41\u8C3F\u8C73\u8CFA\u8CFD\u8CFC\u8CF8\u8CFB\u8DA8\u8E49\u8E4B\u8E48\u8E4A\u8F44\u8F3E\u8F42\u8F45\u8F3F\u907F\u907D\u9084\u9081\u9082\u9080\u9139\u91A3\u919E\u919C\u934D\u9382\u9328\u9375\u934A\u9365\u934B\u9318\u937E\u936C\u935B\u9370\u935A\u9354\u95CA\u95CB\u95CC\u95C8\u95C6\u96B1\u96B8\u96D6\u971C\u971E\u97A0\u97D3\u9846\u98B6\u9935\u9A01"],
    ["c240", "\u99FF\u9BAE\u9BAB\u9BAA\u9BAD\u9D3B\u9D3F\u9E8B\u9ECF\u9EDE\u9EDC\u9EDD\u9EDB\u9F3E\u9F4B\u53E2\u5695\u56AE\u58D9\u58D8\u5B38\u5F5D\u61E3\u6233\u64F4\u64F2\u64FE\u6506\u64FA\u64FB\u64F7\u65B7\u66DC\u6726\u6AB3\u6AAC\u6AC3\u6ABB\u6AB8\u6AC2\u6AAE\u6AAF\u6B5F\u6B78\u6BAF\u7009\u700B\u6FFE\u7006\u6FFA\u7011\u700F\u71FB\u71FC\u71FE\u71F8\u7377\u7375\u74A7\u74BF\u7515\u7656\u7658"],
    ["c2a1", "\u7652\u77BD\u77BF\u77BB\u77BC\u790E\u79AE\u7A61\u7A62\u7A60\u7AC4\u7AC5\u7C2B\u7C27\u7C2A\u7C1E\u7C23\u7C21\u7CE7\u7E54\u7E55\u7E5E\u7E5A\u7E61\u7E52\u7E59\u7F48\u7FF9\u7FFB\u8077\u8076\u81CD\u81CF\u820A\u85CF\u85A9\u85CD\u85D0\u85C9\u85B0\u85BA\u85B9\u85A6\u87EF\u87EC\u87F2\u87E0\u8986\u89B2\u89F4\u8B28\u8B39\u8B2C\u8B2B\u8C50\u8D05\u8E59\u8E63\u8E66\u8E64\u8E5F\u8E55\u8EC0\u8F49\u8F4D\u9087\u9083\u9088\u91AB\u91AC\u91D0\u9394\u938A\u9396\u93A2\u93B3\u93AE\u93AC\u93B0\u9398\u939A\u9397\u95D4\u95D6\u95D0\u95D5\u96E2\u96DC\u96D9\u96DB\u96DE\u9724\u97A3\u97A6"],
    ["c340", "\u97AD\u97F9\u984D\u984F\u984C\u984E\u9853\u98BA\u993E\u993F\u993D\u992E\u99A5\u9A0E\u9AC1\u9B03\u9B06\u9B4F\u9B4E\u9B4D\u9BCA\u9BC9\u9BFD\u9BC8\u9BC0\u9D51\u9D5D\u9D60\u9EE0\u9F15\u9F2C\u5133\u56A5\u58DE\u58DF\u58E2\u5BF5\u9F90\u5EEC\u61F2\u61F7\u61F6\u61F5\u6500\u650F\u66E0\u66DD\u6AE5\u6ADD\u6ADA\u6AD3\u701B\u701F\u7028\u701A\u701D\u7015\u7018\u7206\u720D\u7258\u72A2\u7378"],
    ["c3a1", "\u737A\u74BD\u74CA\u74E3\u7587\u7586\u765F\u7661\u77C7\u7919\u79B1\u7A6B\u7A69\u7C3E\u7C3F\u7C38\u7C3D\u7C37\u7C40\u7E6B\u7E6D\u7E79\u7E69\u7E6A\u7F85\u7E73\u7FB6\u7FB9\u7FB8\u81D8\u85E9\u85DD\u85EA\u85D5\u85E4\u85E5\u85F7\u87FB\u8805\u880D\u87F9\u87FE\u8960\u895F\u8956\u895E\u8B41\u8B5C\u8B58\u8B49\u8B5A\u8B4E\u8B4F\u8B46\u8B59\u8D08\u8D0A\u8E7C\u8E72\u8E87\u8E76\u8E6C\u8E7A\u8E74\u8F54\u8F4E\u8FAD\u908A\u908B\u91B1\u91AE\u93E1\u93D1\u93DF\u93C3\u93C8\u93DC\u93DD\u93D6\u93E2\u93CD\u93D8\u93E4\u93D7\u93E8\u95DC\u96B4\u96E3\u972A\u9727\u9761\u97DC\u97FB\u985E"],
    ["c440", "\u9858\u985B\u98BC\u9945\u9949\u9A16\u9A19\u9B0D\u9BE8\u9BE7\u9BD6\u9BDB\u9D89\u9D61\u9D72\u9D6A\u9D6C\u9E92\u9E97\u9E93\u9EB4\u52F8\u56A8\u56B7\u56B6\u56B4\u56BC\u58E4\u5B40\u5B43\u5B7D\u5BF6\u5DC9\u61F8\u61FA\u6518\u6514\u6519\u66E6\u6727\u6AEC\u703E\u7030\u7032\u7210\u737B\u74CF\u7662\u7665\u7926\u792A\u792C\u792B\u7AC7\u7AF6\u7C4C\u7C43\u7C4D\u7CEF\u7CF0\u8FAE\u7E7D\u7E7C"],
    ["c4a1", "\u7E82\u7F4C\u8000\u81DA\u8266\u85FB\u85F9\u8611\u85FA\u8606\u860B\u8607\u860A\u8814\u8815\u8964\u89BA\u89F8\u8B70\u8B6C\u8B66\u8B6F\u8B5F\u8B6B\u8D0F\u8D0D\u8E89\u8E81\u8E85\u8E82\u91B4\u91CB\u9418\u9403\u93FD\u95E1\u9730\u98C4\u9952\u9951\u99A8\u9A2B\u9A30\u9A37\u9A35\u9C13\u9C0D\u9E79\u9EB5\u9EE8\u9F2F\u9F5F\u9F63\u9F61\u5137\u5138\u56C1\u56C0\u56C2\u5914\u5C6C\u5DCD\u61FC\u61FE\u651D\u651C\u6595\u66E9\u6AFB\u6B04\u6AFA\u6BB2\u704C\u721B\u72A7\u74D6\u74D4\u7669\u77D3\u7C50\u7E8F\u7E8C\u7FBC\u8617\u862D\u861A\u8823\u8822\u8821\u881F\u896A\u896C\u89BD\u8B74"],
    ["c540", "\u8B77\u8B7D\u8D13\u8E8A\u8E8D\u8E8B\u8F5F\u8FAF\u91BA\u942E\u9433\u9435\u943A\u9438\u9432\u942B\u95E2\u9738\u9739\u9732\u97FF\u9867\u9865\u9957\u9A45\u9A43\u9A40\u9A3E\u9ACF\u9B54\u9B51\u9C2D\u9C25\u9DAF\u9DB4\u9DC2\u9DB8\u9E9D\u9EEF\u9F19\u9F5C\u9F66\u9F67\u513C\u513B\u56C8\u56CA\u56C9\u5B7F\u5DD4\u5DD2\u5F4E\u61FF\u6524\u6B0A\u6B61\u7051\u7058\u7380\u74E4\u758A\u766E\u766C"],
    ["c5a1", "\u79B3\u7C60\u7C5F\u807E\u807D\u81DF\u8972\u896F\u89FC\u8B80\u8D16\u8D17\u8E91\u8E93\u8F61\u9148\u9444\u9451\u9452\u973D\u973E\u97C3\u97C1\u986B\u9955\u9A55\u9A4D\u9AD2\u9B1A\u9C49\u9C31\u9C3E\u9C3B\u9DD3\u9DD7\u9F34\u9F6C\u9F6A\u9F94\u56CC\u5DD6\u6200\u6523\u652B\u652A\u66EC\u6B10\u74DA\u7ACA\u7C64\u7C63\u7C65\u7E93\u7E96\u7E94\u81E2\u8638\u863F\u8831\u8B8A\u9090\u908F\u9463\u9460\u9464\u9768\u986F\u995C\u9A5A\u9A5B\u9A57\u9AD3\u9AD4\u9AD1\u9C54\u9C57\u9C56\u9DE5\u9E9F\u9EF4\u56D1\u58E9\u652C\u705E\u7671\u7672\u77D7\u7F50\u7F88\u8836\u8839\u8862\u8B93\u8B92"],
    ["c640", "\u8B96\u8277\u8D1B\u91C0\u946A\u9742\u9748\u9744\u97C6\u9870\u9A5F\u9B22\u9B58\u9C5F\u9DF9\u9DFA\u9E7C\u9E7D\u9F07\u9F77\u9F72\u5EF3\u6B16\u7063\u7C6C\u7C6E\u883B\u89C0\u8EA1\u91C1\u9472\u9470\u9871\u995E\u9AD6\u9B23\u9ECC\u7064\u77DA\u8B9A\u9477\u97C9\u9A62\u9A65\u7E9C\u8B9C\u8EAA\u91C5\u947D\u947E\u947C\u9C77\u9C78\u9EF7\u8C54\u947F\u9E1A\u7228\u9A6A\u9B31\u9E1B\u9E1E\u7C72"],
    ["c940", "\u4E42\u4E5C\u51F5\u531A\u5382\u4E07\u4E0C\u4E47\u4E8D\u56D7\uFA0C\u5C6E\u5F73\u4E0F\u5187\u4E0E\u4E2E\u4E93\u4EC2\u4EC9\u4EC8\u5198\u52FC\u536C\u53B9\u5720\u5903\u592C\u5C10\u5DFF\u65E1\u6BB3\u6BCC\u6C14\u723F\u4E31\u4E3C\u4EE8\u4EDC\u4EE9\u4EE1\u4EDD\u4EDA\u520C\u531C\u534C\u5722\u5723\u5917\u592F\u5B81\u5B84\u5C12\u5C3B\u5C74\u5C73\u5E04\u5E80\u5E82\u5FC9\u6209\u6250\u6C15"],
    ["c9a1", "\u6C36\u6C43\u6C3F\u6C3B\u72AE\u72B0\u738A\u79B8\u808A\u961E\u4F0E\u4F18\u4F2C\u4EF5\u4F14\u4EF1\u4F00\u4EF7\u4F08\u4F1D\u4F02\u4F05\u4F22\u4F13\u4F04\u4EF4\u4F12\u51B1\u5213\u5209\u5210\u52A6\u5322\u531F\u534D\u538A\u5407\u56E1\u56DF\u572E\u572A\u5734\u593C\u5980\u597C\u5985\u597B\u597E\u5977\u597F\u5B56\u5C15\u5C25\u5C7C\u5C7A\u5C7B\u5C7E\u5DDF\u5E75\u5E84\u5F02\u5F1A\u5F74\u5FD5\u5FD4\u5FCF\u625C\u625E\u6264\u6261\u6266\u6262\u6259\u6260\u625A\u6265\u65EF\u65EE\u673E\u6739\u6738\u673B\u673A\u673F\u673C\u6733\u6C18\u6C46\u6C52\u6C5C\u6C4F\u6C4A\u6C54\u6C4B"],
    ["ca40", "\u6C4C\u7071\u725E\u72B4\u72B5\u738E\u752A\u767F\u7A75\u7F51\u8278\u827C\u8280\u827D\u827F\u864D\u897E\u9099\u9097\u9098\u909B\u9094\u9622\u9624\u9620\u9623\u4F56\u4F3B\u4F62\u4F49\u4F53\u4F64\u4F3E\u4F67\u4F52\u4F5F\u4F41\u4F58\u4F2D\u4F33\u4F3F\u4F61\u518F\u51B9\u521C\u521E\u5221\u52AD\u52AE\u5309\u5363\u5372\u538E\u538F\u5430\u5437\u542A\u5454\u5445\u5419\u541C\u5425\u5418"],
    ["caa1", "\u543D\u544F\u5441\u5428\u5424\u5447\u56EE\u56E7\u56E5\u5741\u5745\u574C\u5749\u574B\u5752\u5906\u5940\u59A6\u5998\u59A0\u5997\u598E\u59A2\u5990\u598F\u59A7\u59A1\u5B8E\u5B92\u5C28\u5C2A\u5C8D\u5C8F\u5C88\u5C8B\u5C89\u5C92\u5C8A\u5C86\u5C93\u5C95\u5DE0\u5E0A\u5E0E\u5E8B\u5E89\u5E8C\u5E88\u5E8D\u5F05\u5F1D\u5F78\u5F76\u5FD2\u5FD1\u5FD0\u5FED\u5FE8\u5FEE\u5FF3\u5FE1\u5FE4\u5FE3\u5FFA\u5FEF\u5FF7\u5FFB\u6000\u5FF4\u623A\u6283\u628C\u628E\u628F\u6294\u6287\u6271\u627B\u627A\u6270\u6281\u6288\u6277\u627D\u6272\u6274\u6537\u65F0\u65F4\u65F3\u65F2\u65F5\u6745\u6747"],
    ["cb40", "\u6759\u6755\u674C\u6748\u675D\u674D\u675A\u674B\u6BD0\u6C19\u6C1A\u6C78\u6C67\u6C6B\u6C84\u6C8B\u6C8F\u6C71\u6C6F\u6C69\u6C9A\u6C6D\u6C87\u6C95\u6C9C\u6C66\u6C73\u6C65\u6C7B\u6C8E\u7074\u707A\u7263\u72BF\u72BD\u72C3\u72C6\u72C1\u72BA\u72C5\u7395\u7397\u7393\u7394\u7392\u753A\u7539\u7594\u7595\u7681\u793D\u8034\u8095\u8099\u8090\u8092\u809C\u8290\u828F\u8285\u828E\u8291\u8293"],
    ["cba1", "\u828A\u8283\u8284\u8C78\u8FC9\u8FBF\u909F\u90A1\u90A5\u909E\u90A7\u90A0\u9630\u9628\u962F\u962D\u4E33\u4F98\u4F7C\u4F85\u4F7D\u4F80\u4F87\u4F76\u4F74\u4F89\u4F84\u4F77\u4F4C\u4F97\u4F6A\u4F9A\u4F79\u4F81\u4F78\u4F90\u4F9C\u4F94\u4F9E\u4F92\u4F82\u4F95\u4F6B\u4F6E\u519E\u51BC\u51BE\u5235\u5232\u5233\u5246\u5231\u52BC\u530A\u530B\u533C\u5392\u5394\u5487\u547F\u5481\u5491\u5482\u5488\u546B\u547A\u547E\u5465\u546C\u5474\u5466\u548D\u546F\u5461\u5460\u5498\u5463\u5467\u5464\u56F7\u56F9\u576F\u5772\u576D\u576B\u5771\u5770\u5776\u5780\u5775\u577B\u5773\u5774\u5762"],
    ["cc40", "\u5768\u577D\u590C\u5945\u59B5\u59BA\u59CF\u59CE\u59B2\u59CC\u59C1\u59B6\u59BC\u59C3\u59D6\u59B1\u59BD\u59C0\u59C8\u59B4\u59C7\u5B62\u5B65\u5B93\u5B95\u5C44\u5C47\u5CAE\u5CA4\u5CA0\u5CB5\u5CAF\u5CA8\u5CAC\u5C9F\u5CA3\u5CAD\u5CA2\u5CAA\u5CA7\u5C9D\u5CA5\u5CB6\u5CB0\u5CA6\u5E17\u5E14\u5E19\u5F28\u5F22\u5F23\u5F24\u5F54\u5F82\u5F7E\u5F7D\u5FDE\u5FE5\u602D\u6026\u6019\u6032\u600B"],
    ["cca1", "\u6034\u600A\u6017\u6033\u601A\u601E\u602C\u6022\u600D\u6010\u602E\u6013\u6011\u600C\u6009\u601C\u6214\u623D\u62AD\u62B4\u62D1\u62BE\u62AA\u62B6\u62CA\u62AE\u62B3\u62AF\u62BB\u62A9\u62B0\u62B8\u653D\u65A8\u65BB\u6609\u65FC\u6604\u6612\u6608\u65FB\u6603\u660B\u660D\u6605\u65FD\u6611\u6610\u66F6\u670A\u6785\u676C\u678E\u6792\u6776\u677B\u6798\u6786\u6784\u6774\u678D\u678C\u677A\u679F\u6791\u6799\u6783\u677D\u6781\u6778\u6779\u6794\u6B25\u6B80\u6B7E\u6BDE\u6C1D\u6C93\u6CEC\u6CEB\u6CEE\u6CD9\u6CB6\u6CD4\u6CAD\u6CE7\u6CB7\u6CD0\u6CC2\u6CBA\u6CC3\u6CC6\u6CED\u6CF2"],
    ["cd40", "\u6CD2\u6CDD\u6CB4\u6C8A\u6C9D\u6C80\u6CDE\u6CC0\u6D30\u6CCD\u6CC7\u6CB0\u6CF9\u6CCF\u6CE9\u6CD1\u7094\u7098\u7085\u7093\u7086\u7084\u7091\u7096\u7082\u709A\u7083\u726A\u72D6\u72CB\u72D8\u72C9\u72DC\u72D2\u72D4\u72DA\u72CC\u72D1\u73A4\u73A1\u73AD\u73A6\u73A2\u73A0\u73AC\u739D\u74DD\u74E8\u753F\u7540\u753E\u758C\u7598\u76AF\u76F3\u76F1\u76F0\u76F5\u77F8\u77FC\u77F9\u77FB\u77FA"],
    ["cda1", "\u77F7\u7942\u793F\u79C5\u7A78\u7A7B\u7AFB\u7C75\u7CFD\u8035\u808F\u80AE\u80A3\u80B8\u80B5\u80AD\u8220\u82A0\u82C0\u82AB\u829A\u8298\u829B\u82B5\u82A7\u82AE\u82BC\u829E\u82BA\u82B4\u82A8\u82A1\u82A9\u82C2\u82A4\u82C3\u82B6\u82A2\u8670\u866F\u866D\u866E\u8C56\u8FD2\u8FCB\u8FD3\u8FCD\u8FD6\u8FD5\u8FD7\u90B2\u90B4\u90AF\u90B3\u90B0\u9639\u963D\u963C\u963A\u9643\u4FCD\u4FC5\u4FD3\u4FB2\u4FC9\u4FCB\u4FC1\u4FD4\u4FDC\u4FD9\u4FBB\u4FB3\u4FDB\u4FC7\u4FD6\u4FBA\u4FC0\u4FB9\u4FEC\u5244\u5249\u52C0\u52C2\u533D\u537C\u5397\u5396\u5399\u5398\u54BA\u54A1\u54AD\u54A5\u54CF"],
    ["ce40", "\u54C3\u830D\u54B7\u54AE\u54D6\u54B6\u54C5\u54C6\u54A0\u5470\u54BC\u54A2\u54BE\u5472\u54DE\u54B0\u57B5\u579E\u579F\u57A4\u578C\u5797\u579D\u579B\u5794\u5798\u578F\u5799\u57A5\u579A\u5795\u58F4\u590D\u5953\u59E1\u59DE\u59EE\u5A00\u59F1\u59DD\u59FA\u59FD\u59FC\u59F6\u59E4\u59F2\u59F7\u59DB\u59E9\u59F3\u59F5\u59E0\u59FE\u59F4\u59ED\u5BA8\u5C4C\u5CD0\u5CD8\u5CCC\u5CD7\u5CCB\u5CDB"],
    ["cea1", "\u5CDE\u5CDA\u5CC9\u5CC7\u5CCA\u5CD6\u5CD3\u5CD4\u5CCF\u5CC8\u5CC6\u5CCE\u5CDF\u5CF8\u5DF9\u5E21\u5E22\u5E23\u5E20\u5E24\u5EB0\u5EA4\u5EA2\u5E9B\u5EA3\u5EA5\u5F07\u5F2E\u5F56\u5F86\u6037\u6039\u6054\u6072\u605E\u6045\u6053\u6047\u6049\u605B\u604C\u6040\u6042\u605F\u6024\u6044\u6058\u6066\u606E\u6242\u6243\u62CF\u630D\u630B\u62F5\u630E\u6303\u62EB\u62F9\u630F\u630C\u62F8\u62F6\u6300\u6313\u6314\u62FA\u6315\u62FB\u62F0\u6541\u6543\u65AA\u65BF\u6636\u6621\u6632\u6635\u661C\u6626\u6622\u6633\u662B\u663A\u661D\u6634\u6639\u662E\u670F\u6710\u67C1\u67F2\u67C8\u67BA"],
    ["cf40", "\u67DC\u67BB\u67F8\u67D8\u67C0\u67B7\u67C5\u67EB\u67E4\u67DF\u67B5\u67CD\u67B3\u67F7\u67F6\u67EE\u67E3\u67C2\u67B9\u67CE\u67E7\u67F0\u67B2\u67FC\u67C6\u67ED\u67CC\u67AE\u67E6\u67DB\u67FA\u67C9\u67CA\u67C3\u67EA\u67CB\u6B28\u6B82\u6B84\u6BB6\u6BD6\u6BD8\u6BE0\u6C20\u6C21\u6D28\u6D34\u6D2D\u6D1F\u6D3C\u6D3F\u6D12\u6D0A\u6CDA\u6D33\u6D04\u6D19\u6D3A\u6D1A\u6D11\u6D00\u6D1D\u6D42"],
    ["cfa1", "\u6D01\u6D18\u6D37\u6D03\u6D0F\u6D40\u6D07\u6D20\u6D2C\u6D08\u6D22\u6D09\u6D10\u70B7\u709F\u70BE\u70B1\u70B0\u70A1\u70B4\u70B5\u70A9\u7241\u7249\u724A\u726C\u7270\u7273\u726E\u72CA\u72E4\u72E8\u72EB\u72DF\u72EA\u72E6\u72E3\u7385\u73CC\u73C2\u73C8\u73C5\u73B9\u73B6\u73B5\u73B4\u73EB\u73BF\u73C7\u73BE\u73C3\u73C6\u73B8\u73CB\u74EC\u74EE\u752E\u7547\u7548\u75A7\u75AA\u7679\u76C4\u7708\u7703\u7704\u7705\u770A\u76F7\u76FB\u76FA\u77E7\u77E8\u7806\u7811\u7812\u7805\u7810\u780F\u780E\u7809\u7803\u7813\u794A\u794C\u794B\u7945\u7944\u79D5\u79CD\u79CF\u79D6\u79CE\u7A80"],
    ["d040", "\u7A7E\u7AD1\u7B00\u7B01\u7C7A\u7C78\u7C79\u7C7F\u7C80\u7C81\u7D03\u7D08\u7D01\u7F58\u7F91\u7F8D\u7FBE\u8007\u800E\u800F\u8014\u8037\u80D8\u80C7\u80E0\u80D1\u80C8\u80C2\u80D0\u80C5\u80E3\u80D9\u80DC\u80CA\u80D5\u80C9\u80CF\u80D7\u80E6\u80CD\u81FF\u8221\u8294\u82D9\u82FE\u82F9\u8307\u82E8\u8300\u82D5\u833A\u82EB\u82D6\u82F4\u82EC\u82E1\u82F2\u82F5\u830C\u82FB\u82F6\u82F0\u82EA"],
    ["d0a1", "\u82E4\u82E0\u82FA\u82F3\u82ED\u8677\u8674\u867C\u8673\u8841\u884E\u8867\u886A\u8869\u89D3\u8A04\u8A07\u8D72\u8FE3\u8FE1\u8FEE\u8FE0\u90F1\u90BD\u90BF\u90D5\u90C5\u90BE\u90C7\u90CB\u90C8\u91D4\u91D3\u9654\u964F\u9651\u9653\u964A\u964E\u501E\u5005\u5007\u5013\u5022\u5030\u501B\u4FF5\u4FF4\u5033\u5037\u502C\u4FF6\u4FF7\u5017\u501C\u5020\u5027\u5035\u502F\u5031\u500E\u515A\u5194\u5193\u51CA\u51C4\u51C5\u51C8\u51CE\u5261\u525A\u5252\u525E\u525F\u5255\u5262\u52CD\u530E\u539E\u5526\u54E2\u5517\u5512\u54E7\u54F3\u54E4\u551A\u54FF\u5504\u5508\u54EB\u5511\u5505\u54F1"],
    ["d140", "\u550A\u54FB\u54F7\u54F8\u54E0\u550E\u5503\u550B\u5701\u5702\u57CC\u5832\u57D5\u57D2\u57BA\u57C6\u57BD\u57BC\u57B8\u57B6\u57BF\u57C7\u57D0\u57B9\u57C1\u590E\u594A\u5A19\u5A16\u5A2D\u5A2E\u5A15\u5A0F\u5A17\u5A0A\u5A1E\u5A33\u5B6C\u5BA7\u5BAD\u5BAC\u5C03\u5C56\u5C54\u5CEC\u5CFF\u5CEE\u5CF1\u5CF7\u5D00\u5CF9\u5E29\u5E28\u5EA8\u5EAE\u5EAA\u5EAC\u5F33\u5F30\u5F67\u605D\u605A\u6067"],
    ["d1a1", "\u6041\u60A2\u6088\u6080\u6092\u6081\u609D\u6083\u6095\u609B\u6097\u6087\u609C\u608E\u6219\u6246\u62F2\u6310\u6356\u632C\u6344\u6345\u6336\u6343\u63E4\u6339\u634B\u634A\u633C\u6329\u6341\u6334\u6358\u6354\u6359\u632D\u6347\u6333\u635A\u6351\u6338\u6357\u6340\u6348\u654A\u6546\u65C6\u65C3\u65C4\u65C2\u664A\u665F\u6647\u6651\u6712\u6713\u681F\u681A\u6849\u6832\u6833\u683B\u684B\u684F\u6816\u6831\u681C\u6835\u682B\u682D\u682F\u684E\u6844\u6834\u681D\u6812\u6814\u6826\u6828\u682E\u684D\u683A\u6825\u6820\u6B2C\u6B2F\u6B2D\u6B31\u6B34\u6B6D\u8082\u6B88\u6BE6\u6BE4"],
    ["d240", "\u6BE8\u6BE3\u6BE2\u6BE7\u6C25\u6D7A\u6D63\u6D64\u6D76\u6D0D\u6D61\u6D92\u6D58\u6D62\u6D6D\u6D6F\u6D91\u6D8D\u6DEF\u6D7F\u6D86\u6D5E\u6D67\u6D60\u6D97\u6D70\u6D7C\u6D5F\u6D82\u6D98\u6D2F\u6D68\u6D8B\u6D7E\u6D80\u6D84\u6D16\u6D83\u6D7B\u6D7D\u6D75\u6D90\u70DC\u70D3\u70D1\u70DD\u70CB\u7F39\u70E2\u70D7\u70D2\u70DE\u70E0\u70D4\u70CD\u70C5\u70C6\u70C7\u70DA\u70CE\u70E1\u7242\u7278"],
    ["d2a1", "\u7277\u7276\u7300\u72FA\u72F4\u72FE\u72F6\u72F3\u72FB\u7301\u73D3\u73D9\u73E5\u73D6\u73BC\u73E7\u73E3\u73E9\u73DC\u73D2\u73DB\u73D4\u73DD\u73DA\u73D7\u73D8\u73E8\u74DE\u74DF\u74F4\u74F5\u7521\u755B\u755F\u75B0\u75C1\u75BB\u75C4\u75C0\u75BF\u75B6\u75BA\u768A\u76C9\u771D\u771B\u7710\u7713\u7712\u7723\u7711\u7715\u7719\u771A\u7722\u7727\u7823\u782C\u7822\u7835\u782F\u7828\u782E\u782B\u7821\u7829\u7833\u782A\u7831\u7954\u795B\u794F\u795C\u7953\u7952\u7951\u79EB\u79EC\u79E0\u79EE\u79ED\u79EA\u79DC\u79DE\u79DD\u7A86\u7A89\u7A85\u7A8B\u7A8C\u7A8A\u7A87\u7AD8\u7B10"],
    ["d340", "\u7B04\u7B13\u7B05\u7B0F\u7B08\u7B0A\u7B0E\u7B09\u7B12\u7C84\u7C91\u7C8A\u7C8C\u7C88\u7C8D\u7C85\u7D1E\u7D1D\u7D11\u7D0E\u7D18\u7D16\u7D13\u7D1F\u7D12\u7D0F\u7D0C\u7F5C\u7F61\u7F5E\u7F60\u7F5D\u7F5B\u7F96\u7F92\u7FC3\u7FC2\u7FC0\u8016\u803E\u8039\u80FA\u80F2\u80F9\u80F5\u8101\u80FB\u8100\u8201\u822F\u8225\u8333\u832D\u8344\u8319\u8351\u8325\u8356\u833F\u8341\u8326\u831C\u8322"],
    ["d3a1", "\u8342\u834E\u831B\u832A\u8308\u833C\u834D\u8316\u8324\u8320\u8337\u832F\u8329\u8347\u8345\u834C\u8353\u831E\u832C\u834B\u8327\u8348\u8653\u8652\u86A2\u86A8\u8696\u868D\u8691\u869E\u8687\u8697\u8686\u868B\u869A\u8685\u86A5\u8699\u86A1\u86A7\u8695\u8698\u868E\u869D\u8690\u8694\u8843\u8844\u886D\u8875\u8876\u8872\u8880\u8871\u887F\u886F\u8883\u887E\u8874\u887C\u8A12\u8C47\u8C57\u8C7B\u8CA4\u8CA3\u8D76\u8D78\u8DB5\u8DB7\u8DB6\u8ED1\u8ED3\u8FFE\u8FF5\u9002\u8FFF\u8FFB\u9004\u8FFC\u8FF6\u90D6\u90E0\u90D9\u90DA\u90E3\u90DF\u90E5\u90D8\u90DB\u90D7\u90DC\u90E4\u9150"],
    ["d440", "\u914E\u914F\u91D5\u91E2\u91DA\u965C\u965F\u96BC\u98E3\u9ADF\u9B2F\u4E7F\u5070\u506A\u5061\u505E\u5060\u5053\u504B\u505D\u5072\u5048\u504D\u5041\u505B\u504A\u5062\u5015\u5045\u505F\u5069\u506B\u5063\u5064\u5046\u5040\u506E\u5073\u5057\u5051\u51D0\u526B\u526D\u526C\u526E\u52D6\u52D3\u532D\u539C\u5575\u5576\u553C\u554D\u5550\u5534\u552A\u5551\u5562\u5536\u5535\u5530\u5552\u5545"],
    ["d4a1", "\u550C\u5532\u5565\u554E\u5539\u5548\u552D\u553B\u5540\u554B\u570A\u5707\u57FB\u5814\u57E2\u57F6\u57DC\u57F4\u5800\u57ED\u57FD\u5808\u57F8\u580B\u57F3\u57CF\u5807\u57EE\u57E3\u57F2\u57E5\u57EC\u57E1\u580E\u57FC\u5810\u57E7\u5801\u580C\u57F1\u57E9\u57F0\u580D\u5804\u595C\u5A60\u5A58\u5A55\u5A67\u5A5E\u5A38\u5A35\u5A6D\u5A50\u5A5F\u5A65\u5A6C\u5A53\u5A64\u5A57\u5A43\u5A5D\u5A52\u5A44\u5A5B\u5A48\u5A8E\u5A3E\u5A4D\u5A39\u5A4C\u5A70\u5A69\u5A47\u5A51\u5A56\u5A42\u5A5C\u5B72\u5B6E\u5BC1\u5BC0\u5C59\u5D1E\u5D0B\u5D1D\u5D1A\u5D20\u5D0C\u5D28\u5D0D\u5D26\u5D25\u5D0F"],
    ["d540", "\u5D30\u5D12\u5D23\u5D1F\u5D2E\u5E3E\u5E34\u5EB1\u5EB4\u5EB9\u5EB2\u5EB3\u5F36\u5F38\u5F9B\u5F96\u5F9F\u608A\u6090\u6086\u60BE\u60B0\u60BA\u60D3\u60D4\u60CF\u60E4\u60D9\u60DD\u60C8\u60B1\u60DB\u60B7\u60CA\u60BF\u60C3\u60CD\u60C0\u6332\u6365\u638A\u6382\u637D\u63BD\u639E\u63AD\u639D\u6397\u63AB\u638E\u636F\u6387\u6390\u636E\u63AF\u6375\u639C\u636D\u63AE\u637C\u63A4\u633B\u639F"],
    ["d5a1", "\u6378\u6385\u6381\u6391\u638D\u6370\u6553\u65CD\u6665\u6661\u665B\u6659\u665C\u6662\u6718\u6879\u6887\u6890\u689C\u686D\u686E\u68AE\u68AB\u6956\u686F\u68A3\u68AC\u68A9\u6875\u6874\u68B2\u688F\u6877\u6892\u687C\u686B\u6872\u68AA\u6880\u6871\u687E\u689B\u6896\u688B\u68A0\u6889\u68A4\u6878\u687B\u6891\u688C\u688A\u687D\u6B36\u6B33\u6B37\u6B38\u6B91\u6B8F\u6B8D\u6B8E\u6B8C\u6C2A\u6DC0\u6DAB\u6DB4\u6DB3\u6E74\u6DAC\u6DE9\u6DE2\u6DB7\u6DF6\u6DD4\u6E00\u6DC8\u6DE0\u6DDF\u6DD6\u6DBE\u6DE5\u6DDC\u6DDD\u6DDB\u6DF4\u6DCA\u6DBD\u6DED\u6DF0\u6DBA\u6DD5\u6DC2\u6DCF\u6DC9"],
    ["d640", "\u6DD0\u6DF2\u6DD3\u6DFD\u6DD7\u6DCD\u6DE3\u6DBB\u70FA\u710D\u70F7\u7117\u70F4\u710C\u70F0\u7104\u70F3\u7110\u70FC\u70FF\u7106\u7113\u7100\u70F8\u70F6\u710B\u7102\u710E\u727E\u727B\u727C\u727F\u731D\u7317\u7307\u7311\u7318\u730A\u7308\u72FF\u730F\u731E\u7388\u73F6\u73F8\u73F5\u7404\u7401\u73FD\u7407\u7400\u73FA\u73FC\u73FF\u740C\u740B\u73F4\u7408\u7564\u7563\u75CE\u75D2\u75CF"],
    ["d6a1", "\u75CB\u75CC\u75D1\u75D0\u768F\u7689\u76D3\u7739\u772F\u772D\u7731\u7732\u7734\u7733\u773D\u7725\u773B\u7735\u7848\u7852\u7849\u784D\u784A\u784C\u7826\u7845\u7850\u7964\u7967\u7969\u796A\u7963\u796B\u7961\u79BB\u79FA\u79F8\u79F6\u79F7\u7A8F\u7A94\u7A90\u7B35\u7B47\u7B34\u7B25\u7B30\u7B22\u7B24\u7B33\u7B18\u7B2A\u7B1D\u7B31\u7B2B\u7B2D\u7B2F\u7B32\u7B38\u7B1A\u7B23\u7C94\u7C98\u7C96\u7CA3\u7D35\u7D3D\u7D38\u7D36\u7D3A\u7D45\u7D2C\u7D29\u7D41\u7D47\u7D3E\u7D3F\u7D4A\u7D3B\u7D28\u7F63\u7F95\u7F9C\u7F9D\u7F9B\u7FCA\u7FCB\u7FCD\u7FD0\u7FD1\u7FC7\u7FCF\u7FC9\u801F"],
    ["d740", "\u801E\u801B\u8047\u8043\u8048\u8118\u8125\u8119\u811B\u812D\u811F\u812C\u811E\u8121\u8115\u8127\u811D\u8122\u8211\u8238\u8233\u823A\u8234\u8232\u8274\u8390\u83A3\u83A8\u838D\u837A\u8373\u83A4\u8374\u838F\u8381\u8395\u8399\u8375\u8394\u83A9\u837D\u8383\u838C\u839D\u839B\u83AA\u838B\u837E\u83A5\u83AF\u8388\u8397\u83B0\u837F\u83A6\u8387\u83AE\u8376\u839A\u8659\u8656\u86BF\u86B7"],
    ["d7a1", "\u86C2\u86C1\u86C5\u86BA\u86B0\u86C8\u86B9\u86B3\u86B8\u86CC\u86B4\u86BB\u86BC\u86C3\u86BD\u86BE\u8852\u8889\u8895\u88A8\u88A2\u88AA\u889A\u8891\u88A1\u889F\u8898\u88A7\u8899\u889B\u8897\u88A4\u88AC\u888C\u8893\u888E\u8982\u89D6\u89D9\u89D5\u8A30\u8A27\u8A2C\u8A1E\u8C39\u8C3B\u8C5C\u8C5D\u8C7D\u8CA5\u8D7D\u8D7B\u8D79\u8DBC\u8DC2\u8DB9\u8DBF\u8DC1\u8ED8\u8EDE\u8EDD\u8EDC\u8ED7\u8EE0\u8EE1\u9024\u900B\u9011\u901C\u900C\u9021\u90EF\u90EA\u90F0\u90F4\u90F2\u90F3\u90D4\u90EB\u90EC\u90E9\u9156\u9158\u915A\u9153\u9155\u91EC\u91F4\u91F1\u91F3\u91F8\u91E4\u91F9\u91EA"],
    ["d840", "\u91EB\u91F7\u91E8\u91EE\u957A\u9586\u9588\u967C\u966D\u966B\u9671\u966F\u96BF\u976A\u9804\u98E5\u9997\u509B\u5095\u5094\u509E\u508B\u50A3\u5083\u508C\u508E\u509D\u5068\u509C\u5092\u5082\u5087\u515F\u51D4\u5312\u5311\u53A4\u53A7\u5591\u55A8\u55A5\u55AD\u5577\u5645\u55A2\u5593\u5588\u558F\u55B5\u5581\u55A3\u5592\u55A4\u557D\u558C\u55A6\u557F\u5595\u55A1\u558E\u570C\u5829\u5837"],
    ["d8a1", "\u5819\u581E\u5827\u5823\u5828\u57F5\u5848\u5825\u581C\u581B\u5833\u583F\u5836\u582E\u5839\u5838\u582D\u582C\u583B\u5961\u5AAF\u5A94\u5A9F\u5A7A\u5AA2\u5A9E\u5A78\u5AA6\u5A7C\u5AA5\u5AAC\u5A95\u5AAE\u5A37\u5A84\u5A8A\u5A97\u5A83\u5A8B\u5AA9\u5A7B\u5A7D\u5A8C\u5A9C\u5A8F\u5A93\u5A9D\u5BEA\u5BCD\u5BCB\u5BD4\u5BD1\u5BCA\u5BCE\u5C0C\u5C30\u5D37\u5D43\u5D6B\u5D41\u5D4B\u5D3F\u5D35\u5D51\u5D4E\u5D55\u5D33\u5D3A\u5D52\u5D3D\u5D31\u5D59\u5D42\u5D39\u5D49\u5D38\u5D3C\u5D32\u5D36\u5D40\u5D45\u5E44\u5E41\u5F58\u5FA6\u5FA5\u5FAB\u60C9\u60B9\u60CC\u60E2\u60CE\u60C4\u6114"],
    ["d940", "\u60F2\u610A\u6116\u6105\u60F5\u6113\u60F8\u60FC\u60FE\u60C1\u6103\u6118\u611D\u6110\u60FF\u6104\u610B\u624A\u6394\u63B1\u63B0\u63CE\u63E5\u63E8\u63EF\u63C3\u649D\u63F3\u63CA\u63E0\u63F6\u63D5\u63F2\u63F5\u6461\u63DF\u63BE\u63DD\u63DC\u63C4\u63D8\u63D3\u63C2\u63C7\u63CC\u63CB\u63C8\u63F0\u63D7\u63D9\u6532\u6567\u656A\u6564\u655C\u6568\u6565\u658C\u659D\u659E\u65AE\u65D0\u65D2"],
    ["d9a1", "\u667C\u666C\u667B\u6680\u6671\u6679\u666A\u6672\u6701\u690C\u68D3\u6904\u68DC\u692A\u68EC\u68EA\u68F1\u690F\u68D6\u68F7\u68EB\u68E4\u68F6\u6913\u6910\u68F3\u68E1\u6907\u68CC\u6908\u6970\u68B4\u6911\u68EF\u68C6\u6914\u68F8\u68D0\u68FD\u68FC\u68E8\u690B\u690A\u6917\u68CE\u68C8\u68DD\u68DE\u68E6\u68F4\u68D1\u6906\u68D4\u68E9\u6915\u6925\u68C7\u6B39\u6B3B\u6B3F\u6B3C\u6B94\u6B97\u6B99\u6B95\u6BBD\u6BF0\u6BF2\u6BF3\u6C30\u6DFC\u6E46\u6E47\u6E1F\u6E49\u6E88\u6E3C\u6E3D\u6E45\u6E62\u6E2B\u6E3F\u6E41\u6E5D\u6E73\u6E1C\u6E33\u6E4B\u6E40\u6E51\u6E3B\u6E03\u6E2E\u6E5E"],
    ["da40", "\u6E68\u6E5C\u6E61\u6E31\u6E28\u6E60\u6E71\u6E6B\u6E39\u6E22\u6E30\u6E53\u6E65\u6E27\u6E78\u6E64\u6E77\u6E55\u6E79\u6E52\u6E66\u6E35\u6E36\u6E5A\u7120\u711E\u712F\u70FB\u712E\u7131\u7123\u7125\u7122\u7132\u711F\u7128\u713A\u711B\u724B\u725A\u7288\u7289\u7286\u7285\u728B\u7312\u730B\u7330\u7322\u7331\u7333\u7327\u7332\u732D\u7326\u7323\u7335\u730C\u742E\u742C\u7430\u742B\u7416"],
    ["daa1", "\u741A\u7421\u742D\u7431\u7424\u7423\u741D\u7429\u7420\u7432\u74FB\u752F\u756F\u756C\u75E7\u75DA\u75E1\u75E6\u75DD\u75DF\u75E4\u75D7\u7695\u7692\u76DA\u7746\u7747\u7744\u774D\u7745\u774A\u774E\u774B\u774C\u77DE\u77EC\u7860\u7864\u7865\u785C\u786D\u7871\u786A\u786E\u7870\u7869\u7868\u785E\u7862\u7974\u7973\u7972\u7970\u7A02\u7A0A\u7A03\u7A0C\u7A04\u7A99\u7AE6\u7AE4\u7B4A\u7B3B\u7B44\u7B48\u7B4C\u7B4E\u7B40\u7B58\u7B45\u7CA2\u7C9E\u7CA8\u7CA1\u7D58\u7D6F\u7D63\u7D53\u7D56\u7D67\u7D6A\u7D4F\u7D6D\u7D5C\u7D6B\u7D52\u7D54\u7D69\u7D51\u7D5F\u7D4E\u7F3E\u7F3F\u7F65"],
    ["db40", "\u7F66\u7FA2\u7FA0\u7FA1\u7FD7\u8051\u804F\u8050\u80FE\u80D4\u8143\u814A\u8152\u814F\u8147\u813D\u814D\u813A\u81E6\u81EE\u81F7\u81F8\u81F9\u8204\u823C\u823D\u823F\u8275\u833B\u83CF\u83F9\u8423\u83C0\u83E8\u8412\u83E7\u83E4\u83FC\u83F6\u8410\u83C6\u83C8\u83EB\u83E3\u83BF\u8401\u83DD\u83E5\u83D8\u83FF\u83E1\u83CB\u83CE\u83D6\u83F5\u83C9\u8409\u840F\u83DE\u8411\u8406\u83C2\u83F3"],
    ["dba1", "\u83D5\u83FA\u83C7\u83D1\u83EA\u8413\u83C3\u83EC\u83EE\u83C4\u83FB\u83D7\u83E2\u841B\u83DB\u83FE\u86D8\u86E2\u86E6\u86D3\u86E3\u86DA\u86EA\u86DD\u86EB\u86DC\u86EC\u86E9\u86D7\u86E8\u86D1\u8848\u8856\u8855\u88BA\u88D7\u88B9\u88B8\u88C0\u88BE\u88B6\u88BC\u88B7\u88BD\u88B2\u8901\u88C9\u8995\u8998\u8997\u89DD\u89DA\u89DB\u8A4E\u8A4D\u8A39\u8A59\u8A40\u8A57\u8A58\u8A44\u8A45\u8A52\u8A48\u8A51\u8A4A\u8A4C\u8A4F\u8C5F\u8C81\u8C80\u8CBA\u8CBE\u8CB0\u8CB9\u8CB5\u8D84\u8D80\u8D89\u8DD8\u8DD3\u8DCD\u8DC7\u8DD6\u8DDC\u8DCF\u8DD5\u8DD9\u8DC8\u8DD7\u8DC5\u8EEF\u8EF7\u8EFA"],
    ["dc40", "\u8EF9\u8EE6\u8EEE\u8EE5\u8EF5\u8EE7\u8EE8\u8EF6\u8EEB\u8EF1\u8EEC\u8EF4\u8EE9\u902D\u9034\u902F\u9106\u912C\u9104\u90FF\u90FC\u9108\u90F9\u90FB\u9101\u9100\u9107\u9105\u9103\u9161\u9164\u915F\u9162\u9160\u9201\u920A\u9225\u9203\u921A\u9226\u920F\u920C\u9200\u9212\u91FF\u91FD\u9206\u9204\u9227\u9202\u921C\u9224\u9219\u9217\u9205\u9216\u957B\u958D\u958C\u9590\u9687\u967E\u9688"],
    ["dca1", "\u9689\u9683\u9680\u96C2\u96C8\u96C3\u96F1\u96F0\u976C\u9770\u976E\u9807\u98A9\u98EB\u9CE6\u9EF9\u4E83\u4E84\u4EB6\u50BD\u50BF\u50C6\u50AE\u50C4\u50CA\u50B4\u50C8\u50C2\u50B0\u50C1\u50BA\u50B1\u50CB\u50C9\u50B6\u50B8\u51D7\u527A\u5278\u527B\u527C\u55C3\u55DB\u55CC\u55D0\u55CB\u55CA\u55DD\u55C0\u55D4\u55C4\u55E9\u55BF\u55D2\u558D\u55CF\u55D5\u55E2\u55D6\u55C8\u55F2\u55CD\u55D9\u55C2\u5714\u5853\u5868\u5864\u584F\u584D\u5849\u586F\u5855\u584E\u585D\u5859\u5865\u585B\u583D\u5863\u5871\u58FC\u5AC7\u5AC4\u5ACB\u5ABA\u5AB8\u5AB1\u5AB5\u5AB0\u5ABF\u5AC8\u5ABB\u5AC6"],
    ["dd40", "\u5AB7\u5AC0\u5ACA\u5AB4\u5AB6\u5ACD\u5AB9\u5A90\u5BD6\u5BD8\u5BD9\u5C1F\u5C33\u5D71\u5D63\u5D4A\u5D65\u5D72\u5D6C\u5D5E\u5D68\u5D67\u5D62\u5DF0\u5E4F\u5E4E\u5E4A\u5E4D\u5E4B\u5EC5\u5ECC\u5EC6\u5ECB\u5EC7\u5F40\u5FAF\u5FAD\u60F7\u6149\u614A\u612B\u6145\u6136\u6132\u612E\u6146\u612F\u614F\u6129\u6140\u6220\u9168\u6223\u6225\u6224\u63C5\u63F1\u63EB\u6410\u6412\u6409\u6420\u6424"],
    ["dda1", "\u6433\u6443\u641F\u6415\u6418\u6439\u6437\u6422\u6423\u640C\u6426\u6430\u6428\u6441\u6435\u642F\u640A\u641A\u6440\u6425\u6427\u640B\u63E7\u641B\u642E\u6421\u640E\u656F\u6592\u65D3\u6686\u668C\u6695\u6690\u668B\u668A\u6699\u6694\u6678\u6720\u6966\u695F\u6938\u694E\u6962\u6971\u693F\u6945\u696A\u6939\u6942\u6957\u6959\u697A\u6948\u6949\u6935\u696C\u6933\u693D\u6965\u68F0\u6978\u6934\u6969\u6940\u696F\u6944\u6976\u6958\u6941\u6974\u694C\u693B\u694B\u6937\u695C\u694F\u6951\u6932\u6952\u692F\u697B\u693C\u6B46\u6B45\u6B43\u6B42\u6B48\u6B41\u6B9B\uFA0D\u6BFB\u6BFC"],
    ["de40", "\u6BF9\u6BF7\u6BF8\u6E9B\u6ED6\u6EC8\u6E8F\u6EC0\u6E9F\u6E93\u6E94\u6EA0\u6EB1\u6EB9\u6EC6\u6ED2\u6EBD\u6EC1\u6E9E\u6EC9\u6EB7\u6EB0\u6ECD\u6EA6\u6ECF\u6EB2\u6EBE\u6EC3\u6EDC\u6ED8\u6E99\u6E92\u6E8E\u6E8D\u6EA4\u6EA1\u6EBF\u6EB3\u6ED0\u6ECA\u6E97\u6EAE\u6EA3\u7147\u7154\u7152\u7163\u7160\u7141\u715D\u7162\u7172\u7178\u716A\u7161\u7142\u7158\u7143\u714B\u7170\u715F\u7150\u7153"],
    ["dea1", "\u7144\u714D\u715A\u724F\u728D\u728C\u7291\u7290\u728E\u733C\u7342\u733B\u733A\u7340\u734A\u7349\u7444\u744A\u744B\u7452\u7451\u7457\u7440\u744F\u7450\u744E\u7442\u7446\u744D\u7454\u74E1\u74FF\u74FE\u74FD\u751D\u7579\u7577\u6983\u75EF\u760F\u7603\u75F7\u75FE\u75FC\u75F9\u75F8\u7610\u75FB\u75F6\u75ED\u75F5\u75FD\u7699\u76B5\u76DD\u7755\u775F\u7760\u7752\u7756\u775A\u7769\u7767\u7754\u7759\u776D\u77E0\u7887\u789A\u7894\u788F\u7884\u7895\u7885\u7886\u78A1\u7883\u7879\u7899\u7880\u7896\u787B\u797C\u7982\u797D\u7979\u7A11\u7A18\u7A19\u7A12\u7A17\u7A15\u7A22\u7A13"],
    ["df40", "\u7A1B\u7A10\u7AA3\u7AA2\u7A9E\u7AEB\u7B66\u7B64\u7B6D\u7B74\u7B69\u7B72\u7B65\u7B73\u7B71\u7B70\u7B61\u7B78\u7B76\u7B63\u7CB2\u7CB4\u7CAF\u7D88\u7D86\u7D80\u7D8D\u7D7F\u7D85\u7D7A\u7D8E\u7D7B\u7D83\u7D7C\u7D8C\u7D94\u7D84\u7D7D\u7D92\u7F6D\u7F6B\u7F67\u7F68\u7F6C\u7FA6\u7FA5\u7FA7\u7FDB\u7FDC\u8021\u8164\u8160\u8177\u815C\u8169\u815B\u8162\u8172\u6721\u815E\u8176\u8167\u816F"],
    ["dfa1", "\u8144\u8161\u821D\u8249\u8244\u8240\u8242\u8245\u84F1\u843F\u8456\u8476\u8479\u848F\u848D\u8465\u8451\u8440\u8486\u8467\u8430\u844D\u847D\u845A\u8459\u8474\u8473\u845D\u8507\u845E\u8437\u843A\u8434\u847A\u8443\u8478\u8432\u8445\u8429\u83D9\u844B\u842F\u8442\u842D\u845F\u8470\u8439\u844E\u844C\u8452\u846F\u84C5\u848E\u843B\u8447\u8436\u8433\u8468\u847E\u8444\u842B\u8460\u8454\u846E\u8450\u870B\u8704\u86F7\u870C\u86FA\u86D6\u86F5\u874D\u86F8\u870E\u8709\u8701\u86F6\u870D\u8705\u88D6\u88CB\u88CD\u88CE\u88DE\u88DB\u88DA\u88CC\u88D0\u8985\u899B\u89DF\u89E5\u89E4"],
    ["e040", "\u89E1\u89E0\u89E2\u89DC\u89E6\u8A76\u8A86\u8A7F\u8A61\u8A3F\u8A77\u8A82\u8A84\u8A75\u8A83\u8A81\u8A74\u8A7A\u8C3C\u8C4B\u8C4A\u8C65\u8C64\u8C66\u8C86\u8C84\u8C85\u8CCC\u8D68\u8D69\u8D91\u8D8C\u8D8E\u8D8F\u8D8D\u8D93\u8D94\u8D90\u8D92\u8DF0\u8DE0\u8DEC\u8DF1\u8DEE\u8DD0\u8DE9\u8DE3\u8DE2\u8DE7\u8DF2\u8DEB\u8DF4\u8F06\u8EFF\u8F01\u8F00\u8F05\u8F07\u8F08\u8F02\u8F0B\u9052\u903F"],
    ["e0a1", "\u9044\u9049\u903D\u9110\u910D\u910F\u9111\u9116\u9114\u910B\u910E\u916E\u916F\u9248\u9252\u9230\u923A\u9266\u9233\u9265\u925E\u9283\u922E\u924A\u9246\u926D\u926C\u924F\u9260\u9267\u926F\u9236\u9261\u9270\u9231\u9254\u9263\u9250\u9272\u924E\u9253\u924C\u9256\u9232\u959F\u959C\u959E\u959B\u9692\u9693\u9691\u9697\u96CE\u96FA\u96FD\u96F8\u96F5\u9773\u9777\u9778\u9772\u980F\u980D\u980E\u98AC\u98F6\u98F9\u99AF\u99B2\u99B0\u99B5\u9AAD\u9AAB\u9B5B\u9CEA\u9CED\u9CE7\u9E80\u9EFD\u50E6\u50D4\u50D7\u50E8\u50F3\u50DB\u50EA\u50DD\u50E4\u50D3\u50EC\u50F0\u50EF\u50E3\u50E0"],
    ["e140", "\u51D8\u5280\u5281\u52E9\u52EB\u5330\u53AC\u5627\u5615\u560C\u5612\u55FC\u560F\u561C\u5601\u5613\u5602\u55FA\u561D\u5604\u55FF\u55F9\u5889\u587C\u5890\u5898\u5886\u5881\u587F\u5874\u588B\u587A\u5887\u5891\u588E\u5876\u5882\u5888\u587B\u5894\u588F\u58FE\u596B\u5ADC\u5AEE\u5AE5\u5AD5\u5AEA\u5ADA\u5AED\u5AEB\u5AF3\u5AE2\u5AE0\u5ADB\u5AEC\u5ADE\u5ADD\u5AD9\u5AE8\u5ADF\u5B77\u5BE0"],
    ["e1a1", "\u5BE3\u5C63\u5D82\u5D80\u5D7D\u5D86\u5D7A\u5D81\u5D77\u5D8A\u5D89\u5D88\u5D7E\u5D7C\u5D8D\u5D79\u5D7F\u5E58\u5E59\u5E53\u5ED8\u5ED1\u5ED7\u5ECE\u5EDC\u5ED5\u5ED9\u5ED2\u5ED4\u5F44\u5F43\u5F6F\u5FB6\u612C\u6128\u6141\u615E\u6171\u6173\u6152\u6153\u6172\u616C\u6180\u6174\u6154\u617A\u615B\u6165\u613B\u616A\u6161\u6156\u6229\u6227\u622B\u642B\u644D\u645B\u645D\u6474\u6476\u6472\u6473\u647D\u6475\u6466\u64A6\u644E\u6482\u645E\u645C\u644B\u6453\u6460\u6450\u647F\u643F\u646C\u646B\u6459\u6465\u6477\u6573\u65A0\u66A1\u66A0\u669F\u6705\u6704\u6722\u69B1\u69B6\u69C9"],
    ["e240", "\u69A0\u69CE\u6996\u69B0\u69AC\u69BC\u6991\u6999\u698E\u69A7\u698D\u69A9\u69BE\u69AF\u69BF\u69C4\u69BD\u69A4\u69D4\u69B9\u69CA\u699A\u69CF\u69B3\u6993\u69AA\u69A1\u699E\u69D9\u6997\u6990\u69C2\u69B5\u69A5\u69C6\u6B4A\u6B4D\u6B4B\u6B9E\u6B9F\u6BA0\u6BC3\u6BC4\u6BFE\u6ECE\u6EF5\u6EF1\u6F03\u6F25\u6EF8\u6F37\u6EFB\u6F2E\u6F09\u6F4E\u6F19\u6F1A\u6F27\u6F18\u6F3B\u6F12\u6EED\u6F0A"],
    ["e2a1", "\u6F36\u6F73\u6EF9\u6EEE\u6F2D\u6F40\u6F30\u6F3C\u6F35\u6EEB\u6F07\u6F0E\u6F43\u6F05\u6EFD\u6EF6\u6F39\u6F1C\u6EFC\u6F3A\u6F1F\u6F0D\u6F1E\u6F08\u6F21\u7187\u7190\u7189\u7180\u7185\u7182\u718F\u717B\u7186\u7181\u7197\u7244\u7253\u7297\u7295\u7293\u7343\u734D\u7351\u734C\u7462\u7473\u7471\u7475\u7472\u7467\u746E\u7500\u7502\u7503\u757D\u7590\u7616\u7608\u760C\u7615\u7611\u760A\u7614\u76B8\u7781\u777C\u7785\u7782\u776E\u7780\u776F\u777E\u7783\u78B2\u78AA\u78B4\u78AD\u78A8\u787E\u78AB\u789E\u78A5\u78A0\u78AC\u78A2\u78A4\u7998\u798A\u798B\u7996\u7995\u7994\u7993"],
    ["e340", "\u7997\u7988\u7992\u7990\u7A2B\u7A4A\u7A30\u7A2F\u7A28\u7A26\u7AA8\u7AAB\u7AAC\u7AEE\u7B88\u7B9C\u7B8A\u7B91\u7B90\u7B96\u7B8D\u7B8C\u7B9B\u7B8E\u7B85\u7B98\u5284\u7B99\u7BA4\u7B82\u7CBB\u7CBF\u7CBC\u7CBA\u7DA7\u7DB7\u7DC2\u7DA3\u7DAA\u7DC1\u7DC0\u7DC5\u7D9D\u7DCE\u7DC4\u7DC6\u7DCB\u7DCC\u7DAF\u7DB9\u7D96\u7DBC\u7D9F\u7DA6\u7DAE\u7DA9\u7DA1\u7DC9\u7F73\u7FE2\u7FE3\u7FE5\u7FDE"],
    ["e3a1", "\u8024\u805D\u805C\u8189\u8186\u8183\u8187\u818D\u818C\u818B\u8215\u8497\u84A4\u84A1\u849F\u84BA\u84CE\u84C2\u84AC\u84AE\u84AB\u84B9\u84B4\u84C1\u84CD\u84AA\u849A\u84B1\u84D0\u849D\u84A7\u84BB\u84A2\u8494\u84C7\u84CC\u849B\u84A9\u84AF\u84A8\u84D6\u8498\u84B6\u84CF\u84A0\u84D7\u84D4\u84D2\u84DB\u84B0\u8491\u8661\u8733\u8723\u8728\u876B\u8740\u872E\u871E\u8721\u8719\u871B\u8743\u872C\u8741\u873E\u8746\u8720\u8732\u872A\u872D\u873C\u8712\u873A\u8731\u8735\u8742\u8726\u8727\u8738\u8724\u871A\u8730\u8711\u88F7\u88E7\u88F1\u88F2\u88FA\u88FE\u88EE\u88FC\u88F6\u88FB"],
    ["e440", "\u88F0\u88EC\u88EB\u899D\u89A1\u899F\u899E\u89E9\u89EB\u89E8\u8AAB\u8A99\u8A8B\u8A92\u8A8F\u8A96\u8C3D\u8C68\u8C69\u8CD5\u8CCF\u8CD7\u8D96\u8E09\u8E02\u8DFF\u8E0D\u8DFD\u8E0A\u8E03\u8E07\u8E06\u8E05\u8DFE\u8E00\u8E04\u8F10\u8F11\u8F0E\u8F0D\u9123\u911C\u9120\u9122\u911F\u911D\u911A\u9124\u9121\u911B\u917A\u9172\u9179\u9173\u92A5\u92A4\u9276\u929B\u927A\u92A0\u9294\u92AA\u928D"],
    ["e4a1", "\u92A6\u929A\u92AB\u9279\u9297\u927F\u92A3\u92EE\u928E\u9282\u9295\u92A2\u927D\u9288\u92A1\u928A\u9286\u928C\u9299\u92A7\u927E\u9287\u92A9\u929D\u928B\u922D\u969E\u96A1\u96FF\u9758\u977D\u977A\u977E\u9783\u9780\u9782\u977B\u9784\u9781\u977F\u97CE\u97CD\u9816\u98AD\u98AE\u9902\u9900\u9907\u999D\u999C\u99C3\u99B9\u99BB\u99BA\u99C2\u99BD\u99C7\u9AB1\u9AE3\u9AE7\u9B3E\u9B3F\u9B60\u9B61\u9B5F\u9CF1\u9CF2\u9CF5\u9EA7\u50FF\u5103\u5130\u50F8\u5106\u5107\u50F6\u50FE\u510B\u510C\u50FD\u510A\u528B\u528C\u52F1\u52EF\u5648\u5642\u564C\u5635\u5641\u564A\u5649\u5646\u5658"],
    ["e540", "\u565A\u5640\u5633\u563D\u562C\u563E\u5638\u562A\u563A\u571A\u58AB\u589D\u58B1\u58A0\u58A3\u58AF\u58AC\u58A5\u58A1\u58FF\u5AFF\u5AF4\u5AFD\u5AF7\u5AF6\u5B03\u5AF8\u5B02\u5AF9\u5B01\u5B07\u5B05\u5B0F\u5C67\u5D99\u5D97\u5D9F\u5D92\u5DA2\u5D93\u5D95\u5DA0\u5D9C\u5DA1\u5D9A\u5D9E\u5E69\u5E5D\u5E60\u5E5C\u7DF3\u5EDB\u5EDE\u5EE1\u5F49\u5FB2\u618B\u6183\u6179\u61B1\u61B0\u61A2\u6189"],
    ["e5a1", "\u619B\u6193\u61AF\u61AD\u619F\u6192\u61AA\u61A1\u618D\u6166\u61B3\u622D\u646E\u6470\u6496\u64A0\u6485\u6497\u649C\u648F\u648B\u648A\u648C\u64A3\u649F\u6468\u64B1\u6498\u6576\u657A\u6579\u657B\u65B2\u65B3\u66B5\u66B0\u66A9\u66B2\u66B7\u66AA\u66AF\u6A00\u6A06\u6A17\u69E5\u69F8\u6A15\u69F1\u69E4\u6A20\u69FF\u69EC\u69E2\u6A1B\u6A1D\u69FE\u6A27\u69F2\u69EE\u6A14\u69F7\u69E7\u6A40\u6A08\u69E6\u69FB\u6A0D\u69FC\u69EB\u6A09\u6A04\u6A18\u6A25\u6A0F\u69F6\u6A26\u6A07\u69F4\u6A16\u6B51\u6BA5\u6BA3\u6BA2\u6BA6\u6C01\u6C00\u6BFF\u6C02\u6F41\u6F26\u6F7E\u6F87\u6FC6\u6F92"],
    ["e640", "\u6F8D\u6F89\u6F8C\u6F62\u6F4F\u6F85\u6F5A\u6F96\u6F76\u6F6C\u6F82\u6F55\u6F72\u6F52\u6F50\u6F57\u6F94\u6F93\u6F5D\u6F00\u6F61\u6F6B\u6F7D\u6F67\u6F90\u6F53\u6F8B\u6F69\u6F7F\u6F95\u6F63\u6F77\u6F6A\u6F7B\u71B2\u71AF\u719B\u71B0\u71A0\u719A\u71A9\u71B5\u719D\u71A5\u719E\u71A4\u71A1\u71AA\u719C\u71A7\u71B3\u7298\u729A\u7358\u7352\u735E\u735F\u7360\u735D\u735B\u7361\u735A\u7359"],
    ["e6a1", "\u7362\u7487\u7489\u748A\u7486\u7481\u747D\u7485\u7488\u747C\u7479\u7508\u7507\u757E\u7625\u761E\u7619\u761D\u761C\u7623\u761A\u7628\u761B\u769C\u769D\u769E\u769B\u778D\u778F\u7789\u7788\u78CD\u78BB\u78CF\u78CC\u78D1\u78CE\u78D4\u78C8\u78C3\u78C4\u78C9\u799A\u79A1\u79A0\u799C\u79A2\u799B\u6B76\u7A39\u7AB2\u7AB4\u7AB3\u7BB7\u7BCB\u7BBE\u7BAC\u7BCE\u7BAF\u7BB9\u7BCA\u7BB5\u7CC5\u7CC8\u7CCC\u7CCB\u7DF7\u7DDB\u7DEA\u7DE7\u7DD7\u7DE1\u7E03\u7DFA\u7DE6\u7DF6\u7DF1\u7DF0\u7DEE\u7DDF\u7F76\u7FAC\u7FB0\u7FAD\u7FED\u7FEB\u7FEA\u7FEC\u7FE6\u7FE8\u8064\u8067\u81A3\u819F"],
    ["e740", "\u819E\u8195\u81A2\u8199\u8197\u8216\u824F\u8253\u8252\u8250\u824E\u8251\u8524\u853B\u850F\u8500\u8529\u850E\u8509\u850D\u851F\u850A\u8527\u851C\u84FB\u852B\u84FA\u8508\u850C\u84F4\u852A\u84F2\u8515\u84F7\u84EB\u84F3\u84FC\u8512\u84EA\u84E9\u8516\u84FE\u8528\u851D\u852E\u8502\u84FD\u851E\u84F6\u8531\u8526\u84E7\u84E8\u84F0\u84EF\u84F9\u8518\u8520\u8530\u850B\u8519\u852F\u8662"],
    ["e7a1", "\u8756\u8763\u8764\u8777\u87E1\u8773\u8758\u8754\u875B\u8752\u8761\u875A\u8751\u875E\u876D\u876A\u8750\u874E\u875F\u875D\u876F\u876C\u877A\u876E\u875C\u8765\u874F\u877B\u8775\u8762\u8767\u8769\u885A\u8905\u890C\u8914\u890B\u8917\u8918\u8919\u8906\u8916\u8911\u890E\u8909\u89A2\u89A4\u89A3\u89ED\u89F0\u89EC\u8ACF\u8AC6\u8AB8\u8AD3\u8AD1\u8AD4\u8AD5\u8ABB\u8AD7\u8ABE\u8AC0\u8AC5\u8AD8\u8AC3\u8ABA\u8ABD\u8AD9\u8C3E\u8C4D\u8C8F\u8CE5\u8CDF\u8CD9\u8CE8\u8CDA\u8CDD\u8CE7\u8DA0\u8D9C\u8DA1\u8D9B\u8E20\u8E23\u8E25\u8E24\u8E2E\u8E15\u8E1B\u8E16\u8E11\u8E19\u8E26\u8E27"],
    ["e840", "\u8E14\u8E12\u8E18\u8E13\u8E1C\u8E17\u8E1A\u8F2C\u8F24\u8F18\u8F1A\u8F20\u8F23\u8F16\u8F17\u9073\u9070\u906F\u9067\u906B\u912F\u912B\u9129\u912A\u9132\u9126\u912E\u9185\u9186\u918A\u9181\u9182\u9184\u9180\u92D0\u92C3\u92C4\u92C0\u92D9\u92B6\u92CF\u92F1\u92DF\u92D8\u92E9\u92D7\u92DD\u92CC\u92EF\u92C2\u92E8\u92CA\u92C8\u92CE\u92E6\u92CD\u92D5\u92C9\u92E0\u92DE\u92E7\u92D1\u92D3"],
    ["e8a1", "\u92B5\u92E1\u92C6\u92B4\u957C\u95AC\u95AB\u95AE\u95B0\u96A4\u96A2\u96D3\u9705\u9708\u9702\u975A\u978A\u978E\u9788\u97D0\u97CF\u981E\u981D\u9826\u9829\u9828\u9820\u981B\u9827\u98B2\u9908\u98FA\u9911\u9914\u9916\u9917\u9915\u99DC\u99CD\u99CF\u99D3\u99D4\u99CE\u99C9\u99D6\u99D8\u99CB\u99D7\u99CC\u9AB3\u9AEC\u9AEB\u9AF3\u9AF2\u9AF1\u9B46\u9B43\u9B67\u9B74\u9B71\u9B66\u9B76\u9B75\u9B70\u9B68\u9B64\u9B6C\u9CFC\u9CFA\u9CFD\u9CFF\u9CF7\u9D07\u9D00\u9CF9\u9CFB\u9D08\u9D05\u9D04\u9E83\u9ED3\u9F0F\u9F10\u511C\u5113\u5117\u511A\u5111\u51DE\u5334\u53E1\u5670\u5660\u566E"],
    ["e940", "\u5673\u5666\u5663\u566D\u5672\u565E\u5677\u571C\u571B\u58C8\u58BD\u58C9\u58BF\u58BA\u58C2\u58BC\u58C6\u5B17\u5B19\u5B1B\u5B21\u5B14\u5B13\u5B10\u5B16\u5B28\u5B1A\u5B20\u5B1E\u5BEF\u5DAC\u5DB1\u5DA9\u5DA7\u5DB5\u5DB0\u5DAE\u5DAA\u5DA8\u5DB2\u5DAD\u5DAF\u5DB4\u5E67\u5E68\u5E66\u5E6F\u5EE9\u5EE7\u5EE6\u5EE8\u5EE5\u5F4B\u5FBC\u619D\u61A8\u6196\u61C5\u61B4\u61C6\u61C1\u61CC\u61BA"],
    ["e9a1", "\u61BF\u61B8\u618C\u64D7\u64D6\u64D0\u64CF\u64C9\u64BD\u6489\u64C3\u64DB\u64F3\u64D9\u6533\u657F\u657C\u65A2\u66C8\u66BE\u66C0\u66CA\u66CB\u66CF\u66BD\u66BB\u66BA\u66CC\u6723\u6A34\u6A66\u6A49\u6A67\u6A32\u6A68\u6A3E\u6A5D\u6A6D\u6A76\u6A5B\u6A51\u6A28\u6A5A\u6A3B\u6A3F\u6A41\u6A6A\u6A64\u6A50\u6A4F\u6A54\u6A6F\u6A69\u6A60\u6A3C\u6A5E\u6A56\u6A55\u6A4D\u6A4E\u6A46\u6B55\u6B54\u6B56\u6BA7\u6BAA\u6BAB\u6BC8\u6BC7\u6C04\u6C03\u6C06\u6FAD\u6FCB\u6FA3\u6FC7\u6FBC\u6FCE\u6FC8\u6F5E\u6FC4\u6FBD\u6F9E\u6FCA\u6FA8\u7004\u6FA5\u6FAE\u6FBA\u6FAC\u6FAA\u6FCF\u6FBF\u6FB8"],
    ["ea40", "\u6FA2\u6FC9\u6FAB\u6FCD\u6FAF\u6FB2\u6FB0\u71C5\u71C2\u71BF\u71B8\u71D6\u71C0\u71C1\u71CB\u71D4\u71CA\u71C7\u71CF\u71BD\u71D8\u71BC\u71C6\u71DA\u71DB\u729D\u729E\u7369\u7366\u7367\u736C\u7365\u736B\u736A\u747F\u749A\u74A0\u7494\u7492\u7495\u74A1\u750B\u7580\u762F\u762D\u7631\u763D\u7633\u763C\u7635\u7632\u7630\u76BB\u76E6\u779A\u779D\u77A1\u779C\u779B\u77A2\u77A3\u7795\u7799"],
    ["eaa1", "\u7797\u78DD\u78E9\u78E5\u78EA\u78DE\u78E3\u78DB\u78E1\u78E2\u78ED\u78DF\u78E0\u79A4\u7A44\u7A48\u7A47\u7AB6\u7AB8\u7AB5\u7AB1\u7AB7\u7BDE\u7BE3\u7BE7\u7BDD\u7BD5\u7BE5\u7BDA\u7BE8\u7BF9\u7BD4\u7BEA\u7BE2\u7BDC\u7BEB\u7BD8\u7BDF\u7CD2\u7CD4\u7CD7\u7CD0\u7CD1\u7E12\u7E21\u7E17\u7E0C\u7E1F\u7E20\u7E13\u7E0E\u7E1C\u7E15\u7E1A\u7E22\u7E0B\u7E0F\u7E16\u7E0D\u7E14\u7E25\u7E24\u7F43\u7F7B\u7F7C\u7F7A\u7FB1\u7FEF\u802A\u8029\u806C\u81B1\u81A6\u81AE\u81B9\u81B5\u81AB\u81B0\u81AC\u81B4\u81B2\u81B7\u81A7\u81F2\u8255\u8256\u8257\u8556\u8545\u856B\u854D\u8553\u8561\u8558"],
    ["eb40", "\u8540\u8546\u8564\u8541\u8562\u8544\u8551\u8547\u8563\u853E\u855B\u8571\u854E\u856E\u8575\u8555\u8567\u8560\u858C\u8566\u855D\u8554\u8565\u856C\u8663\u8665\u8664\u879B\u878F\u8797\u8793\u8792\u8788\u8781\u8796\u8798\u8779\u8787\u87A3\u8785\u8790\u8791\u879D\u8784\u8794\u879C\u879A\u8789\u891E\u8926\u8930\u892D\u892E\u8927\u8931\u8922\u8929\u8923\u892F\u892C\u891F\u89F1\u8AE0"],
    ["eba1", "\u8AE2\u8AF2\u8AF4\u8AF5\u8ADD\u8B14\u8AE4\u8ADF\u8AF0\u8AC8\u8ADE\u8AE1\u8AE8\u8AFF\u8AEF\u8AFB\u8C91\u8C92\u8C90\u8CF5\u8CEE\u8CF1\u8CF0\u8CF3\u8D6C\u8D6E\u8DA5\u8DA7\u8E33\u8E3E\u8E38\u8E40\u8E45\u8E36\u8E3C\u8E3D\u8E41\u8E30\u8E3F\u8EBD\u8F36\u8F2E\u8F35\u8F32\u8F39\u8F37\u8F34\u9076\u9079\u907B\u9086\u90FA\u9133\u9135\u9136\u9193\u9190\u9191\u918D\u918F\u9327\u931E\u9308\u931F\u9306\u930F\u937A\u9338\u933C\u931B\u9323\u9312\u9301\u9346\u932D\u930E\u930D\u92CB\u931D\u92FA\u9325\u9313\u92F9\u92F7\u9334\u9302\u9324\u92FF\u9329\u9339\u9335\u932A\u9314\u930C"],
    ["ec40", "\u930B\u92FE\u9309\u9300\u92FB\u9316\u95BC\u95CD\u95BE\u95B9\u95BA\u95B6\u95BF\u95B5\u95BD\u96A9\u96D4\u970B\u9712\u9710\u9799\u9797\u9794\u97F0\u97F8\u9835\u982F\u9832\u9924\u991F\u9927\u9929\u999E\u99EE\u99EC\u99E5\u99E4\u99F0\u99E3\u99EA\u99E9\u99E7\u9AB9\u9ABF\u9AB4\u9ABB\u9AF6\u9AFA\u9AF9\u9AF7\u9B33\u9B80\u9B85\u9B87\u9B7C\u9B7E\u9B7B\u9B82\u9B93\u9B92\u9B90\u9B7A\u9B95"],
    ["eca1", "\u9B7D\u9B88\u9D25\u9D17\u9D20\u9D1E\u9D14\u9D29\u9D1D\u9D18\u9D22\u9D10\u9D19\u9D1F\u9E88\u9E86\u9E87\u9EAE\u9EAD\u9ED5\u9ED6\u9EFA\u9F12\u9F3D\u5126\u5125\u5122\u5124\u5120\u5129\u52F4\u5693\u568C\u568D\u5686\u5684\u5683\u567E\u5682\u567F\u5681\u58D6\u58D4\u58CF\u58D2\u5B2D\u5B25\u5B32\u5B23\u5B2C\u5B27\u5B26\u5B2F\u5B2E\u5B7B\u5BF1\u5BF2\u5DB7\u5E6C\u5E6A\u5FBE\u5FBB\u61C3\u61B5\u61BC\u61E7\u61E0\u61E5\u61E4\u61E8\u61DE\u64EF\u64E9\u64E3\u64EB\u64E4\u64E8\u6581\u6580\u65B6\u65DA\u66D2\u6A8D\u6A96\u6A81\u6AA5\u6A89\u6A9F\u6A9B\u6AA1\u6A9E\u6A87\u6A93\u6A8E"],
    ["ed40", "\u6A95\u6A83\u6AA8\u6AA4\u6A91\u6A7F\u6AA6\u6A9A\u6A85\u6A8C\u6A92\u6B5B\u6BAD\u6C09\u6FCC\u6FA9\u6FF4\u6FD4\u6FE3\u6FDC\u6FED\u6FE7\u6FE6\u6FDE\u6FF2\u6FDD\u6FE2\u6FE8\u71E1\u71F1\u71E8\u71F2\u71E4\u71F0\u71E2\u7373\u736E\u736F\u7497\u74B2\u74AB\u7490\u74AA\u74AD\u74B1\u74A5\u74AF\u7510\u7511\u7512\u750F\u7584\u7643\u7648\u7649\u7647\u76A4\u76E9\u77B5\u77AB\u77B2\u77B7\u77B6"],
    ["eda1", "\u77B4\u77B1\u77A8\u77F0\u78F3\u78FD\u7902\u78FB\u78FC\u78F2\u7905\u78F9\u78FE\u7904\u79AB\u79A8\u7A5C\u7A5B\u7A56\u7A58\u7A54\u7A5A\u7ABE\u7AC0\u7AC1\u7C05\u7C0F\u7BF2\u7C00\u7BFF\u7BFB\u7C0E\u7BF4\u7C0B\u7BF3\u7C02\u7C09\u7C03\u7C01\u7BF8\u7BFD\u7C06\u7BF0\u7BF1\u7C10\u7C0A\u7CE8\u7E2D\u7E3C\u7E42\u7E33\u9848\u7E38\u7E2A\u7E49\u7E40\u7E47\u7E29\u7E4C\u7E30\u7E3B\u7E36\u7E44\u7E3A\u7F45\u7F7F\u7F7E\u7F7D\u7FF4\u7FF2\u802C\u81BB\u81C4\u81CC\u81CA\u81C5\u81C7\u81BC\u81E9\u825B\u825A\u825C\u8583\u8580\u858F\u85A7\u8595\u85A0\u858B\u85A3\u857B\u85A4\u859A\u859E"],
    ["ee40", "\u8577\u857C\u8589\u85A1\u857A\u8578\u8557\u858E\u8596\u8586\u858D\u8599\u859D\u8581\u85A2\u8582\u8588\u8585\u8579\u8576\u8598\u8590\u859F\u8668\u87BE\u87AA\u87AD\u87C5\u87B0\u87AC\u87B9\u87B5\u87BC\u87AE\u87C9\u87C3\u87C2\u87CC\u87B7\u87AF\u87C4\u87CA\u87B4\u87B6\u87BF\u87B8\u87BD\u87DE\u87B2\u8935\u8933\u893C\u893E\u8941\u8952\u8937\u8942\u89AD\u89AF\u89AE\u89F2\u89F3\u8B1E"],
    ["eea1", "\u8B18\u8B16\u8B11\u8B05\u8B0B\u8B22\u8B0F\u8B12\u8B15\u8B07\u8B0D\u8B08\u8B06\u8B1C\u8B13\u8B1A\u8C4F\u8C70\u8C72\u8C71\u8C6F\u8C95\u8C94\u8CF9\u8D6F\u8E4E\u8E4D\u8E53\u8E50\u8E4C\u8E47\u8F43\u8F40\u9085\u907E\u9138\u919A\u91A2\u919B\u9199\u919F\u91A1\u919D\u91A0\u93A1\u9383\u93AF\u9364\u9356\u9347\u937C\u9358\u935C\u9376\u9349\u9350\u9351\u9360\u936D\u938F\u934C\u936A\u9379\u9357\u9355\u9352\u934F\u9371\u9377\u937B\u9361\u935E\u9363\u9367\u9380\u934E\u9359\u95C7\u95C0\u95C9\u95C3\u95C5\u95B7\u96AE\u96B0\u96AC\u9720\u971F\u9718\u971D\u9719\u979A\u97A1\u979C"],
    ["ef40", "\u979E\u979D\u97D5\u97D4\u97F1\u9841\u9844\u984A\u9849\u9845\u9843\u9925\u992B\u992C\u992A\u9933\u9932\u992F\u992D\u9931\u9930\u9998\u99A3\u99A1\u9A02\u99FA\u99F4\u99F7\u99F9\u99F8\u99F6\u99FB\u99FD\u99FE\u99FC\u9A03\u9ABE\u9AFE\u9AFD\u9B01\u9AFC\u9B48\u9B9A\u9BA8\u9B9E\u9B9B\u9BA6\u9BA1\u9BA5\u9BA4\u9B86\u9BA2\u9BA0\u9BAF\u9D33\u9D41\u9D67\u9D36\u9D2E\u9D2F\u9D31\u9D38\u9D30"],
    ["efa1", "\u9D45\u9D42\u9D43\u9D3E\u9D37\u9D40\u9D3D\u7FF5\u9D2D\u9E8A\u9E89\u9E8D\u9EB0\u9EC8\u9EDA\u9EFB\u9EFF\u9F24\u9F23\u9F22\u9F54\u9FA0\u5131\u512D\u512E\u5698\u569C\u5697\u569A\u569D\u5699\u5970\u5B3C\u5C69\u5C6A\u5DC0\u5E6D\u5E6E\u61D8\u61DF\u61ED\u61EE\u61F1\u61EA\u61F0\u61EB\u61D6\u61E9\u64FF\u6504\u64FD\u64F8\u6501\u6503\u64FC\u6594\u65DB\u66DA\u66DB\u66D8\u6AC5\u6AB9\u6ABD\u6AE1\u6AC6\u6ABA\u6AB6\u6AB7\u6AC7\u6AB4\u6AAD\u6B5E\u6BC9\u6C0B\u7007\u700C\u700D\u7001\u7005\u7014\u700E\u6FFF\u7000\u6FFB\u7026\u6FFC\u6FF7\u700A\u7201\u71FF\u71F9\u7203\u71FD\u7376"],
    ["f040", "\u74B8\u74C0\u74B5\u74C1\u74BE\u74B6\u74BB\u74C2\u7514\u7513\u765C\u7664\u7659\u7650\u7653\u7657\u765A\u76A6\u76BD\u76EC\u77C2\u77BA\u78FF\u790C\u7913\u7914\u7909\u7910\u7912\u7911\u79AD\u79AC\u7A5F\u7C1C\u7C29\u7C19\u7C20\u7C1F\u7C2D\u7C1D\u7C26\u7C28\u7C22\u7C25\u7C30\u7E5C\u7E50\u7E56\u7E63\u7E58\u7E62\u7E5F\u7E51\u7E60\u7E57\u7E53\u7FB5\u7FB3\u7FF7\u7FF8\u8075\u81D1\u81D2"],
    ["f0a1", "\u81D0\u825F\u825E\u85B4\u85C6\u85C0\u85C3\u85C2\u85B3\u85B5\u85BD\u85C7\u85C4\u85BF\u85CB\u85CE\u85C8\u85C5\u85B1\u85B6\u85D2\u8624\u85B8\u85B7\u85BE\u8669\u87E7\u87E6\u87E2\u87DB\u87EB\u87EA\u87E5\u87DF\u87F3\u87E4\u87D4\u87DC\u87D3\u87ED\u87D8\u87E3\u87A4\u87D7\u87D9\u8801\u87F4\u87E8\u87DD\u8953\u894B\u894F\u894C\u8946\u8950\u8951\u8949\u8B2A\u8B27\u8B23\u8B33\u8B30\u8B35\u8B47\u8B2F\u8B3C\u8B3E\u8B31\u8B25\u8B37\u8B26\u8B36\u8B2E\u8B24\u8B3B\u8B3D\u8B3A\u8C42\u8C75\u8C99\u8C98\u8C97\u8CFE\u8D04\u8D02\u8D00\u8E5C\u8E62\u8E60\u8E57\u8E56\u8E5E\u8E65\u8E67"],
    ["f140", "\u8E5B\u8E5A\u8E61\u8E5D\u8E69\u8E54\u8F46\u8F47\u8F48\u8F4B\u9128\u913A\u913B\u913E\u91A8\u91A5\u91A7\u91AF\u91AA\u93B5\u938C\u9392\u93B7\u939B\u939D\u9389\u93A7\u938E\u93AA\u939E\u93A6\u9395\u9388\u9399\u939F\u938D\u93B1\u9391\u93B2\u93A4\u93A8\u93B4\u93A3\u93A5\u95D2\u95D3\u95D1\u96B3\u96D7\u96DA\u5DC2\u96DF\u96D8\u96DD\u9723\u9722\u9725\u97AC\u97AE\u97A8\u97AB\u97A4\u97AA"],
    ["f1a1", "\u97A2\u97A5\u97D7\u97D9\u97D6\u97D8\u97FA\u9850\u9851\u9852\u98B8\u9941\u993C\u993A\u9A0F\u9A0B\u9A09\u9A0D\u9A04\u9A11\u9A0A\u9A05\u9A07\u9A06\u9AC0\u9ADC\u9B08\u9B04\u9B05\u9B29\u9B35\u9B4A\u9B4C\u9B4B\u9BC7\u9BC6\u9BC3\u9BBF\u9BC1\u9BB5\u9BB8\u9BD3\u9BB6\u9BC4\u9BB9\u9BBD\u9D5C\u9D53\u9D4F\u9D4A\u9D5B\u9D4B\u9D59\u9D56\u9D4C\u9D57\u9D52\u9D54\u9D5F\u9D58\u9D5A\u9E8E\u9E8C\u9EDF\u9F01\u9F00\u9F16\u9F25\u9F2B\u9F2A\u9F29\u9F28\u9F4C\u9F55\u5134\u5135\u5296\u52F7\u53B4\u56AB\u56AD\u56A6\u56A7\u56AA\u56AC\u58DA\u58DD\u58DB\u5912\u5B3D\u5B3E\u5B3F\u5DC3\u5E70"],
    ["f240", "\u5FBF\u61FB\u6507\u6510\u650D\u6509\u650C\u650E\u6584\u65DE\u65DD\u66DE\u6AE7\u6AE0\u6ACC\u6AD1\u6AD9\u6ACB\u6ADF\u6ADC\u6AD0\u6AEB\u6ACF\u6ACD\u6ADE\u6B60\u6BB0\u6C0C\u7019\u7027\u7020\u7016\u702B\u7021\u7022\u7023\u7029\u7017\u7024\u701C\u702A\u720C\u720A\u7207\u7202\u7205\u72A5\u72A6\u72A4\u72A3\u72A1\u74CB\u74C5\u74B7\u74C3\u7516\u7660\u77C9\u77CA\u77C4\u77F1\u791D\u791B"],
    ["f2a1", "\u7921\u791C\u7917\u791E\u79B0\u7A67\u7A68\u7C33\u7C3C\u7C39\u7C2C\u7C3B\u7CEC\u7CEA\u7E76\u7E75\u7E78\u7E70\u7E77\u7E6F\u7E7A\u7E72\u7E74\u7E68\u7F4B\u7F4A\u7F83\u7F86\u7FB7\u7FFD\u7FFE\u8078\u81D7\u81D5\u8264\u8261\u8263\u85EB\u85F1\u85ED\u85D9\u85E1\u85E8\u85DA\u85D7\u85EC\u85F2\u85F8\u85D8\u85DF\u85E3\u85DC\u85D1\u85F0\u85E6\u85EF\u85DE\u85E2\u8800\u87FA\u8803\u87F6\u87F7\u8809\u880C\u880B\u8806\u87FC\u8808\u87FF\u880A\u8802\u8962\u895A\u895B\u8957\u8961\u895C\u8958\u895D\u8959\u8988\u89B7\u89B6\u89F6\u8B50\u8B48\u8B4A\u8B40\u8B53\u8B56\u8B54\u8B4B\u8B55"],
    ["f340", "\u8B51\u8B42\u8B52\u8B57\u8C43\u8C77\u8C76\u8C9A\u8D06\u8D07\u8D09\u8DAC\u8DAA\u8DAD\u8DAB\u8E6D\u8E78\u8E73\u8E6A\u8E6F\u8E7B\u8EC2\u8F52\u8F51\u8F4F\u8F50\u8F53\u8FB4\u9140\u913F\u91B0\u91AD\u93DE\u93C7\u93CF\u93C2\u93DA\u93D0\u93F9\u93EC\u93CC\u93D9\u93A9\u93E6\u93CA\u93D4\u93EE\u93E3\u93D5\u93C4\u93CE\u93C0\u93D2\u93E7\u957D\u95DA\u95DB\u96E1\u9729\u972B\u972C\u9728\u9726"],
    ["f3a1", "\u97B3\u97B7\u97B6\u97DD\u97DE\u97DF\u985C\u9859\u985D\u9857\u98BF\u98BD\u98BB\u98BE\u9948\u9947\u9943\u99A6\u99A7\u9A1A\u9A15\u9A25\u9A1D\u9A24\u9A1B\u9A22\u9A20\u9A27\u9A23\u9A1E\u9A1C\u9A14\u9AC2\u9B0B\u9B0A\u9B0E\u9B0C\u9B37\u9BEA\u9BEB\u9BE0\u9BDE\u9BE4\u9BE6\u9BE2\u9BF0\u9BD4\u9BD7\u9BEC\u9BDC\u9BD9\u9BE5\u9BD5\u9BE1\u9BDA\u9D77\u9D81\u9D8A\u9D84\u9D88\u9D71\u9D80\u9D78\u9D86\u9D8B\u9D8C\u9D7D\u9D6B\u9D74\u9D75\u9D70\u9D69\u9D85\u9D73\u9D7B\u9D82\u9D6F\u9D79\u9D7F\u9D87\u9D68\u9E94\u9E91\u9EC0\u9EFC\u9F2D\u9F40\u9F41\u9F4D\u9F56\u9F57\u9F58\u5337\u56B2"],
    ["f440", "\u56B5\u56B3\u58E3\u5B45\u5DC6\u5DC7\u5EEE\u5EEF\u5FC0\u5FC1\u61F9\u6517\u6516\u6515\u6513\u65DF\u66E8\u66E3\u66E4\u6AF3\u6AF0\u6AEA\u6AE8\u6AF9\u6AF1\u6AEE\u6AEF\u703C\u7035\u702F\u7037\u7034\u7031\u7042\u7038\u703F\u703A\u7039\u7040\u703B\u7033\u7041\u7213\u7214\u72A8\u737D\u737C\u74BA\u76AB\u76AA\u76BE\u76ED\u77CC\u77CE\u77CF\u77CD\u77F2\u7925\u7923\u7927\u7928\u7924\u7929"],
    ["f4a1", "\u79B2\u7A6E\u7A6C\u7A6D\u7AF7\u7C49\u7C48\u7C4A\u7C47\u7C45\u7CEE\u7E7B\u7E7E\u7E81\u7E80\u7FBA\u7FFF\u8079\u81DB\u81D9\u820B\u8268\u8269\u8622\u85FF\u8601\u85FE\u861B\u8600\u85F6\u8604\u8609\u8605\u860C\u85FD\u8819\u8810\u8811\u8817\u8813\u8816\u8963\u8966\u89B9\u89F7\u8B60\u8B6A\u8B5D\u8B68\u8B63\u8B65\u8B67\u8B6D\u8DAE\u8E86\u8E88\u8E84\u8F59\u8F56\u8F57\u8F55\u8F58\u8F5A\u908D\u9143\u9141\u91B7\u91B5\u91B2\u91B3\u940B\u9413\u93FB\u9420\u940F\u9414\u93FE\u9415\u9410\u9428\u9419\u940D\u93F5\u9400\u93F7\u9407\u940E\u9416\u9412\u93FA\u9409\u93F8\u940A\u93FF"],
    ["f540", "\u93FC\u940C\u93F6\u9411\u9406\u95DE\u95E0\u95DF\u972E\u972F\u97B9\u97BB\u97FD\u97FE\u9860\u9862\u9863\u985F\u98C1\u98C2\u9950\u994E\u9959\u994C\u994B\u9953\u9A32\u9A34\u9A31\u9A2C\u9A2A\u9A36\u9A29\u9A2E\u9A38\u9A2D\u9AC7\u9ACA\u9AC6\u9B10\u9B12\u9B11\u9C0B\u9C08\u9BF7\u9C05\u9C12\u9BF8\u9C40\u9C07\u9C0E\u9C06\u9C17\u9C14\u9C09\u9D9F\u9D99\u9DA4\u9D9D\u9D92\u9D98\u9D90\u9D9B"],
    ["f5a1", "\u9DA0\u9D94\u9D9C\u9DAA\u9D97\u9DA1\u9D9A\u9DA2\u9DA8\u9D9E\u9DA3\u9DBF\u9DA9\u9D96\u9DA6\u9DA7\u9E99\u9E9B\u9E9A\u9EE5\u9EE4\u9EE7\u9EE6\u9F30\u9F2E\u9F5B\u9F60\u9F5E\u9F5D\u9F59\u9F91\u513A\u5139\u5298\u5297\u56C3\u56BD\u56BE\u5B48\u5B47\u5DCB\u5DCF\u5EF1\u61FD\u651B\u6B02\u6AFC\u6B03\u6AF8\u6B00\u7043\u7044\u704A\u7048\u7049\u7045\u7046\u721D\u721A\u7219\u737E\u7517\u766A\u77D0\u792D\u7931\u792F\u7C54\u7C53\u7CF2\u7E8A\u7E87\u7E88\u7E8B\u7E86\u7E8D\u7F4D\u7FBB\u8030\u81DD\u8618\u862A\u8626\u861F\u8623\u861C\u8619\u8627\u862E\u8621\u8620\u8629\u861E\u8625"],
    ["f640", "\u8829\u881D\u881B\u8820\u8824\u881C\u882B\u884A\u896D\u8969\u896E\u896B\u89FA\u8B79\u8B78\u8B45\u8B7A\u8B7B\u8D10\u8D14\u8DAF\u8E8E\u8E8C\u8F5E\u8F5B\u8F5D\u9146\u9144\u9145\u91B9\u943F\u943B\u9436\u9429\u943D\u943C\u9430\u9439\u942A\u9437\u942C\u9440\u9431\u95E5\u95E4\u95E3\u9735\u973A\u97BF\u97E1\u9864\u98C9\u98C6\u98C0\u9958\u9956\u9A39\u9A3D\u9A46\u9A44\u9A42\u9A41\u9A3A"],
    ["f6a1", "\u9A3F\u9ACD\u9B15\u9B17\u9B18\u9B16\u9B3A\u9B52\u9C2B\u9C1D\u9C1C\u9C2C\u9C23\u9C28\u9C29\u9C24\u9C21\u9DB7\u9DB6\u9DBC\u9DC1\u9DC7\u9DCA\u9DCF\u9DBE\u9DC5\u9DC3\u9DBB\u9DB5\u9DCE\u9DB9\u9DBA\u9DAC\u9DC8\u9DB1\u9DAD\u9DCC\u9DB3\u9DCD\u9DB2\u9E7A\u9E9C\u9EEB\u9EEE\u9EED\u9F1B\u9F18\u9F1A\u9F31\u9F4E\u9F65\u9F64\u9F92\u4EB9\u56C6\u56C5\u56CB\u5971\u5B4B\u5B4C\u5DD5\u5DD1\u5EF2\u6521\u6520\u6526\u6522\u6B0B\u6B08\u6B09\u6C0D\u7055\u7056\u7057\u7052\u721E\u721F\u72A9\u737F\u74D8\u74D5\u74D9\u74D7\u766D\u76AD\u7935\u79B4\u7A70\u7A71\u7C57\u7C5C\u7C59\u7C5B\u7C5A"],
    ["f740", "\u7CF4\u7CF1\u7E91\u7F4F\u7F87\u81DE\u826B\u8634\u8635\u8633\u862C\u8632\u8636\u882C\u8828\u8826\u882A\u8825\u8971\u89BF\u89BE\u89FB\u8B7E\u8B84\u8B82\u8B86\u8B85\u8B7F\u8D15\u8E95\u8E94\u8E9A\u8E92\u8E90\u8E96\u8E97\u8F60\u8F62\u9147\u944C\u9450\u944A\u944B\u944F\u9447\u9445\u9448\u9449\u9446\u973F\u97E3\u986A\u9869\u98CB\u9954\u995B\u9A4E\u9A53\u9A54\u9A4C\u9A4F\u9A48\u9A4A"],
    ["f7a1", "\u9A49\u9A52\u9A50\u9AD0\u9B19\u9B2B\u9B3B\u9B56\u9B55\u9C46\u9C48\u9C3F\u9C44\u9C39\u9C33\u9C41\u9C3C\u9C37\u9C34\u9C32\u9C3D\u9C36\u9DDB\u9DD2\u9DDE\u9DDA\u9DCB\u9DD0\u9DDC\u9DD1\u9DDF\u9DE9\u9DD9\u9DD8\u9DD6\u9DF5\u9DD5\u9DDD\u9EB6\u9EF0\u9F35\u9F33\u9F32\u9F42\u9F6B\u9F95\u9FA2\u513D\u5299\u58E8\u58E7\u5972\u5B4D\u5DD8\u882F\u5F4F\u6201\u6203\u6204\u6529\u6525\u6596\u66EB\u6B11\u6B12\u6B0F\u6BCA\u705B\u705A\u7222\u7382\u7381\u7383\u7670\u77D4\u7C67\u7C66\u7E95\u826C\u863A\u8640\u8639\u863C\u8631\u863B\u863E\u8830\u8832\u882E\u8833\u8976\u8974\u8973\u89FE"],
    ["f840", "\u8B8C\u8B8E\u8B8B\u8B88\u8C45\u8D19\u8E98\u8F64\u8F63\u91BC\u9462\u9455\u945D\u9457\u945E\u97C4\u97C5\u9800\u9A56\u9A59\u9B1E\u9B1F\u9B20\u9C52\u9C58\u9C50\u9C4A\u9C4D\u9C4B\u9C55\u9C59\u9C4C\u9C4E\u9DFB\u9DF7\u9DEF\u9DE3\u9DEB\u9DF8\u9DE4\u9DF6\u9DE1\u9DEE\u9DE6\u9DF2\u9DF0\u9DE2\u9DEC\u9DF4\u9DF3\u9DE8\u9DED\u9EC2\u9ED0\u9EF2\u9EF3\u9F06\u9F1C\u9F38\u9F37\u9F36\u9F43\u9F4F"],
    ["f8a1", "\u9F71\u9F70\u9F6E\u9F6F\u56D3\u56CD\u5B4E\u5C6D\u652D\u66ED\u66EE\u6B13\u705F\u7061\u705D\u7060\u7223\u74DB\u74E5\u77D5\u7938\u79B7\u79B6\u7C6A\u7E97\u7F89\u826D\u8643\u8838\u8837\u8835\u884B\u8B94\u8B95\u8E9E\u8E9F\u8EA0\u8E9D\u91BE\u91BD\u91C2\u946B\u9468\u9469\u96E5\u9746\u9743\u9747\u97C7\u97E5\u9A5E\u9AD5\u9B59\u9C63\u9C67\u9C66\u9C62\u9C5E\u9C60\u9E02\u9DFE\u9E07\u9E03\u9E06\u9E05\u9E00\u9E01\u9E09\u9DFF\u9DFD\u9E04\u9EA0\u9F1E\u9F46\u9F74\u9F75\u9F76\u56D4\u652E\u65B8\u6B18\u6B19\u6B17\u6B1A\u7062\u7226\u72AA\u77D8\u77D9\u7939\u7C69\u7C6B\u7CF6\u7E9A"],
    ["f940", "\u7E98\u7E9B\u7E99\u81E0\u81E1\u8646\u8647\u8648\u8979\u897A\u897C\u897B\u89FF\u8B98\u8B99\u8EA5\u8EA4\u8EA3\u946E\u946D\u946F\u9471\u9473\u9749\u9872\u995F\u9C68\u9C6E\u9C6D\u9E0B\u9E0D\u9E10\u9E0F\u9E12\u9E11\u9EA1\u9EF5\u9F09\u9F47\u9F78\u9F7B\u9F7A\u9F79\u571E\u7066\u7C6F\u883C\u8DB2\u8EA6\u91C3\u9474\u9478\u9476\u9475\u9A60\u9C74\u9C73\u9C71\u9C75\u9E14\u9E13\u9EF6\u9F0A"],
    ["f9a1", "\u9FA4\u7068\u7065\u7CF7\u866A\u883E\u883D\u883F\u8B9E\u8C9C\u8EA9\u8EC9\u974B\u9873\u9874\u98CC\u9961\u99AB\u9A64\u9A66\u9A67\u9B24\u9E15\u9E17\u9F48\u6207\u6B1E\u7227\u864C\u8EA8\u9482\u9480\u9481\u9A69\u9A68\u9B2E\u9E19\u7229\u864B\u8B9F\u9483\u9C79\u9EB7\u7675\u9A6B\u9C7A\u9E1D\u7069\u706A\u9EA4\u9F7E\u9F49\u9F98\u7881\u92B9\u88CF\u58BB\u6052\u7CA7\u5AFA\u2554\u2566\u2557\u2560\u256C\u2563\u255A\u2569\u255D\u2552\u2564\u2555\u255E\u256A\u2561\u2558\u2567\u255B\u2553\u2565\u2556\u255F\u256B\u2562\u2559\u2568\u255C\u2551\u2550\u256D\u256E\u2570\u256F\u2593"]
  ];
});

// node_modules/iconv-lite/encodings/tables/big5-added.json
var require_big5_added = __commonJS((exports, module) => {
  module.exports = [
    ["8740", "\u43F0\u4C32\u4603\u45A6\u4578\uD85C\uDE67\u4D77\u45B3\uD85F\uDCB1\u4CE2\uD85F\uDCC5\u3B95\u4736\u4744\u4C47\u4C40\uD850\uDEBF\uD84D\uDE17\uD85C\uDF52\uD85B\uDE8B\uD85C\uDCD2\u4C57\uD868\uDF51\u474F\u45DA\u4C85\uD85F\uDC6C\u4D07\u4AA4\u46A1\uD85A\uDF23\u7225\uD856\uDE54\uD846\uDE63\uD84F\uDE06\uD84F\uDF61\u664D\u56FB"],
    ["8767", "\u7D95\u591D\uD862\uDFB9\u3DF4\u9734\uD85E\uDFEF\u5BDB\uD847\uDD5E\u5AA4\u3625\uD867\uDEB0\u5AD1\u5BB7\u5CFC\u676E\u8593\uD866\uDD45\u7461\u749D\u3875\uD847\uDD53\uD84D\uDE9E\uD858\uDC21\u3EEC"],
    ["87a1", "\uD856\uDCDE\u3AF5\u7AFC\u9F97\uD850\uDD61\uD862\uDD0D\uD84C\uDDEA\uD842\uDE8A\uD84C\uDE5E\u430A\u8484\u9F96\u942F\u4930\u8613\u5896\u974A\u9218\u79D0\u7A32\u6660\u6A29\u889D\u744C\u7BC5\u6782\u7A2C\u524F\u9046\u34E6\u73C4\uD857\uDDB9\u74C6\u9FC7\u57B3\u492F\u544C\u4131\uD84D\uDE8E\u5818\u7A72\uD85E\uDF65\u8B8F\u46AE\uD85B\uDE88\u4181\uD857\uDD99\u7BAE\uD849\uDCBC\u9FC8\uD849\uDCC1\uD849\uDCC9\uD849\uDCCC\u9FC9\u8504\uD84D\uDDBB\u40B4\u9FCA\u44E1\uD86B\uDDFF\u62C1\u706E\u9FCB"],
    ["8840", "\u31C0", 4, "\uD840\uDD0C\u31C5\uD840\uDCD1\uD840\uDCCD\u31C6\u31C7\uD840\uDCCB\uD847\uDFE8\u31C8\uD840\uDCCA\u31C9\u31CA\u31CB\u31CC\uD840\uDD0E\u31CD\u31CE\u0100\xC1\u01CD\xC0\u0112\xC9\u011A\xC8\u014C\xD3\u01D1\xD2\u0FFF\xCA\u0304\u1EBE\u0FFF\xCA\u030C\u1EC0\xCA\u0101\xE1\u01CE\xE0\u0251\u0113\xE9\u011B\xE8\u012B\xED\u01D0\xEC\u014D\xF3\u01D2\xF2\u016B\xFA\u01D4\xF9\u01D6\u01D8\u01DA"],
    ["88a1", "\u01DC\xFC\u0FFF\xEA\u0304\u1EBF\u0FFF\xEA\u030C\u1EC1\xEA\u0261\u23DA\u23DB"],
    ["8940", "\uD868\uDFA9\uD844\uDD45"],
    ["8943", "\u650A"],
    ["8946", "\u4E3D\u6EDD\u9D4E\u91DF"],
    ["894c", "\uD85D\uDF35\u6491\u4F1A\u4F28\u4FA8\u5156\u5174\u519C\u51E4\u52A1\u52A8\u533B\u534E\u53D1\u53D8\u56E2\u58F0\u5904\u5907\u5932\u5934\u5B66\u5B9E\u5B9F\u5C9A\u5E86\u603B\u6589\u67FE\u6804\u6865\u6D4E\u70BC\u7535\u7EA4\u7EAC\u7EBA\u7EC7\u7ECF\u7EDF\u7F06\u7F37\u827A\u82CF\u836F\u89C6\u8BBE\u8BE2\u8F66\u8F67\u8F6E"],
    ["89a1", "\u7411\u7CFC\u7DCD\u6946\u7AC9\u5227"],
    ["89ab", "\u918C\u78B8\u915E\u80BC"],
    ["89b0", "\u8D0B\u80F6\uD842\uDDE7"],
    ["89b5", "\u809F\u9EC7\u4CCD\u9DC9\u9E0C\u4C3E\uD867\uDDF6\uD85C\uDC0E\u9E0A\uD868\uDD33\u35C1"],
    ["89c1", "\u6E9A\u823E\u7519"],
    ["89c5", "\u4911\u9A6C\u9A8F\u9F99\u7987\uD861\uDC6C\uD847\uDDCA\uD841\uDDD0\uD84A\uDEE6\u4E24\u4E81\u4E80\u4E87\u4EBF\u4EEB\u4F37\u344C\u4FBD\u3E48\u5003\u5088\u347D\u3493\u34A5\u5186\u5905\u51DB\u51FC\u5205\u4E89\u5279\u5290\u5327\u35C7\u53A9\u3551\u53B0\u3553\u53C2\u5423\u356D\u3572\u3681\u5493\u54A3\u54B4\u54B9\u54D0\u54EF\u5518\u5523\u5528\u3598\u553F\u35A5\u35BF\u55D7\u35C5"],
    ["8a40", "\uD85F\uDD84\u5525"],
    ["8a43", "\uD843\uDC42\uD843\uDD15\uD854\uDD2B\u5590\uD84B\uDCC6\u39EC\uD840\uDF41\u8E46\uD853\uDDB8\uD865\uDCE5\u4053\uD860\uDCBE\u777A\uD84B\uDC38\u3A34\u47D5\uD860\uDD5D\uD85A\uDDF2\uD853\uDDEA\u64DD\uD843\uDD7C\uD843\uDFB4\uD843\uDCD5\uD844\uDCF4\u648D\u8E7E\uD843\uDE96\uD843\uDC0B\uD843\uDF64\uD84B\uDCA9\uD860\uDE56\uD851\uDCD3"],
    ["8a64", "\uD843\uDD46\uD866\uDE4D\uD860\uDCE9\u47F4\uD853\uDEA7\uD84B\uDCC2\u9AB2\u3A67\uD865\uDDF4\u3FED\u3506\uD854\uDEC7\uD865\uDFD4\uD85E\uDCC8\uD84B\uDD44\u9D6E\u9815"],
    ["8a76", "\u43D9\uD858\uDCA5\u64B4\u54E3\uD84B\uDD4C\uD84A\uDFCA\uD844\uDC77\u39FB\uD844\uDC6F"],
    ["8aa1", "\uD859\uDEDA\uD859\uDF16\uD85E\uDDA0\u64EA\uD854\uDC52\uD843\uDC43\u8E68\uD848\uDDA1\uD862\uDF4C\uD841\uDF31"],
    ["8aac", "\u480B\uD840\uDDA9\u3FFA\u5873\uD84B\uDD8D"],
    ["8ab2", "\uD851\uDDC8\uD841\uDCFC\uD858\uDC97\uD843\uDF4C\uD843\uDD96\u5579\u40BB\u43BA"],
    ["8abb", "\u4AB4\uD84A\uDE66\uD844\uDC9D\u81AA\u98F5\uD843\uDD9C\u6379\u39FE\uD849\uDF75\u8DC0\u56A1\u647C\u3E43"],
    ["8ac9", "\uD869\uDE01\uD843\uDE09\uD84A\uDECF\uD84B\uDCC9"],
    ["8ace", "\uD844\uDCC8\uD84E\uDDC2\u3992\u3A06\uD860\uDE9B\u3578\uD857\uDE49\uD848\uDCC7\u5652\uD843\uDF31\uD84B\uDCB2\uD865\uDF20\u34BC\u6C3D\uD853\uDE3B"],
    ["8adf", "\uD85D\uDD74\uD84B\uDE8B\uD848\uDE08\uD869\uDE5B\uD863\uDCCD\uD843\uDE7A\uD843\uDC34\uD85A\uDC1C\u7F93\uD844\uDCCF\uD84A\uDC03\uD84A\uDD39\u35FB\uD854\uDDE3\uD843\uDE8C\uD843\uDF8D\uD843\uDEAA\u3F93\uD843\uDF30\uD843\uDD47\uD844\uDD4F\uD843\uDE4C"],
    ["8af6", "\uD843\uDEAB\uD842\uDFA9\uD843\uDD48\uD844\uDCC0\uD844\uDD3D\u3FF9\uD849\uDE96\u6432\uD843\uDFAD"],
    ["8b40", "\uD84C\uDFF4\uD85D\uDE39\uD84A\uDFCE\uD843\uDD7E\uD843\uDD7F\uD84B\uDC51\uD84B\uDC55\u3A18\uD843\uDE98\uD844\uDCC7\uD843\uDF2E\uD869\uDE32\uD85A\uDF50\uD863\uDCD2\uD863\uDD99\uD863\uDCCA\u95AA\u54CC\u82C4\u55B9"],
    ["8b55", "\uD867\uDEC3\u9C26\u9AB6\uD85D\uDF5E\uD84B\uDDEE\u7140\u816D\u80EC\u5C1C\uD859\uDD72\u8134\u3797\u535F\uD860\uDCBD\u91B6\uD843\uDEFA\uD843\uDE0F\uD843\uDE77\uD843\uDEFB\u35DD\uD853\uDDEB\u3609\uD843\uDCD6\u56AF\uD849\uDFB5\uD844\uDCC9\uD843\uDE10\uD843\uDE78\uD844\uDC78\uD844\uDD48\uD860\uDE07\uD845\uDC55\uD843\uDE79\uD853\uDE50\uD84B\uDDA4\u5A54\uD844\uDC1D\uD844\uDC1E\uD844\uDCF5\uD844\uDCF6\u579C\uD843\uDE11"],
    ["8ba1", "\uD85D\uDE94\uD860\uDECD\uD843\uDFB5\uD843\uDE7B\uD854\uDD7E\u3703\uD843\uDFB6\uD844\uDD80\uD854\uDED8\uD868\uDEBD\uD852\uDDDA\uD846\uDC3A\uD850\uDD77\uD860\uDE7C\u5899\u5268\u361A\uD855\uDF3D\u7BB2\u5B68\u4800\u4B2C\u9F27\u49E7\u9C1F\u9B8D\uD856\uDF74\uD84C\uDD3D\u55FB\u35F2\u5689\u4E28\u5902\uD846\uDFC1\uD87E\uDC78\u9751\uD840\uDC86\u4E5B\u4EBB\u353E\u5C23\u5F51\u5FC4\u38FA\u624C\u6535\u6B7A\u6C35\u6C3A\u706C\u722B\u4E2C\u72AD\uD852\uDCE9\u7F52\u793B\u7CF9\u7F53\uD858\uDE6A\u34C1"],
    ["8bde", "\uD858\uDF4B\u8002\u8080\uD859\uDE12\uD85A\uDD51\u535D\u8864\u89C1\uD85E\uDCB2\u8BA0\u8D1D\u9485\u9578\u957F\u95E8\uD863\uDE0F\u97E6\u9875\u98CE\u98DE\u9963\uD866\uDC10\u9C7C\u9E1F\u9EC4\u6B6F\uF907\u4E37\uD840\uDC87\u961D\u6237\u94A2"],
    ["8c40", "\u503B\u6DFE\uD867\uDC73\u9FA6\u3DC9\u888F\uD850\uDD4E\u7077\u5CF5\u4B20\uD854\uDDCD\u3559\uD857\uDD30\u6122\uD862\uDE32\u8FA7\u91F6\u7191\u6719\u73BA\uD84C\uDE81\uD868\uDD07\u3C8B\uD846\uDD80\u4B10\u78E4\u7402\u51AE\uD861\uDF0F\u4009\u6A63\uD868\uDEBA\u4223\u860F\uD842\uDE6F\u7A2A\uD866\uDD47\uD862\uDEEA\u9755\u704D\u5324\uD848\uDC7E\u93F4\u76D9\uD862\uDDE3\u9FA7\u77DD\u4EA3\u4FF0\u50BC\u4E2F\u4F17\u9FA8\u5434\u7D8B\u5892\u58D0\uD847\uDDB6\u5E92\u5E99\u5FC2\uD849\uDF12\u658B"],
    ["8ca1", "\uD84C\uDFF9\u6919\u6A43\uD84F\uDC63\u6CFF"],
    ["8ca7", "\u7200\uD851\uDD05\u738C\u3EDB\uD852\uDE13\u5B15\u74B9\u8B83\uD857\uDCA4\uD855\uDE95\u7A93\u7BEC\u7CC3\u7E6C\u82F8\u8597\u9FA9\u8890\u9FAA\u8EB9\u9FAB\u8FCF\u855F\u99E0\u9221\u9FAC\uD863\uDDB9\uD845\uDC3F\u4071\u42A2\u5A1A"],
    ["8cc9", "\u9868\u676B\u4276\u573D"],
    ["8cce", "\u85D6\uD852\uDD7B\u82BF\uD85C\uDD0D\u4C81\uD85B\uDD74\u5D7B\uD85A\uDF15\uD85B\uDFBE\u9FAD\u9FAE\u5B96\u9FAF\u66E7\u7E5B\u6E57\u79CA\u3D88\u44C3\uD84C\uDE56\uD849\uDF96\u439A\u4536"],
    ["8ce6", "\u5CD5\uD84E\uDF1A\u8AF9\u5C78\u3D12\uD84D\uDD51\u5D78\u9FB2\u7157\u4558\uD850\uDCEC\uD847\uDE23\u4C77\u3978\u344A\uD840\uDDA4\uD85B\uDC41\u8ACC\u4FB4\uD840\uDE39\u59BF\u816C\u9856\uD866\uDCFA\u5F3B"],
    ["8d40", "\uD842\uDF9F"],
    ["8d42", "\uD848\uDDC1\uD862\uDD6D\u4102\u46BB\uD864\uDC79\u3F07\u9FB3\uD868\uDDB5\u40F8\u37D6\u46F7\uD85B\uDC46\u417C\uD861\uDEB2\uD85C\uDFFF\u456D\u38D4\uD855\uDC9A\u4561\u451B\u4D89\u4C7B\u4D76\u45EA\u3FC8\uD852\uDF0F\u3661\u44DE\u44BD\u41ED\u5D3E\u5D48\u5D56\u3DFC\u380F\u5DA4\u5DB9\u3820\u3838\u5E42\u5EBD\u5F25\u5F83\u3908\u3914\u393F\u394D\u60D7\u613D\u5CE5\u3989\u61B7\u61B9\u61CF\u39B8\u622C\u6290\u62E5\u6318\u39F8\u56B1"],
    ["8da1", "\u3A03\u63E2\u63FB\u6407\u645A\u3A4B\u64C0\u5D15\u5621\u9F9F\u3A97\u6586\u3ABD\u65FF\u6653\u3AF2\u6692\u3B22\u6716\u3B42\u67A4\u6800\u3B58\u684A\u6884\u3B72\u3B71\u3B7B\u6909\u6943\u725C\u6964\u699F\u6985\u3BBC\u69D6\u3BDD\u6A65\u6A74\u6A71\u6A82\u3BEC\u6A99\u3BF2\u6AAB\u6AB5\u6AD4\u6AF6\u6B81\u6BC1\u6BEA\u6C75\u6CAA\u3CCB\u6D02\u6D06\u6D26\u6D81\u3CEF\u6DA4\u6DB1\u6E15\u6E18\u6E29\u6E86\uD862\uDDC0\u6EBB\u6EE2\u6EDA\u9F7F\u6EE8\u6EE9\u6F24\u6F34\u3D46\uD84F\uDF41\u6F81\u6FBE\u3D6A\u3D75\u71B7\u5C99\u3D8A\u702C\u3D91\u7050\u7054\u706F\u707F\u7089\uD840\uDF25\u43C1\u35F1\uD843\uDED8"],
    ["8e40", "\uD84F\uDED7\u57BE\uD85B\uDED3\u713E\uD855\uDFE0\u364E\u69A2\uD862\uDFE9\u5B74\u7A49\uD856\uDCE1\uD865\uDCD9\u7A65\u7A7D\uD856\uDDAC\u7ABB\u7AB0\u7AC2\u7AC3\u71D1\uD859\uDC8D\u41CA\u7ADA\u7ADD\u7AEA\u41EF\u54B2\uD857\uDC01\u7B0B\u7B55\u7B29\uD854\uDF0E\uD857\uDCFE\u7BA2\u7B6F\u839C\uD856\uDFB4\uD85B\uDC7F\u7BD0\u8421\u7B92\u7BB8\uD857\uDD20\u3DAD\uD857\uDC65\u8492\u7BFA\u7C06\u7C35\uD857\uDCC1\u7C44\u7C83\uD852\uDC82\u7CA6\u667D\uD851\uDD78\u7CC9\u7CC7\u7CE6\u7C74\u7CF3\u7CF5\u7CCE"],
    ["8ea1", "\u7E67\u451D\uD85B\uDE44\u7D5D\uD85B\uDED6\u748D\u7D89\u7DAB\u7135\u7DB3\u7DD2\uD850\uDC57\uD858\uDC29\u7DE4\u3D13\u7DF5\uD845\uDFF9\u7DE5\uD860\uDF6D\u7E1D\uD858\uDD21\uD858\uDD5A\u7E6E\u7E92\u432B\u946C\u7E27\u7F40\u7F41\u7F47\u7936\uD858\uDED0\u99E1\u7F97\uD858\uDF51\u7FA3\uD845\uDE61\uD840\uDC68\u455C\uD84D\uDF66\u4503\uD860\uDF3A\u7FFA\uD859\uDC89\u8005\u8008\u801D\u8028\u802F\uD868\uDC87\uD85B\uDCC3\u803B\u803C\u8061\uD849\uDF14\u4989\uD859\uDE26\uD84F\uDDE3\uD859\uDEE8\u6725\u80A7\uD862\uDE48\u8107\u811A\u58B0\uD849\uDEF6\u6C7F\uD859\uDC98\uD853\uDFB8\u64E7\uD845\uDC8A\u8218\uD846\uDC5E\u6A53\uD852\uDE65\uD852\uDE95\u447A\u8229\uD842\uDF0D\uD85A\uDE52\uD84F\uDD7E\u4FF9\uD845\uDCFD\u84E2\u8362\uD85A\uDF0A\uD852\uDDA7\uD84D\uDD30\uD845\uDF73\uD84F\uDDF8\u82AA\u691B\uD87E\uDD94\u41DB"],
    ["8f40", "\u854B\u82D0\u831A\uD843\uDE16\uD845\uDFB4\u36C1\uD84C\uDD7D\uD84D\uDD5A\u827B\u82E2\u8318\uD84F\uDE8B\uD85B\uDDA3\uD85A\uDF05\uD85A\uDF97\uD84D\uDDCE\u3DBF\u831D\u55EC\u8385\u450B\uD85B\uDDA5\u83AC\u83C1\u83D3\u347E\uD85B\uDED4\u6A57\u855A\u3496\uD85B\uDE42\uD84B\uDEEF\u8458\uD856\uDFE4\u8471\u3DD3\u44E4\u6AA7\u844A\uD84F\uDCB5\u7958\u84A8\uD85A\uDF96\uD85B\uDE77\uD85B\uDE43\u84DE\u840F\u8391\u44A0\u8493\u84E4\uD857\uDC91\u4240\uD857\uDCC0\u4543\u8534\u5AF2\uD85B\uDE99\u4527\u8573\u4516\u67BF\u8616"],
    ["8fa1", "\uD861\uDE25\uD861\uDE3B\u85C1\uD85C\uDC88\u8602\uD845\uDD82\uD85C\uDCCD\uD87E\uDDB2\u456A\u8628\u3648\uD846\uDCA2\u53F7\uD85C\uDF9A\u867E\u8771\uD868\uDCF8\u87EE\uD84B\uDC27\u87B1\u87DA\u880F\u5661\u866C\u6856\u460F\u8845\u8846\uD85D\uDDE0\uD84F\uDDB9\uD85D\uDDE4\u885E\u889C\u465B\u88B4\u88B5\u63C1\u88C5\u7777\uD85D\uDF0F\u8987\u898A\u89A6\u89A9\u89A7\u89BC\uD862\uDE25\u89E7\uD85E\uDD24\uD85E\uDEBD\u8A9C\u7793\u91FE\u8A90\uD85E\uDE59\u7AE9\uD85E\uDF3A\uD84F\uDF8F\u4713\uD85E\uDF38\u717C\u8B0C\u8B1F\uD855\uDC30\uD855\uDD65\u8B3F\u8B4C\u8B4D\u8AA9\uD852\uDE7A\u8B90\u8B9B\u8AAF\uD845\uDEDF\u4615\u884F\u8C9B\uD85F\uDD54\uD85F\uDD8F\uD87E\uDDD4\u3725\uD85F\uDD53\u8CD6\uD85F\uDD98\uD85F\uDDBD\u8D12\u8D03\uD846\uDD10\u8CDB\u705C\u8D11\uD853\uDCC9\u3ED0\u8D77"],
    ["9040", "\u8DA9\uD860\uDC02\uD844\uDC14\uD852\uDD8A\u3B7C\uD860\uDDBC\uD85C\uDD0C\u7AE7\u8EAD\u8EB6\u8EC3\u92D4\u8F19\u8F2D\uD860\uDF65\uD861\uDC12\u8FA5\u9303\uD868\uDE9F\uD842\uDE50\u8FB3\u492A\uD862\uDDDE\uD861\uDD3D\uD84F\uDDBB\u5EF8\uD84C\uDE62\u8FF9\uD868\uDC14\uD861\uDEBC\uD861\uDD01\uD848\uDF25\u3980\uD85B\uDED7\u9037\uD861\uDD3C\uD85E\uDEBE\u9061\uD861\uDD6C\uD861\uDE0B\u90A8\uD861\uDF13\u90C4\uD861\uDEE6\u90AE\u90FD\u9167\u3AF0\u91A9\u91C4\u7CAC\uD862\uDD33\uD847\uDE89\u920E\u6C9F\u9241\u9262\uD855\uDDB9\u92B9\uD862\uDEC6\uD84F\uDC9B\uD862\uDF0C\uD855\uDDDB"],
    ["90a1", "\uD843\uDD31\u932C\u936B\uD862\uDEE1\uD862\uDFEB\u708F\u5AC3\uD862\uDEE2\uD862\uDEE5\u4965\u9244\uD862\uDFEC\uD863\uDC39\uD862\uDFFF\u9373\u945B\u8EBC\u9585\u95A6\u9426\u95A0\u6FF6\u42B9\uD849\uDE7A\uD861\uDED8\uD844\uDE7C\uD84F\uDE2E\u49DF\u6C1C\u967B\u9696\u416C\u96A3\uD85B\uDED5\u61DA\u96B6\u78F5\uD862\uDEE0\u96BD\u53CC\u49A1\uD85B\uDCB8\uD840\uDE74\uD859\uDC10\uD864\uDCAF\uD864\uDCE5\uD852\uDED1\uD846\uDD15\uD84C\uDF0A\u9731\u8642\u9736\u4A0F\u453D\u4585\uD852\uDEE9\u7075\u5B41\u971B\u975C\uD864\uDDD5\u9757\u5B4A\uD864\uDDEB\u975F\u9425\u50D0\uD84C\uDCB7\uD84C\uDCBC\u9789\u979F\u97B1\u97BE\u97C0\u97D2\u97E0\uD855\uDC6C\u97EE\u741C\uD865\uDC33\u97FF\u97F5\uD865\uDC1D\uD85E\uDD7A\u4AD1\u9834\u9833\u984B\u9866\u3B0E\uD85C\uDD75\u3D51\uD841\uDE30\uD850\uDD5C"],
    ["9140", "\uD855\uDF06\u98CA\u98B7\u98C8\u98C7\u4AFF\uD85B\uDD27\uD845\uDED3\u55B0\u98E1\u98E6\u98EC\u9378\u9939\uD852\uDE29\u4B72\uD866\uDC57\uD866\uDD05\u99F5\u9A0C\u9A3B\u9A10\u9A58\uD855\uDF25\u36C4\uD864\uDCB1\uD866\uDFD5\u9AE0\u9AE2\uD866\uDF05\u9AF4\u4C0E\u9B14\u9B2D\uD861\uDE00\u5034\u9B34\uD85A\uDDA8\u38C3\uD84C\uDC7D\u9B50\u9B40\uD867\uDD3E\u5A45\uD846\uDC63\u9B8E\uD850\uDE4B\u9C02\u9BFF\u9C0C\uD867\uDE68\u9DD4\uD867\uDFB7\uD868\uDD92\uD868\uDDAB\uD868\uDCE1\uD868\uDD23\uD868\uDDDF\u9D7E\u9D83\uD868\uDD34\u9E0E\u6888"],
    ["91a1", "\u9DC4\uD848\uDD5B\uD868\uDD93\uD868\uDE20\uD846\uDD3B\uD868\uDE33\u9D39\uD868\uDCB9\uD868\uDEB4\u9E90\u9E95\u9E9E\u9EA2\u4D34\u9EAA\u9EAF\uD850\uDF64\u9EC1\u3B60\u39E5\u3D1D\u4F32\u37BE\uD863\uDC2B\u9F02\u9F08\u4B96\u9424\uD85B\uDDA2\u9F17\u9F16\u9F39\u569F\u568A\u9F45\u99B8\uD864\uDC8B\u97F2\u847F\u9F62\u9F69\u7ADC\u9F8E\u7216\u4BBE\uD852\uDD75\uD852\uDDBB\u7177\uD852\uDDF8\uD850\uDF48\uD852\uDE51\u739E\uD862\uDFDA\uD846\uDCFA\u799F\uD862\uDD7E\uD863\uDE36\u9369\u93F3\uD862\uDE44\u92EC\u9381\u93CB\uD862\uDD6C\uD851\uDCB9\u7217\u3EEB\u7772\u7A43\u70D0\uD851\uDC73\uD850\uDFF8\u717E\uD845\uDFEF\u70A3\uD846\uDCBE\uD84D\uDD99\u3EC7\uD846\uDC85\uD855\uDC2F\uD845\uDFF8\u3722\uD845\uDEFB\uD846\uDC39\u36E1\uD845\uDF74\uD846\uDCD1\uD857\uDF4B\u3723\uD845\uDEC0\u575B\uD852\uDE25\uD844\uDFFE\uD844\uDEA8"],
    ["9240", "\uD844\uDFC6\uD845\uDCB6\u8503\uD84D\uDEA6\u8503\u8455\uD852\uDD94\uD85C\uDD65\uD84F\uDE31\uD855\uDD5C\uD84F\uDEFB\uD85C\uDC52\u44F4\uD84D\uDEEE\uD866\uDD9D\uD85B\uDF26\u67F9\u3733\u3C15\u3DE7\u586C\uD846\uDD22\u6810\u4057\uD84D\uDF3F\uD850\uDCE1\uD850\uDC8B\uD850\uDD0F\uD85B\uDC21\u54CB\u569E\uD859\uDEB1\u5692\uD843\uDFDF\uD842\uDFA8\uD843\uDE0D\u93C6\uD862\uDF13\u939C\u4EF8\u512B\u3819\uD851\uDC36\u4EBC\uD841\uDC65\uD840\uDF7F\u4F4B\u4F8A\uD855\uDE51\u5A68\uD840\uDDAB\uD840\uDFCB\u3999\uD840\uDF0A\uD841\uDC14\u3435\u4F29\uD840\uDEC0\uD863\uDEB3\uD840\uDE75\u8ADA\uD840\uDE0C\u4E98"],
    ["92a1", "\u50CD\u510D\u4FA2\u4F03\uD852\uDE0E\uD84F\uDE8A\u4F42\u502E\u506C\u5081\u4FCC\u4FE5\u5058\u50FC\u5159\u515B\u515D\u515E\u6E76\uD84D\uDD95\uD84F\uDE39\uD84F\uDEBF\u6D72\uD846\uDC84\uD84F\uDE89\u51A8\u51C3\uD841\uDDE0\u44DD\uD841\uDCA3\uD841\uDC92\uD841\uDC91\u8D7A\uD862\uDE9C\uD841\uDF0E\u5259\u52A4\uD842\uDC73\u52E1\u936E\u467A\u718C\uD850\uDF8C\uD843\uDC20\uD852\uDDAC\uD844\uDCE4\u69D1\uD843\uDE1D\u7479\u3EDE\u7499\u7414\u7456\u7398\u4B8E\uD852\uDEBC\uD850\uDC8D\u53D0\u3584\u720F\uD850\uDCC9\u55B4\uD840\uDF45\u54CD\uD842\uDFC6\u571D\u925D\u96F4\u9366\u57DD\u578D\u577F\u363E\u58CB\u5A99\uD862\uDE46\uD845\uDEFA\uD845\uDF6F\uD845\uDF10\u5A2C\u59B8\u928F\u5A7E\u5ACF\u5A12\uD856\uDD46\uD846\uDDF3\uD846\uDC61\uD850\uDE95\u36F5\u6D05\u7443\u5A21\uD857\uDE83"],
    ["9340", "\u5A81\uD862\uDFD7\uD841\uDC13\u93E0\u748C\uD844\uDF03\u7105\u4972\u9408\uD862\uDDFB\u93BD\u37A0\u5C1E\u5C9E\u5E5E\u5E48\uD846\uDD96\uD846\uDD7C\uD84E\uDEEE\u5ECD\u5B4F\uD846\uDD03\uD846\uDD04\u3701\uD846\uDCA0\u36DD\uD845\uDEFE\u36D3\u812A\uD862\uDE47\uD847\uDDBA\uD84D\uDC72\uD862\uDDA8\u5F0C\u5F0E\uD846\uDD27\uD845\uDFAB\u5A6B\uD845\uDF3B\u5B44\u8614\uD85D\uDDFD\u8860\u607E\uD84A\uDC60\uD849\uDE2B\u5FDB\u3EB8\uD849\uDDAF\uD849\uDDBE\uD864\uDC88\uD85B\uDF73\u61C0\uD840\uDC3E\uD840\uDC46\uD849\uDE1B\u6199\u6198\u6075\uD84B\uDC9B\uD84B\uDD07\uD851\uDED4\uD864\uDD4D"],
    ["93a1", "\u6471\uD851\uDE65\uD84A\uDF6A\u3A29\uD84A\uDF22\uD84D\uDC50\uD866\uDCEA\uD84B\uDE78\u6337\uD869\uDC5B\u64B6\u6331\u63D1\uD852\uDDE3\uD84B\uDD67\u62A4\uD84B\uDCA1\u643B\u656B\u6972\u3BF4\uD84C\uDC8E\uD84C\uDEAD\uD852\uDD89\uD84C\uDEAB\u550D\uD84C\uDEE0\uD846\uDCD9\uD865\uDC3F\u66CE\uD84C\uDE89\uD84C\uDDB3\u3AE0\u4190\uD855\uDD84\uD862\uDF22\uD855\uDD8F\uD845\uDEFC\uD855\uDD5B\uD855\uDC25\u78EE\uD84C\uDD03\uD846\uDC2A\uD84C\uDE34\u3464\uD84C\uDE0F\uD84C\uDD82\uD850\uDEC9\u668E\uD85B\uDD24\u666B\u4B93\u6630\uD85E\uDC70\uD847\uDDEB\u6663\uD84C\uDED2\uD84C\uDEE1\u661E\uD856\uDC72\u38D1\uD84E\uDC3A\uD84D\uDFBC\u3B99\uD84D\uDFA2\uD84C\uDFFE\u74D0\u3B96\u678F\uD851\uDE2A\u68B6\u681E\u3BC4\u6ABE\u3863\uD84D\uDFD5\uD851\uDC87\u6A33\u6A52\u6AC9\u6B05\uD846\uDD12\u6511\u6898\u6A4C\u3BD7\u6A7A\u6B57\uD84F\uDFC0\uD84F\uDC9A\u93A0\u92F2\uD862\uDFEA\uD862\uDECB"],
    ["9440", "\u9289\uD860\uDC1E\uD862\uDDDC\u9467\u6DA5\u6F0B\uD852\uDDEC\u6D67\uD84F\uDF7F\u3D8F\u6E04\uD850\uDC3C\u5A3D\u6E0A\u5847\u6D24\u7842\u713B\uD850\uDF1A\uD850\uDE76\u70F1\u7250\u7287\u7294\uD851\uDF8F\uD851\uDF25\u5179\uD852\uDEA4\uD841\uDDEB\u747A\uD84F\uDEF8\uD84D\uDE5F\uD852\uDE4A\uD852\uDD17\uD857\uDFE1\u3F06\u3EB1\uD852\uDEDF\uD863\uDC23\uD84F\uDF35\u60A7\u3EF3\u74CC\u743C\u9387\u7437\u449F\uD85B\uDDEA\u4551\u7583\u3F63\uD853\uDCD9\uD853\uDD06\u3F58\u7555\u7673\uD869\uDDC6\u3B19\u7468\uD862\uDECC\uD852\uDDAB\uD852\uDD8E\u3AFB"],
    ["94a1", "\u3DCD\uD852\uDE4E\u3EFF\uD852\uDDC5\uD852\uDCF3\u91FA\u5732\u9342\uD862\uDEE3\uD846\uDC64\u50DF\uD854\uDE21\uD854\uDDE7\u7778\uD84C\uDE32\u770E\u770F\u777B\uD851\uDE97\uD84D\uDF81\u3A5E\uD852\uDCF0\u7438\u749B\u3EBF\uD852\uDEBA\uD852\uDEC7\u40C8\uD852\uDE96\uD858\uDDAE\u9307\uD855\uDD81\u781E\u788D\u7888\u78D2\u73D0\u7959\uD85D\uDF41\uD855\uDEE3\u410E\u799B\u8496\u79A5\u6A2D\uD84F\uDEFA\u7A3A\u79F4\u416E\uD845\uDEE6\u4132\u9235\u79F1\uD843\uDD4C\uD852\uDD8C\uD840\uDE99\uD84F\uDDBA\uD845\uDF6E\u3597\u556B\u3570\u36AA\uD840\uDDD4\uD843\uDC0D\u7AE2\u5A59\uD849\uDEF5\uD856\uDEAF\uD856\uDE9C\u5A0D\uD840\uDE5B\u78F0\u5A2A\uD856\uDFC6\u7AFE\u41F9\u7C5D\u7C6D\u4211\uD856\uDFB3\uD857\uDEBC\uD857\uDEA6\u7CCD\uD852\uDDF9\uD845\uDFB0\u7C8E\u7C7C\u7CAE\u6AB2\u7DDC\u7E07\u7DD3\u7F4E\uD858\uDE61"],
    ["9540", "\uD858\uDD5C\uD85E\uDF48\u7D97\uD857\uDE82\u426A\uD85A\uDF75\uD842\uDD16\u67D6\uD840\uDC4E\uD84D\uDDCF\u57C4\uD859\uDC12\uD858\uDFF8\uD852\uDD62\u7FDD\u7B27\uD842\uDC2C\uD856\uDEE9\uD857\uDD43\u7B0C\uD857\uDE0E\u99E6\u8645\u9A63\u6A1C\uD84D\uDC3F\u39E2\uD852\uDDF7\uD859\uDDAD\u9A1F\uD859\uDDA0\u8480\uD85C\uDD27\uD85B\uDCD1\u44EA\u8137\u4402\u80C6\u8109\u8142\uD859\uDFB4\u98C3\uD85A\uDE42\u8262\u8265\uD85A\uDE51\u8453\uD85B\uDDA7\u8610\uD85C\uDE1B\u5A86\u417F\uD846\uDC40\u5B2B\uD846\uDCA1\u5AE4\uD846\uDCD8\u86A0\uD87E\uDDBC\uD84F\uDD8F\u882D\uD85D\uDC22\u5A02"],
    ["95a1", "\u886E\u4F45\u8887\u88BF\u88E6\u8965\u894D\uD855\uDE83\u8954\uD85D\uDF85\uD85D\uDF84\uD862\uDFF5\uD862\uDFD9\uD862\uDF9C\uD862\uDDF9\u3EAD\u84A3\u46F5\u46CF\u37F2\u8A3D\u8A1C\uD865\uDC48\u5F4D\u922B\uD850\uDE84\u65D4\u7129\u70C4\uD846\uDC45\u9D6D\u8C9F\u8CE9\uD85F\uDDDC\u599A\u77C3\u59F0\u436E\u36D4\u8E2A\u8EA7\uD853\uDC09\u8F30\u8F4A\u42F4\u6C58\u6FBB\uD848\uDF21\u489B\u6F79\u6E8B\uD845\uDFDA\u9BE9\u36B5\uD852\uDD2F\u90BB\u9097\u5571\u4906\u91BB\u9404\uD862\uDE4B\u4062\uD862\uDEFC\u9427\uD863\uDC1D\uD863\uDC3B\u84E5\u8A2B\u9599\u95A7\u9597\u9596\uD863\uDD34\u7445\u3EC2\uD852\uDCFF\uD852\uDE42\uD850\uDFEA\u3EE7\uD84C\uDE25\u968F\uD863\uDEE7\uD863\uDE66\uD863\uDE65\u3ECC\uD852\uDDED\uD852\uDE78\uD84F\uDFEE\u7412\u746B\u3EFC\u9741\uD864\uDCB0"],
    ["9640", "\u6847\u4A1D\uD864\uDC93\uD855\uDFDF\u975D\u9368\uD862\uDD89\uD863\uDC26\uD862\uDF2F\uD858\uDFBE\u92BA\u5B11\u8B69\u493C\u73F9\uD850\uDE1B\u979B\u9771\u9938\uD843\uDF26\u5DC1\uD862\uDFC5\uD852\uDEB2\u981F\uD865\uDCDA\u92F6\uD865\uDDD7\u91E5\u44C0\uD862\uDF50\uD852\uDE67\uD862\uDF64\u98DC\uD862\uDE45\u3F00\u922A\u4925\u8414\u993B\u994D\uD85E\uDF06\u3DFD\u999B\u4B6F\u99AA\u9A5C\uD862\uDF65\uD856\uDCC8\u6A8F\u9A21\u5AFE\u9A2F\uD866\uDCF1\u4B90\uD866\uDD48\u99BC\u4BBD\u4B97\u937D\u5872\uD844\uDF02\u5822\uD852\uDDB8"],
    ["96a1", "\uD845\uDCE8\u7844\uD849\uDF1F\uD84F\uDDB8\u68C5\u3D7D\u9458\u3927\u6150\uD849\uDF81\uD84A\uDD6B\u6107\u9C4F\u9C53\u9C7B\u9C35\u9C10\u9B7F\u9BCF\uD867\uDE2D\u9B9F\uD868\uDDF5\uD868\uDCFE\u9D21\u4CAE\uD850\uDD04\u9E18\u4CB0\u9D0C\uD868\uDDB4\uD868\uDCED\uD868\uDCF3\uD866\uDD2F\u9DA5\u84BD\uD85B\uDE12\uD85B\uDFDF\uD85A\uDF82\u85FC\u4533\uD85B\uDDA4\uD85B\uDE84\uD85B\uDDF0\u8420\u85EE\uD85B\uDE00\uD84D\uDFD7\uD858\uDC64\u79E2\uD84D\uDD9C\uD84D\uDE40\u492D\uD852\uDDDE\u3D62\u93DB\u92BE\u9348\uD840\uDEBF\u78B9\u9277\u944D\u4FE4\u3440\u9064\uD855\uDD5D\u783D\u7854\u78B6\u784B\uD845\uDF57\uD84C\uDDC9\uD852\uDD41\u369A\u4F72\u6FDA\u6FD9\u701E\u701E\u5414\uD850\uDDB5\u57BB\u58F3\u578A\u9D16\u57D7\u7134\u34AF\uD850\uDDAC\u71EB\uD85B\uDC40\uD853\uDF97\u5B28\uD845\uDFB5\uD862\uDE49"],
    ["9740", "\u610C\u5ACE\u5A0B\u42BC\uD851\uDC88\u372C\u4B7B\uD862\uDDFC\u93BB\u93B8\uD846\uDCD6\uD843\uDF1D\u8472\uD85B\uDCC0\uD845\uDC13\uD850\uDEFA\uD84B\uDC26\uD850\uDFC1\u5994\uD84F\uDDB7\uD859\uDF41\u7DA8\uD858\uDD5B\uD858\uDCA4\uD852\uDDB9\uD852\uDD8B\uD862\uDDFA\u92E5\u73E2\u3EE9\u74B4\uD862\uDF63\uD846\uDC9F\u3EE1\uD852\uDEB3\u6AD8\u73F3\u73FB\u3ED6\uD852\uDE3E\uD852\uDE94\uD845\uDFD9\uD852\uDE66\uD840\uDFA7\uD845\uDC24\uD852\uDDE5\u7448\uD852\uDD16\u70A5\uD852\uDD76\u9284\u73E6\u935F\uD841\uDCFE\u9331\uD862\uDECE\uD862\uDE16\u9386\uD862\uDFE7\uD855\uDDD5\u4935\uD862\uDE82\u716B"],
    ["97a1", "\uD852\uDD43\uD843\uDCFF\u56A4\uD841\uDE1A\uD842\uDFEB\uD843\uDCB8\u5502\u79C4\uD845\uDFFA\u7DFE\uD845\uDEC2\uD852\uDE50\uD846\uDC52\u452E\u9401\u370A\uD862\uDEC0\uD852\uDDAD\u59B0\uD846\uDCBF\uD846\uDC83\uD85D\uDC84\u5AA1\u36E2\uD84F\uDD5B\u36B0\u925F\u5A79\uD862\uDE81\uD846\uDC62\u9374\u3CCD\uD842\uDEB4\u4A96\u398A\u50F4\u3D69\u3D4C\uD844\uDF9C\u7175\u42FB\uD860\uDE18\u6E0F\uD864\uDCE4\u44EB\u6D57\uD85F\uDE4F\u7067\u6CAF\u3CD6\uD84F\uDFED\uD84F\uDE2D\u6E02\u6F0C\u3D6F\uD840\uDFF5\u7551\u36BC\u34C8\u4680\u3EDA\u4871\u59C4\u926E\u493E\u8F41\uD863\uDC1C\uD85A\uDFC0\u5812\u57C8\u36D6\uD845\uDC52\u70FE\uD850\uDF62\uD852\uDE71\uD84B\uDFE3\uD844\uDEB0\uD848\uDFBD\u68B9\u6967\uD844\uDF98\uD84D\uDCE5\uD85E\uDFF4\uD84D\uDEDF\uD862\uDE83\uD84D\uDFD6\uD84C\uDFFA\uD853\uDC9F\u6A1A\uD84D\uDEAD\uD85B\uDCB7\u843E\u44DF\u44CE"],
    ["9840", "\uD85B\uDD26\uD85B\uDD51\uD85B\uDC82\uD85B\uDFDE\u6F17\uD85C\uDD09\u833D\uD845\uDF3A\u83ED\uD85B\uDC80\uD85C\uDC53\uD845\uDFDB\u5989\u5A82\uD845\uDFB3\u5A61\u5A71\uD846\uDD05\uD850\uDDFC\u372D\u59EF\uD845\uDF3C\u36C7\u718E\u9390\u669A\uD850\uDEA5\u5A6E\u5A2B\uD850\uDE93\u6A2B\uD84F\uDEF9\uD85D\uDF36\uD851\uDC5B\uD850\uDECA\u711D\uD850\uDE59\uD862\uDDE1\u4FB0\uD85B\uDD28\u5CC2\uD851\uDCCE\uD85F\uDE4D\uD850\uDFBD\u6A0C\uD850\uDE56\uD844\uDF04\u70A6\u7133\uD850\uDFE9\u3DA5\u6CDF\uD87E\uDC25\uD852\uDE4F\u7E65\u59EB\u5D2F\u3DF3\u5F5C\uD852\uDE5D\uD845\uDFDF\u7DA4\u8426"],
    ["98a1", "\u5485\uD84E\uDEFA\uD84C\uDF00\uD840\uDE14\u577E\uD842\uDCD5\uD841\uDE19\u3FE5\uD847\uDF9E\uD868\uDEB6\u7003\uD864\uDD5B\u5D70\u738F\u7CD3\uD862\uDE59\uD865\uDC20\u4FC8\u7FE7\u72CD\u7310\uD85E\uDEF4\u7338\u7339\uD855\uDEF6\u7341\u7348\u3EA9\uD85E\uDF18\u906C\u71F5\uD852\uDCF2\u73E1\u81F6\u3ECA\u770C\u3ED1\u6CA2\u56FD\u7419\u741E\u741F\u3EE2\u3EF0\u3EF4\u3EFA\u74D3\u3F0E\u3F53\u7542\u756D\u7572\u758D\u3F7C\u75C8\u75DC\u3FC0\u764D\u3FD7\u7674\u3FDC\u767A\uD853\uDF5C\u7188\u5623\u8980\u5869\u401D\u7743\u4039\u6761\u4045\u35DB\u7798\u406A\u406F\u5C5E\u77BE\u77CB\u58F2\u7818\u70B9\u781C\u40A8\u7839\u7847\u7851\u7866\u8448\uD855\uDD35\u7933\u6803\u7932\u4103"],
    ["9940", "\u4109\u7991\u7999\u8FBB\u7A06\u8FBC\u4167\u7A91\u41B2\u7ABC\u8279\u41C4\u7ACF\u7ADB\u41CF\u4E21\u7B62\u7B6C\u7B7B\u7C12\u7C1B\u4260\u427A\u7C7B\u7C9C\u428C\u7CB8\u4294\u7CED\u8F93\u70C0\uD843\uDCCF\u7DCF\u7DD4\u7DD0\u7DFD\u7FAE\u7FB4\u729F\u4397\u8020\u8025\u7B39\u802E\u8031\u8054\u3DCC\u57B4\u70A0\u80B7\u80E9\u43ED\u810C\u732A\u810E\u8112\u7560\u8114\u4401\u3B39\u8156\u8159\u815A"],
    ["99a1", "\u4413\u583A\u817C\u8184\u4425\u8193\u442D\u81A5\u57EF\u81C1\u81E4\u8254\u448F\u82A6\u8276\u82CA\u82D8\u82FF\u44B0\u8357\u9669\u698A\u8405\u70F5\u8464\u60E3\u8488\u4504\u84BE\u84E1\u84F8\u8510\u8538\u8552\u453B\u856F\u8570\u85E0\u4577\u8672\u8692\u86B2\u86EF\u9645\u878B\u4606\u4617\u88AE\u88FF\u8924\u8947\u8991\uD85E\uDD67\u8A29\u8A38\u8A94\u8AB4\u8C51\u8CD4\u8CF2\u8D1C\u4798\u585F\u8DC3\u47ED\u4EEE\u8E3A\u55D8\u5754\u8E71\u55F5\u8EB0\u4837\u8ECE\u8EE2\u8EE4\u8EED\u8EF2\u8FB7\u8FC1\u8FCA\u8FCC\u9033\u99C4\u48AD\u98E0\u9213\u491E\u9228\u9258\u926B\u92B1\u92AE\u92BF"],
    ["9a40", "\u92E3\u92EB\u92F3\u92F4\u92FD\u9343\u9384\u93AD\u4945\u4951\u9EBF\u9417\u5301\u941D\u942D\u943E\u496A\u9454\u9479\u952D\u95A2\u49A7\u95F4\u9633\u49E5\u67A0\u4A24\u9740\u4A35\u97B2\u97C2\u5654\u4AE4\u60E8\u98B9\u4B19\u98F1\u5844\u990E\u9919\u51B4\u991C\u9937\u9942\u995D\u9962\u4B70\u99C5\u4B9D\u9A3C\u9B0F\u7A83\u9B69\u9B81\u9BDD\u9BF1\u9BF4\u4C6D\u9C20\u376F\uD846\uDFC2\u9D49\u9C3A"],
    ["9aa1", "\u9EFE\u5650\u9D93\u9DBD\u9DC0\u9DFC\u94F6\u8FB6\u9E7B\u9EAC\u9EB1\u9EBD\u9EC6\u94DC\u9EE2\u9EF1\u9EF8\u7AC8\u9F44\uD840\uDC94\uD840\uDEB7\uD840\uDFA0\u691A\u94C3\u59AC\uD841\uDCD7\u5840\u94C1\u37B9\uD841\uDDD5\uD841\uDE15\uD841\uDE76\uD845\uDEBA\u5757\u7173\uD842\uDEC2\uD842\uDECD\uD842\uDFBF\u546A\uD87E\uDC3B\uD842\uDFCB\u549E\uD842\uDFFB\uD843\uDC3B\uD843\uDC53\uD843\uDC65\uD843\uDC7C\u60E7\uD843\uDC8D\u567A\uD843\uDCB5\uD843\uDCDD\uD843\uDCED\uD843\uDD6F\uD843\uDDB2\uD843\uDDC8\u6955\u9C2F\u87A5\uD843\uDE04\uD843\uDE0E\uD843\uDED7\uD843\uDF90\uD843\uDF2D\uD843\uDE73\u5C20\uD843\uDFBC\u5E0B\uD844\uDC5C\uD844\uDC4F\uD844\uDC76\u671E\uD844\uDC7B\uD844\uDC88\uD844\uDC96\u3647\uD844\uDCBF\uD844\uDCD3\uD844\uDD2F\uD844\uDD3B\u5364\u84AD\uD844\uDEE3\uD844\uDF75\uD844\uDF36\u8B81\uD845\uDD77\uD845\uDE19\uD845\uDFC3\uD845\uDFC7\u4E78\u70BB\uD846\uDC2D\uD846\uDD6A"],
    ["9b40", "\uD846\uDE2D\uD846\uDE45\uD847\uDC2A\uD847\uDC70\uD847\uDCAC\uD847\uDEC8\u62C3\uD847\uDED5\uD847\uDF15\u7198\u6855\uD848\uDC45\u69E9\u36C8\uD848\uDE7C\uD848\uDFD7\uD848\uDFFA\uD849\uDF2A\uD84A\uDC71\uD84A\uDD4F\u82FD\uD84A\uDD67\uD84A\uDD93\uD84A\uDED5\u89A5\uD84A\uDEE8\u8FA0\uD84A\uDF0E\u97B8\uD84A\uDF3F\u9847\u9ABD\uD84B\uDC4C"],
    ["9b62", "\uD84B\uDC88\uD84B\uDCB7\uD856\uDFE8\uD84B\uDD08\uD84B\uDD12\uD84B\uDDB7\uD84B\uDD95\uD84B\uDE42\uD84B\uDF74\uD84B\uDFCC\uD84C\uDC33\uD84C\uDC66\uD84C\uDF1F\uD84C\uDFDE\u5FB1\u6648\u66BF\uD85E\uDE79\uD84D\uDD67\uD84D\uDDF3\u7201\uD852\uDDBA\u77D7\uD84D\uDE1A\uD84D\uDF16\u7E87\uD840\uDF46\u58B5\u670E"],
    ["9ba1", "\u6918\uD84E\uDEA7\uD85D\uDE57\uD857\uDFE2\uD84F\uDE11\uD84F\uDEB9\uD85D\uDDFE\uD848\uDC9A\u48D0\u4AB8\uD850\uDD19\uD862\uDE9A\uD850\uDEEE\uD850\uDF0D\uD850\uDC3B\uD850\uDF34\uD850\uDF96\uD852\uDE45\uD841\uDDCA\u51D2\uD841\uDE11\u599F\uD847\uDEA8\u3BBE\uD84F\uDCFF\uD851\uDC04\uD851\uDCD6\u5788\uD851\uDE74\u399B\uD851\uDF2F\uD861\uDDE8\uD866\uDDC9\u3762\uD848\uDDC3\u8B5E\uD862\uDF4E\u99D6\uD852\uDC12\uD852\uDCFB\uD852\uDE15\u7209\uD852\uDEC0\uD843\uDC78\u5965\uD853\uDEA5\uD853\uDF86\uD841\uDF79\u8EDA\uD854\uDC2C\u528F\u573F\u7171\uD854\uDE99\uD855\uDC19\uD84F\uDF4A\uD852\uDEA7\u55BC\uD855\uDC46\uD855\uDC6E\uD85A\uDF52\u91D4\u3473\uD855\uDD3F\uD85D\uDE32\uD855\uDD5E\u4718\uD855\uDD62\uD855\uDD66\uD855\uDFC7\uD852\uDD3F\uD856\uDC5D\u5066\u34FB\uD84C\uDFCC\u60DE\uD856\uDD03\u477C\uD862\uDD48\uD856\uDEAE\uD856\uDF89\uD857\uDC06\uD847\uDD90\u57A1\u7151\u6FB6\uD858\uDD02\uD85F\uDC12\u9056\uD858\uDDB2\uD853\uDF9A\u8B62\uD859\uDC02\uD859\uDC4A"],
    ["9c40", "\u5D5B\uD85A\uDFF7\u8F36\uD859\uDC84\uD846\uDD1C\u8AEA\uD852\uDDF6\uD859\uDC88\uD84F\uDFEF\uD859\uDD12\u4BC0\uD859\uDDBF\uD859\uDEB5\uD849\uDF1B\u9465\uD855\uDFE1\u6195\u5A27\uD87E\uDCCD\u4FBB\u56B9\uD851\uDD21\uD859\uDEFC\u4E6A\uD852\uDD34\u9656\u6D8F\uD85B\uDCBD\u3618\u8977\uD859\uDF99\uD85A\uDC6E\uD859\uDC11\uD85A\uDC5E\u71DF\uD85A\uDCC7\u7B42\uD864\uDCC0\uD842\uDE11\uD85A\uDD26\u9104\uD85A\uDD39\u7A45\u9DF0\uD85A\uDDFA\u9A26\uD85A\uDE2D\u365F\uD859\uDC69\uD840\uDC21\u7983\uD85A\uDE34\uD85A\uDF5B\u5D2C\uD84D\uDD19\u83CF\uD85A\uDF9D\u46D0\uD85B\uDCA4\u753B\u8865\uD85B\uDDAE\u58B6"],
    ["9ca1", "\u371C\uD849\uDD8D\uD85C\uDC4B\uD85C\uDDCD\u3C54\uD85C\uDE80\uD85C\uDE85\u9281\uD848\uDD7A\uD85C\uDE8B\u9330\uD85C\uDEE6\uD852\uDDD0\u6C39\u949F\uD85D\uDC50\uD843\uDEF8\u8827\u88F5\uD84A\uDD26\uD861\uDC73\uD845\uDFB1\u6EB8\uD852\uDE2A\uD846\uDC20\u39A4\u36B9\u5C10\u79E3\u453F\u66B6\uD867\uDCAD\uD866\uDCA4\u8943\uD85D\uDFCC\uD85E\uDC58\u56D6\u40DF\uD845\uDE0A\u39A1\uD84D\uDF2F\uD860\uDCE8\uD844\uDFC5\u71AD\u8366\uD85E\uDDDD\uD864\uDDA8\u5A67\u4CB7\uD85C\uDCAF\uD862\uDDAB\uD85E\uDDFD\uD85E\uDE0A\uD85E\uDF0B\uD85F\uDD66\uD850\uDD7A\u7B43\u797E\uD860\uDC09\u6FB5\uD868\uDEDF\u6A03\uD860\uDF18\u53A2\uD85B\uDE07\u93BF\u6836\u975D\uD860\uDD6F\uD860\uDC23\uD85A\uDDB5\uD844\uDFED\uD84C\uDE2F\uD860\uDC48\u5D85\uD863\uDC30\uD860\uDC83\u5715\u9823\uD862\uDD49\u5DAB\uD852\uDD88\u65BE\u69D5\u53D2\uD852\uDEA5\uD84F\uDF81\u3C11\u6736\uD860\uDC90\uD860\uDCF4\uD860\uDD2E\uD847\uDFA1\uD860\uDD4F"],
    ["9d40", "\uD860\uDD89\uD860\uDDAF\uD860\uDE1A\uD860\uDF06\uD860\uDF2F\uD860\uDF8A\u35CA\uD861\uDC68\uD861\uDEAA\u48FA\u63E6\uD862\uDD56\u7808\u9255\uD862\uDDB8\u43F2\uD862\uDDE7\u43DF\uD862\uDDE8\uD862\uDF46\uD862\uDFD4\u59F8\uD863\uDC09\u8F0B\uD863\uDFC5\uD864\uDCEC\u7B51\uD864\uDD10\uD864\uDD3C\u3DF7\uD864\uDD5E\uD852\uDECA\u8FD0\u728F\u568B\uD865\uDCE7\uD865\uDDE9\uD865\uDDB0\uD865\uDDB8\uD865\uDF32\uD866\uDCD1\uD866\uDD49\uD866\uDD6A\uD866\uDDC3\uD866\uDE28\uD866\uDF0E\uD867\uDD5A\uD867\uDD9B\u7E9F\uD867\uDEF8\uD867\uDF23\u4CA4\u9547\uD868\uDE93\u71A2\uD868\uDEFF\u4D91\u9012\uD869\uDDCB\u4D9C\uD843\uDC9C\u8FBE\u55C1"],
    ["9da1", "\u8FBA\uD849\uDCB0\u8FB9\uD852\uDE93\u4509\u7E7F\u6F56\u6AB1\u4EEA\u34E4\uD862\uDF2C\uD85E\uDC9D\u373A\u8E80\uD845\uDFF5\uD860\uDC24\uD862\uDF6C\uD862\uDF99\uD85E\uDE3E\uD859\uDEAF\u3DEB\uD85D\uDE55\uD84F\uDCB7\uD855\uDE35\uD856\uDD56\u4E9A\uD857\uDE81\uD858\uDE58\u56BF\uD843\uDE6D\u8E0E\u5B6D\uD84F\uDE88\uD853\uDC9E\u63DE\u62D0\uD845\uDFF6\uD846\uDC7B\u6530\u562D\uD857\uDC4A\u541A\uD854\uDF11\u3DC6\uD867\uDD98\u4C7D\u5622\u561E\u7F49\uD857\uDED8\u5975\uD84F\uDD40\u8770\u4E1C\uD843\uDFEA\uD843\uDD49\uD84D\uDEBA\u8117\u9D5E\u8D18\u763B\u9C45\u764E\u77B9\u9345\u5432\u8148\u82F7\u5625\u8132\u8418\u80BD\u55EA\u7962\u5643\u5416\uD843\uDE9D\u35CE\u5605\u55F1\u66F1\uD860\uDEE2\u362D\u7534\u55F0\u55BA\u5497\u5572\uD843\uDC41\uD843\uDC96\u5ED0\uD854\uDD48\uD843\uDE76\uD84B\uDC62"],
    ["9e40", "\uD843\uDEA2\u9EAB\u7D5A\u55DE\uD844\uDC75\u629D\u976D\u5494\u8CCD\u71F6\u9176\u63FC\u63B9\u63FE\u5569\uD84A\uDF43\u9C72\uD84B\uDEB3\u519A\u34DF\uD843\uDDA7\u51A7\u544D\u551E\u5513\u7666\u8E2D\uD85A\uDC8A\u75B1\u80B6\u8804\u8786\u88C7\u81B6\u841C\uD844\uDCC1\u44EC\u7304\uD851\uDF06\u5B90\u830B\uD85A\uDC93\u567B\uD849\uDEF4\uD85F\uDD2F\uD850\uDDA3\uD85F\uDD73\uD85B\uDED0\uD85C\uDEB6\u9170\uD844\uDDD9\u9208\uD84F\uDCFC\uD869\uDEA9\uD843\uDEAC\uD843\uDEF9\u7266\uD847\uDCA2\u474E\uD853\uDFC2\uD85F\uDFF9\uD843\uDFEB\u40FA"],
    ["9ea1", "\u9C5D\u651F\uD84B\uDDA0\u48F3\uD851\uDFE0\uD867\uDD7C\uD843\uDFEC\uD843\uDE0A\u6062\uD85D\uDDA3\uD843\uDFED"],
    ["9ead", "\uD858\uDC48\uD844\uDD87\u71A3\u7E8E\u9D50\u4E1A\u4E04\u3577\u5B0D\u6CB2\u5367\u36AC\u39DC\u537D\u36A5\uD851\uDE18\u589A\uD852\uDF6E\u822D\u544B\u57AA\uD856\uDE95\uD842\uDD79"],
    ["9ec5", "\u3A52\uD849\uDC65\u7374\uD867\uDEAC\u4D09\u9BED\uD84F\uDCFE\uD867\uDF30\u4C5B\uD853\uDFA9\uD865\uDD9E\uD867\uDFDE\u845C\uD84F\uDDB6\uD85C\uDEB2\uD859\uDFB3\uD84D\uDF20\u632E\u7D25\uD84F\uDEF7\uD84F\uDE2C\u3A2A\u9008\u52CC\u3E74\u367A\u45E9\uD841\uDC8E\u7640\u5AF0\uD843\uDEB6\u787A\uD85F\uDF2E\u58A7\u40BF\u567C\u9B8B\u5D74\u7654\uD869\uDC34\u9E85\u4CE1\u75F9\u37FB\u6119\uD84C\uDCDA\uD850\uDFF2"],
    ["9ef5", "\u565D\uD844\uDEA9\u57A7\uD852\uDD63\uD867\uDE06\u5234\uD85C\uDCAE\u35AD\u6C4A\u9D7C"],
    ["9f40", "\u7C56\u9B39\u57DE\uD845\uDF6C\u5C53\u64D3\uD865\uDCD0\uD858\uDF35\uD85C\uDD64\u86AD\uD843\uDD28\uD85B\uDD22\uD852\uDEE2\uD843\uDD71"],
    ["9f4f", "\u51FE\uD847\uDF0F\u5D8E\u9703\uD847\uDDD1\u9E81\u904C\u7B1F\u9B02\u5CD1\u7BA3\u6268\u6335\u9AFF\u7BCF\u9B2A\u7C7E\u9B2E\u7C42\u7C86\u9C15\u7BFC\u9B09\u9F17\u9C1B\uD852\uDD3E\u9F5A\u5573\u5BC3\u4FFD\u9E98\u4FF2\u5260\u3E06\u52D1\u5767\u5056\u59B7\u5E12\u97C8\u9DAB\u8F5C\u5469\u97B4\u9940\u97BA\u532C\u6130"],
    ["9fa1", "\u692C\u53DA\u9C0A\u9D02\u4C3B\u9641\u6980\u50A6\u7546\uD845\uDF6D\u99DA\u5273"],
    ["9fae", "\u9159\u9681\u915C"],
    ["9fb2", "\u9151\uD863\uDE97\u637F\uD85B\uDD23\u6ACA\u5611\u918E\u757A\u6285\uD840\uDFFC\u734F\u7C70\uD857\uDC21\uD84F\uDCFD"],
    ["9fc1", "\uD852\uDD19\u76D6\u9B9D\u4E2A\uD843\uDCD4\u83BE\u8842"],
    ["9fc9", "\u5C4A\u69C0\u50ED\u577A\u521F\u5DF5\u4ECE\u6C31\uD840\uDDF2\u4F39\u549C\u54DA\u529A\u8D82\u35FE\u5F0C\u35F3"],
    ["9fdb", "\u6B52\u917C\u9FA5\u9B97\u982E\u98B4\u9ABA\u9EA8\u9E84\u717A\u7B14"],
    ["9fe7", "\u6BFA\u8818\u7F78"],
    ["9feb", "\u5620\uD869\uDE4A\u8E77\u9F53"],
    ["9ff0", "\u8DD4\u8E4F\u9E1C\u8E01\u6282\uD860\uDF7D\u8E28\u8E75\u7AD3\uD852\uDE77\u7A3E\u78D8\u6CEA\u8A67\u7607"],
    ["a040", "\uD862\uDE5A\u9F26\u6CCE\u87D6\u75C3\uD868\uDEB2\u7853\uD87E\uDC40\u8D0C\u72E2\u7371\u8B2D\u7302\u74F1\u8CEB\uD852\uDEBB\u862F\u5FBA\u88A0\u44B7"],
    ["a055", "\uD846\uDC3B\uD85B\uDE05"],
    ["a058", "\u8A7E\uD849\uDD1B"],
    ["a05b", "\u60FD\u7667\u9AD7\u9D44\u936E\u9B8F\u87F5"],
    ["a063", "\u880F\u8CF7\u732C\u9721\u9BB0\u35D6\u72B2\u4C07\u7C51\u994A\uD858\uDD59\u6159\u4C04\u9E96\u617D"],
    ["a073", "\u575F\u616F\u62A6\u6239\u62CE\u3A5C\u61E2\u53AA\uD84C\uDFF5\u6364\u6802\u35D2"],
    ["a0a1", "\u5D57\uD862\uDFC2\u8FDA\uD863\uDE39"],
    ["a0a6", "\u50D9\uD847\uDD46\u7906\u5332\u9638\uD843\uDF3B\u4065"],
    ["a0ae", "\u77FE"],
    ["a0b0", "\u7CC2\uD857\uDF1A\u7CDA\u7A2D\u8066\u8063\u7D4D\u7505\u74F2\u8994\u821A\u670C\u8062\uD85D\uDC86\u805B\u74F0\u8103\u7724\u8989\uD859\uDFCC\u7553\uD85B\uDED1\u87A9\u87CE\u81C8\u878C\u8A49\u8CAD\u8B43\u772B\u74F8\u84DA\u3635\u69B2\u8DA6"],
    ["a0d4", "\u89A9\u7468\u6DB9\u87C1\uD850\uDC11\u74E7\u3DDB\u7176\u60A4\u619C\u3CD1\u7162\u6077"],
    ["a0e2", "\u7F71\uD862\uDF2D\u7250\u60E9\u4B7E\u5220\u3C18\uD84F\uDCC7\uD857\uDED7\uD85D\uDE56\uD855\uDD31\uD846\uDD44\uD844\uDEFE\uD866\uDD03\uD85B\uDDDC\uD85C\uDCAD\u5CC1\uD858\uDDAD\uD862\uDE0F\uD84D\uDE77\uD840\uDCEE\uD85A\uDC46\uD853\uDF0E\u4562\u5B1F\uD858\uDF4C\u9F50\u9EA6\uD858\uDE6B"],
    ["a3c0", "\u2400", 31, "\u2421"],
    ["c6a1", "\u2460", 9, "\u2474", 9, "\u2170", 9, "\u4E36\u4E3F\u4E85\u4EA0\u5182\u5196\u51AB\u52F9\u5338\u5369\u53B6\u590A\u5B80\u5DDB\u2F33\u5E7F\u5EF4\u5F50\u5F61\u6534\u65E0\u7592\u7676\u8FB5\u96B6\xA8\u02C6\u30FD\u30FE\u309D\u309E\u3003\u4EDD\u3005\u3006\u3007\u30FC\uFF3B\uFF3D\u273D\u3041", 23],
    ["c740", "\u3059", 58, "\u30A1\u30A2\u30A3\u30A4"],
    ["c7a1", "\u30A5", 81, "\u0410", 5, "\u0401\u0416", 4],
    ["c840", "\u041B", 26, "\u0451\u0436", 25, "\u21E7\u21B8\u21B9\u31CF\uD840\uDCCC\u4E5A\uD840\uDC8A\u5202\u4491"],
    ["c8a1", "\u9FB0\u5188\u9FB1\uD85D\uDE07"],
    ["c8cd", "\uFFE2\uFFE4\uFF07\uFF02\u3231\u2116\u2121\u309B\u309C\u2E80\u2E84\u2E86\u2E87\u2E88\u2E8A\u2E8C\u2E8D\u2E95\u2E9C\u2E9D\u2EA5\u2EA7\u2EAA\u2EAC\u2EAE\u2EB6\u2EBC\u2EBE\u2EC6\u2ECA\u2ECC\u2ECD\u2ECF\u2ED6\u2ED7\u2EDE\u2EE3"],
    ["c8f5", "\u0283\u0250\u025B\u0254\u0275\u0153\xF8\u014B\u028A\u026A"],
    ["f9fe", "\uFFED"],
    ["fa40", "\uD841\uDD47\u92DB\uD841\uDDDF\uD84F\uDFC5\u854C\u42B5\u73EF\u51B5\u3649\uD852\uDD42\uD862\uDDE4\u9344\uD846\uDDDB\u82EE\uD84F\uDCC8\u783C\u6744\u62DF\uD852\uDD33\uD862\uDDAA\uD840\uDEA0\uD85A\uDFB3\uD844\uDF05\u4FAB\uD849\uDCED\u5008\uD85B\uDD29\uD85E\uDE84\uD84D\uDE00\uD852\uDEB1\uD849\uDD13\u5029\uD840\uDF7E\u5FA4\uD840\uDF80\uD840\uDF47\u6EDB\uD841\uDC1F\u507D\u5101\u347A\u510E\u986C\u3743\u8416\uD852\uDDA4\uD841\uDC87\u5160\uD84C\uDFB4\u516A\uD842\uDFFF\uD848\uDCFC\uD840\uDEE5\uD849\uDD30\uD841\uDD8E\uD84C\uDE33\uD846\uDD83\u5B82\u877D\uD841\uDDB3\uD84F\uDC99\u51B2\u51B8"],
    ["faa1", "\u9D34\u51C9\u51CF\u51D1\u3CDC\u51D3\uD852\uDEA6\u51B3\u51E2\u5342\u51ED\u83CD\u693E\uD84D\uDF2D\u5F7B\u520B\u5226\u523C\u52B5\u5257\u5294\u52B9\u52C5\u7C15\u8542\u52E0\u860D\uD85A\uDF13\u5305\uD862\uDEDE\u5549\u6ED9\uD84F\uDF80\uD842\uDD54\uD84F\uDFEC\u5333\u5344\uD842\uDFE2\u6CCB\uD845\uDF26\u681B\u73D5\u604A\u3EAA\u38CC\uD845\uDEE8\u71DD\u44A2\u536D\u5374\uD861\uDEAB\u537E\u537F\uD845\uDD96\uD845\uDE13\u77E6\u5393\uD862\uDE9B\u53A0\u53AB\u53AE\u73A7\uD855\uDF72\u3F59\u739C\u53C1\u53C5\u6C49\u4E49\u57FE\u53D9\u3AAB\uD842\uDF8F\u53E0\uD84F\uDFEB\uD84B\uDDA3\u53F6\uD843\uDC77\u5413\u7079\u552B\u6657\u6D5B\u546D\uD85A\uDF53\uD843\uDD74\u555D\u548F\u54A4\u47A6\uD845\uDF0D\uD843\uDEDD\u3DB4\uD843\uDD4D"],
    ["fb40", "\uD862\uDDBC\uD849\uDE98\u5547\u4CED\u542F\u7417\u5586\u55A9\u5605\uD846\uDCD7\uD850\uDC3A\u4552\uD851\uDC35\u66B3\uD844\uDCB4\u5637\u66CD\uD84C\uDE8A\u66A4\u66AD\u564D\u564F\u78F1\u56F1\u9787\u53FE\u5700\u56EF\u56ED\uD862\uDF66\u3623\uD844\uDE4F\u5746\uD850\uDDA5\u6C6E\u708B\u5742\u36B1\uD85B\uDC7E\u57E6\uD845\uDC16\u5803\uD845\uDC54\uD850\uDF63\u5826\uD852\uDFF5\u585C\u58AA\u3561\u58E0\u58DC\uD844\uDE3C\u58FB\u5BFF\u5743\uD868\uDD50\uD850\uDE78\u93D3\u35A1\u591F\u68A6\u36C3\u6E59"],
    ["fba1", "\uD845\uDE3E\u5A24\u5553\uD845\uDE92\u8505\u59C9\uD843\uDD4E\uD85B\uDC81\uD85B\uDD2A\uD845\uDFDC\u59D9\uD845\uDFFB\uD845\uDFB2\uD85B\uDDA6\u6D71\uD846\uDC28\uD845\uDED5\u59F9\uD85B\uDE45\u5AAB\u5A63\u36E6\uD852\uDDA9\u5A77\u3708\u5A96\u7465\u5AD3\uD85B\uDFA1\uD849\uDD54\u3D85\uD846\uDD11\u3732\uD845\uDEB8\u5E83\u52D0\u5B76\u6588\u5B7C\uD85E\uDE0E\u4004\u485D\uD840\uDE04\u5BD5\u6160\uD846\uDE34\uD856\uDDCC\uD841\uDDA5\u5BF3\u5B9D\u4D10\u5C05\uD846\uDF44\u5C13\u73CE\u5C14\uD847\uDCA5\uD85A\uDF28\u5C49\u48DD\u5C85\u5CE9\u5CEF\u5D8B\uD847\uDDF9\uD847\uDE37\u5D10\u5D18\u5D46\uD847\uDEA4\u5CBA\u5DD7\u82FC\u382D\uD852\uDD01\uD848\uDC49\uD848\uDD73\u8287\u3836\u3BC2\u5E2E\u6A8A\u5E75\u5E7A\uD851\uDCBC\uD843\uDCD3\u53A6\u4EB7\u5ED0\u53A8\uD845\uDF71\u5E09\u5EF4\uD861\uDC82"],
    ["fc40", "\u5EF9\u5EFB\u38A0\u5EFC\u683E\u941B\u5F0D\uD840\uDDC1\uD87E\uDC94\u3ADE\u48AE\uD844\uDF3A\u5F3A\uD85A\uDC88\uD848\uDFD0\u5F58\uD849\uDC71\u5F63\u97BD\uD85B\uDE6E\u5F72\u9340\uD862\uDE36\u5FA7\u5DB6\u3D5F\uD854\uDE50\uD847\uDF6A\uD85C\uDCF8\uD849\uDE68\u91D6\uD840\uDE9E\uD862\uDE29\u6031\u6685\uD846\uDC77\u3963\u3DC7\u3639\u5790\uD849\uDFB4\u7971\u3E40\u609E\u60A4\u60B3\uD852\uDD82\uD852\uDD8F\uD85E\uDE53\u74A4\u50E1\u5AA0\u6164\u8424\u6142\uD87E\uDCA6\uD85B\uDED2\u6181\u51F4\uD841\uDE56\u6187\u5BAA\uD84F\uDFB7"],
    ["fca1", "\uD84A\uDC5F\u61D3\uD862\uDF9D\uD866\uDD5D\u61D0\u3932\uD84A\uDD80\uD84A\uDCC1\u6023\u615C\u651E\u638B\uD840\uDD18\u62C5\uD845\uDF70\u62D5\uD84B\uDE0D\u636C\uD852\uDDDF\u3A17\u6438\u63F8\uD844\uDF8E\uD845\uDFFC\u6490\u6F8A\uD84B\uDE36\u9814\uD850\uDC8C\uD855\uDF1D\u64E1\u64E5\u947B\u3A66\u643A\u3A57\u654D\u6F16\uD852\uDE28\uD852\uDE23\u6585\u656D\u655F\uD84C\uDC7E\u65B5\uD852\uDD40\u4B37\u65D1\u40D8\uD846\uDC29\u65E0\u65E3\u5FDF\uD84D\uDC00\u6618\uD84C\uDDF7\uD84C\uDDF8\u6644\uD84C\uDDA4\uD84C\uDDA5\u664B\uD843\uDE75\u6667\uD854\uDDE6\u6673\u6674\uD847\uDE3D\uD84C\uDE31\uD861\uDDF4\uD84C\uDDC8\uD854\uDF13\u77C5\uD84A\uDCF7\u99A4\u6702\uD850\uDF9C\uD852\uDE21\u3B2B\u69FA\uD84D\uDFC2\u675E\u6767\u6762\uD850\uDDCD\uD864\uDCED\u67D7\u44E9\u6822\u6E50\u923C\u6801\uD84C\uDFE6\uD85B\uDDA0\u685D"],
    ["fd40", "\uD84D\uDC6F\u69E1\u6A0B\uD862\uDEDF\u6973\u68C3\uD84D\uDDCD\u6901\u6900\u3D32\u3A01\uD84D\uDE3C\u3B80\u67AC\u6961\uD862\uDE4A\u42FC\u6936\u6998\u3BA1\uD840\uDFC9\u8363\u5090\u69F9\uD84D\uDE59\uD848\uDD2A\u6A45\uD84D\uDF03\u6A9D\u3BF3\u67B1\u6AC8\uD864\uDD9C\u3C0D\u6B1D\uD842\uDD23\u60DE\u6B35\u6B74\uD849\uDFCD\u6EB5\uD84E\uDEDB\uD840\uDFB5\uD846\uDD58\u3740\u5421\uD84E\uDF5A\u6BE1\uD84F\uDEFC\u6BDC\u6C37\uD849\uDC8B\uD852\uDCF1\uD85A\uDF51\u6C5A\u8226\u6C79\uD84F\uDDBC\u44C5\uD84F\uDDBD\uD850\uDDA4\uD852\uDD0C\uD852\uDD00"],
    ["fda1", "\uD84F\uDCC9\u36E5\u3CEB\uD843\uDD32\u9B83\uD84C\uDDF9\uD849\uDC91\u7F8F\u6837\uD85B\uDD25\uD85B\uDDA1\uD85B\uDDEB\u6D96\u6D5C\u6E7C\u6F04\uD852\uDD7F\uD850\uDC85\uD85B\uDE72\u8533\uD85B\uDF74\u51C7\u6C9C\u6E1D\u842E\uD862\uDF21\u6E2F\uD84F\uDE2F\u7453\uD84F\uDF82\u79CC\u6E4F\u5A91\uD84C\uDC4B\u6FF8\u370D\u6F9D\uD84F\uDE30\u6EFA\uD845\uDC97\uD850\uDC3D\u4555\u93F0\u6F44\u6F5C\u3D4E\u6F74\uD864\uDD70\u3D3B\u6F9F\uD850\uDD44\u6FD3\uD850\uDC91\uD850\uDD55\uD850\uDC39\uD84F\uDFF0\uD84F\uDFB4\uD850\uDD3F\u51DF\uD850\uDD56\uD850\uDD57\uD850\uDD40\uD858\uDDDD\u704B\u707E\u70A7\u7081\u70CC\u70D5\u70D6\u70DF\u4104\u3DE8\u71B4\u7196\uD850\uDE77\u712B\u7145\u5A88\u714A\u716E\u5C9C\uD850\uDF65\u714F\u9362\uD850\uDEC1\u712C\uD851\uDC5A\uD852\uDE27\uD852\uDE22\u71BA\uD862\uDFE8\u70BD\u720E"],
    ["fe40", "\u9442\u7215\u5911\u9443\u7224\u9341\uD855\uDE05\u722E\u7240\uD852\uDD74\u68BD\u7255\u7257\u3E55\uD84C\uDC44\u680D\u6F3D\u7282\u732A\u732B\uD852\uDC23\uD862\uDC2B\u48ED\uD862\uDC04\u7328\u732E\u73CF\u73AA\uD843\uDC3A\uD85A\uDE2E\u73C9\u7449\uD850\uDDE2\uD845\uDEE7\uD852\uDE24\u6623\u36C5\uD852\uDDB7\uD852\uDD8D\uD852\uDDFB\u73F7\u7415\u6903\uD852\uDE26\u7439\uD841\uDDC3\u3ED7\u745C\uD84A\uDCAD\u7460\uD863\uDEB2\u7447\u73E4\u7476\u83B9\u746C\u3730\u7474\u93F1\u6A2C\u7482\u4953\uD852\uDE8C"],
    ["fea1", "\uD850\uDD5F\uD852\uDE79\uD862\uDF8F\u5B46\uD863\uDC03\uD846\uDC9E\u74C8\uD846\uDD88\u750E\u74E9\u751E\uD863\uDED9\uD846\uDE4B\u5BD7\uD863\uDEAC\u9385\u754D\u754A\u7567\u756E\uD853\uDF82\u3F04\uD853\uDD13\u758E\u745D\u759E\u75B4\u7602\u762C\u7651\u764F\u766F\u7676\uD858\uDFF5\u7690\u81EF\u37F8\uD85A\uDD11\uD85A\uDD0E\u76A1\u76A5\u76B7\u76CC\uD85B\uDF9F\u8462\uD854\uDC9D\uD854\uDD7D\uD847\uDE1C\u771E\u7726\u7740\u64AF\uD854\uDE20\u7758\uD84C\uDEAC\u77AF\uD862\uDD64\uD862\uDD68\uD845\uDEC1\u77F4\u7809\uD844\uDF76\uD852\uDE12\u68CA\u78AF\u78C7\u78D3\u96A5\u792E\uD855\uDDE0\u78D7\u7934\u78B1\uD85D\uDE0C\u8FB8\u8884\uD862\uDF2B\uD858\uDC83\uD849\uDE1C\u7986\u8900\u6902\u7980\uD856\uDC57\u799D\uD85E\uDF39\u793C\u79A9\u6E2A\uD85C\uDD26\u3EA8\u79C6\uD864\uDD0D\u79D4"]
  ];
});

// node_modules/iconv-lite/encodings/dbcs-data.js
var require_dbcs_data = __commonJS((exports, module) => {
  module.exports = {
    shiftjis: {
      type: "_dbcs",
      table: function() {
        return require_shiftjis();
      },
      encodeAdd: { "\xA5": 92, "\u203E": 126 },
      encodeSkipVals: [{ from: 60736, to: 63808 }]
    },
    csshiftjis: "shiftjis",
    mskanji: "shiftjis",
    sjis: "shiftjis",
    windows31j: "shiftjis",
    ms31j: "shiftjis",
    xsjis: "shiftjis",
    windows932: "shiftjis",
    ms932: "shiftjis",
    "932": "shiftjis",
    cp932: "shiftjis",
    eucjp: {
      type: "_dbcs",
      table: function() {
        return require_eucjp();
      },
      encodeAdd: { "\xA5": 92, "\u203E": 126 }
    },
    gb2312: "cp936",
    gb231280: "cp936",
    gb23121980: "cp936",
    csgb2312: "cp936",
    csiso58gb231280: "cp936",
    euccn: "cp936",
    windows936: "cp936",
    ms936: "cp936",
    "936": "cp936",
    cp936: {
      type: "_dbcs",
      table: function() {
        return require_cp936();
      }
    },
    gbk: {
      type: "_dbcs",
      table: function() {
        return require_cp936().concat(require_gbk_added());
      }
    },
    xgbk: "gbk",
    isoir58: "gbk",
    gb18030: {
      type: "_dbcs",
      table: function() {
        return require_cp936().concat(require_gbk_added());
      },
      gb18030: function() {
        return require_gb18030_ranges();
      },
      encodeSkipVals: [128],
      encodeAdd: { "\u20AC": 41699 }
    },
    chinese: "gb18030",
    windows949: "cp949",
    ms949: "cp949",
    "949": "cp949",
    cp949: {
      type: "_dbcs",
      table: function() {
        return require_cp949();
      }
    },
    cseuckr: "cp949",
    csksc56011987: "cp949",
    euckr: "cp949",
    isoir149: "cp949",
    korean: "cp949",
    ksc56011987: "cp949",
    ksc56011989: "cp949",
    ksc5601: "cp949",
    windows950: "cp950",
    ms950: "cp950",
    "950": "cp950",
    cp950: {
      type: "_dbcs",
      table: function() {
        return require_cp950();
      }
    },
    big5: "big5hkscs",
    big5hkscs: {
      type: "_dbcs",
      table: function() {
        return require_cp950().concat(require_big5_added());
      },
      encodeSkipVals: [41676]
    },
    cnbig5: "big5hkscs",
    csbig5: "big5hkscs",
    xxbig5: "big5hkscs"
  };
});

// node_modules/iconv-lite/encodings/index.js
var require_encodings = __commonJS((exports, module) => {
  var modules = [
    require_internal(),
    require_utf16(),
    require_utf7(),
    require_sbcs_codec(),
    require_sbcs_data(),
    require_sbcs_data_generated(),
    require_dbcs_codec(),
    require_dbcs_data()
  ];
  for (i = 0;i < modules.length; i++) {
    module = modules[i];
    for (enc in module)
      if (Object.prototype.hasOwnProperty.call(module, enc))
        exports[enc] = module[enc];
  }
  var module;
  var enc;
  var i;
});

// node_modules/iconv-lite/lib/streams.js
var require_streams = __commonJS((exports, module) => {
  var IconvLiteEncoderStream = function(conv, options) {
    this.conv = conv;
    options = options || {};
    options.decodeStrings = false;
    Transform.call(this, options);
  };
  var IconvLiteDecoderStream = function(conv, options) {
    this.conv = conv;
    options = options || {};
    options.encoding = this.encoding = "utf8";
    Transform.call(this, options);
  };
  var Buffer2 = import.meta.require("buffer").Buffer;
  var Transform = import.meta.require("stream").Transform;
  module.exports = function(iconv) {
    iconv.encodeStream = function encodeStream(encoding, options) {
      return new IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);
    };
    iconv.decodeStream = function decodeStream(encoding, options) {
      return new IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);
    };
    iconv.supportsStreams = true;
    iconv.IconvLiteEncoderStream = IconvLiteEncoderStream;
    iconv.IconvLiteDecoderStream = IconvLiteDecoderStream;
    iconv._collect = IconvLiteDecoderStream.prototype.collect;
  };
  IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {
    constructor: { value: IconvLiteEncoderStream }
  });
  IconvLiteEncoderStream.prototype._transform = function(chunk, encoding, done) {
    if (typeof chunk != "string")
      return done(new Error("Iconv encoding stream needs strings as its input."));
    try {
      var res = this.conv.write(chunk);
      if (res && res.length)
        this.push(res);
      done();
    } catch (e) {
      done(e);
    }
  };
  IconvLiteEncoderStream.prototype._flush = function(done) {
    try {
      var res = this.conv.end();
      if (res && res.length)
        this.push(res);
      done();
    } catch (e) {
      done(e);
    }
  };
  IconvLiteEncoderStream.prototype.collect = function(cb) {
    var chunks = [];
    this.on("error", cb);
    this.on("data", function(chunk) {
      chunks.push(chunk);
    });
    this.on("end", function() {
      cb(null, Buffer2.concat(chunks));
    });
    return this;
  };
  IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {
    constructor: { value: IconvLiteDecoderStream }
  });
  IconvLiteDecoderStream.prototype._transform = function(chunk, encoding, done) {
    if (!Buffer2.isBuffer(chunk))
      return done(new Error("Iconv decoding stream needs buffers as its input."));
    try {
      var res = this.conv.write(chunk);
      if (res && res.length)
        this.push(res, this.encoding);
      done();
    } catch (e) {
      done(e);
    }
  };
  IconvLiteDecoderStream.prototype._flush = function(done) {
    try {
      var res = this.conv.end();
      if (res && res.length)
        this.push(res, this.encoding);
      done();
    } catch (e) {
      done(e);
    }
  };
  IconvLiteDecoderStream.prototype.collect = function(cb) {
    var res = "";
    this.on("error", cb);
    this.on("data", function(chunk) {
      res += chunk;
    });
    this.on("end", function() {
      cb(null, res);
    });
    return this;
  };
});

// node_modules/iconv-lite/lib/extend-node.js
var require_extend_node = __commonJS((exports, module) => {
  var Buffer2 = import.meta.require("buffer").Buffer;
  module.exports = function(iconv) {
    var original = undefined;
    iconv.supportsNodeEncodingsExtension = !(Buffer2.from || new Buffer2(0) instanceof Uint8Array);
    iconv.extendNodeEncodings = function extendNodeEncodings() {
      if (original)
        return;
      original = {};
      if (!iconv.supportsNodeEncodingsExtension) {
        console.error("ACTION NEEDED: require('iconv-lite').extendNodeEncodings() is not supported in your version of Node");
        console.error("See more info at https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility");
        return;
      }
      var nodeNativeEncodings = {
        hex: true,
        utf8: true,
        "utf-8": true,
        ascii: true,
        binary: true,
        base64: true,
        ucs2: true,
        "ucs-2": true,
        utf16le: true,
        "utf-16le": true
      };
      Buffer2.isNativeEncoding = function(enc) {
        return enc && nodeNativeEncodings[enc.toLowerCase()];
      };
      var SlowBuffer = import.meta.require("buffer").SlowBuffer;
      original.SlowBufferToString = SlowBuffer.prototype.toString;
      SlowBuffer.prototype.toString = function(encoding, start, end) {
        encoding = String(encoding || "utf8").toLowerCase();
        if (Buffer2.isNativeEncoding(encoding))
          return original.SlowBufferToString.call(this, encoding, start, end);
        if (typeof start == "undefined")
          start = 0;
        if (typeof end == "undefined")
          end = this.length;
        return iconv.decode(this.slice(start, end), encoding);
      };
      original.SlowBufferWrite = SlowBuffer.prototype.write;
      SlowBuffer.prototype.write = function(string, offset, length, encoding) {
        if (isFinite(offset)) {
          if (!isFinite(length)) {
            encoding = length;
            length = undefined;
          }
        } else {
          var swap = encoding;
          encoding = offset;
          offset = length;
          length = swap;
        }
        offset = +offset || 0;
        var remaining = this.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = +length;
          if (length > remaining) {
            length = remaining;
          }
        }
        encoding = String(encoding || "utf8").toLowerCase();
        if (Buffer2.isNativeEncoding(encoding))
          return original.SlowBufferWrite.call(this, string, offset, length, encoding);
        if (string.length > 0 && (length < 0 || offset < 0))
          throw new RangeError("attempt to write beyond buffer bounds");
        var buf = iconv.encode(string, encoding);
        if (buf.length < length)
          length = buf.length;
        buf.copy(this, offset, 0, length);
        return length;
      };
      original.BufferIsEncoding = Buffer2.isEncoding;
      Buffer2.isEncoding = function(encoding) {
        return Buffer2.isNativeEncoding(encoding) || iconv.encodingExists(encoding);
      };
      original.BufferByteLength = Buffer2.byteLength;
      Buffer2.byteLength = SlowBuffer.byteLength = function(str, encoding) {
        encoding = String(encoding || "utf8").toLowerCase();
        if (Buffer2.isNativeEncoding(encoding))
          return original.BufferByteLength.call(this, str, encoding);
        return iconv.encode(str, encoding).length;
      };
      original.BufferToString = Buffer2.prototype.toString;
      Buffer2.prototype.toString = function(encoding, start, end) {
        encoding = String(encoding || "utf8").toLowerCase();
        if (Buffer2.isNativeEncoding(encoding))
          return original.BufferToString.call(this, encoding, start, end);
        if (typeof start == "undefined")
          start = 0;
        if (typeof end == "undefined")
          end = this.length;
        return iconv.decode(this.slice(start, end), encoding);
      };
      original.BufferWrite = Buffer2.prototype.write;
      Buffer2.prototype.write = function(string, offset, length, encoding) {
        var _offset = offset, _length = length, _encoding = encoding;
        if (isFinite(offset)) {
          if (!isFinite(length)) {
            encoding = length;
            length = undefined;
          }
        } else {
          var swap = encoding;
          encoding = offset;
          offset = length;
          length = swap;
        }
        encoding = String(encoding || "utf8").toLowerCase();
        if (Buffer2.isNativeEncoding(encoding))
          return original.BufferWrite.call(this, string, _offset, _length, _encoding);
        offset = +offset || 0;
        var remaining = this.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = +length;
          if (length > remaining) {
            length = remaining;
          }
        }
        if (string.length > 0 && (length < 0 || offset < 0))
          throw new RangeError("attempt to write beyond buffer bounds");
        var buf = iconv.encode(string, encoding);
        if (buf.length < length)
          length = buf.length;
        buf.copy(this, offset, 0, length);
        return length;
      };
      if (iconv.supportsStreams) {
        var Readable = import.meta.require("stream").Readable;
        original.ReadableSetEncoding = Readable.prototype.setEncoding;
        Readable.prototype.setEncoding = function setEncoding(enc, options) {
          this._readableState.decoder = iconv.getDecoder(enc, options);
          this._readableState.encoding = enc;
        };
        Readable.prototype.collect = iconv._collect;
      }
    };
    iconv.undoExtendNodeEncodings = function undoExtendNodeEncodings() {
      if (!iconv.supportsNodeEncodingsExtension)
        return;
      if (!original)
        throw new Error("require('iconv-lite').undoExtendNodeEncodings(): Nothing to undo; extendNodeEncodings() is not called.");
      delete Buffer2.isNativeEncoding;
      var SlowBuffer = import.meta.require("buffer").SlowBuffer;
      SlowBuffer.prototype.toString = original.SlowBufferToString;
      SlowBuffer.prototype.write = original.SlowBufferWrite;
      Buffer2.isEncoding = original.BufferIsEncoding;
      Buffer2.byteLength = original.BufferByteLength;
      Buffer2.prototype.toString = original.BufferToString;
      Buffer2.prototype.write = original.BufferWrite;
      if (iconv.supportsStreams) {
        var Readable = import.meta.require("stream").Readable;
        Readable.prototype.setEncoding = original.ReadableSetEncoding;
        delete Readable.prototype.collect;
      }
      original = undefined;
    };
  };
});

// node_modules/iconv-lite/lib/index.js
var require_lib = __commonJS((exports, module) => {
  var Buffer2 = require_safer().Buffer;
  var bomHandling = require_bom_handling();
  var iconv = exports;
  iconv.encodings = null;
  iconv.defaultCharUnicode = "\uFFFD";
  iconv.defaultCharSingleByte = "?";
  iconv.encode = function encode(str, encoding, options) {
    str = "" + (str || "");
    var encoder = iconv.getEncoder(encoding, options);
    var res = encoder.write(str);
    var trail = encoder.end();
    return trail && trail.length > 0 ? Buffer2.concat([res, trail]) : res;
  };
  iconv.decode = function decode(buf, encoding, options) {
    if (typeof buf === "string") {
      if (!iconv.skipDecodeWarning) {
        console.error("Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding");
        iconv.skipDecodeWarning = true;
      }
      buf = Buffer2.from("" + (buf || ""), "binary");
    }
    var decoder = iconv.getDecoder(encoding, options);
    var res = decoder.write(buf);
    var trail = decoder.end();
    return trail ? res + trail : res;
  };
  iconv.encodingExists = function encodingExists(enc) {
    try {
      iconv.getCodec(enc);
      return true;
    } catch (e) {
      return false;
    }
  };
  iconv.toEncoding = iconv.encode;
  iconv.fromEncoding = iconv.decode;
  iconv._codecDataCache = {};
  iconv.getCodec = function getCodec(encoding) {
    if (!iconv.encodings)
      iconv.encodings = require_encodings();
    var enc = iconv._canonicalizeEncoding(encoding);
    var codecOptions = {};
    while (true) {
      var codec = iconv._codecDataCache[enc];
      if (codec)
        return codec;
      var codecDef = iconv.encodings[enc];
      switch (typeof codecDef) {
        case "string":
          enc = codecDef;
          break;
        case "object":
          for (var key in codecDef)
            codecOptions[key] = codecDef[key];
          if (!codecOptions.encodingName)
            codecOptions.encodingName = enc;
          enc = codecDef.type;
          break;
        case "function":
          if (!codecOptions.encodingName)
            codecOptions.encodingName = enc;
          codec = new codecDef(codecOptions, iconv);
          iconv._codecDataCache[codecOptions.encodingName] = codec;
          return codec;
        default:
          throw new Error("Encoding not recognized: '" + encoding + "' (searched as: '" + enc + "')");
      }
    }
  };
  iconv._canonicalizeEncoding = function(encoding) {
    return ("" + encoding).toLowerCase().replace(/:\d{4}$|[^0-9a-z]/g, "");
  };
  iconv.getEncoder = function getEncoder(encoding, options) {
    var codec = iconv.getCodec(encoding), encoder = new codec.encoder(options, codec);
    if (codec.bomAware && options && options.addBOM)
      encoder = new bomHandling.PrependBOM(encoder, options);
    return encoder;
  };
  iconv.getDecoder = function getDecoder(encoding, options) {
    var codec = iconv.getCodec(encoding), decoder = new codec.decoder(options, codec);
    if (codec.bomAware && !(options && options.stripBOM === false))
      decoder = new bomHandling.StripBOM(decoder, options);
    return decoder;
  };
  var nodeVer = typeof process !== "undefined" && process.versions && process.versions.node;
  if (nodeVer) {
    nodeVerArr = nodeVer.split(".").map(Number);
    if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {
      require_streams()(iconv);
    }
    require_extend_node()(iconv);
  }
  var nodeVerArr;
  if (false) {
  }
});

// node_modules/unpipe/index.js
var require_unpipe = __commonJS((exports, module) => {
  var hasPipeDataListeners = function(stream) {
    var listeners = stream.listeners("data");
    for (var i = 0;i < listeners.length; i++) {
      if (listeners[i].name === "ondata") {
        return true;
      }
    }
    return false;
  };
  var unpipe = function(stream) {
    if (!stream) {
      throw new TypeError("argument stream is required");
    }
    if (typeof stream.unpipe === "function") {
      stream.unpipe();
      return;
    }
    if (!hasPipeDataListeners(stream)) {
      return;
    }
    var listener;
    var listeners = stream.listeners("close");
    for (var i = 0;i < listeners.length; i++) {
      listener = listeners[i];
      if (listener.name !== "cleanup" && listener.name !== "onclose") {
        continue;
      }
      listener.call(stream);
    }
  };
  /*!
   * unpipe
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = unpipe;
});

// node_modules/raw-body/index.js
var require_raw_body = __commonJS((exports, module) => {
  var getDecoder = function(encoding) {
    if (!encoding)
      return null;
    try {
      return iconv.getDecoder(encoding);
    } catch (e) {
      if (!ICONV_ENCODING_MESSAGE_REGEXP.test(e.message))
        throw e;
      throw createError(415, "specified encoding unsupported", {
        encoding,
        type: "encoding.unsupported"
      });
    }
  };
  var getRawBody = function(stream, options, callback) {
    var done = callback;
    var opts = options || {};
    if (stream === undefined) {
      throw new TypeError("argument stream is required");
    } else if (typeof stream !== "object" || stream === null || typeof stream.on !== "function") {
      throw new TypeError("argument stream must be a stream");
    }
    if (options === true || typeof options === "string") {
      opts = {
        encoding: options
      };
    }
    if (typeof options === "function") {
      done = options;
      opts = {};
    }
    if (done !== undefined && typeof done !== "function") {
      throw new TypeError("argument callback must be a function");
    }
    if (!done && !global.Promise) {
      throw new TypeError("argument callback is required");
    }
    var encoding = opts.encoding !== true ? opts.encoding : "utf-8";
    var limit = bytes.parse(opts.limit);
    var length = opts.length != null && !isNaN(opts.length) ? parseInt(opts.length, 10) : null;
    if (done) {
      return readStream(stream, encoding, length, limit, wrap(done));
    }
    return new Promise(function executor(resolve, reject) {
      readStream(stream, encoding, length, limit, function onRead(err, buf) {
        if (err)
          return reject(err);
        resolve(buf);
      });
    });
  };
  var halt = function(stream) {
    unpipe(stream);
    if (typeof stream.pause === "function") {
      stream.pause();
    }
  };
  var readStream = function(stream, encoding, length, limit, callback) {
    var complete = false;
    var sync = true;
    if (limit !== null && length !== null && length > limit) {
      return done(createError(413, "request entity too large", {
        expected: length,
        length,
        limit,
        type: "entity.too.large"
      }));
    }
    var state = stream._readableState;
    if (stream._decoder || state && (state.encoding || state.decoder)) {
      return done(createError(500, "stream encoding should not be set", {
        type: "stream.encoding.set"
      }));
    }
    if (typeof stream.readable !== "undefined" && !stream.readable) {
      return done(createError(500, "stream is not readable", {
        type: "stream.not.readable"
      }));
    }
    var received = 0;
    var decoder;
    try {
      decoder = getDecoder(encoding);
    } catch (err) {
      return done(err);
    }
    var buffer = decoder ? "" : [];
    stream.on("aborted", onAborted);
    stream.on("close", cleanup);
    stream.on("data", onData);
    stream.on("end", onEnd);
    stream.on("error", onEnd);
    sync = false;
    function done() {
      var args = new Array(arguments.length);
      for (var i = 0;i < args.length; i++) {
        args[i] = arguments[i];
      }
      complete = true;
      if (sync) {
        process.nextTick(invokeCallback);
      } else {
        invokeCallback();
      }
      function invokeCallback() {
        cleanup();
        if (args[0]) {
          halt(stream);
        }
        callback.apply(null, args);
      }
    }
    function onAborted() {
      if (complete)
        return;
      done(createError(400, "request aborted", {
        code: "ECONNABORTED",
        expected: length,
        length,
        received,
        type: "request.aborted"
      }));
    }
    function onData(chunk) {
      if (complete)
        return;
      received += chunk.length;
      if (limit !== null && received > limit) {
        done(createError(413, "request entity too large", {
          limit,
          received,
          type: "entity.too.large"
        }));
      } else if (decoder) {
        buffer += decoder.write(chunk);
      } else {
        buffer.push(chunk);
      }
    }
    function onEnd(err) {
      if (complete)
        return;
      if (err)
        return done(err);
      if (length !== null && received !== length) {
        done(createError(400, "request size did not match content length", {
          expected: length,
          length,
          received,
          type: "request.size.invalid"
        }));
      } else {
        var string = decoder ? buffer + (decoder.end() || "") : Buffer.concat(buffer);
        done(null, string);
      }
    }
    function cleanup() {
      buffer = null;
      stream.removeListener("aborted", onAborted);
      stream.removeListener("data", onData);
      stream.removeListener("end", onEnd);
      stream.removeListener("error", onEnd);
      stream.removeListener("close", cleanup);
    }
  };
  var tryRequireAsyncHooks = function() {
    try {
      return import.meta.require("async_hooks");
    } catch (e) {
      return {};
    }
  };
  var wrap = function(fn) {
    var res;
    if (asyncHooks.AsyncResource) {
      res = new asyncHooks.AsyncResource(fn.name || "bound-anonymous-fn");
    }
    if (!res || !res.runInAsyncScope) {
      return fn;
    }
    return res.runInAsyncScope.bind(res, fn, null);
  };
  /*!
   * raw-body
   * Copyright(c) 2013-2014 Jonathan Ong
   * Copyright(c) 2014-2022 Douglas Christopher Wilson
   * MIT Licensed
   */
  var asyncHooks = tryRequireAsyncHooks();
  var bytes = require_bytes();
  var createError = require_http_errors();
  var iconv = require_lib();
  var unpipe = require_unpipe();
  module.exports = getRawBody;
  var ICONV_ENCODING_MESSAGE_REGEXP = /^Encoding not recognized: /;
});

// node_modules/ee-first/index.js
var require_ee_first = __commonJS((exports, module) => {
  var first = function(stuff, done) {
    if (!Array.isArray(stuff))
      throw new TypeError("arg must be an array of [ee, events...] arrays");
    var cleanups = [];
    for (var i = 0;i < stuff.length; i++) {
      var arr = stuff[i];
      if (!Array.isArray(arr) || arr.length < 2)
        throw new TypeError("each array member must be [ee, events...]");
      var ee = arr[0];
      for (var j = 1;j < arr.length; j++) {
        var event = arr[j];
        var fn = listener(event, callback);
        ee.on(event, fn);
        cleanups.push({
          ee,
          event,
          fn
        });
      }
    }
    function callback() {
      cleanup();
      done.apply(null, arguments);
    }
    function cleanup() {
      var x;
      for (var i2 = 0;i2 < cleanups.length; i2++) {
        x = cleanups[i2];
        x.ee.removeListener(x.event, x.fn);
      }
    }
    function thunk(fn2) {
      done = fn2;
    }
    thunk.cancel = cleanup;
    return thunk;
  };
  var listener = function(event, done) {
    return function onevent(arg1) {
      var args = new Array(arguments.length);
      var ee = this;
      var err = event === "error" ? arg1 : null;
      for (var i = 0;i < args.length; i++) {
        args[i] = arguments[i];
      }
      done(err, ee, event, args);
    };
  };
  /*!
   * ee-first
   * Copyright(c) 2014 Jonathan Ong
   * MIT Licensed
   */
  module.exports = first;
});

// node_modules/on-finished/index.js
var require_on_finished = __commonJS((exports, module) => {
  var onFinished = function(msg, listener) {
    if (isFinished(msg) !== false) {
      defer(listener, null, msg);
      return msg;
    }
    attachListener(msg, wrap(listener));
    return msg;
  };
  var isFinished = function(msg) {
    var socket = msg.socket;
    if (typeof msg.finished === "boolean") {
      return Boolean(msg.finished || socket && !socket.writable);
    }
    if (typeof msg.complete === "boolean") {
      return Boolean(msg.upgrade || !socket || !socket.readable || msg.complete && !msg.readable);
    }
    return;
  };
  var attachFinishedListener = function(msg, callback) {
    var eeMsg;
    var eeSocket;
    var finished = false;
    function onFinish(error) {
      eeMsg.cancel();
      eeSocket.cancel();
      finished = true;
      callback(error);
    }
    eeMsg = eeSocket = first([[msg, "end", "finish"]], onFinish);
    function onSocket(socket) {
      msg.removeListener("socket", onSocket);
      if (finished)
        return;
      if (eeMsg !== eeSocket)
        return;
      eeSocket = first([[socket, "error", "close"]], onFinish);
    }
    if (msg.socket) {
      onSocket(msg.socket);
      return;
    }
    msg.on("socket", onSocket);
    if (msg.socket === undefined) {
      patchAssignSocket(msg, onSocket);
    }
  };
  var attachListener = function(msg, listener) {
    var attached = msg.__onFinished;
    if (!attached || !attached.queue) {
      attached = msg.__onFinished = createListener(msg);
      attachFinishedListener(msg, attached);
    }
    attached.queue.push(listener);
  };
  var createListener = function(msg) {
    function listener(err) {
      if (msg.__onFinished === listener)
        msg.__onFinished = null;
      if (!listener.queue)
        return;
      var queue = listener.queue;
      listener.queue = null;
      for (var i = 0;i < queue.length; i++) {
        queue[i](err, msg);
      }
    }
    listener.queue = [];
    return listener;
  };
  var patchAssignSocket = function(res, callback) {
    var assignSocket = res.assignSocket;
    if (typeof assignSocket !== "function")
      return;
    res.assignSocket = function _assignSocket(socket) {
      assignSocket.call(this, socket);
      callback(socket);
    };
  };
  var tryRequireAsyncHooks = function() {
    try {
      return import.meta.require("async_hooks");
    } catch (e) {
      return {};
    }
  };
  var wrap = function(fn) {
    var res;
    if (asyncHooks.AsyncResource) {
      res = new asyncHooks.AsyncResource(fn.name || "bound-anonymous-fn");
    }
    if (!res || !res.runInAsyncScope) {
      return fn;
    }
    return res.runInAsyncScope.bind(res, fn, null);
  };
  /*!
   * on-finished
   * Copyright(c) 2013 Jonathan Ong
   * Copyright(c) 2014 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = onFinished;
  module.exports.isFinished = isFinished;
  var asyncHooks = tryRequireAsyncHooks();
  var first = require_ee_first();
  var defer = typeof setImmediate === "function" ? setImmediate : function(fn) {
    process.nextTick(fn.bind.apply(fn, arguments));
  };
});

// node_modules/body-parser/lib/read.js
var require_read = __commonJS((exports, module) => {
  var read = function(req, res, next, parse, debug2, options) {
    var length;
    var opts = options;
    var stream;
    req._body = true;
    var encoding = opts.encoding !== null ? opts.encoding : null;
    var verify = opts.verify;
    try {
      stream = contentstream(req, debug2, opts.inflate);
      length = stream.length;
      stream.length = undefined;
    } catch (err) {
      return next(err);
    }
    opts.length = length;
    opts.encoding = verify ? null : encoding;
    if (opts.encoding === null && encoding !== null && !iconv.encodingExists(encoding)) {
      return next(createError(415, 'unsupported charset "' + encoding.toUpperCase() + '"', {
        charset: encoding.toLowerCase(),
        type: "charset.unsupported"
      }));
    }
    debug2("read body");
    getBody(stream, opts, function(error, body) {
      if (error) {
        var _error;
        if (error.type === "encoding.unsupported") {
          _error = createError(415, 'unsupported charset "' + encoding.toUpperCase() + '"', {
            charset: encoding.toLowerCase(),
            type: "charset.unsupported"
          });
        } else {
          _error = createError(400, error);
        }
        if (stream !== req) {
          unpipe(req);
          destroy(stream, true);
        }
        dump(req, function onfinished() {
          next(createError(400, _error));
        });
        return;
      }
      if (verify) {
        try {
          debug2("verify body");
          verify(req, res, body, encoding);
        } catch (err) {
          next(createError(403, err, {
            body,
            type: err.type || "entity.verify.failed"
          }));
          return;
        }
      }
      var str = body;
      try {
        debug2("parse body");
        str = typeof body !== "string" && encoding !== null ? iconv.decode(body, encoding) : body;
        req.body = parse(str);
      } catch (err) {
        next(createError(400, err, {
          body: str,
          type: err.type || "entity.parse.failed"
        }));
        return;
      }
      next();
    });
  };
  var contentstream = function(req, debug2, inflate) {
    var encoding = (req.headers["content-encoding"] || "identity").toLowerCase();
    var length = req.headers["content-length"];
    var stream;
    debug2('content-encoding "%s"', encoding);
    if (inflate === false && encoding !== "identity") {
      throw createError(415, "content encoding unsupported", {
        encoding,
        type: "encoding.unsupported"
      });
    }
    switch (encoding) {
      case "deflate":
        stream = zlib.createInflate();
        debug2("inflate body");
        req.pipe(stream);
        break;
      case "gzip":
        stream = zlib.createGunzip();
        debug2("gunzip body");
        req.pipe(stream);
        break;
      case "identity":
        stream = req;
        stream.length = length;
        break;
      default:
        throw createError(415, 'unsupported content encoding "' + encoding + '"', {
          encoding,
          type: "encoding.unsupported"
        });
    }
    return stream;
  };
  var dump = function(req, callback) {
    if (onFinished.isFinished(req)) {
      callback(null);
    } else {
      onFinished(req, callback);
      req.resume();
    }
  };
  /*!
   * body-parser
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var createError = require_http_errors();
  var destroy = require_destroy();
  var getBody = require_raw_body();
  var iconv = require_lib();
  var onFinished = require_on_finished();
  var unpipe = require_unpipe();
  var zlib = import.meta.require("zlib");
  module.exports = read;
});

// node_modules/media-typer/index.js
var require_media_typer = __commonJS((exports) => {
  var format = function(obj) {
    if (!obj || typeof obj !== "object") {
      throw new TypeError("argument obj is required");
    }
    var parameters = obj.parameters;
    var subtype = obj.subtype;
    var suffix = obj.suffix;
    var type = obj.type;
    if (!type || !typeNameRegExp.test(type)) {
      throw new TypeError("invalid type");
    }
    if (!subtype || !subtypeNameRegExp.test(subtype)) {
      throw new TypeError("invalid subtype");
    }
    var string = type + "/" + subtype;
    if (suffix) {
      if (!typeNameRegExp.test(suffix)) {
        throw new TypeError("invalid suffix");
      }
      string += "+" + suffix;
    }
    if (parameters && typeof parameters === "object") {
      var param;
      var params = Object.keys(parameters).sort();
      for (var i = 0;i < params.length; i++) {
        param = params[i];
        if (!tokenRegExp.test(param)) {
          throw new TypeError("invalid parameter name");
        }
        string += "; " + param + "=" + qstring(parameters[param]);
      }
    }
    return string;
  };
  var parse = function(string) {
    if (!string) {
      throw new TypeError("argument string is required");
    }
    if (typeof string === "object") {
      string = getcontenttype(string);
    }
    if (typeof string !== "string") {
      throw new TypeError("argument string is required to be a string");
    }
    var index = string.indexOf(";");
    var type = index !== -1 ? string.substr(0, index) : string;
    var key;
    var match;
    var obj = splitType(type);
    var params = {};
    var value;
    paramRegExp.lastIndex = index;
    while (match = paramRegExp.exec(string)) {
      if (match.index !== index) {
        throw new TypeError("invalid parameter format");
      }
      index += match[0].length;
      key = match[1].toLowerCase();
      value = match[2];
      if (value[0] === '"') {
        value = value.substr(1, value.length - 2).replace(qescRegExp, "$1");
      }
      params[key] = value;
    }
    if (index !== -1 && index !== string.length) {
      throw new TypeError("invalid parameter format");
    }
    obj.parameters = params;
    return obj;
  };
  var getcontenttype = function(obj) {
    if (typeof obj.getHeader === "function") {
      return obj.getHeader("content-type");
    }
    if (typeof obj.headers === "object") {
      return obj.headers && obj.headers["content-type"];
    }
  };
  var qstring = function(val) {
    var str = String(val);
    if (tokenRegExp.test(str)) {
      return str;
    }
    if (str.length > 0 && !textRegExp.test(str)) {
      throw new TypeError("invalid parameter value");
    }
    return '"' + str.replace(quoteRegExp, "\\$1") + '"';
  };
  var splitType = function(string) {
    var match = typeRegExp.exec(string.toLowerCase());
    if (!match) {
      throw new TypeError("invalid media type");
    }
    var type = match[1];
    var subtype = match[2];
    var suffix;
    var index = subtype.lastIndexOf("+");
    if (index !== -1) {
      suffix = subtype.substr(index + 1);
      subtype = subtype.substr(0, index);
    }
    var obj = {
      type,
      subtype,
      suffix
    };
    return obj;
  };
  /*!
   * media-typer
   * Copyright(c) 2014 Douglas Christopher Wilson
   * MIT Licensed
   */
  var paramRegExp = /; *([!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) *= *("(?:[ !\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u0020-\u007e])*"|[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) */g;
  var textRegExp = /^[\u0020-\u007e\u0080-\u00ff]+$/;
  var tokenRegExp = /^[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+$/;
  var qescRegExp = /\\([\u0000-\u007f])/g;
  var quoteRegExp = /([\\"])/g;
  var subtypeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/;
  var typeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/;
  var typeRegExp = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/;
  exports.format = format;
  exports.parse = parse;
});

// node_modules/type-is/index.js
var require_type_is = __commonJS((exports, module) => {
  var typeis = function(value, types_) {
    var i;
    var types = types_;
    var val = tryNormalizeType(value);
    if (!val) {
      return false;
    }
    if (types && !Array.isArray(types)) {
      types = new Array(arguments.length - 1);
      for (i = 0;i < types.length; i++) {
        types[i] = arguments[i + 1];
      }
    }
    if (!types || !types.length) {
      return val;
    }
    var type;
    for (i = 0;i < types.length; i++) {
      if (mimeMatch(normalize(type = types[i]), val)) {
        return type[0] === "+" || type.indexOf("*") !== -1 ? val : type;
      }
    }
    return false;
  };
  var hasbody = function(req) {
    return req.headers["transfer-encoding"] !== undefined || !isNaN(req.headers["content-length"]);
  };
  var typeofrequest = function(req, types_) {
    var types = types_;
    if (!hasbody(req)) {
      return null;
    }
    if (arguments.length > 2) {
      types = new Array(arguments.length - 1);
      for (var i = 0;i < types.length; i++) {
        types[i] = arguments[i + 1];
      }
    }
    var value = req.headers["content-type"];
    return typeis(value, types);
  };
  var normalize = function(type) {
    if (typeof type !== "string") {
      return false;
    }
    switch (type) {
      case "urlencoded":
        return "application/x-www-form-urlencoded";
      case "multipart":
        return "multipart/*";
    }
    if (type[0] === "+") {
      return "*/*" + type;
    }
    return type.indexOf("/") === -1 ? mime2.lookup(type) : type;
  };
  var mimeMatch = function(expected, actual) {
    if (expected === false) {
      return false;
    }
    var actualParts = actual.split("/");
    var expectedParts = expected.split("/");
    if (actualParts.length !== 2 || expectedParts.length !== 2) {
      return false;
    }
    if (expectedParts[0] !== "*" && expectedParts[0] !== actualParts[0]) {
      return false;
    }
    if (expectedParts[1].substr(0, 2) === "*+") {
      return expectedParts[1].length <= actualParts[1].length + 1 && expectedParts[1].substr(1) === actualParts[1].substr(1 - expectedParts[1].length);
    }
    if (expectedParts[1] !== "*" && expectedParts[1] !== actualParts[1]) {
      return false;
    }
    return true;
  };
  var normalizeType = function(value) {
    var type = typer.parse(value);
    type.parameters = undefined;
    return typer.format(type);
  };
  var tryNormalizeType = function(value) {
    if (!value) {
      return null;
    }
    try {
      return normalizeType(value);
    } catch (err) {
      return null;
    }
  };
  /*!
   * type-is
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var typer = require_media_typer();
  var mime2 = require_mime_types();
  module.exports = typeofrequest;
  module.exports.is = typeis;
  module.exports.hasBody = hasbody;
  module.exports.normalize = normalize;
  module.exports.match = mimeMatch;
});

// node_modules/body-parser/lib/types/json.js
var require_json = __commonJS((exports, module) => {
  var json = function(options) {
    var opts = options || {};
    var limit = typeof opts.limit !== "number" ? bytes.parse(opts.limit || "100kb") : opts.limit;
    var inflate = opts.inflate !== false;
    var reviver = opts.reviver;
    var strict = opts.strict !== false;
    var type = opts.type || "application/json";
    var verify = opts.verify || false;
    if (verify !== false && typeof verify !== "function") {
      throw new TypeError("option verify must be function");
    }
    var shouldParse = typeof type !== "function" ? typeChecker(type) : type;
    function parse(body) {
      if (body.length === 0) {
        return {};
      }
      if (strict) {
        var first = firstchar(body);
        if (first !== "{" && first !== "[") {
          debug2("strict violation");
          throw createStrictSyntaxError(body, first);
        }
      }
      try {
        debug2("parse json");
        return JSON.parse(body, reviver);
      } catch (e) {
        throw normalizeJsonSyntaxError(e, {
          message: e.message,
          stack: e.stack
        });
      }
    }
    return function jsonParser(req, res, next) {
      if (req._body) {
        debug2("body already parsed");
        next();
        return;
      }
      req.body = req.body || {};
      if (!typeis.hasBody(req)) {
        debug2("skip empty body");
        next();
        return;
      }
      debug2("content-type %j", req.headers["content-type"]);
      if (!shouldParse(req)) {
        debug2("skip parsing");
        next();
        return;
      }
      var charset = getCharset(req) || "utf-8";
      if (charset.slice(0, 4) !== "utf-") {
        debug2("invalid charset");
        next(createError(415, 'unsupported charset "' + charset.toUpperCase() + '"', {
          charset,
          type: "charset.unsupported"
        }));
        return;
      }
      read(req, res, next, parse, debug2, {
        encoding: charset,
        inflate,
        limit,
        verify
      });
    };
  };
  var createStrictSyntaxError = function(str, char) {
    var index = str.indexOf(char);
    var partial = "";
    if (index !== -1) {
      partial = str.substring(0, index) + JSON_SYNTAX_CHAR;
      for (var i = index + 1;i < str.length; i++) {
        partial += JSON_SYNTAX_CHAR;
      }
    }
    try {
      JSON.parse(partial);
      throw new SyntaxError("strict violation");
    } catch (e) {
      return normalizeJsonSyntaxError(e, {
        message: e.message.replace(JSON_SYNTAX_REGEXP, function(placeholder) {
          return str.substring(index, index + placeholder.length);
        }),
        stack: e.stack
      });
    }
  };
  var firstchar = function(str) {
    var match = FIRST_CHAR_REGEXP.exec(str);
    return match ? match[1] : undefined;
  };
  var getCharset = function(req) {
    try {
      return (contentType.parse(req).parameters.charset || "").toLowerCase();
    } catch (e) {
      return;
    }
  };
  var normalizeJsonSyntaxError = function(error, obj) {
    var keys = Object.getOwnPropertyNames(error);
    for (var i = 0;i < keys.length; i++) {
      var key = keys[i];
      if (key !== "stack" && key !== "message") {
        delete error[key];
      }
    }
    error.stack = obj.stack.replace(error.message, obj.message);
    error.message = obj.message;
    return error;
  };
  var typeChecker = function(type) {
    return function checkType(req) {
      return Boolean(typeis(req, type));
    };
  };
  /*!
   * body-parser
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var bytes = require_bytes();
  var contentType = require_content_type();
  var createError = require_http_errors();
  var debug2 = require_src()("body-parser:json");
  var read = require_read();
  var typeis = require_type_is();
  module.exports = json;
  var FIRST_CHAR_REGEXP = /^[\x20\x09\x0a\x0d]*([^\x20\x09\x0a\x0d])/;
  var JSON_SYNTAX_CHAR = "#";
  var JSON_SYNTAX_REGEXP = /#+/g;
});

// node_modules/body-parser/lib/types/raw.js
var require_raw = __commonJS((exports, module) => {
  var raw = function(options) {
    var opts = options || {};
    var inflate = opts.inflate !== false;
    var limit = typeof opts.limit !== "number" ? bytes.parse(opts.limit || "100kb") : opts.limit;
    var type = opts.type || "application/octet-stream";
    var verify = opts.verify || false;
    if (verify !== false && typeof verify !== "function") {
      throw new TypeError("option verify must be function");
    }
    var shouldParse = typeof type !== "function" ? typeChecker(type) : type;
    function parse(buf) {
      return buf;
    }
    return function rawParser(req, res, next) {
      if (req._body) {
        debug2("body already parsed");
        next();
        return;
      }
      req.body = req.body || {};
      if (!typeis.hasBody(req)) {
        debug2("skip empty body");
        next();
        return;
      }
      debug2("content-type %j", req.headers["content-type"]);
      if (!shouldParse(req)) {
        debug2("skip parsing");
        next();
        return;
      }
      read(req, res, next, parse, debug2, {
        encoding: null,
        inflate,
        limit,
        verify
      });
    };
  };
  var typeChecker = function(type) {
    return function checkType(req) {
      return Boolean(typeis(req, type));
    };
  };
  /*!
   * body-parser
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var bytes = require_bytes();
  var debug2 = require_src()("body-parser:raw");
  var read = require_read();
  var typeis = require_type_is();
  module.exports = raw;
});

// node_modules/body-parser/lib/types/text.js
var require_text = __commonJS((exports, module) => {
  var text = function(options) {
    var opts = options || {};
    var defaultCharset = opts.defaultCharset || "utf-8";
    var inflate = opts.inflate !== false;
    var limit = typeof opts.limit !== "number" ? bytes.parse(opts.limit || "100kb") : opts.limit;
    var type = opts.type || "text/plain";
    var verify = opts.verify || false;
    if (verify !== false && typeof verify !== "function") {
      throw new TypeError("option verify must be function");
    }
    var shouldParse = typeof type !== "function" ? typeChecker(type) : type;
    function parse(buf) {
      return buf;
    }
    return function textParser(req, res, next) {
      if (req._body) {
        debug2("body already parsed");
        next();
        return;
      }
      req.body = req.body || {};
      if (!typeis.hasBody(req)) {
        debug2("skip empty body");
        next();
        return;
      }
      debug2("content-type %j", req.headers["content-type"]);
      if (!shouldParse(req)) {
        debug2("skip parsing");
        next();
        return;
      }
      var charset = getCharset(req) || defaultCharset;
      read(req, res, next, parse, debug2, {
        encoding: charset,
        inflate,
        limit,
        verify
      });
    };
  };
  var getCharset = function(req) {
    try {
      return (contentType.parse(req).parameters.charset || "").toLowerCase();
    } catch (e) {
      return;
    }
  };
  var typeChecker = function(type) {
    return function checkType(req) {
      return Boolean(typeis(req, type));
    };
  };
  /*!
   * body-parser
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var bytes = require_bytes();
  var contentType = require_content_type();
  var debug2 = require_src()("body-parser:text");
  var read = require_read();
  var typeis = require_type_is();
  module.exports = text;
});

// node_modules/has-symbols/shams.js
var require_shams = __commonJS((exports, module) => {
  module.exports = function hasSymbols() {
    if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
      return false;
    }
    if (typeof Symbol.iterator === "symbol") {
      return true;
    }
    var obj = {};
    var sym = Symbol("test");
    var symObj = Object(sym);
    if (typeof sym === "string") {
      return false;
    }
    if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
      return false;
    }
    if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
      return false;
    }
    var symVal = 42;
    obj[sym] = symVal;
    for (sym in obj) {
      return false;
    }
    if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
      return false;
    }
    if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
      return false;
    }
    var syms = Object.getOwnPropertySymbols(obj);
    if (syms.length !== 1 || syms[0] !== sym) {
      return false;
    }
    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
      return false;
    }
    if (typeof Object.getOwnPropertyDescriptor === "function") {
      var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
      if (descriptor.value !== symVal || descriptor.enumerable !== true) {
        return false;
      }
    }
    return true;
  };
});

// node_modules/has-symbols/index.js
var require_has_symbols = __commonJS((exports, module) => {
  var origSymbol = typeof Symbol !== "undefined" && Symbol;
  var hasSymbolSham = require_shams();
  module.exports = function hasNativeSymbols() {
    if (typeof origSymbol !== "function") {
      return false;
    }
    if (typeof Symbol !== "function") {
      return false;
    }
    if (typeof origSymbol("foo") !== "symbol") {
      return false;
    }
    if (typeof Symbol("bar") !== "symbol") {
      return false;
    }
    return hasSymbolSham();
  };
});

// node_modules/has-proto/index.js
var require_has_proto = __commonJS((exports, module) => {
  var test = {
    foo: {}
  };
  var $Object = Object;
  module.exports = function hasProto() {
    return { __proto__: test }.foo === test.foo && !({ __proto__: null } instanceof $Object);
  };
});

// node_modules/get-intrinsic/node_modules/function-bind/implementation.js
var require_implementation = __commonJS((exports, module) => {
  var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
  var slice = Array.prototype.slice;
  var toStr = Object.prototype.toString;
  var funcType = "[object Function]";
  module.exports = function bind(that) {
    var target = this;
    if (typeof target !== "function" || toStr.call(target) !== funcType) {
      throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);
    var bound;
    var binder = function() {
      if (this instanceof bound) {
        var result = target.apply(this, args.concat(slice.call(arguments)));
        if (Object(result) === result) {
          return result;
        }
        return this;
      } else {
        return target.apply(that, args.concat(slice.call(arguments)));
      }
    };
    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0;i < boundLength; i++) {
      boundArgs.push("$" + i);
    }
    bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);
    if (target.prototype) {
      var Empty = function Empty() {
      };
      Empty.prototype = target.prototype;
      bound.prototype = new Empty;
      Empty.prototype = null;
    }
    return bound;
  };
});

// node_modules/get-intrinsic/node_modules/function-bind/index.js
var require_function_bind = __commonJS((exports, module) => {
  var implementation = require_implementation();
  module.exports = Function.prototype.bind || implementation;
});

// node_modules/has/node_modules/function-bind/implementation.js
var require_implementation2 = __commonJS((exports, module) => {
  var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
  var slice = Array.prototype.slice;
  var toStr = Object.prototype.toString;
  var funcType = "[object Function]";
  module.exports = function bind(that) {
    var target = this;
    if (typeof target !== "function" || toStr.call(target) !== funcType) {
      throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);
    var bound;
    var binder = function() {
      if (this instanceof bound) {
        var result = target.apply(this, args.concat(slice.call(arguments)));
        if (Object(result) === result) {
          return result;
        }
        return this;
      } else {
        return target.apply(that, args.concat(slice.call(arguments)));
      }
    };
    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0;i < boundLength; i++) {
      boundArgs.push("$" + i);
    }
    bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);
    if (target.prototype) {
      var Empty = function Empty() {
      };
      Empty.prototype = target.prototype;
      bound.prototype = new Empty;
      Empty.prototype = null;
    }
    return bound;
  };
});

// node_modules/has/node_modules/function-bind/index.js
var require_function_bind2 = __commonJS((exports, module) => {
  var implementation = require_implementation2();
  module.exports = Function.prototype.bind || implementation;
});

// node_modules/has/src/index.js
var require_src2 = __commonJS((exports, module) => {
  var bind = require_function_bind2();
  module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);
});

// node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS((exports, module) => {
  var undefined2;
  var $SyntaxError = SyntaxError;
  var $Function = Function;
  var $TypeError = TypeError;
  var getEvalledConstructor = function(expressionSyntax) {
    try {
      return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
    } catch (e) {
    }
  };
  var $gOPD = Object.getOwnPropertyDescriptor;
  if ($gOPD) {
    try {
      $gOPD({}, "");
    } catch (e) {
      $gOPD = null;
    }
  }
  var throwTypeError = function() {
    throw new $TypeError;
  };
  var ThrowTypeError = $gOPD ? function() {
    try {
      arguments.callee;
      return throwTypeError;
    } catch (calleeThrows) {
      try {
        return $gOPD(arguments, "callee").get;
      } catch (gOPDthrows) {
        return throwTypeError;
      }
    }
  }() : throwTypeError;
  var hasSymbols = require_has_symbols()();
  var hasProto = require_has_proto()();
  var getProto = Object.getPrototypeOf || (hasProto ? function(x) {
    return x.__proto__;
  } : null);
  var needsEval = {};
  var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined2 : getProto(Uint8Array);
  var INTRINSICS = {
    "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
    "%Array%": Array,
    "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
    "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,
    "%AsyncFromSyncIteratorPrototype%": undefined2,
    "%AsyncFunction%": needsEval,
    "%AsyncGenerator%": needsEval,
    "%AsyncGeneratorFunction%": needsEval,
    "%AsyncIteratorPrototype%": needsEval,
    "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
    "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
    "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined2 : BigInt64Array,
    "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined2 : BigUint64Array,
    "%Boolean%": Boolean,
    "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
    "%Date%": Date,
    "%decodeURI%": decodeURI,
    "%decodeURIComponent%": decodeURIComponent,
    "%encodeURI%": encodeURI,
    "%encodeURIComponent%": encodeURIComponent,
    "%Error%": Error,
    "%eval%": eval,
    "%EvalError%": EvalError,
    "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
    "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
    "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
    "%Function%": $Function,
    "%GeneratorFunction%": needsEval,
    "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
    "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
    "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
    "%isFinite%": isFinite,
    "%isNaN%": isNaN,
    "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,
    "%JSON%": typeof JSON === "object" ? JSON : undefined2,
    "%Map%": typeof Map === "undefined" ? undefined2 : Map,
    "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto(new Map()[Symbol.iterator]()),
    "%Math%": Math,
    "%Number%": Number,
    "%Object%": Object,
    "%parseFloat%": parseFloat,
    "%parseInt%": parseInt,
    "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
    "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
    "%RangeError%": RangeError,
    "%ReferenceError%": ReferenceError,
    "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
    "%RegExp%": RegExp,
    "%Set%": typeof Set === "undefined" ? undefined2 : Set,
    "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto(new Set()[Symbol.iterator]()),
    "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
    "%String%": String,
    "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2,
    "%Symbol%": hasSymbols ? Symbol : undefined2,
    "%SyntaxError%": $SyntaxError,
    "%ThrowTypeError%": ThrowTypeError,
    "%TypedArray%": TypedArray,
    "%TypeError%": $TypeError,
    "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
    "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
    "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
    "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
    "%URIError%": URIError,
    "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
    "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
    "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
  };
  if (getProto) {
    try {
      null.error;
    } catch (e) {
      errorProto = getProto(getProto(e));
      INTRINSICS["%Error.prototype%"] = errorProto;
    }
  }
  var errorProto;
  var doEval = function doEval(name) {
    var value;
    if (name === "%AsyncFunction%") {
      value = getEvalledConstructor("async function () {}");
    } else if (name === "%GeneratorFunction%") {
      value = getEvalledConstructor("function* () {}");
    } else if (name === "%AsyncGeneratorFunction%") {
      value = getEvalledConstructor("async function* () {}");
    } else if (name === "%AsyncGenerator%") {
      var fn = doEval("%AsyncGeneratorFunction%");
      if (fn) {
        value = fn.prototype;
      }
    } else if (name === "%AsyncIteratorPrototype%") {
      var gen = doEval("%AsyncGenerator%");
      if (gen && getProto) {
        value = getProto(gen.prototype);
      }
    }
    INTRINSICS[name] = value;
    return value;
  };
  var LEGACY_ALIASES = {
    "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
    "%ArrayPrototype%": ["Array", "prototype"],
    "%ArrayProto_entries%": ["Array", "prototype", "entries"],
    "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
    "%ArrayProto_keys%": ["Array", "prototype", "keys"],
    "%ArrayProto_values%": ["Array", "prototype", "values"],
    "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
    "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
    "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
    "%BooleanPrototype%": ["Boolean", "prototype"],
    "%DataViewPrototype%": ["DataView", "prototype"],
    "%DatePrototype%": ["Date", "prototype"],
    "%ErrorPrototype%": ["Error", "prototype"],
    "%EvalErrorPrototype%": ["EvalError", "prototype"],
    "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
    "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
    "%FunctionPrototype%": ["Function", "prototype"],
    "%Generator%": ["GeneratorFunction", "prototype"],
    "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
    "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
    "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
    "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
    "%JSONParse%": ["JSON", "parse"],
    "%JSONStringify%": ["JSON", "stringify"],
    "%MapPrototype%": ["Map", "prototype"],
    "%NumberPrototype%": ["Number", "prototype"],
    "%ObjectPrototype%": ["Object", "prototype"],
    "%ObjProto_toString%": ["Object", "prototype", "toString"],
    "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
    "%PromisePrototype%": ["Promise", "prototype"],
    "%PromiseProto_then%": ["Promise", "prototype", "then"],
    "%Promise_all%": ["Promise", "all"],
    "%Promise_reject%": ["Promise", "reject"],
    "%Promise_resolve%": ["Promise", "resolve"],
    "%RangeErrorPrototype%": ["RangeError", "prototype"],
    "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
    "%RegExpPrototype%": ["RegExp", "prototype"],
    "%SetPrototype%": ["Set", "prototype"],
    "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
    "%StringPrototype%": ["String", "prototype"],
    "%SymbolPrototype%": ["Symbol", "prototype"],
    "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
    "%TypedArrayPrototype%": ["TypedArray", "prototype"],
    "%TypeErrorPrototype%": ["TypeError", "prototype"],
    "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
    "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
    "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
    "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
    "%URIErrorPrototype%": ["URIError", "prototype"],
    "%WeakMapPrototype%": ["WeakMap", "prototype"],
    "%WeakSetPrototype%": ["WeakSet", "prototype"]
  };
  var bind = require_function_bind();
  var hasOwn = require_src2();
  var $concat = bind.call(Function.call, Array.prototype.concat);
  var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
  var $replace = bind.call(Function.call, String.prototype.replace);
  var $strSlice = bind.call(Function.call, String.prototype.slice);
  var $exec = bind.call(Function.call, RegExp.prototype.exec);
  var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath = function stringToPath(string) {
    var first = $strSlice(string, 0, 1);
    var last = $strSlice(string, -1);
    if (first === "%" && last !== "%") {
      throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
    } else if (last === "%" && first !== "%") {
      throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
    }
    var result = [];
    $replace(string, rePropName, function(match, number, quote, subString) {
      result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
    });
    return result;
  };
  var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
    var intrinsicName = name;
    var alias;
    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
      alias = LEGACY_ALIASES[intrinsicName];
      intrinsicName = "%" + alias[0] + "%";
    }
    if (hasOwn(INTRINSICS, intrinsicName)) {
      var value = INTRINSICS[intrinsicName];
      if (value === needsEval) {
        value = doEval(intrinsicName);
      }
      if (typeof value === "undefined" && !allowMissing) {
        throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
      }
      return {
        alias,
        name: intrinsicName,
        value
      };
    }
    throw new $SyntaxError("intrinsic " + name + " does not exist!");
  };
  module.exports = function GetIntrinsic(name, allowMissing) {
    if (typeof name !== "string" || name.length === 0) {
      throw new $TypeError("intrinsic name must be a non-empty string");
    }
    if (arguments.length > 1 && typeof allowMissing !== "boolean") {
      throw new $TypeError('"allowMissing" argument must be a boolean');
    }
    if ($exec(/^%?[^%]*%?$/, name) === null) {
      throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    }
    var parts = stringToPath(name);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
    var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;
    if (alias) {
      intrinsicBaseName = alias[0];
      $spliceApply(parts, $concat([0, 1], alias));
    }
    for (var i = 1, isOwn = true;i < parts.length; i += 1) {
      var part = parts[i];
      var first = $strSlice(part, 0, 1);
      var last = $strSlice(part, -1);
      if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
        throw new $SyntaxError("property names with quotes must have matching quotes");
      }
      if (part === "constructor" || !isOwn) {
        skipFurtherCaching = true;
      }
      intrinsicBaseName += "." + part;
      intrinsicRealName = "%" + intrinsicBaseName + "%";
      if (hasOwn(INTRINSICS, intrinsicRealName)) {
        value = INTRINSICS[intrinsicRealName];
      } else if (value != null) {
        if (!(part in value)) {
          if (!allowMissing) {
            throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
          }
          return;
        }
        if ($gOPD && i + 1 >= parts.length) {
          var desc = $gOPD(value, part);
          isOwn = !!desc;
          if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
            value = desc.get;
          } else {
            value = value[part];
          }
        } else {
          isOwn = hasOwn(value, part);
          value = value[part];
        }
        if (isOwn && !skipFurtherCaching) {
          INTRINSICS[intrinsicRealName] = value;
        }
      }
    }
    return value;
  };
});

// node_modules/call-bind/node_modules/function-bind/implementation.js
var require_implementation3 = __commonJS((exports, module) => {
  var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
  var slice = Array.prototype.slice;
  var toStr = Object.prototype.toString;
  var funcType = "[object Function]";
  module.exports = function bind(that) {
    var target = this;
    if (typeof target !== "function" || toStr.call(target) !== funcType) {
      throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);
    var bound;
    var binder = function() {
      if (this instanceof bound) {
        var result = target.apply(this, args.concat(slice.call(arguments)));
        if (Object(result) === result) {
          return result;
        }
        return this;
      } else {
        return target.apply(that, args.concat(slice.call(arguments)));
      }
    };
    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0;i < boundLength; i++) {
      boundArgs.push("$" + i);
    }
    bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);
    if (target.prototype) {
      var Empty = function Empty() {
      };
      Empty.prototype = target.prototype;
      bound.prototype = new Empty;
      Empty.prototype = null;
    }
    return bound;
  };
});

// node_modules/call-bind/node_modules/function-bind/index.js
var require_function_bind3 = __commonJS((exports, module) => {
  var implementation = require_implementation3();
  module.exports = Function.prototype.bind || implementation;
});

// node_modules/call-bind/index.js
var require_call_bind = __commonJS((exports, module) => {
  var bind = require_function_bind3();
  var GetIntrinsic = require_get_intrinsic();
  var $apply = GetIntrinsic("%Function.prototype.apply%");
  var $call = GetIntrinsic("%Function.prototype.call%");
  var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
  var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
  var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
  var $max = GetIntrinsic("%Math.max%");
  if ($defineProperty) {
    try {
      $defineProperty({}, "a", { value: 1 });
    } catch (e) {
      $defineProperty = null;
    }
  }
  module.exports = function callBind(originalFunction) {
    var func = $reflectApply(bind, $call, arguments);
    if ($gOPD && $defineProperty) {
      var desc = $gOPD(func, "length");
      if (desc.configurable) {
        $defineProperty(func, "length", { value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) });
      }
    }
    return func;
  };
  var applyBind = function applyBind() {
    return $reflectApply(bind, $apply, arguments);
  };
  if ($defineProperty) {
    $defineProperty(module.exports, "apply", { value: applyBind });
  } else {
    module.exports.apply = applyBind;
  }
});

// node_modules/call-bind/callBound.js
var require_callBound = __commonJS((exports, module) => {
  var GetIntrinsic = require_get_intrinsic();
  var callBind = require_call_bind();
  var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
  module.exports = function callBoundIntrinsic(name, allowMissing) {
    var intrinsic = GetIntrinsic(name, !!allowMissing);
    if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
      return callBind(intrinsic);
    }
    return intrinsic;
  };
});

// node_modules/object-inspect/util.inspect.js
var require_util_inspect = __commonJS((exports, module) => {
  module.exports = import.meta.require("util").inspect;
});

// node_modules/object-inspect/index.js
var require_object_inspect = __commonJS((exports, module) => {
  var addNumericSeparator = function(num, str) {
    if (num === Infinity || num === (-Infinity) || num !== num || num && num > -1000 && num < 1000 || $test.call(/e/, str)) {
      return str;
    }
    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
    if (typeof num === "number") {
      var int = num < 0 ? -$floor(-num) : $floor(num);
      if (int !== num) {
        var intStr = String(int);
        var dec = $slice.call(str, intStr.length + 1);
        return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
      }
    }
    return $replace.call(str, sepRegex, "$&_");
  };
  var wrapQuotes = function(s, defaultStyle, opts) {
    var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
    return quoteChar + s + quoteChar;
  };
  var quote = function(s) {
    return $replace.call(String(s), /"/g, "&quot;");
  };
  var isArray = function(obj) {
    return toStr(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && (toStringTag in obj)));
  };
  var isDate = function(obj) {
    return toStr(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && (toStringTag in obj)));
  };
  var isRegExp = function(obj) {
    return toStr(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && (toStringTag in obj)));
  };
  var isError = function(obj) {
    return toStr(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && (toStringTag in obj)));
  };
  var isString = function(obj) {
    return toStr(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && (toStringTag in obj)));
  };
  var isNumber = function(obj) {
    return toStr(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && (toStringTag in obj)));
  };
  var isBoolean = function(obj) {
    return toStr(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && (toStringTag in obj)));
  };
  var isSymbol = function(obj) {
    if (hasShammedSymbols) {
      return obj && typeof obj === "object" && obj instanceof Symbol;
    }
    if (typeof obj === "symbol") {
      return true;
    }
    if (!obj || typeof obj !== "object" || !symToString) {
      return false;
    }
    try {
      symToString.call(obj);
      return true;
    } catch (e) {
    }
    return false;
  };
  var isBigInt = function(obj) {
    if (!obj || typeof obj !== "object" || !bigIntValueOf) {
      return false;
    }
    try {
      bigIntValueOf.call(obj);
      return true;
    } catch (e) {
    }
    return false;
  };
  var has = function(obj, key) {
    return hasOwn.call(obj, key);
  };
  var toStr = function(obj) {
    return objectToString.call(obj);
  };
  var nameOf = function(f) {
    if (f.name) {
      return f.name;
    }
    var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
    if (m) {
      return m[1];
    }
    return null;
  };
  var indexOf = function(xs, x) {
    if (xs.indexOf) {
      return xs.indexOf(x);
    }
    for (var i = 0, l = xs.length;i < l; i++) {
      if (xs[i] === x) {
        return i;
      }
    }
    return -1;
  };
  var isMap = function(x) {
    if (!mapSize || !x || typeof x !== "object") {
      return false;
    }
    try {
      mapSize.call(x);
      try {
        setSize.call(x);
      } catch (s) {
        return true;
      }
      return x instanceof Map;
    } catch (e) {
    }
    return false;
  };
  var isWeakMap = function(x) {
    if (!weakMapHas || !x || typeof x !== "object") {
      return false;
    }
    try {
      weakMapHas.call(x, weakMapHas);
      try {
        weakSetHas.call(x, weakSetHas);
      } catch (s) {
        return true;
      }
      return x instanceof WeakMap;
    } catch (e) {
    }
    return false;
  };
  var isWeakRef = function(x) {
    if (!weakRefDeref || !x || typeof x !== "object") {
      return false;
    }
    try {
      weakRefDeref.call(x);
      return true;
    } catch (e) {
    }
    return false;
  };
  var isSet = function(x) {
    if (!setSize || !x || typeof x !== "object") {
      return false;
    }
    try {
      setSize.call(x);
      try {
        mapSize.call(x);
      } catch (m) {
        return true;
      }
      return x instanceof Set;
    } catch (e) {
    }
    return false;
  };
  var isWeakSet = function(x) {
    if (!weakSetHas || !x || typeof x !== "object") {
      return false;
    }
    try {
      weakSetHas.call(x, weakSetHas);
      try {
        weakMapHas.call(x, weakMapHas);
      } catch (s) {
        return true;
      }
      return x instanceof WeakSet;
    } catch (e) {
    }
    return false;
  };
  var isElement = function(x) {
    if (!x || typeof x !== "object") {
      return false;
    }
    if (typeof HTMLElement !== "undefined" && x instanceof HTMLElement) {
      return true;
    }
    return typeof x.nodeName === "string" && typeof x.getAttribute === "function";
  };
  var inspectString = function(str, opts) {
    if (str.length > opts.maxStringLength) {
      var remaining = str.length - opts.maxStringLength;
      var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
      return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
    }
    var s = $replace.call($replace.call(str, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, lowbyte);
    return wrapQuotes(s, "single", opts);
  };
  var lowbyte = function(c) {
    var n = c.charCodeAt(0);
    var x = {
      8: "b",
      9: "t",
      10: "n",
      12: "f",
      13: "r"
    }[n];
    if (x) {
      return "\\" + x;
    }
    return "\\x" + (n < 16 ? "0" : "") + $toUpperCase.call(n.toString(16));
  };
  var markBoxed = function(str) {
    return "Object(" + str + ")";
  };
  var weakCollectionOf = function(type) {
    return type + " { ? }";
  };
  var collectionOf = function(type, size, entries, indent) {
    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
    return type + " (" + size + ") {" + joinedEntries + "}";
  };
  var singleLineValues = function(xs) {
    for (var i = 0;i < xs.length; i++) {
      if (indexOf(xs[i], "\n") >= 0) {
        return false;
      }
    }
    return true;
  };
  var getIndent = function(opts, depth) {
    var baseIndent;
    if (opts.indent === "\t") {
      baseIndent = "\t";
    } else if (typeof opts.indent === "number" && opts.indent > 0) {
      baseIndent = $join.call(Array(opts.indent + 1), " ");
    } else {
      return null;
    }
    return {
      base: baseIndent,
      prev: $join.call(Array(depth + 1), baseIndent)
    };
  };
  var indentedJoin = function(xs, indent) {
    if (xs.length === 0) {
      return "";
    }
    var lineJoiner = "\n" + indent.prev + indent.base;
    return lineJoiner + $join.call(xs, "," + lineJoiner) + "\n" + indent.prev;
  };
  var arrObjKeys = function(obj, inspect) {
    var isArr = isArray(obj);
    var xs = [];
    if (isArr) {
      xs.length = obj.length;
      for (var i = 0;i < obj.length; i++) {
        xs[i] = has(obj, i) ? inspect(obj[i], obj) : "";
      }
    }
    var syms = typeof gOPS === "function" ? gOPS(obj) : [];
    var symMap;
    if (hasShammedSymbols) {
      symMap = {};
      for (var k = 0;k < syms.length; k++) {
        symMap["$" + syms[k]] = syms[k];
      }
    }
    for (var key in obj) {
      if (!has(obj, key)) {
        continue;
      }
      if (isArr && String(Number(key)) === key && key < obj.length) {
        continue;
      }
      if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) {
        continue;
      } else if ($test.call(/[^\w$]/, key)) {
        xs.push(inspect(key, obj) + ": " + inspect(obj[key], obj));
      } else {
        xs.push(key + ": " + inspect(obj[key], obj));
      }
    }
    if (typeof gOPS === "function") {
      for (var j = 0;j < syms.length; j++) {
        if (isEnumerable.call(obj, syms[j])) {
          xs.push("[" + inspect(syms[j]) + "]: " + inspect(obj[syms[j]], obj));
        }
      }
    }
    return xs;
  };
  var hasMap = typeof Map === "function" && Map.prototype;
  var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
  var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
  var mapForEach = hasMap && Map.prototype.forEach;
  var hasSet = typeof Set === "function" && Set.prototype;
  var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
  var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
  var setForEach = hasSet && Set.prototype.forEach;
  var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
  var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
  var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
  var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
  var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
  var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
  var booleanValueOf = Boolean.prototype.valueOf;
  var objectToString = Object.prototype.toString;
  var functionToString = Function.prototype.toString;
  var $match = String.prototype.match;
  var $slice = String.prototype.slice;
  var $replace = String.prototype.replace;
  var $toUpperCase = String.prototype.toUpperCase;
  var $toLowerCase = String.prototype.toLowerCase;
  var $test = RegExp.prototype.test;
  var $concat = Array.prototype.concat;
  var $join = Array.prototype.join;
  var $arrSlice = Array.prototype.slice;
  var $floor = Math.floor;
  var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
  var gOPS = Object.getOwnPropertySymbols;
  var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
  var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
  var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
  var isEnumerable = Object.prototype.propertyIsEnumerable;
  var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O) {
    return O.__proto__;
  } : null);
  var utilInspect = require_util_inspect();
  var inspectCustom = utilInspect.custom;
  var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;
  module.exports = function inspect_(obj, options, depth, seen) {
    var opts = options || {};
    if (has(opts, "quoteStyle") && (opts.quoteStyle !== "single" && opts.quoteStyle !== "double")) {
      throw new TypeError('option "quoteStyle" must be "single" or "double"');
    }
    if (has(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
      throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
    }
    var customInspect = has(opts, "customInspect") ? opts.customInspect : true;
    if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
      throw new TypeError('option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`');
    }
    if (has(opts, "indent") && opts.indent !== null && opts.indent !== "\t" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
      throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
    }
    if (has(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
      throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
    }
    var numericSeparator = opts.numericSeparator;
    if (typeof obj === "undefined") {
      return "undefined";
    }
    if (obj === null) {
      return "null";
    }
    if (typeof obj === "boolean") {
      return obj ? "true" : "false";
    }
    if (typeof obj === "string") {
      return inspectString(obj, opts);
    }
    if (typeof obj === "number") {
      if (obj === 0) {
        return Infinity / obj > 0 ? "0" : "-0";
      }
      var str = String(obj);
      return numericSeparator ? addNumericSeparator(obj, str) : str;
    }
    if (typeof obj === "bigint") {
      var bigIntStr = String(obj) + "n";
      return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
    }
    var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
    if (typeof depth === "undefined") {
      depth = 0;
    }
    if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
      return isArray(obj) ? "[Array]" : "[Object]";
    }
    var indent = getIndent(opts, depth);
    if (typeof seen === "undefined") {
      seen = [];
    } else if (indexOf(seen, obj) >= 0) {
      return "[Circular]";
    }
    function inspect(value, from, noIndent) {
      if (from) {
        seen = $arrSlice.call(seen);
        seen.push(from);
      }
      if (noIndent) {
        var newOpts = {
          depth: opts.depth
        };
        if (has(opts, "quoteStyle")) {
          newOpts.quoteStyle = opts.quoteStyle;
        }
        return inspect_(value, newOpts, depth + 1, seen);
      }
      return inspect_(value, opts, depth + 1, seen);
    }
    if (typeof obj === "function" && !isRegExp(obj)) {
      var name = nameOf(obj);
      var keys = arrObjKeys(obj, inspect);
      return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys.length > 0 ? " { " + $join.call(keys, ", ") + " }" : "");
    }
    if (isSymbol(obj)) {
      var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
      return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
    }
    if (isElement(obj)) {
      var s = "<" + $toLowerCase.call(String(obj.nodeName));
      var attrs = obj.attributes || [];
      for (var i = 0;i < attrs.length; i++) {
        s += " " + attrs[i].name + "=" + wrapQuotes(quote(attrs[i].value), "double", opts);
      }
      s += ">";
      if (obj.childNodes && obj.childNodes.length) {
        s += "...";
      }
      s += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
      return s;
    }
    if (isArray(obj)) {
      if (obj.length === 0) {
        return "[]";
      }
      var xs = arrObjKeys(obj, inspect);
      if (indent && !singleLineValues(xs)) {
        return "[" + indentedJoin(xs, indent) + "]";
      }
      return "[ " + $join.call(xs, ", ") + " ]";
    }
    if (isError(obj)) {
      var parts = arrObjKeys(obj, inspect);
      if (!("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause")) {
        return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect(obj.cause), parts), ", ") + " }";
      }
      if (parts.length === 0) {
        return "[" + String(obj) + "]";
      }
      return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
    }
    if (typeof obj === "object" && customInspect) {
      if (inspectSymbol && typeof obj[inspectSymbol] === "function" && utilInspect) {
        return utilInspect(obj, { depth: maxDepth - depth });
      } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
        return obj.inspect();
      }
    }
    if (isMap(obj)) {
      var mapParts = [];
      if (mapForEach) {
        mapForEach.call(obj, function(value, key) {
          mapParts.push(inspect(key, obj, true) + " => " + inspect(value, obj));
        });
      }
      return collectionOf("Map", mapSize.call(obj), mapParts, indent);
    }
    if (isSet(obj)) {
      var setParts = [];
      if (setForEach) {
        setForEach.call(obj, function(value) {
          setParts.push(inspect(value, obj));
        });
      }
      return collectionOf("Set", setSize.call(obj), setParts, indent);
    }
    if (isWeakMap(obj)) {
      return weakCollectionOf("WeakMap");
    }
    if (isWeakSet(obj)) {
      return weakCollectionOf("WeakSet");
    }
    if (isWeakRef(obj)) {
      return weakCollectionOf("WeakRef");
    }
    if (isNumber(obj)) {
      return markBoxed(inspect(Number(obj)));
    }
    if (isBigInt(obj)) {
      return markBoxed(inspect(bigIntValueOf.call(obj)));
    }
    if (isBoolean(obj)) {
      return markBoxed(booleanValueOf.call(obj));
    }
    if (isString(obj)) {
      return markBoxed(inspect(String(obj)));
    }
    if (!isDate(obj) && !isRegExp(obj)) {
      var ys = arrObjKeys(obj, inspect);
      var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
      var protoTag = obj instanceof Object ? "" : "null prototype";
      var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
      var constructorTag = isPlainObject || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
      var tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
      if (ys.length === 0) {
        return tag + "{}";
      }
      if (indent) {
        return tag + "{" + indentedJoin(ys, indent) + "}";
      }
      return tag + "{ " + $join.call(ys, ", ") + " }";
    }
    return String(obj);
  };
  var hasOwn = Object.prototype.hasOwnProperty || function(key) {
    return key in this;
  };
});

// node_modules/side-channel/index.js
var require_side_channel = __commonJS((exports, module) => {
  var GetIntrinsic = require_get_intrinsic();
  var callBound = require_callBound();
  var inspect = require_object_inspect();
  var $TypeError = GetIntrinsic("%TypeError%");
  var $WeakMap = GetIntrinsic("%WeakMap%", true);
  var $Map = GetIntrinsic("%Map%", true);
  var $weakMapGet = callBound("WeakMap.prototype.get", true);
  var $weakMapSet = callBound("WeakMap.prototype.set", true);
  var $weakMapHas = callBound("WeakMap.prototype.has", true);
  var $mapGet = callBound("Map.prototype.get", true);
  var $mapSet = callBound("Map.prototype.set", true);
  var $mapHas = callBound("Map.prototype.has", true);
  var listGetNode = function(list, key) {
    for (var prev = list, curr;(curr = prev.next) !== null; prev = curr) {
      if (curr.key === key) {
        prev.next = curr.next;
        curr.next = list.next;
        list.next = curr;
        return curr;
      }
    }
  };
  var listGet = function(objects, key) {
    var node = listGetNode(objects, key);
    return node && node.value;
  };
  var listSet = function(objects, key, value) {
    var node = listGetNode(objects, key);
    if (node) {
      node.value = value;
    } else {
      objects.next = {
        key,
        next: objects.next,
        value
      };
    }
  };
  var listHas = function(objects, key) {
    return !!listGetNode(objects, key);
  };
  module.exports = function getSideChannel() {
    var $wm;
    var $m;
    var $o;
    var channel = {
      assert: function(key) {
        if (!channel.has(key)) {
          throw new $TypeError("Side channel does not contain " + inspect(key));
        }
      },
      get: function(key) {
        if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
          if ($wm) {
            return $weakMapGet($wm, key);
          }
        } else if ($Map) {
          if ($m) {
            return $mapGet($m, key);
          }
        } else {
          if ($o) {
            return listGet($o, key);
          }
        }
      },
      has: function(key) {
        if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
          if ($wm) {
            return $weakMapHas($wm, key);
          }
        } else if ($Map) {
          if ($m) {
            return $mapHas($m, key);
          }
        } else {
          if ($o) {
            return listHas($o, key);
          }
        }
        return false;
      },
      set: function(key, value) {
        if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
          if (!$wm) {
            $wm = new $WeakMap;
          }
          $weakMapSet($wm, key, value);
        } else if ($Map) {
          if (!$m) {
            $m = new $Map;
          }
          $mapSet($m, key, value);
        } else {
          if (!$o) {
            $o = { key: {}, next: null };
          }
          listSet($o, key, value);
        }
      }
    };
    return channel;
  };
});

// node_modules/qs/lib/formats.js
var require_formats = __commonJS((exports, module) => {
  var replace = String.prototype.replace;
  var percentTwenties = /%20/g;
  var Format = {
    RFC1738: "RFC1738",
    RFC3986: "RFC3986"
  };
  module.exports = {
    default: Format.RFC3986,
    formatters: {
      RFC1738: function(value) {
        return replace.call(value, percentTwenties, "+");
      },
      RFC3986: function(value) {
        return String(value);
      }
    },
    RFC1738: Format.RFC1738,
    RFC3986: Format.RFC3986
  };
});

// node_modules/qs/lib/utils.js
var require_utils = __commonJS((exports, module) => {
  var formats = require_formats();
  var has = Object.prototype.hasOwnProperty;
  var isArray = Array.isArray;
  var hexTable = function() {
    var array = [];
    for (var i = 0;i < 256; ++i) {
      array.push("%" + ((i < 16 ? "0" : "") + i.toString(16)).toUpperCase());
    }
    return array;
  }();
  var compactQueue = function compactQueue(queue) {
    while (queue.length > 1) {
      var item = queue.pop();
      var obj = item.obj[item.prop];
      if (isArray(obj)) {
        var compacted = [];
        for (var j = 0;j < obj.length; ++j) {
          if (typeof obj[j] !== "undefined") {
            compacted.push(obj[j]);
          }
        }
        item.obj[item.prop] = compacted;
      }
    }
  };
  var arrayToObject = function arrayToObject(source, options) {
    var obj = options && options.plainObjects ? Object.create(null) : {};
    for (var i = 0;i < source.length; ++i) {
      if (typeof source[i] !== "undefined") {
        obj[i] = source[i];
      }
    }
    return obj;
  };
  var merge = function merge(target, source, options) {
    if (!source) {
      return target;
    }
    if (typeof source !== "object") {
      if (isArray(target)) {
        target.push(source);
      } else if (target && typeof target === "object") {
        if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
          target[source] = true;
        }
      } else {
        return [target, source];
      }
      return target;
    }
    if (!target || typeof target !== "object") {
      return [target].concat(source);
    }
    var mergeTarget = target;
    if (isArray(target) && !isArray(source)) {
      mergeTarget = arrayToObject(target, options);
    }
    if (isArray(target) && isArray(source)) {
      source.forEach(function(item, i) {
        if (has.call(target, i)) {
          var targetItem = target[i];
          if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
            target[i] = merge(targetItem, item, options);
          } else {
            target.push(item);
          }
        } else {
          target[i] = item;
        }
      });
      return target;
    }
    return Object.keys(source).reduce(function(acc, key) {
      var value = source[key];
      if (has.call(acc, key)) {
        acc[key] = merge(acc[key], value, options);
      } else {
        acc[key] = value;
      }
      return acc;
    }, mergeTarget);
  };
  var assign = function assignSingleSource(target, source) {
    return Object.keys(source).reduce(function(acc, key) {
      acc[key] = source[key];
      return acc;
    }, target);
  };
  var decode = function(str, decoder, charset) {
    var strWithoutPlus = str.replace(/\+/g, " ");
    if (charset === "iso-8859-1") {
      return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
    }
    try {
      return decodeURIComponent(strWithoutPlus);
    } catch (e) {
      return strWithoutPlus;
    }
  };
  var encode2 = function encode(str, defaultEncoder, charset, kind, format) {
    if (str.length === 0) {
      return str;
    }
    var string = str;
    if (typeof str === "symbol") {
      string = Symbol.prototype.toString.call(str);
    } else if (typeof str !== "string") {
      string = String(str);
    }
    if (charset === "iso-8859-1") {
      return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
        return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
      });
    }
    var out = "";
    for (var i = 0;i < string.length; ++i) {
      var c = string.charCodeAt(i);
      if (c === 45 || c === 46 || c === 95 || c === 126 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122 || format === formats.RFC1738 && (c === 40 || c === 41)) {
        out += string.charAt(i);
        continue;
      }
      if (c < 128) {
        out = out + hexTable[c];
        continue;
      }
      if (c < 2048) {
        out = out + (hexTable[192 | c >> 6] + hexTable[128 | c & 63]);
        continue;
      }
      if (c < 55296 || c >= 57344) {
        out = out + (hexTable[224 | c >> 12] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63]);
        continue;
      }
      i += 1;
      c = 65536 + ((c & 1023) << 10 | string.charCodeAt(i) & 1023);
      out += hexTable[240 | c >> 18] + hexTable[128 | c >> 12 & 63] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
    }
    return out;
  };
  var compact = function compact(value) {
    var queue = [{ obj: { o: value }, prop: "o" }];
    var refs = [];
    for (var i = 0;i < queue.length; ++i) {
      var item = queue[i];
      var obj = item.obj[item.prop];
      var keys = Object.keys(obj);
      for (var j = 0;j < keys.length; ++j) {
        var key = keys[j];
        var val = obj[key];
        if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
          queue.push({ obj, prop: key });
          refs.push(val);
        }
      }
    }
    compactQueue(queue);
    return value;
  };
  var isRegExp = function isRegExp(obj) {
    return Object.prototype.toString.call(obj) === "[object RegExp]";
  };
  var isBuffer = function isBuffer(obj) {
    if (!obj || typeof obj !== "object") {
      return false;
    }
    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
  };
  var combine = function combine(a, b) {
    return [].concat(a, b);
  };
  var maybeMap = function maybeMap(val, fn) {
    if (isArray(val)) {
      var mapped = [];
      for (var i = 0;i < val.length; i += 1) {
        mapped.push(fn(val[i]));
      }
      return mapped;
    }
    return fn(val);
  };
  module.exports = {
    arrayToObject,
    assign,
    combine,
    compact,
    decode,
    encode: encode2,
    isBuffer,
    isRegExp,
    maybeMap,
    merge
  };
});

// node_modules/qs/lib/stringify.js
var require_stringify = __commonJS((exports, module) => {
  var getSideChannel = require_side_channel();
  var utils = require_utils();
  var formats = require_formats();
  var has = Object.prototype.hasOwnProperty;
  var arrayPrefixGenerators = {
    brackets: function brackets(prefix) {
      return prefix + "[]";
    },
    comma: "comma",
    indices: function indices(prefix, key) {
      return prefix + "[" + key + "]";
    },
    repeat: function repeat(prefix) {
      return prefix;
    }
  };
  var isArray = Array.isArray;
  var split = String.prototype.split;
  var push = Array.prototype.push;
  var pushToArray = function(arr, valueOrArray) {
    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
  };
  var toISO = Date.prototype.toISOString;
  var defaultFormat = formats["default"];
  var defaults = {
    addQueryPrefix: false,
    allowDots: false,
    charset: "utf-8",
    charsetSentinel: false,
    delimiter: "&",
    encode: true,
    encoder: utils.encode,
    encodeValuesOnly: false,
    format: defaultFormat,
    formatter: formats.formatters[defaultFormat],
    indices: false,
    serializeDate: function serializeDate(date) {
      return toISO.call(date);
    },
    skipNulls: false,
    strictNullHandling: false
  };
  var isNonNullishPrimitive = function isNonNullishPrimitive(v) {
    return typeof v === "string" || typeof v === "number" || typeof v === "boolean" || typeof v === "symbol" || typeof v === "bigint";
  };
  var sentinel = {};
  var stringify = function stringify(object, prefix, generateArrayPrefix, commaRoundTrip, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
    var obj = object;
    var tmpSc = sideChannel;
    var step = 0;
    var findFlag = false;
    while ((tmpSc = tmpSc.get(sentinel)) !== undefined && !findFlag) {
      var pos = tmpSc.get(object);
      step += 1;
      if (typeof pos !== "undefined") {
        if (pos === step) {
          throw new RangeError("Cyclic object value");
        } else {
          findFlag = true;
        }
      }
      if (typeof tmpSc.get(sentinel) === "undefined") {
        step = 0;
      }
    }
    if (typeof filter === "function") {
      obj = filter(prefix, obj);
    } else if (obj instanceof Date) {
      obj = serializeDate(obj);
    } else if (generateArrayPrefix === "comma" && isArray(obj)) {
      obj = utils.maybeMap(obj, function(value2) {
        if (value2 instanceof Date) {
          return serializeDate(value2);
        }
        return value2;
      });
    }
    if (obj === null) {
      if (strictNullHandling) {
        return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, "key", format) : prefix;
      }
      obj = "";
    }
    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
      if (encoder) {
        var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, "key", format);
        if (generateArrayPrefix === "comma" && encodeValuesOnly) {
          var valuesArray = split.call(String(obj), ",");
          var valuesJoined = "";
          for (var i = 0;i < valuesArray.length; ++i) {
            valuesJoined += (i === 0 ? "" : ",") + formatter(encoder(valuesArray[i], defaults.encoder, charset, "value", format));
          }
          return [formatter(keyValue) + (commaRoundTrip && isArray(obj) && valuesArray.length === 1 ? "[]" : "") + "=" + valuesJoined];
        }
        return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults.encoder, charset, "value", format))];
      }
      return [formatter(prefix) + "=" + formatter(String(obj))];
    }
    var values = [];
    if (typeof obj === "undefined") {
      return values;
    }
    var objKeys;
    if (generateArrayPrefix === "comma" && isArray(obj)) {
      objKeys = [{ value: obj.length > 0 ? obj.join(",") || null : undefined }];
    } else if (isArray(filter)) {
      objKeys = filter;
    } else {
      var keys = Object.keys(obj);
      objKeys = sort ? keys.sort(sort) : keys;
    }
    var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? prefix + "[]" : prefix;
    for (var j = 0;j < objKeys.length; ++j) {
      var key = objKeys[j];
      var value = typeof key === "object" && typeof key.value !== "undefined" ? key.value : obj[key];
      if (skipNulls && value === null) {
        continue;
      }
      var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(adjustedPrefix, key) : adjustedPrefix : adjustedPrefix + (allowDots ? "." + key : "[" + key + "]");
      sideChannel.set(object, step);
      var valueSideChannel = getSideChannel();
      valueSideChannel.set(sentinel, sideChannel);
      pushToArray(values, stringify(value, keyPrefix, generateArrayPrefix, commaRoundTrip, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, valueSideChannel));
    }
    return values;
  };
  var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
    if (!opts) {
      return defaults;
    }
    if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
      throw new TypeError("Encoder has to be a function.");
    }
    var charset = opts.charset || defaults.charset;
    if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
      throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
    }
    var format = formats["default"];
    if (typeof opts.format !== "undefined") {
      if (!has.call(formats.formatters, opts.format)) {
        throw new TypeError("Unknown format option provided.");
      }
      format = opts.format;
    }
    var formatter = formats.formatters[format];
    var filter = defaults.filter;
    if (typeof opts.filter === "function" || isArray(opts.filter)) {
      filter = opts.filter;
    }
    return {
      addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults.addQueryPrefix,
      allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
      charset,
      charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
      delimiter: typeof opts.delimiter === "undefined" ? defaults.delimiter : opts.delimiter,
      encode: typeof opts.encode === "boolean" ? opts.encode : defaults.encode,
      encoder: typeof opts.encoder === "function" ? opts.encoder : defaults.encoder,
      encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
      filter,
      format,
      formatter,
      serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults.serializeDate,
      skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults.skipNulls,
      sort: typeof opts.sort === "function" ? opts.sort : null,
      strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
    };
  };
  module.exports = function(object, opts) {
    var obj = object;
    var options = normalizeStringifyOptions(opts);
    var objKeys;
    var filter;
    if (typeof options.filter === "function") {
      filter = options.filter;
      obj = filter("", obj);
    } else if (isArray(options.filter)) {
      filter = options.filter;
      objKeys = filter;
    }
    var keys = [];
    if (typeof obj !== "object" || obj === null) {
      return "";
    }
    var arrayFormat;
    if (opts && opts.arrayFormat in arrayPrefixGenerators) {
      arrayFormat = opts.arrayFormat;
    } else if (opts && "indices" in opts) {
      arrayFormat = opts.indices ? "indices" : "repeat";
    } else {
      arrayFormat = "indices";
    }
    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
    if (opts && "commaRoundTrip" in opts && typeof opts.commaRoundTrip !== "boolean") {
      throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
    }
    var commaRoundTrip = generateArrayPrefix === "comma" && opts && opts.commaRoundTrip;
    if (!objKeys) {
      objKeys = Object.keys(obj);
    }
    if (options.sort) {
      objKeys.sort(options.sort);
    }
    var sideChannel = getSideChannel();
    for (var i = 0;i < objKeys.length; ++i) {
      var key = objKeys[i];
      if (options.skipNulls && obj[key] === null) {
        continue;
      }
      pushToArray(keys, stringify(obj[key], key, generateArrayPrefix, commaRoundTrip, options.strictNullHandling, options.skipNulls, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.format, options.formatter, options.encodeValuesOnly, options.charset, sideChannel));
    }
    var joined = keys.join(options.delimiter);
    var prefix = options.addQueryPrefix === true ? "?" : "";
    if (options.charsetSentinel) {
      if (options.charset === "iso-8859-1") {
        prefix += "utf8=%26%2310003%3B&";
      } else {
        prefix += "utf8=%E2%9C%93&";
      }
    }
    return joined.length > 0 ? prefix + joined : "";
  };
});

// node_modules/qs/lib/parse.js
var require_parse = __commonJS((exports, module) => {
  var utils = require_utils();
  var has = Object.prototype.hasOwnProperty;
  var isArray = Array.isArray;
  var defaults = {
    allowDots: false,
    allowPrototypes: false,
    allowSparse: false,
    arrayLimit: 20,
    charset: "utf-8",
    charsetSentinel: false,
    comma: false,
    decoder: utils.decode,
    delimiter: "&",
    depth: 5,
    ignoreQueryPrefix: false,
    interpretNumericEntities: false,
    parameterLimit: 1000,
    parseArrays: true,
    plainObjects: false,
    strictNullHandling: false
  };
  var interpretNumericEntities = function(str) {
    return str.replace(/&#(\d+);/g, function($0, numberStr) {
      return String.fromCharCode(parseInt(numberStr, 10));
    });
  };
  var parseArrayValue = function(val, options) {
    if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) {
      return val.split(",");
    }
    return val;
  };
  var isoSentinel = "utf8=%26%2310003%3B";
  var charsetSentinel = "utf8=%E2%9C%93";
  var parseValues = function parseQueryStringValues(str, options) {
    var obj = {};
    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
    var parts = cleanStr.split(options.delimiter, limit);
    var skipIndex = -1;
    var i;
    var charset = options.charset;
    if (options.charsetSentinel) {
      for (i = 0;i < parts.length; ++i) {
        if (parts[i].indexOf("utf8=") === 0) {
          if (parts[i] === charsetSentinel) {
            charset = "utf-8";
          } else if (parts[i] === isoSentinel) {
            charset = "iso-8859-1";
          }
          skipIndex = i;
          i = parts.length;
        }
      }
    }
    for (i = 0;i < parts.length; ++i) {
      if (i === skipIndex) {
        continue;
      }
      var part = parts[i];
      var bracketEqualsPos = part.indexOf("]=");
      var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
      var key, val;
      if (pos === -1) {
        key = options.decoder(part, defaults.decoder, charset, "key");
        val = options.strictNullHandling ? null : "";
      } else {
        key = options.decoder(part.slice(0, pos), defaults.decoder, charset, "key");
        val = utils.maybeMap(parseArrayValue(part.slice(pos + 1), options), function(encodedVal) {
          return options.decoder(encodedVal, defaults.decoder, charset, "value");
        });
      }
      if (val && options.interpretNumericEntities && charset === "iso-8859-1") {
        val = interpretNumericEntities(val);
      }
      if (part.indexOf("[]=") > -1) {
        val = isArray(val) ? [val] : val;
      }
      if (has.call(obj, key)) {
        obj[key] = utils.combine(obj[key], val);
      } else {
        obj[key] = val;
      }
    }
    return obj;
  };
  var parseObject = function(chain, val, options, valuesParsed) {
    var leaf = valuesParsed ? val : parseArrayValue(val, options);
    for (var i = chain.length - 1;i >= 0; --i) {
      var obj;
      var root = chain[i];
      if (root === "[]" && options.parseArrays) {
        obj = [].concat(leaf);
      } else {
        obj = options.plainObjects ? Object.create(null) : {};
        var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
        var index = parseInt(cleanRoot, 10);
        if (!options.parseArrays && cleanRoot === "") {
          obj = { 0: leaf };
        } else if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && (options.parseArrays && index <= options.arrayLimit)) {
          obj = [];
          obj[index] = leaf;
        } else if (cleanRoot !== "__proto__") {
          obj[cleanRoot] = leaf;
        }
      }
      leaf = obj;
    }
    return leaf;
  };
  var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
    if (!givenKey) {
      return;
    }
    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
    var brackets = /(\[[^[\]]*])/;
    var child = /(\[[^[\]]*])/g;
    var segment = options.depth > 0 && brackets.exec(key);
    var parent = segment ? key.slice(0, segment.index) : key;
    var keys = [];
    if (parent) {
      if (!options.plainObjects && has.call(Object.prototype, parent)) {
        if (!options.allowPrototypes) {
          return;
        }
      }
      keys.push(parent);
    }
    var i = 0;
    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
      i += 1;
      if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
        if (!options.allowPrototypes) {
          return;
        }
      }
      keys.push(segment[1]);
    }
    if (segment) {
      keys.push("[" + key.slice(segment.index) + "]");
    }
    return parseObject(keys, val, options, valuesParsed);
  };
  var normalizeParseOptions = function normalizeParseOptions(opts) {
    if (!opts) {
      return defaults;
    }
    if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== "function") {
      throw new TypeError("Decoder has to be a function.");
    }
    if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
      throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
    }
    var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
    return {
      allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
      allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
      allowSparse: typeof opts.allowSparse === "boolean" ? opts.allowSparse : defaults.allowSparse,
      arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
      charset,
      charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
      comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
      decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
      delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
      depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults.depth,
      ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
      interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
      parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
      parseArrays: opts.parseArrays !== false,
      plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
      strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
    };
  };
  module.exports = function(str, opts) {
    var options = normalizeParseOptions(opts);
    if (str === "" || str === null || typeof str === "undefined") {
      return options.plainObjects ? Object.create(null) : {};
    }
    var tempObj = typeof str === "string" ? parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : {};
    var keys = Object.keys(tempObj);
    for (var i = 0;i < keys.length; ++i) {
      var key = keys[i];
      var newObj = parseKeys(key, tempObj[key], options, typeof str === "string");
      obj = utils.merge(obj, newObj, options);
    }
    if (options.allowSparse === true) {
      return obj;
    }
    return utils.compact(obj);
  };
});

// node_modules/qs/lib/index.js
var require_lib2 = __commonJS((exports, module) => {
  var stringify = require_stringify();
  var parse = require_parse();
  var formats = require_formats();
  module.exports = {
    formats,
    parse,
    stringify
  };
});

// node_modules/body-parser/lib/types/urlencoded.js
var require_urlencoded = __commonJS((exports, module) => {
  var urlencoded = function(options) {
    var opts = options || {};
    if (opts.extended === undefined) {
      deprecate("undefined extended: provide extended option");
    }
    var extended = opts.extended !== false;
    var inflate = opts.inflate !== false;
    var limit = typeof opts.limit !== "number" ? bytes.parse(opts.limit || "100kb") : opts.limit;
    var type = opts.type || "application/x-www-form-urlencoded";
    var verify = opts.verify || false;
    if (verify !== false && typeof verify !== "function") {
      throw new TypeError("option verify must be function");
    }
    var queryparse = extended ? extendedparser(opts) : simpleparser(opts);
    var shouldParse = typeof type !== "function" ? typeChecker(type) : type;
    function parse(body) {
      return body.length ? queryparse(body) : {};
    }
    return function urlencodedParser(req, res, next) {
      if (req._body) {
        debug2("body already parsed");
        next();
        return;
      }
      req.body = req.body || {};
      if (!typeis.hasBody(req)) {
        debug2("skip empty body");
        next();
        return;
      }
      debug2("content-type %j", req.headers["content-type"]);
      if (!shouldParse(req)) {
        debug2("skip parsing");
        next();
        return;
      }
      var charset = getCharset(req) || "utf-8";
      if (charset !== "utf-8") {
        debug2("invalid charset");
        next(createError(415, 'unsupported charset "' + charset.toUpperCase() + '"', {
          charset,
          type: "charset.unsupported"
        }));
        return;
      }
      read(req, res, next, parse, debug2, {
        debug: debug2,
        encoding: charset,
        inflate,
        limit,
        verify
      });
    };
  };
  var extendedparser = function(options) {
    var parameterLimit = options.parameterLimit !== undefined ? options.parameterLimit : 1000;
    var parse = parser("qs");
    if (isNaN(parameterLimit) || parameterLimit < 1) {
      throw new TypeError("option parameterLimit must be a positive number");
    }
    if (isFinite(parameterLimit)) {
      parameterLimit = parameterLimit | 0;
    }
    return function queryparse(body) {
      var paramCount = parameterCount(body, parameterLimit);
      if (paramCount === undefined) {
        debug2("too many parameters");
        throw createError(413, "too many parameters", {
          type: "parameters.too.many"
        });
      }
      var arrayLimit = Math.max(100, paramCount);
      debug2("parse extended urlencoding");
      return parse(body, {
        allowPrototypes: true,
        arrayLimit,
        depth: Infinity,
        parameterLimit
      });
    };
  };
  var getCharset = function(req) {
    try {
      return (contentType.parse(req).parameters.charset || "").toLowerCase();
    } catch (e) {
      return;
    }
  };
  var parameterCount = function(body, limit) {
    var count = 0;
    var index = 0;
    while ((index = body.indexOf("&", index)) !== -1) {
      count++;
      index++;
      if (count === limit) {
        return;
      }
    }
    return count;
  };
  var parser = function(name) {
    var mod = parsers[name];
    if (mod !== undefined) {
      return mod.parse;
    }
    switch (name) {
      case "qs":
        mod = require_lib2();
        break;
      case "querystring":
        mod = import.meta.require("querystring");
        break;
    }
    parsers[name] = mod;
    return mod.parse;
  };
  var simpleparser = function(options) {
    var parameterLimit = options.parameterLimit !== undefined ? options.parameterLimit : 1000;
    var parse = parser("querystring");
    if (isNaN(parameterLimit) || parameterLimit < 1) {
      throw new TypeError("option parameterLimit must be a positive number");
    }
    if (isFinite(parameterLimit)) {
      parameterLimit = parameterLimit | 0;
    }
    return function queryparse(body) {
      var paramCount = parameterCount(body, parameterLimit);
      if (paramCount === undefined) {
        debug2("too many parameters");
        throw createError(413, "too many parameters", {
          type: "parameters.too.many"
        });
      }
      debug2("parse urlencoding");
      return parse(body, undefined, undefined, { maxKeys: parameterLimit });
    };
  };
  var typeChecker = function(type) {
    return function checkType(req) {
      return Boolean(typeis(req, type));
    };
  };
  /*!
   * body-parser
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var bytes = require_bytes();
  var contentType = require_content_type();
  var createError = require_http_errors();
  var debug2 = require_src()("body-parser:urlencoded");
  var deprecate = require_depd()("body-parser");
  var read = require_read();
  var typeis = require_type_is();
  module.exports = urlencoded;
  var parsers = Object.create(null);
});

// node_modules/body-parser/index.js
var require_body_parser = __commonJS((exports, module) => {
  var bodyParser = function(options) {
    var opts = Object.create(options || null, {
      type: {
        configurable: true,
        enumerable: true,
        value: undefined,
        writable: true
      }
    });
    var _urlencoded = exports.urlencoded(opts);
    var _json = exports.json(opts);
    return function bodyParser(req, res, next) {
      _json(req, res, function(err) {
        if (err)
          return next(err);
        _urlencoded(req, res, next);
      });
    };
  };
  var createParserGetter = function(name) {
    return function get() {
      return loadParser(name);
    };
  };
  var loadParser = function(parserName) {
    var parser = parsers[parserName];
    if (parser !== undefined) {
      return parser;
    }
    switch (parserName) {
      case "json":
        parser = require_json();
        break;
      case "raw":
        parser = require_raw();
        break;
      case "text":
        parser = require_text();
        break;
      case "urlencoded":
        parser = require_urlencoded();
        break;
    }
    return parsers[parserName] = parser;
  };
  /*!
   * body-parser
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var deprecate = require_depd()("body-parser");
  var parsers = Object.create(null);
  exports = module.exports = deprecate.function(bodyParser, "bodyParser: use individual json/urlencoded middlewares");
  Object.defineProperty(exports, "json", {
    configurable: true,
    enumerable: true,
    get: createParserGetter("json")
  });
  Object.defineProperty(exports, "raw", {
    configurable: true,
    enumerable: true,
    get: createParserGetter("raw")
  });
  Object.defineProperty(exports, "text", {
    configurable: true,
    enumerable: true,
    get: createParserGetter("text")
  });
  Object.defineProperty(exports, "urlencoded", {
    configurable: true,
    enumerable: true,
    get: createParserGetter("urlencoded")
  });
});

// node_modules/merge-descriptors/index.js
var require_merge_descriptors = __commonJS((exports, module) => {
  var merge = function(dest, src, redefine) {
    if (!dest) {
      throw new TypeError("argument dest is required");
    }
    if (!src) {
      throw new TypeError("argument src is required");
    }
    if (redefine === undefined) {
      redefine = true;
    }
    Object.getOwnPropertyNames(src).forEach(function forEachOwnPropertyName(name) {
      if (!redefine && hasOwnProperty.call(dest, name)) {
        return;
      }
      var descriptor = Object.getOwnPropertyDescriptor(src, name);
      Object.defineProperty(dest, name, descriptor);
    });
    return dest;
  };
  /*!
   * merge-descriptors
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = merge;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
});

// node_modules/finalhandler/node_modules/debug/node_modules/ms/index.js
var require_ms2 = __commonJS((exports, module) => {
  var parse = function(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch (type) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return n * y;
      case "days":
      case "day":
      case "d":
        return n * d;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return n * h;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return n * m;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return n * s;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return n;
      default:
        return;
    }
  };
  var fmtShort = function(ms) {
    if (ms >= d) {
      return Math.round(ms / d) + "d";
    }
    if (ms >= h) {
      return Math.round(ms / h) + "h";
    }
    if (ms >= m) {
      return Math.round(ms / m) + "m";
    }
    if (ms >= s) {
      return Math.round(ms / s) + "s";
    }
    return ms + "ms";
  };
  var fmtLong = function(ms) {
    return plural(ms, d, "day") || plural(ms, h, "hour") || plural(ms, m, "minute") || plural(ms, s, "second") || ms + " ms";
  };
  var plural = function(ms, n, name) {
    if (ms < n) {
      return;
    }
    if (ms < n * 1.5) {
      return Math.floor(ms / n) + " " + name;
    }
    return Math.ceil(ms / n) + " " + name + "s";
  };
  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var y = d * 365.25;
  module.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
      return parse(val);
    } else if (type === "number" && isNaN(val) === false) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
  };
});

// node_modules/finalhandler/node_modules/debug/src/debug.js
var require_debug2 = __commonJS((exports, module) => {
  var selectColor = function(namespace) {
    var hash = 0, i;
    for (i in namespace) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0;
    }
    return exports.colors[Math.abs(hash) % exports.colors.length];
  };
  var createDebug = function(namespace) {
    function debug2() {
      if (!debug2.enabled)
        return;
      var self2 = debug2;
      var curr = +new Date;
      var ms = curr - (prevTime || curr);
      self2.diff = ms;
      self2.prev = prevTime;
      self2.curr = curr;
      prevTime = curr;
      var args = new Array(arguments.length);
      for (var i = 0;i < args.length; i++) {
        args[i] = arguments[i];
      }
      args[0] = exports.coerce(args[0]);
      if (typeof args[0] !== "string") {
        args.unshift("%O");
      }
      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
        if (match === "%%")
          return match;
        index++;
        var formatter = exports.formatters[format];
        if (typeof formatter === "function") {
          var val = args[index];
          match = formatter.call(self2, val);
          args.splice(index, 1);
          index--;
        }
        return match;
      });
      exports.formatArgs.call(self2, args);
      var logFn = debug2.log || exports.log || console.log.bind(console);
      logFn.apply(self2, args);
    }
    debug2.namespace = namespace;
    debug2.enabled = exports.enabled(namespace);
    debug2.useColors = exports.useColors();
    debug2.color = selectColor(namespace);
    if (typeof exports.init === "function") {
      exports.init(debug2);
    }
    return debug2;
  };
  var enable = function(namespaces) {
    exports.save(namespaces);
    exports.names = [];
    exports.skips = [];
    var split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
    var len = split.length;
    for (var i = 0;i < len; i++) {
      if (!split[i])
        continue;
      namespaces = split[i].replace(/\*/g, ".*?");
      if (namespaces[0] === "-") {
        exports.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
      } else {
        exports.names.push(new RegExp("^" + namespaces + "$"));
      }
    }
  };
  var disable = function() {
    exports.enable("");
  };
  var enabled = function(name) {
    var i, len;
    for (i = 0, len = exports.skips.length;i < len; i++) {
      if (exports.skips[i].test(name)) {
        return false;
      }
    }
    for (i = 0, len = exports.names.length;i < len; i++) {
      if (exports.names[i].test(name)) {
        return true;
      }
    }
    return false;
  };
  var coerce = function(val) {
    if (val instanceof Error)
      return val.stack || val.message;
    return val;
  };
  exports = module.exports = createDebug.debug = createDebug["default"] = createDebug;
  exports.coerce = coerce;
  exports.disable = disable;
  exports.enable = enable;
  exports.enabled = enabled;
  exports.humanize = require_ms2();
  exports.names = [];
  exports.skips = [];
  exports.formatters = {};
  var prevTime;
});

// node_modules/finalhandler/node_modules/debug/src/browser.js
var require_browser2 = __commonJS((exports, module) => {
  var useColors = function() {
    if (typeof window !== "undefined" && window.process && window.process.type === "renderer") {
      return true;
    }
    return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  };
  var formatArgs = function(args) {
    var useColors2 = this.useColors;
    args[0] = (useColors2 ? "%c" : "") + this.namespace + (useColors2 ? " %c" : " ") + args[0] + (useColors2 ? "%c " : " ") + "+" + exports.humanize(this.diff);
    if (!useColors2)
      return;
    var c = "color: " + this.color;
    args.splice(1, 0, c, "color: inherit");
    var index = 0;
    var lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, function(match) {
      if (match === "%%")
        return;
      index++;
      if (match === "%c") {
        lastC = index;
      }
    });
    args.splice(lastC, 0, c);
  };
  var log = function() {
    return typeof console === "object" && console.log && Function.prototype.apply.call(console.log, console, arguments);
  };
  var save = function(namespaces) {
    try {
      if (namespaces == null) {
        exports.storage.removeItem("debug");
      } else {
        exports.storage.debug = namespaces;
      }
    } catch (e) {
    }
  };
  var load = function() {
    var r;
    try {
      r = exports.storage.debug;
    } catch (e) {
    }
    if (!r && typeof process !== "undefined" && "env" in process) {
      r = process.env.DEBUG;
    }
    return r;
  };
  var localstorage = function() {
    try {
      return window.localStorage;
    } catch (e) {
    }
  };
  exports = module.exports = require_debug2();
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = typeof chrome != "undefined" && typeof chrome.storage != "undefined" ? chrome.storage.local : localstorage();
  exports.colors = [
    "lightseagreen",
    "forestgreen",
    "goldenrod",
    "dodgerblue",
    "darkorchid",
    "crimson"
  ];
  exports.formatters.j = function(v) {
    try {
      return JSON.stringify(v);
    } catch (err) {
      return "[UnexpectedJSONParseError]: " + err.message;
    }
  };
  exports.enable(load());
});

// node_modules/finalhandler/node_modules/debug/src/node.js
var require_node2 = __commonJS((exports, module) => {
  var useColors = function() {
    return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(fd);
  };
  var formatArgs = function(args) {
    var name = this.namespace;
    var useColors2 = this.useColors;
    if (useColors2) {
      var c = this.color;
      var prefix = "  \x1B[3" + c + ";1m" + name + " " + "\x1B[0m";
      args[0] = prefix + args[0].split("\n").join("\n" + prefix);
      args.push("\x1B[3" + c + "m+" + exports.humanize(this.diff) + "\x1B[0m");
    } else {
      args[0] = new Date().toUTCString() + " " + name + " " + args[0];
    }
  };
  var log = function() {
    return stream.write(util.format.apply(util, arguments) + "\n");
  };
  var save = function(namespaces) {
    if (namespaces == null) {
      delete process.env.DEBUG;
    } else {
      process.env.DEBUG = namespaces;
    }
  };
  var load = function() {
    return process.env.DEBUG;
  };
  var createWritableStdioStream = function(fd2) {
    var stream2;
    var tty_wrap = process.binding("tty_wrap");
    switch (tty_wrap.guessHandleType(fd2)) {
      case "TTY":
        stream2 = new tty.WriteStream(fd2);
        stream2._type = "tty";
        if (stream2._handle && stream2._handle.unref) {
          stream2._handle.unref();
        }
        break;
      case "FILE":
        var fs = import.meta.require("fs");
        stream2 = new fs.SyncWriteStream(fd2, { autoClose: false });
        stream2._type = "fs";
        break;
      case "PIPE":
      case "TCP":
        var net = import.meta.require("net");
        stream2 = new net.Socket({
          fd: fd2,
          readable: false,
          writable: true
        });
        stream2.readable = false;
        stream2.read = null;
        stream2._type = "pipe";
        if (stream2._handle && stream2._handle.unref) {
          stream2._handle.unref();
        }
        break;
      default:
        throw new Error("Implement me. Unknown stream file type!");
    }
    stream2.fd = fd2;
    stream2._isStdio = true;
    return stream2;
  };
  var init = function(debug2) {
    debug2.inspectOpts = {};
    var keys = Object.keys(exports.inspectOpts);
    for (var i = 0;i < keys.length; i++) {
      debug2.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
  };
  var tty = import.meta.require("tty");
  var util = import.meta.require("util");
  exports = module.exports = require_debug2();
  exports.init = init;
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.colors = [6, 2, 3, 4, 5, 1];
  exports.inspectOpts = Object.keys(process.env).filter(function(key) {
    return /^debug_/i.test(key);
  }).reduce(function(obj, key) {
    var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function(_, k) {
      return k.toUpperCase();
    });
    var val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val))
      val = true;
    else if (/^(no|off|false|disabled)$/i.test(val))
      val = false;
    else if (val === "null")
      val = null;
    else
      val = Number(val);
    obj[prop] = val;
    return obj;
  }, {});
  var fd = parseInt(process.env.DEBUG_FD, 10) || 2;
  if (fd !== 1 && fd !== 2) {
    util.deprecate(function() {
    }, "except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)")();
  }
  var stream = fd === 1 ? process.stdout : fd === 2 ? process.stderr : createWritableStdioStream(fd);
  exports.formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts).split("\n").map(function(str) {
      return str.trim();
    }).join(" ");
  };
  exports.formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts);
  };
  exports.enable(load());
});

// node_modules/finalhandler/node_modules/debug/src/index.js
var require_src3 = __commonJS((exports, module) => {
  if (typeof process !== "undefined" && process.type === "renderer") {
    module.exports = require_browser2();
  } else {
    module.exports = require_node2();
  }
});

// node_modules/encodeurl/index.js
var require_encodeurl = __commonJS((exports, module) => {
  var encodeUrl = function(url) {
    return String(url).replace(UNMATCHED_SURROGATE_PAIR_REGEXP, UNMATCHED_SURROGATE_PAIR_REPLACE).replace(ENCODE_CHARS_REGEXP, encodeURI);
  };
  /*!
   * encodeurl
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = encodeUrl;
  var ENCODE_CHARS_REGEXP = /(?:[^\x21\x25\x26-\x3B\x3D\x3F-\x5B\x5D\x5F\x61-\x7A\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g;
  var UNMATCHED_SURROGATE_PAIR_REGEXP = /(^|[^\uD800-\uDBFF])[\uDC00-\uDFFF]|[\uD800-\uDBFF]([^\uDC00-\uDFFF]|$)/g;
  var UNMATCHED_SURROGATE_PAIR_REPLACE = "$1\uFFFD$2";
});

// node_modules/escape-html/index.js
var require_escape_html = __commonJS((exports, module) => {
  var escapeHtml = function(string) {
    var str = "" + string;
    var match = matchHtmlRegExp.exec(str);
    if (!match) {
      return str;
    }
    var escape2;
    var html = "";
    var index = 0;
    var lastIndex = 0;
    for (index = match.index;index < str.length; index++) {
      switch (str.charCodeAt(index)) {
        case 34:
          escape2 = "&quot;";
          break;
        case 38:
          escape2 = "&amp;";
          break;
        case 39:
          escape2 = "&#39;";
          break;
        case 60:
          escape2 = "&lt;";
          break;
        case 62:
          escape2 = "&gt;";
          break;
        default:
          continue;
      }
      if (lastIndex !== index) {
        html += str.substring(lastIndex, index);
      }
      lastIndex = index + 1;
      html += escape2;
    }
    return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
  };
  /*!
   * escape-html
   * Copyright(c) 2012-2013 TJ Holowaychuk
   * Copyright(c) 2015 Andreas Lubbe
   * Copyright(c) 2015 Tiancheng "Timothy" Gu
   * MIT Licensed
   */
  var matchHtmlRegExp = /["'&<>]/;
  module.exports = escapeHtml;
});

// node_modules/parseurl/index.js
var require_parseurl = __commonJS((exports, module) => {
  var parseurl = function(req) {
    var url2 = req.url;
    if (url2 === undefined) {
      return;
    }
    var parsed = req._parsedUrl;
    if (fresh(url2, parsed)) {
      return parsed;
    }
    parsed = fastparse(url2);
    parsed._raw = url2;
    return req._parsedUrl = parsed;
  };
  var originalurl = function(req) {
    var url2 = req.originalUrl;
    if (typeof url2 !== "string") {
      return parseurl(req);
    }
    var parsed = req._parsedOriginalUrl;
    if (fresh(url2, parsed)) {
      return parsed;
    }
    parsed = fastparse(url2);
    parsed._raw = url2;
    return req._parsedOriginalUrl = parsed;
  };
  var fastparse = function(str) {
    if (typeof str !== "string" || str.charCodeAt(0) !== 47) {
      return parse(str);
    }
    var pathname = str;
    var query = null;
    var search = null;
    for (var i = 1;i < str.length; i++) {
      switch (str.charCodeAt(i)) {
        case 63:
          if (search === null) {
            pathname = str.substring(0, i);
            query = str.substring(i + 1);
            search = str.substring(i);
          }
          break;
        case 9:
        case 10:
        case 12:
        case 13:
        case 32:
        case 35:
        case 160:
        case 65279:
          return parse(str);
      }
    }
    var url2 = Url !== undefined ? new Url : {};
    url2.path = str;
    url2.href = str;
    url2.pathname = pathname;
    if (search !== null) {
      url2.query = query;
      url2.search = search;
    }
    return url2;
  };
  var fresh = function(url2, parsedUrl) {
    return typeof parsedUrl === "object" && parsedUrl !== null && (Url === undefined || parsedUrl instanceof Url) && parsedUrl._raw === url2;
  };
  /*!
   * parseurl
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2014-2017 Douglas Christopher Wilson
   * MIT Licensed
   */
  var url = import.meta.require("url");
  var parse = url.parse;
  var Url = url.Url;
  module.exports = parseurl;
  module.exports.original = originalurl;
});

// node_modules/finalhandler/index.js
var require_finalhandler = __commonJS((exports, module) => {
  var createHtmlDocument = function(message) {
    var body = escapeHtml(message).replace(NEWLINE_REGEXP, "<br>").replace(DOUBLE_SPACE_REGEXP, " &nbsp;");
    return '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>' + body + "</pre>\n</body>\n</html>\n";
  };
  var finalhandler = function(req, res, options) {
    var opts = options || {};
    var env = opts.env || "development";
    var onerror = opts.onerror;
    return function(err) {
      var headers;
      var msg;
      var status;
      if (!err && headersSent(res)) {
        debug2("cannot 404 after headers sent");
        return;
      }
      if (err) {
        status = getErrorStatusCode(err);
        if (status === undefined) {
          status = getResponseStatusCode(res);
        } else {
          headers = getErrorHeaders(err);
        }
        msg = getErrorMessage(err, status, env);
      } else {
        status = 404;
        msg = "Cannot " + req.method + " " + encodeUrl(getResourceName(req));
      }
      debug2("default %s", status);
      if (err && onerror) {
        defer(onerror, err, req, res);
      }
      if (headersSent(res)) {
        debug2("cannot %d after headers sent", status);
        req.socket.destroy();
        return;
      }
      send(req, res, status, headers, msg);
    };
  };
  var getErrorHeaders = function(err) {
    if (!err.headers || typeof err.headers !== "object") {
      return;
    }
    var headers = Object.create(null);
    var keys = Object.keys(err.headers);
    for (var i = 0;i < keys.length; i++) {
      var key = keys[i];
      headers[key] = err.headers[key];
    }
    return headers;
  };
  var getErrorMessage = function(err, status, env) {
    var msg;
    if (env !== "production") {
      msg = err.stack;
      if (!msg && typeof err.toString === "function") {
        msg = err.toString();
      }
    }
    return msg || statuses.message[status];
  };
  var getErrorStatusCode = function(err) {
    if (typeof err.status === "number" && err.status >= 400 && err.status < 600) {
      return err.status;
    }
    if (typeof err.statusCode === "number" && err.statusCode >= 400 && err.statusCode < 600) {
      return err.statusCode;
    }
    return;
  };
  var getResourceName = function(req) {
    try {
      return parseUrl.original(req).pathname;
    } catch (e) {
      return "resource";
    }
  };
  var getResponseStatusCode = function(res) {
    var status = res.statusCode;
    if (typeof status !== "number" || status < 400 || status > 599) {
      status = 500;
    }
    return status;
  };
  var headersSent = function(res) {
    return typeof res.headersSent !== "boolean" ? Boolean(res._header) : res.headersSent;
  };
  var send = function(req, res, status, headers, message) {
    function write() {
      var body = createHtmlDocument(message);
      res.statusCode = status;
      res.statusMessage = statuses.message[status];
      res.removeHeader("Content-Encoding");
      res.removeHeader("Content-Language");
      res.removeHeader("Content-Range");
      setHeaders(res, headers);
      res.setHeader("Content-Security-Policy", "default-src 'none'");
      res.setHeader("X-Content-Type-Options", "nosniff");
      res.setHeader("Content-Type", "text/html; charset=utf-8");
      res.setHeader("Content-Length", Buffer.byteLength(body, "utf8"));
      if (req.method === "HEAD") {
        res.end();
        return;
      }
      res.end(body, "utf8");
    }
    if (isFinished(req)) {
      write();
      return;
    }
    unpipe(req);
    onFinished(req, write);
    req.resume();
  };
  var setHeaders = function(res, headers) {
    if (!headers) {
      return;
    }
    var keys = Object.keys(headers);
    for (var i = 0;i < keys.length; i++) {
      var key = keys[i];
      res.setHeader(key, headers[key]);
    }
  };
  /*!
   * finalhandler
   * Copyright(c) 2014-2022 Douglas Christopher Wilson
   * MIT Licensed
   */
  var debug2 = require_src3()("finalhandler");
  var encodeUrl = require_encodeurl();
  var escapeHtml = require_escape_html();
  var onFinished = require_on_finished();
  var parseUrl = require_parseurl();
  var statuses = require_statuses();
  var unpipe = require_unpipe();
  var DOUBLE_SPACE_REGEXP = /\x20{2}/g;
  var NEWLINE_REGEXP = /\n/g;
  var defer = typeof setImmediate === "function" ? setImmediate : function(fn) {
    process.nextTick(fn.bind.apply(fn, arguments));
  };
  var isFinished = onFinished.isFinished;
  module.exports = finalhandler;
});

// node_modules/express/node_modules/debug/node_modules/ms/index.js
var require_ms3 = __commonJS((exports, module) => {
  var parse = function(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch (type) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return n * y;
      case "days":
      case "day":
      case "d":
        return n * d;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return n * h;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return n * m;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return n * s;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return n;
      default:
        return;
    }
  };
  var fmtShort = function(ms) {
    if (ms >= d) {
      return Math.round(ms / d) + "d";
    }
    if (ms >= h) {
      return Math.round(ms / h) + "h";
    }
    if (ms >= m) {
      return Math.round(ms / m) + "m";
    }
    if (ms >= s) {
      return Math.round(ms / s) + "s";
    }
    return ms + "ms";
  };
  var fmtLong = function(ms) {
    return plural(ms, d, "day") || plural(ms, h, "hour") || plural(ms, m, "minute") || plural(ms, s, "second") || ms + " ms";
  };
  var plural = function(ms, n, name) {
    if (ms < n) {
      return;
    }
    if (ms < n * 1.5) {
      return Math.floor(ms / n) + " " + name;
    }
    return Math.ceil(ms / n) + " " + name + "s";
  };
  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var y = d * 365.25;
  module.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
      return parse(val);
    } else if (type === "number" && isNaN(val) === false) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
  };
});

// node_modules/express/node_modules/debug/src/debug.js
var require_debug3 = __commonJS((exports, module) => {
  var selectColor = function(namespace) {
    var hash = 0, i;
    for (i in namespace) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0;
    }
    return exports.colors[Math.abs(hash) % exports.colors.length];
  };
  var createDebug = function(namespace) {
    function debug2() {
      if (!debug2.enabled)
        return;
      var self2 = debug2;
      var curr = +new Date;
      var ms = curr - (prevTime || curr);
      self2.diff = ms;
      self2.prev = prevTime;
      self2.curr = curr;
      prevTime = curr;
      var args = new Array(arguments.length);
      for (var i = 0;i < args.length; i++) {
        args[i] = arguments[i];
      }
      args[0] = exports.coerce(args[0]);
      if (typeof args[0] !== "string") {
        args.unshift("%O");
      }
      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
        if (match === "%%")
          return match;
        index++;
        var formatter = exports.formatters[format];
        if (typeof formatter === "function") {
          var val = args[index];
          match = formatter.call(self2, val);
          args.splice(index, 1);
          index--;
        }
        return match;
      });
      exports.formatArgs.call(self2, args);
      var logFn = debug2.log || exports.log || console.log.bind(console);
      logFn.apply(self2, args);
    }
    debug2.namespace = namespace;
    debug2.enabled = exports.enabled(namespace);
    debug2.useColors = exports.useColors();
    debug2.color = selectColor(namespace);
    if (typeof exports.init === "function") {
      exports.init(debug2);
    }
    return debug2;
  };
  var enable = function(namespaces) {
    exports.save(namespaces);
    exports.names = [];
    exports.skips = [];
    var split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
    var len = split.length;
    for (var i = 0;i < len; i++) {
      if (!split[i])
        continue;
      namespaces = split[i].replace(/\*/g, ".*?");
      if (namespaces[0] === "-") {
        exports.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
      } else {
        exports.names.push(new RegExp("^" + namespaces + "$"));
      }
    }
  };
  var disable = function() {
    exports.enable("");
  };
  var enabled = function(name) {
    var i, len;
    for (i = 0, len = exports.skips.length;i < len; i++) {
      if (exports.skips[i].test(name)) {
        return false;
      }
    }
    for (i = 0, len = exports.names.length;i < len; i++) {
      if (exports.names[i].test(name)) {
        return true;
      }
    }
    return false;
  };
  var coerce = function(val) {
    if (val instanceof Error)
      return val.stack || val.message;
    return val;
  };
  exports = module.exports = createDebug.debug = createDebug["default"] = createDebug;
  exports.coerce = coerce;
  exports.disable = disable;
  exports.enable = enable;
  exports.enabled = enabled;
  exports.humanize = require_ms3();
  exports.names = [];
  exports.skips = [];
  exports.formatters = {};
  var prevTime;
});

// node_modules/express/node_modules/debug/src/browser.js
var require_browser3 = __commonJS((exports, module) => {
  var useColors = function() {
    if (typeof window !== "undefined" && window.process && window.process.type === "renderer") {
      return true;
    }
    return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  };
  var formatArgs = function(args) {
    var useColors2 = this.useColors;
    args[0] = (useColors2 ? "%c" : "") + this.namespace + (useColors2 ? " %c" : " ") + args[0] + (useColors2 ? "%c " : " ") + "+" + exports.humanize(this.diff);
    if (!useColors2)
      return;
    var c = "color: " + this.color;
    args.splice(1, 0, c, "color: inherit");
    var index = 0;
    var lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, function(match) {
      if (match === "%%")
        return;
      index++;
      if (match === "%c") {
        lastC = index;
      }
    });
    args.splice(lastC, 0, c);
  };
  var log = function() {
    return typeof console === "object" && console.log && Function.prototype.apply.call(console.log, console, arguments);
  };
  var save = function(namespaces) {
    try {
      if (namespaces == null) {
        exports.storage.removeItem("debug");
      } else {
        exports.storage.debug = namespaces;
      }
    } catch (e) {
    }
  };
  var load = function() {
    var r;
    try {
      r = exports.storage.debug;
    } catch (e) {
    }
    if (!r && typeof process !== "undefined" && "env" in process) {
      r = process.env.DEBUG;
    }
    return r;
  };
  var localstorage = function() {
    try {
      return window.localStorage;
    } catch (e) {
    }
  };
  exports = module.exports = require_debug3();
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = typeof chrome != "undefined" && typeof chrome.storage != "undefined" ? chrome.storage.local : localstorage();
  exports.colors = [
    "lightseagreen",
    "forestgreen",
    "goldenrod",
    "dodgerblue",
    "darkorchid",
    "crimson"
  ];
  exports.formatters.j = function(v) {
    try {
      return JSON.stringify(v);
    } catch (err) {
      return "[UnexpectedJSONParseError]: " + err.message;
    }
  };
  exports.enable(load());
});

// node_modules/express/node_modules/debug/src/node.js
var require_node3 = __commonJS((exports, module) => {
  var useColors = function() {
    return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(fd);
  };
  var formatArgs = function(args) {
    var name = this.namespace;
    var useColors2 = this.useColors;
    if (useColors2) {
      var c = this.color;
      var prefix = "  \x1B[3" + c + ";1m" + name + " " + "\x1B[0m";
      args[0] = prefix + args[0].split("\n").join("\n" + prefix);
      args.push("\x1B[3" + c + "m+" + exports.humanize(this.diff) + "\x1B[0m");
    } else {
      args[0] = new Date().toUTCString() + " " + name + " " + args[0];
    }
  };
  var log = function() {
    return stream.write(util.format.apply(util, arguments) + "\n");
  };
  var save = function(namespaces) {
    if (namespaces == null) {
      delete process.env.DEBUG;
    } else {
      process.env.DEBUG = namespaces;
    }
  };
  var load = function() {
    return process.env.DEBUG;
  };
  var createWritableStdioStream = function(fd2) {
    var stream2;
    var tty_wrap = process.binding("tty_wrap");
    switch (tty_wrap.guessHandleType(fd2)) {
      case "TTY":
        stream2 = new tty.WriteStream(fd2);
        stream2._type = "tty";
        if (stream2._handle && stream2._handle.unref) {
          stream2._handle.unref();
        }
        break;
      case "FILE":
        var fs = import.meta.require("fs");
        stream2 = new fs.SyncWriteStream(fd2, { autoClose: false });
        stream2._type = "fs";
        break;
      case "PIPE":
      case "TCP":
        var net = import.meta.require("net");
        stream2 = new net.Socket({
          fd: fd2,
          readable: false,
          writable: true
        });
        stream2.readable = false;
        stream2.read = null;
        stream2._type = "pipe";
        if (stream2._handle && stream2._handle.unref) {
          stream2._handle.unref();
        }
        break;
      default:
        throw new Error("Implement me. Unknown stream file type!");
    }
    stream2.fd = fd2;
    stream2._isStdio = true;
    return stream2;
  };
  var init = function(debug2) {
    debug2.inspectOpts = {};
    var keys = Object.keys(exports.inspectOpts);
    for (var i = 0;i < keys.length; i++) {
      debug2.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
  };
  var tty = import.meta.require("tty");
  var util = import.meta.require("util");
  exports = module.exports = require_debug3();
  exports.init = init;
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.colors = [6, 2, 3, 4, 5, 1];
  exports.inspectOpts = Object.keys(process.env).filter(function(key) {
    return /^debug_/i.test(key);
  }).reduce(function(obj, key) {
    var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function(_, k) {
      return k.toUpperCase();
    });
    var val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val))
      val = true;
    else if (/^(no|off|false|disabled)$/i.test(val))
      val = false;
    else if (val === "null")
      val = null;
    else
      val = Number(val);
    obj[prop] = val;
    return obj;
  }, {});
  var fd = parseInt(process.env.DEBUG_FD, 10) || 2;
  if (fd !== 1 && fd !== 2) {
    util.deprecate(function() {
    }, "except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)")();
  }
  var stream = fd === 1 ? process.stdout : fd === 2 ? process.stderr : createWritableStdioStream(fd);
  exports.formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts).split("\n").map(function(str) {
      return str.trim();
    }).join(" ");
  };
  exports.formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts);
  };
  exports.enable(load());
});

// node_modules/express/node_modules/debug/src/index.js
var require_src4 = __commonJS((exports, module) => {
  if (typeof process !== "undefined" && process.type === "renderer") {
    module.exports = require_browser3();
  } else {
    module.exports = require_node3();
  }
});

// node_modules/array-flatten/array-flatten.js
var require_array_flatten = __commonJS((exports, module) => {
  var flattenWithDepth = function(array, result, depth) {
    for (var i = 0;i < array.length; i++) {
      var value = array[i];
      if (depth > 0 && Array.isArray(value)) {
        flattenWithDepth(value, result, depth - 1);
      } else {
        result.push(value);
      }
    }
    return result;
  };
  var flattenForever = function(array, result) {
    for (var i = 0;i < array.length; i++) {
      var value = array[i];
      if (Array.isArray(value)) {
        flattenForever(value, result);
      } else {
        result.push(value);
      }
    }
    return result;
  };
  var arrayFlatten = function(array, depth) {
    if (depth == null) {
      return flattenForever(array, []);
    }
    return flattenWithDepth(array, [], depth);
  };
  module.exports = arrayFlatten;
});

// node_modules/path-to-regexp/index.js
var require_path_to_regexp = __commonJS((exports, module) => {
  var pathtoRegexp = function(path, keys, options) {
    options = options || {};
    keys = keys || [];
    var strict = options.strict;
    var end = options.end !== false;
    var flags = options.sensitive ? "" : "i";
    var extraOffset = 0;
    var keysOffset = keys.length;
    var i = 0;
    var name = 0;
    var m;
    if (path instanceof RegExp) {
      while (m = MATCHING_GROUP_REGEXP.exec(path.source)) {
        keys.push({
          name: name++,
          optional: false,
          offset: m.index
        });
      }
      return path;
    }
    if (Array.isArray(path)) {
      path = path.map(function(value) {
        return pathtoRegexp(value, keys, options).source;
      });
      return new RegExp("(?:" + path.join("|") + ")", flags);
    }
    path = ("^" + path + (strict ? "" : path[path.length - 1] === "/" ? "?" : "/?")).replace(/\/\(/g, "/(?:").replace(/([\/\.])/g, "\\$1").replace(/(\\\/)?(\\\.)?:(\w+)(\(.*?\))?(\*)?(\?)?/g, function(match, slash, format, key, capture, star, optional, offset) {
      slash = slash || "";
      format = format || "";
      capture = capture || "([^\\/" + format + "]+?)";
      optional = optional || "";
      keys.push({
        name: key,
        optional: !!optional,
        offset: offset + extraOffset
      });
      var result = "" + (optional ? "" : slash) + "(?:" + format + (optional ? slash : "") + capture + (star ? "((?:[\\/" + format + "].+?)?)" : "") + ")" + optional;
      extraOffset += result.length - match.length;
      return result;
    }).replace(/\*/g, function(star, index2) {
      var len = keys.length;
      while (len-- > keysOffset && keys[len].offset > index2) {
        keys[len].offset += 3;
      }
      return "(.*)";
    });
    while (m = MATCHING_GROUP_REGEXP.exec(path)) {
      var escapeCount = 0;
      var index = m.index;
      while (path.charAt(--index) === "\\") {
        escapeCount++;
      }
      if (escapeCount % 2 === 1) {
        continue;
      }
      if (keysOffset + i === keys.length || keys[keysOffset + i].offset > m.index) {
        keys.splice(keysOffset + i, 0, {
          name: name++,
          optional: false,
          offset: m.index
        });
      }
      i++;
    }
    path += end ? "$" : path[path.length - 1] === "/" ? "" : "(?=\\/|$)";
    return new RegExp(path, flags);
  };
  module.exports = pathtoRegexp;
  var MATCHING_GROUP_REGEXP = /\((?!\?)/g;
});

// node_modules/express/lib/router/layer.js
var require_layer = __commonJS((exports, module) => {
  var Layer = function(path, options, fn) {
    if (!(this instanceof Layer)) {
      return new Layer(path, options, fn);
    }
    debug2("new %o", path);
    var opts = options || {};
    this.handle = fn;
    this.name = fn.name || "<anonymous>";
    this.params = undefined;
    this.path = undefined;
    this.regexp = pathRegexp(path, this.keys = [], opts);
    this.regexp.fast_star = path === "*";
    this.regexp.fast_slash = path === "/" && opts.end === false;
  };
  var decode_param = function(val) {
    if (typeof val !== "string" || val.length === 0) {
      return val;
    }
    try {
      return decodeURIComponent(val);
    } catch (err) {
      if (err instanceof URIError) {
        err.message = "Failed to decode param \'" + val + "\'";
        err.status = err.statusCode = 400;
      }
      throw err;
    }
  };
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var pathRegexp = require_path_to_regexp();
  var debug2 = require_src4()("express:router:layer");
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  module.exports = Layer;
  Layer.prototype.handle_error = function handle_error(error, req, res, next) {
    var fn = this.handle;
    if (fn.length !== 4) {
      return next(error);
    }
    try {
      fn(error, req, res, next);
    } catch (err) {
      next(err);
    }
  };
  Layer.prototype.handle_request = function handle(req, res, next) {
    var fn = this.handle;
    if (fn.length > 3) {
      return next();
    }
    try {
      fn(req, res, next);
    } catch (err) {
      next(err);
    }
  };
  Layer.prototype.match = function match(path) {
    var match;
    if (path != null) {
      if (this.regexp.fast_slash) {
        this.params = {};
        this.path = "";
        return true;
      }
      if (this.regexp.fast_star) {
        this.params = { "0": decode_param(path) };
        this.path = path;
        return true;
      }
      match = this.regexp.exec(path);
    }
    if (!match) {
      this.params = undefined;
      this.path = undefined;
      return false;
    }
    this.params = {};
    this.path = match[0];
    var keys = this.keys;
    var params = this.params;
    for (var i = 1;i < match.length; i++) {
      var key = keys[i - 1];
      var prop = key.name;
      var val = decode_param(match[i]);
      if (val !== undefined || !hasOwnProperty.call(params, prop)) {
        params[prop] = val;
      }
    }
    return true;
  };
});

// node_modules/methods/index.js
var require_methods = __commonJS((exports, module) => {
  var getCurrentNodeMethods = function() {
    return http.METHODS && http.METHODS.map(function lowerCaseMethod(method) {
      return method.toLowerCase();
    });
  };
  var getBasicNodeMethods = function() {
    return [
      "get",
      "post",
      "put",
      "head",
      "delete",
      "options",
      "trace",
      "copy",
      "lock",
      "mkcol",
      "move",
      "purge",
      "propfind",
      "proppatch",
      "unlock",
      "report",
      "mkactivity",
      "checkout",
      "merge",
      "m-search",
      "notify",
      "subscribe",
      "unsubscribe",
      "patch",
      "search",
      "connect"
    ];
  };
  /*!
   * methods
   * Copyright(c) 2013-2014 TJ Holowaychuk
   * Copyright(c) 2015-2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  var http = import.meta.require("http");
  module.exports = getCurrentNodeMethods() || getBasicNodeMethods();
});

// node_modules/express/lib/router/route.js
var require_route = __commonJS((exports, module) => {
  var Route = function(path) {
    this.path = path;
    this.stack = [];
    debug2("new %o", path);
    this.methods = {};
  };
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var debug2 = require_src4()("express:router:route");
  var flatten = require_array_flatten();
  var Layer = require_layer();
  var methods = require_methods();
  var slice = Array.prototype.slice;
  var toString = Object.prototype.toString;
  module.exports = Route;
  Route.prototype._handles_method = function _handles_method(method) {
    if (this.methods._all) {
      return true;
    }
    var name = typeof method === "string" ? method.toLowerCase() : method;
    if (name === "head" && !this.methods["head"]) {
      name = "get";
    }
    return Boolean(this.methods[name]);
  };
  Route.prototype._options = function _options() {
    var methods2 = Object.keys(this.methods);
    if (this.methods.get && !this.methods.head) {
      methods2.push("head");
    }
    for (var i = 0;i < methods2.length; i++) {
      methods2[i] = methods2[i].toUpperCase();
    }
    return methods2;
  };
  Route.prototype.dispatch = function dispatch(req, res, done) {
    var idx = 0;
    var stack = this.stack;
    var sync = 0;
    if (stack.length === 0) {
      return done();
    }
    var method = typeof req.method === "string" ? req.method.toLowerCase() : req.method;
    if (method === "head" && !this.methods["head"]) {
      method = "get";
    }
    req.route = this;
    next();
    function next(err) {
      if (err && err === "route") {
        return done();
      }
      if (err && err === "router") {
        return done(err);
      }
      if (++sync > 100) {
        return setImmediate(next, err);
      }
      var layer = stack[idx++];
      if (!layer) {
        return done(err);
      }
      if (layer.method && layer.method !== method) {
        next(err);
      } else if (err) {
        layer.handle_error(err, req, res, next);
      } else {
        layer.handle_request(req, res, next);
      }
      sync = 0;
    }
  };
  Route.prototype.all = function all() {
    var handles = flatten(slice.call(arguments));
    for (var i = 0;i < handles.length; i++) {
      var handle = handles[i];
      if (typeof handle !== "function") {
        var type = toString.call(handle);
        var msg = "Route.all() requires a callback function but got a " + type;
        throw new TypeError(msg);
      }
      var layer = Layer("/", {}, handle);
      layer.method = undefined;
      this.methods._all = true;
      this.stack.push(layer);
    }
    return this;
  };
  methods.forEach(function(method) {
    Route.prototype[method] = function() {
      var handles = flatten(slice.call(arguments));
      for (var i = 0;i < handles.length; i++) {
        var handle = handles[i];
        if (typeof handle !== "function") {
          var type = toString.call(handle);
          var msg = "Route." + method + "() requires a callback function but got a " + type;
          throw new Error(msg);
        }
        debug2("%s %o", method, this.path);
        var layer = Layer("/", {}, handle);
        layer.method = method;
        this.methods[method] = true;
        this.stack.push(layer);
      }
      return this;
    };
  });
});

// node_modules/utils-merge/index.js
var require_utils_merge = __commonJS((exports, module) => {
  exports = module.exports = function(a, b) {
    if (a && b) {
      for (var key in b) {
        a[key] = b[key];
      }
    }
    return a;
  };
});

// node_modules/express/lib/router/index.js
var require_router = __commonJS((exports, module) => {
  var appendMethods = function(list, addition) {
    for (var i = 0;i < addition.length; i++) {
      var method = addition[i];
      if (list.indexOf(method) === -1) {
        list.push(method);
      }
    }
  };
  var getPathname = function(req) {
    try {
      return parseUrl(req).pathname;
    } catch (err) {
      return;
    }
  };
  var getProtohost = function(url) {
    if (typeof url !== "string" || url.length === 0 || url[0] === "/") {
      return;
    }
    var searchIndex = url.indexOf("?");
    var pathLength = searchIndex !== -1 ? searchIndex : url.length;
    var fqdnIndex = url.slice(0, pathLength).indexOf("://");
    return fqdnIndex !== -1 ? url.substring(0, url.indexOf("/", 3 + fqdnIndex)) : undefined;
  };
  var gettype = function(obj) {
    var type = typeof obj;
    if (type !== "object") {
      return type;
    }
    return toString.call(obj).replace(objectRegExp, "$1");
  };
  var matchLayer = function(layer, path) {
    try {
      return layer.match(path);
    } catch (err) {
      return err;
    }
  };
  var mergeParams = function(params, parent) {
    if (typeof parent !== "object" || !parent) {
      return params;
    }
    var obj = mixin({}, parent);
    if (!(0 in params) || !(0 in parent)) {
      return mixin(obj, params);
    }
    var i = 0;
    var o = 0;
    while (i in params) {
      i++;
    }
    while (o in parent) {
      o++;
    }
    for (i--;i >= 0; i--) {
      params[i + o] = params[i];
      if (i < o) {
        delete params[i];
      }
    }
    return mixin(obj, params);
  };
  var restore = function(fn, obj) {
    var props = new Array(arguments.length - 2);
    var vals = new Array(arguments.length - 2);
    for (var i = 0;i < props.length; i++) {
      props[i] = arguments[i + 2];
      vals[i] = obj[props[i]];
    }
    return function() {
      for (var i2 = 0;i2 < props.length; i2++) {
        obj[props[i2]] = vals[i2];
      }
      return fn.apply(this, arguments);
    };
  };
  var sendOptionsResponse = function(res, options, next) {
    try {
      var body = options.join(",");
      res.set("Allow", body);
      res.send(body);
    } catch (err) {
      next(err);
    }
  };
  var wrap = function(old, fn) {
    return function proxy() {
      var args = new Array(arguments.length + 1);
      args[0] = old;
      for (var i = 0, len = arguments.length;i < len; i++) {
        args[i + 1] = arguments[i];
      }
      fn.apply(this, args);
    };
  };
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var Route = require_route();
  var Layer = require_layer();
  var methods = require_methods();
  var mixin = require_utils_merge();
  var debug2 = require_src4()("express:router");
  var deprecate = require_depd()("express");
  var flatten = require_array_flatten();
  var parseUrl = require_parseurl();
  var setPrototypeOf = require_setprototypeof();
  var objectRegExp = /^\[object (\S+)\]$/;
  var slice = Array.prototype.slice;
  var toString = Object.prototype.toString;
  var proto = module.exports = function(options) {
    var opts = options || {};
    function router(req, res, next) {
      router.handle(req, res, next);
    }
    setPrototypeOf(router, proto);
    router.params = {};
    router._params = [];
    router.caseSensitive = opts.caseSensitive;
    router.mergeParams = opts.mergeParams;
    router.strict = opts.strict;
    router.stack = [];
    return router;
  };
  proto.param = function param(name, fn) {
    if (typeof name === "function") {
      deprecate("router.param(fn): Refactor to use path params");
      this._params.push(name);
      return;
    }
    var params = this._params;
    var len = params.length;
    var ret;
    if (name[0] === ":") {
      deprecate("router.param(" + JSON.stringify(name) + ", fn): Use router.param(" + JSON.stringify(name.slice(1)) + ", fn) instead");
      name = name.slice(1);
    }
    for (var i = 0;i < len; ++i) {
      if (ret = params[i](name, fn)) {
        fn = ret;
      }
    }
    if (typeof fn !== "function") {
      throw new Error("invalid param() call for " + name + ", got " + fn);
    }
    (this.params[name] = this.params[name] || []).push(fn);
    return this;
  };
  proto.handle = function handle(req, res, out) {
    var self2 = this;
    debug2("dispatching %s %s", req.method, req.url);
    var idx = 0;
    var protohost = getProtohost(req.url) || "";
    var removed = "";
    var slashAdded = false;
    var sync = 0;
    var paramcalled = {};
    var options = [];
    var stack = self2.stack;
    var parentParams = req.params;
    var parentUrl = req.baseUrl || "";
    var done = restore(out, req, "baseUrl", "next", "params");
    req.next = next;
    if (req.method === "OPTIONS") {
      done = wrap(done, function(old, err) {
        if (err || options.length === 0)
          return old(err);
        sendOptionsResponse(res, options, old);
      });
    }
    req.baseUrl = parentUrl;
    req.originalUrl = req.originalUrl || req.url;
    next();
    function next(err) {
      var layerError = err === "route" ? null : err;
      if (slashAdded) {
        req.url = req.url.slice(1);
        slashAdded = false;
      }
      if (removed.length !== 0) {
        req.baseUrl = parentUrl;
        req.url = protohost + removed + req.url.slice(protohost.length);
        removed = "";
      }
      if (layerError === "router") {
        setImmediate(done, null);
        return;
      }
      if (idx >= stack.length) {
        setImmediate(done, layerError);
        return;
      }
      if (++sync > 100) {
        return setImmediate(next, err);
      }
      var path = getPathname(req);
      if (path == null) {
        return done(layerError);
      }
      var layer;
      var match;
      var route;
      while (match !== true && idx < stack.length) {
        layer = stack[idx++];
        match = matchLayer(layer, path);
        route = layer.route;
        if (typeof match !== "boolean") {
          layerError = layerError || match;
        }
        if (match !== true) {
          continue;
        }
        if (!route) {
          continue;
        }
        if (layerError) {
          match = false;
          continue;
        }
        var method = req.method;
        var has_method = route._handles_method(method);
        if (!has_method && method === "OPTIONS") {
          appendMethods(options, route._options());
        }
        if (!has_method && method !== "HEAD") {
          match = false;
        }
      }
      if (match !== true) {
        return done(layerError);
      }
      if (route) {
        req.route = route;
      }
      req.params = self2.mergeParams ? mergeParams(layer.params, parentParams) : layer.params;
      var layerPath = layer.path;
      self2.process_params(layer, paramcalled, req, res, function(err2) {
        if (err2) {
          next(layerError || err2);
        } else if (route) {
          layer.handle_request(req, res, next);
        } else {
          trim_prefix(layer, layerError, layerPath, path);
        }
        sync = 0;
      });
    }
    function trim_prefix(layer, layerError, layerPath, path) {
      if (layerPath.length !== 0) {
        if (layerPath !== path.slice(0, layerPath.length)) {
          next(layerError);
          return;
        }
        var c = path[layerPath.length];
        if (c && c !== "/" && c !== ".")
          return next(layerError);
        debug2("trim prefix (%s) from url %s", layerPath, req.url);
        removed = layerPath;
        req.url = protohost + req.url.slice(protohost.length + removed.length);
        if (!protohost && req.url[0] !== "/") {
          req.url = "/" + req.url;
          slashAdded = true;
        }
        req.baseUrl = parentUrl + (removed[removed.length - 1] === "/" ? removed.substring(0, removed.length - 1) : removed);
      }
      debug2("%s %s : %s", layer.name, layerPath, req.originalUrl);
      if (layerError) {
        layer.handle_error(layerError, req, res, next);
      } else {
        layer.handle_request(req, res, next);
      }
    }
  };
  proto.process_params = function process_params(layer, called, req, res, done) {
    var params = this.params;
    var keys = layer.keys;
    if (!keys || keys.length === 0) {
      return done();
    }
    var i = 0;
    var name;
    var paramIndex = 0;
    var key;
    var paramVal;
    var paramCallbacks;
    var paramCalled;
    function param(err) {
      if (err) {
        return done(err);
      }
      if (i >= keys.length) {
        return done();
      }
      paramIndex = 0;
      key = keys[i++];
      name = key.name;
      paramVal = req.params[name];
      paramCallbacks = params[name];
      paramCalled = called[name];
      if (paramVal === undefined || !paramCallbacks) {
        return param();
      }
      if (paramCalled && (paramCalled.match === paramVal || paramCalled.error && paramCalled.error !== "route")) {
        req.params[name] = paramCalled.value;
        return param(paramCalled.error);
      }
      called[name] = paramCalled = {
        error: null,
        match: paramVal,
        value: paramVal
      };
      paramCallback();
    }
    function paramCallback(err) {
      var fn = paramCallbacks[paramIndex++];
      paramCalled.value = req.params[key.name];
      if (err) {
        paramCalled.error = err;
        param(err);
        return;
      }
      if (!fn)
        return param();
      try {
        fn(req, res, paramCallback, paramVal, key.name);
      } catch (e) {
        paramCallback(e);
      }
    }
    param();
  };
  proto.use = function use(fn) {
    var offset = 0;
    var path = "/";
    if (typeof fn !== "function") {
      var arg = fn;
      while (Array.isArray(arg) && arg.length !== 0) {
        arg = arg[0];
      }
      if (typeof arg !== "function") {
        offset = 1;
        path = fn;
      }
    }
    var callbacks = flatten(slice.call(arguments, offset));
    if (callbacks.length === 0) {
      throw new TypeError("Router.use() requires a middleware function");
    }
    for (var i = 0;i < callbacks.length; i++) {
      var fn = callbacks[i];
      if (typeof fn !== "function") {
        throw new TypeError("Router.use() requires a middleware function but got a " + gettype(fn));
      }
      debug2("use %o %s", path, fn.name || "<anonymous>");
      var layer = new Layer(path, {
        sensitive: this.caseSensitive,
        strict: false,
        end: false
      }, fn);
      layer.route = undefined;
      this.stack.push(layer);
    }
    return this;
  };
  proto.route = function route(path) {
    var route = new Route(path);
    var layer = new Layer(path, {
      sensitive: this.caseSensitive,
      strict: this.strict,
      end: true
    }, route.dispatch.bind(route));
    layer.route = route;
    this.stack.push(layer);
    return route;
  };
  methods.concat("all").forEach(function(method) {
    proto[method] = function(path) {
      var route = this.route(path);
      route[method].apply(route, slice.call(arguments, 1));
      return this;
    };
  });
});

// node_modules/express/lib/middleware/init.js
var require_init = __commonJS((exports) => {
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var setPrototypeOf = require_setprototypeof();
  exports.init = function(app) {
    return function expressInit(req, res, next) {
      if (app.enabled("x-powered-by"))
        res.setHeader("X-Powered-By", "Express");
      req.res = res;
      res.req = req;
      req.next = next;
      setPrototypeOf(req, app.request);
      setPrototypeOf(res, app.response);
      res.locals = res.locals || Object.create(null);
      next();
    };
  };
});

// node_modules/express/lib/middleware/query.js
var require_query = __commonJS((exports, module) => {
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var merge = require_utils_merge();
  var parseUrl = require_parseurl();
  var qs = require_lib2();
  module.exports = function query(options) {
    var opts = merge({}, options);
    var queryparse = qs.parse;
    if (typeof options === "function") {
      queryparse = options;
      opts = undefined;
    }
    if (opts !== undefined && opts.allowPrototypes === undefined) {
      opts.allowPrototypes = true;
    }
    return function query(req, res, next) {
      if (!req.query) {
        var val = parseUrl(req).query;
        req.query = queryparse(val, opts);
      }
      next();
    };
  };
});

// node_modules/express/lib/view.js
var require_view = __commonJS((exports, module) => {
  var View = function(name, options) {
    var opts = options || {};
    this.defaultEngine = opts.defaultEngine;
    this.ext = extname(name);
    this.name = name;
    this.root = opts.root;
    if (!this.ext && !this.defaultEngine) {
      throw new Error("No default engine was specified and no extension was provided.");
    }
    var fileName = name;
    if (!this.ext) {
      this.ext = this.defaultEngine[0] !== "." ? "." + this.defaultEngine : this.defaultEngine;
      fileName += this.ext;
    }
    if (!opts.engines[this.ext]) {
      var mod = this.ext.slice(1);
      debug2('require "%s"', mod);
      var fn = import.meta.require(mod).__express;
      if (typeof fn !== "function") {
        throw new Error('Module "' + mod + '" does not provide a view engine.');
      }
      opts.engines[this.ext] = fn;
    }
    this.engine = opts.engines[this.ext];
    this.path = this.lookup(fileName);
  };
  var tryStat = function(path2) {
    debug2('stat "%s"', path2);
    try {
      return fs.statSync(path2);
    } catch (e) {
      return;
    }
  };
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var debug2 = require_src4()("express:view");
  var path = import.meta.require("path");
  var fs = import.meta.require("fs");
  var dirname = path.dirname;
  var basename = path.basename;
  var extname = path.extname;
  var join = path.join;
  var resolve = path.resolve;
  module.exports = View;
  View.prototype.lookup = function lookup(name) {
    var path2;
    var roots = [].concat(this.root);
    debug2('lookup "%s"', name);
    for (var i = 0;i < roots.length && !path2; i++) {
      var root = roots[i];
      var loc = resolve(root, name);
      var dir = dirname(loc);
      var file = basename(loc);
      path2 = this.resolve(dir, file);
    }
    return path2;
  };
  View.prototype.render = function render(options, callback) {
    debug2('render "%s"', this.path);
    this.engine(this.path, options, callback);
  };
  View.prototype.resolve = function resolve(dir, file) {
    var ext = this.ext;
    var path2 = join(dir, file);
    var stat = tryStat(path2);
    if (stat && stat.isFile()) {
      return path2;
    }
    path2 = join(dir, basename(file, ext), "index" + ext);
    stat = tryStat(path2);
    if (stat && stat.isFile()) {
      return path2;
    }
  };
});

// node_modules/safe-buffer/index.js
var require_safe_buffer = __commonJS((exports, module) => {
  var copyProps = function(src, dst) {
    for (var key in src) {
      dst[key] = src[key];
    }
  };
  var SafeBuffer = function(arg, encodingOrOffset, length) {
    return Buffer2(arg, encodingOrOffset, length);
  };
  /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
  var buffer = import.meta.require("buffer");
  var Buffer2 = buffer.Buffer;
  if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
    module.exports = buffer;
  } else {
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
  }
  SafeBuffer.prototype = Object.create(Buffer2.prototype);
  copyProps(Buffer2, SafeBuffer);
  SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") {
      throw new TypeError("Argument must not be a number");
    }
    return Buffer2(arg, encodingOrOffset, length);
  };
  SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    var buf = Buffer2(size);
    if (fill !== undefined) {
      if (typeof encoding === "string") {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }
    return buf;
  };
  SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    return Buffer2(size);
  };
  SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    return buffer.SlowBuffer(size);
  };
});

// node_modules/content-disposition/index.js
var require_content_disposition = __commonJS((exports, module) => {
  var contentDisposition = function(filename, options) {
    var opts = options || {};
    var type = opts.type || "attachment";
    var params = createparams(filename, opts.fallback);
    return format(new ContentDisposition(type, params));
  };
  var createparams = function(filename, fallback) {
    if (filename === undefined) {
      return;
    }
    var params = {};
    if (typeof filename !== "string") {
      throw new TypeError("filename must be a string");
    }
    if (fallback === undefined) {
      fallback = true;
    }
    if (typeof fallback !== "string" && typeof fallback !== "boolean") {
      throw new TypeError("fallback must be a string or boolean");
    }
    if (typeof fallback === "string" && NON_LATIN1_REGEXP.test(fallback)) {
      throw new TypeError("fallback must be ISO-8859-1 string");
    }
    var name = basename(filename);
    var isQuotedString = TEXT_REGEXP.test(name);
    var fallbackName = typeof fallback !== "string" ? fallback && getlatin1(name) : basename(fallback);
    var hasFallback = typeof fallbackName === "string" && fallbackName !== name;
    if (hasFallback || !isQuotedString || HEX_ESCAPE_REGEXP.test(name)) {
      params["filename*"] = name;
    }
    if (isQuotedString || hasFallback) {
      params.filename = hasFallback ? fallbackName : name;
    }
    return params;
  };
  var format = function(obj) {
    var parameters = obj.parameters;
    var type = obj.type;
    if (!type || typeof type !== "string" || !TOKEN_REGEXP.test(type)) {
      throw new TypeError("invalid type");
    }
    var string = String(type).toLowerCase();
    if (parameters && typeof parameters === "object") {
      var param;
      var params = Object.keys(parameters).sort();
      for (var i = 0;i < params.length; i++) {
        param = params[i];
        var val = param.substr(-1) === "*" ? ustring(parameters[param]) : qstring(parameters[param]);
        string += "; " + param + "=" + val;
      }
    }
    return string;
  };
  var decodefield = function(str) {
    var match = EXT_VALUE_REGEXP.exec(str);
    if (!match) {
      throw new TypeError("invalid extended field value");
    }
    var charset = match[1].toLowerCase();
    var encoded = match[2];
    var value;
    var binary = encoded.replace(HEX_ESCAPE_REPLACE_REGEXP, pdecode);
    switch (charset) {
      case "iso-8859-1":
        value = getlatin1(binary);
        break;
      case "utf-8":
        value = Buffer2.from(binary, "binary").toString("utf8");
        break;
      default:
        throw new TypeError("unsupported charset in extended field");
    }
    return value;
  };
  var getlatin1 = function(val) {
    return String(val).replace(NON_LATIN1_REGEXP, "?");
  };
  var parse = function(string) {
    if (!string || typeof string !== "string") {
      throw new TypeError("argument string is required");
    }
    var match = DISPOSITION_TYPE_REGEXP.exec(string);
    if (!match) {
      throw new TypeError("invalid type format");
    }
    var index = match[0].length;
    var type = match[1].toLowerCase();
    var key;
    var names = [];
    var params = {};
    var value;
    index = PARAM_REGEXP.lastIndex = match[0].substr(-1) === ";" ? index - 1 : index;
    while (match = PARAM_REGEXP.exec(string)) {
      if (match.index !== index) {
        throw new TypeError("invalid parameter format");
      }
      index += match[0].length;
      key = match[1].toLowerCase();
      value = match[2];
      if (names.indexOf(key) !== -1) {
        throw new TypeError("invalid duplicate parameter");
      }
      names.push(key);
      if (key.indexOf("*") + 1 === key.length) {
        key = key.slice(0, -1);
        value = decodefield(value);
        params[key] = value;
        continue;
      }
      if (typeof params[key] === "string") {
        continue;
      }
      if (value[0] === '"') {
        value = value.substr(1, value.length - 2).replace(QESC_REGEXP, "$1");
      }
      params[key] = value;
    }
    if (index !== -1 && index !== string.length) {
      throw new TypeError("invalid parameter format");
    }
    return new ContentDisposition(type, params);
  };
  var pdecode = function(str, hex) {
    return String.fromCharCode(parseInt(hex, 16));
  };
  var pencode = function(char) {
    return "%" + String(char).charCodeAt(0).toString(16).toUpperCase();
  };
  var qstring = function(val) {
    var str = String(val);
    return '"' + str.replace(QUOTE_REGEXP, "\\$1") + '"';
  };
  var ustring = function(val) {
    var str = String(val);
    var encoded = encodeURIComponent(str).replace(ENCODE_URL_ATTR_CHAR_REGEXP, pencode);
    return "UTF-8\'\'" + encoded;
  };
  var ContentDisposition = function(type, parameters) {
    this.type = type;
    this.parameters = parameters;
  };
  /*!
   * content-disposition
   * Copyright(c) 2014-2017 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = contentDisposition;
  module.exports.parse = parse;
  var basename = import.meta.require("path").basename;
  var Buffer2 = require_safe_buffer().Buffer;
  var ENCODE_URL_ATTR_CHAR_REGEXP = /[\x00-\x20"'()*,/:;<=>?@[\\\]{}\x7f]/g;
  var HEX_ESCAPE_REGEXP = /%[0-9A-Fa-f]{2}/;
  var HEX_ESCAPE_REPLACE_REGEXP = /%([0-9A-Fa-f]{2})/g;
  var NON_LATIN1_REGEXP = /[^\x20-\x7e\xa0-\xff]/g;
  var QESC_REGEXP = /\\([\u0000-\u007f])/g;
  var QUOTE_REGEXP = /([\\"])/g;
  var PARAM_REGEXP = /;[\x09\x20]*([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*=[\x09\x20]*("(?:[\x20!\x23-\x5b\x5d-\x7e\x80-\xff]|\\[\x20-\x7e])*"|[!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*/g;
  var TEXT_REGEXP = /^[\x20-\x7e\x80-\xff]+$/;
  var TOKEN_REGEXP = /^[!#$%&'*+.0-9A-Z^_`a-z|~-]+$/;
  var EXT_VALUE_REGEXP = /^([A-Za-z0-9!#$%&+\-^_`{}~]+)'(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}|[A-Za-z]{4,8}|)'((?:%[0-9A-Fa-f]{2}|[A-Za-z0-9!#$&+.^_`|~-])+)$/;
  var DISPOSITION_TYPE_REGEXP = /^([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*(?:$|;)/;
});

// node_modules/send/node_modules/debug/node_modules/ms/index.js
var require_ms4 = __commonJS((exports, module) => {
  var parse = function(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch (type) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return n * y;
      case "days":
      case "day":
      case "d":
        return n * d;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return n * h;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return n * m;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return n * s;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return n;
      default:
        return;
    }
  };
  var fmtShort = function(ms) {
    if (ms >= d) {
      return Math.round(ms / d) + "d";
    }
    if (ms >= h) {
      return Math.round(ms / h) + "h";
    }
    if (ms >= m) {
      return Math.round(ms / m) + "m";
    }
    if (ms >= s) {
      return Math.round(ms / s) + "s";
    }
    return ms + "ms";
  };
  var fmtLong = function(ms) {
    return plural(ms, d, "day") || plural(ms, h, "hour") || plural(ms, m, "minute") || plural(ms, s, "second") || ms + " ms";
  };
  var plural = function(ms, n, name) {
    if (ms < n) {
      return;
    }
    if (ms < n * 1.5) {
      return Math.floor(ms / n) + " " + name;
    }
    return Math.ceil(ms / n) + " " + name + "s";
  };
  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var y = d * 365.25;
  module.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
      return parse(val);
    } else if (type === "number" && isNaN(val) === false) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
  };
});

// node_modules/send/node_modules/debug/src/debug.js
var require_debug4 = __commonJS((exports, module) => {
  var selectColor = function(namespace) {
    var hash = 0, i;
    for (i in namespace) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0;
    }
    return exports.colors[Math.abs(hash) % exports.colors.length];
  };
  var createDebug = function(namespace) {
    function debug2() {
      if (!debug2.enabled)
        return;
      var self2 = debug2;
      var curr = +new Date;
      var ms = curr - (prevTime || curr);
      self2.diff = ms;
      self2.prev = prevTime;
      self2.curr = curr;
      prevTime = curr;
      var args = new Array(arguments.length);
      for (var i = 0;i < args.length; i++) {
        args[i] = arguments[i];
      }
      args[0] = exports.coerce(args[0]);
      if (typeof args[0] !== "string") {
        args.unshift("%O");
      }
      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
        if (match === "%%")
          return match;
        index++;
        var formatter = exports.formatters[format];
        if (typeof formatter === "function") {
          var val = args[index];
          match = formatter.call(self2, val);
          args.splice(index, 1);
          index--;
        }
        return match;
      });
      exports.formatArgs.call(self2, args);
      var logFn = debug2.log || exports.log || console.log.bind(console);
      logFn.apply(self2, args);
    }
    debug2.namespace = namespace;
    debug2.enabled = exports.enabled(namespace);
    debug2.useColors = exports.useColors();
    debug2.color = selectColor(namespace);
    if (typeof exports.init === "function") {
      exports.init(debug2);
    }
    return debug2;
  };
  var enable = function(namespaces) {
    exports.save(namespaces);
    exports.names = [];
    exports.skips = [];
    var split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
    var len = split.length;
    for (var i = 0;i < len; i++) {
      if (!split[i])
        continue;
      namespaces = split[i].replace(/\*/g, ".*?");
      if (namespaces[0] === "-") {
        exports.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
      } else {
        exports.names.push(new RegExp("^" + namespaces + "$"));
      }
    }
  };
  var disable = function() {
    exports.enable("");
  };
  var enabled = function(name) {
    var i, len;
    for (i = 0, len = exports.skips.length;i < len; i++) {
      if (exports.skips[i].test(name)) {
        return false;
      }
    }
    for (i = 0, len = exports.names.length;i < len; i++) {
      if (exports.names[i].test(name)) {
        return true;
      }
    }
    return false;
  };
  var coerce = function(val) {
    if (val instanceof Error)
      return val.stack || val.message;
    return val;
  };
  exports = module.exports = createDebug.debug = createDebug["default"] = createDebug;
  exports.coerce = coerce;
  exports.disable = disable;
  exports.enable = enable;
  exports.enabled = enabled;
  exports.humanize = require_ms4();
  exports.names = [];
  exports.skips = [];
  exports.formatters = {};
  var prevTime;
});

// node_modules/send/node_modules/debug/src/browser.js
var require_browser4 = __commonJS((exports, module) => {
  var useColors = function() {
    if (typeof window !== "undefined" && window.process && window.process.type === "renderer") {
      return true;
    }
    return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  };
  var formatArgs = function(args) {
    var useColors2 = this.useColors;
    args[0] = (useColors2 ? "%c" : "") + this.namespace + (useColors2 ? " %c" : " ") + args[0] + (useColors2 ? "%c " : " ") + "+" + exports.humanize(this.diff);
    if (!useColors2)
      return;
    var c = "color: " + this.color;
    args.splice(1, 0, c, "color: inherit");
    var index = 0;
    var lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, function(match) {
      if (match === "%%")
        return;
      index++;
      if (match === "%c") {
        lastC = index;
      }
    });
    args.splice(lastC, 0, c);
  };
  var log = function() {
    return typeof console === "object" && console.log && Function.prototype.apply.call(console.log, console, arguments);
  };
  var save = function(namespaces) {
    try {
      if (namespaces == null) {
        exports.storage.removeItem("debug");
      } else {
        exports.storage.debug = namespaces;
      }
    } catch (e) {
    }
  };
  var load = function() {
    var r;
    try {
      r = exports.storage.debug;
    } catch (e) {
    }
    if (!r && typeof process !== "undefined" && "env" in process) {
      r = process.env.DEBUG;
    }
    return r;
  };
  var localstorage = function() {
    try {
      return window.localStorage;
    } catch (e) {
    }
  };
  exports = module.exports = require_debug4();
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = typeof chrome != "undefined" && typeof chrome.storage != "undefined" ? chrome.storage.local : localstorage();
  exports.colors = [
    "lightseagreen",
    "forestgreen",
    "goldenrod",
    "dodgerblue",
    "darkorchid",
    "crimson"
  ];
  exports.formatters.j = function(v) {
    try {
      return JSON.stringify(v);
    } catch (err) {
      return "[UnexpectedJSONParseError]: " + err.message;
    }
  };
  exports.enable(load());
});

// node_modules/send/node_modules/debug/src/node.js
var require_node4 = __commonJS((exports, module) => {
  var useColors = function() {
    return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(fd);
  };
  var formatArgs = function(args) {
    var name = this.namespace;
    var useColors2 = this.useColors;
    if (useColors2) {
      var c = this.color;
      var prefix = "  \x1B[3" + c + ";1m" + name + " " + "\x1B[0m";
      args[0] = prefix + args[0].split("\n").join("\n" + prefix);
      args.push("\x1B[3" + c + "m+" + exports.humanize(this.diff) + "\x1B[0m");
    } else {
      args[0] = new Date().toUTCString() + " " + name + " " + args[0];
    }
  };
  var log = function() {
    return stream.write(util.format.apply(util, arguments) + "\n");
  };
  var save = function(namespaces) {
    if (namespaces == null) {
      delete process.env.DEBUG;
    } else {
      process.env.DEBUG = namespaces;
    }
  };
  var load = function() {
    return process.env.DEBUG;
  };
  var createWritableStdioStream = function(fd2) {
    var stream2;
    var tty_wrap = process.binding("tty_wrap");
    switch (tty_wrap.guessHandleType(fd2)) {
      case "TTY":
        stream2 = new tty.WriteStream(fd2);
        stream2._type = "tty";
        if (stream2._handle && stream2._handle.unref) {
          stream2._handle.unref();
        }
        break;
      case "FILE":
        var fs = import.meta.require("fs");
        stream2 = new fs.SyncWriteStream(fd2, { autoClose: false });
        stream2._type = "fs";
        break;
      case "PIPE":
      case "TCP":
        var net = import.meta.require("net");
        stream2 = new net.Socket({
          fd: fd2,
          readable: false,
          writable: true
        });
        stream2.readable = false;
        stream2.read = null;
        stream2._type = "pipe";
        if (stream2._handle && stream2._handle.unref) {
          stream2._handle.unref();
        }
        break;
      default:
        throw new Error("Implement me. Unknown stream file type!");
    }
    stream2.fd = fd2;
    stream2._isStdio = true;
    return stream2;
  };
  var init = function(debug2) {
    debug2.inspectOpts = {};
    var keys = Object.keys(exports.inspectOpts);
    for (var i = 0;i < keys.length; i++) {
      debug2.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
  };
  var tty = import.meta.require("tty");
  var util = import.meta.require("util");
  exports = module.exports = require_debug4();
  exports.init = init;
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.colors = [6, 2, 3, 4, 5, 1];
  exports.inspectOpts = Object.keys(process.env).filter(function(key) {
    return /^debug_/i.test(key);
  }).reduce(function(obj, key) {
    var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function(_, k) {
      return k.toUpperCase();
    });
    var val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val))
      val = true;
    else if (/^(no|off|false|disabled)$/i.test(val))
      val = false;
    else if (val === "null")
      val = null;
    else
      val = Number(val);
    obj[prop] = val;
    return obj;
  }, {});
  var fd = parseInt(process.env.DEBUG_FD, 10) || 2;
  if (fd !== 1 && fd !== 2) {
    util.deprecate(function() {
    }, "except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)")();
  }
  var stream = fd === 1 ? process.stdout : fd === 2 ? process.stderr : createWritableStdioStream(fd);
  exports.formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts).split("\n").map(function(str) {
      return str.trim();
    }).join(" ");
  };
  exports.formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts);
  };
  exports.enable(load());
});

// node_modules/send/node_modules/debug/src/index.js
var require_src5 = __commonJS((exports, module) => {
  if (typeof process !== "undefined" && process.type === "renderer") {
    module.exports = require_browser4();
  } else {
    module.exports = require_node4();
  }
});

// node_modules/etag/index.js
var require_etag = __commonJS((exports, module) => {
  var entitytag = function(entity) {
    if (entity.length === 0) {
      return '"0-2jmj7l5rSw0yVb/vlWAYkK/YBwk"';
    }
    var hash = crypto.createHash("sha1").update(entity, "utf8").digest("base64").substring(0, 27);
    var len = typeof entity === "string" ? Buffer.byteLength(entity, "utf8") : entity.length;
    return '"' + len.toString(16) + "-" + hash + '"';
  };
  var etag = function(entity, options) {
    if (entity == null) {
      throw new TypeError("argument entity is required");
    }
    var isStats = isstats(entity);
    var weak = options && typeof options.weak === "boolean" ? options.weak : isStats;
    if (!isStats && typeof entity !== "string" && !Buffer.isBuffer(entity)) {
      throw new TypeError("argument entity must be string, Buffer, or fs.Stats");
    }
    var tag = isStats ? stattag(entity) : entitytag(entity);
    return weak ? "W/" + tag : tag;
  };
  var isstats = function(obj) {
    if (typeof Stats === "function" && obj instanceof Stats) {
      return true;
    }
    return obj && typeof obj === "object" && "ctime" in obj && toString.call(obj.ctime) === "[object Date]" && "mtime" in obj && toString.call(obj.mtime) === "[object Date]" && "ino" in obj && typeof obj.ino === "number" && "size" in obj && typeof obj.size === "number";
  };
  var stattag = function(stat) {
    var mtime = stat.mtime.getTime().toString(16);
    var size = stat.size.toString(16);
    return '"' + size + "-" + mtime + '"';
  };
  /*!
   * etag
   * Copyright(c) 2014-2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = etag;
  var crypto = import.meta.require("crypto");
  var Stats = import.meta.require("fs").Stats;
  var toString = Object.prototype.toString;
});

// node_modules/fresh/index.js
var require_fresh = __commonJS((exports, module) => {
  var fresh = function(reqHeaders, resHeaders) {
    var modifiedSince = reqHeaders["if-modified-since"];
    var noneMatch = reqHeaders["if-none-match"];
    if (!modifiedSince && !noneMatch) {
      return false;
    }
    var cacheControl = reqHeaders["cache-control"];
    if (cacheControl && CACHE_CONTROL_NO_CACHE_REGEXP.test(cacheControl)) {
      return false;
    }
    if (noneMatch && noneMatch !== "*") {
      var etag = resHeaders["etag"];
      if (!etag) {
        return false;
      }
      var etagStale = true;
      var matches = parseTokenList(noneMatch);
      for (var i = 0;i < matches.length; i++) {
        var match = matches[i];
        if (match === etag || match === "W/" + etag || "W/" + match === etag) {
          etagStale = false;
          break;
        }
      }
      if (etagStale) {
        return false;
      }
    }
    if (modifiedSince) {
      var lastModified = resHeaders["last-modified"];
      var modifiedStale = !lastModified || !(parseHttpDate(lastModified) <= parseHttpDate(modifiedSince));
      if (modifiedStale) {
        return false;
      }
    }
    return true;
  };
  var parseHttpDate = function(date) {
    var timestamp = date && Date.parse(date);
    return typeof timestamp === "number" ? timestamp : NaN;
  };
  var parseTokenList = function(str) {
    var end = 0;
    var list = [];
    var start = 0;
    for (var i = 0, len = str.length;i < len; i++) {
      switch (str.charCodeAt(i)) {
        case 32:
          if (start === end) {
            start = end = i + 1;
          }
          break;
        case 44:
          list.push(str.substring(start, end));
          start = end = i + 1;
          break;
        default:
          end = i + 1;
          break;
      }
    }
    list.push(str.substring(start, end));
    return list;
  };
  /*!
   * fresh
   * Copyright(c) 2012 TJ Holowaychuk
   * Copyright(c) 2016-2017 Douglas Christopher Wilson
   * MIT Licensed
   */
  var CACHE_CONTROL_NO_CACHE_REGEXP = /(?:^|,)\s*?no-cache\s*?(?:,|$)/;
  module.exports = fresh;
});

// node_modules/mime/types.json
var require_types = __commonJS((exports, module) => {
  module.exports = { "application/andrew-inset": ["ez"], "application/applixware": ["aw"], "application/atom+xml": ["atom"], "application/atomcat+xml": ["atomcat"], "application/atomsvc+xml": ["atomsvc"], "application/bdoc": ["bdoc"], "application/ccxml+xml": ["ccxml"], "application/cdmi-capability": ["cdmia"], "application/cdmi-container": ["cdmic"], "application/cdmi-domain": ["cdmid"], "application/cdmi-object": ["cdmio"], "application/cdmi-queue": ["cdmiq"], "application/cu-seeme": ["cu"], "application/dash+xml": ["mpd"], "application/davmount+xml": ["davmount"], "application/docbook+xml": ["dbk"], "application/dssc+der": ["dssc"], "application/dssc+xml": ["xdssc"], "application/ecmascript": ["ecma"], "application/emma+xml": ["emma"], "application/epub+zip": ["epub"], "application/exi": ["exi"], "application/font-tdpfr": ["pfr"], "application/font-woff": [], "application/font-woff2": [], "application/geo+json": ["geojson"], "application/gml+xml": ["gml"], "application/gpx+xml": ["gpx"], "application/gxf": ["gxf"], "application/gzip": ["gz"], "application/hyperstudio": ["stk"], "application/inkml+xml": ["ink", "inkml"], "application/ipfix": ["ipfix"], "application/java-archive": ["jar", "war", "ear"], "application/java-serialized-object": ["ser"], "application/java-vm": ["class"], "application/javascript": ["js", "mjs"], "application/json": ["json", "map"], "application/json5": ["json5"], "application/jsonml+json": ["jsonml"], "application/ld+json": ["jsonld"], "application/lost+xml": ["lostxml"], "application/mac-binhex40": ["hqx"], "application/mac-compactpro": ["cpt"], "application/mads+xml": ["mads"], "application/manifest+json": ["webmanifest"], "application/marc": ["mrc"], "application/marcxml+xml": ["mrcx"], "application/mathematica": ["ma", "nb", "mb"], "application/mathml+xml": ["mathml"], "application/mbox": ["mbox"], "application/mediaservercontrol+xml": ["mscml"], "application/metalink+xml": ["metalink"], "application/metalink4+xml": ["meta4"], "application/mets+xml": ["mets"], "application/mods+xml": ["mods"], "application/mp21": ["m21", "mp21"], "application/mp4": ["mp4s", "m4p"], "application/msword": ["doc", "dot"], "application/mxf": ["mxf"], "application/octet-stream": ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"], "application/oda": ["oda"], "application/oebps-package+xml": ["opf"], "application/ogg": ["ogx"], "application/omdoc+xml": ["omdoc"], "application/onenote": ["onetoc", "onetoc2", "onetmp", "onepkg"], "application/oxps": ["oxps"], "application/patch-ops-error+xml": ["xer"], "application/pdf": ["pdf"], "application/pgp-encrypted": ["pgp"], "application/pgp-signature": ["asc", "sig"], "application/pics-rules": ["prf"], "application/pkcs10": ["p10"], "application/pkcs7-mime": ["p7m", "p7c"], "application/pkcs7-signature": ["p7s"], "application/pkcs8": ["p8"], "application/pkix-attr-cert": ["ac"], "application/pkix-cert": ["cer"], "application/pkix-crl": ["crl"], "application/pkix-pkipath": ["pkipath"], "application/pkixcmp": ["pki"], "application/pls+xml": ["pls"], "application/postscript": ["ai", "eps", "ps"], "application/prs.cww": ["cww"], "application/pskc+xml": ["pskcxml"], "application/raml+yaml": ["raml"], "application/rdf+xml": ["rdf"], "application/reginfo+xml": ["rif"], "application/relax-ng-compact-syntax": ["rnc"], "application/resource-lists+xml": ["rl"], "application/resource-lists-diff+xml": ["rld"], "application/rls-services+xml": ["rs"], "application/rpki-ghostbusters": ["gbr"], "application/rpki-manifest": ["mft"], "application/rpki-roa": ["roa"], "application/rsd+xml": ["rsd"], "application/rss+xml": ["rss"], "application/rtf": ["rtf"], "application/sbml+xml": ["sbml"], "application/scvp-cv-request": ["scq"], "application/scvp-cv-response": ["scs"], "application/scvp-vp-request": ["spq"], "application/scvp-vp-response": ["spp"], "application/sdp": ["sdp"], "application/set-payment-initiation": ["setpay"], "application/set-registration-initiation": ["setreg"], "application/shf+xml": ["shf"], "application/smil+xml": ["smi", "smil"], "application/sparql-query": ["rq"], "application/sparql-results+xml": ["srx"], "application/srgs": ["gram"], "application/srgs+xml": ["grxml"], "application/sru+xml": ["sru"], "application/ssdl+xml": ["ssdl"], "application/ssml+xml": ["ssml"], "application/tei+xml": ["tei", "teicorpus"], "application/thraud+xml": ["tfi"], "application/timestamped-data": ["tsd"], "application/vnd.3gpp.pic-bw-large": ["plb"], "application/vnd.3gpp.pic-bw-small": ["psb"], "application/vnd.3gpp.pic-bw-var": ["pvb"], "application/vnd.3gpp2.tcap": ["tcap"], "application/vnd.3m.post-it-notes": ["pwn"], "application/vnd.accpac.simply.aso": ["aso"], "application/vnd.accpac.simply.imp": ["imp"], "application/vnd.acucobol": ["acu"], "application/vnd.acucorp": ["atc", "acutc"], "application/vnd.adobe.air-application-installer-package+zip": ["air"], "application/vnd.adobe.formscentral.fcdt": ["fcdt"], "application/vnd.adobe.fxp": ["fxp", "fxpl"], "application/vnd.adobe.xdp+xml": ["xdp"], "application/vnd.adobe.xfdf": ["xfdf"], "application/vnd.ahead.space": ["ahead"], "application/vnd.airzip.filesecure.azf": ["azf"], "application/vnd.airzip.filesecure.azs": ["azs"], "application/vnd.amazon.ebook": ["azw"], "application/vnd.americandynamics.acc": ["acc"], "application/vnd.amiga.ami": ["ami"], "application/vnd.android.package-archive": ["apk"], "application/vnd.anser-web-certificate-issue-initiation": ["cii"], "application/vnd.anser-web-funds-transfer-initiation": ["fti"], "application/vnd.antix.game-component": ["atx"], "application/vnd.apple.installer+xml": ["mpkg"], "application/vnd.apple.mpegurl": ["m3u8"], "application/vnd.apple.pkpass": ["pkpass"], "application/vnd.aristanetworks.swi": ["swi"], "application/vnd.astraea-software.iota": ["iota"], "application/vnd.audiograph": ["aep"], "application/vnd.blueice.multipass": ["mpm"], "application/vnd.bmi": ["bmi"], "application/vnd.businessobjects": ["rep"], "application/vnd.chemdraw+xml": ["cdxml"], "application/vnd.chipnuts.karaoke-mmd": ["mmd"], "application/vnd.cinderella": ["cdy"], "application/vnd.claymore": ["cla"], "application/vnd.cloanto.rp9": ["rp9"], "application/vnd.clonk.c4group": ["c4g", "c4d", "c4f", "c4p", "c4u"], "application/vnd.cluetrust.cartomobile-config": ["c11amc"], "application/vnd.cluetrust.cartomobile-config-pkg": ["c11amz"], "application/vnd.commonspace": ["csp"], "application/vnd.contact.cmsg": ["cdbcmsg"], "application/vnd.cosmocaller": ["cmc"], "application/vnd.crick.clicker": ["clkx"], "application/vnd.crick.clicker.keyboard": ["clkk"], "application/vnd.crick.clicker.palette": ["clkp"], "application/vnd.crick.clicker.template": ["clkt"], "application/vnd.crick.clicker.wordbank": ["clkw"], "application/vnd.criticaltools.wbs+xml": ["wbs"], "application/vnd.ctc-posml": ["pml"], "application/vnd.cups-ppd": ["ppd"], "application/vnd.curl.car": ["car"], "application/vnd.curl.pcurl": ["pcurl"], "application/vnd.dart": ["dart"], "application/vnd.data-vision.rdz": ["rdz"], "application/vnd.dece.data": ["uvf", "uvvf", "uvd", "uvvd"], "application/vnd.dece.ttml+xml": ["uvt", "uvvt"], "application/vnd.dece.unspecified": ["uvx", "uvvx"], "application/vnd.dece.zip": ["uvz", "uvvz"], "application/vnd.denovo.fcselayout-link": ["fe_launch"], "application/vnd.dna": ["dna"], "application/vnd.dolby.mlp": ["mlp"], "application/vnd.dpgraph": ["dpg"], "application/vnd.dreamfactory": ["dfac"], "application/vnd.ds-keypoint": ["kpxx"], "application/vnd.dvb.ait": ["ait"], "application/vnd.dvb.service": ["svc"], "application/vnd.dynageo": ["geo"], "application/vnd.ecowin.chart": ["mag"], "application/vnd.enliven": ["nml"], "application/vnd.epson.esf": ["esf"], "application/vnd.epson.msf": ["msf"], "application/vnd.epson.quickanime": ["qam"], "application/vnd.epson.salt": ["slt"], "application/vnd.epson.ssf": ["ssf"], "application/vnd.eszigno3+xml": ["es3", "et3"], "application/vnd.ezpix-album": ["ez2"], "application/vnd.ezpix-package": ["ez3"], "application/vnd.fdf": ["fdf"], "application/vnd.fdsn.mseed": ["mseed"], "application/vnd.fdsn.seed": ["seed", "dataless"], "application/vnd.flographit": ["gph"], "application/vnd.fluxtime.clip": ["ftc"], "application/vnd.framemaker": ["fm", "frame", "maker", "book"], "application/vnd.frogans.fnc": ["fnc"], "application/vnd.frogans.ltf": ["ltf"], "application/vnd.fsc.weblaunch": ["fsc"], "application/vnd.fujitsu.oasys": ["oas"], "application/vnd.fujitsu.oasys2": ["oa2"], "application/vnd.fujitsu.oasys3": ["oa3"], "application/vnd.fujitsu.oasysgp": ["fg5"], "application/vnd.fujitsu.oasysprs": ["bh2"], "application/vnd.fujixerox.ddd": ["ddd"], "application/vnd.fujixerox.docuworks": ["xdw"], "application/vnd.fujixerox.docuworks.binder": ["xbd"], "application/vnd.fuzzysheet": ["fzs"], "application/vnd.genomatix.tuxedo": ["txd"], "application/vnd.geogebra.file": ["ggb"], "application/vnd.geogebra.tool": ["ggt"], "application/vnd.geometry-explorer": ["gex", "gre"], "application/vnd.geonext": ["gxt"], "application/vnd.geoplan": ["g2w"], "application/vnd.geospace": ["g3w"], "application/vnd.gmx": ["gmx"], "application/vnd.google-apps.document": ["gdoc"], "application/vnd.google-apps.presentation": ["gslides"], "application/vnd.google-apps.spreadsheet": ["gsheet"], "application/vnd.google-earth.kml+xml": ["kml"], "application/vnd.google-earth.kmz": ["kmz"], "application/vnd.grafeq": ["gqf", "gqs"], "application/vnd.groove-account": ["gac"], "application/vnd.groove-help": ["ghf"], "application/vnd.groove-identity-message": ["gim"], "application/vnd.groove-injector": ["grv"], "application/vnd.groove-tool-message": ["gtm"], "application/vnd.groove-tool-template": ["tpl"], "application/vnd.groove-vcard": ["vcg"], "application/vnd.hal+xml": ["hal"], "application/vnd.handheld-entertainment+xml": ["zmm"], "application/vnd.hbci": ["hbci"], "application/vnd.hhe.lesson-player": ["les"], "application/vnd.hp-hpgl": ["hpgl"], "application/vnd.hp-hpid": ["hpid"], "application/vnd.hp-hps": ["hps"], "application/vnd.hp-jlyt": ["jlt"], "application/vnd.hp-pcl": ["pcl"], "application/vnd.hp-pclxl": ["pclxl"], "application/vnd.hydrostatix.sof-data": ["sfd-hdstx"], "application/vnd.ibm.minipay": ["mpy"], "application/vnd.ibm.modcap": ["afp", "listafp", "list3820"], "application/vnd.ibm.rights-management": ["irm"], "application/vnd.ibm.secure-container": ["sc"], "application/vnd.iccprofile": ["icc", "icm"], "application/vnd.igloader": ["igl"], "application/vnd.immervision-ivp": ["ivp"], "application/vnd.immervision-ivu": ["ivu"], "application/vnd.insors.igm": ["igm"], "application/vnd.intercon.formnet": ["xpw", "xpx"], "application/vnd.intergeo": ["i2g"], "application/vnd.intu.qbo": ["qbo"], "application/vnd.intu.qfx": ["qfx"], "application/vnd.ipunplugged.rcprofile": ["rcprofile"], "application/vnd.irepository.package+xml": ["irp"], "application/vnd.is-xpr": ["xpr"], "application/vnd.isac.fcs": ["fcs"], "application/vnd.jam": ["jam"], "application/vnd.jcp.javame.midlet-rms": ["rms"], "application/vnd.jisp": ["jisp"], "application/vnd.joost.joda-archive": ["joda"], "application/vnd.kahootz": ["ktz", "ktr"], "application/vnd.kde.karbon": ["karbon"], "application/vnd.kde.kchart": ["chrt"], "application/vnd.kde.kformula": ["kfo"], "application/vnd.kde.kivio": ["flw"], "application/vnd.kde.kontour": ["kon"], "application/vnd.kde.kpresenter": ["kpr", "kpt"], "application/vnd.kde.kspread": ["ksp"], "application/vnd.kde.kword": ["kwd", "kwt"], "application/vnd.kenameaapp": ["htke"], "application/vnd.kidspiration": ["kia"], "application/vnd.kinar": ["kne", "knp"], "application/vnd.koan": ["skp", "skd", "skt", "skm"], "application/vnd.kodak-descriptor": ["sse"], "application/vnd.las.las+xml": ["lasxml"], "application/vnd.llamagraphics.life-balance.desktop": ["lbd"], "application/vnd.llamagraphics.life-balance.exchange+xml": ["lbe"], "application/vnd.lotus-1-2-3": ["123"], "application/vnd.lotus-approach": ["apr"], "application/vnd.lotus-freelance": ["pre"], "application/vnd.lotus-notes": ["nsf"], "application/vnd.lotus-organizer": ["org"], "application/vnd.lotus-screencam": ["scm"], "application/vnd.lotus-wordpro": ["lwp"], "application/vnd.macports.portpkg": ["portpkg"], "application/vnd.mcd": ["mcd"], "application/vnd.medcalcdata": ["mc1"], "application/vnd.mediastation.cdkey": ["cdkey"], "application/vnd.mfer": ["mwf"], "application/vnd.mfmp": ["mfm"], "application/vnd.micrografx.flo": ["flo"], "application/vnd.micrografx.igx": ["igx"], "application/vnd.mif": ["mif"], "application/vnd.mobius.daf": ["daf"], "application/vnd.mobius.dis": ["dis"], "application/vnd.mobius.mbk": ["mbk"], "application/vnd.mobius.mqy": ["mqy"], "application/vnd.mobius.msl": ["msl"], "application/vnd.mobius.plc": ["plc"], "application/vnd.mobius.txf": ["txf"], "application/vnd.mophun.application": ["mpn"], "application/vnd.mophun.certificate": ["mpc"], "application/vnd.mozilla.xul+xml": ["xul"], "application/vnd.ms-artgalry": ["cil"], "application/vnd.ms-cab-compressed": ["cab"], "application/vnd.ms-excel": ["xls", "xlm", "xla", "xlc", "xlt", "xlw"], "application/vnd.ms-excel.addin.macroenabled.12": ["xlam"], "application/vnd.ms-excel.sheet.binary.macroenabled.12": ["xlsb"], "application/vnd.ms-excel.sheet.macroenabled.12": ["xlsm"], "application/vnd.ms-excel.template.macroenabled.12": ["xltm"], "application/vnd.ms-fontobject": ["eot"], "application/vnd.ms-htmlhelp": ["chm"], "application/vnd.ms-ims": ["ims"], "application/vnd.ms-lrm": ["lrm"], "application/vnd.ms-officetheme": ["thmx"], "application/vnd.ms-outlook": ["msg"], "application/vnd.ms-pki.seccat": ["cat"], "application/vnd.ms-pki.stl": ["stl"], "application/vnd.ms-powerpoint": ["ppt", "pps", "pot"], "application/vnd.ms-powerpoint.addin.macroenabled.12": ["ppam"], "application/vnd.ms-powerpoint.presentation.macroenabled.12": ["pptm"], "application/vnd.ms-powerpoint.slide.macroenabled.12": ["sldm"], "application/vnd.ms-powerpoint.slideshow.macroenabled.12": ["ppsm"], "application/vnd.ms-powerpoint.template.macroenabled.12": ["potm"], "application/vnd.ms-project": ["mpp", "mpt"], "application/vnd.ms-word.document.macroenabled.12": ["docm"], "application/vnd.ms-word.template.macroenabled.12": ["dotm"], "application/vnd.ms-works": ["wps", "wks", "wcm", "wdb"], "application/vnd.ms-wpl": ["wpl"], "application/vnd.ms-xpsdocument": ["xps"], "application/vnd.mseq": ["mseq"], "application/vnd.musician": ["mus"], "application/vnd.muvee.style": ["msty"], "application/vnd.mynfc": ["taglet"], "application/vnd.neurolanguage.nlu": ["nlu"], "application/vnd.nitf": ["ntf", "nitf"], "application/vnd.noblenet-directory": ["nnd"], "application/vnd.noblenet-sealer": ["nns"], "application/vnd.noblenet-web": ["nnw"], "application/vnd.nokia.n-gage.data": ["ngdat"], "application/vnd.nokia.n-gage.symbian.install": ["n-gage"], "application/vnd.nokia.radio-preset": ["rpst"], "application/vnd.nokia.radio-presets": ["rpss"], "application/vnd.novadigm.edm": ["edm"], "application/vnd.novadigm.edx": ["edx"], "application/vnd.novadigm.ext": ["ext"], "application/vnd.oasis.opendocument.chart": ["odc"], "application/vnd.oasis.opendocument.chart-template": ["otc"], "application/vnd.oasis.opendocument.database": ["odb"], "application/vnd.oasis.opendocument.formula": ["odf"], "application/vnd.oasis.opendocument.formula-template": ["odft"], "application/vnd.oasis.opendocument.graphics": ["odg"], "application/vnd.oasis.opendocument.graphics-template": ["otg"], "application/vnd.oasis.opendocument.image": ["odi"], "application/vnd.oasis.opendocument.image-template": ["oti"], "application/vnd.oasis.opendocument.presentation": ["odp"], "application/vnd.oasis.opendocument.presentation-template": ["otp"], "application/vnd.oasis.opendocument.spreadsheet": ["ods"], "application/vnd.oasis.opendocument.spreadsheet-template": ["ots"], "application/vnd.oasis.opendocument.text": ["odt"], "application/vnd.oasis.opendocument.text-master": ["odm"], "application/vnd.oasis.opendocument.text-template": ["ott"], "application/vnd.oasis.opendocument.text-web": ["oth"], "application/vnd.olpc-sugar": ["xo"], "application/vnd.oma.dd2+xml": ["dd2"], "application/vnd.openofficeorg.extension": ["oxt"], "application/vnd.openxmlformats-officedocument.presentationml.presentation": ["pptx"], "application/vnd.openxmlformats-officedocument.presentationml.slide": ["sldx"], "application/vnd.openxmlformats-officedocument.presentationml.slideshow": ["ppsx"], "application/vnd.openxmlformats-officedocument.presentationml.template": ["potx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": ["xlsx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.template": ["xltx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.document": ["docx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.template": ["dotx"], "application/vnd.osgeo.mapguide.package": ["mgp"], "application/vnd.osgi.dp": ["dp"], "application/vnd.osgi.subsystem": ["esa"], "application/vnd.palm": ["pdb", "pqa", "oprc"], "application/vnd.pawaafile": ["paw"], "application/vnd.pg.format": ["str"], "application/vnd.pg.osasli": ["ei6"], "application/vnd.picsel": ["efif"], "application/vnd.pmi.widget": ["wg"], "application/vnd.pocketlearn": ["plf"], "application/vnd.powerbuilder6": ["pbd"], "application/vnd.previewsystems.box": ["box"], "application/vnd.proteus.magazine": ["mgz"], "application/vnd.publishare-delta-tree": ["qps"], "application/vnd.pvi.ptid1": ["ptid"], "application/vnd.quark.quarkxpress": ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"], "application/vnd.realvnc.bed": ["bed"], "application/vnd.recordare.musicxml": ["mxl"], "application/vnd.recordare.musicxml+xml": ["musicxml"], "application/vnd.rig.cryptonote": ["cryptonote"], "application/vnd.rim.cod": ["cod"], "application/vnd.rn-realmedia": ["rm"], "application/vnd.rn-realmedia-vbr": ["rmvb"], "application/vnd.route66.link66+xml": ["link66"], "application/vnd.sailingtracker.track": ["st"], "application/vnd.seemail": ["see"], "application/vnd.sema": ["sema"], "application/vnd.semd": ["semd"], "application/vnd.semf": ["semf"], "application/vnd.shana.informed.formdata": ["ifm"], "application/vnd.shana.informed.formtemplate": ["itp"], "application/vnd.shana.informed.interchange": ["iif"], "application/vnd.shana.informed.package": ["ipk"], "application/vnd.simtech-mindmapper": ["twd", "twds"], "application/vnd.smaf": ["mmf"], "application/vnd.smart.teacher": ["teacher"], "application/vnd.solent.sdkm+xml": ["sdkm", "sdkd"], "application/vnd.spotfire.dxp": ["dxp"], "application/vnd.spotfire.sfs": ["sfs"], "application/vnd.stardivision.calc": ["sdc"], "application/vnd.stardivision.draw": ["sda"], "application/vnd.stardivision.impress": ["sdd"], "application/vnd.stardivision.math": ["smf"], "application/vnd.stardivision.writer": ["sdw", "vor"], "application/vnd.stardivision.writer-global": ["sgl"], "application/vnd.stepmania.package": ["smzip"], "application/vnd.stepmania.stepchart": ["sm"], "application/vnd.sun.wadl+xml": ["wadl"], "application/vnd.sun.xml.calc": ["sxc"], "application/vnd.sun.xml.calc.template": ["stc"], "application/vnd.sun.xml.draw": ["sxd"], "application/vnd.sun.xml.draw.template": ["std"], "application/vnd.sun.xml.impress": ["sxi"], "application/vnd.sun.xml.impress.template": ["sti"], "application/vnd.sun.xml.math": ["sxm"], "application/vnd.sun.xml.writer": ["sxw"], "application/vnd.sun.xml.writer.global": ["sxg"], "application/vnd.sun.xml.writer.template": ["stw"], "application/vnd.sus-calendar": ["sus", "susp"], "application/vnd.svd": ["svd"], "application/vnd.symbian.install": ["sis", "sisx"], "application/vnd.syncml+xml": ["xsm"], "application/vnd.syncml.dm+wbxml": ["bdm"], "application/vnd.syncml.dm+xml": ["xdm"], "application/vnd.tao.intent-module-archive": ["tao"], "application/vnd.tcpdump.pcap": ["pcap", "cap", "dmp"], "application/vnd.tmobile-livetv": ["tmo"], "application/vnd.trid.tpt": ["tpt"], "application/vnd.triscape.mxs": ["mxs"], "application/vnd.trueapp": ["tra"], "application/vnd.ufdl": ["ufd", "ufdl"], "application/vnd.uiq.theme": ["utz"], "application/vnd.umajin": ["umj"], "application/vnd.unity": ["unityweb"], "application/vnd.uoml+xml": ["uoml"], "application/vnd.vcx": ["vcx"], "application/vnd.visio": ["vsd", "vst", "vss", "vsw"], "application/vnd.visionary": ["vis"], "application/vnd.vsf": ["vsf"], "application/vnd.wap.wbxml": ["wbxml"], "application/vnd.wap.wmlc": ["wmlc"], "application/vnd.wap.wmlscriptc": ["wmlsc"], "application/vnd.webturbo": ["wtb"], "application/vnd.wolfram.player": ["nbp"], "application/vnd.wordperfect": ["wpd"], "application/vnd.wqd": ["wqd"], "application/vnd.wt.stf": ["stf"], "application/vnd.xara": ["xar"], "application/vnd.xfdl": ["xfdl"], "application/vnd.yamaha.hv-dic": ["hvd"], "application/vnd.yamaha.hv-script": ["hvs"], "application/vnd.yamaha.hv-voice": ["hvp"], "application/vnd.yamaha.openscoreformat": ["osf"], "application/vnd.yamaha.openscoreformat.osfpvg+xml": ["osfpvg"], "application/vnd.yamaha.smaf-audio": ["saf"], "application/vnd.yamaha.smaf-phrase": ["spf"], "application/vnd.yellowriver-custom-menu": ["cmp"], "application/vnd.zul": ["zir", "zirz"], "application/vnd.zzazz.deck+xml": ["zaz"], "application/voicexml+xml": ["vxml"], "application/wasm": ["wasm"], "application/widget": ["wgt"], "application/winhlp": ["hlp"], "application/wsdl+xml": ["wsdl"], "application/wspolicy+xml": ["wspolicy"], "application/x-7z-compressed": ["7z"], "application/x-abiword": ["abw"], "application/x-ace-compressed": ["ace"], "application/x-apple-diskimage": [], "application/x-arj": ["arj"], "application/x-authorware-bin": ["aab", "x32", "u32", "vox"], "application/x-authorware-map": ["aam"], "application/x-authorware-seg": ["aas"], "application/x-bcpio": ["bcpio"], "application/x-bdoc": [], "application/x-bittorrent": ["torrent"], "application/x-blorb": ["blb", "blorb"], "application/x-bzip": ["bz"], "application/x-bzip2": ["bz2", "boz"], "application/x-cbr": ["cbr", "cba", "cbt", "cbz", "cb7"], "application/x-cdlink": ["vcd"], "application/x-cfs-compressed": ["cfs"], "application/x-chat": ["chat"], "application/x-chess-pgn": ["pgn"], "application/x-chrome-extension": ["crx"], "application/x-cocoa": ["cco"], "application/x-conference": ["nsc"], "application/x-cpio": ["cpio"], "application/x-csh": ["csh"], "application/x-debian-package": ["udeb"], "application/x-dgc-compressed": ["dgc"], "application/x-director": ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"], "application/x-doom": ["wad"], "application/x-dtbncx+xml": ["ncx"], "application/x-dtbook+xml": ["dtb"], "application/x-dtbresource+xml": ["res"], "application/x-dvi": ["dvi"], "application/x-envoy": ["evy"], "application/x-eva": ["eva"], "application/x-font-bdf": ["bdf"], "application/x-font-ghostscript": ["gsf"], "application/x-font-linux-psf": ["psf"], "application/x-font-pcf": ["pcf"], "application/x-font-snf": ["snf"], "application/x-font-type1": ["pfa", "pfb", "pfm", "afm"], "application/x-freearc": ["arc"], "application/x-futuresplash": ["spl"], "application/x-gca-compressed": ["gca"], "application/x-glulx": ["ulx"], "application/x-gnumeric": ["gnumeric"], "application/x-gramps-xml": ["gramps"], "application/x-gtar": ["gtar"], "application/x-hdf": ["hdf"], "application/x-httpd-php": ["php"], "application/x-install-instructions": ["install"], "application/x-iso9660-image": [], "application/x-java-archive-diff": ["jardiff"], "application/x-java-jnlp-file": ["jnlp"], "application/x-latex": ["latex"], "application/x-lua-bytecode": ["luac"], "application/x-lzh-compressed": ["lzh", "lha"], "application/x-makeself": ["run"], "application/x-mie": ["mie"], "application/x-mobipocket-ebook": ["prc", "mobi"], "application/x-ms-application": ["application"], "application/x-ms-shortcut": ["lnk"], "application/x-ms-wmd": ["wmd"], "application/x-ms-wmz": ["wmz"], "application/x-ms-xbap": ["xbap"], "application/x-msaccess": ["mdb"], "application/x-msbinder": ["obd"], "application/x-mscardfile": ["crd"], "application/x-msclip": ["clp"], "application/x-msdos-program": [], "application/x-msdownload": ["com", "bat"], "application/x-msmediaview": ["mvb", "m13", "m14"], "application/x-msmetafile": ["wmf", "emf", "emz"], "application/x-msmoney": ["mny"], "application/x-mspublisher": ["pub"], "application/x-msschedule": ["scd"], "application/x-msterminal": ["trm"], "application/x-mswrite": ["wri"], "application/x-netcdf": ["nc", "cdf"], "application/x-ns-proxy-autoconfig": ["pac"], "application/x-nzb": ["nzb"], "application/x-perl": ["pl", "pm"], "application/x-pilot": [], "application/x-pkcs12": ["p12", "pfx"], "application/x-pkcs7-certificates": ["p7b", "spc"], "application/x-pkcs7-certreqresp": ["p7r"], "application/x-rar-compressed": ["rar"], "application/x-redhat-package-manager": ["rpm"], "application/x-research-info-systems": ["ris"], "application/x-sea": ["sea"], "application/x-sh": ["sh"], "application/x-shar": ["shar"], "application/x-shockwave-flash": ["swf"], "application/x-silverlight-app": ["xap"], "application/x-sql": ["sql"], "application/x-stuffit": ["sit"], "application/x-stuffitx": ["sitx"], "application/x-subrip": ["srt"], "application/x-sv4cpio": ["sv4cpio"], "application/x-sv4crc": ["sv4crc"], "application/x-t3vm-image": ["t3"], "application/x-tads": ["gam"], "application/x-tar": ["tar"], "application/x-tcl": ["tcl", "tk"], "application/x-tex": ["tex"], "application/x-tex-tfm": ["tfm"], "application/x-texinfo": ["texinfo", "texi"], "application/x-tgif": ["obj"], "application/x-ustar": ["ustar"], "application/x-virtualbox-hdd": ["hdd"], "application/x-virtualbox-ova": ["ova"], "application/x-virtualbox-ovf": ["ovf"], "application/x-virtualbox-vbox": ["vbox"], "application/x-virtualbox-vbox-extpack": ["vbox-extpack"], "application/x-virtualbox-vdi": ["vdi"], "application/x-virtualbox-vhd": ["vhd"], "application/x-virtualbox-vmdk": ["vmdk"], "application/x-wais-source": ["src"], "application/x-web-app-manifest+json": ["webapp"], "application/x-x509-ca-cert": ["der", "crt", "pem"], "application/x-xfig": ["fig"], "application/x-xliff+xml": ["xlf"], "application/x-xpinstall": ["xpi"], "application/x-xz": ["xz"], "application/x-zmachine": ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"], "application/xaml+xml": ["xaml"], "application/xcap-diff+xml": ["xdf"], "application/xenc+xml": ["xenc"], "application/xhtml+xml": ["xhtml", "xht"], "application/xml": ["xml", "xsl", "xsd", "rng"], "application/xml-dtd": ["dtd"], "application/xop+xml": ["xop"], "application/xproc+xml": ["xpl"], "application/xslt+xml": ["xslt"], "application/xspf+xml": ["xspf"], "application/xv+xml": ["mxml", "xhvml", "xvml", "xvm"], "application/yang": ["yang"], "application/yin+xml": ["yin"], "application/zip": ["zip"], "audio/3gpp": [], "audio/adpcm": ["adp"], "audio/basic": ["au", "snd"], "audio/midi": ["mid", "midi", "kar", "rmi"], "audio/mp3": [], "audio/mp4": ["m4a", "mp4a"], "audio/mpeg": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"], "audio/ogg": ["oga", "ogg", "spx"], "audio/s3m": ["s3m"], "audio/silk": ["sil"], "audio/vnd.dece.audio": ["uva", "uvva"], "audio/vnd.digital-winds": ["eol"], "audio/vnd.dra": ["dra"], "audio/vnd.dts": ["dts"], "audio/vnd.dts.hd": ["dtshd"], "audio/vnd.lucent.voice": ["lvp"], "audio/vnd.ms-playready.media.pya": ["pya"], "audio/vnd.nuera.ecelp4800": ["ecelp4800"], "audio/vnd.nuera.ecelp7470": ["ecelp7470"], "audio/vnd.nuera.ecelp9600": ["ecelp9600"], "audio/vnd.rip": ["rip"], "audio/wav": ["wav"], "audio/wave": [], "audio/webm": ["weba"], "audio/x-aac": ["aac"], "audio/x-aiff": ["aif", "aiff", "aifc"], "audio/x-caf": ["caf"], "audio/x-flac": ["flac"], "audio/x-m4a": [], "audio/x-matroska": ["mka"], "audio/x-mpegurl": ["m3u"], "audio/x-ms-wax": ["wax"], "audio/x-ms-wma": ["wma"], "audio/x-pn-realaudio": ["ram", "ra"], "audio/x-pn-realaudio-plugin": ["rmp"], "audio/x-realaudio": [], "audio/x-wav": [], "audio/xm": ["xm"], "chemical/x-cdx": ["cdx"], "chemical/x-cif": ["cif"], "chemical/x-cmdf": ["cmdf"], "chemical/x-cml": ["cml"], "chemical/x-csml": ["csml"], "chemical/x-xyz": ["xyz"], "font/collection": ["ttc"], "font/otf": ["otf"], "font/ttf": ["ttf"], "font/woff": ["woff"], "font/woff2": ["woff2"], "image/apng": ["apng"], "image/bmp": ["bmp"], "image/cgm": ["cgm"], "image/g3fax": ["g3"], "image/gif": ["gif"], "image/ief": ["ief"], "image/jp2": ["jp2", "jpg2"], "image/jpeg": ["jpeg", "jpg", "jpe"], "image/jpm": ["jpm"], "image/jpx": ["jpx", "jpf"], "image/ktx": ["ktx"], "image/png": ["png"], "image/prs.btif": ["btif"], "image/sgi": ["sgi"], "image/svg+xml": ["svg", "svgz"], "image/tiff": ["tiff", "tif"], "image/vnd.adobe.photoshop": ["psd"], "image/vnd.dece.graphic": ["uvi", "uvvi", "uvg", "uvvg"], "image/vnd.djvu": ["djvu", "djv"], "image/vnd.dvb.subtitle": [], "image/vnd.dwg": ["dwg"], "image/vnd.dxf": ["dxf"], "image/vnd.fastbidsheet": ["fbs"], "image/vnd.fpx": ["fpx"], "image/vnd.fst": ["fst"], "image/vnd.fujixerox.edmics-mmr": ["mmr"], "image/vnd.fujixerox.edmics-rlc": ["rlc"], "image/vnd.ms-modi": ["mdi"], "image/vnd.ms-photo": ["wdp"], "image/vnd.net-fpx": ["npx"], "image/vnd.wap.wbmp": ["wbmp"], "image/vnd.xiff": ["xif"], "image/webp": ["webp"], "image/x-3ds": ["3ds"], "image/x-cmu-raster": ["ras"], "image/x-cmx": ["cmx"], "image/x-freehand": ["fh", "fhc", "fh4", "fh5", "fh7"], "image/x-icon": ["ico"], "image/x-jng": ["jng"], "image/x-mrsid-image": ["sid"], "image/x-ms-bmp": [], "image/x-pcx": ["pcx"], "image/x-pict": ["pic", "pct"], "image/x-portable-anymap": ["pnm"], "image/x-portable-bitmap": ["pbm"], "image/x-portable-graymap": ["pgm"], "image/x-portable-pixmap": ["ppm"], "image/x-rgb": ["rgb"], "image/x-tga": ["tga"], "image/x-xbitmap": ["xbm"], "image/x-xpixmap": ["xpm"], "image/x-xwindowdump": ["xwd"], "message/rfc822": ["eml", "mime"], "model/gltf+json": ["gltf"], "model/gltf-binary": ["glb"], "model/iges": ["igs", "iges"], "model/mesh": ["msh", "mesh", "silo"], "model/vnd.collada+xml": ["dae"], "model/vnd.dwf": ["dwf"], "model/vnd.gdl": ["gdl"], "model/vnd.gtw": ["gtw"], "model/vnd.mts": ["mts"], "model/vnd.vtu": ["vtu"], "model/vrml": ["wrl", "vrml"], "model/x3d+binary": ["x3db", "x3dbz"], "model/x3d+vrml": ["x3dv", "x3dvz"], "model/x3d+xml": ["x3d", "x3dz"], "text/cache-manifest": ["appcache", "manifest"], "text/calendar": ["ics", "ifb"], "text/coffeescript": ["coffee", "litcoffee"], "text/css": ["css"], "text/csv": ["csv"], "text/hjson": ["hjson"], "text/html": ["html", "htm", "shtml"], "text/jade": ["jade"], "text/jsx": ["jsx"], "text/less": ["less"], "text/markdown": ["markdown", "md"], "text/mathml": ["mml"], "text/n3": ["n3"], "text/plain": ["txt", "text", "conf", "def", "list", "log", "in", "ini"], "text/prs.lines.tag": ["dsc"], "text/richtext": ["rtx"], "text/rtf": [], "text/sgml": ["sgml", "sgm"], "text/slim": ["slim", "slm"], "text/stylus": ["stylus", "styl"], "text/tab-separated-values": ["tsv"], "text/troff": ["t", "tr", "roff", "man", "me", "ms"], "text/turtle": ["ttl"], "text/uri-list": ["uri", "uris", "urls"], "text/vcard": ["vcard"], "text/vnd.curl": ["curl"], "text/vnd.curl.dcurl": ["dcurl"], "text/vnd.curl.mcurl": ["mcurl"], "text/vnd.curl.scurl": ["scurl"], "text/vnd.dvb.subtitle": ["sub"], "text/vnd.fly": ["fly"], "text/vnd.fmi.flexstor": ["flx"], "text/vnd.graphviz": ["gv"], "text/vnd.in3d.3dml": ["3dml"], "text/vnd.in3d.spot": ["spot"], "text/vnd.sun.j2me.app-descriptor": ["jad"], "text/vnd.wap.wml": ["wml"], "text/vnd.wap.wmlscript": ["wmls"], "text/vtt": ["vtt"], "text/x-asm": ["s", "asm"], "text/x-c": ["c", "cc", "cxx", "cpp", "h", "hh", "dic"], "text/x-component": ["htc"], "text/x-fortran": ["f", "for", "f77", "f90"], "text/x-handlebars-template": ["hbs"], "text/x-java-source": ["java"], "text/x-lua": ["lua"], "text/x-markdown": ["mkd"], "text/x-nfo": ["nfo"], "text/x-opml": ["opml"], "text/x-org": [], "text/x-pascal": ["p", "pas"], "text/x-processing": ["pde"], "text/x-sass": ["sass"], "text/x-scss": ["scss"], "text/x-setext": ["etx"], "text/x-sfv": ["sfv"], "text/x-suse-ymp": ["ymp"], "text/x-uuencode": ["uu"], "text/x-vcalendar": ["vcs"], "text/x-vcard": ["vcf"], "text/xml": [], "text/yaml": ["yaml", "yml"], "video/3gpp": ["3gp", "3gpp"], "video/3gpp2": ["3g2"], "video/h261": ["h261"], "video/h263": ["h263"], "video/h264": ["h264"], "video/jpeg": ["jpgv"], "video/jpm": ["jpgm"], "video/mj2": ["mj2", "mjp2"], "video/mp2t": ["ts"], "video/mp4": ["mp4", "mp4v", "mpg4"], "video/mpeg": ["mpeg", "mpg", "mpe", "m1v", "m2v"], "video/ogg": ["ogv"], "video/quicktime": ["qt", "mov"], "video/vnd.dece.hd": ["uvh", "uvvh"], "video/vnd.dece.mobile": ["uvm", "uvvm"], "video/vnd.dece.pd": ["uvp", "uvvp"], "video/vnd.dece.sd": ["uvs", "uvvs"], "video/vnd.dece.video": ["uvv", "uvvv"], "video/vnd.dvb.file": ["dvb"], "video/vnd.fvt": ["fvt"], "video/vnd.mpegurl": ["mxu", "m4u"], "video/vnd.ms-playready.media.pyv": ["pyv"], "video/vnd.uvvu.mp4": ["uvu", "uvvu"], "video/vnd.vivo": ["viv"], "video/webm": ["webm"], "video/x-f4v": ["f4v"], "video/x-fli": ["fli"], "video/x-flv": ["flv"], "video/x-m4v": ["m4v"], "video/x-matroska": ["mkv", "mk3d", "mks"], "video/x-mng": ["mng"], "video/x-ms-asf": ["asf", "asx"], "video/x-ms-vob": ["vob"], "video/x-ms-wm": ["wm"], "video/x-ms-wmv": ["wmv"], "video/x-ms-wmx": ["wmx"], "video/x-ms-wvx": ["wvx"], "video/x-msvideo": ["avi"], "video/x-sgi-movie": ["movie"], "video/x-smv": ["smv"], "x-conference/x-cooltalk": ["ice"] };
});

// node_modules/mime/mime.js
var require_mime = __commonJS((exports, module) => {
  var Mime = function() {
    this.types = Object.create(null);
    this.extensions = Object.create(null);
  };
  var path = import.meta.require("path");
  var fs = import.meta.require("fs");
  Mime.prototype.define = function(map) {
    for (var type in map) {
      var exts = map[type];
      for (var i = 0;i < exts.length; i++) {
        if (process.env.DEBUG_MIME && this.types[exts[i]]) {
          console.warn((this._loading || "define()").replace(/.*\//, ""), 'changes "' + exts[i] + '" extension type from ' + this.types[exts[i]] + " to " + type);
        }
        this.types[exts[i]] = type;
      }
      if (!this.extensions[type]) {
        this.extensions[type] = exts[0];
      }
    }
  };
  Mime.prototype.load = function(file) {
    this._loading = file;
    var map = {}, content = fs.readFileSync(file, "ascii"), lines = content.split(/[\r\n]+/);
    lines.forEach(function(line) {
      var fields = line.replace(/\s*#.*|^\s*|\s*$/g, "").split(/\s+/);
      map[fields.shift()] = fields;
    });
    this.define(map);
    this._loading = null;
  };
  Mime.prototype.lookup = function(path2, fallback) {
    var ext = path2.replace(/^.*[\.\/\\]/, "").toLowerCase();
    return this.types[ext] || fallback || this.default_type;
  };
  Mime.prototype.extension = function(mimeType) {
    var type = mimeType.match(/^\s*([^;\s]*)(?:;|\s|$)/)[1].toLowerCase();
    return this.extensions[type];
  };
  var mime2 = new Mime;
  mime2.define(require_types());
  mime2.default_type = mime2.lookup("bin");
  mime2.Mime = Mime;
  mime2.charsets = {
    lookup: function(mimeType, fallback) {
      return /^text\/|^application\/(javascript|json)/.test(mimeType) ? "UTF-8" : fallback;
    }
  };
  module.exports = mime2;
});

// node_modules/send/node_modules/ms/index.js
var require_ms5 = __commonJS((exports, module) => {
  var parse = function(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch (type) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return n * y;
      case "weeks":
      case "week":
      case "w":
        return n * w;
      case "days":
      case "day":
      case "d":
        return n * d;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return n * h;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return n * m;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return n * s;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return n;
      default:
        return;
    }
  };
  var fmtShort = function(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return Math.round(ms / d) + "d";
    }
    if (msAbs >= h) {
      return Math.round(ms / h) + "h";
    }
    if (msAbs >= m) {
      return Math.round(ms / m) + "m";
    }
    if (msAbs >= s) {
      return Math.round(ms / s) + "s";
    }
    return ms + "ms";
  };
  var fmtLong = function(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return plural(ms, msAbs, d, "day");
    }
    if (msAbs >= h) {
      return plural(ms, msAbs, h, "hour");
    }
    if (msAbs >= m) {
      return plural(ms, msAbs, m, "minute");
    }
    if (msAbs >= s) {
      return plural(ms, msAbs, s, "second");
    }
    return ms + " ms";
  };
  var plural = function(ms, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
  };
  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var w = d * 7;
  var y = d * 365.25;
  module.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
      return parse(val);
    } else if (type === "number" && isFinite(val)) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
  };
});

// node_modules/range-parser/index.js
var require_range_parser = __commonJS((exports, module) => {
  var rangeParser = function(size, str, options) {
    if (typeof str !== "string") {
      throw new TypeError("argument str must be a string");
    }
    var index = str.indexOf("=");
    if (index === -1) {
      return -2;
    }
    var arr = str.slice(index + 1).split(",");
    var ranges = [];
    ranges.type = str.slice(0, index);
    for (var i = 0;i < arr.length; i++) {
      var range = arr[i].split("-");
      var start = parseInt(range[0], 10);
      var end = parseInt(range[1], 10);
      if (isNaN(start)) {
        start = size - end;
        end = size - 1;
      } else if (isNaN(end)) {
        end = size - 1;
      }
      if (end > size - 1) {
        end = size - 1;
      }
      if (isNaN(start) || isNaN(end) || start > end || start < 0) {
        continue;
      }
      ranges.push({
        start,
        end
      });
    }
    if (ranges.length < 1) {
      return -1;
    }
    return options && options.combine ? combineRanges(ranges) : ranges;
  };
  var combineRanges = function(ranges) {
    var ordered = ranges.map(mapWithIndex).sort(sortByRangeStart);
    for (var j = 0, i = 1;i < ordered.length; i++) {
      var range = ordered[i];
      var current = ordered[j];
      if (range.start > current.end + 1) {
        ordered[++j] = range;
      } else if (range.end > current.end) {
        current.end = range.end;
        current.index = Math.min(current.index, range.index);
      }
    }
    ordered.length = j + 1;
    var combined = ordered.sort(sortByRangeIndex).map(mapWithoutIndex);
    combined.type = ranges.type;
    return combined;
  };
  var mapWithIndex = function(range, index) {
    return {
      start: range.start,
      end: range.end,
      index
    };
  };
  var mapWithoutIndex = function(range) {
    return {
      start: range.start,
      end: range.end
    };
  };
  var sortByRangeIndex = function(a, b) {
    return a.index - b.index;
  };
  var sortByRangeStart = function(a, b) {
    return a.start - b.start;
  };
  /*!
   * range-parser
   * Copyright(c) 2012-2014 TJ Holowaychuk
   * Copyright(c) 2015-2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = rangeParser;
});

// node_modules/send/index.js
var require_send = __commonJS((exports, module) => {
  var send = function(req, path2, options) {
    return new SendStream(req, path2, options);
  };
  var SendStream = function(req, path2, options) {
    Stream.call(this);
    var opts = options || {};
    this.options = opts;
    this.path = path2;
    this.req = req;
    this._acceptRanges = opts.acceptRanges !== undefined ? Boolean(opts.acceptRanges) : true;
    this._cacheControl = opts.cacheControl !== undefined ? Boolean(opts.cacheControl) : true;
    this._etag = opts.etag !== undefined ? Boolean(opts.etag) : true;
    this._dotfiles = opts.dotfiles !== undefined ? opts.dotfiles : "ignore";
    if (this._dotfiles !== "ignore" && this._dotfiles !== "allow" && this._dotfiles !== "deny") {
      throw new TypeError('dotfiles option must be "allow", "deny", or "ignore"');
    }
    this._hidden = Boolean(opts.hidden);
    if (opts.hidden !== undefined) {
      deprecate("hidden: use dotfiles: \'" + (this._hidden ? "allow" : "ignore") + "\' instead");
    }
    if (opts.dotfiles === undefined) {
      this._dotfiles = undefined;
    }
    this._extensions = opts.extensions !== undefined ? normalizeList(opts.extensions, "extensions option") : [];
    this._immutable = opts.immutable !== undefined ? Boolean(opts.immutable) : false;
    this._index = opts.index !== undefined ? normalizeList(opts.index, "index option") : ["index.html"];
    this._lastModified = opts.lastModified !== undefined ? Boolean(opts.lastModified) : true;
    this._maxage = opts.maxAge || opts.maxage;
    this._maxage = typeof this._maxage === "string" ? ms(this._maxage) : Number(this._maxage);
    this._maxage = !isNaN(this._maxage) ? Math.min(Math.max(0, this._maxage), MAX_MAXAGE) : 0;
    this._root = opts.root ? resolve(opts.root) : null;
    if (!this._root && opts.from) {
      this.from(opts.from);
    }
  };
  var clearHeaders = function(res) {
    var headers = getHeaderNames(res);
    for (var i = 0;i < headers.length; i++) {
      res.removeHeader(headers[i]);
    }
  };
  var collapseLeadingSlashes = function(str) {
    for (var i = 0;i < str.length; i++) {
      if (str[i] !== "/") {
        break;
      }
    }
    return i > 1 ? "/" + str.substr(i) : str;
  };
  var containsDotFile = function(parts) {
    for (var i = 0;i < parts.length; i++) {
      var part = parts[i];
      if (part.length > 1 && part[0] === ".") {
        return true;
      }
    }
    return false;
  };
  var contentRange = function(type, size, range) {
    return type + " " + (range ? range.start + "-" + range.end : "*") + "/" + size;
  };
  var createHtmlDocument = function(title, body) {
    return '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>' + title + "</title>\n</head>\n<body>\n<pre>" + body + "</pre>\n</body>\n</html>\n";
  };
  var createHttpError = function(status, err) {
    if (!err) {
      return createError(status);
    }
    return err instanceof Error ? createError(status, err, { expose: false }) : createError(status, err);
  };
  var decode = function(path2) {
    try {
      return decodeURIComponent(path2);
    } catch (err) {
      return -1;
    }
  };
  var getHeaderNames = function(res) {
    return typeof res.getHeaderNames !== "function" ? Object.keys(res._headers || {}) : res.getHeaderNames();
  };
  var hasListeners = function(emitter, type) {
    var count = typeof emitter.listenerCount !== "function" ? emitter.listeners(type).length : emitter.listenerCount(type);
    return count > 0;
  };
  var headersSent = function(res) {
    return typeof res.headersSent !== "boolean" ? Boolean(res._header) : res.headersSent;
  };
  var normalizeList = function(val, name) {
    var list = [].concat(val || []);
    for (var i = 0;i < list.length; i++) {
      if (typeof list[i] !== "string") {
        throw new TypeError(name + " must be array of strings or false");
      }
    }
    return list;
  };
  var parseHttpDate = function(date) {
    var timestamp = date && Date.parse(date);
    return typeof timestamp === "number" ? timestamp : NaN;
  };
  var parseTokenList = function(str) {
    var end = 0;
    var list = [];
    var start = 0;
    for (var i = 0, len = str.length;i < len; i++) {
      switch (str.charCodeAt(i)) {
        case 32:
          if (start === end) {
            start = end = i + 1;
          }
          break;
        case 44:
          if (start !== end) {
            list.push(str.substring(start, end));
          }
          start = end = i + 1;
          break;
        default:
          end = i + 1;
          break;
      }
    }
    if (start !== end) {
      list.push(str.substring(start, end));
    }
    return list;
  };
  var setHeaders = function(res, headers) {
    var keys = Object.keys(headers);
    for (var i = 0;i < keys.length; i++) {
      var key = keys[i];
      res.setHeader(key, headers[key]);
    }
  };
  /*!
   * send
   * Copyright(c) 2012 TJ Holowaychuk
   * Copyright(c) 2014-2022 Douglas Christopher Wilson
   * MIT Licensed
   */
  var createError = require_http_errors();
  var debug2 = require_src5()("send");
  var deprecate = require_depd()("send");
  var destroy = require_destroy();
  var encodeUrl = require_encodeurl();
  var escapeHtml = require_escape_html();
  var etag = require_etag();
  var fresh = require_fresh();
  var fs = import.meta.require("fs");
  var mime2 = require_mime();
  var ms = require_ms5();
  var onFinished = require_on_finished();
  var parseRange = require_range_parser();
  var path = import.meta.require("path");
  var statuses = require_statuses();
  var Stream = import.meta.require("stream");
  var util = import.meta.require("util");
  var extname = path.extname;
  var join = path.join;
  var normalize = path.normalize;
  var resolve = path.resolve;
  var sep = path.sep;
  var BYTES_RANGE_REGEXP = /^ *bytes=/;
  var MAX_MAXAGE = 60 * 60 * 24 * 365 * 1000;
  var UP_PATH_REGEXP = /(?:^|[\\/])\.\.(?:[\\/]|$)/;
  module.exports = send;
  module.exports.mime = mime2;
  util.inherits(SendStream, Stream);
  SendStream.prototype.etag = deprecate.function(function etag(val) {
    this._etag = Boolean(val);
    debug2("etag %s", this._etag);
    return this;
  }, "send.etag: pass etag as option");
  SendStream.prototype.hidden = deprecate.function(function hidden(val) {
    this._hidden = Boolean(val);
    this._dotfiles = undefined;
    debug2("hidden %s", this._hidden);
    return this;
  }, "send.hidden: use dotfiles option");
  SendStream.prototype.index = deprecate.function(function index(paths) {
    var index = !paths ? [] : normalizeList(paths, "paths argument");
    debug2("index %o", paths);
    this._index = index;
    return this;
  }, "send.index: pass index as option");
  SendStream.prototype.root = function root(path2) {
    this._root = resolve(String(path2));
    debug2("root %s", this._root);
    return this;
  };
  SendStream.prototype.from = deprecate.function(SendStream.prototype.root, "send.from: pass root as option");
  SendStream.prototype.root = deprecate.function(SendStream.prototype.root, "send.root: pass root as option");
  SendStream.prototype.maxage = deprecate.function(function maxage(maxAge) {
    this._maxage = typeof maxAge === "string" ? ms(maxAge) : Number(maxAge);
    this._maxage = !isNaN(this._maxage) ? Math.min(Math.max(0, this._maxage), MAX_MAXAGE) : 0;
    debug2("max-age %d", this._maxage);
    return this;
  }, "send.maxage: pass maxAge as option");
  SendStream.prototype.error = function error(status, err) {
    if (hasListeners(this, "error")) {
      return this.emit("error", createHttpError(status, err));
    }
    var res = this.res;
    var msg = statuses.message[status] || String(status);
    var doc = createHtmlDocument("Error", escapeHtml(msg));
    clearHeaders(res);
    if (err && err.headers) {
      setHeaders(res, err.headers);
    }
    res.statusCode = status;
    res.setHeader("Content-Type", "text/html; charset=UTF-8");
    res.setHeader("Content-Length", Buffer.byteLength(doc));
    res.setHeader("Content-Security-Policy", "default-src 'none'");
    res.setHeader("X-Content-Type-Options", "nosniff");
    res.end(doc);
  };
  SendStream.prototype.hasTrailingSlash = function hasTrailingSlash() {
    return this.path[this.path.length - 1] === "/";
  };
  SendStream.prototype.isConditionalGET = function isConditionalGET() {
    return this.req.headers["if-match"] || this.req.headers["if-unmodified-since"] || this.req.headers["if-none-match"] || this.req.headers["if-modified-since"];
  };
  SendStream.prototype.isPreconditionFailure = function isPreconditionFailure() {
    var req = this.req;
    var res = this.res;
    var match = req.headers["if-match"];
    if (match) {
      var etag2 = res.getHeader("ETag");
      return !etag2 || match !== "*" && parseTokenList(match).every(function(match2) {
        return match2 !== etag2 && match2 !== "W/" + etag2 && "W/" + match2 !== etag2;
      });
    }
    var unmodifiedSince = parseHttpDate(req.headers["if-unmodified-since"]);
    if (!isNaN(unmodifiedSince)) {
      var lastModified = parseHttpDate(res.getHeader("Last-Modified"));
      return isNaN(lastModified) || lastModified > unmodifiedSince;
    }
    return false;
  };
  SendStream.prototype.removeContentHeaderFields = function removeContentHeaderFields() {
    var res = this.res;
    res.removeHeader("Content-Encoding");
    res.removeHeader("Content-Language");
    res.removeHeader("Content-Length");
    res.removeHeader("Content-Range");
    res.removeHeader("Content-Type");
  };
  SendStream.prototype.notModified = function notModified() {
    var res = this.res;
    debug2("not modified");
    this.removeContentHeaderFields();
    res.statusCode = 304;
    res.end();
  };
  SendStream.prototype.headersAlreadySent = function headersAlreadySent() {
    var err = new Error("Can\'t set headers after they are sent.");
    debug2("headers already sent");
    this.error(500, err);
  };
  SendStream.prototype.isCachable = function isCachable() {
    var statusCode = this.res.statusCode;
    return statusCode >= 200 && statusCode < 300 || statusCode === 304;
  };
  SendStream.prototype.onStatError = function onStatError(error) {
    switch (error.code) {
      case "ENAMETOOLONG":
      case "ENOENT":
      case "ENOTDIR":
        this.error(404, error);
        break;
      default:
        this.error(500, error);
        break;
    }
  };
  SendStream.prototype.isFresh = function isFresh() {
    return fresh(this.req.headers, {
      etag: this.res.getHeader("ETag"),
      "last-modified": this.res.getHeader("Last-Modified")
    });
  };
  SendStream.prototype.isRangeFresh = function isRangeFresh() {
    var ifRange = this.req.headers["if-range"];
    if (!ifRange) {
      return true;
    }
    if (ifRange.indexOf('"') !== -1) {
      var etag2 = this.res.getHeader("ETag");
      return Boolean(etag2 && ifRange.indexOf(etag2) !== -1);
    }
    var lastModified = this.res.getHeader("Last-Modified");
    return parseHttpDate(lastModified) <= parseHttpDate(ifRange);
  };
  SendStream.prototype.redirect = function redirect(path2) {
    var res = this.res;
    if (hasListeners(this, "directory")) {
      this.emit("directory", res, path2);
      return;
    }
    if (this.hasTrailingSlash()) {
      this.error(403);
      return;
    }
    var loc = encodeUrl(collapseLeadingSlashes(this.path + "/"));
    var doc = createHtmlDocument("Redirecting", 'Redirecting to <a href="' + escapeHtml(loc) + '">' + escapeHtml(loc) + "</a>");
    res.statusCode = 301;
    res.setHeader("Content-Type", "text/html; charset=UTF-8");
    res.setHeader("Content-Length", Buffer.byteLength(doc));
    res.setHeader("Content-Security-Policy", "default-src 'none'");
    res.setHeader("X-Content-Type-Options", "nosniff");
    res.setHeader("Location", loc);
    res.end(doc);
  };
  SendStream.prototype.pipe = function pipe(res) {
    var root = this._root;
    this.res = res;
    var path2 = decode(this.path);
    if (path2 === -1) {
      this.error(400);
      return res;
    }
    if (~path2.indexOf("\0")) {
      this.error(400);
      return res;
    }
    var parts;
    if (root !== null) {
      if (path2) {
        path2 = normalize("." + sep + path2);
      }
      if (UP_PATH_REGEXP.test(path2)) {
        debug2('malicious path "%s"', path2);
        this.error(403);
        return res;
      }
      parts = path2.split(sep);
      path2 = normalize(join(root, path2));
    } else {
      if (UP_PATH_REGEXP.test(path2)) {
        debug2('malicious path "%s"', path2);
        this.error(403);
        return res;
      }
      parts = normalize(path2).split(sep);
      path2 = resolve(path2);
    }
    if (containsDotFile(parts)) {
      var access = this._dotfiles;
      if (access === undefined) {
        access = parts[parts.length - 1][0] === "." ? this._hidden ? "allow" : "ignore" : "allow";
      }
      debug2('%s dotfile "%s"', access, path2);
      switch (access) {
        case "allow":
          break;
        case "deny":
          this.error(403);
          return res;
        case "ignore":
        default:
          this.error(404);
          return res;
      }
    }
    if (this._index.length && this.hasTrailingSlash()) {
      this.sendIndex(path2);
      return res;
    }
    this.sendFile(path2);
    return res;
  };
  SendStream.prototype.send = function send(path2, stat) {
    var len = stat.size;
    var options = this.options;
    var opts = {};
    var res = this.res;
    var req = this.req;
    var ranges = req.headers.range;
    var offset = options.start || 0;
    if (headersSent(res)) {
      this.headersAlreadySent();
      return;
    }
    debug2('pipe "%s"', path2);
    this.setHeader(path2, stat);
    this.type(path2);
    if (this.isConditionalGET()) {
      if (this.isPreconditionFailure()) {
        this.error(412);
        return;
      }
      if (this.isCachable() && this.isFresh()) {
        this.notModified();
        return;
      }
    }
    len = Math.max(0, len - offset);
    if (options.end !== undefined) {
      var bytes = options.end - offset + 1;
      if (len > bytes)
        len = bytes;
    }
    if (this._acceptRanges && BYTES_RANGE_REGEXP.test(ranges)) {
      ranges = parseRange(len, ranges, {
        combine: true
      });
      if (!this.isRangeFresh()) {
        debug2("range stale");
        ranges = -2;
      }
      if (ranges === -1) {
        debug2("range unsatisfiable");
        res.setHeader("Content-Range", contentRange("bytes", len));
        return this.error(416, {
          headers: { "Content-Range": res.getHeader("Content-Range") }
        });
      }
      if (ranges !== -2 && ranges.length === 1) {
        debug2("range %j", ranges);
        res.statusCode = 206;
        res.setHeader("Content-Range", contentRange("bytes", len, ranges[0]));
        offset += ranges[0].start;
        len = ranges[0].end - ranges[0].start + 1;
      }
    }
    for (var prop in options) {
      opts[prop] = options[prop];
    }
    opts.start = offset;
    opts.end = Math.max(offset, offset + len - 1);
    res.setHeader("Content-Length", len);
    if (req.method === "HEAD") {
      res.end();
      return;
    }
    this.stream(path2, opts);
  };
  SendStream.prototype.sendFile = function sendFile(path2) {
    var i = 0;
    var self2 = this;
    debug2('stat "%s"', path2);
    fs.stat(path2, function onstat(err, stat) {
      if (err && err.code === "ENOENT" && !extname(path2) && path2[path2.length - 1] !== sep) {
        return next(err);
      }
      if (err)
        return self2.onStatError(err);
      if (stat.isDirectory())
        return self2.redirect(path2);
      self2.emit("file", path2, stat);
      self2.send(path2, stat);
    });
    function next(err) {
      if (self2._extensions.length <= i) {
        return err ? self2.onStatError(err) : self2.error(404);
      }
      var p = path2 + "." + self2._extensions[i++];
      debug2('stat "%s"', p);
      fs.stat(p, function(err2, stat) {
        if (err2)
          return next(err2);
        if (stat.isDirectory())
          return next();
        self2.emit("file", p, stat);
        self2.send(p, stat);
      });
    }
  };
  SendStream.prototype.sendIndex = function sendIndex(path2) {
    var i = -1;
    var self2 = this;
    function next(err) {
      if (++i >= self2._index.length) {
        if (err)
          return self2.onStatError(err);
        return self2.error(404);
      }
      var p = join(path2, self2._index[i]);
      debug2('stat "%s"', p);
      fs.stat(p, function(err2, stat) {
        if (err2)
          return next(err2);
        if (stat.isDirectory())
          return next();
        self2.emit("file", p, stat);
        self2.send(p, stat);
      });
    }
    next();
  };
  SendStream.prototype.stream = function stream(path2, options) {
    var self2 = this;
    var res = this.res;
    var stream = fs.createReadStream(path2, options);
    this.emit("stream", stream);
    stream.pipe(res);
    function cleanup() {
      destroy(stream, true);
    }
    onFinished(res, cleanup);
    stream.on("error", function onerror(err) {
      cleanup();
      self2.onStatError(err);
    });
    stream.on("end", function onend() {
      self2.emit("end");
    });
  };
  SendStream.prototype.type = function type(path2) {
    var res = this.res;
    if (res.getHeader("Content-Type"))
      return;
    var type = mime2.lookup(path2);
    if (!type) {
      debug2("no content-type");
      return;
    }
    var charset = mime2.charsets.lookup(type);
    debug2("content-type %s", type);
    res.setHeader("Content-Type", type + (charset ? "; charset=" + charset : ""));
  };
  SendStream.prototype.setHeader = function setHeader(path2, stat) {
    var res = this.res;
    this.emit("headers", res, path2, stat);
    if (this._acceptRanges && !res.getHeader("Accept-Ranges")) {
      debug2("accept ranges");
      res.setHeader("Accept-Ranges", "bytes");
    }
    if (this._cacheControl && !res.getHeader("Cache-Control")) {
      var cacheControl = "public, max-age=" + Math.floor(this._maxage / 1000);
      if (this._immutable) {
        cacheControl += ", immutable";
      }
      debug2("cache-control %s", cacheControl);
      res.setHeader("Cache-Control", cacheControl);
    }
    if (this._lastModified && !res.getHeader("Last-Modified")) {
      var modified = stat.mtime.toUTCString();
      debug2("modified %s", modified);
      res.setHeader("Last-Modified", modified);
    }
    if (this._etag && !res.getHeader("ETag")) {
      var val = etag(stat);
      debug2("etag %s", val);
      res.setHeader("ETag", val);
    }
  };
});

// node_modules/forwarded/index.js
var require_forwarded = __commonJS((exports, module) => {
  var forwarded = function(req) {
    if (!req) {
      throw new TypeError("argument req is required");
    }
    var proxyAddrs = parse(req.headers["x-forwarded-for"] || "");
    var socketAddr = getSocketAddr(req);
    var addrs = [socketAddr].concat(proxyAddrs);
    return addrs;
  };
  var getSocketAddr = function(req) {
    return req.socket ? req.socket.remoteAddress : req.connection.remoteAddress;
  };
  var parse = function(header) {
    var end = header.length;
    var list = [];
    var start = header.length;
    for (var i = header.length - 1;i >= 0; i--) {
      switch (header.charCodeAt(i)) {
        case 32:
          if (start === end) {
            start = end = i;
          }
          break;
        case 44:
          if (start !== end) {
            list.push(header.substring(start, end));
          }
          start = end = i;
          break;
        default:
          start = i;
          break;
      }
    }
    if (start !== end) {
      list.push(header.substring(start, end));
    }
    return list;
  };
  /*!
   * forwarded
   * Copyright(c) 2014-2017 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = forwarded;
});

// node_modules/ipaddr.js/lib/ipaddr.js
var require_ipaddr = __commonJS((exports, module) => {
  (function() {
    var expandIPv6, ipaddr, ipv4Part, ipv4Regexes, ipv6Part, ipv6Regexes, matchCIDR, root, zoneIndex;
    ipaddr = {};
    root = this;
    if (typeof module !== "undefined" && module !== null && exports) {
      module.exports = ipaddr;
    } else {
      root["ipaddr"] = ipaddr;
    }
    matchCIDR = function(first, second, partSize, cidrBits) {
      var part, shift;
      if (first.length !== second.length) {
        throw new Error("ipaddr: cannot match CIDR for objects with different lengths");
      }
      part = 0;
      while (cidrBits > 0) {
        shift = partSize - cidrBits;
        if (shift < 0) {
          shift = 0;
        }
        if (first[part] >> shift !== second[part] >> shift) {
          return false;
        }
        cidrBits -= partSize;
        part += 1;
      }
      return true;
    };
    ipaddr.subnetMatch = function(address, rangeList, defaultName) {
      var k, len, rangeName, rangeSubnets, subnet;
      if (defaultName == null) {
        defaultName = "unicast";
      }
      for (rangeName in rangeList) {
        rangeSubnets = rangeList[rangeName];
        if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {
          rangeSubnets = [rangeSubnets];
        }
        for (k = 0, len = rangeSubnets.length;k < len; k++) {
          subnet = rangeSubnets[k];
          if (address.kind() === subnet[0].kind()) {
            if (address.match.apply(address, subnet)) {
              return rangeName;
            }
          }
        }
      }
      return defaultName;
    };
    ipaddr.IPv4 = function() {
      function IPv4(octets) {
        var k, len, octet;
        if (octets.length !== 4) {
          throw new Error("ipaddr: ipv4 octet count should be 4");
        }
        for (k = 0, len = octets.length;k < len; k++) {
          octet = octets[k];
          if (!(0 <= octet && octet <= 255)) {
            throw new Error("ipaddr: ipv4 octet should fit in 8 bits");
          }
        }
        this.octets = octets;
      }
      IPv4.prototype.kind = function() {
        return "ipv4";
      };
      IPv4.prototype.toString = function() {
        return this.octets.join(".");
      };
      IPv4.prototype.toNormalizedString = function() {
        return this.toString();
      };
      IPv4.prototype.toByteArray = function() {
        return this.octets.slice(0);
      };
      IPv4.prototype.match = function(other, cidrRange) {
        var ref;
        if (cidrRange === undefined) {
          ref = other, other = ref[0], cidrRange = ref[1];
        }
        if (other.kind() !== "ipv4") {
          throw new Error("ipaddr: cannot match ipv4 address with non-ipv4 one");
        }
        return matchCIDR(this.octets, other.octets, 8, cidrRange);
      };
      IPv4.prototype.SpecialRanges = {
        unspecified: [[new IPv4([0, 0, 0, 0]), 8]],
        broadcast: [[new IPv4([255, 255, 255, 255]), 32]],
        multicast: [[new IPv4([224, 0, 0, 0]), 4]],
        linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],
        loopback: [[new IPv4([127, 0, 0, 0]), 8]],
        carrierGradeNat: [[new IPv4([100, 64, 0, 0]), 10]],
        private: [[new IPv4([10, 0, 0, 0]), 8], [new IPv4([172, 16, 0, 0]), 12], [new IPv4([192, 168, 0, 0]), 16]],
        reserved: [[new IPv4([192, 0, 0, 0]), 24], [new IPv4([192, 0, 2, 0]), 24], [new IPv4([192, 88, 99, 0]), 24], [new IPv4([198, 51, 100, 0]), 24], [new IPv4([203, 0, 113, 0]), 24], [new IPv4([240, 0, 0, 0]), 4]]
      };
      IPv4.prototype.range = function() {
        return ipaddr.subnetMatch(this, this.SpecialRanges);
      };
      IPv4.prototype.toIPv4MappedAddress = function() {
        return ipaddr.IPv6.parse("::ffff:" + this.toString());
      };
      IPv4.prototype.prefixLengthFromSubnetMask = function() {
        var cidr, i, k, octet, stop, zeros, zerotable;
        zerotable = {
          0: 8,
          128: 7,
          192: 6,
          224: 5,
          240: 4,
          248: 3,
          252: 2,
          254: 1,
          255: 0
        };
        cidr = 0;
        stop = false;
        for (i = k = 3;k >= 0; i = k += -1) {
          octet = this.octets[i];
          if (octet in zerotable) {
            zeros = zerotable[octet];
            if (stop && zeros !== 0) {
              return null;
            }
            if (zeros !== 8) {
              stop = true;
            }
            cidr += zeros;
          } else {
            return null;
          }
        }
        return 32 - cidr;
      };
      return IPv4;
    }();
    ipv4Part = "(0?\\d+|0x[a-f0-9]+)";
    ipv4Regexes = {
      fourOctet: new RegExp("^" + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "$", "i"),
      longValue: new RegExp("^" + ipv4Part + "$", "i")
    };
    ipaddr.IPv4.parser = function(string) {
      var match, parseIntAuto, part, shift, value;
      parseIntAuto = function(string2) {
        if (string2[0] === "0" && string2[1] !== "x") {
          return parseInt(string2, 8);
        } else {
          return parseInt(string2);
        }
      };
      if (match = string.match(ipv4Regexes.fourOctet)) {
        return function() {
          var k, len, ref, results;
          ref = match.slice(1, 6);
          results = [];
          for (k = 0, len = ref.length;k < len; k++) {
            part = ref[k];
            results.push(parseIntAuto(part));
          }
          return results;
        }();
      } else if (match = string.match(ipv4Regexes.longValue)) {
        value = parseIntAuto(match[1]);
        if (value > 4294967295 || value < 0) {
          throw new Error("ipaddr: address outside defined range");
        }
        return function() {
          var k, results;
          results = [];
          for (shift = k = 0;k <= 24; shift = k += 8) {
            results.push(value >> shift & 255);
          }
          return results;
        }().reverse();
      } else {
        return null;
      }
    };
    ipaddr.IPv6 = function() {
      function IPv6(parts, zoneId) {
        var i, k, l, len, part, ref;
        if (parts.length === 16) {
          this.parts = [];
          for (i = k = 0;k <= 14; i = k += 2) {
            this.parts.push(parts[i] << 8 | parts[i + 1]);
          }
        } else if (parts.length === 8) {
          this.parts = parts;
        } else {
          throw new Error("ipaddr: ipv6 part count should be 8 or 16");
        }
        ref = this.parts;
        for (l = 0, len = ref.length;l < len; l++) {
          part = ref[l];
          if (!(0 <= part && part <= 65535)) {
            throw new Error("ipaddr: ipv6 part should fit in 16 bits");
          }
        }
        if (zoneId) {
          this.zoneId = zoneId;
        }
      }
      IPv6.prototype.kind = function() {
        return "ipv6";
      };
      IPv6.prototype.toString = function() {
        return this.toNormalizedString().replace(/((^|:)(0(:|$))+)/, "::");
      };
      IPv6.prototype.toRFC5952String = function() {
        var bestMatchIndex, bestMatchLength, match, regex, string;
        regex = /((^|:)(0(:|$)){2,})/g;
        string = this.toNormalizedString();
        bestMatchIndex = 0;
        bestMatchLength = -1;
        while (match = regex.exec(string)) {
          if (match[0].length > bestMatchLength) {
            bestMatchIndex = match.index;
            bestMatchLength = match[0].length;
          }
        }
        if (bestMatchLength < 0) {
          return string;
        }
        return string.substring(0, bestMatchIndex) + "::" + string.substring(bestMatchIndex + bestMatchLength);
      };
      IPv6.prototype.toByteArray = function() {
        var bytes, k, len, part, ref;
        bytes = [];
        ref = this.parts;
        for (k = 0, len = ref.length;k < len; k++) {
          part = ref[k];
          bytes.push(part >> 8);
          bytes.push(part & 255);
        }
        return bytes;
      };
      IPv6.prototype.toNormalizedString = function() {
        var addr, part, suffix;
        addr = function() {
          var k, len, ref, results;
          ref = this.parts;
          results = [];
          for (k = 0, len = ref.length;k < len; k++) {
            part = ref[k];
            results.push(part.toString(16));
          }
          return results;
        }.call(this).join(":");
        suffix = "";
        if (this.zoneId) {
          suffix = "%" + this.zoneId;
        }
        return addr + suffix;
      };
      IPv6.prototype.toFixedLengthString = function() {
        var addr, part, suffix;
        addr = function() {
          var k, len, ref, results;
          ref = this.parts;
          results = [];
          for (k = 0, len = ref.length;k < len; k++) {
            part = ref[k];
            results.push(part.toString(16).padStart(4, "0"));
          }
          return results;
        }.call(this).join(":");
        suffix = "";
        if (this.zoneId) {
          suffix = "%" + this.zoneId;
        }
        return addr + suffix;
      };
      IPv6.prototype.match = function(other, cidrRange) {
        var ref;
        if (cidrRange === undefined) {
          ref = other, other = ref[0], cidrRange = ref[1];
        }
        if (other.kind() !== "ipv6") {
          throw new Error("ipaddr: cannot match ipv6 address with non-ipv6 one");
        }
        return matchCIDR(this.parts, other.parts, 16, cidrRange);
      };
      IPv6.prototype.SpecialRanges = {
        unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],
        linkLocal: [new IPv6([65152, 0, 0, 0, 0, 0, 0, 0]), 10],
        multicast: [new IPv6([65280, 0, 0, 0, 0, 0, 0, 0]), 8],
        loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],
        uniqueLocal: [new IPv6([64512, 0, 0, 0, 0, 0, 0, 0]), 7],
        ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 65535, 0, 0]), 96],
        rfc6145: [new IPv6([0, 0, 0, 0, 65535, 0, 0, 0]), 96],
        rfc6052: [new IPv6([100, 65435, 0, 0, 0, 0, 0, 0]), 96],
        "6to4": [new IPv6([8194, 0, 0, 0, 0, 0, 0, 0]), 16],
        teredo: [new IPv6([8193, 0, 0, 0, 0, 0, 0, 0]), 32],
        reserved: [[new IPv6([8193, 3512, 0, 0, 0, 0, 0, 0]), 32]]
      };
      IPv6.prototype.range = function() {
        return ipaddr.subnetMatch(this, this.SpecialRanges);
      };
      IPv6.prototype.isIPv4MappedAddress = function() {
        return this.range() === "ipv4Mapped";
      };
      IPv6.prototype.toIPv4Address = function() {
        var high, low, ref;
        if (!this.isIPv4MappedAddress()) {
          throw new Error("ipaddr: trying to convert a generic ipv6 address to ipv4");
        }
        ref = this.parts.slice(-2), high = ref[0], low = ref[1];
        return new ipaddr.IPv4([high >> 8, high & 255, low >> 8, low & 255]);
      };
      IPv6.prototype.prefixLengthFromSubnetMask = function() {
        var cidr, i, k, part, stop, zeros, zerotable;
        zerotable = {
          0: 16,
          32768: 15,
          49152: 14,
          57344: 13,
          61440: 12,
          63488: 11,
          64512: 10,
          65024: 9,
          65280: 8,
          65408: 7,
          65472: 6,
          65504: 5,
          65520: 4,
          65528: 3,
          65532: 2,
          65534: 1,
          65535: 0
        };
        cidr = 0;
        stop = false;
        for (i = k = 7;k >= 0; i = k += -1) {
          part = this.parts[i];
          if (part in zerotable) {
            zeros = zerotable[part];
            if (stop && zeros !== 0) {
              return null;
            }
            if (zeros !== 16) {
              stop = true;
            }
            cidr += zeros;
          } else {
            return null;
          }
        }
        return 128 - cidr;
      };
      return IPv6;
    }();
    ipv6Part = "(?:[0-9a-f]+::?)+";
    zoneIndex = "%[0-9a-z]{1,}";
    ipv6Regexes = {
      zoneIndex: new RegExp(zoneIndex, "i"),
      native: new RegExp("^(::)?(" + ipv6Part + ")?([0-9a-f]+)?(::)?(" + zoneIndex + ")?$", "i"),
      transitional: new RegExp("^((?:" + ipv6Part + ")|(?:::)(?:" + ipv6Part + ")?)" + (ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part) + ("(" + zoneIndex + ")?$"), "i")
    };
    expandIPv6 = function(string, parts) {
      var colonCount, lastColon, part, replacement, replacementCount, zoneId;
      if (string.indexOf("::") !== string.lastIndexOf("::")) {
        return null;
      }
      zoneId = (string.match(ipv6Regexes["zoneIndex"]) || [])[0];
      if (zoneId) {
        zoneId = zoneId.substring(1);
        string = string.replace(/%.+$/, "");
      }
      colonCount = 0;
      lastColon = -1;
      while ((lastColon = string.indexOf(":", lastColon + 1)) >= 0) {
        colonCount++;
      }
      if (string.substr(0, 2) === "::") {
        colonCount--;
      }
      if (string.substr(-2, 2) === "::") {
        colonCount--;
      }
      if (colonCount > parts) {
        return null;
      }
      replacementCount = parts - colonCount;
      replacement = ":";
      while (replacementCount--) {
        replacement += "0:";
      }
      string = string.replace("::", replacement);
      if (string[0] === ":") {
        string = string.slice(1);
      }
      if (string[string.length - 1] === ":") {
        string = string.slice(0, -1);
      }
      parts = function() {
        var k, len, ref, results;
        ref = string.split(":");
        results = [];
        for (k = 0, len = ref.length;k < len; k++) {
          part = ref[k];
          results.push(parseInt(part, 16));
        }
        return results;
      }();
      return {
        parts,
        zoneId
      };
    };
    ipaddr.IPv6.parser = function(string) {
      var addr, k, len, match, octet, octets, zoneId;
      if (ipv6Regexes["native"].test(string)) {
        return expandIPv6(string, 8);
      } else if (match = string.match(ipv6Regexes["transitional"])) {
        zoneId = match[6] || "";
        addr = expandIPv6(match[1].slice(0, -1) + zoneId, 6);
        if (addr.parts) {
          octets = [parseInt(match[2]), parseInt(match[3]), parseInt(match[4]), parseInt(match[5])];
          for (k = 0, len = octets.length;k < len; k++) {
            octet = octets[k];
            if (!(0 <= octet && octet <= 255)) {
              return null;
            }
          }
          addr.parts.push(octets[0] << 8 | octets[1]);
          addr.parts.push(octets[2] << 8 | octets[3]);
          return {
            parts: addr.parts,
            zoneId: addr.zoneId
          };
        }
      }
      return null;
    };
    ipaddr.IPv4.isIPv4 = ipaddr.IPv6.isIPv6 = function(string) {
      return this.parser(string) !== null;
    };
    ipaddr.IPv4.isValid = function(string) {
      var e;
      try {
        new this(this.parser(string));
        return true;
      } catch (error1) {
        e = error1;
        return false;
      }
    };
    ipaddr.IPv4.isValidFourPartDecimal = function(string) {
      if (ipaddr.IPv4.isValid(string) && string.match(/^(0|[1-9]\d*)(\.(0|[1-9]\d*)){3}$/)) {
        return true;
      } else {
        return false;
      }
    };
    ipaddr.IPv6.isValid = function(string) {
      var addr, e;
      if (typeof string === "string" && string.indexOf(":") === -1) {
        return false;
      }
      try {
        addr = this.parser(string);
        new this(addr.parts, addr.zoneId);
        return true;
      } catch (error1) {
        e = error1;
        return false;
      }
    };
    ipaddr.IPv4.parse = function(string) {
      var parts;
      parts = this.parser(string);
      if (parts === null) {
        throw new Error("ipaddr: string is not formatted like ip address");
      }
      return new this(parts);
    };
    ipaddr.IPv6.parse = function(string) {
      var addr;
      addr = this.parser(string);
      if (addr.parts === null) {
        throw new Error("ipaddr: string is not formatted like ip address");
      }
      return new this(addr.parts, addr.zoneId);
    };
    ipaddr.IPv4.parseCIDR = function(string) {
      var maskLength, match, parsed;
      if (match = string.match(/^(.+)\/(\d+)$/)) {
        maskLength = parseInt(match[2]);
        if (maskLength >= 0 && maskLength <= 32) {
          parsed = [this.parse(match[1]), maskLength];
          Object.defineProperty(parsed, "toString", {
            value: function() {
              return this.join("/");
            }
          });
          return parsed;
        }
      }
      throw new Error("ipaddr: string is not formatted like an IPv4 CIDR range");
    };
    ipaddr.IPv4.subnetMaskFromPrefixLength = function(prefix) {
      var filledOctetCount, j, octets;
      prefix = parseInt(prefix);
      if (prefix < 0 || prefix > 32) {
        throw new Error("ipaddr: invalid IPv4 prefix length");
      }
      octets = [0, 0, 0, 0];
      j = 0;
      filledOctetCount = Math.floor(prefix / 8);
      while (j < filledOctetCount) {
        octets[j] = 255;
        j++;
      }
      if (filledOctetCount < 4) {
        octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - prefix % 8;
      }
      return new this(octets);
    };
    ipaddr.IPv4.broadcastAddressFromCIDR = function(string) {
      var cidr, error, i, ipInterfaceOctets, octets, subnetMaskOctets;
      try {
        cidr = this.parseCIDR(string);
        ipInterfaceOctets = cidr[0].toByteArray();
        subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
        octets = [];
        i = 0;
        while (i < 4) {
          octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);
          i++;
        }
        return new this(octets);
      } catch (error1) {
        error = error1;
        throw new Error("ipaddr: the address does not have IPv4 CIDR format");
      }
    };
    ipaddr.IPv4.networkAddressFromCIDR = function(string) {
      var cidr, error, i, ipInterfaceOctets, octets, subnetMaskOctets;
      try {
        cidr = this.parseCIDR(string);
        ipInterfaceOctets = cidr[0].toByteArray();
        subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
        octets = [];
        i = 0;
        while (i < 4) {
          octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));
          i++;
        }
        return new this(octets);
      } catch (error1) {
        error = error1;
        throw new Error("ipaddr: the address does not have IPv4 CIDR format");
      }
    };
    ipaddr.IPv6.parseCIDR = function(string) {
      var maskLength, match, parsed;
      if (match = string.match(/^(.+)\/(\d+)$/)) {
        maskLength = parseInt(match[2]);
        if (maskLength >= 0 && maskLength <= 128) {
          parsed = [this.parse(match[1]), maskLength];
          Object.defineProperty(parsed, "toString", {
            value: function() {
              return this.join("/");
            }
          });
          return parsed;
        }
      }
      throw new Error("ipaddr: string is not formatted like an IPv6 CIDR range");
    };
    ipaddr.isValid = function(string) {
      return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);
    };
    ipaddr.parse = function(string) {
      if (ipaddr.IPv6.isValid(string)) {
        return ipaddr.IPv6.parse(string);
      } else if (ipaddr.IPv4.isValid(string)) {
        return ipaddr.IPv4.parse(string);
      } else {
        throw new Error("ipaddr: the address has neither IPv6 nor IPv4 format");
      }
    };
    ipaddr.parseCIDR = function(string) {
      var e;
      try {
        return ipaddr.IPv6.parseCIDR(string);
      } catch (error1) {
        e = error1;
        try {
          return ipaddr.IPv4.parseCIDR(string);
        } catch (error12) {
          e = error12;
          throw new Error("ipaddr: the address has neither IPv6 nor IPv4 CIDR format");
        }
      }
    };
    ipaddr.fromByteArray = function(bytes) {
      var length;
      length = bytes.length;
      if (length === 4) {
        return new ipaddr.IPv4(bytes);
      } else if (length === 16) {
        return new ipaddr.IPv6(bytes);
      } else {
        throw new Error("ipaddr: the binary input is neither an IPv6 nor IPv4 address");
      }
    };
    ipaddr.process = function(string) {
      var addr;
      addr = this.parse(string);
      if (addr.kind() === "ipv6" && addr.isIPv4MappedAddress()) {
        return addr.toIPv4Address();
      } else {
        return addr;
      }
    };
  }).call(exports);
});

// node_modules/proxy-addr/index.js
var require_proxy_addr = __commonJS((exports, module) => {
  var alladdrs = function(req, trust) {
    var addrs = forwarded(req);
    if (!trust) {
      return addrs;
    }
    if (typeof trust !== "function") {
      trust = compile(trust);
    }
    for (var i = 0;i < addrs.length - 1; i++) {
      if (trust(addrs[i], i))
        continue;
      addrs.length = i + 1;
    }
    return addrs;
  };
  var compile = function(val) {
    if (!val) {
      throw new TypeError("argument is required");
    }
    var trust;
    if (typeof val === "string") {
      trust = [val];
    } else if (Array.isArray(val)) {
      trust = val.slice();
    } else {
      throw new TypeError("unsupported trust argument");
    }
    for (var i = 0;i < trust.length; i++) {
      val = trust[i];
      if (!Object.prototype.hasOwnProperty.call(IP_RANGES, val)) {
        continue;
      }
      val = IP_RANGES[val];
      trust.splice.apply(trust, [i, 1].concat(val));
      i += val.length - 1;
    }
    return compileTrust(compileRangeSubnets(trust));
  };
  var compileRangeSubnets = function(arr) {
    var rangeSubnets = new Array(arr.length);
    for (var i = 0;i < arr.length; i++) {
      rangeSubnets[i] = parseipNotation(arr[i]);
    }
    return rangeSubnets;
  };
  var compileTrust = function(rangeSubnets) {
    var len = rangeSubnets.length;
    return len === 0 ? trustNone : len === 1 ? trustSingle(rangeSubnets[0]) : trustMulti(rangeSubnets);
  };
  var parseipNotation = function(note) {
    var pos = note.lastIndexOf("/");
    var str = pos !== -1 ? note.substring(0, pos) : note;
    if (!isip(str)) {
      throw new TypeError("invalid IP address: " + str);
    }
    var ip = parseip(str);
    if (pos === -1 && ip.kind() === "ipv6" && ip.isIPv4MappedAddress()) {
      ip = ip.toIPv4Address();
    }
    var max = ip.kind() === "ipv6" ? 128 : 32;
    var range = pos !== -1 ? note.substring(pos + 1, note.length) : null;
    if (range === null) {
      range = max;
    } else if (DIGIT_REGEXP.test(range)) {
      range = parseInt(range, 10);
    } else if (ip.kind() === "ipv4" && isip(range)) {
      range = parseNetmask(range);
    } else {
      range = null;
    }
    if (range <= 0 || range > max) {
      throw new TypeError("invalid range on address: " + note);
    }
    return [ip, range];
  };
  var parseNetmask = function(netmask) {
    var ip = parseip(netmask);
    var kind = ip.kind();
    return kind === "ipv4" ? ip.prefixLengthFromSubnetMask() : null;
  };
  var proxyaddr = function(req, trust) {
    if (!req) {
      throw new TypeError("req argument is required");
    }
    if (!trust) {
      throw new TypeError("trust argument is required");
    }
    var addrs = alladdrs(req, trust);
    var addr = addrs[addrs.length - 1];
    return addr;
  };
  var trustNone = function() {
    return false;
  };
  var trustMulti = function(subnets) {
    return function trust(addr) {
      if (!isip(addr))
        return false;
      var ip = parseip(addr);
      var ipconv;
      var kind = ip.kind();
      for (var i = 0;i < subnets.length; i++) {
        var subnet = subnets[i];
        var subnetip = subnet[0];
        var subnetkind = subnetip.kind();
        var subnetrange = subnet[1];
        var trusted = ip;
        if (kind !== subnetkind) {
          if (subnetkind === "ipv4" && !ip.isIPv4MappedAddress()) {
            continue;
          }
          if (!ipconv) {
            ipconv = subnetkind === "ipv4" ? ip.toIPv4Address() : ip.toIPv4MappedAddress();
          }
          trusted = ipconv;
        }
        if (trusted.match(subnetip, subnetrange)) {
          return true;
        }
      }
      return false;
    };
  };
  var trustSingle = function(subnet) {
    var subnetip = subnet[0];
    var subnetkind = subnetip.kind();
    var subnetisipv4 = subnetkind === "ipv4";
    var subnetrange = subnet[1];
    return function trust(addr) {
      if (!isip(addr))
        return false;
      var ip = parseip(addr);
      var kind = ip.kind();
      if (kind !== subnetkind) {
        if (subnetisipv4 && !ip.isIPv4MappedAddress()) {
          return false;
        }
        ip = subnetisipv4 ? ip.toIPv4Address() : ip.toIPv4MappedAddress();
      }
      return ip.match(subnetip, subnetrange);
    };
  };
  /*!
   * proxy-addr
   * Copyright(c) 2014-2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = proxyaddr;
  module.exports.all = alladdrs;
  module.exports.compile = compile;
  var forwarded = require_forwarded();
  var ipaddr = require_ipaddr();
  var DIGIT_REGEXP = /^[0-9]+$/;
  var isip = ipaddr.isValid;
  var parseip = ipaddr.parse;
  var IP_RANGES = {
    linklocal: ["169.254.0.0/16", "fe80::/10"],
    loopback: ["127.0.0.1/8", "::1/128"],
    uniquelocal: ["10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7"]
  };
});

// node_modules/express/lib/utils.js
var require_utils2 = __commonJS((exports) => {
  var acceptParams = function(str) {
    var parts = str.split(/ *; */);
    var ret = { value: parts[0], quality: 1, params: {} };
    for (var i = 1;i < parts.length; ++i) {
      var pms = parts[i].split(/ *= */);
      if (pms[0] === "q") {
        ret.quality = parseFloat(pms[1]);
      } else {
        ret.params[pms[0]] = pms[1];
      }
    }
    return ret;
  };
  var createETagGenerator = function(options) {
    return function generateETag(body, encoding) {
      var buf = !Buffer2.isBuffer(body) ? Buffer2.from(body, encoding) : body;
      return etag(buf, options);
    };
  };
  var parseExtendedQueryString = function(str) {
    return qs.parse(str, {
      allowPrototypes: true
    });
  };
  var newObject = function() {
    return {};
  };
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var Buffer2 = require_safe_buffer().Buffer;
  var contentDisposition = require_content_disposition();
  var contentType = require_content_type();
  var deprecate = require_depd()("express");
  var flatten = require_array_flatten();
  var mime2 = require_send().mime;
  var etag = require_etag();
  var proxyaddr = require_proxy_addr();
  var qs = require_lib2();
  var querystring = import.meta.require("querystring");
  exports.etag = createETagGenerator({ weak: false });
  exports.wetag = createETagGenerator({ weak: true });
  exports.isAbsolute = function(path) {
    if (path[0] === "/")
      return true;
    if (path[1] === ":" && (path[2] === "\\" || path[2] === "/"))
      return true;
    if (path.substring(0, 2) === "\\\\")
      return true;
  };
  exports.flatten = deprecate.function(flatten, "utils.flatten: use array-flatten npm module instead");
  exports.normalizeType = function(type) {
    return ~type.indexOf("/") ? acceptParams(type) : { value: mime2.lookup(type), params: {} };
  };
  exports.normalizeTypes = function(types) {
    var ret = [];
    for (var i = 0;i < types.length; ++i) {
      ret.push(exports.normalizeType(types[i]));
    }
    return ret;
  };
  exports.contentDisposition = deprecate.function(contentDisposition, "utils.contentDisposition: use content-disposition npm module instead");
  exports.compileETag = function(val) {
    var fn;
    if (typeof val === "function") {
      return val;
    }
    switch (val) {
      case true:
      case "weak":
        fn = exports.wetag;
        break;
      case false:
        break;
      case "strong":
        fn = exports.etag;
        break;
      default:
        throw new TypeError("unknown value for etag function: " + val);
    }
    return fn;
  };
  exports.compileQueryParser = function compileQueryParser(val) {
    var fn;
    if (typeof val === "function") {
      return val;
    }
    switch (val) {
      case true:
      case "simple":
        fn = querystring.parse;
        break;
      case false:
        fn = newObject;
        break;
      case "extended":
        fn = parseExtendedQueryString;
        break;
      default:
        throw new TypeError("unknown value for query parser function: " + val);
    }
    return fn;
  };
  exports.compileTrust = function(val) {
    if (typeof val === "function")
      return val;
    if (val === true) {
      return function() {
        return true;
      };
    }
    if (typeof val === "number") {
      return function(a, i) {
        return i < val;
      };
    }
    if (typeof val === "string") {
      val = val.split(",").map(function(v) {
        return v.trim();
      });
    }
    return proxyaddr.compile(val || []);
  };
  exports.setCharset = function setCharset(type, charset) {
    if (!type || !charset) {
      return type;
    }
    var parsed = contentType.parse(type);
    parsed.parameters.charset = charset;
    return contentType.format(parsed);
  };
});

// node_modules/express/lib/application.js
var require_application = __commonJS((exports, module) => {
  var logerror = function(err) {
    if (this.get("env") !== "test")
      console.error(err.stack || err.toString());
  };
  var tryRender = function(view, options, callback) {
    try {
      view.render(options, callback);
    } catch (err) {
      callback(err);
    }
  };
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var finalhandler = require_finalhandler();
  var Router = require_router();
  var methods = require_methods();
  var middleware = require_init();
  var query = require_query();
  var debug2 = require_src4()("express:application");
  var View = require_view();
  var http = import.meta.require("http");
  var compileETag = require_utils2().compileETag;
  var compileQueryParser = require_utils2().compileQueryParser;
  var compileTrust = require_utils2().compileTrust;
  var deprecate = require_depd()("express");
  var flatten = require_array_flatten();
  var merge = require_utils_merge();
  var resolve = import.meta.require("path").resolve;
  var setPrototypeOf = require_setprototypeof();
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var slice = Array.prototype.slice;
  var app = exports = module.exports = {};
  var trustProxyDefaultSymbol = "@@symbol:trust_proxy_default";
  app.init = function init() {
    this.cache = {};
    this.engines = {};
    this.settings = {};
    this.defaultConfiguration();
  };
  app.defaultConfiguration = function defaultConfiguration() {
    var env = "development";
    this.enable("x-powered-by");
    this.set("etag", "weak");
    this.set("env", env);
    this.set("query parser", "extended");
    this.set("subdomain offset", 2);
    this.set("trust proxy", false);
    Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
      configurable: true,
      value: true
    });
    debug2("booting in %s mode", env);
    this.on("mount", function onmount(parent) {
      if (this.settings[trustProxyDefaultSymbol] === true && typeof parent.settings["trust proxy fn"] === "function") {
        delete this.settings["trust proxy"];
        delete this.settings["trust proxy fn"];
      }
      setPrototypeOf(this.request, parent.request);
      setPrototypeOf(this.response, parent.response);
      setPrototypeOf(this.engines, parent.engines);
      setPrototypeOf(this.settings, parent.settings);
    });
    this.locals = Object.create(null);
    this.mountpath = "/";
    this.locals.settings = this.settings;
    this.set("view", View);
    this.set("views", resolve("views"));
    this.set("jsonp callback name", "callback");
    if (env === "production") {
      this.enable("view cache");
    }
    Object.defineProperty(this, "router", {
      get: function() {
        throw new Error("\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.");
      }
    });
  };
  app.lazyrouter = function lazyrouter() {
    if (!this._router) {
      this._router = new Router({
        caseSensitive: this.enabled("case sensitive routing"),
        strict: this.enabled("strict routing")
      });
      this._router.use(query(this.get("query parser fn")));
      this._router.use(middleware.init(this));
    }
  };
  app.handle = function handle(req, res, callback) {
    var router = this._router;
    var done = callback || finalhandler(req, res, {
      env: this.get("env"),
      onerror: logerror.bind(this)
    });
    if (!router) {
      debug2("no routes defined on app");
      done();
      return;
    }
    router.handle(req, res, done);
  };
  app.use = function use(fn) {
    var offset = 0;
    var path = "/";
    if (typeof fn !== "function") {
      var arg = fn;
      while (Array.isArray(arg) && arg.length !== 0) {
        arg = arg[0];
      }
      if (typeof arg !== "function") {
        offset = 1;
        path = fn;
      }
    }
    var fns = flatten(slice.call(arguments, offset));
    if (fns.length === 0) {
      throw new TypeError("app.use() requires a middleware function");
    }
    this.lazyrouter();
    var router = this._router;
    fns.forEach(function(fn2) {
      if (!fn2 || !fn2.handle || !fn2.set) {
        return router.use(path, fn2);
      }
      debug2(".use app under %s", path);
      fn2.mountpath = path;
      fn2.parent = this;
      router.use(path, function mounted_app(req, res, next) {
        var orig = req.app;
        fn2.handle(req, res, function(err) {
          setPrototypeOf(req, orig.request);
          setPrototypeOf(res, orig.response);
          next(err);
        });
      });
      fn2.emit("mount", this);
    }, this);
    return this;
  };
  app.route = function route(path) {
    this.lazyrouter();
    return this._router.route(path);
  };
  app.engine = function engine(ext, fn) {
    if (typeof fn !== "function") {
      throw new Error("callback function required");
    }
    var extension = ext[0] !== "." ? "." + ext : ext;
    this.engines[extension] = fn;
    return this;
  };
  app.param = function param(name, fn) {
    this.lazyrouter();
    if (Array.isArray(name)) {
      for (var i = 0;i < name.length; i++) {
        this.param(name[i], fn);
      }
      return this;
    }
    this._router.param(name, fn);
    return this;
  };
  app.set = function set(setting, val) {
    if (arguments.length === 1) {
      var settings = this.settings;
      while (settings && settings !== Object.prototype) {
        if (hasOwnProperty.call(settings, setting)) {
          return settings[setting];
        }
        settings = Object.getPrototypeOf(settings);
      }
      return;
    }
    debug2('set "%s" to %o', setting, val);
    this.settings[setting] = val;
    switch (setting) {
      case "etag":
        this.set("etag fn", compileETag(val));
        break;
      case "query parser":
        this.set("query parser fn", compileQueryParser(val));
        break;
      case "trust proxy":
        this.set("trust proxy fn", compileTrust(val));
        Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
          configurable: true,
          value: false
        });
        break;
    }
    return this;
  };
  app.path = function path() {
    return this.parent ? this.parent.path() + this.mountpath : "";
  };
  app.enabled = function enabled(setting) {
    return Boolean(this.set(setting));
  };
  app.disabled = function disabled(setting) {
    return !this.set(setting);
  };
  app.enable = function enable(setting) {
    return this.set(setting, true);
  };
  app.disable = function disable(setting) {
    return this.set(setting, false);
  };
  methods.forEach(function(method) {
    app[method] = function(path) {
      if (method === "get" && arguments.length === 1) {
        return this.set(path);
      }
      this.lazyrouter();
      var route = this._router.route(path);
      route[method].apply(route, slice.call(arguments, 1));
      return this;
    };
  });
  app.all = function all(path) {
    this.lazyrouter();
    var route = this._router.route(path);
    var args = slice.call(arguments, 1);
    for (var i = 0;i < methods.length; i++) {
      route[methods[i]].apply(route, args);
    }
    return this;
  };
  app.del = deprecate.function(app.delete, "app.del: Use app.delete instead");
  app.render = function render(name, options, callback) {
    var cache = this.cache;
    var done = callback;
    var engines = this.engines;
    var opts = options;
    var renderOptions = {};
    var view;
    if (typeof options === "function") {
      done = options;
      opts = {};
    }
    merge(renderOptions, this.locals);
    if (opts._locals) {
      merge(renderOptions, opts._locals);
    }
    merge(renderOptions, opts);
    if (renderOptions.cache == null) {
      renderOptions.cache = this.enabled("view cache");
    }
    if (renderOptions.cache) {
      view = cache[name];
    }
    if (!view) {
      var View2 = this.get("view");
      view = new View2(name, {
        defaultEngine: this.get("view engine"),
        root: this.get("views"),
        engines
      });
      if (!view.path) {
        var dirs = Array.isArray(view.root) && view.root.length > 1 ? 'directories "' + view.root.slice(0, -1).join('", "') + '" or "' + view.root[view.root.length - 1] + '"' : 'directory "' + view.root + '"';
        var err = new Error('Failed to lookup view "' + name + '" in views ' + dirs);
        err.view = view;
        return done(err);
      }
      if (renderOptions.cache) {
        cache[name] = view;
      }
    }
    tryRender(view, renderOptions, done);
  };
  app.listen = function listen() {
    var server = http.createServer(this);
    return server.listen.apply(server, arguments);
  };
});

// node_modules/negotiator/lib/charset.js
var require_charset = __commonJS((exports, module) => {
  var parseAcceptCharset = function(accept) {
    var accepts = accept.split(",");
    for (var i = 0, j = 0;i < accepts.length; i++) {
      var charset = parseCharset(accepts[i].trim(), i);
      if (charset) {
        accepts[j++] = charset;
      }
    }
    accepts.length = j;
    return accepts;
  };
  var parseCharset = function(str, i) {
    var match = simpleCharsetRegExp.exec(str);
    if (!match)
      return null;
    var charset = match[1];
    var q = 1;
    if (match[2]) {
      var params = match[2].split(";");
      for (var j = 0;j < params.length; j++) {
        var p = params[j].trim().split("=");
        if (p[0] === "q") {
          q = parseFloat(p[1]);
          break;
        }
      }
    }
    return {
      charset,
      q,
      i
    };
  };
  var getCharsetPriority = function(charset, accepted, index) {
    var priority = { o: -1, q: 0, s: 0 };
    for (var i = 0;i < accepted.length; i++) {
      var spec = specify(charset, accepted[i], index);
      if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
        priority = spec;
      }
    }
    return priority;
  };
  var specify = function(charset, spec, index) {
    var s = 0;
    if (spec.charset.toLowerCase() === charset.toLowerCase()) {
      s |= 1;
    } else if (spec.charset !== "*") {
      return null;
    }
    return {
      i: index,
      o: spec.i,
      q: spec.q,
      s
    };
  };
  var preferredCharsets = function(accept, provided) {
    var accepts = parseAcceptCharset(accept === undefined ? "*" : accept || "");
    if (!provided) {
      return accepts.filter(isQuality).sort(compareSpecs).map(getFullCharset);
    }
    var priorities = provided.map(function getPriority(type, index) {
      return getCharsetPriority(type, accepts, index);
    });
    return priorities.filter(isQuality).sort(compareSpecs).map(function getCharset(priority) {
      return provided[priorities.indexOf(priority)];
    });
  };
  var compareSpecs = function(a, b) {
    return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;
  };
  var getFullCharset = function(spec) {
    return spec.charset;
  };
  var isQuality = function(spec) {
    return spec.q > 0;
  };
  module.exports = preferredCharsets;
  module.exports.preferredCharsets = preferredCharsets;
  var simpleCharsetRegExp = /^\s*([^\s;]+)\s*(?:;(.*))?$/;
});

// node_modules/negotiator/lib/encoding.js
var require_encoding = __commonJS((exports, module) => {
  var parseAcceptEncoding = function(accept) {
    var accepts = accept.split(",");
    var hasIdentity = false;
    var minQuality = 1;
    for (var i = 0, j = 0;i < accepts.length; i++) {
      var encoding = parseEncoding(accepts[i].trim(), i);
      if (encoding) {
        accepts[j++] = encoding;
        hasIdentity = hasIdentity || specify("identity", encoding);
        minQuality = Math.min(minQuality, encoding.q || 1);
      }
    }
    if (!hasIdentity) {
      accepts[j++] = {
        encoding: "identity",
        q: minQuality,
        i
      };
    }
    accepts.length = j;
    return accepts;
  };
  var parseEncoding = function(str, i) {
    var match = simpleEncodingRegExp.exec(str);
    if (!match)
      return null;
    var encoding = match[1];
    var q = 1;
    if (match[2]) {
      var params = match[2].split(";");
      for (var j = 0;j < params.length; j++) {
        var p = params[j].trim().split("=");
        if (p[0] === "q") {
          q = parseFloat(p[1]);
          break;
        }
      }
    }
    return {
      encoding,
      q,
      i
    };
  };
  var getEncodingPriority = function(encoding, accepted, index) {
    var priority = { o: -1, q: 0, s: 0 };
    for (var i = 0;i < accepted.length; i++) {
      var spec = specify(encoding, accepted[i], index);
      if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
        priority = spec;
      }
    }
    return priority;
  };
  var specify = function(encoding, spec, index) {
    var s = 0;
    if (spec.encoding.toLowerCase() === encoding.toLowerCase()) {
      s |= 1;
    } else if (spec.encoding !== "*") {
      return null;
    }
    return {
      i: index,
      o: spec.i,
      q: spec.q,
      s
    };
  };
  var preferredEncodings = function(accept, provided) {
    var accepts = parseAcceptEncoding(accept || "");
    if (!provided) {
      return accepts.filter(isQuality).sort(compareSpecs).map(getFullEncoding);
    }
    var priorities = provided.map(function getPriority(type, index) {
      return getEncodingPriority(type, accepts, index);
    });
    return priorities.filter(isQuality).sort(compareSpecs).map(function getEncoding(priority) {
      return provided[priorities.indexOf(priority)];
    });
  };
  var compareSpecs = function(a, b) {
    return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;
  };
  var getFullEncoding = function(spec) {
    return spec.encoding;
  };
  var isQuality = function(spec) {
    return spec.q > 0;
  };
  module.exports = preferredEncodings;
  module.exports.preferredEncodings = preferredEncodings;
  var simpleEncodingRegExp = /^\s*([^\s;]+)\s*(?:;(.*))?$/;
});

// node_modules/negotiator/lib/language.js
var require_language = __commonJS((exports, module) => {
  var parseAcceptLanguage = function(accept) {
    var accepts = accept.split(",");
    for (var i = 0, j = 0;i < accepts.length; i++) {
      var language = parseLanguage(accepts[i].trim(), i);
      if (language) {
        accepts[j++] = language;
      }
    }
    accepts.length = j;
    return accepts;
  };
  var parseLanguage = function(str, i) {
    var match = simpleLanguageRegExp.exec(str);
    if (!match)
      return null;
    var prefix = match[1];
    var suffix = match[2];
    var full = prefix;
    if (suffix)
      full += "-" + suffix;
    var q = 1;
    if (match[3]) {
      var params = match[3].split(";");
      for (var j = 0;j < params.length; j++) {
        var p = params[j].split("=");
        if (p[0] === "q")
          q = parseFloat(p[1]);
      }
    }
    return {
      prefix,
      suffix,
      q,
      i,
      full
    };
  };
  var getLanguagePriority = function(language, accepted, index) {
    var priority = { o: -1, q: 0, s: 0 };
    for (var i = 0;i < accepted.length; i++) {
      var spec = specify(language, accepted[i], index);
      if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
        priority = spec;
      }
    }
    return priority;
  };
  var specify = function(language, spec, index) {
    var p = parseLanguage(language);
    if (!p)
      return null;
    var s = 0;
    if (spec.full.toLowerCase() === p.full.toLowerCase()) {
      s |= 4;
    } else if (spec.prefix.toLowerCase() === p.full.toLowerCase()) {
      s |= 2;
    } else if (spec.full.toLowerCase() === p.prefix.toLowerCase()) {
      s |= 1;
    } else if (spec.full !== "*") {
      return null;
    }
    return {
      i: index,
      o: spec.i,
      q: spec.q,
      s
    };
  };
  var preferredLanguages = function(accept, provided) {
    var accepts = parseAcceptLanguage(accept === undefined ? "*" : accept || "");
    if (!provided) {
      return accepts.filter(isQuality).sort(compareSpecs).map(getFullLanguage);
    }
    var priorities = provided.map(function getPriority(type, index) {
      return getLanguagePriority(type, accepts, index);
    });
    return priorities.filter(isQuality).sort(compareSpecs).map(function getLanguage(priority) {
      return provided[priorities.indexOf(priority)];
    });
  };
  var compareSpecs = function(a, b) {
    return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;
  };
  var getFullLanguage = function(spec) {
    return spec.full;
  };
  var isQuality = function(spec) {
    return spec.q > 0;
  };
  module.exports = preferredLanguages;
  module.exports.preferredLanguages = preferredLanguages;
  var simpleLanguageRegExp = /^\s*([^\s\-;]+)(?:-([^\s;]+))?\s*(?:;(.*))?$/;
});

// node_modules/negotiator/lib/mediaType.js
var require_mediaType = __commonJS((exports, module) => {
  var parseAccept = function(accept) {
    var accepts = splitMediaTypes(accept);
    for (var i = 0, j = 0;i < accepts.length; i++) {
      var mediaType = parseMediaType(accepts[i].trim(), i);
      if (mediaType) {
        accepts[j++] = mediaType;
      }
    }
    accepts.length = j;
    return accepts;
  };
  var parseMediaType = function(str, i) {
    var match = simpleMediaTypeRegExp.exec(str);
    if (!match)
      return null;
    var params = Object.create(null);
    var q = 1;
    var subtype = match[2];
    var type = match[1];
    if (match[3]) {
      var kvps = splitParameters(match[3]).map(splitKeyValuePair);
      for (var j = 0;j < kvps.length; j++) {
        var pair = kvps[j];
        var key = pair[0].toLowerCase();
        var val = pair[1];
        var value = val && val[0] === '"' && val[val.length - 1] === '"' ? val.substr(1, val.length - 2) : val;
        if (key === "q") {
          q = parseFloat(value);
          break;
        }
        params[key] = value;
      }
    }
    return {
      type,
      subtype,
      params,
      q,
      i
    };
  };
  var getMediaTypePriority = function(type, accepted, index) {
    var priority = { o: -1, q: 0, s: 0 };
    for (var i = 0;i < accepted.length; i++) {
      var spec = specify(type, accepted[i], index);
      if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
        priority = spec;
      }
    }
    return priority;
  };
  var specify = function(type, spec, index) {
    var p = parseMediaType(type);
    var s = 0;
    if (!p) {
      return null;
    }
    if (spec.type.toLowerCase() == p.type.toLowerCase()) {
      s |= 4;
    } else if (spec.type != "*") {
      return null;
    }
    if (spec.subtype.toLowerCase() == p.subtype.toLowerCase()) {
      s |= 2;
    } else if (spec.subtype != "*") {
      return null;
    }
    var keys = Object.keys(spec.params);
    if (keys.length > 0) {
      if (keys.every(function(k) {
        return spec.params[k] == "*" || (spec.params[k] || "").toLowerCase() == (p.params[k] || "").toLowerCase();
      })) {
        s |= 1;
      } else {
        return null;
      }
    }
    return {
      i: index,
      o: spec.i,
      q: spec.q,
      s
    };
  };
  var preferredMediaTypes = function(accept, provided) {
    var accepts = parseAccept(accept === undefined ? "*/*" : accept || "");
    if (!provided) {
      return accepts.filter(isQuality).sort(compareSpecs).map(getFullType);
    }
    var priorities = provided.map(function getPriority(type, index) {
      return getMediaTypePriority(type, accepts, index);
    });
    return priorities.filter(isQuality).sort(compareSpecs).map(function getType(priority) {
      return provided[priorities.indexOf(priority)];
    });
  };
  var compareSpecs = function(a, b) {
    return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;
  };
  var getFullType = function(spec) {
    return spec.type + "/" + spec.subtype;
  };
  var isQuality = function(spec) {
    return spec.q > 0;
  };
  var quoteCount = function(string) {
    var count = 0;
    var index = 0;
    while ((index = string.indexOf('"', index)) !== -1) {
      count++;
      index++;
    }
    return count;
  };
  var splitKeyValuePair = function(str) {
    var index = str.indexOf("=");
    var key;
    var val;
    if (index === -1) {
      key = str;
    } else {
      key = str.substr(0, index);
      val = str.substr(index + 1);
    }
    return [key, val];
  };
  var splitMediaTypes = function(accept) {
    var accepts = accept.split(",");
    for (var i = 1, j = 0;i < accepts.length; i++) {
      if (quoteCount(accepts[j]) % 2 == 0) {
        accepts[++j] = accepts[i];
      } else {
        accepts[j] += "," + accepts[i];
      }
    }
    accepts.length = j + 1;
    return accepts;
  };
  var splitParameters = function(str) {
    var parameters = str.split(";");
    for (var i = 1, j = 0;i < parameters.length; i++) {
      if (quoteCount(parameters[j]) % 2 == 0) {
        parameters[++j] = parameters[i];
      } else {
        parameters[j] += ";" + parameters[i];
      }
    }
    parameters.length = j + 1;
    for (var i = 0;i < parameters.length; i++) {
      parameters[i] = parameters[i].trim();
    }
    return parameters;
  };
  module.exports = preferredMediaTypes;
  module.exports.preferredMediaTypes = preferredMediaTypes;
  var simpleMediaTypeRegExp = /^\s*([^\s\/;]+)\/([^;\s]+)\s*(?:;(.*))?$/;
});

// node_modules/negotiator/index.js
var require_negotiator = __commonJS((exports, module) => {
  var Negotiator = function(request) {
    if (!(this instanceof Negotiator)) {
      return new Negotiator(request);
    }
    this.request = request;
  };
  /*!
   * negotiator
   * Copyright(c) 2012 Federico Romero
   * Copyright(c) 2012-2014 Isaac Z. Schlueter
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var preferredCharsets = require_charset();
  var preferredEncodings = require_encoding();
  var preferredLanguages = require_language();
  var preferredMediaTypes = require_mediaType();
  module.exports = Negotiator;
  module.exports.Negotiator = Negotiator;
  Negotiator.prototype.charset = function charset(available) {
    var set = this.charsets(available);
    return set && set[0];
  };
  Negotiator.prototype.charsets = function charsets(available) {
    return preferredCharsets(this.request.headers["accept-charset"], available);
  };
  Negotiator.prototype.encoding = function encoding(available) {
    var set = this.encodings(available);
    return set && set[0];
  };
  Negotiator.prototype.encodings = function encodings(available) {
    return preferredEncodings(this.request.headers["accept-encoding"], available);
  };
  Negotiator.prototype.language = function language(available) {
    var set = this.languages(available);
    return set && set[0];
  };
  Negotiator.prototype.languages = function languages(available) {
    return preferredLanguages(this.request.headers["accept-language"], available);
  };
  Negotiator.prototype.mediaType = function mediaType(available) {
    var set = this.mediaTypes(available);
    return set && set[0];
  };
  Negotiator.prototype.mediaTypes = function mediaTypes(available) {
    return preferredMediaTypes(this.request.headers.accept, available);
  };
  Negotiator.prototype.preferredCharset = Negotiator.prototype.charset;
  Negotiator.prototype.preferredCharsets = Negotiator.prototype.charsets;
  Negotiator.prototype.preferredEncoding = Negotiator.prototype.encoding;
  Negotiator.prototype.preferredEncodings = Negotiator.prototype.encodings;
  Negotiator.prototype.preferredLanguage = Negotiator.prototype.language;
  Negotiator.prototype.preferredLanguages = Negotiator.prototype.languages;
  Negotiator.prototype.preferredMediaType = Negotiator.prototype.mediaType;
  Negotiator.prototype.preferredMediaTypes = Negotiator.prototype.mediaTypes;
});

// node_modules/accepts/index.js
var require_accepts = __commonJS((exports, module) => {
  var Accepts = function(req) {
    if (!(this instanceof Accepts)) {
      return new Accepts(req);
    }
    this.headers = req.headers;
    this.negotiator = new Negotiator(req);
  };
  var extToMime = function(type) {
    return type.indexOf("/") === -1 ? mime2.lookup(type) : type;
  };
  var validMime = function(type) {
    return typeof type === "string";
  };
  /*!
   * accepts
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var Negotiator = require_negotiator();
  var mime2 = require_mime_types();
  module.exports = Accepts;
  Accepts.prototype.type = Accepts.prototype.types = function(types_) {
    var types = types_;
    if (types && !Array.isArray(types)) {
      types = new Array(arguments.length);
      for (var i = 0;i < types.length; i++) {
        types[i] = arguments[i];
      }
    }
    if (!types || types.length === 0) {
      return this.negotiator.mediaTypes();
    }
    if (!this.headers.accept) {
      return types[0];
    }
    var mimes = types.map(extToMime);
    var accepts = this.negotiator.mediaTypes(mimes.filter(validMime));
    var first = accepts[0];
    return first ? types[mimes.indexOf(first)] : false;
  };
  Accepts.prototype.encoding = Accepts.prototype.encodings = function(encodings_) {
    var encodings = encodings_;
    if (encodings && !Array.isArray(encodings)) {
      encodings = new Array(arguments.length);
      for (var i = 0;i < encodings.length; i++) {
        encodings[i] = arguments[i];
      }
    }
    if (!encodings || encodings.length === 0) {
      return this.negotiator.encodings();
    }
    return this.negotiator.encodings(encodings)[0] || false;
  };
  Accepts.prototype.charset = Accepts.prototype.charsets = function(charsets_) {
    var charsets = charsets_;
    if (charsets && !Array.isArray(charsets)) {
      charsets = new Array(arguments.length);
      for (var i = 0;i < charsets.length; i++) {
        charsets[i] = arguments[i];
      }
    }
    if (!charsets || charsets.length === 0) {
      return this.negotiator.charsets();
    }
    return this.negotiator.charsets(charsets)[0] || false;
  };
  Accepts.prototype.lang = Accepts.prototype.langs = Accepts.prototype.language = Accepts.prototype.languages = function(languages_) {
    var languages = languages_;
    if (languages && !Array.isArray(languages)) {
      languages = new Array(arguments.length);
      for (var i = 0;i < languages.length; i++) {
        languages[i] = arguments[i];
      }
    }
    if (!languages || languages.length === 0) {
      return this.negotiator.languages();
    }
    return this.negotiator.languages(languages)[0] || false;
  };
});

// node_modules/express/lib/request.js
var require_request = __commonJS((exports, module) => {
  var defineGetter = function(obj, name, getter) {
    Object.defineProperty(obj, name, {
      configurable: true,
      enumerable: true,
      get: getter
    });
  };
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var accepts = require_accepts();
  var deprecate = require_depd()("express");
  var isIP = import.meta.require("net").isIP;
  var typeis = require_type_is();
  var http = import.meta.require("http");
  var fresh = require_fresh();
  var parseRange = require_range_parser();
  var parse = require_parseurl();
  var proxyaddr = require_proxy_addr();
  var req = Object.create(http.IncomingMessage.prototype);
  module.exports = req;
  req.get = req.header = function header(name) {
    if (!name) {
      throw new TypeError("name argument is required to req.get");
    }
    if (typeof name !== "string") {
      throw new TypeError("name must be a string to req.get");
    }
    var lc = name.toLowerCase();
    switch (lc) {
      case "referer":
      case "referrer":
        return this.headers.referrer || this.headers.referer;
      default:
        return this.headers[lc];
    }
  };
  req.accepts = function() {
    var accept = accepts(this);
    return accept.types.apply(accept, arguments);
  };
  req.acceptsEncodings = function() {
    var accept = accepts(this);
    return accept.encodings.apply(accept, arguments);
  };
  req.acceptsEncoding = deprecate.function(req.acceptsEncodings, "req.acceptsEncoding: Use acceptsEncodings instead");
  req.acceptsCharsets = function() {
    var accept = accepts(this);
    return accept.charsets.apply(accept, arguments);
  };
  req.acceptsCharset = deprecate.function(req.acceptsCharsets, "req.acceptsCharset: Use acceptsCharsets instead");
  req.acceptsLanguages = function() {
    var accept = accepts(this);
    return accept.languages.apply(accept, arguments);
  };
  req.acceptsLanguage = deprecate.function(req.acceptsLanguages, "req.acceptsLanguage: Use acceptsLanguages instead");
  req.range = function range(size, options) {
    var range = this.get("Range");
    if (!range)
      return;
    return parseRange(size, range, options);
  };
  req.param = function param(name, defaultValue) {
    var params = this.params || {};
    var body = this.body || {};
    var query = this.query || {};
    var args = arguments.length === 1 ? "name" : "name, default";
    deprecate("req.param(" + args + "): Use req.params, req.body, or req.query instead");
    if (params[name] != null && params.hasOwnProperty(name))
      return params[name];
    if (body[name] != null)
      return body[name];
    if (query[name] != null)
      return query[name];
    return defaultValue;
  };
  req.is = function is(types) {
    var arr = types;
    if (!Array.isArray(types)) {
      arr = new Array(arguments.length);
      for (var i = 0;i < arr.length; i++) {
        arr[i] = arguments[i];
      }
    }
    return typeis(this, arr);
  };
  defineGetter(req, "protocol", function protocol() {
    var proto = this.connection.encrypted ? "https" : "http";
    var trust = this.app.get("trust proxy fn");
    if (!trust(this.connection.remoteAddress, 0)) {
      return proto;
    }
    var header = this.get("X-Forwarded-Proto") || proto;
    var index = header.indexOf(",");
    return index !== -1 ? header.substring(0, index).trim() : header.trim();
  });
  defineGetter(req, "secure", function secure() {
    return this.protocol === "https";
  });
  defineGetter(req, "ip", function ip() {
    var trust = this.app.get("trust proxy fn");
    return proxyaddr(this, trust);
  });
  defineGetter(req, "ips", function ips() {
    var trust = this.app.get("trust proxy fn");
    var addrs = proxyaddr.all(this, trust);
    addrs.reverse().pop();
    return addrs;
  });
  defineGetter(req, "subdomains", function subdomains() {
    var hostname = this.hostname;
    if (!hostname)
      return [];
    var offset = this.app.get("subdomain offset");
    var subdomains = !isIP(hostname) ? hostname.split(".").reverse() : [hostname];
    return subdomains.slice(offset);
  });
  defineGetter(req, "path", function path() {
    return parse(this).pathname;
  });
  defineGetter(req, "hostname", function hostname() {
    var trust = this.app.get("trust proxy fn");
    var host = this.get("X-Forwarded-Host");
    if (!host || !trust(this.connection.remoteAddress, 0)) {
      host = this.get("Host");
    } else if (host.indexOf(",") !== -1) {
      host = host.substring(0, host.indexOf(",")).trimRight();
    }
    if (!host)
      return;
    var offset = host[0] === "[" ? host.indexOf("]") + 1 : 0;
    var index = host.indexOf(":", offset);
    return index !== -1 ? host.substring(0, index) : host;
  });
  defineGetter(req, "host", deprecate.function(function host() {
    return this.hostname;
  }, "req.host: Use req.hostname instead"));
  defineGetter(req, "fresh", function() {
    var method = this.method;
    var res = this.res;
    var status = res.statusCode;
    if (method !== "GET" && method !== "HEAD")
      return false;
    if (status >= 200 && status < 300 || status === 304) {
      return fresh(this.headers, {
        etag: res.get("ETag"),
        "last-modified": res.get("Last-Modified")
      });
    }
    return false;
  });
  defineGetter(req, "stale", function stale() {
    return !this.fresh;
  });
  defineGetter(req, "xhr", function xhr() {
    var val = this.get("X-Requested-With") || "";
    return val.toLowerCase() === "xmlhttprequest";
  });
});

// node_modules/cookie-signature/index.js
var require_cookie_signature = __commonJS((exports) => {
  var sha1 = function(str) {
    return crypto.createHash("sha1").update(str).digest("hex");
  };
  var crypto = import.meta.require("crypto");
  exports.sign = function(val, secret) {
    if (typeof val != "string")
      throw new TypeError("Cookie value must be provided as a string.");
    if (typeof secret != "string")
      throw new TypeError("Secret string must be provided.");
    return val + "." + crypto.createHmac("sha256", secret).update(val).digest("base64").replace(/\=+$/, "");
  };
  exports.unsign = function(val, secret) {
    if (typeof val != "string")
      throw new TypeError("Signed cookie string must be provided.");
    if (typeof secret != "string")
      throw new TypeError("Secret string must be provided.");
    var str = val.slice(0, val.lastIndexOf(".")), mac = exports.sign(str, secret);
    return sha1(mac) == sha1(val) ? str : false;
  };
});

// node_modules/cookie/index.js
var require_cookie = __commonJS((exports) => {
  var parse = function(str, options) {
    if (typeof str !== "string") {
      throw new TypeError("argument str must be a string");
    }
    var obj = {};
    var opt = options || {};
    var dec = opt.decode || decode;
    var index = 0;
    while (index < str.length) {
      var eqIdx = str.indexOf("=", index);
      if (eqIdx === -1) {
        break;
      }
      var endIdx = str.indexOf(";", index);
      if (endIdx === -1) {
        endIdx = str.length;
      } else if (endIdx < eqIdx) {
        index = str.lastIndexOf(";", eqIdx - 1) + 1;
        continue;
      }
      var key = str.slice(index, eqIdx).trim();
      if (obj[key] === undefined) {
        var val = str.slice(eqIdx + 1, endIdx).trim();
        if (val.charCodeAt(0) === 34) {
          val = val.slice(1, -1);
        }
        obj[key] = tryDecode(val, dec);
      }
      index = endIdx + 1;
    }
    return obj;
  };
  var serialize = function(name, val, options) {
    var opt = options || {};
    var enc = opt.encode || encode2;
    if (typeof enc !== "function") {
      throw new TypeError("option encode is invalid");
    }
    if (!fieldContentRegExp.test(name)) {
      throw new TypeError("argument name is invalid");
    }
    var value = enc(val);
    if (value && !fieldContentRegExp.test(value)) {
      throw new TypeError("argument val is invalid");
    }
    var str = name + "=" + value;
    if (opt.maxAge != null) {
      var maxAge = opt.maxAge - 0;
      if (isNaN(maxAge) || !isFinite(maxAge)) {
        throw new TypeError("option maxAge is invalid");
      }
      str += "; Max-Age=" + Math.floor(maxAge);
    }
    if (opt.domain) {
      if (!fieldContentRegExp.test(opt.domain)) {
        throw new TypeError("option domain is invalid");
      }
      str += "; Domain=" + opt.domain;
    }
    if (opt.path) {
      if (!fieldContentRegExp.test(opt.path)) {
        throw new TypeError("option path is invalid");
      }
      str += "; Path=" + opt.path;
    }
    if (opt.expires) {
      var expires = opt.expires;
      if (!isDate(expires) || isNaN(expires.valueOf())) {
        throw new TypeError("option expires is invalid");
      }
      str += "; Expires=" + expires.toUTCString();
    }
    if (opt.httpOnly) {
      str += "; HttpOnly";
    }
    if (opt.secure) {
      str += "; Secure";
    }
    if (opt.priority) {
      var priority = typeof opt.priority === "string" ? opt.priority.toLowerCase() : opt.priority;
      switch (priority) {
        case "low":
          str += "; Priority=Low";
          break;
        case "medium":
          str += "; Priority=Medium";
          break;
        case "high":
          str += "; Priority=High";
          break;
        default:
          throw new TypeError("option priority is invalid");
      }
    }
    if (opt.sameSite) {
      var sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
      switch (sameSite) {
        case true:
          str += "; SameSite=Strict";
          break;
        case "lax":
          str += "; SameSite=Lax";
          break;
        case "strict":
          str += "; SameSite=Strict";
          break;
        case "none":
          str += "; SameSite=None";
          break;
        default:
          throw new TypeError("option sameSite is invalid");
      }
    }
    return str;
  };
  var decode = function(str) {
    return str.indexOf("%") !== -1 ? decodeURIComponent(str) : str;
  };
  var encode2 = function(val) {
    return encodeURIComponent(val);
  };
  var isDate = function(val) {
    return __toString.call(val) === "[object Date]" || val instanceof Date;
  };
  var tryDecode = function(str, decode2) {
    try {
      return decode2(str);
    } catch (e) {
      return str;
    }
  };
  /*!
   * cookie
   * Copyright(c) 2012-2014 Roman Shtylman
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  exports.parse = parse;
  exports.serialize = serialize;
  var __toString = Object.prototype.toString;
  var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
});

// node_modules/vary/index.js
var require_vary = __commonJS((exports, module) => {
  var append = function(header, field) {
    if (typeof header !== "string") {
      throw new TypeError("header argument is required");
    }
    if (!field) {
      throw new TypeError("field argument is required");
    }
    var fields = !Array.isArray(field) ? parse(String(field)) : field;
    for (var j = 0;j < fields.length; j++) {
      if (!FIELD_NAME_REGEXP.test(fields[j])) {
        throw new TypeError("field argument contains an invalid header name");
      }
    }
    if (header === "*") {
      return header;
    }
    var val = header;
    var vals = parse(header.toLowerCase());
    if (fields.indexOf("*") !== -1 || vals.indexOf("*") !== -1) {
      return "*";
    }
    for (var i = 0;i < fields.length; i++) {
      var fld = fields[i].toLowerCase();
      if (vals.indexOf(fld) === -1) {
        vals.push(fld);
        val = val ? val + ", " + fields[i] : fields[i];
      }
    }
    return val;
  };
  var parse = function(header) {
    var end = 0;
    var list = [];
    var start = 0;
    for (var i = 0, len = header.length;i < len; i++) {
      switch (header.charCodeAt(i)) {
        case 32:
          if (start === end) {
            start = end = i + 1;
          }
          break;
        case 44:
          list.push(header.substring(start, end));
          start = end = i + 1;
          break;
        default:
          end = i + 1;
          break;
      }
    }
    list.push(header.substring(start, end));
    return list;
  };
  var vary = function(res, field) {
    if (!res || !res.getHeader || !res.setHeader) {
      throw new TypeError("res argument is required");
    }
    var val = res.getHeader("Vary") || "";
    var header = Array.isArray(val) ? val.join(", ") : String(val);
    if (val = append(header, field)) {
      res.setHeader("Vary", val);
    }
  };
  /*!
   * vary
   * Copyright(c) 2014-2017 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = vary;
  module.exports.append = append;
  var FIELD_NAME_REGEXP = /^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;
});

// node_modules/express/lib/response.js
var require_response = __commonJS((exports, module) => {
  var sendfile = function(res2, file, options, callback) {
    var done = false;
    var streaming;
    function onaborted() {
      if (done)
        return;
      done = true;
      var err = new Error("Request aborted");
      err.code = "ECONNABORTED";
      callback(err);
    }
    function ondirectory() {
      if (done)
        return;
      done = true;
      var err = new Error("EISDIR, read");
      err.code = "EISDIR";
      callback(err);
    }
    function onerror(err) {
      if (done)
        return;
      done = true;
      callback(err);
    }
    function onend() {
      if (done)
        return;
      done = true;
      callback();
    }
    function onfile() {
      streaming = false;
    }
    function onfinish(err) {
      if (err && err.code === "ECONNRESET")
        return onaborted();
      if (err)
        return onerror(err);
      if (done)
        return;
      setImmediate(function() {
        if (streaming !== false && !done) {
          onaborted();
          return;
        }
        if (done)
          return;
        done = true;
        callback();
      });
    }
    function onstream() {
      streaming = true;
    }
    file.on("directory", ondirectory);
    file.on("end", onend);
    file.on("error", onerror);
    file.on("file", onfile);
    file.on("stream", onstream);
    onFinished(res2, onfinish);
    if (options.headers) {
      file.on("headers", function headers(res3) {
        var obj = options.headers;
        var keys = Object.keys(obj);
        for (var i = 0;i < keys.length; i++) {
          var k = keys[i];
          res3.setHeader(k, obj[k]);
        }
      });
    }
    file.pipe(res2);
  };
  var stringify = function(value, replacer, spaces, escape2) {
    var json = replacer || spaces ? JSON.stringify(value, replacer, spaces) : JSON.stringify(value);
    if (escape2 && typeof json === "string") {
      json = json.replace(/[<>&]/g, function(c) {
        switch (c.charCodeAt(0)) {
          case 60:
            return "\\u003c";
          case 62:
            return "\\u003e";
          case 38:
            return "\\u0026";
          default:
            return c;
        }
      });
    }
    return json;
  };
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var Buffer2 = require_safe_buffer().Buffer;
  var contentDisposition = require_content_disposition();
  var createError = require_http_errors();
  var deprecate = require_depd()("express");
  var encodeUrl = require_encodeurl();
  var escapeHtml = require_escape_html();
  var http = import.meta.require("http");
  var isAbsolute = require_utils2().isAbsolute;
  var onFinished = require_on_finished();
  var path = import.meta.require("path");
  var statuses = require_statuses();
  var merge = require_utils_merge();
  var sign = require_cookie_signature().sign;
  var normalizeType = require_utils2().normalizeType;
  var normalizeTypes = require_utils2().normalizeTypes;
  var setCharset = require_utils2().setCharset;
  var cookie = require_cookie();
  var send = require_send();
  var extname = path.extname;
  var mime2 = send.mime;
  var resolve = path.resolve;
  var vary = require_vary();
  var res = Object.create(http.ServerResponse.prototype);
  module.exports = res;
  var charsetRegExp = /;\s*charset\s*=/;
  res.status = function status(code) {
    if ((typeof code === "string" || Math.floor(code) !== code) && code > 99 && code < 1000) {
      deprecate("res.status(" + JSON.stringify(code) + "): use res.status(" + Math.floor(code) + ") instead");
    }
    this.statusCode = code;
    return this;
  };
  res.links = function(links) {
    var link = this.get("Link") || "";
    if (link)
      link += ", ";
    return this.set("Link", link + Object.keys(links).map(function(rel) {
      return "<" + links[rel] + '>; rel="' + rel + '"';
    }).join(", "));
  };
  res.send = function send(body) {
    var chunk = body;
    var encoding;
    var req = this.req;
    var type;
    var app = this.app;
    if (arguments.length === 2) {
      if (typeof arguments[0] !== "number" && typeof arguments[1] === "number") {
        deprecate("res.send(body, status): Use res.status(status).send(body) instead");
        this.statusCode = arguments[1];
      } else {
        deprecate("res.send(status, body): Use res.status(status).send(body) instead");
        this.statusCode = arguments[0];
        chunk = arguments[1];
      }
    }
    if (typeof chunk === "number" && arguments.length === 1) {
      if (!this.get("Content-Type")) {
        this.type("txt");
      }
      deprecate("res.send(status): Use res.sendStatus(status) instead");
      this.statusCode = chunk;
      chunk = statuses.message[chunk];
    }
    switch (typeof chunk) {
      case "string":
        if (!this.get("Content-Type")) {
          this.type("html");
        }
        break;
      case "boolean":
      case "number":
      case "object":
        if (chunk === null) {
          chunk = "";
        } else if (Buffer2.isBuffer(chunk)) {
          if (!this.get("Content-Type")) {
            this.type("bin");
          }
        } else {
          return this.json(chunk);
        }
        break;
    }
    if (typeof chunk === "string") {
      encoding = "utf8";
      type = this.get("Content-Type");
      if (typeof type === "string") {
        this.set("Content-Type", setCharset(type, "utf-8"));
      }
    }
    var etagFn = app.get("etag fn");
    var generateETag = !this.get("ETag") && typeof etagFn === "function";
    var len;
    if (chunk !== undefined) {
      if (Buffer2.isBuffer(chunk)) {
        len = chunk.length;
      } else if (!generateETag && chunk.length < 1000) {
        len = Buffer2.byteLength(chunk, encoding);
      } else {
        chunk = Buffer2.from(chunk, encoding);
        encoding = undefined;
        len = chunk.length;
      }
      this.set("Content-Length", len);
    }
    var etag;
    if (generateETag && len !== undefined) {
      if (etag = etagFn(chunk, encoding)) {
        this.set("ETag", etag);
      }
    }
    if (req.fresh)
      this.statusCode = 304;
    if (this.statusCode === 204 || this.statusCode === 304) {
      this.removeHeader("Content-Type");
      this.removeHeader("Content-Length");
      this.removeHeader("Transfer-Encoding");
      chunk = "";
    }
    if (this.statusCode === 205) {
      this.set("Content-Length", "0");
      this.removeHeader("Transfer-Encoding");
      chunk = "";
    }
    if (req.method === "HEAD") {
      this.end();
    } else {
      this.end(chunk, encoding);
    }
    return this;
  };
  res.json = function json(obj) {
    var val = obj;
    if (arguments.length === 2) {
      if (typeof arguments[1] === "number") {
        deprecate("res.json(obj, status): Use res.status(status).json(obj) instead");
        this.statusCode = arguments[1];
      } else {
        deprecate("res.json(status, obj): Use res.status(status).json(obj) instead");
        this.statusCode = arguments[0];
        val = arguments[1];
      }
    }
    var app = this.app;
    var escape2 = app.get("json escape");
    var replacer = app.get("json replacer");
    var spaces = app.get("json spaces");
    var body = stringify(val, replacer, spaces, escape2);
    if (!this.get("Content-Type")) {
      this.set("Content-Type", "application/json");
    }
    return this.send(body);
  };
  res.jsonp = function jsonp(obj) {
    var val = obj;
    if (arguments.length === 2) {
      if (typeof arguments[1] === "number") {
        deprecate("res.jsonp(obj, status): Use res.status(status).jsonp(obj) instead");
        this.statusCode = arguments[1];
      } else {
        deprecate("res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead");
        this.statusCode = arguments[0];
        val = arguments[1];
      }
    }
    var app = this.app;
    var escape2 = app.get("json escape");
    var replacer = app.get("json replacer");
    var spaces = app.get("json spaces");
    var body = stringify(val, replacer, spaces, escape2);
    var callback = this.req.query[app.get("jsonp callback name")];
    if (!this.get("Content-Type")) {
      this.set("X-Content-Type-Options", "nosniff");
      this.set("Content-Type", "application/json");
    }
    if (Array.isArray(callback)) {
      callback = callback[0];
    }
    if (typeof callback === "string" && callback.length !== 0) {
      this.set("X-Content-Type-Options", "nosniff");
      this.set("Content-Type", "text/javascript");
      callback = callback.replace(/[^\[\]\w$.]/g, "");
      if (body === undefined) {
        body = "";
      } else if (typeof body === "string") {
        body = body.replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
      }
      body = "/**/ typeof " + callback + " === \'function\' && " + callback + "(" + body + ");";
    }
    return this.send(body);
  };
  res.sendStatus = function sendStatus(statusCode) {
    var body = statuses.message[statusCode] || String(statusCode);
    this.statusCode = statusCode;
    this.type("txt");
    return this.send(body);
  };
  res.sendFile = function sendFile(path2, options, callback) {
    var done = callback;
    var req = this.req;
    var res2 = this;
    var next = req.next;
    var opts = options || {};
    if (!path2) {
      throw new TypeError("path argument is required to res.sendFile");
    }
    if (typeof path2 !== "string") {
      throw new TypeError("path must be a string to res.sendFile");
    }
    if (typeof options === "function") {
      done = options;
      opts = {};
    }
    if (!opts.root && !isAbsolute(path2)) {
      throw new TypeError("path must be absolute or specify root to res.sendFile");
    }
    var pathname = encodeURI(path2);
    var file = send(req, pathname, opts);
    sendfile(res2, file, opts, function(err) {
      if (done)
        return done(err);
      if (err && err.code === "EISDIR")
        return next();
      if (err && err.code !== "ECONNABORTED" && err.syscall !== "write") {
        next(err);
      }
    });
  };
  res.sendfile = function(path2, options, callback) {
    var done = callback;
    var req = this.req;
    var res2 = this;
    var next = req.next;
    var opts = options || {};
    if (typeof options === "function") {
      done = options;
      opts = {};
    }
    var file = send(req, path2, opts);
    sendfile(res2, file, opts, function(err) {
      if (done)
        return done(err);
      if (err && err.code === "EISDIR")
        return next();
      if (err && err.code !== "ECONNABORTED" && err.syscall !== "write") {
        next(err);
      }
    });
  };
  res.sendfile = deprecate.function(res.sendfile, "res.sendfile: Use res.sendFile instead");
  res.download = function download(path2, filename, options, callback) {
    var done = callback;
    var name = filename;
    var opts = options || null;
    if (typeof filename === "function") {
      done = filename;
      name = null;
      opts = null;
    } else if (typeof options === "function") {
      done = options;
      opts = null;
    }
    if (typeof filename === "object" && (typeof options === "function" || options === undefined)) {
      name = null;
      opts = filename;
    }
    var headers = {
      "Content-Disposition": contentDisposition(name || path2)
    };
    if (opts && opts.headers) {
      var keys = Object.keys(opts.headers);
      for (var i = 0;i < keys.length; i++) {
        var key = keys[i];
        if (key.toLowerCase() !== "content-disposition") {
          headers[key] = opts.headers[key];
        }
      }
    }
    opts = Object.create(opts);
    opts.headers = headers;
    var fullPath = !opts.root ? resolve(path2) : path2;
    return this.sendFile(fullPath, opts, done);
  };
  res.contentType = res.type = function contentType(type) {
    var ct = type.indexOf("/") === -1 ? mime2.lookup(type) : type;
    return this.set("Content-Type", ct);
  };
  res.format = function(obj) {
    var req = this.req;
    var next = req.next;
    var keys = Object.keys(obj).filter(function(v) {
      return v !== "default";
    });
    var key = keys.length > 0 ? req.accepts(keys) : false;
    this.vary("Accept");
    if (key) {
      this.set("Content-Type", normalizeType(key).value);
      obj[key](req, this, next);
    } else if (obj.default) {
      obj.default(req, this, next);
    } else {
      next(createError(406, {
        types: normalizeTypes(keys).map(function(o) {
          return o.value;
        })
      }));
    }
    return this;
  };
  res.attachment = function attachment(filename) {
    if (filename) {
      this.type(extname(filename));
    }
    this.set("Content-Disposition", contentDisposition(filename));
    return this;
  };
  res.append = function append(field, val) {
    var prev = this.get(field);
    var value = val;
    if (prev) {
      value = Array.isArray(prev) ? prev.concat(val) : Array.isArray(val) ? [prev].concat(val) : [prev, val];
    }
    return this.set(field, value);
  };
  res.set = res.header = function header(field, val) {
    if (arguments.length === 2) {
      var value = Array.isArray(val) ? val.map(String) : String(val);
      if (field.toLowerCase() === "content-type") {
        if (Array.isArray(value)) {
          throw new TypeError("Content-Type cannot be set to an Array");
        }
        if (!charsetRegExp.test(value)) {
          var charset = mime2.charsets.lookup(value.split(";")[0]);
          if (charset)
            value += "; charset=" + charset.toLowerCase();
        }
      }
      this.setHeader(field, value);
    } else {
      for (var key in field) {
        this.set(key, field[key]);
      }
    }
    return this;
  };
  res.get = function(field) {
    return this.getHeader(field);
  };
  res.clearCookie = function clearCookie(name, options) {
    var opts = merge({ expires: new Date(1), path: "/" }, options);
    return this.cookie(name, "", opts);
  };
  res.cookie = function(name, value, options) {
    var opts = merge({}, options);
    var secret = this.req.secret;
    var signed = opts.signed;
    if (signed && !secret) {
      throw new Error('cookieParser("secret") required for signed cookies');
    }
    var val = typeof value === "object" ? "j:" + JSON.stringify(value) : String(value);
    if (signed) {
      val = "s:" + sign(val, secret);
    }
    if (opts.maxAge != null) {
      var maxAge = opts.maxAge - 0;
      if (!isNaN(maxAge)) {
        opts.expires = new Date(Date.now() + maxAge);
        opts.maxAge = Math.floor(maxAge / 1000);
      }
    }
    if (opts.path == null) {
      opts.path = "/";
    }
    this.append("Set-Cookie", cookie.serialize(name, String(val), opts));
    return this;
  };
  res.location = function location(url) {
    var loc = url;
    if (url === "back") {
      loc = this.req.get("Referrer") || "/";
    }
    return this.set("Location", encodeUrl(loc));
  };
  res.redirect = function redirect(url) {
    var address = url;
    var body;
    var status = 302;
    if (arguments.length === 2) {
      if (typeof arguments[0] === "number") {
        status = arguments[0];
        address = arguments[1];
      } else {
        deprecate("res.redirect(url, status): Use res.redirect(status, url) instead");
        status = arguments[1];
      }
    }
    address = this.location(address).get("Location");
    this.format({
      text: function() {
        body = statuses.message[status] + ". Redirecting to " + address;
      },
      html: function() {
        var u = escapeHtml(address);
        body = "<p>" + statuses.message[status] + '. Redirecting to <a href="' + u + '">' + u + "</a></p>";
      },
      default: function() {
        body = "";
      }
    });
    this.statusCode = status;
    this.set("Content-Length", Buffer2.byteLength(body));
    if (this.req.method === "HEAD") {
      this.end();
    } else {
      this.end(body);
    }
  };
  res.vary = function(field) {
    if (!field || Array.isArray(field) && !field.length) {
      deprecate("res.vary(): Provide a field name");
      return this;
    }
    vary(this, field);
    return this;
  };
  res.render = function render(view, options, callback) {
    var app = this.req.app;
    var done = callback;
    var opts = options || {};
    var req = this.req;
    var self2 = this;
    if (typeof options === "function") {
      done = options;
      opts = {};
    }
    opts._locals = self2.locals;
    done = done || function(err, str) {
      if (err)
        return req.next(err);
      self2.send(str);
    };
    app.render(view, opts, done);
  };
});

// node_modules/serve-static/index.js
var require_serve_static = __commonJS((exports, module) => {
  var serveStatic = function(root, options) {
    if (!root) {
      throw new TypeError("root path required");
    }
    if (typeof root !== "string") {
      throw new TypeError("root path must be a string");
    }
    var opts = Object.create(options || null);
    var fallthrough = opts.fallthrough !== false;
    var redirect = opts.redirect !== false;
    var setHeaders = opts.setHeaders;
    if (setHeaders && typeof setHeaders !== "function") {
      throw new TypeError("option setHeaders must be function");
    }
    opts.maxage = opts.maxage || opts.maxAge || 0;
    opts.root = resolve(root);
    var onDirectory = redirect ? createRedirectDirectoryListener() : createNotFoundDirectoryListener();
    return function serveStatic(req, res, next) {
      if (req.method !== "GET" && req.method !== "HEAD") {
        if (fallthrough) {
          return next();
        }
        res.statusCode = 405;
        res.setHeader("Allow", "GET, HEAD");
        res.setHeader("Content-Length", "0");
        res.end();
        return;
      }
      var forwardError = !fallthrough;
      var originalUrl = parseUrl.original(req);
      var path = parseUrl(req).pathname;
      if (path === "/" && originalUrl.pathname.substr(-1) !== "/") {
        path = "";
      }
      var stream = send(req, path, opts);
      stream.on("directory", onDirectory);
      if (setHeaders) {
        stream.on("headers", setHeaders);
      }
      if (fallthrough) {
        stream.on("file", function onFile() {
          forwardError = true;
        });
      }
      stream.on("error", function error(err) {
        if (forwardError || !(err.statusCode < 500)) {
          next(err);
          return;
        }
        next();
      });
      stream.pipe(res);
    };
  };
  var collapseLeadingSlashes = function(str) {
    for (var i = 0;i < str.length; i++) {
      if (str.charCodeAt(i) !== 47) {
        break;
      }
    }
    return i > 1 ? "/" + str.substr(i) : str;
  };
  var createHtmlDocument = function(title, body) {
    return '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>' + title + "</title>\n</head>\n<body>\n<pre>" + body + "</pre>\n</body>\n</html>\n";
  };
  var createNotFoundDirectoryListener = function() {
    return function notFound() {
      this.error(404);
    };
  };
  var createRedirectDirectoryListener = function() {
    return function redirect(res) {
      if (this.hasTrailingSlash()) {
        this.error(404);
        return;
      }
      var originalUrl = parseUrl.original(this.req);
      originalUrl.path = null;
      originalUrl.pathname = collapseLeadingSlashes(originalUrl.pathname + "/");
      var loc = encodeUrl(url.format(originalUrl));
      var doc = createHtmlDocument("Redirecting", 'Redirecting to <a href="' + escapeHtml(loc) + '">' + escapeHtml(loc) + "</a>");
      res.statusCode = 301;
      res.setHeader("Content-Type", "text/html; charset=UTF-8");
      res.setHeader("Content-Length", Buffer.byteLength(doc));
      res.setHeader("Content-Security-Policy", "default-src 'none'");
      res.setHeader("X-Content-Type-Options", "nosniff");
      res.setHeader("Location", loc);
      res.end(doc);
    };
  };
  /*!
   * serve-static
   * Copyright(c) 2010 Sencha Inc.
   * Copyright(c) 2011 TJ Holowaychuk
   * Copyright(c) 2014-2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  var encodeUrl = require_encodeurl();
  var escapeHtml = require_escape_html();
  var parseUrl = require_parseurl();
  var resolve = import.meta.require("path").resolve;
  var send = require_send();
  var url = import.meta.require("url");
  module.exports = serveStatic;
  module.exports.mime = send.mime;
});

// node_modules/express/lib/express.js
var require_express = __commonJS((exports, module) => {
  var createApplication = function() {
    var app = function(req2, res2, next) {
      app.handle(req2, res2, next);
    };
    mixin(app, EventEmitter.prototype, false);
    mixin(app, proto, false);
    app.request = Object.create(req, {
      app: { configurable: true, enumerable: true, writable: true, value: app }
    });
    app.response = Object.create(res, {
      app: { configurable: true, enumerable: true, writable: true, value: app }
    });
    app.init();
    return app;
  };
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var bodyParser = require_body_parser();
  var EventEmitter = import.meta.require("events").EventEmitter;
  var mixin = require_merge_descriptors();
  var proto = require_application();
  var Route = require_route();
  var Router = require_router();
  var req = require_request();
  var res = require_response();
  exports = module.exports = createApplication;
  exports.application = proto;
  exports.request = req;
  exports.response = res;
  exports.Route = Route;
  exports.Router = Router;
  exports.json = bodyParser.json;
  exports.query = require_query();
  exports.raw = bodyParser.raw;
  exports.static = require_serve_static();
  exports.text = bodyParser.text;
  exports.urlencoded = bodyParser.urlencoded;
  var removedMiddlewares = [
    "bodyParser",
    "compress",
    "cookieSession",
    "session",
    "logger",
    "cookieParser",
    "favicon",
    "responseTime",
    "errorHandler",
    "timeout",
    "methodOverride",
    "vhost",
    "csrf",
    "directory",
    "limit",
    "multipart",
    "staticCache"
  ];
  removedMiddlewares.forEach(function(name) {
    Object.defineProperty(exports, name, {
      get: function() {
        throw new Error("Most middleware (like " + name + ") is no longer bundled with Express and must be installed separately. Please see https://github.com/senchalabs/connect#middleware.");
      },
      configurable: true
    });
  });
});

// node_modules/express/index.js
var require_express2 = __commonJS((exports, module) => {
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = require_express();
});

// node_modules/playwright-core/lib/utilsBundleImpl/index.js
var require_utilsBundleImpl = __commonJS((exports, module) => {
  var __dirname = "/Users/hottin/project/jwave_playlist/node_modules/playwright-core/lib/utilsBundleImpl";
  var cf = Object.create;
  var Ui = Object.defineProperty;
  var uf = Object.getOwnPropertyDescriptor;
  var ff = Object.getOwnPropertyNames;
  var hf = Object.getPrototypeOf;
  var pf = Object.prototype.hasOwnProperty;
  var y = (t, e) => () => (e || t((e = { exports: {} }).exports, e), e.exports);
  var df = (t, e) => {
    for (var i in e)
      Ui(t, i, { get: e[i], enumerable: true });
  };
  var Fs = (t, e, i, r) => {
    if (e && typeof e == "object" || typeof e == "function")
      for (let n of ff(e))
        !pf.call(t, n) && n !== i && Ui(t, n, { get: () => e[n], enumerable: !(r = uf(e, n)) || r.enumerable });
    return t;
  };
  var Te = (t, e, i) => (i = t != null ? cf(hf(t)) : {}, Fs(e || !t || !t.__esModule ? Ui(i, "default", { value: t, enumerable: true }) : i, t));
  var mf = (t) => Fs(Ui({}, "__esModule", { value: true }), t);
  var Ds = y((X0, Us) => {
    var Ms = {};
    Us.exports = Ms;
    var Ns = { reset: [0, 0], bold: [1, 22], dim: [2, 22], italic: [3, 23], underline: [4, 24], inverse: [7, 27], hidden: [8, 28], strikethrough: [9, 29], black: [30, 39], red: [31, 39], green: [32, 39], yellow: [33, 39], blue: [34, 39], magenta: [35, 39], cyan: [36, 39], white: [37, 39], gray: [90, 39], grey: [90, 39], brightRed: [91, 39], brightGreen: [92, 39], brightYellow: [93, 39], brightBlue: [94, 39], brightMagenta: [95, 39], brightCyan: [96, 39], brightWhite: [97, 39], bgBlack: [40, 49], bgRed: [41, 49], bgGreen: [42, 49], bgYellow: [43, 49], bgBlue: [44, 49], bgMagenta: [45, 49], bgCyan: [46, 49], bgWhite: [47, 49], bgGray: [100, 49], bgGrey: [100, 49], bgBrightRed: [101, 49], bgBrightGreen: [102, 49], bgBrightYellow: [103, 49], bgBrightBlue: [104, 49], bgBrightMagenta: [105, 49], bgBrightCyan: [106, 49], bgBrightWhite: [107, 49], blackBG: [40, 49], redBG: [41, 49], greenBG: [42, 49], yellowBG: [43, 49], blueBG: [44, 49], magentaBG: [45, 49], cyanBG: [46, 49], whiteBG: [47, 49] };
    Object.keys(Ns).forEach(function(t) {
      var e = Ns[t], i = Ms[t] = [];
      i.open = "\x1B[" + e[0] + "m", i.close = "\x1B[" + e[1] + "m";
    });
  });
  var qs = y((J0, js) => {
    js.exports = function(t, e) {
      e = e || process.argv;
      var i = e.indexOf("--"), r = /^-{1,2}/.test(t) ? "" : "--", n = e.indexOf(r + t);
      return n !== -1 && (i === -1 ? true : n < i);
    };
  });
  var Vs = y((Q0, Hs) => {
    var gf = import.meta.require("os"), Qe = qs(), je = process.env, Mt = undefined;
    Qe("no-color") || Qe("no-colors") || Qe("color=false") ? Mt = false : (Qe("color") || Qe("colors") || Qe("color=true") || Qe("color=always")) && (Mt = true);
    "FORCE_COLOR" in je && (Mt = je.FORCE_COLOR.length === 0 || parseInt(je.FORCE_COLOR, 10) !== 0);
    function vf(t) {
      return t === 0 ? false : { level: t, hasBasic: true, has256: t >= 2, has16m: t >= 3 };
    }
    function xf(t) {
      if (Mt === false)
        return 0;
      if (Qe("color=16m") || Qe("color=full") || Qe("color=truecolor"))
        return 3;
      if (Qe("color=256"))
        return 2;
      if (t && !t.isTTY && Mt !== true)
        return 0;
      var e = Mt ? 1 : 0;
      if (process.platform === "win32") {
        var i = gf.release().split(".");
        return Number(process.versions.node.split(".")[0]) >= 8 && Number(i[0]) >= 10 && Number(i[2]) >= 10586 ? Number(i[2]) >= 14931 ? 3 : 2 : 1;
      }
      if ("CI" in je)
        return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some(function(n) {
          return n in je;
        }) || je.CI_NAME === "codeship" ? 1 : e;
      if ("TEAMCITY_VERSION" in je)
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(je.TEAMCITY_VERSION) ? 1 : 0;
      if ("TERM_PROGRAM" in je) {
        var r = parseInt((je.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (je.TERM_PROGRAM) {
          case "iTerm.app":
            return r >= 3 ? 3 : 2;
          case "Hyper":
            return 3;
          case "Apple_Terminal":
            return 2;
        }
      }
      return /-256(color)?$/i.test(je.TERM) ? 2 : /^screen|^xterm|^vt100|^rxvt|color|ansi|cygwin|linux/i.test(je.TERM) || ("COLORTERM" in je) ? 1 : (je.TERM === "dumb", e);
    }
    function br(t) {
      var e = xf(t);
      return vf(e);
    }
    Hs.exports = { supportsColor: br, stdout: br(process.stdout), stderr: br(process.stderr) };
  });
  var Gs = y((eg, $s) => {
    $s.exports = function(e, i) {
      var r = "";
      e = e || "Run the trap, drop the bass", e = e.split("");
      var n = { a: ["@", "\u0104", "\u023A", "\u0245", "\u0394", "\u039B", "\u0414"], b: ["\xDF", "\u0181", "\u0243", "\u026E", "\u03B2", "\u0E3F"], c: ["\xA9", "\u023B", "\u03FE"], d: ["\xD0", "\u018A", "\u0500", "\u0501", "\u0502", "\u0503"], e: ["\xCB", "\u0115", "\u018E", "\u0258", "\u03A3", "\u03BE", "\u04BC", "\u0A6C"], f: ["\u04FA"], g: ["\u0262"], h: ["\u0126", "\u0195", "\u04A2", "\u04BA", "\u04C7", "\u050A"], i: ["\u0F0F"], j: ["\u0134"], k: ["\u0138", "\u04A0", "\u04C3", "\u051E"], l: ["\u0139"], m: ["\u028D", "\u04CD", "\u04CE", "\u0520", "\u0521", "\u0D69"], n: ["\xD1", "\u014B", "\u019D", "\u0376", "\u03A0", "\u048A"], o: ["\xD8", "\xF5", "\xF8", "\u01FE", "\u0298", "\u047A", "\u05DD", "\u06DD", "\u0E4F"], p: ["\u01F7", "\u048E"], q: ["\u09CD"], r: ["\xAE", "\u01A6", "\u0210", "\u024C", "\u0280", "\u042F"], s: ["\xA7", "\u03DE", "\u03DF", "\u03E8"], t: ["\u0141", "\u0166", "\u0373"], u: ["\u01B1", "\u054D"], v: ["\u05D8"], w: ["\u0428", "\u0460", "\u047C", "\u0D70"], x: ["\u04B2", "\u04FE", "\u04FC", "\u04FD"], y: ["\xA5", "\u04B0", "\u04CB"], z: ["\u01B5", "\u0240"] };
      return e.forEach(function(s) {
        s = s.toLowerCase();
        var o = n[s] || [" "], l = Math.floor(Math.random() * o.length);
        typeof n[s] != "undefined" ? r += n[s][l] : r += s;
      }), r;
    };
  });
  var Ws = y((tg, zs) => {
    zs.exports = function(e, i) {
      e = e || "   he is here   ";
      var r = { up: ["\u030D", "\u030E", "\u0304", "\u0305", "\u033F", "\u0311", "\u0306", "\u0310", "\u0352", "\u0357", "\u0351", "\u0307", "\u0308", "\u030A", "\u0342", "\u0313", "\u0308", "\u034A", "\u034B", "\u034C", "\u0303", "\u0302", "\u030C", "\u0350", "\u0300", "\u0301", "\u030B", "\u030F", "\u0312", "\u0313", "\u0314", "\u033D", "\u0309", "\u0363", "\u0364", "\u0365", "\u0366", "\u0367", "\u0368", "\u0369", "\u036A", "\u036B", "\u036C", "\u036D", "\u036E", "\u036F", "\u033E", "\u035B", "\u0346", "\u031A"], down: ["\u0316", "\u0317", "\u0318", "\u0319", "\u031C", "\u031D", "\u031E", "\u031F", "\u0320", "\u0324", "\u0325", "\u0326", "\u0329", "\u032A", "\u032B", "\u032C", "\u032D", "\u032E", "\u032F", "\u0330", "\u0331", "\u0332", "\u0333", "\u0339", "\u033A", "\u033B", "\u033C", "\u0345", "\u0347", "\u0348", "\u0349", "\u034D", "\u034E", "\u0353", "\u0354", "\u0355", "\u0356", "\u0359", "\u035A", "\u0323"], mid: ["\u0315", "\u031B", "\u0300", "\u0301", "\u0358", "\u0321", "\u0322", "\u0327", "\u0328", "\u0334", "\u0335", "\u0336", "\u035C", "\u035D", "\u035E", "\u035F", "\u0360", "\u0362", "\u0338", "\u0337", "\u0361", " \u0489"] }, n = [].concat(r.up, r.down, r.mid);
      function s(a) {
        var c = Math.floor(Math.random() * a);
        return c;
      }
      function o(a) {
        var c = false;
        return n.filter(function(u) {
          c = u === a;
        }), c;
      }
      function l(a, c) {
        var u = "", f, h;
        c = c || {}, c.up = typeof c.up != "undefined" ? c.up : true, c.mid = typeof c.mid != "undefined" ? c.mid : true, c.down = typeof c.down != "undefined" ? c.down : true, c.size = typeof c.size != "undefined" ? c.size : "maxi", a = a.split("");
        for (h in a)
          if (!o(h)) {
            switch (u = u + a[h], f = { up: 0, down: 0, mid: 0 }, c.size) {
              case "mini":
                f.up = s(8), f.mid = s(2), f.down = s(8);
                break;
              case "maxi":
                f.up = s(16) + 3, f.mid = s(4) + 1, f.down = s(64) + 3;
                break;
              default:
                f.up = s(8) + 1, f.mid = s(6) / 2, f.down = s(8) + 1;
                break;
            }
            var p = ["up", "mid", "down"];
            for (var d in p)
              for (var m = p[d], v = 0;v <= f[m]; v++)
                c[m] && (u = u + r[m][s(r[m].length)]);
          }
        return u;
      }
      return l(e, i);
    };
  });
  var Ks = y((ig, Ys) => {
    Ys.exports = function(t) {
      return function(e, i, r) {
        if (e === " ")
          return e;
        switch (i % 3) {
          case 0:
            return t.red(e);
          case 1:
            return t.white(e);
          case 2:
            return t.blue(e);
        }
      };
    };
  });
  var Xs = y((rg, Zs) => {
    Zs.exports = function(t) {
      return function(e, i, r) {
        return i % 2 === 0 ? e : t.inverse(e);
      };
    };
  });
  var Qs = y((ng, Js) => {
    Js.exports = function(t) {
      var e = ["red", "yellow", "green", "blue", "magenta"];
      return function(i, r, n) {
        return i === " " ? i : t[e[r++ % e.length]](i);
      };
    };
  });
  var to = y((sg, eo) => {
    eo.exports = function(t) {
      var e = ["underline", "inverse", "grey", "yellow", "red", "green", "blue", "white", "cyan", "magenta", "brightYellow", "brightRed", "brightGreen", "brightBlue", "brightWhite", "brightCyan", "brightMagenta"];
      return function(i, r, n) {
        return i === " " ? i : t[e[Math.round(Math.random() * (e.length - 2))]](i);
      };
    };
  });
  var ao = y((ag, oo) => {
    var oe = {};
    oo.exports = oe;
    oe.themes = {};
    var _f = import.meta.require("util"), bt = oe.styles = Ds(), ro = Object.defineProperties, yf = new RegExp(/[\r\n]+/g);
    oe.supportsColor = Vs().supportsColor;
    typeof oe.enabled == "undefined" && (oe.enabled = oe.supportsColor() !== false);
    oe.enable = function() {
      oe.enabled = true;
    };
    oe.disable = function() {
      oe.enabled = false;
    };
    oe.stripColors = oe.strip = function(t) {
      return ("" + t).replace(/\x1B\[\d+m/g, "");
    };
    var og = oe.stylize = function(e, i) {
      if (!oe.enabled)
        return e + "";
      var r = bt[i];
      return !r && i in oe ? oe[i](e) : r.open + e + r.close;
    }, bf = /[|\\{}()[\]^$+*?.]/g, wf = function(t) {
      if (typeof t != "string")
        throw new TypeError("Expected a string");
      return t.replace(bf, "\\$&");
    };
    function no(t) {
      var e = function i() {
        return Sf.apply(i, arguments);
      };
      return e._styles = t, e.__proto__ = Ef, e;
    }
    var so = function() {
      var t = {};
      return bt.grey = bt.gray, Object.keys(bt).forEach(function(e) {
        bt[e].closeRe = new RegExp(wf(bt[e].close), "g"), t[e] = { get: function() {
          return no(this._styles.concat(e));
        } };
      }), t;
    }(), Ef = ro(function() {
    }, so);
    function Sf() {
      var t = Array.prototype.slice.call(arguments), e = t.map(function(o) {
        return o != null && o.constructor === String ? o : _f.inspect(o);
      }).join(" ");
      if (!oe.enabled || !e)
        return e;
      for (var i = e.indexOf(`
`) != -1, r = this._styles, n = r.length;n--; ) {
        var s = bt[r[n]];
        e = s.open + e.replace(s.closeRe, s.open) + s.close, i && (e = e.replace(yf, function(o) {
          return s.close + o + s.open;
        }));
      }
      return e;
    }
    oe.setTheme = function(t) {
      if (typeof t == "string") {
        console.log("colors.setTheme now only accepts an object, not a string.  If you are trying to set a theme from a file, it is now your (the caller's) responsibility to require the file.  The old syntax looked like colors.setTheme(__dirname + '/../themes/generic-logging.js'); The new syntax looks like colors.setTheme(require(__dirname + '/../themes/generic-logging.js'));");
        return;
      }
      for (var e in t)
        (function(i) {
          oe[i] = function(r) {
            if (typeof t[i] == "object") {
              var n = r;
              for (var s in t[i])
                n = oe[t[i][s]](n);
              return n;
            }
            return oe[t[i]](r);
          };
        })(e);
    };
    function kf() {
      var t = {};
      return Object.keys(so).forEach(function(e) {
        t[e] = { get: function() {
          return no([e]);
        } };
      }), t;
    }
    var Cf = function(e, i) {
      var r = i.split("");
      return r = r.map(e), r.join("");
    };
    oe.trap = Gs();
    oe.zalgo = Ws();
    oe.maps = {};
    oe.maps.america = Ks()(oe);
    oe.maps.zebra = Xs()(oe);
    oe.maps.rainbow = Qs()(oe);
    oe.maps.random = to()(oe);
    for (io in oe.maps)
      (function(t) {
        oe[t] = function(e) {
          return Cf(oe.maps[t], e);
        };
      })(io);
    var io;
    ro(oe, kf());
  });
  var co = y((lg, lo) => {
    var Of = ao();
    lo.exports = Of;
  });
  var fo = y((cg, uo) => {
    var Ut = 1000, Dt = Ut * 60, jt = Dt * 60, wt = jt * 24, If = wt * 7, Tf = wt * 365.25;
    uo.exports = function(t, e) {
      e = e || {};
      var i = typeof t;
      if (i === "string" && t.length > 0)
        return Af(t);
      if (i === "number" && isFinite(t))
        return e.long ? Bf(t) : Rf(t);
      throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(t));
    };
    function Af(t) {
      if (t = String(t), !(t.length > 100)) {
        var e = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);
        if (e) {
          var i = parseFloat(e[1]), r = (e[2] || "ms").toLowerCase();
          switch (r) {
            case "years":
            case "year":
            case "yrs":
            case "yr":
            case "y":
              return i * Tf;
            case "weeks":
            case "week":
            case "w":
              return i * If;
            case "days":
            case "day":
            case "d":
              return i * wt;
            case "hours":
            case "hour":
            case "hrs":
            case "hr":
            case "h":
              return i * jt;
            case "minutes":
            case "minute":
            case "mins":
            case "min":
            case "m":
              return i * Dt;
            case "seconds":
            case "second":
            case "secs":
            case "sec":
            case "s":
              return i * Ut;
            case "milliseconds":
            case "millisecond":
            case "msecs":
            case "msec":
            case "ms":
              return i;
            default:
              return;
          }
        }
      }
    }
    function Rf(t) {
      var e = Math.abs(t);
      return e >= wt ? Math.round(t / wt) + "d" : e >= jt ? Math.round(t / jt) + "h" : e >= Dt ? Math.round(t / Dt) + "m" : e >= Ut ? Math.round(t / Ut) + "s" : t + "ms";
    }
    function Bf(t) {
      var e = Math.abs(t);
      return e >= wt ? Di(t, e, wt, "day") : e >= jt ? Di(t, e, jt, "hour") : e >= Dt ? Di(t, e, Dt, "minute") : e >= Ut ? Di(t, e, Ut, "second") : t + " ms";
    }
    function Di(t, e, i, r) {
      var n = e >= i * 1.5;
      return Math.round(t / i) + " " + r + (n ? "s" : "");
    }
  });
  var wr = y((ug, ho) => {
    function Lf(t) {
      i.debug = i, i.default = i, i.coerce = a, i.disable = s, i.enable = n, i.enabled = o, i.humanize = fo(), i.destroy = c, Object.keys(t).forEach((u) => {
        i[u] = t[u];
      }), i.names = [], i.skips = [], i.formatters = {};
      function e(u) {
        let f = 0;
        for (let h = 0;h < u.length; h++)
          f = (f << 5) - f + u.charCodeAt(h), f |= 0;
        return i.colors[Math.abs(f) % i.colors.length];
      }
      i.selectColor = e;
      function i(u) {
        let f, h = null, p, d;
        function m(...v) {
          if (!m.enabled)
            return;
          let E = m, I = Number(new Date), w = I - (f || I);
          E.diff = w, E.prev = f, E.curr = I, f = I, v[0] = i.coerce(v[0]), typeof v[0] != "string" && v.unshift("%O");
          let C = 0;
          v[0] = v[0].replace(/%([a-zA-Z%])/g, ($, k) => {
            if ($ === "%%")
              return "%";
            C++;
            let U = i.formatters[k];
            if (typeof U == "function") {
              let b = v[C];
              $ = U.call(E, b), v.splice(C, 1), C--;
            }
            return $;
          }), i.formatArgs.call(E, v), (E.log || i.log).apply(E, v);
        }
        return m.namespace = u, m.useColors = i.useColors(), m.color = i.selectColor(u), m.extend = r, m.destroy = i.destroy, Object.defineProperty(m, "enabled", { enumerable: true, configurable: false, get: () => h !== null ? h : (p !== i.namespaces && (p = i.namespaces, d = i.enabled(u)), d), set: (v) => {
          h = v;
        } }), typeof i.init == "function" && i.init(m), m;
      }
      function r(u, f) {
        let h = i(this.namespace + (typeof f == "undefined" ? ":" : f) + u);
        return h.log = this.log, h;
      }
      function n(u) {
        i.save(u), i.namespaces = u, i.names = [], i.skips = [];
        let f, h = (typeof u == "string" ? u : "").split(/[\s,]+/), p = h.length;
        for (f = 0;f < p; f++)
          h[f] && (u = h[f].replace(/\*/g, ".*?"), u[0] === "-" ? i.skips.push(new RegExp("^" + u.slice(1) + "$")) : i.names.push(new RegExp("^" + u + "$")));
      }
      function s() {
        let u = [...i.names.map(l), ...i.skips.map(l).map((f) => "-" + f)].join(",");
        return i.enable(""), u;
      }
      function o(u) {
        if (u[u.length - 1] === "*")
          return true;
        let f, h;
        for (f = 0, h = i.skips.length;f < h; f++)
          if (i.skips[f].test(u))
            return false;
        for (f = 0, h = i.names.length;f < h; f++)
          if (i.names[f].test(u))
            return true;
        return false;
      }
      function l(u) {
        return u.toString().substring(2, u.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function a(u) {
        return u instanceof Error ? u.stack || u.message : u;
      }
      function c() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      return i.enable(i.load()), i;
    }
    ho.exports = Lf;
  });
  var po = y(($e, ji) => {
    $e.formatArgs = Ff;
    $e.save = Nf;
    $e.load = Mf;
    $e.useColors = Pf;
    $e.storage = Uf();
    $e.destroy = (() => {
      let t = false;
      return () => {
        t || (t = true, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
      };
    })();
    $e.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"];
    function Pf() {
      return typeof window != "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs) ? true : typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/) ? false : typeof document != "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window != "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function Ff(t) {
      if (t[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + t[0] + (this.useColors ? "%c " : " ") + "+" + ji.exports.humanize(this.diff), !this.useColors)
        return;
      let e = "color: " + this.color;
      t.splice(1, 0, e, "color: inherit");
      let i = 0, r = 0;
      t[0].replace(/%[a-zA-Z%]/g, (n) => {
        n !== "%%" && (i++, n === "%c" && (r = i));
      }), t.splice(r, 0, e);
    }
    $e.log = console.debug || console.log || (() => {
    });
    function Nf(t) {
      try {
        t ? $e.storage.setItem("debug", t) : $e.storage.removeItem("debug");
      } catch {
      }
    }
    function Mf() {
      let t;
      try {
        t = $e.storage.getItem("debug");
      } catch {
      }
      return !t && typeof process != "undefined" && "env" in process && (t = process.env.DEBUG), t;
    }
    function Uf() {
      try {
        return localStorage;
      } catch {
      }
    }
    ji.exports = wr()($e);
    var { formatters: Df } = ji.exports;
    Df.j = function(t) {
      try {
        return JSON.stringify(t);
      } catch (e) {
        return "[UnexpectedJSONParseError]: " + e.message;
      }
    };
  });
  var go = y((fg, mo) => {
    mo.exports = (t, e) => {
      e = e || process.argv;
      let i = t.startsWith("-") ? "" : t.length === 1 ? "-" : "--", r = e.indexOf(i + t), n = e.indexOf("--");
      return r !== -1 && (n === -1 ? true : r < n);
    };
  });
  var xo = y((hg, vo) => {
    var jf = import.meta.require("os"), et = go(), Me = process.env, qt;
    et("no-color") || et("no-colors") || et("color=false") ? qt = false : (et("color") || et("colors") || et("color=true") || et("color=always")) && (qt = true);
    "FORCE_COLOR" in Me && (qt = Me.FORCE_COLOR.length === 0 || parseInt(Me.FORCE_COLOR, 10) !== 0);
    function qf(t) {
      return t === 0 ? false : { level: t, hasBasic: true, has256: t >= 2, has16m: t >= 3 };
    }
    function Hf(t) {
      if (qt === false)
        return 0;
      if (et("color=16m") || et("color=full") || et("color=truecolor"))
        return 3;
      if (et("color=256"))
        return 2;
      if (t && !t.isTTY && qt !== true)
        return 0;
      let e = qt ? 1 : 0;
      if (process.platform === "win32") {
        let i = jf.release().split(".");
        return Number(process.versions.node.split(".")[0]) >= 8 && Number(i[0]) >= 10 && Number(i[2]) >= 10586 ? Number(i[2]) >= 14931 ? 3 : 2 : 1;
      }
      if ("CI" in Me)
        return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some((i) => (i in Me)) || Me.CI_NAME === "codeship" ? 1 : e;
      if ("TEAMCITY_VERSION" in Me)
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(Me.TEAMCITY_VERSION) ? 1 : 0;
      if (Me.COLORTERM === "truecolor")
        return 3;
      if ("TERM_PROGRAM" in Me) {
        let i = parseInt((Me.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (Me.TERM_PROGRAM) {
          case "iTerm.app":
            return i >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      return /-256(color)?$/i.test(Me.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(Me.TERM) || ("COLORTERM" in Me) ? 1 : (Me.TERM === "dumb", e);
    }
    function Er(t) {
      let e = Hf(t);
      return qf(e);
    }
    vo.exports = { supportsColor: Er, stdout: Er(process.stdout), stderr: Er(process.stderr) };
  });
  var yo = y((Pe, Hi) => {
    var Vf = import.meta.require("tty"), qi = import.meta.require("util");
    Pe.init = Zf;
    Pe.log = Wf;
    Pe.formatArgs = Gf;
    Pe.save = Yf;
    Pe.load = Kf;
    Pe.useColors = $f;
    Pe.destroy = qi.deprecate(() => {
    }, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    Pe.colors = [6, 2, 3, 4, 5, 1];
    try {
      let t = xo();
      t && (t.stderr || t).level >= 2 && (Pe.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221]);
    } catch {
    }
    Pe.inspectOpts = Object.keys(process.env).filter((t) => /^debug_/i.test(t)).reduce((t, e) => {
      let i = e.substring(6).toLowerCase().replace(/_([a-z])/g, (n, s) => s.toUpperCase()), r = process.env[e];
      return /^(yes|on|true|enabled)$/i.test(r) ? r = true : /^(no|off|false|disabled)$/i.test(r) ? r = false : r === "null" ? r = null : r = Number(r), t[i] = r, t;
    }, {});
    function $f() {
      return "colors" in Pe.inspectOpts ? !!Pe.inspectOpts.colors : Vf.isatty(process.stderr.fd);
    }
    function Gf(t) {
      let { namespace: e, useColors: i } = this;
      if (i) {
        let r = this.color, n = "\x1B[3" + (r < 8 ? r : "8;5;" + r), s = `  ${n};1m${e} \x1B[0m`;
        t[0] = s + t[0].split(`
`).join(`
` + s), t.push(n + "m+" + Hi.exports.humanize(this.diff) + "\x1B[0m");
      } else
        t[0] = zf() + e + " " + t[0];
    }
    function zf() {
      return Pe.inspectOpts.hideDate ? "" : new Date().toISOString() + " ";
    }
    function Wf(...t) {
      return process.stderr.write(qi.format(...t) + `
`);
    }
    function Yf(t) {
      t ? process.env.DEBUG = t : delete process.env.DEBUG;
    }
    function Kf() {
      return process.env.DEBUG;
    }
    function Zf(t) {
      t.inspectOpts = {};
      let e = Object.keys(Pe.inspectOpts);
      for (let i = 0;i < e.length; i++)
        t.inspectOpts[e[i]] = Pe.inspectOpts[e[i]];
    }
    Hi.exports = wr()(Pe);
    var { formatters: _o } = Hi.exports;
    _o.o = function(t) {
      return this.inspectOpts.colors = this.useColors, qi.inspect(t, this.inspectOpts).split(`
`).map((e) => e.trim()).join(" ");
    };
    _o.O = function(t) {
      return this.inspectOpts.colors = this.useColors, qi.inspect(t, this.inspectOpts);
    };
  });
  var Ht = y((pg, Sr) => {
    typeof process == "undefined" || process.type === "renderer" || false || process.__nwjs ? Sr.exports = po() : Sr.exports = yo();
  });
  var wo = y((bo) => {
    var Xf = import.meta.require("url").parse, Jf = { ftp: 21, gopher: 70, http: 80, https: 443, ws: 80, wss: 443 }, Qf = String.prototype.endsWith || function(t) {
      return t.length <= this.length && this.indexOf(t, this.length - t.length) !== -1;
    };
    function eh(t) {
      var e = typeof t == "string" ? Xf(t) : t || {}, i = e.protocol, r = e.host, n = e.port;
      if (typeof r != "string" || !r || typeof i != "string" || (i = i.split(":", 1)[0], r = r.replace(/:\d*$/, ""), n = parseInt(n) || Jf[i] || 0, !th(r, n)))
        return "";
      var s = Vt("npm_config_" + i + "_proxy") || Vt(i + "_proxy") || Vt("npm_config_proxy") || Vt("all_proxy");
      return s && s.indexOf("://") === -1 && (s = i + "://" + s), s;
    }
    function th(t, e) {
      var i = (Vt("npm_config_no_proxy") || Vt("no_proxy")).toLowerCase();
      return i ? i === "*" ? false : i.split(/[,\s]/).every(function(r) {
        if (!r)
          return true;
        var n = r.match(/^(.+):(\d+)$/), s = n ? n[1] : r, o = n ? parseInt(n[2]) : 0;
        return o && o !== e ? true : /^[.*]/.test(s) ? (s.charAt(0) === "*" && (s = s.slice(1)), !Qf.call(t, s)) : t !== s;
      }) : true;
    }
    function Vt(t) {
      return process.env[t.toLowerCase()] || process.env[t.toUpperCase()] || "";
    }
    bo.getProxyForUrl = eh;
  });
  var Eo = y((kr) => {
    Object.defineProperty(kr, "__esModule", { value: true });
    function ih(t) {
      return function(e, i) {
        return new Promise((r, n) => {
          t.call(this, e, i, (s, o) => {
            s ? n(s) : r(o);
          });
        });
      };
    }
    kr.default = ih;
  });
  var Ir = y((Or, ko) => {
    var So = Or && Or.__importDefault || function(t) {
      return t && t.__esModule ? t : { default: t };
    }, rh = import.meta.require("events"), nh = So(Ht()), sh = So(Eo()), gi = nh.default("agent-base");
    function oh(t) {
      return !!t && typeof t.addRequest == "function";
    }
    function Cr() {
      let { stack: t } = new Error;
      return typeof t != "string" ? false : t.split(`
`).some((e) => e.indexOf("(https.js:") !== -1 || e.indexOf("node:https:") !== -1);
    }
    function Vi(t, e) {
      return new Vi.Agent(t, e);
    }
    (function(t) {

      class e extends rh.EventEmitter {
        constructor(r, n) {
          super();
          let s = n;
          typeof r == "function" ? this.callback = r : r && (s = r), this.timeout = null, s && typeof s.timeout == "number" && (this.timeout = s.timeout), this.maxFreeSockets = 1, this.maxSockets = 1, this.maxTotalSockets = 1 / 0, this.sockets = {}, this.freeSockets = {}, this.requests = {}, this.options = {};
        }
        get defaultPort() {
          return typeof this.explicitDefaultPort == "number" ? this.explicitDefaultPort : Cr() ? 443 : 80;
        }
        set defaultPort(r) {
          this.explicitDefaultPort = r;
        }
        get protocol() {
          return typeof this.explicitProtocol == "string" ? this.explicitProtocol : Cr() ? "https:" : "http:";
        }
        set protocol(r) {
          this.explicitProtocol = r;
        }
        callback(r, n, s) {
          throw new Error('"agent-base" has no default implementation, you must subclass and override `callback()`');
        }
        addRequest(r, n) {
          let s = Object.assign({}, n);
          typeof s.secureEndpoint != "boolean" && (s.secureEndpoint = Cr()), s.host == null && (s.host = "localhost"), s.port == null && (s.port = s.secureEndpoint ? 443 : 80), s.protocol == null && (s.protocol = s.secureEndpoint ? "https:" : "http:"), s.host && s.path && delete s.path, delete s.agent, delete s.hostname, delete s._defaultAgent, delete s.defaultPort, delete s.createConnection, r._last = true, r.shouldKeepAlive = false;
          let o = false, l = null, a = s.timeout || this.timeout, c = (p) => {
            r._hadError || (r.emit("error", p), r._hadError = true);
          }, u = () => {
            l = null, o = true;
            let p = new Error(`A "socket" was not created for HTTP request before ${a}ms`);
            p.code = "ETIMEOUT", c(p);
          }, f = (p) => {
            o || (l !== null && (clearTimeout(l), l = null), c(p));
          }, h = (p) => {
            if (o)
              return;
            if (l != null && (clearTimeout(l), l = null), oh(p)) {
              gi("Callback returned another Agent instance %o", p.constructor.name), p.addRequest(r, s);
              return;
            }
            if (p) {
              p.once("free", () => {
                this.freeSocket(p, s);
              }), r.onSocket(p);
              return;
            }
            let d = new Error(`no Duplex stream was returned to agent-base for \`${r.method} ${r.path}\``);
            c(d);
          };
          if (typeof this.callback != "function") {
            c(new Error("`callback` is not defined"));
            return;
          }
          this.promisifiedCallback || (this.callback.length >= 3 ? (gi("Converting legacy callback function to promise"), this.promisifiedCallback = sh.default(this.callback)) : this.promisifiedCallback = this.callback), typeof a == "number" && a > 0 && (l = setTimeout(u, a)), "port" in s && typeof s.port != "number" && (s.port = Number(s.port));
          try {
            gi("Resolving socket for %o request: %o", s.protocol, `${r.method} ${r.path}`), Promise.resolve(this.promisifiedCallback(r, s)).then(h, f);
          } catch (p) {
            Promise.reject(p).catch(f);
          }
        }
        freeSocket(r, n) {
          gi("Freeing socket %o %o", r.constructor.name, n), r.destroy();
        }
        destroy() {
          gi("Destroying agent %o", this.constructor.name);
        }
      }
      t.Agent = e, t.prototype = t.Agent.prototype;
    })(Vi || (Vi = {}));
    ko.exports = Vi;
  });
  var Co = y((xi) => {
    var ah = xi && xi.__importDefault || function(t) {
      return t && t.__esModule ? t : { default: t };
    };
    Object.defineProperty(xi, "__esModule", { value: true });
    var lh = ah(Ht()), vi = lh.default("https-proxy-agent:parse-proxy-response");
    function ch(t) {
      return new Promise((e, i) => {
        let r = 0, n = [];
        function s() {
          let f = t.read();
          f ? u(f) : t.once("readable", s);
        }
        function o() {
          t.removeListener("end", a), t.removeListener("error", c), t.removeListener("close", l), t.removeListener("readable", s);
        }
        function l(f) {
          vi("onclose had error %o", f);
        }
        function a() {
          vi("onend");
        }
        function c(f) {
          o(), vi("onerror %o", f), i(f);
        }
        function u(f) {
          n.push(f), r += f.length;
          let h = Buffer.concat(n, r);
          if (h.indexOf(`\r
\r
`) === -1) {
            vi("have not received end of HTTP headers yet..."), s();
            return;
          }
          let d = h.toString("ascii", 0, h.indexOf(`\r
`)), m = +d.split(" ")[1];
          vi("got proxy server response: %o", d), e({ statusCode: m, buffered: h });
        }
        t.on("error", c), t.on("close", l), t.on("end", a), s();
      });
    }
    xi.default = ch;
  });
  var To = y((Et) => {
    var uh = Et && Et.__awaiter || function(t, e, i, r) {
      function n(s) {
        return s instanceof i ? s : new i(function(o) {
          o(s);
        });
      }
      return new (i || (i = Promise))(function(s, o) {
        function l(u) {
          try {
            c(r.next(u));
          } catch (f) {
            o(f);
          }
        }
        function a(u) {
          try {
            c(r.throw(u));
          } catch (f) {
            o(f);
          }
        }
        function c(u) {
          u.done ? s(u.value) : n(u.value).then(l, a);
        }
        c((r = r.apply(t, e || [])).next());
      });
    }, $t = Et && Et.__importDefault || function(t) {
      return t && t.__esModule ? t : { default: t };
    };
    Object.defineProperty(Et, "__esModule", { value: true });
    var Oo = $t(import.meta.require("net")), Io = $t(import.meta.require("tls")), fh = $t(import.meta.require("url")), hh = $t(import.meta.require("assert")), ph = $t(Ht()), dh = Ir(), mh = $t(Co()), _i = ph.default("https-proxy-agent:agent"), Tr = class extends dh.Agent {
      constructor(e) {
        let i;
        if (typeof e == "string" ? i = fh.default.parse(e) : i = e, !i)
          throw new Error("an HTTP(S) proxy server `host` and `port` must be specified!");
        _i("creating new HttpsProxyAgent instance: %o", i), super(i);
        let r = Object.assign({}, i);
        this.secureProxy = i.secureProxy || xh(r.protocol), r.host = r.hostname || r.host, typeof r.port == "string" && (r.port = parseInt(r.port, 10)), !r.port && r.host && (r.port = this.secureProxy ? 443 : 80), this.secureProxy && !("ALPNProtocols" in r) && (r.ALPNProtocols = ["http 1.1"]), r.host && r.path && (delete r.path, delete r.pathname), this.proxy = r;
      }
      callback(e, i) {
        return uh(this, undefined, undefined, function* () {
          let { proxy: r, secureProxy: n } = this, s;
          n ? (_i("Creating `tls.Socket`: %o", r), s = Io.default.connect(r)) : (_i("Creating `net.Socket`: %o", r), s = Oo.default.connect(r));
          let o = Object.assign({}, r.headers), a = `CONNECT ${`${i.host}:${i.port}`} HTTP/1.1\r
`;
          r.auth && (o["Proxy-Authorization"] = `Basic ${Buffer.from(r.auth).toString("base64")}`);
          let { host: c, port: u, secureEndpoint: f } = i;
          vh(u, f) || (c += `:${u}`), o.Host = c, o.Connection = "close";
          for (let v of Object.keys(o))
            a += `${v}: ${o[v]}\r
`;
          let h = mh.default(s);
          s.write(`${a}\r
`);
          let { statusCode: p, buffered: d } = yield h;
          if (p === 200) {
            if (e.once("socket", gh), i.secureEndpoint) {
              let v = i.servername || i.host;
              if (!v)
                throw new Error('Could not determine "servername"');
              return _i("Upgrading socket connection to TLS"), Io.default.connect(Object.assign(Object.assign({}, _h(i, "host", "hostname", "path", "port")), { socket: s, servername: v }));
            }
            return s;
          }
          s.destroy();
          let m = new Oo.default.Socket;
          return m.readable = true, e.once("socket", (v) => {
            _i("replaying proxy buffer for failed request"), hh.default(v.listenerCount("data") > 0), v.push(d), v.push(null);
          }), m;
        });
      }
    };
    Et.default = Tr;
    function gh(t) {
      t.resume();
    }
    function vh(t, e) {
      return !!(!e && t === 80 || e && t === 443);
    }
    function xh(t) {
      return typeof t == "string" ? /^https:?$/i.test(t) : false;
    }
    function _h(t, ...e) {
      let i = {}, r;
      for (r in t)
        e.includes(r) || (i[r] = t[r]);
      return i;
    }
  });
  var Ro = y((Br, Ao) => {
    var yh = Br && Br.__importDefault || function(t) {
      return t && t.__esModule ? t : { default: t };
    }, Ar = yh(To());
    function Rr(t) {
      return new Ar.default(t);
    }
    (function(t) {
      t.HttpsProxyAgent = Ar.default, t.prototype = Ar.default.prototype;
    })(Rr || (Rr = {}));
    Ao.exports = Rr;
  });
  var Po = y((xg, $i) => {
    var Lo = Lo || function(t) {
      return Buffer.from(t).toString("base64");
    };
    function bh(t) {
      var e = this, i = Math.round, r = Math.floor, n = new Array(64), s = new Array(64), o = new Array(64), l = new Array(64), a, c, u, f, h = new Array(65535), p = new Array(65535), d = new Array(64), m = new Array(64), v = [], E = 0, I = 7, w = new Array(64), C = new Array(64), _ = new Array(64), $ = new Array(256), k = new Array(2048), U, b = [0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63], T = [0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], B = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], G = [0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125], L = [1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113, 20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240, 36, 51, 98, 114, 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250], X = [0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], R = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], N = [0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119], q = [0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34, 50, 129, 8, 20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21, 98, 114, 209, 10, 22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250];
      function z(g) {
        for (var j = [16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13, 16, 24, 40, 57, 69, 56, 14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103, 121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99], W = 0;W < 64; W++) {
          var V = r((j[W] * g + 50) / 100);
          V < 1 ? V = 1 : V > 255 && (V = 255), n[b[W]] = V;
        }
        for (var J = [17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26, 56, 99, 99, 99, 99, 99, 47, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99], Q = 0;Q < 64; Q++) {
          var fe = r((J[Q] * g + 50) / 100);
          fe < 1 ? fe = 1 : fe > 255 && (fe = 255), s[b[Q]] = fe;
        }
        for (var he = [1, 1.387039845, 1.306562965, 1.175875602, 1, 0.785694958, 0.5411961, 0.275899379], Se = 0, xe = 0;xe < 8; xe++)
          for (var O = 0;O < 8; O++)
            o[Se] = 1 / (n[b[Se]] * he[xe] * he[O] * 8), l[Se] = 1 / (s[b[Se]] * he[xe] * he[O] * 8), Se++;
      }
      function P(g, j) {
        for (var W = 0, V = 0, J = new Array, Q = 1;Q <= 16; Q++) {
          for (var fe = 1;fe <= g[Q]; fe++)
            J[j[V]] = [], J[j[V]][0] = W, J[j[V]][1] = Q, V++, W++;
          W *= 2;
        }
        return J;
      }
      function be() {
        a = P(T, B), c = P(X, R), u = P(G, L), f = P(N, q);
      }
      function le() {
        for (var g = 1, j = 2, W = 1;W <= 15; W++) {
          for (var V = g;V < j; V++)
            p[32767 + V] = W, h[32767 + V] = [], h[32767 + V][1] = W, h[32767 + V][0] = V;
          for (var J = -(j - 1);J <= -g; J++)
            p[32767 + J] = W, h[32767 + J] = [], h[32767 + J][1] = W, h[32767 + J][0] = j - 1 + J;
          g <<= 1, j <<= 1;
        }
      }
      function ie() {
        for (var g = 0;g < 256; g++)
          k[g] = 19595 * g, k[g + 256 >> 0] = 38470 * g, k[g + 512 >> 0] = 7471 * g + 32768, k[g + 768 >> 0] = -11059 * g, k[g + 1024 >> 0] = -21709 * g, k[g + 1280 >> 0] = 32768 * g + 8421375, k[g + 1536 >> 0] = -27439 * g, k[g + 1792 >> 0] = -5329 * g;
      }
      function re(g) {
        for (var j = g[0], W = g[1] - 1;W >= 0; )
          j & 1 << W && (E |= 1 << I), W--, I--, I < 0 && (E == 255 ? (x(255), x(0)) : x(E), I = 7, E = 0);
      }
      function x(g) {
        v.push(g);
      }
      function H(g) {
        x(g >> 8 & 255), x(g & 255);
      }
      function de(g, j) {
        var W, V, J, Q, fe, he, Se, xe, O = 0, M, Z = 8, we = 64;
        for (M = 0;M < Z; ++M) {
          W = g[O], V = g[O + 1], J = g[O + 2], Q = g[O + 3], fe = g[O + 4], he = g[O + 5], Se = g[O + 6], xe = g[O + 7];
          var ee = W + xe, ae = W - xe, ge = V + Se, Y = V - Se, pe = J + he, Le = J - he, ye = Q + fe, Ye = Q - fe, nt = ee + ye, yt = ee - ye, Ft = ge + pe, Nt = ge - pe;
          g[O] = nt + Ft, g[O + 4] = nt - Ft;
          var ci = (Nt + yt) * 0.707106781;
          g[O + 2] = yt + ci, g[O + 6] = yt - ci, nt = Ye + Le, Ft = Le + Y, Nt = Y + ae;
          var ui = (nt - Nt) * 0.382683433, Pi = 0.5411961 * nt + ui, fi = 1.306562965 * Nt + ui, hi = Ft * 0.707106781, pi = ae + hi, di = ae - hi;
          g[O + 5] = di + Pi, g[O + 3] = di - Pi, g[O + 1] = pi + fi, g[O + 7] = pi - fi, O += 8;
        }
        for (O = 0, M = 0;M < Z; ++M) {
          W = g[O], V = g[O + 8], J = g[O + 16], Q = g[O + 24], fe = g[O + 32], he = g[O + 40], Se = g[O + 48], xe = g[O + 56];
          var ws2 = W + xe, _r = W - xe, Es = V + Se, Ss = V - Se, ks = J + he, Cs = J - he, Os = Q + fe, lf = Q - fe, mi = ws2 + Os, yr = ws2 - Os, Fi = Es + ks, Ni = Es - ks;
          g[O] = mi + Fi, g[O + 32] = mi - Fi;
          var Is = (Ni + yr) * 0.707106781;
          g[O + 16] = yr + Is, g[O + 48] = yr - Is, mi = lf + Cs, Fi = Cs + Ss, Ni = Ss + _r;
          var Ts = (mi - Ni) * 0.382683433, As = 0.5411961 * mi + Ts, Rs = 1.306562965 * Ni + Ts, Bs = Fi * 0.707106781, Ls = _r + Bs, Ps = _r - Bs;
          g[O + 40] = Ps + As, g[O + 24] = Ps - As, g[O + 8] = Ls + Rs, g[O + 56] = Ls - Rs, O++;
        }
        var Mi;
        for (M = 0;M < we; ++M)
          Mi = g[M] * j[M], d[M] = Mi > 0 ? Mi + 0.5 | 0 : Mi - 0.5 | 0;
        return d;
      }
      function me() {
        H(65504), H(16), x(74), x(70), x(73), x(70), x(0), x(1), x(1), x(0), H(1), H(1), x(0), x(0);
      }
      function ce(g) {
        if (g) {
          H(65505), g[0] === 69 && g[1] === 120 && g[2] === 105 && g[3] === 102 ? H(g.length + 2) : (H(g.length + 5 + 2), x(69), x(120), x(105), x(102), x(0));
          for (var j = 0;j < g.length; j++)
            x(g[j]);
        }
      }
      function ue(g, j) {
        H(65472), H(17), x(8), H(j), H(g), x(3), x(1), x(17), x(0), x(2), x(17), x(1), x(3), x(17), x(1);
      }
      function ne() {
        H(65499), H(132), x(0);
        for (var g = 0;g < 64; g++)
          x(n[g]);
        x(1);
        for (var j = 0;j < 64; j++)
          x(s[j]);
      }
      function F() {
        H(65476), H(418), x(0);
        for (var g = 0;g < 16; g++)
          x(T[g + 1]);
        for (var j = 0;j <= 11; j++)
          x(B[j]);
        x(16);
        for (var W = 0;W < 16; W++)
          x(G[W + 1]);
        for (var V = 0;V <= 161; V++)
          x(L[V]);
        x(1);
        for (var J = 0;J < 16; J++)
          x(X[J + 1]);
        for (var Q = 0;Q <= 11; Q++)
          x(R[Q]);
        x(17);
        for (var fe = 0;fe < 16; fe++)
          x(N[fe + 1]);
        for (var he = 0;he <= 161; he++)
          x(q[he]);
      }
      function A(g) {
        typeof g == "undefined" || g.constructor !== Array || g.forEach((j) => {
          if (typeof j == "string") {
            H(65534);
            var W = j.length;
            H(W + 2);
            var V;
            for (V = 0;V < W; V++)
              x(j.charCodeAt(V));
          }
        });
      }
      function ve() {
        H(65498), H(12), x(3), x(1), x(0), x(2), x(17), x(3), x(17), x(0), x(63), x(0);
      }
      function K(g, j, W, V, J) {
        for (var Q = J[0], fe = J[240], he, Se = 16, xe = 63, O = 64, M = de(g, j), Z = 0;Z < O; ++Z)
          m[b[Z]] = M[Z];
        var we = m[0] - W;
        W = m[0], we == 0 ? re(V[0]) : (he = 32767 + we, re(V[p[he]]), re(h[he]));
        for (var ee = 63;ee > 0 && m[ee] == 0; ee--)
          ;
        if (ee == 0)
          return re(Q), W;
        for (var ae = 1, ge;ae <= ee; ) {
          for (var Y = ae;m[ae] == 0 && ae <= ee; ++ae)
            ;
          var pe = ae - Y;
          if (pe >= Se) {
            ge = pe >> 4;
            for (var Le = 1;Le <= ge; ++Le)
              re(fe);
            pe = pe & 15;
          }
          he = 32767 + m[ae], re(J[(pe << 4) + p[he]]), re(h[he]), ae++;
        }
        return ee != xe && re(Q), W;
      }
      function se() {
        for (var g = String.fromCharCode, j = 0;j < 256; j++)
          $[j] = g(j);
      }
      this.encode = function(g, j) {
        var W = new Date().getTime();
        j && We(j), v = new Array, E = 0, I = 7, H(65496), me(), A(g.comments), ce(g.exifBuffer), ne(), ue(g.width, g.height), F(), ve();
        var V = 0, J = 0, Q = 0;
        E = 0, I = 7, this.encode.displayName = "_encode_";
        for (var { data: fe, width: he, height: Se } = g, xe = he * 4, O = he * 3, M, Z = 0, we, ee, ae, ge, Y, pe, Le, ye;Z < Se; ) {
          for (M = 0;M < xe; ) {
            for (ge = xe * Z + M, Y = ge, pe = -1, Le = 0, ye = 0;ye < 64; ye++)
              Le = ye >> 3, pe = (ye & 7) * 4, Y = ge + Le * xe + pe, Z + Le >= Se && (Y -= xe * (Z + 1 + Le - Se)), M + pe >= xe && (Y -= M + pe - xe + 4), we = fe[Y++], ee = fe[Y++], ae = fe[Y++], w[ye] = (k[we] + k[ee + 256 >> 0] + k[ae + 512 >> 0] >> 16) - 128, C[ye] = (k[we + 768 >> 0] + k[ee + 1024 >> 0] + k[ae + 1280 >> 0] >> 16) - 128, _[ye] = (k[we + 1280 >> 0] + k[ee + 1536 >> 0] + k[ae + 1792 >> 0] >> 16) - 128;
            V = K(w, o, V, a, u), J = K(C, l, J, c, f), Q = K(_, l, Q, c, f), M += 32;
          }
          Z += 8;
        }
        if (I >= 0) {
          var Ye = [];
          Ye[1] = I + 1, Ye[0] = (1 << I + 1) - 1, re(Ye);
        }
        if (H(65497), typeof $i == "undefined")
          return new Uint8Array(v);
        return Buffer.from(v);
        var nt, yt;
      };
      function We(g) {
        if (g <= 0 && (g = 1), g > 100 && (g = 100), U != g) {
          var j = 0;
          g < 50 ? j = Math.floor(5000 / g) : j = Math.floor(200 - g * 2), z(j), U = g;
        }
      }
      function Je() {
        var g = new Date().getTime();
        t || (t = 50), se(), be(), le(), ie(), We(t);
        var j = new Date().getTime() - g;
      }
      Je();
    }
    typeof $i != "undefined" ? $i.exports = Bo : typeof window != "undefined" && (window["jpeg-js"] = window["jpeg-js"] || {}, window["jpeg-js"].encode = Bo);
    function Bo(t, e) {
      typeof e == "undefined" && (e = 50);
      var i = new bh(e), r = i.encode(t, e);
      return { data: r, width: t.width, height: t.height };
    }
  });
  var No = y((_g, Pr) => {
    var Lr = function() {
      var e = new Int32Array([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63]), i = 4017, r = 799, n = 3406, s = 2276, o = 1567, l = 3784, a = 5793, c = 2896;
      function u() {
      }
      function f(I, w) {
        for (var C = 0, _ = [], $, k, U = 16;U > 0 && !I[U - 1]; )
          U--;
        _.push({ children: [], index: 0 });
        var b = _[0], T;
        for ($ = 0;$ < U; $++) {
          for (k = 0;k < I[$]; k++) {
            for (b = _.pop(), b.children[b.index] = w[C];b.index > 0; ) {
              if (_.length === 0)
                throw new Error("Could not recreate Huffman Table");
              b = _.pop();
            }
            for (b.index++, _.push(b);_.length <= $; )
              _.push(T = { children: [], index: 0 }), b.children[b.index] = T.children, b = T;
            C++;
          }
          $ + 1 < U && (_.push(T = { children: [], index: 0 }), b.children[b.index] = T.children, b = T);
        }
        return _[0].children;
      }
      function h(I, w, C, _, $, k, U, b, T, B) {
        var { precision: G, samplesPerLine: L, scanLines: X, mcusPerLine: R, progressive: N, maxH: q, maxV: z } = C, P = w, be = 0, le = 0;
        function ie() {
          if (le > 0)
            return le--, be >> le & 1;
          if (be = I[w++], be == 255) {
            var O = I[w++];
            if (O)
              throw new Error("unexpected marker: " + (be << 8 | O).toString(16));
          }
          return le = 7, be >>> 7;
        }
        function re(O) {
          for (var M = O, Z;(Z = ie()) !== null; ) {
            if (M = M[Z], typeof M == "number")
              return M;
            if (typeof M != "object")
              throw new Error("invalid huffman sequence");
          }
          return null;
        }
        function x(O) {
          for (var M = 0;O > 0; ) {
            var Z = ie();
            if (Z === null)
              return;
            M = M << 1 | Z, O--;
          }
          return M;
        }
        function H(O) {
          var M = x(O);
          return M >= 1 << O - 1 ? M : M + (-1 << O) + 1;
        }
        function de(O, M) {
          var Z = re(O.huffmanTableDC), we = Z === 0 ? 0 : H(Z);
          M[0] = O.pred += we;
          for (var ee = 1;ee < 64; ) {
            var ae = re(O.huffmanTableAC), ge = ae & 15, Y = ae >> 4;
            if (ge === 0) {
              if (Y < 15)
                break;
              ee += 16;
              continue;
            }
            ee += Y;
            var pe = e[ee];
            M[pe] = H(ge), ee++;
          }
        }
        function me(O, M) {
          var Z = re(O.huffmanTableDC), we = Z === 0 ? 0 : H(Z) << T;
          M[0] = O.pred += we;
        }
        function ce(O, M) {
          M[0] |= ie() << T;
        }
        var ue = 0;
        function ne(O, M) {
          if (ue > 0) {
            ue--;
            return;
          }
          for (var Z = k, we = U;Z <= we; ) {
            var ee = re(O.huffmanTableAC), ae = ee & 15, ge = ee >> 4;
            if (ae === 0) {
              if (ge < 15) {
                ue = x(ge) + (1 << ge) - 1;
                break;
              }
              Z += 16;
              continue;
            }
            Z += ge;
            var Y = e[Z];
            M[Y] = H(ae) * (1 << T), Z++;
          }
        }
        var F = 0, A;
        function ve(O, M) {
          for (var Z = k, we = U, ee = 0;Z <= we; ) {
            var ae = e[Z], ge = M[ae] < 0 ? -1 : 1;
            switch (F) {
              case 0:
                var Y = re(O.huffmanTableAC), pe = Y & 15, ee = Y >> 4;
                if (pe === 0)
                  ee < 15 ? (ue = x(ee) + (1 << ee), F = 4) : (ee = 16, F = 1);
                else {
                  if (pe !== 1)
                    throw new Error("invalid ACn encoding");
                  A = H(pe), F = ee ? 2 : 3;
                }
                continue;
              case 1:
              case 2:
                M[ae] ? M[ae] += (ie() << T) * ge : (ee--, ee === 0 && (F = F == 2 ? 3 : 0));
                break;
              case 3:
                M[ae] ? M[ae] += (ie() << T) * ge : (M[ae] = A << T, F = 0);
                break;
              case 4:
                M[ae] && (M[ae] += (ie() << T) * ge);
                break;
            }
            Z++;
          }
          F === 4 && (ue--, ue === 0 && (F = 0));
        }
        function K(O, M, Z, we, ee) {
          var ae = Z / R | 0, ge = Z % R, Y = ae * O.v + we, pe = ge * O.h + ee;
          O.blocks[Y] === undefined && B.tolerantDecoding || M(O, O.blocks[Y][pe]);
        }
        function se(O, M, Z) {
          var we = Z / O.blocksPerLine | 0, ee = Z % O.blocksPerLine;
          O.blocks[we] === undefined && B.tolerantDecoding || M(O, O.blocks[we][ee]);
        }
        var We = _.length, Je, g, j, W, V, J;
        N ? k === 0 ? J = b === 0 ? me : ce : J = b === 0 ? ne : ve : J = de;
        var Q = 0, fe, he;
        We == 1 ? he = _[0].blocksPerLine * _[0].blocksPerColumn : he = R * C.mcusPerColumn, $ || ($ = he);
        for (var Se, xe;Q < he; ) {
          for (g = 0;g < We; g++)
            _[g].pred = 0;
          if (ue = 0, We == 1)
            for (Je = _[0], V = 0;V < $; V++)
              se(Je, J, Q), Q++;
          else
            for (V = 0;V < $; V++) {
              for (g = 0;g < We; g++)
                for (Je = _[g], Se = Je.h, xe = Je.v, j = 0;j < xe; j++)
                  for (W = 0;W < Se; W++)
                    K(Je, J, Q, j, W);
              if (Q++, Q === he)
                break;
            }
          if (Q === he)
            do {
              if (I[w] === 255 && I[w + 1] !== 0)
                break;
              w += 1;
            } while (w < I.length - 2);
          if (le = 0, fe = I[w] << 8 | I[w + 1], fe < 65280)
            throw new Error("marker was not found");
          if (fe >= 65488 && fe <= 65495)
            w += 2;
          else
            break;
        }
        return w - P;
      }
      function p(I, w) {
        var C = [], _ = w.blocksPerLine, $ = w.blocksPerColumn, k = _ << 3, U = new Int32Array(64), b = new Uint8Array(64);
        function T(P, be, le) {
          var ie = w.quantizationTable, re, x, H, de, me, ce, ue, ne, F, A = le, ve;
          for (ve = 0;ve < 64; ve++)
            A[ve] = P[ve] * ie[ve];
          for (ve = 0;ve < 8; ++ve) {
            var K = 8 * ve;
            if (A[1 + K] == 0 && A[2 + K] == 0 && A[3 + K] == 0 && A[4 + K] == 0 && A[5 + K] == 0 && A[6 + K] == 0 && A[7 + K] == 0) {
              F = a * A[0 + K] + 512 >> 10, A[0 + K] = F, A[1 + K] = F, A[2 + K] = F, A[3 + K] = F, A[4 + K] = F, A[5 + K] = F, A[6 + K] = F, A[7 + K] = F;
              continue;
            }
            re = a * A[0 + K] + 128 >> 8, x = a * A[4 + K] + 128 >> 8, H = A[2 + K], de = A[6 + K], me = c * (A[1 + K] - A[7 + K]) + 128 >> 8, ne = c * (A[1 + K] + A[7 + K]) + 128 >> 8, ce = A[3 + K] << 4, ue = A[5 + K] << 4, F = re - x + 1 >> 1, re = re + x + 1 >> 1, x = F, F = H * l + de * o + 128 >> 8, H = H * o - de * l + 128 >> 8, de = F, F = me - ue + 1 >> 1, me = me + ue + 1 >> 1, ue = F, F = ne + ce + 1 >> 1, ce = ne - ce + 1 >> 1, ne = F, F = re - de + 1 >> 1, re = re + de + 1 >> 1, de = F, F = x - H + 1 >> 1, x = x + H + 1 >> 1, H = F, F = me * s + ne * n + 2048 >> 12, me = me * n - ne * s + 2048 >> 12, ne = F, F = ce * r + ue * i + 2048 >> 12, ce = ce * i - ue * r + 2048 >> 12, ue = F, A[0 + K] = re + ne, A[7 + K] = re - ne, A[1 + K] = x + ue, A[6 + K] = x - ue, A[2 + K] = H + ce, A[5 + K] = H - ce, A[3 + K] = de + me, A[4 + K] = de - me;
          }
          for (ve = 0;ve < 8; ++ve) {
            var se = ve;
            if (A[8 + se] == 0 && A[16 + se] == 0 && A[24 + se] == 0 && A[32 + se] == 0 && A[40 + se] == 0 && A[48 + se] == 0 && A[56 + se] == 0) {
              F = a * le[ve + 0] + 8192 >> 14, A[0 + se] = F, A[8 + se] = F, A[16 + se] = F, A[24 + se] = F, A[32 + se] = F, A[40 + se] = F, A[48 + se] = F, A[56 + se] = F;
              continue;
            }
            re = a * A[0 + se] + 2048 >> 12, x = a * A[32 + se] + 2048 >> 12, H = A[16 + se], de = A[48 + se], me = c * (A[8 + se] - A[56 + se]) + 2048 >> 12, ne = c * (A[8 + se] + A[56 + se]) + 2048 >> 12, ce = A[24 + se], ue = A[40 + se], F = re - x + 1 >> 1, re = re + x + 1 >> 1, x = F, F = H * l + de * o + 2048 >> 12, H = H * o - de * l + 2048 >> 12, de = F, F = me - ue + 1 >> 1, me = me + ue + 1 >> 1, ue = F, F = ne + ce + 1 >> 1, ce = ne - ce + 1 >> 1, ne = F, F = re - de + 1 >> 1, re = re + de + 1 >> 1, de = F, F = x - H + 1 >> 1, x = x + H + 1 >> 1, H = F, F = me * s + ne * n + 2048 >> 12, me = me * n - ne * s + 2048 >> 12, ne = F, F = ce * r + ue * i + 2048 >> 12, ce = ce * i - ue * r + 2048 >> 12, ue = F, A[0 + se] = re + ne, A[56 + se] = re - ne, A[8 + se] = x + ue, A[48 + se] = x - ue, A[16 + se] = H + ce, A[40 + se] = H - ce, A[24 + se] = de + me, A[32 + se] = de - me;
          }
          for (ve = 0;ve < 64; ++ve) {
            var We = 128 + (A[ve] + 8 >> 4);
            be[ve] = We < 0 ? 0 : We > 255 ? 255 : We;
          }
        }
        E(k * $ * 8);
        for (var B, G, L = 0;L < $; L++) {
          var X = L << 3;
          for (B = 0;B < 8; B++)
            C.push(new Uint8Array(k));
          for (var R = 0;R < _; R++) {
            T(w.blocks[L][R], b, U);
            var N = 0, q = R << 3;
            for (G = 0;G < 8; G++) {
              var z = C[X + G];
              for (B = 0;B < 8; B++)
                z[q + B] = b[N++];
            }
          }
        }
        return C;
      }
      function d(I) {
        return I < 0 ? 0 : I > 255 ? 255 : I;
      }
      u.prototype = { load: function(w) {
        var C = new XMLHttpRequest;
        C.open("GET", w, true), C.responseType = "arraybuffer", C.onload = function() {
          var _ = new Uint8Array(C.response || C.mozResponseArrayBuffer);
          this.parse(_), this.onload && this.onload();
        }.bind(this), C.send(null);
      }, parse: function(w) {
        var C = this.opts.maxResolutionInMP * 1000 * 1000, _ = 0, $ = w.length;
        function k() {
          var Y = w[_] << 8 | w[_ + 1];
          return _ += 2, Y;
        }
        function U() {
          var Y = k(), pe = w.subarray(_, _ + Y - 2);
          return _ += pe.length, pe;
        }
        function b(Y) {
          var pe = 1, Le = 1, ye, Ye;
          for (Ye in Y.components)
            Y.components.hasOwnProperty(Ye) && (ye = Y.components[Ye], pe < ye.h && (pe = ye.h), Le < ye.v && (Le = ye.v));
          var nt = Math.ceil(Y.samplesPerLine / 8 / pe), yt = Math.ceil(Y.scanLines / 8 / Le);
          for (Ye in Y.components)
            if (Y.components.hasOwnProperty(Ye)) {
              ye = Y.components[Ye];
              var Ft = Math.ceil(Math.ceil(Y.samplesPerLine / 8) * ye.h / pe), Nt = Math.ceil(Math.ceil(Y.scanLines / 8) * ye.v / Le), ci = nt * ye.h, ui = yt * ye.v, Pi = ui * ci, fi = [];
              E(Pi * 256);
              for (var hi = 0;hi < ui; hi++) {
                for (var pi = [], di = 0;di < ci; di++)
                  pi.push(new Int32Array(64));
                fi.push(pi);
              }
              ye.blocksPerLine = Ft, ye.blocksPerColumn = Nt, ye.blocks = fi;
            }
          Y.maxH = pe, Y.maxV = Le, Y.mcusPerLine = nt, Y.mcusPerColumn = yt;
        }
        var T = null, B = null, G = null, L, X, R = [], N = [], q = [], z = [], P = k(), be = -1;
        if (this.comments = [], P != 65496)
          throw new Error("SOI not found");
        for (P = k();P != 65497; ) {
          var le, ie, re;
          switch (P) {
            case 65280:
              break;
            case 65504:
            case 65505:
            case 65506:
            case 65507:
            case 65508:
            case 65509:
            case 65510:
            case 65511:
            case 65512:
            case 65513:
            case 65514:
            case 65515:
            case 65516:
            case 65517:
            case 65518:
            case 65519:
            case 65534:
              var x = U();
              if (P === 65534) {
                var H = String.fromCharCode.apply(null, x);
                this.comments.push(H);
              }
              P === 65504 && x[0] === 74 && x[1] === 70 && x[2] === 73 && x[3] === 70 && x[4] === 0 && (T = { version: { major: x[5], minor: x[6] }, densityUnits: x[7], xDensity: x[8] << 8 | x[9], yDensity: x[10] << 8 | x[11], thumbWidth: x[12], thumbHeight: x[13], thumbData: x.subarray(14, 14 + 3 * x[12] * x[13]) }), P === 65505 && x[0] === 69 && x[1] === 120 && x[2] === 105 && x[3] === 102 && x[4] === 0 && (this.exifBuffer = x.subarray(5, x.length)), P === 65518 && x[0] === 65 && x[1] === 100 && x[2] === 111 && x[3] === 98 && x[4] === 101 && x[5] === 0 && (B = { version: x[6], flags0: x[7] << 8 | x[8], flags1: x[9] << 8 | x[10], transformCode: x[11] });
              break;
            case 65499:
              for (var de = k(), me = de + _ - 2;_ < me; ) {
                var ce = w[_++];
                E(256);
                var ue = new Int32Array(64);
                if (ce >> 4)
                  if (ce >> 4 === 1)
                    for (ie = 0;ie < 64; ie++) {
                      var ne = e[ie];
                      ue[ne] = k();
                    }
                  else
                    throw new Error("DQT: invalid table spec");
                else
                  for (ie = 0;ie < 64; ie++) {
                    var ne = e[ie];
                    ue[ne] = w[_++];
                  }
                R[ce & 15] = ue;
              }
              break;
            case 65472:
            case 65473:
            case 65474:
              k(), L = {}, L.extended = P === 65473, L.progressive = P === 65474, L.precision = w[_++], L.scanLines = k(), L.samplesPerLine = k(), L.components = {}, L.componentsOrder = [];
              var F = L.scanLines * L.samplesPerLine;
              if (F > C) {
                var A = Math.ceil((F - C) / 1e6);
                throw new Error(`maxResolutionInMP limit exceeded by ${A}MP`);
              }
              var ve = w[_++], K, se = 0, We = 0;
              for (le = 0;le < ve; le++) {
                K = w[_];
                var Je = w[_ + 1] >> 4, g = w[_ + 1] & 15, j = w[_ + 2];
                if (Je <= 0 || g <= 0)
                  throw new Error("Invalid sampling factor, expected values above 0");
                L.componentsOrder.push(K), L.components[K] = { h: Je, v: g, quantizationIdx: j }, _ += 3;
              }
              b(L), N.push(L);
              break;
            case 65476:
              var W = k();
              for (le = 2;le < W; ) {
                var V = w[_++], J = new Uint8Array(16), Q = 0;
                for (ie = 0;ie < 16; ie++, _++)
                  Q += J[ie] = w[_];
                E(16 + Q);
                var fe = new Uint8Array(Q);
                for (ie = 0;ie < Q; ie++, _++)
                  fe[ie] = w[_];
                le += 17 + Q, (V >> 4 ? q : z)[V & 15] = f(J, fe);
              }
              break;
            case 65501:
              k(), X = k();
              break;
            case 65500:
              k(), k();
              break;
            case 65498:
              var he = k(), Se = w[_++], xe = [], O;
              for (le = 0;le < Se; le++) {
                O = L.components[w[_++]];
                var M = w[_++];
                O.huffmanTableDC = z[M >> 4], O.huffmanTableAC = q[M & 15], xe.push(O);
              }
              var Z = w[_++], we = w[_++], ee = w[_++], ae = h(w, _, L, xe, X, Z, we, ee >> 4, ee & 15, this.opts);
              _ += ae;
              break;
            case 65535:
              w[_] !== 255 && _--;
              break;
            default:
              if (w[_ - 3] == 255 && w[_ - 2] >= 192 && w[_ - 2] <= 254) {
                _ -= 3;
                break;
              } else if (P === 224 || P == 225) {
                if (be !== -1)
                  throw new Error(`first unknown JPEG marker at offset ${be.toString(16)}, second unknown JPEG marker ${P.toString(16)} at offset ${(_ - 1).toString(16)}`);
                be = _ - 1;
                let Y = k();
                if (w[_ + Y - 2] === 255) {
                  _ += Y - 2;
                  break;
                }
              }
              throw new Error("unknown JPEG marker " + P.toString(16));
          }
          P = k();
        }
        if (N.length != 1)
          throw new Error("only single frame JPEGs supported");
        for (var le = 0;le < N.length; le++) {
          var ge = N[le].components;
          for (var ie in ge)
            ge[ie].quantizationTable = R[ge[ie].quantizationIdx], delete ge[ie].quantizationIdx;
        }
        this.width = L.samplesPerLine, this.height = L.scanLines, this.jfif = T, this.adobe = B, this.components = [];
        for (var le = 0;le < L.componentsOrder.length; le++) {
          var O = L.components[L.componentsOrder[le]];
          this.components.push({ lines: p(L, O), scaleX: O.h / L.maxH, scaleY: O.v / L.maxV });
        }
      }, getData: function(w, C) {
        var _ = this.width / w, $ = this.height / C, k, U, b, T, B, G, L, X, R, N, q = 0, z, P, be, le, ie, re, x, H, de, me, ce, ue = w * C * this.components.length;
        E(ue);
        var ne = new Uint8Array(ue);
        switch (this.components.length) {
          case 1:
            for (k = this.components[0], N = 0;N < C; N++)
              for (B = k.lines[0 | N * k.scaleY * $], R = 0;R < w; R++)
                z = B[0 | R * k.scaleX * _], ne[q++] = z;
            break;
          case 2:
            for (k = this.components[0], U = this.components[1], N = 0;N < C; N++)
              for (B = k.lines[0 | N * k.scaleY * $], G = U.lines[0 | N * U.scaleY * $], R = 0;R < w; R++)
                z = B[0 | R * k.scaleX * _], ne[q++] = z, z = G[0 | R * U.scaleX * _], ne[q++] = z;
            break;
          case 3:
            for (ce = true, this.adobe && this.adobe.transformCode ? ce = true : typeof this.opts.colorTransform != "undefined" && (ce = !!this.opts.colorTransform), k = this.components[0], U = this.components[1], b = this.components[2], N = 0;N < C; N++)
              for (B = k.lines[0 | N * k.scaleY * $], G = U.lines[0 | N * U.scaleY * $], L = b.lines[0 | N * b.scaleY * $], R = 0;R < w; R++)
                ce ? (z = B[0 | R * k.scaleX * _], P = G[0 | R * U.scaleX * _], be = L[0 | R * b.scaleX * _], H = d(z + 1.402 * (be - 128)), de = d(z - 0.3441363 * (P - 128) - 0.71413636 * (be - 128)), me = d(z + 1.772 * (P - 128))) : (H = B[0 | R * k.scaleX * _], de = G[0 | R * U.scaleX * _], me = L[0 | R * b.scaleX * _]), ne[q++] = H, ne[q++] = de, ne[q++] = me;
            break;
          case 4:
            if (!this.adobe)
              throw new Error("Unsupported color mode (4 components)");
            for (ce = false, this.adobe && this.adobe.transformCode ? ce = true : typeof this.opts.colorTransform != "undefined" && (ce = !!this.opts.colorTransform), k = this.components[0], U = this.components[1], b = this.components[2], T = this.components[3], N = 0;N < C; N++)
              for (B = k.lines[0 | N * k.scaleY * $], G = U.lines[0 | N * U.scaleY * $], L = b.lines[0 | N * b.scaleY * $], X = T.lines[0 | N * T.scaleY * $], R = 0;R < w; R++)
                ce ? (z = B[0 | R * k.scaleX * _], P = G[0 | R * U.scaleX * _], be = L[0 | R * b.scaleX * _], le = X[0 | R * T.scaleX * _], ie = 255 - d(z + 1.402 * (be - 128)), re = 255 - d(z - 0.3441363 * (P - 128) - 0.71413636 * (be - 128)), x = 255 - d(z + 1.772 * (P - 128))) : (ie = B[0 | R * k.scaleX * _], re = G[0 | R * U.scaleX * _], x = L[0 | R * b.scaleX * _], le = X[0 | R * T.scaleX * _]), ne[q++] = 255 - ie, ne[q++] = 255 - re, ne[q++] = 255 - x, ne[q++] = 255 - le;
            break;
          default:
            throw new Error("Unsupported color mode");
        }
        return ne;
      }, copyToImageData: function(w, C) {
        var { width: _, height: $, data: k } = w, U = this.getData(_, $), b = 0, T = 0, B, G, L, X, R, N, q, z, P;
        switch (this.components.length) {
          case 1:
            for (G = 0;G < $; G++)
              for (B = 0;B < _; B++)
                L = U[b++], k[T++] = L, k[T++] = L, k[T++] = L, C && (k[T++] = 255);
            break;
          case 3:
            for (G = 0;G < $; G++)
              for (B = 0;B < _; B++)
                q = U[b++], z = U[b++], P = U[b++], k[T++] = q, k[T++] = z, k[T++] = P, C && (k[T++] = 255);
            break;
          case 4:
            for (G = 0;G < $; G++)
              for (B = 0;B < _; B++)
                R = U[b++], N = U[b++], L = U[b++], X = U[b++], q = 255 - d(R * (1 - X / 255) + X), z = 255 - d(N * (1 - X / 255) + X), P = 255 - d(L * (1 - X / 255) + X), k[T++] = q, k[T++] = z, k[T++] = P, C && (k[T++] = 255);
            break;
          default:
            throw new Error("Unsupported color mode");
        }
      } };
      var m = 0, v = 0;
      function E(I = 0) {
        var w = m + I;
        if (w > v) {
          var C = Math.ceil((w - v) / 1024 / 1024);
          throw new Error(`maxMemoryUsageInMB limit exceeded by at least ${C}MB`);
        }
        m = w;
      }
      return u.resetMaxMemoryUsage = function(I) {
        m = 0, v = I;
      }, u.getBytesAllocated = function() {
        return m;
      }, u.requestMemoryAllocation = E, u;
    }();
    typeof Pr != "undefined" ? Pr.exports = Fo : typeof window != "undefined" && (window["jpeg-js"] = window["jpeg-js"] || {}, window["jpeg-js"].decode = Fo);
    function Fo(t, e = {}) {
      var i = { colorTransform: undefined, useTArray: false, formatAsRGBA: true, tolerantDecoding: true, maxResolutionInMP: 100, maxMemoryUsageInMB: 512 }, r = { ...i, ...e }, n = new Uint8Array(t), s = new Lr;
      s.opts = r, Lr.resetMaxMemoryUsage(r.maxMemoryUsageInMB * 1024 * 1024), s.parse(n);
      var o = r.formatAsRGBA ? 4 : 3, l = s.width * s.height * o;
      try {
        Lr.requestMemoryAllocation(l);
        var a = { width: s.width, height: s.height, exifBuffer: s.exifBuffer, data: r.useTArray ? new Uint8Array(l) : Buffer.alloc(l) };
        s.comments.length > 0 && (a.comments = s.comments);
      } catch (c) {
        throw c instanceof RangeError ? new Error("Could not allocate enough memory for the image. Required: " + l) : c instanceof ReferenceError && c.message === "Buffer is not defined" ? new Error("Buffer is not globally defined in this environment. Consider setting useTArray to true") : c;
      }
      return s.copyToImageData(a, r.formatAsRGBA), a;
    }
  });
  var Uo = y((yg, Mo) => {
    var wh = Po(), Eh = No();
    Mo.exports = { encode: wh, decode: Eh };
  });
  var jo = y((bg, Do) => {
    function Gi() {
      this._types = Object.create(null), this._extensions = Object.create(null);
      for (let t = 0;t < arguments.length; t++)
        this.define(arguments[t]);
      this.define = this.define.bind(this), this.getType = this.getType.bind(this), this.getExtension = this.getExtension.bind(this);
    }
    Gi.prototype.define = function(t, e) {
      for (let i in t) {
        let r = t[i].map(function(n) {
          return n.toLowerCase();
        });
        i = i.toLowerCase();
        for (let n = 0;n < r.length; n++) {
          let s = r[n];
          if (s[0] !== "*") {
            if (!e && s in this._types)
              throw new Error('Attempt to change mapping for "' + s + '" extension from "' + this._types[s] + '" to "' + i + '". Pass `force=true` to allow this, otherwise remove "' + s + '" from the list of extensions for "' + i + '".');
            this._types[s] = i;
          }
        }
        if (e || !this._extensions[i]) {
          let n = r[0];
          this._extensions[i] = n[0] !== "*" ? n : n.substr(1);
        }
      }
    };
    Gi.prototype.getType = function(t) {
      t = String(t);
      let e = t.replace(/^.*[/\\]/, "").toLowerCase(), i = e.replace(/^.*\./, "").toLowerCase(), r = e.length < t.length;
      return (i.length < e.length - 1 || !r) && this._types[i] || null;
    };
    Gi.prototype.getExtension = function(t) {
      return t = /^\s*([^;\s]*)/.test(t) && RegExp.$1, t && this._extensions[t.toLowerCase()] || null;
    };
    Do.exports = Gi;
  });
  var Ho = y((wg, qo) => {
    qo.exports = { "application/andrew-inset": ["ez"], "application/applixware": ["aw"], "application/atom+xml": ["atom"], "application/atomcat+xml": ["atomcat"], "application/atomdeleted+xml": ["atomdeleted"], "application/atomsvc+xml": ["atomsvc"], "application/atsc-dwd+xml": ["dwd"], "application/atsc-held+xml": ["held"], "application/atsc-rsat+xml": ["rsat"], "application/bdoc": ["bdoc"], "application/calendar+xml": ["xcs"], "application/ccxml+xml": ["ccxml"], "application/cdfx+xml": ["cdfx"], "application/cdmi-capability": ["cdmia"], "application/cdmi-container": ["cdmic"], "application/cdmi-domain": ["cdmid"], "application/cdmi-object": ["cdmio"], "application/cdmi-queue": ["cdmiq"], "application/cu-seeme": ["cu"], "application/dash+xml": ["mpd"], "application/davmount+xml": ["davmount"], "application/docbook+xml": ["dbk"], "application/dssc+der": ["dssc"], "application/dssc+xml": ["xdssc"], "application/ecmascript": ["es", "ecma"], "application/emma+xml": ["emma"], "application/emotionml+xml": ["emotionml"], "application/epub+zip": ["epub"], "application/exi": ["exi"], "application/express": ["exp"], "application/fdt+xml": ["fdt"], "application/font-tdpfr": ["pfr"], "application/geo+json": ["geojson"], "application/gml+xml": ["gml"], "application/gpx+xml": ["gpx"], "application/gxf": ["gxf"], "application/gzip": ["gz"], "application/hjson": ["hjson"], "application/hyperstudio": ["stk"], "application/inkml+xml": ["ink", "inkml"], "application/ipfix": ["ipfix"], "application/its+xml": ["its"], "application/java-archive": ["jar", "war", "ear"], "application/java-serialized-object": ["ser"], "application/java-vm": ["class"], "application/javascript": ["js", "mjs"], "application/json": ["json", "map"], "application/json5": ["json5"], "application/jsonml+json": ["jsonml"], "application/ld+json": ["jsonld"], "application/lgr+xml": ["lgr"], "application/lost+xml": ["lostxml"], "application/mac-binhex40": ["hqx"], "application/mac-compactpro": ["cpt"], "application/mads+xml": ["mads"], "application/manifest+json": ["webmanifest"], "application/marc": ["mrc"], "application/marcxml+xml": ["mrcx"], "application/mathematica": ["ma", "nb", "mb"], "application/mathml+xml": ["mathml"], "application/mbox": ["mbox"], "application/mediaservercontrol+xml": ["mscml"], "application/metalink+xml": ["metalink"], "application/metalink4+xml": ["meta4"], "application/mets+xml": ["mets"], "application/mmt-aei+xml": ["maei"], "application/mmt-usd+xml": ["musd"], "application/mods+xml": ["mods"], "application/mp21": ["m21", "mp21"], "application/mp4": ["mp4s", "m4p"], "application/msword": ["doc", "dot"], "application/mxf": ["mxf"], "application/n-quads": ["nq"], "application/n-triples": ["nt"], "application/node": ["cjs"], "application/octet-stream": ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"], "application/oda": ["oda"], "application/oebps-package+xml": ["opf"], "application/ogg": ["ogx"], "application/omdoc+xml": ["omdoc"], "application/onenote": ["onetoc", "onetoc2", "onetmp", "onepkg"], "application/oxps": ["oxps"], "application/p2p-overlay+xml": ["relo"], "application/patch-ops-error+xml": ["xer"], "application/pdf": ["pdf"], "application/pgp-encrypted": ["pgp"], "application/pgp-signature": ["asc", "sig"], "application/pics-rules": ["prf"], "application/pkcs10": ["p10"], "application/pkcs7-mime": ["p7m", "p7c"], "application/pkcs7-signature": ["p7s"], "application/pkcs8": ["p8"], "application/pkix-attr-cert": ["ac"], "application/pkix-cert": ["cer"], "application/pkix-crl": ["crl"], "application/pkix-pkipath": ["pkipath"], "application/pkixcmp": ["pki"], "application/pls+xml": ["pls"], "application/postscript": ["ai", "eps", "ps"], "application/provenance+xml": ["provx"], "application/pskc+xml": ["pskcxml"], "application/raml+yaml": ["raml"], "application/rdf+xml": ["rdf", "owl"], "application/reginfo+xml": ["rif"], "application/relax-ng-compact-syntax": ["rnc"], "application/resource-lists+xml": ["rl"], "application/resource-lists-diff+xml": ["rld"], "application/rls-services+xml": ["rs"], "application/route-apd+xml": ["rapd"], "application/route-s-tsid+xml": ["sls"], "application/route-usd+xml": ["rusd"], "application/rpki-ghostbusters": ["gbr"], "application/rpki-manifest": ["mft"], "application/rpki-roa": ["roa"], "application/rsd+xml": ["rsd"], "application/rss+xml": ["rss"], "application/rtf": ["rtf"], "application/sbml+xml": ["sbml"], "application/scvp-cv-request": ["scq"], "application/scvp-cv-response": ["scs"], "application/scvp-vp-request": ["spq"], "application/scvp-vp-response": ["spp"], "application/sdp": ["sdp"], "application/senml+xml": ["senmlx"], "application/sensml+xml": ["sensmlx"], "application/set-payment-initiation": ["setpay"], "application/set-registration-initiation": ["setreg"], "application/shf+xml": ["shf"], "application/sieve": ["siv", "sieve"], "application/smil+xml": ["smi", "smil"], "application/sparql-query": ["rq"], "application/sparql-results+xml": ["srx"], "application/srgs": ["gram"], "application/srgs+xml": ["grxml"], "application/sru+xml": ["sru"], "application/ssdl+xml": ["ssdl"], "application/ssml+xml": ["ssml"], "application/swid+xml": ["swidtag"], "application/tei+xml": ["tei", "teicorpus"], "application/thraud+xml": ["tfi"], "application/timestamped-data": ["tsd"], "application/toml": ["toml"], "application/trig": ["trig"], "application/ttml+xml": ["ttml"], "application/ubjson": ["ubj"], "application/urc-ressheet+xml": ["rsheet"], "application/urc-targetdesc+xml": ["td"], "application/voicexml+xml": ["vxml"], "application/wasm": ["wasm"], "application/widget": ["wgt"], "application/winhlp": ["hlp"], "application/wsdl+xml": ["wsdl"], "application/wspolicy+xml": ["wspolicy"], "application/xaml+xml": ["xaml"], "application/xcap-att+xml": ["xav"], "application/xcap-caps+xml": ["xca"], "application/xcap-diff+xml": ["xdf"], "application/xcap-el+xml": ["xel"], "application/xcap-ns+xml": ["xns"], "application/xenc+xml": ["xenc"], "application/xhtml+xml": ["xhtml", "xht"], "application/xliff+xml": ["xlf"], "application/xml": ["xml", "xsl", "xsd", "rng"], "application/xml-dtd": ["dtd"], "application/xop+xml": ["xop"], "application/xproc+xml": ["xpl"], "application/xslt+xml": ["*xsl", "xslt"], "application/xspf+xml": ["xspf"], "application/xv+xml": ["mxml", "xhvml", "xvml", "xvm"], "application/yang": ["yang"], "application/yin+xml": ["yin"], "application/zip": ["zip"], "audio/3gpp": ["*3gpp"], "audio/adpcm": ["adp"], "audio/amr": ["amr"], "audio/basic": ["au", "snd"], "audio/midi": ["mid", "midi", "kar", "rmi"], "audio/mobile-xmf": ["mxmf"], "audio/mp3": ["*mp3"], "audio/mp4": ["m4a", "mp4a"], "audio/mpeg": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"], "audio/ogg": ["oga", "ogg", "spx", "opus"], "audio/s3m": ["s3m"], "audio/silk": ["sil"], "audio/wav": ["wav"], "audio/wave": ["*wav"], "audio/webm": ["weba"], "audio/xm": ["xm"], "font/collection": ["ttc"], "font/otf": ["otf"], "font/ttf": ["ttf"], "font/woff": ["woff"], "font/woff2": ["woff2"], "image/aces": ["exr"], "image/apng": ["apng"], "image/avif": ["avif"], "image/bmp": ["bmp"], "image/cgm": ["cgm"], "image/dicom-rle": ["drle"], "image/emf": ["emf"], "image/fits": ["fits"], "image/g3fax": ["g3"], "image/gif": ["gif"], "image/heic": ["heic"], "image/heic-sequence": ["heics"], "image/heif": ["heif"], "image/heif-sequence": ["heifs"], "image/hej2k": ["hej2"], "image/hsj2": ["hsj2"], "image/ief": ["ief"], "image/jls": ["jls"], "image/jp2": ["jp2", "jpg2"], "image/jpeg": ["jpeg", "jpg", "jpe"], "image/jph": ["jph"], "image/jphc": ["jhc"], "image/jpm": ["jpm"], "image/jpx": ["jpx", "jpf"], "image/jxr": ["jxr"], "image/jxra": ["jxra"], "image/jxrs": ["jxrs"], "image/jxs": ["jxs"], "image/jxsc": ["jxsc"], "image/jxsi": ["jxsi"], "image/jxss": ["jxss"], "image/ktx": ["ktx"], "image/ktx2": ["ktx2"], "image/png": ["png"], "image/sgi": ["sgi"], "image/svg+xml": ["svg", "svgz"], "image/t38": ["t38"], "image/tiff": ["tif", "tiff"], "image/tiff-fx": ["tfx"], "image/webp": ["webp"], "image/wmf": ["wmf"], "message/disposition-notification": ["disposition-notification"], "message/global": ["u8msg"], "message/global-delivery-status": ["u8dsn"], "message/global-disposition-notification": ["u8mdn"], "message/global-headers": ["u8hdr"], "message/rfc822": ["eml", "mime"], "model/3mf": ["3mf"], "model/gltf+json": ["gltf"], "model/gltf-binary": ["glb"], "model/iges": ["igs", "iges"], "model/mesh": ["msh", "mesh", "silo"], "model/mtl": ["mtl"], "model/obj": ["obj"], "model/step+xml": ["stpx"], "model/step+zip": ["stpz"], "model/step-xml+zip": ["stpxz"], "model/stl": ["stl"], "model/vrml": ["wrl", "vrml"], "model/x3d+binary": ["*x3db", "x3dbz"], "model/x3d+fastinfoset": ["x3db"], "model/x3d+vrml": ["*x3dv", "x3dvz"], "model/x3d+xml": ["x3d", "x3dz"], "model/x3d-vrml": ["x3dv"], "text/cache-manifest": ["appcache", "manifest"], "text/calendar": ["ics", "ifb"], "text/coffeescript": ["coffee", "litcoffee"], "text/css": ["css"], "text/csv": ["csv"], "text/html": ["html", "htm", "shtml"], "text/jade": ["jade"], "text/jsx": ["jsx"], "text/less": ["less"], "text/markdown": ["markdown", "md"], "text/mathml": ["mml"], "text/mdx": ["mdx"], "text/n3": ["n3"], "text/plain": ["txt", "text", "conf", "def", "list", "log", "in", "ini"], "text/richtext": ["rtx"], "text/rtf": ["*rtf"], "text/sgml": ["sgml", "sgm"], "text/shex": ["shex"], "text/slim": ["slim", "slm"], "text/spdx": ["spdx"], "text/stylus": ["stylus", "styl"], "text/tab-separated-values": ["tsv"], "text/troff": ["t", "tr", "roff", "man", "me", "ms"], "text/turtle": ["ttl"], "text/uri-list": ["uri", "uris", "urls"], "text/vcard": ["vcard"], "text/vtt": ["vtt"], "text/xml": ["*xml"], "text/yaml": ["yaml", "yml"], "video/3gpp": ["3gp", "3gpp"], "video/3gpp2": ["3g2"], "video/h261": ["h261"], "video/h263": ["h263"], "video/h264": ["h264"], "video/iso.segment": ["m4s"], "video/jpeg": ["jpgv"], "video/jpm": ["*jpm", "jpgm"], "video/mj2": ["mj2", "mjp2"], "video/mp2t": ["ts"], "video/mp4": ["mp4", "mp4v", "mpg4"], "video/mpeg": ["mpeg", "mpg", "mpe", "m1v", "m2v"], "video/ogg": ["ogv"], "video/quicktime": ["qt", "mov"], "video/webm": ["webm"] };
  });
  var $o = y((Eg, Vo) => {
    Vo.exports = { "application/prs.cww": ["cww"], "application/vnd.1000minds.decision-model+xml": ["1km"], "application/vnd.3gpp.pic-bw-large": ["plb"], "application/vnd.3gpp.pic-bw-small": ["psb"], "application/vnd.3gpp.pic-bw-var": ["pvb"], "application/vnd.3gpp2.tcap": ["tcap"], "application/vnd.3m.post-it-notes": ["pwn"], "application/vnd.accpac.simply.aso": ["aso"], "application/vnd.accpac.simply.imp": ["imp"], "application/vnd.acucobol": ["acu"], "application/vnd.acucorp": ["atc", "acutc"], "application/vnd.adobe.air-application-installer-package+zip": ["air"], "application/vnd.adobe.formscentral.fcdt": ["fcdt"], "application/vnd.adobe.fxp": ["fxp", "fxpl"], "application/vnd.adobe.xdp+xml": ["xdp"], "application/vnd.adobe.xfdf": ["xfdf"], "application/vnd.ahead.space": ["ahead"], "application/vnd.airzip.filesecure.azf": ["azf"], "application/vnd.airzip.filesecure.azs": ["azs"], "application/vnd.amazon.ebook": ["azw"], "application/vnd.americandynamics.acc": ["acc"], "application/vnd.amiga.ami": ["ami"], "application/vnd.android.package-archive": ["apk"], "application/vnd.anser-web-certificate-issue-initiation": ["cii"], "application/vnd.anser-web-funds-transfer-initiation": ["fti"], "application/vnd.antix.game-component": ["atx"], "application/vnd.apple.installer+xml": ["mpkg"], "application/vnd.apple.keynote": ["key"], "application/vnd.apple.mpegurl": ["m3u8"], "application/vnd.apple.numbers": ["numbers"], "application/vnd.apple.pages": ["pages"], "application/vnd.apple.pkpass": ["pkpass"], "application/vnd.aristanetworks.swi": ["swi"], "application/vnd.astraea-software.iota": ["iota"], "application/vnd.audiograph": ["aep"], "application/vnd.balsamiq.bmml+xml": ["bmml"], "application/vnd.blueice.multipass": ["mpm"], "application/vnd.bmi": ["bmi"], "application/vnd.businessobjects": ["rep"], "application/vnd.chemdraw+xml": ["cdxml"], "application/vnd.chipnuts.karaoke-mmd": ["mmd"], "application/vnd.cinderella": ["cdy"], "application/vnd.citationstyles.style+xml": ["csl"], "application/vnd.claymore": ["cla"], "application/vnd.cloanto.rp9": ["rp9"], "application/vnd.clonk.c4group": ["c4g", "c4d", "c4f", "c4p", "c4u"], "application/vnd.cluetrust.cartomobile-config": ["c11amc"], "application/vnd.cluetrust.cartomobile-config-pkg": ["c11amz"], "application/vnd.commonspace": ["csp"], "application/vnd.contact.cmsg": ["cdbcmsg"], "application/vnd.cosmocaller": ["cmc"], "application/vnd.crick.clicker": ["clkx"], "application/vnd.crick.clicker.keyboard": ["clkk"], "application/vnd.crick.clicker.palette": ["clkp"], "application/vnd.crick.clicker.template": ["clkt"], "application/vnd.crick.clicker.wordbank": ["clkw"], "application/vnd.criticaltools.wbs+xml": ["wbs"], "application/vnd.ctc-posml": ["pml"], "application/vnd.cups-ppd": ["ppd"], "application/vnd.curl.car": ["car"], "application/vnd.curl.pcurl": ["pcurl"], "application/vnd.dart": ["dart"], "application/vnd.data-vision.rdz": ["rdz"], "application/vnd.dbf": ["dbf"], "application/vnd.dece.data": ["uvf", "uvvf", "uvd", "uvvd"], "application/vnd.dece.ttml+xml": ["uvt", "uvvt"], "application/vnd.dece.unspecified": ["uvx", "uvvx"], "application/vnd.dece.zip": ["uvz", "uvvz"], "application/vnd.denovo.fcselayout-link": ["fe_launch"], "application/vnd.dna": ["dna"], "application/vnd.dolby.mlp": ["mlp"], "application/vnd.dpgraph": ["dpg"], "application/vnd.dreamfactory": ["dfac"], "application/vnd.ds-keypoint": ["kpxx"], "application/vnd.dvb.ait": ["ait"], "application/vnd.dvb.service": ["svc"], "application/vnd.dynageo": ["geo"], "application/vnd.ecowin.chart": ["mag"], "application/vnd.enliven": ["nml"], "application/vnd.epson.esf": ["esf"], "application/vnd.epson.msf": ["msf"], "application/vnd.epson.quickanime": ["qam"], "application/vnd.epson.salt": ["slt"], "application/vnd.epson.ssf": ["ssf"], "application/vnd.eszigno3+xml": ["es3", "et3"], "application/vnd.ezpix-album": ["ez2"], "application/vnd.ezpix-package": ["ez3"], "application/vnd.fdf": ["fdf"], "application/vnd.fdsn.mseed": ["mseed"], "application/vnd.fdsn.seed": ["seed", "dataless"], "application/vnd.flographit": ["gph"], "application/vnd.fluxtime.clip": ["ftc"], "application/vnd.framemaker": ["fm", "frame", "maker", "book"], "application/vnd.frogans.fnc": ["fnc"], "application/vnd.frogans.ltf": ["ltf"], "application/vnd.fsc.weblaunch": ["fsc"], "application/vnd.fujitsu.oasys": ["oas"], "application/vnd.fujitsu.oasys2": ["oa2"], "application/vnd.fujitsu.oasys3": ["oa3"], "application/vnd.fujitsu.oasysgp": ["fg5"], "application/vnd.fujitsu.oasysprs": ["bh2"], "application/vnd.fujixerox.ddd": ["ddd"], "application/vnd.fujixerox.docuworks": ["xdw"], "application/vnd.fujixerox.docuworks.binder": ["xbd"], "application/vnd.fuzzysheet": ["fzs"], "application/vnd.genomatix.tuxedo": ["txd"], "application/vnd.geogebra.file": ["ggb"], "application/vnd.geogebra.tool": ["ggt"], "application/vnd.geometry-explorer": ["gex", "gre"], "application/vnd.geonext": ["gxt"], "application/vnd.geoplan": ["g2w"], "application/vnd.geospace": ["g3w"], "application/vnd.gmx": ["gmx"], "application/vnd.google-apps.document": ["gdoc"], "application/vnd.google-apps.presentation": ["gslides"], "application/vnd.google-apps.spreadsheet": ["gsheet"], "application/vnd.google-earth.kml+xml": ["kml"], "application/vnd.google-earth.kmz": ["kmz"], "application/vnd.grafeq": ["gqf", "gqs"], "application/vnd.groove-account": ["gac"], "application/vnd.groove-help": ["ghf"], "application/vnd.groove-identity-message": ["gim"], "application/vnd.groove-injector": ["grv"], "application/vnd.groove-tool-message": ["gtm"], "application/vnd.groove-tool-template": ["tpl"], "application/vnd.groove-vcard": ["vcg"], "application/vnd.hal+xml": ["hal"], "application/vnd.handheld-entertainment+xml": ["zmm"], "application/vnd.hbci": ["hbci"], "application/vnd.hhe.lesson-player": ["les"], "application/vnd.hp-hpgl": ["hpgl"], "application/vnd.hp-hpid": ["hpid"], "application/vnd.hp-hps": ["hps"], "application/vnd.hp-jlyt": ["jlt"], "application/vnd.hp-pcl": ["pcl"], "application/vnd.hp-pclxl": ["pclxl"], "application/vnd.hydrostatix.sof-data": ["sfd-hdstx"], "application/vnd.ibm.minipay": ["mpy"], "application/vnd.ibm.modcap": ["afp", "listafp", "list3820"], "application/vnd.ibm.rights-management": ["irm"], "application/vnd.ibm.secure-container": ["sc"], "application/vnd.iccprofile": ["icc", "icm"], "application/vnd.igloader": ["igl"], "application/vnd.immervision-ivp": ["ivp"], "application/vnd.immervision-ivu": ["ivu"], "application/vnd.insors.igm": ["igm"], "application/vnd.intercon.formnet": ["xpw", "xpx"], "application/vnd.intergeo": ["i2g"], "application/vnd.intu.qbo": ["qbo"], "application/vnd.intu.qfx": ["qfx"], "application/vnd.ipunplugged.rcprofile": ["rcprofile"], "application/vnd.irepository.package+xml": ["irp"], "application/vnd.is-xpr": ["xpr"], "application/vnd.isac.fcs": ["fcs"], "application/vnd.jam": ["jam"], "application/vnd.jcp.javame.midlet-rms": ["rms"], "application/vnd.jisp": ["jisp"], "application/vnd.joost.joda-archive": ["joda"], "application/vnd.kahootz": ["ktz", "ktr"], "application/vnd.kde.karbon": ["karbon"], "application/vnd.kde.kchart": ["chrt"], "application/vnd.kde.kformula": ["kfo"], "application/vnd.kde.kivio": ["flw"], "application/vnd.kde.kontour": ["kon"], "application/vnd.kde.kpresenter": ["kpr", "kpt"], "application/vnd.kde.kspread": ["ksp"], "application/vnd.kde.kword": ["kwd", "kwt"], "application/vnd.kenameaapp": ["htke"], "application/vnd.kidspiration": ["kia"], "application/vnd.kinar": ["kne", "knp"], "application/vnd.koan": ["skp", "skd", "skt", "skm"], "application/vnd.kodak-descriptor": ["sse"], "application/vnd.las.las+xml": ["lasxml"], "application/vnd.llamagraphics.life-balance.desktop": ["lbd"], "application/vnd.llamagraphics.life-balance.exchange+xml": ["lbe"], "application/vnd.lotus-1-2-3": ["123"], "application/vnd.lotus-approach": ["apr"], "application/vnd.lotus-freelance": ["pre"], "application/vnd.lotus-notes": ["nsf"], "application/vnd.lotus-organizer": ["org"], "application/vnd.lotus-screencam": ["scm"], "application/vnd.lotus-wordpro": ["lwp"], "application/vnd.macports.portpkg": ["portpkg"], "application/vnd.mapbox-vector-tile": ["mvt"], "application/vnd.mcd": ["mcd"], "application/vnd.medcalcdata": ["mc1"], "application/vnd.mediastation.cdkey": ["cdkey"], "application/vnd.mfer": ["mwf"], "application/vnd.mfmp": ["mfm"], "application/vnd.micrografx.flo": ["flo"], "application/vnd.micrografx.igx": ["igx"], "application/vnd.mif": ["mif"], "application/vnd.mobius.daf": ["daf"], "application/vnd.mobius.dis": ["dis"], "application/vnd.mobius.mbk": ["mbk"], "application/vnd.mobius.mqy": ["mqy"], "application/vnd.mobius.msl": ["msl"], "application/vnd.mobius.plc": ["plc"], "application/vnd.mobius.txf": ["txf"], "application/vnd.mophun.application": ["mpn"], "application/vnd.mophun.certificate": ["mpc"], "application/vnd.mozilla.xul+xml": ["xul"], "application/vnd.ms-artgalry": ["cil"], "application/vnd.ms-cab-compressed": ["cab"], "application/vnd.ms-excel": ["xls", "xlm", "xla", "xlc", "xlt", "xlw"], "application/vnd.ms-excel.addin.macroenabled.12": ["xlam"], "application/vnd.ms-excel.sheet.binary.macroenabled.12": ["xlsb"], "application/vnd.ms-excel.sheet.macroenabled.12": ["xlsm"], "application/vnd.ms-excel.template.macroenabled.12": ["xltm"], "application/vnd.ms-fontobject": ["eot"], "application/vnd.ms-htmlhelp": ["chm"], "application/vnd.ms-ims": ["ims"], "application/vnd.ms-lrm": ["lrm"], "application/vnd.ms-officetheme": ["thmx"], "application/vnd.ms-outlook": ["msg"], "application/vnd.ms-pki.seccat": ["cat"], "application/vnd.ms-pki.stl": ["*stl"], "application/vnd.ms-powerpoint": ["ppt", "pps", "pot"], "application/vnd.ms-powerpoint.addin.macroenabled.12": ["ppam"], "application/vnd.ms-powerpoint.presentation.macroenabled.12": ["pptm"], "application/vnd.ms-powerpoint.slide.macroenabled.12": ["sldm"], "application/vnd.ms-powerpoint.slideshow.macroenabled.12": ["ppsm"], "application/vnd.ms-powerpoint.template.macroenabled.12": ["potm"], "application/vnd.ms-project": ["mpp", "mpt"], "application/vnd.ms-word.document.macroenabled.12": ["docm"], "application/vnd.ms-word.template.macroenabled.12": ["dotm"], "application/vnd.ms-works": ["wps", "wks", "wcm", "wdb"], "application/vnd.ms-wpl": ["wpl"], "application/vnd.ms-xpsdocument": ["xps"], "application/vnd.mseq": ["mseq"], "application/vnd.musician": ["mus"], "application/vnd.muvee.style": ["msty"], "application/vnd.mynfc": ["taglet"], "application/vnd.neurolanguage.nlu": ["nlu"], "application/vnd.nitf": ["ntf", "nitf"], "application/vnd.noblenet-directory": ["nnd"], "application/vnd.noblenet-sealer": ["nns"], "application/vnd.noblenet-web": ["nnw"], "application/vnd.nokia.n-gage.ac+xml": ["*ac"], "application/vnd.nokia.n-gage.data": ["ngdat"], "application/vnd.nokia.n-gage.symbian.install": ["n-gage"], "application/vnd.nokia.radio-preset": ["rpst"], "application/vnd.nokia.radio-presets": ["rpss"], "application/vnd.novadigm.edm": ["edm"], "application/vnd.novadigm.edx": ["edx"], "application/vnd.novadigm.ext": ["ext"], "application/vnd.oasis.opendocument.chart": ["odc"], "application/vnd.oasis.opendocument.chart-template": ["otc"], "application/vnd.oasis.opendocument.database": ["odb"], "application/vnd.oasis.opendocument.formula": ["odf"], "application/vnd.oasis.opendocument.formula-template": ["odft"], "application/vnd.oasis.opendocument.graphics": ["odg"], "application/vnd.oasis.opendocument.graphics-template": ["otg"], "application/vnd.oasis.opendocument.image": ["odi"], "application/vnd.oasis.opendocument.image-template": ["oti"], "application/vnd.oasis.opendocument.presentation": ["odp"], "application/vnd.oasis.opendocument.presentation-template": ["otp"], "application/vnd.oasis.opendocument.spreadsheet": ["ods"], "application/vnd.oasis.opendocument.spreadsheet-template": ["ots"], "application/vnd.oasis.opendocument.text": ["odt"], "application/vnd.oasis.opendocument.text-master": ["odm"], "application/vnd.oasis.opendocument.text-template": ["ott"], "application/vnd.oasis.opendocument.text-web": ["oth"], "application/vnd.olpc-sugar": ["xo"], "application/vnd.oma.dd2+xml": ["dd2"], "application/vnd.openblox.game+xml": ["obgx"], "application/vnd.openofficeorg.extension": ["oxt"], "application/vnd.openstreetmap.data+xml": ["osm"], "application/vnd.openxmlformats-officedocument.presentationml.presentation": ["pptx"], "application/vnd.openxmlformats-officedocument.presentationml.slide": ["sldx"], "application/vnd.openxmlformats-officedocument.presentationml.slideshow": ["ppsx"], "application/vnd.openxmlformats-officedocument.presentationml.template": ["potx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": ["xlsx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.template": ["xltx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.document": ["docx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.template": ["dotx"], "application/vnd.osgeo.mapguide.package": ["mgp"], "application/vnd.osgi.dp": ["dp"], "application/vnd.osgi.subsystem": ["esa"], "application/vnd.palm": ["pdb", "pqa", "oprc"], "application/vnd.pawaafile": ["paw"], "application/vnd.pg.format": ["str"], "application/vnd.pg.osasli": ["ei6"], "application/vnd.picsel": ["efif"], "application/vnd.pmi.widget": ["wg"], "application/vnd.pocketlearn": ["plf"], "application/vnd.powerbuilder6": ["pbd"], "application/vnd.previewsystems.box": ["box"], "application/vnd.proteus.magazine": ["mgz"], "application/vnd.publishare-delta-tree": ["qps"], "application/vnd.pvi.ptid1": ["ptid"], "application/vnd.quark.quarkxpress": ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"], "application/vnd.rar": ["rar"], "application/vnd.realvnc.bed": ["bed"], "application/vnd.recordare.musicxml": ["mxl"], "application/vnd.recordare.musicxml+xml": ["musicxml"], "application/vnd.rig.cryptonote": ["cryptonote"], "application/vnd.rim.cod": ["cod"], "application/vnd.rn-realmedia": ["rm"], "application/vnd.rn-realmedia-vbr": ["rmvb"], "application/vnd.route66.link66+xml": ["link66"], "application/vnd.sailingtracker.track": ["st"], "application/vnd.seemail": ["see"], "application/vnd.sema": ["sema"], "application/vnd.semd": ["semd"], "application/vnd.semf": ["semf"], "application/vnd.shana.informed.formdata": ["ifm"], "application/vnd.shana.informed.formtemplate": ["itp"], "application/vnd.shana.informed.interchange": ["iif"], "application/vnd.shana.informed.package": ["ipk"], "application/vnd.simtech-mindmapper": ["twd", "twds"], "application/vnd.smaf": ["mmf"], "application/vnd.smart.teacher": ["teacher"], "application/vnd.software602.filler.form+xml": ["fo"], "application/vnd.solent.sdkm+xml": ["sdkm", "sdkd"], "application/vnd.spotfire.dxp": ["dxp"], "application/vnd.spotfire.sfs": ["sfs"], "application/vnd.stardivision.calc": ["sdc"], "application/vnd.stardivision.draw": ["sda"], "application/vnd.stardivision.impress": ["sdd"], "application/vnd.stardivision.math": ["smf"], "application/vnd.stardivision.writer": ["sdw", "vor"], "application/vnd.stardivision.writer-global": ["sgl"], "application/vnd.stepmania.package": ["smzip"], "application/vnd.stepmania.stepchart": ["sm"], "application/vnd.sun.wadl+xml": ["wadl"], "application/vnd.sun.xml.calc": ["sxc"], "application/vnd.sun.xml.calc.template": ["stc"], "application/vnd.sun.xml.draw": ["sxd"], "application/vnd.sun.xml.draw.template": ["std"], "application/vnd.sun.xml.impress": ["sxi"], "application/vnd.sun.xml.impress.template": ["sti"], "application/vnd.sun.xml.math": ["sxm"], "application/vnd.sun.xml.writer": ["sxw"], "application/vnd.sun.xml.writer.global": ["sxg"], "application/vnd.sun.xml.writer.template": ["stw"], "application/vnd.sus-calendar": ["sus", "susp"], "application/vnd.svd": ["svd"], "application/vnd.symbian.install": ["sis", "sisx"], "application/vnd.syncml+xml": ["xsm"], "application/vnd.syncml.dm+wbxml": ["bdm"], "application/vnd.syncml.dm+xml": ["xdm"], "application/vnd.syncml.dmddf+xml": ["ddf"], "application/vnd.tao.intent-module-archive": ["tao"], "application/vnd.tcpdump.pcap": ["pcap", "cap", "dmp"], "application/vnd.tmobile-livetv": ["tmo"], "application/vnd.trid.tpt": ["tpt"], "application/vnd.triscape.mxs": ["mxs"], "application/vnd.trueapp": ["tra"], "application/vnd.ufdl": ["ufd", "ufdl"], "application/vnd.uiq.theme": ["utz"], "application/vnd.umajin": ["umj"], "application/vnd.unity": ["unityweb"], "application/vnd.uoml+xml": ["uoml"], "application/vnd.vcx": ["vcx"], "application/vnd.visio": ["vsd", "vst", "vss", "vsw"], "application/vnd.visionary": ["vis"], "application/vnd.vsf": ["vsf"], "application/vnd.wap.wbxml": ["wbxml"], "application/vnd.wap.wmlc": ["wmlc"], "application/vnd.wap.wmlscriptc": ["wmlsc"], "application/vnd.webturbo": ["wtb"], "application/vnd.wolfram.player": ["nbp"], "application/vnd.wordperfect": ["wpd"], "application/vnd.wqd": ["wqd"], "application/vnd.wt.stf": ["stf"], "application/vnd.xara": ["xar"], "application/vnd.xfdl": ["xfdl"], "application/vnd.yamaha.hv-dic": ["hvd"], "application/vnd.yamaha.hv-script": ["hvs"], "application/vnd.yamaha.hv-voice": ["hvp"], "application/vnd.yamaha.openscoreformat": ["osf"], "application/vnd.yamaha.openscoreformat.osfpvg+xml": ["osfpvg"], "application/vnd.yamaha.smaf-audio": ["saf"], "application/vnd.yamaha.smaf-phrase": ["spf"], "application/vnd.yellowriver-custom-menu": ["cmp"], "application/vnd.zul": ["zir", "zirz"], "application/vnd.zzazz.deck+xml": ["zaz"], "application/x-7z-compressed": ["7z"], "application/x-abiword": ["abw"], "application/x-ace-compressed": ["ace"], "application/x-apple-diskimage": ["*dmg"], "application/x-arj": ["arj"], "application/x-authorware-bin": ["aab", "x32", "u32", "vox"], "application/x-authorware-map": ["aam"], "application/x-authorware-seg": ["aas"], "application/x-bcpio": ["bcpio"], "application/x-bdoc": ["*bdoc"], "application/x-bittorrent": ["torrent"], "application/x-blorb": ["blb", "blorb"], "application/x-bzip": ["bz"], "application/x-bzip2": ["bz2", "boz"], "application/x-cbr": ["cbr", "cba", "cbt", "cbz", "cb7"], "application/x-cdlink": ["vcd"], "application/x-cfs-compressed": ["cfs"], "application/x-chat": ["chat"], "application/x-chess-pgn": ["pgn"], "application/x-chrome-extension": ["crx"], "application/x-cocoa": ["cco"], "application/x-conference": ["nsc"], "application/x-cpio": ["cpio"], "application/x-csh": ["csh"], "application/x-debian-package": ["*deb", "udeb"], "application/x-dgc-compressed": ["dgc"], "application/x-director": ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"], "application/x-doom": ["wad"], "application/x-dtbncx+xml": ["ncx"], "application/x-dtbook+xml": ["dtb"], "application/x-dtbresource+xml": ["res"], "application/x-dvi": ["dvi"], "application/x-envoy": ["evy"], "application/x-eva": ["eva"], "application/x-font-bdf": ["bdf"], "application/x-font-ghostscript": ["gsf"], "application/x-font-linux-psf": ["psf"], "application/x-font-pcf": ["pcf"], "application/x-font-snf": ["snf"], "application/x-font-type1": ["pfa", "pfb", "pfm", "afm"], "application/x-freearc": ["arc"], "application/x-futuresplash": ["spl"], "application/x-gca-compressed": ["gca"], "application/x-glulx": ["ulx"], "application/x-gnumeric": ["gnumeric"], "application/x-gramps-xml": ["gramps"], "application/x-gtar": ["gtar"], "application/x-hdf": ["hdf"], "application/x-httpd-php": ["php"], "application/x-install-instructions": ["install"], "application/x-iso9660-image": ["*iso"], "application/x-iwork-keynote-sffkey": ["*key"], "application/x-iwork-numbers-sffnumbers": ["*numbers"], "application/x-iwork-pages-sffpages": ["*pages"], "application/x-java-archive-diff": ["jardiff"], "application/x-java-jnlp-file": ["jnlp"], "application/x-keepass2": ["kdbx"], "application/x-latex": ["latex"], "application/x-lua-bytecode": ["luac"], "application/x-lzh-compressed": ["lzh", "lha"], "application/x-makeself": ["run"], "application/x-mie": ["mie"], "application/x-mobipocket-ebook": ["prc", "mobi"], "application/x-ms-application": ["application"], "application/x-ms-shortcut": ["lnk"], "application/x-ms-wmd": ["wmd"], "application/x-ms-wmz": ["wmz"], "application/x-ms-xbap": ["xbap"], "application/x-msaccess": ["mdb"], "application/x-msbinder": ["obd"], "application/x-mscardfile": ["crd"], "application/x-msclip": ["clp"], "application/x-msdos-program": ["*exe"], "application/x-msdownload": ["*exe", "*dll", "com", "bat", "*msi"], "application/x-msmediaview": ["mvb", "m13", "m14"], "application/x-msmetafile": ["*wmf", "*wmz", "*emf", "emz"], "application/x-msmoney": ["mny"], "application/x-mspublisher": ["pub"], "application/x-msschedule": ["scd"], "application/x-msterminal": ["trm"], "application/x-mswrite": ["wri"], "application/x-netcdf": ["nc", "cdf"], "application/x-ns-proxy-autoconfig": ["pac"], "application/x-nzb": ["nzb"], "application/x-perl": ["pl", "pm"], "application/x-pilot": ["*prc", "*pdb"], "application/x-pkcs12": ["p12", "pfx"], "application/x-pkcs7-certificates": ["p7b", "spc"], "application/x-pkcs7-certreqresp": ["p7r"], "application/x-rar-compressed": ["*rar"], "application/x-redhat-package-manager": ["rpm"], "application/x-research-info-systems": ["ris"], "application/x-sea": ["sea"], "application/x-sh": ["sh"], "application/x-shar": ["shar"], "application/x-shockwave-flash": ["swf"], "application/x-silverlight-app": ["xap"], "application/x-sql": ["sql"], "application/x-stuffit": ["sit"], "application/x-stuffitx": ["sitx"], "application/x-subrip": ["srt"], "application/x-sv4cpio": ["sv4cpio"], "application/x-sv4crc": ["sv4crc"], "application/x-t3vm-image": ["t3"], "application/x-tads": ["gam"], "application/x-tar": ["tar"], "application/x-tcl": ["tcl", "tk"], "application/x-tex": ["tex"], "application/x-tex-tfm": ["tfm"], "application/x-texinfo": ["texinfo", "texi"], "application/x-tgif": ["*obj"], "application/x-ustar": ["ustar"], "application/x-virtualbox-hdd": ["hdd"], "application/x-virtualbox-ova": ["ova"], "application/x-virtualbox-ovf": ["ovf"], "application/x-virtualbox-vbox": ["vbox"], "application/x-virtualbox-vbox-extpack": ["vbox-extpack"], "application/x-virtualbox-vdi": ["vdi"], "application/x-virtualbox-vhd": ["vhd"], "application/x-virtualbox-vmdk": ["vmdk"], "application/x-wais-source": ["src"], "application/x-web-app-manifest+json": ["webapp"], "application/x-x509-ca-cert": ["der", "crt", "pem"], "application/x-xfig": ["fig"], "application/x-xliff+xml": ["*xlf"], "application/x-xpinstall": ["xpi"], "application/x-xz": ["xz"], "application/x-zmachine": ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"], "audio/vnd.dece.audio": ["uva", "uvva"], "audio/vnd.digital-winds": ["eol"], "audio/vnd.dra": ["dra"], "audio/vnd.dts": ["dts"], "audio/vnd.dts.hd": ["dtshd"], "audio/vnd.lucent.voice": ["lvp"], "audio/vnd.ms-playready.media.pya": ["pya"], "audio/vnd.nuera.ecelp4800": ["ecelp4800"], "audio/vnd.nuera.ecelp7470": ["ecelp7470"], "audio/vnd.nuera.ecelp9600": ["ecelp9600"], "audio/vnd.rip": ["rip"], "audio/x-aac": ["aac"], "audio/x-aiff": ["aif", "aiff", "aifc"], "audio/x-caf": ["caf"], "audio/x-flac": ["flac"], "audio/x-m4a": ["*m4a"], "audio/x-matroska": ["mka"], "audio/x-mpegurl": ["m3u"], "audio/x-ms-wax": ["wax"], "audio/x-ms-wma": ["wma"], "audio/x-pn-realaudio": ["ram", "ra"], "audio/x-pn-realaudio-plugin": ["rmp"], "audio/x-realaudio": ["*ra"], "audio/x-wav": ["*wav"], "chemical/x-cdx": ["cdx"], "chemical/x-cif": ["cif"], "chemical/x-cmdf": ["cmdf"], "chemical/x-cml": ["cml"], "chemical/x-csml": ["csml"], "chemical/x-xyz": ["xyz"], "image/prs.btif": ["btif"], "image/prs.pti": ["pti"], "image/vnd.adobe.photoshop": ["psd"], "image/vnd.airzip.accelerator.azv": ["azv"], "image/vnd.dece.graphic": ["uvi", "uvvi", "uvg", "uvvg"], "image/vnd.djvu": ["djvu", "djv"], "image/vnd.dvb.subtitle": ["*sub"], "image/vnd.dwg": ["dwg"], "image/vnd.dxf": ["dxf"], "image/vnd.fastbidsheet": ["fbs"], "image/vnd.fpx": ["fpx"], "image/vnd.fst": ["fst"], "image/vnd.fujixerox.edmics-mmr": ["mmr"], "image/vnd.fujixerox.edmics-rlc": ["rlc"], "image/vnd.microsoft.icon": ["ico"], "image/vnd.ms-dds": ["dds"], "image/vnd.ms-modi": ["mdi"], "image/vnd.ms-photo": ["wdp"], "image/vnd.net-fpx": ["npx"], "image/vnd.pco.b16": ["b16"], "image/vnd.tencent.tap": ["tap"], "image/vnd.valve.source.texture": ["vtf"], "image/vnd.wap.wbmp": ["wbmp"], "image/vnd.xiff": ["xif"], "image/vnd.zbrush.pcx": ["pcx"], "image/x-3ds": ["3ds"], "image/x-cmu-raster": ["ras"], "image/x-cmx": ["cmx"], "image/x-freehand": ["fh", "fhc", "fh4", "fh5", "fh7"], "image/x-icon": ["*ico"], "image/x-jng": ["jng"], "image/x-mrsid-image": ["sid"], "image/x-ms-bmp": ["*bmp"], "image/x-pcx": ["*pcx"], "image/x-pict": ["pic", "pct"], "image/x-portable-anymap": ["pnm"], "image/x-portable-bitmap": ["pbm"], "image/x-portable-graymap": ["pgm"], "image/x-portable-pixmap": ["ppm"], "image/x-rgb": ["rgb"], "image/x-tga": ["tga"], "image/x-xbitmap": ["xbm"], "image/x-xpixmap": ["xpm"], "image/x-xwindowdump": ["xwd"], "message/vnd.wfa.wsc": ["wsc"], "model/vnd.collada+xml": ["dae"], "model/vnd.dwf": ["dwf"], "model/vnd.gdl": ["gdl"], "model/vnd.gtw": ["gtw"], "model/vnd.mts": ["mts"], "model/vnd.opengex": ["ogex"], "model/vnd.parasolid.transmit.binary": ["x_b"], "model/vnd.parasolid.transmit.text": ["x_t"], "model/vnd.sap.vds": ["vds"], "model/vnd.usdz+zip": ["usdz"], "model/vnd.valve.source.compiled-map": ["bsp"], "model/vnd.vtu": ["vtu"], "text/prs.lines.tag": ["dsc"], "text/vnd.curl": ["curl"], "text/vnd.curl.dcurl": ["dcurl"], "text/vnd.curl.mcurl": ["mcurl"], "text/vnd.curl.scurl": ["scurl"], "text/vnd.dvb.subtitle": ["sub"], "text/vnd.fly": ["fly"], "text/vnd.fmi.flexstor": ["flx"], "text/vnd.graphviz": ["gv"], "text/vnd.in3d.3dml": ["3dml"], "text/vnd.in3d.spot": ["spot"], "text/vnd.sun.j2me.app-descriptor": ["jad"], "text/vnd.wap.wml": ["wml"], "text/vnd.wap.wmlscript": ["wmls"], "text/x-asm": ["s", "asm"], "text/x-c": ["c", "cc", "cxx", "cpp", "h", "hh", "dic"], "text/x-component": ["htc"], "text/x-fortran": ["f", "for", "f77", "f90"], "text/x-handlebars-template": ["hbs"], "text/x-java-source": ["java"], "text/x-lua": ["lua"], "text/x-markdown": ["mkd"], "text/x-nfo": ["nfo"], "text/x-opml": ["opml"], "text/x-org": ["*org"], "text/x-pascal": ["p", "pas"], "text/x-processing": ["pde"], "text/x-sass": ["sass"], "text/x-scss": ["scss"], "text/x-setext": ["etx"], "text/x-sfv": ["sfv"], "text/x-suse-ymp": ["ymp"], "text/x-uuencode": ["uu"], "text/x-vcalendar": ["vcs"], "text/x-vcard": ["vcf"], "video/vnd.dece.hd": ["uvh", "uvvh"], "video/vnd.dece.mobile": ["uvm", "uvvm"], "video/vnd.dece.pd": ["uvp", "uvvp"], "video/vnd.dece.sd": ["uvs", "uvvs"], "video/vnd.dece.video": ["uvv", "uvvv"], "video/vnd.dvb.file": ["dvb"], "video/vnd.fvt": ["fvt"], "video/vnd.mpegurl": ["mxu", "m4u"], "video/vnd.ms-playready.media.pyv": ["pyv"], "video/vnd.uvvu.mp4": ["uvu", "uvvu"], "video/vnd.vivo": ["viv"], "video/x-f4v": ["f4v"], "video/x-fli": ["fli"], "video/x-flv": ["flv"], "video/x-m4v": ["m4v"], "video/x-matroska": ["mkv", "mk3d", "mks"], "video/x-mng": ["mng"], "video/x-ms-asf": ["asf", "asx"], "video/x-ms-vob": ["vob"], "video/x-ms-wm": ["wm"], "video/x-ms-wmv": ["wmv"], "video/x-ms-wmx": ["wmx"], "video/x-ms-wvx": ["wvx"], "video/x-msvideo": ["avi"], "video/x-sgi-movie": ["movie"], "video/x-smv": ["smv"], "x-conference/x-cooltalk": ["ice"] };
  });
  var zo = y((Sg, Go) => {
    var Sh = jo();
    Go.exports = new Sh(Ho(), $o());
  });
  var Yo = y((kg, Wo) => {
    Wo.exports = function(t, e) {
      for (var i = [], r = 0;r < t.length; r++) {
        var n = e(t[r], r);
        kh(n) ? i.push.apply(i, n) : i.push(n);
      }
      return i;
    };
    var kh = Array.isArray || function(t) {
      return Object.prototype.toString.call(t) === "[object Array]";
    };
  });
  var Qo = y((Cg, Jo) => {
    Jo.exports = Zo;
    function Zo(t, e, i) {
      t instanceof RegExp && (t = Ko(t, i)), e instanceof RegExp && (e = Ko(e, i));
      var r = Xo(t, e, i);
      return r && { start: r[0], end: r[1], pre: i.slice(0, r[0]), body: i.slice(r[0] + t.length, r[1]), post: i.slice(r[1] + e.length) };
    }
    function Ko(t, e) {
      var i = e.match(t);
      return i ? i[0] : null;
    }
    Zo.range = Xo;
    function Xo(t, e, i) {
      var r, n, s, o, l, a = i.indexOf(t), c = i.indexOf(e, a + 1), u = a;
      if (a >= 0 && c > 0) {
        if (t === e)
          return [a, c];
        for (r = [], s = i.length;u >= 0 && !l; )
          u == a ? (r.push(u), a = i.indexOf(t, u + 1)) : r.length == 1 ? l = [r.pop(), c] : (n = r.pop(), n < s && (s = n, o = c), c = i.indexOf(e, u + 1)), u = a < c && a >= 0 ? a : c;
        r.length && (l = [s, o]);
      }
      return l;
    }
  });
  var aa = y((Og, oa) => {
    var Ch = Yo(), ea = Qo();
    oa.exports = Th;
    var ta = "\0SLASH" + Math.random() + "\0", ia = "\0OPEN" + Math.random() + "\0", Nr = "\0CLOSE" + Math.random() + "\0", ra = "\0COMMA" + Math.random() + "\0", na = "\0PERIOD" + Math.random() + "\0";
    function Fr(t) {
      return parseInt(t, 10) == t ? parseInt(t, 10) : t.charCodeAt(0);
    }
    function Oh(t) {
      return t.split("\\\\").join(ta).split("\\{").join(ia).split("\\}").join(Nr).split("\\,").join(ra).split("\\.").join(na);
    }
    function Ih(t) {
      return t.split(ta).join("\\").split(ia).join("{").split(Nr).join("}").split(ra).join(",").split(na).join(".");
    }
    function sa(t) {
      if (!t)
        return [""];
      var e = [], i = ea("{", "}", t);
      if (!i)
        return t.split(",");
      var { pre: r, body: n, post: s } = i, o = r.split(",");
      o[o.length - 1] += "{" + n + "}";
      var l = sa(s);
      return s.length && (o[o.length - 1] += l.shift(), o.push.apply(o, l)), e.push.apply(e, o), e;
    }
    function Th(t) {
      return t ? (t.substr(0, 2) === "{}" && (t = "\\{\\}" + t.substr(2)), Gt(Oh(t), true).map(Ih)) : [];
    }
    function Ah(t) {
      return "{" + t + "}";
    }
    function Rh(t) {
      return /^-?0\d/.test(t);
    }
    function Bh(t, e) {
      return t <= e;
    }
    function Lh(t, e) {
      return t >= e;
    }
    function Gt(t, e) {
      var i = [], r = ea("{", "}", t);
      if (!r || /\$$/.test(r.pre))
        return [t];
      var n = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(r.body), s = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(r.body), o = n || s, l = r.body.indexOf(",") >= 0;
      if (!o && !l)
        return r.post.match(/,.*\}/) ? (t = r.pre + "{" + r.body + Nr + r.post, Gt(t)) : [t];
      var a;
      if (o)
        a = r.body.split(/\.\./);
      else if (a = sa(r.body), a.length === 1 && (a = Gt(a[0], false).map(Ah), a.length === 1)) {
        var u = r.post.length ? Gt(r.post, false) : [""];
        return u.map(function(B) {
          return r.pre + a[0] + B;
        });
      }
      var c = r.pre, u = r.post.length ? Gt(r.post, false) : [""], f;
      if (o) {
        var h = Fr(a[0]), p = Fr(a[1]), d = Math.max(a[0].length, a[1].length), m = a.length == 3 ? Math.abs(Fr(a[2])) : 1, v = Bh, E = p < h;
        E && (m *= -1, v = Lh);
        var I = a.some(Rh);
        f = [];
        for (var w = h;v(w, p); w += m) {
          var C;
          if (s)
            C = String.fromCharCode(w), C === "\\" && (C = "");
          else if (C = String(w), I) {
            var _ = d - C.length;
            if (_ > 0) {
              var $ = new Array(_ + 1).join("0");
              w < 0 ? C = "-" + $ + C.slice(1) : C = $ + C;
            }
          }
          f.push(C);
        }
      } else
        f = Ch(a, function(T) {
          return Gt(T, false);
        });
      for (var k = 0;k < f.length; k++)
        for (var U = 0;U < u.length; U++) {
          var b = c + f[k] + u[U];
          (!e || o || b) && i.push(b);
        }
      return i;
    }
  });
  var pa = y((Ig, ha) => {
    ha.exports = Ge;
    Ge.Minimatch = Fe;
    var yi = function() {
      try {
        return import.meta.require("path");
      } catch {
      }
    }() || { sep: "/" };
    Ge.sep = yi.sep;
    var Dr = Ge.GLOBSTAR = Fe.GLOBSTAR = {}, Ph = aa(), la = { "!": { open: "(?:(?!(?:", close: "))[^/]*?)" }, "?": { open: "(?:", close: ")?" }, "+": { open: "(?:", close: ")+" }, "*": { open: "(?:", close: ")*" }, "@": { open: "(?:", close: ")" } }, Mr = "[^/]", Ur = Mr + "*?", Fh = "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?", Nh = "(?:(?!(?:\\/|^)\\.).)*?", ca = Mh("().*{}+?[]^$\\!");
    function Mh(t) {
      return t.split("").reduce(function(e, i) {
        return e[i] = true, e;
      }, {});
    }
    var ua = /\/+/;
    Ge.filter = Uh;
    function Uh(t, e) {
      return e = e || {}, function(i, r, n) {
        return Ge(i, t, e);
      };
    }
    function ft(t, e) {
      e = e || {};
      var i = {};
      return Object.keys(t).forEach(function(r) {
        i[r] = t[r];
      }), Object.keys(e).forEach(function(r) {
        i[r] = e[r];
      }), i;
    }
    Ge.defaults = function(t) {
      if (!t || typeof t != "object" || !Object.keys(t).length)
        return Ge;
      var e = Ge, i = function(n, s, o) {
        return e(n, s, ft(t, o));
      };
      return i.Minimatch = function(n, s) {
        return new e.Minimatch(n, ft(t, s));
      }, i.Minimatch.defaults = function(n) {
        return e.defaults(ft(t, n)).Minimatch;
      }, i.filter = function(n, s) {
        return e.filter(n, ft(t, s));
      }, i.defaults = function(n) {
        return e.defaults(ft(t, n));
      }, i.makeRe = function(n, s) {
        return e.makeRe(n, ft(t, s));
      }, i.braceExpand = function(n, s) {
        return e.braceExpand(n, ft(t, s));
      }, i.match = function(r, n, s) {
        return e.match(r, n, ft(t, s));
      }, i;
    };
    Fe.defaults = function(t) {
      return Ge.defaults(t).Minimatch;
    };
    function Ge(t, e, i) {
      return Wi(e), i || (i = {}), !i.nocomment && e.charAt(0) === "#" ? false : new Fe(e, i).match(t);
    }
    function Fe(t, e) {
      if (!(this instanceof Fe))
        return new Fe(t, e);
      Wi(t), e || (e = {}), t = t.trim(), !e.allowWindowsEscape && yi.sep !== "/" && (t = t.split(yi.sep).join("/")), this.options = e, this.set = [], this.pattern = t, this.regexp = null, this.negate = false, this.comment = false, this.empty = false, this.partial = !!e.partial, this.make();
    }
    Fe.prototype.debug = function() {
    };
    Fe.prototype.make = Dh;
    function Dh() {
      var t = this.pattern, e = this.options;
      if (!e.nocomment && t.charAt(0) === "#") {
        this.comment = true;
        return;
      }
      if (!t) {
        this.empty = true;
        return;
      }
      this.parseNegate();
      var i = this.globSet = this.braceExpand();
      e.debug && (this.debug = function() {
        console.error.apply(console, arguments);
      }), this.debug(this.pattern, i), i = this.globParts = i.map(function(r) {
        return r.split(ua);
      }), this.debug(this.pattern, i), i = i.map(function(r, n, s) {
        return r.map(this.parse, this);
      }, this), this.debug(this.pattern, i), i = i.filter(function(r) {
        return r.indexOf(false) === -1;
      }), this.debug(this.pattern, i), this.set = i;
    }
    Fe.prototype.parseNegate = jh;
    function jh() {
      var t = this.pattern, e = false, i = this.options, r = 0;
      if (!i.nonegate) {
        for (var n = 0, s = t.length;n < s && t.charAt(n) === "!"; n++)
          e = !e, r++;
        r && (this.pattern = t.substr(r)), this.negate = e;
      }
    }
    Ge.braceExpand = function(t, e) {
      return fa(t, e);
    };
    Fe.prototype.braceExpand = fa;
    function fa(t, e) {
      return e || (this instanceof Fe ? e = this.options : e = {}), t = typeof t == "undefined" ? this.pattern : t, Wi(t), e.nobrace || !/\{(?:(?!\{).)*\}/.test(t) ? [t] : Ph(t);
    }
    var qh = 1024 * 64, Wi = function(t) {
      if (typeof t != "string")
        throw new TypeError("invalid pattern");
      if (t.length > qh)
        throw new TypeError("pattern is too long");
    };
    Fe.prototype.parse = Hh;
    var zi = {};
    function Hh(t, e) {
      Wi(t);
      var i = this.options;
      if (t === "**")
        if (i.noglobstar)
          t = "*";
        else
          return Dr;
      if (t === "")
        return "";
      var r = "", n = !!i.nocase, s = false, o = [], l = [], a, c = false, u = -1, f = -1, h = t.charAt(0) === "." ? "" : i.dot ? "(?!(?:^|\\/)\\.{1,2}(?:$|\\/))" : "(?!\\.)", p = this;
      function d() {
        if (a) {
          switch (a) {
            case "*":
              r += Ur, n = true;
              break;
            case "?":
              r += Mr, n = true;
              break;
            default:
              r += "\\" + a;
              break;
          }
          p.debug("clearStateChar %j %j", a, r), a = false;
        }
      }
      for (var m = 0, v = t.length, E;m < v && (E = t.charAt(m)); m++) {
        if (this.debug("%s	%s %s %j", t, m, r, E), s && ca[E]) {
          r += "\\" + E, s = false;
          continue;
        }
        switch (E) {
          case "/":
            return false;
          case "\\":
            d(), s = true;
            continue;
          case "?":
          case "*":
          case "+":
          case "@":
          case "!":
            if (this.debug("%s	%s %s %j <-- stateChar", t, m, r, E), c) {
              this.debug("  in class"), E === "!" && m === f + 1 && (E = "^"), r += E;
              continue;
            }
            p.debug("call clearStateChar %j", a), d(), a = E, i.noext && d();
            continue;
          case "(":
            if (c) {
              r += "(";
              continue;
            }
            if (!a) {
              r += "\\(";
              continue;
            }
            o.push({ type: a, start: m - 1, reStart: r.length, open: la[a].open, close: la[a].close }), r += a === "!" ? "(?:(?!(?:" : "(?:", this.debug("plType %j %j", a, r), a = false;
            continue;
          case ")":
            if (c || !o.length) {
              r += "\\)";
              continue;
            }
            d(), n = true;
            var I = o.pop();
            r += I.close, I.type === "!" && l.push(I), I.reEnd = r.length;
            continue;
          case "|":
            if (c || !o.length || s) {
              r += "\\|", s = false;
              continue;
            }
            d(), r += "|";
            continue;
          case "[":
            if (d(), c) {
              r += "\\" + E;
              continue;
            }
            c = true, f = m, u = r.length, r += E;
            continue;
          case "]":
            if (m === f + 1 || !c) {
              r += "\\" + E, s = false;
              continue;
            }
            var w = t.substring(f + 1, m);
            try {
              RegExp("[" + w + "]");
            } catch {
              var C = this.parse(w, zi);
              r = r.substr(0, u) + "\\[" + C[0] + "\\]", n = n || C[1], c = false;
              continue;
            }
            n = true, c = false, r += E;
            continue;
          default:
            d(), s ? s = false : ca[E] && !(E === "^" && c) && (r += "\\"), r += E;
        }
      }
      for (c && (w = t.substr(f + 1), C = this.parse(w, zi), r = r.substr(0, u) + "\\[" + C[0], n = n || C[1]), I = o.pop();I; I = o.pop()) {
        var _ = r.slice(I.reStart + I.open.length);
        this.debug("setting tail", r, I), _ = _.replace(/((?:\\{2}){0,64})(\\?)\|/g, function(be, le, ie) {
          return ie || (ie = "\\"), le + le + ie + "|";
        }), this.debug(`tail=%j
   %s`, _, _, I, r);
        var $ = I.type === "*" ? Ur : I.type === "?" ? Mr : "\\" + I.type;
        n = true, r = r.slice(0, I.reStart) + $ + "\\(" + _;
      }
      d(), s && (r += "\\\\");
      var k = false;
      switch (r.charAt(0)) {
        case "[":
        case ".":
        case "(":
          k = true;
      }
      for (var U = l.length - 1;U > -1; U--) {
        var b = l[U], T = r.slice(0, b.reStart), B = r.slice(b.reStart, b.reEnd - 8), G = r.slice(b.reEnd - 8, b.reEnd), L = r.slice(b.reEnd);
        G += L;
        var X = T.split("(").length - 1, R = L;
        for (m = 0;m < X; m++)
          R = R.replace(/\)[+*?]?/, "");
        L = R;
        var N = "";
        L === "" && e !== zi && (N = "$");
        var q = T + B + L + N + G;
        r = q;
      }
      if (r !== "" && n && (r = "(?=.)" + r), k && (r = h + r), e === zi)
        return [r, n];
      if (!n)
        return $h(t);
      var z = i.nocase ? "i" : "";
      try {
        var P = new RegExp("^" + r + "$", z);
      } catch {
        return new RegExp("$.");
      }
      return P._glob = t, P._src = r, P;
    }
    Ge.makeRe = function(t, e) {
      return new Fe(t, e || {}).makeRe();
    };
    Fe.prototype.makeRe = Vh;
    function Vh() {
      if (this.regexp || this.regexp === false)
        return this.regexp;
      var t = this.set;
      if (!t.length)
        return this.regexp = false, this.regexp;
      var e = this.options, i = e.noglobstar ? Ur : e.dot ? Fh : Nh, r = e.nocase ? "i" : "", n = t.map(function(s) {
        return s.map(function(o) {
          return o === Dr ? i : typeof o == "string" ? Gh(o) : o._src;
        }).join("\\/");
      }).join("|");
      n = "^(?:" + n + ")$", this.negate && (n = "^(?!" + n + ").*$");
      try {
        this.regexp = new RegExp(n, r);
      } catch {
        this.regexp = false;
      }
      return this.regexp;
    }
    Ge.match = function(t, e, i) {
      i = i || {};
      var r = new Fe(e, i);
      return t = t.filter(function(n) {
        return r.match(n);
      }), r.options.nonull && !t.length && t.push(e), t;
    };
    Fe.prototype.match = function(e, i) {
      if (typeof i == "undefined" && (i = this.partial), this.debug("match", e, this.pattern), this.comment)
        return false;
      if (this.empty)
        return e === "";
      if (e === "/" && i)
        return true;
      var r = this.options;
      yi.sep !== "/" && (e = e.split(yi.sep).join("/")), e = e.split(ua), this.debug(this.pattern, "split", e);
      var n = this.set;
      this.debug(this.pattern, "set", n);
      var s, o;
      for (o = e.length - 1;o >= 0 && (s = e[o], !s); o--)
        ;
      for (o = 0;o < n.length; o++) {
        var l = n[o], a = e;
        r.matchBase && l.length === 1 && (a = [s]);
        var c = this.matchOne(a, l, i);
        if (c)
          return r.flipNegate ? true : !this.negate;
      }
      return r.flipNegate ? false : this.negate;
    };
    Fe.prototype.matchOne = function(t, e, i) {
      var r = this.options;
      this.debug("matchOne", { this: this, file: t, pattern: e }), this.debug("matchOne", t.length, e.length);
      for (var n = 0, s = 0, o = t.length, l = e.length;n < o && s < l; n++, s++) {
        this.debug("matchOne loop");
        var a = e[s], c = t[n];
        if (this.debug(e, a, c), a === false)
          return false;
        if (a === Dr) {
          this.debug("GLOBSTAR", [e, a, c]);
          var u = n, f = s + 1;
          if (f === l) {
            for (this.debug("** at the end");n < o; n++)
              if (t[n] === "." || t[n] === ".." || !r.dot && t[n].charAt(0) === ".")
                return false;
            return true;
          }
          for (;u < o; ) {
            var h = t[u];
            if (this.debug(`
globstar while`, t, u, e, f, h), this.matchOne(t.slice(u), e.slice(f), i))
              return this.debug("globstar found match!", u, o, h), true;
            if (h === "." || h === ".." || !r.dot && h.charAt(0) === ".") {
              this.debug("dot detected!", t, u, e, f);
              break;
            }
            this.debug("globstar swallow a segment, and continue"), u++;
          }
          return !!(i && (this.debug(`
>>> no match, partial?`, t, u, e, f), u === o));
        }
        var p;
        if (typeof a == "string" ? (p = c === a, this.debug("string match", a, c, p)) : (p = c.match(a), this.debug("pattern match", a, c, p)), !p)
          return false;
      }
      if (n === o && s === l)
        return true;
      if (n === o)
        return i;
      if (s === l)
        return n === o - 1 && t[n] === "";
      throw new Error("wtf?");
    };
    function $h(t) {
      return t.replace(/\\(.)/g, "$1");
    }
    function Gh(t) {
      return t.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    }
  });
  var qr = y((Tg, ma) => {
    var da = import.meta.require("fs"), jr;
    function zh() {
      try {
        return da.statSync("/.dockerenv"), true;
      } catch {
        return false;
      }
    }
    function Wh() {
      try {
        return da.readFileSync("/proc/self/cgroup", "utf8").includes("docker");
      } catch {
        return false;
      }
    }
    ma.exports = () => (jr === undefined && (jr = zh() || Wh()), jr);
  });
  var xa = y((Ag, Hr) => {
    var Yh = import.meta.require("os"), Kh = import.meta.require("fs"), ga = qr(), va = () => {
      if (process.platform !== "linux")
        return false;
      if (Yh.release().toLowerCase().includes("microsoft"))
        return !ga();
      try {
        return Kh.readFileSync("/proc/version", "utf8").toLowerCase().includes("microsoft") ? !ga() : false;
      } catch {
        return false;
      }
    };
    process.env.__IS_WSL_TEST__ ? Hr.exports = va : Hr.exports = va();
  });
  var ya = y((Rg, _a) => {
    _a.exports = (t, e, i) => {
      let r = (n) => Object.defineProperty(t, e, { value: n, enumerable: true, writable: true });
      return Object.defineProperty(t, e, { configurable: true, enumerable: true, get() {
        let n = i();
        return r(n), n;
      }, set(n) {
        r(n);
      } }), t;
    };
  });
  var Oa = y((Bg, Ca) => {
    var Zh = import.meta.require("path"), Xh = import.meta.require("child_process"), { promises: Vr, constants: ka } = import.meta.require("fs"), Yi = xa(), Jh = qr(), $r = ya(), ba = Zh.join(__dirname, "xdg-open"), { platform: zt, arch: wa } = process, Qh = (() => {
      let t = "/mnt/", e;
      return async function() {
        if (e)
          return e;
        let i = "/etc/wsl.conf", r = false;
        try {
          await Vr.access(i, ka.F_OK), r = true;
        } catch {
        }
        if (!r)
          return t;
        let n = await Vr.readFile(i, { encoding: "utf8" }), s = /(?<!#.*)root\s*=\s*(?<mountPoint>.*)/g.exec(n);
        return s ? (e = s.groups.mountPoint.trim(), e = e.endsWith("/") ? e : `${e}/`, e) : t;
      };
    })(), Ea = async (t, e) => {
      let i;
      for (let r of t)
        try {
          return await e(r);
        } catch (n) {
          i = n;
        }
      throw i;
    }, Ki = async (t) => {
      if (t = { wait: false, background: false, newInstance: false, allowNonzeroExitCode: false, ...t }, Array.isArray(t.app))
        return Ea(t.app, (l) => Ki({ ...t, app: l }));
      let { name: e, arguments: i = [] } = t.app || {};
      if (i = [...i], Array.isArray(e))
        return Ea(e, (l) => Ki({ ...t, app: { name: l, arguments: i } }));
      let r, n = [], s = {};
      if (zt === "darwin")
        r = "open", t.wait && n.push("--wait-apps"), t.background && n.push("--background"), t.newInstance && n.push("--new"), e && n.push("-a", e);
      else if (zt === "win32" || Yi && !Jh()) {
        let l = await Qh();
        r = Yi ? `${l}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe` : `${process.env.SYSTEMROOT}\\System32\\WindowsPowerShell\\v1.0\\powershell`, n.push("-NoProfile", "-NonInteractive", "\u2013ExecutionPolicy", "Bypass", "-EncodedCommand"), Yi || (s.windowsVerbatimArguments = true);
        let a = ["Start"];
        t.wait && a.push("-Wait"), e ? (a.push(`"\`"${e}\`""`, "-ArgumentList"), t.target && i.unshift(t.target)) : t.target && a.push(`"${t.target}"`), i.length > 0 && (i = i.map((c) => `"\`"${c}\`""`), a.push(i.join(","))), t.target = Buffer.from(a.join(" "), "utf16le").toString("base64");
      } else {
        if (e)
          r = e;
        else {
          let l = !__dirname || __dirname === "/", a = false;
          try {
            await Vr.access(ba, ka.X_OK), a = true;
          } catch {
          }
          r = process.versions.electron || zt === "android" || l || !a ? "xdg-open" : ba;
        }
        i.length > 0 && n.push(...i), t.wait || (s.stdio = "ignore", s.detached = true);
      }
      t.target && n.push(t.target), zt === "darwin" && i.length > 0 && n.push("--args", ...i);
      let o = Xh.spawn(r, n, s);
      return t.wait ? new Promise((l, a) => {
        o.once("error", a), o.once("close", (c) => {
          if (t.allowNonzeroExitCode && c > 0) {
            a(new Error(`Exited with code ${c}`));
            return;
          }
          l(o);
        });
      }) : (o.unref(), o);
    }, Gr = (t, e) => {
      if (typeof t != "string")
        throw new TypeError("Expected a `target`");
      return Ki({ ...e, target: t });
    }, ep = (t, e) => {
      if (typeof t != "string")
        throw new TypeError("Expected a `name`");
      let { arguments: i = [] } = e || {};
      if (i != null && !Array.isArray(i))
        throw new TypeError("Expected `appArguments` as Array type");
      return Ki({ ...e, app: { name: t, arguments: i } });
    };
    function Sa(t) {
      if (typeof t == "string" || Array.isArray(t))
        return t;
      let { [wa]: e } = t;
      if (!e)
        throw new Error(`${wa} is not supported`);
      return e;
    }
    function zr({ [zt]: t }, { wsl: e }) {
      if (e && Yi)
        return Sa(e);
      if (!t)
        throw new Error(`${zt} is not supported`);
      return Sa(t);
    }
    var Zi = {};
    $r(Zi, "chrome", () => zr({ darwin: "google chrome", win32: "chrome", linux: ["google-chrome", "google-chrome-stable", "chromium"] }, { wsl: { ia32: "/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe", x64: ["/mnt/c/Program Files/Google/Chrome/Application/chrome.exe", "/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe"] } }));
    $r(Zi, "firefox", () => zr({ darwin: "firefox", win32: "C:\\Program Files\\Mozilla Firefox\\firefox.exe", linux: "firefox" }, { wsl: "/mnt/c/Program Files/Mozilla Firefox/firefox.exe" }));
    $r(Zi, "edge", () => zr({ darwin: "microsoft edge", win32: "msedge", linux: ["microsoft-edge", "microsoft-edge-dev"] }, { wsl: "/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe" }));
    Gr.apps = Zi;
    Gr.openApp = ep;
    Ca.exports = Gr;
  });
  var Wr = y((Lg, Ta) => {
    var tp = import.meta.require("util"), Ia = import.meta.require("stream"), tt = Ta.exports = function() {
      Ia.call(this), this._buffers = [], this._buffered = 0, this._reads = [], this._paused = false, this._encoding = "utf8", this.writable = true;
    };
    tp.inherits(tt, Ia);
    tt.prototype.read = function(t, e) {
      this._reads.push({ length: Math.abs(t), allowLess: t < 0, func: e }), process.nextTick(function() {
        this._process(), this._paused && this._reads && this._reads.length > 0 && (this._paused = false, this.emit("drain"));
      }.bind(this));
    };
    tt.prototype.write = function(t, e) {
      if (!this.writable)
        return this.emit("error", new Error("Stream not writable")), false;
      let i;
      return Buffer.isBuffer(t) ? i = t : i = Buffer.from(t, e || this._encoding), this._buffers.push(i), this._buffered += i.length, this._process(), this._reads && this._reads.length === 0 && (this._paused = true), this.writable && !this._paused;
    };
    tt.prototype.end = function(t, e) {
      t && this.write(t, e), this.writable = false, this._buffers && (this._buffers.length === 0 ? this._end() : (this._buffers.push(null), this._process()));
    };
    tt.prototype.destroySoon = tt.prototype.end;
    tt.prototype._end = function() {
      this._reads.length > 0 && this.emit("error", new Error("Unexpected end of input")), this.destroy();
    };
    tt.prototype.destroy = function() {
      this._buffers && (this.writable = false, this._reads = null, this._buffers = null, this.emit("close"));
    };
    tt.prototype._processReadAllowingLess = function(t) {
      this._reads.shift();
      let e = this._buffers[0];
      e.length > t.length ? (this._buffered -= t.length, this._buffers[0] = e.slice(t.length), t.func.call(this, e.slice(0, t.length))) : (this._buffered -= e.length, this._buffers.shift(), t.func.call(this, e));
    };
    tt.prototype._processRead = function(t) {
      this._reads.shift();
      let e = 0, i = 0, r = Buffer.alloc(t.length);
      for (;e < t.length; ) {
        let n = this._buffers[i++], s = Math.min(n.length, t.length - e);
        n.copy(r, e, 0, s), e += s, s !== n.length && (this._buffers[--i] = n.slice(s));
      }
      i > 0 && this._buffers.splice(0, i), this._buffered -= t.length, t.func.call(this, r);
    };
    tt.prototype._process = function() {
      try {
        for (;this._buffered > 0 && this._reads && this._reads.length > 0; ) {
          let t = this._reads[0];
          if (t.allowLess)
            this._processReadAllowingLess(t);
          else if (this._buffered >= t.length)
            this._processRead(t);
          else
            break;
        }
        this._buffers && !this.writable && this._end();
      } catch (t) {
        this.emit("error", t);
      }
    };
  });
  var Kr = y((Yr) => {
    var ht = [{ x: [0], y: [0] }, { x: [4], y: [0] }, { x: [0, 4], y: [4] }, { x: [2, 6], y: [0, 4] }, { x: [0, 2, 4, 6], y: [2, 6] }, { x: [1, 3, 5, 7], y: [0, 2, 4, 6] }, { x: [0, 1, 2, 3, 4, 5, 6, 7], y: [1, 3, 5, 7] }];
    Yr.getImagePasses = function(t, e) {
      let i = [], r = t % 8, n = e % 8, s = (t - r) / 8, o = (e - n) / 8;
      for (let l = 0;l < ht.length; l++) {
        let a = ht[l], c = s * a.x.length, u = o * a.y.length;
        for (let f = 0;f < a.x.length && a.x[f] < r; f++)
          c++;
        for (let f = 0;f < a.y.length && a.y[f] < n; f++)
          u++;
        c > 0 && u > 0 && i.push({ width: c, height: u, index: l });
      }
      return i;
    };
    Yr.getInterlaceIterator = function(t) {
      return function(e, i, r) {
        let n = e % ht[r].x.length, s = (e - n) / ht[r].x.length * 8 + ht[r].x[n], o = i % ht[r].y.length, l = (i - o) / ht[r].y.length * 8 + ht[r].y[o];
        return s * 4 + l * t * 4;
      };
    };
  });
  var Zr = y((Fg, Aa) => {
    Aa.exports = function(e, i, r) {
      let n = e + i - r, s = Math.abs(n - e), o = Math.abs(n - i), l = Math.abs(n - r);
      return s <= o && s <= l ? e : o <= l ? i : r;
    };
  });
  var Xr = y((Ng, Ba) => {
    var ip = Kr(), rp = Zr();
    function Ra(t, e, i) {
      let r = t * e;
      return i !== 8 && (r = Math.ceil(r / (8 / i))), r;
    }
    var Wt = Ba.exports = function(t, e) {
      let { width: i, height: r, interlace: n, bpp: s, depth: o } = t;
      if (this.read = e.read, this.write = e.write, this.complete = e.complete, this._imageIndex = 0, this._images = [], n) {
        let l = ip.getImagePasses(i, r);
        for (let a = 0;a < l.length; a++)
          this._images.push({ byteWidth: Ra(l[a].width, s, o), height: l[a].height, lineIndex: 0 });
      } else
        this._images.push({ byteWidth: Ra(i, s, o), height: r, lineIndex: 0 });
      o === 8 ? this._xComparison = s : o === 16 ? this._xComparison = s * 2 : this._xComparison = 1;
    };
    Wt.prototype.start = function() {
      this.read(this._images[this._imageIndex].byteWidth + 1, this._reverseFilterLine.bind(this));
    };
    Wt.prototype._unFilterType1 = function(t, e, i) {
      let r = this._xComparison, n = r - 1;
      for (let s = 0;s < i; s++) {
        let o = t[1 + s], l = s > n ? e[s - r] : 0;
        e[s] = o + l;
      }
    };
    Wt.prototype._unFilterType2 = function(t, e, i) {
      let r = this._lastLine;
      for (let n = 0;n < i; n++) {
        let s = t[1 + n], o = r ? r[n] : 0;
        e[n] = s + o;
      }
    };
    Wt.prototype._unFilterType3 = function(t, e, i) {
      let r = this._xComparison, n = r - 1, s = this._lastLine;
      for (let o = 0;o < i; o++) {
        let l = t[1 + o], a = s ? s[o] : 0, c = o > n ? e[o - r] : 0, u = Math.floor((c + a) / 2);
        e[o] = l + u;
      }
    };
    Wt.prototype._unFilterType4 = function(t, e, i) {
      let r = this._xComparison, n = r - 1, s = this._lastLine;
      for (let o = 0;o < i; o++) {
        let l = t[1 + o], a = s ? s[o] : 0, c = o > n ? e[o - r] : 0, u = o > n && s ? s[o - r] : 0, f = rp(c, a, u);
        e[o] = l + f;
      }
    };
    Wt.prototype._reverseFilterLine = function(t) {
      let e = t[0], i, r = this._images[this._imageIndex], n = r.byteWidth;
      if (e === 0)
        i = t.slice(1, n + 1);
      else
        switch (i = Buffer.alloc(n), e) {
          case 1:
            this._unFilterType1(t, i, n);
            break;
          case 2:
            this._unFilterType2(t, i, n);
            break;
          case 3:
            this._unFilterType3(t, i, n);
            break;
          case 4:
            this._unFilterType4(t, i, n);
            break;
          default:
            throw new Error("Unrecognised filter type - " + e);
        }
      this.write(i), r.lineIndex++, r.lineIndex >= r.height ? (this._lastLine = null, this._imageIndex++, r = this._images[this._imageIndex]) : this._lastLine = i, r ? this.read(r.byteWidth + 1, this._reverseFilterLine.bind(this)) : (this._lastLine = null, this.complete());
    };
  });
  var Fa = y((Mg, Pa) => {
    var np = import.meta.require("util"), La = Wr(), sp = Xr(), op = Pa.exports = function(t) {
      La.call(this);
      let e = [], i = this;
      this._filter = new sp(t, { read: this.read.bind(this), write: function(r) {
        e.push(r);
      }, complete: function() {
        i.emit("complete", Buffer.concat(e));
      } }), this._filter.start();
    };
    np.inherits(op, La);
  });
  var Yt = y((Ug, Na) => {
    Na.exports = { PNG_SIGNATURE: [137, 80, 78, 71, 13, 10, 26, 10], TYPE_IHDR: 1229472850, TYPE_IEND: 1229278788, TYPE_IDAT: 1229209940, TYPE_PLTE: 1347179589, TYPE_tRNS: 1951551059, TYPE_gAMA: 1732332865, COLORTYPE_GRAYSCALE: 0, COLORTYPE_PALETTE: 1, COLORTYPE_COLOR: 2, COLORTYPE_ALPHA: 4, COLORTYPE_PALETTE_COLOR: 3, COLORTYPE_COLOR_ALPHA: 6, COLORTYPE_TO_BPP_MAP: { 0: 1, 2: 3, 3: 1, 4: 2, 6: 4 }, GAMMA_DIVISION: 1e5 };
  });
  var en = y((Dg, Ma) => {
    var Jr = [];
    (function() {
      for (let t = 0;t < 256; t++) {
        let e = t;
        for (let i = 0;i < 8; i++)
          e & 1 ? e = 3988292384 ^ e >>> 1 : e = e >>> 1;
        Jr[t] = e;
      }
    })();
    var Qr = Ma.exports = function() {
      this._crc = -1;
    };
    Qr.prototype.write = function(t) {
      for (let e = 0;e < t.length; e++)
        this._crc = Jr[(this._crc ^ t[e]) & 255] ^ this._crc >>> 8;
      return true;
    };
    Qr.prototype.crc32 = function() {
      return this._crc ^ -1;
    };
    Qr.crc32 = function(t) {
      let e = -1;
      for (let i = 0;i < t.length; i++)
        e = Jr[(e ^ t[i]) & 255] ^ e >>> 8;
      return e ^ -1;
    };
  });
  var tn = y((jg, Ua) => {
    var Oe = Yt(), ap = en(), Ae = Ua.exports = function(t, e) {
      this._options = t, t.checkCRC = t.checkCRC !== false, this._hasIHDR = false, this._hasIEND = false, this._emittedHeadersFinished = false, this._palette = [], this._colorType = 0, this._chunks = {}, this._chunks[Oe.TYPE_IHDR] = this._handleIHDR.bind(this), this._chunks[Oe.TYPE_IEND] = this._handleIEND.bind(this), this._chunks[Oe.TYPE_IDAT] = this._handleIDAT.bind(this), this._chunks[Oe.TYPE_PLTE] = this._handlePLTE.bind(this), this._chunks[Oe.TYPE_tRNS] = this._handleTRNS.bind(this), this._chunks[Oe.TYPE_gAMA] = this._handleGAMA.bind(this), this.read = e.read, this.error = e.error, this.metadata = e.metadata, this.gamma = e.gamma, this.transColor = e.transColor, this.palette = e.palette, this.parsed = e.parsed, this.inflateData = e.inflateData, this.finished = e.finished, this.simpleTransparency = e.simpleTransparency, this.headersFinished = e.headersFinished || function() {
      };
    };
    Ae.prototype.start = function() {
      this.read(Oe.PNG_SIGNATURE.length, this._parseSignature.bind(this));
    };
    Ae.prototype._parseSignature = function(t) {
      let e = Oe.PNG_SIGNATURE;
      for (let i = 0;i < e.length; i++)
        if (t[i] !== e[i]) {
          this.error(new Error("Invalid file signature"));
          return;
        }
      this.read(8, this._parseChunkBegin.bind(this));
    };
    Ae.prototype._parseChunkBegin = function(t) {
      let e = t.readUInt32BE(0), i = t.readUInt32BE(4), r = "";
      for (let s = 4;s < 8; s++)
        r += String.fromCharCode(t[s]);
      let n = !!(t[4] & 32);
      if (!this._hasIHDR && i !== Oe.TYPE_IHDR) {
        this.error(new Error("Expected IHDR on beggining"));
        return;
      }
      if (this._crc = new ap, this._crc.write(Buffer.from(r)), this._chunks[i])
        return this._chunks[i](e);
      if (!n) {
        this.error(new Error("Unsupported critical chunk type " + r));
        return;
      }
      this.read(e + 4, this._skipChunk.bind(this));
    };
    Ae.prototype._skipChunk = function() {
      this.read(8, this._parseChunkBegin.bind(this));
    };
    Ae.prototype._handleChunkEnd = function() {
      this.read(4, this._parseChunkEnd.bind(this));
    };
    Ae.prototype._parseChunkEnd = function(t) {
      let e = t.readInt32BE(0), i = this._crc.crc32();
      if (this._options.checkCRC && i !== e) {
        this.error(new Error("Crc error - " + e + " - " + i));
        return;
      }
      this._hasIEND || this.read(8, this._parseChunkBegin.bind(this));
    };
    Ae.prototype._handleIHDR = function(t) {
      this.read(t, this._parseIHDR.bind(this));
    };
    Ae.prototype._parseIHDR = function(t) {
      this._crc.write(t);
      let e = t.readUInt32BE(0), i = t.readUInt32BE(4), r = t[8], n = t[9], s = t[10], o = t[11], l = t[12];
      if (r !== 8 && r !== 4 && r !== 2 && r !== 1 && r !== 16) {
        this.error(new Error("Unsupported bit depth " + r));
        return;
      }
      if (!(n in Oe.COLORTYPE_TO_BPP_MAP)) {
        this.error(new Error("Unsupported color type"));
        return;
      }
      if (s !== 0) {
        this.error(new Error("Unsupported compression method"));
        return;
      }
      if (o !== 0) {
        this.error(new Error("Unsupported filter method"));
        return;
      }
      if (l !== 0 && l !== 1) {
        this.error(new Error("Unsupported interlace method"));
        return;
      }
      this._colorType = n;
      let a = Oe.COLORTYPE_TO_BPP_MAP[this._colorType];
      this._hasIHDR = true, this.metadata({ width: e, height: i, depth: r, interlace: !!l, palette: !!(n & Oe.COLORTYPE_PALETTE), color: !!(n & Oe.COLORTYPE_COLOR), alpha: !!(n & Oe.COLORTYPE_ALPHA), bpp: a, colorType: n }), this._handleChunkEnd();
    };
    Ae.prototype._handlePLTE = function(t) {
      this.read(t, this._parsePLTE.bind(this));
    };
    Ae.prototype._parsePLTE = function(t) {
      this._crc.write(t);
      let e = Math.floor(t.length / 3);
      for (let i = 0;i < e; i++)
        this._palette.push([t[i * 3], t[i * 3 + 1], t[i * 3 + 2], 255]);
      this.palette(this._palette), this._handleChunkEnd();
    };
    Ae.prototype._handleTRNS = function(t) {
      this.simpleTransparency(), this.read(t, this._parseTRNS.bind(this));
    };
    Ae.prototype._parseTRNS = function(t) {
      if (this._crc.write(t), this._colorType === Oe.COLORTYPE_PALETTE_COLOR) {
        if (this._palette.length === 0) {
          this.error(new Error("Transparency chunk must be after palette"));
          return;
        }
        if (t.length > this._palette.length) {
          this.error(new Error("More transparent colors than palette size"));
          return;
        }
        for (let e = 0;e < t.length; e++)
          this._palette[e][3] = t[e];
        this.palette(this._palette);
      }
      this._colorType === Oe.COLORTYPE_GRAYSCALE && this.transColor([t.readUInt16BE(0)]), this._colorType === Oe.COLORTYPE_COLOR && this.transColor([t.readUInt16BE(0), t.readUInt16BE(2), t.readUInt16BE(4)]), this._handleChunkEnd();
    };
    Ae.prototype._handleGAMA = function(t) {
      this.read(t, this._parseGAMA.bind(this));
    };
    Ae.prototype._parseGAMA = function(t) {
      this._crc.write(t), this.gamma(t.readUInt32BE(0) / Oe.GAMMA_DIVISION), this._handleChunkEnd();
    };
    Ae.prototype._handleIDAT = function(t) {
      this._emittedHeadersFinished || (this._emittedHeadersFinished = true, this.headersFinished()), this.read(-t, this._parseIDAT.bind(this, t));
    };
    Ae.prototype._parseIDAT = function(t, e) {
      if (this._crc.write(e), this._colorType === Oe.COLORTYPE_PALETTE_COLOR && this._palette.length === 0)
        throw new Error("Expected palette not found");
      this.inflateData(e);
      let i = t - e.length;
      i > 0 ? this._handleIDAT(i) : this._handleChunkEnd();
    };
    Ae.prototype._handleIEND = function(t) {
      this.read(t, this._parseIEND.bind(this));
    };
    Ae.prototype._parseIEND = function(t) {
      this._crc.write(t), this._hasIEND = true, this._handleChunkEnd(), this.finished && this.finished();
    };
  });
  var rn = y((ja) => {
    var Da = Kr(), lp = [function() {
    }, function(t, e, i, r) {
      if (r === e.length)
        throw new Error("Ran out of data");
      let n = e[r];
      t[i] = n, t[i + 1] = n, t[i + 2] = n, t[i + 3] = 255;
    }, function(t, e, i, r) {
      if (r + 1 >= e.length)
        throw new Error("Ran out of data");
      let n = e[r];
      t[i] = n, t[i + 1] = n, t[i + 2] = n, t[i + 3] = e[r + 1];
    }, function(t, e, i, r) {
      if (r + 2 >= e.length)
        throw new Error("Ran out of data");
      t[i] = e[r], t[i + 1] = e[r + 1], t[i + 2] = e[r + 2], t[i + 3] = 255;
    }, function(t, e, i, r) {
      if (r + 3 >= e.length)
        throw new Error("Ran out of data");
      t[i] = e[r], t[i + 1] = e[r + 1], t[i + 2] = e[r + 2], t[i + 3] = e[r + 3];
    }], cp = [function() {
    }, function(t, e, i, r) {
      let n = e[0];
      t[i] = n, t[i + 1] = n, t[i + 2] = n, t[i + 3] = r;
    }, function(t, e, i) {
      let r = e[0];
      t[i] = r, t[i + 1] = r, t[i + 2] = r, t[i + 3] = e[1];
    }, function(t, e, i, r) {
      t[i] = e[0], t[i + 1] = e[1], t[i + 2] = e[2], t[i + 3] = r;
    }, function(t, e, i) {
      t[i] = e[0], t[i + 1] = e[1], t[i + 2] = e[2], t[i + 3] = e[3];
    }];
    function up(t, e) {
      let i = [], r = 0;
      function n() {
        if (r === t.length)
          throw new Error("Ran out of data");
        let s = t[r];
        r++;
        let o, l, a, c, u, f, h, p;
        switch (e) {
          default:
            throw new Error("unrecognised depth");
          case 16:
            h = t[r], r++, i.push((s << 8) + h);
            break;
          case 4:
            h = s & 15, p = s >> 4, i.push(p, h);
            break;
          case 2:
            u = s & 3, f = s >> 2 & 3, h = s >> 4 & 3, p = s >> 6 & 3, i.push(p, h, f, u);
            break;
          case 1:
            o = s & 1, l = s >> 1 & 1, a = s >> 2 & 1, c = s >> 3 & 1, u = s >> 4 & 1, f = s >> 5 & 1, h = s >> 6 & 1, p = s >> 7 & 1, i.push(p, h, f, u, c, a, l, o);
            break;
        }
      }
      return { get: function(s) {
        for (;i.length < s; )
          n();
        let o = i.slice(0, s);
        return i = i.slice(s), o;
      }, resetAfterLine: function() {
        i.length = 0;
      }, end: function() {
        if (r !== t.length)
          throw new Error("extra data found");
      } };
    }
    function fp(t, e, i, r, n, s) {
      let { width: o, height: l, index: a } = t;
      for (let c = 0;c < l; c++)
        for (let u = 0;u < o; u++) {
          let f = i(u, c, a);
          lp[r](e, n, f, s), s += r;
        }
      return s;
    }
    function hp(t, e, i, r, n, s) {
      let { width: o, height: l, index: a } = t;
      for (let c = 0;c < l; c++) {
        for (let u = 0;u < o; u++) {
          let f = n.get(r), h = i(u, c, a);
          cp[r](e, f, h, s);
        }
        n.resetAfterLine();
      }
    }
    ja.dataToBitMap = function(t, e) {
      let { width: i, height: r, depth: n, bpp: s, interlace: o } = e, l;
      n !== 8 && (l = up(t, n));
      let a;
      n <= 8 ? a = Buffer.alloc(i * r * 4) : a = new Uint16Array(i * r * 4);
      let c = Math.pow(2, n) - 1, u = 0, f, h;
      if (o)
        f = Da.getImagePasses(i, r), h = Da.getInterlaceIterator(i, r);
      else {
        let p = 0;
        h = function() {
          let d = p;
          return p += 4, d;
        }, f = [{ width: i, height: r }];
      }
      for (let p = 0;p < f.length; p++)
        n === 8 ? u = fp(f[p], a, h, s, t, u) : hp(f[p], a, h, s, l, c);
      if (n === 8) {
        if (u !== t.length)
          throw new Error("extra data found");
      } else
        l.end();
      return a;
    };
  });
  var nn = y((Hg, qa) => {
    function pp(t, e, i, r, n) {
      let s = 0;
      for (let o = 0;o < r; o++)
        for (let l = 0;l < i; l++) {
          let a = n[t[s]];
          if (!a)
            throw new Error("index " + t[s] + " not in palette");
          for (let c = 0;c < 4; c++)
            e[s + c] = a[c];
          s += 4;
        }
    }
    function dp(t, e, i, r, n) {
      let s = 0;
      for (let o = 0;o < r; o++)
        for (let l = 0;l < i; l++) {
          let a = false;
          if (n.length === 1 ? n[0] === t[s] && (a = true) : n[0] === t[s] && n[1] === t[s + 1] && n[2] === t[s + 2] && (a = true), a)
            for (let c = 0;c < 4; c++)
              e[s + c] = 0;
          s += 4;
        }
    }
    function mp(t, e, i, r, n) {
      let s = 255, o = Math.pow(2, n) - 1, l = 0;
      for (let a = 0;a < r; a++)
        for (let c = 0;c < i; c++) {
          for (let u = 0;u < 4; u++)
            e[l + u] = Math.floor(t[l + u] * s / o + 0.5);
          l += 4;
        }
    }
    qa.exports = function(t, e, i = false) {
      let { depth: r, width: n, height: s, colorType: o, transColor: l, palette: a } = e, c = t;
      return o === 3 ? pp(t, c, n, s, a) : (l && dp(t, c, n, s, l), r !== 8 && !i && (r === 16 && (c = Buffer.alloc(n * s * 4)), mp(t, c, n, s, r))), c;
    };
  });
  var $a = y((Vg, Va) => {
    var gp = import.meta.require("util"), sn = import.meta.require("zlib"), Ha = Wr(), vp = Fa(), xp = tn(), _p = rn(), yp = nn(), st = Va.exports = function(t) {
      Ha.call(this), this._parser = new xp(t, { read: this.read.bind(this), error: this._handleError.bind(this), metadata: this._handleMetaData.bind(this), gamma: this.emit.bind(this, "gamma"), palette: this._handlePalette.bind(this), transColor: this._handleTransColor.bind(this), finished: this._finished.bind(this), inflateData: this._inflateData.bind(this), simpleTransparency: this._simpleTransparency.bind(this), headersFinished: this._headersFinished.bind(this) }), this._options = t, this.writable = true, this._parser.start();
    };
    gp.inherits(st, Ha);
    st.prototype._handleError = function(t) {
      this.emit("error", t), this.writable = false, this.destroy(), this._inflate && this._inflate.destroy && this._inflate.destroy(), this._filter && (this._filter.destroy(), this._filter.on("error", function() {
      })), this.errord = true;
    };
    st.prototype._inflateData = function(t) {
      if (!this._inflate)
        if (this._bitmapInfo.interlace)
          this._inflate = sn.createInflate(), this._inflate.on("error", this.emit.bind(this, "error")), this._filter.on("complete", this._complete.bind(this)), this._inflate.pipe(this._filter);
        else {
          let i = ((this._bitmapInfo.width * this._bitmapInfo.bpp * this._bitmapInfo.depth + 7 >> 3) + 1) * this._bitmapInfo.height, r = Math.max(i, sn.Z_MIN_CHUNK);
          this._inflate = sn.createInflate({ chunkSize: r });
          let n = i, s = this.emit.bind(this, "error");
          this._inflate.on("error", function(l) {
            n && s(l);
          }), this._filter.on("complete", this._complete.bind(this));
          let o = this._filter.write.bind(this._filter);
          this._inflate.on("data", function(l) {
            n && (l.length > n && (l = l.slice(0, n)), n -= l.length, o(l));
          }), this._inflate.on("end", this._filter.end.bind(this._filter));
        }
      this._inflate.write(t);
    };
    st.prototype._handleMetaData = function(t) {
      this._metaData = t, this._bitmapInfo = Object.create(t), this._filter = new vp(this._bitmapInfo);
    };
    st.prototype._handleTransColor = function(t) {
      this._bitmapInfo.transColor = t;
    };
    st.prototype._handlePalette = function(t) {
      this._bitmapInfo.palette = t;
    };
    st.prototype._simpleTransparency = function() {
      this._metaData.alpha = true;
    };
    st.prototype._headersFinished = function() {
      this.emit("metadata", this._metaData);
    };
    st.prototype._finished = function() {
      this.errord || (this._inflate ? this._inflate.end() : this.emit("error", "No Inflate block"));
    };
    st.prototype._complete = function(t) {
      if (this.errord)
        return;
      let e;
      try {
        let i = _p.dataToBitMap(t, this._bitmapInfo);
        e = yp(i, this._bitmapInfo, this._options.skipRescale), i = null;
      } catch (i) {
        this._handleError(i);
        return;
      }
      this.emit("parsed", e);
    };
  });
  var za = y(($g, Ga) => {
    var Ke = Yt();
    Ga.exports = function(t, e, i, r) {
      let n = [Ke.COLORTYPE_COLOR_ALPHA, Ke.COLORTYPE_ALPHA].indexOf(r.colorType) !== -1;
      if (r.colorType === r.inputColorType) {
        let d = function() {
          let m = new ArrayBuffer(2);
          return new DataView(m).setInt16(0, 256, true), new Int16Array(m)[0] !== 256;
        }();
        if (r.bitDepth === 8 || r.bitDepth === 16 && d)
          return t;
      }
      let s = r.bitDepth !== 16 ? t : new Uint16Array(t.buffer), o = 255, l = Ke.COLORTYPE_TO_BPP_MAP[r.inputColorType];
      l === 4 && !r.inputHasAlpha && (l = 3);
      let a = Ke.COLORTYPE_TO_BPP_MAP[r.colorType];
      r.bitDepth === 16 && (o = 65535, a *= 2);
      let c = Buffer.alloc(e * i * a), u = 0, f = 0, h = r.bgColor || {};
      h.red === undefined && (h.red = o), h.green === undefined && (h.green = o), h.blue === undefined && (h.blue = o);
      function p() {
        let d, m, v, E = o;
        switch (r.inputColorType) {
          case Ke.COLORTYPE_COLOR_ALPHA:
            E = s[u + 3], d = s[u], m = s[u + 1], v = s[u + 2];
            break;
          case Ke.COLORTYPE_COLOR:
            d = s[u], m = s[u + 1], v = s[u + 2];
            break;
          case Ke.COLORTYPE_ALPHA:
            E = s[u + 1], d = s[u], m = d, v = d;
            break;
          case Ke.COLORTYPE_GRAYSCALE:
            d = s[u], m = d, v = d;
            break;
          default:
            throw new Error("input color type:" + r.inputColorType + " is not supported at present");
        }
        return r.inputHasAlpha && (n || (E /= o, d = Math.min(Math.max(Math.round((1 - E) * h.red + E * d), 0), o), m = Math.min(Math.max(Math.round((1 - E) * h.green + E * m), 0), o), v = Math.min(Math.max(Math.round((1 - E) * h.blue + E * v), 0), o))), { red: d, green: m, blue: v, alpha: E };
      }
      for (let d = 0;d < i; d++)
        for (let m = 0;m < e; m++) {
          let v = p(s, u);
          switch (r.colorType) {
            case Ke.COLORTYPE_COLOR_ALPHA:
            case Ke.COLORTYPE_COLOR:
              r.bitDepth === 8 ? (c[f] = v.red, c[f + 1] = v.green, c[f + 2] = v.blue, n && (c[f + 3] = v.alpha)) : (c.writeUInt16BE(v.red, f), c.writeUInt16BE(v.green, f + 2), c.writeUInt16BE(v.blue, f + 4), n && c.writeUInt16BE(v.alpha, f + 6));
              break;
            case Ke.COLORTYPE_ALPHA:
            case Ke.COLORTYPE_GRAYSCALE: {
              let E = (v.red + v.green + v.blue) / 3;
              r.bitDepth === 8 ? (c[f] = E, n && (c[f + 1] = v.alpha)) : (c.writeUInt16BE(E, f), n && c.writeUInt16BE(v.alpha, f + 2));
              break;
            }
            default:
              throw new Error("unrecognised color Type " + r.colorType);
          }
          u += l, f += a;
        }
      return c;
    };
  });
  var Ka = y((Gg, Ya) => {
    var Wa = Zr();
    function bp(t, e, i, r, n) {
      for (let s = 0;s < i; s++)
        r[n + s] = t[e + s];
    }
    function wp(t, e, i) {
      let r = 0, n = e + i;
      for (let s = e;s < n; s++)
        r += Math.abs(t[s]);
      return r;
    }
    function Ep(t, e, i, r, n, s) {
      for (let o = 0;o < i; o++) {
        let l = o >= s ? t[e + o - s] : 0, a = t[e + o] - l;
        r[n + o] = a;
      }
    }
    function Sp(t, e, i, r) {
      let n = 0;
      for (let s = 0;s < i; s++) {
        let o = s >= r ? t[e + s - r] : 0, l = t[e + s] - o;
        n += Math.abs(l);
      }
      return n;
    }
    function kp(t, e, i, r, n) {
      for (let s = 0;s < i; s++) {
        let o = e > 0 ? t[e + s - i] : 0, l = t[e + s] - o;
        r[n + s] = l;
      }
    }
    function Cp(t, e, i) {
      let r = 0, n = e + i;
      for (let s = e;s < n; s++) {
        let o = e > 0 ? t[s - i] : 0, l = t[s] - o;
        r += Math.abs(l);
      }
      return r;
    }
    function Op(t, e, i, r, n, s) {
      for (let o = 0;o < i; o++) {
        let l = o >= s ? t[e + o - s] : 0, a = e > 0 ? t[e + o - i] : 0, c = t[e + o] - (l + a >> 1);
        r[n + o] = c;
      }
    }
    function Ip(t, e, i, r) {
      let n = 0;
      for (let s = 0;s < i; s++) {
        let o = s >= r ? t[e + s - r] : 0, l = e > 0 ? t[e + s - i] : 0, a = t[e + s] - (o + l >> 1);
        n += Math.abs(a);
      }
      return n;
    }
    function Tp(t, e, i, r, n, s) {
      for (let o = 0;o < i; o++) {
        let l = o >= s ? t[e + o - s] : 0, a = e > 0 ? t[e + o - i] : 0, c = e > 0 && o >= s ? t[e + o - (i + s)] : 0, u = t[e + o] - Wa(l, a, c);
        r[n + o] = u;
      }
    }
    function Ap(t, e, i, r) {
      let n = 0;
      for (let s = 0;s < i; s++) {
        let o = s >= r ? t[e + s - r] : 0, l = e > 0 ? t[e + s - i] : 0, a = e > 0 && s >= r ? t[e + s - (i + r)] : 0, c = t[e + s] - Wa(o, l, a);
        n += Math.abs(c);
      }
      return n;
    }
    var Rp = { 0: bp, 1: Ep, 2: kp, 3: Op, 4: Tp }, Bp = { 0: wp, 1: Sp, 2: Cp, 3: Ip, 4: Ap };
    Ya.exports = function(t, e, i, r, n) {
      let s;
      if (!("filterType" in r) || r.filterType === -1)
        s = [0, 1, 2, 3, 4];
      else if (typeof r.filterType == "number")
        s = [r.filterType];
      else
        throw new Error("unrecognised filter types");
      r.bitDepth === 16 && (n *= 2);
      let o = e * n, l = 0, a = 0, c = Buffer.alloc((o + 1) * i), u = s[0];
      for (let f = 0;f < i; f++) {
        if (s.length > 1) {
          let h = 1 / 0;
          for (let p = 0;p < s.length; p++) {
            let d = Bp[s[p]](t, a, o, n);
            d < h && (u = s[p], h = d);
          }
        }
        c[l] = u, l++, Rp[u](t, a, o, c, l, n), l += o, a += o;
      }
      return c;
    };
  });
  var on = y((zg, Za) => {
    var Ue = Yt(), Lp = en(), Pp = za(), Fp = Ka(), Np = import.meta.require("zlib"), pt = Za.exports = function(t) {
      if (this._options = t, t.deflateChunkSize = t.deflateChunkSize || 32 * 1024, t.deflateLevel = t.deflateLevel != null ? t.deflateLevel : 9, t.deflateStrategy = t.deflateStrategy != null ? t.deflateStrategy : 3, t.inputHasAlpha = t.inputHasAlpha != null ? t.inputHasAlpha : true, t.deflateFactory = t.deflateFactory || Np.createDeflate, t.bitDepth = t.bitDepth || 8, t.colorType = typeof t.colorType == "number" ? t.colorType : Ue.COLORTYPE_COLOR_ALPHA, t.inputColorType = typeof t.inputColorType == "number" ? t.inputColorType : Ue.COLORTYPE_COLOR_ALPHA, [Ue.COLORTYPE_GRAYSCALE, Ue.COLORTYPE_COLOR, Ue.COLORTYPE_COLOR_ALPHA, Ue.COLORTYPE_ALPHA].indexOf(t.colorType) === -1)
        throw new Error("option color type:" + t.colorType + " is not supported at present");
      if ([Ue.COLORTYPE_GRAYSCALE, Ue.COLORTYPE_COLOR, Ue.COLORTYPE_COLOR_ALPHA, Ue.COLORTYPE_ALPHA].indexOf(t.inputColorType) === -1)
        throw new Error("option input color type:" + t.inputColorType + " is not supported at present");
      if (t.bitDepth !== 8 && t.bitDepth !== 16)
        throw new Error("option bit depth:" + t.bitDepth + " is not supported at present");
    };
    pt.prototype.getDeflateOptions = function() {
      return { chunkSize: this._options.deflateChunkSize, level: this._options.deflateLevel, strategy: this._options.deflateStrategy };
    };
    pt.prototype.createDeflate = function() {
      return this._options.deflateFactory(this.getDeflateOptions());
    };
    pt.prototype.filterData = function(t, e, i) {
      let r = Pp(t, e, i, this._options), n = Ue.COLORTYPE_TO_BPP_MAP[this._options.colorType];
      return Fp(r, e, i, this._options, n);
    };
    pt.prototype._packChunk = function(t, e) {
      let i = e ? e.length : 0, r = Buffer.alloc(i + 12);
      return r.writeUInt32BE(i, 0), r.writeUInt32BE(t, 4), e && e.copy(r, 8), r.writeInt32BE(Lp.crc32(r.slice(4, r.length - 4)), r.length - 4), r;
    };
    pt.prototype.packGAMA = function(t) {
      let e = Buffer.alloc(4);
      return e.writeUInt32BE(Math.floor(t * Ue.GAMMA_DIVISION), 0), this._packChunk(Ue.TYPE_gAMA, e);
    };
    pt.prototype.packIHDR = function(t, e) {
      let i = Buffer.alloc(13);
      return i.writeUInt32BE(t, 0), i.writeUInt32BE(e, 4), i[8] = this._options.bitDepth, i[9] = this._options.colorType, i[10] = 0, i[11] = 0, i[12] = 0, this._packChunk(Ue.TYPE_IHDR, i);
    };
    pt.prototype.packIDAT = function(t) {
      return this._packChunk(Ue.TYPE_IDAT, t);
    };
    pt.prototype.packIEND = function() {
      return this._packChunk(Ue.TYPE_IEND, null);
    };
  });
  var el = y((Wg, Qa) => {
    var Mp = import.meta.require("util"), Xa = import.meta.require("stream"), Up = Yt(), Dp = on(), Ja = Qa.exports = function(t) {
      Xa.call(this);
      let e = t || {};
      this._packer = new Dp(e), this._deflate = this._packer.createDeflate(), this.readable = true;
    };
    Mp.inherits(Ja, Xa);
    Ja.prototype.pack = function(t, e, i, r) {
      this.emit("data", Buffer.from(Up.PNG_SIGNATURE)), this.emit("data", this._packer.packIHDR(e, i)), r && this.emit("data", this._packer.packGAMA(r));
      let n = this._packer.filterData(t, e, i);
      this._deflate.on("error", this.emit.bind(this, "error")), this._deflate.on("data", function(s) {
        this.emit("data", this._packer.packIDAT(s));
      }.bind(this)), this._deflate.on("end", function() {
        this.emit("data", this._packer.packIEND()), this.emit("end");
      }.bind(this)), this._deflate.end(n);
    };
  });
  var ol = y((bi, sl) => {
    var tl = import.meta.require("assert").ok, Kt = import.meta.require("zlib"), jp = import.meta.require("util"), il = import.meta.require("buffer").kMaxLength;
    function St(t) {
      if (!(this instanceof St))
        return new St(t);
      t && t.chunkSize < Kt.Z_MIN_CHUNK && (t.chunkSize = Kt.Z_MIN_CHUNK), Kt.Inflate.call(this, t), this._offset = this._offset === undefined ? this._outOffset : this._offset, this._buffer = this._buffer || this._outBuffer, t && t.maxLength != null && (this._maxLength = t.maxLength);
    }
    function qp(t) {
      return new St(t);
    }
    function rl(t, e) {
      e && process.nextTick(e), t._handle && (t._handle.close(), t._handle = null);
    }
    St.prototype._processChunk = function(t, e, i) {
      if (typeof i == "function")
        return Kt.Inflate._processChunk.call(this, t, e, i);
      let r = this, n = t && t.length, s = this._chunkSize - this._offset, o = this._maxLength, l = 0, a = [], c = 0, u;
      this.on("error", function(d) {
        u = d;
      });
      function f(d, m) {
        if (r._hadError)
          return;
        let v = s - m;
        if (tl(v >= 0, "have should not go down"), v > 0) {
          let E = r._buffer.slice(r._offset, r._offset + v);
          if (r._offset += v, E.length > o && (E = E.slice(0, o)), a.push(E), c += E.length, o -= E.length, o === 0)
            return false;
        }
        return (m === 0 || r._offset >= r._chunkSize) && (s = r._chunkSize, r._offset = 0, r._buffer = Buffer.allocUnsafe(r._chunkSize)), m === 0 ? (l += n - d, n = d, true) : false;
      }
      tl(this._handle, "zlib binding closed");
      let h;
      do
        h = this._handle.writeSync(e, t, l, n, this._buffer, this._offset, s), h = h || this._writeState;
      while (!this._hadError && f(h[0], h[1]));
      if (this._hadError)
        throw u;
      if (c >= il)
        throw rl(this), new RangeError("Cannot create final Buffer. It would be larger than 0x" + il.toString(16) + " bytes");
      let p = Buffer.concat(a, c);
      return rl(this), p;
    };
    jp.inherits(St, Kt.Inflate);
    function Hp(t, e) {
      if (typeof e == "string" && (e = Buffer.from(e)), !(e instanceof Buffer))
        throw new TypeError("Not a string or buffer");
      let i = t._finishFlushFlag;
      return i == null && (i = Kt.Z_FINISH), t._processChunk(e, i);
    }
    function nl(t, e) {
      return Hp(new St(e), t);
    }
    sl.exports = bi = nl;
    bi.Inflate = St;
    bi.createInflate = qp;
    bi.inflateSync = nl;
  });
  var an = y((Yg, ll) => {
    var al = ll.exports = function(t) {
      this._buffer = t, this._reads = [];
    };
    al.prototype.read = function(t, e) {
      this._reads.push({ length: Math.abs(t), allowLess: t < 0, func: e });
    };
    al.prototype.process = function() {
      for (;this._reads.length > 0 && this._buffer.length; ) {
        let t = this._reads[0];
        if (this._buffer.length && (this._buffer.length >= t.length || t.allowLess)) {
          this._reads.shift();
          let e = this._buffer;
          this._buffer = e.slice(t.length), t.func.call(this, e.slice(0, t.length));
        } else
          break;
      }
      if (this._reads.length > 0)
        throw new Error("There are some read requests waitng on finished stream");
      if (this._buffer.length > 0)
        throw new Error("unrecognised content at end of stream");
    };
  });
  var ul = y((cl) => {
    var Vp = an(), $p = Xr();
    cl.process = function(t, e) {
      let i = [], r = new Vp(t);
      return new $p(e, { read: r.read.bind(r), write: function(s) {
        i.push(s);
      }, complete: function() {
      } }).start(), r.process(), Buffer.concat(i);
    };
  });
  var dl = y((Zg, pl) => {
    var fl = true, hl = import.meta.require("zlib"), Gp = ol();
    hl.deflateSync || (fl = false);
    var zp = an(), Wp = ul(), Yp = tn(), Kp = rn(), Zp = nn();
    pl.exports = function(t, e) {
      if (!fl)
        throw new Error("To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0");
      let i;
      function r(C) {
        i = C;
      }
      let n;
      function s(C) {
        n = C;
      }
      function o(C) {
        n.transColor = C;
      }
      function l(C) {
        n.palette = C;
      }
      function a() {
        n.alpha = true;
      }
      let c;
      function u(C) {
        c = C;
      }
      let f = [];
      function h(C) {
        f.push(C);
      }
      let p = new zp(t);
      if (new Yp(e, { read: p.read.bind(p), error: r, metadata: s, gamma: u, palette: l, transColor: o, inflateData: h, simpleTransparency: a }).start(), p.process(), i)
        throw i;
      let m = Buffer.concat(f);
      f.length = 0;
      let v;
      if (n.interlace)
        v = hl.inflateSync(m);
      else {
        let _ = ((n.width * n.bpp * n.depth + 7 >> 3) + 1) * n.height;
        v = Gp(m, { chunkSize: _, maxLength: _ });
      }
      if (m = null, !v || !v.length)
        throw new Error("bad png - invalid inflate data response");
      let E = Wp.process(v, n);
      m = null;
      let I = Kp.dataToBitMap(E, n);
      E = null;
      let w = Zp(I, n, e.skipRescale);
      return n.data = w, n.gamma = c || 0, n;
    };
  });
  var xl = y((Xg, vl) => {
    var ml = true, gl = import.meta.require("zlib");
    gl.deflateSync || (ml = false);
    var Xp = Yt(), Jp = on();
    vl.exports = function(t, e) {
      if (!ml)
        throw new Error("To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0");
      let i = e || {}, r = new Jp(i), n = [];
      n.push(Buffer.from(Xp.PNG_SIGNATURE)), n.push(r.packIHDR(t.width, t.height)), t.gamma && n.push(r.packGAMA(t.gamma));
      let s = r.filterData(t.data, t.width, t.height), o = gl.deflateSync(s, r.getDeflateOptions());
      if (s = null, !o || !o.length)
        throw new Error("bad png - invalid compressed data response");
      return n.push(r.packIDAT(o)), n.push(r.packIEND()), Buffer.concat(n);
    };
  });
  var _l = y((ln) => {
    var Qp = dl(), ed = xl();
    ln.read = function(t, e) {
      return Qp(t, e || {});
    };
    ln.write = function(t, e) {
      return ed(t, e);
    };
  });
  var wl = y((bl) => {
    var td = import.meta.require("util"), yl = import.meta.require("stream"), id = $a(), rd = el(), nd = _l(), qe = bl.PNG = function(t) {
      yl.call(this), t = t || {}, this.width = t.width | 0, this.height = t.height | 0, this.data = this.width > 0 && this.height > 0 ? Buffer.alloc(4 * this.width * this.height) : null, t.fill && this.data && this.data.fill(0), this.gamma = 0, this.readable = this.writable = true, this._parser = new id(t), this._parser.on("error", this.emit.bind(this, "error")), this._parser.on("close", this._handleClose.bind(this)), this._parser.on("metadata", this._metadata.bind(this)), this._parser.on("gamma", this._gamma.bind(this)), this._parser.on("parsed", function(e) {
        this.data = e, this.emit("parsed", e);
      }.bind(this)), this._packer = new rd(t), this._packer.on("data", this.emit.bind(this, "data")), this._packer.on("end", this.emit.bind(this, "end")), this._parser.on("close", this._handleClose.bind(this)), this._packer.on("error", this.emit.bind(this, "error"));
    };
    td.inherits(qe, yl);
    qe.sync = nd;
    qe.prototype.pack = function() {
      return !this.data || !this.data.length ? (this.emit("error", "No data provided"), this) : (process.nextTick(function() {
        this._packer.pack(this.data, this.width, this.height, this.gamma);
      }.bind(this)), this);
    };
    qe.prototype.parse = function(t, e) {
      if (e) {
        let i, r;
        i = function(n) {
          this.removeListener("error", r), this.data = n, e(null, this);
        }.bind(this), r = function(n) {
          this.removeListener("parsed", i), e(n, null);
        }.bind(this), this.once("parsed", i), this.once("error", r);
      }
      return this.end(t), this;
    };
    qe.prototype.write = function(t) {
      return this._parser.write(t), true;
    };
    qe.prototype.end = function(t) {
      this._parser.end(t);
    };
    qe.prototype._metadata = function(t) {
      this.width = t.width, this.height = t.height, this.emit("metadata", t);
    };
    qe.prototype._gamma = function(t) {
      this.gamma = t;
    };
    qe.prototype._handleClose = function() {
      !this._parser.writable && !this._packer.readable && this.emit("close");
    };
    qe.bitblt = function(t, e, i, r, n, s, o, l) {
      if (i |= 0, r |= 0, n |= 0, s |= 0, o |= 0, l |= 0, i > t.width || r > t.height || i + n > t.width || r + s > t.height)
        throw new Error("bitblt reading outside image");
      if (o > e.width || l > e.height || o + n > e.width || l + s > e.height)
        throw new Error("bitblt writing outside image");
      for (let a = 0;a < s; a++)
        t.data.copy(e.data, (l + a) * e.width + o << 2, (r + a) * t.width + i << 2, (r + a) * t.width + i + n << 2);
    };
    qe.prototype.bitblt = function(t, e, i, r, n, s, o) {
      return qe.bitblt(this, t, e, i, r, n, s, o), this;
    };
    qe.adjustGamma = function(t) {
      if (t.gamma) {
        for (let e = 0;e < t.height; e++)
          for (let i = 0;i < t.width; i++) {
            let r = t.width * e + i << 2;
            for (let n = 0;n < 3; n++) {
              let s = t.data[r + n] / 255;
              s = Math.pow(s, 1 / 2.2 / t.gamma), t.data[r + n] = Math.round(s * 255);
            }
          }
        t.gamma = 0;
      }
    };
    qe.prototype.adjustGamma = function() {
      qe.adjustGamma(this);
    };
  });
  var wi = y((un) => {
    var Xi = class extends Error {
      constructor(e, i, r) {
        super(r), Error.captureStackTrace(this, this.constructor), this.name = this.constructor.name, this.code = i, this.exitCode = e, this.nestedError = undefined;
      }
    }, cn = class extends Xi {
      constructor(e) {
        super(1, "commander.invalidArgument", e), Error.captureStackTrace(this, this.constructor), this.name = this.constructor.name;
      }
    };
    un.CommanderError = Xi;
    un.InvalidArgumentError = cn;
  });
  var Ji = y((hn) => {
    var { InvalidArgumentError: sd } = wi(), fn = class {
      constructor(e, i) {
        switch (this.description = i || "", this.variadic = false, this.parseArg = undefined, this.defaultValue = undefined, this.defaultValueDescription = undefined, this.argChoices = undefined, e[0]) {
          case "<":
            this.required = true, this._name = e.slice(1, -1);
            break;
          case "[":
            this.required = false, this._name = e.slice(1, -1);
            break;
          default:
            this.required = true, this._name = e;
            break;
        }
        this._name.length > 3 && this._name.slice(-3) === "..." && (this.variadic = true, this._name = this._name.slice(0, -3));
      }
      name() {
        return this._name;
      }
      _concatValue(e, i) {
        return i === this.defaultValue || !Array.isArray(i) ? [e] : i.concat(e);
      }
      default(e, i) {
        return this.defaultValue = e, this.defaultValueDescription = i, this;
      }
      argParser(e) {
        return this.parseArg = e, this;
      }
      choices(e) {
        return this.argChoices = e, this.parseArg = (i, r) => {
          if (!e.includes(i))
            throw new sd(`Allowed choices are ${e.join(", ")}.`);
          return this.variadic ? this._concatValue(i, r) : i;
        }, this;
      }
      argRequired() {
        return this.required = true, this;
      }
      argOptional() {
        return this.required = false, this;
      }
    };
    function od(t) {
      let e = t.name() + (t.variadic === true ? "..." : "");
      return t.required ? "<" + e + ">" : "[" + e + "]";
    }
    hn.Argument = fn;
    hn.humanReadableArgName = od;
  });
  var dn = y((El) => {
    var { humanReadableArgName: ad } = Ji(), pn = class {
      constructor() {
        this.helpWidth = undefined, this.sortSubcommands = false, this.sortOptions = false;
      }
      visibleCommands(e) {
        let i = e.commands.filter((r) => !r._hidden);
        if (e._hasImplicitHelpCommand()) {
          let [, r, n] = e._helpCommandnameAndArgs.match(/([^ ]+) *(.*)/), s = e.createCommand(r).helpOption(false);
          s.description(e._helpCommandDescription), n && s.arguments(n), i.push(s);
        }
        return this.sortSubcommands && i.sort((r, n) => r.name().localeCompare(n.name())), i;
      }
      visibleOptions(e) {
        let i = e.options.filter((s) => !s.hidden), r = e._hasHelpOption && e._helpShortFlag && !e._findOption(e._helpShortFlag), n = e._hasHelpOption && !e._findOption(e._helpLongFlag);
        if (r || n) {
          let s;
          r ? n ? s = e.createOption(e._helpFlags, e._helpDescription) : s = e.createOption(e._helpShortFlag, e._helpDescription) : s = e.createOption(e._helpLongFlag, e._helpDescription), i.push(s);
        }
        if (this.sortOptions) {
          let s = (o) => o.short ? o.short.replace(/^-/, "") : o.long.replace(/^--/, "");
          i.sort((o, l) => s(o).localeCompare(s(l)));
        }
        return i;
      }
      visibleArguments(e) {
        return e._argsDescription && e._args.forEach((i) => {
          i.description = i.description || e._argsDescription[i.name()] || "";
        }), e._args.find((i) => i.description) ? e._args : [];
      }
      subcommandTerm(e) {
        let i = e._args.map((r) => ad(r)).join(" ");
        return e._name + (e._aliases[0] ? "|" + e._aliases[0] : "") + (e.options.length ? " [options]" : "") + (i ? " " + i : "");
      }
      optionTerm(e) {
        return e.flags;
      }
      argumentTerm(e) {
        return e.name();
      }
      longestSubcommandTermLength(e, i) {
        return i.visibleCommands(e).reduce((r, n) => Math.max(r, i.subcommandTerm(n).length), 0);
      }
      longestOptionTermLength(e, i) {
        return i.visibleOptions(e).reduce((r, n) => Math.max(r, i.optionTerm(n).length), 0);
      }
      longestArgumentTermLength(e, i) {
        return i.visibleArguments(e).reduce((r, n) => Math.max(r, i.argumentTerm(n).length), 0);
      }
      commandUsage(e) {
        let i = e._name;
        e._aliases[0] && (i = i + "|" + e._aliases[0]);
        let r = "";
        for (let n = e.parent;n; n = n.parent)
          r = n.name() + " " + r;
        return r + i + " " + e.usage();
      }
      commandDescription(e) {
        return e.description();
      }
      subcommandDescription(e) {
        return e.description();
      }
      optionDescription(e) {
        let i = [];
        return e.argChoices && !e.negate && i.push(`choices: ${e.argChoices.map((r) => JSON.stringify(r)).join(", ")}`), e.defaultValue !== undefined && !e.negate && i.push(`default: ${e.defaultValueDescription || JSON.stringify(e.defaultValue)}`), e.envVar !== undefined && i.push(`env: ${e.envVar}`), i.length > 0 ? `${e.description} (${i.join(", ")})` : e.description;
      }
      argumentDescription(e) {
        let i = [];
        if (e.argChoices && i.push(`choices: ${e.argChoices.map((r) => JSON.stringify(r)).join(", ")}`), e.defaultValue !== undefined && i.push(`default: ${e.defaultValueDescription || JSON.stringify(e.defaultValue)}`), i.length > 0) {
          let r = `(${i.join(", ")})`;
          return e.description ? `${e.description} ${r}` : r;
        }
        return e.description;
      }
      formatHelp(e, i) {
        let r = i.padWidth(e, i), n = i.helpWidth || 80, s = 2, o = 2;
        function l(d, m) {
          if (m) {
            let v = `${d.padEnd(r + o)}${m}`;
            return i.wrap(v, n - s, r + o);
          }
          return d;
        }
        function a(d) {
          return d.join(`
`).replace(/^/gm, " ".repeat(s));
        }
        let c = [`Usage: ${i.commandUsage(e)}`, ""], u = i.commandDescription(e);
        u.length > 0 && (c = c.concat([u, ""]));
        let f = i.visibleArguments(e).map((d) => l(i.argumentTerm(d), i.argumentDescription(d)));
        f.length > 0 && (c = c.concat(["Arguments:", a(f), ""]));
        let h = i.visibleOptions(e).map((d) => l(i.optionTerm(d), i.optionDescription(d)));
        h.length > 0 && (c = c.concat(["Options:", a(h), ""]));
        let p = i.visibleCommands(e).map((d) => l(i.subcommandTerm(d), i.subcommandDescription(d)));
        return p.length > 0 && (c = c.concat(["Commands:", a(p), ""])), c.join(`
`);
      }
      padWidth(e, i) {
        return Math.max(i.longestOptionTermLength(e, i), i.longestSubcommandTermLength(e, i), i.longestArgumentTermLength(e, i));
      }
      wrap(e, i, r, n = 40) {
        if (e.match(/[\n]\s+/))
          return e;
        let s = i - r;
        if (s < n)
          return e;
        let o = e.substr(0, r), l = e.substr(r), a = " ".repeat(r), c = new RegExp(".{1," + (s - 1) + "}([\\s\u200B]|$)|[^\\s\u200B]+?([\\s\u200B]|$)", "g"), u = l.match(c) || [];
        return o + u.map((f, h) => (f.slice(-1) === `
` && (f = f.slice(0, f.length - 1)), (h > 0 ? a : "") + f.trimRight())).join(`
`);
      }
    };
    El.Help = pn;
  });
  var vn = y((gn) => {
    var { InvalidArgumentError: ld } = wi(), mn = class {
      constructor(e, i) {
        this.flags = e, this.description = i || "", this.required = e.includes("<"), this.optional = e.includes("["), this.variadic = /\w\.\.\.[>\]]$/.test(e), this.mandatory = false;
        let r = Sl(e);
        this.short = r.shortFlag, this.long = r.longFlag, this.negate = false, this.long && (this.negate = this.long.startsWith("--no-")), this.defaultValue = undefined, this.defaultValueDescription = undefined, this.envVar = undefined, this.parseArg = undefined, this.hidden = false, this.argChoices = undefined;
      }
      default(e, i) {
        return this.defaultValue = e, this.defaultValueDescription = i, this;
      }
      env(e) {
        return this.envVar = e, this;
      }
      argParser(e) {
        return this.parseArg = e, this;
      }
      makeOptionMandatory(e = true) {
        return this.mandatory = !!e, this;
      }
      hideHelp(e = true) {
        return this.hidden = !!e, this;
      }
      _concatValue(e, i) {
        return i === this.defaultValue || !Array.isArray(i) ? [e] : i.concat(e);
      }
      choices(e) {
        return this.argChoices = e, this.parseArg = (i, r) => {
          if (!e.includes(i))
            throw new ld(`Allowed choices are ${e.join(", ")}.`);
          return this.variadic ? this._concatValue(i, r) : i;
        }, this;
      }
      name() {
        return this.long ? this.long.replace(/^--/, "") : this.short.replace(/^-/, "");
      }
      attributeName() {
        return cd(this.name().replace(/^no-/, ""));
      }
      is(e) {
        return this.short === e || this.long === e;
      }
    };
    function cd(t) {
      return t.split("-").reduce((e, i) => e + i[0].toUpperCase() + i.slice(1));
    }
    function Sl(t) {
      let e, i, r = t.split(/[ |,]+/);
      return r.length > 1 && !/^[[<]/.test(r[1]) && (e = r.shift()), i = r.shift(), !e && /^-[^-]$/.test(i) && (e = i, i = undefined), { shortFlag: e, longFlag: i };
    }
    gn.Option = mn;
    gn.splitOptionFlags = Sl;
  });
  var Cl = y((kl) => {
    function ud(t, e) {
      if (Math.abs(t.length - e.length) > 3)
        return Math.max(t.length, e.length);
      let i = [];
      for (let r = 0;r <= t.length; r++)
        i[r] = [r];
      for (let r = 0;r <= e.length; r++)
        i[0][r] = r;
      for (let r = 1;r <= e.length; r++)
        for (let n = 1;n <= t.length; n++) {
          let s = 1;
          t[n - 1] === e[r - 1] ? s = 0 : s = 1, i[n][r] = Math.min(i[n - 1][r] + 1, i[n][r - 1] + 1, i[n - 1][r - 1] + s), n > 1 && r > 1 && t[n - 1] === e[r - 2] && t[n - 2] === e[r - 1] && (i[n][r] = Math.min(i[n][r], i[n - 2][r - 2] + 1));
        }
      return i[t.length][e.length];
    }
    function fd(t, e) {
      if (!e || e.length === 0)
        return "";
      e = Array.from(new Set(e));
      let i = t.startsWith("--");
      i && (t = t.slice(2), e = e.map((o) => o.slice(2)));
      let r = [], n = 3, s = 0.4;
      return e.forEach((o) => {
        if (o.length <= 1)
          return;
        let l = ud(t, o), a = Math.max(t.length, o.length);
        (a - l) / a > s && (l < n ? (n = l, r = [o]) : l === n && r.push(o));
      }), r.sort((o, l) => o.localeCompare(l)), i && (r = r.map((o) => `--${o}`)), r.length > 1 ? `
(Did you mean one of ${r.join(", ")}?)` : r.length === 1 ? `
(Did you mean ${r[0]}?)` : "";
    }
    kl.suggestSimilar = fd;
  });
  var Rl = y((Al) => {
    var hd = import.meta.require("events").EventEmitter, xn = import.meta.require("child_process"), kt = import.meta.require("path"), _n = import.meta.require("fs"), { Argument: pd, humanReadableArgName: dd } = Ji(), { CommanderError: yn } = wi(), { Help: md } = dn(), { Option: gd, splitOptionFlags: vd } = vn(), { suggestSimilar: Ol } = Cl(), wn = class t extends hd {
      constructor(e) {
        super(), this.commands = [], this.options = [], this.parent = null, this._allowUnknownOption = false, this._allowExcessArguments = true, this._args = [], this.args = [], this.rawArgs = [], this.processedArgs = [], this._scriptPath = null, this._name = e || "", this._optionValues = {}, this._optionValueSources = {}, this._storeOptionsAsProperties = false, this._actionHandler = null, this._executableHandler = false, this._executableFile = null, this._defaultCommandName = null, this._exitCallback = null, this._aliases = [], this._combineFlagAndOptionalValue = true, this._description = "", this._argsDescription = undefined, this._enablePositionalOptions = false, this._passThroughOptions = false, this._lifeCycleHooks = {}, this._showHelpAfterError = false, this._showSuggestionAfterError = false, this._outputConfiguration = { writeOut: (i) => process.stdout.write(i), writeErr: (i) => process.stderr.write(i), getOutHelpWidth: () => process.stdout.isTTY ? process.stdout.columns : undefined, getErrHelpWidth: () => process.stderr.isTTY ? process.stderr.columns : undefined, outputError: (i, r) => r(i) }, this._hidden = false, this._hasHelpOption = true, this._helpFlags = "-h, --help", this._helpDescription = "display help for command", this._helpShortFlag = "-h", this._helpLongFlag = "--help", this._addImplicitHelpCommand = undefined, this._helpCommandName = "help", this._helpCommandnameAndArgs = "help [command]", this._helpCommandDescription = "display help for command", this._helpConfiguration = {};
      }
      copyInheritedSettings(e) {
        return this._outputConfiguration = e._outputConfiguration, this._hasHelpOption = e._hasHelpOption, this._helpFlags = e._helpFlags, this._helpDescription = e._helpDescription, this._helpShortFlag = e._helpShortFlag, this._helpLongFlag = e._helpLongFlag, this._helpCommandName = e._helpCommandName, this._helpCommandnameAndArgs = e._helpCommandnameAndArgs, this._helpCommandDescription = e._helpCommandDescription, this._helpConfiguration = e._helpConfiguration, this._exitCallback = e._exitCallback, this._storeOptionsAsProperties = e._storeOptionsAsProperties, this._combineFlagAndOptionalValue = e._combineFlagAndOptionalValue, this._allowExcessArguments = e._allowExcessArguments, this._enablePositionalOptions = e._enablePositionalOptions, this._showHelpAfterError = e._showHelpAfterError, this._showSuggestionAfterError = e._showSuggestionAfterError, this;
      }
      command(e, i, r) {
        let n = i, s = r;
        typeof n == "object" && n !== null && (s = n, n = null), s = s || {};
        let [, o, l] = e.match(/([^ ]+) *(.*)/), a = this.createCommand(o);
        return n && (a.description(n), a._executableHandler = true), s.isDefault && (this._defaultCommandName = a._name), a._hidden = !!(s.noHelp || s.hidden), a._executableFile = s.executableFile || null, l && a.arguments(l), this.commands.push(a), a.parent = this, a.copyInheritedSettings(this), n ? this : a;
      }
      createCommand(e) {
        return new t(e);
      }
      createHelp() {
        return Object.assign(new md, this.configureHelp());
      }
      configureHelp(e) {
        return e === undefined ? this._helpConfiguration : (this._helpConfiguration = e, this);
      }
      configureOutput(e) {
        return e === undefined ? this._outputConfiguration : (Object.assign(this._outputConfiguration, e), this);
      }
      showHelpAfterError(e = true) {
        return typeof e != "string" && (e = !!e), this._showHelpAfterError = e, this;
      }
      showSuggestionAfterError(e = true) {
        return this._showSuggestionAfterError = !!e, this;
      }
      addCommand(e, i) {
        if (!e._name)
          throw new Error("Command passed to .addCommand() must have a name");
        function r(n) {
          n.forEach((s) => {
            if (s._executableHandler && !s._executableFile)
              throw new Error(`Must specify executableFile for deeply nested executable: ${s.name()}`);
            r(s.commands);
          });
        }
        return r(e.commands), i = i || {}, i.isDefault && (this._defaultCommandName = e._name), (i.noHelp || i.hidden) && (e._hidden = true), this.commands.push(e), e.parent = this, this;
      }
      createArgument(e, i) {
        return new pd(e, i);
      }
      argument(e, i, r, n) {
        let s = this.createArgument(e, i);
        return typeof r == "function" ? s.default(n).argParser(r) : s.default(r), this.addArgument(s), this;
      }
      arguments(e) {
        return e.split(/ +/).forEach((i) => {
          this.argument(i);
        }), this;
      }
      addArgument(e) {
        let i = this._args.slice(-1)[0];
        if (i && i.variadic)
          throw new Error(`only the last argument can be variadic '${i.name()}'`);
        if (e.required && e.defaultValue !== undefined && e.parseArg === undefined)
          throw new Error(`a default value for a required argument is never used: '${e.name()}'`);
        return this._args.push(e), this;
      }
      addHelpCommand(e, i) {
        return e === false ? this._addImplicitHelpCommand = false : (this._addImplicitHelpCommand = true, typeof e == "string" && (this._helpCommandName = e.split(" ")[0], this._helpCommandnameAndArgs = e), this._helpCommandDescription = i || this._helpCommandDescription), this;
      }
      _hasImplicitHelpCommand() {
        return this._addImplicitHelpCommand === undefined ? this.commands.length && !this._actionHandler && !this._findCommand("help") : this._addImplicitHelpCommand;
      }
      hook(e, i) {
        let r = ["preAction", "postAction"];
        if (!r.includes(e))
          throw new Error(`Unexpected value for event passed to hook : '${e}'.
Expecting one of '${r.join("', '")}'`);
        return this._lifeCycleHooks[e] ? this._lifeCycleHooks[e].push(i) : this._lifeCycleHooks[e] = [i], this;
      }
      exitOverride(e) {
        return e ? this._exitCallback = e : this._exitCallback = (i) => {
          if (i.code !== "commander.executeSubCommandAsync")
            throw i;
        }, this;
      }
      _exit(e, i, r) {
        this._exitCallback && this._exitCallback(new yn(e, i, r)), process.exit(e);
      }
      action(e) {
        let i = (r) => {
          let n = this._args.length, s = r.slice(0, n);
          return this._storeOptionsAsProperties ? s[n] = this : s[n] = this.opts(), s.push(this), e.apply(this, s);
        };
        return this._actionHandler = i, this;
      }
      createOption(e, i) {
        return new gd(e, i);
      }
      addOption(e) {
        let i = e.name(), r = e.attributeName(), n = e.defaultValue;
        if (e.negate || e.optional || e.required || typeof n == "boolean") {
          if (e.negate) {
            let o = e.long.replace(/^--no-/, "--");
            n = this._findOption(o) ? this.getOptionValue(r) : true;
          }
          n !== undefined && this.setOptionValueWithSource(r, n, "default");
        }
        this.options.push(e);
        let s = (o, l, a) => {
          let c = this.getOptionValue(r);
          if (o !== null && e.parseArg)
            try {
              o = e.parseArg(o, c === undefined ? n : c);
            } catch (u) {
              if (u.code === "commander.invalidArgument") {
                let f = `${l} ${u.message}`;
                this._displayError(u.exitCode, u.code, f);
              }
              throw u;
            }
          else
            o !== null && e.variadic && (o = e._concatValue(o, c));
          typeof c == "boolean" || typeof c == "undefined" ? o == null ? this.setOptionValueWithSource(r, e.negate ? false : n || true, a) : this.setOptionValueWithSource(r, o, a) : o !== null && this.setOptionValueWithSource(r, e.negate ? false : o, a);
        };
        return this.on("option:" + i, (o) => {
          let l = `error: option '${e.flags}' argument '${o}' is invalid.`;
          s(o, l, "cli");
        }), e.envVar && this.on("optionEnv:" + i, (o) => {
          let l = `error: option '${e.flags}' value '${o}' from env '${e.envVar}' is invalid.`;
          s(o, l, "env");
        }), this;
      }
      _optionEx(e, i, r, n, s) {
        let o = this.createOption(i, r);
        if (o.makeOptionMandatory(!!e.mandatory), typeof n == "function")
          o.default(s).argParser(n);
        else if (n instanceof RegExp) {
          let l = n;
          n = (a, c) => {
            let u = l.exec(a);
            return u ? u[0] : c;
          }, o.default(s).argParser(n);
        } else
          o.default(n);
        return this.addOption(o);
      }
      option(e, i, r, n) {
        return this._optionEx({}, e, i, r, n);
      }
      requiredOption(e, i, r, n) {
        return this._optionEx({ mandatory: true }, e, i, r, n);
      }
      combineFlagAndOptionalValue(e = true) {
        return this._combineFlagAndOptionalValue = !!e, this;
      }
      allowUnknownOption(e = true) {
        return this._allowUnknownOption = !!e, this;
      }
      allowExcessArguments(e = true) {
        return this._allowExcessArguments = !!e, this;
      }
      enablePositionalOptions(e = true) {
        return this._enablePositionalOptions = !!e, this;
      }
      passThroughOptions(e = true) {
        if (this._passThroughOptions = !!e, this.parent && e && !this.parent._enablePositionalOptions)
          throw new Error("passThroughOptions can not be used without turning on enablePositionalOptions for parent command(s)");
        return this;
      }
      storeOptionsAsProperties(e = true) {
        if (this._storeOptionsAsProperties = !!e, this.options.length)
          throw new Error("call .storeOptionsAsProperties() before adding options");
        return this;
      }
      getOptionValue(e) {
        return this._storeOptionsAsProperties ? this[e] : this._optionValues[e];
      }
      setOptionValue(e, i) {
        return this._storeOptionsAsProperties ? this[e] = i : this._optionValues[e] = i, this;
      }
      setOptionValueWithSource(e, i, r) {
        return this.setOptionValue(e, i), this._optionValueSources[e] = r, this;
      }
      getOptionValueSource(e) {
        return this._optionValueSources[e];
      }
      _prepareUserArgs(e, i) {
        if (e !== undefined && !Array.isArray(e))
          throw new Error("first parameter to parse must be array or undefined");
        i = i || {}, e === undefined && (e = process.argv, process.versions && process.versions.electron && (i.from = "electron")), this.rawArgs = e.slice();
        let r;
        switch (i.from) {
          case undefined:
          case "node":
            this._scriptPath = e[1], r = e.slice(2);
            break;
          case "electron":
            process.defaultApp ? (this._scriptPath = e[1], r = e.slice(2)) : r = e.slice(1);
            break;
          case "user":
            r = e.slice(0);
            break;
          default:
            throw new Error(`unexpected parse option { from: '${i.from}' }`);
        }
        return !this._scriptPath && import.meta.require.main && (this._scriptPath = import.meta.require.main.filename), this._name = this._name || this._scriptPath && kt.basename(this._scriptPath, kt.extname(this._scriptPath)), r;
      }
      parse(e, i) {
        let r = this._prepareUserArgs(e, i);
        return this._parseCommand([], r), this;
      }
      async parseAsync(e, i) {
        let r = this._prepareUserArgs(e, i);
        return await this._parseCommand([], r), this;
      }
      _executeSubCommand(e, i) {
        i = i.slice();
        let r = false, n = [".js", ".ts", ".tsx", ".mjs", ".cjs"];
        this._checkForMissingMandatoryOptions();
        let s = this._scriptPath;
        !s && import.meta.require.main && (s = import.meta.require.main.filename);
        let o;
        try {
          let h = _n.realpathSync(s);
          o = kt.dirname(h);
        } catch {
          o = ".";
        }
        let l = kt.basename(s, kt.extname(s)) + "-" + e._name;
        e._executableFile && (l = e._executableFile);
        let a = kt.join(o, l);
        _n.existsSync(a) ? l = a : n.forEach((h) => {
          _n.existsSync(`${a}${h}`) && (l = `${a}${h}`);
        }), r = n.includes(kt.extname(l));
        let c;
        process.platform !== "win32" ? r ? (i.unshift(l), i = Tl(process.execArgv).concat(i), c = xn.spawn(process.argv[0], i, { stdio: "inherit" })) : c = xn.spawn(l, i, { stdio: "inherit" }) : (i.unshift(l), i = Tl(process.execArgv).concat(i), c = xn.spawn(process.execPath, i, { stdio: "inherit" })), ["SIGUSR1", "SIGUSR2", "SIGTERM", "SIGINT", "SIGHUP"].forEach((h) => {
          process.on(h, () => {
            c.killed === false && c.exitCode === null && c.kill(h);
          });
        });
        let f = this._exitCallback;
        f ? c.on("close", () => {
          f(new yn(process.exitCode || 0, "commander.executeSubCommandAsync", "(close)"));
        }) : c.on("close", process.exit.bind(process)), c.on("error", (h) => {
          if (h.code === "ENOENT") {
            let p = `'${l}' does not exist
 - if '${e._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead
 - if the default executable name is not suitable, use the executableFile option to supply a custom name`;
            throw new Error(p);
          } else if (h.code === "EACCES")
            throw new Error(`'${l}' not executable`);
          if (!f)
            process.exit(1);
          else {
            let p = new yn(1, "commander.executeSubCommandAsync", "(error)");
            p.nestedError = h, f(p);
          }
        }), this.runningCommand = c;
      }
      _dispatchSubcommand(e, i, r) {
        let n = this._findCommand(e);
        if (n || this.help({ error: true }), n._executableHandler)
          this._executeSubCommand(n, i.concat(r));
        else
          return n._parseCommand(i, r);
      }
      _checkNumberOfArguments() {
        this._args.forEach((e, i) => {
          e.required && this.args[i] == null && this.missingArgument(e.name());
        }), !(this._args.length > 0 && this._args[this._args.length - 1].variadic) && this.args.length > this._args.length && this._excessArguments(this.args);
      }
      _processArguments() {
        let e = (r, n, s) => {
          let o = n;
          if (n !== null && r.parseArg)
            try {
              o = r.parseArg(n, s);
            } catch (l) {
              if (l.code === "commander.invalidArgument") {
                let a = `error: command-argument value '${n}' is invalid for argument '${r.name()}'. ${l.message}`;
                this._displayError(l.exitCode, l.code, a);
              }
              throw l;
            }
          return o;
        };
        this._checkNumberOfArguments();
        let i = [];
        this._args.forEach((r, n) => {
          let s = r.defaultValue;
          r.variadic ? n < this.args.length ? (s = this.args.slice(n), r.parseArg && (s = s.reduce((o, l) => e(r, l, o), r.defaultValue))) : s === undefined && (s = []) : n < this.args.length && (s = this.args[n], r.parseArg && (s = e(r, s, r.defaultValue))), i[n] = s;
        }), this.processedArgs = i;
      }
      _chainOrCall(e, i) {
        return e && e.then && typeof e.then == "function" ? e.then(() => i()) : i();
      }
      _chainOrCallHooks(e, i) {
        let r = e, n = [];
        return bn(this).reverse().filter((s) => s._lifeCycleHooks[i] !== undefined).forEach((s) => {
          s._lifeCycleHooks[i].forEach((o) => {
            n.push({ hookedCommand: s, callback: o });
          });
        }), i === "postAction" && n.reverse(), n.forEach((s) => {
          r = this._chainOrCall(r, () => s.callback(s.hookedCommand, this));
        }), r;
      }
      _parseCommand(e, i) {
        let r = this.parseOptions(i);
        if (this._parseOptionsEnv(), e = e.concat(r.operands), i = r.unknown, this.args = e.concat(i), e && this._findCommand(e[0]))
          return this._dispatchSubcommand(e[0], e.slice(1), i);
        if (this._hasImplicitHelpCommand() && e[0] === this._helpCommandName)
          return e.length === 1 && this.help(), this._dispatchSubcommand(e[1], [], [this._helpLongFlag]);
        if (this._defaultCommandName)
          return Il(this, i), this._dispatchSubcommand(this._defaultCommandName, e, i);
        this.commands.length && this.args.length === 0 && !this._actionHandler && !this._defaultCommandName && this.help({ error: true }), Il(this, r.unknown), this._checkForMissingMandatoryOptions();
        let n = () => {
          r.unknown.length > 0 && this.unknownOption(r.unknown[0]);
        }, s = `command:${this.name()}`;
        if (this._actionHandler) {
          n(), this._processArguments();
          let o;
          return o = this._chainOrCallHooks(o, "preAction"), o = this._chainOrCall(o, () => this._actionHandler(this.processedArgs)), this.parent && this.parent.emit(s, e, i), o = this._chainOrCallHooks(o, "postAction"), o;
        }
        if (this.parent && this.parent.listenerCount(s))
          n(), this._processArguments(), this.parent.emit(s, e, i);
        else if (e.length) {
          if (this._findCommand("*"))
            return this._dispatchSubcommand("*", e, i);
          this.listenerCount("command:*") ? this.emit("command:*", e, i) : this.commands.length ? this.unknownCommand() : (n(), this._processArguments());
        } else
          this.commands.length ? (n(), this.help({ error: true })) : (n(), this._processArguments());
      }
      _findCommand(e) {
        if (e)
          return this.commands.find((i) => i._name === e || i._aliases.includes(e));
      }
      _findOption(e) {
        return this.options.find((i) => i.is(e));
      }
      _checkForMissingMandatoryOptions() {
        for (let e = this;e; e = e.parent)
          e.options.forEach((i) => {
            i.mandatory && e.getOptionValue(i.attributeName()) === undefined && e.missingMandatoryOptionValue(i);
          });
      }
      parseOptions(e) {
        let i = [], r = [], n = i, s = e.slice();
        function o(a) {
          return a.length > 1 && a[0] === "-";
        }
        let l = null;
        for (;s.length; ) {
          let a = s.shift();
          if (a === "--") {
            n === r && n.push(a), n.push(...s);
            break;
          }
          if (l && !o(a)) {
            this.emit(`option:${l.name()}`, a);
            continue;
          }
          if (l = null, o(a)) {
            let c = this._findOption(a);
            if (c) {
              if (c.required) {
                let u = s.shift();
                u === undefined && this.optionMissingArgument(c), this.emit(`option:${c.name()}`, u);
              } else if (c.optional) {
                let u = null;
                s.length > 0 && !o(s[0]) && (u = s.shift()), this.emit(`option:${c.name()}`, u);
              } else
                this.emit(`option:${c.name()}`);
              l = c.variadic ? c : null;
              continue;
            }
          }
          if (a.length > 2 && a[0] === "-" && a[1] !== "-") {
            let c = this._findOption(`-${a[1]}`);
            if (c) {
              c.required || c.optional && this._combineFlagAndOptionalValue ? this.emit(`option:${c.name()}`, a.slice(2)) : (this.emit(`option:${c.name()}`), s.unshift(`-${a.slice(2)}`));
              continue;
            }
          }
          if (/^--[^=]+=/.test(a)) {
            let c = a.indexOf("="), u = this._findOption(a.slice(0, c));
            if (u && (u.required || u.optional)) {
              this.emit(`option:${u.name()}`, a.slice(c + 1));
              continue;
            }
          }
          if (o(a) && (n = r), (this._enablePositionalOptions || this._passThroughOptions) && i.length === 0 && r.length === 0) {
            if (this._findCommand(a)) {
              i.push(a), s.length > 0 && r.push(...s);
              break;
            } else if (a === this._helpCommandName && this._hasImplicitHelpCommand()) {
              i.push(a), s.length > 0 && i.push(...s);
              break;
            } else if (this._defaultCommandName) {
              r.push(a), s.length > 0 && r.push(...s);
              break;
            }
          }
          if (this._passThroughOptions) {
            n.push(a), s.length > 0 && n.push(...s);
            break;
          }
          n.push(a);
        }
        return { operands: i, unknown: r };
      }
      opts() {
        if (this._storeOptionsAsProperties) {
          let e = {}, i = this.options.length;
          for (let r = 0;r < i; r++) {
            let n = this.options[r].attributeName();
            e[n] = n === this._versionOptionName ? this._version : this[n];
          }
          return e;
        }
        return this._optionValues;
      }
      _displayError(e, i, r) {
        this._outputConfiguration.outputError(`${r}
`, this._outputConfiguration.writeErr), typeof this._showHelpAfterError == "string" ? this._outputConfiguration.writeErr(`${this._showHelpAfterError}
`) : this._showHelpAfterError && (this._outputConfiguration.writeErr(`
`), this.outputHelp({ error: true })), this._exit(e, i, r);
      }
      _parseOptionsEnv() {
        this.options.forEach((e) => {
          if (e.envVar && e.envVar in process.env) {
            let i = e.attributeName();
            (this.getOptionValue(i) === undefined || ["default", "config", "env"].includes(this.getOptionValueSource(i))) && (e.required || e.optional ? this.emit(`optionEnv:${e.name()}`, process.env[e.envVar]) : this.emit(`optionEnv:${e.name()}`));
          }
        });
      }
      missingArgument(e) {
        let i = `error: missing required argument '${e}'`;
        this._displayError(1, "commander.missingArgument", i);
      }
      optionMissingArgument(e) {
        let i = `error: option '${e.flags}' argument missing`;
        this._displayError(1, "commander.optionMissingArgument", i);
      }
      missingMandatoryOptionValue(e) {
        let i = `error: required option '${e.flags}' not specified`;
        this._displayError(1, "commander.missingMandatoryOptionValue", i);
      }
      unknownOption(e) {
        if (this._allowUnknownOption)
          return;
        let i = "";
        if (e.startsWith("--") && this._showSuggestionAfterError) {
          let n = [], s = this;
          do {
            let o = s.createHelp().visibleOptions(s).filter((l) => l.long).map((l) => l.long);
            n = n.concat(o), s = s.parent;
          } while (s && !s._enablePositionalOptions);
          i = Ol(e, n);
        }
        let r = `error: unknown option '${e}'${i}`;
        this._displayError(1, "commander.unknownOption", r);
      }
      _excessArguments(e) {
        if (this._allowExcessArguments)
          return;
        let i = this._args.length, r = i === 1 ? "" : "s", s = `error: too many arguments${this.parent ? ` for '${this.name()}'` : ""}. Expected ${i} argument${r} but got ${e.length}.`;
        this._displayError(1, "commander.excessArguments", s);
      }
      unknownCommand() {
        let e = this.args[0], i = "";
        if (this._showSuggestionAfterError) {
          let n = [];
          this.createHelp().visibleCommands(this).forEach((s) => {
            n.push(s.name()), s.alias() && n.push(s.alias());
          }), i = Ol(e, n);
        }
        let r = `error: unknown command '${e}'${i}`;
        this._displayError(1, "commander.unknownCommand", r);
      }
      version(e, i, r) {
        if (e === undefined)
          return this._version;
        this._version = e, i = i || "-V, --version", r = r || "output the version number";
        let n = this.createOption(i, r);
        return this._versionOptionName = n.attributeName(), this.options.push(n), this.on("option:" + n.name(), () => {
          this._outputConfiguration.writeOut(`${e}
`), this._exit(0, "commander.version", e);
        }), this;
      }
      description(e, i) {
        return e === undefined && i === undefined ? this._description : (this._description = e, i && (this._argsDescription = i), this);
      }
      alias(e) {
        if (e === undefined)
          return this._aliases[0];
        let i = this;
        if (this.commands.length !== 0 && this.commands[this.commands.length - 1]._executableHandler && (i = this.commands[this.commands.length - 1]), e === i._name)
          throw new Error("Command alias can't be the same as its name");
        return i._aliases.push(e), this;
      }
      aliases(e) {
        return e === undefined ? this._aliases : (e.forEach((i) => this.alias(i)), this);
      }
      usage(e) {
        if (e === undefined) {
          if (this._usage)
            return this._usage;
          let i = this._args.map((r) => dd(r));
          return [].concat(this.options.length || this._hasHelpOption ? "[options]" : [], this.commands.length ? "[command]" : [], this._args.length ? i : []).join(" ");
        }
        return this._usage = e, this;
      }
      name(e) {
        return e === undefined ? this._name : (this._name = e, this);
      }
      helpInformation(e) {
        let i = this.createHelp();
        return i.helpWidth === undefined && (i.helpWidth = e && e.error ? this._outputConfiguration.getErrHelpWidth() : this._outputConfiguration.getOutHelpWidth()), i.formatHelp(this, i);
      }
      _getHelpContext(e) {
        e = e || {};
        let i = { error: !!e.error }, r;
        return i.error ? r = (n) => this._outputConfiguration.writeErr(n) : r = (n) => this._outputConfiguration.writeOut(n), i.write = e.write || r, i.command = this, i;
      }
      outputHelp(e) {
        let i;
        typeof e == "function" && (i = e, e = undefined);
        let r = this._getHelpContext(e);
        bn(this).reverse().forEach((s) => s.emit("beforeAllHelp", r)), this.emit("beforeHelp", r);
        let n = this.helpInformation(r);
        if (i && (n = i(n), typeof n != "string" && !Buffer.isBuffer(n)))
          throw new Error("outputHelp callback must return a string or a Buffer");
        r.write(n), this.emit(this._helpLongFlag), this.emit("afterHelp", r), bn(this).forEach((s) => s.emit("afterAllHelp", r));
      }
      helpOption(e, i) {
        if (typeof e == "boolean")
          return this._hasHelpOption = e, this;
        this._helpFlags = e || this._helpFlags, this._helpDescription = i || this._helpDescription;
        let r = vd(this._helpFlags);
        return this._helpShortFlag = r.shortFlag, this._helpLongFlag = r.longFlag, this;
      }
      help(e) {
        this.outputHelp(e);
        let i = process.exitCode || 0;
        i === 0 && e && typeof e != "function" && e.error && (i = 1), this._exit(i, "commander.help", "(outputHelp)");
      }
      addHelpText(e, i) {
        let r = ["beforeAll", "before", "after", "afterAll"];
        if (!r.includes(e))
          throw new Error(`Unexpected value for position to addHelpText.
Expecting one of '${r.join("', '")}'`);
        let n = `${e}Help`;
        return this.on(n, (s) => {
          let o;
          typeof i == "function" ? o = i({ error: s.error, command: s.command }) : o = i, o && s.write(`${o}
`);
        }), this;
      }
    };
    function Il(t, e) {
      t._hasHelpOption && e.find((r) => r === t._helpLongFlag || r === t._helpShortFlag) && (t.outputHelp(), t._exit(0, "commander.helpDisplayed", "(outputHelp)"));
    }
    function Tl(t) {
      return t.map((e) => {
        if (!e.startsWith("--inspect"))
          return e;
        let i, r = "127.0.0.1", n = "9229", s;
        return (s = e.match(/^(--inspect(-brk)?)$/)) !== null ? i = s[1] : (s = e.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null ? (i = s[1], /^\d+$/.test(s[3]) ? n = s[3] : r = s[3]) : (s = e.match(/^(--inspect(-brk|-port)?)=([^:]+):(\d+)$/)) !== null && (i = s[1], r = s[3], n = s[4]), i && n !== "0" ? `${i}=${r}:${parseInt(n) + 1}` : e;
      });
    }
    function bn(t) {
      let e = [];
      for (let i = t;i; i = i.parent)
        e.push(i);
      return e;
    }
    Al.Command = wn;
  });
  var Fl = y((it, Pl) => {
    var { Argument: xd } = Ji(), { Command: Bl } = Rl(), { CommanderError: _d, InvalidArgumentError: Ll } = wi(), { Help: yd } = dn(), { Option: bd } = vn();
    it = Pl.exports = new Bl;
    it.program = it;
    it.Argument = xd;
    it.Command = Bl;
    it.CommanderError = _d;
    it.Help = yd;
    it.InvalidArgumentError = Ll;
    it.InvalidOptionArgumentError = Ll;
    it.Option = bd;
  });
  var Ul = y((Nl, Ml) => {
    Nl = Ml.exports = Zt;
    function Zt(t, e) {
      if (this.stream = e.stream || process.stderr, typeof e == "number") {
        var i = e;
        e = {}, e.total = i;
      } else {
        if (e = e || {}, typeof t != "string")
          throw new Error("format required");
        if (typeof e.total != "number")
          throw new Error("total required");
      }
      this.fmt = t, this.curr = e.curr || 0, this.total = e.total, this.width = e.width || this.total, this.clear = e.clear, this.chars = { complete: e.complete || "=", incomplete: e.incomplete || "-", head: e.head || e.complete || "=" }, this.renderThrottle = e.renderThrottle !== 0 ? e.renderThrottle || 16 : 0, this.lastRender = -1 / 0, this.callback = e.callback || function() {
      }, this.tokens = {}, this.lastDraw = "";
    }
    Zt.prototype.tick = function(t, e) {
      if (t !== 0 && (t = t || 1), typeof t == "object" && (e = t, t = 1), e && (this.tokens = e), this.curr == 0 && (this.start = new Date), this.curr += t, this.render(), this.curr >= this.total) {
        this.render(undefined, true), this.complete = true, this.terminate(), this.callback(this);
        return;
      }
    };
    Zt.prototype.render = function(t, e) {
      if (e = e !== undefined ? e : false, t && (this.tokens = t), !!this.stream.isTTY) {
        var i = Date.now(), r = i - this.lastRender;
        if (!(!e && r < this.renderThrottle)) {
          this.lastRender = i;
          var n = this.curr / this.total;
          n = Math.min(Math.max(n, 0), 1);
          var s = Math.floor(n * 100), o, l, a, c = new Date - this.start, u = s == 100 ? 0 : c * (this.total / this.curr - 1), f = this.curr / (c / 1000), h = this.fmt.replace(":current", this.curr).replace(":total", this.total).replace(":elapsed", isNaN(c) ? "0.0" : (c / 1000).toFixed(1)).replace(":eta", isNaN(u) || !isFinite(u) ? "0.0" : (u / 1000).toFixed(1)).replace(":percent", s.toFixed(0) + "%").replace(":rate", Math.round(f)), p = Math.max(0, this.stream.columns - h.replace(":bar", "").length);
          p && process.platform === "win32" && (p = p - 1);
          var d = Math.min(this.width, p);
          if (a = Math.round(d * n), l = Array(Math.max(0, a + 1)).join(this.chars.complete), o = Array(Math.max(0, d - a + 1)).join(this.chars.incomplete), a > 0 && (l = l.slice(0, -1) + this.chars.head), h = h.replace(":bar", l + o), this.tokens)
            for (var m in this.tokens)
              h = h.replace(":" + m, this.tokens[m]);
          this.lastDraw !== h && (this.stream.cursorTo(0), this.stream.write(h), this.stream.clearLine(1), this.lastDraw = h);
        }
      }
    };
    Zt.prototype.update = function(t, e) {
      var i = Math.floor(t * this.total), r = i - this.curr;
      this.tick(r, e);
    };
    Zt.prototype.interrupt = function(t) {
      this.stream.clearLine(), this.stream.cursorTo(0), this.stream.write(t), this.stream.write(`
`), this.stream.write(this.lastDraw);
    };
    Zt.prototype.terminate = function() {
      this.clear ? this.stream.clearLine && (this.stream.clearLine(), this.stream.cursorTo(0)) : this.stream.write(`
`);
    };
  });
  var jl = y((ov, Dl) => {
    Dl.exports = Ul();
  });
  var Hl = y((ql) => {
    var D = ql, { Buffer: Qi } = import.meta.require("buffer"), wd = import.meta.require("os");
    D.toBuffer = function(t, e, i) {
      i = ~~i;
      let r;
      if (this.isV4Format(t))
        r = e || Qi.alloc(i + 4), t.split(/\./g).map((n) => {
          r[i++] = parseInt(n, 10) & 255;
        });
      else if (this.isV6Format(t)) {
        let n = t.split(":", 8), s;
        for (s = 0;s < n.length; s++) {
          let o = this.isV4Format(n[s]), l;
          o && (l = this.toBuffer(n[s]), n[s] = l.slice(0, 2).toString("hex")), l && ++s < 8 && n.splice(s, 0, l.slice(2, 4).toString("hex"));
        }
        if (n[0] === "")
          for (;n.length < 8; )
            n.unshift("0");
        else if (n[n.length - 1] === "")
          for (;n.length < 8; )
            n.push("0");
        else if (n.length < 8) {
          for (s = 0;s < n.length && n[s] !== ""; s++)
            ;
          let o = [s, 1];
          for (s = 9 - n.length;s > 0; s--)
            o.push("0");
          n.splice(...o);
        }
        for (r = e || Qi.alloc(i + 16), s = 0;s < n.length; s++) {
          let o = parseInt(n[s], 16);
          r[i++] = o >> 8 & 255, r[i++] = o & 255;
        }
      }
      if (!r)
        throw Error(`Invalid ip address: ${t}`);
      return r;
    };
    D.toString = function(t, e, i) {
      e = ~~e, i = i || t.length - e;
      let r = [];
      if (i === 4) {
        for (let n = 0;n < i; n++)
          r.push(t[e + n]);
        r = r.join(".");
      } else if (i === 16) {
        for (let n = 0;n < i; n += 2)
          r.push(t.readUInt16BE(e + n).toString(16));
        r = r.join(":"), r = r.replace(/(^|:)0(:0)*:0(:|$)/, "$1::$3"), r = r.replace(/:{3,4}/, "::");
      }
      return r;
    };
    var Ed = /^(\d{1,3}\.){3,3}\d{1,3}$/, Sd = /^(::)?(((\d{1,3}\.){3}(\d{1,3}){1})?([0-9a-f]){0,4}:{0,2}){1,8}(::)?$/i;
    D.isV4Format = function(t) {
      return Ed.test(t);
    };
    D.isV6Format = function(t) {
      return Sd.test(t);
    };
    function Ei(t) {
      return t === 4 ? "ipv4" : t === 6 ? "ipv6" : t ? t.toLowerCase() : "ipv4";
    }
    D.fromPrefixLen = function(t, e) {
      t > 32 ? e = "ipv6" : e = Ei(e);
      let i = 4;
      e === "ipv6" && (i = 16);
      let r = Qi.alloc(i);
      for (let n = 0, s = r.length;n < s; ++n) {
        let o = 8;
        t < 8 && (o = t), t -= o, r[n] = ~(255 >> o) & 255;
      }
      return D.toString(r);
    };
    D.mask = function(t, e) {
      t = D.toBuffer(t), e = D.toBuffer(e);
      let i = Qi.alloc(Math.max(t.length, e.length)), r;
      if (t.length === e.length)
        for (r = 0;r < t.length; r++)
          i[r] = t[r] & e[r];
      else if (e.length === 4)
        for (r = 0;r < e.length; r++)
          i[r] = t[t.length - 4 + r] & e[r];
      else {
        for (r = 0;r < i.length - 6; r++)
          i[r] = 0;
        for (i[10] = 255, i[11] = 255, r = 0;r < t.length; r++)
          i[r + 12] = t[r] & e[r + 12];
        r += 12;
      }
      for (;r < i.length; r++)
        i[r] = 0;
      return D.toString(i);
    };
    D.cidr = function(t) {
      let e = t.split("/"), i = e[0];
      if (e.length !== 2)
        throw new Error(`invalid CIDR subnet: ${i}`);
      let r = D.fromPrefixLen(parseInt(e[1], 10));
      return D.mask(i, r);
    };
    D.subnet = function(t, e) {
      let i = D.toLong(D.mask(t, e)), r = D.toBuffer(e), n = 0;
      for (let o = 0;o < r.length; o++)
        if (r[o] === 255)
          n += 8;
        else {
          let l = r[o] & 255;
          for (;l; )
            l = l << 1 & 255, n++;
        }
      let s = 2 ** (32 - n);
      return { networkAddress: D.fromLong(i), firstAddress: s <= 2 ? D.fromLong(i) : D.fromLong(i + 1), lastAddress: s <= 2 ? D.fromLong(i + s - 1) : D.fromLong(i + s - 2), broadcastAddress: D.fromLong(i + s - 1), subnetMask: e, subnetMaskLength: n, numHosts: s <= 2 ? s : s - 2, length: s, contains(o) {
        return i === D.toLong(D.mask(o, e));
      } };
    };
    D.cidrSubnet = function(t) {
      let e = t.split("/"), i = e[0];
      if (e.length !== 2)
        throw new Error(`invalid CIDR subnet: ${i}`);
      let r = D.fromPrefixLen(parseInt(e[1], 10));
      return D.subnet(i, r);
    };
    D.not = function(t) {
      let e = D.toBuffer(t);
      for (let i = 0;i < e.length; i++)
        e[i] = 255 ^ e[i];
      return D.toString(e);
    };
    D.or = function(t, e) {
      if (t = D.toBuffer(t), e = D.toBuffer(e), t.length === e.length) {
        for (let s = 0;s < t.length; ++s)
          t[s] |= e[s];
        return D.toString(t);
      }
      let i = t, r = e;
      e.length > t.length && (i = e, r = t);
      let n = i.length - r.length;
      for (let s = n;s < i.length; ++s)
        i[s] |= r[s - n];
      return D.toString(i);
    };
    D.isEqual = function(t, e) {
      if (t = D.toBuffer(t), e = D.toBuffer(e), t.length === e.length) {
        for (let r = 0;r < t.length; r++)
          if (t[r] !== e[r])
            return false;
        return true;
      }
      if (e.length === 4) {
        let r = e;
        e = t, t = r;
      }
      for (let r = 0;r < 10; r++)
        if (e[r] !== 0)
          return false;
      let i = e.readUInt16BE(10);
      if (i !== 0 && i !== 65535)
        return false;
      for (let r = 0;r < 4; r++)
        if (t[r] !== e[r + 12])
          return false;
      return true;
    };
    D.isPrivate = function(t) {
      if (D.isLoopback(t))
        return true;
      if (!D.isV6Format(t)) {
        let e = D.normalizeToLong(t);
        if (e < 0)
          throw new Error("invalid ipv4 address");
        t = D.fromLong(e);
      }
      return /^(::f{4}:)?10\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(t) || /^(::f{4}:)?192\.168\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(t) || /^(::f{4}:)?172\.(1[6-9]|2\d|30|31)\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(t) || /^(::f{4}:)?169\.254\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(t) || /^f[cd][0-9a-f]{2}:/i.test(t) || /^fe80:/i.test(t) || /^::1$/.test(t) || /^::$/.test(t);
    };
    D.isPublic = function(t) {
      return !D.isPrivate(t);
    };
    D.isLoopback = function(t) {
      return !/\./.test(t) && !/:/.test(t) && (t = D.fromLong(Number(t))), /^(::f{4}:)?127\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})/.test(t) || /^0177\./.test(t) || /^0x7f\./i.test(t) || /^fe80::1$/i.test(t) || /^::1$/.test(t) || /^::$/.test(t);
    };
    D.loopback = function(t) {
      if (t = Ei(t), t !== "ipv4" && t !== "ipv6")
        throw new Error("family must be ipv4 or ipv6");
      return t === "ipv4" ? "127.0.0.1" : "fe80::1";
    };
    D.address = function(t, e) {
      let i = wd.networkInterfaces();
      if (e = Ei(e), t && t !== "private" && t !== "public") {
        let n = i[t].filter((s) => Ei(s.family) === e);
        return n.length === 0 ? undefined : n[0].address;
      }
      let r = Object.keys(i).map((n) => {
        let s = i[n].filter((o) => (o.family = Ei(o.family), o.family !== e || D.isLoopback(o.address) ? false : t ? t === "public" ? D.isPrivate(o.address) : D.isPublic(o.address) : true));
        return s.length ? s[0].address : undefined;
      }).filter(Boolean);
      return r.length ? r[0] : D.loopback(e);
    };
    D.toLong = function(t) {
      let e = 0;
      return t.split(".").forEach((i) => {
        e <<= 8, e += parseInt(i);
      }), e >>> 0;
    };
    D.fromLong = function(t) {
      return `${t >>> 24}.${t >> 16 & 255}.${t >> 8 & 255}.${t & 255}`;
    };
    D.normalizeToLong = function(t) {
      let e = t.split(".").map((n) => n.startsWith("0x") || n.startsWith("0X") ? parseInt(n, 16) : n.startsWith("0") && n !== "0" && /^[0-7]+$/.test(n) ? parseInt(n, 8) : /^[1-9]\d*$/.test(n) || n === "0" ? parseInt(n, 10) : NaN);
      if (e.some(isNaN))
        return -1;
      let i = 0;
      switch (e.length) {
        case 1:
          i = e[0];
          break;
        case 2:
          if (e[0] > 255 || e[1] > 16777215)
            return -1;
          i = e[0] << 24 | e[1] & 16777215;
          break;
        case 3:
          if (e[0] > 255 || e[1] > 255 || e[2] > 65535)
            return -1;
          i = e[0] << 24 | e[1] << 16 | e[2] & 65535;
          break;
        case 4:
          if (e.some((n) => n > 255))
            return -1;
          i = e[0] << 24 | e[1] << 16 | e[2] << 8 | e[3];
          break;
        default:
          return -1;
      }
      return i >>> 0;
    };
  });
  var zl = y((at) => {
    Object.defineProperty(at, "__esModule", { value: true });
    var Vl = import.meta.require("buffer"), Ct = { INVALID_ENCODING: "Invalid encoding provided. Please specify a valid encoding the internal Node.js Buffer supports.", INVALID_SMARTBUFFER_SIZE: "Invalid size provided. Size must be a valid integer greater than zero.", INVALID_SMARTBUFFER_BUFFER: "Invalid Buffer provided in SmartBufferOptions.", INVALID_SMARTBUFFER_OBJECT: "Invalid SmartBufferOptions object supplied to SmartBuffer constructor or factory methods.", INVALID_OFFSET: "An invalid offset value was provided.", INVALID_OFFSET_NON_NUMBER: "An invalid offset value was provided. A numeric value is required.", INVALID_LENGTH: "An invalid length value was provided.", INVALID_LENGTH_NON_NUMBER: "An invalid length value was provived. A numeric value is required.", INVALID_TARGET_OFFSET: "Target offset is beyond the bounds of the internal SmartBuffer data.", INVALID_TARGET_LENGTH: "Specified length value moves cursor beyong the bounds of the internal SmartBuffer data.", INVALID_READ_BEYOND_BOUNDS: "Attempted to read beyond the bounds of the managed data.", INVALID_WRITE_BEYOND_BOUNDS: "Attempted to write beyond the bounds of the managed data." };
    at.ERRORS = Ct;
    function kd(t) {
      if (!Vl.Buffer.isEncoding(t))
        throw new Error(Ct.INVALID_ENCODING);
    }
    at.checkEncoding = kd;
    function $l(t) {
      return typeof t == "number" && isFinite(t) && Td(t);
    }
    at.isFiniteInteger = $l;
    function Gl(t, e) {
      if (typeof t == "number") {
        if (!$l(t) || t < 0)
          throw new Error(e ? Ct.INVALID_OFFSET : Ct.INVALID_LENGTH);
      } else
        throw new Error(e ? Ct.INVALID_OFFSET_NON_NUMBER : Ct.INVALID_LENGTH_NON_NUMBER);
    }
    function Cd(t) {
      Gl(t, false);
    }
    at.checkLengthValue = Cd;
    function Od(t) {
      Gl(t, true);
    }
    at.checkOffsetValue = Od;
    function Id(t, e) {
      if (t < 0 || t > e.length)
        throw new Error(Ct.INVALID_TARGET_OFFSET);
    }
    at.checkTargetOffset = Id;
    function Td(t) {
      return typeof t == "number" && isFinite(t) && Math.floor(t) === t;
    }
    function Ad(t) {
      if (typeof BigInt == "undefined")
        throw new Error("Platform does not support JS BigInt type.");
      if (typeof Vl.Buffer.prototype[t] == "undefined")
        throw new Error(`Platform does not support Buffer.prototype.${t}.`);
    }
    at.bigIntAndBufferInt64Check = Ad;
  });
  var Yl = y((Sn) => {
    Object.defineProperty(Sn, "__esModule", { value: true });
    var te = zl(), Wl = 4096, Rd = "utf8", En = class t {
      constructor(e) {
        if (this.length = 0, this._encoding = Rd, this._writeOffset = 0, this._readOffset = 0, t.isSmartBufferOptions(e))
          if (e.encoding && (te.checkEncoding(e.encoding), this._encoding = e.encoding), e.size)
            if (te.isFiniteInteger(e.size) && e.size > 0)
              this._buff = Buffer.allocUnsafe(e.size);
            else
              throw new Error(te.ERRORS.INVALID_SMARTBUFFER_SIZE);
          else if (e.buff)
            if (Buffer.isBuffer(e.buff))
              this._buff = e.buff, this.length = e.buff.length;
            else
              throw new Error(te.ERRORS.INVALID_SMARTBUFFER_BUFFER);
          else
            this._buff = Buffer.allocUnsafe(Wl);
        else {
          if (typeof e != "undefined")
            throw new Error(te.ERRORS.INVALID_SMARTBUFFER_OBJECT);
          this._buff = Buffer.allocUnsafe(Wl);
        }
      }
      static fromSize(e, i) {
        return new this({ size: e, encoding: i });
      }
      static fromBuffer(e, i) {
        return new this({ buff: e, encoding: i });
      }
      static fromOptions(e) {
        return new this(e);
      }
      static isSmartBufferOptions(e) {
        let i = e;
        return i && (i.encoding !== undefined || i.size !== undefined || i.buff !== undefined);
      }
      readInt8(e) {
        return this._readNumberValue(Buffer.prototype.readInt8, 1, e);
      }
      readInt16BE(e) {
        return this._readNumberValue(Buffer.prototype.readInt16BE, 2, e);
      }
      readInt16LE(e) {
        return this._readNumberValue(Buffer.prototype.readInt16LE, 2, e);
      }
      readInt32BE(e) {
        return this._readNumberValue(Buffer.prototype.readInt32BE, 4, e);
      }
      readInt32LE(e) {
        return this._readNumberValue(Buffer.prototype.readInt32LE, 4, e);
      }
      readBigInt64BE(e) {
        return te.bigIntAndBufferInt64Check("readBigInt64BE"), this._readNumberValue(Buffer.prototype.readBigInt64BE, 8, e);
      }
      readBigInt64LE(e) {
        return te.bigIntAndBufferInt64Check("readBigInt64LE"), this._readNumberValue(Buffer.prototype.readBigInt64LE, 8, e);
      }
      writeInt8(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeInt8, 1, e, i), this;
      }
      insertInt8(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeInt8, 1, e, i);
      }
      writeInt16BE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeInt16BE, 2, e, i);
      }
      insertInt16BE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeInt16BE, 2, e, i);
      }
      writeInt16LE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeInt16LE, 2, e, i);
      }
      insertInt16LE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeInt16LE, 2, e, i);
      }
      writeInt32BE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeInt32BE, 4, e, i);
      }
      insertInt32BE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeInt32BE, 4, e, i);
      }
      writeInt32LE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeInt32LE, 4, e, i);
      }
      insertInt32LE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeInt32LE, 4, e, i);
      }
      writeBigInt64BE(e, i) {
        return te.bigIntAndBufferInt64Check("writeBigInt64BE"), this._writeNumberValue(Buffer.prototype.writeBigInt64BE, 8, e, i);
      }
      insertBigInt64BE(e, i) {
        return te.bigIntAndBufferInt64Check("writeBigInt64BE"), this._insertNumberValue(Buffer.prototype.writeBigInt64BE, 8, e, i);
      }
      writeBigInt64LE(e, i) {
        return te.bigIntAndBufferInt64Check("writeBigInt64LE"), this._writeNumberValue(Buffer.prototype.writeBigInt64LE, 8, e, i);
      }
      insertBigInt64LE(e, i) {
        return te.bigIntAndBufferInt64Check("writeBigInt64LE"), this._insertNumberValue(Buffer.prototype.writeBigInt64LE, 8, e, i);
      }
      readUInt8(e) {
        return this._readNumberValue(Buffer.prototype.readUInt8, 1, e);
      }
      readUInt16BE(e) {
        return this._readNumberValue(Buffer.prototype.readUInt16BE, 2, e);
      }
      readUInt16LE(e) {
        return this._readNumberValue(Buffer.prototype.readUInt16LE, 2, e);
      }
      readUInt32BE(e) {
        return this._readNumberValue(Buffer.prototype.readUInt32BE, 4, e);
      }
      readUInt32LE(e) {
        return this._readNumberValue(Buffer.prototype.readUInt32LE, 4, e);
      }
      readBigUInt64BE(e) {
        return te.bigIntAndBufferInt64Check("readBigUInt64BE"), this._readNumberValue(Buffer.prototype.readBigUInt64BE, 8, e);
      }
      readBigUInt64LE(e) {
        return te.bigIntAndBufferInt64Check("readBigUInt64LE"), this._readNumberValue(Buffer.prototype.readBigUInt64LE, 8, e);
      }
      writeUInt8(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeUInt8, 1, e, i);
      }
      insertUInt8(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeUInt8, 1, e, i);
      }
      writeUInt16BE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeUInt16BE, 2, e, i);
      }
      insertUInt16BE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeUInt16BE, 2, e, i);
      }
      writeUInt16LE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeUInt16LE, 2, e, i);
      }
      insertUInt16LE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeUInt16LE, 2, e, i);
      }
      writeUInt32BE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeUInt32BE, 4, e, i);
      }
      insertUInt32BE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeUInt32BE, 4, e, i);
      }
      writeUInt32LE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeUInt32LE, 4, e, i);
      }
      insertUInt32LE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeUInt32LE, 4, e, i);
      }
      writeBigUInt64BE(e, i) {
        return te.bigIntAndBufferInt64Check("writeBigUInt64BE"), this._writeNumberValue(Buffer.prototype.writeBigUInt64BE, 8, e, i);
      }
      insertBigUInt64BE(e, i) {
        return te.bigIntAndBufferInt64Check("writeBigUInt64BE"), this._insertNumberValue(Buffer.prototype.writeBigUInt64BE, 8, e, i);
      }
      writeBigUInt64LE(e, i) {
        return te.bigIntAndBufferInt64Check("writeBigUInt64LE"), this._writeNumberValue(Buffer.prototype.writeBigUInt64LE, 8, e, i);
      }
      insertBigUInt64LE(e, i) {
        return te.bigIntAndBufferInt64Check("writeBigUInt64LE"), this._insertNumberValue(Buffer.prototype.writeBigUInt64LE, 8, e, i);
      }
      readFloatBE(e) {
        return this._readNumberValue(Buffer.prototype.readFloatBE, 4, e);
      }
      readFloatLE(e) {
        return this._readNumberValue(Buffer.prototype.readFloatLE, 4, e);
      }
      writeFloatBE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeFloatBE, 4, e, i);
      }
      insertFloatBE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeFloatBE, 4, e, i);
      }
      writeFloatLE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeFloatLE, 4, e, i);
      }
      insertFloatLE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeFloatLE, 4, e, i);
      }
      readDoubleBE(e) {
        return this._readNumberValue(Buffer.prototype.readDoubleBE, 8, e);
      }
      readDoubleLE(e) {
        return this._readNumberValue(Buffer.prototype.readDoubleLE, 8, e);
      }
      writeDoubleBE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeDoubleBE, 8, e, i);
      }
      insertDoubleBE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeDoubleBE, 8, e, i);
      }
      writeDoubleLE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeDoubleLE, 8, e, i);
      }
      insertDoubleLE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeDoubleLE, 8, e, i);
      }
      readString(e, i) {
        let r;
        typeof e == "number" ? (te.checkLengthValue(e), r = Math.min(e, this.length - this._readOffset)) : (i = e, r = this.length - this._readOffset), typeof i != "undefined" && te.checkEncoding(i);
        let n = this._buff.slice(this._readOffset, this._readOffset + r).toString(i || this._encoding);
        return this._readOffset += r, n;
      }
      insertString(e, i, r) {
        return te.checkOffsetValue(i), this._handleString(e, true, i, r);
      }
      writeString(e, i, r) {
        return this._handleString(e, false, i, r);
      }
      readStringNT(e) {
        typeof e != "undefined" && te.checkEncoding(e);
        let i = this.length;
        for (let n = this._readOffset;n < this.length; n++)
          if (this._buff[n] === 0) {
            i = n;
            break;
          }
        let r = this._buff.slice(this._readOffset, i);
        return this._readOffset = i + 1, r.toString(e || this._encoding);
      }
      insertStringNT(e, i, r) {
        return te.checkOffsetValue(i), this.insertString(e, i, r), this.insertUInt8(0, i + e.length), this;
      }
      writeStringNT(e, i, r) {
        return this.writeString(e, i, r), this.writeUInt8(0, typeof i == "number" ? i + e.length : this.writeOffset), this;
      }
      readBuffer(e) {
        typeof e != "undefined" && te.checkLengthValue(e);
        let i = typeof e == "number" ? e : this.length, r = Math.min(this.length, this._readOffset + i), n = this._buff.slice(this._readOffset, r);
        return this._readOffset = r, n;
      }
      insertBuffer(e, i) {
        return te.checkOffsetValue(i), this._handleBuffer(e, true, i);
      }
      writeBuffer(e, i) {
        return this._handleBuffer(e, false, i);
      }
      readBufferNT() {
        let e = this.length;
        for (let r = this._readOffset;r < this.length; r++)
          if (this._buff[r] === 0) {
            e = r;
            break;
          }
        let i = this._buff.slice(this._readOffset, e);
        return this._readOffset = e + 1, i;
      }
      insertBufferNT(e, i) {
        return te.checkOffsetValue(i), this.insertBuffer(e, i), this.insertUInt8(0, i + e.length), this;
      }
      writeBufferNT(e, i) {
        return typeof i != "undefined" && te.checkOffsetValue(i), this.writeBuffer(e, i), this.writeUInt8(0, typeof i == "number" ? i + e.length : this._writeOffset), this;
      }
      clear() {
        return this._writeOffset = 0, this._readOffset = 0, this.length = 0, this;
      }
      remaining() {
        return this.length - this._readOffset;
      }
      get readOffset() {
        return this._readOffset;
      }
      set readOffset(e) {
        te.checkOffsetValue(e), te.checkTargetOffset(e, this), this._readOffset = e;
      }
      get writeOffset() {
        return this._writeOffset;
      }
      set writeOffset(e) {
        te.checkOffsetValue(e), te.checkTargetOffset(e, this), this._writeOffset = e;
      }
      get encoding() {
        return this._encoding;
      }
      set encoding(e) {
        te.checkEncoding(e), this._encoding = e;
      }
      get internalBuffer() {
        return this._buff;
      }
      toBuffer() {
        return this._buff.slice(0, this.length);
      }
      toString(e) {
        let i = typeof e == "string" ? e : this._encoding;
        return te.checkEncoding(i), this._buff.toString(i, 0, this.length);
      }
      destroy() {
        return this.clear(), this;
      }
      _handleString(e, i, r, n) {
        let s = this._writeOffset, o = this._encoding;
        typeof r == "number" ? s = r : typeof r == "string" && (te.checkEncoding(r), o = r), typeof n == "string" && (te.checkEncoding(n), o = n);
        let l = Buffer.byteLength(e, o);
        return i ? this.ensureInsertable(l, s) : this._ensureWriteable(l, s), this._buff.write(e, s, l, o), i ? this._writeOffset += l : typeof r == "number" ? this._writeOffset = Math.max(this._writeOffset, s + l) : this._writeOffset += l, this;
      }
      _handleBuffer(e, i, r) {
        let n = typeof r == "number" ? r : this._writeOffset;
        return i ? this.ensureInsertable(e.length, n) : this._ensureWriteable(e.length, n), e.copy(this._buff, n), i ? this._writeOffset += e.length : typeof r == "number" ? this._writeOffset = Math.max(this._writeOffset, n + e.length) : this._writeOffset += e.length, this;
      }
      ensureReadable(e, i) {
        let r = this._readOffset;
        if (typeof i != "undefined" && (te.checkOffsetValue(i), r = i), r < 0 || r + e > this.length)
          throw new Error(te.ERRORS.INVALID_READ_BEYOND_BOUNDS);
      }
      ensureInsertable(e, i) {
        te.checkOffsetValue(i), this._ensureCapacity(this.length + e), i < this.length && this._buff.copy(this._buff, i + e, i, this._buff.length), i + e > this.length ? this.length = i + e : this.length += e;
      }
      _ensureWriteable(e, i) {
        let r = typeof i == "number" ? i : this._writeOffset;
        this._ensureCapacity(r + e), r + e > this.length && (this.length = r + e);
      }
      _ensureCapacity(e) {
        let i = this._buff.length;
        if (e > i) {
          let r = this._buff, n = i * 3 / 2 + 1;
          n < e && (n = e), this._buff = Buffer.allocUnsafe(n), r.copy(this._buff, 0, 0, i);
        }
      }
      _readNumberValue(e, i, r) {
        this.ensureReadable(i, r);
        let n = e.call(this._buff, typeof r == "number" ? r : this._readOffset);
        return typeof r == "undefined" && (this._readOffset += i), n;
      }
      _insertNumberValue(e, i, r, n) {
        return te.checkOffsetValue(n), this.ensureInsertable(i, n), e.call(this._buff, r, n), this._writeOffset += i, this;
      }
      _writeNumberValue(e, i, r, n) {
        if (typeof n == "number") {
          if (n < 0)
            throw new Error(te.ERRORS.INVALID_WRITE_BEYOND_BOUNDS);
          te.checkOffsetValue(n);
        }
        let s = typeof n == "number" ? n : this._writeOffset;
        return this._ensureWriteable(i, s), e.call(this._buff, r, s), typeof n == "number" ? this._writeOffset = Math.max(this._writeOffset, s + i) : this._writeOffset += i, this;
      }
    };
    Sn.SmartBuffer = En;
  });
  var Rn = y((_e) => {
    Object.defineProperty(_e, "__esModule", { value: true });
    _e.SOCKS5_NO_ACCEPTABLE_AUTH = _e.SOCKS5_CUSTOM_AUTH_END = _e.SOCKS5_CUSTOM_AUTH_START = _e.SOCKS_INCOMING_PACKET_SIZES = _e.SocksClientState = _e.Socks5Response = _e.Socks5HostType = _e.Socks5Auth = _e.Socks4Response = _e.SocksCommand = _e.ERRORS = _e.DEFAULT_TIMEOUT = undefined;
    var Bd = 30000;
    _e.DEFAULT_TIMEOUT = Bd;
    var Ld = { InvalidSocksCommand: "An invalid SOCKS command was provided. Valid options are connect, bind, and associate.", InvalidSocksCommandForOperation: "An invalid SOCKS command was provided. Only a subset of commands are supported for this operation.", InvalidSocksCommandChain: "An invalid SOCKS command was provided. Chaining currently only supports the connect command.", InvalidSocksClientOptionsDestination: "An invalid destination host was provided.", InvalidSocksClientOptionsExistingSocket: "An invalid existing socket was provided. This should be an instance of stream.Duplex.", InvalidSocksClientOptionsProxy: "Invalid SOCKS proxy details were provided.", InvalidSocksClientOptionsTimeout: "An invalid timeout value was provided. Please enter a value above 0 (in ms).", InvalidSocksClientOptionsProxiesLength: "At least two socks proxies must be provided for chaining.", InvalidSocksClientOptionsCustomAuthRange: "Custom auth must be a value between 0x80 and 0xFE.", InvalidSocksClientOptionsCustomAuthOptions: "When a custom_auth_method is provided, custom_auth_request_handler, custom_auth_response_size, and custom_auth_response_handler must also be provided and valid.", NegotiationError: "Negotiation error", SocketClosed: "Socket closed", ProxyConnectionTimedOut: "Proxy connection timed out", InternalError: "SocksClient internal error (this should not happen)", InvalidSocks4HandshakeResponse: "Received invalid Socks4 handshake response", Socks4ProxyRejectedConnection: "Socks4 Proxy rejected connection", InvalidSocks4IncomingConnectionResponse: "Socks4 invalid incoming connection response", Socks4ProxyRejectedIncomingBoundConnection: "Socks4 Proxy rejected incoming bound connection", InvalidSocks5InitialHandshakeResponse: "Received invalid Socks5 initial handshake response", InvalidSocks5IntiailHandshakeSocksVersion: "Received invalid Socks5 initial handshake (invalid socks version)", InvalidSocks5InitialHandshakeNoAcceptedAuthType: "Received invalid Socks5 initial handshake (no accepted authentication type)", InvalidSocks5InitialHandshakeUnknownAuthType: "Received invalid Socks5 initial handshake (unknown authentication type)", Socks5AuthenticationFailed: "Socks5 Authentication failed", InvalidSocks5FinalHandshake: "Received invalid Socks5 final handshake response", InvalidSocks5FinalHandshakeRejected: "Socks5 proxy rejected connection", InvalidSocks5IncomingConnectionResponse: "Received invalid Socks5 incoming connection response", Socks5ProxyRejectedIncomingBoundConnection: "Socks5 Proxy rejected incoming bound connection" };
    _e.ERRORS = Ld;
    var Pd = { Socks5InitialHandshakeResponse: 2, Socks5UserPassAuthenticationResponse: 2, Socks5ResponseHeader: 5, Socks5ResponseIPv4: 10, Socks5ResponseIPv6: 22, Socks5ResponseHostname: (t) => t + 7, Socks4Response: 8 };
    _e.SOCKS_INCOMING_PACKET_SIZES = Pd;
    var kn;
    (function(t) {
      t[t.connect = 1] = "connect", t[t.bind = 2] = "bind", t[t.associate = 3] = "associate";
    })(kn || (kn = {}));
    _e.SocksCommand = kn;
    var Cn;
    (function(t) {
      t[t.Granted = 90] = "Granted", t[t.Failed = 91] = "Failed", t[t.Rejected = 92] = "Rejected", t[t.RejectedIdent = 93] = "RejectedIdent";
    })(Cn || (Cn = {}));
    _e.Socks4Response = Cn;
    var On;
    (function(t) {
      t[t.NoAuth = 0] = "NoAuth", t[t.GSSApi = 1] = "GSSApi", t[t.UserPass = 2] = "UserPass";
    })(On || (On = {}));
    _e.Socks5Auth = On;
    var Fd = 128;
    _e.SOCKS5_CUSTOM_AUTH_START = Fd;
    var Nd = 254;
    _e.SOCKS5_CUSTOM_AUTH_END = Nd;
    var Md = 255;
    _e.SOCKS5_NO_ACCEPTABLE_AUTH = Md;
    var In;
    (function(t) {
      t[t.Granted = 0] = "Granted", t[t.Failure = 1] = "Failure", t[t.NotAllowed = 2] = "NotAllowed", t[t.NetworkUnreachable = 3] = "NetworkUnreachable", t[t.HostUnreachable = 4] = "HostUnreachable", t[t.ConnectionRefused = 5] = "ConnectionRefused", t[t.TTLExpired = 6] = "TTLExpired", t[t.CommandNotSupported = 7] = "CommandNotSupported", t[t.AddressNotSupported = 8] = "AddressNotSupported";
    })(In || (In = {}));
    _e.Socks5Response = In;
    var Tn;
    (function(t) {
      t[t.IPv4 = 1] = "IPv4", t[t.Hostname = 3] = "Hostname", t[t.IPv6 = 4] = "IPv6";
    })(Tn || (Tn = {}));
    _e.Socks5HostType = Tn;
    var An;
    (function(t) {
      t[t.Created = 0] = "Created", t[t.Connecting = 1] = "Connecting", t[t.Connected = 2] = "Connected", t[t.SentInitialHandshake = 3] = "SentInitialHandshake", t[t.ReceivedInitialHandshakeResponse = 4] = "ReceivedInitialHandshakeResponse", t[t.SentAuthentication = 5] = "SentAuthentication", t[t.ReceivedAuthenticationResponse = 6] = "ReceivedAuthenticationResponse", t[t.SentFinalHandshake = 7] = "SentFinalHandshake", t[t.ReceivedFinalResponse = 8] = "ReceivedFinalResponse", t[t.BoundWaitingForConnection = 9] = "BoundWaitingForConnection", t[t.Established = 10] = "Established", t[t.Disconnected = 11] = "Disconnected", t[t.Error = 99] = "Error";
    })(An || (An = {}));
    _e.SocksClientState = An;
  });
  var Ln = y((Xt) => {
    Object.defineProperty(Xt, "__esModule", { value: true });
    Xt.shuffleArray = Xt.SocksClientError = undefined;
    var Bn = class extends Error {
      constructor(e, i) {
        super(e), this.options = i;
      }
    };
    Xt.SocksClientError = Bn;
    function Ud(t) {
      for (let e = t.length - 1;e > 0; e--) {
        let i = Math.floor(Math.random() * (e + 1));
        [t[e], t[i]] = [t[i], t[e]];
      }
    }
    Xt.shuffleArray = Ud;
  });
  var Ql = y((Jt) => {
    Object.defineProperty(Jt, "__esModule", { value: true });
    Jt.validateSocksClientChainOptions = Jt.validateSocksClientOptions = undefined;
    var He = Ln(), Re = Rn(), Dd = import.meta.require("stream");
    function jd(t, e = ["connect", "bind", "associate"]) {
      if (!Re.SocksCommand[t.command])
        throw new He.SocksClientError(Re.ERRORS.InvalidSocksCommand, t);
      if (e.indexOf(t.command) === -1)
        throw new He.SocksClientError(Re.ERRORS.InvalidSocksCommandForOperation, t);
      if (!Zl(t.destination))
        throw new He.SocksClientError(Re.ERRORS.InvalidSocksClientOptionsDestination, t);
      if (!Xl(t.proxy))
        throw new He.SocksClientError(Re.ERRORS.InvalidSocksClientOptionsProxy, t);
      if (Kl(t.proxy, t), t.timeout && !Jl(t.timeout))
        throw new He.SocksClientError(Re.ERRORS.InvalidSocksClientOptionsTimeout, t);
      if (t.existing_socket && !(t.existing_socket instanceof Dd.Duplex))
        throw new He.SocksClientError(Re.ERRORS.InvalidSocksClientOptionsExistingSocket, t);
    }
    Jt.validateSocksClientOptions = jd;
    function qd(t) {
      if (t.command !== "connect")
        throw new He.SocksClientError(Re.ERRORS.InvalidSocksCommandChain, t);
      if (!Zl(t.destination))
        throw new He.SocksClientError(Re.ERRORS.InvalidSocksClientOptionsDestination, t);
      if (!(t.proxies && Array.isArray(t.proxies) && t.proxies.length >= 2))
        throw new He.SocksClientError(Re.ERRORS.InvalidSocksClientOptionsProxiesLength, t);
      if (t.proxies.forEach((e) => {
        if (!Xl(e))
          throw new He.SocksClientError(Re.ERRORS.InvalidSocksClientOptionsProxy, t);
        Kl(e, t);
      }), t.timeout && !Jl(t.timeout))
        throw new He.SocksClientError(Re.ERRORS.InvalidSocksClientOptionsTimeout, t);
    }
    Jt.validateSocksClientChainOptions = qd;
    function Kl(t, e) {
      if (t.custom_auth_method !== undefined) {
        if (t.custom_auth_method < Re.SOCKS5_CUSTOM_AUTH_START || t.custom_auth_method > Re.SOCKS5_CUSTOM_AUTH_END)
          throw new He.SocksClientError(Re.ERRORS.InvalidSocksClientOptionsCustomAuthRange, e);
        if (t.custom_auth_request_handler === undefined || typeof t.custom_auth_request_handler != "function")
          throw new He.SocksClientError(Re.ERRORS.InvalidSocksClientOptionsCustomAuthOptions, e);
        if (t.custom_auth_response_size === undefined)
          throw new He.SocksClientError(Re.ERRORS.InvalidSocksClientOptionsCustomAuthOptions, e);
        if (t.custom_auth_response_handler === undefined || typeof t.custom_auth_response_handler != "function")
          throw new He.SocksClientError(Re.ERRORS.InvalidSocksClientOptionsCustomAuthOptions, e);
      }
    }
    function Zl(t) {
      return t && typeof t.host == "string" && typeof t.port == "number" && t.port >= 0 && t.port <= 65535;
    }
    function Xl(t) {
      return t && (typeof t.host == "string" || typeof t.ipaddress == "string") && typeof t.port == "number" && t.port >= 0 && t.port <= 65535 && (t.type === 4 || t.type === 5);
    }
    function Jl(t) {
      return typeof t == "number" && t > 0;
    }
  });
  var ec = y((er) => {
    Object.defineProperty(er, "__esModule", { value: true });
    er.ReceiveBuffer = undefined;
    var Pn = class {
      constructor(e = 4096) {
        this.buffer = Buffer.allocUnsafe(e), this.offset = 0, this.originalSize = e;
      }
      get length() {
        return this.offset;
      }
      append(e) {
        if (!Buffer.isBuffer(e))
          throw new Error("Attempted to append a non-buffer instance to ReceiveBuffer.");
        if (this.offset + e.length >= this.buffer.length) {
          let i = this.buffer;
          this.buffer = Buffer.allocUnsafe(Math.max(this.buffer.length + this.originalSize, this.buffer.length + e.length)), i.copy(this.buffer);
        }
        return e.copy(this.buffer, this.offset), this.offset += e.length;
      }
      peek(e) {
        if (e > this.offset)
          throw new Error("Attempted to read beyond the bounds of the managed internal data.");
        return this.buffer.slice(0, e);
      }
      get(e) {
        if (e > this.offset)
          throw new Error("Attempted to read beyond the bounds of the managed internal data.");
        let i = Buffer.allocUnsafe(e);
        return this.buffer.slice(0, e).copy(i), this.buffer.copyWithin(0, e, e + this.offset - e), this.offset -= e, i;
      }
    };
    er.ReceiveBuffer = Pn;
  });
  var tc = y((dt) => {
    var Qt = dt && dt.__awaiter || function(t, e, i, r) {
      function n(s) {
        return s instanceof i ? s : new i(function(o) {
          o(s);
        });
      }
      return new (i || (i = Promise))(function(s, o) {
        function l(u) {
          try {
            c(r.next(u));
          } catch (f) {
            o(f);
          }
        }
        function a(u) {
          try {
            c(r.throw(u));
          } catch (f) {
            o(f);
          }
        }
        function c(u) {
          u.done ? s(u.value) : n(u.value).then(l, a);
        }
        c((r = r.apply(t, e || [])).next());
      });
    };
    Object.defineProperty(dt, "__esModule", { value: true });
    dt.SocksClientError = dt.SocksClient = undefined;
    var Hd = import.meta.require("events"), ei = import.meta.require("net"), ze = Hl(), Ve = Yl(), S = Rn(), Fn = Ql(), Vd = ec(), Nn = Ln();
    Object.defineProperty(dt, "SocksClientError", { enumerable: true, get: function() {
      return Nn.SocksClientError;
    } });
    var Mn = class t extends Hd.EventEmitter {
      constructor(e) {
        super(), this.options = Object.assign({}, e), (0, Fn.validateSocksClientOptions)(e), this.setState(S.SocksClientState.Created);
      }
      static createConnection(e, i) {
        return new Promise((r, n) => {
          try {
            (0, Fn.validateSocksClientOptions)(e, ["connect"]);
          } catch (o) {
            return typeof i == "function" ? (i(o), r(o)) : n(o);
          }
          let s = new t(e);
          s.connect(e.existing_socket), s.once("established", (o) => {
            s.removeAllListeners(), typeof i == "function" && i(null, o), r(o);
          }), s.once("error", (o) => {
            s.removeAllListeners(), typeof i == "function" ? (i(o), r(o)) : n(o);
          });
        });
      }
      static createConnectionChain(e, i) {
        return new Promise((r, n) => Qt(this, undefined, undefined, function* () {
          try {
            (0, Fn.validateSocksClientChainOptions)(e);
          } catch (o) {
            return typeof i == "function" ? (i(o), r(o)) : n(o);
          }
          let s;
          e.randomizeChain && (0, Nn.shuffleArray)(e.proxies);
          try {
            for (let o = 0;o < e.proxies.length; o++) {
              let l = e.proxies[o], a = o === e.proxies.length - 1 ? e.destination : { host: e.proxies[o + 1].host || e.proxies[o + 1].ipaddress, port: e.proxies[o + 1].port }, c = yield t.createConnection({ command: "connect", proxy: l, destination: a });
              s || (s = c.socket);
            }
            typeof i == "function" ? (i(null, { socket: s }), r({ socket: s })) : r({ socket: s });
          } catch (o) {
            typeof i == "function" ? (i(o), r(o)) : n(o);
          }
        }));
      }
      static createUDPFrame(e) {
        let i = new Ve.SmartBuffer;
        return i.writeUInt16BE(0), i.writeUInt8(e.frameNumber || 0), ei.isIPv4(e.remoteHost.host) ? (i.writeUInt8(S.Socks5HostType.IPv4), i.writeUInt32BE(ze.toLong(e.remoteHost.host))) : ei.isIPv6(e.remoteHost.host) ? (i.writeUInt8(S.Socks5HostType.IPv6), i.writeBuffer(ze.toBuffer(e.remoteHost.host))) : (i.writeUInt8(S.Socks5HostType.Hostname), i.writeUInt8(Buffer.byteLength(e.remoteHost.host)), i.writeString(e.remoteHost.host)), i.writeUInt16BE(e.remoteHost.port), i.writeBuffer(e.data), i.toBuffer();
      }
      static parseUDPFrame(e) {
        let i = Ve.SmartBuffer.fromBuffer(e);
        i.readOffset = 2;
        let r = i.readUInt8(), n = i.readUInt8(), s;
        n === S.Socks5HostType.IPv4 ? s = ze.fromLong(i.readUInt32BE()) : n === S.Socks5HostType.IPv6 ? s = ze.toString(i.readBuffer(16)) : s = i.readString(i.readUInt8());
        let o = i.readUInt16BE();
        return { frameNumber: r, remoteHost: { host: s, port: o }, data: i.readBuffer() };
      }
      setState(e) {
        this.state !== S.SocksClientState.Error && (this.state = e);
      }
      connect(e) {
        this.onDataReceived = (r) => this.onDataReceivedHandler(r), this.onClose = () => this.onCloseHandler(), this.onError = (r) => this.onErrorHandler(r), this.onConnect = () => this.onConnectHandler();
        let i = setTimeout(() => this.onEstablishedTimeout(), this.options.timeout || S.DEFAULT_TIMEOUT);
        i.unref && typeof i.unref == "function" && i.unref(), e ? this.socket = e : this.socket = new ei.Socket, this.socket.once("close", this.onClose), this.socket.once("error", this.onError), this.socket.once("connect", this.onConnect), this.socket.on("data", this.onDataReceived), this.setState(S.SocksClientState.Connecting), this.receiveBuffer = new Vd.ReceiveBuffer, e ? this.socket.emit("connect") : (this.socket.connect(this.getSocketOptions()), this.options.set_tcp_nodelay !== undefined && this.options.set_tcp_nodelay !== null && this.socket.setNoDelay(!!this.options.set_tcp_nodelay)), this.prependOnceListener("established", (r) => {
          setImmediate(() => {
            if (this.receiveBuffer.length > 0) {
              let n = this.receiveBuffer.get(this.receiveBuffer.length);
              r.socket.emit("data", n);
            }
            r.socket.resume();
          });
        });
      }
      getSocketOptions() {
        return Object.assign(Object.assign({}, this.options.socket_options), { host: this.options.proxy.host || this.options.proxy.ipaddress, port: this.options.proxy.port });
      }
      onEstablishedTimeout() {
        this.state !== S.SocksClientState.Established && this.state !== S.SocksClientState.BoundWaitingForConnection && this.closeSocket(S.ERRORS.ProxyConnectionTimedOut);
      }
      onConnectHandler() {
        this.setState(S.SocksClientState.Connected), this.options.proxy.type === 4 ? this.sendSocks4InitialHandshake() : this.sendSocks5InitialHandshake(), this.setState(S.SocksClientState.SentInitialHandshake);
      }
      onDataReceivedHandler(e) {
        this.receiveBuffer.append(e), this.processData();
      }
      processData() {
        for (;this.state !== S.SocksClientState.Established && this.state !== S.SocksClientState.Error && this.receiveBuffer.length >= this.nextRequiredPacketBufferSize; )
          if (this.state === S.SocksClientState.SentInitialHandshake)
            this.options.proxy.type === 4 ? this.handleSocks4FinalHandshakeResponse() : this.handleInitialSocks5HandshakeResponse();
          else if (this.state === S.SocksClientState.SentAuthentication)
            this.handleInitialSocks5AuthenticationHandshakeResponse();
          else if (this.state === S.SocksClientState.SentFinalHandshake)
            this.handleSocks5FinalHandshakeResponse();
          else if (this.state === S.SocksClientState.BoundWaitingForConnection)
            this.options.proxy.type === 4 ? this.handleSocks4IncomingConnectionResponse() : this.handleSocks5IncomingConnectionResponse();
          else {
            this.closeSocket(S.ERRORS.InternalError);
            break;
          }
      }
      onCloseHandler() {
        this.closeSocket(S.ERRORS.SocketClosed);
      }
      onErrorHandler(e) {
        this.closeSocket(e.message);
      }
      removeInternalSocketHandlers() {
        this.socket.pause(), this.socket.removeListener("data", this.onDataReceived), this.socket.removeListener("close", this.onClose), this.socket.removeListener("error", this.onError), this.socket.removeListener("connect", this.onConnect);
      }
      closeSocket(e) {
        this.state !== S.SocksClientState.Error && (this.setState(S.SocksClientState.Error), this.socket.destroy(), this.removeInternalSocketHandlers(), this.emit("error", new Nn.SocksClientError(e, this.options)));
      }
      sendSocks4InitialHandshake() {
        let e = this.options.proxy.userId || "", i = new Ve.SmartBuffer;
        i.writeUInt8(4), i.writeUInt8(S.SocksCommand[this.options.command]), i.writeUInt16BE(this.options.destination.port), ei.isIPv4(this.options.destination.host) ? (i.writeBuffer(ze.toBuffer(this.options.destination.host)), i.writeStringNT(e)) : (i.writeUInt8(0), i.writeUInt8(0), i.writeUInt8(0), i.writeUInt8(1), i.writeStringNT(e), i.writeStringNT(this.options.destination.host)), this.nextRequiredPacketBufferSize = S.SOCKS_INCOMING_PACKET_SIZES.Socks4Response, this.socket.write(i.toBuffer());
      }
      handleSocks4FinalHandshakeResponse() {
        let e = this.receiveBuffer.get(8);
        if (e[1] !== S.Socks4Response.Granted)
          this.closeSocket(`${S.ERRORS.Socks4ProxyRejectedConnection} - (${S.Socks4Response[e[1]]})`);
        else if (S.SocksCommand[this.options.command] === S.SocksCommand.bind) {
          let i = Ve.SmartBuffer.fromBuffer(e);
          i.readOffset = 2;
          let r = { port: i.readUInt16BE(), host: ze.fromLong(i.readUInt32BE()) };
          r.host === "0.0.0.0" && (r.host = this.options.proxy.ipaddress), this.setState(S.SocksClientState.BoundWaitingForConnection), this.emit("bound", { remoteHost: r, socket: this.socket });
        } else
          this.setState(S.SocksClientState.Established), this.removeInternalSocketHandlers(), this.emit("established", { socket: this.socket });
      }
      handleSocks4IncomingConnectionResponse() {
        let e = this.receiveBuffer.get(8);
        if (e[1] !== S.Socks4Response.Granted)
          this.closeSocket(`${S.ERRORS.Socks4ProxyRejectedIncomingBoundConnection} - (${S.Socks4Response[e[1]]})`);
        else {
          let i = Ve.SmartBuffer.fromBuffer(e);
          i.readOffset = 2;
          let r = { port: i.readUInt16BE(), host: ze.fromLong(i.readUInt32BE()) };
          this.setState(S.SocksClientState.Established), this.removeInternalSocketHandlers(), this.emit("established", { remoteHost: r, socket: this.socket });
        }
      }
      sendSocks5InitialHandshake() {
        let e = new Ve.SmartBuffer, i = [S.Socks5Auth.NoAuth];
        (this.options.proxy.userId || this.options.proxy.password) && i.push(S.Socks5Auth.UserPass), this.options.proxy.custom_auth_method !== undefined && i.push(this.options.proxy.custom_auth_method), e.writeUInt8(5), e.writeUInt8(i.length);
        for (let r of i)
          e.writeUInt8(r);
        this.nextRequiredPacketBufferSize = S.SOCKS_INCOMING_PACKET_SIZES.Socks5InitialHandshakeResponse, this.socket.write(e.toBuffer()), this.setState(S.SocksClientState.SentInitialHandshake);
      }
      handleInitialSocks5HandshakeResponse() {
        let e = this.receiveBuffer.get(2);
        e[0] !== 5 ? this.closeSocket(S.ERRORS.InvalidSocks5IntiailHandshakeSocksVersion) : e[1] === S.SOCKS5_NO_ACCEPTABLE_AUTH ? this.closeSocket(S.ERRORS.InvalidSocks5InitialHandshakeNoAcceptedAuthType) : e[1] === S.Socks5Auth.NoAuth ? (this.socks5ChosenAuthType = S.Socks5Auth.NoAuth, this.sendSocks5CommandRequest()) : e[1] === S.Socks5Auth.UserPass ? (this.socks5ChosenAuthType = S.Socks5Auth.UserPass, this.sendSocks5UserPassAuthentication()) : e[1] === this.options.proxy.custom_auth_method ? (this.socks5ChosenAuthType = this.options.proxy.custom_auth_method, this.sendSocks5CustomAuthentication()) : this.closeSocket(S.ERRORS.InvalidSocks5InitialHandshakeUnknownAuthType);
      }
      sendSocks5UserPassAuthentication() {
        let e = this.options.proxy.userId || "", i = this.options.proxy.password || "", r = new Ve.SmartBuffer;
        r.writeUInt8(1), r.writeUInt8(Buffer.byteLength(e)), r.writeString(e), r.writeUInt8(Buffer.byteLength(i)), r.writeString(i), this.nextRequiredPacketBufferSize = S.SOCKS_INCOMING_PACKET_SIZES.Socks5UserPassAuthenticationResponse, this.socket.write(r.toBuffer()), this.setState(S.SocksClientState.SentAuthentication);
      }
      sendSocks5CustomAuthentication() {
        return Qt(this, undefined, undefined, function* () {
          this.nextRequiredPacketBufferSize = this.options.proxy.custom_auth_response_size, this.socket.write(yield this.options.proxy.custom_auth_request_handler()), this.setState(S.SocksClientState.SentAuthentication);
        });
      }
      handleSocks5CustomAuthHandshakeResponse(e) {
        return Qt(this, undefined, undefined, function* () {
          return yield this.options.proxy.custom_auth_response_handler(e);
        });
      }
      handleSocks5AuthenticationNoAuthHandshakeResponse(e) {
        return Qt(this, undefined, undefined, function* () {
          return e[1] === 0;
        });
      }
      handleSocks5AuthenticationUserPassHandshakeResponse(e) {
        return Qt(this, undefined, undefined, function* () {
          return e[1] === 0;
        });
      }
      handleInitialSocks5AuthenticationHandshakeResponse() {
        return Qt(this, undefined, undefined, function* () {
          this.setState(S.SocksClientState.ReceivedAuthenticationResponse);
          let e = false;
          this.socks5ChosenAuthType === S.Socks5Auth.NoAuth ? e = yield this.handleSocks5AuthenticationNoAuthHandshakeResponse(this.receiveBuffer.get(2)) : this.socks5ChosenAuthType === S.Socks5Auth.UserPass ? e = yield this.handleSocks5AuthenticationUserPassHandshakeResponse(this.receiveBuffer.get(2)) : this.socks5ChosenAuthType === this.options.proxy.custom_auth_method && (e = yield this.handleSocks5CustomAuthHandshakeResponse(this.receiveBuffer.get(this.options.proxy.custom_auth_response_size))), e ? this.sendSocks5CommandRequest() : this.closeSocket(S.ERRORS.Socks5AuthenticationFailed);
        });
      }
      sendSocks5CommandRequest() {
        let e = new Ve.SmartBuffer;
        e.writeUInt8(5), e.writeUInt8(S.SocksCommand[this.options.command]), e.writeUInt8(0), ei.isIPv4(this.options.destination.host) ? (e.writeUInt8(S.Socks5HostType.IPv4), e.writeBuffer(ze.toBuffer(this.options.destination.host))) : ei.isIPv6(this.options.destination.host) ? (e.writeUInt8(S.Socks5HostType.IPv6), e.writeBuffer(ze.toBuffer(this.options.destination.host))) : (e.writeUInt8(S.Socks5HostType.Hostname), e.writeUInt8(this.options.destination.host.length), e.writeString(this.options.destination.host)), e.writeUInt16BE(this.options.destination.port), this.nextRequiredPacketBufferSize = S.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHeader, this.socket.write(e.toBuffer()), this.setState(S.SocksClientState.SentFinalHandshake);
      }
      handleSocks5FinalHandshakeResponse() {
        let e = this.receiveBuffer.peek(5);
        if (e[0] !== 5 || e[1] !== S.Socks5Response.Granted)
          this.closeSocket(`${S.ERRORS.InvalidSocks5FinalHandshakeRejected} - ${S.Socks5Response[e[1]]}`);
        else {
          let i = e[3], r, n;
          if (i === S.Socks5HostType.IPv4) {
            let s = S.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv4;
            if (this.receiveBuffer.length < s) {
              this.nextRequiredPacketBufferSize = s;
              return;
            }
            n = Ve.SmartBuffer.fromBuffer(this.receiveBuffer.get(s).slice(4)), r = { host: ze.fromLong(n.readUInt32BE()), port: n.readUInt16BE() }, r.host === "0.0.0.0" && (r.host = this.options.proxy.ipaddress);
          } else if (i === S.Socks5HostType.Hostname) {
            let s = e[4], o = S.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHostname(s);
            if (this.receiveBuffer.length < o) {
              this.nextRequiredPacketBufferSize = o;
              return;
            }
            n = Ve.SmartBuffer.fromBuffer(this.receiveBuffer.get(o).slice(5)), r = { host: n.readString(s), port: n.readUInt16BE() };
          } else if (i === S.Socks5HostType.IPv6) {
            let s = S.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv6;
            if (this.receiveBuffer.length < s) {
              this.nextRequiredPacketBufferSize = s;
              return;
            }
            n = Ve.SmartBuffer.fromBuffer(this.receiveBuffer.get(s).slice(4)), r = { host: ze.toString(n.readBuffer(16)), port: n.readUInt16BE() };
          }
          this.setState(S.SocksClientState.ReceivedFinalResponse), S.SocksCommand[this.options.command] === S.SocksCommand.connect ? (this.setState(S.SocksClientState.Established), this.removeInternalSocketHandlers(), this.emit("established", { remoteHost: r, socket: this.socket })) : S.SocksCommand[this.options.command] === S.SocksCommand.bind ? (this.setState(S.SocksClientState.BoundWaitingForConnection), this.nextRequiredPacketBufferSize = S.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHeader, this.emit("bound", { remoteHost: r, socket: this.socket })) : S.SocksCommand[this.options.command] === S.SocksCommand.associate && (this.setState(S.SocksClientState.Established), this.removeInternalSocketHandlers(), this.emit("established", { remoteHost: r, socket: this.socket }));
        }
      }
      handleSocks5IncomingConnectionResponse() {
        let e = this.receiveBuffer.peek(5);
        if (e[0] !== 5 || e[1] !== S.Socks5Response.Granted)
          this.closeSocket(`${S.ERRORS.Socks5ProxyRejectedIncomingBoundConnection} - ${S.Socks5Response[e[1]]}`);
        else {
          let i = e[3], r, n;
          if (i === S.Socks5HostType.IPv4) {
            let s = S.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv4;
            if (this.receiveBuffer.length < s) {
              this.nextRequiredPacketBufferSize = s;
              return;
            }
            n = Ve.SmartBuffer.fromBuffer(this.receiveBuffer.get(s).slice(4)), r = { host: ze.fromLong(n.readUInt32BE()), port: n.readUInt16BE() }, r.host === "0.0.0.0" && (r.host = this.options.proxy.ipaddress);
          } else if (i === S.Socks5HostType.Hostname) {
            let s = e[4], o = S.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHostname(s);
            if (this.receiveBuffer.length < o) {
              this.nextRequiredPacketBufferSize = o;
              return;
            }
            n = Ve.SmartBuffer.fromBuffer(this.receiveBuffer.get(o).slice(5)), r = { host: n.readString(s), port: n.readUInt16BE() };
          } else if (i === S.Socks5HostType.IPv6) {
            let s = S.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv6;
            if (this.receiveBuffer.length < s) {
              this.nextRequiredPacketBufferSize = s;
              return;
            }
            n = Ve.SmartBuffer.fromBuffer(this.receiveBuffer.get(s).slice(4)), r = { host: ze.toString(n.readBuffer(16)), port: n.readUInt16BE() };
          }
          this.setState(S.SocksClientState.Established), this.removeInternalSocketHandlers(), this.emit("established", { remoteHost: r, socket: this.socket });
        }
      }
      get socksClientOptions() {
        return Object.assign({}, this.options);
      }
    };
    dt.SocksClient = Mn;
  });
  var ic = y((Ot) => {
    var $d = Ot && Ot.__createBinding || (Object.create ? function(t, e, i, r) {
      r === undefined && (r = i);
      var n = Object.getOwnPropertyDescriptor(e, i);
      (!n || ("get" in n ? !e.__esModule : n.writable || n.configurable)) && (n = { enumerable: true, get: function() {
        return e[i];
      } }), Object.defineProperty(t, r, n);
    } : function(t, e, i, r) {
      r === undefined && (r = i), t[r] = e[i];
    }), Gd = Ot && Ot.__exportStar || function(t, e) {
      for (var i in t)
        i !== "default" && !Object.prototype.hasOwnProperty.call(e, i) && $d(e, t, i);
    };
    Object.defineProperty(Ot, "__esModule", { value: true });
    Gd(tc(), Ot);
  });
  var rc = y((It) => {
    var zd = It && It.__awaiter || function(t, e, i, r) {
      function n(s) {
        return s instanceof i ? s : new i(function(o) {
          o(s);
        });
      }
      return new (i || (i = Promise))(function(s, o) {
        function l(u) {
          try {
            c(r.next(u));
          } catch (f) {
            o(f);
          }
        }
        function a(u) {
          try {
            c(r.throw(u));
          } catch (f) {
            o(f);
          }
        }
        function c(u) {
          u.done ? s(u.value) : n(u.value).then(l, a);
        }
        c((r = r.apply(t, e || [])).next());
      });
    }, tr = It && It.__importDefault || function(t) {
      return t && t.__esModule ? t : { default: t };
    };
    Object.defineProperty(It, "__esModule", { value: true });
    var Wd = tr(import.meta.require("dns")), Yd = tr(import.meta.require("tls")), Kd = tr(import.meta.require("url")), Zd = tr(Ht()), Xd = Ir(), Jd = ic(), Un = Zd.default("socks-proxy-agent");
    function Qd(t) {
      return new Promise((e, i) => {
        Wd.default.lookup(t, (r, n) => {
          r ? i(r) : e(n);
        });
      });
    }
    function em(t) {
      let e = 0, i = false, r = 5, n = t.hostname || t.host;
      if (!n)
        throw new TypeError('No "host"');
      if (typeof t.port == "number" ? e = t.port : typeof t.port == "string" && (e = parseInt(t.port, 10)), e || (e = 1080), t.protocol)
        switch (t.protocol.replace(":", "")) {
          case "socks4":
            i = true;
          case "socks4a":
            r = 4;
            break;
          case "socks5":
            i = true;
          case "socks":
          case "socks5h":
            r = 5;
            break;
          default:
            throw new TypeError(`A "socks" protocol must be specified! Got: ${t.protocol}`);
        }
      if (typeof t.type != "undefined")
        if (t.type === 4 || t.type === 5)
          r = t.type;
        else
          throw new TypeError(`"type" must be 4 or 5, got: ${t.type}`);
      let s = { host: n, port: e, type: r }, o = t.userId || t.username, l = t.password;
      if (t.auth) {
        let a = t.auth.split(":");
        o = a[0], l = a[1];
      }
      return o && Object.defineProperty(s, "userId", { value: o, enumerable: false }), l && Object.defineProperty(s, "password", { value: l, enumerable: false }), { lookup: i, proxy: s };
    }
    var Dn = class extends Xd.Agent {
      constructor(e) {
        let i;
        if (typeof e == "string" ? i = Kd.default.parse(e) : i = e, !i)
          throw new TypeError("a SOCKS proxy server `host` and `port` must be specified!");
        super(i);
        let r = em(i);
        this.lookup = r.lookup, this.proxy = r.proxy, this.tlsConnectionOptions = i.tls || {};
      }
      callback(e, i) {
        return zd(this, undefined, undefined, function* () {
          let { lookup: r, proxy: n } = this, { host: s, port: o, timeout: l } = i;
          if (!s)
            throw new Error("No `host` defined!");
          r && (s = yield Qd(s));
          let a = { proxy: n, destination: { host: s, port: o }, command: "connect", timeout: l };
          Un("Creating socks proxy connection: %o", a);
          let { socket: c } = yield Jd.SocksClient.createConnection(a);
          if (Un("Successfully created socks proxy connection"), i.secureEndpoint) {
            Un("Upgrading socket connection to TLS");
            let u = i.servername || i.host;
            return Yd.default.connect(Object.assign(Object.assign(Object.assign({}, tm(i, "host", "hostname", "path", "port")), { socket: c, servername: u }), this.tlsConnectionOptions));
          }
          return c;
        });
      }
    };
    It.default = Dn;
    function tm(t, ...e) {
      let i = {}, r;
      for (r in t)
        e.includes(r) || (i[r] = t[r]);
      return i;
    }
  });
  var sc = y((Hn, nc) => {
    var im = Hn && Hn.__importDefault || function(t) {
      return t && t.__esModule ? t : { default: t };
    }, jn = im(rc());
    function qn(t) {
      return new jn.default(t);
    }
    (function(t) {
      t.SocksProxyAgent = jn.default, t.prototype = jn.default.prototype;
    })(qn || (qn = {}));
    nc.exports = qn;
  });
  var ac = y((vv, oc) => {
    var rm = /[|\\{}()[\]^$+*?.-]/g;
    oc.exports = (t) => {
      if (typeof t != "string")
        throw new TypeError("Expected a string");
      return t.replace(rm, "\\$&");
    };
  });
  var fc = y((xv, uc) => {
    var nm = ac(), sm = typeof process == "object" && process && typeof process.cwd == "function" ? process.cwd() : ".", cc = [].concat(import.meta.require("module").builtinModules, "bootstrap_node", "node").map((t) => new RegExp(`(?:\\((?:node:)?${t}(?:\\.js)?:\\d+:\\d+\\)\$|^\\s*at (?:node:)?${t}(?:\\.js)?:\\d+:\\d+\$)`));
    cc.push(/\((?:node:)?internal\/[^:]+:\d+:\d+\)$/, /\s*at (?:node:)?internal\/[^:]+:\d+:\d+$/, /\/\.node-spawn-wrap-\w+-\w+\/node:\d+:\d+\)?$/);
    var Vn = class t {
      constructor(e) {
        e = { ignoredPackages: [], ...e }, "internals" in e || (e.internals = t.nodeInternals()), "cwd" in e || (e.cwd = sm), this._cwd = e.cwd.replace(/\\/g, "/"), this._internals = [].concat(e.internals, om(e.ignoredPackages)), this._wrapCallSite = e.wrapCallSite || false;
      }
      static nodeInternals() {
        return [...cc];
      }
      clean(e, i = 0) {
        i = " ".repeat(i), Array.isArray(e) || (e = e.split(`
`)), !/^\s*at /.test(e[0]) && /^\s*at /.test(e[1]) && (e = e.slice(1));
        let r = false, n = null, s = [];
        return e.forEach((o) => {
          if (o = o.replace(/\\/g, "/"), this._internals.some((a) => a.test(o)))
            return;
          let l = /^\s*at /.test(o);
          r ? o = o.trimEnd().replace(/^(\s+)at /, "$1") : (o = o.trim(), l && (o = o.slice(3))), o = o.replace(`${this._cwd}/`, ""), o && (l ? (n && (s.push(n), n = null), s.push(o)) : (r = true, n = o));
        }), s.map((o) => `${i}${o}
`).join("");
      }
      captureString(e, i = this.captureString) {
        typeof e == "function" && (i = e, e = 1 / 0);
        let { stackTraceLimit: r } = Error;
        e && (Error.stackTraceLimit = e);
        let n = {};
        Error.captureStackTrace(n, i);
        let { stack: s } = n;
        return Error.stackTraceLimit = r, this.clean(s);
      }
      capture(e, i = this.capture) {
        typeof e == "function" && (i = e, e = 1 / 0);
        let { prepareStackTrace: r, stackTraceLimit: n } = Error;
        Error.prepareStackTrace = (l, a) => this._wrapCallSite ? a.map(this._wrapCallSite) : a, e && (Error.stackTraceLimit = e);
        let s = {};
        Error.captureStackTrace(s, i);
        let { stack: o } = s;
        return Object.assign(Error, { prepareStackTrace: r, stackTraceLimit: n }), o;
      }
      at(e = this.at) {
        let [i] = this.capture(1, e);
        if (!i)
          return {};
        let r = { line: i.getLineNumber(), column: i.getColumnNumber() };
        lc(r, i.getFileName(), this._cwd), i.isConstructor() && (r.constructor = true), i.isEval() && (r.evalOrigin = i.getEvalOrigin()), i.isNative() && (r.native = true);
        let n;
        try {
          n = i.getTypeName();
        } catch {
        }
        n && n !== "Object" && n !== "[object Object]" && (r.type = n);
        let s = i.getFunctionName();
        s && (r.function = s);
        let o = i.getMethodName();
        return o && s !== o && (r.method = o), r;
      }
      parseLine(e) {
        let i = e && e.match(am);
        if (!i)
          return null;
        let r = i[1] === "new", n = i[2], s = i[3], o = i[4], l = Number(i[5]), a = Number(i[6]), c = i[7], u = i[8], f = i[9], h = i[10] === "native", p = i[11] === ")", d, m = {};
        if (u && (m.line = Number(u)), f && (m.column = Number(f)), p && c) {
          let v = 0;
          for (let E = c.length - 1;E > 0; E--)
            if (c.charAt(E) === ")")
              v++;
            else if (c.charAt(E) === "(" && c.charAt(E - 1) === " " && (v--, v === -1 && c.charAt(E - 1) === " ")) {
              let I = c.slice(0, E - 1);
              c = c.slice(E + 1), n += ` (${I}`;
              break;
            }
        }
        if (n) {
          let v = n.match(lm);
          v && (n = v[1], d = v[2]);
        }
        return lc(m, c, this._cwd), r && (m.constructor = true), s && (m.evalOrigin = s, m.evalLine = l, m.evalColumn = a, m.evalFile = o && o.replace(/\\/g, "/")), h && (m.native = true), n && (m.function = n), d && n !== d && (m.method = d), m;
      }
    };
    function lc(t, e, i) {
      e && (e = e.replace(/\\/g, "/"), e.startsWith(`${i}/`) && (e = e.slice(i.length + 1)), t.file = e);
    }
    function om(t) {
      if (t.length === 0)
        return [];
      let e = t.map((i) => nm(i));
      return new RegExp(`[/\\\\]node_modules[/\\\\](?:${e.join("|")})[/\\\\][^:]+:\\d+:\\d+`);
    }
    var am = new RegExp("^(?:\\s*at )?(?:(new) )?(?:(.*?) \\()?(?:eval at ([^ ]+) \\((.+?):(\\d+):(\\d+)\\), )?(?:(.+?):(\\d+):(\\d+)|(native))(\\)?)$"), lm = /^(.*?) \[as (.*?)\]$/;
    uc.exports = Vn;
  });
  var mc = y((_v, dc) => {
    var { Duplex: cm } = import.meta.require("stream");
    function hc(t) {
      t.emit("close");
    }
    function um() {
      !this.destroyed && this._writableState.finished && this.destroy();
    }
    function pc(t) {
      this.removeListener("error", pc), this.destroy(), this.listenerCount("error") === 0 && this.emit("error", t);
    }
    function fm(t, e) {
      let i = true, r = new cm({ ...e, autoDestroy: false, emitClose: false, objectMode: false, writableObjectMode: false });
      return t.on("message", function(s, o) {
        let l = !o && r._readableState.objectMode ? s.toString() : s;
        r.push(l) || t.pause();
      }), t.once("error", function(s) {
        r.destroyed || (i = false, r.destroy(s));
      }), t.once("close", function() {
        r.destroyed || r.push(null);
      }), r._destroy = function(n, s) {
        if (t.readyState === t.CLOSED) {
          s(n), process.nextTick(hc, r);
          return;
        }
        let o = false;
        t.once("error", function(a) {
          o = true, s(a);
        }), t.once("close", function() {
          o || s(n), process.nextTick(hc, r);
        }), i && t.terminate();
      }, r._final = function(n) {
        if (t.readyState === t.CONNECTING) {
          t.once("open", function() {
            r._final(n);
          });
          return;
        }
        t._socket !== null && (t._socket._writableState.finished ? (n(), r._readableState.endEmitted && r.destroy()) : (t._socket.once("finish", function() {
          n();
        }), t.close()));
      }, r._read = function() {
        t.isPaused && t.resume();
      }, r._write = function(n, s, o) {
        if (t.readyState === t.CONNECTING) {
          t.once("open", function() {
            r._write(n, s, o);
          });
          return;
        }
        t.send(n, o);
      }, r.on("end", um), r.on("error", pc), r;
    }
    dc.exports = fm;
  });
  var mt = y((yv, gc) => {
    gc.exports = { BINARY_TYPES: ["nodebuffer", "arraybuffer", "fragments"], EMPTY_BUFFER: Buffer.alloc(0), GUID: "258EAFA5-E914-47DA-95CA-C5AB0DC85B11", kForOnEventAttribute: Symbol("kIsForOnEventAttribute"), kListener: Symbol("kListener"), kStatusCode: Symbol("status-code"), kWebSocket: Symbol("websocket"), NOOP: () => {
    } };
  });
  var Si = y((bv, $n) => {
    var { EMPTY_BUFFER: hm } = mt();
    function vc(t, e) {
      if (t.length === 0)
        return hm;
      if (t.length === 1)
        return t[0];
      let i = Buffer.allocUnsafe(e), r = 0;
      for (let n = 0;n < t.length; n++) {
        let s = t[n];
        i.set(s, r), r += s.length;
      }
      return r < e ? i.slice(0, r) : i;
    }
    function xc(t, e, i, r, n) {
      for (let s = 0;s < n; s++)
        i[r + s] = t[s] ^ e[s & 3];
    }
    function _c(t, e) {
      for (let i = 0;i < t.length; i++)
        t[i] ^= e[i & 3];
    }
    function yc(t) {
      return t.byteLength === t.buffer.byteLength ? t.buffer : t.buffer.slice(t.byteOffset, t.byteOffset + t.byteLength);
    }
    function ir(t) {
      if (ir.readOnly = true, Buffer.isBuffer(t))
        return t;
      let e;
      return t instanceof ArrayBuffer ? e = Buffer.from(t) : ArrayBuffer.isView(t) ? e = Buffer.from(t.buffer, t.byteOffset, t.byteLength) : (e = Buffer.from(t), ir.readOnly = false), e;
    }
    try {
      let t = (()=>{throw new Error(`Cannot require module "bufferutil"`);})();
      $n.exports = { concat: vc, mask(e, i, r, n, s) {
        s < 48 ? xc(e, i, r, n, s) : t.mask(e, i, r, n, s);
      }, toArrayBuffer: yc, toBuffer: ir, unmask(e, i) {
        e.length < 32 ? _c(e, i) : t.unmask(e, i);
      } };
    } catch {
      $n.exports = { concat: vc, mask: xc, toArrayBuffer: yc, toBuffer: ir, unmask: _c };
    }
  });
  var Ec = y((wv, wc) => {
    var bc = Symbol("kDone"), Gn = Symbol("kRun"), zn = class {
      constructor(e) {
        this[bc] = () => {
          this.pending--, this[Gn]();
        }, this.concurrency = e || 1 / 0, this.jobs = [], this.pending = 0;
      }
      add(e) {
        this.jobs.push(e), this[Gn]();
      }
      [Gn]() {
        if (this.pending !== this.concurrency && this.jobs.length) {
          let e = this.jobs.shift();
          this.pending++, e(this[bc]);
        }
      }
    };
    wc.exports = zn;
  });
  var Oi = y((Ev, Oc) => {
    var ki = import.meta.require("zlib"), Sc = Si(), pm = Ec(), { kStatusCode: kc } = mt(), dm = Buffer.from([0, 0, 255, 255]), sr = Symbol("permessage-deflate"), lt = Symbol("total-length"), Ci = Symbol("callback"), gt = Symbol("buffers"), nr = Symbol("error"), rr, Wn = class {
      constructor(e, i, r) {
        if (this._maxPayload = r | 0, this._options = e || {}, this._threshold = this._options.threshold !== undefined ? this._options.threshold : 1024, this._isServer = !!i, this._deflate = null, this._inflate = null, this.params = null, !rr) {
          let n = this._options.concurrencyLimit !== undefined ? this._options.concurrencyLimit : 10;
          rr = new pm(n);
        }
      }
      static get extensionName() {
        return "permessage-deflate";
      }
      offer() {
        let e = {};
        return this._options.serverNoContextTakeover && (e.server_no_context_takeover = true), this._options.clientNoContextTakeover && (e.client_no_context_takeover = true), this._options.serverMaxWindowBits && (e.server_max_window_bits = this._options.serverMaxWindowBits), this._options.clientMaxWindowBits ? e.client_max_window_bits = this._options.clientMaxWindowBits : this._options.clientMaxWindowBits == null && (e.client_max_window_bits = true), e;
      }
      accept(e) {
        return e = this.normalizeParams(e), this.params = this._isServer ? this.acceptAsServer(e) : this.acceptAsClient(e), this.params;
      }
      cleanup() {
        if (this._inflate && (this._inflate.close(), this._inflate = null), this._deflate) {
          let e = this._deflate[Ci];
          this._deflate.close(), this._deflate = null, e && e(new Error("The deflate stream was closed while data was being processed"));
        }
      }
      acceptAsServer(e) {
        let i = this._options, r = e.find((n) => !(i.serverNoContextTakeover === false && n.server_no_context_takeover || n.server_max_window_bits && (i.serverMaxWindowBits === false || typeof i.serverMaxWindowBits == "number" && i.serverMaxWindowBits > n.server_max_window_bits) || typeof i.clientMaxWindowBits == "number" && !n.client_max_window_bits));
        if (!r)
          throw new Error("None of the extension offers can be accepted");
        return i.serverNoContextTakeover && (r.server_no_context_takeover = true), i.clientNoContextTakeover && (r.client_no_context_takeover = true), typeof i.serverMaxWindowBits == "number" && (r.server_max_window_bits = i.serverMaxWindowBits), typeof i.clientMaxWindowBits == "number" ? r.client_max_window_bits = i.clientMaxWindowBits : (r.client_max_window_bits === true || i.clientMaxWindowBits === false) && delete r.client_max_window_bits, r;
      }
      acceptAsClient(e) {
        let i = e[0];
        if (this._options.clientNoContextTakeover === false && i.client_no_context_takeover)
          throw new Error('Unexpected parameter "client_no_context_takeover"');
        if (!i.client_max_window_bits)
          typeof this._options.clientMaxWindowBits == "number" && (i.client_max_window_bits = this._options.clientMaxWindowBits);
        else if (this._options.clientMaxWindowBits === false || typeof this._options.clientMaxWindowBits == "number" && i.client_max_window_bits > this._options.clientMaxWindowBits)
          throw new Error('Unexpected or invalid parameter "client_max_window_bits"');
        return i;
      }
      normalizeParams(e) {
        return e.forEach((i) => {
          Object.keys(i).forEach((r) => {
            let n = i[r];
            if (n.length > 1)
              throw new Error(`Parameter "${r}" must have only a single value`);
            if (n = n[0], r === "client_max_window_bits") {
              if (n !== true) {
                let s = +n;
                if (!Number.isInteger(s) || s < 8 || s > 15)
                  throw new TypeError(`Invalid value for parameter "${r}": ${n}`);
                n = s;
              } else if (!this._isServer)
                throw new TypeError(`Invalid value for parameter "${r}": ${n}`);
            } else if (r === "server_max_window_bits") {
              let s = +n;
              if (!Number.isInteger(s) || s < 8 || s > 15)
                throw new TypeError(`Invalid value for parameter "${r}": ${n}`);
              n = s;
            } else if (r === "client_no_context_takeover" || r === "server_no_context_takeover") {
              if (n !== true)
                throw new TypeError(`Invalid value for parameter "${r}": ${n}`);
            } else
              throw new Error(`Unknown parameter "${r}"`);
            i[r] = n;
          });
        }), e;
      }
      decompress(e, i, r) {
        rr.add((n) => {
          this._decompress(e, i, (s, o) => {
            n(), r(s, o);
          });
        });
      }
      compress(e, i, r) {
        rr.add((n) => {
          this._compress(e, i, (s, o) => {
            n(), r(s, o);
          });
        });
      }
      _decompress(e, i, r) {
        let n = this._isServer ? "client" : "server";
        if (!this._inflate) {
          let s = `${n}_max_window_bits`, o = typeof this.params[s] != "number" ? ki.Z_DEFAULT_WINDOWBITS : this.params[s];
          this._inflate = ki.createInflateRaw({ ...this._options.zlibInflateOptions, windowBits: o }), this._inflate[sr] = this, this._inflate[lt] = 0, this._inflate[gt] = [], this._inflate.on("error", gm), this._inflate.on("data", Cc);
        }
        this._inflate[Ci] = r, this._inflate.write(e), i && this._inflate.write(dm), this._inflate.flush(() => {
          let s = this._inflate[nr];
          if (s) {
            this._inflate.close(), this._inflate = null, r(s);
            return;
          }
          let o = Sc.concat(this._inflate[gt], this._inflate[lt]);
          this._inflate._readableState.endEmitted ? (this._inflate.close(), this._inflate = null) : (this._inflate[lt] = 0, this._inflate[gt] = [], i && this.params[`${n}_no_context_takeover`] && this._inflate.reset()), r(null, o);
        });
      }
      _compress(e, i, r) {
        let n = this._isServer ? "server" : "client";
        if (!this._deflate) {
          let s = `${n}_max_window_bits`, o = typeof this.params[s] != "number" ? ki.Z_DEFAULT_WINDOWBITS : this.params[s];
          this._deflate = ki.createDeflateRaw({ ...this._options.zlibDeflateOptions, windowBits: o }), this._deflate[lt] = 0, this._deflate[gt] = [], this._deflate.on("data", mm);
        }
        this._deflate[Ci] = r, this._deflate.write(e), this._deflate.flush(ki.Z_SYNC_FLUSH, () => {
          if (!this._deflate)
            return;
          let s = Sc.concat(this._deflate[gt], this._deflate[lt]);
          i && (s = s.slice(0, s.length - 4)), this._deflate[Ci] = null, this._deflate[lt] = 0, this._deflate[gt] = [], i && this.params[`${n}_no_context_takeover`] && this._deflate.reset(), r(null, s);
        });
      }
    };
    Oc.exports = Wn;
    function mm(t) {
      this[gt].push(t), this[lt] += t.length;
    }
    function Cc(t) {
      if (this[lt] += t.length, this[sr]._maxPayload < 1 || this[lt] <= this[sr]._maxPayload) {
        this[gt].push(t);
        return;
      }
      this[nr] = new RangeError("Max payload size exceeded"), this[nr].code = "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH", this[nr][kc] = 1009, this.removeListener("data", Cc), this.reset();
    }
    function gm(t) {
      this[sr]._inflate = null, t[kc] = 1007, this[Ci](t);
    }
  });
  var Ii = y((Sv, Yn) => {
    var Ic = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0];
    function Tc(t) {
      return t >= 1000 && t <= 1014 && t !== 1004 && t !== 1005 && t !== 1006 || t >= 3000 && t <= 4999;
    }
    function Ac(t) {
      let e = t.length, i = 0;
      for (;i < e; )
        if (!(t[i] & 128))
          i++;
        else if ((t[i] & 224) === 192) {
          if (i + 1 === e || (t[i + 1] & 192) !== 128 || (t[i] & 254) === 192)
            return false;
          i += 2;
        } else if ((t[i] & 240) === 224) {
          if (i + 2 >= e || (t[i + 1] & 192) !== 128 || (t[i + 2] & 192) !== 128 || t[i] === 224 && (t[i + 1] & 224) === 128 || t[i] === 237 && (t[i + 1] & 224) === 160)
            return false;
          i += 3;
        } else if ((t[i] & 248) === 240) {
          if (i + 3 >= e || (t[i + 1] & 192) !== 128 || (t[i + 2] & 192) !== 128 || (t[i + 3] & 192) !== 128 || t[i] === 240 && (t[i + 1] & 240) === 128 || t[i] === 244 && t[i + 1] > 143 || t[i] > 244)
            return false;
          i += 4;
        } else
          return false;
      return true;
    }
    try {
      let t = import.meta.require("utf-8-validate");
      Yn.exports = { isValidStatusCode: Tc, isValidUTF8(e) {
        return e.length < 150 ? Ac(e) : t(e);
      }, tokenChars: Ic };
    } catch {
      Yn.exports = { isValidStatusCode: Tc, isValidUTF8: Ac, tokenChars: Ic };
    }
  });
  var Jn = y((kv, Mc) => {
    var { Writable: vm } = import.meta.require("stream"), Rc = Oi(), { BINARY_TYPES: xm, EMPTY_BUFFER: Bc, kStatusCode: _m, kWebSocket: ym } = mt(), { concat: Kn, toArrayBuffer: bm, unmask: wm } = Si(), { isValidStatusCode: Em, isValidUTF8: Lc } = Ii(), Ti = 0, Pc = 1, Fc = 2, Nc = 3, Zn = 4, Sm = 5, Xn = class extends vm {
      constructor(e = {}) {
        super(), this._binaryType = e.binaryType || xm[0], this._extensions = e.extensions || {}, this._isServer = !!e.isServer, this._maxPayload = e.maxPayload | 0, this._skipUTF8Validation = !!e.skipUTF8Validation, this[ym] = undefined, this._bufferedBytes = 0, this._buffers = [], this._compressed = false, this._payloadLength = 0, this._mask = undefined, this._fragmented = 0, this._masked = false, this._fin = false, this._opcode = 0, this._totalPayloadLength = 0, this._messageLength = 0, this._fragments = [], this._state = Ti, this._loop = false;
      }
      _write(e, i, r) {
        if (this._opcode === 8 && this._state == Ti)
          return r();
        this._bufferedBytes += e.length, this._buffers.push(e), this.startLoop(r);
      }
      consume(e) {
        if (this._bufferedBytes -= e, e === this._buffers[0].length)
          return this._buffers.shift();
        if (e < this._buffers[0].length) {
          let r = this._buffers[0];
          return this._buffers[0] = r.slice(e), r.slice(0, e);
        }
        let i = Buffer.allocUnsafe(e);
        do {
          let r = this._buffers[0], n = i.length - e;
          e >= r.length ? i.set(this._buffers.shift(), n) : (i.set(new Uint8Array(r.buffer, r.byteOffset, e), n), this._buffers[0] = r.slice(e)), e -= r.length;
        } while (e > 0);
        return i;
      }
      startLoop(e) {
        let i;
        this._loop = true;
        do
          switch (this._state) {
            case Ti:
              i = this.getInfo();
              break;
            case Pc:
              i = this.getPayloadLength16();
              break;
            case Fc:
              i = this.getPayloadLength64();
              break;
            case Nc:
              this.getMask();
              break;
            case Zn:
              i = this.getData(e);
              break;
            default:
              this._loop = false;
              return;
          }
        while (this._loop);
        e(i);
      }
      getInfo() {
        if (this._bufferedBytes < 2) {
          this._loop = false;
          return;
        }
        let e = this.consume(2);
        if (e[0] & 48)
          return this._loop = false, Ie(RangeError, "RSV2 and RSV3 must be clear", true, 1002, "WS_ERR_UNEXPECTED_RSV_2_3");
        let i = (e[0] & 64) === 64;
        if (i && !this._extensions[Rc.extensionName])
          return this._loop = false, Ie(RangeError, "RSV1 must be clear", true, 1002, "WS_ERR_UNEXPECTED_RSV_1");
        if (this._fin = (e[0] & 128) === 128, this._opcode = e[0] & 15, this._payloadLength = e[1] & 127, this._opcode === 0) {
          if (i)
            return this._loop = false, Ie(RangeError, "RSV1 must be clear", true, 1002, "WS_ERR_UNEXPECTED_RSV_1");
          if (!this._fragmented)
            return this._loop = false, Ie(RangeError, "invalid opcode 0", true, 1002, "WS_ERR_INVALID_OPCODE");
          this._opcode = this._fragmented;
        } else if (this._opcode === 1 || this._opcode === 2) {
          if (this._fragmented)
            return this._loop = false, Ie(RangeError, `invalid opcode ${this._opcode}`, true, 1002, "WS_ERR_INVALID_OPCODE");
          this._compressed = i;
        } else if (this._opcode > 7 && this._opcode < 11) {
          if (!this._fin)
            return this._loop = false, Ie(RangeError, "FIN must be set", true, 1002, "WS_ERR_EXPECTED_FIN");
          if (i)
            return this._loop = false, Ie(RangeError, "RSV1 must be clear", true, 1002, "WS_ERR_UNEXPECTED_RSV_1");
          if (this._payloadLength > 125)
            return this._loop = false, Ie(RangeError, `invalid payload length ${this._payloadLength}`, true, 1002, "WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH");
        } else
          return this._loop = false, Ie(RangeError, `invalid opcode ${this._opcode}`, true, 1002, "WS_ERR_INVALID_OPCODE");
        if (!this._fin && !this._fragmented && (this._fragmented = this._opcode), this._masked = (e[1] & 128) === 128, this._isServer) {
          if (!this._masked)
            return this._loop = false, Ie(RangeError, "MASK must be set", true, 1002, "WS_ERR_EXPECTED_MASK");
        } else if (this._masked)
          return this._loop = false, Ie(RangeError, "MASK must be clear", true, 1002, "WS_ERR_UNEXPECTED_MASK");
        if (this._payloadLength === 126)
          this._state = Pc;
        else if (this._payloadLength === 127)
          this._state = Fc;
        else
          return this.haveLength();
      }
      getPayloadLength16() {
        if (this._bufferedBytes < 2) {
          this._loop = false;
          return;
        }
        return this._payloadLength = this.consume(2).readUInt16BE(0), this.haveLength();
      }
      getPayloadLength64() {
        if (this._bufferedBytes < 8) {
          this._loop = false;
          return;
        }
        let e = this.consume(8), i = e.readUInt32BE(0);
        return i > Math.pow(2, 53 - 32) - 1 ? (this._loop = false, Ie(RangeError, "Unsupported WebSocket frame: payload length > 2^53 - 1", false, 1009, "WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH")) : (this._payloadLength = i * Math.pow(2, 32) + e.readUInt32BE(4), this.haveLength());
      }
      haveLength() {
        if (this._payloadLength && this._opcode < 8 && (this._totalPayloadLength += this._payloadLength, this._totalPayloadLength > this._maxPayload && this._maxPayload > 0))
          return this._loop = false, Ie(RangeError, "Max payload size exceeded", false, 1009, "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH");
        this._masked ? this._state = Nc : this._state = Zn;
      }
      getMask() {
        if (this._bufferedBytes < 4) {
          this._loop = false;
          return;
        }
        this._mask = this.consume(4), this._state = Zn;
      }
      getData(e) {
        let i = Bc;
        if (this._payloadLength) {
          if (this._bufferedBytes < this._payloadLength) {
            this._loop = false;
            return;
          }
          i = this.consume(this._payloadLength), this._masked && this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3] && wm(i, this._mask);
        }
        if (this._opcode > 7)
          return this.controlMessage(i);
        if (this._compressed) {
          this._state = Sm, this.decompress(i, e);
          return;
        }
        return i.length && (this._messageLength = this._totalPayloadLength, this._fragments.push(i)), this.dataMessage();
      }
      decompress(e, i) {
        this._extensions[Rc.extensionName].decompress(e, this._fin, (n, s) => {
          if (n)
            return i(n);
          if (s.length) {
            if (this._messageLength += s.length, this._messageLength > this._maxPayload && this._maxPayload > 0)
              return i(Ie(RangeError, "Max payload size exceeded", false, 1009, "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH"));
            this._fragments.push(s);
          }
          let o = this.dataMessage();
          if (o)
            return i(o);
          this.startLoop(i);
        });
      }
      dataMessage() {
        if (this._fin) {
          let e = this._messageLength, i = this._fragments;
          if (this._totalPayloadLength = 0, this._messageLength = 0, this._fragmented = 0, this._fragments = [], this._opcode === 2) {
            let r;
            this._binaryType === "nodebuffer" ? r = Kn(i, e) : this._binaryType === "arraybuffer" ? r = bm(Kn(i, e)) : r = i, this.emit("message", r, true);
          } else {
            let r = Kn(i, e);
            if (!this._skipUTF8Validation && !Lc(r))
              return this._loop = false, Ie(Error, "invalid UTF-8 sequence", true, 1007, "WS_ERR_INVALID_UTF8");
            this.emit("message", r, false);
          }
        }
        this._state = Ti;
      }
      controlMessage(e) {
        if (this._opcode === 8)
          if (this._loop = false, e.length === 0)
            this.emit("conclude", 1005, Bc), this.end();
          else {
            if (e.length === 1)
              return Ie(RangeError, "invalid payload length 1", true, 1002, "WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH");
            {
              let i = e.readUInt16BE(0);
              if (!Em(i))
                return Ie(RangeError, `invalid status code ${i}`, true, 1002, "WS_ERR_INVALID_CLOSE_CODE");
              let r = e.slice(2);
              if (!this._skipUTF8Validation && !Lc(r))
                return Ie(Error, "invalid UTF-8 sequence", true, 1007, "WS_ERR_INVALID_UTF8");
              this.emit("conclude", i, r), this.end();
            }
          }
        else
          this._opcode === 9 ? this.emit("ping", e) : this.emit("pong", e);
        this._state = Ti;
      }
    };
    Mc.exports = Xn;
    function Ie(t, e, i, r, n) {
      let s = new t(i ? `Invalid WebSocket frame: ${e}` : e);
      return Error.captureStackTrace(s, Ie), s.code = n, s[_m] = r, s;
    }
  });
  var es = y((Iv, jc) => {
    var Cv = import.meta.require("net"), Ov = import.meta.require("tls"), { randomFillSync: km } = import.meta.require("crypto"), Uc = Oi(), { EMPTY_BUFFER: Cm } = mt(), { isValidStatusCode: Om } = Ii(), { mask: Dc, toBuffer: ti } = Si(), rt = Symbol("kByteLength"), Im = Buffer.alloc(4), Qn = class t {
      constructor(e, i, r) {
        this._extensions = i || {}, r && (this._generateMask = r, this._maskBuffer = Buffer.alloc(4)), this._socket = e, this._firstFragment = true, this._compress = false, this._bufferedBytes = 0, this._deflating = false, this._queue = [];
      }
      static frame(e, i) {
        let r, n = false, s = 2, o = false;
        i.mask && (r = i.maskBuffer || Im, i.generateMask ? i.generateMask(r) : km(r, 0, 4), o = (r[0] | r[1] | r[2] | r[3]) === 0, s = 6);
        let l;
        typeof e == "string" ? (!i.mask || o) && i[rt] !== undefined ? l = i[rt] : (e = Buffer.from(e), l = e.length) : (l = e.length, n = i.mask && i.readOnly && !o);
        let a = l;
        l >= 65536 ? (s += 8, a = 127) : l > 125 && (s += 2, a = 126);
        let c = Buffer.allocUnsafe(n ? l + s : s);
        return c[0] = i.fin ? i.opcode | 128 : i.opcode, i.rsv1 && (c[0] |= 64), c[1] = a, a === 126 ? c.writeUInt16BE(l, 2) : a === 127 && (c[2] = c[3] = 0, c.writeUIntBE(l, 4, 6)), i.mask ? (c[1] |= 128, c[s - 4] = r[0], c[s - 3] = r[1], c[s - 2] = r[2], c[s - 1] = r[3], o ? [c, e] : n ? (Dc(e, r, c, s, l), [c]) : (Dc(e, r, e, 0, l), [c, e])) : [c, e];
      }
      close(e, i, r, n) {
        let s;
        if (e === undefined)
          s = Cm;
        else {
          if (typeof e != "number" || !Om(e))
            throw new TypeError("First argument must be a valid error code number");
          if (i === undefined || !i.length)
            s = Buffer.allocUnsafe(2), s.writeUInt16BE(e, 0);
          else {
            let l = Buffer.byteLength(i);
            if (l > 123)
              throw new RangeError("The message must not be greater than 123 bytes");
            s = Buffer.allocUnsafe(2 + l), s.writeUInt16BE(e, 0), typeof i == "string" ? s.write(i, 2) : s.set(i, 2);
          }
        }
        let o = { [rt]: s.length, fin: true, generateMask: this._generateMask, mask: r, maskBuffer: this._maskBuffer, opcode: 8, readOnly: false, rsv1: false };
        this._deflating ? this.enqueue([this.dispatch, s, false, o, n]) : this.sendFrame(t.frame(s, o), n);
      }
      ping(e, i, r) {
        let n, s;
        if (typeof e == "string" ? (n = Buffer.byteLength(e), s = false) : (e = ti(e), n = e.length, s = ti.readOnly), n > 125)
          throw new RangeError("The data size must not be greater than 125 bytes");
        let o = { [rt]: n, fin: true, generateMask: this._generateMask, mask: i, maskBuffer: this._maskBuffer, opcode: 9, readOnly: s, rsv1: false };
        this._deflating ? this.enqueue([this.dispatch, e, false, o, r]) : this.sendFrame(t.frame(e, o), r);
      }
      pong(e, i, r) {
        let n, s;
        if (typeof e == "string" ? (n = Buffer.byteLength(e), s = false) : (e = ti(e), n = e.length, s = ti.readOnly), n > 125)
          throw new RangeError("The data size must not be greater than 125 bytes");
        let o = { [rt]: n, fin: true, generateMask: this._generateMask, mask: i, maskBuffer: this._maskBuffer, opcode: 10, readOnly: s, rsv1: false };
        this._deflating ? this.enqueue([this.dispatch, e, false, o, r]) : this.sendFrame(t.frame(e, o), r);
      }
      send(e, i, r) {
        let n = this._extensions[Uc.extensionName], s = i.binary ? 2 : 1, o = i.compress, l, a;
        if (typeof e == "string" ? (l = Buffer.byteLength(e), a = false) : (e = ti(e), l = e.length, a = ti.readOnly), this._firstFragment ? (this._firstFragment = false, o && n && n.params[n._isServer ? "server_no_context_takeover" : "client_no_context_takeover"] && (o = l >= n._threshold), this._compress = o) : (o = false, s = 0), i.fin && (this._firstFragment = true), n) {
          let c = { [rt]: l, fin: i.fin, generateMask: this._generateMask, mask: i.mask, maskBuffer: this._maskBuffer, opcode: s, readOnly: a, rsv1: o };
          this._deflating ? this.enqueue([this.dispatch, e, this._compress, c, r]) : this.dispatch(e, this._compress, c, r);
        } else
          this.sendFrame(t.frame(e, { [rt]: l, fin: i.fin, generateMask: this._generateMask, mask: i.mask, maskBuffer: this._maskBuffer, opcode: s, readOnly: a, rsv1: false }), r);
      }
      dispatch(e, i, r, n) {
        if (!i) {
          this.sendFrame(t.frame(e, r), n);
          return;
        }
        let s = this._extensions[Uc.extensionName];
        this._bufferedBytes += r[rt], this._deflating = true, s.compress(e, r.fin, (o, l) => {
          if (this._socket.destroyed) {
            let a = new Error("The socket was closed while data was being compressed");
            typeof n == "function" && n(a);
            for (let c = 0;c < this._queue.length; c++) {
              let u = this._queue[c], f = u[u.length - 1];
              typeof f == "function" && f(a);
            }
            return;
          }
          this._bufferedBytes -= r[rt], this._deflating = false, r.readOnly = false, this.sendFrame(t.frame(l, r), n), this.dequeue();
        });
      }
      dequeue() {
        for (;!this._deflating && this._queue.length; ) {
          let e = this._queue.shift();
          this._bufferedBytes -= e[3][rt], Reflect.apply(e[0], this, e.slice(1));
        }
      }
      enqueue(e) {
        this._bufferedBytes += e[3][rt], this._queue.push(e);
      }
      sendFrame(e, i) {
        e.length === 2 ? (this._socket.cork(), this._socket.write(e[0]), this._socket.write(e[1], i), this._socket.uncork()) : this._socket.write(e[0], i);
      }
    };
    jc.exports = Qn;
  });
  var Zc = y((Tv, Kc) => {
    var { kForOnEventAttribute: ts, kListener: qc } = mt(), Hc = Symbol("kCode"), Vc = Symbol("kData"), $c = Symbol("kError"), Gc = Symbol("kMessage"), zc = Symbol("kReason"), ii = Symbol("kTarget"), Wc = Symbol("kType"), Yc = Symbol("kWasClean"), ct = class {
      constructor(e) {
        this[ii] = null, this[Wc] = e;
      }
      get target() {
        return this[ii];
      }
      get type() {
        return this[Wc];
      }
    };
    Object.defineProperty(ct.prototype, "target", { enumerable: true });
    Object.defineProperty(ct.prototype, "type", { enumerable: true });
    var Tt = class extends ct {
      constructor(e, i = {}) {
        super(e), this[Hc] = i.code === undefined ? 0 : i.code, this[zc] = i.reason === undefined ? "" : i.reason, this[Yc] = i.wasClean === undefined ? false : i.wasClean;
      }
      get code() {
        return this[Hc];
      }
      get reason() {
        return this[zc];
      }
      get wasClean() {
        return this[Yc];
      }
    };
    Object.defineProperty(Tt.prototype, "code", { enumerable: true });
    Object.defineProperty(Tt.prototype, "reason", { enumerable: true });
    Object.defineProperty(Tt.prototype, "wasClean", { enumerable: true });
    var ri = class extends ct {
      constructor(e, i = {}) {
        super(e), this[$c] = i.error === undefined ? null : i.error, this[Gc] = i.message === undefined ? "" : i.message;
      }
      get error() {
        return this[$c];
      }
      get message() {
        return this[Gc];
      }
    };
    Object.defineProperty(ri.prototype, "error", { enumerable: true });
    Object.defineProperty(ri.prototype, "message", { enumerable: true });
    var Ai = class extends ct {
      constructor(e, i = {}) {
        super(e), this[Vc] = i.data === undefined ? null : i.data;
      }
      get data() {
        return this[Vc];
      }
    };
    Object.defineProperty(Ai.prototype, "data", { enumerable: true });
    var Tm = { addEventListener(t, e, i = {}) {
      let r;
      if (t === "message")
        r = function(s, o) {
          let l = new Ai("message", { data: o ? s : s.toString() });
          l[ii] = this, e.call(this, l);
        };
      else if (t === "close")
        r = function(s, o) {
          let l = new Tt("close", { code: s, reason: o.toString(), wasClean: this._closeFrameReceived && this._closeFrameSent });
          l[ii] = this, e.call(this, l);
        };
      else if (t === "error")
        r = function(s) {
          let o = new ri("error", { error: s, message: s.message });
          o[ii] = this, e.call(this, o);
        };
      else if (t === "open")
        r = function() {
          let s = new ct("open");
          s[ii] = this, e.call(this, s);
        };
      else
        return;
      r[ts] = !!i[ts], r[qc] = e, i.once ? this.once(t, r) : this.on(t, r);
    }, removeEventListener(t, e) {
      for (let i of this.listeners(t))
        if (i[qc] === e && !i[ts]) {
          this.removeListener(t, i);
          break;
        }
    } };
    Kc.exports = { CloseEvent: Tt, ErrorEvent: ri, Event: ct, EventTarget: Tm, MessageEvent: Ai };
  });
  var is = y((Av, Xc) => {
    var { tokenChars: Ri } = Ii();
    function ot(t, e, i) {
      t[e] === undefined ? t[e] = [i] : t[e].push(i);
    }
    function Am(t) {
      let e = Object.create(null), i = Object.create(null), r = false, n = false, s = false, o, l, a = -1, c = -1, u = -1, f = 0;
      for (;f < t.length; f++)
        if (c = t.charCodeAt(f), o === undefined)
          if (u === -1 && Ri[c] === 1)
            a === -1 && (a = f);
          else if (f !== 0 && (c === 32 || c === 9))
            u === -1 && a !== -1 && (u = f);
          else if (c === 59 || c === 44) {
            if (a === -1)
              throw new SyntaxError(`Unexpected character at index ${f}`);
            u === -1 && (u = f);
            let p = t.slice(a, u);
            c === 44 ? (ot(e, p, i), i = Object.create(null)) : o = p, a = u = -1;
          } else
            throw new SyntaxError(`Unexpected character at index ${f}`);
        else if (l === undefined)
          if (u === -1 && Ri[c] === 1)
            a === -1 && (a = f);
          else if (c === 32 || c === 9)
            u === -1 && a !== -1 && (u = f);
          else if (c === 59 || c === 44) {
            if (a === -1)
              throw new SyntaxError(`Unexpected character at index ${f}`);
            u === -1 && (u = f), ot(i, t.slice(a, u), true), c === 44 && (ot(e, o, i), i = Object.create(null), o = undefined), a = u = -1;
          } else if (c === 61 && a !== -1 && u === -1)
            l = t.slice(a, f), a = u = -1;
          else
            throw new SyntaxError(`Unexpected character at index ${f}`);
        else if (n) {
          if (Ri[c] !== 1)
            throw new SyntaxError(`Unexpected character at index ${f}`);
          a === -1 ? a = f : r || (r = true), n = false;
        } else if (s)
          if (Ri[c] === 1)
            a === -1 && (a = f);
          else if (c === 34 && a !== -1)
            s = false, u = f;
          else if (c === 92)
            n = true;
          else
            throw new SyntaxError(`Unexpected character at index ${f}`);
        else if (c === 34 && t.charCodeAt(f - 1) === 61)
          s = true;
        else if (u === -1 && Ri[c] === 1)
          a === -1 && (a = f);
        else if (a !== -1 && (c === 32 || c === 9))
          u === -1 && (u = f);
        else if (c === 59 || c === 44) {
          if (a === -1)
            throw new SyntaxError(`Unexpected character at index ${f}`);
          u === -1 && (u = f);
          let p = t.slice(a, u);
          r && (p = p.replace(/\\/g, ""), r = false), ot(i, l, p), c === 44 && (ot(e, o, i), i = Object.create(null), o = undefined), l = undefined, a = u = -1;
        } else
          throw new SyntaxError(`Unexpected character at index ${f}`);
      if (a === -1 || s || c === 32 || c === 9)
        throw new SyntaxError("Unexpected end of input");
      u === -1 && (u = f);
      let h = t.slice(a, u);
      return o === undefined ? ot(e, h, i) : (l === undefined ? ot(i, h, true) : r ? ot(i, l, h.replace(/\\/g, "")) : ot(i, l, h), ot(e, o, i)), e;
    }
    function Rm(t) {
      return Object.keys(t).map((e) => {
        let i = t[e];
        return Array.isArray(i) || (i = [i]), i.map((r) => [e].concat(Object.keys(r).map((n) => {
          let s = r[n];
          return Array.isArray(s) || (s = [s]), s.map((o) => o === true ? n : `${n}=${o}`).join("; ");
        })).join("; ")).join(", ");
      }).join(", ");
    }
    Xc.exports = { format: Rm, parse: Am };
  });
  var ls = y((Bv, au) => {
    var Bm = import.meta.require("events"), Lm = import.meta.require("https"), Pm = import.meta.require("http"), eu = import.meta.require("net"), Fm = import.meta.require("tls"), { randomBytes: Nm, createHash: Mm } = import.meta.require("crypto"), { Readable: Rv } = import.meta.require("stream"), { URL: rs } = import.meta.require("url"), vt = Oi(), Um = Jn(), Dm = es(), { BINARY_TYPES: Jc, EMPTY_BUFFER: or, GUID: jm, kForOnEventAttribute: ns, kListener: qm, kStatusCode: Hm, kWebSocket: De, NOOP: tu } = mt(), { EventTarget: { addEventListener: Vm, removeEventListener: $m } } = Zc(), { format: Gm, parse: zm } = is(), { toBuffer: Wm } = Si(), ut = ["CONNECTING", "OPEN", "CLOSING", "CLOSED"], Ym = /^[!#$%&'*+\-.0-9A-Z^_`|a-z~]+$/, ss = [8, 13], Km = 30 * 1000, Ce = class t extends Bm {
      constructor(e, i, r) {
        super(), this._binaryType = Jc[0], this._closeCode = 1006, this._closeFrameReceived = false, this._closeFrameSent = false, this._closeMessage = or, this._closeTimer = null, this._extensions = {}, this._paused = false, this._protocol = "", this._readyState = t.CONNECTING, this._receiver = null, this._sender = null, this._socket = null, e !== null ? (this._bufferedAmount = 0, this._isServer = false, this._redirects = 0, i === undefined ? i = [] : Array.isArray(i) || (typeof i == "object" && i !== null ? (r = i, i = []) : i = [i]), iu(this, e, i, r)) : this._isServer = true;
      }
      get binaryType() {
        return this._binaryType;
      }
      set binaryType(e) {
        Jc.includes(e) && (this._binaryType = e, this._receiver && (this._receiver._binaryType = e));
      }
      get bufferedAmount() {
        return this._socket ? this._socket._writableState.length + this._sender._bufferedBytes : this._bufferedAmount;
      }
      get extensions() {
        return Object.keys(this._extensions).join();
      }
      get isPaused() {
        return this._paused;
      }
      get onclose() {
        return null;
      }
      get onerror() {
        return null;
      }
      get onopen() {
        return null;
      }
      get onmessage() {
        return null;
      }
      get protocol() {
        return this._protocol;
      }
      get readyState() {
        return this._readyState;
      }
      get url() {
        return this._url;
      }
      setSocket(e, i, r) {
        let n = new Um({ binaryType: this.binaryType, extensions: this._extensions, isServer: this._isServer, maxPayload: r.maxPayload, skipUTF8Validation: r.skipUTF8Validation });
        this._sender = new Dm(e, this._extensions, r.generateMask), this._receiver = n, this._socket = e, n[De] = this, e[De] = this, n.on("conclude", Jm), n.on("drain", Qm), n.on("error", e0), n.on("message", t0), n.on("ping", i0), n.on("pong", r0), e.setTimeout(0), e.setNoDelay(), i.length > 0 && e.unshift(i), e.on("close", nu), e.on("data", ar), e.on("end", su), e.on("error", ou), this._readyState = t.OPEN, this.emit("open");
      }
      emitClose() {
        if (!this._socket) {
          this._readyState = t.CLOSED, this.emit("close", this._closeCode, this._closeMessage);
          return;
        }
        this._extensions[vt.extensionName] && this._extensions[vt.extensionName].cleanup(), this._receiver.removeAllListeners(), this._readyState = t.CLOSED, this.emit("close", this._closeCode, this._closeMessage);
      }
      close(e, i) {
        if (this.readyState !== t.CLOSED) {
          if (this.readyState === t.CONNECTING) {
            let r = "WebSocket was closed before the connection was established";
            return Ze(this, this._req, r);
          }
          if (this.readyState === t.CLOSING) {
            this._closeFrameSent && (this._closeFrameReceived || this._receiver._writableState.errorEmitted) && this._socket.end();
            return;
          }
          this._readyState = t.CLOSING, this._sender.close(e, i, !this._isServer, (r) => {
            r || (this._closeFrameSent = true, (this._closeFrameReceived || this._receiver._writableState.errorEmitted) && this._socket.end());
          }), this._closeTimer = setTimeout(this._socket.destroy.bind(this._socket), Km);
        }
      }
      pause() {
        this.readyState === t.CONNECTING || this.readyState === t.CLOSED || (this._paused = true, this._socket.pause());
      }
      ping(e, i, r) {
        if (this.readyState === t.CONNECTING)
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        if (typeof e == "function" ? (r = e, e = i = undefined) : typeof i == "function" && (r = i, i = undefined), typeof e == "number" && (e = e.toString()), this.readyState !== t.OPEN) {
          as(this, e, r);
          return;
        }
        i === undefined && (i = !this._isServer), this._sender.ping(e || or, i, r);
      }
      pong(e, i, r) {
        if (this.readyState === t.CONNECTING)
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        if (typeof e == "function" ? (r = e, e = i = undefined) : typeof i == "function" && (r = i, i = undefined), typeof e == "number" && (e = e.toString()), this.readyState !== t.OPEN) {
          as(this, e, r);
          return;
        }
        i === undefined && (i = !this._isServer), this._sender.pong(e || or, i, r);
      }
      resume() {
        this.readyState === t.CONNECTING || this.readyState === t.CLOSED || (this._paused = false, this._receiver._writableState.needDrain || this._socket.resume());
      }
      send(e, i, r) {
        if (this.readyState === t.CONNECTING)
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        if (typeof i == "function" && (r = i, i = {}), typeof e == "number" && (e = e.toString()), this.readyState !== t.OPEN) {
          as(this, e, r);
          return;
        }
        let n = { binary: typeof e != "string", mask: !this._isServer, compress: true, fin: true, ...i };
        this._extensions[vt.extensionName] || (n.compress = false), this._sender.send(e || or, n, r);
      }
      terminate() {
        if (this.readyState !== t.CLOSED) {
          if (this.readyState === t.CONNECTING) {
            let e = "WebSocket was closed before the connection was established";
            return Ze(this, this._req, e);
          }
          this._socket && (this._readyState = t.CLOSING, this._socket.destroy());
        }
      }
    };
    Object.defineProperty(Ce, "CONNECTING", { enumerable: true, value: ut.indexOf("CONNECTING") });
    Object.defineProperty(Ce.prototype, "CONNECTING", { enumerable: true, value: ut.indexOf("CONNECTING") });
    Object.defineProperty(Ce, "OPEN", { enumerable: true, value: ut.indexOf("OPEN") });
    Object.defineProperty(Ce.prototype, "OPEN", { enumerable: true, value: ut.indexOf("OPEN") });
    Object.defineProperty(Ce, "CLOSING", { enumerable: true, value: ut.indexOf("CLOSING") });
    Object.defineProperty(Ce.prototype, "CLOSING", { enumerable: true, value: ut.indexOf("CLOSING") });
    Object.defineProperty(Ce, "CLOSED", { enumerable: true, value: ut.indexOf("CLOSED") });
    Object.defineProperty(Ce.prototype, "CLOSED", { enumerable: true, value: ut.indexOf("CLOSED") });
    ["binaryType", "bufferedAmount", "extensions", "isPaused", "protocol", "readyState", "url"].forEach((t) => {
      Object.defineProperty(Ce.prototype, t, { enumerable: true });
    });
    ["open", "error", "close", "message"].forEach((t) => {
      Object.defineProperty(Ce.prototype, `on${t}`, { enumerable: true, get() {
        for (let e of this.listeners(t))
          if (e[ns])
            return e[qm];
        return null;
      }, set(e) {
        for (let i of this.listeners(t))
          if (i[ns]) {
            this.removeListener(t, i);
            break;
          }
        typeof e == "function" && this.addEventListener(t, e, { [ns]: true });
      } });
    });
    Ce.prototype.addEventListener = Vm;
    Ce.prototype.removeEventListener = $m;
    au.exports = Ce;
    function iu(t, e, i, r) {
      let n = { protocolVersion: ss[1], maxPayload: 104857600, skipUTF8Validation: false, perMessageDeflate: true, followRedirects: false, maxRedirects: 10, ...r, createConnection: undefined, socketPath: undefined, hostname: undefined, protocol: undefined, timeout: undefined, method: undefined, host: undefined, path: undefined, port: undefined };
      if (!ss.includes(n.protocolVersion))
        throw new RangeError(`Unsupported protocol version: ${n.protocolVersion} (supported versions: ${ss.join(", ")})`);
      let s;
      if (e instanceof rs)
        s = e, t._url = e.href;
      else {
        try {
          s = new rs(e);
        } catch {
          throw new SyntaxError(`Invalid URL: ${e}`);
        }
        t._url = e;
      }
      let o = s.protocol === "wss:", l = s.protocol === "ws+unix:", a;
      if (s.protocol !== "ws:" && !o && !l ? a = `The URL's protocol must be one of "ws:", "wss:", or "ws+unix:"` : l && !s.pathname ? a = "The URL's pathname is empty" : s.hash && (a = "The URL contains a fragment identifier"), a) {
        let m = new SyntaxError(a);
        if (t._redirects === 0)
          throw m;
        os(t, m);
        return;
      }
      let c = o ? 443 : 80, u = Nm(16).toString("base64"), f = o ? Lm.get : Pm.get, h = new Set, p;
      if (n.createConnection = o ? Xm : Zm, n.defaultPort = n.defaultPort || c, n.port = s.port || c, n.host = s.hostname.startsWith("[") ? s.hostname.slice(1, -1) : s.hostname, n.headers = { "Sec-WebSocket-Version": n.protocolVersion, "Sec-WebSocket-Key": u, Connection: "Upgrade", Upgrade: "websocket", ...n.headers }, n.path = s.pathname + s.search, n.timeout = n.handshakeTimeout, n.perMessageDeflate && (p = new vt(n.perMessageDeflate !== true ? n.perMessageDeflate : {}, false, n.maxPayload), n.headers["Sec-WebSocket-Extensions"] = Gm({ [vt.extensionName]: p.offer() })), i.length) {
        for (let m of i) {
          if (typeof m != "string" || !Ym.test(m) || h.has(m))
            throw new SyntaxError("An invalid or duplicated subprotocol was specified");
          h.add(m);
        }
        n.headers["Sec-WebSocket-Protocol"] = i.join(",");
      }
      if (n.origin && (n.protocolVersion < 13 ? n.headers["Sec-WebSocket-Origin"] = n.origin : n.headers.Origin = n.origin), (s.username || s.password) && (n.auth = `${s.username}:${s.password}`), l) {
        let m = n.path.split(":");
        n.socketPath = m[0], n.path = m[1];
      }
      let d = t._req = f(n);
      n.timeout && d.on("timeout", () => {
        Ze(t, d, "Opening handshake has timed out");
      }), d.on("error", (m) => {
        d === null || d.aborted || (d = t._req = null, os(t, m));
      }), d.on("response", (m) => {
        let v = m.headers.location, E = m.statusCode;
        if (v && n.followRedirects && E >= 300 && E < 400) {
          if (++t._redirects > n.maxRedirects) {
            Ze(t, d, "Maximum redirects exceeded");
            return;
          }
          d.abort();
          let I;
          try {
            I = new rs(v, e);
          } catch {
            let C = new SyntaxError(`Invalid URL: ${v}`);
            os(t, C);
            return;
          }
          iu(t, I, i, r);
        } else
          t.emit("unexpected-response", d, m) || Ze(t, d, `Unexpected server response: ${m.statusCode}`);
      }), d.on("upgrade", (m, v, E) => {
        if (t.emit("upgrade", m), t.readyState !== Ce.CONNECTING)
          return;
        d = t._req = null;
        let I = Mm("sha1").update(u + jm).digest("base64");
        if (m.headers["sec-websocket-accept"] !== I) {
          Ze(t, v, "Invalid Sec-WebSocket-Accept header");
          return;
        }
        let w = m.headers["sec-websocket-protocol"], C;
        if (w !== undefined ? h.size ? h.has(w) || (C = "Server sent an invalid subprotocol") : C = "Server sent a subprotocol but none was requested" : h.size && (C = "Server sent no subprotocol"), C) {
          Ze(t, v, C);
          return;
        }
        w && (t._protocol = w);
        let _ = m.headers["sec-websocket-extensions"];
        if (_ !== undefined) {
          if (!p) {
            Ze(t, v, "Server sent a Sec-WebSocket-Extensions header but no extension was requested");
            return;
          }
          let $;
          try {
            $ = zm(_);
          } catch {
            Ze(t, v, "Invalid Sec-WebSocket-Extensions header");
            return;
          }
          let k = Object.keys($);
          if (k.length !== 1 || k[0] !== vt.extensionName) {
            Ze(t, v, "Server indicated an extension that was not requested");
            return;
          }
          try {
            p.accept($[vt.extensionName]);
          } catch {
            Ze(t, v, "Invalid Sec-WebSocket-Extensions header");
            return;
          }
          t._extensions[vt.extensionName] = p;
        }
        t.setSocket(v, E, { generateMask: n.generateMask, maxPayload: n.maxPayload, skipUTF8Validation: n.skipUTF8Validation });
      });
    }
    function os(t, e) {
      t._readyState = Ce.CLOSING, t.emit("error", e), t.emitClose();
    }
    function Zm(t) {
      return t.path = t.socketPath, eu.connect(t);
    }
    function Xm(t) {
      return t.path = undefined, !t.servername && t.servername !== "" && (t.servername = eu.isIP(t.host) ? "" : t.host), Fm.connect(t);
    }
    function Ze(t, e, i) {
      t._readyState = Ce.CLOSING;
      let r = new Error(i);
      Error.captureStackTrace(r, Ze), e.setHeader ? (e.abort(), e.socket && !e.socket.destroyed && e.socket.destroy(), e.once("abort", t.emitClose.bind(t)), t.emit("error", r)) : (e.destroy(r), e.once("error", t.emit.bind(t, "error")), e.once("close", t.emitClose.bind(t)));
    }
    function as(t, e, i) {
      if (e) {
        let r = Wm(e).length;
        t._socket ? t._sender._bufferedBytes += r : t._bufferedAmount += r;
      }
      if (i) {
        let r = new Error(`WebSocket is not open: readyState ${t.readyState} (${ut[t.readyState]})`);
        i(r);
      }
    }
    function Jm(t, e) {
      let i = this[De];
      i._closeFrameReceived = true, i._closeMessage = e, i._closeCode = t, i._socket[De] !== undefined && (i._socket.removeListener("data", ar), process.nextTick(ru, i._socket), t === 1005 ? i.close() : i.close(t, e));
    }
    function Qm() {
      let t = this[De];
      t.isPaused || t._socket.resume();
    }
    function e0(t) {
      let e = this[De];
      e._socket[De] !== undefined && (e._socket.removeListener("data", ar), process.nextTick(ru, e._socket), e.close(t[Hm])), e.emit("error", t);
    }
    function Qc() {
      this[De].emitClose();
    }
    function t0(t, e) {
      this[De].emit("message", t, e);
    }
    function i0(t) {
      let e = this[De];
      e.pong(t, !e._isServer, tu), e.emit("ping", t);
    }
    function r0(t) {
      this[De].emit("pong", t);
    }
    function ru(t) {
      t.resume();
    }
    function nu() {
      let t = this[De];
      this.removeListener("close", nu), this.removeListener("data", ar), this.removeListener("end", su), t._readyState = Ce.CLOSING;
      let e;
      !this._readableState.endEmitted && !t._closeFrameReceived && !t._receiver._writableState.errorEmitted && (e = t._socket.read()) !== null && t._receiver.write(e), t._receiver.end(), this[De] = undefined, clearTimeout(t._closeTimer), t._receiver._writableState.finished || t._receiver._writableState.errorEmitted ? t.emitClose() : (t._receiver.on("error", Qc), t._receiver.on("finish", Qc));
    }
    function ar(t) {
      this[De]._receiver.write(t) || this.pause();
    }
    function su() {
      let t = this[De];
      t._readyState = Ce.CLOSING, t._receiver.end(), this.end();
    }
    function ou() {
      let t = this[De];
      this.removeListener("error", ou), this.on("error", tu), t && (t._readyState = Ce.CLOSING, this.destroy());
    }
  });
  var cu = y((Lv, lu) => {
    var { tokenChars: n0 } = Ii();
    function s0(t) {
      let e = new Set, i = -1, r = -1, n = 0;
      for (n;n < t.length; n++) {
        let o = t.charCodeAt(n);
        if (r === -1 && n0[o] === 1)
          i === -1 && (i = n);
        else if (n !== 0 && (o === 32 || o === 9))
          r === -1 && i !== -1 && (r = n);
        else if (o === 44) {
          if (i === -1)
            throw new SyntaxError(`Unexpected character at index ${n}`);
          r === -1 && (r = n);
          let l = t.slice(i, r);
          if (e.has(l))
            throw new SyntaxError(`The "${l}" subprotocol is duplicated`);
          e.add(l), i = r = -1;
        } else
          throw new SyntaxError(`Unexpected character at index ${n}`);
      }
      if (i === -1 || r !== -1)
        throw new SyntaxError("Unexpected end of input");
      let s = t.slice(i, n);
      if (e.has(s))
        throw new SyntaxError(`The "${s}" subprotocol is duplicated`);
      return e.add(s), e;
    }
    lu.exports = { parse: s0 };
  });
  var mu = y((Mv, du) => {
    var o0 = import.meta.require("events"), lr = import.meta.require("http"), Pv = import.meta.require("https"), Fv = import.meta.require("net"), Nv = import.meta.require("tls"), { createHash: a0 } = import.meta.require("crypto"), uu = is(), At = Oi(), l0 = cu(), c0 = ls(), { GUID: u0, kWebSocket: f0 } = mt(), h0 = /^[+/0-9A-Za-z]{22}==$/, fu = 0, hu = 1, pu = 2, cs = class extends o0 {
      constructor(e, i) {
        if (super(), e = { maxPayload: 100 * 1024 * 1024, skipUTF8Validation: false, perMessageDeflate: false, handleProtocols: null, clientTracking: true, verifyClient: null, noServer: false, backlog: null, server: null, host: null, path: null, port: null, ...e }, e.port == null && !e.server && !e.noServer || e.port != null && (e.server || e.noServer) || e.server && e.noServer)
          throw new TypeError('One and only one of the "port", "server", or "noServer" options must be specified');
        if (e.port != null ? (this._server = lr.createServer((r, n) => {
          let s = lr.STATUS_CODES[426];
          n.writeHead(426, { "Content-Length": s.length, "Content-Type": "text/plain" }), n.end(s);
        }), this._server.listen(e.port, e.host, e.backlog, i)) : e.server && (this._server = e.server), this._server) {
          let r = this.emit.bind(this, "connection");
          this._removeListeners = p0(this._server, { listening: this.emit.bind(this, "listening"), error: this.emit.bind(this, "error"), upgrade: (n, s, o) => {
            this.handleUpgrade(n, s, o, r);
          } });
        }
        e.perMessageDeflate === true && (e.perMessageDeflate = {}), e.clientTracking && (this.clients = new Set, this._shouldEmitClose = false), this.options = e, this._state = fu;
      }
      address() {
        if (this.options.noServer)
          throw new Error('The server is operating in "noServer" mode');
        return this._server ? this._server.address() : null;
      }
      close(e) {
        if (this._state === pu) {
          e && this.once("close", () => {
            e(new Error("The server is not running"));
          }), process.nextTick(Bi, this);
          return;
        }
        if (e && this.once("close", e), this._state !== hu)
          if (this._state = hu, this.options.noServer || this.options.server)
            this._server && (this._removeListeners(), this._removeListeners = this._server = null), this.clients ? this.clients.size ? this._shouldEmitClose = true : process.nextTick(Bi, this) : process.nextTick(Bi, this);
          else {
            let i = this._server;
            this._removeListeners(), this._removeListeners = this._server = null, i.close(() => {
              Bi(this);
            });
          }
      }
      shouldHandle(e) {
        if (this.options.path) {
          let i = e.url.indexOf("?");
          if ((i !== -1 ? e.url.slice(0, i) : e.url) !== this.options.path)
            return false;
        }
        return true;
      }
      handleUpgrade(e, i, r, n) {
        i.on("error", us);
        let s = e.headers["sec-websocket-key"] !== undefined ? e.headers["sec-websocket-key"] : false, o = +e.headers["sec-websocket-version"];
        if (e.method !== "GET" || e.headers.upgrade.toLowerCase() !== "websocket" || !s || !h0.test(s) || o !== 8 && o !== 13 || !this.shouldHandle(e))
          return ni(i, 400);
        let l = e.headers["sec-websocket-protocol"], a = new Set;
        if (l !== undefined)
          try {
            a = l0.parse(l);
          } catch {
            return ni(i, 400);
          }
        let c = e.headers["sec-websocket-extensions"], u = {};
        if (this.options.perMessageDeflate && c !== undefined) {
          let f = new At(this.options.perMessageDeflate, true, this.options.maxPayload);
          try {
            let h = uu.parse(c);
            h[At.extensionName] && (f.accept(h[At.extensionName]), u[At.extensionName] = f);
          } catch {
            return ni(i, 400);
          }
        }
        if (this.options.verifyClient) {
          let f = { origin: e.headers[`${o === 8 ? "sec-websocket-origin" : "origin"}`], secure: !!(e.socket.authorized || e.socket.encrypted), req: e };
          if (this.options.verifyClient.length === 2) {
            this.options.verifyClient(f, (h, p, d, m) => {
              if (!h)
                return ni(i, p || 401, d, m);
              this.completeUpgrade(u, s, a, e, i, r, n);
            });
            return;
          }
          if (!this.options.verifyClient(f))
            return ni(i, 401);
        }
        this.completeUpgrade(u, s, a, e, i, r, n);
      }
      completeUpgrade(e, i, r, n, s, o, l) {
        if (!s.readable || !s.writable)
          return s.destroy();
        if (s[f0])
          throw new Error("server.handleUpgrade() was called more than once with the same socket, possibly due to a misconfiguration");
        if (this._state > fu)
          return ni(s, 503);
        let c = ["HTTP/1.1 101 Switching Protocols", "Upgrade: websocket", "Connection: Upgrade", `Sec-WebSocket-Accept: ${a0("sha1").update(i + u0).digest("base64")}`], u = new c0(null);
        if (r.size) {
          let f = this.options.handleProtocols ? this.options.handleProtocols(r, n) : r.values().next().value;
          f && (c.push(`Sec-WebSocket-Protocol: ${f}`), u._protocol = f);
        }
        if (e[At.extensionName]) {
          let f = e[At.extensionName].params, h = uu.format({ [At.extensionName]: [f] });
          c.push(`Sec-WebSocket-Extensions: ${h}`), u._extensions = e;
        }
        this.emit("headers", c, n), s.write(c.concat(`\r
`).join(`\r
`)), s.removeListener("error", us), u.setSocket(s, o, { maxPayload: this.options.maxPayload, skipUTF8Validation: this.options.skipUTF8Validation }), this.clients && (this.clients.add(u), u.on("close", () => {
          this.clients.delete(u), this._shouldEmitClose && !this.clients.size && process.nextTick(Bi, this);
        })), l(u, n);
      }
    };
    du.exports = cs;
    function p0(t, e) {
      for (let i of Object.keys(e))
        t.on(i, e[i]);
      return function() {
        for (let r of Object.keys(e))
          t.removeListener(r, e[r]);
      };
    }
    function Bi(t) {
      t._state = pu, t.emit("close");
    }
    function us() {
      this.destroy();
    }
    function ni(t, e, i, r) {
      t.writable && (i = i || lr.STATUS_CODES[e], r = { Connection: "close", "Content-Type": "text/html", "Content-Length": Buffer.byteLength(i), ...r }, t.write(`HTTP/1.1 ${e} ${lr.STATUS_CODES[e]}\r
` + Object.keys(r).map((n) => `${n}: ${r[n]}`).join(`\r
`) + `\r
\r
` + i)), t.removeListener("error", us), t.destroy();
    }
  });
  var _u = y((Dv, xu) => {
    var xt = import.meta.require("constants"), m0 = process.cwd, cr = null, g0 = process.env.GRACEFUL_FS_PLATFORM || process.platform;
    process.cwd = function() {
      return cr || (cr = m0.call(process)), cr;
    };
    try {
      process.cwd();
    } catch {
    }
    typeof process.chdir == "function" && (ds = process.chdir, process.chdir = function(t) {
      cr = null, ds.call(process, t);
    }, Object.setPrototypeOf && Object.setPrototypeOf(process.chdir, ds));
    var ds;
    xu.exports = v0;
    function v0(t) {
      xt.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./) && e(t), t.lutimes || i(t), t.chown = s(t.chown), t.fchown = s(t.fchown), t.lchown = s(t.lchown), t.chmod = r(t.chmod), t.fchmod = r(t.fchmod), t.lchmod = r(t.lchmod), t.chownSync = o(t.chownSync), t.fchownSync = o(t.fchownSync), t.lchownSync = o(t.lchownSync), t.chmodSync = n(t.chmodSync), t.fchmodSync = n(t.fchmodSync), t.lchmodSync = n(t.lchmodSync), t.stat = l(t.stat), t.fstat = l(t.fstat), t.lstat = l(t.lstat), t.statSync = a(t.statSync), t.fstatSync = a(t.fstatSync), t.lstatSync = a(t.lstatSync), t.chmod && !t.lchmod && (t.lchmod = function(u, f, h) {
        h && process.nextTick(h);
      }, t.lchmodSync = function() {
      }), t.chown && !t.lchown && (t.lchown = function(u, f, h, p) {
        p && process.nextTick(p);
      }, t.lchownSync = function() {
      }), g0 === "win32" && (t.rename = typeof t.rename != "function" ? t.rename : function(u) {
        function f(h, p, d) {
          var m = Date.now(), v = 0;
          u(h, p, function E(I) {
            if (I && (I.code === "EACCES" || I.code === "EPERM") && Date.now() - m < 60000) {
              setTimeout(function() {
                t.stat(p, function(w, C) {
                  w && w.code === "ENOENT" ? u(h, p, E) : d(I);
                });
              }, v), v < 100 && (v += 10);
              return;
            }
            d && d(I);
          });
        }
        return Object.setPrototypeOf && Object.setPrototypeOf(f, u), f;
      }(t.rename)), t.read = typeof t.read != "function" ? t.read : function(u) {
        function f(h, p, d, m, v, E) {
          var I;
          if (E && typeof E == "function") {
            var w = 0;
            I = function(C, _, $) {
              if (C && C.code === "EAGAIN" && w < 10)
                return w++, u.call(t, h, p, d, m, v, I);
              E.apply(this, arguments);
            };
          }
          return u.call(t, h, p, d, m, v, I);
        }
        return Object.setPrototypeOf && Object.setPrototypeOf(f, u), f;
      }(t.read), t.readSync = typeof t.readSync != "function" ? t.readSync : function(u) {
        return function(f, h, p, d, m) {
          for (var v = 0;; )
            try {
              return u.call(t, f, h, p, d, m);
            } catch (E) {
              if (E.code === "EAGAIN" && v < 10) {
                v++;
                continue;
              }
              throw E;
            }
        };
      }(t.readSync);
      function e(u) {
        u.lchmod = function(f, h, p) {
          u.open(f, xt.O_WRONLY | xt.O_SYMLINK, h, function(d, m) {
            if (d) {
              p && p(d);
              return;
            }
            u.fchmod(m, h, function(v) {
              u.close(m, function(E) {
                p && p(v || E);
              });
            });
          });
        }, u.lchmodSync = function(f, h) {
          var p = u.openSync(f, xt.O_WRONLY | xt.O_SYMLINK, h), d = true, m;
          try {
            m = u.fchmodSync(p, h), d = false;
          } finally {
            if (d)
              try {
                u.closeSync(p);
              } catch {
              }
            else
              u.closeSync(p);
          }
          return m;
        };
      }
      function i(u) {
        xt.hasOwnProperty("O_SYMLINK") && u.futimes ? (u.lutimes = function(f, h, p, d) {
          u.open(f, xt.O_SYMLINK, function(m, v) {
            if (m) {
              d && d(m);
              return;
            }
            u.futimes(v, h, p, function(E) {
              u.close(v, function(I) {
                d && d(E || I);
              });
            });
          });
        }, u.lutimesSync = function(f, h, p) {
          var d = u.openSync(f, xt.O_SYMLINK), m, v = true;
          try {
            m = u.futimesSync(d, h, p), v = false;
          } finally {
            if (v)
              try {
                u.closeSync(d);
              } catch {
              }
            else
              u.closeSync(d);
          }
          return m;
        }) : u.futimes && (u.lutimes = function(f, h, p, d) {
          d && process.nextTick(d);
        }, u.lutimesSync = function() {
        });
      }
      function r(u) {
        return u && function(f, h, p) {
          return u.call(t, f, h, function(d) {
            c(d) && (d = null), p && p.apply(this, arguments);
          });
        };
      }
      function n(u) {
        return u && function(f, h) {
          try {
            return u.call(t, f, h);
          } catch (p) {
            if (!c(p))
              throw p;
          }
        };
      }
      function s(u) {
        return u && function(f, h, p, d) {
          return u.call(t, f, h, p, function(m) {
            c(m) && (m = null), d && d.apply(this, arguments);
          });
        };
      }
      function o(u) {
        return u && function(f, h, p) {
          try {
            return u.call(t, f, h, p);
          } catch (d) {
            if (!c(d))
              throw d;
          }
        };
      }
      function l(u) {
        return u && function(f, h, p) {
          typeof h == "function" && (p = h, h = null);
          function d(m, v) {
            v && (v.uid < 0 && (v.uid += 4294967296), v.gid < 0 && (v.gid += 4294967296)), p && p.apply(this, arguments);
          }
          return h ? u.call(t, f, h, d) : u.call(t, f, d);
        };
      }
      function a(u) {
        return u && function(f, h) {
          var p = h ? u.call(t, f, h) : u.call(t, f);
          return p && (p.uid < 0 && (p.uid += 4294967296), p.gid < 0 && (p.gid += 4294967296)), p;
        };
      }
      function c(u) {
        if (!u || u.code === "ENOSYS")
          return true;
        var f = !process.getuid || process.getuid() !== 0;
        return !!(f && (u.code === "EINVAL" || u.code === "EPERM"));
      }
    }
  });
  var wu = y((jv, bu) => {
    var yu = import.meta.require("stream").Stream;
    bu.exports = x0;
    function x0(t) {
      return { ReadStream: e, WriteStream: i };
      function e(r, n) {
        if (!(this instanceof e))
          return new e(r, n);
        yu.call(this);
        var s = this;
        this.path = r, this.fd = null, this.readable = true, this.paused = false, this.flags = "r", this.mode = 438, this.bufferSize = 64 * 1024, n = n || {};
        for (var o = Object.keys(n), l = 0, a = o.length;l < a; l++) {
          var c = o[l];
          this[c] = n[c];
        }
        if (this.encoding && this.setEncoding(this.encoding), this.start !== undefined) {
          if (typeof this.start != "number")
            throw TypeError("start must be a Number");
          if (this.end === undefined)
            this.end = 1 / 0;
          else if (typeof this.end != "number")
            throw TypeError("end must be a Number");
          if (this.start > this.end)
            throw new Error("start must be <= end");
          this.pos = this.start;
        }
        if (this.fd !== null) {
          process.nextTick(function() {
            s._read();
          });
          return;
        }
        t.open(this.path, this.flags, this.mode, function(u, f) {
          if (u) {
            s.emit("error", u), s.readable = false;
            return;
          }
          s.fd = f, s.emit("open", f), s._read();
        });
      }
      function i(r, n) {
        if (!(this instanceof i))
          return new i(r, n);
        yu.call(this), this.path = r, this.fd = null, this.writable = true, this.flags = "w", this.encoding = "binary", this.mode = 438, this.bytesWritten = 0, n = n || {};
        for (var s = Object.keys(n), o = 0, l = s.length;o < l; o++) {
          var a = s[o];
          this[a] = n[a];
        }
        if (this.start !== undefined) {
          if (typeof this.start != "number")
            throw TypeError("start must be a Number");
          if (this.start < 0)
            throw new Error("start must be >= zero");
          this.pos = this.start;
        }
        this.busy = false, this._queue = [], this.fd === null && (this._open = t.open, this._queue.push([this._open, this.path, this.flags, this.mode, undefined]), this.flush());
      }
    }
  });
  var Su = y((qv, Eu) => {
    Eu.exports = y0;
    var _0 = Object.getPrototypeOf || function(t) {
      return t.__proto__;
    };
    function y0(t) {
      if (t === null || typeof t != "object")
        return t;
      if (t instanceof Object)
        var e = { __proto__: _0(t) };
      else
        var e = Object.create(null);
      return Object.getOwnPropertyNames(t).forEach(function(i) {
        Object.defineProperty(e, i, Object.getOwnPropertyDescriptor(t, i));
      }), e;
    }
  });
  var Iu = y((Hv, vs) => {
    var ke = import.meta.require("fs"), b0 = _u(), w0 = wu(), E0 = Su(), ur = import.meta.require("util"), Ne, hr;
    typeof Symbol == "function" && typeof Symbol.for == "function" ? (Ne = Symbol.for("graceful-fs.queue"), hr = Symbol.for("graceful-fs.previous")) : (Ne = "___graceful-fs.queue", hr = "___graceful-fs.previous");
    function S0() {
    }
    function Ou(t, e) {
      Object.defineProperty(t, Ne, { get: function() {
        return e;
      } });
    }
    var Rt = S0;
    ur.debuglog ? Rt = ur.debuglog("gfs4") : /\bgfs4\b/i.test(process.env.NODE_DEBUG || "") && (Rt = function() {
      var t = ur.format.apply(ur, arguments);
      t = "GFS4: " + t.split(/\n/).join(`
GFS4: `), console.error(t);
    });
    ke[Ne] || (ku = global[Ne] || [], Ou(ke, ku), ke.close = function(t) {
      function e(i, r) {
        return t.call(ke, i, function(n) {
          n || Cu(), typeof r == "function" && r.apply(this, arguments);
        });
      }
      return Object.defineProperty(e, hr, { value: t }), e;
    }(ke.close), ke.closeSync = function(t) {
      function e(i) {
        t.apply(ke, arguments), Cu();
      }
      return Object.defineProperty(e, hr, { value: t }), e;
    }(ke.closeSync), /\bgfs4\b/i.test(process.env.NODE_DEBUG || "") && process.on("exit", function() {
      Rt(ke[Ne]), import.meta.require("assert").equal(ke[Ne].length, 0);
    }));
    var ku;
    global[Ne] || Ou(global, ke[Ne]);
    vs.exports = ms(E0(ke));
    process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !ke.__patched && (vs.exports = ms(ke), ke.__patched = true);
    function ms(t) {
      b0(t), t.gracefulify = ms, t.createReadStream = _, t.createWriteStream = $;
      var e = t.readFile;
      t.readFile = i;
      function i(b, T, B) {
        return typeof T == "function" && (B = T, T = null), G(b, T, B);
        function G(L, X, R, N) {
          return e(L, X, function(q) {
            q && (q.code === "EMFILE" || q.code === "ENFILE") ? si([G, [L, X, R], q, N || Date.now(), Date.now()]) : typeof R == "function" && R.apply(this, arguments);
          });
        }
      }
      var r = t.writeFile;
      t.writeFile = n;
      function n(b, T, B, G) {
        return typeof B == "function" && (G = B, B = null), L(b, T, B, G);
        function L(X, R, N, q, z) {
          return r(X, R, N, function(P) {
            P && (P.code === "EMFILE" || P.code === "ENFILE") ? si([L, [X, R, N, q], P, z || Date.now(), Date.now()]) : typeof q == "function" && q.apply(this, arguments);
          });
        }
      }
      var s = t.appendFile;
      s && (t.appendFile = o);
      function o(b, T, B, G) {
        return typeof B == "function" && (G = B, B = null), L(b, T, B, G);
        function L(X, R, N, q, z) {
          return s(X, R, N, function(P) {
            P && (P.code === "EMFILE" || P.code === "ENFILE") ? si([L, [X, R, N, q], P, z || Date.now(), Date.now()]) : typeof q == "function" && q.apply(this, arguments);
          });
        }
      }
      var l = t.copyFile;
      l && (t.copyFile = a);
      function a(b, T, B, G) {
        return typeof B == "function" && (G = B, B = 0), L(b, T, B, G);
        function L(X, R, N, q, z) {
          return l(X, R, N, function(P) {
            P && (P.code === "EMFILE" || P.code === "ENFILE") ? si([L, [X, R, N, q], P, z || Date.now(), Date.now()]) : typeof q == "function" && q.apply(this, arguments);
          });
        }
      }
      var c = t.readdir;
      t.readdir = f;
      var u = /^v[0-5]\./;
      function f(b, T, B) {
        typeof T == "function" && (B = T, T = null);
        var G = u.test(process.version) ? function(R, N, q, z) {
          return c(R, L(R, N, q, z));
        } : function(R, N, q, z) {
          return c(R, N, L(R, N, q, z));
        };
        return G(b, T, B);
        function L(X, R, N, q) {
          return function(z, P) {
            z && (z.code === "EMFILE" || z.code === "ENFILE") ? si([G, [X, R, N], z, q || Date.now(), Date.now()]) : (P && P.sort && P.sort(), typeof N == "function" && N.call(this, z, P));
          };
        }
      }
      if (process.version.substr(0, 4) === "v0.8") {
        var h = w0(t);
        E = h.ReadStream, w = h.WriteStream;
      }
      var p = t.ReadStream;
      p && (E.prototype = Object.create(p.prototype), E.prototype.open = I);
      var d = t.WriteStream;
      d && (w.prototype = Object.create(d.prototype), w.prototype.open = C), Object.defineProperty(t, "ReadStream", { get: function() {
        return E;
      }, set: function(b) {
        E = b;
      }, enumerable: true, configurable: true }), Object.defineProperty(t, "WriteStream", { get: function() {
        return w;
      }, set: function(b) {
        w = b;
      }, enumerable: true, configurable: true });
      var m = E;
      Object.defineProperty(t, "FileReadStream", { get: function() {
        return m;
      }, set: function(b) {
        m = b;
      }, enumerable: true, configurable: true });
      var v = w;
      Object.defineProperty(t, "FileWriteStream", { get: function() {
        return v;
      }, set: function(b) {
        v = b;
      }, enumerable: true, configurable: true });
      function E(b, T) {
        return this instanceof E ? (p.apply(this, arguments), this) : E.apply(Object.create(E.prototype), arguments);
      }
      function I() {
        var b = this;
        U(b.path, b.flags, b.mode, function(T, B) {
          T ? (b.autoClose && b.destroy(), b.emit("error", T)) : (b.fd = B, b.emit("open", B), b.read());
        });
      }
      function w(b, T) {
        return this instanceof w ? (d.apply(this, arguments), this) : w.apply(Object.create(w.prototype), arguments);
      }
      function C() {
        var b = this;
        U(b.path, b.flags, b.mode, function(T, B) {
          T ? (b.destroy(), b.emit("error", T)) : (b.fd = B, b.emit("open", B));
        });
      }
      function _(b, T) {
        return new t.ReadStream(b, T);
      }
      function $(b, T) {
        return new t.WriteStream(b, T);
      }
      var k = t.open;
      t.open = U;
      function U(b, T, B, G) {
        return typeof B == "function" && (G = B, B = null), L(b, T, B, G);
        function L(X, R, N, q, z) {
          return k(X, R, N, function(P, be) {
            P && (P.code === "EMFILE" || P.code === "ENFILE") ? si([L, [X, R, N, q], P, z || Date.now(), Date.now()]) : typeof q == "function" && q.apply(this, arguments);
          });
        }
      }
      return t;
    }
    function si(t) {
      Rt("ENQUEUE", t[0].name, t[1]), ke[Ne].push(t), gs();
    }
    var fr;
    function Cu() {
      for (var t = Date.now(), e = 0;e < ke[Ne].length; ++e)
        ke[Ne][e].length > 2 && (ke[Ne][e][3] = t, ke[Ne][e][4] = t);
      gs();
    }
    function gs() {
      if (clearTimeout(fr), fr = undefined, ke[Ne].length !== 0) {
        var t = ke[Ne].shift(), e = t[0], i = t[1], r = t[2], n = t[3], s = t[4];
        if (n === undefined)
          Rt("RETRY", e.name, i), e.apply(null, i);
        else if (Date.now() - n >= 60000) {
          Rt("TIMEOUT", e.name, i);
          var o = i.pop();
          typeof o == "function" && o.call(null, r);
        } else {
          var l = Date.now() - s, a = Math.max(s - n, 1), c = Math.min(a * 1.2, 100);
          l >= c ? (Rt("RETRY", e.name, i), e.apply(null, i.concat([n]))) : ke[Ne].push(t);
        }
        fr === undefined && (fr = setTimeout(gs, 0));
      }
    }
  });
  var Au = y((Vv, Tu) => {
    function Xe(t, e) {
      typeof e == "boolean" && (e = { forever: e }), this._originalTimeouts = JSON.parse(JSON.stringify(t)), this._timeouts = t, this._options = e || {}, this._maxRetryTime = e && e.maxRetryTime || 1 / 0, this._fn = null, this._errors = [], this._attempts = 1, this._operationTimeout = null, this._operationTimeoutCb = null, this._timeout = null, this._operationStart = null, this._options.forever && (this._cachedTimeouts = this._timeouts.slice(0));
    }
    Tu.exports = Xe;
    Xe.prototype.reset = function() {
      this._attempts = 1, this._timeouts = this._originalTimeouts;
    };
    Xe.prototype.stop = function() {
      this._timeout && clearTimeout(this._timeout), this._timeouts = [], this._cachedTimeouts = null;
    };
    Xe.prototype.retry = function(t) {
      if (this._timeout && clearTimeout(this._timeout), !t)
        return false;
      var e = new Date().getTime();
      if (t && e - this._operationStart >= this._maxRetryTime)
        return this._errors.unshift(new Error("RetryOperation timeout occurred")), false;
      this._errors.push(t);
      var i = this._timeouts.shift();
      if (i === undefined)
        if (this._cachedTimeouts)
          this._errors.splice(this._errors.length - 1, this._errors.length), this._timeouts = this._cachedTimeouts.slice(0), i = this._timeouts.shift();
        else
          return false;
      var r = this, n = setTimeout(function() {
        r._attempts++, r._operationTimeoutCb && (r._timeout = setTimeout(function() {
          r._operationTimeoutCb(r._attempts);
        }, r._operationTimeout), r._options.unref && r._timeout.unref()), r._fn(r._attempts);
      }, i);
      return this._options.unref && n.unref(), true;
    };
    Xe.prototype.attempt = function(t, e) {
      this._fn = t, e && (e.timeout && (this._operationTimeout = e.timeout), e.cb && (this._operationTimeoutCb = e.cb));
      var i = this;
      this._operationTimeoutCb && (this._timeout = setTimeout(function() {
        i._operationTimeoutCb();
      }, i._operationTimeout)), this._operationStart = new Date().getTime(), this._fn(this._attempts);
    };
    Xe.prototype.try = function(t) {
      console.log("Using RetryOperation.try() is deprecated"), this.attempt(t);
    };
    Xe.prototype.start = function(t) {
      console.log("Using RetryOperation.start() is deprecated"), this.attempt(t);
    };
    Xe.prototype.start = Xe.prototype.try;
    Xe.prototype.errors = function() {
      return this._errors;
    };
    Xe.prototype.attempts = function() {
      return this._attempts;
    };
    Xe.prototype.mainError = function() {
      if (this._errors.length === 0)
        return null;
      for (var t = {}, e = null, i = 0, r = 0;r < this._errors.length; r++) {
        var n = this._errors[r], s = n.message, o = (t[s] || 0) + 1;
        t[s] = o, o >= i && (e = n, i = o);
      }
      return e;
    };
  });
  var Ru = y((Bt) => {
    var k0 = Au();
    Bt.operation = function(t) {
      var e = Bt.timeouts(t);
      return new k0(e, { forever: t && t.forever, unref: t && t.unref, maxRetryTime: t && t.maxRetryTime });
    };
    Bt.timeouts = function(t) {
      if (t instanceof Array)
        return [].concat(t);
      var e = { retries: 10, factor: 2, minTimeout: 1 * 1000, maxTimeout: 1 / 0, randomize: false };
      for (var i in t)
        e[i] = t[i];
      if (e.minTimeout > e.maxTimeout)
        throw new Error("minTimeout is greater than maxTimeout");
      for (var r = [], n = 0;n < e.retries; n++)
        r.push(this.createTimeout(n, e));
      return t && t.forever && !r.length && r.push(this.createTimeout(n, e)), r.sort(function(s, o) {
        return s - o;
      }), r;
    };
    Bt.createTimeout = function(t, e) {
      var i = e.randomize ? Math.random() + 1 : 1, r = Math.round(i * e.minTimeout * Math.pow(e.factor, t));
      return r = Math.min(r, e.maxTimeout), r;
    };
    Bt.wrap = function(t, e, i) {
      if (e instanceof Array && (i = e, e = null), !i) {
        i = [];
        for (var r in t)
          typeof t[r] == "function" && i.push(r);
      }
      for (var n = 0;n < i.length; n++) {
        var s = i[n], o = t[s];
        t[s] = function(a) {
          var c = Bt.operation(e), u = Array.prototype.slice.call(arguments, 1), f = u.pop();
          u.push(function(h) {
            c.retry(h) || (h && (arguments[0] = c.mainError()), f.apply(this, arguments));
          }), c.attempt(function() {
            a.apply(t, u);
          });
        }.bind(t, o), t[s].options = e;
      }
    };
  });
  var Lu = y((Gv, Bu) => {
    Bu.exports = Ru();
  });
  var Pu = y((zv, pr) => {
    pr.exports = ["SIGABRT", "SIGALRM", "SIGHUP", "SIGINT", "SIGTERM"];
    process.platform !== "win32" && pr.exports.push("SIGVTALRM", "SIGXCPU", "SIGXFSZ", "SIGUSR2", "SIGTRAP", "SIGSYS", "SIGQUIT", "SIGIOT");
    process.platform === "linux" && pr.exports.push("SIGIO", "SIGPOLL", "SIGPWR", "SIGSTKFLT", "SIGUNUSED");
  });
  var Du = y((Wv, li) => {
    var Ee = global.process, Lt = function(t) {
      return t && typeof t == "object" && typeof t.removeListener == "function" && typeof t.emit == "function" && typeof t.reallyExit == "function" && typeof t.listeners == "function" && typeof t.kill == "function" && typeof t.pid == "number" && typeof t.on == "function";
    };
    Lt(Ee) ? (Fu = import.meta.require("assert"), oi = Pu(), Nu = /^win/i.test(Ee.platform), Li = import.meta.require("events"), typeof Li != "function" && (Li = Li.EventEmitter), Ee.__signal_exit_emitter__ ? Be = Ee.__signal_exit_emitter__ : (Be = Ee.__signal_exit_emitter__ = new Li, Be.count = 0, Be.emitted = {}), Be.infinite || (Be.setMaxListeners(1 / 0), Be.infinite = true), li.exports = function(t, e) {
      if (!Lt(global.process))
        return function() {
        };
      Fu.equal(typeof t, "function", "a callback must be provided for exit handler"), ai === false && xs();
      var i = "exit";
      e && e.alwaysLast && (i = "afterexit");
      var r = function() {
        Be.removeListener(i, t), Be.listeners("exit").length === 0 && Be.listeners("afterexit").length === 0 && dr();
      };
      return Be.on(i, t), r;
    }, dr = function() {
      !ai || !Lt(global.process) || (ai = false, oi.forEach(function(e) {
        try {
          Ee.removeListener(e, mr[e]);
        } catch {
        }
      }), Ee.emit = gr, Ee.reallyExit = _s, Be.count -= 1);
    }, li.exports.unload = dr, Pt = function(e, i, r) {
      Be.emitted[e] || (Be.emitted[e] = true, Be.emit(e, i, r));
    }, mr = {}, oi.forEach(function(t) {
      mr[t] = function() {
        if (Lt(global.process)) {
          var i = Ee.listeners(t);
          i.length === Be.count && (dr(), Pt("exit", null, t), Pt("afterexit", null, t), Nu && t === "SIGHUP" && (t = "SIGINT"), Ee.kill(Ee.pid, t));
        }
      };
    }), li.exports.signals = function() {
      return oi;
    }, ai = false, xs = function() {
      ai || !Lt(global.process) || (ai = true, Be.count += 1, oi = oi.filter(function(e) {
        try {
          return Ee.on(e, mr[e]), true;
        } catch {
          return false;
        }
      }), Ee.emit = Uu, Ee.reallyExit = Mu);
    }, li.exports.load = xs, _s = Ee.reallyExit, Mu = function(e) {
      Lt(global.process) && (Ee.exitCode = e || 0, Pt("exit", Ee.exitCode, null), Pt("afterexit", Ee.exitCode, null), _s.call(Ee, Ee.exitCode));
    }, gr = Ee.emit, Uu = function(e, i) {
      if (e === "exit" && Lt(global.process)) {
        i !== undefined && (Ee.exitCode = i);
        var r = gr.apply(this, arguments);
        return Pt("exit", Ee.exitCode, null), Pt("afterexit", Ee.exitCode, null), r;
      } else
        return gr.apply(this, arguments);
    }) : li.exports = function() {
      return function() {
      };
    };
    var Fu, oi, Nu, Li, Be, dr, Pt, mr, ai, xs, _s, Mu, gr, Uu;
  });
  var Wu = y((Yv, zu) => {
    var C0 = import.meta.require("path"), Vu = Iu(), O0 = Lu(), I0 = Du(), _t = {}, ju = Symbol();
    function T0(t, e, i) {
      let r = e[ju];
      if (r)
        return e.stat(t, (s, o) => {
          if (s)
            return i(s);
          i(null, o.mtime, r);
        });
      let n = new Date(Math.ceil(Date.now() / 1000) * 1000 + 5);
      e.utimes(t, n, n, (s) => {
        if (s)
          return i(s);
        e.stat(t, (o, l) => {
          if (o)
            return i(o);
          let a = l.mtime.getTime() % 1000 === 0 ? "s" : "ms";
          Object.defineProperty(e, ju, { value: a }), i(null, l.mtime, a);
        });
      });
    }
    function A0(t) {
      let e = Date.now();
      return t === "s" && (e = Math.ceil(e / 1000) * 1000), new Date(e);
    }
    function xr(t, e) {
      return e.lockfilePath || `${t}.lock`;
    }
    function $u(t, e, i) {
      if (!e.realpath)
        return i(null, C0.resolve(t));
      e.fs.realpath(t, i);
    }
    function bs(t, e, i) {
      let r = xr(t, e);
      e.fs.mkdir(r, (n) => {
        if (!n)
          return T0(r, e.fs, (s, o, l) => {
            if (s)
              return e.fs.rmdir(r, () => {
              }), i(s);
            i(null, o, l);
          });
        if (n.code !== "EEXIST")
          return i(n);
        if (e.stale <= 0)
          return i(Object.assign(new Error("Lock file is already being held"), { code: "ELOCKED", file: t }));
        e.fs.stat(r, (s, o) => {
          if (s)
            return s.code === "ENOENT" ? bs(t, { ...e, stale: 0 }, i) : i(s);
          if (!R0(o, e))
            return i(Object.assign(new Error("Lock file is already being held"), { code: "ELOCKED", file: t }));
          Gu(t, e, (l) => {
            if (l)
              return i(l);
            bs(t, { ...e, stale: 0 }, i);
          });
        });
      });
    }
    function R0(t, e) {
      return t.mtime.getTime() < Date.now() - e.stale;
    }
    function Gu(t, e, i) {
      e.fs.rmdir(xr(t, e), (r) => {
        if (r && r.code !== "ENOENT")
          return i(r);
        i();
      });
    }
    function vr(t, e) {
      let i = _t[t];
      i.updateTimeout || (i.updateDelay = i.updateDelay || e.update, i.updateTimeout = setTimeout(() => {
        i.updateTimeout = null, e.fs.stat(i.lockfilePath, (r, n) => {
          let s = i.lastUpdate + e.stale < Date.now();
          if (r)
            return r.code === "ENOENT" || s ? ys(t, i, Object.assign(r, { code: "ECOMPROMISED" })) : (i.updateDelay = 1000, vr(t, e));
          if (!(i.mtime.getTime() === n.mtime.getTime()))
            return ys(t, i, Object.assign(new Error("Unable to update lock within the stale threshold"), { code: "ECOMPROMISED" }));
          let l = A0(i.mtimePrecision);
          e.fs.utimes(i.lockfilePath, l, l, (a) => {
            let c = i.lastUpdate + e.stale < Date.now();
            if (!i.released) {
              if (a)
                return a.code === "ENOENT" || c ? ys(t, i, Object.assign(a, { code: "ECOMPROMISED" })) : (i.updateDelay = 1000, vr(t, e));
              i.mtime = l, i.lastUpdate = Date.now(), i.updateDelay = null, vr(t, e);
            }
          });
        });
      }, i.updateDelay), i.updateTimeout.unref && i.updateTimeout.unref());
    }
    function ys(t, e, i) {
      e.released = true, e.updateTimeout && clearTimeout(e.updateTimeout), _t[t] === e && delete _t[t], e.options.onCompromised(i);
    }
    function B0(t, e, i) {
      e = { stale: 1e4, update: null, realpath: true, retries: 0, fs: Vu, onCompromised: (r) => {
        throw r;
      }, ...e }, e.retries = e.retries || 0, e.retries = typeof e.retries == "number" ? { retries: e.retries } : e.retries, e.stale = Math.max(e.stale || 0, 2000), e.update = e.update == null ? e.stale / 2 : e.update || 0, e.update = Math.max(Math.min(e.update, e.stale / 2), 1000), $u(t, e, (r, n) => {
        if (r)
          return i(r);
        let s = O0.operation(e.retries);
        s.attempt(() => {
          bs(n, e, (o, l, a) => {
            if (s.retry(o))
              return;
            if (o)
              return i(s.mainError());
            let c = _t[n] = { lockfilePath: xr(n, e), mtime: l, mtimePrecision: a, options: e, lastUpdate: Date.now() };
            vr(n, e), i(null, (u) => {
              if (c.released)
                return u && u(Object.assign(new Error("Lock is already released"), { code: "ERELEASED" }));
              L0(n, { ...e, realpath: false }, u);
            });
          });
        });
      });
    }
    function L0(t, e, i) {
      e = { fs: Vu, realpath: true, ...e }, $u(t, e, (r, n) => {
        if (r)
          return i(r);
        let s = _t[n];
        if (!s)
          return i(Object.assign(new Error("Lock is not acquired/owned by you"), { code: "ENOTACQUIRED" }));
        s.updateTimeout && clearTimeout(s.updateTimeout), s.released = true, delete _t[n], Gu(n, e, i);
      });
    }
    function qu(t) {
      return (...e) => new Promise((i, r) => {
        e.push((n, s) => {
          n ? r(n) : i(s);
        }), t(...e);
      });
    }
    var Hu = false;
    function P0() {
      Hu || (Hu = true, I0(() => {
        for (let t in _t) {
          let e = _t[t].options;
          try {
            e.fs.rmdirSync(xr(t, e));
          } catch {
          }
        }
      }));
    }
    zu.exports.lock = async (t, e) => {
      P0();
      let i = await qu(B0)(t, e);
      return qu(i);
    };
  });
  var K0 = {};
  df(K0, { HttpsProxyAgent: () => nf.HttpsProxyAgent, PNG: () => sf.PNG, SocksProxyAgent: () => af.SocksProxyAgent, StackUtils: () => $0, colors: () => F0, debug: () => N0, getProxyForUrl: () => rf.getProxyForUrl, jpegjs: () => M0, lockfile: () => D0, mime: () => j0, minimatch: () => q0, open: () => H0, program: () => of.program, progress: () => V0, ws: () => G0, wsReceiver: () => W0, wsSender: () => Y0, wsServer: () => z0 });
  module.exports = mf(K0);
  var Yu = Te(co());
  var Ku = Te(Ht());
  var rf = Te(wo());
  var nf = Te(Ro());
  var Zu = Te(Uo());
  var Xu = Te(zo());
  var Ju = Te(pa());
  var Qu = Te(Oa());
  var sf = Te(wl());
  var of = Te(Fl());
  var ef = Te(jl());
  var af = Te(sc());
  var tf = Te(fc());
  var d0 = Te(mc(), 1);
  var fs = Te(Jn(), 1);
  var hs = Te(es(), 1);
  var gu = Te(ls(), 1);
  var ps = Te(mu(), 1);
  var vu = gu.default;
  var F0 = Yu.default;
  var N0 = Ku.default;
  var M0 = Zu.default;
  var U0 = Wu();
  var D0 = U0;
  var j0 = Xu.default;
  var q0 = Ju.default;
  var H0 = Qu.default;
  var V0 = ef.default;
  var $0 = tf.default;
  var G0 = vu;
  var z0 = ps.default;
  var W0 = fs.default;
  var Y0 = hs.default;
  /*! Bundled license information:
  
  progress/lib/node-progress.js:
    (*!
     * node-progress
     * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>
     * MIT Licensed
     *)
  */
});

// node_modules/playwright-core/lib/utilsBundle.js
var require_utilsBundle = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var parseStackTraceLine = function(line) {
    var _frame$file, _frame$file2;
    if (!process.env.PWDEBUGIMPL && nodeMajorVersion < 16 && nodeInternals.some((internal) => internal.test(line)))
      return null;
    const frame = stackUtils.parseLine(line);
    if (!frame)
      return null;
    if (!process.env.PWDEBUGIMPL && ((_frame$file = frame.file) !== null && _frame$file !== undefined && _frame$file.startsWith("internal") || (_frame$file2 = frame.file) !== null && _frame$file2 !== undefined && _frame$file2.startsWith("node:")))
      return null;
    if (!frame.file)
      return null;
    const file = frame.file.startsWith("file://") ? _url.default.fileURLToPath(frame.file) : _path.default.resolve(process.cwd(), frame.file);
    return {
      file,
      line: frame.line || 0,
      column: frame.column || 0,
      function: frame.function
    };
  };
  var ms = function(ms2) {
    if (!isFinite(ms2))
      return "-";
    if (ms2 === 0)
      return "0ms";
    if (ms2 < 1000)
      return ms2.toFixed(0) + "ms";
    const seconds = ms2 / 1000;
    if (seconds < 60)
      return seconds.toFixed(1) + "s";
    const minutes = seconds / 60;
    if (minutes < 60)
      return minutes.toFixed(1) + "m";
    const hours = minutes / 60;
    if (hours < 24)
      return hours.toFixed(1) + "h";
    const days = hours / 24;
    return days.toFixed(1) + "d";
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.minimatch = exports.mime = exports.lockfile = exports.jpegjs = exports.getProxyForUrl = exports.debug = exports.colors = exports.SocksProxyAgent = exports.PNG = exports.HttpsProxyAgent = undefined;
  exports.ms = ms;
  exports.open = undefined;
  exports.parseStackTraceLine = parseStackTraceLine;
  exports.wsServer = exports.wsSender = exports.wsReceiver = exports.ws = exports.progress = exports.program = undefined;
  var _url = _interopRequireDefault(import.meta.require("url"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var colors2 = exports.colors = require_utilsBundleImpl().colors;
  var debug2 = exports.debug = require_utilsBundleImpl().debug;
  var getProxyForUrl2 = exports.getProxyForUrl = require_utilsBundleImpl().getProxyForUrl;
  var HttpsProxyAgent2 = exports.HttpsProxyAgent = require_utilsBundleImpl().HttpsProxyAgent;
  var jpegjs2 = exports.jpegjs = require_utilsBundleImpl().jpegjs;
  var lockfile2 = exports.lockfile = require_utilsBundleImpl().lockfile;
  var mime2 = exports.mime = require_utilsBundleImpl().mime;
  var minimatch2 = exports.minimatch = require_utilsBundleImpl().minimatch;
  var open2 = exports.open = require_utilsBundleImpl().open;
  var PNG2 = exports.PNG = require_utilsBundleImpl().PNG;
  var program2 = exports.program = require_utilsBundleImpl().program;
  var progress2 = exports.progress = require_utilsBundleImpl().progress;
  var SocksProxyAgent2 = exports.SocksProxyAgent = require_utilsBundleImpl().SocksProxyAgent;
  var ws2 = exports.ws = require_utilsBundleImpl().ws;
  var wsServer2 = exports.wsServer = require_utilsBundleImpl().wsServer;
  var wsReceiver2 = exports.wsReceiver = require_utilsBundleImpl().wsReceiver;
  var wsSender2 = exports.wsSender = require_utilsBundleImpl().wsSender;
  var StackUtils2 = require_utilsBundleImpl().StackUtils;
  var stackUtils = new StackUtils2({
    internals: StackUtils2.nodeInternals()
  });
  var nodeInternals = StackUtils2.nodeInternals();
  var nodeMajorVersion = +process.versions.node.split(".")[0];
});

// node_modules/playwright-core/lib/utils/isomorphic/stringUtils.js
var require_stringUtils = __commonJS((exports) => {
  var escapeWithQuotes = function(text, char = "\'") {
    const stringified = JSON.stringify(text);
    const escapedText = stringified.substring(1, stringified.length - 1).replace(/\\"/g, '"');
    if (char === "\'")
      return char + escapedText.replace(/[']/g, "\\\'") + char;
    if (char === '"')
      return char + escapedText.replace(/["]/g, '\\"') + char;
    if (char === "`")
      return char + escapedText.replace(/[`]/g, "`") + char;
    throw new Error("Invalid escape char");
  };
  var isString = function(obj) {
    return typeof obj === "string" || obj instanceof String;
  };
  var toTitleCase = function(name) {
    return name.charAt(0).toUpperCase() + name.substring(1);
  };
  var toSnakeCase = function(name) {
    return name.replace(/([a-z0-9])([A-Z])/g, "$1_$2").replace(/([A-Z])([A-Z][a-z])/g, "$1_$2").toLowerCase();
  };
  var cssEscape = function(s) {
    let result = "";
    for (let i = 0;i < s.length; i++)
      result += cssEscapeOne(s, i);
    return result;
  };
  var quoteCSSAttributeValue = function(text) {
    return `"${cssEscape(text).replace(/\\ /g, " ")}"`;
  };
  var cssEscapeOne = function(s, i) {
    const c = s.charCodeAt(i);
    if (c === 0)
      return "\uFFFD";
    if (c >= 1 && c <= 31 || c >= 48 && c <= 57 && (i === 0 || i === 1 && s.charCodeAt(0) === 45))
      return "\\" + c.toString(16) + " ";
    if (i === 0 && c === 45 && s.length === 1)
      return "\\" + s.charAt(i);
    if (c >= 128 || c === 45 || c === 95 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122)
      return s.charAt(i);
    return "\\" + s.charAt(i);
  };
  var normalizeWhiteSpace = function(text) {
    return text.replace(/\u200b/g, "").trim().replace(/\s+/g, " ");
  };
  var normalizeEscapedRegexQuotes = function(source) {
    return source.replace(/(^|[^\\])(\\\\)*\\(['"`])/g, "$1$2$3");
  };
  var escapeRegexForSelector = function(re) {
    if (re.unicode || re.unicodeSets)
      return String(re);
    return String(re).replace(/(^|[^\\])(\\\\)*(["'`])/g, "$1$2\\$3").replace(/>>/g, "\\>\\>");
  };
  var escapeForTextSelector = function(text, exact) {
    if (typeof text !== "string")
      return escapeRegexForSelector(text);
    return `${JSON.stringify(text)}${exact ? "s" : "i"}`;
  };
  var escapeForAttributeSelector = function(value, exact) {
    if (typeof value !== "string")
      return escapeRegexForSelector(value);
    return `"${value.replace(/\\/g, "\\\\").replace(/["]/g, '\\"')}"${exact ? "s" : "i"}`;
  };
  var trimString = function(input, cap, suffix = "") {
    if (input.length <= cap)
      return input;
    const chars = [...input];
    if (chars.length > cap)
      return chars.slice(0, cap - suffix.length).join("") + suffix;
    return chars.join("");
  };
  var trimStringWithEllipsis = function(input, cap) {
    return trimString(input, cap, "\u2026");
  };
  var escapeRegExp = function(s) {
    return s.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.cssEscape = cssEscape;
  exports.escapeForAttributeSelector = escapeForAttributeSelector;
  exports.escapeForTextSelector = escapeForTextSelector;
  exports.escapeRegExp = escapeRegExp;
  exports.escapeWithQuotes = escapeWithQuotes;
  exports.isString = isString;
  exports.normalizeEscapedRegexQuotes = normalizeEscapedRegexQuotes;
  exports.normalizeWhiteSpace = normalizeWhiteSpace;
  exports.quoteCSSAttributeValue = quoteCSSAttributeValue;
  exports.toSnakeCase = toSnakeCase;
  exports.toTitleCase = toTitleCase;
  exports.trimString = trimString;
  exports.trimStringWithEllipsis = trimStringWithEllipsis;
});

// node_modules/playwright-core/lib/utils/rtti.js
var require_rtti = __commonJS((exports) => {
  var isRegExp = function(obj) {
    return obj instanceof RegExp || Object.prototype.toString.call(obj) === "[object RegExp]";
  };
  var isObject = function(obj) {
    return typeof obj === "object" && obj !== null;
  };
  var isError = function(obj) {
    var _Object$getPrototypeO;
    return obj instanceof Error || obj && ((_Object$getPrototypeO = Object.getPrototypeOf(obj)) === null || _Object$getPrototypeO === undefined ? undefined : _Object$getPrototypeO.name) === "Error";
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isError = isError;
  exports.isLikelyNpxGlobal = undefined;
  exports.isObject = isObject;
  exports.isRegExp = isRegExp;
  Object.defineProperty(exports, "isString", {
    enumerable: true,
    get: function() {
      return _stringUtils.isString;
    }
  });
  var _stringUtils = require_stringUtils();
  var isLikelyNpxGlobal = () => process.argv.length >= 2 && process.argv[1].includes("_npx");
  exports.isLikelyNpxGlobal = isLikelyNpxGlobal;
});

// node_modules/playwright-core/lib/utils/glob.js
var require_glob = __commonJS((exports) => {
  var globToRegex = function(glob) {
    const tokens = ["^"];
    let inGroup = false;
    for (let i = 0;i < glob.length; ++i) {
      const c = glob[i];
      if (c === "\\" && i + 1 < glob.length) {
        const char = glob[++i];
        tokens.push(escapedChars.has(char) ? "\\" + char : char);
        continue;
      }
      if (c === "*") {
        const beforeDeep = glob[i - 1];
        let starCount = 1;
        while (glob[i + 1] === "*") {
          starCount++;
          i++;
        }
        const afterDeep = glob[i + 1];
        const isDeep = starCount > 1 && (beforeDeep === "/" || beforeDeep === undefined) && (afterDeep === "/" || afterDeep === undefined);
        if (isDeep) {
          tokens.push("((?:[^/]*(?:/|$))*)");
          i++;
        } else {
          tokens.push("([^/]*)");
        }
        continue;
      }
      switch (c) {
        case "?":
          tokens.push(".");
          break;
        case "[":
          tokens.push("[");
          break;
        case "]":
          tokens.push("]");
          break;
        case "{":
          inGroup = true;
          tokens.push("(");
          break;
        case "}":
          inGroup = false;
          tokens.push(")");
          break;
        case ",":
          if (inGroup) {
            tokens.push("|");
            break;
          }
          tokens.push("\\" + c);
          break;
        default:
          tokens.push(escapedChars.has(c) ? "\\" + c : c);
      }
    }
    tokens.push("$");
    return new RegExp(tokens.join(""));
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.globToRegex = globToRegex;
  var escapedChars = new Set(["$", "^", "+", ".", "*", "(", ")", "|", "\\", "?", "{", "}", "[", "]"]);
});

// node_modules/playwright-core/lib/utils/ascii.js
var require_ascii = __commonJS((exports) => {
  var wrapInASCIIBox = function(text, padding = 0) {
    const lines = text.split("\n");
    const maxLength = Math.max(...lines.map((line) => line.length));
    return ["\u2554" + "\u2550".repeat(maxLength + padding * 2) + "\u2557", ...lines.map((line) => "\u2551" + " ".repeat(padding) + line + " ".repeat(maxLength - line.length + padding) + "\u2551"), "\u255A" + "\u2550".repeat(maxLength + padding * 2) + "\u255D"].join("\n");
  };
  var jsonStringifyForceASCII = function(object) {
    return JSON.stringify(object).replace(/[\u007f-\uffff]/g, (c) => "\\u" + ("0000" + c.charCodeAt(0).toString(16)).slice(-4));
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.jsonStringifyForceASCII = jsonStringifyForceASCII;
  exports.wrapInASCIIBox = wrapInASCIIBox;
});

// node_modules/playwright-core/lib/image_tools/colorUtils.js
var require_colorUtils = __commonJS((exports) => {
  var blendWithWhite = function(c, a) {
    return 255 + (c - 255) * a;
  };
  var rgb2gray = function(r, g, b) {
    return 77 * r + 150 * g + 29 * b + 128 >> 8;
  };
  var colorDeltaE94 = function(rgb1, rgb2) {
    const [l1, a1, b1] = xyz2lab(srgb2xyz(rgb1));
    const [l2, a2, b2] = xyz2lab(srgb2xyz(rgb2));
    const deltaL = l1 - l2;
    const deltaA = a1 - a2;
    const deltaB = b1 - b2;
    const c1 = Math.sqrt(a1 ** 2 + b1 ** 2);
    const c2 = Math.sqrt(a2 ** 2 + b2 ** 2);
    const deltaC = c1 - c2;
    let deltaH = deltaA ** 2 + deltaB ** 2 - deltaC ** 2;
    deltaH = deltaH < 0 ? 0 : Math.sqrt(deltaH);
    const k1 = 0.045;
    const k2 = 0.015;
    const kL = 1;
    const kC = 1;
    const kH = 1;
    const sC = 1 + k1 * c1;
    const sH = 1 + k2 * c1;
    const sL = 1;
    return Math.sqrt((deltaL / sL / kL) ** 2 + (deltaC / sC / kC) ** 2 + (deltaH / sH / kH) ** 2);
  };
  var srgb2xyz = function(rgb) {
    let r = rgb[0] / 255;
    let g = rgb[1] / 255;
    let b = rgb[2] / 255;
    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
    return [r * 0.4124 + g * 0.3576 + b * 0.1805, r * 0.2126 + g * 0.7152 + b * 0.0722, r * 0.0193 + g * 0.1192 + b * 0.9505];
  };
  var xyz2lab = function(xyz) {
    const x = xyz[0] / 0.950489;
    const y = xyz[1];
    const z = xyz[2] / 1.08884;
    const fx = x > sigma_pow3 ? x ** (1 / 3) : x / 3 / sigma_pow2 + 4 / 29;
    const fy = y > sigma_pow3 ? y ** (1 / 3) : y / 3 / sigma_pow2 + 4 / 29;
    const fz = z > sigma_pow3 ? z ** (1 / 3) : z / 3 / sigma_pow2 + 4 / 29;
    const l = 116 * fy - 16;
    const a = 500 * (fx - fy);
    const b = 200 * (fy - fz);
    return [l, a, b];
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.blendWithWhite = blendWithWhite;
  exports.colorDeltaE94 = colorDeltaE94;
  exports.rgb2gray = rgb2gray;
  exports.srgb2xyz = srgb2xyz;
  exports.xyz2lab = xyz2lab;
  var sigma_pow2 = 6 * 6 / 29 / 29;
  var sigma_pow3 = 6 * 6 * 6 / 29 / 29 / 29;
});

// node_modules/playwright-core/lib/image_tools/imageChannel.js
var require_imageChannel = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ImageChannel = undefined;
  var _colorUtils = require_colorUtils();

  class ImageChannel {
    static intoRGB(width, height, data, options = {}) {
      const {
        paddingSize = 0,
        paddingColorOdd = [255, 0, 255],
        paddingColorEven = [0, 255, 0]
      } = options;
      const newWidth = width + 2 * paddingSize;
      const newHeight = height + 2 * paddingSize;
      const r = new Uint8Array(newWidth * newHeight);
      const g = new Uint8Array(newWidth * newHeight);
      const b = new Uint8Array(newWidth * newHeight);
      for (let y = 0;y < newHeight; ++y) {
        for (let x = 0;x < newWidth; ++x) {
          const index = y * newWidth + x;
          if (y >= paddingSize && y < newHeight - paddingSize && x >= paddingSize && x < newWidth - paddingSize) {
            const offset = ((y - paddingSize) * width + (x - paddingSize)) * 4;
            const alpha = data[offset + 3] === 255 ? 1 : data[offset + 3] / 255;
            r[index] = (0, _colorUtils.blendWithWhite)(data[offset], alpha);
            g[index] = (0, _colorUtils.blendWithWhite)(data[offset + 1], alpha);
            b[index] = (0, _colorUtils.blendWithWhite)(data[offset + 2], alpha);
          } else {
            const color = (y + x) % 2 === 0 ? paddingColorEven : paddingColorOdd;
            r[index] = color[0];
            g[index] = color[1];
            b[index] = color[2];
          }
        }
      }
      return [new ImageChannel(newWidth, newHeight, r), new ImageChannel(newWidth, newHeight, g), new ImageChannel(newWidth, newHeight, b)];
    }
    constructor(width, height, data) {
      this.data = undefined;
      this.width = undefined;
      this.height = undefined;
      this.data = data;
      this.width = width;
      this.height = height;
    }
    get(x, y) {
      return this.data[y * this.width + x];
    }
    boundXY(x, y) {
      return [Math.min(Math.max(x, 0), this.width - 1), Math.min(Math.max(y, 0), this.height - 1)];
    }
  }
  exports.ImageChannel = ImageChannel;
});

// node_modules/playwright-core/lib/image_tools/stats.js
var require_stats = __commonJS((exports) => {
  var ssim = function(stats, x1, y1, x2, y2) {
    const mean1 = stats.meanC1(x1, y1, x2, y2);
    const mean2 = stats.meanC2(x1, y1, x2, y2);
    const var1 = stats.varianceC1(x1, y1, x2, y2);
    const var2 = stats.varianceC2(x1, y1, x2, y2);
    const cov = stats.covariance(x1, y1, x2, y2);
    const c1 = (0.01 * DYNAMIC_RANGE) ** 2;
    const c2 = (0.03 * DYNAMIC_RANGE) ** 2;
    return (2 * mean1 * mean2 + c1) * (2 * cov + c2) / (mean1 ** 2 + mean2 ** 2 + c1) / (var1 + var2 + c2);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FastStats = undefined;
  exports.ssim = ssim;
  var DYNAMIC_RANGE = 2 ** 8 - 1;

  class FastStats {
    constructor(c1, c2) {
      this.c1 = undefined;
      this.c2 = undefined;
      this._partialSumC1 = undefined;
      this._partialSumC2 = undefined;
      this._partialSumMult = undefined;
      this._partialSumSq1 = undefined;
      this._partialSumSq2 = undefined;
      this.c1 = c1;
      this.c2 = c2;
      const {
        width,
        height
      } = c1;
      this._partialSumC1 = new Array(width * height);
      this._partialSumC2 = new Array(width * height);
      this._partialSumSq1 = new Array(width * height);
      this._partialSumSq2 = new Array(width * height);
      this._partialSumMult = new Array(width * height);
      const recalc = (mx, idx, initial, x, y) => {
        mx[idx] = initial;
        if (y > 0)
          mx[idx] += mx[(y - 1) * width + x];
        if (x > 0)
          mx[idx] += mx[y * width + x - 1];
        if (x > 0 && y > 0)
          mx[idx] -= mx[(y - 1) * width + x - 1];
      };
      for (let y = 0;y < height; ++y) {
        for (let x = 0;x < width; ++x) {
          const idx = y * width + x;
          recalc(this._partialSumC1, idx, this.c1.data[idx], x, y);
          recalc(this._partialSumC2, idx, this.c2.data[idx], x, y);
          recalc(this._partialSumSq1, idx, this.c1.data[idx] * this.c1.data[idx], x, y);
          recalc(this._partialSumSq2, idx, this.c2.data[idx] * this.c2.data[idx], x, y);
          recalc(this._partialSumMult, idx, this.c1.data[idx] * this.c2.data[idx], x, y);
        }
      }
    }
    _sum(partialSum, x1, y1, x2, y2) {
      const width = this.c1.width;
      let result = partialSum[y2 * width + x2];
      if (y1 > 0)
        result -= partialSum[(y1 - 1) * width + x2];
      if (x1 > 0)
        result -= partialSum[y2 * width + x1 - 1];
      if (x1 > 0 && y1 > 0)
        result += partialSum[(y1 - 1) * width + x1 - 1];
      return result;
    }
    meanC1(x1, y1, x2, y2) {
      const N = (y2 - y1 + 1) * (x2 - x1 + 1);
      return this._sum(this._partialSumC1, x1, y1, x2, y2) / N;
    }
    meanC2(x1, y1, x2, y2) {
      const N = (y2 - y1 + 1) * (x2 - x1 + 1);
      return this._sum(this._partialSumC2, x1, y1, x2, y2) / N;
    }
    varianceC1(x1, y1, x2, y2) {
      const N = (y2 - y1 + 1) * (x2 - x1 + 1);
      return (this._sum(this._partialSumSq1, x1, y1, x2, y2) - this._sum(this._partialSumC1, x1, y1, x2, y2) ** 2 / N) / N;
    }
    varianceC2(x1, y1, x2, y2) {
      const N = (y2 - y1 + 1) * (x2 - x1 + 1);
      return (this._sum(this._partialSumSq2, x1, y1, x2, y2) - this._sum(this._partialSumC2, x1, y1, x2, y2) ** 2 / N) / N;
    }
    covariance(x1, y1, x2, y2) {
      const N = (y2 - y1 + 1) * (x2 - x1 + 1);
      return (this._sum(this._partialSumMult, x1, y1, x2, y2) - this._sum(this._partialSumC1, x1, y1, x2, y2) * this._sum(this._partialSumC2, x1, y1, x2, y2) / N) / N;
    }
  }
  exports.FastStats = FastStats;
});

// node_modules/playwright-core/lib/image_tools/compare.js
var require_compare = __commonJS((exports) => {
  var drawPixel = function(width, data, x, y, r, g, b) {
    const idx = (y * width + x) * 4;
    data[idx + 0] = r;
    data[idx + 1] = g;
    data[idx + 2] = b;
    data[idx + 3] = 255;
  };
  var compare = function(actual, expected, diff, width, height, options = {}) {
    const {
      maxColorDeltaE94 = 1
    } = options;
    const paddingSize = Math.max(VARIANCE_WINDOW_RADIUS, SSIM_WINDOW_RADIUS);
    const paddingColorEven = [255, 0, 255];
    const paddingColorOdd = [0, 255, 0];
    const [r1, g1, b1] = _imageChannel.ImageChannel.intoRGB(width, height, expected, {
      paddingSize,
      paddingColorEven,
      paddingColorOdd
    });
    const [r2, g2, b2] = _imageChannel.ImageChannel.intoRGB(width, height, actual, {
      paddingSize,
      paddingColorEven,
      paddingColorOdd
    });
    const noop = (x, y) => {
    };
    const drawRedPixel = diff ? (x, y) => drawPixel(width, diff, x - paddingSize, y - paddingSize, 255, 0, 0) : noop;
    const drawYellowPixel = diff ? (x, y) => drawPixel(width, diff, x - paddingSize, y - paddingSize, 255, 255, 0) : noop;
    const drawGrayPixel = diff ? (x, y) => {
      const gray = (0, _colorUtils.rgb2gray)(r1.get(x, y), g1.get(x, y), b1.get(x, y));
      const value = (0, _colorUtils.blendWithWhite)(gray, 0.1);
      drawPixel(width, diff, x - paddingSize, y - paddingSize, value, value, value);
    } : noop;
    let fastR, fastG, fastB;
    let diffCount = 0;
    for (let y = paddingSize;y < r1.height - paddingSize; ++y) {
      for (let x = paddingSize;x < r1.width - paddingSize; ++x) {
        if (r1.get(x, y) === r2.get(x, y) && g1.get(x, y) === g2.get(x, y) && b1.get(x, y) === b2.get(x, y)) {
          drawGrayPixel(x, y);
          continue;
        }
        const delta = (0, _colorUtils.colorDeltaE94)([r1.get(x, y), g1.get(x, y), b1.get(x, y)], [r2.get(x, y), g2.get(x, y), b2.get(x, y)]);
        if (delta <= maxColorDeltaE94) {
          drawGrayPixel(x, y);
          continue;
        }
        if (!fastR || !fastG || !fastB) {
          fastR = new _stats.FastStats(r1, r2);
          fastG = new _stats.FastStats(g1, g2);
          fastB = new _stats.FastStats(b1, b2);
        }
        const [varX1, varY1] = r1.boundXY(x - VARIANCE_WINDOW_RADIUS, y - VARIANCE_WINDOW_RADIUS);
        const [varX2, varY2] = r1.boundXY(x + VARIANCE_WINDOW_RADIUS, y + VARIANCE_WINDOW_RADIUS);
        const var1 = fastR.varianceC1(varX1, varY1, varX2, varY2) + fastG.varianceC1(varX1, varY1, varX2, varY2) + fastB.varianceC1(varX1, varY1, varX2, varY2);
        const var2 = fastR.varianceC2(varX1, varY1, varX2, varY2) + fastG.varianceC2(varX1, varY1, varX2, varY2) + fastB.varianceC2(varX1, varY1, varX2, varY2);
        if (var1 === 0 || var2 === 0) {
          drawRedPixel(x, y);
          ++diffCount;
          continue;
        }
        const [ssimX1, ssimY1] = r1.boundXY(x - SSIM_WINDOW_RADIUS, y - SSIM_WINDOW_RADIUS);
        const [ssimX2, ssimY2] = r1.boundXY(x + SSIM_WINDOW_RADIUS, y + SSIM_WINDOW_RADIUS);
        const ssimRGB = ((0, _stats.ssim)(fastR, ssimX1, ssimY1, ssimX2, ssimY2) + (0, _stats.ssim)(fastG, ssimX1, ssimY1, ssimX2, ssimY2) + (0, _stats.ssim)(fastB, ssimX1, ssimY1, ssimX2, ssimY2)) / 3;
        const isAntialiased = ssimRGB >= 0.99;
        if (isAntialiased) {
          drawYellowPixel(x, y);
        } else {
          drawRedPixel(x, y);
          ++diffCount;
        }
      }
    }
    return diffCount;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.compare = compare;
  var _colorUtils = require_colorUtils();
  var _imageChannel = require_imageChannel();
  var _stats = require_stats();
  var SSIM_WINDOW_RADIUS = 15;
  var VARIANCE_WINDOW_RADIUS = 1;
});

// node_modules/playwright-core/lib/third_party/pixelmatch.js
var require_pixelmatch = __commonJS((exports, module) => {
  var pixelmatch = function(img1, img2, output, width, height, options) {
    if (!isPixelData(img1) || !isPixelData(img2) || output && !isPixelData(output))
      throw new Error("Image data: Uint8Array, Uint8ClampedArray or Buffer expected.");
    if (img1.length !== img2.length || output && output.length !== img1.length)
      throw new Error("Image sizes do not match.");
    if (img1.length !== width * height * 4)
      throw new Error("Image data size does not match width/height.");
    options = Object.assign({}, defaultOptions, options);
    const len = width * height;
    const a32 = new Uint32Array(img1.buffer, img1.byteOffset, len);
    const b32 = new Uint32Array(img2.buffer, img2.byteOffset, len);
    let identical = true;
    for (let i = 0;i < len; i++) {
      if (a32[i] !== b32[i]) {
        identical = false;
        break;
      }
    }
    if (identical) {
      if (output && !options.diffMask) {
        for (let i = 0;i < len; i++)
          drawGrayPixel(img1, 4 * i, options.alpha, output);
      }
      return 0;
    }
    const maxDelta = 35215 * options.threshold * options.threshold;
    let diff = 0;
    for (let y = 0;y < height; y++) {
      for (let x = 0;x < width; x++) {
        const pos = (y * width + x) * 4;
        const delta = colorDelta(img1, img2, pos, pos);
        if (Math.abs(delta) > maxDelta) {
          if (!options.includeAA && (antialiased(img1, x, y, width, height, img2) || antialiased(img2, x, y, width, height, img1))) {
            if (output && !options.diffMask)
              drawPixel(output, pos, ...options.aaColor);
          } else {
            if (output) {
              drawPixel(output, pos, ...delta < 0 && options.diffColorAlt || options.diffColor);
            }
            diff++;
          }
        } else if (output) {
          if (!options.diffMask)
            drawGrayPixel(img1, pos, options.alpha, output);
        }
      }
    }
    return diff;
  };
  var isPixelData = function(arr) {
    return ArrayBuffer.isView(arr) && arr.constructor.BYTES_PER_ELEMENT === 1;
  };
  var antialiased = function(img, x1, y1, width, height, img2) {
    const x0 = Math.max(x1 - 1, 0);
    const y0 = Math.max(y1 - 1, 0);
    const x2 = Math.min(x1 + 1, width - 1);
    const y2 = Math.min(y1 + 1, height - 1);
    const pos = (y1 * width + x1) * 4;
    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;
    let min = 0;
    let max = 0;
    let minX, minY, maxX, maxY;
    for (let x = x0;x <= x2; x++) {
      for (let y = y0;y <= y2; y++) {
        if (x === x1 && y === y1)
          continue;
        const delta = colorDelta(img, img, pos, (y * width + x) * 4, true);
        if (delta === 0) {
          zeroes++;
          if (zeroes > 2)
            return false;
        } else if (delta < min) {
          min = delta;
          minX = x;
          minY = y;
        } else if (delta > max) {
          max = delta;
          maxX = x;
          maxY = y;
        }
      }
    }
    if (min === 0 || max === 0)
      return false;
    return hasManySiblings(img, minX, minY, width, height) && hasManySiblings(img2, minX, minY, width, height) || hasManySiblings(img, maxX, maxY, width, height) && hasManySiblings(img2, maxX, maxY, width, height);
  };
  var hasManySiblings = function(img, x1, y1, width, height) {
    const x0 = Math.max(x1 - 1, 0);
    const y0 = Math.max(y1 - 1, 0);
    const x2 = Math.min(x1 + 1, width - 1);
    const y2 = Math.min(y1 + 1, height - 1);
    const pos = (y1 * width + x1) * 4;
    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;
    for (let x = x0;x <= x2; x++) {
      for (let y = y0;y <= y2; y++) {
        if (x === x1 && y === y1)
          continue;
        const pos2 = (y * width + x) * 4;
        if (img[pos] === img[pos2] && img[pos + 1] === img[pos2 + 1] && img[pos + 2] === img[pos2 + 2] && img[pos + 3] === img[pos2 + 3])
          zeroes++;
        if (zeroes > 2)
          return true;
      }
    }
    return false;
  };
  var colorDelta = function(img1, img2, k, m, yOnly) {
    let r1 = img1[k + 0];
    let g1 = img1[k + 1];
    let b1 = img1[k + 2];
    let a1 = img1[k + 3];
    let r2 = img2[m + 0];
    let g2 = img2[m + 1];
    let b2 = img2[m + 2];
    let a2 = img2[m + 3];
    if (a1 === a2 && r1 === r2 && g1 === g2 && b1 === b2)
      return 0;
    if (a1 < 255) {
      a1 /= 255;
      r1 = blend(r1, a1);
      g1 = blend(g1, a1);
      b1 = blend(b1, a1);
    }
    if (a2 < 255) {
      a2 /= 255;
      r2 = blend(r2, a2);
      g2 = blend(g2, a2);
      b2 = blend(b2, a2);
    }
    const y1 = rgb2y(r1, g1, b1);
    const y2 = rgb2y(r2, g2, b2);
    const y = y1 - y2;
    if (yOnly)
      return y;
    const i = rgb2i(r1, g1, b1) - rgb2i(r2, g2, b2);
    const q = rgb2q(r1, g1, b1) - rgb2q(r2, g2, b2);
    const delta = 0.5053 * y * y + 0.299 * i * i + 0.1957 * q * q;
    return y1 > y2 ? -delta : delta;
  };
  var rgb2y = function(r, g, b) {
    return r * 0.29889531 + g * 0.58662247 + b * 0.11448223;
  };
  var rgb2i = function(r, g, b) {
    return r * 0.59597799 - g * 0.2741761 - b * 0.32180189;
  };
  var rgb2q = function(r, g, b) {
    return r * 0.21147017 - g * 0.52261711 + b * 0.31114694;
  };
  var blend = function(c, a) {
    return 255 + (c - 255) * a;
  };
  var drawPixel = function(output, pos, r, g, b) {
    output[pos + 0] = r;
    output[pos + 1] = g;
    output[pos + 2] = b;
    output[pos + 3] = 255;
  };
  var drawGrayPixel = function(img, i, alpha, output) {
    const r = img[i + 0];
    const g = img[i + 1];
    const b = img[i + 2];
    const val = blend(rgb2y(r, g, b), alpha * img[i + 3] / 255);
    drawPixel(output, i, val, val, val);
  };
  module.exports = pixelmatch;
  var defaultOptions = {
    threshold: 0.1,
    includeAA: false,
    alpha: 0.1,
    aaColor: [255, 255, 0],
    diffColor: [255, 0, 0],
    diffColorAlt: null,
    diffMask: false
  };
});

// node_modules/playwright-core/lib/third_party/diff_match_patch.js
var require_diff_match_patch = __commonJS((exports, module) => {
  var diff_match_patch = function() {
    this.Diff_Timeout = 1;
    this.Diff_EditCost = 4;
    this.Match_Threshold = 0.5;
    this.Match_Distance = 1000;
    this.Patch_DeleteThreshold = 0.5;
    this.Patch_Margin = 4;
    this.Match_MaxBits = 32;
  };
  var DIFF_DELETE = -1;
  var DIFF_INSERT = 1;
  var DIFF_EQUAL = 0;
  diff_match_patch.Diff = function(op, text) {
    this[0] = op;
    this[1] = text;
  };
  diff_match_patch.Diff.prototype.length = 2;
  diff_match_patch.Diff.prototype.toString = function() {
    return this[0] + "," + this[1];
  };
  diff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines, opt_deadline) {
    if (typeof opt_deadline == "undefined") {
      if (this.Diff_Timeout <= 0) {
        opt_deadline = Number.MAX_VALUE;
      } else {
        opt_deadline = new Date().getTime() + this.Diff_Timeout * 1000;
      }
    }
    var deadline = opt_deadline;
    if (text1 == null || text2 == null) {
      throw new Error("Null input. (diff_main)");
    }
    if (text1 == text2) {
      if (text1) {
        return [new diff_match_patch.Diff(DIFF_EQUAL, text1)];
      }
      return [];
    }
    if (typeof opt_checklines == "undefined") {
      opt_checklines = true;
    }
    var checklines = opt_checklines;
    var commonlength = this.diff_commonPrefix(text1, text2);
    var commonprefix = text1.substring(0, commonlength);
    text1 = text1.substring(commonlength);
    text2 = text2.substring(commonlength);
    commonlength = this.diff_commonSuffix(text1, text2);
    var commonsuffix = text1.substring(text1.length - commonlength);
    text1 = text1.substring(0, text1.length - commonlength);
    text2 = text2.substring(0, text2.length - commonlength);
    var diffs = this.diff_compute_(text1, text2, checklines, deadline);
    if (commonprefix) {
      diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, commonprefix));
    }
    if (commonsuffix) {
      diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, commonsuffix));
    }
    this.diff_cleanupMerge(diffs);
    return diffs;
  };
  diff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines, deadline) {
    var diffs;
    if (!text1) {
      return [new diff_match_patch.Diff(DIFF_INSERT, text2)];
    }
    if (!text2) {
      return [new diff_match_patch.Diff(DIFF_DELETE, text1)];
    }
    var longtext = text1.length > text2.length ? text1 : text2;
    var shorttext = text1.length > text2.length ? text2 : text1;
    var i = longtext.indexOf(shorttext);
    if (i != -1) {
      diffs = [
        new diff_match_patch.Diff(DIFF_INSERT, longtext.substring(0, i)),
        new diff_match_patch.Diff(DIFF_EQUAL, shorttext),
        new diff_match_patch.Diff(DIFF_INSERT, longtext.substring(i + shorttext.length))
      ];
      if (text1.length > text2.length) {
        diffs[0][0] = diffs[2][0] = DIFF_DELETE;
      }
      return diffs;
    }
    if (shorttext.length == 1) {
      return [
        new diff_match_patch.Diff(DIFF_DELETE, text1),
        new diff_match_patch.Diff(DIFF_INSERT, text2)
      ];
    }
    var hm = this.diff_halfMatch_(text1, text2);
    if (hm) {
      var text1_a = hm[0];
      var text1_b = hm[1];
      var text2_a = hm[2];
      var text2_b = hm[3];
      var mid_common = hm[4];
      var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);
      var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);
      return diffs_a.concat([new diff_match_patch.Diff(DIFF_EQUAL, mid_common)], diffs_b);
    }
    if (checklines && text1.length > 100 && text2.length > 100) {
      return this.diff_lineMode_(text1, text2, deadline);
    }
    return this.diff_bisect_(text1, text2, deadline);
  };
  diff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {
    var a = this.diff_linesToChars_(text1, text2);
    text1 = a.chars1;
    text2 = a.chars2;
    var linearray = a.lineArray;
    var diffs = this.diff_main(text1, text2, false, deadline);
    this.diff_charsToLines_(diffs, linearray);
    this.diff_cleanupSemantic(diffs);
    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ""));
    var pointer = 0;
    var count_delete = 0;
    var count_insert = 0;
    var text_delete = "";
    var text_insert = "";
    while (pointer < diffs.length) {
      switch (diffs[pointer][0]) {
        case DIFF_INSERT:
          count_insert++;
          text_insert += diffs[pointer][1];
          break;
        case DIFF_DELETE:
          count_delete++;
          text_delete += diffs[pointer][1];
          break;
        case DIFF_EQUAL:
          if (count_delete >= 1 && count_insert >= 1) {
            diffs.splice(pointer - count_delete - count_insert, count_delete + count_insert);
            pointer = pointer - count_delete - count_insert;
            var subDiff = this.diff_main(text_delete, text_insert, false, deadline);
            for (var j = subDiff.length - 1;j >= 0; j--) {
              diffs.splice(pointer, 0, subDiff[j]);
            }
            pointer = pointer + subDiff.length;
          }
          count_insert = 0;
          count_delete = 0;
          text_delete = "";
          text_insert = "";
          break;
      }
      pointer++;
    }
    diffs.pop();
    return diffs;
  };
  diff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {
    var text1_length = text1.length;
    var text2_length = text2.length;
    var max_d = Math.ceil((text1_length + text2_length) / 2);
    var v_offset = max_d;
    var v_length = 2 * max_d;
    var v1 = new Array(v_length);
    var v2 = new Array(v_length);
    for (var x = 0;x < v_length; x++) {
      v1[x] = -1;
      v2[x] = -1;
    }
    v1[v_offset + 1] = 0;
    v2[v_offset + 1] = 0;
    var delta = text1_length - text2_length;
    var front = delta % 2 != 0;
    var k1start = 0;
    var k1end = 0;
    var k2start = 0;
    var k2end = 0;
    for (var d = 0;d < max_d; d++) {
      if (new Date().getTime() > deadline) {
        break;
      }
      for (var k1 = -d + k1start;k1 <= d - k1end; k1 += 2) {
        var k1_offset = v_offset + k1;
        var x1;
        if (k1 == -d || k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1]) {
          x1 = v1[k1_offset + 1];
        } else {
          x1 = v1[k1_offset - 1] + 1;
        }
        var y1 = x1 - k1;
        while (x1 < text1_length && y1 < text2_length && text1.charAt(x1) == text2.charAt(y1)) {
          x1++;
          y1++;
        }
        v1[k1_offset] = x1;
        if (x1 > text1_length) {
          k1end += 2;
        } else if (y1 > text2_length) {
          k1start += 2;
        } else if (front) {
          var k2_offset = v_offset + delta - k1;
          if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {
            var x2 = text1_length - v2[k2_offset];
            if (x1 >= x2) {
              return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);
            }
          }
        }
      }
      for (var k2 = -d + k2start;k2 <= d - k2end; k2 += 2) {
        var k2_offset = v_offset + k2;
        var x2;
        if (k2 == -d || k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1]) {
          x2 = v2[k2_offset + 1];
        } else {
          x2 = v2[k2_offset - 1] + 1;
        }
        var y2 = x2 - k2;
        while (x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) == text2.charAt(text2_length - y2 - 1)) {
          x2++;
          y2++;
        }
        v2[k2_offset] = x2;
        if (x2 > text1_length) {
          k2end += 2;
        } else if (y2 > text2_length) {
          k2start += 2;
        } else if (!front) {
          var k1_offset = v_offset + delta - k2;
          if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {
            var x1 = v1[k1_offset];
            var y1 = v_offset + x1 - k1_offset;
            x2 = text1_length - x2;
            if (x1 >= x2) {
              return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);
            }
          }
        }
      }
    }
    return [
      new diff_match_patch.Diff(DIFF_DELETE, text1),
      new diff_match_patch.Diff(DIFF_INSERT, text2)
    ];
  };
  diff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y, deadline) {
    var text1a = text1.substring(0, x);
    var text2a = text2.substring(0, y);
    var text1b = text1.substring(x);
    var text2b = text2.substring(y);
    var diffs = this.diff_main(text1a, text2a, false, deadline);
    var diffsb = this.diff_main(text1b, text2b, false, deadline);
    return diffs.concat(diffsb);
  };
  diff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {
    var lineArray = [];
    var lineHash = {};
    lineArray[0] = "";
    function diff_linesToCharsMunge_(text) {
      var chars = "";
      var lineStart = 0;
      var lineEnd = -1;
      var lineArrayLength = lineArray.length;
      while (lineEnd < text.length - 1) {
        lineEnd = text.indexOf("\n", lineStart);
        if (lineEnd == -1) {
          lineEnd = text.length - 1;
        }
        var line = text.substring(lineStart, lineEnd + 1);
        if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== undefined) {
          chars += String.fromCharCode(lineHash[line]);
        } else {
          if (lineArrayLength == maxLines) {
            line = text.substring(lineStart);
            lineEnd = text.length;
          }
          chars += String.fromCharCode(lineArrayLength);
          lineHash[line] = lineArrayLength;
          lineArray[lineArrayLength++] = line;
        }
        lineStart = lineEnd + 1;
      }
      return chars;
    }
    var maxLines = 40000;
    var chars1 = diff_linesToCharsMunge_(text1);
    maxLines = 65535;
    var chars2 = diff_linesToCharsMunge_(text2);
    return { chars1, chars2, lineArray };
  };
  diff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {
    for (var i = 0;i < diffs.length; i++) {
      var chars = diffs[i][1];
      var text = [];
      for (var j = 0;j < chars.length; j++) {
        text[j] = lineArray[chars.charCodeAt(j)];
      }
      diffs[i][1] = text.join("");
    }
  };
  diff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {
    if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
      return 0;
    }
    var pointermin = 0;
    var pointermax = Math.min(text1.length, text2.length);
    var pointermid = pointermax;
    var pointerstart = 0;
    while (pointermin < pointermid) {
      if (text1.substring(pointerstart, pointermid) == text2.substring(pointerstart, pointermid)) {
        pointermin = pointermid;
        pointerstart = pointermin;
      } else {
        pointermax = pointermid;
      }
      pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
    }
    return pointermid;
  };
  diff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {
    if (!text1 || !text2 || text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {
      return 0;
    }
    var pointermin = 0;
    var pointermax = Math.min(text1.length, text2.length);
    var pointermid = pointermax;
    var pointerend = 0;
    while (pointermin < pointermid) {
      if (text1.substring(text1.length - pointermid, text1.length - pointerend) == text2.substring(text2.length - pointermid, text2.length - pointerend)) {
        pointermin = pointermid;
        pointerend = pointermin;
      } else {
        pointermax = pointermid;
      }
      pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
    }
    return pointermid;
  };
  diff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {
    var text1_length = text1.length;
    var text2_length = text2.length;
    if (text1_length == 0 || text2_length == 0) {
      return 0;
    }
    if (text1_length > text2_length) {
      text1 = text1.substring(text1_length - text2_length);
    } else if (text1_length < text2_length) {
      text2 = text2.substring(0, text1_length);
    }
    var text_length = Math.min(text1_length, text2_length);
    if (text1 == text2) {
      return text_length;
    }
    var best = 0;
    var length = 1;
    while (true) {
      var pattern = text1.substring(text_length - length);
      var found = text2.indexOf(pattern);
      if (found == -1) {
        return best;
      }
      length += found;
      if (found == 0 || text1.substring(text_length - length) == text2.substring(0, length)) {
        best = length;
        length++;
      }
    }
  };
  diff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {
    if (this.Diff_Timeout <= 0) {
      return null;
    }
    var longtext = text1.length > text2.length ? text1 : text2;
    var shorttext = text1.length > text2.length ? text2 : text1;
    if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
      return null;
    }
    var dmp = this;
    function diff_halfMatchI_(longtext2, shorttext2, i) {
      var seed = longtext2.substring(i, i + Math.floor(longtext2.length / 4));
      var j = -1;
      var best_common = "";
      var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;
      while ((j = shorttext2.indexOf(seed, j + 1)) != -1) {
        var prefixLength = dmp.diff_commonPrefix(longtext2.substring(i), shorttext2.substring(j));
        var suffixLength = dmp.diff_commonSuffix(longtext2.substring(0, i), shorttext2.substring(0, j));
        if (best_common.length < suffixLength + prefixLength) {
          best_common = shorttext2.substring(j - suffixLength, j) + shorttext2.substring(j, j + prefixLength);
          best_longtext_a = longtext2.substring(0, i - suffixLength);
          best_longtext_b = longtext2.substring(i + prefixLength);
          best_shorttext_a = shorttext2.substring(0, j - suffixLength);
          best_shorttext_b = shorttext2.substring(j + prefixLength);
        }
      }
      if (best_common.length * 2 >= longtext2.length) {
        return [
          best_longtext_a,
          best_longtext_b,
          best_shorttext_a,
          best_shorttext_b,
          best_common
        ];
      } else {
        return null;
      }
    }
    var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4));
    var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));
    var hm;
    if (!hm1 && !hm2) {
      return null;
    } else if (!hm2) {
      hm = hm1;
    } else if (!hm1) {
      hm = hm2;
    } else {
      hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
    }
    var text1_a, text1_b, text2_a, text2_b;
    if (text1.length > text2.length) {
      text1_a = hm[0];
      text1_b = hm[1];
      text2_a = hm[2];
      text2_b = hm[3];
    } else {
      text2_a = hm[0];
      text2_b = hm[1];
      text1_a = hm[2];
      text1_b = hm[3];
    }
    var mid_common = hm[4];
    return [text1_a, text1_b, text2_a, text2_b, mid_common];
  };
  diff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {
    var changes = false;
    var equalities = [];
    var equalitiesLength = 0;
    var lastEquality = null;
    var pointer = 0;
    var length_insertions1 = 0;
    var length_deletions1 = 0;
    var length_insertions2 = 0;
    var length_deletions2 = 0;
    while (pointer < diffs.length) {
      if (diffs[pointer][0] == DIFF_EQUAL) {
        equalities[equalitiesLength++] = pointer;
        length_insertions1 = length_insertions2;
        length_deletions1 = length_deletions2;
        length_insertions2 = 0;
        length_deletions2 = 0;
        lastEquality = diffs[pointer][1];
      } else {
        if (diffs[pointer][0] == DIFF_INSERT) {
          length_insertions2 += diffs[pointer][1].length;
        } else {
          length_deletions2 += diffs[pointer][1].length;
        }
        if (lastEquality && lastEquality.length <= Math.max(length_insertions1, length_deletions1) && lastEquality.length <= Math.max(length_insertions2, length_deletions2)) {
          diffs.splice(equalities[equalitiesLength - 1], 0, new diff_match_patch.Diff(DIFF_DELETE, lastEquality));
          diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;
          equalitiesLength--;
          equalitiesLength--;
          pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;
          length_insertions1 = 0;
          length_deletions1 = 0;
          length_insertions2 = 0;
          length_deletions2 = 0;
          lastEquality = null;
          changes = true;
        }
      }
      pointer++;
    }
    if (changes) {
      this.diff_cleanupMerge(diffs);
    }
    this.diff_cleanupSemanticLossless(diffs);
    pointer = 1;
    while (pointer < diffs.length) {
      if (diffs[pointer - 1][0] == DIFF_DELETE && diffs[pointer][0] == DIFF_INSERT) {
        var deletion = diffs[pointer - 1][1];
        var insertion = diffs[pointer][1];
        var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);
        var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);
        if (overlap_length1 >= overlap_length2) {
          if (overlap_length1 >= deletion.length / 2 || overlap_length1 >= insertion.length / 2) {
            diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL, insertion.substring(0, overlap_length1)));
            diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlap_length1);
            diffs[pointer + 1][1] = insertion.substring(overlap_length1);
            pointer++;
          }
        } else {
          if (overlap_length2 >= deletion.length / 2 || overlap_length2 >= insertion.length / 2) {
            diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL, deletion.substring(0, overlap_length2)));
            diffs[pointer - 1][0] = DIFF_INSERT;
            diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlap_length2);
            diffs[pointer + 1][0] = DIFF_DELETE;
            diffs[pointer + 1][1] = deletion.substring(overlap_length2);
            pointer++;
          }
        }
        pointer++;
      }
      pointer++;
    }
  };
  diff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {
    function diff_cleanupSemanticScore_(one, two) {
      if (!one || !two) {
        return 6;
      }
      var char1 = one.charAt(one.length - 1);
      var char2 = two.charAt(0);
      var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);
      var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);
      var whitespace1 = nonAlphaNumeric1 && char1.match(diff_match_patch.whitespaceRegex_);
      var whitespace2 = nonAlphaNumeric2 && char2.match(diff_match_patch.whitespaceRegex_);
      var lineBreak1 = whitespace1 && char1.match(diff_match_patch.linebreakRegex_);
      var lineBreak2 = whitespace2 && char2.match(diff_match_patch.linebreakRegex_);
      var blankLine1 = lineBreak1 && one.match(diff_match_patch.blanklineEndRegex_);
      var blankLine2 = lineBreak2 && two.match(diff_match_patch.blanklineStartRegex_);
      if (blankLine1 || blankLine2) {
        return 5;
      } else if (lineBreak1 || lineBreak2) {
        return 4;
      } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {
        return 3;
      } else if (whitespace1 || whitespace2) {
        return 2;
      } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {
        return 1;
      }
      return 0;
    }
    var pointer = 1;
    while (pointer < diffs.length - 1) {
      if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {
        var equality1 = diffs[pointer - 1][1];
        var edit = diffs[pointer][1];
        var equality2 = diffs[pointer + 1][1];
        var commonOffset = this.diff_commonSuffix(equality1, edit);
        if (commonOffset) {
          var commonString = edit.substring(edit.length - commonOffset);
          equality1 = equality1.substring(0, equality1.length - commonOffset);
          edit = commonString + edit.substring(0, edit.length - commonOffset);
          equality2 = commonString + equality2;
        }
        var bestEquality1 = equality1;
        var bestEdit = edit;
        var bestEquality2 = equality2;
        var bestScore = diff_cleanupSemanticScore_(equality1, edit) + diff_cleanupSemanticScore_(edit, equality2);
        while (edit.charAt(0) === equality2.charAt(0)) {
          equality1 += edit.charAt(0);
          edit = edit.substring(1) + equality2.charAt(0);
          equality2 = equality2.substring(1);
          var score = diff_cleanupSemanticScore_(equality1, edit) + diff_cleanupSemanticScore_(edit, equality2);
          if (score >= bestScore) {
            bestScore = score;
            bestEquality1 = equality1;
            bestEdit = edit;
            bestEquality2 = equality2;
          }
        }
        if (diffs[pointer - 1][1] != bestEquality1) {
          if (bestEquality1) {
            diffs[pointer - 1][1] = bestEquality1;
          } else {
            diffs.splice(pointer - 1, 1);
            pointer--;
          }
          diffs[pointer][1] = bestEdit;
          if (bestEquality2) {
            diffs[pointer + 1][1] = bestEquality2;
          } else {
            diffs.splice(pointer + 1, 1);
            pointer--;
          }
        }
      }
      pointer++;
    }
  };
  diff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;
  diff_match_patch.whitespaceRegex_ = /\s/;
  diff_match_patch.linebreakRegex_ = /[\r\n]/;
  diff_match_patch.blanklineEndRegex_ = /\n\r?\n$/;
  diff_match_patch.blanklineStartRegex_ = /^\r?\n\r?\n/;
  diff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {
    var changes = false;
    var equalities = [];
    var equalitiesLength = 0;
    var lastEquality = null;
    var pointer = 0;
    var pre_ins = false;
    var pre_del = false;
    var post_ins = false;
    var post_del = false;
    while (pointer < diffs.length) {
      if (diffs[pointer][0] == DIFF_EQUAL) {
        if (diffs[pointer][1].length < this.Diff_EditCost && (post_ins || post_del)) {
          equalities[equalitiesLength++] = pointer;
          pre_ins = post_ins;
          pre_del = post_del;
          lastEquality = diffs[pointer][1];
        } else {
          equalitiesLength = 0;
          lastEquality = null;
        }
        post_ins = post_del = false;
      } else {
        if (diffs[pointer][0] == DIFF_DELETE) {
          post_del = true;
        } else {
          post_ins = true;
        }
        if (lastEquality && (pre_ins && pre_del && post_ins && post_del || lastEquality.length < this.Diff_EditCost / 2 && pre_ins + pre_del + post_ins + post_del == 3)) {
          diffs.splice(equalities[equalitiesLength - 1], 0, new diff_match_patch.Diff(DIFF_DELETE, lastEquality));
          diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;
          equalitiesLength--;
          lastEquality = null;
          if (pre_ins && pre_del) {
            post_ins = post_del = true;
            equalitiesLength = 0;
          } else {
            equalitiesLength--;
            pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;
            post_ins = post_del = false;
          }
          changes = true;
        }
      }
      pointer++;
    }
    if (changes) {
      this.diff_cleanupMerge(diffs);
    }
  };
  diff_match_patch.prototype.diff_cleanupMerge = function(diffs) {
    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ""));
    var pointer = 0;
    var count_delete = 0;
    var count_insert = 0;
    var text_delete = "";
    var text_insert = "";
    var commonlength;
    while (pointer < diffs.length) {
      switch (diffs[pointer][0]) {
        case DIFF_INSERT:
          count_insert++;
          text_insert += diffs[pointer][1];
          pointer++;
          break;
        case DIFF_DELETE:
          count_delete++;
          text_delete += diffs[pointer][1];
          pointer++;
          break;
        case DIFF_EQUAL:
          if (count_delete + count_insert > 1) {
            if (count_delete !== 0 && count_insert !== 0) {
              commonlength = this.diff_commonPrefix(text_insert, text_delete);
              if (commonlength !== 0) {
                if (pointer - count_delete - count_insert > 0 && diffs[pointer - count_delete - count_insert - 1][0] == DIFF_EQUAL) {
                  diffs[pointer - count_delete - count_insert - 1][1] += text_insert.substring(0, commonlength);
                } else {
                  diffs.splice(0, 0, new diff_match_patch.Diff(DIFF_EQUAL, text_insert.substring(0, commonlength)));
                  pointer++;
                }
                text_insert = text_insert.substring(commonlength);
                text_delete = text_delete.substring(commonlength);
              }
              commonlength = this.diff_commonSuffix(text_insert, text_delete);
              if (commonlength !== 0) {
                diffs[pointer][1] = text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];
                text_insert = text_insert.substring(0, text_insert.length - commonlength);
                text_delete = text_delete.substring(0, text_delete.length - commonlength);
              }
            }
            pointer -= count_delete + count_insert;
            diffs.splice(pointer, count_delete + count_insert);
            if (text_delete.length) {
              diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_DELETE, text_delete));
              pointer++;
            }
            if (text_insert.length) {
              diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_INSERT, text_insert));
              pointer++;
            }
            pointer++;
          } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {
            diffs[pointer - 1][1] += diffs[pointer][1];
            diffs.splice(pointer, 1);
          } else {
            pointer++;
          }
          count_insert = 0;
          count_delete = 0;
          text_delete = "";
          text_insert = "";
          break;
      }
    }
    if (diffs[diffs.length - 1][1] === "") {
      diffs.pop();
    }
    var changes = false;
    pointer = 1;
    while (pointer < diffs.length - 1) {
      if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {
        if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {
          diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);
          diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
          diffs.splice(pointer - 1, 1);
          changes = true;
        } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) == diffs[pointer + 1][1]) {
          diffs[pointer - 1][1] += diffs[pointer + 1][1];
          diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];
          diffs.splice(pointer + 1, 1);
          changes = true;
        }
      }
      pointer++;
    }
    if (changes) {
      this.diff_cleanupMerge(diffs);
    }
  };
  diff_match_patch.prototype.diff_xIndex = function(diffs, loc) {
    var chars1 = 0;
    var chars2 = 0;
    var last_chars1 = 0;
    var last_chars2 = 0;
    var x;
    for (x = 0;x < diffs.length; x++) {
      if (diffs[x][0] !== DIFF_INSERT) {
        chars1 += diffs[x][1].length;
      }
      if (diffs[x][0] !== DIFF_DELETE) {
        chars2 += diffs[x][1].length;
      }
      if (chars1 > loc) {
        break;
      }
      last_chars1 = chars1;
      last_chars2 = chars2;
    }
    if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {
      return last_chars2;
    }
    return last_chars2 + (loc - last_chars1);
  };
  diff_match_patch.prototype.diff_prettyHtml = function(diffs) {
    var html = [];
    var pattern_amp = /&/g;
    var pattern_lt = /</g;
    var pattern_gt = />/g;
    var pattern_para = /\n/g;
    for (var x = 0;x < diffs.length; x++) {
      var op = diffs[x][0];
      var data = diffs[x][1];
      var text = data.replace(pattern_amp, "&amp;").replace(pattern_lt, "&lt;").replace(pattern_gt, "&gt;").replace(pattern_para, "&para;<br>");
      switch (op) {
        case DIFF_INSERT:
          html[x] = '<ins style="background:#e6ffe6;">' + text + "</ins>";
          break;
        case DIFF_DELETE:
          html[x] = '<del style="background:#ffe6e6;">' + text + "</del>";
          break;
        case DIFF_EQUAL:
          html[x] = "<span>" + text + "</span>";
          break;
      }
    }
    return html.join("");
  };
  diff_match_patch.prototype.diff_text1 = function(diffs) {
    var text = [];
    for (var x = 0;x < diffs.length; x++) {
      if (diffs[x][0] !== DIFF_INSERT) {
        text[x] = diffs[x][1];
      }
    }
    return text.join("");
  };
  diff_match_patch.prototype.diff_text2 = function(diffs) {
    var text = [];
    for (var x = 0;x < diffs.length; x++) {
      if (diffs[x][0] !== DIFF_DELETE) {
        text[x] = diffs[x][1];
      }
    }
    return text.join("");
  };
  diff_match_patch.prototype.diff_levenshtein = function(diffs) {
    var levenshtein = 0;
    var insertions = 0;
    var deletions = 0;
    for (var x = 0;x < diffs.length; x++) {
      var op = diffs[x][0];
      var data = diffs[x][1];
      switch (op) {
        case DIFF_INSERT:
          insertions += data.length;
          break;
        case DIFF_DELETE:
          deletions += data.length;
          break;
        case DIFF_EQUAL:
          levenshtein += Math.max(insertions, deletions);
          insertions = 0;
          deletions = 0;
          break;
      }
    }
    levenshtein += Math.max(insertions, deletions);
    return levenshtein;
  };
  diff_match_patch.prototype.diff_toDelta = function(diffs) {
    var text = [];
    for (var x = 0;x < diffs.length; x++) {
      switch (diffs[x][0]) {
        case DIFF_INSERT:
          text[x] = "+" + encodeURI(diffs[x][1]);
          break;
        case DIFF_DELETE:
          text[x] = "-" + diffs[x][1].length;
          break;
        case DIFF_EQUAL:
          text[x] = "=" + diffs[x][1].length;
          break;
      }
    }
    return text.join("\t").replace(/%20/g, " ");
  };
  diff_match_patch.prototype.diff_fromDelta = function(text1, delta) {
    var diffs = [];
    var diffsLength = 0;
    var pointer = 0;
    var tokens = delta.split(/\t/g);
    for (var x = 0;x < tokens.length; x++) {
      var param = tokens[x].substring(1);
      switch (tokens[x].charAt(0)) {
        case "+":
          try {
            diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_INSERT, decodeURI(param));
          } catch (ex) {
            throw new Error("Illegal escape in diff_fromDelta: " + param);
          }
          break;
        case "-":
        case "=":
          var n = parseInt(param, 10);
          if (isNaN(n) || n < 0) {
            throw new Error("Invalid number in diff_fromDelta: " + param);
          }
          var text = text1.substring(pointer, pointer += n);
          if (tokens[x].charAt(0) == "=") {
            diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_EQUAL, text);
          } else {
            diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_DELETE, text);
          }
          break;
        default:
          if (tokens[x]) {
            throw new Error("Invalid diff operation in diff_fromDelta: " + tokens[x]);
          }
      }
    }
    if (pointer != text1.length) {
      throw new Error("Delta length (" + pointer + ") does not equal source text length (" + text1.length + ").");
    }
    return diffs;
  };
  diff_match_patch.prototype.match_main = function(text, pattern, loc) {
    if (text == null || pattern == null || loc == null) {
      throw new Error("Null input. (match_main)");
    }
    loc = Math.max(0, Math.min(loc, text.length));
    if (text == pattern) {
      return 0;
    } else if (!text.length) {
      return -1;
    } else if (text.substring(loc, loc + pattern.length) == pattern) {
      return loc;
    } else {
      return this.match_bitap_(text, pattern, loc);
    }
  };
  diff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {
    if (pattern.length > this.Match_MaxBits) {
      throw new Error("Pattern too long for this browser.");
    }
    var s = this.match_alphabet_(pattern);
    var dmp = this;
    function match_bitapScore_(e, x) {
      var accuracy = e / pattern.length;
      var proximity = Math.abs(loc - x);
      if (!dmp.Match_Distance) {
        return proximity ? 1 : accuracy;
      }
      return accuracy + proximity / dmp.Match_Distance;
    }
    var score_threshold = this.Match_Threshold;
    var best_loc = text.indexOf(pattern, loc);
    if (best_loc != -1) {
      score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);
      best_loc = text.lastIndexOf(pattern, loc + pattern.length);
      if (best_loc != -1) {
        score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);
      }
    }
    var matchmask = 1 << pattern.length - 1;
    best_loc = -1;
    var bin_min, bin_mid;
    var bin_max = pattern.length + text.length;
    var last_rd;
    for (var d = 0;d < pattern.length; d++) {
      bin_min = 0;
      bin_mid = bin_max;
      while (bin_min < bin_mid) {
        if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {
          bin_min = bin_mid;
        } else {
          bin_max = bin_mid;
        }
        bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);
      }
      bin_max = bin_mid;
      var start = Math.max(1, loc - bin_mid + 1);
      var finish = Math.min(loc + bin_mid, text.length) + pattern.length;
      var rd = Array(finish + 2);
      rd[finish + 1] = (1 << d) - 1;
      for (var j = finish;j >= start; j--) {
        var charMatch = s[text.charAt(j - 1)];
        if (d === 0) {
          rd[j] = (rd[j + 1] << 1 | 1) & charMatch;
        } else {
          rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((last_rd[j + 1] | last_rd[j]) << 1 | 1) | last_rd[j + 1];
        }
        if (rd[j] & matchmask) {
          var score = match_bitapScore_(d, j - 1);
          if (score <= score_threshold) {
            score_threshold = score;
            best_loc = j - 1;
            if (best_loc > loc) {
              start = Math.max(1, 2 * loc - best_loc);
            } else {
              break;
            }
          }
        }
      }
      if (match_bitapScore_(d + 1, loc) > score_threshold) {
        break;
      }
      last_rd = rd;
    }
    return best_loc;
  };
  diff_match_patch.prototype.match_alphabet_ = function(pattern) {
    var s = {};
    for (var i = 0;i < pattern.length; i++) {
      s[pattern.charAt(i)] = 0;
    }
    for (var i = 0;i < pattern.length; i++) {
      s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;
    }
    return s;
  };
  diff_match_patch.prototype.patch_addContext_ = function(patch, text) {
    if (text.length == 0) {
      return;
    }
    if (patch.start2 === null) {
      throw Error("patch not initialized");
    }
    var pattern = text.substring(patch.start2, patch.start2 + patch.length1);
    var padding = 0;
    while (text.indexOf(pattern) != text.lastIndexOf(pattern) && pattern.length < this.Match_MaxBits - this.Patch_Margin - this.Patch_Margin) {
      padding += this.Patch_Margin;
      pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);
    }
    padding += this.Patch_Margin;
    var prefix = text.substring(patch.start2 - padding, patch.start2);
    if (prefix) {
      patch.diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, prefix));
    }
    var suffix = text.substring(patch.start2 + patch.length1, patch.start2 + patch.length1 + padding);
    if (suffix) {
      patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, suffix));
    }
    patch.start1 -= prefix.length;
    patch.start2 -= prefix.length;
    patch.length1 += prefix.length + suffix.length;
    patch.length2 += prefix.length + suffix.length;
  };
  diff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {
    var text1, diffs;
    if (typeof a == "string" && typeof opt_b == "string" && typeof opt_c == "undefined") {
      text1 = a;
      diffs = this.diff_main(text1, opt_b, true);
      if (diffs.length > 2) {
        this.diff_cleanupSemantic(diffs);
        this.diff_cleanupEfficiency(diffs);
      }
    } else if (a && typeof a == "object" && typeof opt_b == "undefined" && typeof opt_c == "undefined") {
      diffs = a;
      text1 = this.diff_text1(diffs);
    } else if (typeof a == "string" && opt_b && typeof opt_b == "object" && typeof opt_c == "undefined") {
      text1 = a;
      diffs = opt_b;
    } else if (typeof a == "string" && typeof opt_b == "string" && opt_c && typeof opt_c == "object") {
      text1 = a;
      diffs = opt_c;
    } else {
      throw new Error("Unknown call format to patch_make.");
    }
    if (diffs.length === 0) {
      return [];
    }
    var patches = [];
    var patch = new diff_match_patch.patch_obj;
    var patchDiffLength = 0;
    var char_count1 = 0;
    var char_count2 = 0;
    var prepatch_text = text1;
    var postpatch_text = text1;
    for (var x = 0;x < diffs.length; x++) {
      var diff_type = diffs[x][0];
      var diff_text = diffs[x][1];
      if (!patchDiffLength && diff_type !== DIFF_EQUAL) {
        patch.start1 = char_count1;
        patch.start2 = char_count2;
      }
      switch (diff_type) {
        case DIFF_INSERT:
          patch.diffs[patchDiffLength++] = diffs[x];
          patch.length2 += diff_text.length;
          postpatch_text = postpatch_text.substring(0, char_count2) + diff_text + postpatch_text.substring(char_count2);
          break;
        case DIFF_DELETE:
          patch.length1 += diff_text.length;
          patch.diffs[patchDiffLength++] = diffs[x];
          postpatch_text = postpatch_text.substring(0, char_count2) + postpatch_text.substring(char_count2 + diff_text.length);
          break;
        case DIFF_EQUAL:
          if (diff_text.length <= 2 * this.Patch_Margin && patchDiffLength && diffs.length != x + 1) {
            patch.diffs[patchDiffLength++] = diffs[x];
            patch.length1 += diff_text.length;
            patch.length2 += diff_text.length;
          } else if (diff_text.length >= 2 * this.Patch_Margin) {
            if (patchDiffLength) {
              this.patch_addContext_(patch, prepatch_text);
              patches.push(patch);
              patch = new diff_match_patch.patch_obj;
              patchDiffLength = 0;
              prepatch_text = postpatch_text;
              char_count1 = char_count2;
            }
          }
          break;
      }
      if (diff_type !== DIFF_INSERT) {
        char_count1 += diff_text.length;
      }
      if (diff_type !== DIFF_DELETE) {
        char_count2 += diff_text.length;
      }
    }
    if (patchDiffLength) {
      this.patch_addContext_(patch, prepatch_text);
      patches.push(patch);
    }
    return patches;
  };
  diff_match_patch.prototype.patch_deepCopy = function(patches) {
    var patchesCopy = [];
    for (var x = 0;x < patches.length; x++) {
      var patch = patches[x];
      var patchCopy = new diff_match_patch.patch_obj;
      patchCopy.diffs = [];
      for (var y = 0;y < patch.diffs.length; y++) {
        patchCopy.diffs[y] = new diff_match_patch.Diff(patch.diffs[y][0], patch.diffs[y][1]);
      }
      patchCopy.start1 = patch.start1;
      patchCopy.start2 = patch.start2;
      patchCopy.length1 = patch.length1;
      patchCopy.length2 = patch.length2;
      patchesCopy[x] = patchCopy;
    }
    return patchesCopy;
  };
  diff_match_patch.prototype.patch_apply = function(patches, text) {
    if (patches.length == 0) {
      return [text, []];
    }
    patches = this.patch_deepCopy(patches);
    var nullPadding = this.patch_addPadding(patches);
    text = nullPadding + text + nullPadding;
    this.patch_splitMax(patches);
    var delta = 0;
    var results = [];
    for (var x = 0;x < patches.length; x++) {
      var expected_loc = patches[x].start2 + delta;
      var text1 = this.diff_text1(patches[x].diffs);
      var start_loc;
      var end_loc = -1;
      if (text1.length > this.Match_MaxBits) {
        start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits), expected_loc);
        if (start_loc != -1) {
          end_loc = this.match_main(text, text1.substring(text1.length - this.Match_MaxBits), expected_loc + text1.length - this.Match_MaxBits);
          if (end_loc == -1 || start_loc >= end_loc) {
            start_loc = -1;
          }
        }
      } else {
        start_loc = this.match_main(text, text1, expected_loc);
      }
      if (start_loc == -1) {
        results[x] = false;
        delta -= patches[x].length2 - patches[x].length1;
      } else {
        results[x] = true;
        delta = start_loc - expected_loc;
        var text2;
        if (end_loc == -1) {
          text2 = text.substring(start_loc, start_loc + text1.length);
        } else {
          text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);
        }
        if (text1 == text2) {
          text = text.substring(0, start_loc) + this.diff_text2(patches[x].diffs) + text.substring(start_loc + text1.length);
        } else {
          var diffs = this.diff_main(text1, text2, false);
          if (text1.length > this.Match_MaxBits && this.diff_levenshtein(diffs) / text1.length > this.Patch_DeleteThreshold) {
            results[x] = false;
          } else {
            this.diff_cleanupSemanticLossless(diffs);
            var index1 = 0;
            var index2;
            for (var y = 0;y < patches[x].diffs.length; y++) {
              var mod = patches[x].diffs[y];
              if (mod[0] !== DIFF_EQUAL) {
                index2 = this.diff_xIndex(diffs, index1);
              }
              if (mod[0] === DIFF_INSERT) {
                text = text.substring(0, start_loc + index2) + mod[1] + text.substring(start_loc + index2);
              } else if (mod[0] === DIFF_DELETE) {
                text = text.substring(0, start_loc + index2) + text.substring(start_loc + this.diff_xIndex(diffs, index1 + mod[1].length));
              }
              if (mod[0] !== DIFF_DELETE) {
                index1 += mod[1].length;
              }
            }
          }
        }
      }
    }
    text = text.substring(nullPadding.length, text.length - nullPadding.length);
    return [text, results];
  };
  diff_match_patch.prototype.patch_addPadding = function(patches) {
    var paddingLength = this.Patch_Margin;
    var nullPadding = "";
    for (var x = 1;x <= paddingLength; x++) {
      nullPadding += String.fromCharCode(x);
    }
    for (var x = 0;x < patches.length; x++) {
      patches[x].start1 += paddingLength;
      patches[x].start2 += paddingLength;
    }
    var patch = patches[0];
    var diffs = patch.diffs;
    if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {
      diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));
      patch.start1 -= paddingLength;
      patch.start2 -= paddingLength;
      patch.length1 += paddingLength;
      patch.length2 += paddingLength;
    } else if (paddingLength > diffs[0][1].length) {
      var extraLength = paddingLength - diffs[0][1].length;
      diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];
      patch.start1 -= extraLength;
      patch.start2 -= extraLength;
      patch.length1 += extraLength;
      patch.length2 += extraLength;
    }
    patch = patches[patches.length - 1];
    diffs = patch.diffs;
    if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {
      diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));
      patch.length1 += paddingLength;
      patch.length2 += paddingLength;
    } else if (paddingLength > diffs[diffs.length - 1][1].length) {
      var extraLength = paddingLength - diffs[diffs.length - 1][1].length;
      diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);
      patch.length1 += extraLength;
      patch.length2 += extraLength;
    }
    return nullPadding;
  };
  diff_match_patch.prototype.patch_splitMax = function(patches) {
    var patch_size = this.Match_MaxBits;
    for (var x = 0;x < patches.length; x++) {
      if (patches[x].length1 <= patch_size) {
        continue;
      }
      var bigpatch = patches[x];
      patches.splice(x--, 1);
      var start1 = bigpatch.start1;
      var start2 = bigpatch.start2;
      var precontext = "";
      while (bigpatch.diffs.length !== 0) {
        var patch = new diff_match_patch.patch_obj;
        var empty = true;
        patch.start1 = start1 - precontext.length;
        patch.start2 = start2 - precontext.length;
        if (precontext !== "") {
          patch.length1 = patch.length2 = precontext.length;
          patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, precontext));
        }
        while (bigpatch.diffs.length !== 0 && patch.length1 < patch_size - this.Patch_Margin) {
          var diff_type = bigpatch.diffs[0][0];
          var diff_text = bigpatch.diffs[0][1];
          if (diff_type === DIFF_INSERT) {
            patch.length2 += diff_text.length;
            start2 += diff_text.length;
            patch.diffs.push(bigpatch.diffs.shift());
            empty = false;
          } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 && patch.diffs[0][0] == DIFF_EQUAL && diff_text.length > 2 * patch_size) {
            patch.length1 += diff_text.length;
            start1 += diff_text.length;
            empty = false;
            patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));
            bigpatch.diffs.shift();
          } else {
            diff_text = diff_text.substring(0, patch_size - patch.length1 - this.Patch_Margin);
            patch.length1 += diff_text.length;
            start1 += diff_text.length;
            if (diff_type === DIFF_EQUAL) {
              patch.length2 += diff_text.length;
              start2 += diff_text.length;
            } else {
              empty = false;
            }
            patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));
            if (diff_text == bigpatch.diffs[0][1]) {
              bigpatch.diffs.shift();
            } else {
              bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diff_text.length);
            }
          }
        }
        precontext = this.diff_text2(patch.diffs);
        precontext = precontext.substring(precontext.length - this.Patch_Margin);
        var postcontext = this.diff_text1(bigpatch.diffs).substring(0, this.Patch_Margin);
        if (postcontext !== "") {
          patch.length1 += postcontext.length;
          patch.length2 += postcontext.length;
          if (patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {
            patch.diffs[patch.diffs.length - 1][1] += postcontext;
          } else {
            patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, postcontext));
          }
        }
        if (!empty) {
          patches.splice(++x, 0, patch);
        }
      }
    }
  };
  diff_match_patch.prototype.patch_toText = function(patches) {
    var text = [];
    for (var x = 0;x < patches.length; x++) {
      text[x] = patches[x];
    }
    return text.join("");
  };
  diff_match_patch.prototype.patch_fromText = function(textline) {
    var patches = [];
    if (!textline) {
      return patches;
    }
    var text = textline.split("\n");
    var textPointer = 0;
    var patchHeader = /^@@ -(\d+),?(\d*) \+(\d+),?(\d*) @@$/;
    while (textPointer < text.length) {
      var m = text[textPointer].match(patchHeader);
      if (!m) {
        throw new Error("Invalid patch string: " + text[textPointer]);
      }
      var patch = new diff_match_patch.patch_obj;
      patches.push(patch);
      patch.start1 = parseInt(m[1], 10);
      if (m[2] === "") {
        patch.start1--;
        patch.length1 = 1;
      } else if (m[2] == "0") {
        patch.length1 = 0;
      } else {
        patch.start1--;
        patch.length1 = parseInt(m[2], 10);
      }
      patch.start2 = parseInt(m[3], 10);
      if (m[4] === "") {
        patch.start2--;
        patch.length2 = 1;
      } else if (m[4] == "0") {
        patch.length2 = 0;
      } else {
        patch.start2--;
        patch.length2 = parseInt(m[4], 10);
      }
      textPointer++;
      while (textPointer < text.length) {
        var sign = text[textPointer].charAt(0);
        try {
          var line = decodeURI(text[textPointer].substring(1));
        } catch (ex) {
          throw new Error("Illegal escape in patch_fromText: " + line);
        }
        if (sign == "-") {
          patch.diffs.push(new diff_match_patch.Diff(DIFF_DELETE, line));
        } else if (sign == "+") {
          patch.diffs.push(new diff_match_patch.Diff(DIFF_INSERT, line));
        } else if (sign == " ") {
          patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, line));
        } else if (sign == "@") {
          break;
        } else if (sign === "") {
        } else {
          throw new Error('Invalid patch mode "' + sign + '" in: ' + line);
        }
        textPointer++;
      }
    }
    return patches;
  };
  diff_match_patch.patch_obj = function() {
    this.diffs = [];
    this.start1 = null;
    this.start2 = null;
    this.length1 = 0;
    this.length2 = 0;
  };
  diff_match_patch.patch_obj.prototype.toString = function() {
    var coords1, coords2;
    if (this.length1 === 0) {
      coords1 = this.start1 + ",0";
    } else if (this.length1 == 1) {
      coords1 = this.start1 + 1;
    } else {
      coords1 = this.start1 + 1 + "," + this.length1;
    }
    if (this.length2 === 0) {
      coords2 = this.start2 + ",0";
    } else if (this.length2 == 1) {
      coords2 = this.start2 + 1;
    } else {
      coords2 = this.start2 + 1 + "," + this.length2;
    }
    var text = ["@@ -" + coords1 + " +" + coords2 + " @@\n"];
    var op;
    for (var x = 0;x < this.diffs.length; x++) {
      switch (this.diffs[x][0]) {
        case DIFF_INSERT:
          op = "+";
          break;
        case DIFF_DELETE:
          op = "-";
          break;
        case DIFF_EQUAL:
          op = " ";
          break;
      }
      text[x + 1] = op + encodeURI(this.diffs[x][1]) + "\n";
    }
    return text.join("").replace(/%20/g, " ");
  };
  module.exports = { diff_match_patch, DIFF_INSERT, DIFF_DELETE, DIFF_EQUAL };
});

// node_modules/playwright-core/lib/utils/comparators.js
var require_comparators = __commonJS((exports) => {
  var getComparator = function(mimeType) {
    if (mimeType === "image/png")
      return compareImages.bind(null, "image/png");
    if (mimeType === "image/jpeg")
      return compareImages.bind(null, "image/jpeg");
    if (mimeType === "text/plain")
      return compareText;
    return compareBuffersOrStrings;
  };
  var compareBuffersOrStrings = function(actualBuffer, expectedBuffer) {
    if (typeof actualBuffer === "string")
      return compareText(actualBuffer, expectedBuffer);
    if (!actualBuffer || !(actualBuffer instanceof Buffer))
      return {
        errorMessage: "Actual result should be a Buffer or a string."
      };
    if (Buffer.compare(actualBuffer, expectedBuffer))
      return {
        errorMessage: "Buffers differ"
      };
    return null;
  };
  var compareImages = function(mimeType, actualBuffer, expectedBuffer, options = {}) {
    var _options$comparator, _ref;
    if (!actualBuffer || !(actualBuffer instanceof Buffer))
      return {
        errorMessage: "Actual result should be a Buffer."
      };
    validateBuffer(expectedBuffer, mimeType);
    let actual = mimeType === "image/png" ? _utilsBundle.PNG.sync.read(actualBuffer) : _utilsBundle.jpegjs.decode(actualBuffer, {
      maxMemoryUsageInMB: JPEG_JS_MAX_BUFFER_SIZE_IN_MB
    });
    let expected = mimeType === "image/png" ? _utilsBundle.PNG.sync.read(expectedBuffer) : _utilsBundle.jpegjs.decode(expectedBuffer, {
      maxMemoryUsageInMB: JPEG_JS_MAX_BUFFER_SIZE_IN_MB
    });
    const size = {
      width: Math.max(expected.width, actual.width),
      height: Math.max(expected.height, actual.height)
    };
    let sizesMismatchError = "";
    if (expected.width !== actual.width || expected.height !== actual.height) {
      sizesMismatchError = `Expected an image ${expected.width}px by ${expected.height}px, received ${actual.width}px by ${actual.height}px. `;
      actual = resizeImage(actual, size);
      expected = resizeImage(expected, size);
    }
    const diff = new _utilsBundle.PNG({
      width: size.width,
      height: size.height
    });
    let count;
    if (options.comparator === "ssim-cie94") {
      count = (0, _compare.compare)(expected.data, actual.data, diff.data, size.width, size.height, {
        maxColorDeltaE94: 1
      });
    } else if (((_options$comparator = options.comparator) !== null && _options$comparator !== undefined ? _options$comparator : "pixelmatch") === "pixelmatch") {
      var _options$threshold;
      count = pixelmatch(expected.data, actual.data, diff.data, size.width, size.height, {
        threshold: (_options$threshold = options.threshold) !== null && _options$threshold !== undefined ? _options$threshold : 0.2
      });
    } else {
      throw new Error(`Configuration specifies unknown comparator "${options.comparator}"`);
    }
    const maxDiffPixels1 = options.maxDiffPixels;
    const maxDiffPixels2 = options.maxDiffPixelRatio !== undefined ? expected.width * expected.height * options.maxDiffPixelRatio : undefined;
    let maxDiffPixels;
    if (maxDiffPixels1 !== undefined && maxDiffPixels2 !== undefined)
      maxDiffPixels = Math.min(maxDiffPixels1, maxDiffPixels2);
    else
      maxDiffPixels = (_ref = maxDiffPixels1 !== null && maxDiffPixels1 !== undefined ? maxDiffPixels1 : maxDiffPixels2) !== null && _ref !== undefined ? _ref : 0;
    const ratio = Math.ceil(count / (expected.width * expected.height) * 100) / 100;
    const pixelsMismatchError = count > maxDiffPixels ? `${count} pixels (ratio ${ratio.toFixed(2)} of all image pixels) are different.` : "";
    if (pixelsMismatchError || sizesMismatchError)
      return {
        errorMessage: sizesMismatchError + pixelsMismatchError,
        diff: _utilsBundle.PNG.sync.write(diff)
      };
    return null;
  };
  var validateBuffer = function(buffer, mimeType) {
    if (mimeType === "image/png") {
      const pngMagicNumber = [137, 80, 78, 71, 13, 10, 26, 10];
      if (buffer.length < pngMagicNumber.length || !pngMagicNumber.every((byte, index) => buffer[index] === byte))
        throw new Error("could not decode image as PNG.");
    } else if (mimeType === "image/jpeg") {
      const jpegMagicNumber = [255, 216];
      if (buffer.length < jpegMagicNumber.length || !jpegMagicNumber.every((byte, index) => buffer[index] === byte))
        throw new Error("could not decode image as JPEG.");
    }
  };
  var compareText = function(actual, expectedBuffer) {
    if (typeof actual !== "string")
      return {
        errorMessage: "Actual result should be a string"
      };
    const expected = expectedBuffer.toString("utf-8");
    if (expected === actual)
      return null;
    const dmp = new diff_match_patch;
    const d = dmp.diff_main(expected, actual);
    dmp.diff_cleanupSemantic(d);
    return {
      errorMessage: diff_prettyTerminal(d)
    };
  };
  var diff_prettyTerminal = function(diffs) {
    const html = [];
    for (let x = 0;x < diffs.length; x++) {
      const op = diffs[x][0];
      const data = diffs[x][1];
      const text = data;
      switch (op) {
        case DIFF_INSERT:
          html[x] = _utilsBundle.colors.green(text);
          break;
        case DIFF_DELETE:
          html[x] = _utilsBundle.colors.reset(_utilsBundle.colors.strikethrough(_utilsBundle.colors.red(text)));
          break;
        case DIFF_EQUAL:
          html[x] = text;
          break;
      }
    }
    return html.join("");
  };
  var resizeImage = function(image, size) {
    if (image.width === size.width && image.height === size.height)
      return image;
    const buffer = new Uint8Array(size.width * size.height * 4);
    for (let y = 0;y < size.height; y++) {
      for (let x = 0;x < size.width; x++) {
        const to = (y * size.width + x) * 4;
        if (y < image.height && x < image.width) {
          const from = (y * image.width + x) * 4;
          buffer[to] = image.data[from];
          buffer[to + 1] = image.data[from + 1];
          buffer[to + 2] = image.data[from + 2];
          buffer[to + 3] = image.data[from + 3];
        } else {
          buffer[to] = 0;
          buffer[to + 1] = 0;
          buffer[to + 2] = 0;
          buffer[to + 3] = 0;
        }
      }
    }
    return {
      data: Buffer.from(buffer),
      width: size.width,
      height: size.height
    };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getComparator = getComparator;
  var _utilsBundle = require_utilsBundle();
  var _compare = require_compare();
  var pixelmatch = require_pixelmatch();
  var {
    diff_match_patch,
    DIFF_INSERT,
    DIFF_DELETE,
    DIFF_EQUAL
  } = require_diff_match_patch();
  var JPEG_JS_MAX_BUFFER_SIZE_IN_MB = 5 * 1024;
});

// node_modules/playwright-core/lib/utils/crypto.js
var require_crypto = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var createGuid = function() {
    return _crypto.default.randomBytes(16).toString("hex");
  };
  var calculateSha1 = function(buffer) {
    const hash = _crypto.default.createHash("sha1");
    hash.update(buffer);
    return hash.digest("hex");
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.calculateSha1 = calculateSha1;
  exports.createGuid = createGuid;
  var _crypto = _interopRequireDefault(import.meta.require("crypto"));
});

// node_modules/playwright-core/lib/utils/env.js
var require_env = __commonJS((exports) => {
  var getFromENV = function(name) {
    let value = process.env[name];
    value = value === undefined ? process.env[`npm_config_${name.toLowerCase()}`] : value;
    value = value === undefined ? process.env[`npm_package_config_${name.toLowerCase()}`] : value;
    return value;
  };
  var getAsBooleanFromENV = function(name) {
    const value = getFromENV(name);
    return !!value && value !== "false" && value !== "0";
  };
  var getPackageManager = function() {
    const env = "bun/1.0.29 npm/? node/v21.6.0 darwin arm64";
    if (env.includes("yarn"))
      return "yarn";
    if (env.includes("pnpm"))
      return "pnpm";
    return "npm";
  };
  var getPackageManagerExecCommand = function() {
    const packageManager = getPackageManager();
    if (packageManager === "yarn")
      return "yarn";
    if (packageManager === "pnpm")
      return "pnpm exec";
    return "npx";
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getAsBooleanFromENV = getAsBooleanFromENV;
  exports.getFromENV = getFromENV;
  exports.getPackageManager = getPackageManager;
  exports.getPackageManagerExecCommand = getPackageManagerExecCommand;
});

// node_modules/playwright-core/lib/utils/debug.js
var require_debug5 = __commonJS((exports) => {
  var assert = function(value, message) {
    if (!value)
      throw new Error(message || "Assertion error");
  };
  var debugAssert = function(value, message) {
    if (isUnderTest() && !value)
      throw new Error(message);
  };
  var debugMode = function() {
    if (debugEnv === "console")
      return "console";
    if (debugEnv === "0" || debugEnv === "false")
      return "";
    return debugEnv ? "inspector" : "";
  };
  var setUnderTest = function() {
    _isUnderTest = true;
  };
  var isUnderTest = function() {
    return _isUnderTest;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.assert = assert;
  exports.debugAssert = debugAssert;
  exports.debugMode = debugMode;
  exports.isUnderTest = isUnderTest;
  exports.setUnderTest = setUnderTest;
  var _env = require_env();
  var debugEnv = (0, _env.getFromENV)("PWDEBUG") || "";
  var _isUnderTest = !!process.env.PWTEST_UNDER_TEST;
});

// node_modules/playwright-core/lib/utils/eventsHelper.js
var require_eventsHelper = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.eventsHelper = undefined;

  class EventsHelper {
    static addEventListener(emitter, eventName, handler) {
      emitter.on(eventName, handler);
      return {
        emitter,
        eventName,
        handler
      };
    }
    static removeEventListeners(listeners) {
      for (const listener of listeners)
        listener.emitter.removeListener(listener.eventName, listener.handler);
      listeners.splice(0, listeners.length);
    }
  }
  var eventsHelper = exports.eventsHelper = EventsHelper;
});

// node_modules/playwright-core/lib/utils/fileUtils.js
var require_fileUtils = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  async function mkdirIfNeeded(filePath) {
    await _fs.default.promises.mkdir(_path.default.dirname(filePath), {
      recursive: true
    }).catch(() => {
    });
  }
  async function removeFolders(dirs) {
    return await Promise.all(dirs.map((dir) => _fs.default.promises.rm(dir, {
      recursive: true,
      force: true,
      maxRetries: 10
    }).catch((e) => e)));
  }
  var canAccessFile = function(file) {
    if (!file)
      return false;
    try {
      _fs.default.accessSync(file);
      return true;
    } catch (e) {
      return false;
    }
  };
  async function copyFileAndMakeWritable(from, to) {
    await _fs.default.promises.copyFile(from, to);
    await _fs.default.promises.chmod(to, 436);
  }
  var sanitizeForFilePath = function(s) {
    return s.replace(/[\x00-\x2C\x2E-\x2F\x3A-\x40\x5B-\x60\x7B-\x7F]+/g, "-");
  };
  var toPosixPath = function(aPath) {
    return aPath.split(_path.default.sep).join(_path.default.posix.sep);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.canAccessFile = canAccessFile;
  exports.copyFileAndMakeWritable = copyFileAndMakeWritable;
  exports.fileUploadSizeLimit = exports.existsAsync = undefined;
  exports.mkdirIfNeeded = mkdirIfNeeded;
  exports.removeFolders = removeFolders;
  exports.sanitizeForFilePath = sanitizeForFilePath;
  exports.toPosixPath = toPosixPath;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var fileUploadSizeLimit = exports.fileUploadSizeLimit = 50 * 1024 * 1024;
  var existsAsync = (path) => new Promise((resolve) => _fs.default.stat(path, (err) => resolve(!err)));
  exports.existsAsync = existsAsync;
});

// node_modules/playwright-core/lib/utils/headers.js
var require_headers = __commonJS((exports) => {
  var headersObjectToArray = function(headers, separator, setCookieSeparator) {
    if (!setCookieSeparator)
      setCookieSeparator = separator;
    const result = [];
    for (const name in headers) {
      const values = headers[name];
      if (values === undefined)
        continue;
      if (separator) {
        const sep = name.toLowerCase() === "set-cookie" ? setCookieSeparator : separator;
        for (const value of values.split(sep))
          result.push({
            name,
            value: value.trim()
          });
      } else {
        result.push({
          name,
          value: values
        });
      }
    }
    return result;
  };
  var headersArrayToObject = function(headers, lowerCase) {
    const result = {};
    for (const {
      name,
      value
    } of headers)
      result[lowerCase ? name.toLowerCase() : name] = value;
    return result;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.headersArrayToObject = headersArrayToObject;
  exports.headersObjectToArray = headersObjectToArray;
});

// node_modules/playwright-core/lib/utils/linuxUtils.js
var require_linuxUtils = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  async function getLinuxDistributionInfo() {
    if (process.platform !== "linux")
      return;
    if (!osRelease && !didFailToReadOSRelease) {
      try {
        var _fields$get, _fields$get2;
        const osReleaseText = await _fs.default.promises.readFile("/etc/os-release", "utf8");
        const fields = parseOSReleaseText(osReleaseText);
        osRelease = {
          id: (_fields$get = fields.get("id")) !== null && _fields$get !== undefined ? _fields$get : "",
          version: (_fields$get2 = fields.get("version_id")) !== null && _fields$get2 !== undefined ? _fields$get2 : ""
        };
      } catch (e) {
        didFailToReadOSRelease = true;
      }
    }
    return osRelease;
  }
  var getLinuxDistributionInfoSync = function() {
    if (process.platform !== "linux")
      return;
    if (!osRelease && !didFailToReadOSRelease) {
      try {
        var _fields$get3, _fields$get4;
        const osReleaseText = _fs.default.readFileSync("/etc/os-release", "utf8");
        const fields = parseOSReleaseText(osReleaseText);
        osRelease = {
          id: (_fields$get3 = fields.get("id")) !== null && _fields$get3 !== undefined ? _fields$get3 : "",
          version: (_fields$get4 = fields.get("version_id")) !== null && _fields$get4 !== undefined ? _fields$get4 : ""
        };
      } catch (e) {
        didFailToReadOSRelease = true;
      }
    }
    return osRelease;
  };
  var parseOSReleaseText = function(osReleaseText) {
    const fields = new Map;
    for (const line of osReleaseText.split("\n")) {
      const tokens = line.split("=");
      const name = tokens.shift();
      let value = tokens.join("=").trim();
      if (value.startsWith('"') && value.endsWith('"'))
        value = value.substring(1, value.length - 1);
      if (!name)
        continue;
      fields.set(name.toLowerCase(), value);
    }
    return fields;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getLinuxDistributionInfo = getLinuxDistributionInfo;
  exports.getLinuxDistributionInfoSync = getLinuxDistributionInfoSync;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var didFailToReadOSRelease = false;
  var osRelease;
});

// node_modules/playwright-core/lib/utils/hostPlatform.js
var require_hostPlatform = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var calculatePlatform = function() {
    const platform = _os.default.platform();
    if (platform === "darwin") {
      const ver = _os.default.release().split(".").map((a) => parseInt(a, 10));
      let macVersion = "";
      if (ver[0] < 18) {
        macVersion = "mac10.13";
      } else if (ver[0] === 18) {
        macVersion = "mac10.14";
      } else if (ver[0] === 19) {
        macVersion = "mac10.15";
      } else {
        const LAST_STABLE_MAC_MAJOR_VERSION = 13;
        macVersion = "mac" + Math.min(ver[0] - 9, LAST_STABLE_MAC_MAJOR_VERSION);
        if (_os.default.cpus().some((cpu) => cpu.model.includes("Apple")))
          macVersion += "-arm64";
      }
      return {
        hostPlatform: macVersion,
        isOfficiallySupportedPlatform: true
      };
    }
    if (platform === "linux") {
      if (!["x64", "arm64"].includes(_os.default.arch()))
        return {
          hostPlatform: "<unknown>",
          isOfficiallySupportedPlatform: false
        };
      const archSuffix = "-" + _os.default.arch();
      const distroInfo = (0, _linuxUtils.getLinuxDistributionInfoSync)();
      if ((distroInfo === null || distroInfo === undefined ? undefined : distroInfo.id) === "ubuntu" || (distroInfo === null || distroInfo === undefined ? undefined : distroInfo.id) === "pop" || (distroInfo === null || distroInfo === undefined ? undefined : distroInfo.id) === "neon" || (distroInfo === null || distroInfo === undefined ? undefined : distroInfo.id) === "tuxedo") {
        const isOfficiallySupportedPlatform2 = (distroInfo === null || distroInfo === undefined ? undefined : distroInfo.id) === "ubuntu";
        if (parseInt(distroInfo.version, 10) <= 19)
          return {
            hostPlatform: "ubuntu18.04" + archSuffix,
            isOfficiallySupportedPlatform: false
          };
        if (parseInt(distroInfo.version, 10) <= 21)
          return {
            hostPlatform: "ubuntu20.04" + archSuffix,
            isOfficiallySupportedPlatform: isOfficiallySupportedPlatform2
          };
        return {
          hostPlatform: "ubuntu22.04" + archSuffix,
          isOfficiallySupportedPlatform: isOfficiallySupportedPlatform2
        };
      }
      if ((distroInfo === null || distroInfo === undefined ? undefined : distroInfo.id) === "linuxmint") {
        if (parseInt(distroInfo.version, 10) <= 20)
          return {
            hostPlatform: "ubuntu20.04" + archSuffix,
            isOfficiallySupportedPlatform: false
          };
        return {
          hostPlatform: "ubuntu22.04" + archSuffix,
          isOfficiallySupportedPlatform: false
        };
      }
      if ((distroInfo === null || distroInfo === undefined ? undefined : distroInfo.id) === "debian" || (distroInfo === null || distroInfo === undefined ? undefined : distroInfo.id) === "raspbian") {
        const isOfficiallySupportedPlatform2 = (distroInfo === null || distroInfo === undefined ? undefined : distroInfo.id) === "debian";
        if ((distroInfo === null || distroInfo === undefined ? undefined : distroInfo.version) === "11")
          return {
            hostPlatform: "debian11" + archSuffix,
            isOfficiallySupportedPlatform: isOfficiallySupportedPlatform2
          };
        if ((distroInfo === null || distroInfo === undefined ? undefined : distroInfo.version) === "12")
          return {
            hostPlatform: "debian12" + archSuffix,
            isOfficiallySupportedPlatform: isOfficiallySupportedPlatform2
          };
        if ((distroInfo === null || distroInfo === undefined ? undefined : distroInfo.version) === "")
          return {
            hostPlatform: "debian12" + archSuffix,
            isOfficiallySupportedPlatform: isOfficiallySupportedPlatform2
          };
      }
      return {
        hostPlatform: "ubuntu20.04" + archSuffix,
        isOfficiallySupportedPlatform: false
      };
    }
    if (platform === "win32")
      return {
        hostPlatform: "win64",
        isOfficiallySupportedPlatform: true
      };
    return {
      hostPlatform: "<unknown>",
      isOfficiallySupportedPlatform: false
    };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isOfficiallySupportedPlatform = exports.hostPlatform = undefined;
  var _os = _interopRequireDefault(import.meta.require("os"));
  var _linuxUtils = require_linuxUtils();
  var {
    hostPlatform,
    isOfficiallySupportedPlatform
  } = calculatePlatform();
  exports.isOfficiallySupportedPlatform = isOfficiallySupportedPlatform;
  exports.hostPlatform = hostPlatform;
});

// node_modules/playwright-core/lib/utils/httpServer.js
var require_httpServer = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.HttpServer = undefined;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _utilsBundle = require_utilsBundle();
  var _debug = require_debug5();
  var _network = require_network();
  var _manualPromise = require_manualPromise();

  class HttpServer {
    constructor(address = "") {
      this._server = undefined;
      this._urlPrefix = undefined;
      this._port = 0;
      this._started = false;
      this._routes = [];
      this._urlPrefix = address;
      this._server = (0, _network.createHttpServer)(this._onRequest.bind(this));
    }
    server() {
      return this._server;
    }
    routePrefix(prefix, handler) {
      this._routes.push({
        prefix,
        handler
      });
    }
    routePath(path, handler) {
      this._routes.push({
        exact: path,
        handler
      });
    }
    port() {
      return this._port;
    }
    async _tryStart(port, host) {
      const errorPromise = new _manualPromise.ManualPromise;
      const errorListener = (error) => errorPromise.reject(error);
      this._server.on("error", errorListener);
      try {
        this._server.listen(port, host);
        await Promise.race([new Promise((cb) => this._server.once("listening", cb)), errorPromise]);
      } finally {
        this._server.removeListener("error", errorListener);
      }
    }
    async start(options = {}) {
      (0, _debug.assert)(!this._started, "server already started");
      this._started = true;
      const host = options.host || "localhost";
      if (options.preferredPort) {
        try {
          await this._tryStart(options.preferredPort, host);
        } catch (e) {
          if (!e || !e.message || !e.message.includes("EADDRINUSE"))
            throw e;
          await this._tryStart(undefined, host);
        }
      } else {
        await this._tryStart(options.port, host);
      }
      const address = this._server.address();
      (0, _debug.assert)(address, "Could not bind server socket");
      if (!this._urlPrefix) {
        if (typeof address === "string") {
          this._urlPrefix = address;
        } else {
          this._port = address.port;
          this._urlPrefix = `http://${host}:${address.port}`;
        }
      }
      return this._urlPrefix;
    }
    async stop() {
      await new Promise((cb) => this._server.close(cb));
    }
    urlPrefix() {
      return this._urlPrefix;
    }
    serveFile(request, response, absoluteFilePath, headers) {
      try {
        for (const [name, value] of Object.entries(headers || {}))
          response.setHeader(name, value);
        if (request.headers.range)
          this._serveRangeFile(request, response, absoluteFilePath);
        else
          this._serveFile(response, absoluteFilePath);
        return true;
      } catch (e) {
        return false;
      }
    }
    _serveFile(response, absoluteFilePath) {
      const content = _fs.default.readFileSync(absoluteFilePath);
      response.statusCode = 200;
      const contentType = _utilsBundle.mime.getType(_path.default.extname(absoluteFilePath)) || "application/octet-stream";
      response.setHeader("Content-Type", contentType);
      response.setHeader("Content-Length", content.byteLength);
      response.end(content);
    }
    _serveRangeFile(request, response, absoluteFilePath) {
      const range = request.headers.range;
      if (!range || !range.startsWith("bytes=") || range.includes(", ") || [...range].filter((char) => char === "-").length !== 1) {
        response.statusCode = 400;
        return response.end("Bad request");
      }
      const [startStr, endStr] = range.replace(/bytes=/, "").split("-");
      let start;
      let end;
      const size = _fs.default.statSync(absoluteFilePath).size;
      if (startStr !== "" && endStr === "") {
        start = +startStr;
        end = size - 1;
      } else if (startStr === "" && endStr !== "") {
        start = size - +endStr;
        end = size - 1;
      } else {
        start = +startStr;
        end = +endStr;
      }
      if (Number.isNaN(start) || Number.isNaN(end) || start >= size || end >= size || start > end) {
        response.writeHead(416, {
          "Content-Range": `bytes */${size}`
        });
        return response.end();
      }
      response.writeHead(206, {
        "Content-Range": `bytes ${start}-${end}/${size}`,
        "Accept-Ranges": "bytes",
        "Content-Length": end - start + 1,
        "Content-Type": _utilsBundle.mime.getType(_path.default.extname(absoluteFilePath))
      });
      const readable = _fs.default.createReadStream(absoluteFilePath, {
        start,
        end
      });
      readable.pipe(response);
    }
    _onRequest(request, response) {
      response.setHeader("Access-Control-Allow-Origin", "*");
      response.setHeader("Access-Control-Request-Method", "*");
      response.setHeader("Access-Control-Allow-Methods", "OPTIONS, GET");
      if (request.headers.origin)
        response.setHeader("Access-Control-Allow-Headers", request.headers.origin);
      if (request.method === "OPTIONS") {
        response.writeHead(200);
        response.end();
        return;
      }
      request.on("error", () => response.end());
      try {
        if (!request.url) {
          response.end();
          return;
        }
        const url = new URL("http://localhost" + request.url);
        for (const route of this._routes) {
          if (route.exact && url.pathname === route.exact && route.handler(request, response))
            return;
          if (route.prefix && url.pathname.startsWith(route.prefix) && route.handler(request, response))
            return;
        }
        response.statusCode = 404;
        response.end();
      } catch (e) {
        response.end();
      }
    }
  }
  exports.HttpServer = HttpServer;
});

// node_modules/playwright-core/lib/utils/mimeType.js
var require_mimeType = __commonJS((exports) => {
  var isJsonMimeType = function(mimeType) {
    return !!mimeType.match(/^(application\/json|application\/.*?\+json|text\/(x-)?json)(;\s*charset=.*)?$/);
  };
  var isTextualMimeType = function(mimeType) {
    return !!mimeType.match(/^(text\/.*?|application\/(json|(x-)?javascript|xml.*?|ecmascript|graphql|x-www-form-urlencoded)|image\/svg(\+xml)?|application\/.*?(\+json|\+xml))(;\s*charset=.*)?$/);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isJsonMimeType = isJsonMimeType;
  exports.isTextualMimeType = isTextualMimeType;
});

// node_modules/playwright-core/lib/utils/multimap.js
var require_multimap = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.MultiMap = undefined;
  var _Symbol$iterator;
  _Symbol$iterator = Symbol.iterator;

  class MultiMap {
    constructor() {
      this._map = undefined;
      this._map = new Map;
    }
    set(key, value) {
      let values = this._map.get(key);
      if (!values) {
        values = [];
        this._map.set(key, values);
      }
      values.push(value);
    }
    get(key) {
      return this._map.get(key) || [];
    }
    has(key) {
      return this._map.has(key);
    }
    delete(key, value) {
      const values = this._map.get(key);
      if (!values)
        return;
      if (values.includes(value))
        this._map.set(key, values.filter((v) => value !== v));
    }
    deleteAll(key) {
      this._map.delete(key);
    }
    hasValue(key, value) {
      const values = this._map.get(key);
      if (!values)
        return false;
      return values.includes(value);
    }
    get size() {
      return this._map.size;
    }
    [_Symbol$iterator]() {
      return this._map[Symbol.iterator]();
    }
    keys() {
      return this._map.keys();
    }
    values() {
      const result = [];
      for (const key of this.keys())
        result.push(...this.get(key));
      return result;
    }
    clear() {
      this._map.clear();
    }
  }
  exports.MultiMap = MultiMap;
});

// node_modules/playwright-core/lib/utils/processLauncher.js
var require_processLauncher = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  async function gracefullyCloseAll() {
    await Promise.all(Array.from(gracefullyCloseSet).map((gracefullyClose) => gracefullyClose().catch((e) => {
    })));
  }
  var gracefullyProcessExitDoNotHang = function(code) {
    setTimeout(() => process.exit(code), 30000);
    gracefullyCloseAll().then(() => {
      process.exit(code);
    });
  };
  var exitHandler = function() {
    for (const kill of killSet)
      kill();
  };
  var sigintHandler = function() {
    const exitWithCode130 = () => {
      if ((0, _.isUnderTest)()) {
        setTimeout(() => process.exit(130), 1000);
      } else {
        process.exit(130);
      }
    };
    if (sigintHandlerCalled) {
      process.off("SIGINT", sigintHandler);
      for (const kill of killSet)
        kill();
      exitWithCode130();
    } else {
      sigintHandlerCalled = true;
      gracefullyCloseAll().then(() => exitWithCode130());
    }
  };
  var sigtermHandler = function() {
    gracefullyCloseAll();
  };
  var sighupHandler = function() {
    gracefullyCloseAll();
  };
  var addProcessHandlerIfNeeded = function(name) {
    if (!installedHandlers.has(name)) {
      installedHandlers.add(name);
      process.on(name, processHandlers[name]);
    }
  };
  var removeProcessHandlersIfNeeded = function() {
    if (killSet.size)
      return;
    for (const handler of installedHandlers)
      process.off(handler, processHandlers[handler]);
    installedHandlers.clear();
  };
  async function launchProcess(options) {
    const stdio = options.stdio === "pipe" ? ["ignore", "pipe", "pipe", "pipe", "pipe"] : ["pipe", "pipe", "pipe"];
    options.log(`<launching> ${options.command} ${options.args ? options.args.join(" ") : ""}`);
    const spawnOptions = {
      detached: process.platform !== "win32",
      env: options.env,
      cwd: options.cwd,
      shell: options.shell,
      stdio
    };
    const spawnedProcess = childProcess.spawn(options.command, options.args || [], spawnOptions);
    const cleanup = async () => {
      options.log(`[pid=${spawnedProcess.pid || "N/A"}] starting temporary directories cleanup`);
      const errors = await (0, _fileUtils.removeFolders)(options.tempDirectories);
      for (let i = 0;i < options.tempDirectories.length; ++i) {
        if (errors[i])
          options.log(`[pid=${spawnedProcess.pid || "N/A"}] exception while removing ${options.tempDirectories[i]}: ${errors[i]}`);
      }
      options.log(`[pid=${spawnedProcess.pid || "N/A"}] finished temporary directories cleanup`);
    };
    spawnedProcess.on("error", () => {
    });
    if (!spawnedProcess.pid) {
      let failed;
      const failedPromise = new Promise((f, r) => failed = f);
      spawnedProcess.once("error", (error) => {
        failed(new Error("Failed to launch: " + error));
      });
      return cleanup().then(() => failedPromise).then((e) => Promise.reject(e));
    }
    options.log(`<launched> pid=${spawnedProcess.pid}`);
    const stdout = readline.createInterface({
      input: spawnedProcess.stdout
    });
    stdout.on("line", (data) => {
      options.log(`[pid=${spawnedProcess.pid}][out] ` + data);
    });
    const stderr = readline.createInterface({
      input: spawnedProcess.stderr
    });
    stderr.on("line", (data) => {
      options.log(`[pid=${spawnedProcess.pid}][err] ` + data);
    });
    let processClosed = false;
    let fulfillCleanup = () => {
    };
    const waitForCleanup = new Promise((f) => fulfillCleanup = f);
    spawnedProcess.once("exit", (exitCode, signal) => {
      options.log(`[pid=${spawnedProcess.pid}] <process did exit: exitCode=${exitCode}, signal=${signal}>`);
      processClosed = true;
      gracefullyCloseSet.delete(gracefullyClose);
      killSet.delete(killProcessAndCleanup);
      removeProcessHandlersIfNeeded();
      options.onExit(exitCode, signal);
      cleanup().then(fulfillCleanup);
    });
    addProcessHandlerIfNeeded("exit");
    if (options.handleSIGINT)
      addProcessHandlerIfNeeded("SIGINT");
    if (options.handleSIGTERM)
      addProcessHandlerIfNeeded("SIGTERM");
    if (options.handleSIGHUP)
      addProcessHandlerIfNeeded("SIGHUP");
    gracefullyCloseSet.add(gracefullyClose);
    killSet.add(killProcessAndCleanup);
    let gracefullyClosing = false;
    async function gracefullyClose() {
      if (gracefullyClosing) {
        options.log(`[pid=${spawnedProcess.pid}] <forcefully close>`);
        killProcess();
        await waitForCleanup;
        return;
      }
      gracefullyClosing = true;
      options.log(`[pid=${spawnedProcess.pid}] <gracefully close start>`);
      await options.attemptToGracefullyClose().catch(() => killProcess());
      await waitForCleanup;
      options.log(`[pid=${spawnedProcess.pid}] <gracefully close end>`);
    }
    function killProcess() {
      gracefullyCloseSet.delete(gracefullyClose);
      killSet.delete(killProcessAndCleanup);
      removeProcessHandlersIfNeeded();
      options.log(`[pid=${spawnedProcess.pid}] <kill>`);
      if (spawnedProcess.pid && !spawnedProcess.killed && !processClosed) {
        options.log(`[pid=${spawnedProcess.pid}] <will force kill>`);
        try {
          if (process.platform === "win32") {
            const taskkillProcess = childProcess.spawnSync(`taskkill /pid ${spawnedProcess.pid} /T /F`, {
              shell: true
            });
            const [stdout2, stderr2] = [taskkillProcess.stdout.toString(), taskkillProcess.stderr.toString()];
            if (stdout2)
              options.log(`[pid=${spawnedProcess.pid}] taskkill stdout: ${stdout2}`);
            if (stderr2)
              options.log(`[pid=${spawnedProcess.pid}] taskkill stderr: ${stderr2}`);
          } else {
            process.kill(-spawnedProcess.pid, "SIGKILL");
          }
        } catch (e) {
          options.log(`[pid=${spawnedProcess.pid}] exception while trying to kill process: ${e}`);
        }
      } else {
        options.log(`[pid=${spawnedProcess.pid}] <skipped force kill spawnedProcess.killed=${spawnedProcess.killed} processClosed=${processClosed}>`);
      }
    }
    function killProcessAndCleanup() {
      killProcess();
      options.log(`[pid=${spawnedProcess.pid || "N/A"}] starting temporary directories cleanup`);
      for (const dir of options.tempDirectories) {
        try {
          _fs.default.rmSync(dir, {
            force: true,
            recursive: true,
            maxRetries: 5
          });
        } catch (e) {
          options.log(`[pid=${spawnedProcess.pid || "N/A"}] exception while removing ${dir}: ${e}`);
        }
      }
      options.log(`[pid=${spawnedProcess.pid || "N/A"}] finished temporary directories cleanup`);
    }
    function killAndWait() {
      killProcess();
      return waitForCleanup;
    }
    return {
      launchedProcess: spawnedProcess,
      gracefullyClose,
      kill: killAndWait
    };
  }
  var envArrayToObject = function(env) {
    const result = {};
    for (const {
      name,
      value
    } of env)
      result[name] = value;
    return result;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.envArrayToObject = envArrayToObject;
  exports.gracefullyCloseAll = gracefullyCloseAll;
  exports.gracefullyCloseSet = undefined;
  exports.gracefullyProcessExitDoNotHang = gracefullyProcessExitDoNotHang;
  exports.launchProcess = launchProcess;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var childProcess = _interopRequireWildcard(import.meta.require("child_process"));
  var readline = _interopRequireWildcard(import.meta.require("readline"));
  var _ = require_utils3();
  var _fileUtils = require_fileUtils();
  var gracefullyCloseSet = exports.gracefullyCloseSet = new Set;
  var killSet = new Set;
  var sigintHandlerCalled = false;
  var installedHandlers = new Set;
  var processHandlers = {
    exit: exitHandler,
    SIGINT: sigintHandler,
    SIGTERM: sigtermHandler,
    SIGHUP: sighupHandler
  };
});

// node_modules/playwright-core/lib/utils/profiler.js
var require_profiler = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  async function startProfiling() {
    if (!profileDir)
      return;
    session = new (import.meta.require("inspector")).Session;
    session.connect();
    await new Promise((f) => {
      session.post("Profiler.enable", () => {
        session.post("Profiler.start", f);
      });
    });
  }
  async function stopProfiling(profileName) {
    if (!profileDir)
      return;
    await new Promise((f) => session.post("Profiler.stop", (err, {
      profile
    }) => {
      if (!err) {
        fs.mkdirSync(profileDir, {
          recursive: true
        });
        fs.writeFileSync(path.join(profileDir, profileName + ".json"), JSON.stringify(profile));
      }
      f();
    }));
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.startProfiling = startProfiling;
  exports.stopProfiling = stopProfiling;
  var fs = _interopRequireWildcard(import.meta.require("fs"));
  var path = _interopRequireWildcard(import.meta.require("path"));
  var profileDir = process.env.PWTEST_PROFILE_DIR || "";
  var session;
});

// node_modules/playwright-core/lib/utils/semaphore.js
var require_semaphore = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Semaphore = undefined;
  var _manualPromise = require_manualPromise();

  class Semaphore {
    constructor(max) {
      this._max = undefined;
      this._acquired = 0;
      this._queue = [];
      this._max = max;
    }
    setMax(max) {
      this._max = max;
    }
    acquire() {
      const lock = new _manualPromise.ManualPromise;
      this._queue.push(lock);
      this._flush();
      return lock;
    }
    release() {
      --this._acquired;
      this._flush();
    }
    _flush() {
      while (this._acquired < this._max && this._queue.length) {
        ++this._acquired;
        this._queue.shift().resolve();
      }
    }
  }
  exports.Semaphore = Semaphore;
});

// node_modules/playwright-core/lib/utils/spawnAsync.js
var require_spawnAsync = __commonJS((exports) => {
  var spawnAsync = function(cmd, args, options = {}) {
    const process2 = (0, _child_process.spawn)(cmd, args, Object.assign({
      windowsHide: true
    }, options));
    return new Promise((resolve) => {
      let stdout = "";
      let stderr = "";
      if (process2.stdout)
        process2.stdout.on("data", (data) => stdout += data.toString());
      if (process2.stderr)
        process2.stderr.on("data", (data) => stderr += data.toString());
      process2.on("close", (code) => resolve({
        stdout,
        stderr,
        code
      }));
      process2.on("error", (error) => resolve({
        stdout,
        stderr,
        code: 0,
        error
      }));
    });
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.spawnAsync = spawnAsync;
  var _child_process = import.meta.require("child_process");
});

// node_modules/playwright-core/lib/utils/task.js
var require_task = __commonJS((exports) => {
  var makeWaitForNextTask = function() {
    if (process.versions.electron)
      return (callback) => setTimeout(callback, 0);
    if (parseInt(process.versions.node, 10) >= 11)
      return setImmediate;
    let spinning = false;
    const callbacks = [];
    const loop = () => {
      const callback = callbacks.shift();
      if (!callback) {
        spinning = false;
        return;
      }
      setImmediate(loop);
      callback();
    };
    return (callback) => {
      callbacks.push(callback);
      if (!spinning) {
        spinning = true;
        setImmediate(loop);
      }
    };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.makeWaitForNextTask = makeWaitForNextTask;
});

// node_modules/playwright-core/lib/utils/time.js
var require_time = __commonJS((exports) => {
  var monotonicTime = function() {
    const [seconds, nanoseconds] = process.hrtime(initialTime);
    return seconds * 1000 + (nanoseconds / 1000 | 0) / 1000;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.monotonicTime = monotonicTime;
  var initialTime = process.hrtime();
});

// node_modules/playwright-core/lib/utils/timeoutRunner.js
var require_timeoutRunner = __commonJS((exports) => {
  async function raceAgainstDeadline(cb, deadline) {
    const runner = new TimeoutRunner((deadline || MaxTime) - (0, _.monotonicTime)());
    try {
      return {
        result: await runner.run(cb),
        timedOut: false
      };
    } catch (e) {
      if (e instanceof TimeoutRunnerError)
        return {
          timedOut: true
        };
      throw e;
    }
  }
  async function pollAgainstDeadline(callback, deadline, pollIntervals = [100, 250, 500, 1000]) {
    var _pollIntervals$pop;
    const lastPollInterval = (_pollIntervals$pop = pollIntervals.pop()) !== null && _pollIntervals$pop !== undefined ? _pollIntervals$pop : 1000;
    let lastResult;
    const wrappedCallback = () => Promise.resolve().then(callback);
    while (true) {
      var _shift;
      const time = (0, _.monotonicTime)();
      if (deadline && time >= deadline)
        break;
      const received = await raceAgainstDeadline(wrappedCallback, deadline);
      if (received.timedOut)
        break;
      lastResult = received.result.result;
      if (!received.result.continuePolling)
        return {
          result: lastResult,
          timedOut: false
        };
      const interval = (_shift = pollIntervals.shift()) !== null && _shift !== undefined ? _shift : lastPollInterval;
      if (deadline && deadline <= (0, _.monotonicTime)() + interval)
        break;
      await new Promise((x) => setTimeout(x, interval));
    }
    return {
      timedOut: true,
      result: lastResult
    };
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TimeoutRunnerError = exports.TimeoutRunner = exports.MaxTime = undefined;
  exports.pollAgainstDeadline = pollAgainstDeadline;
  exports.raceAgainstDeadline = raceAgainstDeadline;
  var _manualPromise = require_manualPromise();
  var _ = require_utils3();

  class TimeoutRunnerError extends Error {
  }
  exports.TimeoutRunnerError = TimeoutRunnerError;
  var MaxTime = exports.MaxTime = 2147483647;

  class TimeoutRunner {
    constructor(timeout) {
      this._running = undefined;
      this._timeout = undefined;
      this._elapsed = undefined;
      this._deadline = MaxTime;
      this._timeout = timeout;
      this._elapsed = 0;
    }
    async run(cb) {
      const running = this._running = {
        lastElapsedSync: (0, _.monotonicTime)(),
        timer: undefined,
        timeoutPromise: new _manualPromise.ManualPromise
      };
      try {
        const resultPromise = Promise.race([cb(), running.timeoutPromise]);
        this._updateTimeout(running, this._timeout);
        return await resultPromise;
      } finally {
        this._updateTimeout(running, 0);
        if (this._running === running)
          this._running = undefined;
      }
    }
    interrupt() {
      if (this._running)
        this._updateTimeout(this._running, -1);
    }
    elapsed() {
      this._syncElapsedAndStart();
      return this._elapsed;
    }
    deadline() {
      return this._deadline;
    }
    updateTimeout(timeout, elapsed) {
      this._timeout = timeout;
      if (elapsed !== undefined) {
        this._syncElapsedAndStart();
        this._elapsed = elapsed;
      }
      if (this._running)
        this._updateTimeout(this._running, timeout);
    }
    _syncElapsedAndStart() {
      if (this._running) {
        const now = (0, _.monotonicTime)();
        this._elapsed += now - this._running.lastElapsedSync;
        this._running.lastElapsedSync = now;
      }
    }
    _updateTimeout(running, timeout) {
      if (running.timer) {
        clearTimeout(running.timer);
        running.timer = undefined;
      }
      this._syncElapsedAndStart();
      this._deadline = timeout ? (0, _.monotonicTime)() + timeout : MaxTime;
      if (timeout === 0)
        return;
      timeout = timeout - this._elapsed;
      if (timeout <= 0)
        running.timeoutPromise.reject(new TimeoutRunnerError);
      else
        running.timer = setTimeout(() => running.timeoutPromise.reject(new TimeoutRunnerError), timeout);
    }
  }
  exports.TimeoutRunner = TimeoutRunner;
});

// node_modules/playwright-core/lib/utils/traceUtils.js
var require_traceUtils = __commonJS((exports) => {
  var serializeClientSideCallMetadata = function(metadatas) {
    const fileNames = new Map;
    const stacks = [];
    for (const m of metadatas) {
      if (!m.stack || !m.stack.length)
        continue;
      const stack = [];
      for (const frame of m.stack) {
        let ordinal = fileNames.get(frame.file);
        if (typeof ordinal !== "number") {
          ordinal = fileNames.size;
          fileNames.set(frame.file, ordinal);
        }
        const stackFrame = [ordinal, frame.line || 0, frame.column || 0, frame.function || ""];
        stack.push(stackFrame);
      }
      stacks.push([m.id, stack]);
    }
    return {
      files: [...fileNames.keys()],
      stacks
    };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.serializeClientSideCallMetadata = serializeClientSideCallMetadata;
});

// node_modules/playwright-core/package.json
var require_package = __commonJS((exports, module) => {
  module.exports = {
    name: "playwright-core",
    version: "1.42.0",
    description: "A high-level API to automate web browsers",
    repository: {
      type: "git",
      url: "git+https://github.com/microsoft/playwright.git"
    },
    homepage: "https://playwright.dev",
    engines: {
      node: ">=16"
    },
    author: {
      name: "Microsoft Corporation"
    },
    license: "Apache-2.0",
    exports: {
      ".": {
        types: "./index.d.ts",
        import: "./index.mjs",
        require: "./index.js",
        default: "./index.js"
      },
      "./package.json": "./package.json",
      "./lib/outofprocess": "./lib/outofprocess.js",
      "./lib/image_tools/stats": "./lib/image_tools/stats.js",
      "./lib/image_tools/compare": "./lib/image_tools/compare.js",
      "./lib/image_tools/imageChannel": "./lib/image_tools/imageChannel.js",
      "./lib/image_tools/colorUtils": "./lib/image_tools/colorUtils.js",
      "./lib/cli/program": "./lib/cli/program.js",
      "./lib/server/registry/index": "./lib/server/registry/index.js",
      "./lib/remote/playwrightServer": "./lib/remote/playwrightServer.js",
      "./lib/server": "./lib/server/index.js",
      "./lib/utils": "./lib/utils/index.js",
      "./lib/utilsBundle": "./lib/utilsBundle.js",
      "./lib/zipBundle": "./lib/zipBundle.js",
      "./types/protocol": "./types/protocol.d.ts",
      "./types/structs": "./types/structs.d.ts"
    },
    bin: {
      "playwright-core": "cli.js"
    },
    types: "types/types.d.ts"
  };
});

// node_modules/playwright-core/lib/utils/userAgent.js
var require_userAgent = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var getUserAgent = function() {
    if (cachedUserAgent)
      return cachedUserAgent;
    try {
      cachedUserAgent = determineUserAgent();
    } catch (e) {
      cachedUserAgent = "Playwright/unknown";
    }
    return cachedUserAgent;
  };
  var determineUserAgent = function() {
    let osIdentifier = "unknown";
    let osVersion = "unknown";
    if (process.platform === "win32") {
      const version = _os.default.release().split(".");
      osIdentifier = "windows";
      osVersion = `${version[0]}.${version[1]}`;
    } else if (process.platform === "darwin") {
      const version = (0, _child_process.execSync)("sw_vers -productVersion", {
        stdio: ["ignore", "pipe", "ignore"]
      }).toString().trim().split(".");
      osIdentifier = "macOS";
      osVersion = `${version[0]}.${version[1]}`;
    } else if (process.platform === "linux") {
      const distroInfo = (0, _linuxUtils.getLinuxDistributionInfoSync)();
      if (distroInfo) {
        osIdentifier = distroInfo.id || "linux";
        osVersion = distroInfo.version || "unknown";
      } else {
        osIdentifier = "linux";
      }
    }
    const additionalTokens = [];
    if (process.env.CI)
      additionalTokens.push("CI/1");
    const serializedTokens = additionalTokens.length ? " " + additionalTokens.join(" ") : "";
    const {
      embedderName,
      embedderVersion
    } = getEmbedderName();
    return `Playwright/${getPlaywrightVersion()} (${_os.default.arch()}; ${osIdentifier} ${osVersion}) ${embedderName}/${embedderVersion}${serializedTokens}`;
  };
  var getEmbedderName = function() {
    let embedderName = "unknown";
    let embedderVersion = "unknown";
    if (!process.env.PW_LANG_NAME) {
      embedderName = "node";
      embedderVersion = process.version.substring(1).split(".").slice(0, 2).join(".");
    } else if (["node", "python", "java", "csharp"].includes(process.env.PW_LANG_NAME)) {
      var _process$env$PW_LANG_;
      embedderName = process.env.PW_LANG_NAME;
      embedderVersion = (_process$env$PW_LANG_ = process.env.PW_LANG_NAME_VERSION) !== null && _process$env$PW_LANG_ !== undefined ? _process$env$PW_LANG_ : "unknown";
    }
    return {
      embedderName,
      embedderVersion
    };
  };
  var getPlaywrightVersion = function(majorMinorOnly = false) {
    const version = process.env.PW_VERSION_OVERRIDE || require_package().version;
    return majorMinorOnly ? version.split(".").slice(0, 2).join(".") : version;
  };
  var userAgentVersionMatchesErrorMessage = function(userAgent) {
    const match = userAgent.match(/^Playwright\/(\d+\.\d+\.\d+)/);
    if (!match) {
      return;
    }
    const received = match[1].split(".").slice(0, 2).join(".");
    const expected = getPlaywrightVersion(true);
    if (received !== expected) {
      return (0, _ascii.wrapInASCIIBox)([`Playwright version mismatch:`, `  - server version: v${expected}`, `  - client version: v${received}`, ``, `If you are using VSCode extension, restart VSCode.`, ``, `If you are connecting to a remote service,`, `keep your local Playwright version in sync`, `with the remote service version.`, ``, `<3 Playwright Team`].join("\n"), 1);
    }
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getEmbedderName = getEmbedderName;
  exports.getPlaywrightVersion = getPlaywrightVersion;
  exports.getUserAgent = getUserAgent;
  exports.userAgentVersionMatchesErrorMessage = userAgentVersionMatchesErrorMessage;
  var _child_process = import.meta.require("child_process");
  var _os = _interopRequireDefault(import.meta.require("os"));
  var _linuxUtils = require_linuxUtils();
  var _ascii = require_ascii();
  var cachedUserAgent;
});

// node_modules/playwright-core/lib/utils/debugLogger.js
var require_debugLogger = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.debugLogger = exports.RecentLogsCollector = undefined;
  var _utilsBundle = require_utilsBundle();
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var debugLoggerColorMap = {
    api: 45,
    protocol: 34,
    install: 34,
    download: 34,
    browser: 0,
    socks: 92,
    error: 160,
    channel: 33,
    server: 45,
    "server:channel": 34,
    "server:metadata": 33
  };

  class DebugLogger {
    constructor() {
      this._debuggers = new Map;
      if (process.env.DEBUG_FILE) {
        const ansiRegex = new RegExp(["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)", "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|"), "g");
        const stream = _fs.default.createWriteStream(process.env.DEBUG_FILE);
        _utilsBundle.debug.log = (data) => {
          stream.write(data.replace(ansiRegex, ""));
          stream.write("\n");
        };
      }
    }
    log(name, message) {
      let cachedDebugger = this._debuggers.get(name);
      if (!cachedDebugger) {
        cachedDebugger = (0, _utilsBundle.debug)(`pw:${name}`);
        this._debuggers.set(name, cachedDebugger);
        cachedDebugger.color = debugLoggerColorMap[name] || 0;
      }
      cachedDebugger(message);
    }
    isEnabled(name) {
      return _utilsBundle.debug.enabled(`pw:${name}`);
    }
  }
  var debugLogger = exports.debugLogger = new DebugLogger;
  var kLogCount = 150;

  class RecentLogsCollector {
    constructor() {
      this._logs = [];
    }
    log(message) {
      this._logs.push(message);
      if (this._logs.length === kLogCount * 2)
        this._logs.splice(0, kLogCount);
    }
    recentLogs() {
      if (this._logs.length > kLogCount)
        return this._logs.slice(-kLogCount);
      return this._logs;
    }
  }
  exports.RecentLogsCollector = RecentLogsCollector;
});

// node_modules/playwright-core/lib/utils/wsServer.js
var require_wsServer = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.perMessageDeflate = exports.WSServer = undefined;
  var _utils = require_utils3();
  var _utilsBundle = require_utilsBundle();
  var _debugLogger = require_debugLogger();
  var lastConnectionId = 0;
  var kConnectionSymbol = Symbol("kConnection");
  var perMessageDeflate = exports.perMessageDeflate = {
    zlibDeflateOptions: {
      level: 3
    },
    zlibInflateOptions: {
      chunkSize: 10 * 1024
    },
    threshold: 10 * 1024
  };

  class WSServer {
    constructor(delegate) {
      this._wsServer = undefined;
      this.server = undefined;
      this._delegate = undefined;
      this._delegate = delegate;
    }
    async listen(port = 0, hostname, path) {
      _debugLogger.debugLogger.log("server", `Server started at ${new Date}`);
      const server = (0, _utils.createHttpServer)((request, response) => {
        if (request.method === "GET" && request.url === "/json") {
          response.setHeader("Content-Type", "application/json");
          response.end(JSON.stringify({
            wsEndpointPath: path
          }));
          return;
        }
        response.end("Running");
      });
      server.on("error", (error) => _debugLogger.debugLogger.log("server", String(error)));
      this.server = server;
      const wsEndpoint = await new Promise((resolve, reject) => {
        server.listen(port, hostname, () => {
          const address = server.address();
          if (!address) {
            reject(new Error("Could not bind server socket"));
            return;
          }
          const wsEndpoint2 = typeof address === "string" ? `${address}${path}` : `ws://${hostname || "localhost"}:${address.port}${path}`;
          resolve(wsEndpoint2);
        }).on("error", reject);
      });
      _debugLogger.debugLogger.log("server", "Listening at " + wsEndpoint);
      this._wsServer = new _utilsBundle.wsServer({
        noServer: true,
        perMessageDeflate
      });
      if (this._delegate.onHeaders)
        this._wsServer.on("headers", (headers) => this._delegate.onHeaders(headers));
      server.on("upgrade", (request, socket, head) => {
        var _this$_delegate$onUpg, _this$_delegate, _this$_wsServer;
        const pathname = new URL("http://localhost" + request.url).pathname;
        if (pathname !== path) {
          socket.write(`HTTP/${request.httpVersion} 400 Bad Request\r\n\r\n`);
          socket.destroy();
          return;
        }
        const upgradeResult = (_this$_delegate$onUpg = (_this$_delegate = this._delegate).onUpgrade) === null || _this$_delegate$onUpg === undefined ? undefined : _this$_delegate$onUpg.call(_this$_delegate, request, socket);
        if (upgradeResult) {
          socket.write(upgradeResult.error);
          socket.destroy();
          return;
        }
        (_this$_wsServer = this._wsServer) === null || _this$_wsServer === undefined || _this$_wsServer.handleUpgrade(request, socket, head, (ws2) => {
          var _this$_wsServer2;
          return (_this$_wsServer2 = this._wsServer) === null || _this$_wsServer2 === undefined ? undefined : _this$_wsServer2.emit("connection", ws2, request);
        });
      });
      this._wsServer.on("connection", (ws2, request) => {
        _debugLogger.debugLogger.log("server", "Connected client ws.extension=" + ws2.extensions);
        const url = new URL("http://localhost" + (request.url || ""));
        const id = String(++lastConnectionId);
        _debugLogger.debugLogger.log("server", `[${id}] serving connection: ${request.url}`);
        const connection = this._delegate.onConnection(request, url, ws2, id);
        ws2[kConnectionSymbol] = connection;
      });
      return wsEndpoint;
    }
    async close() {
      var _this$_delegate$onClo, _this$_delegate2;
      const server = this._wsServer;
      if (!server)
        return;
      _debugLogger.debugLogger.log("server", "closing websocket server");
      const waitForClose = new Promise((f) => server.close(f));
      await Promise.all(Array.from(server.clients).map(async (ws2) => {
        const connection = ws2[kConnectionSymbol];
        if (connection)
          await connection.close();
        try {
          ws2.terminate();
        } catch (e) {
        }
      }));
      await waitForClose;
      _debugLogger.debugLogger.log("server", "closing http server");
      if (this.server)
        await new Promise((f) => this.server.close(f));
      this._wsServer = undefined;
      this.server = undefined;
      _debugLogger.debugLogger.log("server", "closed server");
      await ((_this$_delegate$onClo = (_this$_delegate2 = this._delegate).onClose) === null || _this$_delegate$onClo === undefined ? undefined : _this$_delegate$onClo.call(_this$_delegate2));
    }
  }
  exports.WSServer = WSServer;
});

// node_modules/playwright-core/lib/zipBundleImpl.js
var require_zipBundleImpl = __commonJS((exports, module) => {
  var ht = Object.create;
  var ae = Object.defineProperty;
  var pt = Object.getOwnPropertyDescriptor;
  var mt = Object.getOwnPropertyNames;
  var xt = Object.getPrototypeOf;
  var vt = Object.prototype.hasOwnProperty;
  var E = (e, r) => () => (r || e((r = { exports: {} }).exports, r), r.exports);
  var Et = (e, r) => {
    for (var t in r)
      ae(e, t, { get: r[t], enumerable: true });
  };
  var or = (e, r, t, n) => {
    if (r && typeof r == "object" || typeof r == "function")
      for (let i of mt(r))
        !vt.call(e, i) && i !== t && ae(e, i, { get: () => r[i], enumerable: !(n = pt(r, i)) || n.enumerable });
    return e;
  };
  var Ue = (e, r, t) => (t = e != null ? ht(xt(e)) : {}, or(r || !e || !e.__esModule ? ae(t, "default", { value: e, enumerable: true }) : t, e));
  var wt = (e) => or(ae({}, "__esModule", { value: true }), e);
  var Be = E((An, fr) => {
    var T = import.meta.require("buffer").Buffer, Te = [0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918000, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117];
    typeof Int32Array != "undefined" && (Te = new Int32Array(Te));
    function sr(e) {
      if (T.isBuffer(e))
        return e;
      var r = typeof T.alloc == "function" && typeof T.from == "function";
      if (typeof e == "number")
        return r ? T.alloc(e) : new T(e);
      if (typeof e == "string")
        return r ? T.from(e) : new T(e);
      throw new Error("input must be buffer, number, or string, received " + typeof e);
    }
    function gt(e) {
      var r = sr(4);
      return r.writeInt32BE(e, 0), r;
    }
    function Ne(e, r) {
      e = sr(e), T.isBuffer(r) && (r = r.readUInt32BE(0));
      for (var t = ~~r ^ -1, n = 0;n < e.length; n++)
        t = Te[(t ^ e[n]) & 255] ^ t >>> 8;
      return t ^ -1;
    }
    function Me() {
      return gt(Ne.apply(null, arguments));
    }
    Me.signed = function() {
      return Ne.apply(null, arguments);
    };
    Me.unsigned = function() {
      return Ne.apply(null, arguments) >>> 0;
    };
    fr.exports = Me;
  });
  var br = E((Ge) => {
    var ar = import.meta.require("fs"), he = import.meta.require("stream").Transform, ur = import.meta.require("stream").PassThrough, cr = import.meta.require("zlib"), We = import.meta.require("util"), yt = import.meta.require("events").EventEmitter, dr = Be();
    Ge.ZipFile = W;
    Ge.dateToDosDateTime = Cr;
    We.inherits(W, yt);
    function W() {
      this.outputStream = new ur, this.entries = [], this.outputStreamCursor = 0, this.ended = false, this.allDone = false, this.forceZip64Eocd = false;
    }
    W.prototype.addFile = function(e, r, t) {
      var n = this;
      r = pe(r, false), t == null && (t = {});
      var i = new m(r, false, t);
      n.entries.push(i), ar.stat(e, function(o, s) {
        if (o)
          return n.emit("error", o);
        if (!s.isFile())
          return n.emit("error", new Error("not a file: " + e));
        i.uncompressedSize = s.size, t.mtime == null && i.setLastModDate(s.mtime), t.mode == null && i.setFileAttributesMode(s.mode), i.setFileDataPumpFunction(function() {
          var f = ar.createReadStream(e);
          i.state = m.FILE_DATA_IN_PROGRESS, f.on("error", function(u) {
            n.emit("error", u);
          }), lr(n, i, f);
        }), M(n);
      });
    };
    W.prototype.addReadStream = function(e, r, t) {
      var n = this;
      r = pe(r, false), t == null && (t = {});
      var i = new m(r, false, t);
      n.entries.push(i), i.setFileDataPumpFunction(function() {
        i.state = m.FILE_DATA_IN_PROGRESS, lr(n, i, e);
      }), M(n);
    };
    W.prototype.addBuffer = function(e, r, t) {
      var n = this;
      if (r = pe(r, false), e.length > 1073741823)
        throw new Error("buffer too large: " + e.length + " > 1073741823");
      if (t == null && (t = {}), t.size != null)
        throw new Error("options.size not allowed");
      var i = new m(r, false, t);
      i.uncompressedSize = e.length, i.crc32 = dr.unsigned(e), i.crcAndFileSizeKnown = true, n.entries.push(i), i.compress ? cr.deflateRaw(e, function(s, f) {
        o(f);
      }) : o(e);
      function o(s) {
        i.compressedSize = s.length, i.setFileDataPumpFunction(function() {
          Z(n, s), Z(n, i.getDataDescriptor()), i.state = m.FILE_DATA_DONE, setImmediate(function() {
            M(n);
          });
        }), M(n);
      }
    };
    W.prototype.addEmptyDirectory = function(e, r) {
      var t = this;
      if (e = pe(e, true), r == null && (r = {}), r.size != null)
        throw new Error("options.size not allowed");
      if (r.compress != null)
        throw new Error("options.compress not allowed");
      var n = new m(e, true, r);
      t.entries.push(n), n.setFileDataPumpFunction(function() {
        Z(t, n.getDataDescriptor()), n.state = m.FILE_DATA_DONE, M(t);
      }), M(t);
    };
    var Ct = N([80, 75, 5, 6]);
    W.prototype.end = function(e, r) {
      if (typeof e == "function" && (r = e, e = null), e == null && (e = {}), !this.ended) {
        if (this.ended = true, this.finalSizeCallback = r, this.forceZip64Eocd = !!e.forceZip64Format, e.comment) {
          if (typeof e.comment == "string" ? this.comment = St(e.comment) : this.comment = e.comment, this.comment.length > 65535)
            throw new Error("comment is too large");
          if (te(this.comment, Ct))
            throw new Error("comment contains end of central directory record signature");
        } else
          this.comment = me;
        M(this);
      }
    };
    function Z(e, r) {
      e.outputStream.write(r), e.outputStreamCursor += r.length;
    }
    function lr(e, r, t) {
      var n = new He, i = new le, o = r.compress ? new cr.DeflateRaw : new ur, s = new le;
      t.pipe(n).pipe(i).pipe(o).pipe(s).pipe(e.outputStream, { end: false }), s.on("end", function() {
        if (r.crc32 = n.crc32, r.uncompressedSize == null)
          r.uncompressedSize = i.byteCount;
        else if (r.uncompressedSize !== i.byteCount)
          return e.emit("error", new Error("file data stream has unexpected number of bytes"));
        r.compressedSize = s.byteCount, e.outputStreamCursor += r.compressedSize, Z(e, r.getDataDescriptor()), r.state = m.FILE_DATA_DONE, M(e);
      });
    }
    function M(e) {
      if (e.allDone)
        return;
      if (e.ended && e.finalSizeCallback != null) {
        var r = bt(e);
        r != null && (e.finalSizeCallback(r), e.finalSizeCallback = null);
      }
      var t = n();
      function n() {
        for (var o = 0;o < e.entries.length; o++) {
          var s = e.entries[o];
          if (s.state < m.FILE_DATA_DONE)
            return s;
        }
        return null;
      }
      if (t != null) {
        if (t.state < m.READY_TO_PUMP_FILE_DATA || t.state === m.FILE_DATA_IN_PROGRESS)
          return;
        t.relativeOffsetOfLocalHeader = e.outputStreamCursor;
        var i = t.getLocalFileHeader();
        Z(e, i), t.doFileDataPump();
      } else
        e.ended && (e.offsetOfStartOfCentralDirectory = e.outputStreamCursor, e.entries.forEach(function(o) {
          var s = o.getCentralDirectoryRecord();
          Z(e, s);
        }), Z(e, Ft(e)), e.outputStream.end(), e.allDone = true);
    }
    function bt(e) {
      for (var r = 0, t = 0, n = 0;n < e.entries.length; n++) {
        var i = e.entries[n];
        if (i.compress)
          return -1;
        if (i.state >= m.READY_TO_PUMP_FILE_DATA) {
          if (i.uncompressedSize == null)
            return -1;
        } else if (i.uncompressedSize == null)
          return null;
        i.relativeOffsetOfLocalHeader = r;
        var o = i.useZip64Format();
        r += hr + i.utf8FileName.length, r += i.uncompressedSize, i.crcAndFileSizeKnown || (o ? r += gr : r += wr), t += yr + i.utf8FileName.length + i.fileComment.length, o && (t += Pe);
      }
      var s = 0;
      return (e.forceZip64Eocd || e.entries.length >= 65535 || t >= 65535 || r >= 4294967295) && (s += ce + qe), s += de + e.comment.length, r + t + s;
    }
    var ce = 56, qe = 20, de = 22;
    function Ft(e, r) {
      var t = false, n = e.entries.length;
      (e.forceZip64Eocd || e.entries.length >= 65535) && (n = 65535, t = true);
      var i = e.outputStreamCursor - e.offsetOfStartOfCentralDirectory, o = i;
      (e.forceZip64Eocd || i >= 4294967295) && (o = 4294967295, t = true);
      var s = e.offsetOfStartOfCentralDirectory;
      if ((e.forceZip64Eocd || e.offsetOfStartOfCentralDirectory >= 4294967295) && (s = 4294967295, t = true), r)
        return t ? ce + qe + de : de;
      var f = F(de + e.comment.length);
      if (f.writeUInt32LE(101010256, 0), f.writeUInt16LE(0, 4), f.writeUInt16LE(0, 6), f.writeUInt16LE(n, 8), f.writeUInt16LE(n, 10), f.writeUInt32LE(o, 12), f.writeUInt32LE(s, 16), f.writeUInt16LE(e.comment.length, 20), e.comment.copy(f, 22), !t)
        return f;
      var u = F(ce);
      u.writeUInt32LE(101075792, 0), I(u, ce - 12, 4), u.writeUInt16LE(xr, 12), u.writeUInt16LE(mr, 14), u.writeUInt32LE(0, 16), u.writeUInt32LE(0, 20), I(u, e.entries.length, 24), I(u, e.entries.length, 32), I(u, i, 40), I(u, e.offsetOfStartOfCentralDirectory, 48);
      var d = F(qe);
      return d.writeUInt32LE(117853008, 0), d.writeUInt32LE(0, 4), I(d, e.outputStreamCursor, 8), d.writeUInt32LE(1, 16), Buffer.concat([u, d, f]);
    }
    function pe(e, r) {
      if (e === "")
        throw new Error("empty metadataPath");
      if (e = e.replace(/\\/g, "/"), /^[a-zA-Z]:/.test(e) || /^\//.test(e))
        throw new Error("absolute path: " + e);
      if (e.split("/").indexOf("..") !== -1)
        throw new Error("invalid relative path: " + e);
      var t = /\/$/.test(e);
      if (r)
        t || (e += "/");
      else if (t)
        throw new Error("file path cannot end with '/': " + e);
      return e;
    }
    var me = F(0);
    function m(e, r, t) {
      if (this.utf8FileName = N(e), this.utf8FileName.length > 65535)
        throw new Error("utf8 file name too long. " + utf8FileName.length + " > 65535");
      if (this.isDirectory = r, this.state = m.WAITING_FOR_METADATA, this.setLastModDate(t.mtime != null ? t.mtime : new Date), t.mode != null ? this.setFileAttributesMode(t.mode) : this.setFileAttributesMode(r ? 16893 : 33204), r ? (this.crcAndFileSizeKnown = true, this.crc32 = 0, this.uncompressedSize = 0, this.compressedSize = 0) : (this.crcAndFileSizeKnown = false, this.crc32 = null, this.uncompressedSize = null, this.compressedSize = null, t.size != null && (this.uncompressedSize = t.size)), r ? this.compress = false : (this.compress = true, t.compress != null && (this.compress = !!t.compress)), this.forceZip64Format = !!t.forceZip64Format, t.fileComment) {
        if (typeof t.fileComment == "string" ? this.fileComment = N(t.fileComment, "utf-8") : this.fileComment = t.fileComment, this.fileComment.length > 65535)
          throw new Error("fileComment is too large");
      } else
        this.fileComment = me;
    }
    m.WAITING_FOR_METADATA = 0;
    m.READY_TO_PUMP_FILE_DATA = 1;
    m.FILE_DATA_IN_PROGRESS = 2;
    m.FILE_DATA_DONE = 3;
    m.prototype.setLastModDate = function(e) {
      var r = Cr(e);
      this.lastModFileTime = r.time, this.lastModFileDate = r.date;
    };
    m.prototype.setFileAttributesMode = function(e) {
      if ((e & 65535) !== e)
        throw new Error("invalid mode. expected: 0 <= " + e + " <= 65535");
      this.externalFileAttributes = e << 16 >>> 0;
    };
    m.prototype.setFileDataPumpFunction = function(e) {
      this.doFileDataPump = e, this.state = m.READY_TO_PUMP_FILE_DATA;
    };
    m.prototype.useZip64Format = function() {
      return this.forceZip64Format || this.uncompressedSize != null && this.uncompressedSize > 4294967294 || this.compressedSize != null && this.compressedSize > 4294967294 || this.relativeOffsetOfLocalHeader != null && this.relativeOffsetOfLocalHeader > 4294967294;
    };
    var hr = 30, pr = 20, mr = 45, xr = 831, vr = 2048, Er = 8;
    m.prototype.getLocalFileHeader = function() {
      var e = 0, r = 0, t = 0;
      this.crcAndFileSizeKnown && (e = this.crc32, r = this.compressedSize, t = this.uncompressedSize);
      var n = F(hr), i = vr;
      return this.crcAndFileSizeKnown || (i |= Er), n.writeUInt32LE(67324752, 0), n.writeUInt16LE(pr, 4), n.writeUInt16LE(i, 6), n.writeUInt16LE(this.getCompressionMethod(), 8), n.writeUInt16LE(this.lastModFileTime, 10), n.writeUInt16LE(this.lastModFileDate, 12), n.writeUInt32LE(e, 14), n.writeUInt32LE(r, 18), n.writeUInt32LE(t, 22), n.writeUInt16LE(this.utf8FileName.length, 26), n.writeUInt16LE(0, 28), Buffer.concat([n, this.utf8FileName]);
    };
    var wr = 16, gr = 24;
    m.prototype.getDataDescriptor = function() {
      if (this.crcAndFileSizeKnown)
        return me;
      if (this.useZip64Format()) {
        var e = F(gr);
        return e.writeUInt32LE(134695760, 0), e.writeUInt32LE(this.crc32, 4), I(e, this.compressedSize, 8), I(e, this.uncompressedSize, 16), e;
      } else {
        var e = F(wr);
        return e.writeUInt32LE(134695760, 0), e.writeUInt32LE(this.crc32, 4), e.writeUInt32LE(this.compressedSize, 8), e.writeUInt32LE(this.uncompressedSize, 12), e;
      }
    };
    var yr = 46, Pe = 28;
    m.prototype.getCentralDirectoryRecord = function() {
      var e = F(yr), r = vr;
      this.crcAndFileSizeKnown || (r |= Er);
      var t = this.compressedSize, n = this.uncompressedSize, i = this.relativeOffsetOfLocalHeader, o, s;
      return this.useZip64Format() ? (t = 4294967295, n = 4294967295, i = 4294967295, o = mr, s = F(Pe), s.writeUInt16LE(1, 0), s.writeUInt16LE(Pe - 4, 2), I(s, this.uncompressedSize, 4), I(s, this.compressedSize, 12), I(s, this.relativeOffsetOfLocalHeader, 20)) : (o = pr, s = me), e.writeUInt32LE(33639248, 0), e.writeUInt16LE(xr, 4), e.writeUInt16LE(o, 6), e.writeUInt16LE(r, 8), e.writeUInt16LE(this.getCompressionMethod(), 10), e.writeUInt16LE(this.lastModFileTime, 12), e.writeUInt16LE(this.lastModFileDate, 14), e.writeUInt32LE(this.crc32, 16), e.writeUInt32LE(t, 20), e.writeUInt32LE(n, 24), e.writeUInt16LE(this.utf8FileName.length, 28), e.writeUInt16LE(s.length, 30), e.writeUInt16LE(this.fileComment.length, 32), e.writeUInt16LE(0, 34), e.writeUInt16LE(0, 36), e.writeUInt32LE(this.externalFileAttributes, 38), e.writeUInt32LE(i, 42), Buffer.concat([e, this.utf8FileName, s, this.fileComment]);
    };
    m.prototype.getCompressionMethod = function() {
      var e = 0, r = 8;
      return this.compress ? r : e;
    };
    function Cr(e) {
      var r = 0;
      r |= e.getDate() & 31, r |= (e.getMonth() + 1 & 15) << 5, r |= (e.getFullYear() - 1980 & 127) << 9;
      var t = 0;
      return t |= Math.floor(e.getSeconds() / 2), t |= (e.getMinutes() & 63) << 5, t |= (e.getHours() & 31) << 11, { date: r, time: t };
    }
    function I(e, r, t) {
      var n = Math.floor(r / 4294967296), i = r % 4294967296;
      e.writeUInt32LE(i, t), e.writeUInt32LE(n, t + 4);
    }
    We.inherits(le, he);
    function le(e) {
      he.call(this, e), this.byteCount = 0;
    }
    le.prototype._transform = function(e, r, t) {
      this.byteCount += e.length, t(null, e);
    };
    We.inherits(He, he);
    function He(e) {
      he.call(this, e), this.crc32 = 0;
    }
    He.prototype._transform = function(e, r, t) {
      this.crc32 = dr.unsigned(e, this.crc32), t(null, e);
    };
    var Ze = "\0\u263A\u263B\u2665\u2666\u2663\u2660\u2022\u25D8\u25CB\u25D9\u2642\u2640\u266A\u266B\u263C\u25BA\u25C4\u2195\u203C\xB6\xA7\u25AC\u21A8\u2191\u2193\u2192\u2190\u221F\u2194\u25B2\u25BC !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u2302\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xA2\xA3\xA5\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0";
    if (Ze.length !== 256)
      throw new Error("assertion failure");
    var ue = null;
    function St(e) {
      if (/^[\x20-\x7e]*$/.test(e))
        return N(e, "utf-8");
      if (ue == null) {
        ue = {};
        for (var r = 0;r < Ze.length; r++)
          ue[Ze[r]] = r;
      }
      for (var t = F(e.length), r = 0;r < e.length; r++) {
        var n = ue[e[r]];
        if (n == null)
          throw new Error("character not encodable in CP437: " + JSON.stringify(e[r]));
        t[r] = n;
      }
      return t;
    }
    function F(e) {
      F = r;
      try {
        return F(e);
      } catch {
        return F = t, F(e);
      }
      function r(n) {
        return Buffer.allocUnsafe(n);
      }
      function t(n) {
        return new Buffer(n);
      }
    }
    function N(e, r) {
      N = t;
      try {
        return N(e, r);
      } catch {
        return N = n, N(e, r);
      }
      function t(i, o) {
        return Buffer.from(i, o);
      }
      function n(i, o) {
        return new Buffer(i, o);
      }
    }
    function te(e, r) {
      te = t;
      try {
        return te(e, r);
      } catch {
        return te = n, te(e, r);
      }
      function t(i, o) {
        return i.includes(o);
      }
      function n(i, o) {
        for (var s = 0;s <= i.length - o.length; s++)
          for (var f = 0;; f++) {
            if (f === o.length)
              return true;
            if (i[s + f] !== o[f])
              break;
          }
        return false;
      }
    }
  });
  var Lr = E((Dn, Ir) => {
    Ir.exports = xe;
    function xe() {
      this.pending = 0, this.max = 1 / 0, this.listeners = [], this.waiting = [], this.error = null;
    }
    xe.prototype.go = function(e) {
      this.pending < this.max ? Sr(this, e) : this.waiting.push(e);
    };
    xe.prototype.wait = function(e) {
      this.pending === 0 ? e(this.error) : this.listeners.push(e);
    };
    xe.prototype.hold = function() {
      return Fr(this);
    };
    function Fr(e) {
      e.pending += 1;
      var r = false;
      return t;
      function t(i) {
        if (r)
          throw new Error("callback called twice");
        if (r = true, e.error = e.error || i, e.pending -= 1, e.waiting.length > 0 && e.pending < e.max)
          Sr(e, e.waiting.shift());
        else if (e.pending === 0) {
          var o = e.listeners;
          e.listeners = [], o.forEach(n);
        }
      }
      function n(i) {
        i(e.error);
      }
    }
    function Sr(e, r) {
      r(Fr(e));
    }
  });
  var zr = E((ie) => {
    var ne = import.meta.require("fs"), ve = import.meta.require("util"), Ye = import.meta.require("stream"), Or = Ye.Readable, $e = Ye.Writable, It = Ye.PassThrough, Lt = Lr(), Ee = import.meta.require("events").EventEmitter;
    ie.createFromBuffer = Ot;
    ie.createFromFd = zt;
    ie.BufferSlicer = D;
    ie.FdSlicer = R;
    ve.inherits(R, Ee);
    function R(e, r) {
      r = r || {}, Ee.call(this), this.fd = e, this.pend = new Lt, this.pend.max = 1, this.refCount = 0, this.autoClose = !!r.autoClose;
    }
    R.prototype.read = function(e, r, t, n, i) {
      var o = this;
      o.pend.go(function(s) {
        ne.read(o.fd, e, r, t, n, function(f, u, d) {
          s(), i(f, u, d);
        });
      });
    };
    R.prototype.write = function(e, r, t, n, i) {
      var o = this;
      o.pend.go(function(s) {
        ne.write(o.fd, e, r, t, n, function(f, u, d) {
          s(), i(f, u, d);
        });
      });
    };
    R.prototype.createReadStream = function(e) {
      return new we(this, e);
    };
    R.prototype.createWriteStream = function(e) {
      return new ge(this, e);
    };
    R.prototype.ref = function() {
      this.refCount += 1;
    };
    R.prototype.unref = function() {
      var e = this;
      if (e.refCount -= 1, e.refCount > 0)
        return;
      if (e.refCount < 0)
        throw new Error("invalid unref");
      e.autoClose && ne.close(e.fd, r);
      function r(t) {
        t ? e.emit("error", t) : e.emit("close");
      }
    };
    ve.inherits(we, Or);
    function we(e, r) {
      r = r || {}, Or.call(this, r), this.context = e, this.context.ref(), this.start = r.start || 0, this.endOffset = r.end, this.pos = this.start, this.destroyed = false;
    }
    we.prototype._read = function(e) {
      var r = this;
      if (!r.destroyed) {
        var t = Math.min(r._readableState.highWaterMark, e);
        if (r.endOffset != null && (t = Math.min(t, r.endOffset - r.pos)), t <= 0) {
          r.destroyed = true, r.push(null), r.context.unref();
          return;
        }
        r.context.pend.go(function(n) {
          if (r.destroyed)
            return n();
          var i = Buffer.alloc(t);
          ne.read(r.context.fd, i, 0, t, r.pos, function(o, s) {
            o ? r.destroy(o) : s === 0 ? (r.destroyed = true, r.push(null), r.context.unref()) : (r.pos += s, r.push(i.slice(0, s))), n();
          });
        });
      }
    };
    we.prototype.destroy = function(e) {
      this.destroyed || (e = e || new Error("stream destroyed"), this.destroyed = true, this.emit("error", e), this.context.unref());
    };
    ve.inherits(ge, $e);
    function ge(e, r) {
      r = r || {}, $e.call(this, r), this.context = e, this.context.ref(), this.start = r.start || 0, this.endOffset = r.end == null ? 1 / 0 : +r.end, this.bytesWritten = 0, this.pos = this.start, this.destroyed = false, this.on("finish", this.destroy.bind(this));
    }
    ge.prototype._write = function(e, r, t) {
      var n = this;
      if (!n.destroyed) {
        if (n.pos + e.length > n.endOffset) {
          var i = new Error("maximum file length exceeded");
          i.code = "ETOOBIG", n.destroy(), t(i);
          return;
        }
        n.context.pend.go(function(o) {
          if (n.destroyed)
            return o();
          ne.write(n.context.fd, e, 0, e.length, n.pos, function(s, f) {
            s ? (n.destroy(), o(), t(s)) : (n.bytesWritten += f, n.pos += f, n.emit("progress"), o(), t());
          });
        });
      }
    };
    ge.prototype.destroy = function() {
      this.destroyed || (this.destroyed = true, this.context.unref());
    };
    ve.inherits(D, Ee);
    function D(e, r) {
      Ee.call(this), r = r || {}, this.refCount = 0, this.buffer = e, this.maxChunkSize = r.maxChunkSize || Number.MAX_SAFE_INTEGER;
    }
    D.prototype.read = function(e, r, t, n, i) {
      var o = n + t, s = o - this.buffer.length, f = s > 0 ? s : t;
      this.buffer.copy(e, r, n, o), setImmediate(function() {
        i(null, f);
      });
    };
    D.prototype.write = function(e, r, t, n, i) {
      e.copy(this.buffer, n, r, r + t), setImmediate(function() {
        i(null, t, e);
      });
    };
    D.prototype.createReadStream = function(e) {
      e = e || {};
      var r = new It(e);
      r.destroyed = false, r.start = e.start || 0, r.endOffset = e.end, r.pos = r.endOffset || this.buffer.length;
      for (var t = this.buffer.slice(r.start, r.pos), n = 0;; ) {
        var i = n + this.maxChunkSize;
        if (i >= t.length) {
          n < t.length && r.write(t.slice(n, t.length));
          break;
        }
        r.write(t.slice(n, i)), n = i;
      }
      return r.end(), r.destroy = function() {
        r.destroyed = true;
      }, r;
    };
    D.prototype.createWriteStream = function(e) {
      var r = this;
      e = e || {};
      var t = new $e(e);
      return t.start = e.start || 0, t.endOffset = e.end == null ? this.buffer.length : +e.end, t.bytesWritten = 0, t.pos = t.start, t.destroyed = false, t._write = function(n, i, o) {
        if (!t.destroyed) {
          var s = t.pos + n.length;
          if (s > t.endOffset) {
            var f = new Error("maximum file length exceeded");
            f.code = "ETOOBIG", t.destroyed = true, o(f);
            return;
          }
          n.copy(r.buffer, t.pos, 0, n.length), t.bytesWritten += n.length, t.pos = s, t.emit("progress"), o();
        }
      }, t.destroy = function() {
        t.destroyed = true;
      }, t;
    };
    D.prototype.ref = function() {
      this.refCount += 1;
    };
    D.prototype.unref = function() {
      if (this.refCount -= 1, this.refCount < 0)
        throw new Error("invalid unref");
    };
    function Ot(e, r) {
      return new D(e, r);
    }
    function zt(e, r) {
      return new R(e, r);
    }
  });
  var Xe = E((A) => {
    var je = import.meta.require("fs"), _t = import.meta.require("zlib"), _r = zr(), At = Be(), be = import.meta.require("util"), Fe = import.meta.require("events").EventEmitter, Ar = import.meta.require("stream").Transform, Ve = import.meta.require("stream").PassThrough, Rt = import.meta.require("stream").Writable;
    A.open = Dt;
    A.fromFd = Rr;
    A.fromBuffer = Ut;
    A.fromRandomAccessReader = Ke;
    A.dosDateTimeToDate = Ur;
    A.validateFileName = Tr;
    A.ZipFile = B;
    A.Entry = oe;
    A.RandomAccessReader = q;
    function Dt(e, r, t) {
      typeof r == "function" && (t = r, r = null), r == null && (r = {}), r.autoClose == null && (r.autoClose = true), r.lazyEntries == null && (r.lazyEntries = false), r.decodeStrings == null && (r.decodeStrings = true), r.validateEntrySizes == null && (r.validateEntrySizes = true), r.strictFileNames == null && (r.strictFileNames = false), t == null && (t = Ce), je.open(e, "r", function(n, i) {
        if (n)
          return t(n);
        Rr(i, r, function(o, s) {
          o && je.close(i, Ce), t(o, s);
        });
      });
    }
    function Rr(e, r, t) {
      typeof r == "function" && (t = r, r = null), r == null && (r = {}), r.autoClose == null && (r.autoClose = false), r.lazyEntries == null && (r.lazyEntries = false), r.decodeStrings == null && (r.decodeStrings = true), r.validateEntrySizes == null && (r.validateEntrySizes = true), r.strictFileNames == null && (r.strictFileNames = false), t == null && (t = Ce), je.fstat(e, function(n, i) {
        if (n)
          return t(n);
        var o = _r.createFromFd(e, { autoClose: true });
        Ke(o, i.size, r, t);
      });
    }
    function Ut(e, r, t) {
      typeof r == "function" && (t = r, r = null), r == null && (r = {}), r.autoClose = false, r.lazyEntries == null && (r.lazyEntries = false), r.decodeStrings == null && (r.decodeStrings = true), r.validateEntrySizes == null && (r.validateEntrySizes = true), r.strictFileNames == null && (r.strictFileNames = false);
      var n = _r.createFromBuffer(e, { maxChunkSize: 65536 });
      Ke(n, e.length, r, t);
    }
    function Ke(e, r, t, n) {
      typeof t == "function" && (n = t, t = null), t == null && (t = {}), t.autoClose == null && (t.autoClose = true), t.lazyEntries == null && (t.lazyEntries = false), t.decodeStrings == null && (t.decodeStrings = true);
      var i = !!t.decodeStrings;
      if (t.validateEntrySizes == null && (t.validateEntrySizes = true), t.strictFileNames == null && (t.strictFileNames = false), n == null && (n = Ce), typeof r != "number")
        throw new Error("expected totalSize parameter to be a number");
      if (r > Number.MAX_SAFE_INTEGER)
        throw new Error("zip file too large. only file sizes up to 2^52 are supported due to JavaScript's Number type being an IEEE 754 double.");
      e.ref();
      var o = 22, s = 65535, f = Math.min(o + s, r), u = _(f), d = r - u.length;
      $(e, u, 0, f, d, function(a) {
        if (a)
          return n(a);
        for (var c = f - o;c >= 0; c -= 1)
          if (u.readUInt32LE(c) === 101010256) {
            var l = u.slice(c), x = l.readUInt16LE(4);
            if (x !== 0)
              return n(new Error("multi-disk zip files are not supported: found disk number: " + x));
            var g = l.readUInt16LE(10), p = l.readUInt32LE(16), h = l.readUInt16LE(20), v = l.length - o;
            if (h !== v)
              return n(new Error("invalid comment length. expected: " + v + ". found: " + h));
            var w = i ? ye(l, 22, l.length, false) : l.slice(22);
            if (!(g === 65535 || p === 4294967295))
              return n(null, new B(e, p, r, g, w, t.autoClose, t.lazyEntries, i, t.validateEntrySizes, t.strictFileNames));
            var b = _(20), U = d + c - b.length;
            $(e, b, 0, b.length, U, function(Y) {
              if (Y)
                return n(Y);
              if (b.readUInt32LE(0) !== 117853008)
                return n(new Error("invalid zip64 end of central directory locator signature"));
              var ee = j(b, 8), P = _(56);
              $(e, P, 0, P.length, ee, function(re) {
                return re ? n(re) : P.readUInt32LE(0) !== 101075792 ? n(new Error("invalid zip64 end of central directory record signature")) : (g = j(P, 32), p = j(P, 48), n(null, new B(e, p, r, g, w, t.autoClose, t.lazyEntries, i, t.validateEntrySizes, t.strictFileNames)));
              });
            });
            return;
          }
        n(new Error("end of central directory record signature not found"));
      });
    }
    be.inherits(B, Fe);
    function B(e, r, t, n, i, o, s, f, u, d) {
      var a = this;
      Fe.call(a), a.reader = e, a.reader.on("error", function(c) {
        Dr(a, c);
      }), a.reader.once("close", function() {
        a.emit("close");
      }), a.readEntryCursor = r, a.fileSize = t, a.entryCount = n, a.comment = i, a.entriesRead = 0, a.autoClose = !!o, a.lazyEntries = !!s, a.decodeStrings = !!f, a.validateEntrySizes = !!u, a.strictFileNames = !!d, a.isOpen = true, a.emittedError = false, a.lazyEntries || a._readEntry();
    }
    B.prototype.close = function() {
      this.isOpen && (this.isOpen = false, this.reader.unref());
    };
    function L(e, r) {
      e.autoClose && e.close(), Dr(e, r);
    }
    function Dr(e, r) {
      e.emittedError || (e.emittedError = true, e.emit("error", r));
    }
    B.prototype.readEntry = function() {
      if (!this.lazyEntries)
        throw new Error("readEntry() called without lazyEntries:true");
      this._readEntry();
    };
    B.prototype._readEntry = function() {
      var e = this;
      if (e.entryCount === e.entriesRead) {
        setImmediate(function() {
          e.autoClose && e.close(), !e.emittedError && e.emit("end");
        });
        return;
      }
      if (!e.emittedError) {
        var r = _(46);
        $(e.reader, r, 0, r.length, e.readEntryCursor, function(t) {
          if (t)
            return L(e, t);
          if (!e.emittedError) {
            var n = new oe, i = r.readUInt32LE(0);
            if (i !== 33639248)
              return L(e, new Error("invalid central directory file header signature: 0x" + i.toString(16)));
            if (n.versionMadeBy = r.readUInt16LE(4), n.versionNeededToExtract = r.readUInt16LE(6), n.generalPurposeBitFlag = r.readUInt16LE(8), n.compressionMethod = r.readUInt16LE(10), n.lastModFileTime = r.readUInt16LE(12), n.lastModFileDate = r.readUInt16LE(14), n.crc32 = r.readUInt32LE(16), n.compressedSize = r.readUInt32LE(20), n.uncompressedSize = r.readUInt32LE(24), n.fileNameLength = r.readUInt16LE(28), n.extraFieldLength = r.readUInt16LE(30), n.fileCommentLength = r.readUInt16LE(32), n.internalFileAttributes = r.readUInt16LE(36), n.externalFileAttributes = r.readUInt32LE(38), n.relativeOffsetOfLocalHeader = r.readUInt32LE(42), n.generalPurposeBitFlag & 64)
              return L(e, new Error("strong encryption is not supported"));
            e.readEntryCursor += 46, r = _(n.fileNameLength + n.extraFieldLength + n.fileCommentLength), $(e.reader, r, 0, r.length, e.readEntryCursor, function(o) {
              if (o)
                return L(e, o);
              if (!e.emittedError) {
                var s = (n.generalPurposeBitFlag & 2048) !== 0;
                n.fileName = e.decodeStrings ? ye(r, 0, n.fileNameLength, s) : r.slice(0, n.fileNameLength);
                var f = n.fileNameLength + n.extraFieldLength, u = r.slice(n.fileNameLength, f);
                n.extraFields = [];
                for (var d = 0;d < u.length - 3; ) {
                  var a = u.readUInt16LE(d + 0), c = u.readUInt16LE(d + 2), l = d + 4, x = l + c;
                  if (x > u.length)
                    return L(e, new Error("extra field length exceeds extra field buffer size"));
                  var g = _(c);
                  u.copy(g, 0, l, x), n.extraFields.push({ id: a, data: g }), d = x;
                }
                if (n.fileComment = e.decodeStrings ? ye(r, f, f + n.fileCommentLength, s) : r.slice(f, f + n.fileCommentLength), n.comment = n.fileComment, e.readEntryCursor += r.length, e.entriesRead += 1, n.uncompressedSize === 4294967295 || n.compressedSize === 4294967295 || n.relativeOffsetOfLocalHeader === 4294967295) {
                  for (var p = null, d = 0;d < n.extraFields.length; d++) {
                    var h = n.extraFields[d];
                    if (h.id === 1) {
                      p = h.data;
                      break;
                    }
                  }
                  if (p == null)
                    return L(e, new Error("expected zip64 extended information extra field"));
                  var v = 0;
                  if (n.uncompressedSize === 4294967295) {
                    if (v + 8 > p.length)
                      return L(e, new Error("zip64 extended information extra field does not include uncompressed size"));
                    n.uncompressedSize = j(p, v), v += 8;
                  }
                  if (n.compressedSize === 4294967295) {
                    if (v + 8 > p.length)
                      return L(e, new Error("zip64 extended information extra field does not include compressed size"));
                    n.compressedSize = j(p, v), v += 8;
                  }
                  if (n.relativeOffsetOfLocalHeader === 4294967295) {
                    if (v + 8 > p.length)
                      return L(e, new Error("zip64 extended information extra field does not include relative header offset"));
                    n.relativeOffsetOfLocalHeader = j(p, v), v += 8;
                  }
                }
                if (e.decodeStrings)
                  for (var d = 0;d < n.extraFields.length; d++) {
                    var h = n.extraFields[d];
                    if (h.id === 28789) {
                      if (h.data.length < 6 || h.data.readUInt8(0) !== 1)
                        continue;
                      var w = h.data.readUInt32LE(1);
                      if (At.unsigned(r.slice(0, n.fileNameLength)) !== w)
                        continue;
                      n.fileName = ye(h.data, 5, h.data.length, true);
                      break;
                    }
                  }
                if (e.validateEntrySizes && n.compressionMethod === 0) {
                  var b = n.uncompressedSize;
                  if (n.isEncrypted() && (b += 12), n.compressedSize !== b) {
                    var U = "compressed/uncompressed size mismatch for stored file: " + n.compressedSize + " != " + n.uncompressedSize;
                    return L(e, new Error(U));
                  }
                }
                if (e.decodeStrings) {
                  e.strictFileNames || (n.fileName = n.fileName.replace(/\\/g, "/"));
                  var Y = Tr(n.fileName, e.validateFileNameOptions);
                  if (Y != null)
                    return L(e, new Error(Y));
                }
                e.emit("entry", n), e.lazyEntries || e._readEntry();
              }
            });
          }
        });
      }
    };
    B.prototype.openReadStream = function(e, r, t) {
      var n = this, i = 0, o = e.compressedSize;
      if (t == null)
        t = r, r = {};
      else {
        if (r.decrypt != null) {
          if (!e.isEncrypted())
            throw new Error("options.decrypt can only be specified for encrypted entries");
          if (r.decrypt !== false)
            throw new Error("invalid options.decrypt value: " + r.decrypt);
          if (e.isCompressed() && r.decompress !== false)
            throw new Error("entry is encrypted and compressed, and options.decompress !== false");
        }
        if (r.decompress != null) {
          if (!e.isCompressed())
            throw new Error("options.decompress can only be specified for compressed entries");
          if (!(r.decompress === false || r.decompress === true))
            throw new Error("invalid options.decompress value: " + r.decompress);
        }
        if (r.start != null || r.end != null) {
          if (e.isCompressed() && r.decompress !== false)
            throw new Error("start/end range not allowed for compressed entry without options.decompress === false");
          if (e.isEncrypted() && r.decrypt !== false)
            throw new Error("start/end range not allowed for encrypted entry without options.decrypt === false");
        }
        if (r.start != null) {
          if (i = r.start, i < 0)
            throw new Error("options.start < 0");
          if (i > e.compressedSize)
            throw new Error("options.start > entry.compressedSize");
        }
        if (r.end != null) {
          if (o = r.end, o < 0)
            throw new Error("options.end < 0");
          if (o > e.compressedSize)
            throw new Error("options.end > entry.compressedSize");
          if (o < i)
            throw new Error("options.end < options.start");
        }
      }
      if (!n.isOpen)
        return t(new Error("closed"));
      if (e.isEncrypted() && r.decrypt !== false)
        return t(new Error("entry is encrypted, and options.decrypt !== false"));
      n.reader.ref();
      var s = _(30);
      $(n.reader, s, 0, s.length, e.relativeOffsetOfLocalHeader, function(f) {
        try {
          if (f)
            return t(f);
          var u = s.readUInt32LE(0);
          if (u !== 67324752)
            return t(new Error("invalid local file header signature: 0x" + u.toString(16)));
          var d = s.readUInt16LE(26), a = s.readUInt16LE(28), c = e.relativeOffsetOfLocalHeader + s.length + d + a, l;
          if (e.compressionMethod === 0)
            l = false;
          else if (e.compressionMethod === 8)
            l = r.decompress != null ? r.decompress : true;
          else
            return t(new Error("unsupported compression method: " + e.compressionMethod));
          var x = c, g = x + e.compressedSize;
          if (e.compressedSize !== 0 && g > n.fileSize)
            return t(new Error("file data overflows file bounds: " + x + " + " + e.compressedSize + " > " + n.fileSize));
          var p = n.reader.createReadStream({ start: x + i, end: x + o }), h = p;
          if (l) {
            var v = false, w = _t.createInflateRaw();
            p.on("error", function(b) {
              setImmediate(function() {
                v || w.emit("error", b);
              });
            }), p.pipe(w), n.validateEntrySizes ? (h = new se(e.uncompressedSize), w.on("error", function(b) {
              setImmediate(function() {
                v || h.emit("error", b);
              });
            }), w.pipe(h)) : h = w, h.destroy = function() {
              v = true, w !== h && w.unpipe(h), p.unpipe(w), p.destroy();
            };
          }
          t(null, h);
        } finally {
          n.reader.unref();
        }
      });
    };
    function oe() {
    }
    oe.prototype.getLastModDate = function() {
      return Ur(this.lastModFileDate, this.lastModFileTime);
    };
    oe.prototype.isEncrypted = function() {
      return (this.generalPurposeBitFlag & 1) !== 0;
    };
    oe.prototype.isCompressed = function() {
      return this.compressionMethod === 8;
    };
    function Ur(e, r) {
      var t = e & 31, n = (e >> 5 & 15) - 1, i = (e >> 9 & 127) + 1980, o = 0, s = (r & 31) * 2, f = r >> 5 & 63, u = r >> 11 & 31;
      return new Date(i, n, t, u, f, s, o);
    }
    function Tr(e) {
      return e.indexOf("\\") !== -1 ? "invalid characters in fileName: " + e : /^[a-zA-Z]:/.test(e) || /^\//.test(e) ? "absolute path: " + e : e.split("/").indexOf("..") !== -1 ? "invalid relative path: " + e : null;
    }
    function $(e, r, t, n, i, o) {
      if (n === 0)
        return setImmediate(function() {
          o(null, _(0));
        });
      e.read(r, t, n, i, function(s, f) {
        if (s)
          return o(s);
        if (f < n)
          return o(new Error("unexpected EOF"));
        o();
      });
    }
    be.inherits(se, Ar);
    function se(e) {
      Ar.call(this), this.actualByteCount = 0, this.expectedByteCount = e;
    }
    se.prototype._transform = function(e, r, t) {
      if (this.actualByteCount += e.length, this.actualByteCount > this.expectedByteCount) {
        var n = "too many bytes in the stream. expected " + this.expectedByteCount + ". got at least " + this.actualByteCount;
        return t(new Error(n));
      }
      t(null, e);
    };
    se.prototype._flush = function(e) {
      if (this.actualByteCount < this.expectedByteCount) {
        var r = "not enough bytes in the stream. expected " + this.expectedByteCount + ". got only " + this.actualByteCount;
        return e(new Error(r));
      }
      e();
    };
    be.inherits(q, Fe);
    function q() {
      Fe.call(this), this.refCount = 0;
    }
    q.prototype.ref = function() {
      this.refCount += 1;
    };
    q.prototype.unref = function() {
      var e = this;
      if (e.refCount -= 1, e.refCount > 0)
        return;
      if (e.refCount < 0)
        throw new Error("invalid unref");
      e.close(r);
      function r(t) {
        if (t)
          return e.emit("error", t);
        e.emit("close");
      }
    };
    q.prototype.createReadStream = function(e) {
      var { start: r, end: t } = e;
      if (r === t) {
        var n = new Ve;
        return setImmediate(function() {
          n.end();
        }), n;
      }
      var i = this._readStreamForRange(r, t), o = false, s = new Se(this);
      i.on("error", function(u) {
        setImmediate(function() {
          o || s.emit("error", u);
        });
      }), s.destroy = function() {
        i.unpipe(s), s.unref(), i.destroy();
      };
      var f = new se(t - r);
      return s.on("error", function(u) {
        setImmediate(function() {
          o || f.emit("error", u);
        });
      }), f.destroy = function() {
        o = true, s.unpipe(f), s.destroy();
      }, i.pipe(s).pipe(f);
    };
    q.prototype._readStreamForRange = function(e, r) {
      throw new Error("not implemented");
    };
    q.prototype.read = function(e, r, t, n, i) {
      var o = this.createReadStream({ start: n, end: n + t }), s = new Rt, f = 0;
      s._write = function(u, d, a) {
        u.copy(e, r + f, 0, u.length), f += u.length, a();
      }, s.on("finish", i), o.on("error", function(u) {
        i(u);
      }), o.pipe(s);
    };
    q.prototype.close = function(e) {
      setImmediate(e);
    };
    be.inherits(Se, Ve);
    function Se(e) {
      Ve.call(this), this.context = e, this.context.ref(), this.unreffedYet = false;
    }
    Se.prototype._flush = function(e) {
      this.unref(), e();
    };
    Se.prototype.unref = function(e) {
      this.unreffedYet || (this.unreffedYet = true, this.context.unref());
    };
    var Tt = "\0\u263A\u263B\u2665\u2666\u2663\u2660\u2022\u25D8\u25CB\u25D9\u2642\u2640\u266A\u266B\u263C\u25BA\u25C4\u2195\u203C\xB6\xA7\u25AC\u21A8\u2191\u2193\u2192\u2190\u221F\u2194\u25B2\u25BC !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u2302\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xA2\xA3\xA5\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0";
    function ye(e, r, t, n) {
      if (n)
        return e.toString("utf8", r, t);
      for (var i = "", o = r;o < t; o++)
        i += Tt[e[o]];
      return i;
    }
    function j(e, r) {
      var t = e.readUInt32LE(r), n = e.readUInt32LE(r + 4);
      return n * 4294967296 + t;
    }
    var _;
    typeof Buffer.allocUnsafe == "function" ? _ = function(e) {
      return Buffer.allocUnsafe(e);
    } : _ = function(e) {
      return new Buffer(e);
    };
    function Ce(e) {
      if (e)
        throw e;
    }
  });
  var Mr = E((Nn, Nr) => {
    var V = 1000, K = V * 60, X = K * 60, H = X * 24, Nt = H * 7, Mt = H * 365.25;
    Nr.exports = function(e, r) {
      r = r || {};
      var t = typeof e;
      if (t === "string" && e.length > 0)
        return Bt(e);
      if (t === "number" && isFinite(e))
        return r.long ? Pt(e) : qt(e);
      throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(e));
    };
    function Bt(e) {
      if (e = String(e), !(e.length > 100)) {
        var r = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);
        if (r) {
          var t = parseFloat(r[1]), n = (r[2] || "ms").toLowerCase();
          switch (n) {
            case "years":
            case "year":
            case "yrs":
            case "yr":
            case "y":
              return t * Mt;
            case "weeks":
            case "week":
            case "w":
              return t * Nt;
            case "days":
            case "day":
            case "d":
              return t * H;
            case "hours":
            case "hour":
            case "hrs":
            case "hr":
            case "h":
              return t * X;
            case "minutes":
            case "minute":
            case "mins":
            case "min":
            case "m":
              return t * K;
            case "seconds":
            case "second":
            case "secs":
            case "sec":
            case "s":
              return t * V;
            case "milliseconds":
            case "millisecond":
            case "msecs":
            case "msec":
            case "ms":
              return t;
            default:
              return;
          }
        }
      }
    }
    function qt(e) {
      var r = Math.abs(e);
      return r >= H ? Math.round(e / H) + "d" : r >= X ? Math.round(e / X) + "h" : r >= K ? Math.round(e / K) + "m" : r >= V ? Math.round(e / V) + "s" : e + "ms";
    }
    function Pt(e) {
      var r = Math.abs(e);
      return r >= H ? Ie(e, r, H, "day") : r >= X ? Ie(e, r, X, "hour") : r >= K ? Ie(e, r, K, "minute") : r >= V ? Ie(e, r, V, "second") : e + " ms";
    }
    function Ie(e, r, t, n) {
      var i = r >= t * 1.5;
      return Math.round(e / t) + " " + n + (i ? "s" : "");
    }
  });
  var Je = E((Mn, Br) => {
    function Zt(e) {
      t.debug = t, t.default = t, t.coerce = u, t.disable = o, t.enable = i, t.enabled = s, t.humanize = Mr(), t.destroy = d, Object.keys(e).forEach((a) => {
        t[a] = e[a];
      }), t.names = [], t.skips = [], t.formatters = {};
      function r(a) {
        let c = 0;
        for (let l = 0;l < a.length; l++)
          c = (c << 5) - c + a.charCodeAt(l), c |= 0;
        return t.colors[Math.abs(c) % t.colors.length];
      }
      t.selectColor = r;
      function t(a) {
        let c, l = null, x, g;
        function p(...h) {
          if (!p.enabled)
            return;
          let v = p, w = Number(new Date), b = w - (c || w);
          v.diff = b, v.prev = c, v.curr = w, c = w, h[0] = t.coerce(h[0]), typeof h[0] != "string" && h.unshift("%O");
          let U = 0;
          h[0] = h[0].replace(/%([a-zA-Z%])/g, (ee, P) => {
            if (ee === "%%")
              return "%";
            U++;
            let re = t.formatters[P];
            if (typeof re == "function") {
              let lt = h[U];
              ee = re.call(v, lt), h.splice(U, 1), U--;
            }
            return ee;
          }), t.formatArgs.call(v, h), (v.log || t.log).apply(v, h);
        }
        return p.namespace = a, p.useColors = t.useColors(), p.color = t.selectColor(a), p.extend = n, p.destroy = t.destroy, Object.defineProperty(p, "enabled", { enumerable: true, configurable: false, get: () => l !== null ? l : (x !== t.namespaces && (x = t.namespaces, g = t.enabled(a)), g), set: (h) => {
          l = h;
        } }), typeof t.init == "function" && t.init(p), p;
      }
      function n(a, c) {
        let l = t(this.namespace + (typeof c == "undefined" ? ":" : c) + a);
        return l.log = this.log, l;
      }
      function i(a) {
        t.save(a), t.namespaces = a, t.names = [], t.skips = [];
        let c, l = (typeof a == "string" ? a : "").split(/[\s,]+/), x = l.length;
        for (c = 0;c < x; c++)
          l[c] && (a = l[c].replace(/\*/g, ".*?"), a[0] === "-" ? t.skips.push(new RegExp("^" + a.slice(1) + "$")) : t.names.push(new RegExp("^" + a + "$")));
      }
      function o() {
        let a = [...t.names.map(f), ...t.skips.map(f).map((c) => "-" + c)].join(",");
        return t.enable(""), a;
      }
      function s(a) {
        if (a[a.length - 1] === "*")
          return true;
        let c, l;
        for (c = 0, l = t.skips.length;c < l; c++)
          if (t.skips[c].test(a))
            return false;
        for (c = 0, l = t.names.length;c < l; c++)
          if (t.names[c].test(a))
            return true;
        return false;
      }
      function f(a) {
        return a.toString().substring(2, a.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function u(a) {
        return a instanceof Error ? a.stack || a.message : a;
      }
      function d() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      return t.enable(t.load()), t;
    }
    Br.exports = Zt;
  });
  var qr = E((S, Le) => {
    S.formatArgs = Ht;
    S.save = Gt;
    S.load = Yt;
    S.useColors = Wt;
    S.storage = $t();
    S.destroy = (() => {
      let e = false;
      return () => {
        e || (e = true, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
      };
    })();
    S.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"];
    function Wt() {
      return typeof window != "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs) ? true : typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/) ? false : typeof document != "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window != "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function Ht(e) {
      if (e[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + e[0] + (this.useColors ? "%c " : " ") + "+" + Le.exports.humanize(this.diff), !this.useColors)
        return;
      let r = "color: " + this.color;
      e.splice(1, 0, r, "color: inherit");
      let t = 0, n = 0;
      e[0].replace(/%[a-zA-Z%]/g, (i) => {
        i !== "%%" && (t++, i === "%c" && (n = t));
      }), e.splice(n, 0, r);
    }
    S.log = console.debug || console.log || (() => {
    });
    function Gt(e) {
      try {
        e ? S.storage.setItem("debug", e) : S.storage.removeItem("debug");
      } catch {
      }
    }
    function Yt() {
      let e;
      try {
        e = S.storage.getItem("debug");
      } catch {
      }
      return !e && typeof process != "undefined" && "env" in process && (e = process.env.DEBUG), e;
    }
    function $t() {
      try {
        return localStorage;
      } catch {
      }
    }
    Le.exports = Je()(S);
    var { formatters: jt } = Le.exports;
    jt.j = function(e) {
      try {
        return JSON.stringify(e);
      } catch (r) {
        return "[UnexpectedJSONParseError]: " + r.message;
      }
    };
  });
  var Zr = E((Bn, Pr) => {
    Pr.exports = (e, r) => {
      r = r || process.argv;
      let t = e.startsWith("-") ? "" : e.length === 1 ? "-" : "--", n = r.indexOf(t + e), i = r.indexOf("--");
      return n !== -1 && (i === -1 ? true : n < i);
    };
  });
  var Hr = E((qn, Wr) => {
    var Vt = import.meta.require("os"), O = Zr(), C = process.env, J;
    O("no-color") || O("no-colors") || O("color=false") ? J = false : (O("color") || O("colors") || O("color=true") || O("color=always")) && (J = true);
    "FORCE_COLOR" in C && (J = C.FORCE_COLOR.length === 0 || parseInt(C.FORCE_COLOR, 10) !== 0);
    function Kt(e) {
      return e === 0 ? false : { level: e, hasBasic: true, has256: e >= 2, has16m: e >= 3 };
    }
    function Xt(e) {
      if (J === false)
        return 0;
      if (O("color=16m") || O("color=full") || O("color=truecolor"))
        return 3;
      if (O("color=256"))
        return 2;
      if (e && !e.isTTY && J !== true)
        return 0;
      let r = J ? 1 : 0;
      if (process.platform === "win32") {
        let t = Vt.release().split(".");
        return Number(process.versions.node.split(".")[0]) >= 8 && Number(t[0]) >= 10 && Number(t[2]) >= 10586 ? Number(t[2]) >= 14931 ? 3 : 2 : 1;
      }
      if ("CI" in C)
        return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some((t) => (t in C)) || C.CI_NAME === "codeship" ? 1 : r;
      if ("TEAMCITY_VERSION" in C)
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(C.TEAMCITY_VERSION) ? 1 : 0;
      if (C.COLORTERM === "truecolor")
        return 3;
      if ("TERM_PROGRAM" in C) {
        let t = parseInt((C.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (C.TERM_PROGRAM) {
          case "iTerm.app":
            return t >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      return /-256(color)?$/i.test(C.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(C.TERM) || ("COLORTERM" in C) ? 1 : (C.TERM === "dumb", r);
    }
    function Qe(e) {
      let r = Xt(e);
      return Kt(r);
    }
    Wr.exports = { supportsColor: Qe, stdout: Qe(process.stdout), stderr: Qe(process.stderr) };
  });
  var Yr = E((y, ze) => {
    var Jt = import.meta.require("tty"), Oe = import.meta.require("util");
    y.init = on;
    y.log = rn;
    y.formatArgs = kt;
    y.save = tn;
    y.load = nn;
    y.useColors = Qt;
    y.destroy = Oe.deprecate(() => {
    }, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    y.colors = [6, 2, 3, 4, 5, 1];
    try {
      let e = Hr();
      e && (e.stderr || e).level >= 2 && (y.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221]);
    } catch {
    }
    y.inspectOpts = Object.keys(process.env).filter((e) => /^debug_/i.test(e)).reduce((e, r) => {
      let t = r.substring(6).toLowerCase().replace(/_([a-z])/g, (i, o) => o.toUpperCase()), n = process.env[r];
      return /^(yes|on|true|enabled)$/i.test(n) ? n = true : /^(no|off|false|disabled)$/i.test(n) ? n = false : n === "null" ? n = null : n = Number(n), e[t] = n, e;
    }, {});
    function Qt() {
      return "colors" in y.inspectOpts ? !!y.inspectOpts.colors : Jt.isatty(process.stderr.fd);
    }
    function kt(e) {
      let { namespace: r, useColors: t } = this;
      if (t) {
        let n = this.color, i = "\x1B[3" + (n < 8 ? n : "8;5;" + n), o = `  ${i};1m${r} \x1B[0m`;
        e[0] = o + e[0].split(`
`).join(`
` + o), e.push(i + "m+" + ze.exports.humanize(this.diff) + "\x1B[0m");
      } else
        e[0] = en() + r + " " + e[0];
    }
    function en() {
      return y.inspectOpts.hideDate ? "" : new Date().toISOString() + " ";
    }
    function rn(...e) {
      return process.stderr.write(Oe.format(...e) + `
`);
    }
    function tn(e) {
      e ? process.env.DEBUG = e : delete process.env.DEBUG;
    }
    function nn() {
      return process.env.DEBUG;
    }
    function on(e) {
      e.inspectOpts = {};
      let r = Object.keys(y.inspectOpts);
      for (let t = 0;t < r.length; t++)
        e.inspectOpts[r[t]] = y.inspectOpts[r[t]];
    }
    ze.exports = Je()(y);
    var { formatters: Gr } = ze.exports;
    Gr.o = function(e) {
      return this.inspectOpts.colors = this.useColors, Oe.inspect(e, this.inspectOpts).split(`
`).map((r) => r.trim()).join(" ");
    };
    Gr.O = function(e) {
      return this.inspectOpts.colors = this.useColors, Oe.inspect(e, this.inspectOpts);
    };
  });
  var $r = E((Pn, ke) => {
    typeof process == "undefined" || process.type === "renderer" || false || process.__nwjs ? ke.exports = qr() : ke.exports = Yr();
  });
  var Kr = E((Zn, Vr) => {
    Vr.exports = jr;
    function jr(e, r) {
      if (e && r)
        return jr(e)(r);
      if (typeof e != "function")
        throw new TypeError("need wrapper function");
      return Object.keys(e).forEach(function(n) {
        t[n] = e[n];
      }), t;
      function t() {
        for (var n = new Array(arguments.length), i = 0;i < n.length; i++)
          n[i] = arguments[i];
        var o = e.apply(this, n), s = n[n.length - 1];
        return typeof o == "function" && o !== s && Object.keys(s).forEach(function(f) {
          o[f] = s[f];
        }), o;
      }
    }
  });
  var rr = E((Wn, er) => {
    var Xr = Kr();
    er.exports = Xr(_e);
    er.exports.strict = Xr(Jr);
    _e.proto = _e(function() {
      Object.defineProperty(Function.prototype, "once", { value: function() {
        return _e(this);
      }, configurable: true }), Object.defineProperty(Function.prototype, "onceStrict", { value: function() {
        return Jr(this);
      }, configurable: true });
    });
    function _e(e) {
      var r = function() {
        return r.called ? r.value : (r.called = true, r.value = e.apply(this, arguments));
      };
      return r.called = false, r;
    }
    function Jr(e) {
      var r = function() {
        if (r.called)
          throw new Error(r.onceError);
        return r.called = true, r.value = e.apply(this, arguments);
      }, t = e.name || "Function wrapped with `once`";
      return r.onceError = t + " shouldn't be called more than once", r.called = false, r;
    }
  });
  var et = E((Hn, kr) => {
    var sn = rr(), fn = function() {
    }, an = function(e) {
      return e.setHeader && typeof e.abort == "function";
    }, un = function(e) {
      return e.stdio && Array.isArray(e.stdio) && e.stdio.length === 3;
    }, Qr = function(e, r, t) {
      if (typeof r == "function")
        return Qr(e, null, r);
      r || (r = {}), t = sn(t || fn);
      var { _writableState: n, _readableState: i } = e, o = r.readable || r.readable !== false && e.readable, s = r.writable || r.writable !== false && e.writable, f = false, u = function() {
        e.writable || d();
      }, d = function() {
        s = false, o || t.call(e);
      }, a = function() {
        o = false, s || t.call(e);
      }, c = function(h) {
        t.call(e, h ? new Error("exited with error code: " + h) : null);
      }, l = function(h) {
        t.call(e, h);
      }, x = function() {
        process.nextTick(g);
      }, g = function() {
        if (!f) {
          if (o && !(i && i.ended && !i.destroyed))
            return t.call(e, new Error("premature close"));
          if (s && !(n && n.ended && !n.destroyed))
            return t.call(e, new Error("premature close"));
        }
      }, p = function() {
        e.req.on("finish", d);
      };
      return an(e) ? (e.on("complete", d), e.on("abort", x), e.req ? p() : e.on("request", p)) : s && !n && (e.on("end", u), e.on("close", u)), un(e) && e.on("exit", c), e.on("end", a), e.on("finish", d), r.error !== false && e.on("error", l), e.on("close", x), function() {
        f = true, e.removeListener("complete", d), e.removeListener("abort", x), e.removeListener("request", p), e.req && e.req.removeListener("finish", d), e.removeListener("end", u), e.removeListener("close", u), e.removeListener("finish", d), e.removeListener("exit", c), e.removeListener("end", a), e.removeListener("error", l), e.removeListener("close", x);
      };
    };
    kr.exports = Qr;
  });
  var nt = E((Gn, tt) => {
    var cn = rr(), dn = et(), tr = import.meta.require("fs"), fe = function() {
    }, ln = /^v?\.0/.test(process.version), Ae = function(e) {
      return typeof e == "function";
    }, hn = function(e) {
      return !ln || !tr ? false : (e instanceof (tr.ReadStream || fe) || e instanceof (tr.WriteStream || fe)) && Ae(e.close);
    }, pn = function(e) {
      return e.setHeader && Ae(e.abort);
    }, mn = function(e, r, t, n) {
      n = cn(n);
      var i = false;
      e.on("close", function() {
        i = true;
      }), dn(e, { readable: r, writable: t }, function(s) {
        if (s)
          return n(s);
        i = true, n();
      });
      var o = false;
      return function(s) {
        if (!i && !o) {
          if (o = true, hn(e))
            return e.close(fe);
          if (pn(e))
            return e.abort();
          if (Ae(e.destroy))
            return e.destroy();
          n(s || new Error("stream was destroyed"));
        }
      };
    }, rt = function(e) {
      e();
    }, xn = function(e, r) {
      return e.pipe(r);
    }, vn = function() {
      var e = Array.prototype.slice.call(arguments), r = Ae(e[e.length - 1] || fe) && e.pop() || fe;
      if (Array.isArray(e[0]) && (e = e[0]), e.length < 2)
        throw new Error("pump requires two streams per minimum");
      var t, n = e.map(function(i, o) {
        var s = o < e.length - 1, f = o > 0;
        return mn(i, s, f, function(u) {
          t || (t = u), u && n.forEach(rt), !s && (n.forEach(rt), r(t));
        });
      });
      return e.reduce(xn);
    };
    tt.exports = vn;
  });
  var ot = E((Yn, it) => {
    var { PassThrough: En } = import.meta.require("stream");
    it.exports = (e) => {
      e = { ...e };
      let { array: r } = e, { encoding: t } = e, n = t === "buffer", i = false;
      r ? i = !(t || n) : t = t || "utf8", n && (t = null);
      let o = new En({ objectMode: i });
      t && o.setEncoding(t);
      let s = 0, f = [];
      return o.on("data", (u) => {
        f.push(u), i ? s = f.length : s += u.length;
      }), o.getBufferedValue = () => r ? f : n ? Buffer.concat(f, s) : f.join(""), o.getBufferedLength = () => s, o;
    };
  });
  var st = E(($n, Q) => {
    var { constants: wn } = import.meta.require("buffer"), gn = nt(), yn = ot(), Re = class extends Error {
      constructor() {
        super("maxBuffer exceeded"), this.name = "MaxBufferError";
      }
    };
    async function De(e, r) {
      if (!e)
        return Promise.reject(new Error("Expected a stream"));
      r = { maxBuffer: 1 / 0, ...r };
      let { maxBuffer: t } = r, n;
      return await new Promise((i, o) => {
        let s = (f) => {
          f && n.getBufferedLength() <= wn.MAX_LENGTH && (f.bufferedData = n.getBufferedValue()), o(f);
        };
        n = gn(e, yn(r), (f) => {
          if (f) {
            s(f);
            return;
          }
          i();
        }), n.on("data", () => {
          n.getBufferedLength() > t && s(new Re);
        });
      }), n.getBufferedValue();
    }
    Q.exports = De;
    Q.exports.default = De;
    Q.exports.buffer = (e, r) => De(e, { ...r, encoding: "buffer" });
    Q.exports.array = (e, r) => De(e, { ...r, array: true });
    Q.exports.MaxBufferError = Re;
  });
  var at = E((jn, ft) => {
    var z = $r()("extract-zip"), { createWriteStream: Cn, promises: k } = import.meta.require("fs"), bn = st(), G = import.meta.require("path"), { promisify: ir } = import.meta.require("util"), Fn = import.meta.require("stream"), Sn = Xe(), In = ir(Sn.open), Ln = ir(Fn.pipeline), nr = class {
      constructor(r, t) {
        this.zipPath = r, this.opts = t;
      }
      async extract() {
        return z("opening", this.zipPath, "with opts", this.opts), this.zipfile = await In(this.zipPath, { lazyEntries: true }), this.canceled = false, new Promise((r, t) => {
          this.zipfile.on("error", (n) => {
            this.canceled = true, t(n);
          }), this.zipfile.readEntry(), this.zipfile.on("close", () => {
            this.canceled || (z("zip extraction complete"), r());
          }), this.zipfile.on("entry", async (n) => {
            if (this.canceled) {
              z("skipping entry", n.fileName, { cancelled: this.canceled });
              return;
            }
            if (z("zipfile entry", n.fileName), n.fileName.startsWith("__MACOSX/")) {
              this.zipfile.readEntry();
              return;
            }
            let i = G.dirname(G.join(this.opts.dir, n.fileName));
            try {
              await k.mkdir(i, { recursive: true });
              let o = await k.realpath(i);
              if (G.relative(this.opts.dir, o).split(G.sep).includes(".."))
                throw new Error(`Out of bound path "${o}" found while processing file ${n.fileName}`);
              await this.extractEntry(n), z("finished processing", n.fileName), this.zipfile.readEntry();
            } catch (o) {
              this.canceled = true, this.zipfile.close(), t(o);
            }
          });
        });
      }
      async extractEntry(r) {
        if (this.canceled) {
          z("skipping entry extraction", r.fileName, { cancelled: this.canceled });
          return;
        }
        this.opts.onEntry && this.opts.onEntry(r, this.zipfile);
        let t = G.join(this.opts.dir, r.fileName), n = r.externalFileAttributes >> 16 & 65535, i = 61440, o = 16384, s = 40960, f = (n & i) === s, u = (n & i) === o;
        !u && r.fileName.endsWith("/") && (u = true);
        let d = r.versionMadeBy >> 8;
        u || (u = d === 0 && r.externalFileAttributes === 16), z("extracting entry", { filename: r.fileName, isDir: u, isSymlink: f });
        let a = this.getExtractedMode(n, u) & 511, c = u ? t : G.dirname(t), l = { recursive: true };
        if (u && (l.mode = a), z("mkdir", { dir: c, ...l }), await k.mkdir(c, l), u)
          return;
        z("opening read stream", t);
        let x = await ir(this.zipfile.openReadStream.bind(this.zipfile))(r);
        if (f) {
          let g = await bn(x);
          z("creating symlink", g, t), await k.symlink(g, t);
        } else
          await Ln(x, Cn(t, { mode: a }));
      }
      getExtractedMode(r, t) {
        let n = r;
        return n === 0 && (t ? (this.opts.defaultDirMode && (n = parseInt(this.opts.defaultDirMode, 10)), n || (n = 493)) : (this.opts.defaultFileMode && (n = parseInt(this.opts.defaultFileMode, 10)), n || (n = 420))), n;
      }
    };
    ft.exports = async function(e, r) {
      if (z("creating target directory", r.dir), !G.isAbsolute(r.dir))
        throw new Error("Target directory is expected to be absolute");
      return await k.mkdir(r.dir, { recursive: true }), r.dir = await k.realpath(r.dir), new nr(e, r).extract();
    };
  });
  var zn = {};
  Et(zn, { extract: () => On, yauzl: () => dt, yazl: () => ct });
  module.exports = wt(zn);
  var ct = Ue(br());
  var dt = Ue(Xe());
  var ut = Ue(at());
  var On = ut.default;
});

// node_modules/playwright-core/lib/zipBundle.js
var require_zipBundle = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.yazl = exports.yauzl = exports.extract = undefined;
  var yazl2 = exports.yazl = require_zipBundleImpl().yazl;
  var yauzl2 = exports.yauzl = require_zipBundleImpl().yauzl;
  var extract2 = exports.extract = require_zipBundleImpl().extract;
});

// node_modules/playwright-core/lib/utils/zipFile.js
var require_zipFile = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ZipFile = undefined;
  var _zipBundle = require_zipBundle();

  class ZipFile {
    constructor(fileName) {
      this._fileName = undefined;
      this._zipFile = undefined;
      this._entries = new Map;
      this._openedPromise = undefined;
      this._fileName = fileName;
      this._openedPromise = this._open();
    }
    async _open() {
      await new Promise((fulfill, reject) => {
        _zipBundle.yauzl.open(this._fileName, {
          autoClose: false
        }, (e, z) => {
          if (e) {
            reject(e);
            return;
          }
          this._zipFile = z;
          this._zipFile.on("entry", (entry) => {
            this._entries.set(entry.fileName, entry);
          });
          this._zipFile.on("end", fulfill);
        });
      });
    }
    async entries() {
      await this._openedPromise;
      return [...this._entries.keys()];
    }
    async read(entryPath) {
      await this._openedPromise;
      const entry = this._entries.get(entryPath);
      if (!entry)
        throw new Error(`${entryPath} not found in file ${this._fileName}`);
      return new Promise((resolve, reject) => {
        this._zipFile.openReadStream(entry, (error, readStream) => {
          if (error || !readStream) {
            reject(error || "Entry not found");
            return;
          }
          const buffers = [];
          readStream.on("data", (data) => buffers.push(data));
          readStream.on("end", () => resolve(Buffer.concat(buffers)));
        });
      });
    }
    close() {
      var _this$_zipFile;
      (_this$_zipFile = this._zipFile) === null || _this$_zipFile === undefined || _this$_zipFile.close();
    }
  }
  exports.ZipFile = ZipFile;
});

// node_modules/playwright-core/lib/utils/zones.js
var require_zones = __commonJS((exports) => {
  var zoneIds = function(line) {
    const index = line.indexOf("__PWZONE__[");
    if (index === -1)
      return [];
    return line.substring(index + "__PWZONE__[".length, line.indexOf("]", index)).split(",").map((s) => +s);
  };
  var runWithFinally = function(func, finallyFunc) {
    try {
      const result = func();
      if (result instanceof Promise) {
        return result.then((r) => {
          finallyFunc();
          return r;
        }).catch((e) => {
          finallyFunc();
          throw e;
        });
      }
      finallyFunc();
      return result;
    } catch (e) {
      finallyFunc();
      throw e;
    }
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.runWithFinally = runWithFinally;
  exports.zones = undefined;
  var _stackTrace = require_stackTrace();

  class ZoneManager {
    constructor() {
      this.lastZoneId = 0;
      this._zones = new Map;
    }
    run(type, data, func) {
      return new Zone(this, ++this.lastZoneId, type, data).run(func);
    }
    zoneData(type, rawStack) {
      for (const line of rawStack) {
        for (const zoneId of zoneIds(line)) {
          const zone = this._zones.get(zoneId);
          if (zone && zone.type === type)
            return zone.data;
        }
      }
      return null;
    }
    preserve(callback) {
      const rawStack = (0, _stackTrace.captureRawStack)();
      const refs = [];
      for (const line of rawStack)
        refs.push(...zoneIds(line));
      Object.defineProperty(callback, "name", {
        value: `__PWZONE__[${refs.join(",")}]-refs`
      });
      return callback();
    }
  }

  class Zone {
    constructor(manager, id, type, data) {
      this._manager = undefined;
      this.id = undefined;
      this.type = undefined;
      this.data = undefined;
      this.wallTime = undefined;
      this._manager = manager;
      this.id = id;
      this.type = type;
      this.data = data;
      this.wallTime = Date.now();
    }
    run(func) {
      this._manager._zones.set(this.id, this);
      Object.defineProperty(func, "name", {
        value: `__PWZONE__[${this.id}]-${this.type}`
      });
      return runWithFinally(() => func(this.data), () => {
        this._manager._zones.delete(this.id);
      });
    }
  }
  var zones = exports.zones = new ZoneManager;
});

// node_modules/playwright-core/lib/utils/isomorphic/cssTokenizer.js
var require_cssTokenizer = __commonJS((exports) => {
  var digit = function(code) {
    return between(code, 48, 57);
  };
  var hexdigit = function(code) {
    return digit(code) || between(code, 65, 70) || between(code, 97, 102);
  };
  var uppercaseletter = function(code) {
    return between(code, 65, 90);
  };
  var lowercaseletter = function(code) {
    return between(code, 97, 122);
  };
  var letter = function(code) {
    return uppercaseletter(code) || lowercaseletter(code);
  };
  var nonascii = function(code) {
    return code >= 128;
  };
  var namestartchar = function(code) {
    return letter(code) || nonascii(code) || code === 95;
  };
  var namechar = function(code) {
    return namestartchar(code) || digit(code) || code === 45;
  };
  var nonprintable = function(code) {
    return between(code, 0, 8) || code === 11 || between(code, 14, 31) || code === 127;
  };
  var newline = function(code) {
    return code === 10;
  };
  var whitespace = function(code) {
    return newline(code) || code === 9 || code === 32;
  };
  var preprocess = function(str) {
    const codepoints = [];
    for (let i = 0;i < str.length; i++) {
      let code = str.charCodeAt(i);
      if (code === 13 && str.charCodeAt(i + 1) === 10) {
        code = 10;
        i++;
      }
      if (code === 13 || code === 12)
        code = 10;
      if (code === 0)
        code = 65533;
      if (between(code, 55296, 56319) && between(str.charCodeAt(i + 1), 56320, 57343)) {
        const lead = code - 55296;
        const trail = str.charCodeAt(i + 1) - 56320;
        code = Math.pow(2, 16) + lead * Math.pow(2, 10) + trail;
        i++;
      }
      codepoints.push(code);
    }
    return codepoints;
  };
  var stringFromCode = function(code) {
    if (code <= 65535)
      return String.fromCharCode(code);
    code -= Math.pow(2, 16);
    const lead = Math.floor(code / Math.pow(2, 10)) + 55296;
    const trail = code % Math.pow(2, 10) + 56320;
    return String.fromCharCode(lead) + String.fromCharCode(trail);
  };
  var tokenize = function(str1) {
    const str = preprocess(str1);
    let i = -1;
    const tokens = [];
    let code;
    let line = 0;
    let column = 0;
    let lastLineLength = 0;
    const incrLineno = function() {
      line += 1;
      lastLineLength = column;
      column = 0;
    };
    const locStart = {
      line,
      column
    };
    const codepoint = function(i2) {
      if (i2 >= str.length)
        return -1;
      return str[i2];
    };
    const next = function(num) {
      if (num === undefined)
        num = 1;
      if (num > 3)
        throw "Spec Error: no more than three codepoints of lookahead.";
      return codepoint(i + num);
    };
    const consume = function(num) {
      if (num === undefined)
        num = 1;
      i += num;
      code = codepoint(i);
      if (newline(code))
        incrLineno();
      else
        column += num;
      return true;
    };
    const reconsume = function() {
      i -= 1;
      if (newline(code)) {
        line -= 1;
        column = lastLineLength;
      } else {
        column -= 1;
      }
      locStart.line = line;
      locStart.column = column;
      return true;
    };
    const eof = function(codepoint2) {
      if (codepoint2 === undefined)
        codepoint2 = code;
      return codepoint2 === -1;
    };
    const donothing = function() {
    };
    const parseerror = function() {
    };
    const consumeAToken = function() {
      consumeComments();
      consume();
      if (whitespace(code)) {
        while (whitespace(next()))
          consume();
        return new WhitespaceToken;
      } else if (code === 34) {
        return consumeAStringToken();
      } else if (code === 35) {
        if (namechar(next()) || areAValidEscape(next(1), next(2))) {
          const token = new HashToken("");
          if (wouldStartAnIdentifier(next(1), next(2), next(3)))
            token.type = "id";
          token.value = consumeAName();
          return token;
        } else {
          return new DelimToken(code);
        }
      } else if (code === 36) {
        if (next() === 61) {
          consume();
          return new SuffixMatchToken;
        } else {
          return new DelimToken(code);
        }
      } else if (code === 39) {
        return consumeAStringToken();
      } else if (code === 40) {
        return new OpenParenToken;
      } else if (code === 41) {
        return new CloseParenToken;
      } else if (code === 42) {
        if (next() === 61) {
          consume();
          return new SubstringMatchToken;
        } else {
          return new DelimToken(code);
        }
      } else if (code === 43) {
        if (startsWithANumber()) {
          reconsume();
          return consumeANumericToken();
        } else {
          return new DelimToken(code);
        }
      } else if (code === 44) {
        return new CommaToken;
      } else if (code === 45) {
        if (startsWithANumber()) {
          reconsume();
          return consumeANumericToken();
        } else if (next(1) === 45 && next(2) === 62) {
          consume(2);
          return new CDCToken;
        } else if (startsWithAnIdentifier()) {
          reconsume();
          return consumeAnIdentlikeToken();
        } else {
          return new DelimToken(code);
        }
      } else if (code === 46) {
        if (startsWithANumber()) {
          reconsume();
          return consumeANumericToken();
        } else {
          return new DelimToken(code);
        }
      } else if (code === 58) {
        return new ColonToken;
      } else if (code === 59) {
        return new SemicolonToken;
      } else if (code === 60) {
        if (next(1) === 33 && next(2) === 45 && next(3) === 45) {
          consume(3);
          return new CDOToken;
        } else {
          return new DelimToken(code);
        }
      } else if (code === 64) {
        if (wouldStartAnIdentifier(next(1), next(2), next(3)))
          return new AtKeywordToken(consumeAName());
        else
          return new DelimToken(code);
      } else if (code === 91) {
        return new OpenSquareToken;
      } else if (code === 92) {
        if (startsWithAValidEscape()) {
          reconsume();
          return consumeAnIdentlikeToken();
        } else {
          parseerror();
          return new DelimToken(code);
        }
      } else if (code === 93) {
        return new CloseSquareToken;
      } else if (code === 94) {
        if (next() === 61) {
          consume();
          return new PrefixMatchToken;
        } else {
          return new DelimToken(code);
        }
      } else if (code === 123) {
        return new OpenCurlyToken;
      } else if (code === 124) {
        if (next() === 61) {
          consume();
          return new DashMatchToken;
        } else if (next() === 124) {
          consume();
          return new ColumnToken;
        } else {
          return new DelimToken(code);
        }
      } else if (code === 125) {
        return new CloseCurlyToken;
      } else if (code === 126) {
        if (next() === 61) {
          consume();
          return new IncludeMatchToken;
        } else {
          return new DelimToken(code);
        }
      } else if (digit(code)) {
        reconsume();
        return consumeANumericToken();
      } else if (namestartchar(code)) {
        reconsume();
        return consumeAnIdentlikeToken();
      } else if (eof()) {
        return new EOFToken;
      } else {
        return new DelimToken(code);
      }
    };
    const consumeComments = function() {
      while (next(1) === 47 && next(2) === 42) {
        consume(2);
        while (true) {
          consume();
          if (code === 42 && next() === 47) {
            consume();
            break;
          } else if (eof()) {
            parseerror();
            return;
          }
        }
      }
    };
    const consumeANumericToken = function() {
      const num = consumeANumber();
      if (wouldStartAnIdentifier(next(1), next(2), next(3))) {
        const token = new DimensionToken;
        token.value = num.value;
        token.repr = num.repr;
        token.type = num.type;
        token.unit = consumeAName();
        return token;
      } else if (next() === 37) {
        consume();
        const token = new PercentageToken;
        token.value = num.value;
        token.repr = num.repr;
        return token;
      } else {
        const token = new NumberToken;
        token.value = num.value;
        token.repr = num.repr;
        token.type = num.type;
        return token;
      }
    };
    const consumeAnIdentlikeToken = function() {
      const str2 = consumeAName();
      if (str2.toLowerCase() === "url" && next() === 40) {
        consume();
        while (whitespace(next(1)) && whitespace(next(2)))
          consume();
        if (next() === 34 || next() === 39)
          return new FunctionToken(str2);
        else if (whitespace(next()) && (next(2) === 34 || next(2) === 39))
          return new FunctionToken(str2);
        else
          return consumeAURLToken();
      } else if (next() === 40) {
        consume();
        return new FunctionToken(str2);
      } else {
        return new IdentToken(str2);
      }
    };
    const consumeAStringToken = function(endingCodePoint) {
      if (endingCodePoint === undefined)
        endingCodePoint = code;
      let string = "";
      while (consume()) {
        if (code === endingCodePoint || eof()) {
          return new StringToken(string);
        } else if (newline(code)) {
          parseerror();
          reconsume();
          return new BadStringToken;
        } else if (code === 92) {
          if (eof(next()))
            donothing();
          else if (newline(next()))
            consume();
          else
            string += stringFromCode(consumeEscape());
        } else {
          string += stringFromCode(code);
        }
      }
      throw new Error("Internal error");
    };
    const consumeAURLToken = function() {
      const token = new URLToken("");
      while (whitespace(next()))
        consume();
      if (eof(next()))
        return token;
      while (consume()) {
        if (code === 41 || eof()) {
          return token;
        } else if (whitespace(code)) {
          while (whitespace(next()))
            consume();
          if (next() === 41 || eof(next())) {
            consume();
            return token;
          } else {
            consumeTheRemnantsOfABadURL();
            return new BadURLToken;
          }
        } else if (code === 34 || code === 39 || code === 40 || nonprintable(code)) {
          parseerror();
          consumeTheRemnantsOfABadURL();
          return new BadURLToken;
        } else if (code === 92) {
          if (startsWithAValidEscape()) {
            token.value += stringFromCode(consumeEscape());
          } else {
            parseerror();
            consumeTheRemnantsOfABadURL();
            return new BadURLToken;
          }
        } else {
          token.value += stringFromCode(code);
        }
      }
      throw new Error("Internal error");
    };
    const consumeEscape = function() {
      consume();
      if (hexdigit(code)) {
        const digits = [code];
        for (let total = 0;total < 5; total++) {
          if (hexdigit(next())) {
            consume();
            digits.push(code);
          } else {
            break;
          }
        }
        if (whitespace(next()))
          consume();
        let value = parseInt(digits.map(function(x) {
          return String.fromCharCode(x);
        }).join(""), 16);
        if (value > maximumallowedcodepoint)
          value = 65533;
        return value;
      } else if (eof()) {
        return 65533;
      } else {
        return code;
      }
    };
    const areAValidEscape = function(c1, c2) {
      if (c1 !== 92)
        return false;
      if (newline(c2))
        return false;
      return true;
    };
    const startsWithAValidEscape = function() {
      return areAValidEscape(code, next());
    };
    const wouldStartAnIdentifier = function(c1, c2, c3) {
      if (c1 === 45)
        return namestartchar(c2) || c2 === 45 || areAValidEscape(c2, c3);
      else if (namestartchar(c1))
        return true;
      else if (c1 === 92)
        return areAValidEscape(c1, c2);
      else
        return false;
    };
    const startsWithAnIdentifier = function() {
      return wouldStartAnIdentifier(code, next(1), next(2));
    };
    const wouldStartANumber = function(c1, c2, c3) {
      if (c1 === 43 || c1 === 45) {
        if (digit(c2))
          return true;
        if (c2 === 46 && digit(c3))
          return true;
        return false;
      } else if (c1 === 46) {
        if (digit(c2))
          return true;
        return false;
      } else if (digit(c1)) {
        return true;
      } else {
        return false;
      }
    };
    const startsWithANumber = function() {
      return wouldStartANumber(code, next(1), next(2));
    };
    const consumeAName = function() {
      let result = "";
      while (consume()) {
        if (namechar(code)) {
          result += stringFromCode(code);
        } else if (startsWithAValidEscape()) {
          result += stringFromCode(consumeEscape());
        } else {
          reconsume();
          return result;
        }
      }
      throw new Error("Internal parse error");
    };
    const consumeANumber = function() {
      let repr = "";
      let type = "integer";
      if (next() === 43 || next() === 45) {
        consume();
        repr += stringFromCode(code);
      }
      while (digit(next())) {
        consume();
        repr += stringFromCode(code);
      }
      if (next(1) === 46 && digit(next(2))) {
        consume();
        repr += stringFromCode(code);
        consume();
        repr += stringFromCode(code);
        type = "number";
        while (digit(next())) {
          consume();
          repr += stringFromCode(code);
        }
      }
      const c1 = next(1), c2 = next(2), c3 = next(3);
      if ((c1 === 69 || c1 === 101) && digit(c2)) {
        consume();
        repr += stringFromCode(code);
        consume();
        repr += stringFromCode(code);
        type = "number";
        while (digit(next())) {
          consume();
          repr += stringFromCode(code);
        }
      } else if ((c1 === 69 || c1 === 101) && (c2 === 43 || c2 === 45) && digit(c3)) {
        consume();
        repr += stringFromCode(code);
        consume();
        repr += stringFromCode(code);
        consume();
        repr += stringFromCode(code);
        type = "number";
        while (digit(next())) {
          consume();
          repr += stringFromCode(code);
        }
      }
      const value = convertAStringToANumber(repr);
      return {
        type,
        value,
        repr
      };
    };
    const convertAStringToANumber = function(string) {
      return +string;
    };
    const consumeTheRemnantsOfABadURL = function() {
      while (consume()) {
        if (code === 41 || eof()) {
          return;
        } else if (startsWithAValidEscape()) {
          consumeEscape();
          donothing();
        } else {
          donothing();
        }
      }
    };
    let iterationCount = 0;
    while (!eof(next())) {
      tokens.push(consumeAToken());
      iterationCount++;
      if (iterationCount > str.length * 2)
        throw new Error("I'm infinite-looping!");
    }
    return tokens;
  };
  var escapeIdent = function(string) {
    string = "" + string;
    let result = "";
    const firstcode = string.charCodeAt(0);
    for (let i = 0;i < string.length; i++) {
      const code = string.charCodeAt(i);
      if (code === 0)
        throw new InvalidCharacterError("Invalid character: the input contains U+0000.");
      if (between(code, 1, 31) || code === 127 || i === 0 && between(code, 48, 57) || i === 1 && between(code, 48, 57) && firstcode === 45)
        result += "\\" + code.toString(16) + " ";
      else if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))
        result += string[i];
      else
        result += "\\" + string[i];
    }
    return result;
  };
  var escapeHash = function(string) {
    string = "" + string;
    let result = "";
    for (let i = 0;i < string.length; i++) {
      const code = string.charCodeAt(i);
      if (code === 0)
        throw new InvalidCharacterError("Invalid character: the input contains U+0000.");
      if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))
        result += string[i];
      else
        result += "\\" + code.toString(16) + " ";
    }
    return result;
  };
  var escapeString = function(string) {
    string = "" + string;
    let result = "";
    for (let i = 0;i < string.length; i++) {
      const code = string.charCodeAt(i);
      if (code === 0)
        throw new InvalidCharacterError("Invalid character: the input contains U+0000.");
      if (between(code, 1, 31) || code === 127)
        result += "\\" + code.toString(16) + " ";
      else if (code === 34 || code === 92)
        result += "\\" + string[i];
      else
        result += string[i];
    }
    return result;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WhitespaceToken = exports.URLToken = exports.SuffixMatchToken = exports.SubstringMatchToken = exports.StringValuedToken = exports.StringToken = exports.SemicolonToken = exports.PrefixMatchToken = exports.PercentageToken = exports.OpenSquareToken = exports.OpenParenToken = exports.OpenCurlyToken = exports.NumberToken = exports.InvalidCharacterError = exports.IncludeMatchToken = exports.IdentToken = exports.HashToken = exports.GroupingToken = exports.FunctionToken = exports.EOFToken = exports.DimensionToken = exports.DelimToken = exports.DashMatchToken = exports.CommaToken = exports.ColumnToken = exports.ColonToken = exports.CloseSquareToken = exports.CloseParenToken = exports.CloseCurlyToken = exports.CSSParserToken = exports.CDOToken = exports.CDCToken = exports.BadURLToken = exports.BadStringToken = exports.AtKeywordToken = undefined;
  exports.tokenize = tokenize;
  var between = function(num, first, last) {
    return num >= first && num <= last;
  };
  var maximumallowedcodepoint = 1114111;

  class InvalidCharacterError extends Error {
    constructor(message) {
      super(message);
      this.name = "InvalidCharacterError";
    }
  }
  exports.InvalidCharacterError = InvalidCharacterError;

  class CSSParserToken {
    constructor() {
      this.tokenType = "";
      this.value = undefined;
    }
    toJSON() {
      return {
        token: this.tokenType
      };
    }
    toString() {
      return this.tokenType;
    }
    toSource() {
      return "" + this;
    }
  }
  exports.CSSParserToken = CSSParserToken;

  class BadStringToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "BADSTRING";
    }
  }
  exports.BadStringToken = BadStringToken;

  class BadURLToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "BADURL";
    }
  }
  exports.BadURLToken = BadURLToken;

  class WhitespaceToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "WHITESPACE";
    }
    toString() {
      return "WS";
    }
    toSource() {
      return " ";
    }
  }
  exports.WhitespaceToken = WhitespaceToken;

  class CDOToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "CDO";
    }
    toSource() {
      return "<!--";
    }
  }
  exports.CDOToken = CDOToken;

  class CDCToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "CDC";
    }
    toSource() {
      return "-->";
    }
  }
  exports.CDCToken = CDCToken;

  class ColonToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = ":";
    }
  }
  exports.ColonToken = ColonToken;

  class SemicolonToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = ";";
    }
  }
  exports.SemicolonToken = SemicolonToken;

  class CommaToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = ",";
    }
  }
  exports.CommaToken = CommaToken;

  class GroupingToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.value = "";
      this.mirror = "";
    }
  }
  exports.GroupingToken = GroupingToken;

  class OpenCurlyToken extends GroupingToken {
    constructor() {
      super();
      this.tokenType = "{";
      this.value = "{";
      this.mirror = "}";
    }
  }
  exports.OpenCurlyToken = OpenCurlyToken;

  class CloseCurlyToken extends GroupingToken {
    constructor() {
      super();
      this.tokenType = "}";
      this.value = "}";
      this.mirror = "{";
    }
  }
  exports.CloseCurlyToken = CloseCurlyToken;

  class OpenSquareToken extends GroupingToken {
    constructor() {
      super();
      this.tokenType = "[";
      this.value = "[";
      this.mirror = "]";
    }
  }
  exports.OpenSquareToken = OpenSquareToken;

  class CloseSquareToken extends GroupingToken {
    constructor() {
      super();
      this.tokenType = "]";
      this.value = "]";
      this.mirror = "[";
    }
  }
  exports.CloseSquareToken = CloseSquareToken;

  class OpenParenToken extends GroupingToken {
    constructor() {
      super();
      this.tokenType = "(";
      this.value = "(";
      this.mirror = ")";
    }
  }
  exports.OpenParenToken = OpenParenToken;

  class CloseParenToken extends GroupingToken {
    constructor() {
      super();
      this.tokenType = ")";
      this.value = ")";
      this.mirror = "(";
    }
  }
  exports.CloseParenToken = CloseParenToken;

  class IncludeMatchToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "~=";
    }
  }
  exports.IncludeMatchToken = IncludeMatchToken;

  class DashMatchToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "|=";
    }
  }
  exports.DashMatchToken = DashMatchToken;

  class PrefixMatchToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "^=";
    }
  }
  exports.PrefixMatchToken = PrefixMatchToken;

  class SuffixMatchToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "$=";
    }
  }
  exports.SuffixMatchToken = SuffixMatchToken;

  class SubstringMatchToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "*=";
    }
  }
  exports.SubstringMatchToken = SubstringMatchToken;

  class ColumnToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "||";
    }
  }
  exports.ColumnToken = ColumnToken;

  class EOFToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "EOF";
    }
    toSource() {
      return "";
    }
  }
  exports.EOFToken = EOFToken;

  class DelimToken extends CSSParserToken {
    constructor(code) {
      super();
      this.tokenType = "DELIM";
      this.value = "";
      this.value = stringFromCode(code);
    }
    toString() {
      return "DELIM(" + this.value + ")";
    }
    toJSON() {
      const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
      json.value = this.value;
      return json;
    }
    toSource() {
      if (this.value === "\\")
        return "\\\n";
      else
        return this.value;
    }
  }
  exports.DelimToken = DelimToken;

  class StringValuedToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.value = "";
    }
    ASCIIMatch(str) {
      return this.value.toLowerCase() === str.toLowerCase();
    }
    toJSON() {
      const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
      json.value = this.value;
      return json;
    }
  }
  exports.StringValuedToken = StringValuedToken;

  class IdentToken extends StringValuedToken {
    constructor(val) {
      super();
      this.tokenType = "IDENT";
      this.value = val;
    }
    toString() {
      return "IDENT(" + this.value + ")";
    }
    toSource() {
      return escapeIdent(this.value);
    }
  }
  exports.IdentToken = IdentToken;

  class FunctionToken extends StringValuedToken {
    constructor(val) {
      super();
      this.tokenType = "FUNCTION";
      this.mirror = undefined;
      this.value = val;
      this.mirror = ")";
    }
    toString() {
      return "FUNCTION(" + this.value + ")";
    }
    toSource() {
      return escapeIdent(this.value) + "(";
    }
  }
  exports.FunctionToken = FunctionToken;

  class AtKeywordToken extends StringValuedToken {
    constructor(val) {
      super();
      this.tokenType = "AT-KEYWORD";
      this.value = val;
    }
    toString() {
      return "AT(" + this.value + ")";
    }
    toSource() {
      return "@" + escapeIdent(this.value);
    }
  }
  exports.AtKeywordToken = AtKeywordToken;

  class HashToken extends StringValuedToken {
    constructor(val) {
      super();
      this.tokenType = "HASH";
      this.type = undefined;
      this.value = val;
      this.type = "unrestricted";
    }
    toString() {
      return "HASH(" + this.value + ")";
    }
    toJSON() {
      const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
      json.value = this.value;
      json.type = this.type;
      return json;
    }
    toSource() {
      if (this.type === "id")
        return "#" + escapeIdent(this.value);
      else
        return "#" + escapeHash(this.value);
    }
  }
  exports.HashToken = HashToken;

  class StringToken extends StringValuedToken {
    constructor(val) {
      super();
      this.tokenType = "STRING";
      this.value = val;
    }
    toString() {
      return '"' + escapeString(this.value) + '"';
    }
  }
  exports.StringToken = StringToken;

  class URLToken extends StringValuedToken {
    constructor(val) {
      super();
      this.tokenType = "URL";
      this.value = val;
    }
    toString() {
      return "URL(" + this.value + ")";
    }
    toSource() {
      return 'url("' + escapeString(this.value) + '")';
    }
  }
  exports.URLToken = URLToken;

  class NumberToken extends CSSParserToken {
    constructor() {
      super();
      this.tokenType = "NUMBER";
      this.type = undefined;
      this.repr = undefined;
      this.type = "integer";
      this.repr = "";
    }
    toString() {
      if (this.type === "integer")
        return "INT(" + this.value + ")";
      return "NUMBER(" + this.value + ")";
    }
    toJSON() {
      const json = super.toJSON();
      json.value = this.value;
      json.type = this.type;
      json.repr = this.repr;
      return json;
    }
    toSource() {
      return this.repr;
    }
  }
  exports.NumberToken = NumberToken;

  class PercentageToken extends CSSParserToken {
    constructor() {
      super();
      this.tokenType = "PERCENTAGE";
      this.repr = undefined;
      this.repr = "";
    }
    toString() {
      return "PERCENTAGE(" + this.value + ")";
    }
    toJSON() {
      const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
      json.value = this.value;
      json.repr = this.repr;
      return json;
    }
    toSource() {
      return this.repr + "%";
    }
  }
  exports.PercentageToken = PercentageToken;

  class DimensionToken extends CSSParserToken {
    constructor() {
      super();
      this.tokenType = "DIMENSION";
      this.type = undefined;
      this.repr = undefined;
      this.unit = undefined;
      this.type = "integer";
      this.repr = "";
      this.unit = "";
    }
    toString() {
      return "DIM(" + this.value + "," + this.unit + ")";
    }
    toJSON() {
      const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
      json.value = this.value;
      json.type = this.type;
      json.repr = this.repr;
      json.unit = this.unit;
      return json;
    }
    toSource() {
      const source = this.repr;
      let unit = escapeIdent(this.unit);
      if (unit[0].toLowerCase() === "e" && (unit[1] === "-" || between(unit.charCodeAt(1), 48, 57))) {
        unit = "\\65 " + unit.slice(1, unit.length);
      }
      return source + unit;
    }
  }
  exports.DimensionToken = DimensionToken;
});

// node_modules/playwright-core/lib/utils/isomorphic/cssParser.js
var require_cssParser = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var isInvalidSelectorError = function(error) {
    return error instanceof InvalidSelectorError;
  };
  var parseCSS = function(selector, customNames) {
    let tokens;
    try {
      tokens = css.tokenize(selector);
      if (!(tokens[tokens.length - 1] instanceof css.EOFToken))
        tokens.push(new css.EOFToken);
    } catch (e) {
      const newMessage = e.message + ` while parsing selector "${selector}"`;
      const index = (e.stack || "").indexOf(e.message);
      if (index !== -1)
        e.stack = e.stack.substring(0, index) + newMessage + e.stack.substring(index + e.message.length);
      e.message = newMessage;
      throw e;
    }
    const unsupportedToken = tokens.find((token) => {
      return token instanceof css.AtKeywordToken || token instanceof css.BadStringToken || token instanceof css.BadURLToken || token instanceof css.ColumnToken || token instanceof css.CDOToken || token instanceof css.CDCToken || token instanceof css.SemicolonToken || token instanceof css.OpenCurlyToken || token instanceof css.CloseCurlyToken || token instanceof css.URLToken || token instanceof css.PercentageToken;
    });
    if (unsupportedToken)
      throw new InvalidSelectorError(`Unsupported token "${unsupportedToken.toSource()}" while parsing selector "${selector}"`);
    let pos = 0;
    const names = new Set;
    function unexpected() {
      return new InvalidSelectorError(`Unexpected token "${tokens[pos].toSource()}" while parsing selector "${selector}"`);
    }
    function skipWhitespace() {
      while (tokens[pos] instanceof css.WhitespaceToken)
        pos++;
    }
    function isIdent(p = pos) {
      return tokens[p] instanceof css.IdentToken;
    }
    function isString(p = pos) {
      return tokens[p] instanceof css.StringToken;
    }
    function isNumber(p = pos) {
      return tokens[p] instanceof css.NumberToken;
    }
    function isComma(p = pos) {
      return tokens[p] instanceof css.CommaToken;
    }
    function isOpenParen(p = pos) {
      return tokens[p] instanceof css.OpenParenToken;
    }
    function isCloseParen(p = pos) {
      return tokens[p] instanceof css.CloseParenToken;
    }
    function isFunction(p = pos) {
      return tokens[p] instanceof css.FunctionToken;
    }
    function isStar(p = pos) {
      return tokens[p] instanceof css.DelimToken && tokens[p].value === "*";
    }
    function isEOF(p = pos) {
      return tokens[p] instanceof css.EOFToken;
    }
    function isClauseCombinator(p = pos) {
      return tokens[p] instanceof css.DelimToken && [">", "+", "~"].includes(tokens[p].value);
    }
    function isSelectorClauseEnd(p = pos) {
      return isComma(p) || isCloseParen(p) || isEOF(p) || isClauseCombinator(p) || tokens[p] instanceof css.WhitespaceToken;
    }
    function consumeFunctionArguments() {
      const result2 = [consumeArgument()];
      while (true) {
        skipWhitespace();
        if (!isComma())
          break;
        pos++;
        result2.push(consumeArgument());
      }
      return result2;
    }
    function consumeArgument() {
      skipWhitespace();
      if (isNumber())
        return tokens[pos++].value;
      if (isString())
        return tokens[pos++].value;
      return consumeComplexSelector();
    }
    function consumeComplexSelector() {
      const result2 = {
        simples: []
      };
      skipWhitespace();
      if (isClauseCombinator()) {
        result2.simples.push({
          selector: {
            functions: [{
              name: "scope",
              args: []
            }]
          },
          combinator: ""
        });
      } else {
        result2.simples.push({
          selector: consumeSimpleSelector(),
          combinator: ""
        });
      }
      while (true) {
        skipWhitespace();
        if (isClauseCombinator()) {
          result2.simples[result2.simples.length - 1].combinator = tokens[pos++].value;
          skipWhitespace();
        } else if (isSelectorClauseEnd()) {
          break;
        }
        result2.simples.push({
          combinator: "",
          selector: consumeSimpleSelector()
        });
      }
      return result2;
    }
    function consumeSimpleSelector() {
      let rawCSSString = "";
      const functions = [];
      while (!isSelectorClauseEnd()) {
        if (isIdent() || isStar()) {
          rawCSSString += tokens[pos++].toSource();
        } else if (tokens[pos] instanceof css.HashToken) {
          rawCSSString += tokens[pos++].toSource();
        } else if (tokens[pos] instanceof css.DelimToken && tokens[pos].value === ".") {
          pos++;
          if (isIdent())
            rawCSSString += "." + tokens[pos++].toSource();
          else
            throw unexpected();
        } else if (tokens[pos] instanceof css.ColonToken) {
          pos++;
          if (isIdent()) {
            if (!customNames.has(tokens[pos].value.toLowerCase())) {
              rawCSSString += ":" + tokens[pos++].toSource();
            } else {
              const name = tokens[pos++].value.toLowerCase();
              functions.push({
                name,
                args: []
              });
              names.add(name);
            }
          } else if (isFunction()) {
            const name = tokens[pos++].value.toLowerCase();
            if (!customNames.has(name)) {
              rawCSSString += `:${name}(${consumeBuiltinFunctionArguments()})`;
            } else {
              functions.push({
                name,
                args: consumeFunctionArguments()
              });
              names.add(name);
            }
            skipWhitespace();
            if (!isCloseParen())
              throw unexpected();
            pos++;
          } else {
            throw unexpected();
          }
        } else if (tokens[pos] instanceof css.OpenSquareToken) {
          rawCSSString += "[";
          pos++;
          while (!(tokens[pos] instanceof css.CloseSquareToken) && !isEOF())
            rawCSSString += tokens[pos++].toSource();
          if (!(tokens[pos] instanceof css.CloseSquareToken))
            throw unexpected();
          rawCSSString += "]";
          pos++;
        } else {
          throw unexpected();
        }
      }
      if (!rawCSSString && !functions.length)
        throw unexpected();
      return {
        css: rawCSSString || undefined,
        functions
      };
    }
    function consumeBuiltinFunctionArguments() {
      let s = "";
      let balance = 1;
      while (!isEOF()) {
        if (isOpenParen() || isFunction())
          balance++;
        if (isCloseParen())
          balance--;
        if (!balance)
          break;
        s += tokens[pos++].toSource();
      }
      return s;
    }
    const result = consumeFunctionArguments();
    if (!isEOF())
      throw unexpected();
    if (result.some((arg) => typeof arg !== "object" || !("simples" in arg)))
      throw new InvalidSelectorError(`Error while parsing selector "${selector}"`);
    return {
      selector: result,
      names: Array.from(names)
    };
  };
  var serializeSelector = function(args) {
    return args.map((arg) => {
      if (typeof arg === "string")
        return `"${arg}"`;
      if (typeof arg === "number")
        return String(arg);
      return arg.simples.map(({
        selector,
        combinator
      }) => {
        let s = selector.css || "";
        s = s + selector.functions.map((func) => `:${func.name}(${serializeSelector(func.args)})`).join("");
        if (combinator)
          s += " " + combinator;
        return s;
      }).join(" ");
    }).join(", ");
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.InvalidSelectorError = undefined;
  exports.isInvalidSelectorError = isInvalidSelectorError;
  exports.parseCSS = parseCSS;
  exports.serializeSelector = serializeSelector;
  var css = _interopRequireWildcard(require_cssTokenizer());

  class InvalidSelectorError extends Error {
  }
  exports.InvalidSelectorError = InvalidSelectorError;
});

// node_modules/playwright-core/lib/utils/isomorphic/selectorParser.js
var require_selectorParser = __commonJS((exports) => {
  var parseSelector = function(selector) {
    const parsedStrings = parseSelectorString(selector);
    const parts = [];
    for (const part of parsedStrings.parts) {
      if (part.name === "css" || part.name === "css:light") {
        if (part.name === "css:light")
          part.body = ":light(" + part.body + ")";
        const parsedCSS = (0, _cssParser.parseCSS)(part.body, customCSSNames);
        parts.push({
          name: "css",
          body: parsedCSS.selector,
          source: part.body
        });
        continue;
      }
      if (kNestedSelectorNames.has(part.name)) {
        let innerSelector;
        let distance;
        try {
          const unescaped = JSON.parse("[" + part.body + "]");
          if (!Array.isArray(unescaped) || unescaped.length < 1 || unescaped.length > 2 || typeof unescaped[0] !== "string")
            throw new _cssParser.InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);
          innerSelector = unescaped[0];
          if (unescaped.length === 2) {
            if (typeof unescaped[1] !== "number" || !kNestedSelectorNamesWithDistance.has(part.name))
              throw new _cssParser.InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);
            distance = unescaped[1];
          }
        } catch (e) {
          throw new _cssParser.InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);
        }
        const nested = {
          name: part.name,
          source: part.body,
          body: {
            parsed: parseSelector(innerSelector),
            distance
          }
        };
        const lastFrame = [...nested.body.parsed.parts].reverse().find((part2) => part2.name === "internal:control" && part2.body === "enter-frame");
        const lastFrameIndex = lastFrame ? nested.body.parsed.parts.indexOf(lastFrame) : -1;
        if (lastFrameIndex !== -1 && selectorPartsEqual(nested.body.parsed.parts.slice(0, lastFrameIndex + 1), parts.slice(0, lastFrameIndex + 1)))
          nested.body.parsed.parts.splice(0, lastFrameIndex + 1);
        parts.push(nested);
        continue;
      }
      parts.push({
        ...part,
        source: part.body
      });
    }
    if (kNestedSelectorNames.has(parts[0].name))
      throw new _cssParser.InvalidSelectorError(`"${parts[0].name}" selector cannot be first`);
    return {
      capture: parsedStrings.capture,
      parts
    };
  };
  var splitSelectorByFrame = function(selectorText) {
    const selector = parseSelector(selectorText);
    const result = [];
    let chunk = {
      parts: []
    };
    let chunkStartIndex = 0;
    for (let i = 0;i < selector.parts.length; ++i) {
      const part = selector.parts[i];
      if (part.name === "internal:control" && part.body === "enter-frame") {
        if (!chunk.parts.length)
          throw new _cssParser.InvalidSelectorError("Selector cannot start with entering frame, select the iframe first");
        result.push(chunk);
        chunk = {
          parts: []
        };
        chunkStartIndex = i + 1;
        continue;
      }
      if (selector.capture === i)
        chunk.capture = i - chunkStartIndex;
      chunk.parts.push(part);
    }
    if (!chunk.parts.length)
      throw new _cssParser.InvalidSelectorError(`Selector cannot end with entering frame, while parsing selector ${selectorText}`);
    result.push(chunk);
    if (typeof selector.capture === "number" && typeof result[result.length - 1].capture !== "number")
      throw new _cssParser.InvalidSelectorError(`Can not capture the selector before diving into the frame. Only use * after the last frame has been selected`);
    return result;
  };
  var selectorPartsEqual = function(list1, list2) {
    return stringifySelector({
      parts: list1
    }) === stringifySelector({
      parts: list2
    });
  };
  var stringifySelector = function(selector, forceEngineName) {
    if (typeof selector === "string")
      return selector;
    return selector.parts.map((p, i) => {
      let includeEngine = true;
      if (!forceEngineName && i !== selector.capture) {
        if (p.name === "css")
          includeEngine = false;
        else if (p.name === "xpath" && p.source.startsWith("//") || p.source.startsWith(".."))
          includeEngine = false;
      }
      const prefix = includeEngine ? p.name + "=" : "";
      return `${i === selector.capture ? "*" : ""}${prefix}${p.source}`;
    }).join(" >> ");
  };
  var visitAllSelectorParts = function(selector, visitor) {
    const visit = (selector2, nested) => {
      for (const part of selector2.parts) {
        visitor(part, nested);
        if (kNestedSelectorNames.has(part.name))
          visit(part.body.parsed, true);
      }
    };
    visit(selector, false);
  };
  var parseSelectorString = function(selector) {
    let index = 0;
    let quote;
    let start = 0;
    const result = {
      parts: []
    };
    const append = () => {
      const part = selector.substring(start, index).trim();
      const eqIndex = part.indexOf("=");
      let name;
      let body;
      if (eqIndex !== -1 && part.substring(0, eqIndex).trim().match(/^[a-zA-Z_0-9-+:*]+$/)) {
        name = part.substring(0, eqIndex).trim();
        body = part.substring(eqIndex + 1);
      } else if (part.length > 1 && part[0] === '"' && part[part.length - 1] === '"') {
        name = "text";
        body = part;
      } else if (part.length > 1 && part[0] === "'" && part[part.length - 1] === "'") {
        name = "text";
        body = part;
      } else if (/^\(*\/\//.test(part) || part.startsWith("..")) {
        name = "xpath";
        body = part;
      } else {
        name = "css";
        body = part;
      }
      let capture = false;
      if (name[0] === "*") {
        capture = true;
        name = name.substring(1);
      }
      result.parts.push({
        name,
        body
      });
      if (capture) {
        if (result.capture !== undefined)
          throw new _cssParser.InvalidSelectorError(`Only one of the selectors can capture using * modifier`);
        result.capture = result.parts.length - 1;
      }
    };
    if (!selector.includes(">>")) {
      index = selector.length;
      append();
      return result;
    }
    const shouldIgnoreTextSelectorQuote = () => {
      const prefix = selector.substring(start, index);
      const match = prefix.match(/^\s*text\s*=(.*)$/);
      return !!match && !!match[1];
    };
    while (index < selector.length) {
      const c = selector[index];
      if (c === "\\" && index + 1 < selector.length) {
        index += 2;
      } else if (c === quote) {
        quote = undefined;
        index++;
      } else if (!quote && (c === '"' || c === "\'" || c === "`") && !shouldIgnoreTextSelectorQuote()) {
        quote = c;
        index++;
      } else if (!quote && c === ">" && selector[index + 1] === ">") {
        append();
        index += 2;
        start = index;
      } else {
        index++;
      }
    }
    append();
    return result;
  };
  var parseAttributeSelector = function(selector, allowUnquotedStrings) {
    let wp = 0;
    let EOL = selector.length === 0;
    const next = () => selector[wp] || "";
    const eat1 = () => {
      const result2 = next();
      ++wp;
      EOL = wp >= selector.length;
      return result2;
    };
    const syntaxError = (stage) => {
      if (EOL)
        throw new _cssParser.InvalidSelectorError(`Unexpected end of selector while parsing selector \`${selector}\``);
      throw new _cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\` - unexpected symbol "${next()}" at position ${wp}` + (stage ? " during " + stage : ""));
    };
    function skipSpaces() {
      while (!EOL && /\s/.test(next()))
        eat1();
    }
    function isCSSNameChar(char) {
      return char >= "\x80" || char >= "0" && char <= "9" || char >= "A" && char <= "Z" || char >= "a" && char <= "z" || char >= "0" && char <= "9" || char === "_" || char === "-";
    }
    function readIdentifier() {
      let result2 = "";
      skipSpaces();
      while (!EOL && isCSSNameChar(next()))
        result2 += eat1();
      return result2;
    }
    function readQuotedString(quote) {
      let result2 = eat1();
      if (result2 !== quote)
        syntaxError("parsing quoted string");
      while (!EOL && next() !== quote) {
        if (next() === "\\")
          eat1();
        result2 += eat1();
      }
      if (next() !== quote)
        syntaxError("parsing quoted string");
      result2 += eat1();
      return result2;
    }
    function readRegularExpression() {
      if (eat1() !== "/")
        syntaxError("parsing regular expression");
      let source = "";
      let inClass = false;
      while (!EOL) {
        if (next() === "\\") {
          source += eat1();
          if (EOL)
            syntaxError("parsing regular expression");
        } else if (inClass && next() === "]") {
          inClass = false;
        } else if (!inClass && next() === "[") {
          inClass = true;
        } else if (!inClass && next() === "/") {
          break;
        }
        source += eat1();
      }
      if (eat1() !== "/")
        syntaxError("parsing regular expression");
      let flags = "";
      while (!EOL && next().match(/[dgimsuy]/))
        flags += eat1();
      try {
        return new RegExp(source, flags);
      } catch (e) {
        throw new _cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\`: ${e.message}`);
      }
    }
    function readAttributeToken() {
      let token = "";
      skipSpaces();
      if (next() === `'` || next() === `"`)
        token = readQuotedString(next()).slice(1, -1);
      else
        token = readIdentifier();
      if (!token)
        syntaxError("parsing property path");
      return token;
    }
    function readOperator() {
      skipSpaces();
      let op = "";
      if (!EOL)
        op += eat1();
      if (!EOL && op !== "=")
        op += eat1();
      if (!["=", "*=", "^=", "$=", "|=", "~="].includes(op))
        syntaxError("parsing operator");
      return op;
    }
    function readAttribute() {
      eat1();
      const jsonPath = [];
      jsonPath.push(readAttributeToken());
      skipSpaces();
      while (next() === ".") {
        eat1();
        jsonPath.push(readAttributeToken());
        skipSpaces();
      }
      if (next() === "]") {
        eat1();
        return {
          name: jsonPath.join("."),
          jsonPath,
          op: "<truthy>",
          value: null,
          caseSensitive: false
        };
      }
      const operator = readOperator();
      let value = undefined;
      let caseSensitive = true;
      skipSpaces();
      if (next() === "/") {
        if (operator !== "=")
          throw new _cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\` - cannot use ${operator} in attribute with regular expression`);
        value = readRegularExpression();
      } else if (next() === `'` || next() === `"`) {
        value = readQuotedString(next()).slice(1, -1);
        skipSpaces();
        if (next() === "i" || next() === "I") {
          caseSensitive = false;
          eat1();
        } else if (next() === "s" || next() === "S") {
          caseSensitive = true;
          eat1();
        }
      } else {
        value = "";
        while (!EOL && (isCSSNameChar(next()) || next() === "+" || next() === "."))
          value += eat1();
        if (value === "true") {
          value = true;
        } else if (value === "false") {
          value = false;
        } else {
          if (!allowUnquotedStrings) {
            value = +value;
            if (Number.isNaN(value))
              syntaxError("parsing attribute value");
          }
        }
      }
      skipSpaces();
      if (next() !== "]")
        syntaxError("parsing attribute value");
      eat1();
      if (operator !== "=" && typeof value !== "string")
        throw new _cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\` - cannot use ${operator} in attribute with non-string matching value - ${value}`);
      return {
        name: jsonPath.join("."),
        jsonPath,
        op: operator,
        value,
        caseSensitive
      };
    }
    const result = {
      name: "",
      attributes: []
    };
    result.name = readIdentifier();
    skipSpaces();
    while (next() === "[") {
      result.attributes.push(readAttribute());
      skipSpaces();
    }
    if (!EOL)
      syntaxError(undefined);
    if (!result.name && !result.attributes.length)
      throw new _cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\` - selector cannot be empty`);
    return result;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "InvalidSelectorError", {
    enumerable: true,
    get: function() {
      return _cssParser.InvalidSelectorError;
    }
  });
  exports.customCSSNames = undefined;
  Object.defineProperty(exports, "isInvalidSelectorError", {
    enumerable: true,
    get: function() {
      return _cssParser.isInvalidSelectorError;
    }
  });
  exports.parseAttributeSelector = parseAttributeSelector;
  exports.parseSelector = parseSelector;
  exports.splitSelectorByFrame = splitSelectorByFrame;
  exports.stringifySelector = stringifySelector;
  exports.visitAllSelectorParts = visitAllSelectorParts;
  var _cssParser = require_cssParser();
  var kNestedSelectorNames = new Set(["internal:has", "internal:has-not", "internal:and", "internal:or", "internal:chain", "left-of", "right-of", "above", "below", "near"]);
  var kNestedSelectorNamesWithDistance = new Set(["left-of", "right-of", "above", "below", "near"]);
  var customCSSNames = exports.customCSSNames = new Set(["not", "is", "where", "has", "scope", "light", "visible", "text", "text-matches", "text-is", "has-text", "above", "below", "right-of", "left-of", "near", "nth-match"]);
});

// node_modules/playwright-core/lib/utils/isomorphic/locatorGenerators.js
var require_locatorGenerators = __commonJS((exports) => {
  var asLocator = function(lang, selector, isFrameLocator = false) {
    return asLocators(lang, selector, isFrameLocator)[0];
  };
  var asLocators = function(lang, selector, isFrameLocator = false, maxOutputSize = 20, preferredQuote) {
    try {
      return innerAsLocators(new generators[lang](preferredQuote), (0, _selectorParser.parseSelector)(selector), isFrameLocator, maxOutputSize);
    } catch (e) {
      return [selector];
    }
  };
  var innerAsLocators = function(factory, parsed, isFrameLocator = false, maxOutputSize = 20) {
    const parts = [...parsed.parts];
    for (let index = 0;index < parts.length - 1; index++) {
      if (parts[index].name === "nth" && parts[index + 1].name === "internal:control" && parts[index + 1].body === "enter-frame") {
        const [nth] = parts.splice(index, 1);
        parts.splice(index + 1, 0, nth);
      }
    }
    const tokens = [];
    let nextBase = isFrameLocator ? "frame-locator" : "page";
    for (let index = 0;index < parts.length; index++) {
      const part = parts[index];
      const base = nextBase;
      nextBase = "locator";
      if (part.name === "nth") {
        if (part.body === "0")
          tokens.push([factory.generateLocator(base, "first", ""), factory.generateLocator(base, "nth", "0")]);
        else if (part.body === "-1")
          tokens.push([factory.generateLocator(base, "last", ""), factory.generateLocator(base, "nth", "-1")]);
        else
          tokens.push([factory.generateLocator(base, "nth", part.body)]);
        continue;
      }
      if (part.name === "internal:text") {
        const {
          exact,
          text
        } = detectExact(part.body);
        tokens.push([factory.generateLocator(base, "text", text, {
          exact
        })]);
        continue;
      }
      if (part.name === "internal:has-text") {
        const {
          exact,
          text
        } = detectExact(part.body);
        if (!exact) {
          tokens.push([factory.generateLocator(base, "has-text", text, {
            exact
          })]);
          continue;
        }
      }
      if (part.name === "internal:has-not-text") {
        const {
          exact,
          text
        } = detectExact(part.body);
        if (!exact) {
          tokens.push([factory.generateLocator(base, "has-not-text", text, {
            exact
          })]);
          continue;
        }
      }
      if (part.name === "internal:has") {
        const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
        tokens.push(inners.map((inner) => factory.generateLocator(base, "has", inner)));
        continue;
      }
      if (part.name === "internal:has-not") {
        const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
        tokens.push(inners.map((inner) => factory.generateLocator(base, "hasNot", inner)));
        continue;
      }
      if (part.name === "internal:and") {
        const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
        tokens.push(inners.map((inner) => factory.generateLocator(base, "and", inner)));
        continue;
      }
      if (part.name === "internal:or") {
        const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
        tokens.push(inners.map((inner) => factory.generateLocator(base, "or", inner)));
        continue;
      }
      if (part.name === "internal:chain") {
        const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
        tokens.push(inners.map((inner) => factory.generateLocator(base, "chain", inner)));
        continue;
      }
      if (part.name === "internal:label") {
        const {
          exact,
          text
        } = detectExact(part.body);
        tokens.push([factory.generateLocator(base, "label", text, {
          exact
        })]);
        continue;
      }
      if (part.name === "internal:role") {
        const attrSelector = (0, _selectorParser.parseAttributeSelector)(part.body, true);
        const options = {
          attrs: []
        };
        for (const attr of attrSelector.attributes) {
          if (attr.name === "name") {
            options.exact = attr.caseSensitive;
            options.name = attr.value;
          } else {
            if (attr.name === "level" && typeof attr.value === "string")
              attr.value = +attr.value;
            options.attrs.push({
              name: attr.name === "include-hidden" ? "includeHidden" : attr.name,
              value: attr.value
            });
          }
        }
        tokens.push([factory.generateLocator(base, "role", attrSelector.name, options)]);
        continue;
      }
      if (part.name === "internal:testid") {
        const attrSelector = (0, _selectorParser.parseAttributeSelector)(part.body, true);
        const {
          value
        } = attrSelector.attributes[0];
        tokens.push([factory.generateLocator(base, "test-id", value)]);
        continue;
      }
      if (part.name === "internal:attr") {
        const attrSelector = (0, _selectorParser.parseAttributeSelector)(part.body, true);
        const {
          name,
          value,
          caseSensitive
        } = attrSelector.attributes[0];
        const text = value;
        const exact = !!caseSensitive;
        if (name === "placeholder") {
          tokens.push([factory.generateLocator(base, "placeholder", text, {
            exact
          })]);
          continue;
        }
        if (name === "alt") {
          tokens.push([factory.generateLocator(base, "alt", text, {
            exact
          })]);
          continue;
        }
        if (name === "title") {
          tokens.push([factory.generateLocator(base, "title", text, {
            exact
          })]);
          continue;
        }
      }
      let locatorType = "default";
      const nextPart = parts[index + 1];
      if (nextPart && nextPart.name === "internal:control" && nextPart.body === "enter-frame") {
        locatorType = "frame";
        nextBase = "frame-locator";
        index++;
      }
      const selectorPart = (0, _selectorParser.stringifySelector)({
        parts: [part]
      });
      const locatorPart = factory.generateLocator(base, locatorType, selectorPart);
      if (locatorType === "default" && nextPart && ["internal:has-text", "internal:has-not-text"].includes(nextPart.name)) {
        const {
          exact,
          text
        } = detectExact(nextPart.body);
        if (!exact) {
          const nextLocatorPart = factory.generateLocator("locator", nextPart.name === "internal:has-text" ? "has-text" : "has-not-text", text, {
            exact
          });
          const options = {};
          if (nextPart.name === "internal:has-text")
            options.hasText = text;
          else
            options.hasNotText = text;
          const combinedPart = factory.generateLocator(base, "default", selectorPart, options);
          tokens.push([factory.chainLocators([locatorPart, nextLocatorPart]), combinedPart]);
          index++;
          continue;
        }
      }
      let locatorPartWithEngine;
      if (["xpath", "css"].includes(part.name)) {
        const selectorPart2 = (0, _selectorParser.stringifySelector)({
          parts: [part]
        }, true);
        locatorPartWithEngine = factory.generateLocator(base, locatorType, selectorPart2);
      }
      tokens.push([locatorPart, locatorPartWithEngine].filter(Boolean));
    }
    return combineTokens(factory, tokens, maxOutputSize);
  };
  var combineTokens = function(factory, tokens, maxOutputSize) {
    const currentTokens = tokens.map(() => "");
    const result = [];
    const visit = (index) => {
      if (index === tokens.length) {
        result.push(factory.chainLocators(currentTokens));
        return currentTokens.length < maxOutputSize;
      }
      for (const taken of tokens[index]) {
        currentTokens[index] = taken;
        if (!visit(index + 1))
          return false;
      }
      return true;
    };
    visit(0);
    return result;
  };
  var detectExact = function(text) {
    let exact = false;
    const match = text.match(/^\/(.*)\/([igm]*)$/);
    if (match)
      return {
        text: new RegExp(match[1], match[2])
      };
    if (text.endsWith('"')) {
      text = JSON.parse(text);
      exact = true;
    } else if (text.endsWith('"s')) {
      text = JSON.parse(text.substring(0, text.length - 1));
      exact = true;
    } else if (text.endsWith('"i')) {
      text = JSON.parse(text.substring(0, text.length - 1));
      exact = false;
    }
    return {
      exact,
      text
    };
  };
  var isRegExp = function(obj) {
    return obj instanceof RegExp;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PythonLocatorFactory = exports.JsonlLocatorFactory = exports.JavaScriptLocatorFactory = exports.JavaLocatorFactory = exports.CSharpLocatorFactory = undefined;
  exports.asLocator = asLocator;
  exports.asLocators = asLocators;
  var _stringUtils = require_stringUtils();
  var _selectorParser = require_selectorParser();

  class JavaScriptLocatorFactory {
    constructor(preferredQuote) {
      this.preferredQuote = preferredQuote;
    }
    generateLocator(base, kind, body, options = {}) {
      switch (kind) {
        case "default":
          if (options.hasText !== undefined)
            return `locator(${this.quote(body)}, { hasText: ${this.toHasText(options.hasText)} })`;
          if (options.hasNotText !== undefined)
            return `locator(${this.quote(body)}, { hasNotText: ${this.toHasText(options.hasNotText)} })`;
          return `locator(${this.quote(body)})`;
        case "frame":
          return `frameLocator(${this.quote(body)})`;
        case "nth":
          return `nth(${body})`;
        case "first":
          return `first()`;
        case "last":
          return `last()`;
        case "role":
          const attrs = [];
          if (isRegExp(options.name)) {
            attrs.push(`name: ${this.regexToSourceString(options.name)}`);
          } else if (typeof options.name === "string") {
            attrs.push(`name: ${this.quote(options.name)}`);
            if (options.exact)
              attrs.push(`exact: true`);
          }
          for (const {
            name,
            value
          } of options.attrs)
            attrs.push(`${name}: ${typeof value === "string" ? this.quote(value) : value}`);
          const attrString = attrs.length ? `, { ${attrs.join(", ")} }` : "";
          return `getByRole(${this.quote(body)}${attrString})`;
        case "has-text":
          return `filter({ hasText: ${this.toHasText(body)} })`;
        case "has-not-text":
          return `filter({ hasNotText: ${this.toHasText(body)} })`;
        case "has":
          return `filter({ has: ${body} })`;
        case "hasNot":
          return `filter({ hasNot: ${body} })`;
        case "and":
          return `and(${body})`;
        case "or":
          return `or(${body})`;
        case "chain":
          return `locator(${body})`;
        case "test-id":
          return `getByTestId(${this.toTestIdValue(body)})`;
        case "text":
          return this.toCallWithExact("getByText", body, !!options.exact);
        case "alt":
          return this.toCallWithExact("getByAltText", body, !!options.exact);
        case "placeholder":
          return this.toCallWithExact("getByPlaceholder", body, !!options.exact);
        case "label":
          return this.toCallWithExact("getByLabel", body, !!options.exact);
        case "title":
          return this.toCallWithExact("getByTitle", body, !!options.exact);
        default:
          throw new Error("Unknown selector kind " + kind);
      }
    }
    chainLocators(locators) {
      return locators.join(".");
    }
    regexToSourceString(re) {
      return (0, _stringUtils.normalizeEscapedRegexQuotes)(String(re));
    }
    toCallWithExact(method, body, exact) {
      if (isRegExp(body))
        return `${method}(${this.regexToSourceString(body)})`;
      return exact ? `${method}(${this.quote(body)}, { exact: true })` : `${method}(${this.quote(body)})`;
    }
    toHasText(body) {
      if (isRegExp(body))
        return this.regexToSourceString(body);
      return this.quote(body);
    }
    toTestIdValue(value) {
      if (isRegExp(value))
        return this.regexToSourceString(value);
      return this.quote(value);
    }
    quote(text) {
      var _this$preferredQuote;
      return (0, _stringUtils.escapeWithQuotes)(text, (_this$preferredQuote = this.preferredQuote) !== null && _this$preferredQuote !== undefined ? _this$preferredQuote : "\'");
    }
  }
  exports.JavaScriptLocatorFactory = JavaScriptLocatorFactory;

  class PythonLocatorFactory {
    generateLocator(base, kind, body, options = {}) {
      switch (kind) {
        case "default":
          if (options.hasText !== undefined)
            return `locator(${this.quote(body)}, has_text=${this.toHasText(options.hasText)})`;
          if (options.hasNotText !== undefined)
            return `locator(${this.quote(body)}, has_not_text=${this.toHasText(options.hasNotText)})`;
          return `locator(${this.quote(body)})`;
        case "frame":
          return `frame_locator(${this.quote(body)})`;
        case "nth":
          return `nth(${body})`;
        case "first":
          return `first`;
        case "last":
          return `last`;
        case "role":
          const attrs = [];
          if (isRegExp(options.name)) {
            attrs.push(`name=${this.regexToString(options.name)}`);
          } else if (typeof options.name === "string") {
            attrs.push(`name=${this.quote(options.name)}`);
            if (options.exact)
              attrs.push(`exact=True`);
          }
          for (const {
            name,
            value
          } of options.attrs) {
            let valueString = typeof value === "string" ? this.quote(value) : value;
            if (typeof value === "boolean")
              valueString = value ? "True" : "False";
            attrs.push(`${(0, _stringUtils.toSnakeCase)(name)}=${valueString}`);
          }
          const attrString = attrs.length ? `, ${attrs.join(", ")}` : "";
          return `get_by_role(${this.quote(body)}${attrString})`;
        case "has-text":
          return `filter(has_text=${this.toHasText(body)})`;
        case "has-not-text":
          return `filter(has_not_text=${this.toHasText(body)})`;
        case "has":
          return `filter(has=${body})`;
        case "hasNot":
          return `filter(has_not=${body})`;
        case "and":
          return `and_(${body})`;
        case "or":
          return `or_(${body})`;
        case "chain":
          return `locator(${body})`;
        case "test-id":
          return `get_by_test_id(${this.toTestIdValue(body)})`;
        case "text":
          return this.toCallWithExact("get_by_text", body, !!options.exact);
        case "alt":
          return this.toCallWithExact("get_by_alt_text", body, !!options.exact);
        case "placeholder":
          return this.toCallWithExact("get_by_placeholder", body, !!options.exact);
        case "label":
          return this.toCallWithExact("get_by_label", body, !!options.exact);
        case "title":
          return this.toCallWithExact("get_by_title", body, !!options.exact);
        default:
          throw new Error("Unknown selector kind " + kind);
      }
    }
    chainLocators(locators) {
      return locators.join(".");
    }
    regexToString(body) {
      const suffix = body.flags.includes("i") ? ", re.IGNORECASE" : "";
      return `re.compile(r"${(0, _stringUtils.normalizeEscapedRegexQuotes)(body.source).replace(/\\\//, "/").replace(/"/g, '\\"')}"${suffix})`;
    }
    toCallWithExact(method, body, exact) {
      if (isRegExp(body))
        return `${method}(${this.regexToString(body)})`;
      if (exact)
        return `${method}(${this.quote(body)}, exact=True)`;
      return `${method}(${this.quote(body)})`;
    }
    toHasText(body) {
      if (isRegExp(body))
        return this.regexToString(body);
      return `${this.quote(body)}`;
    }
    toTestIdValue(value) {
      if (isRegExp(value))
        return this.regexToString(value);
      return this.quote(value);
    }
    quote(text) {
      return (0, _stringUtils.escapeWithQuotes)(text, "\"");
    }
  }
  exports.PythonLocatorFactory = PythonLocatorFactory;

  class JavaLocatorFactory {
    generateLocator(base, kind, body, options = {}) {
      let clazz;
      switch (base) {
        case "page":
          clazz = "Page";
          break;
        case "frame-locator":
          clazz = "FrameLocator";
          break;
        case "locator":
          clazz = "Locator";
          break;
      }
      switch (kind) {
        case "default":
          if (options.hasText !== undefined)
            return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasText(${this.toHasText(options.hasText)}))`;
          if (options.hasNotText !== undefined)
            return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasNotText(${this.toHasText(options.hasNotText)}))`;
          return `locator(${this.quote(body)})`;
        case "frame":
          return `frameLocator(${this.quote(body)})`;
        case "nth":
          return `nth(${body})`;
        case "first":
          return `first()`;
        case "last":
          return `last()`;
        case "role":
          const attrs = [];
          if (isRegExp(options.name)) {
            attrs.push(`.setName(${this.regexToString(options.name)})`);
          } else if (typeof options.name === "string") {
            attrs.push(`.setName(${this.quote(options.name)})`);
            if (options.exact)
              attrs.push(`.setExact(true)`);
          }
          for (const {
            name,
            value
          } of options.attrs)
            attrs.push(`.set${(0, _stringUtils.toTitleCase)(name)}(${typeof value === "string" ? this.quote(value) : value})`);
          const attrString = attrs.length ? `, new ${clazz}.GetByRoleOptions()${attrs.join("")}` : "";
          return `getByRole(AriaRole.${(0, _stringUtils.toSnakeCase)(body).toUpperCase()}${attrString})`;
        case "has-text":
          return `filter(new ${clazz}.FilterOptions().setHasText(${this.toHasText(body)}))`;
        case "has-not-text":
          return `filter(new ${clazz}.FilterOptions().setHasNotText(${this.toHasText(body)}))`;
        case "has":
          return `filter(new ${clazz}.FilterOptions().setHas(${body}))`;
        case "hasNot":
          return `filter(new ${clazz}.FilterOptions().setHasNot(${body}))`;
        case "and":
          return `and(${body})`;
        case "or":
          return `or(${body})`;
        case "chain":
          return `locator(${body})`;
        case "test-id":
          return `getByTestId(${this.toTestIdValue(body)})`;
        case "text":
          return this.toCallWithExact(clazz, "getByText", body, !!options.exact);
        case "alt":
          return this.toCallWithExact(clazz, "getByAltText", body, !!options.exact);
        case "placeholder":
          return this.toCallWithExact(clazz, "getByPlaceholder", body, !!options.exact);
        case "label":
          return this.toCallWithExact(clazz, "getByLabel", body, !!options.exact);
        case "title":
          return this.toCallWithExact(clazz, "getByTitle", body, !!options.exact);
        default:
          throw new Error("Unknown selector kind " + kind);
      }
    }
    chainLocators(locators) {
      return locators.join(".");
    }
    regexToString(body) {
      const suffix = body.flags.includes("i") ? ", Pattern.CASE_INSENSITIVE" : "";
      return `Pattern.compile(${this.quote((0, _stringUtils.normalizeEscapedRegexQuotes)(body.source))}${suffix})`;
    }
    toCallWithExact(clazz, method, body, exact) {
      if (isRegExp(body))
        return `${method}(${this.regexToString(body)})`;
      if (exact)
        return `${method}(${this.quote(body)}, new ${clazz}.${(0, _stringUtils.toTitleCase)(method)}Options().setExact(true))`;
      return `${method}(${this.quote(body)})`;
    }
    toHasText(body) {
      if (isRegExp(body))
        return this.regexToString(body);
      return this.quote(body);
    }
    toTestIdValue(value) {
      if (isRegExp(value))
        return this.regexToString(value);
      return this.quote(value);
    }
    quote(text) {
      return (0, _stringUtils.escapeWithQuotes)(text, "\"");
    }
  }
  exports.JavaLocatorFactory = JavaLocatorFactory;

  class CSharpLocatorFactory {
    generateLocator(base, kind, body, options = {}) {
      switch (kind) {
        case "default":
          if (options.hasText !== undefined)
            return `Locator(${this.quote(body)}, new() { ${this.toHasText(options.hasText)} })`;
          if (options.hasNotText !== undefined)
            return `Locator(${this.quote(body)}, new() { ${this.toHasNotText(options.hasNotText)} })`;
          return `Locator(${this.quote(body)})`;
        case "frame":
          return `FrameLocator(${this.quote(body)})`;
        case "nth":
          return `Nth(${body})`;
        case "first":
          return `First`;
        case "last":
          return `Last`;
        case "role":
          const attrs = [];
          if (isRegExp(options.name)) {
            attrs.push(`NameRegex = ${this.regexToString(options.name)}`);
          } else if (typeof options.name === "string") {
            attrs.push(`Name = ${this.quote(options.name)}`);
            if (options.exact)
              attrs.push(`Exact = true`);
          }
          for (const {
            name,
            value
          } of options.attrs)
            attrs.push(`${(0, _stringUtils.toTitleCase)(name)} = ${typeof value === "string" ? this.quote(value) : value}`);
          const attrString = attrs.length ? `, new() { ${attrs.join(", ")} }` : "";
          return `GetByRole(AriaRole.${(0, _stringUtils.toTitleCase)(body)}${attrString})`;
        case "has-text":
          return `Filter(new() { ${this.toHasText(body)} })`;
        case "has-not-text":
          return `Filter(new() { ${this.toHasNotText(body)} })`;
        case "has":
          return `Filter(new() { Has = ${body} })`;
        case "hasNot":
          return `Filter(new() { HasNot = ${body} })`;
        case "and":
          return `And(${body})`;
        case "or":
          return `Or(${body})`;
        case "chain":
          return `Locator(${body})`;
        case "test-id":
          return `GetByTestId(${this.toTestIdValue(body)})`;
        case "text":
          return this.toCallWithExact("GetByText", body, !!options.exact);
        case "alt":
          return this.toCallWithExact("GetByAltText", body, !!options.exact);
        case "placeholder":
          return this.toCallWithExact("GetByPlaceholder", body, !!options.exact);
        case "label":
          return this.toCallWithExact("GetByLabel", body, !!options.exact);
        case "title":
          return this.toCallWithExact("GetByTitle", body, !!options.exact);
        default:
          throw new Error("Unknown selector kind " + kind);
      }
    }
    chainLocators(locators) {
      return locators.join(".");
    }
    regexToString(body) {
      const suffix = body.flags.includes("i") ? ", RegexOptions.IgnoreCase" : "";
      return `new Regex(${this.quote((0, _stringUtils.normalizeEscapedRegexQuotes)(body.source))}${suffix})`;
    }
    toCallWithExact(method, body, exact) {
      if (isRegExp(body))
        return `${method}(${this.regexToString(body)})`;
      if (exact)
        return `${method}(${this.quote(body)}, new() { Exact = true })`;
      return `${method}(${this.quote(body)})`;
    }
    toHasText(body) {
      if (isRegExp(body))
        return `HasTextRegex = ${this.regexToString(body)}`;
      return `HasText = ${this.quote(body)}`;
    }
    toTestIdValue(value) {
      if (isRegExp(value))
        return this.regexToString(value);
      return this.quote(value);
    }
    toHasNotText(body) {
      if (isRegExp(body))
        return `HasNotTextRegex = ${this.regexToString(body)}`;
      return `HasNotText = ${this.quote(body)}`;
    }
    quote(text) {
      return (0, _stringUtils.escapeWithQuotes)(text, "\"");
    }
  }
  exports.CSharpLocatorFactory = CSharpLocatorFactory;

  class JsonlLocatorFactory {
    generateLocator(base, kind, body, options = {}) {
      return JSON.stringify({
        kind,
        body,
        options
      });
    }
    chainLocators(locators) {
      const objects = locators.map((l) => JSON.parse(l));
      for (let i = 0;i < objects.length - 1; ++i)
        objects[i].next = objects[i + 1];
      return JSON.stringify(objects[0]);
    }
  }
  exports.JsonlLocatorFactory = JsonlLocatorFactory;
  var generators = {
    javascript: JavaScriptLocatorFactory,
    python: PythonLocatorFactory,
    java: JavaLocatorFactory,
    csharp: CSharpLocatorFactory,
    jsonl: JsonlLocatorFactory
  };
});

// node_modules/playwright-core/lib/utils/index.js
var require_utils3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _ascii = require_ascii();
  Object.keys(_ascii).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _ascii[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _ascii[key];
      }
    });
  });
  var _comparators = require_comparators();
  Object.keys(_comparators).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _comparators[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _comparators[key];
      }
    });
  });
  var _crypto = require_crypto();
  Object.keys(_crypto).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _crypto[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _crypto[key];
      }
    });
  });
  var _debug = require_debug5();
  Object.keys(_debug).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _debug[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _debug[key];
      }
    });
  });
  var _env = require_env();
  Object.keys(_env).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _env[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _env[key];
      }
    });
  });
  var _eventsHelper = require_eventsHelper();
  Object.keys(_eventsHelper).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _eventsHelper[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _eventsHelper[key];
      }
    });
  });
  var _fileUtils = require_fileUtils();
  Object.keys(_fileUtils).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _fileUtils[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _fileUtils[key];
      }
    });
  });
  var _glob = require_glob();
  Object.keys(_glob).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _glob[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _glob[key];
      }
    });
  });
  var _headers = require_headers();
  Object.keys(_headers).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _headers[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _headers[key];
      }
    });
  });
  var _hostPlatform = require_hostPlatform();
  Object.keys(_hostPlatform).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _hostPlatform[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _hostPlatform[key];
      }
    });
  });
  var _httpServer = require_httpServer();
  Object.keys(_httpServer).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _httpServer[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _httpServer[key];
      }
    });
  });
  var _manualPromise = require_manualPromise();
  Object.keys(_manualPromise).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _manualPromise[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _manualPromise[key];
      }
    });
  });
  var _mimeType = require_mimeType();
  Object.keys(_mimeType).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _mimeType[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _mimeType[key];
      }
    });
  });
  var _multimap = require_multimap();
  Object.keys(_multimap).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _multimap[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _multimap[key];
      }
    });
  });
  var _network = require_network();
  Object.keys(_network).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _network[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _network[key];
      }
    });
  });
  var _processLauncher = require_processLauncher();
  Object.keys(_processLauncher).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _processLauncher[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _processLauncher[key];
      }
    });
  });
  var _profiler = require_profiler();
  Object.keys(_profiler).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _profiler[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _profiler[key];
      }
    });
  });
  var _rtti = require_rtti();
  Object.keys(_rtti).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _rtti[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _rtti[key];
      }
    });
  });
  var _semaphore = require_semaphore();
  Object.keys(_semaphore).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _semaphore[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _semaphore[key];
      }
    });
  });
  var _spawnAsync = require_spawnAsync();
  Object.keys(_spawnAsync).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _spawnAsync[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _spawnAsync[key];
      }
    });
  });
  var _stackTrace = require_stackTrace();
  Object.keys(_stackTrace).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _stackTrace[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _stackTrace[key];
      }
    });
  });
  var _task = require_task();
  Object.keys(_task).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _task[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _task[key];
      }
    });
  });
  var _time = require_time();
  Object.keys(_time).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _time[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _time[key];
      }
    });
  });
  var _timeoutRunner = require_timeoutRunner();
  Object.keys(_timeoutRunner).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _timeoutRunner[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _timeoutRunner[key];
      }
    });
  });
  var _traceUtils = require_traceUtils();
  Object.keys(_traceUtils).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _traceUtils[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _traceUtils[key];
      }
    });
  });
  var _userAgent = require_userAgent();
  Object.keys(_userAgent).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _userAgent[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _userAgent[key];
      }
    });
  });
  var _wsServer = require_wsServer();
  Object.keys(_wsServer).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _wsServer[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _wsServer[key];
      }
    });
  });
  var _zipFile = require_zipFile();
  Object.keys(_zipFile).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _zipFile[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _zipFile[key];
      }
    });
  });
  var _zones = require_zones();
  Object.keys(_zones).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _zones[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _zones[key];
      }
    });
  });
  var _locatorGenerators = require_locatorGenerators();
  Object.keys(_locatorGenerators).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _locatorGenerators[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _locatorGenerators[key];
      }
    });
  });
  var _stringUtils = require_stringUtils();
  Object.keys(_stringUtils).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _stringUtils[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _stringUtils[key];
      }
    });
  });
});

// node_modules/playwright-core/lib/utils/stackTrace.js
var require_stackTrace = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var rewriteErrorMessage = function(e, newMessage) {
    var _e$stack;
    const lines = (((_e$stack = e.stack) === null || _e$stack === undefined ? undefined : _e$stack.split("\n")) || []).filter((l) => l.startsWith("    at "));
    e.message = newMessage;
    const errorTitle = `${e.name}: ${e.message}`;
    if (lines.length)
      e.stack = `${errorTitle}\n${lines.join("\n")}`;
    return e;
  };
  var captureRawStack = function() {
    const stackTraceLimit = Error.stackTraceLimit;
    Error.stackTraceLimit = 50;
    const error = new Error;
    const stack = error.stack || "";
    Error.stackTraceLimit = stackTraceLimit;
    return stack.split("\n");
  };
  var captureLibraryStackTrace = function(rawStack) {
    const stack = rawStack || captureRawStack();
    const isTesting = (0, _.isUnderTest)();
    let parsedFrames = stack.map((line) => {
      const frame = (0, _utilsBundle.parseStackTraceLine)(line);
      if (!frame || !frame.file)
        return null;
      if (!process.env.PWDEBUGIMPL && isTesting && frame.file.includes(COVERAGE_PATH))
        return null;
      const isPlaywrightLibrary = frame.file.startsWith(CORE_DIR);
      const parsed = {
        frame,
        frameText: line,
        isPlaywrightLibrary
      };
      return parsed;
    }).filter(Boolean);
    let apiName = "";
    for (let i = 0;i < parsedFrames.length - 1; i++) {
      const parsedFrame = parsedFrames[i];
      if (parsedFrame.isPlaywrightLibrary && !parsedFrames[i + 1].isPlaywrightLibrary) {
        apiName = apiName || normalizeAPIName(parsedFrame.frame.function);
        break;
      }
    }
    function normalizeAPIName(name) {
      if (!name)
        return "";
      const match = name.match(/(API|JS|CDP|[A-Z])(.*)/);
      if (!match)
        return name;
      return match[1].toLowerCase() + match[2];
    }
    parsedFrames = parsedFrames.filter((f) => {
      if (process.env.PWDEBUGIMPL)
        return true;
      if (internalStackPrefixes.some((prefix) => f.frame.file.startsWith(prefix)))
        return false;
      return true;
    });
    return {
      frames: parsedFrames.map((p) => p.frame),
      apiName
    };
  };
  var stringifyStackFrames = function(frames) {
    const stackLines = [];
    for (const frame of frames) {
      if (frame.function)
        stackLines.push(`    at ${frame.function} (${frame.file}:${frame.line}:${frame.column})`);
      else
        stackLines.push(`    at ${frame.file}:${frame.line}:${frame.column}`);
    }
    return stackLines;
  };
  var captureLibraryStackText = function() {
    const parsed = captureLibraryStackTrace();
    return stringifyStackFrames(parsed.frames).join("\n");
  };
  var splitErrorMessage = function(message) {
    const separationIdx = message.indexOf(":");
    return {
      name: separationIdx !== -1 ? message.slice(0, separationIdx) : "",
      message: separationIdx !== -1 && separationIdx + 2 <= message.length ? message.substring(separationIdx + 2) : message
    };
  };
  var formatCallLog = function(log) {
    if (!log || !log.some((l) => !!l))
      return "";
    return `
Call log:
  ${_utilsBundle.colors.dim("- " + (log || []).join("\n  - "))}
`;
  };
  var __dirname = "/Users/hottin/project/jwave_playlist/node_modules/playwright-core/lib/utils";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.addInternalStackPrefix = undefined;
  exports.captureLibraryStackText = captureLibraryStackText;
  exports.captureLibraryStackTrace = captureLibraryStackTrace;
  exports.captureRawStack = captureRawStack;
  exports.formatCallLog = formatCallLog;
  exports.rewriteErrorMessage = rewriteErrorMessage;
  exports.splitErrorMessage = splitErrorMessage;
  exports.stringifyStackFrames = stringifyStackFrames;
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _utilsBundle = require_utilsBundle();
  var _ = require_utils3();
  var CORE_DIR = _path.default.resolve(__dirname, "..", "..");
  var COVERAGE_PATH = _path.default.join(CORE_DIR, "..", "..", "tests", "config", "coverage.js");
  var internalStackPrefixes = [CORE_DIR];
  var addInternalStackPrefix = (prefix) => internalStackPrefixes.push(prefix);
  exports.addInternalStackPrefix = addInternalStackPrefix;
});

// node_modules/playwright-core/lib/utils/manualPromise.js
var require_manualPromise = __commonJS((exports) => {
  var cloneError = function(error, frames) {
    const clone = new Error;
    clone.name = error.name;
    clone.message = error.message;
    clone.stack = [error.name + ":" + error.message, ...frames].join("\n");
    return clone;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ManualPromise = exports.LongStandingScope = undefined;
  var _stackTrace = require_stackTrace();
  var _Symbol$species;
  var _Symbol$toStringTag;
  _Symbol$species = Symbol.species;
  _Symbol$toStringTag = Symbol.toStringTag;

  class ManualPromise extends Promise {
    constructor() {
      let resolve;
      let reject;
      super((f, r) => {
        resolve = f;
        reject = r;
      });
      this._resolve = undefined;
      this._reject = undefined;
      this._isDone = undefined;
      this._isDone = false;
      this._resolve = resolve;
      this._reject = reject;
    }
    isDone() {
      return this._isDone;
    }
    resolve(t) {
      this._isDone = true;
      this._resolve(t);
    }
    reject(e) {
      this._isDone = true;
      this._reject(e);
    }
    static get [_Symbol$species]() {
      return Promise;
    }
    get [_Symbol$toStringTag]() {
      return "ManualPromise";
    }
  }
  exports.ManualPromise = ManualPromise;

  class LongStandingScope {
    constructor() {
      this._terminateError = undefined;
      this._closeError = undefined;
      this._terminatePromises = new Map;
      this._isClosed = false;
    }
    reject(error) {
      this._isClosed = true;
      this._terminateError = error;
      for (const p of this._terminatePromises.keys())
        p.resolve(error);
    }
    close(error) {
      this._isClosed = true;
      this._closeError = error;
      for (const [p, frames] of this._terminatePromises)
        p.resolve(cloneError(error, frames));
    }
    isClosed() {
      return this._isClosed;
    }
    static async raceMultiple(scopes, promise) {
      return Promise.race(scopes.map((s) => s.race(promise)));
    }
    async race(promise) {
      return this._race(Array.isArray(promise) ? promise : [promise], false);
    }
    async safeRace(promise, defaultValue) {
      return this._race([promise], true, defaultValue);
    }
    async _race(promises, safe, defaultValue) {
      const terminatePromise = new ManualPromise;
      const frames = (0, _stackTrace.captureRawStack)();
      if (this._terminateError)
        terminatePromise.resolve(this._terminateError);
      if (this._closeError)
        terminatePromise.resolve(cloneError(this._closeError, frames));
      this._terminatePromises.set(terminatePromise, frames);
      try {
        return await Promise.race([terminatePromise.then((e) => safe ? defaultValue : Promise.reject(e)), ...promises]);
      } finally {
        this._terminatePromises.delete(terminatePromise);
      }
    }
  }
  exports.LongStandingScope = LongStandingScope;
});

// node_modules/playwright-core/lib/utils/happy-eyeballs.js
var require_happy_eyeballs = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  async function createSocket(host, port) {
    return new Promise((resolve, reject) => {
      if (net.isIP(host)) {
        const socket = net.createConnection({
          host,
          port
        });
        socket.on("connect", () => resolve(socket));
        socket.on("error", (error) => reject(error));
      } else {
        createConnectionAsync({
          host,
          port
        }, (err, socket) => {
          if (err)
            reject(err);
          if (socket)
            resolve(socket);
        }, false).catch((err) => reject(err));
      }
    });
  }
  async function createConnectionAsync(options, oncreate, useTLS) {
    const lookup = options.__testHookLookup || lookupAddresses;
    const hostname = clientRequestArgsToHostName(options);
    const addresses = await lookup(hostname);
    const sockets = new Set;
    let firstError;
    let errorCount = 0;
    const handleError = (socket, err) => {
      var _firstError;
      if (!sockets.delete(socket))
        return;
      ++errorCount;
      (_firstError = firstError) !== null && _firstError !== undefined || (firstError = err);
      if (errorCount === addresses.length)
        oncreate === null || oncreate === undefined || oncreate(firstError);
    };
    const connected = new _manualPromise.ManualPromise;
    for (const {
      address
    } of addresses) {
      const socket = useTLS ? tls.connect({
        ...options,
        port: options.port,
        host: address,
        servername: hostname
      }) : net.createConnection({
        ...options,
        port: options.port,
        host: address
      });
      socket.on("connect", () => {
        connected.resolve();
        oncreate === null || oncreate === undefined || oncreate(null, socket);
        sockets.delete(socket);
        for (const s of sockets)
          s.destroy();
        sockets.clear();
      });
      socket.on("timeout", () => {
        socket.destroy();
        handleError(socket, new Error("Connection timeout"));
      });
      socket.on("error", (e) => handleError(socket, e));
      sockets.add(socket);
      await Promise.race([connected, new Promise((f) => setTimeout(f, connectionAttemptDelayMs))]);
      if (connected.isDone())
        break;
    }
  }
  async function lookupAddresses(hostname) {
    const addresses = await dns.promises.lookup(hostname, {
      all: true,
      family: 0,
      verbatim: true
    });
    let firstFamily = addresses.filter(({
      family
    }) => family === 6);
    let secondFamily = addresses.filter(({
      family
    }) => family === 4);
    if (firstFamily.length && firstFamily[0] !== addresses[0]) {
      const tmp = firstFamily;
      firstFamily = secondFamily;
      secondFamily = tmp;
    }
    const result = [];
    for (let i = 0;i < Math.max(firstFamily.length, secondFamily.length); i++) {
      if (firstFamily[i])
        result.push(firstFamily[i]);
      if (secondFamily[i])
        result.push(secondFamily[i]);
    }
    return result;
  }
  var clientRequestArgsToHostName = function(options) {
    if (options.hostname)
      return options.hostname;
    if (options.host)
      return options.host;
    throw new Error("Either options.hostname or options.host must be provided");
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createSocket = createSocket;
  exports.httpsHappyEyeballsAgent = exports.httpHappyEyeballsAgent = undefined;
  var dns = _interopRequireWildcard(import.meta.require("dns"));
  var http = _interopRequireWildcard(import.meta.require("http"));
  var https = _interopRequireWildcard(import.meta.require("https"));
  var net = _interopRequireWildcard(import.meta.require("net"));
  var tls = _interopRequireWildcard(import.meta.require("tls"));
  var _manualPromise = require_manualPromise();
  var connectionAttemptDelayMs = 300;

  class HttpHappyEyeballsAgent extends http.Agent {
    createConnection(options, oncreate) {
      if (net.isIP(clientRequestArgsToHostName(options)))
        return net.createConnection(options);
      createConnectionAsync(options, oncreate, false).catch((err) => oncreate === null || oncreate === undefined ? undefined : oncreate(err));
    }
  }

  class HttpsHappyEyeballsAgent extends https.Agent {
    createConnection(options, oncreate) {
      if (net.isIP(clientRequestArgsToHostName(options)))
        return tls.connect(options);
      createConnectionAsync(options, oncreate, true).catch((err) => oncreate === null || oncreate === undefined ? undefined : oncreate(err));
    }
  }
  var httpsHappyEyeballsAgent = exports.httpsHappyEyeballsAgent = new HttpsHappyEyeballsAgent;
  var httpHappyEyeballsAgent = exports.httpHappyEyeballsAgent = new HttpHappyEyeballsAgent;
});

// node_modules/playwright-core/lib/utils/network.js
var require_network = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var httpRequest = function(params, onResponse, onError) {
    var _params$timeout;
    const parsedUrl = _url.default.parse(params.url);
    let options = {
      ...parsedUrl,
      agent: parsedUrl.protocol === "https:" ? _happyEyeballs.httpsHappyEyeballsAgent : _happyEyeballs.httpHappyEyeballsAgent,
      method: params.method || "GET",
      headers: params.headers
    };
    if (params.rejectUnauthorized !== undefined)
      options.rejectUnauthorized = params.rejectUnauthorized;
    const timeout = (_params$timeout = params.timeout) !== null && _params$timeout !== undefined ? _params$timeout : NET_DEFAULT_TIMEOUT;
    const proxyURL = (0, _utilsBundle.getProxyForUrl)(params.url);
    if (proxyURL) {
      const parsedProxyURL = _url.default.parse(proxyURL);
      if (params.url.startsWith("http:")) {
        options = {
          path: parsedUrl.href,
          host: parsedProxyURL.hostname,
          port: parsedProxyURL.port,
          headers: options.headers,
          method: options.method
        };
      } else {
        parsedProxyURL.secureProxy = parsedProxyURL.protocol === "https:";
        options.agent = new _utilsBundle.HttpsProxyAgent(parsedProxyURL);
        options.rejectUnauthorized = false;
      }
    }
    const requestCallback = (res) => {
      const statusCode = res.statusCode || 0;
      if (statusCode >= 300 && statusCode < 400 && res.headers.location)
        httpRequest({
          ...params,
          url: new URL(res.headers.location, params.url).toString()
        }, onResponse, onError);
      else
        onResponse(res);
    };
    const request = options.protocol === "https:" ? _https.default.request(options, requestCallback) : _http.default.request(options, requestCallback);
    request.on("error", onError);
    if (timeout !== undefined) {
      const rejectOnTimeout = () => {
        onError(new Error(`Request to ${params.url} timed out after ${timeout}ms`));
        request.abort();
      };
      if (timeout <= 0) {
        rejectOnTimeout();
        return;
      }
      request.setTimeout(timeout, rejectOnTimeout);
    }
    request.end(params.data);
  };
  var fetchData = function(params, onError) {
    return new Promise((resolve, reject) => {
      httpRequest(params, async (response) => {
        if (response.statusCode !== 200) {
          const error = onError ? await onError(params, response) : new Error(`fetch failed: server returned code ${response.statusCode}. URL: ${params.url}`);
          reject(error);
          return;
        }
        let body = "";
        response.on("data", (chunk) => body += chunk);
        response.on("error", (error) => reject(error));
        response.on("end", () => resolve(body));
      }, reject);
    });
  };
  var urlMatchesEqual = function(match1, match2) {
    if ((0, _rtti.isRegExp)(match1) && (0, _rtti.isRegExp)(match2))
      return match1.source === match2.source && match1.flags === match2.flags;
    return match1 === match2;
  };
  var urlMatches = function(baseURL, urlString, match) {
    if (match === undefined || match === "")
      return true;
    if ((0, _rtti.isString)(match) && !match.startsWith("*"))
      match = constructURLBasedOnBaseURL(baseURL, match);
    if ((0, _rtti.isString)(match))
      match = (0, _glob.globToRegex)(match);
    if ((0, _rtti.isRegExp)(match))
      return match.test(urlString);
    if (typeof match === "string" && match === urlString)
      return true;
    const url = parsedURL(urlString);
    if (!url)
      return false;
    if (typeof match === "string")
      return url.pathname === match;
    if (typeof match !== "function")
      throw new Error("url parameter should be string, RegExp or function");
    return match(url);
  };
  var parsedURL = function(url) {
    try {
      return new URL(url);
    } catch (e) {
      return null;
    }
  };
  var constructURLBasedOnBaseURL = function(baseURL, givenURL) {
    try {
      return new URL(givenURL, baseURL).toString();
    } catch (e) {
      return givenURL;
    }
  };
  var createHttpServer = function(...args) {
    const server = _http.default.createServer(...args);
    decorateServer(server);
    return server;
  };
  var createHttpsServer = function(...args) {
    const server = _https.default.createServer(...args);
    decorateServer(server);
    return server;
  };
  async function isURLAvailable(url, ignoreHTTPSErrors, onLog, onStdErr) {
    let statusCode = await httpStatusCode(url, ignoreHTTPSErrors, onLog, onStdErr);
    if (statusCode === 404 && url.pathname === "/") {
      const indexUrl = new URL(url);
      indexUrl.pathname = "/index.html";
      statusCode = await httpStatusCode(indexUrl, ignoreHTTPSErrors, onLog, onStdErr);
    }
    return statusCode >= 200 && statusCode < 404;
  }
  async function httpStatusCode(url, ignoreHTTPSErrors, onLog, onStdErr) {
    return new Promise((resolve) => {
      onLog === null || onLog === undefined || onLog(`HTTP HEAD: ${url}`);
      httpRequest({
        method: "HEAD",
        url: url.toString(),
        headers: {
          Accept: "*/*"
        },
        rejectUnauthorized: !ignoreHTTPSErrors
      }, (res) => {
        var _res$statusCode;
        res.resume();
        const statusCode = (_res$statusCode = res.statusCode) !== null && _res$statusCode !== undefined ? _res$statusCode : 0;
        onLog === null || onLog === undefined || onLog(`HTTP Status: ${statusCode}`);
        resolve(statusCode);
      }, (error) => {
        if (error.code === "DEPTH_ZERO_SELF_SIGNED_CERT")
          onStdErr === null || onStdErr === undefined || onStdErr(`[WebServer] Self-signed certificate detected. Try adding ignoreHTTPSErrors: true to config.webServer.`);
        onLog === null || onLog === undefined || onLog(`Error while checking if ${url} is available: ${error.message}`);
        resolve(0);
      });
    });
  }
  var decorateServer = function(server) {
    const sockets = new Set;
    server.on("connection", (socket) => {
      sockets.add(socket);
      socket.once("close", () => sockets.delete(socket));
    });
    const close = server.close;
    server.close = (callback) => {
      for (const socket of sockets)
        socket.destroy();
      sockets.clear();
      return close.call(server, callback);
    };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NET_DEFAULT_TIMEOUT = undefined;
  exports.constructURLBasedOnBaseURL = constructURLBasedOnBaseURL;
  exports.createHttpServer = createHttpServer;
  exports.createHttpsServer = createHttpsServer;
  exports.fetchData = fetchData;
  exports.httpRequest = httpRequest;
  exports.isURLAvailable = isURLAvailable;
  exports.urlMatches = urlMatches;
  exports.urlMatchesEqual = urlMatchesEqual;
  var _http = _interopRequireDefault(import.meta.require("http"));
  var _https = _interopRequireDefault(import.meta.require("https"));
  var _utilsBundle = require_utilsBundle();
  var _url = _interopRequireDefault(import.meta.require("url"));
  var _rtti = require_rtti();
  var _glob = require_glob();
  var _happyEyeballs = require_happy_eyeballs();
  var NET_DEFAULT_TIMEOUT = exports.NET_DEFAULT_TIMEOUT = 30000;
});

// node_modules/playwright-core/lib/server/registry/nativeDeps.js
var require_nativeDeps = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.deps = undefined;
  var deps = exports.deps = {
    "ubuntu20.04-x64": {
      tools: ["xvfb", "fonts-noto-color-emoji", "ttf-unifont", "libfontconfig", "libfreetype6", "xfonts-cyrillic", "xfonts-scalable", "fonts-liberation", "fonts-ipafont-gothic", "fonts-wqy-zenhei", "fonts-tlwg-loma-otf", "ttf-ubuntu-font-family"],
      chromium: ["fonts-liberation", "libasound2", "libatk-bridge2.0-0", "libatk1.0-0", "libatspi2.0-0", "libcairo2", "libcups2", "libdbus-1-3", "libdrm2", "libegl1", "libgbm1", "libglib2.0-0", "libgtk-3-0", "libnspr4", "libnss3", "libpango-1.0-0", "libx11-6", "libx11-xcb1", "libxcb1", "libxcomposite1", "libxdamage1", "libxext6", "libxfixes3", "libxrandr2", "libxshmfence1"],
      firefox: ["ffmpeg", "libatk1.0-0", "libcairo-gobject2", "libcairo2", "libdbus-1-3", "libdbus-glib-1-2", "libfontconfig1", "libfreetype6", "libgdk-pixbuf2.0-0", "libglib2.0-0", "libgtk-3-0", "libpango-1.0-0", "libpangocairo-1.0-0", "libpangoft2-1.0-0", "libx11-6", "libx11-xcb1", "libxcb-shm0", "libxcb1", "libxcomposite1", "libxcursor1", "libxdamage1", "libxext6", "libxfixes3", "libxi6", "libxrender1", "libxt6", "libxtst6"],
      webkit: ["libenchant-2-2", "libflite1", "libx264-155", "libatk-bridge2.0-0", "libatk1.0-0", "libcairo2", "libegl1", "libenchant1c2a", "libepoxy0", "libevdev2", "libfontconfig1", "libfreetype6", "libgdk-pixbuf2.0-0", "libgl1", "libgles2", "libglib2.0-0", "libgtk-3-0", "libgudev-1.0-0", "libharfbuzz-icu0", "libharfbuzz0b", "libhyphen0", "libicu66", "libjpeg-turbo8", "libnghttp2-14", "libnotify4", "libopengl0", "libopenjp2-7", "libopus0", "libpango-1.0-0", "libpng16-16", "libsecret-1-0", "libvpx6", "libwayland-client0", "libwayland-egl1", "libwayland-server0", "libwebp6", "libwebpdemux2", "libwoff1", "libx11-6", "libxcomposite1", "libxdamage1", "libxkbcommon0", "libxml2", "libxslt1.1", "libatomic1", "libevent-2.1-7"],
      lib2package: {
        "libflite.so.1": "libflite1",
        "libflite_usenglish.so.1": "libflite1",
        "libflite_cmu_grapheme_lang.so.1": "libflite1",
        "libflite_cmu_grapheme_lex.so.1": "libflite1",
        "libflite_cmu_indic_lang.so.1": "libflite1",
        "libflite_cmu_indic_lex.so.1": "libflite1",
        "libflite_cmulex.so.1": "libflite1",
        "libflite_cmu_time_awb.so.1": "libflite1",
        "libflite_cmu_us_awb.so.1": "libflite1",
        "libflite_cmu_us_kal16.so.1": "libflite1",
        "libflite_cmu_us_kal.so.1": "libflite1",
        "libflite_cmu_us_rms.so.1": "libflite1",
        "libflite_cmu_us_slt.so.1": "libflite1",
        "libx264.so": "libx264-155",
        "libasound.so.2": "libasound2",
        "libatk-1.0.so.0": "libatk1.0-0",
        "libatk-bridge-2.0.so.0": "libatk-bridge2.0-0",
        "libatspi.so.0": "libatspi2.0-0",
        "libcairo-gobject.so.2": "libcairo-gobject2",
        "libcairo.so.2": "libcairo2",
        "libcups.so.2": "libcups2",
        "libdbus-1.so.3": "libdbus-1-3",
        "libdbus-glib-1.so.2": "libdbus-glib-1-2",
        "libdrm.so.2": "libdrm2",
        "libEGL.so.1": "libegl1",
        "libenchant.so.1": "libenchant1c2a",
        "libevdev.so.2": "libevdev2",
        "libepoxy.so.0": "libepoxy0",
        "libfontconfig.so.1": "libfontconfig1",
        "libfreetype.so.6": "libfreetype6",
        "libgbm.so.1": "libgbm1",
        "libgdk_pixbuf-2.0.so.0": "libgdk-pixbuf2.0-0",
        "libgdk-3.so.0": "libgtk-3-0",
        "libgdk-x11-2.0.so.0": "libgtk2.0-0",
        "libgio-2.0.so.0": "libglib2.0-0",
        "libGL.so.1": "libgl1",
        "libGLESv2.so.2": "libgles2",
        "libglib-2.0.so.0": "libglib2.0-0",
        "libgmodule-2.0.so.0": "libglib2.0-0",
        "libgobject-2.0.so.0": "libglib2.0-0",
        "libgthread-2.0.so.0": "libglib2.0-0",
        "libgtk-3.so.0": "libgtk-3-0",
        "libgtk-x11-2.0.so.0": "libgtk2.0-0",
        "libgudev-1.0.so.0": "libgudev-1.0-0",
        "libharfbuzz-icu.so.0": "libharfbuzz-icu0",
        "libharfbuzz.so.0": "libharfbuzz0b",
        "libhyphen.so.0": "libhyphen0",
        "libicui18n.so.66": "libicu66",
        "libicuuc.so.66": "libicu66",
        "libjpeg.so.8": "libjpeg-turbo8",
        "libnotify.so.4": "libnotify4",
        "libnspr4.so": "libnspr4",
        "libnss3.so": "libnss3",
        "libnssutil3.so": "libnss3",
        "libOpenGL.so.0": "libopengl0",
        "libopenjp2.so.7": "libopenjp2-7",
        "libopus.so.0": "libopus0",
        "libpango-1.0.so.0": "libpango-1.0-0",
        "libpangocairo-1.0.so.0": "libpangocairo-1.0-0",
        "libpangoft2-1.0.so.0": "libpangoft2-1.0-0",
        "libpng16.so.16": "libpng16-16",
        "libsecret-1.so.0": "libsecret-1-0",
        "libsmime3.so": "libnss3",
        "libvpx.so.6": "libvpx6",
        "libwayland-client.so.0": "libwayland-client0",
        "libwayland-egl.so.1": "libwayland-egl1",
        "libwayland-server.so.0": "libwayland-server0",
        "libwebp.so.6": "libwebp6",
        "libwebpdemux.so.2": "libwebpdemux2",
        "libwoff2dec.so.1.0.2": "libwoff1",
        "libX11-xcb.so.1": "libx11-xcb1",
        "libX11.so.6": "libx11-6",
        "libxcb-dri3.so.0": "libxcb-dri3-0",
        "libxcb-shm.so.0": "libxcb-shm0",
        "libxcb.so.1": "libxcb1",
        "libXcomposite.so.1": "libxcomposite1",
        "libXcursor.so.1": "libxcursor1",
        "libXdamage.so.1": "libxdamage1",
        "libXext.so.6": "libxext6",
        "libXfixes.so.3": "libxfixes3",
        "libXi.so.6": "libxi6",
        "libxkbcommon.so.0": "libxkbcommon0",
        "libxml2.so.2": "libxml2",
        "libXrandr.so.2": "libxrandr2",
        "libXrender.so.1": "libxrender1",
        "libxslt.so.1": "libxslt1.1",
        "libXt.so.6": "libxt6",
        "libXtst.so.6": "libxtst6",
        "libxshmfence.so.1": "libxshmfence1",
        "libatomic.so.1": "libatomic1",
        "libenchant-2.so.2": "libenchant-2-2",
        "libevent-2.1.so.7": "libevent-2.1-7"
      }
    },
    "ubuntu22.04-x64": {
      tools: ["xvfb", "fonts-noto-color-emoji", "fonts-unifont", "libfontconfig1", "libfreetype6", "xfonts-cyrillic", "xfonts-scalable", "fonts-liberation", "fonts-ipafont-gothic", "fonts-wqy-zenhei", "fonts-tlwg-loma-otf", "fonts-freefont-ttf"],
      chromium: ["libasound2", "libatk-bridge2.0-0", "libatk1.0-0", "libatspi2.0-0", "libcairo2", "libcups2", "libdbus-1-3", "libdrm2", "libgbm1", "libglib2.0-0", "libnspr4", "libnss3", "libpango-1.0-0", "libwayland-client0", "libx11-6", "libxcb1", "libxcomposite1", "libxdamage1", "libxext6", "libxfixes3", "libxkbcommon0", "libxrandr2"],
      firefox: ["ffmpeg", "libasound2", "libatk1.0-0", "libcairo-gobject2", "libcairo2", "libdbus-1-3", "libdbus-glib-1-2", "libfontconfig1", "libfreetype6", "libgdk-pixbuf-2.0-0", "libglib2.0-0", "libgtk-3-0", "libpango-1.0-0", "libpangocairo-1.0-0", "libx11-6", "libx11-xcb1", "libxcb-shm0", "libxcb1", "libxcomposite1", "libxcursor1", "libxdamage1", "libxext6", "libxfixes3", "libxi6", "libxrandr2", "libxrender1", "libxtst6"],
      webkit: ["libsoup-3.0-0", "libenchant-2-2", "gstreamer1.0-libav", "gstreamer1.0-plugins-bad", "gstreamer1.0-plugins-base", "gstreamer1.0-plugins-good", "libicu70", "libatk-bridge2.0-0", "libatk1.0-0", "libcairo2", "libdbus-1-3", "libdrm2", "libegl1", "libepoxy0", "libevdev2", "libffi7", "libfontconfig1", "libfreetype6", "libgbm1", "libgdk-pixbuf-2.0-0", "libgles2", "libglib2.0-0", "libglx0", "libgstreamer-gl1.0-0", "libgstreamer-plugins-base1.0-0", "libgstreamer1.0-0", "libgtk-3-0", "libgudev-1.0-0", "libharfbuzz-icu0", "libharfbuzz0b", "libhyphen0", "libjpeg-turbo8", "liblcms2-2", "libmanette-0.2-0", "libnotify4", "libopengl0", "libopenjp2-7", "libopus0", "libpango-1.0-0", "libpng16-16", "libproxy1v5", "libsecret-1-0", "libwayland-client0", "libwayland-egl1", "libwayland-server0", "libwebpdemux2", "libwoff1", "libx11-6", "libxcomposite1", "libxdamage1", "libxkbcommon0", "libxml2", "libxslt1.1", "libx264-163", "libatomic1", "libevent-2.1-7"],
      lib2package: {
        "libsoup-3.0.so.0": "libsoup-3.0-0",
        "libasound.so.2": "libasound2",
        "libatk-1.0.so.0": "libatk1.0-0",
        "libatk-bridge-2.0.so.0": "libatk-bridge2.0-0",
        "libatspi.so.0": "libatspi2.0-0",
        "libcairo-gobject.so.2": "libcairo-gobject2",
        "libcairo.so.2": "libcairo2",
        "libcups.so.2": "libcups2",
        "libdbus-1.so.3": "libdbus-1-3",
        "libdbus-glib-1.so.2": "libdbus-glib-1-2",
        "libdrm.so.2": "libdrm2",
        "libEGL.so.1": "libegl1",
        "libepoxy.so.0": "libepoxy0",
        "libevdev.so.2": "libevdev2",
        "libffi.so.7": "libffi7",
        "libfontconfig.so.1": "libfontconfig1",
        "libfreetype.so.6": "libfreetype6",
        "libgbm.so.1": "libgbm1",
        "libgdk_pixbuf-2.0.so.0": "libgdk-pixbuf-2.0-0",
        "libgdk-3.so.0": "libgtk-3-0",
        "libgio-2.0.so.0": "libglib2.0-0",
        "libGLESv2.so.2": "libgles2",
        "libglib-2.0.so.0": "libglib2.0-0",
        "libGLX.so.0": "libglx0",
        "libgmodule-2.0.so.0": "libglib2.0-0",
        "libgobject-2.0.so.0": "libglib2.0-0",
        "libgstallocators-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstapp-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstaudio-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstbase-1.0.so.0": "libgstreamer1.0-0",
        "libgstfft-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstgl-1.0.so.0": "libgstreamer-gl1.0-0",
        "libgstpbutils-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstreamer-1.0.so.0": "libgstreamer1.0-0",
        "libgsttag-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstvideo-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgtk-3.so.0": "libgtk-3-0",
        "libgudev-1.0.so.0": "libgudev-1.0-0",
        "libharfbuzz-icu.so.0": "libharfbuzz-icu0",
        "libharfbuzz.so.0": "libharfbuzz0b",
        "libhyphen.so.0": "libhyphen0",
        "libjpeg.so.8": "libjpeg-turbo8",
        "liblcms2.so.2": "liblcms2-2",
        "libmanette-0.2.so.0": "libmanette-0.2-0",
        "libnotify.so.4": "libnotify4",
        "libnspr4.so": "libnspr4",
        "libnss3.so": "libnss3",
        "libnssutil3.so": "libnss3",
        "libOpenGL.so.0": "libopengl0",
        "libopenjp2.so.7": "libopenjp2-7",
        "libopus.so.0": "libopus0",
        "libpango-1.0.so.0": "libpango-1.0-0",
        "libpangocairo-1.0.so.0": "libpangocairo-1.0-0",
        "libpng16.so.16": "libpng16-16",
        "libproxy.so.1": "libproxy1v5",
        "libsecret-1.so.0": "libsecret-1-0",
        "libsmime3.so": "libnss3",
        "libwayland-client.so.0": "libwayland-client0",
        "libwayland-egl.so.1": "libwayland-egl1",
        "libwayland-server.so.0": "libwayland-server0",
        "libwebpdemux.so.2": "libwebpdemux2",
        "libwoff2dec.so.1.0.2": "libwoff1",
        "libX11-xcb.so.1": "libx11-xcb1",
        "libX11.so.6": "libx11-6",
        "libxcb-shm.so.0": "libxcb-shm0",
        "libxcb.so.1": "libxcb1",
        "libXcomposite.so.1": "libxcomposite1",
        "libXcursor.so.1": "libxcursor1",
        "libXdamage.so.1": "libxdamage1",
        "libXext.so.6": "libxext6",
        "libXfixes.so.3": "libxfixes3",
        "libXi.so.6": "libxi6",
        "libxkbcommon.so.0": "libxkbcommon0",
        "libxml2.so.2": "libxml2",
        "libXrandr.so.2": "libxrandr2",
        "libXrender.so.1": "libxrender1",
        "libxslt.so.1": "libxslt1.1",
        "libXtst.so.6": "libxtst6",
        "libicui18n.so.60": "libicu70",
        "libicuuc.so.66": "libicu70",
        "libicui18n.so.66": "libicu70",
        "libwebp.so.6": "libwebp6",
        "libenchant-2.so.2": "libenchant-2-2",
        "libx264.so": "libx264-163",
        "libvpx.so.7": "libvpx7",
        "libatomic.so.1": "libatomic1",
        "libevent-2.1.so.7": "libevent-2.1-7"
      }
    },
    "debian11-x64": {
      tools: ["xvfb", "fonts-noto-color-emoji", "fonts-unifont", "libfontconfig1", "libfreetype6", "xfonts-cyrillic", "xfonts-scalable", "fonts-liberation", "fonts-ipafont-gothic", "fonts-wqy-zenhei", "fonts-tlwg-loma-otf", "fonts-freefont-ttf"],
      chromium: ["libasound2", "libatk-bridge2.0-0", "libatk1.0-0", "libatspi2.0-0", "libcairo2", "libcups2", "libdbus-1-3", "libdrm2", "libgbm1", "libglib2.0-0", "libnspr4", "libnss3", "libpango-1.0-0", "libwayland-client0", "libx11-6", "libxcb1", "libxcomposite1", "libxdamage1", "libxext6", "libxfixes3", "libxkbcommon0", "libxrandr2"],
      firefox: ["libasound2", "libatk1.0-0", "libcairo-gobject2", "libcairo2", "libdbus-1-3", "libdbus-glib-1-2", "libfontconfig1", "libfreetype6", "libgdk-pixbuf-2.0-0", "libglib2.0-0", "libgtk-3-0", "libharfbuzz0b", "libpango-1.0-0", "libpangocairo-1.0-0", "libx11-6", "libx11-xcb1", "libxcb-shm0", "libxcb1", "libxcomposite1", "libxcursor1", "libxdamage1", "libxext6", "libxfixes3", "libxi6", "libxrandr2", "libxrender1", "libxtst6"],
      webkit: ["gstreamer1.0-libav", "gstreamer1.0-plugins-bad", "gstreamer1.0-plugins-base", "gstreamer1.0-plugins-good", "libatk-bridge2.0-0", "libatk1.0-0", "libcairo2", "libdbus-1-3", "libdrm2", "libegl1", "libenchant-2-2", "libepoxy0", "libevdev2", "libfontconfig1", "libfreetype6", "libgbm1", "libgdk-pixbuf-2.0-0", "libgles2", "libglib2.0-0", "libglx0", "libgstreamer-gl1.0-0", "libgstreamer-plugins-base1.0-0", "libgstreamer1.0-0", "libgtk-3-0", "libgudev-1.0-0", "libharfbuzz-icu0", "libharfbuzz0b", "libhyphen0", "libicu67", "libjpeg62-turbo", "liblcms2-2", "libmanette-0.2-0", "libnghttp2-14", "libnotify4", "libopengl0", "libopenjp2-7", "libopus0", "libpango-1.0-0", "libpng16-16", "libproxy1v5", "libsecret-1-0", "libwayland-client0", "libwayland-egl1", "libwayland-server0", "libwebp6", "libwebpdemux2", "libwoff1", "libx11-6", "libxcomposite1", "libxdamage1", "libxkbcommon0", "libxml2", "libxslt1.1", "libatomic1", "libevent-2.1-7"],
      lib2package: {
        "libasound.so.2": "libasound2",
        "libatk-1.0.so.0": "libatk1.0-0",
        "libatk-bridge-2.0.so.0": "libatk-bridge2.0-0",
        "libatspi.so.0": "libatspi2.0-0",
        "libcairo-gobject.so.2": "libcairo-gobject2",
        "libcairo.so.2": "libcairo2",
        "libcups.so.2": "libcups2",
        "libdbus-1.so.3": "libdbus-1-3",
        "libdbus-glib-1.so.2": "libdbus-glib-1-2",
        "libdrm.so.2": "libdrm2",
        "libEGL.so.1": "libegl1",
        "libenchant-2.so.2": "libenchant-2-2",
        "libepoxy.so.0": "libepoxy0",
        "libevdev.so.2": "libevdev2",
        "libfontconfig.so.1": "libfontconfig1",
        "libfreetype.so.6": "libfreetype6",
        "libgbm.so.1": "libgbm1",
        "libgdk_pixbuf-2.0.so.0": "libgdk-pixbuf-2.0-0",
        "libgdk-3.so.0": "libgtk-3-0",
        "libgio-2.0.so.0": "libglib2.0-0",
        "libGLESv2.so.2": "libgles2",
        "libglib-2.0.so.0": "libglib2.0-0",
        "libGLX.so.0": "libglx0",
        "libgmodule-2.0.so.0": "libglib2.0-0",
        "libgobject-2.0.so.0": "libglib2.0-0",
        "libgstallocators-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstapp-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstaudio-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstbase-1.0.so.0": "libgstreamer1.0-0",
        "libgstfft-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstgl-1.0.so.0": "libgstreamer-gl1.0-0",
        "libgstpbutils-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstreamer-1.0.so.0": "libgstreamer1.0-0",
        "libgsttag-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstvideo-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgtk-3.so.0": "libgtk-3-0",
        "libgudev-1.0.so.0": "libgudev-1.0-0",
        "libharfbuzz-icu.so.0": "libharfbuzz-icu0",
        "libharfbuzz.so.0": "libharfbuzz0b",
        "libhyphen.so.0": "libhyphen0",
        "libicui18n.so.67": "libicu67",
        "libicuuc.so.67": "libicu67",
        "libjpeg.so.62": "libjpeg62-turbo",
        "liblcms2.so.2": "liblcms2-2",
        "libmanette-0.2.so.0": "libmanette-0.2-0",
        "libnotify.so.4": "libnotify4",
        "libnspr4.so": "libnspr4",
        "libnss3.so": "libnss3",
        "libnssutil3.so": "libnss3",
        "libOpenGL.so.0": "libopengl0",
        "libopenjp2.so.7": "libopenjp2-7",
        "libopus.so.0": "libopus0",
        "libpango-1.0.so.0": "libpango-1.0-0",
        "libpangocairo-1.0.so.0": "libpangocairo-1.0-0",
        "libpng16.so.16": "libpng16-16",
        "libproxy.so.1": "libproxy1v5",
        "libsecret-1.so.0": "libsecret-1-0",
        "libsmime3.so": "libnss3",
        "libwayland-client.so.0": "libwayland-client0",
        "libwayland-egl.so.1": "libwayland-egl1",
        "libwayland-server.so.0": "libwayland-server0",
        "libwebp.so.6": "libwebp6",
        "libwebpdemux.so.2": "libwebpdemux2",
        "libwoff2dec.so.1.0.2": "libwoff1",
        "libX11-xcb.so.1": "libx11-xcb1",
        "libX11.so.6": "libx11-6",
        "libxcb-shm.so.0": "libxcb-shm0",
        "libxcb.so.1": "libxcb1",
        "libXcomposite.so.1": "libxcomposite1",
        "libXcursor.so.1": "libxcursor1",
        "libXdamage.so.1": "libxdamage1",
        "libXext.so.6": "libxext6",
        "libXfixes.so.3": "libxfixes3",
        "libXi.so.6": "libxi6",
        "libxkbcommon.so.0": "libxkbcommon0",
        "libxml2.so.2": "libxml2",
        "libXrandr.so.2": "libxrandr2",
        "libXrender.so.1": "libxrender1",
        "libxslt.so.1": "libxslt1.1",
        "libXtst.so.6": "libxtst6",
        "libatomic.so.1": "libatomic1",
        "libevent-2.1.so.7": "libevent-2.1-7"
      }
    },
    "debian12-x64": {
      tools: ["xvfb", "fonts-noto-color-emoji", "fonts-unifont", "libfontconfig1", "libfreetype6", "xfonts-scalable", "fonts-liberation", "fonts-ipafont-gothic", "fonts-wqy-zenhei", "fonts-tlwg-loma-otf", "fonts-freefont-ttf"],
      chromium: ["libasound2", "libatk-bridge2.0-0", "libatk1.0-0", "libatspi2.0-0", "libcairo2", "libcups2", "libdbus-1-3", "libdrm2", "libgbm1", "libglib2.0-0", "libnspr4", "libnss3", "libpango-1.0-0", "libx11-6", "libxcb1", "libxcomposite1", "libxdamage1", "libxext6", "libxfixes3", "libxkbcommon0", "libxrandr2"],
      firefox: ["libasound2", "libatk1.0-0", "libcairo-gobject2", "libcairo2", "libdbus-1-3", "libdbus-glib-1-2", "libfontconfig1", "libfreetype6", "libgdk-pixbuf-2.0-0", "libglib2.0-0", "libgtk-3-0", "libharfbuzz0b", "libpango-1.0-0", "libpangocairo-1.0-0", "libx11-6", "libx11-xcb1", "libxcb-shm0", "libxcb1", "libxcomposite1", "libxcursor1", "libxdamage1", "libxext6", "libxfixes3", "libxi6", "libxrandr2", "libxrender1", "libxtst6"],
      webkit: ["libsoup-3.0-0", "gstreamer1.0-libav", "gstreamer1.0-plugins-bad", "gstreamer1.0-plugins-base", "gstreamer1.0-plugins-good", "libatk-bridge2.0-0", "libatk1.0-0", "libcairo2", "libdbus-1-3", "libdrm2", "libegl1", "libenchant-2-2", "libepoxy0", "libevdev2", "libfontconfig1", "libfreetype6", "libgbm1", "libgdk-pixbuf-2.0-0", "libgles2", "libglib2.0-0", "libglx0", "libgstreamer-gl1.0-0", "libgstreamer-plugins-base1.0-0", "libgstreamer1.0-0", "libgtk-3-0", "libgudev-1.0-0", "libharfbuzz-icu0", "libharfbuzz0b", "libhyphen0", "libicu72", "libjpeg62-turbo", "liblcms2-2", "libmanette-0.2-0", "libnotify4", "libopengl0", "libopenjp2-7", "libopus0", "libpango-1.0-0", "libpng16-16", "libproxy1v5", "libsecret-1-0", "libwayland-client0", "libwayland-egl1", "libwayland-server0", "libwebp7", "libwebpdemux2", "libwoff1", "libx11-6", "libxcomposite1", "libxdamage1", "libxkbcommon0", "libxml2", "libxslt1.1", "libatomic1", "libevent-2.1-7"],
      lib2package: {
        "libsoup-3.0.so.0": "libsoup-3.0-0",
        "libasound.so.2": "libasound2",
        "libatk-1.0.so.0": "libatk1.0-0",
        "libatk-bridge-2.0.so.0": "libatk-bridge2.0-0",
        "libatspi.so.0": "libatspi2.0-0",
        "libcairo.so.2": "libcairo2",
        "libcups.so.2": "libcups2",
        "libdbus-1.so.3": "libdbus-1-3",
        "libdrm.so.2": "libdrm2",
        "libgbm.so.1": "libgbm1",
        "libgio-2.0.so.0": "libglib2.0-0",
        "libglib-2.0.so.0": "libglib2.0-0",
        "libgobject-2.0.so.0": "libglib2.0-0",
        "libnspr4.so": "libnspr4",
        "libnss3.so": "libnss3",
        "libnssutil3.so": "libnss3",
        "libpango-1.0.so.0": "libpango-1.0-0",
        "libsmime3.so": "libnss3",
        "libX11.so.6": "libx11-6",
        "libxcb.so.1": "libxcb1",
        "libXcomposite.so.1": "libxcomposite1",
        "libXdamage.so.1": "libxdamage1",
        "libXext.so.6": "libxext6",
        "libXfixes.so.3": "libxfixes3",
        "libxkbcommon.so.0": "libxkbcommon0",
        "libXrandr.so.2": "libxrandr2"
      }
    }
  };
  deps["ubuntu20.04-arm64"] = {
    tools: [...deps["ubuntu20.04-x64"].tools],
    chromium: [...deps["ubuntu20.04-x64"].chromium],
    firefox: [...deps["ubuntu20.04-x64"].firefox],
    webkit: [...deps["ubuntu20.04-x64"].webkit],
    lib2package: {
      ...deps["ubuntu20.04-x64"].lib2package
    }
  };
  deps["ubuntu22.04-arm64"] = {
    tools: [...deps["ubuntu22.04-x64"].tools],
    chromium: [...deps["ubuntu22.04-x64"].chromium],
    firefox: [...deps["ubuntu22.04-x64"].firefox],
    webkit: [...deps["ubuntu22.04-x64"].webkit],
    lib2package: {
      ...deps["ubuntu22.04-x64"].lib2package
    }
  };
  deps["debian11-arm64"] = {
    tools: [...deps["debian11-x64"].tools],
    chromium: [...deps["debian11-x64"].chromium],
    firefox: [...deps["debian11-x64"].firefox],
    webkit: [...deps["debian11-x64"].webkit],
    lib2package: {
      ...deps["debian11-x64"].lib2package
    }
  };
  deps["debian12-arm64"] = {
    tools: [...deps["debian12-x64"].tools],
    chromium: [...deps["debian12-x64"].chromium],
    firefox: [...deps["debian12-x64"].firefox],
    webkit: [...deps["debian12-x64"].webkit],
    lib2package: {
      ...deps["debian12-x64"].lib2package
    }
  };
});

// node_modules/playwright-core/lib/server/registry/dependencies.js
var require_dependencies = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  async function writeDockerVersion(dockerImageNameTemplate) {
    await _fs.default.promises.mkdir(_path.default.dirname(dockerVersionFilePath), {
      recursive: true
    });
    await _fs.default.promises.writeFile(dockerVersionFilePath, JSON.stringify(dockerVersion(dockerImageNameTemplate), null, 2), "utf8");
    await _fs.default.promises.chmod(dockerVersionFilePath, 511);
  }
  var dockerVersion = function(dockerImageNameTemplate) {
    return {
      driverVersion: languageBindingVersion,
      dockerImageName: dockerImageNameTemplate.replace("%version%", languageBindingVersion)
    };
  };
  var readDockerVersionSync = function() {
    try {
      const data = JSON.parse(_fs.default.readFileSync(dockerVersionFilePath, "utf8"));
      return {
        ...data,
        dockerImageNameTemplate: data.dockerImageName.replace(data.driverVersion, "%version%")
      };
    } catch (e) {
      return null;
    }
  };
  var isSupportedWindowsVersion = function() {
    if (os.platform() !== "win32" || os.arch() !== "x64")
      return false;
    const [major, minor] = os.release().split(".").map((token) => parseInt(token, 10));
    return major > 6 || major === 6 && minor > 1;
  };
  async function installDependenciesWindows(targets, dryRun) {
    if (targets.has("chromium")) {
      const command = "powershell.exe";
      const args = ["-ExecutionPolicy", "Bypass", "-File", _path.default.join(BIN_DIRECTORY, "install_media_pack.ps1")];
      if (dryRun) {
        console.log(`${command} ${quoteProcessArgs(args).join(" ")}`);
        return;
      }
      const {
        code
      } = await (0, _spawnAsync.spawnAsync)(command, args, {
        cwd: BIN_DIRECTORY,
        stdio: "inherit"
      });
      if (code !== 0)
        throw new Error("Failed to install windows dependencies!");
    }
  }
  async function installDependenciesLinux(targets, dryRun) {
    const libraries = [];
    const platform = _hostPlatform.hostPlatform;
    if (!_hostPlatform.isOfficiallySupportedPlatform)
      console.warn(`BEWARE: your OS is not officially supported by Playwright; installing dependencies for ${platform} as a fallback.`);
    for (const target of targets) {
      const info = _nativeDeps.deps[platform];
      if (!info) {
        console.warn(`Cannot install dependencies for ${platform}!`);
        return;
      }
      libraries.push(...info[target]);
    }
    const uniqueLibraries = Array.from(new Set(libraries));
    if (!dryRun)
      console.log(`Installing dependencies...`);
    const commands = [];
    commands.push("apt-get update");
    commands.push(["apt-get", "install", "-y", "--no-install-recommends", ...uniqueLibraries].join(" "));
    const {
      command,
      args,
      elevatedPermissions
    } = await transformCommandsForRoot(commands);
    if (dryRun) {
      console.log(`${command} ${quoteProcessArgs(args).join(" ")}`);
      return;
    }
    if (elevatedPermissions)
      console.log("Switching to root user to install dependencies...");
    const child = _child_process.default.spawn(command, args, {
      stdio: "inherit"
    });
    await new Promise((resolve, reject) => {
      child.on("exit", (code) => code === 0 ? resolve() : reject(new Error(`Installation process exited with code: ${code}`)));
      child.on("error", reject);
    });
  }
  async function validateDependenciesWindows(windowsExeAndDllDirectories) {
    const directoryPaths = windowsExeAndDllDirectories;
    const lddPaths = [];
    for (const directoryPath of directoryPaths)
      lddPaths.push(...await executablesOrSharedLibraries(directoryPath));
    const allMissingDeps = await Promise.all(lddPaths.map((lddPath) => missingFileDependenciesWindows(lddPath)));
    const missingDeps = new Set;
    for (const deps of allMissingDeps) {
      for (const dep of deps)
        missingDeps.add(dep);
    }
    if (!missingDeps.size)
      return;
    let isCrtMissing = false;
    let isMediaFoundationMissing = false;
    for (const dep of missingDeps) {
      if (dep.startsWith("api-ms-win-crt") || dep === "vcruntime140.dll" || dep === "vcruntime140_1.dll" || dep === "msvcp140.dll")
        isCrtMissing = true;
      else if (dep === "mf.dll" || dep === "mfplat.dll" || dep === "msmpeg2vdec.dll" || dep === "evr.dll" || dep === "avrt.dll")
        isMediaFoundationMissing = true;
    }
    const details = [];
    if (isCrtMissing) {
      details.push(`Some of the Universal C Runtime files cannot be found on the system. You can fix`, `that by installing Microsoft Visual C++ Redistributable for Visual Studio from:`, `https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads`, ``);
    }
    if (isMediaFoundationMissing) {
      details.push(`Some of the Media Foundation files cannot be found on the system. If you are`, `on Windows Server try fixing this by running the following command in PowerShell`, `as Administrator:`, ``, `    Install-WindowsFeature Server-Media-Foundation`, ``, `For Windows N editions visit:`, `https://support.microsoft.com/en-us/help/3145500/media-feature-pack-list-for-windows-n-editions`, ``);
    }
    details.push(`Full list of missing libraries:`, `    ${[...missingDeps].join("\n    ")}`, ``);
    const message = `Host system is missing dependencies!\n\n${details.join("\n")}`;
    if (isSupportedWindowsVersion()) {
      throw new Error(message);
    } else {
      console.warn(`WARNING: running on unsupported windows version!`);
      console.warn(message);
    }
  }
  async function validateDependenciesLinux(sdkLanguage, linuxLddDirectories, dlOpenLibraries) {
    var _deps$hostPlatform, _process$getuid, _process;
    const directoryPaths = linuxLddDirectories;
    const lddPaths = [];
    for (const directoryPath of directoryPaths)
      lddPaths.push(...await executablesOrSharedLibraries(directoryPath));
    const missingDepsPerFile = await Promise.all(lddPaths.map((lddPath) => missingFileDependencies(lddPath, directoryPaths)));
    const missingDeps = new Set;
    for (const deps of missingDepsPerFile) {
      for (const dep of deps)
        missingDeps.add(dep);
    }
    for (const dep of await missingDLOPENLibraries(dlOpenLibraries))
      missingDeps.add(dep);
    if (!missingDeps.size)
      return;
    const allMissingDeps = new Set(missingDeps);
    const missingPackages = new Set;
    const libraryToPackageNameMapping = _nativeDeps.deps[_hostPlatform.hostPlatform] ? {
      ...((_deps$hostPlatform = _nativeDeps.deps[_hostPlatform.hostPlatform]) === null || _deps$hostPlatform === undefined ? undefined : _deps$hostPlatform.lib2package) || {},
      ...MANUAL_LIBRARY_TO_PACKAGE_NAME_UBUNTU
    } : {};
    for (const missingDep of missingDeps) {
      const packageName = libraryToPackageNameMapping[missingDep];
      if (packageName) {
        missingPackages.add(packageName);
        missingDeps.delete(missingDep);
      }
    }
    const maybeSudo = (_process$getuid = (_process = process).getuid) !== null && _process$getuid !== undefined && _process$getuid.call(_process) && os.platform() !== "win32" ? "sudo " : "";
    const dockerInfo = readDockerVersionSync();
    const errorLines = [`Host system is missing dependencies to run browsers.`];
    if (dockerInfo && !dockerInfo.driverVersion.startsWith((0, _userAgent.getPlaywrightVersion)(true) + ".")) {
      const pwVersion = (0, _userAgent.getPlaywrightVersion)();
      const requiredDockerImage = dockerInfo.dockerImageName.replace(dockerInfo.driverVersion, pwVersion);
      errorLines.push(...[`This is most likely due to Docker image version not matching Playwright version:`, `- Playwright  : ${pwVersion}`, `- Docker image: ${dockerInfo.driverVersion}`, ``, `Either:`, `- (recommended) use Docker image "${requiredDockerImage}"`, `- (alternative 1) run the following command inside Docker to install missing dependencies:`, ``, `    ${maybeSudo}${(0, _.buildPlaywrightCLICommand)(sdkLanguage, "install-deps")}`, ``, `- (alternative 2) use apt inside Docker:`, ``, `    ${maybeSudo}apt-get install ${[...missingPackages].join("\\\n        ")}`, ``, `<3 Playwright Team`]);
    } else if (missingPackages.size && !missingDeps.size) {
      errorLines.push(...[`Please install them with the following command:`, ``, `    ${maybeSudo}${(0, _.buildPlaywrightCLICommand)(sdkLanguage, "install-deps")}`, ``, `Alternatively, use apt:`, `    ${maybeSudo}apt-get install ${[...missingPackages].join("\\\n        ")}`, ``, `<3 Playwright Team`]);
    } else {
      errorLines.push(...[`Missing libraries:`, ...[...allMissingDeps].map((dep) => "    " + dep)]);
    }
    throw new Error("\n" + utils.wrapInASCIIBox(errorLines.join("\n"), 1));
  }
  var isSharedLib = function(basename) {
    switch (os.platform()) {
      case "linux":
        return basename.endsWith(".so") || basename.includes(".so.");
      case "win32":
        return basename.endsWith(".dll");
      default:
        return false;
    }
  };
  async function executablesOrSharedLibraries(directoryPath) {
    if (!_fs.default.existsSync(directoryPath))
      return [];
    const allPaths = (await _fs.default.promises.readdir(directoryPath)).map((file) => _path.default.resolve(directoryPath, file));
    const allStats = await Promise.all(allPaths.map((aPath) => _fs.default.promises.stat(aPath)));
    const filePaths = allPaths.filter((aPath, index) => allStats[index].isFile());
    const executablersOrLibraries = (await Promise.all(filePaths.map(async (filePath) => {
      const basename = _path.default.basename(filePath).toLowerCase();
      if (isSharedLib(basename))
        return filePath;
      if (await checkExecutable(filePath))
        return filePath;
      return false;
    }))).filter(Boolean);
    return executablersOrLibraries;
  }
  async function missingFileDependenciesWindows(filePath) {
    const executable = _path.default.join(__dirname, "..", "..", "..", "bin", "PrintDeps.exe");
    const dirname = _path.default.dirname(filePath);
    const {
      stdout,
      code
    } = await (0, _spawnAsync.spawnAsync)(executable, [filePath], {
      cwd: dirname,
      env: {
        ...process.env,
        LD_LIBRARY_PATH: process.env.LD_LIBRARY_PATH ? `${process.env.LD_LIBRARY_PATH}:${dirname}` : dirname
      }
    });
    if (code !== 0)
      return [];
    const missingDeps = stdout.split("\n").map((line) => line.trim()).filter((line) => line.endsWith("not found") && line.includes("=>")).map((line) => line.split("=>")[0].trim().toLowerCase());
    return missingDeps;
  }
  async function missingFileDependencies(filePath, extraLDPaths) {
    const dirname = _path.default.dirname(filePath);
    let LD_LIBRARY_PATH = extraLDPaths.join(":");
    if (process.env.LD_LIBRARY_PATH)
      LD_LIBRARY_PATH = `${process.env.LD_LIBRARY_PATH}:${LD_LIBRARY_PATH}`;
    const {
      stdout,
      code
    } = await (0, _spawnAsync.spawnAsync)("ldd", [filePath], {
      cwd: dirname,
      env: {
        ...process.env,
        LD_LIBRARY_PATH
      }
    });
    if (code !== 0)
      return [];
    const missingDeps = stdout.split("\n").map((line) => line.trim()).filter((line) => line.endsWith("not found") && line.includes("=>")).map((line) => line.split("=>")[0].trim());
    return missingDeps;
  }
  async function missingDLOPENLibraries(libraries) {
    if (!libraries.length)
      return [];
    const {
      stdout,
      code,
      error
    } = await (0, _spawnAsync.spawnAsync)("/sbin/ldconfig", ["-p"], {});
    if (code !== 0 || error)
      return [];
    const isLibraryAvailable = (library) => stdout.toLowerCase().includes(library.toLowerCase());
    return libraries.filter((library) => !isLibraryAvailable(library));
  }
  var quoteProcessArgs = function(args) {
    return args.map((arg) => {
      if (arg.includes(" "))
        return `"${arg}"`;
      return arg;
    });
  };
  async function transformCommandsForRoot(commands) {
    var _process$getuid2, _process2;
    const isRoot = ((_process$getuid2 = (_process2 = process).getuid) === null || _process$getuid2 === undefined ? undefined : _process$getuid2.call(_process2)) === 0;
    if (isRoot)
      return {
        command: "sh",
        args: ["-c", `${commands.join("&& ")}`],
        elevatedPermissions: false
      };
    const sudoExists = await (0, _spawnAsync.spawnAsync)("which", ["sudo"]);
    if (sudoExists.code === 0)
      return {
        command: "sudo",
        args: ["--", "sh", "-c", `${commands.join("&& ")}`],
        elevatedPermissions: true
      };
    return {
      command: "su",
      args: ["root", "-c", `${commands.join("&& ")}`],
      elevatedPermissions: true
    };
  }
  var __dirname = "/Users/hottin/project/jwave_playlist/node_modules/playwright-core/lib/server/registry";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.dockerVersion = dockerVersion;
  exports.installDependenciesLinux = installDependenciesLinux;
  exports.installDependenciesWindows = installDependenciesWindows;
  exports.readDockerVersionSync = readDockerVersionSync;
  exports.transformCommandsForRoot = transformCommandsForRoot;
  exports.validateDependenciesLinux = validateDependenciesLinux;
  exports.validateDependenciesWindows = validateDependenciesWindows;
  exports.writeDockerVersion = writeDockerVersion;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var os = _interopRequireWildcard(import.meta.require("os"));
  var _child_process = _interopRequireDefault(import.meta.require("child_process"));
  var utils = _interopRequireWildcard(require_utils3());
  var _spawnAsync = require_spawnAsync();
  var _hostPlatform = require_hostPlatform();
  var _ = require_registry();
  var _nativeDeps = require_nativeDeps();
  var _userAgent = require_userAgent();
  var BIN_DIRECTORY = _path.default.join(__dirname, "..", "..", "..", "bin");
  var languageBindingVersion = process.env.PW_CLI_DISPLAY_VERSION || require_package().version;
  var dockerVersionFilePath = "/ms-playwright/.docker-info";
  var checkExecutable = (filePath) => {
    if (process.platform === "win32")
      return filePath.endsWith(".exe");
    return _fs.default.promises.access(filePath, _fs.default.constants.X_OK).then(() => true).catch(() => false);
  };
  var MANUAL_LIBRARY_TO_PACKAGE_NAME_UBUNTU = {
    "libx264.so": "gstreamer1.0-libav"
  };
});

// node_modules/playwright-core/lib/server/registry/browserFetcher.js
var require_browserFetcher = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  async function downloadBrowserWithProgressBar(title, browserDirectory, executablePath, downloadURLs, downloadFileName, downloadConnectionTimeout) {
    if (await (0, _fileUtils.existsAsync)((0, _.browserDirectoryToMarkerFilePath)(browserDirectory))) {
      _debugLogger.debugLogger.log("install", `${title} is already downloaded.`);
      return false;
    }
    const zipPath = _path.default.join(_os.default.tmpdir(), downloadFileName);
    try {
      const retryCount = 3;
      for (let attempt = 1;attempt <= retryCount; ++attempt) {
        _debugLogger.debugLogger.log("install", `downloading ${title} - attempt #${attempt}`);
        const url = downloadURLs[(attempt - 1) % downloadURLs.length];
        logPolitely(`Downloading ${title}` + _utilsBundle.colors.dim(` from ${url}`));
        const {
          error
        } = await downloadBrowserWithProgressBarOutOfProcess(title, browserDirectory, url, zipPath, executablePath, downloadConnectionTimeout);
        if (!error) {
          _debugLogger.debugLogger.log("install", `SUCCESS installing ${title}`);
          break;
        }
        if (await (0, _fileUtils.existsAsync)(zipPath))
          await _fs.default.promises.unlink(zipPath);
        if (await (0, _fileUtils.existsAsync)(browserDirectory))
          await _fs.default.promises.rmdir(browserDirectory, {
            recursive: true
          });
        const errorMessage = (error === null || error === undefined ? undefined : error.message) || "";
        _debugLogger.debugLogger.log("install", `attempt #${attempt} - ERROR: ${errorMessage}`);
        if (attempt >= retryCount)
          throw error;
      }
    } catch (e) {
      _debugLogger.debugLogger.log("install", `FAILED installation ${title} with error: ${e}`);
      process.exitCode = 1;
      throw e;
    } finally {
      if (await (0, _fileUtils.existsAsync)(zipPath))
        await _fs.default.promises.unlink(zipPath);
    }
    logPolitely(`${title} downloaded to ${browserDirectory}`);
    return true;
  }
  var downloadBrowserWithProgressBarOutOfProcess = function(title, browserDirectory, url, zipPath, executablePath, connectionTimeout) {
    const cp = _child_process.default.fork(_path.default.join(__dirname, "oopDownloadBrowserMain.js"));
    const promise = new _manualPromise.ManualPromise;
    const progress2 = getDownloadProgress();
    cp.on("message", (message) => {
      if ((message === null || message === undefined ? undefined : message.method) === "log")
        _debugLogger.debugLogger.log("install", message.params.message);
      if ((message === null || message === undefined ? undefined : message.method) === "progress")
        progress2(message.params.done, message.params.total);
    });
    cp.on("exit", (code) => {
      if (code !== 0) {
        promise.resolve({
          error: new Error(`Download failure, code=${code}`)
        });
        return;
      }
      if (!_fs.default.existsSync((0, _.browserDirectoryToMarkerFilePath)(browserDirectory)))
        promise.resolve({
          error: new Error(`Download failure, ${(0, _.browserDirectoryToMarkerFilePath)(browserDirectory)} does not exist`)
        });
      else
        promise.resolve({
          error: null
        });
    });
    cp.on("error", (error) => {
      promise.resolve({
        error
      });
    });
    _debugLogger.debugLogger.log("install", `running download:`);
    _debugLogger.debugLogger.log("install", `-- from url: ${url}`);
    _debugLogger.debugLogger.log("install", `-- to location: ${zipPath}`);
    const downloadParams = {
      title,
      browserDirectory,
      url,
      zipPath,
      executablePath,
      connectionTimeout,
      userAgent: (0, _userAgent.getUserAgent)()
    };
    cp.send({
      method: "download",
      params: downloadParams
    });
    return promise;
  };
  var logPolitely = function(toBeLogged) {
    const logLevel = process.env.npm_config_loglevel;
    const logLevelDisplay = ["silent", "error", "warn"].indexOf(logLevel || "") > -1;
    if (!logLevelDisplay)
      console.log(toBeLogged);
  };
  var getDownloadProgress = function() {
    if (process.stdout.isTTY)
      return getAnimatedDownloadProgress();
    return getBasicDownloadProgress();
  };
  var getAnimatedDownloadProgress = function() {
    let progressBar;
    let lastDownloadedBytes = 0;
    return (downloadedBytes, totalBytes) => {
      if (!progressBar) {
        progressBar = new _utilsBundle.progress(`${toMegabytes(totalBytes)} [:bar] :percent :etas`, {
          complete: "=",
          incomplete: " ",
          width: 20,
          total: totalBytes
        });
      }
      const delta = downloadedBytes - lastDownloadedBytes;
      lastDownloadedBytes = downloadedBytes;
      progressBar.tick(delta);
    };
  };
  var getBasicDownloadProgress = function() {
    const totalRows = 10;
    const stepWidth = 8;
    let lastRow = -1;
    return (downloadedBytes, totalBytes) => {
      const percentage = downloadedBytes / totalBytes;
      const row = Math.floor(totalRows * percentage);
      if (row > lastRow) {
        lastRow = row;
        const percentageString = String(percentage * 100 | 0).padStart(3);
        console.log(`|${"\u25A0".repeat(row * stepWidth)}${" ".repeat((totalRows - row) * stepWidth)}| ${percentageString}% of ${toMegabytes(totalBytes)}`);
      }
    };
  };
  var toMegabytes = function(bytes) {
    const mb = bytes / 1024 / 1024;
    return `${Math.round(mb * 10) / 10} MiB`;
  };
  var __dirname = "/Users/hottin/project/jwave_playlist/node_modules/playwright-core/lib/server/registry";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.downloadBrowserWithProgressBar = downloadBrowserWithProgressBar;
  exports.logPolitely = logPolitely;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _os = _interopRequireDefault(import.meta.require("os"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _child_process = _interopRequireDefault(import.meta.require("child_process"));
  var _fileUtils = require_fileUtils();
  var _debugLogger = require_debugLogger();
  var _manualPromise = require_manualPromise();
  var _utilsBundle = require_utilsBundle();
  var _ = require_registry();
  var _userAgent = require_userAgent();
});

// node_modules/playwright-core/browsers.json
var require_browsers = __commonJS((exports, module) => {
  module.exports = {
    comment: "Do not edit this file, use utils/roll_browser.js",
    browsers: [
      {
        name: "chromium",
        revision: "1105",
        installByDefault: true,
        browserVersion: "123.0.6312.4"
      },
      {
        name: "chromium-with-symbols",
        revision: "1105",
        installByDefault: false,
        browserVersion: "123.0.6312.4"
      },
      {
        name: "chromium-tip-of-tree",
        revision: "1195",
        installByDefault: false,
        browserVersion: "123.0.6312.0"
      },
      {
        name: "firefox",
        revision: "1440",
        installByDefault: true,
        browserVersion: "123.0"
      },
      {
        name: "firefox-asan",
        revision: "1440",
        installByDefault: false,
        browserVersion: "123.0"
      },
      {
        name: "firefox-beta",
        revision: "1440",
        installByDefault: false,
        browserVersion: "124.0b3"
      },
      {
        name: "webkit",
        revision: "1983",
        installByDefault: true,
        revisionOverrides: {
          "mac10.14": "1446",
          "mac10.15": "1616",
          mac11: "1816",
          "mac11-arm64": "1816"
        },
        browserVersion: "17.4"
      },
      {
        name: "ffmpeg",
        revision: "1009",
        installByDefault: true
      },
      {
        name: "android",
        revision: "1000",
        installByDefault: false
      }
    ]
  };
});

// node_modules/playwright-core/lib/server/registry/index.js
var require_registry = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var isBrowserDirectory = function(browserDirectory) {
    const baseName = _path.default.basename(browserDirectory);
    for (const browserName of allDownloadable) {
      if (baseName.startsWith(browserName + "-"))
        return true;
    }
    return false;
  };
  var readDescriptors = function(browsersJSON) {
    return browsersJSON["browsers"].map((obj) => {
      const name = obj.name;
      const revisionOverride = (obj.revisionOverrides || {})[_hostPlatform.hostPlatform];
      const revision = revisionOverride || obj.revision;
      const browserDirectoryPrefix = revisionOverride ? `${name}_${_hostPlatform.hostPlatform}_special` : `${name}`;
      const descriptor = {
        name,
        revision,
        browserVersion: revisionOverride ? undefined : obj.browserVersion,
        installByDefault: !!obj.installByDefault,
        dir: _path.default.join(registryDirectory, browserDirectoryPrefix.replace(/-/g, "_") + "-" + revision)
      };
      return descriptor;
    });
  };
  var browserDirectoryToMarkerFilePath = function(browserDirectory) {
    return _path.default.join(browserDirectory, "INSTALLATION_COMPLETE");
  };
  var buildPlaywrightCLICommand = function(sdkLanguage, parameters) {
    switch (sdkLanguage) {
      case "python":
        return `playwright ${parameters}`;
      case "java":
        return `mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="${parameters}"`;
      case "csharp":
        return `pwsh bin/Debug/netX/playwright.ps1 ${parameters}`;
      default: {
        const packageManagerCommand = (0, _utils.getPackageManagerExecCommand)();
        return `${packageManagerCommand} playwright ${parameters}`;
      }
    }
  };
  async function installDefaultBrowsersForNpmInstall() {
    const defaultBrowserNames = registry.defaultExecutables().map((e) => e.name);
    return installBrowsersForNpmInstall(defaultBrowserNames);
  }
  async function installBrowsersForNpmInstall(browsers) {
    if ((0, _utils.getAsBooleanFromENV)("PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD")) {
      (0, _browserFetcher.logPolitely)("Skipping browsers download because `PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD` env variable is set");
      return false;
    }
    const executables = [];
    for (const browserName of browsers) {
      const executable = registry.findExecutable(browserName);
      if (!executable || executable.installType === "none")
        throw new Error(`Cannot install ${browserName}`);
      executables.push(executable);
    }
    await registry.install(executables, false);
  }
  var findChromiumChannel = function(sdkLanguage) {
    let channel = null;
    for (const name of ["chromium", "chrome", "msedge"]) {
      try {
        registry.findExecutable(name).executablePathOrDie(sdkLanguage);
        channel = name === "chromium" ? undefined : name;
        break;
      } catch (e) {
      }
    }
    if (channel === null) {
      const installCommand = buildPlaywrightCLICommand(sdkLanguage, `install chromium`);
      const prettyMessage = [`No chromium-based browser found on the system.`, `Please run the following command to download one:`, ``, `    ${installCommand}`, ``, `<3 Playwright Team`].join("\n");
      throw new Error("\n" + (0, _utils.wrapInASCIIBox)(prettyMessage, 1));
    }
    return channel;
  };
  var lowercaseAllKeys = function(json) {
    if (typeof json !== "object" || !json)
      return json;
    if (Array.isArray(json))
      return json.map(lowercaseAllKeys);
    const result = {};
    for (const [key, value] of Object.entries(json))
      result[key.toLowerCase()] = lowercaseAllKeys(value);
    return result;
  };
  var __dirname = "/Users/hottin/project/jwave_playlist/node_modules/playwright-core/lib/server/registry";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Registry = undefined;
  exports.browserDirectoryToMarkerFilePath = browserDirectoryToMarkerFilePath;
  exports.buildPlaywrightCLICommand = buildPlaywrightCLICommand;
  exports.findChromiumChannel = findChromiumChannel;
  exports.installBrowsersForNpmInstall = installBrowsersForNpmInstall;
  exports.installDefaultBrowsersForNpmInstall = installDefaultBrowsersForNpmInstall;
  exports.registryDirectory = exports.registry = undefined;
  Object.defineProperty(exports, "writeDockerVersion", {
    enumerable: true,
    get: function() {
      return _dependencies.writeDockerVersion;
    }
  });
  var os = _interopRequireWildcard(import.meta.require("os"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var util = _interopRequireWildcard(import.meta.require("util"));
  var fs = _interopRequireWildcard(import.meta.require("fs"));
  var _utilsBundle = require_utilsBundle();
  var _network = require_network();
  var _userAgent = require_userAgent();
  var _utils = require_utils3();
  var _fileUtils = require_fileUtils();
  var _hostPlatform = require_hostPlatform();
  var _spawnAsync = require_spawnAsync();
  var _dependencies = require_dependencies();
  var _browserFetcher = require_browserFetcher();
  var _debugLogger = require_debugLogger();
  var PACKAGE_PATH = _path.default.join(__dirname, "..", "..", "..");
  var BIN_PATH = _path.default.join(__dirname, "..", "..", "..", "bin");
  var PLAYWRIGHT_CDN_MIRRORS = ["https://playwright.azureedge.net", "https://playwright-akamai.azureedge.net", "https://playwright-verizon.azureedge.net"];
  if (process.env.PW_TEST_CDN_THAT_SHOULD_WORK) {
    for (let i = 0;i < PLAYWRIGHT_CDN_MIRRORS.length; i++) {
      const cdn = PLAYWRIGHT_CDN_MIRRORS[i];
      if (cdn !== process.env.PW_TEST_CDN_THAT_SHOULD_WORK)
        PLAYWRIGHT_CDN_MIRRORS[i] = cdn + ".does-not-resolve.playwright.dev";
    }
  }
  var EXECUTABLE_PATHS = {
    chromium: {
      linux: ["chrome-linux", "chrome"],
      mac: ["chrome-mac", "Chromium.app", "Contents", "MacOS", "Chromium"],
      win: ["chrome-win", "chrome.exe"]
    },
    firefox: {
      linux: ["firefox", "firefox"],
      mac: ["firefox", "Nightly.app", "Contents", "MacOS", "firefox"],
      win: ["firefox", "firefox.exe"]
    },
    webkit: {
      linux: ["pw_run.sh"],
      mac: ["pw_run.sh"],
      win: ["Playwright.exe"]
    },
    ffmpeg: {
      linux: ["ffmpeg-linux"],
      mac: ["ffmpeg-mac"],
      win: ["ffmpeg-win64.exe"]
    }
  };
  var DOWNLOAD_PATHS = {
    chromium: {
      "<unknown>": undefined,
      "ubuntu18.04-x64": undefined,
      "ubuntu20.04-x64": "builds/chromium/%s/chromium-linux.zip",
      "ubuntu22.04-x64": "builds/chromium/%s/chromium-linux.zip",
      "ubuntu18.04-arm64": undefined,
      "ubuntu20.04-arm64": "builds/chromium/%s/chromium-linux-arm64.zip",
      "ubuntu22.04-arm64": "builds/chromium/%s/chromium-linux-arm64.zip",
      "debian11-x64": "builds/chromium/%s/chromium-linux.zip",
      "debian11-arm64": "builds/chromium/%s/chromium-linux-arm64.zip",
      "debian12-x64": "builds/chromium/%s/chromium-linux.zip",
      "debian12-arm64": "builds/chromium/%s/chromium-linux-arm64.zip",
      "mac10.13": "builds/chromium/%s/chromium-mac.zip",
      "mac10.14": "builds/chromium/%s/chromium-mac.zip",
      "mac10.15": "builds/chromium/%s/chromium-mac.zip",
      mac11: "builds/chromium/%s/chromium-mac.zip",
      "mac11-arm64": "builds/chromium/%s/chromium-mac-arm64.zip",
      mac12: "builds/chromium/%s/chromium-mac.zip",
      "mac12-arm64": "builds/chromium/%s/chromium-mac-arm64.zip",
      mac13: "builds/chromium/%s/chromium-mac.zip",
      "mac13-arm64": "builds/chromium/%s/chromium-mac-arm64.zip",
      win64: "builds/chromium/%s/chromium-win64.zip"
    },
    "chromium-tip-of-tree": {
      "<unknown>": undefined,
      "ubuntu18.04-x64": undefined,
      "ubuntu20.04-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux.zip",
      "ubuntu22.04-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux.zip",
      "ubuntu18.04-arm64": undefined,
      "ubuntu20.04-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux-arm64.zip",
      "ubuntu22.04-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux-arm64.zip",
      "debian11-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux.zip",
      "debian11-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux-arm64.zip",
      "debian12-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux.zip",
      "debian12-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux-arm64.zip",
      "mac10.13": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
      "mac10.14": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
      "mac10.15": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
      mac11: "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
      "mac11-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac-arm64.zip",
      mac12: "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
      "mac12-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac-arm64.zip",
      mac13: "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
      "mac13-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac-arm64.zip",
      win64: "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-win64.zip"
    },
    "chromium-with-symbols": {
      "<unknown>": undefined,
      "ubuntu18.04-x64": undefined,
      "ubuntu20.04-x64": "builds/chromium/%s/chromium-with-symbols-linux.zip",
      "ubuntu22.04-x64": "builds/chromium/%s/chromium-with-symbols-linux.zip",
      "ubuntu18.04-arm64": undefined,
      "ubuntu20.04-arm64": "builds/chromium/%s/chromium-with-symbols-linux-arm64.zip",
      "ubuntu22.04-arm64": "builds/chromium/%s/chromium-with-symbols-linux-arm64.zip",
      "debian11-x64": "builds/chromium/%s/chromium-with-symbols-linux.zip",
      "debian11-arm64": "builds/chromium/%s/chromium-with-symbols-linux-arm64.zip",
      "debian12-x64": "builds/chromium/%s/chromium-with-symbols-linux.zip",
      "debian12-arm64": "builds/chromium/%s/chromium-with-symbols-linux-arm64.zip",
      "mac10.13": "builds/chromium/%s/chromium-with-symbols-mac.zip",
      "mac10.14": "builds/chromium/%s/chromium-with-symbols-mac.zip",
      "mac10.15": "builds/chromium/%s/chromium-with-symbols-mac.zip",
      mac11: "builds/chromium/%s/chromium-with-symbols-mac.zip",
      "mac11-arm64": "builds/chromium/%s/chromium-with-symbols-mac-arm64.zip",
      mac12: "builds/chromium/%s/chromium-with-symbols-mac.zip",
      "mac12-arm64": "builds/chromium/%s/chromium-with-symbols-mac-arm64.zip",
      mac13: "builds/chromium/%s/chromium-with-symbols-mac.zip",
      "mac13-arm64": "builds/chromium/%s/chromium-with-symbols-mac-arm64.zip",
      win64: "builds/chromium/%s/chromium-with-symbols-win64.zip"
    },
    firefox: {
      "<unknown>": undefined,
      "ubuntu18.04-x64": undefined,
      "ubuntu20.04-x64": "builds/firefox/%s/firefox-ubuntu-20.04.zip",
      "ubuntu22.04-x64": "builds/firefox/%s/firefox-ubuntu-22.04.zip",
      "ubuntu18.04-arm64": undefined,
      "ubuntu20.04-arm64": "builds/firefox/%s/firefox-ubuntu-20.04-arm64.zip",
      "ubuntu22.04-arm64": "builds/firefox/%s/firefox-ubuntu-22.04-arm64.zip",
      "debian11-x64": "builds/firefox/%s/firefox-debian-11.zip",
      "debian11-arm64": "builds/firefox/%s/firefox-debian-11-arm64.zip",
      "debian12-x64": "builds/firefox/%s/firefox-debian-12.zip",
      "debian12-arm64": "builds/firefox/%s/firefox-debian-12-arm64.zip",
      "mac10.13": "builds/firefox/%s/firefox-mac-13.zip",
      "mac10.14": "builds/firefox/%s/firefox-mac-13.zip",
      "mac10.15": "builds/firefox/%s/firefox-mac-13.zip",
      mac11: "builds/firefox/%s/firefox-mac-13.zip",
      "mac11-arm64": "builds/firefox/%s/firefox-mac-13-arm64.zip",
      mac12: "builds/firefox/%s/firefox-mac-13.zip",
      "mac12-arm64": "builds/firefox/%s/firefox-mac-13-arm64.zip",
      mac13: "builds/firefox/%s/firefox-mac-13.zip",
      "mac13-arm64": "builds/firefox/%s/firefox-mac-13-arm64.zip",
      win64: "builds/firefox/%s/firefox-win64.zip"
    },
    "firefox-beta": {
      "<unknown>": undefined,
      "ubuntu18.04-x64": undefined,
      "ubuntu20.04-x64": "builds/firefox-beta/%s/firefox-beta-ubuntu-20.04.zip",
      "ubuntu22.04-x64": "builds/firefox-beta/%s/firefox-beta-ubuntu-22.04.zip",
      "ubuntu18.04-arm64": undefined,
      "ubuntu20.04-arm64": undefined,
      "ubuntu22.04-arm64": "builds/firefox-beta/%s/firefox-beta-ubuntu-22.04-arm64.zip",
      "debian11-x64": "builds/firefox-beta/%s/firefox-beta-debian-11.zip",
      "debian11-arm64": "builds/firefox-beta/%s/firefox-beta-debian-11-arm64.zip",
      "debian12-x64": "builds/firefox-beta/%s/firefox-beta-debian-12.zip",
      "debian12-arm64": "builds/firefox-beta/%s/firefox-beta-debian-12-arm64.zip",
      "mac10.13": "builds/firefox-beta/%s/firefox-beta-mac-13.zip",
      "mac10.14": "builds/firefox-beta/%s/firefox-beta-mac-13.zip",
      "mac10.15": "builds/firefox-beta/%s/firefox-beta-mac-13.zip",
      mac11: "builds/firefox-beta/%s/firefox-beta-mac-13.zip",
      "mac11-arm64": "builds/firefox-beta/%s/firefox-beta-mac-13-arm64.zip",
      mac12: "builds/firefox-beta/%s/firefox-beta-mac-13.zip",
      "mac12-arm64": "builds/firefox-beta/%s/firefox-beta-mac-13-arm64.zip",
      mac13: "builds/firefox-beta/%s/firefox-beta-mac-13.zip",
      "mac13-arm64": "builds/firefox-beta/%s/firefox-beta-mac-13-arm64.zip",
      win64: "builds/firefox-beta/%s/firefox-beta-win64.zip"
    },
    "firefox-asan": {
      "<unknown>": undefined,
      "ubuntu18.04-x64": undefined,
      "ubuntu20.04-x64": undefined,
      "ubuntu22.04-x64": "builds/firefox/%s/firefox-asan-ubuntu-22.04.zip",
      "ubuntu18.04-arm64": undefined,
      "ubuntu20.04-arm64": undefined,
      "ubuntu22.04-arm64": undefined,
      "debian11-x64": undefined,
      "debian11-arm64": undefined,
      "debian12-x64": undefined,
      "debian12-arm64": undefined,
      "mac10.13": "builds/firefox/%s/firefox-asan-mac-13.zip",
      "mac10.14": "builds/firefox/%s/firefox-asan-mac-13.zip",
      "mac10.15": "builds/firefox/%s/firefox-asan-mac-13.zip",
      mac11: "builds/firefox/%s/firefox-asan-mac-13.zip",
      "mac11-arm64": undefined,
      mac12: "builds/firefox/%s/firefox-asan-mac-13.zip",
      "mac12-arm64": undefined,
      mac13: "builds/firefox/%s/firefox-asan-mac-13.zip",
      "mac13-arm64": undefined,
      win64: undefined
    },
    webkit: {
      "<unknown>": undefined,
      "ubuntu18.04-x64": undefined,
      "ubuntu20.04-x64": "builds/webkit/%s/webkit-ubuntu-20.04.zip",
      "ubuntu22.04-x64": "builds/webkit/%s/webkit-ubuntu-22.04.zip",
      "ubuntu18.04-arm64": undefined,
      "ubuntu20.04-arm64": "builds/webkit/%s/webkit-ubuntu-20.04-arm64.zip",
      "ubuntu22.04-arm64": "builds/webkit/%s/webkit-ubuntu-22.04-arm64.zip",
      "debian11-x64": "builds/webkit/%s/webkit-debian-11.zip",
      "debian11-arm64": "builds/webkit/%s/webkit-debian-11-arm64.zip",
      "debian12-x64": "builds/webkit/%s/webkit-debian-12.zip",
      "debian12-arm64": "builds/webkit/%s/webkit-debian-12-arm64.zip",
      "mac10.13": undefined,
      "mac10.14": "builds/deprecated-webkit-mac-10.14/%s/deprecated-webkit-mac-10.14.zip",
      "mac10.15": "builds/deprecated-webkit-mac-10.15/%s/deprecated-webkit-mac-10.15.zip",
      mac11: "builds/webkit/%s/webkit-mac-11.zip",
      "mac11-arm64": "builds/webkit/%s/webkit-mac-11-arm64.zip",
      mac12: "builds/webkit/%s/webkit-mac-12.zip",
      "mac12-arm64": "builds/webkit/%s/webkit-mac-12-arm64.zip",
      mac13: "builds/webkit/%s/webkit-mac-13.zip",
      "mac13-arm64": "builds/webkit/%s/webkit-mac-13-arm64.zip",
      win64: "builds/webkit/%s/webkit-win64.zip"
    },
    ffmpeg: {
      "<unknown>": undefined,
      "ubuntu18.04-x64": undefined,
      "ubuntu20.04-x64": "builds/ffmpeg/%s/ffmpeg-linux.zip",
      "ubuntu22.04-x64": "builds/ffmpeg/%s/ffmpeg-linux.zip",
      "ubuntu18.04-arm64": undefined,
      "ubuntu20.04-arm64": "builds/ffmpeg/%s/ffmpeg-linux-arm64.zip",
      "ubuntu22.04-arm64": "builds/ffmpeg/%s/ffmpeg-linux-arm64.zip",
      "debian11-x64": "builds/ffmpeg/%s/ffmpeg-linux.zip",
      "debian11-arm64": "builds/ffmpeg/%s/ffmpeg-linux-arm64.zip",
      "debian12-x64": "builds/ffmpeg/%s/ffmpeg-linux.zip",
      "debian12-arm64": "builds/ffmpeg/%s/ffmpeg-linux-arm64.zip",
      "mac10.13": "builds/ffmpeg/%s/ffmpeg-mac.zip",
      "mac10.14": "builds/ffmpeg/%s/ffmpeg-mac.zip",
      "mac10.15": "builds/ffmpeg/%s/ffmpeg-mac.zip",
      mac11: "builds/ffmpeg/%s/ffmpeg-mac.zip",
      "mac11-arm64": "builds/ffmpeg/%s/ffmpeg-mac-arm64.zip",
      mac12: "builds/ffmpeg/%s/ffmpeg-mac.zip",
      "mac12-arm64": "builds/ffmpeg/%s/ffmpeg-mac-arm64.zip",
      mac13: "builds/ffmpeg/%s/ffmpeg-mac.zip",
      "mac13-arm64": "builds/ffmpeg/%s/ffmpeg-mac-arm64.zip",
      win64: "builds/ffmpeg/%s/ffmpeg-win64.zip"
    },
    android: {
      "<unknown>": "builds/android/%s/android.zip",
      "ubuntu18.04-x64": undefined,
      "ubuntu20.04-x64": "builds/android/%s/android.zip",
      "ubuntu22.04-x64": "builds/android/%s/android.zip",
      "ubuntu18.04-arm64": undefined,
      "ubuntu20.04-arm64": "builds/android/%s/android.zip",
      "ubuntu22.04-arm64": "builds/android/%s/android.zip",
      "debian11-x64": "builds/android/%s/android.zip",
      "debian11-arm64": "builds/android/%s/android.zip",
      "debian12-x64": "builds/android/%s/android.zip",
      "debian12-arm64": "builds/android/%s/android.zip",
      "mac10.13": "builds/android/%s/android.zip",
      "mac10.14": "builds/android/%s/android.zip",
      "mac10.15": "builds/android/%s/android.zip",
      mac11: "builds/android/%s/android.zip",
      "mac11-arm64": "builds/android/%s/android.zip",
      mac12: "builds/android/%s/android.zip",
      "mac12-arm64": "builds/android/%s/android.zip",
      mac13: "builds/android/%s/android.zip",
      "mac13-arm64": "builds/android/%s/android.zip",
      win64: "builds/android/%s/android.zip"
    }
  };
  var registryDirectory = exports.registryDirectory = (() => {
    let result;
    const envDefined = (0, _utils.getFromENV)("PLAYWRIGHT_BROWSERS_PATH");
    if (envDefined === "0") {
      result = _path.default.join(__dirname, "..", "..", "..", ".local-browsers");
    } else if (envDefined) {
      result = envDefined;
    } else {
      let cacheDirectory;
      if (process.platform === "linux")
        cacheDirectory = process.env.XDG_CACHE_HOME || _path.default.join(os.homedir(), ".cache");
      else if (process.platform === "darwin")
        cacheDirectory = _path.default.join(os.homedir(), "Library", "Caches");
      else if (process.platform === "win32")
        cacheDirectory = process.env.LOCALAPPDATA || _path.default.join(os.homedir(), "AppData", "Local");
      else
        throw new Error("Unsupported platform: " + process.platform);
      result = _path.default.join(cacheDirectory, "ms-playwright");
    }
    if (!_path.default.isAbsolute(result)) {
      result = _path.default.resolve((0, _utils.getFromENV)("INIT_CWD") || process.cwd(), result);
    }
    return result;
  })();
  var allDownloadable = ["chromium", "firefox", "webkit", "ffmpeg", "firefox-beta", "chromium-with-symbols", "chromium-tip-of-tree"];

  class Registry {
    constructor(browsersJSON) {
      this._executables = undefined;
      const descriptors = readDescriptors(browsersJSON);
      const findExecutablePath = (dir, name) => {
        let tokens = undefined;
        if (process.platform === "linux")
          tokens = EXECUTABLE_PATHS[name]["linux"];
        else if (process.platform === "darwin")
          tokens = EXECUTABLE_PATHS[name]["mac"];
        else if (process.platform === "win32")
          tokens = EXECUTABLE_PATHS[name]["win"];
        return tokens ? _path.default.join(dir, ...tokens) : undefined;
      };
      const executablePathOrDie = (name, e, installByDefault, sdkLanguage) => {
        if (!e)
          throw new Error(`${name} is not supported on ${_hostPlatform.hostPlatform}`);
        const installCommand = buildPlaywrightCLICommand(sdkLanguage, `install${installByDefault ? "" : " " + name}`);
        if (!(0, _fileUtils.canAccessFile)(e)) {
          const currentDockerVersion = (0, _dependencies.readDockerVersionSync)();
          const preferredDockerVersion = currentDockerVersion ? (0, _dependencies.dockerVersion)(currentDockerVersion.dockerImageNameTemplate) : null;
          const isOutdatedDockerImage = currentDockerVersion && preferredDockerVersion && currentDockerVersion.dockerImageName !== preferredDockerVersion.dockerImageName;
          const prettyMessage = isOutdatedDockerImage ? [`Looks like ${sdkLanguage === "javascript" ? "Playwright Test or " : ""}Playwright was just updated to ${preferredDockerVersion.driverVersion}.`, `Please update docker image as well.`, `-  current: ${currentDockerVersion.dockerImageName}`, `- required: ${preferredDockerVersion.dockerImageName}`, ``, `<3 Playwright Team`].join("\n") : [`Looks like ${sdkLanguage === "javascript" ? "Playwright Test or " : ""}Playwright was just installed or updated.`, `Please run the following command to download new browser${installByDefault ? "s" : ""}:`, ``, `    ${installCommand}`, ``, `<3 Playwright Team`].join("\n");
          throw new Error(`Executable doesn't exist at ${e}\n${(0, _utils.wrapInASCIIBox)(prettyMessage, 1)}`);
        }
        return e;
      };
      this._executables = [];
      const chromium = descriptors.find((d) => d.name === "chromium");
      const chromiumExecutable = findExecutablePath(chromium.dir, "chromium");
      this._executables.push({
        type: "browser",
        name: "chromium",
        browserName: "chromium",
        directory: chromium.dir,
        executablePath: () => chromiumExecutable,
        executablePathOrDie: (sdkLanguage) => executablePathOrDie("chromium", chromiumExecutable, chromium.installByDefault, sdkLanguage),
        installType: chromium.installByDefault ? "download-by-default" : "download-on-demand",
        _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, "chromium", chromium.dir, ["chrome-linux"], [], ["chrome-win"]),
        downloadURLs: this._downloadURLs(chromium),
        browserVersion: chromium.browserVersion,
        _install: () => this._downloadExecutable(chromium, chromiumExecutable),
        _dependencyGroup: "chromium",
        _isHermeticInstallation: true
      });
      const chromiumWithSymbols = descriptors.find((d) => d.name === "chromium-with-symbols");
      const chromiumWithSymbolsExecutable = findExecutablePath(chromiumWithSymbols.dir, "chromium");
      this._executables.push({
        type: "tool",
        name: "chromium-with-symbols",
        browserName: "chromium",
        directory: chromiumWithSymbols.dir,
        executablePath: () => chromiumWithSymbolsExecutable,
        executablePathOrDie: (sdkLanguage) => executablePathOrDie("chromium-with-symbols", chromiumWithSymbolsExecutable, chromiumWithSymbols.installByDefault, sdkLanguage),
        installType: chromiumWithSymbols.installByDefault ? "download-by-default" : "download-on-demand",
        _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, "chromium", chromiumWithSymbols.dir, ["chrome-linux"], [], ["chrome-win"]),
        downloadURLs: this._downloadURLs(chromiumWithSymbols),
        browserVersion: chromiumWithSymbols.browserVersion,
        _install: () => this._downloadExecutable(chromiumWithSymbols, chromiumWithSymbolsExecutable),
        _dependencyGroup: "chromium",
        _isHermeticInstallation: true
      });
      const chromiumTipOfTree = descriptors.find((d) => d.name === "chromium-tip-of-tree");
      const chromiumTipOfTreeExecutable = findExecutablePath(chromiumTipOfTree.dir, "chromium");
      this._executables.push({
        type: "tool",
        name: "chromium-tip-of-tree",
        browserName: "chromium",
        directory: chromiumTipOfTree.dir,
        executablePath: () => chromiumTipOfTreeExecutable,
        executablePathOrDie: (sdkLanguage) => executablePathOrDie("chromium-tip-of-tree", chromiumTipOfTreeExecutable, chromiumTipOfTree.installByDefault, sdkLanguage),
        installType: chromiumTipOfTree.installByDefault ? "download-by-default" : "download-on-demand",
        _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, "chromium", chromiumTipOfTree.dir, ["chrome-linux"], [], ["chrome-win"]),
        downloadURLs: this._downloadURLs(chromiumTipOfTree),
        browserVersion: chromiumTipOfTree.browserVersion,
        _install: () => this._downloadExecutable(chromiumTipOfTree, chromiumTipOfTreeExecutable),
        _dependencyGroup: "chromium",
        _isHermeticInstallation: true
      });
      this._executables.push(this._createChromiumChannel("chrome", {
        linux: "/opt/google/chrome/chrome",
        darwin: "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",
        win32: `\\Google\\Chrome\\Application\\chrome.exe`
      }, () => this._installChromiumChannel("chrome", {
        linux: "reinstall_chrome_stable_linux.sh",
        darwin: "reinstall_chrome_stable_mac.sh",
        win32: "reinstall_chrome_stable_win.ps1"
      })));
      this._executables.push(this._createChromiumChannel("chrome-beta", {
        linux: "/opt/google/chrome-beta/chrome",
        darwin: "/Applications/Google Chrome Beta.app/Contents/MacOS/Google Chrome Beta",
        win32: `\\Google\\Chrome Beta\\Application\\chrome.exe`
      }, () => this._installChromiumChannel("chrome-beta", {
        linux: "reinstall_chrome_beta_linux.sh",
        darwin: "reinstall_chrome_beta_mac.sh",
        win32: "reinstall_chrome_beta_win.ps1"
      })));
      this._executables.push(this._createChromiumChannel("chrome-dev", {
        linux: "/opt/google/chrome-unstable/chrome",
        darwin: "/Applications/Google Chrome Dev.app/Contents/MacOS/Google Chrome Dev",
        win32: `\\Google\\Chrome Dev\\Application\\chrome.exe`
      }));
      this._executables.push(this._createChromiumChannel("chrome-canary", {
        linux: "",
        darwin: "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary",
        win32: `\\Google\\Chrome SxS\\Application\\chrome.exe`
      }));
      this._executables.push(this._createChromiumChannel("msedge", {
        linux: "/opt/microsoft/msedge/msedge",
        darwin: "/Applications/Microsoft Edge.app/Contents/MacOS/Microsoft Edge",
        win32: `\\Microsoft\\Edge\\Application\\msedge.exe`
      }, () => this._installMSEdgeChannel("msedge", {
        linux: "reinstall_msedge_stable_linux.sh",
        darwin: "reinstall_msedge_stable_mac.sh",
        win32: "reinstall_msedge_stable_win.ps1"
      })));
      this._executables.push(this._createChromiumChannel("msedge-beta", {
        linux: "/opt/microsoft/msedge-beta/msedge",
        darwin: "/Applications/Microsoft Edge Beta.app/Contents/MacOS/Microsoft Edge Beta",
        win32: `\\Microsoft\\Edge Beta\\Application\\msedge.exe`
      }, () => this._installMSEdgeChannel("msedge-beta", {
        darwin: "reinstall_msedge_beta_mac.sh",
        linux: "reinstall_msedge_beta_linux.sh",
        win32: "reinstall_msedge_beta_win.ps1"
      })));
      this._executables.push(this._createChromiumChannel("msedge-dev", {
        linux: "/opt/microsoft/msedge-dev/msedge",
        darwin: "/Applications/Microsoft Edge Dev.app/Contents/MacOS/Microsoft Edge Dev",
        win32: `\\Microsoft\\Edge Dev\\Application\\msedge.exe`
      }, () => this._installMSEdgeChannel("msedge-dev", {
        darwin: "reinstall_msedge_dev_mac.sh",
        linux: "reinstall_msedge_dev_linux.sh",
        win32: "reinstall_msedge_dev_win.ps1"
      })));
      this._executables.push(this._createChromiumChannel("msedge-canary", {
        linux: "",
        darwin: "/Applications/Microsoft Edge Canary.app/Contents/MacOS/Microsoft Edge Canary",
        win32: `\\Microsoft\\Edge SxS\\Application\\msedge.exe`
      }));
      const firefox = descriptors.find((d) => d.name === "firefox");
      const firefoxExecutable = findExecutablePath(firefox.dir, "firefox");
      this._executables.push({
        type: "browser",
        name: "firefox",
        browserName: "firefox",
        directory: firefox.dir,
        executablePath: () => firefoxExecutable,
        executablePathOrDie: (sdkLanguage) => executablePathOrDie("firefox", firefoxExecutable, firefox.installByDefault, sdkLanguage),
        installType: firefox.installByDefault ? "download-by-default" : "download-on-demand",
        _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, "firefox", firefox.dir, ["firefox"], [], ["firefox"]),
        downloadURLs: this._downloadURLs(firefox),
        browserVersion: firefox.browserVersion,
        _install: () => this._downloadExecutable(firefox, firefoxExecutable),
        _dependencyGroup: "firefox",
        _isHermeticInstallation: true
      });
      const firefoxAsan = descriptors.find((d) => d.name === "firefox-asan");
      const firefoxAsanExecutable = findExecutablePath(firefoxAsan.dir, "firefox");
      this._executables.push({
        type: "browser",
        name: "firefox-asan",
        browserName: "firefox",
        directory: firefoxAsan.dir,
        executablePath: () => firefoxAsanExecutable,
        executablePathOrDie: (sdkLanguage) => executablePathOrDie("firefox-asan", firefoxAsanExecutable, firefoxAsan.installByDefault, sdkLanguage),
        installType: firefoxAsan.installByDefault ? "download-by-default" : "download-on-demand",
        _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, "firefox", firefoxAsan.dir, ["firefox"], [], ["firefox"]),
        downloadURLs: this._downloadURLs(firefoxAsan),
        browserVersion: firefoxAsan.browserVersion,
        _install: () => this._downloadExecutable(firefoxAsan, firefoxAsanExecutable),
        _dependencyGroup: "firefox",
        _isHermeticInstallation: true
      });
      const firefoxBeta = descriptors.find((d) => d.name === "firefox-beta");
      const firefoxBetaExecutable = findExecutablePath(firefoxBeta.dir, "firefox");
      this._executables.push({
        type: "tool",
        name: "firefox-beta",
        browserName: "firefox",
        directory: firefoxBeta.dir,
        executablePath: () => firefoxBetaExecutable,
        executablePathOrDie: (sdkLanguage) => executablePathOrDie("firefox-beta", firefoxBetaExecutable, firefoxBeta.installByDefault, sdkLanguage),
        installType: firefoxBeta.installByDefault ? "download-by-default" : "download-on-demand",
        _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, "firefox", firefoxBeta.dir, ["firefox"], [], ["firefox"]),
        downloadURLs: this._downloadURLs(firefoxBeta),
        browserVersion: firefoxBeta.browserVersion,
        _install: () => this._downloadExecutable(firefoxBeta, firefoxBetaExecutable),
        _dependencyGroup: "firefox",
        _isHermeticInstallation: true
      });
      const webkit = descriptors.find((d) => d.name === "webkit");
      const webkitExecutable = findExecutablePath(webkit.dir, "webkit");
      const webkitLinuxLddDirectories = [_path.default.join("minibrowser-gtk"), _path.default.join("minibrowser-gtk", "bin"), _path.default.join("minibrowser-gtk", "lib"), _path.default.join("minibrowser-gtk", "sys", "lib"), _path.default.join("minibrowser-wpe"), _path.default.join("minibrowser-wpe", "bin"), _path.default.join("minibrowser-wpe", "lib"), _path.default.join("minibrowser-wpe", "sys", "lib")];
      this._executables.push({
        type: "browser",
        name: "webkit",
        browserName: "webkit",
        directory: webkit.dir,
        executablePath: () => webkitExecutable,
        executablePathOrDie: (sdkLanguage) => executablePathOrDie("webkit", webkitExecutable, webkit.installByDefault, sdkLanguage),
        installType: webkit.installByDefault ? "download-by-default" : "download-on-demand",
        _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, "webkit", webkit.dir, webkitLinuxLddDirectories, ["libGLESv2.so.2", "libx264.so"], [""]),
        downloadURLs: this._downloadURLs(webkit),
        browserVersion: webkit.browserVersion,
        _install: () => this._downloadExecutable(webkit, webkitExecutable),
        _dependencyGroup: "webkit",
        _isHermeticInstallation: true
      });
      const ffmpeg = descriptors.find((d) => d.name === "ffmpeg");
      const ffmpegExecutable = findExecutablePath(ffmpeg.dir, "ffmpeg");
      this._executables.push({
        type: "tool",
        name: "ffmpeg",
        browserName: undefined,
        directory: ffmpeg.dir,
        executablePath: () => ffmpegExecutable,
        executablePathOrDie: (sdkLanguage) => executablePathOrDie("ffmpeg", ffmpegExecutable, ffmpeg.installByDefault, sdkLanguage),
        installType: ffmpeg.installByDefault ? "download-by-default" : "download-on-demand",
        _validateHostRequirements: () => Promise.resolve(),
        downloadURLs: this._downloadURLs(ffmpeg),
        _install: () => this._downloadExecutable(ffmpeg, ffmpegExecutable),
        _dependencyGroup: "tools",
        _isHermeticInstallation: true
      });
      const android = descriptors.find((d) => d.name === "android");
      this._executables.push({
        type: "tool",
        name: "android",
        browserName: undefined,
        directory: android.dir,
        executablePath: () => {
          return;
        },
        executablePathOrDie: () => "",
        installType: "download-on-demand",
        _validateHostRequirements: () => Promise.resolve(),
        downloadURLs: this._downloadURLs(android),
        _install: () => this._downloadExecutable(android),
        _dependencyGroup: "tools",
        _isHermeticInstallation: true
      });
    }
    _createChromiumChannel(name, lookAt, install) {
      const executablePath = (sdkLanguage, shouldThrow) => {
        const suffix = lookAt[process.platform];
        if (!suffix) {
          if (shouldThrow)
            throw new Error(`Chromium distribution '${name}' is not supported on ${process.platform}`);
          return;
        }
        const prefixes = process.platform === "win32" ? [process.env.LOCALAPPDATA, process.env.PROGRAMFILES, process.env["PROGRAMFILES(X86)"]].filter(Boolean) : [""];
        for (const prefix of prefixes) {
          const executablePath2 = _path.default.join(prefix, suffix);
          if ((0, _fileUtils.canAccessFile)(executablePath2))
            return executablePath2;
        }
        if (!shouldThrow)
          return;
        const location2 = prefixes.length ? ` at ${_path.default.join(prefixes[0], suffix)}` : ``;
        const installation = install ? `\nRun "${buildPlaywrightCLICommand(sdkLanguage, "install " + name)}"` : "";
        throw new Error(`Chromium distribution '${name}' is not found${location2}${installation}`);
      };
      return {
        type: "channel",
        name,
        browserName: "chromium",
        directory: undefined,
        executablePath: (sdkLanguage) => executablePath(sdkLanguage, false),
        executablePathOrDie: (sdkLanguage) => executablePath(sdkLanguage, true),
        installType: install ? "install-script" : "none",
        _validateHostRequirements: () => Promise.resolve(),
        _isHermeticInstallation: false,
        _install: install
      };
    }
    executables() {
      return this._executables;
    }
    findExecutable(name) {
      return this._executables.find((b) => b.name === name);
    }
    defaultExecutables() {
      return this._executables.filter((e) => e.installType === "download-by-default");
    }
    _addRequirementsAndDedupe(executables) {
      const set = new Set;
      for (const executable of executables) {
        set.add(executable);
        if (executable.browserName === "chromium")
          set.add(this.findExecutable("ffmpeg"));
      }
      return Array.from(set);
    }
    async _validateHostRequirements(sdkLanguage, browserName, browserDirectory, linuxLddDirectories, dlOpenLibraries, windowsExeAndDllDirectories) {
      if (os.platform() === "linux")
        return await (0, _dependencies.validateDependenciesLinux)(sdkLanguage, linuxLddDirectories.map((d) => _path.default.join(browserDirectory, d)), dlOpenLibraries);
      if (os.platform() === "win32" && os.arch() === "x64")
        return await (0, _dependencies.validateDependenciesWindows)(windowsExeAndDllDirectories.map((d) => _path.default.join(browserDirectory, d)));
    }
    async installDeps(executablesToInstallDeps, dryRun) {
      const executables = this._addRequirementsAndDedupe(executablesToInstallDeps);
      const targets = new Set;
      for (const executable of executables) {
        if (executable._dependencyGroup)
          targets.add(executable._dependencyGroup);
      }
      targets.add("tools");
      if (os.platform() === "win32")
        return await (0, _dependencies.installDependenciesWindows)(targets, dryRun);
      if (os.platform() === "linux")
        return await (0, _dependencies.installDependenciesLinux)(targets, dryRun);
    }
    async install(executablesToInstall, forceReinstall) {
      const executables = this._addRequirementsAndDedupe(executablesToInstall);
      await fs.promises.mkdir(registryDirectory, {
        recursive: true
      });
      const lockfilePath = _path.default.join(registryDirectory, "__dirlock");
      const linksDir = _path.default.join(registryDirectory, ".links");
      let releaseLock;
      try {
        releaseLock = await _utilsBundle.lockfile.lock(registryDirectory, {
          retries: {
            retries: 20,
            factor: 1.27579
          },
          onCompromised: (err) => {
            throw new Error(`${err.message} Path: ${lockfilePath}`);
          },
          lockfilePath
        });
        await fs.promises.mkdir(linksDir, {
          recursive: true
        });
        await fs.promises.writeFile(_path.default.join(linksDir, (0, _utils.calculateSha1)(PACKAGE_PATH)), PACKAGE_PATH);
        await this._validateInstallationCache(linksDir);
        for (const executable of executables) {
          if (!executable._install)
            throw new Error(`ERROR: Playwright does not support installing ${executable.name}`);
          const {
            embedderName
          } = (0, _userAgent.getEmbedderName)();
          if (!(0, _utils.getAsBooleanFromENV)("CI") && !executable._isHermeticInstallation && !forceReinstall && executable.executablePath(embedderName)) {
            const command = buildPlaywrightCLICommand(embedderName, "install --force " + executable.name);
            throw new Error("\n" + (0, _utils.wrapInASCIIBox)([`ATTENTION: "${executable.name}" is already installed on the system!`, ``, `"${executable.name}" installation is not hermetic; installing newer version`, `requires *removal* of a current installation first.`, ``, `To *uninstall* current version and re-install latest "${executable.name}":`, ``, `- Close all running instances of "${executable.name}", if any`, `- Use "--force" to install browser:`, ``, `    ${command}`, ``, `<3 Playwright Team`].join("\n"), 1));
          }
          await executable._install();
        }
      } catch (e) {
        if (e.code === "ELOCKED") {
          const rmCommand = process.platform === "win32" ? "rm -R" : "rm -rf";
          throw new Error("\n" + (0, _utils.wrapInASCIIBox)([`An active lockfile is found at:`, ``, `  ${lockfilePath}`, ``, `Either:`, `- wait a few minutes if other Playwright is installing browsers in parallel`, `- remove lock manually with:`, ``, `    ${rmCommand} ${lockfilePath}`, ``, `<3 Playwright Team`].join("\n"), 1));
        } else {
          throw e;
        }
      } finally {
        if (releaseLock)
          await releaseLock();
      }
    }
    async uninstall(all) {
      const linksDir = _path.default.join(registryDirectory, ".links");
      if (all) {
        const links = await fs.promises.readdir(linksDir).catch(() => []);
        for (const link of links)
          await fs.promises.unlink(_path.default.join(linksDir, link));
      } else {
        await fs.promises.unlink(_path.default.join(linksDir, (0, _utils.calculateSha1)(PACKAGE_PATH))).catch(() => {
        });
      }
      await this._validateInstallationCache(linksDir);
      return {
        numberOfBrowsersLeft: (await fs.promises.readdir(registryDirectory).catch(() => [])).filter((browserDirectory) => isBrowserDirectory(browserDirectory)).length
      };
    }
    async validateHostRequirementsForExecutablesIfNeeded(executables, sdkLanguage) {
      if ((0, _utils.getAsBooleanFromENV)("PLAYWRIGHT_SKIP_VALIDATE_HOST_REQUIREMENTS")) {
        process.stderr.write("Skipping host requirements validation logic because `PLAYWRIGHT_SKIP_VALIDATE_HOST_REQUIREMENTS` env variable is set.\n");
        return;
      }
      for (const executable of executables)
        await this._validateHostRequirementsForExecutableIfNeeded(executable, sdkLanguage);
    }
    async _validateHostRequirementsForExecutableIfNeeded(executable, sdkLanguage) {
      const kMaximumReValidationPeriod = 30 * 24 * 60 * 60 * 1000;
      if (!executable.directory)
        return;
      const markerFile = _path.default.join(executable.directory, "DEPENDENCIES_VALIDATED");
      if (await fs.promises.stat(markerFile).then((stat) => Date.now() - stat.mtime.getTime() < kMaximumReValidationPeriod).catch(() => false))
        return;
      _debugLogger.debugLogger.log("install", `validating host requirements for "${executable.name}"`);
      try {
        await executable._validateHostRequirements(sdkLanguage);
        _debugLogger.debugLogger.log("install", `validation passed for ${executable.name}`);
      } catch (error) {
        _debugLogger.debugLogger.log("install", `validation failed for ${executable.name}`);
        throw error;
      }
      await fs.promises.writeFile(markerFile, "").catch(() => {
      });
    }
    _downloadURLs(descriptor) {
      const paths = DOWNLOAD_PATHS[descriptor.name];
      const downloadPathTemplate = paths[_hostPlatform.hostPlatform] || paths["<unknown>"];
      if (!downloadPathTemplate)
        return [];
      const downloadPath = util.format(downloadPathTemplate, descriptor.revision);
      let downloadURLs = PLAYWRIGHT_CDN_MIRRORS.map((mirror) => `${mirror}/${downloadPath}`);
      let downloadHostEnv;
      if (descriptor.name.startsWith("chromium"))
        downloadHostEnv = "PLAYWRIGHT_CHROMIUM_DOWNLOAD_HOST";
      else if (descriptor.name.startsWith("firefox"))
        downloadHostEnv = "PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST";
      else if (descriptor.name.startsWith("webkit"))
        downloadHostEnv = "PLAYWRIGHT_WEBKIT_DOWNLOAD_HOST";
      const customHostOverride = downloadHostEnv && (0, _utils.getFromENV)(downloadHostEnv) || (0, _utils.getFromENV)("PLAYWRIGHT_DOWNLOAD_HOST");
      if (customHostOverride)
        downloadURLs = [`${customHostOverride}/${downloadPath}`];
      return downloadURLs;
    }
    async _downloadExecutable(descriptor, executablePath) {
      const downloadURLs = this._downloadURLs(descriptor);
      if (!downloadURLs.length)
        throw new Error(`ERROR: Playwright does not support ${descriptor.name} on ${_hostPlatform.hostPlatform}`);
      if (!_hostPlatform.isOfficiallySupportedPlatform)
        (0, _browserFetcher.logPolitely)(`BEWARE: your OS is not officially supported by Playwright; downloading fallback build for ${_hostPlatform.hostPlatform}.`);
      const displayName = descriptor.name.split("-").map((word) => {
        return word === "ffmpeg" ? "FFMPEG" : word.charAt(0).toUpperCase() + word.slice(1);
      }).join(" ");
      const title = descriptor.browserVersion ? `${displayName} ${descriptor.browserVersion} (playwright build v${descriptor.revision})` : `${displayName} playwright build v${descriptor.revision}`;
      const downloadFileName = `playwright-download-${descriptor.name}-${_hostPlatform.hostPlatform}-${descriptor.revision}.zip`;
      const downloadConnectionTimeoutEnv = (0, _utils.getFromENV)("PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT");
      const downloadConnectionTimeout = +(downloadConnectionTimeoutEnv || "0") || 30000;
      await (0, _browserFetcher.downloadBrowserWithProgressBar)(title, descriptor.dir, executablePath, downloadURLs, downloadFileName, downloadConnectionTimeout).catch((e) => {
        throw new Error(`Failed to download ${title}, caused by\n${e.stack}`);
      });
    }
    async _installMSEdgeChannel(channel, scripts) {
      const scriptArgs = [];
      if (process.platform !== "linux") {
        const products = lowercaseAllKeys(JSON.parse(await (0, _network.fetchData)({
          url: "https://edgeupdates.microsoft.com/api/products"
        })));
        const productName = {
          msedge: "Stable",
          "msedge-beta": "Beta",
          "msedge-dev": "Dev"
        }[channel];
        const product = products.find((product2) => product2.product === productName);
        const searchConfig = {
          darwin: {
            platform: "MacOS",
            arch: "universal",
            artifact: "pkg"
          },
          win32: {
            platform: "Windows",
            arch: "x64",
            artifact: "msi"
          }
        }[process.platform];
        const release = searchConfig ? product.releases.find((release2) => release2.platform === searchConfig.platform && release2.architecture === searchConfig.arch && release2.artifacts.length > 0) : null;
        const artifact = release ? release.artifacts.find((artifact2) => artifact2.artifactname === searchConfig.artifact) : null;
        if (artifact)
          scriptArgs.push(artifact.location);
        else
          throw new Error(`Cannot install ${channel} on ${process.platform}`);
      }
      await this._installChromiumChannel(channel, scripts, scriptArgs);
    }
    async _installChromiumChannel(channel, scripts, scriptArgs = []) {
      const scriptName = scripts[process.platform];
      if (!scriptName)
        throw new Error(`Cannot install ${channel} on ${process.platform}`);
      const cwd = BIN_PATH;
      const isPowerShell = scriptName.endsWith(".ps1");
      if (isPowerShell) {
        const args = ["-ExecutionPolicy", "Bypass", "-File", _path.default.join(BIN_PATH, scriptName), ...scriptArgs];
        const {
          code
        } = await (0, _spawnAsync.spawnAsync)("powershell.exe", args, {
          cwd,
          stdio: "inherit"
        });
        if (code !== 0)
          throw new Error(`Failed to install ${channel}`);
      } else {
        const {
          command,
          args,
          elevatedPermissions
        } = await (0, _dependencies.transformCommandsForRoot)([`bash "${_path.default.join(BIN_PATH, scriptName)}" ${scriptArgs.join("")}`]);
        if (elevatedPermissions)
          console.log("Switching to root user to install dependencies...");
        const {
          code
        } = await (0, _spawnAsync.spawnAsync)(command, args, {
          cwd,
          stdio: "inherit"
        });
        if (code !== 0)
          throw new Error(`Failed to install ${channel}`);
      }
    }
    async _validateInstallationCache(linksDir) {
      const usedBrowserPaths = new Set;
      for (const fileName of await fs.promises.readdir(linksDir)) {
        const linkPath = _path.default.join(linksDir, fileName);
        let linkTarget = "";
        try {
          linkTarget = (await fs.promises.readFile(linkPath)).toString();
          const browsersJSON = import.meta.require(_path.default.join(linkTarget, "browsers.json"));
          const descriptors = readDescriptors(browsersJSON);
          for (const browserName of allDownloadable) {
            const descriptor = descriptors.find((d) => d.name === browserName);
            if (!descriptor)
              continue;
            const usedBrowserPath = descriptor.dir;
            const browserRevision = parseInt(descriptor.revision, 10);
            const shouldHaveMarkerFile = browserName === "chromium" && (browserRevision >= 786218 || browserRevision < 300000) || browserName === "firefox" && browserRevision >= 1128 || browserName === "webkit" && browserRevision >= 1307 || browserName !== "firefox" && browserName !== "chromium" && browserName !== "webkit";
            if (!shouldHaveMarkerFile || await (0, _fileUtils.existsAsync)(browserDirectoryToMarkerFilePath(usedBrowserPath)))
              usedBrowserPaths.add(usedBrowserPath);
          }
        } catch (e) {
          await fs.promises.unlink(linkPath).catch((e2) => {
          });
        }
      }
      if (!(0, _utils.getAsBooleanFromENV)("PLAYWRIGHT_SKIP_BROWSER_GC")) {
        let downloadedBrowsers = (await fs.promises.readdir(registryDirectory)).map((file) => _path.default.join(registryDirectory, file));
        downloadedBrowsers = downloadedBrowsers.filter((file) => isBrowserDirectory(file));
        const directories = new Set(downloadedBrowsers);
        for (const browserDirectory of usedBrowserPaths)
          directories.delete(browserDirectory);
        for (const directory of directories)
          (0, _browserFetcher.logPolitely)("Removing unused browser at " + directory);
        await (0, _fileUtils.removeFolders)([...directories]);
      }
    }
  }
  exports.Registry = Registry;
  var registry = exports.registry = new Registry(require_browsers());
});

// node_modules/playwright-core/lib/protocol/validatorPrimitives.js
var require_validatorPrimitives = __commonJS((exports) => {
  var findValidator = function(type, method, kind) {
    const validator = maybeFindValidator(type, method, kind);
    if (!validator)
      throw new ValidationError(`Unknown scheme for ${kind}: ${type}.${method}`);
    return validator;
  };
  var maybeFindValidator = function(type, method, kind) {
    const schemeName = type + (kind === "Initializer" ? "" : method[0].toUpperCase() + method.substring(1)) + kind;
    return scheme[schemeName];
  };
  var createMetadataValidator = function() {
    return tOptional(scheme["Metadata"]);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ValidationError = undefined;
  exports.createMetadataValidator = createMetadataValidator;
  exports.findValidator = findValidator;
  exports.maybeFindValidator = maybeFindValidator;
  exports.tUndefined = exports.tType = exports.tString = exports.tOptional = exports.tObject = exports.tNumber = exports.tEnum = exports.tChannel = exports.tBoolean = exports.tBinary = exports.tArray = exports.tAny = exports.scheme = undefined;
  var _utils = require_utils3();

  class ValidationError extends Error {
  }
  exports.ValidationError = ValidationError;
  var scheme = exports.scheme = {};
  var tNumber = (arg, path, context) => {
    if (arg instanceof Number)
      return arg.valueOf();
    if (typeof arg === "number")
      return arg;
    throw new ValidationError(`${path}: expected number, got ${typeof arg}`);
  };
  exports.tNumber = tNumber;
  var tBoolean = (arg, path, context) => {
    if (arg instanceof Boolean)
      return arg.valueOf();
    if (typeof arg === "boolean")
      return arg;
    throw new ValidationError(`${path}: expected boolean, got ${typeof arg}`);
  };
  exports.tBoolean = tBoolean;
  var tString = (arg, path, context) => {
    if (arg instanceof String)
      return arg.valueOf();
    if (typeof arg === "string")
      return arg;
    throw new ValidationError(`${path}: expected string, got ${typeof arg}`);
  };
  exports.tString = tString;
  var tBinary = (arg, path, context) => {
    if (context.binary === "fromBase64") {
      if (arg instanceof String)
        return Buffer.from(arg.valueOf(), "base64");
      if (typeof arg === "string")
        return Buffer.from(arg, "base64");
      throw new ValidationError(`${path}: expected base64-encoded buffer, got ${typeof arg}`);
    }
    if (context.binary === "toBase64") {
      if (!(arg instanceof Buffer))
        throw new ValidationError(`${path}: expected Buffer, got ${typeof arg}`);
      return arg.toString("base64");
    }
    if (context.binary === "buffer") {
      if (!(arg instanceof Buffer))
        throw new ValidationError(`${path}: expected Buffer, got ${typeof arg}`);
      return arg;
    }
    throw new ValidationError(`Unsupported binary behavior "${context.binary}"`);
  };
  exports.tBinary = tBinary;
  var tUndefined = (arg, path, context) => {
    if (Object.is(arg, undefined))
      return arg;
    throw new ValidationError(`${path}: expected undefined, got ${typeof arg}`);
  };
  exports.tUndefined = tUndefined;
  var tAny = (arg, path, context) => {
    return arg;
  };
  exports.tAny = tAny;
  var tOptional = (v) => {
    return (arg, path, context) => {
      if (Object.is(arg, undefined))
        return arg;
      return v(arg, path, context);
    };
  };
  exports.tOptional = tOptional;
  var tArray = (v) => {
    return (arg, path, context) => {
      if (!Array.isArray(arg))
        throw new ValidationError(`${path}: expected array, got ${typeof arg}`);
      return arg.map((x, index) => v(x, path + "[" + index + "]", context));
    };
  };
  exports.tArray = tArray;
  var tObject = (s) => {
    return (arg, path, context) => {
      if (Object.is(arg, null))
        throw new ValidationError(`${path}: expected object, got null`);
      if (typeof arg !== "object")
        throw new ValidationError(`${path}: expected object, got ${typeof arg}`);
      const result = {};
      for (const [key, v] of Object.entries(s)) {
        const value = v(arg[key], path ? path + "." + key : key, context);
        if (!Object.is(value, undefined))
          result[key] = value;
      }
      if ((0, _utils.isUnderTest)()) {
        for (const [key, value] of Object.entries(arg)) {
          if (key.startsWith("__testHook"))
            result[key] = value;
        }
      }
      return result;
    };
  };
  exports.tObject = tObject;
  var tEnum = (e) => {
    return (arg, path, context) => {
      if (!e.includes(arg))
        throw new ValidationError(`${path}: expected one of (${e.join("|")})`);
      return arg;
    };
  };
  exports.tEnum = tEnum;
  var tChannel = (names) => {
    return (arg, path, context) => {
      return context.tChannelImpl(names, arg, path, context);
    };
  };
  exports.tChannel = tChannel;
  var tType = (name) => {
    return (arg, path, context) => {
      const v = scheme[name];
      if (!v)
        throw new ValidationError(path + ': unknown type "' + name + '"');
      return v(arg, path, context);
    };
  };
  exports.tType = tType;
});

// node_modules/playwright-core/lib/protocol/validator.js
var require_validator = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "ValidationError", {
    enumerable: true,
    get: function() {
      return _validatorPrimitives.ValidationError;
    }
  });
  Object.defineProperty(exports, "createMetadataValidator", {
    enumerable: true,
    get: function() {
      return _validatorPrimitives.createMetadataValidator;
    }
  });
  Object.defineProperty(exports, "findValidator", {
    enumerable: true,
    get: function() {
      return _validatorPrimitives.findValidator;
    }
  });
  Object.defineProperty(exports, "maybeFindValidator", {
    enumerable: true,
    get: function() {
      return _validatorPrimitives.maybeFindValidator;
    }
  });
  var _validatorPrimitives = require_validatorPrimitives();
  _validatorPrimitives.scheme.StackFrame = (0, _validatorPrimitives.tObject)({
    file: _validatorPrimitives.tString,
    line: _validatorPrimitives.tNumber,
    column: _validatorPrimitives.tNumber,
    function: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.Metadata = (0, _validatorPrimitives.tObject)({
    location: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      file: _validatorPrimitives.tString,
      line: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      column: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    })),
    apiName: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    internal: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    wallTime: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.ClientSideCallMetadata = (0, _validatorPrimitives.tObject)({
    id: _validatorPrimitives.tNumber,
    stack: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("StackFrame")))
  });
  _validatorPrimitives.scheme.Point = (0, _validatorPrimitives.tObject)({
    x: _validatorPrimitives.tNumber,
    y: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.Rect = (0, _validatorPrimitives.tObject)({
    x: _validatorPrimitives.tNumber,
    y: _validatorPrimitives.tNumber,
    width: _validatorPrimitives.tNumber,
    height: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.SerializedValue = (0, _validatorPrimitives.tObject)({
    n: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    b: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    s: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    v: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["null", "undefined", "NaN", "Infinity", "-Infinity", "-0"])),
    d: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    u: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    bi: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    r: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      p: _validatorPrimitives.tString,
      f: _validatorPrimitives.tString
    })),
    a: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("SerializedValue"))),
    o: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      k: _validatorPrimitives.tString,
      v: (0, _validatorPrimitives.tType)("SerializedValue")
    }))),
    h: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    id: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    ref: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.SerializedArgument = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue"),
    handles: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)("*"))
  });
  _validatorPrimitives.scheme.ExpectedTextValue = (0, _validatorPrimitives.tObject)({
    string: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    regexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    regexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    matchSubstring: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    ignoreCase: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    normalizeWhiteSpace: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.AXNode = (0, _validatorPrimitives.tObject)({
    role: _validatorPrimitives.tString,
    name: _validatorPrimitives.tString,
    valueString: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    valueNumber: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    description: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    keyshortcuts: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    roledescription: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    valuetext: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    disabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    expanded: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    focused: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modal: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    multiline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    multiselectable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    readonly: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    required: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    selected: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    checked: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["checked", "unchecked", "mixed"])),
    pressed: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["pressed", "released", "mixed"])),
    level: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    valuemin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    valuemax: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    autocomplete: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    haspopup: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    invalid: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    orientation: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    children: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("AXNode")))
  });
  _validatorPrimitives.scheme.SetNetworkCookie = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    value: _validatorPrimitives.tString,
    url: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    domain: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    path: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    expires: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    httpOnly: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    secure: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    sameSite: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["Strict", "Lax", "None"]))
  });
  _validatorPrimitives.scheme.NetworkCookie = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    value: _validatorPrimitives.tString,
    domain: _validatorPrimitives.tString,
    path: _validatorPrimitives.tString,
    expires: _validatorPrimitives.tNumber,
    httpOnly: _validatorPrimitives.tBoolean,
    secure: _validatorPrimitives.tBoolean,
    sameSite: (0, _validatorPrimitives.tEnum)(["Strict", "Lax", "None"])
  });
  _validatorPrimitives.scheme.NameValue = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.OriginStorage = (0, _validatorPrimitives.tObject)({
    origin: _validatorPrimitives.tString,
    localStorage: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
  });
  _validatorPrimitives.scheme.SerializedError = (0, _validatorPrimitives.tObject)({
    error: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      message: _validatorPrimitives.tString,
      name: _validatorPrimitives.tString,
      stack: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    value: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("SerializedValue"))
  });
  _validatorPrimitives.scheme.RecordHarOptions = (0, _validatorPrimitives.tObject)({
    path: _validatorPrimitives.tString,
    content: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["embed", "attach", "omit"])),
    mode: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["full", "minimal"])),
    urlGlob: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    urlRegexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    urlRegexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FormField = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    file: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      mimeType: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      buffer: _validatorPrimitives.tBinary
    }))
  });
  _validatorPrimitives.scheme.APIRequestContextInitializer = (0, _validatorPrimitives.tObject)({
    tracing: (0, _validatorPrimitives.tChannel)(["Tracing"])
  });
  _validatorPrimitives.scheme.APIRequestContextFetchParams = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString,
    params: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    method: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    headers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    postData: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    jsonData: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    formData: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    multipartData: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("FormField"))),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    failOnStatusCode: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    maxRedirects: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.APIRequestContextFetchResult = (0, _validatorPrimitives.tObject)({
    response: (0, _validatorPrimitives.tType)("APIResponse")
  });
  _validatorPrimitives.scheme.APIRequestContextFetchResponseBodyParams = (0, _validatorPrimitives.tObject)({
    fetchUid: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.APIRequestContextFetchResponseBodyResult = (0, _validatorPrimitives.tObject)({
    binary: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary)
  });
  _validatorPrimitives.scheme.APIRequestContextFetchLogParams = (0, _validatorPrimitives.tObject)({
    fetchUid: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.APIRequestContextFetchLogResult = (0, _validatorPrimitives.tObject)({
    log: (0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.APIRequestContextStorageStateParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.APIRequestContextStorageStateResult = (0, _validatorPrimitives.tObject)({
    cookies: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NetworkCookie")),
    origins: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("OriginStorage"))
  });
  _validatorPrimitives.scheme.APIRequestContextDisposeAPIResponseParams = (0, _validatorPrimitives.tObject)({
    fetchUid: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.APIRequestContextDisposeAPIResponseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.APIRequestContextDisposeParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.APIRequestContextDisposeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.APIResponse = (0, _validatorPrimitives.tObject)({
    fetchUid: _validatorPrimitives.tString,
    url: _validatorPrimitives.tString,
    status: _validatorPrimitives.tNumber,
    statusText: _validatorPrimitives.tString,
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
  });
  _validatorPrimitives.scheme.LifecycleEvent = (0, _validatorPrimitives.tEnum)(["load", "domcontentloaded", "networkidle", "commit"]);
  _validatorPrimitives.scheme.LocalUtilsInitializer = (0, _validatorPrimitives.tObject)({
    deviceDescriptors: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      descriptor: (0, _validatorPrimitives.tObject)({
        userAgent: _validatorPrimitives.tString,
        viewport: (0, _validatorPrimitives.tObject)({
          width: _validatorPrimitives.tNumber,
          height: _validatorPrimitives.tNumber
        }),
        screen: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
          width: _validatorPrimitives.tNumber,
          height: _validatorPrimitives.tNumber
        })),
        deviceScaleFactor: _validatorPrimitives.tNumber,
        isMobile: _validatorPrimitives.tBoolean,
        hasTouch: _validatorPrimitives.tBoolean,
        defaultBrowserType: (0, _validatorPrimitives.tEnum)(["chromium", "firefox", "webkit"])
      })
    }))
  });
  _validatorPrimitives.scheme.LocalUtilsZipParams = (0, _validatorPrimitives.tObject)({
    zipFile: _validatorPrimitives.tString,
    entries: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue")),
    stacksId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    mode: (0, _validatorPrimitives.tEnum)(["write", "append"]),
    includeSources: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.LocalUtilsZipResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.LocalUtilsHarOpenParams = (0, _validatorPrimitives.tObject)({
    file: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.LocalUtilsHarOpenResult = (0, _validatorPrimitives.tObject)({
    harId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    error: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.LocalUtilsHarLookupParams = (0, _validatorPrimitives.tObject)({
    harId: _validatorPrimitives.tString,
    url: _validatorPrimitives.tString,
    method: _validatorPrimitives.tString,
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue")),
    postData: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    isNavigationRequest: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.LocalUtilsHarLookupResult = (0, _validatorPrimitives.tObject)({
    action: (0, _validatorPrimitives.tEnum)(["error", "redirect", "fulfill", "noentry"]),
    message: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    redirectURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    status: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    headers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    body: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary)
  });
  _validatorPrimitives.scheme.LocalUtilsHarCloseParams = (0, _validatorPrimitives.tObject)({
    harId: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.LocalUtilsHarCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.LocalUtilsHarUnzipParams = (0, _validatorPrimitives.tObject)({
    zipFile: _validatorPrimitives.tString,
    harFile: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.LocalUtilsHarUnzipResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.LocalUtilsConnectParams = (0, _validatorPrimitives.tObject)({
    wsEndpoint: _validatorPrimitives.tString,
    headers: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
    exposeNetwork: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    slowMo: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    socksProxyRedirectPortForTest: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.LocalUtilsConnectResult = (0, _validatorPrimitives.tObject)({
    pipe: (0, _validatorPrimitives.tChannel)(["JsonPipe"]),
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
  });
  _validatorPrimitives.scheme.LocalUtilsTracingStartedParams = (0, _validatorPrimitives.tObject)({
    tracesDir: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    traceName: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.LocalUtilsTracingStartedResult = (0, _validatorPrimitives.tObject)({
    stacksId: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.LocalUtilsAddStackToTracingNoReplyParams = (0, _validatorPrimitives.tObject)({
    callData: (0, _validatorPrimitives.tType)("ClientSideCallMetadata")
  });
  _validatorPrimitives.scheme.LocalUtilsAddStackToTracingNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.LocalUtilsTraceDiscardedParams = (0, _validatorPrimitives.tObject)({
    stacksId: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.LocalUtilsTraceDiscardedResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.RootInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.RootInitializeParams = (0, _validatorPrimitives.tObject)({
    sdkLanguage: (0, _validatorPrimitives.tEnum)(["javascript", "python", "java", "csharp"])
  });
  _validatorPrimitives.scheme.RootInitializeResult = (0, _validatorPrimitives.tObject)({
    playwright: (0, _validatorPrimitives.tChannel)(["Playwright"])
  });
  _validatorPrimitives.scheme.PlaywrightInitializer = (0, _validatorPrimitives.tObject)({
    chromium: (0, _validatorPrimitives.tChannel)(["BrowserType"]),
    firefox: (0, _validatorPrimitives.tChannel)(["BrowserType"]),
    webkit: (0, _validatorPrimitives.tChannel)(["BrowserType"]),
    android: (0, _validatorPrimitives.tChannel)(["Android"]),
    electron: (0, _validatorPrimitives.tChannel)(["Electron"]),
    utils: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["LocalUtils"])),
    selectors: (0, _validatorPrimitives.tChannel)(["Selectors"]),
    preLaunchedBrowser: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Browser"])),
    preConnectedAndroidDevice: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["AndroidDevice"])),
    socksSupport: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["SocksSupport"]))
  });
  _validatorPrimitives.scheme.PlaywrightNewRequestParams = (0, _validatorPrimitives.tObject)({
    baseURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    userAgent: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      username: _validatorPrimitives.tString,
      password: _validatorPrimitives.tString,
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      server: _validatorPrimitives.tString,
      bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    storageState: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      cookies: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NetworkCookie"))),
      origins: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("OriginStorage")))
    })),
    tracesDir: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.PlaywrightNewRequestResult = (0, _validatorPrimitives.tObject)({
    request: (0, _validatorPrimitives.tChannel)(["APIRequestContext"])
  });
  _validatorPrimitives.scheme.RecorderSource = (0, _validatorPrimitives.tObject)({
    isRecorded: _validatorPrimitives.tBoolean,
    id: _validatorPrimitives.tString,
    label: _validatorPrimitives.tString,
    text: _validatorPrimitives.tString,
    language: _validatorPrimitives.tString,
    highlight: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      line: _validatorPrimitives.tNumber,
      type: _validatorPrimitives.tString
    })),
    revealLine: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    group: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.DebugControllerInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerInspectRequestedEvent = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    locator: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.DebugControllerSetModeRequestedEvent = (0, _validatorPrimitives.tObject)({
    mode: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.DebugControllerStateChangedEvent = (0, _validatorPrimitives.tObject)({
    pageCount: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.DebugControllerSourceChangedEvent = (0, _validatorPrimitives.tObject)({
    text: _validatorPrimitives.tString,
    header: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    footer: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    actions: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString))
  });
  _validatorPrimitives.scheme.DebugControllerPausedEvent = (0, _validatorPrimitives.tObject)({
    paused: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.DebugControllerInitializeParams = (0, _validatorPrimitives.tObject)({
    codegenId: _validatorPrimitives.tString,
    sdkLanguage: (0, _validatorPrimitives.tEnum)(["javascript", "python", "java", "csharp"])
  });
  _validatorPrimitives.scheme.DebugControllerInitializeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerSetReportStateChangedParams = (0, _validatorPrimitives.tObject)({
    enabled: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.DebugControllerSetReportStateChangedResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerResetForReuseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerResetForReuseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerNavigateParams = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.DebugControllerNavigateResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerSetRecorderModeParams = (0, _validatorPrimitives.tObject)({
    mode: (0, _validatorPrimitives.tEnum)(["inspecting", "recording", "none"]),
    testIdAttributeName: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.DebugControllerSetRecorderModeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerHighlightParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.DebugControllerHighlightResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerHideHighlightParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerHideHighlightResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerResumeParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerResumeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerKillParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerKillResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerCloseAllBrowsersParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerCloseAllBrowsersResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SocksSupportInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SocksSupportSocksRequestedEvent = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString,
    host: _validatorPrimitives.tString,
    port: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.SocksSupportSocksDataEvent = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString,
    data: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.SocksSupportSocksClosedEvent = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.SocksSupportSocksConnectedParams = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString,
    host: _validatorPrimitives.tString,
    port: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.SocksSupportSocksConnectedResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SocksSupportSocksFailedParams = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString,
    errorCode: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.SocksSupportSocksFailedResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SocksSupportSocksDataParams = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString,
    data: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.SocksSupportSocksDataResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SocksSupportSocksErrorParams = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString,
    error: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.SocksSupportSocksErrorResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SocksSupportSocksEndParams = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.SocksSupportSocksEndResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SelectorsInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SelectorsRegisterParams = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    source: _validatorPrimitives.tString,
    contentScript: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.SelectorsRegisterResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SelectorsSetTestIdAttributeNameParams = (0, _validatorPrimitives.tObject)({
    testIdAttributeName: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.SelectorsSetTestIdAttributeNameResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserTypeInitializer = (0, _validatorPrimitives.tObject)({
    executablePath: _validatorPrimitives.tString,
    name: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.BrowserTypeLaunchParams = (0, _validatorPrimitives.tObject)({
    channel: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    executablePath: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    ignoreAllDefaultArgs: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    ignoreDefaultArgs: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    handleSIGINT: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    handleSIGTERM: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    handleSIGHUP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    env: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    headless: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    devtools: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      server: _validatorPrimitives.tString,
      bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    downloadsPath: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    tracesDir: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    chromiumSandbox: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    firefoxUserPrefs: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
    slowMo: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.BrowserTypeLaunchResult = (0, _validatorPrimitives.tObject)({
    browser: (0, _validatorPrimitives.tChannel)(["Browser"])
  });
  _validatorPrimitives.scheme.BrowserTypeLaunchPersistentContextParams = (0, _validatorPrimitives.tObject)({
    channel: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    executablePath: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    ignoreAllDefaultArgs: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    ignoreDefaultArgs: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    handleSIGINT: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    handleSIGTERM: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    handleSIGHUP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    env: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    headless: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    devtools: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      server: _validatorPrimitives.tString,
      bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    downloadsPath: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    tracesDir: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    chromiumSandbox: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    firefoxUserPrefs: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
    noDefaultViewport: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    viewport: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    screen: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    javaScriptEnabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    bypassCSP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    userAgent: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    locale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    timezoneId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      longitude: _validatorPrimitives.tNumber,
      latitude: _validatorPrimitives.tNumber,
      accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    })),
    permissions: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    offline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      username: _validatorPrimitives.tString,
      password: _validatorPrimitives.tString,
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    deviceScaleFactor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    isMobile: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    hasTouch: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
    reducedMotion: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
    forcedColors: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["active", "none", "no-override"])),
    acceptDownloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
    baseURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    recordVideo: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      dir: _validatorPrimitives.tString,
      size: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      }))
    })),
    recordHar: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RecordHarOptions")),
    strictSelectors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    serviceWorkers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["allow", "block"])),
    userDataDir: _validatorPrimitives.tString,
    slowMo: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.BrowserTypeLaunchPersistentContextResult = (0, _validatorPrimitives.tObject)({
    context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
  });
  _validatorPrimitives.scheme.BrowserTypeConnectOverCDPParams = (0, _validatorPrimitives.tObject)({
    endpointURL: _validatorPrimitives.tString,
    headers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    slowMo: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.BrowserTypeConnectOverCDPResult = (0, _validatorPrimitives.tObject)({
    browser: (0, _validatorPrimitives.tChannel)(["Browser"]),
    defaultContext: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["BrowserContext"]))
  });
  _validatorPrimitives.scheme.BrowserInitializer = (0, _validatorPrimitives.tObject)({
    version: _validatorPrimitives.tString,
    name: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.BrowserCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserCloseParams = (0, _validatorPrimitives.tObject)({
    reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserKillForTestsParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserKillForTestsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserDefaultUserAgentForTestParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserDefaultUserAgentForTestResult = (0, _validatorPrimitives.tObject)({
    userAgent: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.BrowserNewContextParams = (0, _validatorPrimitives.tObject)({
    noDefaultViewport: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    viewport: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    screen: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    javaScriptEnabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    bypassCSP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    userAgent: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    locale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    timezoneId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      longitude: _validatorPrimitives.tNumber,
      latitude: _validatorPrimitives.tNumber,
      accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    })),
    permissions: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    offline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      username: _validatorPrimitives.tString,
      password: _validatorPrimitives.tString,
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    deviceScaleFactor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    isMobile: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    hasTouch: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
    reducedMotion: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
    forcedColors: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["active", "none", "no-override"])),
    acceptDownloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
    baseURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    recordVideo: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      dir: _validatorPrimitives.tString,
      size: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      }))
    })),
    recordHar: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RecordHarOptions")),
    strictSelectors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    serviceWorkers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["allow", "block"])),
    proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      server: _validatorPrimitives.tString,
      bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    storageState: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      cookies: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("SetNetworkCookie"))),
      origins: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("OriginStorage")))
    }))
  });
  _validatorPrimitives.scheme.BrowserNewContextResult = (0, _validatorPrimitives.tObject)({
    context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
  });
  _validatorPrimitives.scheme.BrowserNewContextForReuseParams = (0, _validatorPrimitives.tObject)({
    noDefaultViewport: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    viewport: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    screen: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    javaScriptEnabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    bypassCSP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    userAgent: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    locale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    timezoneId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      longitude: _validatorPrimitives.tNumber,
      latitude: _validatorPrimitives.tNumber,
      accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    })),
    permissions: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    offline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      username: _validatorPrimitives.tString,
      password: _validatorPrimitives.tString,
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    deviceScaleFactor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    isMobile: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    hasTouch: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
    reducedMotion: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
    forcedColors: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["active", "none", "no-override"])),
    acceptDownloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
    baseURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    recordVideo: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      dir: _validatorPrimitives.tString,
      size: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      }))
    })),
    recordHar: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RecordHarOptions")),
    strictSelectors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    serviceWorkers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["allow", "block"])),
    proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      server: _validatorPrimitives.tString,
      bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    storageState: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      cookies: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("SetNetworkCookie"))),
      origins: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("OriginStorage")))
    }))
  });
  _validatorPrimitives.scheme.BrowserNewContextForReuseResult = (0, _validatorPrimitives.tObject)({
    context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
  });
  _validatorPrimitives.scheme.BrowserStopPendingOperationsParams = (0, _validatorPrimitives.tObject)({
    reason: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.BrowserStopPendingOperationsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserNewBrowserCDPSessionParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserNewBrowserCDPSessionResult = (0, _validatorPrimitives.tObject)({
    session: (0, _validatorPrimitives.tChannel)(["CDPSession"])
  });
  _validatorPrimitives.scheme.BrowserStartTracingParams = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"])),
    screenshots: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    categories: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString))
  });
  _validatorPrimitives.scheme.BrowserStartTracingResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserStopTracingParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserStopTracingResult = (0, _validatorPrimitives.tObject)({
    artifact: (0, _validatorPrimitives.tChannel)(["Artifact"])
  });
  _validatorPrimitives.scheme.EventTargetInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.EventTargetWaitForEventInfoParams = (0, _validatorPrimitives.tObject)({
    info: (0, _validatorPrimitives.tObject)({
      waitId: _validatorPrimitives.tString,
      phase: (0, _validatorPrimitives.tEnum)(["before", "after", "log"]),
      event: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      message: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      error: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })
  });
  _validatorPrimitives.scheme.BrowserContextWaitForEventInfoParams = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
  _validatorPrimitives.scheme.PageWaitForEventInfoParams = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
  _validatorPrimitives.scheme.WebSocketWaitForEventInfoParams = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
  _validatorPrimitives.scheme.ElectronApplicationWaitForEventInfoParams = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
  _validatorPrimitives.scheme.AndroidDeviceWaitForEventInfoParams = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
  _validatorPrimitives.scheme.EventTargetWaitForEventInfoResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextWaitForEventInfoResult = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
  _validatorPrimitives.scheme.PageWaitForEventInfoResult = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
  _validatorPrimitives.scheme.WebSocketWaitForEventInfoResult = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
  _validatorPrimitives.scheme.ElectronApplicationWaitForEventInfoResult = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
  _validatorPrimitives.scheme.AndroidDeviceWaitForEventInfoResult = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
  _validatorPrimitives.scheme.BrowserContextInitializer = (0, _validatorPrimitives.tObject)({
    isChromium: _validatorPrimitives.tBoolean,
    requestContext: (0, _validatorPrimitives.tChannel)(["APIRequestContext"]),
    tracing: (0, _validatorPrimitives.tChannel)(["Tracing"])
  });
  _validatorPrimitives.scheme.BrowserContextBindingCallEvent = (0, _validatorPrimitives.tObject)({
    binding: (0, _validatorPrimitives.tChannel)(["BindingCall"])
  });
  _validatorPrimitives.scheme.BrowserContextConsoleEvent = (0, _validatorPrimitives.tObject)({
    type: _validatorPrimitives.tString,
    text: _validatorPrimitives.tString,
    args: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])),
    location: (0, _validatorPrimitives.tObject)({
      url: _validatorPrimitives.tString,
      lineNumber: _validatorPrimitives.tNumber,
      columnNumber: _validatorPrimitives.tNumber
    }),
    page: (0, _validatorPrimitives.tChannel)(["Page"])
  });
  _validatorPrimitives.scheme.BrowserContextCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextDialogEvent = (0, _validatorPrimitives.tObject)({
    dialog: (0, _validatorPrimitives.tChannel)(["Dialog"])
  });
  _validatorPrimitives.scheme.BrowserContextPageEvent = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tChannel)(["Page"])
  });
  _validatorPrimitives.scheme.BrowserContextPageErrorEvent = (0, _validatorPrimitives.tObject)({
    error: (0, _validatorPrimitives.tType)("SerializedError"),
    page: (0, _validatorPrimitives.tChannel)(["Page"])
  });
  _validatorPrimitives.scheme.BrowserContextRouteEvent = (0, _validatorPrimitives.tObject)({
    route: (0, _validatorPrimitives.tChannel)(["Route"])
  });
  _validatorPrimitives.scheme.BrowserContextVideoEvent = (0, _validatorPrimitives.tObject)({
    artifact: (0, _validatorPrimitives.tChannel)(["Artifact"])
  });
  _validatorPrimitives.scheme.BrowserContextBackgroundPageEvent = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tChannel)(["Page"])
  });
  _validatorPrimitives.scheme.BrowserContextServiceWorkerEvent = (0, _validatorPrimitives.tObject)({
    worker: (0, _validatorPrimitives.tChannel)(["Worker"])
  });
  _validatorPrimitives.scheme.BrowserContextRequestEvent = (0, _validatorPrimitives.tObject)({
    request: (0, _validatorPrimitives.tChannel)(["Request"]),
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"]))
  });
  _validatorPrimitives.scheme.BrowserContextRequestFailedEvent = (0, _validatorPrimitives.tObject)({
    request: (0, _validatorPrimitives.tChannel)(["Request"]),
    failureText: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    responseEndTiming: _validatorPrimitives.tNumber,
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"]))
  });
  _validatorPrimitives.scheme.BrowserContextRequestFinishedEvent = (0, _validatorPrimitives.tObject)({
    request: (0, _validatorPrimitives.tChannel)(["Request"]),
    response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"])),
    responseEndTiming: _validatorPrimitives.tNumber,
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"]))
  });
  _validatorPrimitives.scheme.BrowserContextResponseEvent = (0, _validatorPrimitives.tObject)({
    response: (0, _validatorPrimitives.tChannel)(["Response"]),
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"]))
  });
  _validatorPrimitives.scheme.BrowserContextAddCookiesParams = (0, _validatorPrimitives.tObject)({
    cookies: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("SetNetworkCookie"))
  });
  _validatorPrimitives.scheme.BrowserContextAddCookiesResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextAddInitScriptParams = (0, _validatorPrimitives.tObject)({
    source: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.BrowserContextAddInitScriptResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClearCookiesParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClearCookiesResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClearPermissionsParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClearPermissionsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextCloseParams = (0, _validatorPrimitives.tObject)({
    reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextCookiesParams = (0, _validatorPrimitives.tObject)({
    urls: (0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextCookiesResult = (0, _validatorPrimitives.tObject)({
    cookies: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NetworkCookie"))
  });
  _validatorPrimitives.scheme.BrowserContextExposeBindingParams = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    needsHandle: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.BrowserContextExposeBindingResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextGrantPermissionsParams = (0, _validatorPrimitives.tObject)({
    permissions: (0, _validatorPrimitives.tArray)(_validatorPrimitives.tString),
    origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextGrantPermissionsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextNewPageParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextNewPageResult = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tChannel)(["Page"])
  });
  _validatorPrimitives.scheme.BrowserContextSetDefaultNavigationTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.BrowserContextSetDefaultNavigationTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextSetDefaultTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.BrowserContextSetDefaultTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextSetExtraHTTPHeadersParams = (0, _validatorPrimitives.tObject)({
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
  });
  _validatorPrimitives.scheme.BrowserContextSetExtraHTTPHeadersResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextSetGeolocationParams = (0, _validatorPrimitives.tObject)({
    geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      longitude: _validatorPrimitives.tNumber,
      latitude: _validatorPrimitives.tNumber,
      accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    }))
  });
  _validatorPrimitives.scheme.BrowserContextSetGeolocationResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextSetHTTPCredentialsParams = (0, _validatorPrimitives.tObject)({
    httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      username: _validatorPrimitives.tString,
      password: _validatorPrimitives.tString,
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    }))
  });
  _validatorPrimitives.scheme.BrowserContextSetHTTPCredentialsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextSetNetworkInterceptionPatternsParams = (0, _validatorPrimitives.tObject)({
    patterns: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      glob: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      regexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      regexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    }))
  });
  _validatorPrimitives.scheme.BrowserContextSetNetworkInterceptionPatternsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextSetOfflineParams = (0, _validatorPrimitives.tObject)({
    offline: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.BrowserContextSetOfflineResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextStorageStateParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextStorageStateResult = (0, _validatorPrimitives.tObject)({
    cookies: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NetworkCookie")),
    origins: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("OriginStorage"))
  });
  _validatorPrimitives.scheme.BrowserContextPauseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextPauseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextRecorderSupplementEnableParams = (0, _validatorPrimitives.tObject)({
    language: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    mode: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["inspecting", "recording"])),
    pauseOnNextStatement: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    testIdAttributeName: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    launchOptions: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
    contextOptions: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
    device: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    saveStorage: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    outputFile: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    handleSIGINT: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    omitCallTracking: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.BrowserContextRecorderSupplementEnableResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextNewCDPSessionParams = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"])),
    frame: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Frame"]))
  });
  _validatorPrimitives.scheme.BrowserContextNewCDPSessionResult = (0, _validatorPrimitives.tObject)({
    session: (0, _validatorPrimitives.tChannel)(["CDPSession"])
  });
  _validatorPrimitives.scheme.BrowserContextHarStartParams = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"])),
    options: (0, _validatorPrimitives.tType)("RecordHarOptions")
  });
  _validatorPrimitives.scheme.BrowserContextHarStartResult = (0, _validatorPrimitives.tObject)({
    harId: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.BrowserContextHarExportParams = (0, _validatorPrimitives.tObject)({
    harId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextHarExportResult = (0, _validatorPrimitives.tObject)({
    artifact: (0, _validatorPrimitives.tChannel)(["Artifact"])
  });
  _validatorPrimitives.scheme.BrowserContextCreateTempFileParams = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    lastModifiedMs: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.BrowserContextCreateTempFileResult = (0, _validatorPrimitives.tObject)({
    writableStream: (0, _validatorPrimitives.tChannel)(["WritableStream"])
  });
  _validatorPrimitives.scheme.BrowserContextUpdateSubscriptionParams = (0, _validatorPrimitives.tObject)({
    event: (0, _validatorPrimitives.tEnum)(["console", "dialog", "request", "response", "requestFinished", "requestFailed"]),
    enabled: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.BrowserContextUpdateSubscriptionResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageInitializer = (0, _validatorPrimitives.tObject)({
    mainFrame: (0, _validatorPrimitives.tChannel)(["Frame"]),
    viewportSize: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    isClosed: _validatorPrimitives.tBoolean,
    opener: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"]))
  });
  _validatorPrimitives.scheme.PageBindingCallEvent = (0, _validatorPrimitives.tObject)({
    binding: (0, _validatorPrimitives.tChannel)(["BindingCall"])
  });
  _validatorPrimitives.scheme.PageCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageCrashEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageDownloadEvent = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString,
    suggestedFilename: _validatorPrimitives.tString,
    artifact: (0, _validatorPrimitives.tChannel)(["Artifact"])
  });
  _validatorPrimitives.scheme.PageFileChooserEvent = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tChannel)(["ElementHandle"]),
    isMultiple: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.PageFrameAttachedEvent = (0, _validatorPrimitives.tObject)({
    frame: (0, _validatorPrimitives.tChannel)(["Frame"])
  });
  _validatorPrimitives.scheme.PageFrameDetachedEvent = (0, _validatorPrimitives.tObject)({
    frame: (0, _validatorPrimitives.tChannel)(["Frame"])
  });
  _validatorPrimitives.scheme.PageLocatorHandlerTriggeredEvent = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.PageRouteEvent = (0, _validatorPrimitives.tObject)({
    route: (0, _validatorPrimitives.tChannel)(["Route"])
  });
  _validatorPrimitives.scheme.PageVideoEvent = (0, _validatorPrimitives.tObject)({
    artifact: (0, _validatorPrimitives.tChannel)(["Artifact"])
  });
  _validatorPrimitives.scheme.PageWebSocketEvent = (0, _validatorPrimitives.tObject)({
    webSocket: (0, _validatorPrimitives.tChannel)(["WebSocket"])
  });
  _validatorPrimitives.scheme.PageWorkerEvent = (0, _validatorPrimitives.tObject)({
    worker: (0, _validatorPrimitives.tChannel)(["Worker"])
  });
  _validatorPrimitives.scheme.PageSetDefaultNavigationTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageSetDefaultNavigationTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageSetDefaultTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageSetDefaultTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageAddInitScriptParams = (0, _validatorPrimitives.tObject)({
    source: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.PageAddInitScriptResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageCloseParams = (0, _validatorPrimitives.tObject)({
    runBeforeUnload: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.PageCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageEmulateMediaParams = (0, _validatorPrimitives.tObject)({
    media: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["screen", "print", "no-override"])),
    colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
    reducedMotion: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
    forcedColors: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["active", "none", "no-override"]))
  });
  _validatorPrimitives.scheme.PageEmulateMediaResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageExposeBindingParams = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    needsHandle: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.PageExposeBindingResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageGoBackParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    waitUntil: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent"))
  });
  _validatorPrimitives.scheme.PageGoBackResult = (0, _validatorPrimitives.tObject)({
    response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"]))
  });
  _validatorPrimitives.scheme.PageGoForwardParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    waitUntil: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent"))
  });
  _validatorPrimitives.scheme.PageGoForwardResult = (0, _validatorPrimitives.tObject)({
    response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"]))
  });
  _validatorPrimitives.scheme.PageRegisterLocatorHandlerParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.PageRegisterLocatorHandlerResult = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.PageResolveLocatorHandlerNoReplyParams = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.PageResolveLocatorHandlerNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageReloadParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    waitUntil: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent"))
  });
  _validatorPrimitives.scheme.PageReloadResult = (0, _validatorPrimitives.tObject)({
    response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"]))
  });
  _validatorPrimitives.scheme.PageExpectScreenshotParams = (0, _validatorPrimitives.tObject)({
    expected: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    isNot: _validatorPrimitives.tBoolean,
    locator: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      frame: (0, _validatorPrimitives.tChannel)(["Frame"]),
      selector: _validatorPrimitives.tString
    })),
    comparator: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    maxDiffPixels: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    maxDiffPixelRatio: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    threshold: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    fullPage: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    clip: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Rect")),
    omitBackground: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    caret: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["hide", "initial"])),
    animations: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["disabled", "allow"])),
    scale: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["css", "device"])),
    mask: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      frame: (0, _validatorPrimitives.tChannel)(["Frame"]),
      selector: _validatorPrimitives.tString
    }))),
    maskColor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    style: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.PageExpectScreenshotResult = (0, _validatorPrimitives.tObject)({
    diff: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    errorMessage: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    actual: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    previous: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    log: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString))
  });
  _validatorPrimitives.scheme.PageScreenshotParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    type: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["png", "jpeg"])),
    quality: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    fullPage: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    clip: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Rect")),
    omitBackground: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    caret: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["hide", "initial"])),
    animations: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["disabled", "allow"])),
    scale: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["css", "device"])),
    mask: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      frame: (0, _validatorPrimitives.tChannel)(["Frame"]),
      selector: _validatorPrimitives.tString
    }))),
    maskColor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    style: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.PageScreenshotResult = (0, _validatorPrimitives.tObject)({
    binary: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.PageSetExtraHTTPHeadersParams = (0, _validatorPrimitives.tObject)({
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
  });
  _validatorPrimitives.scheme.PageSetExtraHTTPHeadersResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageSetNetworkInterceptionPatternsParams = (0, _validatorPrimitives.tObject)({
    patterns: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      glob: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      regexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      regexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    }))
  });
  _validatorPrimitives.scheme.PageSetNetworkInterceptionPatternsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageSetViewportSizeParams = (0, _validatorPrimitives.tObject)({
    viewportSize: (0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })
  });
  _validatorPrimitives.scheme.PageSetViewportSizeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageKeyboardDownParams = (0, _validatorPrimitives.tObject)({
    key: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.PageKeyboardDownResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageKeyboardUpParams = (0, _validatorPrimitives.tObject)({
    key: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.PageKeyboardUpResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageKeyboardInsertTextParams = (0, _validatorPrimitives.tObject)({
    text: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.PageKeyboardInsertTextResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageKeyboardTypeParams = (0, _validatorPrimitives.tObject)({
    text: _validatorPrimitives.tString,
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageKeyboardTypeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageKeyboardPressParams = (0, _validatorPrimitives.tObject)({
    key: _validatorPrimitives.tString,
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageKeyboardPressResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageMouseMoveParams = (0, _validatorPrimitives.tObject)({
    x: _validatorPrimitives.tNumber,
    y: _validatorPrimitives.tNumber,
    steps: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageMouseMoveResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageMouseDownParams = (0, _validatorPrimitives.tObject)({
    button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
    clickCount: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageMouseDownResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageMouseUpParams = (0, _validatorPrimitives.tObject)({
    button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
    clickCount: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageMouseUpResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageMouseClickParams = (0, _validatorPrimitives.tObject)({
    x: _validatorPrimitives.tNumber,
    y: _validatorPrimitives.tNumber,
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
    clickCount: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageMouseClickResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageMouseWheelParams = (0, _validatorPrimitives.tObject)({
    deltaX: _validatorPrimitives.tNumber,
    deltaY: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.PageMouseWheelResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageTouchscreenTapParams = (0, _validatorPrimitives.tObject)({
    x: _validatorPrimitives.tNumber,
    y: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.PageTouchscreenTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageAccessibilitySnapshotParams = (0, _validatorPrimitives.tObject)({
    interestingOnly: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    root: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
  });
  _validatorPrimitives.scheme.PageAccessibilitySnapshotResult = (0, _validatorPrimitives.tObject)({
    rootAXNode: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("AXNode"))
  });
  _validatorPrimitives.scheme.PagePdfParams = (0, _validatorPrimitives.tObject)({
    scale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    displayHeaderFooter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    headerTemplate: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    footerTemplate: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    printBackground: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    landscape: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    pageRanges: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    format: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    width: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    height: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    preferCSSPageSize: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    margin: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      top: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      bottom: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      left: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      right: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    tagged: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    outline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.PagePdfResult = (0, _validatorPrimitives.tObject)({
    pdf: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.PageStartJSCoverageParams = (0, _validatorPrimitives.tObject)({
    resetOnNavigation: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    reportAnonymousScripts: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.PageStartJSCoverageResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageStopJSCoverageParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageStopJSCoverageResult = (0, _validatorPrimitives.tObject)({
    entries: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      url: _validatorPrimitives.tString,
      scriptId: _validatorPrimitives.tString,
      source: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      functions: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        functionName: _validatorPrimitives.tString,
        isBlockCoverage: _validatorPrimitives.tBoolean,
        ranges: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
          startOffset: _validatorPrimitives.tNumber,
          endOffset: _validatorPrimitives.tNumber,
          count: _validatorPrimitives.tNumber
        }))
      }))
    }))
  });
  _validatorPrimitives.scheme.PageStartCSSCoverageParams = (0, _validatorPrimitives.tObject)({
    resetOnNavigation: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.PageStartCSSCoverageResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageStopCSSCoverageParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageStopCSSCoverageResult = (0, _validatorPrimitives.tObject)({
    entries: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      url: _validatorPrimitives.tString,
      text: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      ranges: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        start: _validatorPrimitives.tNumber,
        end: _validatorPrimitives.tNumber
      }))
    }))
  });
  _validatorPrimitives.scheme.PageBringToFrontParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageBringToFrontResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageUpdateSubscriptionParams = (0, _validatorPrimitives.tObject)({
    event: (0, _validatorPrimitives.tEnum)(["console", "dialog", "fileChooser", "request", "response", "requestFinished", "requestFailed"]),
    enabled: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.PageUpdateSubscriptionResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameInitializer = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString,
    name: _validatorPrimitives.tString,
    parentFrame: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Frame"])),
    loadStates: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("LifecycleEvent"))
  });
  _validatorPrimitives.scheme.FrameLoadstateEvent = (0, _validatorPrimitives.tObject)({
    add: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent")),
    remove: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent"))
  });
  _validatorPrimitives.scheme.FrameNavigatedEvent = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString,
    name: _validatorPrimitives.tString,
    newDocument: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      request: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Request"]))
    })),
    error: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FrameEvalOnSelectorParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.FrameEvalOnSelectorResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.FrameEvalOnSelectorAllParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.FrameEvalOnSelectorAllResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.FrameAddScriptTagParams = (0, _validatorPrimitives.tObject)({
    url: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    content: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    type: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FrameAddScriptTagResult = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tChannel)(["ElementHandle"])
  });
  _validatorPrimitives.scheme.FrameAddStyleTagParams = (0, _validatorPrimitives.tObject)({
    url: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    content: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FrameAddStyleTagResult = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tChannel)(["ElementHandle"])
  });
  _validatorPrimitives.scheme.FrameBlurParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameBlurResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameCheckParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameCheckResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameClickParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
    clickCount: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameClickResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameContentParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameContentResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameDragAndDropParams = (0, _validatorPrimitives.tObject)({
    source: _validatorPrimitives.tString,
    target: _validatorPrimitives.tString,
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    sourcePosition: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    targetPosition: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameDragAndDropResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameDblclickParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameDblclickResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameDispatchEventParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    type: _validatorPrimitives.tString,
    eventInit: (0, _validatorPrimitives.tType)("SerializedArgument"),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameDispatchEventResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameEvaluateExpressionParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    exposeUtilityScript: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.FrameEvaluateExpressionResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.FrameEvaluateExpressionHandleParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.FrameEvaluateExpressionHandleResult = (0, _validatorPrimitives.tObject)({
    handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
  });
  _validatorPrimitives.scheme.FrameFillParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    value: _validatorPrimitives.tString,
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameFillResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameFocusParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameFocusResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameFrameElementParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameFrameElementResult = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tChannel)(["ElementHandle"])
  });
  _validatorPrimitives.scheme.FrameHighlightParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameHighlightResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameGetAttributeParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    name: _validatorPrimitives.tString,
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameGetAttributeResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FrameGotoParams = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString,
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    waitUntil: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent")),
    referer: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FrameGotoResult = (0, _validatorPrimitives.tObject)({
    response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"]))
  });
  _validatorPrimitives.scheme.FrameHoverParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameHoverResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameInnerHTMLParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameInnerHTMLResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameInnerTextParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameInnerTextResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameInputValueParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameInputValueResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameIsCheckedParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameIsCheckedResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.FrameIsDisabledParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameIsDisabledResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.FrameIsEnabledParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameIsEnabledResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.FrameIsHiddenParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameIsHiddenResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.FrameIsVisibleParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameIsVisibleResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.FrameIsEditableParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameIsEditableResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.FramePressParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    key: _validatorPrimitives.tString,
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FramePressResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameQuerySelectorParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameQuerySelectorResult = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
  });
  _validatorPrimitives.scheme.FrameQuerySelectorAllParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameQuerySelectorAllResult = (0, _validatorPrimitives.tObject)({
    elements: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
  });
  _validatorPrimitives.scheme.FrameQueryCountParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameQueryCountResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.FrameSelectOptionParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    elements: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))),
    options: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      valueOrLabel: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      label: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      index: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    }))),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameSelectOptionResult = (0, _validatorPrimitives.tObject)({
    values: (0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FrameSetContentParams = (0, _validatorPrimitives.tObject)({
    html: _validatorPrimitives.tString,
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    waitUntil: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent"))
  });
  _validatorPrimitives.scheme.FrameSetContentResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameSetInputFilesParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    payloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      mimeType: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      buffer: _validatorPrimitives.tBinary
    }))),
    localPaths: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    streams: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["WritableStream"]))),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameSetInputFilesResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameTapParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameTextContentParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameTextContentResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FrameTitleParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameTitleResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameTypeParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    text: _validatorPrimitives.tString,
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameTypeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameUncheckParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameUncheckResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameWaitForTimeoutParams = (0, _validatorPrimitives.tObject)({
    timeout: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.FrameWaitForTimeoutResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameWaitForFunctionParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument"),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    pollingInterval: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameWaitForFunctionResult = (0, _validatorPrimitives.tObject)({
    handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
  });
  _validatorPrimitives.scheme.FrameWaitForSelectorParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    state: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["attached", "detached", "visible", "hidden"])),
    omitReturnValue: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameWaitForSelectorResult = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
  });
  _validatorPrimitives.scheme.FrameExpectParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    expression: _validatorPrimitives.tString,
    expressionArg: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
    expectedText: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("ExpectedTextValue"))),
    expectedNumber: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    expectedValue: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("SerializedArgument")),
    useInnerText: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    isNot: _validatorPrimitives.tBoolean,
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameExpectResult = (0, _validatorPrimitives.tObject)({
    matches: _validatorPrimitives.tBoolean,
    received: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("SerializedValue")),
    timedOut: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    log: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString))
  });
  _validatorPrimitives.scheme.WorkerInitializer = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.WorkerCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WorkerEvaluateExpressionParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.WorkerEvaluateExpressionResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.WorkerEvaluateExpressionHandleParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.WorkerEvaluateExpressionHandleResult = (0, _validatorPrimitives.tObject)({
    handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
  });
  _validatorPrimitives.scheme.JSHandleInitializer = (0, _validatorPrimitives.tObject)({
    preview: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.JSHandlePreviewUpdatedEvent = (0, _validatorPrimitives.tObject)({
    preview: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandlePreviewUpdatedEvent = (0, _validatorPrimitives.tType)("JSHandlePreviewUpdatedEvent");
  _validatorPrimitives.scheme.JSHandleDisposeParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleDisposeParams = (0, _validatorPrimitives.tType)("JSHandleDisposeParams");
  _validatorPrimitives.scheme.JSHandleDisposeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleDisposeResult = (0, _validatorPrimitives.tType)("JSHandleDisposeResult");
  _validatorPrimitives.scheme.JSHandleEvaluateExpressionParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.ElementHandleEvaluateExpressionParams = (0, _validatorPrimitives.tType)("JSHandleEvaluateExpressionParams");
  _validatorPrimitives.scheme.JSHandleEvaluateExpressionResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.ElementHandleEvaluateExpressionResult = (0, _validatorPrimitives.tType)("JSHandleEvaluateExpressionResult");
  _validatorPrimitives.scheme.JSHandleEvaluateExpressionHandleParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.ElementHandleEvaluateExpressionHandleParams = (0, _validatorPrimitives.tType)("JSHandleEvaluateExpressionHandleParams");
  _validatorPrimitives.scheme.JSHandleEvaluateExpressionHandleResult = (0, _validatorPrimitives.tObject)({
    handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
  });
  _validatorPrimitives.scheme.ElementHandleEvaluateExpressionHandleResult = (0, _validatorPrimitives.tType)("JSHandleEvaluateExpressionHandleResult");
  _validatorPrimitives.scheme.JSHandleGetPropertyListParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleGetPropertyListParams = (0, _validatorPrimitives.tType)("JSHandleGetPropertyListParams");
  _validatorPrimitives.scheme.JSHandleGetPropertyListResult = (0, _validatorPrimitives.tObject)({
    properties: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      value: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
    }))
  });
  _validatorPrimitives.scheme.ElementHandleGetPropertyListResult = (0, _validatorPrimitives.tType)("JSHandleGetPropertyListResult");
  _validatorPrimitives.scheme.JSHandleGetPropertyParams = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandleGetPropertyParams = (0, _validatorPrimitives.tType)("JSHandleGetPropertyParams");
  _validatorPrimitives.scheme.JSHandleGetPropertyResult = (0, _validatorPrimitives.tObject)({
    handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
  });
  _validatorPrimitives.scheme.ElementHandleGetPropertyResult = (0, _validatorPrimitives.tType)("JSHandleGetPropertyResult");
  _validatorPrimitives.scheme.JSHandleJsonValueParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleJsonValueParams = (0, _validatorPrimitives.tType)("JSHandleJsonValueParams");
  _validatorPrimitives.scheme.JSHandleJsonValueResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.ElementHandleJsonValueResult = (0, _validatorPrimitives.tType)("JSHandleJsonValueResult");
  _validatorPrimitives.scheme.JSHandleObjectCountParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleObjectCountParams = (0, _validatorPrimitives.tType)("JSHandleObjectCountParams");
  _validatorPrimitives.scheme.JSHandleObjectCountResult = (0, _validatorPrimitives.tObject)({
    count: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.ElementHandleObjectCountResult = (0, _validatorPrimitives.tType)("JSHandleObjectCountResult");
  _validatorPrimitives.scheme.ElementHandleInitializer = (0, _validatorPrimitives.tObject)({
    preview: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandleEvalOnSelectorParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.ElementHandleEvalOnSelectorResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.ElementHandleEvalOnSelectorAllParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.ElementHandleEvalOnSelectorAllResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.ElementHandleBoundingBoxParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleBoundingBoxResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Rect"))
  });
  _validatorPrimitives.scheme.ElementHandleCheckParams = (0, _validatorPrimitives.tObject)({
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleCheckResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleClickParams = (0, _validatorPrimitives.tObject)({
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
    clickCount: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleClickResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleContentFrameParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleContentFrameResult = (0, _validatorPrimitives.tObject)({
    frame: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Frame"]))
  });
  _validatorPrimitives.scheme.ElementHandleDblclickParams = (0, _validatorPrimitives.tObject)({
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleDblclickResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleDispatchEventParams = (0, _validatorPrimitives.tObject)({
    type: _validatorPrimitives.tString,
    eventInit: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.ElementHandleDispatchEventResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleFillParams = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString,
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleFillResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleFocusParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleFocusResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleGetAttributeParams = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandleGetAttributeResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.ElementHandleHoverParams = (0, _validatorPrimitives.tObject)({
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleHoverResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleInnerHTMLParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleInnerHTMLResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandleInnerTextParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleInnerTextResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandleInputValueParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleInputValueResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandleIsCheckedParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleIsCheckedResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ElementHandleIsDisabledParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleIsDisabledResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ElementHandleIsEditableParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleIsEditableResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ElementHandleIsEnabledParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleIsEnabledResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ElementHandleIsHiddenParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleIsHiddenResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ElementHandleIsVisibleParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleIsVisibleResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ElementHandleOwnerFrameParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleOwnerFrameResult = (0, _validatorPrimitives.tObject)({
    frame: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Frame"]))
  });
  _validatorPrimitives.scheme.ElementHandlePressParams = (0, _validatorPrimitives.tObject)({
    key: _validatorPrimitives.tString,
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandlePressResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleQuerySelectorParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleQuerySelectorResult = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
  });
  _validatorPrimitives.scheme.ElementHandleQuerySelectorAllParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandleQuerySelectorAllResult = (0, _validatorPrimitives.tObject)({
    elements: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
  });
  _validatorPrimitives.scheme.ElementHandleScreenshotParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    type: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["png", "jpeg"])),
    quality: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    omitBackground: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    caret: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["hide", "initial"])),
    animations: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["disabled", "allow"])),
    scale: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["css", "device"])),
    mask: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      frame: (0, _validatorPrimitives.tChannel)(["Frame"]),
      selector: _validatorPrimitives.tString
    }))),
    maskColor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    style: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.ElementHandleScreenshotResult = (0, _validatorPrimitives.tObject)({
    binary: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.ElementHandleScrollIntoViewIfNeededParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.ElementHandleScrollIntoViewIfNeededResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleSelectOptionParams = (0, _validatorPrimitives.tObject)({
    elements: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))),
    options: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      valueOrLabel: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      label: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      index: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    }))),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleSelectOptionResult = (0, _validatorPrimitives.tObject)({
    values: (0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.ElementHandleSelectTextParams = (0, _validatorPrimitives.tObject)({
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.ElementHandleSelectTextResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleSetInputFilesParams = (0, _validatorPrimitives.tObject)({
    payloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      mimeType: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      buffer: _validatorPrimitives.tBinary
    }))),
    localPaths: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    streams: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["WritableStream"]))),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleSetInputFilesResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleTapParams = (0, _validatorPrimitives.tObject)({
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleTextContentParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleTextContentResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.ElementHandleTypeParams = (0, _validatorPrimitives.tObject)({
    text: _validatorPrimitives.tString,
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.ElementHandleTypeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleUncheckParams = (0, _validatorPrimitives.tObject)({
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleUncheckResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleWaitForElementStateParams = (0, _validatorPrimitives.tObject)({
    state: (0, _validatorPrimitives.tEnum)(["visible", "hidden", "stable", "enabled", "disabled", "editable"]),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.ElementHandleWaitForElementStateResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleWaitForSelectorParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    state: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["attached", "detached", "visible", "hidden"]))
  });
  _validatorPrimitives.scheme.ElementHandleWaitForSelectorResult = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
  });
  _validatorPrimitives.scheme.RequestInitializer = (0, _validatorPrimitives.tObject)({
    frame: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Frame"])),
    serviceWorker: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Worker"])),
    url: _validatorPrimitives.tString,
    resourceType: _validatorPrimitives.tString,
    method: _validatorPrimitives.tString,
    postData: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue")),
    isNavigationRequest: _validatorPrimitives.tBoolean,
    redirectedFrom: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Request"]))
  });
  _validatorPrimitives.scheme.RequestResponseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.RequestResponseResult = (0, _validatorPrimitives.tObject)({
    response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"]))
  });
  _validatorPrimitives.scheme.RequestRawRequestHeadersParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.RequestRawRequestHeadersResult = (0, _validatorPrimitives.tObject)({
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
  });
  _validatorPrimitives.scheme.RouteInitializer = (0, _validatorPrimitives.tObject)({
    request: (0, _validatorPrimitives.tChannel)(["Request"])
  });
  _validatorPrimitives.scheme.RouteRedirectNavigationRequestParams = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.RouteRedirectNavigationRequestResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.RouteAbortParams = (0, _validatorPrimitives.tObject)({
    errorCode: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    requestUrl: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.RouteAbortResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.RouteContinueParams = (0, _validatorPrimitives.tObject)({
    url: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    method: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    headers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    postData: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    requestUrl: _validatorPrimitives.tString,
    isFallback: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.RouteContinueResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.RouteFulfillParams = (0, _validatorPrimitives.tObject)({
    status: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    headers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    body: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    isBase64: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    fetchResponseUid: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    requestUrl: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.RouteFulfillResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ResourceTiming = (0, _validatorPrimitives.tObject)({
    startTime: _validatorPrimitives.tNumber,
    domainLookupStart: _validatorPrimitives.tNumber,
    domainLookupEnd: _validatorPrimitives.tNumber,
    connectStart: _validatorPrimitives.tNumber,
    secureConnectionStart: _validatorPrimitives.tNumber,
    connectEnd: _validatorPrimitives.tNumber,
    requestStart: _validatorPrimitives.tNumber,
    responseStart: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.ResponseInitializer = (0, _validatorPrimitives.tObject)({
    request: (0, _validatorPrimitives.tChannel)(["Request"]),
    url: _validatorPrimitives.tString,
    status: _validatorPrimitives.tNumber,
    statusText: _validatorPrimitives.tString,
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue")),
    timing: (0, _validatorPrimitives.tType)("ResourceTiming"),
    fromServiceWorker: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ResponseBodyParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ResponseBodyResult = (0, _validatorPrimitives.tObject)({
    binary: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.ResponseSecurityDetailsParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ResponseSecurityDetailsResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("SecurityDetails"))
  });
  _validatorPrimitives.scheme.ResponseServerAddrParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ResponseServerAddrResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RemoteAddr"))
  });
  _validatorPrimitives.scheme.ResponseRawResponseHeadersParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ResponseRawResponseHeadersResult = (0, _validatorPrimitives.tObject)({
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
  });
  _validatorPrimitives.scheme.ResponseSizesParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ResponseSizesResult = (0, _validatorPrimitives.tObject)({
    sizes: (0, _validatorPrimitives.tType)("RequestSizes")
  });
  _validatorPrimitives.scheme.SecurityDetails = (0, _validatorPrimitives.tObject)({
    issuer: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    protocol: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    subjectName: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    validFrom: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    validTo: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.RequestSizes = (0, _validatorPrimitives.tObject)({
    requestBodySize: _validatorPrimitives.tNumber,
    requestHeadersSize: _validatorPrimitives.tNumber,
    responseBodySize: _validatorPrimitives.tNumber,
    responseHeadersSize: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.RemoteAddr = (0, _validatorPrimitives.tObject)({
    ipAddress: _validatorPrimitives.tString,
    port: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.WebSocketInitializer = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.WebSocketOpenEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WebSocketFrameSentEvent = (0, _validatorPrimitives.tObject)({
    opcode: _validatorPrimitives.tNumber,
    data: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.WebSocketFrameReceivedEvent = (0, _validatorPrimitives.tObject)({
    opcode: _validatorPrimitives.tNumber,
    data: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.WebSocketSocketErrorEvent = (0, _validatorPrimitives.tObject)({
    error: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.WebSocketCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BindingCallInitializer = (0, _validatorPrimitives.tObject)({
    frame: (0, _validatorPrimitives.tChannel)(["Frame"]),
    name: _validatorPrimitives.tString,
    args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("SerializedValue"))),
    handle: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"]))
  });
  _validatorPrimitives.scheme.BindingCallRejectParams = (0, _validatorPrimitives.tObject)({
    error: (0, _validatorPrimitives.tType)("SerializedError")
  });
  _validatorPrimitives.scheme.BindingCallRejectResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BindingCallResolveParams = (0, _validatorPrimitives.tObject)({
    result: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.BindingCallResolveResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DialogInitializer = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"])),
    type: _validatorPrimitives.tString,
    message: _validatorPrimitives.tString,
    defaultValue: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.DialogAcceptParams = (0, _validatorPrimitives.tObject)({
    promptText: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.DialogAcceptResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DialogDismissParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DialogDismissResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.TracingInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.TracingTracingStartParams = (0, _validatorPrimitives.tObject)({
    name: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    snapshots: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    screenshots: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    live: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.TracingTracingStartResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.TracingTracingStartChunkParams = (0, _validatorPrimitives.tObject)({
    name: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    title: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.TracingTracingStartChunkResult = (0, _validatorPrimitives.tObject)({
    traceName: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.TracingTracingStopChunkParams = (0, _validatorPrimitives.tObject)({
    mode: (0, _validatorPrimitives.tEnum)(["archive", "discard", "entries"])
  });
  _validatorPrimitives.scheme.TracingTracingStopChunkResult = (0, _validatorPrimitives.tObject)({
    artifact: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Artifact"])),
    entries: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue")))
  });
  _validatorPrimitives.scheme.TracingTracingStopParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.TracingTracingStopResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactInitializer = (0, _validatorPrimitives.tObject)({
    absolutePath: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ArtifactPathAfterFinishedParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactPathAfterFinishedResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ArtifactSaveAsParams = (0, _validatorPrimitives.tObject)({
    path: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ArtifactSaveAsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactSaveAsStreamParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactSaveAsStreamResult = (0, _validatorPrimitives.tObject)({
    stream: (0, _validatorPrimitives.tChannel)(["Stream"])
  });
  _validatorPrimitives.scheme.ArtifactFailureParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactFailureResult = (0, _validatorPrimitives.tObject)({
    error: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.ArtifactStreamParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactStreamResult = (0, _validatorPrimitives.tObject)({
    stream: (0, _validatorPrimitives.tChannel)(["Stream"])
  });
  _validatorPrimitives.scheme.ArtifactCancelParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactCancelResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactDeleteParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactDeleteResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.StreamInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.StreamReadParams = (0, _validatorPrimitives.tObject)({
    size: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.StreamReadResult = (0, _validatorPrimitives.tObject)({
    binary: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.StreamCloseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.StreamCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WritableStreamInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WritableStreamWriteParams = (0, _validatorPrimitives.tObject)({
    binary: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.WritableStreamWriteResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WritableStreamCloseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WritableStreamCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.CDPSessionInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.CDPSessionEventEvent = (0, _validatorPrimitives.tObject)({
    method: _validatorPrimitives.tString,
    params: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny)
  });
  _validatorPrimitives.scheme.CDPSessionSendParams = (0, _validatorPrimitives.tObject)({
    method: _validatorPrimitives.tString,
    params: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny)
  });
  _validatorPrimitives.scheme.CDPSessionSendResult = (0, _validatorPrimitives.tObject)({
    result: _validatorPrimitives.tAny
  });
  _validatorPrimitives.scheme.CDPSessionDetachParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.CDPSessionDetachResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElectronInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElectronLaunchParams = (0, _validatorPrimitives.tObject)({
    executablePath: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    cwd: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    env: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    acceptDownloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
    bypassCSP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
    extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      longitude: _validatorPrimitives.tNumber,
      latitude: _validatorPrimitives.tNumber,
      accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    })),
    httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      username: _validatorPrimitives.tString,
      password: _validatorPrimitives.tString,
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    locale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    offline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    recordHar: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RecordHarOptions")),
    recordVideo: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      dir: _validatorPrimitives.tString,
      size: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      }))
    })),
    strictSelectors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timezoneId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    tracesDir: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.ElectronLaunchResult = (0, _validatorPrimitives.tObject)({
    electronApplication: (0, _validatorPrimitives.tChannel)(["ElectronApplication"])
  });
  _validatorPrimitives.scheme.ElectronApplicationInitializer = (0, _validatorPrimitives.tObject)({
    context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
  });
  _validatorPrimitives.scheme.ElectronApplicationCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElectronApplicationConsoleEvent = (0, _validatorPrimitives.tObject)({
    type: _validatorPrimitives.tString,
    text: _validatorPrimitives.tString,
    args: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])),
    location: (0, _validatorPrimitives.tObject)({
      url: _validatorPrimitives.tString,
      lineNumber: _validatorPrimitives.tNumber,
      columnNumber: _validatorPrimitives.tNumber
    })
  });
  _validatorPrimitives.scheme.ElectronApplicationBrowserWindowParams = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tChannel)(["Page"])
  });
  _validatorPrimitives.scheme.ElectronApplicationBrowserWindowResult = (0, _validatorPrimitives.tObject)({
    handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
  });
  _validatorPrimitives.scheme.ElectronApplicationEvaluateExpressionParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.ElectronApplicationEvaluateExpressionResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.ElectronApplicationEvaluateExpressionHandleParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.ElectronApplicationEvaluateExpressionHandleResult = (0, _validatorPrimitives.tObject)({
    handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
  });
  _validatorPrimitives.scheme.ElectronApplicationUpdateSubscriptionParams = (0, _validatorPrimitives.tObject)({
    event: (0, _validatorPrimitives.tEnum)(["console"]),
    enabled: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ElectronApplicationUpdateSubscriptionResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElectronApplicationCloseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElectronApplicationCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDevicesParams = (0, _validatorPrimitives.tObject)({
    host: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    port: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    omitDriverInstall: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.AndroidDevicesResult = (0, _validatorPrimitives.tObject)({
    devices: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["AndroidDevice"]))
  });
  _validatorPrimitives.scheme.AndroidSetDefaultTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
    timeout: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.AndroidSetDefaultTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidSocketInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidSocketDataEvent = (0, _validatorPrimitives.tObject)({
    data: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.AndroidSocketCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidSocketWriteParams = (0, _validatorPrimitives.tObject)({
    data: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.AndroidSocketWriteResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidSocketCloseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidSocketCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceInitializer = (0, _validatorPrimitives.tObject)({
    model: _validatorPrimitives.tString,
    serial: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidDeviceCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceWebViewAddedEvent = (0, _validatorPrimitives.tObject)({
    webView: (0, _validatorPrimitives.tType)("AndroidWebView")
  });
  _validatorPrimitives.scheme.AndroidDeviceWebViewRemovedEvent = (0, _validatorPrimitives.tObject)({
    socketName: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidDeviceWaitParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    state: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["gone"])),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceWaitResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceFillParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    text: _validatorPrimitives.tString,
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceFillResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceTapParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    duration: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceDragParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    dest: (0, _validatorPrimitives.tType)("Point"),
    speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceDragResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceFlingParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    direction: (0, _validatorPrimitives.tEnum)(["up", "down", "left", "right"]),
    speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceFlingResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceLongTapParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceLongTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDevicePinchCloseParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    percent: _validatorPrimitives.tNumber,
    speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDevicePinchCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDevicePinchOpenParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    percent: _validatorPrimitives.tNumber,
    speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDevicePinchOpenResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceScrollParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    direction: (0, _validatorPrimitives.tEnum)(["up", "down", "left", "right"]),
    percent: _validatorPrimitives.tNumber,
    speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceScrollResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceSwipeParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    direction: (0, _validatorPrimitives.tEnum)(["up", "down", "left", "right"]),
    percent: _validatorPrimitives.tNumber,
    speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceSwipeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceInfoParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector")
  });
  _validatorPrimitives.scheme.AndroidDeviceInfoResult = (0, _validatorPrimitives.tObject)({
    info: (0, _validatorPrimitives.tType)("AndroidElementInfo")
  });
  _validatorPrimitives.scheme.AndroidDeviceScreenshotParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceScreenshotResult = (0, _validatorPrimitives.tObject)({
    binary: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.AndroidDeviceInputTypeParams = (0, _validatorPrimitives.tObject)({
    text: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidDeviceInputTypeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceInputPressParams = (0, _validatorPrimitives.tObject)({
    key: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidDeviceInputPressResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceInputTapParams = (0, _validatorPrimitives.tObject)({
    point: (0, _validatorPrimitives.tType)("Point")
  });
  _validatorPrimitives.scheme.AndroidDeviceInputTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceInputSwipeParams = (0, _validatorPrimitives.tObject)({
    segments: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("Point")),
    steps: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.AndroidDeviceInputSwipeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceInputDragParams = (0, _validatorPrimitives.tObject)({
    from: (0, _validatorPrimitives.tType)("Point"),
    to: (0, _validatorPrimitives.tType)("Point"),
    steps: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.AndroidDeviceInputDragResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceLaunchBrowserParams = (0, _validatorPrimitives.tObject)({
    noDefaultViewport: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    viewport: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    screen: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    javaScriptEnabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    bypassCSP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    userAgent: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    locale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    timezoneId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      longitude: _validatorPrimitives.tNumber,
      latitude: _validatorPrimitives.tNumber,
      accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    })),
    permissions: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    offline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      username: _validatorPrimitives.tString,
      password: _validatorPrimitives.tString,
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    deviceScaleFactor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    isMobile: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    hasTouch: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
    reducedMotion: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
    forcedColors: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["active", "none", "no-override"])),
    acceptDownloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
    baseURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    recordVideo: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      dir: _validatorPrimitives.tString,
      size: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      }))
    })),
    recordHar: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RecordHarOptions")),
    strictSelectors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    serviceWorkers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["allow", "block"])),
    pkg: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      server: _validatorPrimitives.tString,
      bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    }))
  });
  _validatorPrimitives.scheme.AndroidDeviceLaunchBrowserResult = (0, _validatorPrimitives.tObject)({
    context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
  });
  _validatorPrimitives.scheme.AndroidDeviceOpenParams = (0, _validatorPrimitives.tObject)({
    command: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidDeviceOpenResult = (0, _validatorPrimitives.tObject)({
    socket: (0, _validatorPrimitives.tChannel)(["AndroidSocket"])
  });
  _validatorPrimitives.scheme.AndroidDeviceShellParams = (0, _validatorPrimitives.tObject)({
    command: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidDeviceShellResult = (0, _validatorPrimitives.tObject)({
    result: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.AndroidDeviceInstallApkParams = (0, _validatorPrimitives.tObject)({
    file: _validatorPrimitives.tBinary,
    args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString))
  });
  _validatorPrimitives.scheme.AndroidDeviceInstallApkResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDevicePushParams = (0, _validatorPrimitives.tObject)({
    file: _validatorPrimitives.tBinary,
    path: _validatorPrimitives.tString,
    mode: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDevicePushResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceSetDefaultTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
    timeout: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.AndroidDeviceSetDefaultTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceConnectToWebViewParams = (0, _validatorPrimitives.tObject)({
    socketName: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidDeviceConnectToWebViewResult = (0, _validatorPrimitives.tObject)({
    context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
  });
  _validatorPrimitives.scheme.AndroidDeviceCloseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidWebView = (0, _validatorPrimitives.tObject)({
    pid: _validatorPrimitives.tNumber,
    pkg: _validatorPrimitives.tString,
    socketName: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidSelector = (0, _validatorPrimitives.tObject)({
    checkable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    checked: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    clazz: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    clickable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    depth: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    desc: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    enabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    focusable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    focused: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    hasChild: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      selector: (0, _validatorPrimitives.tType)("AndroidSelector")
    })),
    hasDescendant: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
      maxDepth: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    })),
    longClickable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    pkg: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    res: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    scrollable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    selected: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    text: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.AndroidElementInfo = (0, _validatorPrimitives.tObject)({
    children: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("AndroidElementInfo"))),
    clazz: _validatorPrimitives.tString,
    desc: _validatorPrimitives.tString,
    res: _validatorPrimitives.tString,
    pkg: _validatorPrimitives.tString,
    text: _validatorPrimitives.tString,
    bounds: (0, _validatorPrimitives.tType)("Rect"),
    checkable: _validatorPrimitives.tBoolean,
    checked: _validatorPrimitives.tBoolean,
    clickable: _validatorPrimitives.tBoolean,
    enabled: _validatorPrimitives.tBoolean,
    focusable: _validatorPrimitives.tBoolean,
    focused: _validatorPrimitives.tBoolean,
    longClickable: _validatorPrimitives.tBoolean,
    scrollable: _validatorPrimitives.tBoolean,
    selected: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.JsonPipeInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.JsonPipeMessageEvent = (0, _validatorPrimitives.tObject)({
    message: _validatorPrimitives.tAny
  });
  _validatorPrimitives.scheme.JsonPipeClosedEvent = (0, _validatorPrimitives.tObject)({
    error: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("SerializedError"))
  });
  _validatorPrimitives.scheme.JsonPipeSendParams = (0, _validatorPrimitives.tObject)({
    message: _validatorPrimitives.tAny
  });
  _validatorPrimitives.scheme.JsonPipeSendResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.JsonPipeCloseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.JsonPipeCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
});

// node_modules/playwright-core/lib/protocol/serializers.js
var require_serializers = __commonJS((exports) => {
  var parseSerializedValue = function(value, handles) {
    return innerParseSerializedValue(value, handles, new Map);
  };
  var innerParseSerializedValue = function(value, handles, refs) {
    if (value.ref !== undefined)
      return refs.get(value.ref);
    if (value.n !== undefined)
      return value.n;
    if (value.s !== undefined)
      return value.s;
    if (value.b !== undefined)
      return value.b;
    if (value.v !== undefined) {
      if (value.v === "undefined")
        return;
      if (value.v === "null")
        return null;
      if (value.v === "NaN")
        return NaN;
      if (value.v === "Infinity")
        return Infinity;
      if (value.v === "-Infinity")
        return (-Infinity);
      if (value.v === "-0")
        return -0;
    }
    if (value.d !== undefined)
      return new Date(value.d);
    if (value.u !== undefined)
      return new URL(value.u);
    if (value.bi !== undefined)
      return BigInt(value.bi);
    if (value.r !== undefined)
      return new RegExp(value.r.p, value.r.f);
    if (value.a !== undefined) {
      const result = [];
      refs.set(value.id, result);
      for (const v of value.a)
        result.push(innerParseSerializedValue(v, handles, refs));
      return result;
    }
    if (value.o !== undefined) {
      const result = {};
      refs.set(value.id, result);
      for (const {
        k,
        v
      } of value.o)
        result[k] = innerParseSerializedValue(v, handles, refs);
      return result;
    }
    if (value.h !== undefined) {
      if (handles === undefined)
        throw new Error("Unexpected handle");
      return handles[value.h];
    }
    throw new Error("Unexpected value");
  };
  var serializeValue = function(value, handleSerializer) {
    return innerSerializeValue(value, handleSerializer, {
      lastId: 0,
      visited: new Map
    });
  };
  var innerSerializeValue = function(value, handleSerializer, visitorInfo) {
    const handle = handleSerializer(value);
    if ("fallThrough" in handle)
      value = handle.fallThrough;
    else
      return handle;
    if (typeof value === "symbol")
      return {
        v: "undefined"
      };
    if (Object.is(value, undefined))
      return {
        v: "undefined"
      };
    if (Object.is(value, null))
      return {
        v: "null"
      };
    if (Object.is(value, NaN))
      return {
        v: "NaN"
      };
    if (Object.is(value, Infinity))
      return {
        v: "Infinity"
      };
    if (Object.is(value, (-Infinity)))
      return {
        v: "-Infinity"
      };
    if (Object.is(value, -0))
      return {
        v: "-0"
      };
    if (typeof value === "boolean")
      return {
        b: value
      };
    if (typeof value === "number")
      return {
        n: value
      };
    if (typeof value === "string")
      return {
        s: value
      };
    if (typeof value === "bigint")
      return {
        bi: value.toString()
      };
    if (isError(value)) {
      const error = value;
      if ("captureStackTrace" in globalThis.Error) {
        return {
          s: error.stack || ""
        };
      }
      return {
        s: `${error.name}: ${error.message}\n${error.stack}`
      };
    }
    if (isDate(value))
      return {
        d: value.toJSON()
      };
    if (isURL(value))
      return {
        u: value.toJSON()
      };
    if (isRegExp(value))
      return {
        r: {
          p: value.source,
          f: value.flags
        }
      };
    const id = visitorInfo.visited.get(value);
    if (id)
      return {
        ref: id
      };
    if (Array.isArray(value)) {
      const a = [];
      const id2 = ++visitorInfo.lastId;
      visitorInfo.visited.set(value, id2);
      for (let i = 0;i < value.length; ++i)
        a.push(innerSerializeValue(value[i], handleSerializer, visitorInfo));
      return {
        a,
        id: id2
      };
    }
    if (typeof value === "object") {
      const o = [];
      const id2 = ++visitorInfo.lastId;
      visitorInfo.visited.set(value, id2);
      for (const name of Object.keys(value))
        o.push({
          k: name,
          v: innerSerializeValue(value[name], handleSerializer, visitorInfo)
        });
      return {
        o,
        id: id2
      };
    }
    throw new Error("Unexpected value");
  };
  var isRegExp = function(obj) {
    return obj instanceof RegExp || Object.prototype.toString.call(obj) === "[object RegExp]";
  };
  var isDate = function(obj) {
    return obj instanceof Date || Object.prototype.toString.call(obj) === "[object Date]";
  };
  var isURL = function(obj) {
    return obj instanceof URL || Object.prototype.toString.call(obj) === "[object URL]";
  };
  var isError = function(obj) {
    const proto = obj ? Object.getPrototypeOf(obj) : null;
    return obj instanceof Error || (proto === null || proto === undefined ? undefined : proto.name) === "Error" || proto && isError(proto);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.parseSerializedValue = parseSerializedValue;
  exports.serializeValue = serializeValue;
});

// node_modules/playwright-core/lib/server/errors.js
var require_errors = __commonJS((exports) => {
  var isTargetClosedError = function(error) {
    return error instanceof TargetClosedError || error.name === "TargetClosedError";
  };
  var serializeError = function(e) {
    if ((0, _utils.isError)(e))
      return {
        error: {
          message: e.message,
          stack: e.stack,
          name: e.name
        }
      };
    return {
      value: (0, _serializers.serializeValue)(e, (value) => ({
        fallThrough: value
      }))
    };
  };
  var parseError = function(error) {
    if (!error.error) {
      if (error.value === undefined)
        throw new Error("Serialized error must have either an error or a value");
      return (0, _serializers.parseSerializedValue)(error.value, undefined);
    }
    const e = new Error(error.error.message);
    e.stack = error.error.stack || "";
    e.name = error.error.name;
    return e;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TimeoutError = exports.TargetClosedError = undefined;
  exports.isTargetClosedError = isTargetClosedError;
  exports.parseError = parseError;
  exports.serializeError = serializeError;
  var _utils = require_utils3();
  var _serializers = require_serializers();

  class CustomError extends Error {
    constructor(message) {
      super(message);
      this.name = this.constructor.name;
    }
  }

  class TimeoutError extends CustomError {
  }
  exports.TimeoutError = TimeoutError;

  class TargetClosedError extends CustomError {
    constructor(cause, logs) {
      super((cause || "Target page, context or browser has been closed") + (logs || ""));
    }
  }
  exports.TargetClosedError = TargetClosedError;
});

// node_modules/playwright-core/lib/server/instrumentation.js
var require_instrumentation = __commonJS((exports) => {
  var createInstrumentation = function() {
    const listeners = new Map;
    return new Proxy({}, {
      get: (obj, prop) => {
        if (typeof prop !== "string")
          return obj[prop];
        if (prop === "addListener")
          return (listener, context) => listeners.set(listener, context);
        if (prop === "removeListener")
          return (listener) => listeners.delete(listener);
        if (!prop.startsWith("on"))
          return obj[prop];
        return async (sdkObject, ...params) => {
          for (const [listener, context] of listeners) {
            var _prop, _ref;
            if (!context || sdkObject.attribution.context === context)
              await ((_prop = (_ref = listener)[prop]) === null || _prop === undefined ? undefined : _prop.call(_ref, sdkObject, ...params));
          }
        };
      }
    });
  };
  var serverSideCallMetadata = function() {
    return {
      id: "",
      startTime: 0,
      endTime: 0,
      wallTime: Date.now(),
      type: "Internal",
      method: "",
      params: {},
      log: [],
      isServerSide: true
    };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SdkObject = undefined;
  exports.createInstrumentation = createInstrumentation;
  exports.kTestSdkObjects = undefined;
  exports.serverSideCallMetadata = serverSideCallMetadata;
  var _events = import.meta.require("events");
  var _utils = require_utils3();
  var kTestSdkObjects = exports.kTestSdkObjects = new WeakSet;

  class SdkObject extends _events.EventEmitter {
    constructor(parent, guidPrefix, guid) {
      super();
      this.guid = undefined;
      this.attribution = undefined;
      this.instrumentation = undefined;
      this.guid = guid || `${guidPrefix || ""}@${(0, _utils.createGuid)()}`;
      this.setMaxListeners(0);
      this.attribution = {
        ...parent.attribution
      };
      this.instrumentation = parent.instrumentation;
      if (process.env._PW_INTERNAL_COUNT_SDK_OBJECTS)
        kTestSdkObjects.add(this);
    }
  }
  exports.SdkObject = SdkObject;
});

// node_modules/playwright-core/lib/server/protocolError.js
var require_protocolError = __commonJS((exports) => {
  var isProtocolError = function(e) {
    return e instanceof ProtocolError;
  };
  var isSessionClosedError = function(e) {
    return e instanceof ProtocolError && (e.type === "closed" || e.type === "crashed");
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ProtocolError = undefined;
  exports.isProtocolError = isProtocolError;
  exports.isSessionClosedError = isSessionClosedError;
  var _stackTrace = require_stackTrace();

  class ProtocolError extends Error {
    constructor(type, method, logs) {
      super();
      this.type = undefined;
      this.method = undefined;
      this.logs = undefined;
      this.type = type;
      this.method = method;
      this.logs = logs;
    }
    setMessage(message) {
      (0, _stackTrace.rewriteErrorMessage)(this, `Protocol error (${this.method}): ${message}`);
    }
    browserLogMessage() {
      return this.logs ? "\nBrowser logs:\n" + this.logs : "";
    }
  }
  exports.ProtocolError = ProtocolError;
});

// node_modules/playwright-core/lib/server/dispatchers/dispatcher.js
var require_dispatcher = __commonJS((exports) => {
  var existingDispatcher = function(object) {
    return object[dispatcherSymbol];
  };
  var setMaxDispatchersForTest = function(value) {
    maxDispatchersOverride = value;
  };
  var maxDispatchersForBucket = function(gcBucket) {
    var _ref, _maxDispatchersOverri;
    return (_ref = (_maxDispatchersOverri = maxDispatchersOverride) !== null && _maxDispatchersOverri !== undefined ? _maxDispatchersOverri : {
      JSHandle: 1e5,
      ElementHandle: 1e5
    }[gcBucket]) !== null && _ref !== undefined ? _ref : 1e4;
  };
  var closeReason = function(sdkObject) {
    var _sdkObject$attributio4, _sdkObject$attributio5, _sdkObject$attributio6;
    return ((_sdkObject$attributio4 = sdkObject.attribution.page) === null || _sdkObject$attributio4 === undefined ? undefined : _sdkObject$attributio4._closeReason) || ((_sdkObject$attributio5 = sdkObject.attribution.context) === null || _sdkObject$attributio5 === undefined ? undefined : _sdkObject$attributio5._closeReason) || ((_sdkObject$attributio6 = sdkObject.attribution.browser) === null || _sdkObject$attributio6 === undefined ? undefined : _sdkObject$attributio6._closeReason);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.dispatcherSymbol = exports.RootDispatcher = exports.DispatcherConnection = exports.Dispatcher = undefined;
  exports.existingDispatcher = existingDispatcher;
  exports.setMaxDispatchersForTest = setMaxDispatchersForTest;
  var _events = import.meta.require("events");
  var _validator = require_validator();
  var _utils = require_utils3();
  var _errors = require_errors();
  var _instrumentation = require_instrumentation();
  var _eventsHelper = require_eventsHelper();
  var _protocolError = require_protocolError();
  var dispatcherSymbol = exports.dispatcherSymbol = Symbol("dispatcher");
  var metadataValidator = (0, _validator.createMetadataValidator)();
  var maxDispatchersOverride;

  class Dispatcher extends _events.EventEmitter {
    constructor(parent, object, type, initializer, gcBucket) {
      super();
      this._connection = undefined;
      this._parent = undefined;
      this._dispatchers = new Map;
      this._disposed = false;
      this._eventListeners = [];
      this._guid = undefined;
      this._type = undefined;
      this._gcBucket = undefined;
      this._object = undefined;
      this._openScope = new _utils.LongStandingScope;
      this._connection = parent instanceof DispatcherConnection ? parent : parent._connection;
      this._parent = parent instanceof DispatcherConnection ? undefined : parent;
      const guid = object.guid;
      this._guid = guid;
      this._type = type;
      this._object = object;
      this._gcBucket = gcBucket !== null && gcBucket !== undefined ? gcBucket : type;
      object[dispatcherSymbol] = this;
      this._connection.registerDispatcher(this);
      if (this._parent) {
        (0, _utils.assert)(!this._parent._dispatchers.has(guid));
        this._parent._dispatchers.set(guid, this);
      }
      if (this._parent)
        this._connection.sendCreate(this._parent, type, guid, initializer, this._parent._object);
      this._connection.maybeDisposeStaleDispatchers(this._gcBucket);
    }
    parentScope() {
      return this._parent;
    }
    addObjectListener(eventName, handler) {
      this._eventListeners.push(_eventsHelper.eventsHelper.addEventListener(this._object, eventName, handler));
    }
    adopt(child) {
      if (child._parent === this)
        return;
      const oldParent = child._parent;
      oldParent._dispatchers.delete(child._guid);
      this._dispatchers.set(child._guid, child);
      child._parent = this;
      this._connection.sendAdopt(this, child);
    }
    async _handleCommand(callMetadata, method, validParams) {
      const commandPromise = this[method](validParams, callMetadata);
      try {
        return await this._openScope.race(commandPromise);
      } catch (e) {
        if (callMetadata.potentiallyClosesScope && (0, _errors.isTargetClosedError)(e))
          return await commandPromise;
        throw e;
      }
    }
    _dispatchEvent(method, params) {
      if (this._disposed) {
        if ((0, _utils.isUnderTest)())
          throw new Error(`${this._guid} is sending "${String(method)}" event after being disposed`);
        return;
      }
      const sdkObject = this._object instanceof _instrumentation.SdkObject ? this._object : undefined;
      this._connection.sendEvent(this, method, params, sdkObject);
    }
    _dispose(reason) {
      this._disposeRecursively(new _errors.TargetClosedError);
      this._connection.sendDispose(this, reason);
    }
    _onDispose() {
    }
    _disposeRecursively(error) {
      var _this$_parent;
      (0, _utils.assert)(!this._disposed, `${this._guid} is disposed more than once`);
      this._onDispose();
      this._disposed = true;
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      (_this$_parent = this._parent) === null || _this$_parent === undefined || _this$_parent._dispatchers.delete(this._guid);
      const list = this._connection._dispatchersByBucket.get(this._gcBucket);
      list === null || list === undefined || list.delete(this._guid);
      this._connection._dispatchers.delete(this._guid);
      for (const dispatcher of [...this._dispatchers.values()])
        dispatcher._disposeRecursively(error);
      this._dispatchers.clear();
      delete this._object[dispatcherSymbol];
      this._openScope.close(error);
    }
    _debugScopeState() {
      return {
        _guid: this._guid,
        objects: Array.from(this._dispatchers.values()).map((o) => o._debugScopeState())
      };
    }
    async waitForEventInfo() {
    }
  }
  exports.Dispatcher = Dispatcher;

  class RootDispatcher extends Dispatcher {
    constructor(connection, createPlaywright) {
      super(connection, {
        guid: ""
      }, "Root", {});
      this._initialized = false;
      this.createPlaywright = createPlaywright;
    }
    async initialize(params) {
      (0, _utils.assert)(this.createPlaywright);
      (0, _utils.assert)(!this._initialized);
      this._initialized = true;
      return {
        playwright: await this.createPlaywright(this, params)
      };
    }
  }
  exports.RootDispatcher = RootDispatcher;

  class DispatcherConnection {
    constructor(isLocal) {
      this._dispatchers = new Map;
      this._dispatchersByBucket = new Map;
      this.onmessage = (message) => {
      };
      this._waitOperations = new Map;
      this._isLocal = undefined;
      this._isLocal = !!isLocal;
    }
    sendEvent(dispatcher, event, params, sdkObject) {
      const validator = (0, _validator.findValidator)(dispatcher._type, event, "Event");
      params = validator(params, "", {
        tChannelImpl: this._tChannelImplToWire.bind(this),
        binary: this._isLocal ? "buffer" : "toBase64"
      });
      this._sendMessageToClient(dispatcher._guid, dispatcher._type, event, params, sdkObject);
    }
    sendCreate(parent, type, guid, initializer, sdkObject) {
      const validator = (0, _validator.findValidator)(type, "", "Initializer");
      initializer = validator(initializer, "", {
        tChannelImpl: this._tChannelImplToWire.bind(this),
        binary: this._isLocal ? "buffer" : "toBase64"
      });
      this._sendMessageToClient(parent._guid, type, "__create__", {
        type,
        initializer,
        guid
      }, sdkObject);
    }
    sendAdopt(parent, dispatcher) {
      this._sendMessageToClient(parent._guid, dispatcher._type, "__adopt__", {
        guid: dispatcher._guid
      });
    }
    sendDispose(dispatcher, reason) {
      this._sendMessageToClient(dispatcher._guid, dispatcher._type, "__dispose__", {
        reason
      });
    }
    _sendMessageToClient(guid, type, method, params, sdkObject) {
      if (sdkObject) {
        var _sdkObject$attributio, _sdkObject$instrument;
        const event = {
          type: "event",
          class: type,
          method,
          params: params || {},
          time: (0, _utils.monotonicTime)(),
          pageId: sdkObject === null || sdkObject === undefined || (_sdkObject$attributio = sdkObject.attribution) === null || _sdkObject$attributio === undefined || (_sdkObject$attributio = _sdkObject$attributio.page) === null || _sdkObject$attributio === undefined ? undefined : _sdkObject$attributio.guid
        };
        (_sdkObject$instrument = sdkObject.instrumentation) === null || _sdkObject$instrument === undefined || _sdkObject$instrument.onEvent(sdkObject, event);
      }
      this.onmessage({
        guid,
        method,
        params
      });
    }
    _tChannelImplFromWire(names, arg, path, context) {
      if (arg && typeof arg === "object" && typeof arg.guid === "string") {
        const guid = arg.guid;
        const dispatcher = this._dispatchers.get(guid);
        if (!dispatcher)
          throw new _validator.ValidationError(`${path}: no object with guid ${guid}`);
        if (names !== "*" && !names.includes(dispatcher._type))
          throw new _validator.ValidationError(`${path}: object with guid ${guid} has type ${dispatcher._type}, expected ${names.toString()}`);
        return dispatcher;
      }
      throw new _validator.ValidationError(`${path}: expected guid for ${names.toString()}`);
    }
    _tChannelImplToWire(names, arg, path, context) {
      if (arg instanceof Dispatcher) {
        if (names !== "*" && !names.includes(arg._type))
          throw new _validator.ValidationError(`${path}: dispatcher with guid ${arg._guid} has type ${arg._type}, expected ${names.toString()}`);
        return {
          guid: arg._guid
        };
      }
      throw new _validator.ValidationError(`${path}: expected dispatcher ${names.toString()}`);
    }
    registerDispatcher(dispatcher) {
      (0, _utils.assert)(!this._dispatchers.has(dispatcher._guid));
      this._dispatchers.set(dispatcher._guid, dispatcher);
      let list = this._dispatchersByBucket.get(dispatcher._gcBucket);
      if (!list) {
        list = new Set;
        this._dispatchersByBucket.set(dispatcher._gcBucket, list);
      }
      list.add(dispatcher._guid);
    }
    maybeDisposeStaleDispatchers(gcBucket) {
      const maxDispatchers = maxDispatchersForBucket(gcBucket);
      const list = this._dispatchersByBucket.get(gcBucket);
      if (!list || list.size <= maxDispatchers)
        return;
      const dispatchersArray = [...list];
      const disposeCount = maxDispatchers / 10 | 0;
      this._dispatchersByBucket.set(gcBucket, new Set(dispatchersArray.slice(disposeCount)));
      for (let i = 0;i < disposeCount; ++i) {
        const d = this._dispatchers.get(dispatchersArray[i]);
        if (!d)
          continue;
        d._dispose("gc");
      }
    }
    async dispatch(message) {
      var _sdkObject$attributio2, _sdkObject$attributio3, _params$info;
      const {
        id,
        guid,
        method,
        params,
        metadata
      } = message;
      const dispatcher = this._dispatchers.get(guid);
      if (!dispatcher) {
        this.onmessage({
          id,
          error: (0, _errors.serializeError)(new _errors.TargetClosedError)
        });
        return;
      }
      let validParams;
      let validMetadata;
      try {
        const validator = (0, _validator.findValidator)(dispatcher._type, method, "Params");
        validParams = validator(params, "", {
          tChannelImpl: this._tChannelImplFromWire.bind(this),
          binary: this._isLocal ? "buffer" : "fromBase64"
        });
        validMetadata = metadataValidator(metadata, "", {
          tChannelImpl: this._tChannelImplFromWire.bind(this),
          binary: this._isLocal ? "buffer" : "fromBase64"
        });
        if (typeof dispatcher[method] !== "function")
          throw new Error(`Mismatching dispatcher: "${dispatcher._type}" does not implement "${method}"`);
      } catch (e) {
        this.onmessage({
          id,
          error: (0, _errors.serializeError)(e)
        });
        return;
      }
      const sdkObject = dispatcher._object instanceof _instrumentation.SdkObject ? dispatcher._object : undefined;
      const callMetadata = {
        id: `call@${id}`,
        wallTime: validMetadata.wallTime || Date.now(),
        location: validMetadata.location,
        apiName: validMetadata.apiName,
        internal: validMetadata.internal,
        objectId: sdkObject === null || sdkObject === undefined ? undefined : sdkObject.guid,
        pageId: sdkObject === null || sdkObject === undefined || (_sdkObject$attributio2 = sdkObject.attribution) === null || _sdkObject$attributio2 === undefined || (_sdkObject$attributio2 = _sdkObject$attributio2.page) === null || _sdkObject$attributio2 === undefined ? undefined : _sdkObject$attributio2.guid,
        frameId: sdkObject === null || sdkObject === undefined || (_sdkObject$attributio3 = sdkObject.attribution) === null || _sdkObject$attributio3 === undefined || (_sdkObject$attributio3 = _sdkObject$attributio3.frame) === null || _sdkObject$attributio3 === undefined ? undefined : _sdkObject$attributio3.guid,
        startTime: (0, _utils.monotonicTime)(),
        endTime: 0,
        type: dispatcher._type,
        method,
        params: params || {},
        log: []
      };
      if (sdkObject && params !== null && params !== undefined && (_params$info = params.info) !== null && _params$info !== undefined && _params$info.waitId) {
        const info = params.info;
        switch (info.phase) {
          case "before": {
            this._waitOperations.set(info.waitId, callMetadata);
            await sdkObject.instrumentation.onBeforeCall(sdkObject, callMetadata);
            this.onmessage({
              id
            });
            return;
          }
          case "log": {
            const originalMetadata = this._waitOperations.get(info.waitId);
            originalMetadata.log.push(info.message);
            sdkObject.instrumentation.onCallLog(sdkObject, originalMetadata, "api", info.message);
            this.onmessage({
              id
            });
            return;
          }
          case "after": {
            const originalMetadata = this._waitOperations.get(info.waitId);
            originalMetadata.endTime = (0, _utils.monotonicTime)();
            originalMetadata.error = info.error ? {
              error: {
                name: "Error",
                message: info.error
              }
            } : undefined;
            this._waitOperations.delete(info.waitId);
            await sdkObject.instrumentation.onAfterCall(sdkObject, originalMetadata);
            this.onmessage({
              id
            });
            return;
          }
        }
      }
      await (sdkObject === null || sdkObject === undefined ? undefined : sdkObject.instrumentation.onBeforeCall(sdkObject, callMetadata));
      const response = {
        id
      };
      try {
        const result = await dispatcher._handleCommand(callMetadata, method, validParams);
        const validator = (0, _validator.findValidator)(dispatcher._type, method, "Result");
        response.result = validator(result, "", {
          tChannelImpl: this._tChannelImplToWire.bind(this),
          binary: this._isLocal ? "buffer" : "toBase64"
        });
        callMetadata.result = result;
      } catch (e) {
        if ((0, _errors.isTargetClosedError)(e) && sdkObject) {
          const reason = closeReason(sdkObject);
          if (reason)
            (0, _utils.rewriteErrorMessage)(e, reason);
        } else if ((0, _protocolError.isProtocolError)(e)) {
          if (e.type === "closed") {
            const reason = sdkObject ? closeReason(sdkObject) : undefined;
            e = new _errors.TargetClosedError(reason, e.browserLogMessage());
          } else if (e.type === "crashed") {
            (0, _utils.rewriteErrorMessage)(e, "Target crashed " + e.browserLogMessage());
          }
        }
        response.error = (0, _errors.serializeError)(e);
        callMetadata.error = response.error;
      } finally {
        callMetadata.endTime = (0, _utils.monotonicTime)();
        await (sdkObject === null || sdkObject === undefined ? undefined : sdkObject.instrumentation.onAfterCall(sdkObject, callMetadata));
      }
      if (response.error)
        response.log = callMetadata.log;
      this.onmessage(response);
    }
  }
  exports.DispatcherConnection = DispatcherConnection;
});

// node_modules/playwright-core/lib/common/timeoutSettings.js
var require_timeoutSettings = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TimeoutSettings = exports.DEFAULT_TIMEOUT = exports.DEFAULT_LAUNCH_TIMEOUT = undefined;
  var _utils = require_utils3();
  var DEFAULT_TIMEOUT = exports.DEFAULT_TIMEOUT = 30000;
  var DEFAULT_LAUNCH_TIMEOUT = exports.DEFAULT_LAUNCH_TIMEOUT = 3 * 60 * 1000;

  class TimeoutSettings {
    constructor(parent) {
      this._parent = undefined;
      this._defaultTimeout = undefined;
      this._defaultNavigationTimeout = undefined;
      this._parent = parent;
    }
    setDefaultTimeout(timeout) {
      this._defaultTimeout = timeout;
    }
    setDefaultNavigationTimeout(timeout) {
      this._defaultNavigationTimeout = timeout;
    }
    defaultNavigationTimeout() {
      return this._defaultNavigationTimeout;
    }
    defaultTimeout() {
      return this._defaultTimeout;
    }
    navigationTimeout(options) {
      if (typeof options.timeout === "number")
        return options.timeout;
      if (this._defaultNavigationTimeout !== undefined)
        return this._defaultNavigationTimeout;
      if ((0, _utils.debugMode)())
        return 0;
      if (this._defaultTimeout !== undefined)
        return this._defaultTimeout;
      if (this._parent)
        return this._parent.navigationTimeout(options);
      return DEFAULT_TIMEOUT;
    }
    timeout(options) {
      if (typeof options.timeout === "number")
        return options.timeout;
      if ((0, _utils.debugMode)())
        return 0;
      if (this._defaultTimeout !== undefined)
        return this._defaultTimeout;
      if (this._parent)
        return this._parent.timeout(options);
      return DEFAULT_TIMEOUT;
    }
    static timeout(options) {
      if (typeof options.timeout === "number")
        return options.timeout;
      if ((0, _utils.debugMode)())
        return 0;
      return DEFAULT_TIMEOUT;
    }
    static launchTimeout(options) {
      if (typeof options.timeout === "number")
        return options.timeout;
      if ((0, _utils.debugMode)())
        return 0;
      return DEFAULT_LAUNCH_TIMEOUT;
    }
  }
  exports.TimeoutSettings = TimeoutSettings;
});

// node_modules/playwright-core/lib/server/helper.js
var require_helper = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.helper = undefined;
  var _debugLogger = require_debugLogger();
  var _eventsHelper = require_eventsHelper();
  var MAX_LOG_LENGTH = process.env.MAX_LOG_LENGTH ? +process.env.MAX_LOG_LENGTH : Infinity;

  class Helper {
    static completeUserURL(urlString) {
      if (urlString.startsWith("localhost") || urlString.startsWith("127.0.0.1"))
        urlString = "http://" + urlString;
      return urlString;
    }
    static enclosingIntRect(rect) {
      const x = Math.floor(rect.x + 0.001);
      const y = Math.floor(rect.y + 0.001);
      const x2 = Math.ceil(rect.x + rect.width - 0.001);
      const y2 = Math.ceil(rect.y + rect.height - 0.001);
      return {
        x,
        y,
        width: x2 - x,
        height: y2 - y
      };
    }
    static enclosingIntSize(size) {
      return {
        width: Math.floor(size.width + 0.001),
        height: Math.floor(size.height + 0.001)
      };
    }
    static getViewportSizeFromWindowFeatures(features) {
      const widthString = features.find((f) => f.startsWith("width="));
      const heightString = features.find((f) => f.startsWith("height="));
      const width = widthString ? parseInt(widthString.substring(6), 10) : NaN;
      const height = heightString ? parseInt(heightString.substring(7), 10) : NaN;
      if (!Number.isNaN(width) && !Number.isNaN(height))
        return {
          width,
          height
        };
      return null;
    }
    static waitForEvent(progress2, emitter, event, predicate) {
      const listeners = [];
      const promise = new Promise((resolve, reject) => {
        listeners.push(_eventsHelper.eventsHelper.addEventListener(emitter, event, (eventArg) => {
          try {
            if (predicate && !predicate(eventArg))
              return;
            _eventsHelper.eventsHelper.removeEventListeners(listeners);
            resolve(eventArg);
          } catch (e) {
            _eventsHelper.eventsHelper.removeEventListeners(listeners);
            reject(e);
          }
        }));
      });
      const dispose = () => _eventsHelper.eventsHelper.removeEventListeners(listeners);
      if (progress2)
        progress2.cleanupWhenAborted(dispose);
      return {
        promise,
        dispose
      };
    }
    static secondsToRoundishMillis(value) {
      return (value * 1e6 | 0) / 1000;
    }
    static millisToRoundishMillis(value) {
      return (value * 1000 | 0) / 1000;
    }
    static debugProtocolLogger(protocolLogger) {
      return (direction, message) => {
        if (protocolLogger)
          protocolLogger(direction, message);
        if (_debugLogger.debugLogger.isEnabled("protocol")) {
          let text = JSON.stringify(message);
          if (text.length > MAX_LOG_LENGTH)
            text = text.substring(0, MAX_LOG_LENGTH / 2) + " <<<<<( LOG TRUNCATED )>>>>> " + text.substring(text.length - MAX_LOG_LENGTH / 2);
          _debugLogger.debugLogger.log("protocol", (direction === "send" ? "SEND \u25BA " : "\u25C0 RECV ") + text);
        }
      };
    }
    static formatBrowserLogs(logs) {
      if (!logs.length)
        return "";
      return "\n" + logs.join("\n");
    }
  }
  var helper = exports.helper = Helper;
});

// node_modules/playwright-core/lib/server/network.js
var require_network2 = __commonJS((exports) => {
  var filterCookies = function(cookies, urls) {
    const parsedURLs = urls.map((s) => new URL(s));
    return cookies.filter((c) => {
      if (!parsedURLs.length)
        return true;
      for (const parsedURL2 of parsedURLs) {
        let domain = c.domain;
        if (!domain.startsWith("."))
          domain = "." + domain;
        if (!("." + parsedURL2.hostname).endsWith(domain))
          continue;
        if (!parsedURL2.pathname.startsWith(c.path))
          continue;
        if (parsedURL2.protocol !== "https:" && parsedURL2.hostname !== "localhost" && c.secure)
          continue;
        return true;
      }
      return false;
    });
  };
  var rewriteCookies = function(cookies) {
    return cookies.map((c) => {
      (0, _utils.assert)(c.url || c.domain && c.path, "Cookie should have a url or a domain/path pair");
      (0, _utils.assert)(!(c.url && c.domain), "Cookie should have either url or domain");
      (0, _utils.assert)(!(c.url && c.path), "Cookie should have either url or path");
      (0, _utils.assert)(!(c.expires && c.expires < 0 && c.expires !== -1), "Cookie should have a valid expires, only -1 or a positive number for the unix timestamp in seconds is allowed");
      (0, _utils.assert)(!(c.expires && c.expires > 0 && c.expires > kMaxCookieExpiresDateInSeconds), "Cookie should have a valid expires, only -1 or a positive number for the unix timestamp in seconds is allowed");
      const copy = {
        ...c
      };
      if (copy.url) {
        (0, _utils.assert)(copy.url !== "about:blank", `Blank page can not have cookie "${c.name}"`);
        (0, _utils.assert)(!copy.url.startsWith("data:"), `Data URL page can not have cookie "${c.name}"`);
        const url = new URL(copy.url);
        copy.domain = url.hostname;
        copy.path = url.pathname.substring(0, url.pathname.lastIndexOf("/") + 1);
        copy.secure = url.protocol === "https:";
      }
      return copy;
    });
  };
  var parsedURL = function(url) {
    try {
      return new URL(url);
    } catch (e) {
      return null;
    }
  };
  var stripFragmentFromUrl = function(url) {
    if (!url.includes("#"))
      return url;
    return url.substring(0, url.indexOf("#"));
  };
  var singleHeader = function(name, value) {
    return [{
      name,
      value
    }];
  };
  var mergeHeaders = function(headers) {
    const lowerCaseToValue = new Map;
    const lowerCaseToOriginalCase = new Map;
    for (const h of headers) {
      if (!h)
        continue;
      for (const {
        name,
        value
      } of h) {
        const lower = name.toLowerCase();
        lowerCaseToOriginalCase.set(lower, name);
        lowerCaseToValue.set(lower, value);
      }
    }
    const result = [];
    for (const [lower, value] of lowerCaseToValue)
      result.push({
        name: lowerCaseToOriginalCase.get(lower),
        value
      });
    return result;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WebSocket = exports.STATUS_TEXTS = exports.Route = exports.Response = exports.Request = undefined;
  exports.filterCookies = filterCookies;
  exports.kMaxCookieExpiresDateInSeconds = undefined;
  exports.mergeHeaders = mergeHeaders;
  exports.parsedURL = parsedURL;
  exports.rewriteCookies = rewriteCookies;
  exports.singleHeader = singleHeader;
  exports.stripFragmentFromUrl = stripFragmentFromUrl;
  var _utils = require_utils3();
  var _manualPromise = require_manualPromise();
  var _instrumentation = require_instrumentation();
  var _fetch = require_fetch();
  var _browserContext = require_browserContext();
  var kMaxCookieExpiresDateInSeconds = exports.kMaxCookieExpiresDateInSeconds = 253402300799;

  class Request extends _instrumentation.SdkObject {
    constructor(context, frame, serviceWorker, redirectedFrom, documentId, url, resourceType, method, postData, headers) {
      super(frame || context, "request");
      this._response = null;
      this._redirectedFrom = undefined;
      this._redirectedTo = null;
      this._documentId = undefined;
      this._isFavicon = undefined;
      this._failureText = null;
      this._url = undefined;
      this._resourceType = undefined;
      this._method = undefined;
      this._postData = undefined;
      this._headers = undefined;
      this._headersMap = new Map;
      this._frame = null;
      this._serviceWorker = null;
      this._context = undefined;
      this._rawRequestHeadersPromise = new _manualPromise.ManualPromise;
      this._waitForResponsePromise = new _manualPromise.ManualPromise;
      this._responseEndTiming = -1;
      this._overrides = undefined;
      (0, _utils.assert)(!url.startsWith("data:"), "Data urls should not fire requests");
      this._context = context;
      this._frame = frame;
      this._serviceWorker = serviceWorker;
      this._redirectedFrom = redirectedFrom;
      if (redirectedFrom)
        redirectedFrom._redirectedTo = this;
      this._documentId = documentId;
      this._url = stripFragmentFromUrl(url);
      this._resourceType = resourceType;
      this._method = method;
      this._postData = postData;
      this._headers = headers;
      this._updateHeadersMap();
      this._isFavicon = url.endsWith("/favicon.ico") || !!(redirectedFrom !== null && redirectedFrom !== undefined && redirectedFrom._isFavicon);
    }
    _setFailureText(failureText) {
      this._failureText = failureText;
      this._waitForResponsePromise.resolve(null);
    }
    _setOverrides(overrides) {
      this._overrides = overrides;
      this._updateHeadersMap();
    }
    _updateHeadersMap() {
      for (const {
        name,
        value
      } of this.headers())
        this._headersMap.set(name.toLowerCase(), value);
    }
    _hasOverrides() {
      return !!this._overrides;
    }
    url() {
      var _this$_overrides;
      return ((_this$_overrides = this._overrides) === null || _this$_overrides === undefined ? undefined : _this$_overrides.url) || this._url;
    }
    resourceType() {
      return this._resourceType;
    }
    method() {
      var _this$_overrides2;
      return ((_this$_overrides2 = this._overrides) === null || _this$_overrides2 === undefined ? undefined : _this$_overrides2.method) || this._method;
    }
    postDataBuffer() {
      var _this$_overrides3;
      return ((_this$_overrides3 = this._overrides) === null || _this$_overrides3 === undefined ? undefined : _this$_overrides3.postData) || this._postData;
    }
    headers() {
      var _this$_overrides4;
      return ((_this$_overrides4 = this._overrides) === null || _this$_overrides4 === undefined ? undefined : _this$_overrides4.headers) || this._headers;
    }
    headerValue(name) {
      return this._headersMap.get(name);
    }
    setRawRequestHeaders(headers) {
      if (!this._rawRequestHeadersPromise.isDone())
        this._rawRequestHeadersPromise.resolve(headers || this._headers);
    }
    async rawRequestHeaders() {
      var _this$_overrides5;
      return ((_this$_overrides5 = this._overrides) === null || _this$_overrides5 === undefined ? undefined : _this$_overrides5.headers) || this._rawRequestHeadersPromise;
    }
    response() {
      return this._waitForResponsePromise;
    }
    _existingResponse() {
      return this._response;
    }
    _setResponse(response) {
      this._response = response;
      this._waitForResponsePromise.resolve(response);
    }
    _finalRequest() {
      return this._redirectedTo ? this._redirectedTo._finalRequest() : this;
    }
    frame() {
      return this._frame;
    }
    serviceWorker() {
      return this._serviceWorker;
    }
    isNavigationRequest() {
      return !!this._documentId;
    }
    redirectedFrom() {
      return this._redirectedFrom;
    }
    failure() {
      if (this._failureText === null)
        return null;
      return {
        errorText: this._failureText
      };
    }
    bodySize() {
      var _this$postDataBuffer;
      return ((_this$postDataBuffer = this.postDataBuffer()) === null || _this$postDataBuffer === undefined ? undefined : _this$postDataBuffer.length) || 0;
    }
    async requestHeadersSize() {
      let headersSize = 4;
      headersSize += this.method().length;
      headersSize += new URL(this.url()).pathname.length;
      headersSize += 8;
      const headers = await this.rawRequestHeaders();
      for (const header of headers)
        headersSize += header.name.length + header.value.length + 4;
      return headersSize;
    }
  }
  exports.Request = Request;

  class Route extends _instrumentation.SdkObject {
    constructor(request, delegate) {
      super(request._frame || request._context, "route");
      this._request = undefined;
      this._delegate = undefined;
      this._handled = false;
      this._request = request;
      this._delegate = delegate;
      this._request._context.addRouteInFlight(this);
    }
    request() {
      return this._request;
    }
    async abort(errorCode = "failed") {
      this._startHandling();
      this._request._context.emit(_browserContext.BrowserContext.Events.RequestAborted, this._request);
      await this._delegate.abort(errorCode);
      this._endHandling();
    }
    async redirectNavigationRequest(url) {
      this._startHandling();
      (0, _utils.assert)(this._request.isNavigationRequest());
      this._request.frame().redirectNavigation(url, this._request._documentId, this._request.headerValue("referer"));
    }
    async fulfill(overrides) {
      this._startHandling();
      let body = overrides.body;
      let isBase64 = overrides.isBase64 || false;
      if (body === undefined) {
        if (overrides.fetchResponseUid) {
          const buffer = this._request._context.fetchRequest.fetchResponses.get(overrides.fetchResponseUid) || _fetch.APIRequestContext.findResponseBody(overrides.fetchResponseUid);
          (0, _utils.assert)(buffer, "Fetch response has been disposed");
          body = buffer.toString("base64");
          isBase64 = true;
        } else {
          body = "";
          isBase64 = false;
        }
      }
      const headers = [...overrides.headers || []];
      this._maybeAddCorsHeaders(headers);
      this._request._context.emit(_browserContext.BrowserContext.Events.RequestFulfilled, this._request);
      await this._delegate.fulfill({
        status: overrides.status || 200,
        headers,
        body,
        isBase64
      });
      this._endHandling();
    }
    _maybeAddCorsHeaders(headers) {
      const origin = this._request.headerValue("origin");
      if (!origin)
        return;
      const requestUrl = new URL(this._request.url());
      if (!requestUrl.protocol.startsWith("http"))
        return;
      if (requestUrl.origin === origin.trim())
        return;
      const corsHeader = headers.find(({
        name
      }) => name === "access-control-allow-origin");
      if (corsHeader)
        return;
      headers.push({
        name: "access-control-allow-origin",
        value: origin
      });
      headers.push({
        name: "access-control-allow-credentials",
        value: "true"
      });
      headers.push({
        name: "vary",
        value: "Origin"
      });
    }
    async continue(overrides) {
      this._startHandling();
      if (overrides.url) {
        const newUrl = new URL(overrides.url);
        const oldUrl = new URL(this._request.url());
        if (oldUrl.protocol !== newUrl.protocol)
          throw new Error("New URL must have same protocol as overridden URL");
      }
      this._request._setOverrides(overrides);
      if (!overrides.isFallback)
        this._request._context.emit(_browserContext.BrowserContext.Events.RequestContinued, this._request);
      await this._delegate.continue(this._request, overrides);
      this._endHandling();
    }
    _startHandling() {
      (0, _utils.assert)(!this._handled, "Route is already handled!");
      this._handled = true;
    }
    _endHandling() {
      this._request._context.removeRouteInFlight(this);
    }
  }
  exports.Route = Route;

  class Response extends _instrumentation.SdkObject {
    constructor(request, status, statusText, headers, timing, getResponseBodyCallback, fromServiceWorker, httpVersion) {
      super(request.frame() || request._context, "response");
      this._request = undefined;
      this._contentPromise = null;
      this._finishedPromise = new _manualPromise.ManualPromise;
      this._status = undefined;
      this._statusText = undefined;
      this._url = undefined;
      this._headers = undefined;
      this._headersMap = new Map;
      this._getResponseBodyCallback = undefined;
      this._timing = undefined;
      this._serverAddrPromise = new _manualPromise.ManualPromise;
      this._securityDetailsPromise = new _manualPromise.ManualPromise;
      this._rawResponseHeadersPromise = new _manualPromise.ManualPromise;
      this._httpVersion = undefined;
      this._fromServiceWorker = undefined;
      this._encodedBodySizePromise = new _manualPromise.ManualPromise;
      this._transferSizePromise = new _manualPromise.ManualPromise;
      this._responseHeadersSizePromise = new _manualPromise.ManualPromise;
      this._request = request;
      this._timing = timing;
      this._status = status;
      this._statusText = statusText;
      this._url = request.url();
      this._headers = headers;
      for (const {
        name,
        value
      } of this._headers)
        this._headersMap.set(name.toLowerCase(), value);
      this._getResponseBodyCallback = getResponseBodyCallback;
      this._request._setResponse(this);
      this._httpVersion = httpVersion;
      this._fromServiceWorker = fromServiceWorker;
    }
    _serverAddrFinished(addr) {
      this._serverAddrPromise.resolve(addr);
    }
    _securityDetailsFinished(securityDetails) {
      this._securityDetailsPromise.resolve(securityDetails);
    }
    _requestFinished(responseEndTiming) {
      this._request._responseEndTiming = Math.max(responseEndTiming, this._timing.responseStart);
      if (this._timing.requestStart === -1)
        this._timing.requestStart = this._request._responseEndTiming;
      this._finishedPromise.resolve();
    }
    _setHttpVersion(httpVersion) {
      this._httpVersion = httpVersion;
    }
    url() {
      return this._url;
    }
    status() {
      return this._status;
    }
    statusText() {
      return this._statusText;
    }
    headers() {
      return this._headers;
    }
    headerValue(name) {
      return this._headersMap.get(name);
    }
    async rawResponseHeaders() {
      return this._rawResponseHeadersPromise;
    }
    setRawResponseHeaders(headers) {
      if (!this._rawResponseHeadersPromise.isDone())
        this._rawResponseHeadersPromise.resolve(headers || this._headers);
    }
    setTransferSize(size) {
      this._transferSizePromise.resolve(size);
    }
    setEncodedBodySize(size) {
      this._encodedBodySizePromise.resolve(size);
    }
    setResponseHeadersSize(size) {
      this._responseHeadersSizePromise.resolve(size);
    }
    timing() {
      return this._timing;
    }
    async serverAddr() {
      return await this._serverAddrPromise || null;
    }
    async securityDetails() {
      return await this._securityDetailsPromise || null;
    }
    body() {
      if (!this._contentPromise) {
        this._contentPromise = this._finishedPromise.then(async () => {
          if (this._status >= 300 && this._status <= 399)
            throw new Error("Response body is unavailable for redirect responses");
          return this._getResponseBodyCallback();
        });
      }
      return this._contentPromise;
    }
    request() {
      return this._request;
    }
    frame() {
      return this._request.frame();
    }
    httpVersion() {
      if (!this._httpVersion)
        return "HTTP/1.1";
      if (this._httpVersion === "http/1.1")
        return "HTTP/1.1";
      if (this._httpVersion === "h2")
        return "HTTP/2.0";
      return this._httpVersion;
    }
    fromServiceWorker() {
      return this._fromServiceWorker;
    }
    async responseHeadersSize() {
      const availableSize = await this._responseHeadersSizePromise;
      if (availableSize !== null)
        return availableSize;
      let headersSize = 4;
      headersSize += 8;
      headersSize += 3;
      headersSize += this.statusText().length;
      const headers = await this._rawResponseHeadersPromise;
      for (const header of headers)
        headersSize += header.name.length + header.value.length + 4;
      headersSize += 2;
      return headersSize;
    }
    async sizes() {
      const requestHeadersSize = await this._request.requestHeadersSize();
      const responseHeadersSize = await this.responseHeadersSize();
      let encodedBodySize = await this._encodedBodySizePromise;
      if (encodedBodySize === null) {
        var _headers$find;
        const headers = await this._rawResponseHeadersPromise;
        const contentLength = (_headers$find = headers.find((h) => h.name.toLowerCase() === "content-length")) === null || _headers$find === undefined ? undefined : _headers$find.value;
        encodedBodySize = contentLength ? +contentLength : 0;
      }
      let transferSize = await this._transferSizePromise;
      if (transferSize === null) {
        transferSize = responseHeadersSize + encodedBodySize;
      }
      return {
        requestBodySize: this._request.bodySize(),
        requestHeadersSize,
        responseBodySize: encodedBodySize,
        responseHeadersSize,
        transferSize
      };
    }
  }
  exports.Response = Response;

  class WebSocket extends _instrumentation.SdkObject {
    constructor(parent, url) {
      super(parent, "ws");
      this._url = undefined;
      this._notified = false;
      this._url = url;
    }
    markAsNotified() {
      if (this._notified)
        return false;
      this._notified = true;
      return true;
    }
    url() {
      return this._url;
    }
    frameSent(opcode, data) {
      this.emit(WebSocket.Events.FrameSent, {
        opcode,
        data
      });
    }
    frameReceived(opcode, data) {
      this.emit(WebSocket.Events.FrameReceived, {
        opcode,
        data
      });
    }
    error(errorMessage) {
      this.emit(WebSocket.Events.SocketError, errorMessage);
    }
    closed() {
      this.emit(WebSocket.Events.Close);
    }
  }
  exports.WebSocket = WebSocket;
  WebSocket.Events = {
    Close: "close",
    SocketError: "socketerror",
    FrameReceived: "framereceived",
    FrameSent: "framesent"
  };
  var STATUS_TEXTS = exports.STATUS_TEXTS = {
    "100": "Continue",
    "101": "Switching Protocols",
    "102": "Processing",
    "103": "Early Hints",
    "200": "OK",
    "201": "Created",
    "202": "Accepted",
    "203": "Non-Authoritative Information",
    "204": "No Content",
    "205": "Reset Content",
    "206": "Partial Content",
    "207": "Multi-Status",
    "208": "Already Reported",
    "226": "IM Used",
    "300": "Multiple Choices",
    "301": "Moved Permanently",
    "302": "Found",
    "303": "See Other",
    "304": "Not Modified",
    "305": "Use Proxy",
    "306": "Switch Proxy",
    "307": "Temporary Redirect",
    "308": "Permanent Redirect",
    "400": "Bad Request",
    "401": "Unauthorized",
    "402": "Payment Required",
    "403": "Forbidden",
    "404": "Not Found",
    "405": "Method Not Allowed",
    "406": "Not Acceptable",
    "407": "Proxy Authentication Required",
    "408": "Request Timeout",
    "409": "Conflict",
    "410": "Gone",
    "411": "Length Required",
    "412": "Precondition Failed",
    "413": "Payload Too Large",
    "414": "URI Too Long",
    "415": "Unsupported Media Type",
    "416": "Range Not Satisfiable",
    "417": "Expectation Failed",
    "418": "I\'m a teapot",
    "421": "Misdirected Request",
    "422": "Unprocessable Entity",
    "423": "Locked",
    "424": "Failed Dependency",
    "425": "Too Early",
    "426": "Upgrade Required",
    "428": "Precondition Required",
    "429": "Too Many Requests",
    "431": "Request Header Fields Too Large",
    "451": "Unavailable For Legal Reasons",
    "500": "Internal Server Error",
    "501": "Not Implemented",
    "502": "Bad Gateway",
    "503": "Service Unavailable",
    "504": "Gateway Timeout",
    "505": "HTTP Version Not Supported",
    "506": "Variant Also Negotiates",
    "507": "Insufficient Storage",
    "508": "Loop Detected",
    "510": "Not Extended",
    "511": "Network Authentication Required"
  };
});

// node_modules/playwright-core/lib/generated/injectedScriptSource.js
var require_injectedScriptSource = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.source = undefined;
  var source = exports.source = "\nvar __commonJS = obj => {\n  let required = false;\n  let result;\n  return function __require() {\n    if (!required) {\n      required = true;\n      let fn;\n      for (const name in obj) { fn = obj[name]; break; }\n      const module = { exports: {} };\n      fn(module.exports, module);\n      result = module.exports;\n    }\n    return result;\n  }\n};\nvar __export = (target, all) => {for (var name in all) target[name] = all[name];};\nvar __toESM = mod => ({ ...mod, 'default': mod });\nvar __toCommonJS = mod => ({ ...mod, __esModule: true });\n\n\n// packages/playwright-core/src/server/injected/injectedScript.ts\nvar injectedScript_exports = {};\n__export(injectedScript_exports, {\n  InjectedScript: () => InjectedScript\n});\nmodule.exports = __toCommonJS(injectedScript_exports);\n\n// packages/playwright-core/src/server/injected/xpathSelectorEngine.ts\nvar XPathEngine = {\n  queryAll(root, selector) {\n    if (selector.startsWith(\"/\") && root.nodeType !== Node.DOCUMENT_NODE)\n      selector = \".\" + selector;\n    const result = [];\n    const document = root.ownerDocument || root;\n    if (!document)\n      return result;\n    const it = document.evaluate(selector, root, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE);\n    for (let node = it.iterateNext(); node; node = it.iterateNext()) {\n      if (node.nodeType === Node.ELEMENT_NODE)\n        result.push(node);\n    }\n    return result;\n  }\n};\n\n// packages/playwright-core/src/server/injected/domUtils.ts\nvar browserNameForWorkarounds = \"\";\nfunction setBrowserName(name) {\n  browserNameForWorkarounds = name;\n}\nfunction isInsideScope(scope, element) {\n  while (element) {\n    if (scope.contains(element))\n      return true;\n    element = enclosingShadowHost(element);\n  }\n  return false;\n}\nfunction parentElementOrShadowHost(element) {\n  if (element.parentElement)\n    return element.parentElement;\n  if (!element.parentNode)\n    return;\n  if (element.parentNode.nodeType === 11 && element.parentNode.host)\n    return element.parentNode.host;\n}\nfunction enclosingShadowRootOrDocument(element) {\n  let node = element;\n  while (node.parentNode)\n    node = node.parentNode;\n  if (node.nodeType === 11 || node.nodeType === 9)\n    return node;\n}\nfunction enclosingShadowHost(element) {\n  while (element.parentElement)\n    element = element.parentElement;\n  return parentElementOrShadowHost(element);\n}\nfunction closestCrossShadow(element, css, scope) {\n  while (element) {\n    const closest = element.closest(css);\n    if (scope && closest !== scope && (closest == null ? void 0 : closest.contains(scope)))\n      return;\n    if (closest)\n      return closest;\n    element = enclosingShadowHost(element);\n  }\n}\nfunction getElementComputedStyle(element, pseudo) {\n  return element.ownerDocument && element.ownerDocument.defaultView ? element.ownerDocument.defaultView.getComputedStyle(element, pseudo) : void 0;\n}\nfunction isElementStyleVisibilityVisible(element, style) {\n  style = style != null ? style : getElementComputedStyle(element);\n  if (!style)\n    return true;\n  if (Element.prototype.checkVisibility && browserNameForWorkarounds !== \"webkit\") {\n    if (!element.checkVisibility({ checkOpacity: false, checkVisibilityCSS: false }))\n      return false;\n  } else {\n    const detailsOrSummary = element.closest(\"details,summary\");\n    if (detailsOrSummary !== element && (detailsOrSummary == null ? void 0 : detailsOrSummary.nodeName) === \"DETAILS\" && !detailsOrSummary.open)\n      return false;\n  }\n  if (style.visibility !== \"visible\")\n    return false;\n  return true;\n}\nfunction isElementVisible(element) {\n  const style = getElementComputedStyle(element);\n  if (!style)\n    return true;\n  if (style.display === \"contents\") {\n    for (let child = element.firstChild; child; child = child.nextSibling) {\n      if (child.nodeType === 1 && isElementVisible(child))\n        return true;\n      if (child.nodeType === 3 && isVisibleTextNode(child))\n        return true;\n    }\n    return false;\n  }\n  if (!isElementStyleVisibilityVisible(element, style))\n    return false;\n  const rect = element.getBoundingClientRect();\n  return rect.width > 0 && rect.height > 0;\n}\nfunction isVisibleTextNode(node) {\n  const range = node.ownerDocument.createRange();\n  range.selectNode(node);\n  const rect = range.getBoundingClientRect();\n  return rect.width > 0 && rect.height > 0;\n}\n\n// packages/playwright-core/src/utils/isomorphic/stringUtils.ts\nfunction escapeWithQuotes(text, char = \"'\") {\n  const stringified = JSON.stringify(text);\n  const escapedText = stringified.substring(1, stringified.length - 1).replace(/\\\\\"/g, '\"');\n  if (char === \"'\")\n    return char + escapedText.replace(/[']/g, \"\\\\'\") + char;\n  if (char === '\"')\n    return char + escapedText.replace(/[\"]/g, '\\\\\"') + char;\n  if (char === \"`\")\n    return char + escapedText.replace(/[`]/g, \"`\") + char;\n  throw new Error(\"Invalid escape char\");\n}\nfunction toTitleCase(name) {\n  return name.charAt(0).toUpperCase() + name.substring(1);\n}\nfunction toSnakeCase(name) {\n  return name.replace(/([a-z0-9])([A-Z])/g, \"$1_$2\").replace(/([A-Z])([A-Z][a-z])/g, \"$1_$2\").toLowerCase();\n}\nfunction cssEscape(s) {\n  let result = \"\";\n  for (let i = 0; i < s.length; i++)\n    result += cssEscapeOne(s, i);\n  return result;\n}\nfunction quoteCSSAttributeValue(text) {\n  return `\"${cssEscape(text).replace(/\\\\ /g, \" \")}\"`;\n}\nfunction cssEscapeOne(s, i) {\n  const c = s.charCodeAt(i);\n  if (c === 0)\n    return \"\\uFFFD\";\n  if (c >= 1 && c <= 31 || c >= 48 && c <= 57 && (i === 0 || i === 1 && s.charCodeAt(0) === 45))\n    return \"\\\\\" + c.toString(16) + \" \";\n  if (i === 0 && c === 45 && s.length === 1)\n    return \"\\\\\" + s.charAt(i);\n  if (c >= 128 || c === 45 || c === 95 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122)\n    return s.charAt(i);\n  return \"\\\\\" + s.charAt(i);\n}\nfunction normalizeWhiteSpace(text) {\n  return text.replace(/\\u200b/g, \"\").trim().replace(/\\s+/g, \" \");\n}\nfunction normalizeEscapedRegexQuotes(source) {\n  return source.replace(/(^|[^\\\\])(\\\\\\\\)*\\\\(['\"`])/g, \"$1$2$3\");\n}\nfunction escapeRegexForSelector(re) {\n  if (re.unicode || re.unicodeSets)\n    return String(re);\n  return String(re).replace(/(^|[^\\\\])(\\\\\\\\)*([\"'`])/g, \"$1$2\\\\$3\").replace(/>>/g, \"\\\\>\\\\>\");\n}\nfunction escapeForTextSelector(text, exact) {\n  if (typeof text !== \"string\")\n    return escapeRegexForSelector(text);\n  return `${JSON.stringify(text)}${exact ? \"s\" : \"i\"}`;\n}\nfunction escapeForAttributeSelector(value, exact) {\n  if (typeof value !== \"string\")\n    return escapeRegexForSelector(value);\n  return `\"${value.replace(/\\\\/g, \"\\\\\\\\\").replace(/[\"]/g, '\\\\\"')}\"${exact ? \"s\" : \"i\"}`;\n}\nfunction trimString(input, cap, suffix = \"\") {\n  if (input.length <= cap)\n    return input;\n  const chars = [...input];\n  if (chars.length > cap)\n    return chars.slice(0, cap - suffix.length).join(\"\") + suffix;\n  return chars.join(\"\");\n}\nfunction trimStringWithEllipsis(input, cap) {\n  return trimString(input, cap, \"\\u2026\");\n}\nfunction escapeRegExp(s) {\n  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n\n// packages/playwright-core/src/server/injected/roleUtils.ts\nfunction hasExplicitAccessibleName(e) {\n  return e.hasAttribute(\"aria-label\") || e.hasAttribute(\"aria-labelledby\");\n}\nvar kAncestorPreventingLandmark = \"article:not([role]), aside:not([role]), main:not([role]), nav:not([role]), section:not([role]), [role=article], [role=complementary], [role=main], [role=navigation], [role=region]\";\nvar kGlobalAriaAttributes = [\n  \"aria-atomic\",\n  \"aria-busy\",\n  \"aria-controls\",\n  \"aria-current\",\n  \"aria-describedby\",\n  \"aria-details\",\n  \"aria-disabled\",\n  \"aria-dropeffect\",\n  \"aria-errormessage\",\n  \"aria-flowto\",\n  \"aria-grabbed\",\n  \"aria-haspopup\",\n  \"aria-hidden\",\n  \"aria-invalid\",\n  \"aria-keyshortcuts\",\n  \"aria-label\",\n  \"aria-labelledby\",\n  \"aria-live\",\n  \"aria-owns\",\n  \"aria-relevant\",\n  \"aria-roledescription\"\n];\nfunction hasGlobalAriaAttribute(e) {\n  return kGlobalAriaAttributes.some((a) => e.hasAttribute(a));\n}\nvar kImplicitRoleByTagName = {\n  \"A\": (e) => {\n    return e.hasAttribute(\"href\") ? \"link\" : null;\n  },\n  \"AREA\": (e) => {\n    return e.hasAttribute(\"href\") ? \"link\" : null;\n  },\n  \"ARTICLE\": () => \"article\",\n  \"ASIDE\": () => \"complementary\",\n  \"BLOCKQUOTE\": () => \"blockquote\",\n  \"BUTTON\": () => \"button\",\n  \"CAPTION\": () => \"caption\",\n  \"CODE\": () => \"code\",\n  \"DATALIST\": () => \"listbox\",\n  \"DD\": () => \"definition\",\n  \"DEL\": () => \"deletion\",\n  \"DETAILS\": () => \"group\",\n  \"DFN\": () => \"term\",\n  \"DIALOG\": () => \"dialog\",\n  \"DT\": () => \"term\",\n  \"EM\": () => \"emphasis\",\n  \"FIELDSET\": () => \"group\",\n  \"FIGURE\": () => \"figure\",\n  \"FOOTER\": (e) => closestCrossShadow(e, kAncestorPreventingLandmark) ? null : \"contentinfo\",\n  \"FORM\": (e) => hasExplicitAccessibleName(e) ? \"form\" : null,\n  \"H1\": () => \"heading\",\n  \"H2\": () => \"heading\",\n  \"H3\": () => \"heading\",\n  \"H4\": () => \"heading\",\n  \"H5\": () => \"heading\",\n  \"H6\": () => \"heading\",\n  \"HEADER\": (e) => closestCrossShadow(e, kAncestorPreventingLandmark) ? null : \"banner\",\n  \"HR\": () => \"separator\",\n  \"HTML\": () => \"document\",\n  \"IMG\": (e) => e.getAttribute(\"alt\") === \"\" && !hasGlobalAriaAttribute(e) && Number.isNaN(Number(String(e.getAttribute(\"tabindex\")))) ? \"presentation\" : \"img\",\n  \"INPUT\": (e) => {\n    const type = e.type.toLowerCase();\n    if (type === \"search\")\n      return e.hasAttribute(\"list\") ? \"combobox\" : \"searchbox\";\n    if ([\"email\", \"tel\", \"text\", \"url\", \"\"].includes(type)) {\n      const list = getIdRefs(e, e.getAttribute(\"list\"))[0];\n      return list && list.tagName === \"DATALIST\" ? \"combobox\" : \"textbox\";\n    }\n    if (type === \"hidden\")\n      return \"\";\n    return {\n      \"button\": \"button\",\n      \"checkbox\": \"checkbox\",\n      \"image\": \"button\",\n      \"number\": \"spinbutton\",\n      \"radio\": \"radio\",\n      \"range\": \"slider\",\n      \"reset\": \"button\",\n      \"submit\": \"button\"\n    }[type] || \"textbox\";\n  },\n  \"INS\": () => \"insertion\",\n  \"LI\": () => \"listitem\",\n  \"MAIN\": () => \"main\",\n  \"MARK\": () => \"mark\",\n  \"MATH\": () => \"math\",\n  \"MENU\": () => \"list\",\n  \"METER\": () => \"meter\",\n  \"NAV\": () => \"navigation\",\n  \"OL\": () => \"list\",\n  \"OPTGROUP\": () => \"group\",\n  \"OPTION\": () => \"option\",\n  \"OUTPUT\": () => \"status\",\n  \"P\": () => \"paragraph\",\n  \"PROGRESS\": () => \"progressbar\",\n  \"SECTION\": (e) => hasExplicitAccessibleName(e) ? \"region\" : null,\n  \"SELECT\": (e) => e.hasAttribute(\"multiple\") || e.size > 1 ? \"listbox\" : \"combobox\",\n  \"STRONG\": () => \"strong\",\n  \"SUB\": () => \"subscript\",\n  \"SUP\": () => \"superscript\",\n  // For <svg> we default to Chrome behavior:\n  // - Chrome reports 'img'.\n  // - Firefox reports 'diagram' that is not in official ARIA spec yet.\n  // - Safari reports 'no role', but still computes accessible name.\n  \"SVG\": () => \"img\",\n  \"TABLE\": () => \"table\",\n  \"TBODY\": () => \"rowgroup\",\n  \"TD\": (e) => {\n    const table = closestCrossShadow(e, \"table\");\n    const role = table ? getExplicitAriaRole(table) : \"\";\n    return role === \"grid\" || role === \"treegrid\" ? \"gridcell\" : \"cell\";\n  },\n  \"TEXTAREA\": () => \"textbox\",\n  \"TFOOT\": () => \"rowgroup\",\n  \"TH\": (e) => {\n    if (e.getAttribute(\"scope\") === \"col\")\n      return \"columnheader\";\n    if (e.getAttribute(\"scope\") === \"row\")\n      return \"rowheader\";\n    const table = closestCrossShadow(e, \"table\");\n    const role = table ? getExplicitAriaRole(table) : \"\";\n    return role === \"grid\" || role === \"treegrid\" ? \"gridcell\" : \"cell\";\n  },\n  \"THEAD\": () => \"rowgroup\",\n  \"TIME\": () => \"time\",\n  \"TR\": () => \"row\",\n  \"UL\": () => \"list\"\n};\nvar kPresentationInheritanceParents = {\n  \"DD\": [\"DL\", \"DIV\"],\n  \"DIV\": [\"DL\"],\n  \"DT\": [\"DL\", \"DIV\"],\n  \"LI\": [\"OL\", \"UL\"],\n  \"TBODY\": [\"TABLE\"],\n  \"TD\": [\"TR\"],\n  \"TFOOT\": [\"TABLE\"],\n  \"TH\": [\"TR\"],\n  \"THEAD\": [\"TABLE\"],\n  \"TR\": [\"THEAD\", \"TBODY\", \"TFOOT\", \"TABLE\"]\n};\nfunction getImplicitAriaRole(element) {\n  var _a;\n  const implicitRole = ((_a = kImplicitRoleByTagName[element.tagName.toUpperCase()]) == null ? void 0 : _a.call(kImplicitRoleByTagName, element)) || \"\";\n  if (!implicitRole)\n    return null;\n  let ancestor = element;\n  while (ancestor) {\n    const parent = parentElementOrShadowHost(ancestor);\n    const parents = kPresentationInheritanceParents[ancestor.tagName];\n    if (!parents || !parent || !parents.includes(parent.tagName))\n      break;\n    const parentExplicitRole = getExplicitAriaRole(parent);\n    if ((parentExplicitRole === \"none\" || parentExplicitRole === \"presentation\") && !hasPresentationConflictResolution(parent))\n      return parentExplicitRole;\n    ancestor = parent;\n  }\n  return implicitRole;\n}\nvar allRoles = [\n  \"alert\",\n  \"alertdialog\",\n  \"application\",\n  \"article\",\n  \"banner\",\n  \"blockquote\",\n  \"button\",\n  \"caption\",\n  \"cell\",\n  \"checkbox\",\n  \"code\",\n  \"columnheader\",\n  \"combobox\",\n  \"command\",\n  \"complementary\",\n  \"composite\",\n  \"contentinfo\",\n  \"definition\",\n  \"deletion\",\n  \"dialog\",\n  \"directory\",\n  \"document\",\n  \"emphasis\",\n  \"feed\",\n  \"figure\",\n  \"form\",\n  \"generic\",\n  \"grid\",\n  \"gridcell\",\n  \"group\",\n  \"heading\",\n  \"img\",\n  \"input\",\n  \"insertion\",\n  \"landmark\",\n  \"link\",\n  \"list\",\n  \"listbox\",\n  \"listitem\",\n  \"log\",\n  \"main\",\n  \"marquee\",\n  \"math\",\n  \"meter\",\n  \"menu\",\n  \"menubar\",\n  \"menuitem\",\n  \"menuitemcheckbox\",\n  \"menuitemradio\",\n  \"navigation\",\n  \"none\",\n  \"note\",\n  \"option\",\n  \"paragraph\",\n  \"presentation\",\n  \"progressbar\",\n  \"radio\",\n  \"radiogroup\",\n  \"range\",\n  \"region\",\n  \"roletype\",\n  \"row\",\n  \"rowgroup\",\n  \"rowheader\",\n  \"scrollbar\",\n  \"search\",\n  \"searchbox\",\n  \"section\",\n  \"sectionhead\",\n  \"select\",\n  \"separator\",\n  \"slider\",\n  \"spinbutton\",\n  \"status\",\n  \"strong\",\n  \"structure\",\n  \"subscript\",\n  \"superscript\",\n  \"switch\",\n  \"tab\",\n  \"table\",\n  \"tablist\",\n  \"tabpanel\",\n  \"term\",\n  \"textbox\",\n  \"time\",\n  \"timer\",\n  \"toolbar\",\n  \"tooltip\",\n  \"tree\",\n  \"treegrid\",\n  \"treeitem\",\n  \"widget\",\n  \"window\"\n];\nvar abstractRoles = [\"command\", \"composite\", \"input\", \"landmark\", \"range\", \"roletype\", \"section\", \"sectionhead\", \"select\", \"structure\", \"widget\", \"window\"];\nvar validRoles = allRoles.filter((role) => !abstractRoles.includes(role));\nfunction getExplicitAriaRole(element) {\n  const roles = (element.getAttribute(\"role\") || \"\").split(\" \").map((role) => role.trim());\n  return roles.find((role) => validRoles.includes(role)) || null;\n}\nfunction hasPresentationConflictResolution(element) {\n  return !hasGlobalAriaAttribute(element);\n}\nfunction getAriaRole(element) {\n  const explicitRole = getExplicitAriaRole(element);\n  if (!explicitRole)\n    return getImplicitAriaRole(element);\n  if ((explicitRole === \"none\" || explicitRole === \"presentation\") && hasPresentationConflictResolution(element))\n    return getImplicitAriaRole(element);\n  return explicitRole;\n}\nfunction getAriaBoolean(attr) {\n  return attr === null ? void 0 : attr.toLowerCase() === \"true\";\n}\nfunction isElementHiddenForAria(element) {\n  if ([\"STYLE\", \"SCRIPT\", \"NOSCRIPT\", \"TEMPLATE\"].includes(element.tagName))\n    return true;\n  const style = getElementComputedStyle(element);\n  const isSlot = element.nodeName === \"SLOT\";\n  if ((style == null ? void 0 : style.display) === \"contents\" && !isSlot) {\n    for (let child = element.firstChild; child; child = child.nextSibling) {\n      if (child.nodeType === 1 && !isElementHiddenForAria(child))\n        return false;\n      if (child.nodeType === 3 && isVisibleTextNode(child))\n        return false;\n    }\n    return true;\n  }\n  const isOptionInsideSelect = element.nodeName === \"OPTION\" && !!element.closest(\"select\");\n  if (!isOptionInsideSelect && !isSlot && !isElementStyleVisibilityVisible(element, style))\n    return true;\n  return belongsToDisplayNoneOrAriaHiddenOrNonSlotted(element);\n}\nfunction belongsToDisplayNoneOrAriaHiddenOrNonSlotted(element) {\n  let hidden = cacheIsHidden == null ? void 0 : cacheIsHidden.get(element);\n  if (hidden === void 0) {\n    hidden = false;\n    if (element.parentElement && element.parentElement.shadowRoot && !element.assignedSlot)\n      hidden = true;\n    if (!hidden) {\n      const style = getElementComputedStyle(element);\n      hidden = !style || style.display === \"none\" || getAriaBoolean(element.getAttribute(\"aria-hidden\")) === true;\n    }\n    if (!hidden) {\n      const parent = parentElementOrShadowHost(element);\n      if (parent)\n        hidden = belongsToDisplayNoneOrAriaHiddenOrNonSlotted(parent);\n    }\n    cacheIsHidden == null ? void 0 : cacheIsHidden.set(element, hidden);\n  }\n  return hidden;\n}\nfunction getIdRefs(element, ref) {\n  if (!ref)\n    return [];\n  const root = enclosingShadowRootOrDocument(element);\n  if (!root)\n    return [];\n  try {\n    const ids = ref.split(\" \").filter((id) => !!id);\n    const set = /* @__PURE__ */ new Set();\n    for (const id of ids) {\n      const firstElement = root.querySelector(\"#\" + CSS.escape(id));\n      if (firstElement)\n        set.add(firstElement);\n    }\n    return [...set];\n  } catch (e) {\n    return [];\n  }\n}\nfunction normalizeAccessbileName(s) {\n  return s.replace(/\\r\\n/g, \"\\n\").replace(/\\u00A0/g, \" \").replace(/\\s\\s+/g, \" \").trim();\n}\nfunction queryInAriaOwned(element, selector) {\n  const result = [...element.querySelectorAll(selector)];\n  for (const owned of getIdRefs(element, element.getAttribute(\"aria-owns\"))) {\n    if (owned.matches(selector))\n      result.push(owned);\n    result.push(...owned.querySelectorAll(selector));\n  }\n  return result;\n}\nfunction getPseudoContent(element, pseudo) {\n  const cache = pseudo === \"::before\" ? cachePseudoContentBefore : cachePseudoContentAfter;\n  if (cache == null ? void 0 : cache.has(element))\n    return (cache == null ? void 0 : cache.get(element)) || \"\";\n  const pseudoStyle = getElementComputedStyle(element, pseudo);\n  const content = getPseudoContentImpl(pseudoStyle);\n  if (cache)\n    cache.set(element, content);\n  return content;\n}\nfunction getPseudoContentImpl(pseudoStyle) {\n  if (!pseudoStyle)\n    return \"\";\n  const content = pseudoStyle.content;\n  if (content[0] === \"'\" && content[content.length - 1] === \"'\" || content[0] === '\"' && content[content.length - 1] === '\"') {\n    const unquoted = content.substring(1, content.length - 1);\n    const display = pseudoStyle.display || \"inline\";\n    if (display !== \"inline\")\n      return \" \" + unquoted + \" \";\n    return unquoted;\n  }\n  return \"\";\n}\nfunction getAriaLabelledByElements(element) {\n  const ref = element.getAttribute(\"aria-labelledby\");\n  if (ref === null)\n    return null;\n  return getIdRefs(element, ref);\n}\nfunction allowsNameFromContent(role, targetDescendant) {\n  const alwaysAllowsNameFromContent = [\"button\", \"cell\", \"checkbox\", \"columnheader\", \"gridcell\", \"heading\", \"link\", \"menuitem\", \"menuitemcheckbox\", \"menuitemradio\", \"option\", \"radio\", \"row\", \"rowheader\", \"switch\", \"tab\", \"tooltip\", \"treeitem\"].includes(role);\n  const descendantAllowsNameFromContent = targetDescendant && [\"\", \"caption\", \"code\", \"contentinfo\", \"definition\", \"deletion\", \"emphasis\", \"insertion\", \"list\", \"listitem\", \"mark\", \"none\", \"paragraph\", \"presentation\", \"region\", \"row\", \"rowgroup\", \"section\", \"strong\", \"subscript\", \"superscript\", \"table\", \"term\", \"time\"].includes(role);\n  return alwaysAllowsNameFromContent || descendantAllowsNameFromContent;\n}\nfunction getElementAccessibleName(element, includeHidden) {\n  const cache = includeHidden ? cacheAccessibleNameHidden : cacheAccessibleName;\n  let accessibleName = cache == null ? void 0 : cache.get(element);\n  if (accessibleName === void 0) {\n    accessibleName = \"\";\n    const elementProhibitsNaming = [\"caption\", \"code\", \"definition\", \"deletion\", \"emphasis\", \"generic\", \"insertion\", \"mark\", \"paragraph\", \"presentation\", \"strong\", \"subscript\", \"suggestion\", \"superscript\", \"term\", \"time\"].includes(getAriaRole(element) || \"\");\n    if (!elementProhibitsNaming) {\n      accessibleName = normalizeAccessbileName(getElementAccessibleNameInternal(element, {\n        includeHidden,\n        visitedElements: /* @__PURE__ */ new Set(),\n        embeddedInLabelledBy: \"none\",\n        embeddedInLabel: \"none\",\n        embeddedInTextAlternativeElement: false,\n        embeddedInTargetElement: \"self\"\n      }));\n    }\n    cache == null ? void 0 : cache.set(element, accessibleName);\n  }\n  return accessibleName;\n}\nfunction getElementAccessibleNameInternal(element, options) {\n  if (options.visitedElements.has(element))\n    return \"\";\n  const childOptions = {\n    ...options,\n    embeddedInLabel: options.embeddedInLabel === \"self\" ? \"descendant\" : options.embeddedInLabel,\n    embeddedInLabelledBy: options.embeddedInLabelledBy === \"self\" ? \"descendant\" : options.embeddedInLabelledBy,\n    embeddedInTargetElement: options.embeddedInTargetElement === \"self\" ? \"descendant\" : options.embeddedInTargetElement\n  };\n  if (!options.includeHidden && options.embeddedInLabelledBy !== \"self\" && isElementHiddenForAria(element)) {\n    options.visitedElements.add(element);\n    return \"\";\n  }\n  const labelledBy = getAriaLabelledByElements(element);\n  if (options.embeddedInLabelledBy === \"none\") {\n    const accessibleName = (labelledBy || []).map((ref) => getElementAccessibleNameInternal(ref, {\n      ...options,\n      embeddedInLabelledBy: \"self\",\n      embeddedInTargetElement: \"none\",\n      embeddedInLabel: \"none\",\n      embeddedInTextAlternativeElement: false\n    })).join(\" \");\n    if (accessibleName)\n      return accessibleName;\n  }\n  const role = getAriaRole(element) || \"\";\n  if (options.embeddedInLabel !== \"none\" || options.embeddedInLabelledBy !== \"none\") {\n    const isOwnLabel = [...element.labels || []].includes(element);\n    const isOwnLabelledBy = (labelledBy || []).includes(element);\n    if (!isOwnLabel && !isOwnLabelledBy) {\n      if (role === \"textbox\") {\n        options.visitedElements.add(element);\n        if (element.tagName === \"INPUT\" || element.tagName === \"TEXTAREA\")\n          return element.value;\n        return element.textContent || \"\";\n      }\n      if ([\"combobox\", \"listbox\"].includes(role)) {\n        options.visitedElements.add(element);\n        let selectedOptions;\n        if (element.tagName === \"SELECT\") {\n          selectedOptions = [...element.selectedOptions];\n          if (!selectedOptions.length && element.options.length)\n            selectedOptions.push(element.options[0]);\n        } else {\n          const listbox = role === \"combobox\" ? queryInAriaOwned(element, \"*\").find((e) => getAriaRole(e) === \"listbox\") : element;\n          selectedOptions = listbox ? queryInAriaOwned(listbox, '[aria-selected=\"true\"]').filter((e) => getAriaRole(e) === \"option\") : [];\n        }\n        return selectedOptions.map((option) => getElementAccessibleNameInternal(option, childOptions)).join(\" \");\n      }\n      if ([\"progressbar\", \"scrollbar\", \"slider\", \"spinbutton\", \"meter\"].includes(role)) {\n        options.visitedElements.add(element);\n        if (element.hasAttribute(\"aria-valuetext\"))\n          return element.getAttribute(\"aria-valuetext\") || \"\";\n        if (element.hasAttribute(\"aria-valuenow\"))\n          return element.getAttribute(\"aria-valuenow\") || \"\";\n        return element.getAttribute(\"value\") || \"\";\n      }\n      if ([\"menu\"].includes(role)) {\n        options.visitedElements.add(element);\n        return \"\";\n      }\n    }\n  }\n  const ariaLabel = element.getAttribute(\"aria-label\") || \"\";\n  if (ariaLabel.trim()) {\n    options.visitedElements.add(element);\n    return ariaLabel;\n  }\n  if (![\"presentation\", \"none\"].includes(role)) {\n    if (element.tagName === \"INPUT\" && [\"button\", \"submit\", \"reset\"].includes(element.type)) {\n      options.visitedElements.add(element);\n      const value = element.value || \"\";\n      if (value.trim())\n        return value;\n      if (element.type === \"submit\")\n        return \"Submit\";\n      if (element.type === \"reset\")\n        return \"Reset\";\n      const title = element.getAttribute(\"title\") || \"\";\n      return title;\n    }\n    if (element.tagName === \"INPUT\" && element.type === \"image\") {\n      options.visitedElements.add(element);\n      const labels = element.labels || [];\n      if (labels.length && options.embeddedInLabelledBy === \"none\")\n        return getAccessibleNameFromAssociatedLabels(labels, options);\n      const alt = element.getAttribute(\"alt\") || \"\";\n      if (alt.trim())\n        return alt;\n      const title = element.getAttribute(\"title\") || \"\";\n      if (title.trim())\n        return title;\n      return \"Submit\";\n    }\n    if (!labelledBy && element.tagName === \"BUTTON\") {\n      options.visitedElements.add(element);\n      const labels = element.labels || [];\n      if (labels.length)\n        return getAccessibleNameFromAssociatedLabels(labels, options);\n    }\n    if (!labelledBy && element.tagName === \"OUTPUT\") {\n      options.visitedElements.add(element);\n      const labels = element.labels || [];\n      if (labels.length)\n        return getAccessibleNameFromAssociatedLabels(labels, options);\n      return element.getAttribute(\"title\") || \"\";\n    }\n    if (!labelledBy && (element.tagName === \"TEXTAREA\" || element.tagName === \"SELECT\" || element.tagName === \"INPUT\")) {\n      options.visitedElements.add(element);\n      const labels = element.labels || [];\n      if (labels.length)\n        return getAccessibleNameFromAssociatedLabels(labels, options);\n      const usePlaceholder = element.tagName === \"INPUT\" && [\"text\", \"password\", \"search\", \"tel\", \"email\", \"url\"].includes(element.type) || element.tagName === \"TEXTAREA\";\n      const placeholder = element.getAttribute(\"placeholder\") || \"\";\n      const title = element.getAttribute(\"title\") || \"\";\n      if (!usePlaceholder || title)\n        return title;\n      return placeholder;\n    }\n    if (!labelledBy && element.tagName === \"FIELDSET\") {\n      options.visitedElements.add(element);\n      for (let child = element.firstElementChild; child; child = child.nextElementSibling) {\n        if (child.tagName === \"LEGEND\") {\n          return getElementAccessibleNameInternal(child, {\n            ...childOptions,\n            embeddedInTextAlternativeElement: true\n          });\n        }\n      }\n      const title = element.getAttribute(\"title\") || \"\";\n      return title;\n    }\n    if (!labelledBy && element.tagName === \"FIGURE\") {\n      options.visitedElements.add(element);\n      for (let child = element.firstElementChild; child; child = child.nextElementSibling) {\n        if (child.tagName === \"FIGCAPTION\") {\n          return getElementAccessibleNameInternal(child, {\n            ...childOptions,\n            embeddedInTextAlternativeElement: true\n          });\n        }\n      }\n      const title = element.getAttribute(\"title\") || \"\";\n      return title;\n    }\n    if (element.tagName === \"IMG\") {\n      options.visitedElements.add(element);\n      const alt = element.getAttribute(\"alt\") || \"\";\n      if (alt.trim())\n        return alt;\n      const title = element.getAttribute(\"title\") || \"\";\n      return title;\n    }\n    if (element.tagName === \"TABLE\") {\n      options.visitedElements.add(element);\n      for (let child = element.firstElementChild; child; child = child.nextElementSibling) {\n        if (child.tagName === \"CAPTION\") {\n          return getElementAccessibleNameInternal(child, {\n            ...childOptions,\n            embeddedInTextAlternativeElement: true\n          });\n        }\n      }\n      const summary = element.getAttribute(\"summary\") || \"\";\n      if (summary)\n        return summary;\n    }\n    if (element.tagName === \"AREA\") {\n      options.visitedElements.add(element);\n      const alt = element.getAttribute(\"alt\") || \"\";\n      if (alt.trim())\n        return alt;\n      const title = element.getAttribute(\"title\") || \"\";\n      return title;\n    }\n    if (element.tagName.toUpperCase() === \"SVG\" || element.ownerSVGElement) {\n      options.visitedElements.add(element);\n      for (let child = element.firstElementChild; child; child = child.nextElementSibling) {\n        if (child.tagName.toUpperCase() === \"TITLE\" && child.ownerSVGElement) {\n          return getElementAccessibleNameInternal(child, {\n            ...childOptions,\n            embeddedInLabelledBy: \"self\"\n          });\n        }\n      }\n    }\n    if (element.ownerSVGElement && element.tagName.toUpperCase() === \"A\") {\n      const title = element.getAttribute(\"xlink:title\") || \"\";\n      if (title.trim()) {\n        options.visitedElements.add(element);\n        return title;\n      }\n    }\n  }\n  if (allowsNameFromContent(role, options.embeddedInTargetElement === \"descendant\") || options.embeddedInLabelledBy !== \"none\" || options.embeddedInLabel !== \"none\" || options.embeddedInTextAlternativeElement) {\n    options.visitedElements.add(element);\n    const tokens = [];\n    const visit = (node, skipSlotted) => {\n      var _a;\n      if (skipSlotted && node.assignedSlot)\n        return;\n      if (node.nodeType === 1) {\n        const display = ((_a = getElementComputedStyle(node)) == null ? void 0 : _a.display) || \"inline\";\n        let token = getElementAccessibleNameInternal(node, childOptions);\n        if (display !== \"inline\" || node.nodeName === \"BR\")\n          token = \" \" + token + \" \";\n        tokens.push(token);\n      } else if (node.nodeType === 3) {\n        tokens.push(node.textContent || \"\");\n      }\n    };\n    tokens.push(getPseudoContent(element, \"::before\"));\n    const assignedNodes = element.nodeName === \"SLOT\" ? element.assignedNodes() : [];\n    if (assignedNodes.length) {\n      for (const child of assignedNodes)\n        visit(child, false);\n    } else {\n      for (let child = element.firstChild; child; child = child.nextSibling)\n        visit(child, true);\n      if (element.shadowRoot) {\n        for (let child = element.shadowRoot.firstChild; child; child = child.nextSibling)\n          visit(child, true);\n      }\n      for (const owned of getIdRefs(element, element.getAttribute(\"aria-owns\")))\n        visit(owned, true);\n    }\n    tokens.push(getPseudoContent(element, \"::after\"));\n    const accessibleName = tokens.join(\"\");\n    if (accessibleName.trim())\n      return accessibleName;\n  }\n  if (![\"presentation\", \"none\"].includes(role) || element.tagName === \"IFRAME\") {\n    options.visitedElements.add(element);\n    const title = element.getAttribute(\"title\") || \"\";\n    if (title.trim())\n      return title;\n  }\n  options.visitedElements.add(element);\n  return \"\";\n}\nvar kAriaSelectedRoles = [\"gridcell\", \"option\", \"row\", \"tab\", \"rowheader\", \"columnheader\", \"treeitem\"];\nfunction getAriaSelected(element) {\n  if (element.tagName === \"OPTION\")\n    return element.selected;\n  if (kAriaSelectedRoles.includes(getAriaRole(element) || \"\"))\n    return getAriaBoolean(element.getAttribute(\"aria-selected\")) === true;\n  return false;\n}\nvar kAriaCheckedRoles = [\"checkbox\", \"menuitemcheckbox\", \"option\", \"radio\", \"switch\", \"menuitemradio\", \"treeitem\"];\nfunction getAriaChecked(element) {\n  const result = getChecked(element, true);\n  return result === \"error\" ? false : result;\n}\nfunction getChecked(element, allowMixed) {\n  if (allowMixed && element.tagName === \"INPUT\" && element.indeterminate)\n    return \"mixed\";\n  if (element.tagName === \"INPUT\" && [\"checkbox\", \"radio\"].includes(element.type))\n    return element.checked;\n  if (kAriaCheckedRoles.includes(getAriaRole(element) || \"\")) {\n    const checked = element.getAttribute(\"aria-checked\");\n    if (checked === \"true\")\n      return true;\n    if (allowMixed && checked === \"mixed\")\n      return \"mixed\";\n    return false;\n  }\n  return \"error\";\n}\nvar kAriaPressedRoles = [\"button\"];\nfunction getAriaPressed(element) {\n  if (kAriaPressedRoles.includes(getAriaRole(element) || \"\")) {\n    const pressed = element.getAttribute(\"aria-pressed\");\n    if (pressed === \"true\")\n      return true;\n    if (pressed === \"mixed\")\n      return \"mixed\";\n  }\n  return false;\n}\nvar kAriaExpandedRoles = [\"application\", \"button\", \"checkbox\", \"combobox\", \"gridcell\", \"link\", \"listbox\", \"menuitem\", \"row\", \"rowheader\", \"tab\", \"treeitem\", \"columnheader\", \"menuitemcheckbox\", \"menuitemradio\", \"rowheader\", \"switch\"];\nfunction getAriaExpanded(element) {\n  if (element.tagName === \"DETAILS\")\n    return element.open;\n  if (kAriaExpandedRoles.includes(getAriaRole(element) || \"\")) {\n    const expanded = element.getAttribute(\"aria-expanded\");\n    if (expanded === null)\n      return \"none\";\n    if (expanded === \"true\")\n      return true;\n    return false;\n  }\n  return \"none\";\n}\nvar kAriaLevelRoles = [\"heading\", \"listitem\", \"row\", \"treeitem\"];\nfunction getAriaLevel(element) {\n  const native = { \"H1\": 1, \"H2\": 2, \"H3\": 3, \"H4\": 4, \"H5\": 5, \"H6\": 6 }[element.tagName];\n  if (native)\n    return native;\n  if (kAriaLevelRoles.includes(getAriaRole(element) || \"\")) {\n    const attr = element.getAttribute(\"aria-level\");\n    const value = attr === null ? Number.NaN : Number(attr);\n    if (Number.isInteger(value) && value >= 1)\n      return value;\n  }\n  return 0;\n}\nvar kAriaDisabledRoles = [\"application\", \"button\", \"composite\", \"gridcell\", \"group\", \"input\", \"link\", \"menuitem\", \"scrollbar\", \"separator\", \"tab\", \"checkbox\", \"columnheader\", \"combobox\", \"grid\", \"listbox\", \"menu\", \"menubar\", \"menuitemcheckbox\", \"menuitemradio\", \"option\", \"radio\", \"radiogroup\", \"row\", \"rowheader\", \"searchbox\", \"select\", \"slider\", \"spinbutton\", \"switch\", \"tablist\", \"textbox\", \"toolbar\", \"tree\", \"treegrid\", \"treeitem\"];\nfunction getAriaDisabled(element) {\n  const isNativeFormControl = [\"BUTTON\", \"INPUT\", \"SELECT\", \"TEXTAREA\", \"OPTION\", \"OPTGROUP\"].includes(element.tagName);\n  if (isNativeFormControl && (element.hasAttribute(\"disabled\") || belongsToDisabledFieldSet(element)))\n    return true;\n  return hasExplicitAriaDisabled(element);\n}\nfunction belongsToDisabledFieldSet(element) {\n  if (!element)\n    return false;\n  if (element.tagName === \"FIELDSET\" && element.hasAttribute(\"disabled\"))\n    return true;\n  return belongsToDisabledFieldSet(element.parentElement);\n}\nfunction hasExplicitAriaDisabled(element) {\n  if (!element)\n    return false;\n  if (kAriaDisabledRoles.includes(getAriaRole(element) || \"\")) {\n    const attribute = (element.getAttribute(\"aria-disabled\") || \"\").toLowerCase();\n    if (attribute === \"true\")\n      return true;\n    if (attribute === \"false\")\n      return false;\n  }\n  return hasExplicitAriaDisabled(parentElementOrShadowHost(element));\n}\nfunction getAccessibleNameFromAssociatedLabels(labels, options) {\n  return [...labels].map((label) => getElementAccessibleNameInternal(label, {\n    ...options,\n    embeddedInLabel: \"self\",\n    embeddedInTextAlternativeElement: false,\n    embeddedInLabelledBy: \"none\",\n    embeddedInTargetElement: \"none\"\n  })).filter((accessibleName) => !!accessibleName).join(\" \");\n}\nfunction getElementsByRole(document, role) {\n  if (document === cacheElementsByRoleDocument)\n    return cacheElementsByRole.get(role) || [];\n  const map = calculateElementsByRoleMap(document);\n  if (cachesCounter) {\n    cacheElementsByRoleDocument = document;\n    cacheElementsByRole = map;\n  }\n  return map.get(role) || [];\n}\nfunction calculateElementsByRoleMap(document) {\n  const result = /* @__PURE__ */ new Map();\n  const visit = (root) => {\n    const shadows = [];\n    if (root.shadowRoot)\n      shadows.push(root.shadowRoot);\n    for (const element of root.querySelectorAll(\"*\")) {\n      const role = getAriaRole(element);\n      if (role) {\n        let list = result.get(role);\n        if (!list) {\n          list = [];\n          result.set(role, list);\n        }\n        list.push(element);\n      }\n      if (element.shadowRoot)\n        shadows.push(element.shadowRoot);\n    }\n    shadows.forEach(visit);\n  };\n  visit(document);\n  return result;\n}\nvar cacheAccessibleName;\nvar cacheAccessibleNameHidden;\nvar cacheIsHidden;\nvar cachePseudoContentBefore;\nvar cachePseudoContentAfter;\nvar cacheElementsByRole;\nvar cacheElementsByRoleDocument;\nvar cachesCounter = 0;\nfunction beginAriaCaches() {\n  ++cachesCounter;\n  cacheAccessibleName != null ? cacheAccessibleName : cacheAccessibleName = /* @__PURE__ */ new Map();\n  cacheAccessibleNameHidden != null ? cacheAccessibleNameHidden : cacheAccessibleNameHidden = /* @__PURE__ */ new Map();\n  cacheIsHidden != null ? cacheIsHidden : cacheIsHidden = /* @__PURE__ */ new Map();\n  cachePseudoContentBefore != null ? cachePseudoContentBefore : cachePseudoContentBefore = /* @__PURE__ */ new Map();\n  cachePseudoContentAfter != null ? cachePseudoContentAfter : cachePseudoContentAfter = /* @__PURE__ */ new Map();\n}\nfunction endAriaCaches() {\n  if (!--cachesCounter) {\n    cacheAccessibleName = void 0;\n    cacheAccessibleNameHidden = void 0;\n    cacheIsHidden = void 0;\n    cachePseudoContentBefore = void 0;\n    cachePseudoContentAfter = void 0;\n    cacheElementsByRole = void 0;\n    cacheElementsByRoleDocument = void 0;\n  }\n}\n\n// packages/playwright-core/src/server/injected/selectorUtils.ts\nfunction matchesComponentAttribute(obj, attr) {\n  for (const token of attr.jsonPath) {\n    if (obj !== void 0 && obj !== null)\n      obj = obj[token];\n  }\n  return matchesAttributePart(obj, attr);\n}\nfunction matchesAttributePart(value, attr) {\n  const objValue = typeof value === \"string\" && !attr.caseSensitive ? value.toUpperCase() : value;\n  const attrValue = typeof attr.value === \"string\" && !attr.caseSensitive ? attr.value.toUpperCase() : attr.value;\n  if (attr.op === \"<truthy>\")\n    return !!objValue;\n  if (attr.op === \"=\") {\n    if (attrValue instanceof RegExp)\n      return typeof objValue === \"string\" && !!objValue.match(attrValue);\n    return objValue === attrValue;\n  }\n  if (typeof objValue !== \"string\" || typeof attrValue !== \"string\")\n    return false;\n  if (attr.op === \"*=\")\n    return objValue.includes(attrValue);\n  if (attr.op === \"^=\")\n    return objValue.startsWith(attrValue);\n  if (attr.op === \"$=\")\n    return objValue.endsWith(attrValue);\n  if (attr.op === \"|=\")\n    return objValue === attrValue || objValue.startsWith(attrValue + \"-\");\n  if (attr.op === \"~=\")\n    return objValue.split(\" \").includes(attrValue);\n  return false;\n}\nfunction shouldSkipForTextMatching(element) {\n  const document = element.ownerDocument;\n  return element.nodeName === \"SCRIPT\" || element.nodeName === \"NOSCRIPT\" || element.nodeName === \"STYLE\" || document.head && document.head.contains(element);\n}\nfunction elementText(cache, root) {\n  let value = cache.get(root);\n  if (value === void 0) {\n    value = { full: \"\", normalized: \"\", immediate: [] };\n    if (!shouldSkipForTextMatching(root)) {\n      let currentImmediate = \"\";\n      if (root instanceof HTMLInputElement && (root.type === \"submit\" || root.type === \"button\")) {\n        value = { full: root.value, normalized: normalizeWhiteSpace(root.value), immediate: [root.value] };\n      } else {\n        for (let child = root.firstChild; child; child = child.nextSibling) {\n          if (child.nodeType === Node.TEXT_NODE) {\n            value.full += child.nodeValue || \"\";\n            currentImmediate += child.nodeValue || \"\";\n          } else {\n            if (currentImmediate)\n              value.immediate.push(currentImmediate);\n            currentImmediate = \"\";\n            if (child.nodeType === Node.ELEMENT_NODE)\n              value.full += elementText(cache, child).full;\n          }\n        }\n        if (currentImmediate)\n          value.immediate.push(currentImmediate);\n        if (root.shadowRoot)\n          value.full += elementText(cache, root.shadowRoot).full;\n        if (value.full)\n          value.normalized = normalizeWhiteSpace(value.full);\n      }\n    }\n    cache.set(root, value);\n  }\n  return value;\n}\nfunction elementMatchesText(cache, element, matcher) {\n  if (shouldSkipForTextMatching(element))\n    return \"none\";\n  if (!matcher(elementText(cache, element)))\n    return \"none\";\n  for (let child = element.firstChild; child; child = child.nextSibling) {\n    if (child.nodeType === Node.ELEMENT_NODE && matcher(elementText(cache, child)))\n      return \"selfAndChildren\";\n  }\n  if (element.shadowRoot && matcher(elementText(cache, element.shadowRoot)))\n    return \"selfAndChildren\";\n  return \"self\";\n}\nfunction getElementLabels(textCache, element) {\n  const labels = getAriaLabelledByElements(element);\n  if (labels)\n    return labels.map((label) => elementText(textCache, label));\n  const ariaLabel = element.getAttribute(\"aria-label\");\n  if (ariaLabel !== null && !!ariaLabel.trim())\n    return [{ full: ariaLabel, normalized: normalizeWhiteSpace(ariaLabel), immediate: [ariaLabel] }];\n  const isNonHiddenInput = element.nodeName === \"INPUT\" && element.type !== \"hidden\";\n  if ([\"BUTTON\", \"METER\", \"OUTPUT\", \"PROGRESS\", \"SELECT\", \"TEXTAREA\"].includes(element.nodeName) || isNonHiddenInput) {\n    const labels2 = element.labels;\n    if (labels2)\n      return [...labels2].map((label) => elementText(textCache, label));\n  }\n  return [];\n}\n\n// packages/playwright-core/src/utils/isomorphic/cssTokenizer.ts\nvar between = function(num, first, last) {\n  return num >= first && num <= last;\n};\nfunction digit(code) {\n  return between(code, 48, 57);\n}\nfunction hexdigit(code) {\n  return digit(code) || between(code, 65, 70) || between(code, 97, 102);\n}\nfunction uppercaseletter(code) {\n  return between(code, 65, 90);\n}\nfunction lowercaseletter(code) {\n  return between(code, 97, 122);\n}\nfunction letter(code) {\n  return uppercaseletter(code) || lowercaseletter(code);\n}\nfunction nonascii(code) {\n  return code >= 128;\n}\nfunction namestartchar(code) {\n  return letter(code) || nonascii(code) || code === 95;\n}\nfunction namechar(code) {\n  return namestartchar(code) || digit(code) || code === 45;\n}\nfunction nonprintable(code) {\n  return between(code, 0, 8) || code === 11 || between(code, 14, 31) || code === 127;\n}\nfunction newline(code) {\n  return code === 10;\n}\nfunction whitespace(code) {\n  return newline(code) || code === 9 || code === 32;\n}\nvar maximumallowedcodepoint = 1114111;\nvar InvalidCharacterError = class extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"InvalidCharacterError\";\n  }\n};\nfunction preprocess(str) {\n  const codepoints = [];\n  for (let i = 0; i < str.length; i++) {\n    let code = str.charCodeAt(i);\n    if (code === 13 && str.charCodeAt(i + 1) === 10) {\n      code = 10;\n      i++;\n    }\n    if (code === 13 || code === 12)\n      code = 10;\n    if (code === 0)\n      code = 65533;\n    if (between(code, 55296, 56319) && between(str.charCodeAt(i + 1), 56320, 57343)) {\n      const lead = code - 55296;\n      const trail = str.charCodeAt(i + 1) - 56320;\n      code = Math.pow(2, 16) + lead * Math.pow(2, 10) + trail;\n      i++;\n    }\n    codepoints.push(code);\n  }\n  return codepoints;\n}\nfunction stringFromCode(code) {\n  if (code <= 65535)\n    return String.fromCharCode(code);\n  code -= Math.pow(2, 16);\n  const lead = Math.floor(code / Math.pow(2, 10)) + 55296;\n  const trail = code % Math.pow(2, 10) + 56320;\n  return String.fromCharCode(lead) + String.fromCharCode(trail);\n}\nfunction tokenize(str1) {\n  const str = preprocess(str1);\n  let i = -1;\n  const tokens = [];\n  let code;\n  let line = 0;\n  let column = 0;\n  let lastLineLength = 0;\n  const incrLineno = function() {\n    line += 1;\n    lastLineLength = column;\n    column = 0;\n  };\n  const locStart = { line, column };\n  const codepoint = function(i2) {\n    if (i2 >= str.length)\n      return -1;\n    return str[i2];\n  };\n  const next = function(num) {\n    if (num === void 0)\n      num = 1;\n    if (num > 3)\n      throw \"Spec Error: no more than three codepoints of lookahead.\";\n    return codepoint(i + num);\n  };\n  const consume = function(num) {\n    if (num === void 0)\n      num = 1;\n    i += num;\n    code = codepoint(i);\n    if (newline(code))\n      incrLineno();\n    else\n      column += num;\n    return true;\n  };\n  const reconsume = function() {\n    i -= 1;\n    if (newline(code)) {\n      line -= 1;\n      column = lastLineLength;\n    } else {\n      column -= 1;\n    }\n    locStart.line = line;\n    locStart.column = column;\n    return true;\n  };\n  const eof = function(codepoint2) {\n    if (codepoint2 === void 0)\n      codepoint2 = code;\n    return codepoint2 === -1;\n  };\n  const donothing = function() {\n  };\n  const parseerror = function() {\n  };\n  const consumeAToken = function() {\n    consumeComments();\n    consume();\n    if (whitespace(code)) {\n      while (whitespace(next()))\n        consume();\n      return new WhitespaceToken();\n    } else if (code === 34) {\n      return consumeAStringToken();\n    } else if (code === 35) {\n      if (namechar(next()) || areAValidEscape(next(1), next(2))) {\n        const token = new HashToken(\"\");\n        if (wouldStartAnIdentifier(next(1), next(2), next(3)))\n          token.type = \"id\";\n        token.value = consumeAName();\n        return token;\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 36) {\n      if (next() === 61) {\n        consume();\n        return new SuffixMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 39) {\n      return consumeAStringToken();\n    } else if (code === 40) {\n      return new OpenParenToken();\n    } else if (code === 41) {\n      return new CloseParenToken();\n    } else if (code === 42) {\n      if (next() === 61) {\n        consume();\n        return new SubstringMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 43) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 44) {\n      return new CommaToken();\n    } else if (code === 45) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else if (next(1) === 45 && next(2) === 62) {\n        consume(2);\n        return new CDCToken();\n      } else if (startsWithAnIdentifier()) {\n        reconsume();\n        return consumeAnIdentlikeToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 46) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 58) {\n      return new ColonToken();\n    } else if (code === 59) {\n      return new SemicolonToken();\n    } else if (code === 60) {\n      if (next(1) === 33 && next(2) === 45 && next(3) === 45) {\n        consume(3);\n        return new CDOToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 64) {\n      if (wouldStartAnIdentifier(next(1), next(2), next(3)))\n        return new AtKeywordToken(consumeAName());\n      else\n        return new DelimToken(code);\n    } else if (code === 91) {\n      return new OpenSquareToken();\n    } else if (code === 92) {\n      if (startsWithAValidEscape()) {\n        reconsume();\n        return consumeAnIdentlikeToken();\n      } else {\n        parseerror();\n        return new DelimToken(code);\n      }\n    } else if (code === 93) {\n      return new CloseSquareToken();\n    } else if (code === 94) {\n      if (next() === 61) {\n        consume();\n        return new PrefixMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 123) {\n      return new OpenCurlyToken();\n    } else if (code === 124) {\n      if (next() === 61) {\n        consume();\n        return new DashMatchToken();\n      } else if (next() === 124) {\n        consume();\n        return new ColumnToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 125) {\n      return new CloseCurlyToken();\n    } else if (code === 126) {\n      if (next() === 61) {\n        consume();\n        return new IncludeMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (digit(code)) {\n      reconsume();\n      return consumeANumericToken();\n    } else if (namestartchar(code)) {\n      reconsume();\n      return consumeAnIdentlikeToken();\n    } else if (eof()) {\n      return new EOFToken();\n    } else {\n      return new DelimToken(code);\n    }\n  };\n  const consumeComments = function() {\n    while (next(1) === 47 && next(2) === 42) {\n      consume(2);\n      while (true) {\n        consume();\n        if (code === 42 && next() === 47) {\n          consume();\n          break;\n        } else if (eof()) {\n          parseerror();\n          return;\n        }\n      }\n    }\n  };\n  const consumeANumericToken = function() {\n    const num = consumeANumber();\n    if (wouldStartAnIdentifier(next(1), next(2), next(3))) {\n      const token = new DimensionToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      token.type = num.type;\n      token.unit = consumeAName();\n      return token;\n    } else if (next() === 37) {\n      consume();\n      const token = new PercentageToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      return token;\n    } else {\n      const token = new NumberToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      token.type = num.type;\n      return token;\n    }\n  };\n  const consumeAnIdentlikeToken = function() {\n    const str2 = consumeAName();\n    if (str2.toLowerCase() === \"url\" && next() === 40) {\n      consume();\n      while (whitespace(next(1)) && whitespace(next(2)))\n        consume();\n      if (next() === 34 || next() === 39)\n        return new FunctionToken(str2);\n      else if (whitespace(next()) && (next(2) === 34 || next(2) === 39))\n        return new FunctionToken(str2);\n      else\n        return consumeAURLToken();\n    } else if (next() === 40) {\n      consume();\n      return new FunctionToken(str2);\n    } else {\n      return new IdentToken(str2);\n    }\n  };\n  const consumeAStringToken = function(endingCodePoint) {\n    if (endingCodePoint === void 0)\n      endingCodePoint = code;\n    let string = \"\";\n    while (consume()) {\n      if (code === endingCodePoint || eof()) {\n        return new StringToken(string);\n      } else if (newline(code)) {\n        parseerror();\n        reconsume();\n        return new BadStringToken();\n      } else if (code === 92) {\n        if (eof(next()))\n          donothing();\n        else if (newline(next()))\n          consume();\n        else\n          string += stringFromCode(consumeEscape());\n      } else {\n        string += stringFromCode(code);\n      }\n    }\n    throw new Error(\"Internal error\");\n  };\n  const consumeAURLToken = function() {\n    const token = new URLToken(\"\");\n    while (whitespace(next()))\n      consume();\n    if (eof(next()))\n      return token;\n    while (consume()) {\n      if (code === 41 || eof()) {\n        return token;\n      } else if (whitespace(code)) {\n        while (whitespace(next()))\n          consume();\n        if (next() === 41 || eof(next())) {\n          consume();\n          return token;\n        } else {\n          consumeTheRemnantsOfABadURL();\n          return new BadURLToken();\n        }\n      } else if (code === 34 || code === 39 || code === 40 || nonprintable(code)) {\n        parseerror();\n        consumeTheRemnantsOfABadURL();\n        return new BadURLToken();\n      } else if (code === 92) {\n        if (startsWithAValidEscape()) {\n          token.value += stringFromCode(consumeEscape());\n        } else {\n          parseerror();\n          consumeTheRemnantsOfABadURL();\n          return new BadURLToken();\n        }\n      } else {\n        token.value += stringFromCode(code);\n      }\n    }\n    throw new Error(\"Internal error\");\n  };\n  const consumeEscape = function() {\n    consume();\n    if (hexdigit(code)) {\n      const digits = [code];\n      for (let total = 0; total < 5; total++) {\n        if (hexdigit(next())) {\n          consume();\n          digits.push(code);\n        } else {\n          break;\n        }\n      }\n      if (whitespace(next()))\n        consume();\n      let value = parseInt(digits.map(function(x) {\n        return String.fromCharCode(x);\n      }).join(\"\"), 16);\n      if (value > maximumallowedcodepoint)\n        value = 65533;\n      return value;\n    } else if (eof()) {\n      return 65533;\n    } else {\n      return code;\n    }\n  };\n  const areAValidEscape = function(c1, c2) {\n    if (c1 !== 92)\n      return false;\n    if (newline(c2))\n      return false;\n    return true;\n  };\n  const startsWithAValidEscape = function() {\n    return areAValidEscape(code, next());\n  };\n  const wouldStartAnIdentifier = function(c1, c2, c3) {\n    if (c1 === 45)\n      return namestartchar(c2) || c2 === 45 || areAValidEscape(c2, c3);\n    else if (namestartchar(c1))\n      return true;\n    else if (c1 === 92)\n      return areAValidEscape(c1, c2);\n    else\n      return false;\n  };\n  const startsWithAnIdentifier = function() {\n    return wouldStartAnIdentifier(code, next(1), next(2));\n  };\n  const wouldStartANumber = function(c1, c2, c3) {\n    if (c1 === 43 || c1 === 45) {\n      if (digit(c2))\n        return true;\n      if (c2 === 46 && digit(c3))\n        return true;\n      return false;\n    } else if (c1 === 46) {\n      if (digit(c2))\n        return true;\n      return false;\n    } else if (digit(c1)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  const startsWithANumber = function() {\n    return wouldStartANumber(code, next(1), next(2));\n  };\n  const consumeAName = function() {\n    let result = \"\";\n    while (consume()) {\n      if (namechar(code)) {\n        result += stringFromCode(code);\n      } else if (startsWithAValidEscape()) {\n        result += stringFromCode(consumeEscape());\n      } else {\n        reconsume();\n        return result;\n      }\n    }\n    throw new Error(\"Internal parse error\");\n  };\n  const consumeANumber = function() {\n    let repr = \"\";\n    let type = \"integer\";\n    if (next() === 43 || next() === 45) {\n      consume();\n      repr += stringFromCode(code);\n    }\n    while (digit(next())) {\n      consume();\n      repr += stringFromCode(code);\n    }\n    if (next(1) === 46 && digit(next(2))) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = \"number\";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    }\n    const c1 = next(1), c2 = next(2), c3 = next(3);\n    if ((c1 === 69 || c1 === 101) && digit(c2)) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = \"number\";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    } else if ((c1 === 69 || c1 === 101) && (c2 === 43 || c2 === 45) && digit(c3)) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = \"number\";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    }\n    const value = convertAStringToANumber(repr);\n    return { type, value, repr };\n  };\n  const convertAStringToANumber = function(string) {\n    return +string;\n  };\n  const consumeTheRemnantsOfABadURL = function() {\n    while (consume()) {\n      if (code === 41 || eof()) {\n        return;\n      } else if (startsWithAValidEscape()) {\n        consumeEscape();\n        donothing();\n      } else {\n        donothing();\n      }\n    }\n  };\n  let iterationCount = 0;\n  while (!eof(next())) {\n    tokens.push(consumeAToken());\n    iterationCount++;\n    if (iterationCount > str.length * 2)\n      throw new Error(\"I'm infinite-looping!\");\n  }\n  return tokens;\n}\nvar CSSParserToken = class {\n  constructor() {\n    this.tokenType = \"\";\n  }\n  toJSON() {\n    return { token: this.tokenType };\n  }\n  toString() {\n    return this.tokenType;\n  }\n  toSource() {\n    return \"\" + this;\n  }\n};\nvar BadStringToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"BADSTRING\";\n  }\n};\nvar BadURLToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"BADURL\";\n  }\n};\nvar WhitespaceToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"WHITESPACE\";\n  }\n  toString() {\n    return \"WS\";\n  }\n  toSource() {\n    return \" \";\n  }\n};\nvar CDOToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"CDO\";\n  }\n  toSource() {\n    return \"<!--\";\n  }\n};\nvar CDCToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"CDC\";\n  }\n  toSource() {\n    return \"-->\";\n  }\n};\nvar ColonToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \":\";\n  }\n};\nvar SemicolonToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \";\";\n  }\n};\nvar CommaToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \",\";\n  }\n};\nvar GroupingToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.value = \"\";\n    this.mirror = \"\";\n  }\n};\nvar OpenCurlyToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = \"{\";\n    this.value = \"{\";\n    this.mirror = \"}\";\n  }\n};\nvar CloseCurlyToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = \"}\";\n    this.value = \"}\";\n    this.mirror = \"{\";\n  }\n};\nvar OpenSquareToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = \"[\";\n    this.value = \"[\";\n    this.mirror = \"]\";\n  }\n};\nvar CloseSquareToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = \"]\";\n    this.value = \"]\";\n    this.mirror = \"[\";\n  }\n};\nvar OpenParenToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = \"(\";\n    this.value = \"(\";\n    this.mirror = \")\";\n  }\n};\nvar CloseParenToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = \")\";\n    this.value = \")\";\n    this.mirror = \"(\";\n  }\n};\nvar IncludeMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"~=\";\n  }\n};\nvar DashMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"|=\";\n  }\n};\nvar PrefixMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"^=\";\n  }\n};\nvar SuffixMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"$=\";\n  }\n};\nvar SubstringMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"*=\";\n  }\n};\nvar ColumnToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"||\";\n  }\n};\nvar EOFToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"EOF\";\n  }\n  toSource() {\n    return \"\";\n  }\n};\nvar DelimToken = class extends CSSParserToken {\n  constructor(code) {\n    super();\n    this.tokenType = \"DELIM\";\n    this.value = \"\";\n    this.value = stringFromCode(code);\n  }\n  toString() {\n    return \"DELIM(\" + this.value + \")\";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    return json;\n  }\n  toSource() {\n    if (this.value === \"\\\\\")\n      return \"\\\\\\n\";\n    else\n      return this.value;\n  }\n};\nvar StringValuedToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.value = \"\";\n  }\n  ASCIIMatch(str) {\n    return this.value.toLowerCase() === str.toLowerCase();\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    return json;\n  }\n};\nvar IdentToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = \"IDENT\";\n    this.value = val;\n  }\n  toString() {\n    return \"IDENT(\" + this.value + \")\";\n  }\n  toSource() {\n    return escapeIdent(this.value);\n  }\n};\nvar FunctionToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = \"FUNCTION\";\n    this.value = val;\n    this.mirror = \")\";\n  }\n  toString() {\n    return \"FUNCTION(\" + this.value + \")\";\n  }\n  toSource() {\n    return escapeIdent(this.value) + \"(\";\n  }\n};\nvar AtKeywordToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = \"AT-KEYWORD\";\n    this.value = val;\n  }\n  toString() {\n    return \"AT(\" + this.value + \")\";\n  }\n  toSource() {\n    return \"@\" + escapeIdent(this.value);\n  }\n};\nvar HashToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = \"HASH\";\n    this.value = val;\n    this.type = \"unrestricted\";\n  }\n  toString() {\n    return \"HASH(\" + this.value + \")\";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.type = this.type;\n    return json;\n  }\n  toSource() {\n    if (this.type === \"id\")\n      return \"#\" + escapeIdent(this.value);\n    else\n      return \"#\" + escapeHash(this.value);\n  }\n};\nvar StringToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = \"STRING\";\n    this.value = val;\n  }\n  toString() {\n    return '\"' + escapeString(this.value) + '\"';\n  }\n};\nvar URLToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = \"URL\";\n    this.value = val;\n  }\n  toString() {\n    return \"URL(\" + this.value + \")\";\n  }\n  toSource() {\n    return 'url(\"' + escapeString(this.value) + '\")';\n  }\n};\nvar NumberToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = \"NUMBER\";\n    this.type = \"integer\";\n    this.repr = \"\";\n  }\n  toString() {\n    if (this.type === \"integer\")\n      return \"INT(\" + this.value + \")\";\n    return \"NUMBER(\" + this.value + \")\";\n  }\n  toJSON() {\n    const json = super.toJSON();\n    json.value = this.value;\n    json.type = this.type;\n    json.repr = this.repr;\n    return json;\n  }\n  toSource() {\n    return this.repr;\n  }\n};\nvar PercentageToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = \"PERCENTAGE\";\n    this.repr = \"\";\n  }\n  toString() {\n    return \"PERCENTAGE(\" + this.value + \")\";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.repr = this.repr;\n    return json;\n  }\n  toSource() {\n    return this.repr + \"%\";\n  }\n};\nvar DimensionToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = \"DIMENSION\";\n    this.type = \"integer\";\n    this.repr = \"\";\n    this.unit = \"\";\n  }\n  toString() {\n    return \"DIM(\" + this.value + \",\" + this.unit + \")\";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.type = this.type;\n    json.repr = this.repr;\n    json.unit = this.unit;\n    return json;\n  }\n  toSource() {\n    const source = this.repr;\n    let unit = escapeIdent(this.unit);\n    if (unit[0].toLowerCase() === \"e\" && (unit[1] === \"-\" || between(unit.charCodeAt(1), 48, 57))) {\n      unit = \"\\\\65 \" + unit.slice(1, unit.length);\n    }\n    return source + unit;\n  }\n};\nfunction escapeIdent(string) {\n  string = \"\" + string;\n  let result = \"\";\n  const firstcode = string.charCodeAt(0);\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError(\"Invalid character: the input contains U+0000.\");\n    if (between(code, 1, 31) || code === 127 || i === 0 && between(code, 48, 57) || i === 1 && between(code, 48, 57) && firstcode === 45)\n      result += \"\\\\\" + code.toString(16) + \" \";\n    else if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))\n      result += string[i];\n    else\n      result += \"\\\\\" + string[i];\n  }\n  return result;\n}\nfunction escapeHash(string) {\n  string = \"\" + string;\n  let result = \"\";\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError(\"Invalid character: the input contains U+0000.\");\n    if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))\n      result += string[i];\n    else\n      result += \"\\\\\" + code.toString(16) + \" \";\n  }\n  return result;\n}\nfunction escapeString(string) {\n  string = \"\" + string;\n  let result = \"\";\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError(\"Invalid character: the input contains U+0000.\");\n    if (between(code, 1, 31) || code === 127)\n      result += \"\\\\\" + code.toString(16) + \" \";\n    else if (code === 34 || code === 92)\n      result += \"\\\\\" + string[i];\n    else\n      result += string[i];\n  }\n  return result;\n}\n\n// packages/playwright-core/src/utils/isomorphic/cssParser.ts\nvar InvalidSelectorError = class extends Error {\n};\nfunction parseCSS(selector, customNames) {\n  let tokens;\n  try {\n    tokens = tokenize(selector);\n    if (!(tokens[tokens.length - 1] instanceof EOFToken))\n      tokens.push(new EOFToken());\n  } catch (e) {\n    const newMessage = e.message + ` while parsing selector \"${selector}\"`;\n    const index = (e.stack || \"\").indexOf(e.message);\n    if (index !== -1)\n      e.stack = e.stack.substring(0, index) + newMessage + e.stack.substring(index + e.message.length);\n    e.message = newMessage;\n    throw e;\n  }\n  const unsupportedToken = tokens.find((token) => {\n    return token instanceof AtKeywordToken || token instanceof BadStringToken || token instanceof BadURLToken || token instanceof ColumnToken || token instanceof CDOToken || token instanceof CDCToken || token instanceof SemicolonToken || // TODO: Consider using these for something, e.g. to escape complex strings.\n    // For example :xpath{ (//div/bar[@attr=\"foo\"])[2]/baz }\n    // Or this way :xpath( {complex-xpath-goes-here(\"hello\")} )\n    token instanceof OpenCurlyToken || token instanceof CloseCurlyToken || // TODO: Consider treating these as strings?\n    token instanceof URLToken || token instanceof PercentageToken;\n  });\n  if (unsupportedToken)\n    throw new InvalidSelectorError(`Unsupported token \"${unsupportedToken.toSource()}\" while parsing selector \"${selector}\"`);\n  let pos = 0;\n  const names = /* @__PURE__ */ new Set();\n  function unexpected() {\n    return new InvalidSelectorError(`Unexpected token \"${tokens[pos].toSource()}\" while parsing selector \"${selector}\"`);\n  }\n  function skipWhitespace() {\n    while (tokens[pos] instanceof WhitespaceToken)\n      pos++;\n  }\n  function isIdent(p = pos) {\n    return tokens[p] instanceof IdentToken;\n  }\n  function isString(p = pos) {\n    return tokens[p] instanceof StringToken;\n  }\n  function isNumber(p = pos) {\n    return tokens[p] instanceof NumberToken;\n  }\n  function isComma(p = pos) {\n    return tokens[p] instanceof CommaToken;\n  }\n  function isOpenParen(p = pos) {\n    return tokens[p] instanceof OpenParenToken;\n  }\n  function isCloseParen(p = pos) {\n    return tokens[p] instanceof CloseParenToken;\n  }\n  function isFunction(p = pos) {\n    return tokens[p] instanceof FunctionToken;\n  }\n  function isStar(p = pos) {\n    return tokens[p] instanceof DelimToken && tokens[p].value === \"*\";\n  }\n  function isEOF(p = pos) {\n    return tokens[p] instanceof EOFToken;\n  }\n  function isClauseCombinator(p = pos) {\n    return tokens[p] instanceof DelimToken && [\">\", \"+\", \"~\"].includes(tokens[p].value);\n  }\n  function isSelectorClauseEnd(p = pos) {\n    return isComma(p) || isCloseParen(p) || isEOF(p) || isClauseCombinator(p) || tokens[p] instanceof WhitespaceToken;\n  }\n  function consumeFunctionArguments() {\n    const result2 = [consumeArgument()];\n    while (true) {\n      skipWhitespace();\n      if (!isComma())\n        break;\n      pos++;\n      result2.push(consumeArgument());\n    }\n    return result2;\n  }\n  function consumeArgument() {\n    skipWhitespace();\n    if (isNumber())\n      return tokens[pos++].value;\n    if (isString())\n      return tokens[pos++].value;\n    return consumeComplexSelector();\n  }\n  function consumeComplexSelector() {\n    const result2 = { simples: [] };\n    skipWhitespace();\n    if (isClauseCombinator()) {\n      result2.simples.push({ selector: { functions: [{ name: \"scope\", args: [] }] }, combinator: \"\" });\n    } else {\n      result2.simples.push({ selector: consumeSimpleSelector(), combinator: \"\" });\n    }\n    while (true) {\n      skipWhitespace();\n      if (isClauseCombinator()) {\n        result2.simples[result2.simples.length - 1].combinator = tokens[pos++].value;\n        skipWhitespace();\n      } else if (isSelectorClauseEnd()) {\n        break;\n      }\n      result2.simples.push({ combinator: \"\", selector: consumeSimpleSelector() });\n    }\n    return result2;\n  }\n  function consumeSimpleSelector() {\n    let rawCSSString = \"\";\n    const functions = [];\n    while (!isSelectorClauseEnd()) {\n      if (isIdent() || isStar()) {\n        rawCSSString += tokens[pos++].toSource();\n      } else if (tokens[pos] instanceof HashToken) {\n        rawCSSString += tokens[pos++].toSource();\n      } else if (tokens[pos] instanceof DelimToken && tokens[pos].value === \".\") {\n        pos++;\n        if (isIdent())\n          rawCSSString += \".\" + tokens[pos++].toSource();\n        else\n          throw unexpected();\n      } else if (tokens[pos] instanceof ColonToken) {\n        pos++;\n        if (isIdent()) {\n          if (!customNames.has(tokens[pos].value.toLowerCase())) {\n            rawCSSString += \":\" + tokens[pos++].toSource();\n          } else {\n            const name = tokens[pos++].value.toLowerCase();\n            functions.push({ name, args: [] });\n            names.add(name);\n          }\n        } else if (isFunction()) {\n          const name = tokens[pos++].value.toLowerCase();\n          if (!customNames.has(name)) {\n            rawCSSString += `:${name}(${consumeBuiltinFunctionArguments()})`;\n          } else {\n            functions.push({ name, args: consumeFunctionArguments() });\n            names.add(name);\n          }\n          skipWhitespace();\n          if (!isCloseParen())\n            throw unexpected();\n          pos++;\n        } else {\n          throw unexpected();\n        }\n      } else if (tokens[pos] instanceof OpenSquareToken) {\n        rawCSSString += \"[\";\n        pos++;\n        while (!(tokens[pos] instanceof CloseSquareToken) && !isEOF())\n          rawCSSString += tokens[pos++].toSource();\n        if (!(tokens[pos] instanceof CloseSquareToken))\n          throw unexpected();\n        rawCSSString += \"]\";\n        pos++;\n      } else {\n        throw unexpected();\n      }\n    }\n    if (!rawCSSString && !functions.length)\n      throw unexpected();\n    return { css: rawCSSString || void 0, functions };\n  }\n  function consumeBuiltinFunctionArguments() {\n    let s = \"\";\n    let balance = 1;\n    while (!isEOF()) {\n      if (isOpenParen() || isFunction())\n        balance++;\n      if (isCloseParen())\n        balance--;\n      if (!balance)\n        break;\n      s += tokens[pos++].toSource();\n    }\n    return s;\n  }\n  const result = consumeFunctionArguments();\n  if (!isEOF())\n    throw unexpected();\n  if (result.some((arg) => typeof arg !== \"object\" || !(\"simples\" in arg)))\n    throw new InvalidSelectorError(`Error while parsing selector \"${selector}\"`);\n  return { selector: result, names: Array.from(names) };\n}\n\n// packages/playwright-core/src/utils/isomorphic/selectorParser.ts\nvar kNestedSelectorNames = /* @__PURE__ */ new Set([\"internal:has\", \"internal:has-not\", \"internal:and\", \"internal:or\", \"internal:chain\", \"left-of\", \"right-of\", \"above\", \"below\", \"near\"]);\nvar kNestedSelectorNamesWithDistance = /* @__PURE__ */ new Set([\"left-of\", \"right-of\", \"above\", \"below\", \"near\"]);\nvar customCSSNames = /* @__PURE__ */ new Set([\"not\", \"is\", \"where\", \"has\", \"scope\", \"light\", \"visible\", \"text\", \"text-matches\", \"text-is\", \"has-text\", \"above\", \"below\", \"right-of\", \"left-of\", \"near\", \"nth-match\"]);\nfunction parseSelector(selector) {\n  const parsedStrings = parseSelectorString(selector);\n  const parts = [];\n  for (const part of parsedStrings.parts) {\n    if (part.name === \"css\" || part.name === \"css:light\") {\n      if (part.name === \"css:light\")\n        part.body = \":light(\" + part.body + \")\";\n      const parsedCSS = parseCSS(part.body, customCSSNames);\n      parts.push({\n        name: \"css\",\n        body: parsedCSS.selector,\n        source: part.body\n      });\n      continue;\n    }\n    if (kNestedSelectorNames.has(part.name)) {\n      let innerSelector;\n      let distance;\n      try {\n        const unescaped = JSON.parse(\"[\" + part.body + \"]\");\n        if (!Array.isArray(unescaped) || unescaped.length < 1 || unescaped.length > 2 || typeof unescaped[0] !== \"string\")\n          throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n        innerSelector = unescaped[0];\n        if (unescaped.length === 2) {\n          if (typeof unescaped[1] !== \"number\" || !kNestedSelectorNamesWithDistance.has(part.name))\n            throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n          distance = unescaped[1];\n        }\n      } catch (e) {\n        throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n      }\n      const nested = { name: part.name, source: part.body, body: { parsed: parseSelector(innerSelector), distance } };\n      const lastFrame = [...nested.body.parsed.parts].reverse().find((part2) => part2.name === \"internal:control\" && part2.body === \"enter-frame\");\n      const lastFrameIndex = lastFrame ? nested.body.parsed.parts.indexOf(lastFrame) : -1;\n      if (lastFrameIndex !== -1 && selectorPartsEqual(nested.body.parsed.parts.slice(0, lastFrameIndex + 1), parts.slice(0, lastFrameIndex + 1)))\n        nested.body.parsed.parts.splice(0, lastFrameIndex + 1);\n      parts.push(nested);\n      continue;\n    }\n    parts.push({ ...part, source: part.body });\n  }\n  if (kNestedSelectorNames.has(parts[0].name))\n    throw new InvalidSelectorError(`\"${parts[0].name}\" selector cannot be first`);\n  return {\n    capture: parsedStrings.capture,\n    parts\n  };\n}\nfunction selectorPartsEqual(list1, list2) {\n  return stringifySelector({ parts: list1 }) === stringifySelector({ parts: list2 });\n}\nfunction stringifySelector(selector, forceEngineName) {\n  if (typeof selector === \"string\")\n    return selector;\n  return selector.parts.map((p, i) => {\n    let includeEngine = true;\n    if (!forceEngineName && i !== selector.capture) {\n      if (p.name === \"css\")\n        includeEngine = false;\n      else if (p.name === \"xpath\" && p.source.startsWith(\"//\") || p.source.startsWith(\"..\"))\n        includeEngine = false;\n    }\n    const prefix = includeEngine ? p.name + \"=\" : \"\";\n    return `${i === selector.capture ? \"*\" : \"\"}${prefix}${p.source}`;\n  }).join(\" >> \");\n}\nfunction visitAllSelectorParts(selector, visitor) {\n  const visit = (selector2, nested) => {\n    for (const part of selector2.parts) {\n      visitor(part, nested);\n      if (kNestedSelectorNames.has(part.name))\n        visit(part.body.parsed, true);\n    }\n  };\n  visit(selector, false);\n}\nfunction parseSelectorString(selector) {\n  let index = 0;\n  let quote;\n  let start = 0;\n  const result = { parts: [] };\n  const append = () => {\n    const part = selector.substring(start, index).trim();\n    const eqIndex = part.indexOf(\"=\");\n    let name;\n    let body;\n    if (eqIndex !== -1 && part.substring(0, eqIndex).trim().match(/^[a-zA-Z_0-9-+:*]+$/)) {\n      name = part.substring(0, eqIndex).trim();\n      body = part.substring(eqIndex + 1);\n    } else if (part.length > 1 && part[0] === '\"' && part[part.length - 1] === '\"') {\n      name = \"text\";\n      body = part;\n    } else if (part.length > 1 && part[0] === \"'\" && part[part.length - 1] === \"'\") {\n      name = \"text\";\n      body = part;\n    } else if (/^\\(*\\/\\//.test(part) || part.startsWith(\"..\")) {\n      name = \"xpath\";\n      body = part;\n    } else {\n      name = \"css\";\n      body = part;\n    }\n    let capture = false;\n    if (name[0] === \"*\") {\n      capture = true;\n      name = name.substring(1);\n    }\n    result.parts.push({ name, body });\n    if (capture) {\n      if (result.capture !== void 0)\n        throw new InvalidSelectorError(`Only one of the selectors can capture using * modifier`);\n      result.capture = result.parts.length - 1;\n    }\n  };\n  if (!selector.includes(\">>\")) {\n    index = selector.length;\n    append();\n    return result;\n  }\n  const shouldIgnoreTextSelectorQuote = () => {\n    const prefix = selector.substring(start, index);\n    const match = prefix.match(/^\\s*text\\s*=(.*)$/);\n    return !!match && !!match[1];\n  };\n  while (index < selector.length) {\n    const c = selector[index];\n    if (c === \"\\\\\" && index + 1 < selector.length) {\n      index += 2;\n    } else if (c === quote) {\n      quote = void 0;\n      index++;\n    } else if (!quote && (c === '\"' || c === \"'\" || c === \"`\") && !shouldIgnoreTextSelectorQuote()) {\n      quote = c;\n      index++;\n    } else if (!quote && c === \">\" && selector[index + 1] === \">\") {\n      append();\n      index += 2;\n      start = index;\n    } else {\n      index++;\n    }\n  }\n  append();\n  return result;\n}\nfunction parseAttributeSelector(selector, allowUnquotedStrings) {\n  let wp = 0;\n  let EOL = selector.length === 0;\n  const next = () => selector[wp] || \"\";\n  const eat1 = () => {\n    const result2 = next();\n    ++wp;\n    EOL = wp >= selector.length;\n    return result2;\n  };\n  const syntaxError = (stage) => {\n    if (EOL)\n      throw new InvalidSelectorError(`Unexpected end of selector while parsing selector \\`${selector}\\``);\n    throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - unexpected symbol \"${next()}\" at position ${wp}` + (stage ? \" during \" + stage : \"\"));\n  };\n  function skipSpaces() {\n    while (!EOL && /\\s/.test(next()))\n      eat1();\n  }\n  function isCSSNameChar(char) {\n    return char >= \"\\x80\" || char >= \"0\" && char <= \"9\" || char >= \"A\" && char <= \"Z\" || char >= \"a\" && char <= \"z\" || char >= \"0\" && char <= \"9\" || char === \"_\" || char === \"-\";\n  }\n  function readIdentifier() {\n    let result2 = \"\";\n    skipSpaces();\n    while (!EOL && isCSSNameChar(next()))\n      result2 += eat1();\n    return result2;\n  }\n  function readQuotedString(quote) {\n    let result2 = eat1();\n    if (result2 !== quote)\n      syntaxError(\"parsing quoted string\");\n    while (!EOL && next() !== quote) {\n      if (next() === \"\\\\\")\n        eat1();\n      result2 += eat1();\n    }\n    if (next() !== quote)\n      syntaxError(\"parsing quoted string\");\n    result2 += eat1();\n    return result2;\n  }\n  function readRegularExpression() {\n    if (eat1() !== \"/\")\n      syntaxError(\"parsing regular expression\");\n    let source = \"\";\n    let inClass = false;\n    while (!EOL) {\n      if (next() === \"\\\\\") {\n        source += eat1();\n        if (EOL)\n          syntaxError(\"parsing regular expression\");\n      } else if (inClass && next() === \"]\") {\n        inClass = false;\n      } else if (!inClass && next() === \"[\") {\n        inClass = true;\n      } else if (!inClass && next() === \"/\") {\n        break;\n      }\n      source += eat1();\n    }\n    if (eat1() !== \"/\")\n      syntaxError(\"parsing regular expression\");\n    let flags = \"\";\n    while (!EOL && next().match(/[dgimsuy]/))\n      flags += eat1();\n    try {\n      return new RegExp(source, flags);\n    } catch (e) {\n      throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\`: ${e.message}`);\n    }\n  }\n  function readAttributeToken() {\n    let token = \"\";\n    skipSpaces();\n    if (next() === `'` || next() === `\"`)\n      token = readQuotedString(next()).slice(1, -1);\n    else\n      token = readIdentifier();\n    if (!token)\n      syntaxError(\"parsing property path\");\n    return token;\n  }\n  function readOperator() {\n    skipSpaces();\n    let op = \"\";\n    if (!EOL)\n      op += eat1();\n    if (!EOL && op !== \"=\")\n      op += eat1();\n    if (![\"=\", \"*=\", \"^=\", \"$=\", \"|=\", \"~=\"].includes(op))\n      syntaxError(\"parsing operator\");\n    return op;\n  }\n  function readAttribute() {\n    eat1();\n    const jsonPath = [];\n    jsonPath.push(readAttributeToken());\n    skipSpaces();\n    while (next() === \".\") {\n      eat1();\n      jsonPath.push(readAttributeToken());\n      skipSpaces();\n    }\n    if (next() === \"]\") {\n      eat1();\n      return { name: jsonPath.join(\".\"), jsonPath, op: \"<truthy>\", value: null, caseSensitive: false };\n    }\n    const operator = readOperator();\n    let value = void 0;\n    let caseSensitive = true;\n    skipSpaces();\n    if (next() === \"/\") {\n      if (operator !== \"=\")\n        throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - cannot use ${operator} in attribute with regular expression`);\n      value = readRegularExpression();\n    } else if (next() === `'` || next() === `\"`) {\n      value = readQuotedString(next()).slice(1, -1);\n      skipSpaces();\n      if (next() === \"i\" || next() === \"I\") {\n        caseSensitive = false;\n        eat1();\n      } else if (next() === \"s\" || next() === \"S\") {\n        caseSensitive = true;\n        eat1();\n      }\n    } else {\n      value = \"\";\n      while (!EOL && (isCSSNameChar(next()) || next() === \"+\" || next() === \".\"))\n        value += eat1();\n      if (value === \"true\") {\n        value = true;\n      } else if (value === \"false\") {\n        value = false;\n      } else {\n        if (!allowUnquotedStrings) {\n          value = +value;\n          if (Number.isNaN(value))\n            syntaxError(\"parsing attribute value\");\n        }\n      }\n    }\n    skipSpaces();\n    if (next() !== \"]\")\n      syntaxError(\"parsing attribute value\");\n    eat1();\n    if (operator !== \"=\" && typeof value !== \"string\")\n      throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - cannot use ${operator} in attribute with non-string matching value - ${value}`);\n    return { name: jsonPath.join(\".\"), jsonPath, op: operator, value, caseSensitive };\n  }\n  const result = {\n    name: \"\",\n    attributes: []\n  };\n  result.name = readIdentifier();\n  skipSpaces();\n  while (next() === \"[\") {\n    result.attributes.push(readAttribute());\n    skipSpaces();\n  }\n  if (!EOL)\n    syntaxError(void 0);\n  if (!result.name && !result.attributes.length)\n    throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - selector cannot be empty`);\n  return result;\n}\n\n// packages/playwright-core/src/server/injected/reactSelectorEngine.ts\nfunction getFunctionComponentName(component) {\n  return component.displayName || component.name || \"Anonymous\";\n}\nfunction getComponentName(reactElement) {\n  if (reactElement.type) {\n    switch (typeof reactElement.type) {\n      case \"function\":\n        return getFunctionComponentName(reactElement.type);\n      case \"string\":\n        return reactElement.type;\n      case \"object\":\n        return reactElement.type.displayName || (reactElement.type.render ? getFunctionComponentName(reactElement.type.render) : \"\");\n    }\n  }\n  if (reactElement._currentElement) {\n    const elementType = reactElement._currentElement.type;\n    if (typeof elementType === \"string\")\n      return elementType;\n    if (typeof elementType === \"function\")\n      return elementType.displayName || elementType.name || \"Anonymous\";\n  }\n  return \"\";\n}\nfunction getComponentKey(reactElement) {\n  var _a, _b;\n  return (_b = reactElement.key) != null ? _b : (_a = reactElement._currentElement) == null ? void 0 : _a.key;\n}\nfunction getChildren(reactElement) {\n  if (reactElement.child) {\n    const children = [];\n    for (let child = reactElement.child; child; child = child.sibling)\n      children.push(child);\n    return children;\n  }\n  if (!reactElement._currentElement)\n    return [];\n  const isKnownElement = (reactElement2) => {\n    var _a;\n    const elementType = (_a = reactElement2._currentElement) == null ? void 0 : _a.type;\n    return typeof elementType === \"function\" || typeof elementType === \"string\";\n  };\n  if (reactElement._renderedComponent) {\n    const child = reactElement._renderedComponent;\n    return isKnownElement(child) ? [child] : [];\n  }\n  if (reactElement._renderedChildren)\n    return [...Object.values(reactElement._renderedChildren)].filter(isKnownElement);\n  return [];\n}\nfunction getProps(reactElement) {\n  var _a;\n  const props = (\n    // React 16+\n    reactElement.memoizedProps || // React 15\n    ((_a = reactElement._currentElement) == null ? void 0 : _a.props)\n  );\n  if (!props || typeof props === \"string\")\n    return props;\n  const result = { ...props };\n  delete result.children;\n  return result;\n}\nfunction buildComponentsTree(reactElement) {\n  var _a;\n  const treeNode = {\n    key: getComponentKey(reactElement),\n    name: getComponentName(reactElement),\n    children: getChildren(reactElement).map(buildComponentsTree),\n    rootElements: [],\n    props: getProps(reactElement)\n  };\n  const rootElement = (\n    // React 16+\n    // @see https://github.com/baruchvlz/resq/blob/5c15a5e04d3f7174087248f5a158c3d6dcc1ec72/src/utils.js#L29\n    reactElement.stateNode || // React 15\n    reactElement._hostNode || ((_a = reactElement._renderedComponent) == null ? void 0 : _a._hostNode)\n  );\n  if (rootElement instanceof Element) {\n    treeNode.rootElements.push(rootElement);\n  } else {\n    for (const child of treeNode.children)\n      treeNode.rootElements.push(...child.rootElements);\n  }\n  return treeNode;\n}\nfunction filterComponentsTree(treeNode, searchFn, result = []) {\n  if (searchFn(treeNode))\n    result.push(treeNode);\n  for (const child of treeNode.children)\n    filterComponentsTree(child, searchFn, result);\n  return result;\n}\nfunction findReactRoots(root, roots = []) {\n  const document = root.ownerDocument || root;\n  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);\n  do {\n    const node = walker.currentNode;\n    const reactNode = node;\n    const rootKey = Object.keys(reactNode).find((key) => key.startsWith(\"__reactContainer\") && reactNode[key] !== null);\n    if (rootKey) {\n      roots.push(reactNode[rootKey].stateNode.current);\n    } else {\n      const legacyRootKey = \"_reactRootContainer\";\n      if (reactNode.hasOwnProperty(legacyRootKey) && reactNode[legacyRootKey] !== null) {\n        roots.push(reactNode[legacyRootKey]._internalRoot.current);\n      }\n    }\n    if (node instanceof Element && node.hasAttribute(\"data-reactroot\")) {\n      for (const key of Object.keys(node)) {\n        if (key.startsWith(\"__reactInternalInstance\") || key.startsWith(\"__reactFiber\"))\n          roots.push(node[key]);\n      }\n    }\n    const shadowRoot = node instanceof Element ? node.shadowRoot : null;\n    if (shadowRoot)\n      findReactRoots(shadowRoot, roots);\n  } while (walker.nextNode());\n  return roots;\n}\nvar ReactEngine = {\n  queryAll(scope, selector) {\n    const { name, attributes } = parseAttributeSelector(selector, false);\n    const reactRoots = findReactRoots(scope.ownerDocument || scope);\n    const trees = reactRoots.map((reactRoot) => buildComponentsTree(reactRoot));\n    const treeNodes = trees.map((tree) => filterComponentsTree(tree, (treeNode) => {\n      var _a;\n      const props = (_a = treeNode.props) != null ? _a : {};\n      if (treeNode.key !== void 0)\n        props.key = treeNode.key;\n      if (name && treeNode.name !== name)\n        return false;\n      if (treeNode.rootElements.some((domNode) => !isInsideScope(scope, domNode)))\n        return false;\n      for (const attr of attributes) {\n        if (!matchesComponentAttribute(props, attr))\n          return false;\n      }\n      return true;\n    })).flat();\n    const allRootElements = /* @__PURE__ */ new Set();\n    for (const treeNode of treeNodes) {\n      for (const domNode of treeNode.rootElements)\n        allRootElements.add(domNode);\n    }\n    return [...allRootElements];\n  }\n};\n\n// packages/playwright-core/src/server/injected/vueSelectorEngine.ts\nfunction basename(filename, ext) {\n  const normalized = filename.replace(/^[a-zA-Z]:/, \"\").replace(/\\\\/g, \"/\");\n  let result = normalized.substring(normalized.lastIndexOf(\"/\") + 1);\n  if (ext && result.endsWith(ext))\n    result = result.substring(0, result.length - ext.length);\n  return result;\n}\nfunction toUpper(_, c) {\n  return c ? c.toUpperCase() : \"\";\n}\nvar classifyRE = /(?:^|[-_/])(\\w)/g;\nvar classify = (str) => {\n  return str && str.replace(classifyRE, toUpper);\n};\nfunction buildComponentsTreeVue3(instance) {\n  function getComponentTypeName(options) {\n    const name = options.name || options._componentTag || options.__playwright_guessedName;\n    if (name)\n      return name;\n    const file = options.__file;\n    if (file)\n      return classify(basename(file, \".vue\"));\n  }\n  function saveComponentName(instance2, key) {\n    instance2.type.__playwright_guessedName = key;\n    return key;\n  }\n  function getInstanceName(instance2) {\n    var _a, _b, _c, _d;\n    const name = getComponentTypeName(instance2.type || {});\n    if (name)\n      return name;\n    if (instance2.root === instance2)\n      return \"Root\";\n    for (const key in (_b = (_a = instance2.parent) == null ? void 0 : _a.type) == null ? void 0 : _b.components) {\n      if (((_c = instance2.parent) == null ? void 0 : _c.type.components[key]) === instance2.type)\n        return saveComponentName(instance2, key);\n    }\n    for (const key in (_d = instance2.appContext) == null ? void 0 : _d.components) {\n      if (instance2.appContext.components[key] === instance2.type)\n        return saveComponentName(instance2, key);\n    }\n    return \"Anonymous Component\";\n  }\n  function isBeingDestroyed(instance2) {\n    return instance2._isBeingDestroyed || instance2.isUnmounted;\n  }\n  function isFragment(instance2) {\n    return instance2.subTree.type.toString() === \"Symbol(Fragment)\";\n  }\n  function getInternalInstanceChildren(subTree) {\n    const list = [];\n    if (subTree.component)\n      list.push(subTree.component);\n    if (subTree.suspense)\n      list.push(...getInternalInstanceChildren(subTree.suspense.activeBranch));\n    if (Array.isArray(subTree.children)) {\n      subTree.children.forEach((childSubTree) => {\n        if (childSubTree.component)\n          list.push(childSubTree.component);\n        else\n          list.push(...getInternalInstanceChildren(childSubTree));\n      });\n    }\n    return list.filter((child) => {\n      var _a;\n      return !isBeingDestroyed(child) && !((_a = child.type.devtools) == null ? void 0 : _a.hide);\n    });\n  }\n  function getRootElementsFromComponentInstance(instance2) {\n    if (isFragment(instance2))\n      return getFragmentRootElements(instance2.subTree);\n    return [instance2.subTree.el];\n  }\n  function getFragmentRootElements(vnode) {\n    if (!vnode.children)\n      return [];\n    const list = [];\n    for (let i = 0, l = vnode.children.length; i < l; i++) {\n      const childVnode = vnode.children[i];\n      if (childVnode.component)\n        list.push(...getRootElementsFromComponentInstance(childVnode.component));\n      else if (childVnode.el)\n        list.push(childVnode.el);\n    }\n    return list;\n  }\n  function buildComponentsTree2(instance2) {\n    return {\n      name: getInstanceName(instance2),\n      children: getInternalInstanceChildren(instance2.subTree).map(buildComponentsTree2),\n      rootElements: getRootElementsFromComponentInstance(instance2),\n      props: instance2.props\n    };\n  }\n  return buildComponentsTree2(instance);\n}\nfunction buildComponentsTreeVue2(instance) {\n  function getComponentName2(options) {\n    const name = options.displayName || options.name || options._componentTag;\n    if (name)\n      return name;\n    const file = options.__file;\n    if (file)\n      return classify(basename(file, \".vue\"));\n  }\n  function getInstanceName(instance2) {\n    const name = getComponentName2(instance2.$options || instance2.fnOptions || {});\n    if (name)\n      return name;\n    return instance2.$root === instance2 ? \"Root\" : \"Anonymous Component\";\n  }\n  function getInternalInstanceChildren(instance2) {\n    if (instance2.$children)\n      return instance2.$children;\n    if (Array.isArray(instance2.subTree.children))\n      return instance2.subTree.children.filter((vnode) => !!vnode.component).map((vnode) => vnode.component);\n    return [];\n  }\n  function buildComponentsTree2(instance2) {\n    return {\n      name: getInstanceName(instance2),\n      children: getInternalInstanceChildren(instance2).map(buildComponentsTree2),\n      rootElements: [instance2.$el],\n      props: instance2._props\n    };\n  }\n  return buildComponentsTree2(instance);\n}\nfunction filterComponentsTree2(treeNode, searchFn, result = []) {\n  if (searchFn(treeNode))\n    result.push(treeNode);\n  for (const child of treeNode.children)\n    filterComponentsTree2(child, searchFn, result);\n  return result;\n}\nfunction findVueRoots(root, roots = []) {\n  const document = root.ownerDocument || root;\n  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);\n  const vue2Roots = /* @__PURE__ */ new Set();\n  do {\n    const node = walker.currentNode;\n    if (node.__vue__)\n      vue2Roots.add(node.__vue__.$root);\n    if (node.__vue_app__ && node._vnode && node._vnode.component)\n      roots.push({ root: node._vnode.component, version: 3 });\n    const shadowRoot = node instanceof Element ? node.shadowRoot : null;\n    if (shadowRoot)\n      findVueRoots(shadowRoot, roots);\n  } while (walker.nextNode());\n  for (const vue2root of vue2Roots) {\n    roots.push({\n      version: 2,\n      root: vue2root\n    });\n  }\n  return roots;\n}\nvar VueEngine = {\n  queryAll(scope, selector) {\n    const document = scope.ownerDocument || scope;\n    const { name, attributes } = parseAttributeSelector(selector, false);\n    const vueRoots = findVueRoots(document);\n    const trees = vueRoots.map((vueRoot) => vueRoot.version === 3 ? buildComponentsTreeVue3(vueRoot.root) : buildComponentsTreeVue2(vueRoot.root));\n    const treeNodes = trees.map((tree) => filterComponentsTree2(tree, (treeNode) => {\n      if (name && treeNode.name !== name)\n        return false;\n      if (treeNode.rootElements.some((rootElement) => !isInsideScope(scope, rootElement)))\n        return false;\n      for (const attr of attributes) {\n        if (!matchesComponentAttribute(treeNode.props, attr))\n          return false;\n      }\n      return true;\n    })).flat();\n    const allRootElements = /* @__PURE__ */ new Set();\n    for (const treeNode of treeNodes) {\n      for (const rootElement of treeNode.rootElements)\n        allRootElements.add(rootElement);\n    }\n    return [...allRootElements];\n  }\n};\n\n// packages/playwright-core/src/server/injected/roleSelectorEngine.ts\nvar kSupportedAttributes = [\"selected\", \"checked\", \"pressed\", \"expanded\", \"level\", \"disabled\", \"name\", \"include-hidden\"];\nkSupportedAttributes.sort();\nfunction validateSupportedRole(attr, roles, role) {\n  if (!roles.includes(role))\n    throw new Error(`\"${attr}\" attribute is only supported for roles: ${roles.slice().sort().map((role2) => `\"${role2}\"`).join(\", \")}`);\n}\nfunction validateSupportedValues(attr, values) {\n  if (attr.op !== \"<truthy>\" && !values.includes(attr.value))\n    throw new Error(`\"${attr.name}\" must be one of ${values.map((v) => JSON.stringify(v)).join(\", \")}`);\n}\nfunction validateSupportedOp(attr, ops) {\n  if (!ops.includes(attr.op))\n    throw new Error(`\"${attr.name}\" does not support \"${attr.op}\" matcher`);\n}\nfunction validateAttributes(attrs, role) {\n  const options = { role };\n  for (const attr of attrs) {\n    switch (attr.name) {\n      case \"checked\": {\n        validateSupportedRole(attr.name, kAriaCheckedRoles, role);\n        validateSupportedValues(attr, [true, false, \"mixed\"]);\n        validateSupportedOp(attr, [\"<truthy>\", \"=\"]);\n        options.checked = attr.op === \"<truthy>\" ? true : attr.value;\n        break;\n      }\n      case \"pressed\": {\n        validateSupportedRole(attr.name, kAriaPressedRoles, role);\n        validateSupportedValues(attr, [true, false, \"mixed\"]);\n        validateSupportedOp(attr, [\"<truthy>\", \"=\"]);\n        options.pressed = attr.op === \"<truthy>\" ? true : attr.value;\n        break;\n      }\n      case \"selected\": {\n        validateSupportedRole(attr.name, kAriaSelectedRoles, role);\n        validateSupportedValues(attr, [true, false]);\n        validateSupportedOp(attr, [\"<truthy>\", \"=\"]);\n        options.selected = attr.op === \"<truthy>\" ? true : attr.value;\n        break;\n      }\n      case \"expanded\": {\n        validateSupportedRole(attr.name, kAriaExpandedRoles, role);\n        validateSupportedValues(attr, [true, false]);\n        validateSupportedOp(attr, [\"<truthy>\", \"=\"]);\n        options.expanded = attr.op === \"<truthy>\" ? true : attr.value;\n        break;\n      }\n      case \"level\": {\n        validateSupportedRole(attr.name, kAriaLevelRoles, role);\n        if (typeof attr.value === \"string\")\n          attr.value = +attr.value;\n        if (attr.op !== \"=\" || typeof attr.value !== \"number\" || Number.isNaN(attr.value))\n          throw new Error(`\"level\" attribute must be compared to a number`);\n        options.level = attr.value;\n        break;\n      }\n      case \"disabled\": {\n        validateSupportedValues(attr, [true, false]);\n        validateSupportedOp(attr, [\"<truthy>\", \"=\"]);\n        options.disabled = attr.op === \"<truthy>\" ? true : attr.value;\n        break;\n      }\n      case \"name\": {\n        if (attr.op === \"<truthy>\")\n          throw new Error(`\"name\" attribute must have a value`);\n        if (typeof attr.value !== \"string\" && !(attr.value instanceof RegExp))\n          throw new Error(`\"name\" attribute must be a string or a regular expression`);\n        options.name = attr.value;\n        options.nameOp = attr.op;\n        options.exact = attr.caseSensitive;\n        break;\n      }\n      case \"include-hidden\": {\n        validateSupportedValues(attr, [true, false]);\n        validateSupportedOp(attr, [\"<truthy>\", \"=\"]);\n        options.includeHidden = attr.op === \"<truthy>\" ? true : attr.value;\n        break;\n      }\n      default: {\n        throw new Error(`Unknown attribute \"${attr.name}\", must be one of ${kSupportedAttributes.map((a) => `\"${a}\"`).join(\", \")}.`);\n      }\n    }\n  }\n  return options;\n}\nfunction queryRole(scope, options, internal) {\n  const doc = scope.nodeType === 9 ? scope : scope.ownerDocument;\n  const elements = doc ? getElementsByRole(doc, options.role) : [];\n  return elements.filter((element) => {\n    if (!isInsideScope(scope, element))\n      return false;\n    if (options.selected !== void 0 && getAriaSelected(element) !== options.selected)\n      return false;\n    if (options.checked !== void 0 && getAriaChecked(element) !== options.checked)\n      return false;\n    if (options.pressed !== void 0 && getAriaPressed(element) !== options.pressed)\n      return false;\n    if (options.expanded !== void 0 && getAriaExpanded(element) !== options.expanded)\n      return false;\n    if (options.level !== void 0 && getAriaLevel(element) !== options.level)\n      return false;\n    if (options.disabled !== void 0 && getAriaDisabled(element) !== options.disabled)\n      return false;\n    if (!options.includeHidden) {\n      const isHidden = isElementHiddenForAria(element);\n      if (isHidden)\n        return false;\n    }\n    if (options.name !== void 0) {\n      const accessibleName = normalizeWhiteSpace(getElementAccessibleName(element, !!options.includeHidden));\n      if (typeof options.name === \"string\")\n        options.name = normalizeWhiteSpace(options.name);\n      if (internal && !options.exact && options.nameOp === \"=\")\n        options.nameOp = \"*=\";\n      if (!matchesAttributePart(accessibleName, { name: \"\", jsonPath: [], op: options.nameOp || \"=\", value: options.name, caseSensitive: !!options.exact }))\n        return false;\n    }\n    return true;\n  });\n}\nfunction createRoleEngine(internal) {\n  return {\n    queryAll: (scope, selector) => {\n      const parsed = parseAttributeSelector(selector, true);\n      const role = parsed.name.toLowerCase();\n      if (!role)\n        throw new Error(`Role must not be empty`);\n      const options = validateAttributes(parsed.attributes, role);\n      beginAriaCaches();\n      try {\n        return queryRole(scope, options, internal);\n      } finally {\n        endAriaCaches();\n      }\n    }\n  };\n}\n\n// packages/playwright-core/src/server/injected/layoutSelectorUtils.ts\nfunction boxRightOf(box1, box2, maxDistance) {\n  const distance = box1.left - box2.right;\n  if (distance < 0 || maxDistance !== void 0 && distance > maxDistance)\n    return;\n  return distance + Math.max(box2.bottom - box1.bottom, 0) + Math.max(box1.top - box2.top, 0);\n}\nfunction boxLeftOf(box1, box2, maxDistance) {\n  const distance = box2.left - box1.right;\n  if (distance < 0 || maxDistance !== void 0 && distance > maxDistance)\n    return;\n  return distance + Math.max(box2.bottom - box1.bottom, 0) + Math.max(box1.top - box2.top, 0);\n}\nfunction boxAbove(box1, box2, maxDistance) {\n  const distance = box2.top - box1.bottom;\n  if (distance < 0 || maxDistance !== void 0 && distance > maxDistance)\n    return;\n  return distance + Math.max(box1.left - box2.left, 0) + Math.max(box2.right - box1.right, 0);\n}\nfunction boxBelow(box1, box2, maxDistance) {\n  const distance = box1.top - box2.bottom;\n  if (distance < 0 || maxDistance !== void 0 && distance > maxDistance)\n    return;\n  return distance + Math.max(box1.left - box2.left, 0) + Math.max(box2.right - box1.right, 0);\n}\nfunction boxNear(box1, box2, maxDistance) {\n  const kThreshold = maxDistance === void 0 ? 50 : maxDistance;\n  let score = 0;\n  if (box1.left - box2.right >= 0)\n    score += box1.left - box2.right;\n  if (box2.left - box1.right >= 0)\n    score += box2.left - box1.right;\n  if (box2.top - box1.bottom >= 0)\n    score += box2.top - box1.bottom;\n  if (box1.top - box2.bottom >= 0)\n    score += box1.top - box2.bottom;\n  return score > kThreshold ? void 0 : score;\n}\nvar kLayoutSelectorNames = [\"left-of\", \"right-of\", \"above\", \"below\", \"near\"];\nfunction layoutSelectorScore(name, element, inner, maxDistance) {\n  const box = element.getBoundingClientRect();\n  const scorer = { \"left-of\": boxLeftOf, \"right-of\": boxRightOf, \"above\": boxAbove, \"below\": boxBelow, \"near\": boxNear }[name];\n  let bestScore;\n  for (const e of inner) {\n    if (e === element)\n      continue;\n    const score = scorer(box, e.getBoundingClientRect(), maxDistance);\n    if (score === void 0)\n      continue;\n    if (bestScore === void 0 || score < bestScore)\n      bestScore = score;\n  }\n  return bestScore;\n}\n\n// packages/playwright-core/src/server/injected/selectorEvaluator.ts\nvar SelectorEvaluatorImpl = class {\n  constructor(extraEngines) {\n    this._engines = /* @__PURE__ */ new Map();\n    this._cacheQueryCSS = /* @__PURE__ */ new Map();\n    this._cacheMatches = /* @__PURE__ */ new Map();\n    this._cacheQuery = /* @__PURE__ */ new Map();\n    this._cacheMatchesSimple = /* @__PURE__ */ new Map();\n    this._cacheMatchesParents = /* @__PURE__ */ new Map();\n    this._cacheCallMatches = /* @__PURE__ */ new Map();\n    this._cacheCallQuery = /* @__PURE__ */ new Map();\n    this._cacheQuerySimple = /* @__PURE__ */ new Map();\n    this._cacheText = /* @__PURE__ */ new Map();\n    this._retainCacheCounter = 0;\n    for (const [name, engine] of extraEngines)\n      this._engines.set(name, engine);\n    this._engines.set(\"not\", notEngine);\n    this._engines.set(\"is\", isEngine);\n    this._engines.set(\"where\", isEngine);\n    this._engines.set(\"has\", hasEngine);\n    this._engines.set(\"scope\", scopeEngine);\n    this._engines.set(\"light\", lightEngine);\n    this._engines.set(\"visible\", visibleEngine);\n    this._engines.set(\"text\", textEngine);\n    this._engines.set(\"text-is\", textIsEngine);\n    this._engines.set(\"text-matches\", textMatchesEngine);\n    this._engines.set(\"has-text\", hasTextEngine);\n    this._engines.set(\"right-of\", createLayoutEngine(\"right-of\"));\n    this._engines.set(\"left-of\", createLayoutEngine(\"left-of\"));\n    this._engines.set(\"above\", createLayoutEngine(\"above\"));\n    this._engines.set(\"below\", createLayoutEngine(\"below\"));\n    this._engines.set(\"near\", createLayoutEngine(\"near\"));\n    this._engines.set(\"nth-match\", nthMatchEngine);\n    const allNames = [...this._engines.keys()];\n    allNames.sort();\n    const parserNames = [...customCSSNames];\n    parserNames.sort();\n    if (allNames.join(\"|\") !== parserNames.join(\"|\"))\n      throw new Error(`Please keep customCSSNames in sync with evaluator engines: ${allNames.join(\"|\")} vs ${parserNames.join(\"|\")}`);\n  }\n  begin() {\n    ++this._retainCacheCounter;\n  }\n  end() {\n    --this._retainCacheCounter;\n    if (!this._retainCacheCounter) {\n      this._cacheQueryCSS.clear();\n      this._cacheMatches.clear();\n      this._cacheQuery.clear();\n      this._cacheMatchesSimple.clear();\n      this._cacheMatchesParents.clear();\n      this._cacheCallMatches.clear();\n      this._cacheCallQuery.clear();\n      this._cacheQuerySimple.clear();\n      this._cacheText.clear();\n    }\n  }\n  _cached(cache, main, rest, cb) {\n    if (!cache.has(main))\n      cache.set(main, []);\n    const entries = cache.get(main);\n    const entry = entries.find((e) => rest.every((value, index) => e.rest[index] === value));\n    if (entry)\n      return entry.result;\n    const result = cb();\n    entries.push({ rest, result });\n    return result;\n  }\n  _checkSelector(s) {\n    const wellFormed = typeof s === \"object\" && s && (Array.isArray(s) || \"simples\" in s && s.simples.length);\n    if (!wellFormed)\n      throw new Error(`Malformed selector \"${s}\"`);\n    return s;\n  }\n  matches(element, s, context) {\n    const selector = this._checkSelector(s);\n    this.begin();\n    try {\n      return this._cached(this._cacheMatches, element, [selector, context.scope, context.pierceShadow, context.originalScope], () => {\n        if (Array.isArray(selector))\n          return this._matchesEngine(isEngine, element, selector, context);\n        if (this._hasScopeClause(selector))\n          context = this._expandContextForScopeMatching(context);\n        if (!this._matchesSimple(element, selector.simples[selector.simples.length - 1].selector, context))\n          return false;\n        return this._matchesParents(element, selector, selector.simples.length - 2, context);\n      });\n    } finally {\n      this.end();\n    }\n  }\n  query(context, s) {\n    const selector = this._checkSelector(s);\n    this.begin();\n    try {\n      return this._cached(this._cacheQuery, selector, [context.scope, context.pierceShadow, context.originalScope], () => {\n        if (Array.isArray(selector))\n          return this._queryEngine(isEngine, context, selector);\n        if (this._hasScopeClause(selector))\n          context = this._expandContextForScopeMatching(context);\n        const previousScoreMap = this._scoreMap;\n        this._scoreMap = /* @__PURE__ */ new Map();\n        let elements = this._querySimple(context, selector.simples[selector.simples.length - 1].selector);\n        elements = elements.filter((element) => this._matchesParents(element, selector, selector.simples.length - 2, context));\n        if (this._scoreMap.size) {\n          elements.sort((a, b) => {\n            const aScore = this._scoreMap.get(a);\n            const bScore = this._scoreMap.get(b);\n            if (aScore === bScore)\n              return 0;\n            if (aScore === void 0)\n              return 1;\n            if (bScore === void 0)\n              return -1;\n            return aScore - bScore;\n          });\n        }\n        this._scoreMap = previousScoreMap;\n        return elements;\n      });\n    } finally {\n      this.end();\n    }\n  }\n  _markScore(element, score) {\n    if (this._scoreMap)\n      this._scoreMap.set(element, score);\n  }\n  _hasScopeClause(selector) {\n    return selector.simples.some((simple) => simple.selector.functions.some((f) => f.name === \"scope\"));\n  }\n  _expandContextForScopeMatching(context) {\n    if (context.scope.nodeType !== 1)\n      return context;\n    const scope = parentElementOrShadowHost(context.scope);\n    if (!scope)\n      return context;\n    return { ...context, scope, originalScope: context.originalScope || context.scope };\n  }\n  _matchesSimple(element, simple, context) {\n    return this._cached(this._cacheMatchesSimple, element, [simple, context.scope, context.pierceShadow, context.originalScope], () => {\n      if (element === context.scope)\n        return false;\n      if (simple.css && !this._matchesCSS(element, simple.css))\n        return false;\n      for (const func of simple.functions) {\n        if (!this._matchesEngine(this._getEngine(func.name), element, func.args, context))\n          return false;\n      }\n      return true;\n    });\n  }\n  _querySimple(context, simple) {\n    if (!simple.functions.length)\n      return this._queryCSS(context, simple.css || \"*\");\n    return this._cached(this._cacheQuerySimple, simple, [context.scope, context.pierceShadow, context.originalScope], () => {\n      let css = simple.css;\n      const funcs = simple.functions;\n      if (css === \"*\" && funcs.length)\n        css = void 0;\n      let elements;\n      let firstIndex = -1;\n      if (css !== void 0) {\n        elements = this._queryCSS(context, css);\n      } else {\n        firstIndex = funcs.findIndex((func) => this._getEngine(func.name).query !== void 0);\n        if (firstIndex === -1)\n          firstIndex = 0;\n        elements = this._queryEngine(this._getEngine(funcs[firstIndex].name), context, funcs[firstIndex].args);\n      }\n      for (let i = 0; i < funcs.length; i++) {\n        if (i === firstIndex)\n          continue;\n        const engine = this._getEngine(funcs[i].name);\n        if (engine.matches !== void 0)\n          elements = elements.filter((e) => this._matchesEngine(engine, e, funcs[i].args, context));\n      }\n      for (let i = 0; i < funcs.length; i++) {\n        if (i === firstIndex)\n          continue;\n        const engine = this._getEngine(funcs[i].name);\n        if (engine.matches === void 0)\n          elements = elements.filter((e) => this._matchesEngine(engine, e, funcs[i].args, context));\n      }\n      return elements;\n    });\n  }\n  _matchesParents(element, complex, index, context) {\n    if (index < 0)\n      return true;\n    return this._cached(this._cacheMatchesParents, element, [complex, index, context.scope, context.pierceShadow, context.originalScope], () => {\n      const { selector: simple, combinator } = complex.simples[index];\n      if (combinator === \">\") {\n        const parent = parentElementOrShadowHostInContext(element, context);\n        if (!parent || !this._matchesSimple(parent, simple, context))\n          return false;\n        return this._matchesParents(parent, complex, index - 1, context);\n      }\n      if (combinator === \"+\") {\n        const previousSibling = previousSiblingInContext(element, context);\n        if (!previousSibling || !this._matchesSimple(previousSibling, simple, context))\n          return false;\n        return this._matchesParents(previousSibling, complex, index - 1, context);\n      }\n      if (combinator === \"\") {\n        let parent = parentElementOrShadowHostInContext(element, context);\n        while (parent) {\n          if (this._matchesSimple(parent, simple, context)) {\n            if (this._matchesParents(parent, complex, index - 1, context))\n              return true;\n            if (complex.simples[index - 1].combinator === \"\")\n              break;\n          }\n          parent = parentElementOrShadowHostInContext(parent, context);\n        }\n        return false;\n      }\n      if (combinator === \"~\") {\n        let previousSibling = previousSiblingInContext(element, context);\n        while (previousSibling) {\n          if (this._matchesSimple(previousSibling, simple, context)) {\n            if (this._matchesParents(previousSibling, complex, index - 1, context))\n              return true;\n            if (complex.simples[index - 1].combinator === \"~\")\n              break;\n          }\n          previousSibling = previousSiblingInContext(previousSibling, context);\n        }\n        return false;\n      }\n      if (combinator === \">=\") {\n        let parent = element;\n        while (parent) {\n          if (this._matchesSimple(parent, simple, context)) {\n            if (this._matchesParents(parent, complex, index - 1, context))\n              return true;\n            if (complex.simples[index - 1].combinator === \"\")\n              break;\n          }\n          parent = parentElementOrShadowHostInContext(parent, context);\n        }\n        return false;\n      }\n      throw new Error(`Unsupported combinator \"${combinator}\"`);\n    });\n  }\n  _matchesEngine(engine, element, args, context) {\n    if (engine.matches)\n      return this._callMatches(engine, element, args, context);\n    if (engine.query)\n      return this._callQuery(engine, args, context).includes(element);\n    throw new Error(`Selector engine should implement \"matches\" or \"query\"`);\n  }\n  _queryEngine(engine, context, args) {\n    if (engine.query)\n      return this._callQuery(engine, args, context);\n    if (engine.matches)\n      return this._queryCSS(context, \"*\").filter((element) => this._callMatches(engine, element, args, context));\n    throw new Error(`Selector engine should implement \"matches\" or \"query\"`);\n  }\n  _callMatches(engine, element, args, context) {\n    return this._cached(this._cacheCallMatches, element, [engine, context.scope, context.pierceShadow, context.originalScope, ...args], () => {\n      return engine.matches(element, args, context, this);\n    });\n  }\n  _callQuery(engine, args, context) {\n    return this._cached(this._cacheCallQuery, engine, [context.scope, context.pierceShadow, context.originalScope, ...args], () => {\n      return engine.query(context, args, this);\n    });\n  }\n  _matchesCSS(element, css) {\n    return element.matches(css);\n  }\n  _queryCSS(context, css) {\n    return this._cached(this._cacheQueryCSS, css, [context.scope, context.pierceShadow, context.originalScope], () => {\n      let result = [];\n      function query(root) {\n        result = result.concat([...root.querySelectorAll(css)]);\n        if (!context.pierceShadow)\n          return;\n        if (root.shadowRoot)\n          query(root.shadowRoot);\n        for (const element of root.querySelectorAll(\"*\")) {\n          if (element.shadowRoot)\n            query(element.shadowRoot);\n        }\n      }\n      query(context.scope);\n      return result;\n    });\n  }\n  _getEngine(name) {\n    const engine = this._engines.get(name);\n    if (!engine)\n      throw new Error(`Unknown selector engine \"${name}\"`);\n    return engine;\n  }\n};\nvar isEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length === 0)\n      throw new Error(`\"is\" engine expects non-empty selector list`);\n    return args.some((selector) => evaluator.matches(element, selector, context));\n  },\n  query(context, args, evaluator) {\n    if (args.length === 0)\n      throw new Error(`\"is\" engine expects non-empty selector list`);\n    let elements = [];\n    for (const arg of args)\n      elements = elements.concat(evaluator.query(context, arg));\n    return args.length === 1 ? elements : sortInDOMOrder(elements);\n  }\n};\nvar hasEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length === 0)\n      throw new Error(`\"has\" engine expects non-empty selector list`);\n    return evaluator.query({ ...context, scope: element }, args).length > 0;\n  }\n  // TODO: we can implement efficient \"query\" by matching \"args\" and returning\n  // all parents/descendants, just have to be careful with the \":scope\" matching.\n};\nvar scopeEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length !== 0)\n      throw new Error(`\"scope\" engine expects no arguments`);\n    const actualScope = context.originalScope || context.scope;\n    if (actualScope.nodeType === 9)\n      return element === actualScope.documentElement;\n    return element === actualScope;\n  },\n  query(context, args, evaluator) {\n    if (args.length !== 0)\n      throw new Error(`\"scope\" engine expects no arguments`);\n    const actualScope = context.originalScope || context.scope;\n    if (actualScope.nodeType === 9) {\n      const root = actualScope.documentElement;\n      return root ? [root] : [];\n    }\n    if (actualScope.nodeType === 1)\n      return [actualScope];\n    return [];\n  }\n};\nvar notEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length === 0)\n      throw new Error(`\"not\" engine expects non-empty selector list`);\n    return !evaluator.matches(element, args, context);\n  }\n};\nvar lightEngine = {\n  query(context, args, evaluator) {\n    return evaluator.query({ ...context, pierceShadow: false }, args);\n  },\n  matches(element, args, context, evaluator) {\n    return evaluator.matches(element, args, { ...context, pierceShadow: false });\n  }\n};\nvar visibleEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length)\n      throw new Error(`\"visible\" engine expects no arguments`);\n    return isElementVisible(element);\n  }\n};\nvar textEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length !== 1 || typeof args[0] !== \"string\")\n      throw new Error(`\"text\" engine expects a single string`);\n    const text = normalizeWhiteSpace(args[0]).toLowerCase();\n    const matcher = (elementText2) => elementText2.normalized.toLowerCase().includes(text);\n    return elementMatchesText(evaluator._cacheText, element, matcher) === \"self\";\n  }\n};\nvar textIsEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length !== 1 || typeof args[0] !== \"string\")\n      throw new Error(`\"text-is\" engine expects a single string`);\n    const text = normalizeWhiteSpace(args[0]);\n    const matcher = (elementText2) => {\n      if (!text && !elementText2.immediate.length)\n        return true;\n      return elementText2.immediate.some((s) => normalizeWhiteSpace(s) === text);\n    };\n    return elementMatchesText(evaluator._cacheText, element, matcher) !== \"none\";\n  }\n};\nvar textMatchesEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length === 0 || typeof args[0] !== \"string\" || args.length > 2 || args.length === 2 && typeof args[1] !== \"string\")\n      throw new Error(`\"text-matches\" engine expects a regexp body and optional regexp flags`);\n    const re = new RegExp(args[0], args.length === 2 ? args[1] : void 0);\n    const matcher = (elementText2) => re.test(elementText2.full);\n    return elementMatchesText(evaluator._cacheText, element, matcher) === \"self\";\n  }\n};\nvar hasTextEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length !== 1 || typeof args[0] !== \"string\")\n      throw new Error(`\"has-text\" engine expects a single string`);\n    if (shouldSkipForTextMatching(element))\n      return false;\n    const text = normalizeWhiteSpace(args[0]).toLowerCase();\n    const matcher = (elementText2) => elementText2.normalized.toLowerCase().includes(text);\n    return matcher(elementText(evaluator._cacheText, element));\n  }\n};\nfunction createLayoutEngine(name) {\n  return {\n    matches(element, args, context, evaluator) {\n      const maxDistance = args.length && typeof args[args.length - 1] === \"number\" ? args[args.length - 1] : void 0;\n      const queryArgs = maxDistance === void 0 ? args : args.slice(0, args.length - 1);\n      if (args.length < 1 + (maxDistance === void 0 ? 0 : 1))\n        throw new Error(`\"${name}\" engine expects a selector list and optional maximum distance in pixels`);\n      const inner = evaluator.query(context, queryArgs);\n      const score = layoutSelectorScore(name, element, inner, maxDistance);\n      if (score === void 0)\n        return false;\n      evaluator._markScore(element, score);\n      return true;\n    }\n  };\n}\nvar nthMatchEngine = {\n  query(context, args, evaluator) {\n    let index = args[args.length - 1];\n    if (args.length < 2)\n      throw new Error(`\"nth-match\" engine expects non-empty selector list and an index argument`);\n    if (typeof index !== \"number\" || index < 1)\n      throw new Error(`\"nth-match\" engine expects a one-based index as the last argument`);\n    const elements = isEngine.query(context, args.slice(0, args.length - 1), evaluator);\n    index--;\n    return index < elements.length ? [elements[index]] : [];\n  }\n};\nfunction parentElementOrShadowHostInContext(element, context) {\n  if (element === context.scope)\n    return;\n  if (!context.pierceShadow)\n    return element.parentElement || void 0;\n  return parentElementOrShadowHost(element);\n}\nfunction previousSiblingInContext(element, context) {\n  if (element === context.scope)\n    return;\n  return element.previousElementSibling || void 0;\n}\nfunction sortInDOMOrder(elements) {\n  const elementToEntry = /* @__PURE__ */ new Map();\n  const roots = [];\n  const result = [];\n  function append(element) {\n    let entry = elementToEntry.get(element);\n    if (entry)\n      return entry;\n    const parent = parentElementOrShadowHost(element);\n    if (parent) {\n      const parentEntry = append(parent);\n      parentEntry.children.push(element);\n    } else {\n      roots.push(element);\n    }\n    entry = { children: [], taken: false };\n    elementToEntry.set(element, entry);\n    return entry;\n  }\n  for (const e of elements)\n    append(e).taken = true;\n  function visit(element) {\n    const entry = elementToEntry.get(element);\n    if (entry.taken)\n      result.push(element);\n    if (entry.children.length > 1) {\n      const set = new Set(entry.children);\n      entry.children = [];\n      let child = element.firstElementChild;\n      while (child && entry.children.length < set.size) {\n        if (set.has(child))\n          entry.children.push(child);\n        child = child.nextElementSibling;\n      }\n      child = element.shadowRoot ? element.shadowRoot.firstElementChild : null;\n      while (child && entry.children.length < set.size) {\n        if (set.has(child))\n          entry.children.push(child);\n        child = child.nextElementSibling;\n      }\n    }\n    entry.children.forEach(visit);\n  }\n  roots.forEach(visit);\n  return result;\n}\n\n// packages/playwright-core/src/server/injected/selectorGenerator.ts\nvar cacheAllowText = /* @__PURE__ */ new Map();\nvar cacheDisallowText = /* @__PURE__ */ new Map();\nvar kTextScoreRange = 10;\nvar kExactPenalty = kTextScoreRange / 2;\nvar kTestIdScore = 1;\nvar kOtherTestIdScore = 2;\nvar kIframeByAttributeScore = 10;\nvar kBeginPenalizedScore = 50;\nvar kPlaceholderScore = 100;\nvar kLabelScore = 120;\nvar kRoleWithNameScore = 140;\nvar kAltTextScore = 160;\nvar kTextScore = 180;\nvar kTitleScore = 200;\nvar kTextScoreRegex = 250;\nvar kPlaceholderScoreExact = kPlaceholderScore + kExactPenalty;\nvar kLabelScoreExact = kLabelScore + kExactPenalty;\nvar kRoleWithNameScoreExact = kRoleWithNameScore + kExactPenalty;\nvar kAltTextScoreExact = kAltTextScore + kExactPenalty;\nvar kTextScoreExact = kTextScore + kExactPenalty;\nvar kTitleScoreExact = kTitleScore + kExactPenalty;\nvar kEndPenalizedScore = 300;\nvar kCSSIdScore = 500;\nvar kRoleWithoutNameScore = 510;\nvar kCSSInputTypeNameScore = 520;\nvar kCSSTagNameScore = 530;\nvar kNthScore = 1e4;\nvar kCSSFallbackScore = 1e7;\nvar kScoreThresholdForTextExpect = 1e3;\nfunction generateSelector(injectedScript, targetElement, options) {\n  var _a;\n  injectedScript._evaluator.begin();\n  beginAriaCaches();\n  try {\n    let selectors = [];\n    if (options.forTextExpect) {\n      let targetTokens = cssFallback(injectedScript, targetElement.ownerDocument.documentElement, options);\n      for (let element = targetElement; element; element = parentElementOrShadowHost(element)) {\n        const tokens = generateSelectorFor(injectedScript, element, { ...options, noText: true });\n        if (!tokens)\n          continue;\n        const score = combineScores(tokens);\n        if (score <= kScoreThresholdForTextExpect) {\n          targetTokens = tokens;\n          break;\n        }\n      }\n      selectors = [joinTokens(targetTokens)];\n    } else {\n      targetElement = closestCrossShadow(targetElement, \"button,select,input,[role=button],[role=checkbox],[role=radio],a,[role=link]\", options.root) || targetElement;\n      if (options.multiple) {\n        const withText = generateSelectorFor(injectedScript, targetElement, options);\n        const withoutText = generateSelectorFor(injectedScript, targetElement, { ...options, noText: true });\n        let tokens = [withText, withoutText];\n        cacheAllowText.clear();\n        cacheDisallowText.clear();\n        if (withText && hasCSSIdToken(withText))\n          tokens.push(generateSelectorFor(injectedScript, targetElement, { ...options, noCSSId: true }));\n        if (withoutText && hasCSSIdToken(withoutText))\n          tokens.push(generateSelectorFor(injectedScript, targetElement, { ...options, noText: true, noCSSId: true }));\n        tokens = tokens.filter(Boolean);\n        if (!tokens.length) {\n          const css = cssFallback(injectedScript, targetElement, options);\n          tokens.push(css);\n          if (hasCSSIdToken(css))\n            tokens.push(cssFallback(injectedScript, targetElement, { ...options, noCSSId: true }));\n        }\n        selectors = [...new Set(tokens.map((t) => joinTokens(t)))];\n      } else {\n        const targetTokens = generateSelectorFor(injectedScript, targetElement, options) || cssFallback(injectedScript, targetElement, options);\n        selectors = [joinTokens(targetTokens)];\n      }\n    }\n    const selector = selectors[0];\n    const parsedSelector = injectedScript.parseSelector(selector);\n    return {\n      selector,\n      selectors,\n      elements: injectedScript.querySelectorAll(parsedSelector, (_a = options.root) != null ? _a : targetElement.ownerDocument)\n    };\n  } finally {\n    cacheAllowText.clear();\n    cacheDisallowText.clear();\n    endAriaCaches();\n    injectedScript._evaluator.end();\n  }\n}\nfunction filterRegexTokens(textCandidates) {\n  return textCandidates.filter((c) => c[0].selector[0] !== \"/\");\n}\nfunction generateSelectorFor(injectedScript, targetElement, options) {\n  if (options.root && !isInsideScope(options.root, targetElement))\n    throw new Error(`Target element must belong to the root's subtree`);\n  if (targetElement === options.root)\n    return [{ engine: \"css\", selector: \":scope\", score: 1 }];\n  if (targetElement.ownerDocument.documentElement === targetElement)\n    return [{ engine: \"css\", selector: \"html\", score: 1 }];\n  const calculate = (element, allowText) => {\n    var _a;\n    const allowNthMatch = element === targetElement;\n    let textCandidates = allowText ? buildTextCandidates(injectedScript, element, element === targetElement) : [];\n    if (element !== targetElement) {\n      textCandidates = filterRegexTokens(textCandidates);\n    }\n    const noTextCandidates = buildNoTextCandidates(injectedScript, element, options).filter((token) => !options.omitInternalEngines || !token.engine.startsWith(\"internal:\")).map((token) => [token]);\n    let result = chooseFirstSelector(injectedScript, (_a = options.root) != null ? _a : targetElement.ownerDocument, element, [...textCandidates, ...noTextCandidates], allowNthMatch);\n    textCandidates = filterRegexTokens(textCandidates);\n    const checkWithText = (textCandidatesToUse) => {\n      const allowParentText = allowText && !textCandidatesToUse.length;\n      const candidates = [...textCandidatesToUse, ...noTextCandidates].filter((c) => {\n        if (!result)\n          return true;\n        return combineScores(c) < combineScores(result);\n      });\n      let bestPossibleInParent = candidates[0];\n      if (!bestPossibleInParent)\n        return;\n      for (let parent = parentElementOrShadowHost(element); parent && parent !== options.root; parent = parentElementOrShadowHost(parent)) {\n        const parentTokens = calculateCached(parent, allowParentText);\n        if (!parentTokens)\n          continue;\n        if (result && combineScores([...parentTokens, ...bestPossibleInParent]) >= combineScores(result))\n          continue;\n        bestPossibleInParent = chooseFirstSelector(injectedScript, parent, element, candidates, allowNthMatch);\n        if (!bestPossibleInParent)\n          return;\n        const combined = [...parentTokens, ...bestPossibleInParent];\n        if (!result || combineScores(combined) < combineScores(result))\n          result = combined;\n      }\n    };\n    checkWithText(textCandidates);\n    if (element === targetElement && textCandidates.length)\n      checkWithText([]);\n    return result;\n  };\n  const calculateCached = (element, allowText) => {\n    const cache = allowText ? cacheAllowText : cacheDisallowText;\n    let value = cache.get(element);\n    if (value === void 0) {\n      value = calculate(element, allowText);\n      cache.set(element, value);\n    }\n    return value;\n  };\n  return calculate(targetElement, !options.noText);\n}\nfunction buildNoTextCandidates(injectedScript, element, options) {\n  const candidates = [];\n  {\n    for (const attr of [\"data-testid\", \"data-test-id\", \"data-test\"]) {\n      if (attr !== options.testIdAttributeName && element.getAttribute(attr))\n        candidates.push({ engine: \"css\", selector: `[${attr}=${quoteCSSAttributeValue(element.getAttribute(attr))}]`, score: kOtherTestIdScore });\n    }\n    if (!options.noCSSId) {\n      const idAttr = element.getAttribute(\"id\");\n      if (idAttr && !isGuidLike(idAttr))\n        candidates.push({ engine: \"css\", selector: makeSelectorForId(idAttr), score: kCSSIdScore });\n    }\n    candidates.push({ engine: \"css\", selector: cssEscape(element.nodeName.toLowerCase()), score: kCSSTagNameScore });\n  }\n  if (element.nodeName === \"IFRAME\") {\n    for (const attribute of [\"name\", \"title\"]) {\n      if (element.getAttribute(attribute))\n        candidates.push({ engine: \"css\", selector: `${cssEscape(element.nodeName.toLowerCase())}[${attribute}=${quoteCSSAttributeValue(element.getAttribute(attribute))}]`, score: kIframeByAttributeScore });\n    }\n    if (element.getAttribute(options.testIdAttributeName))\n      candidates.push({ engine: \"css\", selector: `[${options.testIdAttributeName}=${quoteCSSAttributeValue(element.getAttribute(options.testIdAttributeName))}]`, score: kTestIdScore });\n    penalizeScoreForLength([candidates]);\n    return candidates;\n  }\n  if (element.getAttribute(options.testIdAttributeName))\n    candidates.push({ engine: \"internal:testid\", selector: `[${options.testIdAttributeName}=${escapeForAttributeSelector(element.getAttribute(options.testIdAttributeName), true)}]`, score: kTestIdScore });\n  if (element.nodeName === \"INPUT\" || element.nodeName === \"TEXTAREA\") {\n    const input = element;\n    if (input.placeholder) {\n      candidates.push({ engine: \"internal:attr\", selector: `[placeholder=${escapeForAttributeSelector(input.placeholder, true)}]`, score: kPlaceholderScoreExact });\n      for (const alternative of suitableTextAlternatives(input.placeholder))\n        candidates.push({ engine: \"internal:attr\", selector: `[placeholder=${escapeForAttributeSelector(alternative.text, false)}]`, score: kPlaceholderScore - alternative.scoreBouns });\n    }\n  }\n  const labels = getElementLabels(injectedScript._evaluator._cacheText, element);\n  for (const label of labels) {\n    const labelText = label.normalized;\n    candidates.push({ engine: \"internal:label\", selector: escapeForTextSelector(labelText, true), score: kLabelScoreExact });\n    for (const alternative of suitableTextAlternatives(labelText))\n      candidates.push({ engine: \"internal:label\", selector: escapeForTextSelector(alternative.text, false), score: kLabelScore - alternative.scoreBouns });\n  }\n  const ariaRole = getAriaRole(element);\n  if (ariaRole && ![\"none\", \"presentation\"].includes(ariaRole))\n    candidates.push({ engine: \"internal:role\", selector: ariaRole, score: kRoleWithoutNameScore });\n  if (element.getAttribute(\"name\") && [\"BUTTON\", \"FORM\", \"FIELDSET\", \"FRAME\", \"IFRAME\", \"INPUT\", \"KEYGEN\", \"OBJECT\", \"OUTPUT\", \"SELECT\", \"TEXTAREA\", \"MAP\", \"META\", \"PARAM\"].includes(element.nodeName))\n    candidates.push({ engine: \"css\", selector: `${cssEscape(element.nodeName.toLowerCase())}[name=${quoteCSSAttributeValue(element.getAttribute(\"name\"))}]`, score: kCSSInputTypeNameScore });\n  if ([\"INPUT\", \"TEXTAREA\"].includes(element.nodeName) && element.getAttribute(\"type\") !== \"hidden\") {\n    if (element.getAttribute(\"type\"))\n      candidates.push({ engine: \"css\", selector: `${cssEscape(element.nodeName.toLowerCase())}[type=${quoteCSSAttributeValue(element.getAttribute(\"type\"))}]`, score: kCSSInputTypeNameScore });\n  }\n  if ([\"INPUT\", \"TEXTAREA\", \"SELECT\"].includes(element.nodeName) && element.getAttribute(\"type\") !== \"hidden\")\n    candidates.push({ engine: \"css\", selector: cssEscape(element.nodeName.toLowerCase()), score: kCSSInputTypeNameScore + 1 });\n  penalizeScoreForLength([candidates]);\n  return candidates;\n}\nfunction buildTextCandidates(injectedScript, element, isTargetNode) {\n  if (element.nodeName === \"SELECT\")\n    return [];\n  const candidates = [];\n  const title = element.getAttribute(\"title\");\n  if (title) {\n    candidates.push([{ engine: \"internal:attr\", selector: `[title=${escapeForAttributeSelector(title, true)}]`, score: kTitleScoreExact }]);\n    for (const alternative of suitableTextAlternatives(title))\n      candidates.push([{ engine: \"internal:attr\", selector: `[title=${escapeForAttributeSelector(alternative.text, false)}]`, score: kTitleScore - alternative.scoreBouns }]);\n  }\n  const alt = element.getAttribute(\"alt\");\n  if (alt && [\"APPLET\", \"AREA\", \"IMG\", \"INPUT\"].includes(element.nodeName)) {\n    candidates.push([{ engine: \"internal:attr\", selector: `[alt=${escapeForAttributeSelector(alt, true)}]`, score: kAltTextScoreExact }]);\n    for (const alternative of suitableTextAlternatives(alt))\n      candidates.push([{ engine: \"internal:attr\", selector: `[alt=${escapeForAttributeSelector(alternative.text, false)}]`, score: kAltTextScore - alternative.scoreBouns }]);\n  }\n  const text = elementText(injectedScript._evaluator._cacheText, element).normalized;\n  if (text) {\n    const alternatives = suitableTextAlternatives(text);\n    if (isTargetNode) {\n      if (text.length <= 80)\n        candidates.push([{ engine: \"internal:text\", selector: escapeForTextSelector(text, true), score: kTextScoreExact }]);\n      for (const alternative of alternatives)\n        candidates.push([{ engine: \"internal:text\", selector: escapeForTextSelector(alternative.text, false), score: kTextScore - alternative.scoreBouns }]);\n    }\n    const cssToken = { engine: \"css\", selector: cssEscape(element.nodeName.toLowerCase()), score: kCSSTagNameScore };\n    for (const alternative of alternatives)\n      candidates.push([cssToken, { engine: \"internal:has-text\", selector: escapeForTextSelector(alternative.text, false), score: kTextScore - alternative.scoreBouns }]);\n    if (text.length <= 80)\n      candidates.push([cssToken, { engine: \"internal:has-text\", selector: \"/^\" + escapeRegExp(text) + \"$/\", score: kTextScoreRegex }]);\n  }\n  const ariaRole = getAriaRole(element);\n  if (ariaRole && ![\"none\", \"presentation\"].includes(ariaRole)) {\n    const ariaName = getElementAccessibleName(element, false);\n    if (ariaName) {\n      candidates.push([{ engine: \"internal:role\", selector: `${ariaRole}[name=${escapeForAttributeSelector(ariaName, true)}]`, score: kRoleWithNameScoreExact }]);\n      for (const alternative of suitableTextAlternatives(ariaName))\n        candidates.push([{ engine: \"internal:role\", selector: `${ariaRole}[name=${escapeForAttributeSelector(alternative.text, false)}]`, score: kRoleWithNameScore - alternative.scoreBouns }]);\n    }\n  }\n  penalizeScoreForLength(candidates);\n  return candidates;\n}\nfunction makeSelectorForId(id) {\n  return /^[a-zA-Z][a-zA-Z0-9\\-\\_]+$/.test(id) ? \"#\" + id : `[id=\"${cssEscape(id)}\"]`;\n}\nfunction hasCSSIdToken(tokens) {\n  return tokens.some((token) => token.engine === \"css\" && (token.selector.startsWith(\"#\") || token.selector.startsWith('[id=\"')));\n}\nfunction cssFallback(injectedScript, targetElement, options) {\n  var _a;\n  const root = (_a = options.root) != null ? _a : targetElement.ownerDocument;\n  const tokens = [];\n  function uniqueCSSSelector(prefix) {\n    const path = tokens.slice();\n    if (prefix)\n      path.unshift(prefix);\n    const selector = path.join(\" > \");\n    const parsedSelector = injectedScript.parseSelector(selector);\n    const node = injectedScript.querySelector(parsedSelector, root, false);\n    return node === targetElement ? selector : void 0;\n  }\n  function makeStrict(selector) {\n    const token = { engine: \"css\", selector, score: kCSSFallbackScore };\n    const parsedSelector = injectedScript.parseSelector(selector);\n    const elements = injectedScript.querySelectorAll(parsedSelector, root);\n    if (elements.length === 1)\n      return [token];\n    const nth = { engine: \"nth\", selector: String(elements.indexOf(targetElement)), score: kNthScore };\n    return [token, nth];\n  }\n  for (let element = targetElement; element && element !== root; element = parentElementOrShadowHost(element)) {\n    const nodeName = element.nodeName.toLowerCase();\n    let bestTokenForLevel = \"\";\n    if (element.id && !options.noCSSId) {\n      const token = makeSelectorForId(element.id);\n      const selector = uniqueCSSSelector(token);\n      if (selector)\n        return makeStrict(selector);\n      bestTokenForLevel = token;\n    }\n    const parent = element.parentNode;\n    const classes = [...element.classList];\n    for (let i = 0; i < classes.length; ++i) {\n      const token = \".\" + cssEscape(classes.slice(0, i + 1).join(\".\"));\n      const selector = uniqueCSSSelector(token);\n      if (selector)\n        return makeStrict(selector);\n      if (!bestTokenForLevel && parent) {\n        const sameClassSiblings = parent.querySelectorAll(token);\n        if (sameClassSiblings.length === 1)\n          bestTokenForLevel = token;\n      }\n    }\n    if (parent) {\n      const siblings = [...parent.children];\n      const sameTagSiblings = siblings.filter((sibling) => sibling.nodeName.toLowerCase() === nodeName);\n      const token = sameTagSiblings.indexOf(element) === 0 ? cssEscape(nodeName) : `${cssEscape(nodeName)}:nth-child(${1 + siblings.indexOf(element)})`;\n      const selector = uniqueCSSSelector(token);\n      if (selector)\n        return makeStrict(selector);\n      if (!bestTokenForLevel)\n        bestTokenForLevel = token;\n    } else if (!bestTokenForLevel) {\n      bestTokenForLevel = cssEscape(nodeName);\n    }\n    tokens.unshift(bestTokenForLevel);\n  }\n  return makeStrict(uniqueCSSSelector());\n}\nfunction penalizeScoreForLength(groups) {\n  for (const group of groups) {\n    for (const token of group) {\n      if (token.score > kBeginPenalizedScore && token.score < kEndPenalizedScore)\n        token.score += Math.min(kTextScoreRange, token.selector.length / 10 | 0);\n    }\n  }\n}\nfunction joinTokens(tokens) {\n  const parts = [];\n  let lastEngine = \"\";\n  for (const { engine, selector } of tokens) {\n    if (parts.length && (lastEngine !== \"css\" || engine !== \"css\" || selector.startsWith(\":nth-match(\")))\n      parts.push(\">>\");\n    lastEngine = engine;\n    if (engine === \"css\")\n      parts.push(selector);\n    else\n      parts.push(`${engine}=${selector}`);\n  }\n  return parts.join(\" \");\n}\nfunction combineScores(tokens) {\n  let score = 0;\n  for (let i = 0; i < tokens.length; i++)\n    score += tokens[i].score * (tokens.length - i);\n  return score;\n}\nfunction chooseFirstSelector(injectedScript, scope, targetElement, selectors, allowNthMatch) {\n  const joined = selectors.map((tokens) => ({ tokens, score: combineScores(tokens) }));\n  joined.sort((a, b) => a.score - b.score);\n  let bestWithIndex = null;\n  for (const { tokens } of joined) {\n    const parsedSelector = injectedScript.parseSelector(joinTokens(tokens));\n    const result = injectedScript.querySelectorAll(parsedSelector, scope);\n    if (result[0] === targetElement && result.length === 1) {\n      return tokens;\n    }\n    const index = result.indexOf(targetElement);\n    if (!allowNthMatch || bestWithIndex || index === -1 || result.length > 5)\n      continue;\n    const nth = { engine: \"nth\", selector: String(index), score: kNthScore };\n    bestWithIndex = [...tokens, nth];\n  }\n  return bestWithIndex;\n}\nfunction isGuidLike(id) {\n  let lastCharacterType;\n  let transitionCount = 0;\n  for (let i = 0; i < id.length; ++i) {\n    const c = id[i];\n    let characterType;\n    if (c === \"-\" || c === \"_\")\n      continue;\n    if (c >= \"a\" && c <= \"z\")\n      characterType = \"lower\";\n    else if (c >= \"A\" && c <= \"Z\")\n      characterType = \"upper\";\n    else if (c >= \"0\" && c <= \"9\")\n      characterType = \"digit\";\n    else\n      characterType = \"other\";\n    if (characterType === \"lower\" && lastCharacterType === \"upper\") {\n      lastCharacterType = characterType;\n      continue;\n    }\n    if (lastCharacterType && lastCharacterType !== characterType)\n      ++transitionCount;\n    lastCharacterType = characterType;\n  }\n  return transitionCount >= id.length / 4;\n}\nfunction trimWordBoundary(text, maxLength) {\n  if (text.length <= maxLength)\n    return text;\n  text = text.substring(0, maxLength);\n  const match = text.match(/^(.*)\\b(.+?)$/);\n  if (!match)\n    return \"\";\n  return match[1].trimEnd();\n}\nfunction suitableTextAlternatives(text) {\n  let result = [];\n  {\n    const match = text.match(/^([\\d.,]+)[^.,\\w]/);\n    const leadingNumberLength = match ? match[1].length : 0;\n    if (leadingNumberLength) {\n      const alt = text.substring(leadingNumberLength).trimStart();\n      result.push({ text: alt, scoreBouns: alt.length <= 30 ? 2 : 1 });\n    }\n  }\n  {\n    const match = text.match(/[^.,\\w]([\\d.,]+)$/);\n    const trailingNumberLength = match ? match[1].length : 0;\n    if (trailingNumberLength) {\n      const alt = text.substring(0, text.length - trailingNumberLength).trimEnd();\n      result.push({ text: alt, scoreBouns: alt.length <= 30 ? 2 : 1 });\n    }\n  }\n  if (text.length <= 30) {\n    result.push({ text, scoreBouns: 0 });\n  } else {\n    result.push({ text: trimWordBoundary(text, 80), scoreBouns: 0 });\n    result.push({ text: trimWordBoundary(text, 30), scoreBouns: 1 });\n  }\n  result = result.filter((r) => r.text);\n  if (!result.length)\n    result.push({ text: text.substring(0, 80), scoreBouns: 0 });\n  return result;\n}\n\n// packages/playwright-core/src/utils/isomorphic/locatorGenerators.ts\nfunction asLocator(lang, selector, isFrameLocator = false) {\n  return asLocators(lang, selector, isFrameLocator)[0];\n}\nfunction asLocators(lang, selector, isFrameLocator = false, maxOutputSize = 20, preferredQuote) {\n  try {\n    return innerAsLocators(new generators[lang](preferredQuote), parseSelector(selector), isFrameLocator, maxOutputSize);\n  } catch (e) {\n    return [selector];\n  }\n}\nfunction innerAsLocators(factory, parsed, isFrameLocator = false, maxOutputSize = 20) {\n  const parts = [...parsed.parts];\n  for (let index = 0; index < parts.length - 1; index++) {\n    if (parts[index].name === \"nth\" && parts[index + 1].name === \"internal:control\" && parts[index + 1].body === \"enter-frame\") {\n      const [nth] = parts.splice(index, 1);\n      parts.splice(index + 1, 0, nth);\n    }\n  }\n  const tokens = [];\n  let nextBase = isFrameLocator ? \"frame-locator\" : \"page\";\n  for (let index = 0; index < parts.length; index++) {\n    const part = parts[index];\n    const base = nextBase;\n    nextBase = \"locator\";\n    if (part.name === \"nth\") {\n      if (part.body === \"0\")\n        tokens.push([factory.generateLocator(base, \"first\", \"\"), factory.generateLocator(base, \"nth\", \"0\")]);\n      else if (part.body === \"-1\")\n        tokens.push([factory.generateLocator(base, \"last\", \"\"), factory.generateLocator(base, \"nth\", \"-1\")]);\n      else\n        tokens.push([factory.generateLocator(base, \"nth\", part.body)]);\n      continue;\n    }\n    if (part.name === \"internal:text\") {\n      const { exact, text } = detectExact(part.body);\n      tokens.push([factory.generateLocator(base, \"text\", text, { exact })]);\n      continue;\n    }\n    if (part.name === \"internal:has-text\") {\n      const { exact, text } = detectExact(part.body);\n      if (!exact) {\n        tokens.push([factory.generateLocator(base, \"has-text\", text, { exact })]);\n        continue;\n      }\n    }\n    if (part.name === \"internal:has-not-text\") {\n      const { exact, text } = detectExact(part.body);\n      if (!exact) {\n        tokens.push([factory.generateLocator(base, \"has-not-text\", text, { exact })]);\n        continue;\n      }\n    }\n    if (part.name === \"internal:has\") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, \"has\", inner)));\n      continue;\n    }\n    if (part.name === \"internal:has-not\") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, \"hasNot\", inner)));\n      continue;\n    }\n    if (part.name === \"internal:and\") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, \"and\", inner)));\n      continue;\n    }\n    if (part.name === \"internal:or\") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, \"or\", inner)));\n      continue;\n    }\n    if (part.name === \"internal:chain\") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, \"chain\", inner)));\n      continue;\n    }\n    if (part.name === \"internal:label\") {\n      const { exact, text } = detectExact(part.body);\n      tokens.push([factory.generateLocator(base, \"label\", text, { exact })]);\n      continue;\n    }\n    if (part.name === \"internal:role\") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const options = { attrs: [] };\n      for (const attr of attrSelector.attributes) {\n        if (attr.name === \"name\") {\n          options.exact = attr.caseSensitive;\n          options.name = attr.value;\n        } else {\n          if (attr.name === \"level\" && typeof attr.value === \"string\")\n            attr.value = +attr.value;\n          options.attrs.push({ name: attr.name === \"include-hidden\" ? \"includeHidden\" : attr.name, value: attr.value });\n        }\n      }\n      tokens.push([factory.generateLocator(base, \"role\", attrSelector.name, options)]);\n      continue;\n    }\n    if (part.name === \"internal:testid\") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const { value } = attrSelector.attributes[0];\n      tokens.push([factory.generateLocator(base, \"test-id\", value)]);\n      continue;\n    }\n    if (part.name === \"internal:attr\") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const { name, value, caseSensitive } = attrSelector.attributes[0];\n      const text = value;\n      const exact = !!caseSensitive;\n      if (name === \"placeholder\") {\n        tokens.push([factory.generateLocator(base, \"placeholder\", text, { exact })]);\n        continue;\n      }\n      if (name === \"alt\") {\n        tokens.push([factory.generateLocator(base, \"alt\", text, { exact })]);\n        continue;\n      }\n      if (name === \"title\") {\n        tokens.push([factory.generateLocator(base, \"title\", text, { exact })]);\n        continue;\n      }\n    }\n    let locatorType = \"default\";\n    const nextPart = parts[index + 1];\n    if (nextPart && nextPart.name === \"internal:control\" && nextPart.body === \"enter-frame\") {\n      locatorType = \"frame\";\n      nextBase = \"frame-locator\";\n      index++;\n    }\n    const selectorPart = stringifySelector({ parts: [part] });\n    const locatorPart = factory.generateLocator(base, locatorType, selectorPart);\n    if (locatorType === \"default\" && nextPart && [\"internal:has-text\", \"internal:has-not-text\"].includes(nextPart.name)) {\n      const { exact, text } = detectExact(nextPart.body);\n      if (!exact) {\n        const nextLocatorPart = factory.generateLocator(\"locator\", nextPart.name === \"internal:has-text\" ? \"has-text\" : \"has-not-text\", text, { exact });\n        const options = {};\n        if (nextPart.name === \"internal:has-text\")\n          options.hasText = text;\n        else\n          options.hasNotText = text;\n        const combinedPart = factory.generateLocator(base, \"default\", selectorPart, options);\n        tokens.push([factory.chainLocators([locatorPart, nextLocatorPart]), combinedPart]);\n        index++;\n        continue;\n      }\n    }\n    let locatorPartWithEngine;\n    if ([\"xpath\", \"css\"].includes(part.name)) {\n      const selectorPart2 = stringifySelector(\n        { parts: [part] },\n        /* forceEngineName */\n        true\n      );\n      locatorPartWithEngine = factory.generateLocator(base, locatorType, selectorPart2);\n    }\n    tokens.push([locatorPart, locatorPartWithEngine].filter(Boolean));\n  }\n  return combineTokens(factory, tokens, maxOutputSize);\n}\nfunction combineTokens(factory, tokens, maxOutputSize) {\n  const currentTokens = tokens.map(() => \"\");\n  const result = [];\n  const visit = (index) => {\n    if (index === tokens.length) {\n      result.push(factory.chainLocators(currentTokens));\n      return currentTokens.length < maxOutputSize;\n    }\n    for (const taken of tokens[index]) {\n      currentTokens[index] = taken;\n      if (!visit(index + 1))\n        return false;\n    }\n    return true;\n  };\n  visit(0);\n  return result;\n}\nfunction detectExact(text) {\n  let exact = false;\n  const match = text.match(/^\\/(.*)\\/([igm]*)$/);\n  if (match)\n    return { text: new RegExp(match[1], match[2]) };\n  if (text.endsWith('\"')) {\n    text = JSON.parse(text);\n    exact = true;\n  } else if (text.endsWith('\"s')) {\n    text = JSON.parse(text.substring(0, text.length - 1));\n    exact = true;\n  } else if (text.endsWith('\"i')) {\n    text = JSON.parse(text.substring(0, text.length - 1));\n    exact = false;\n  }\n  return { exact, text };\n}\nvar JavaScriptLocatorFactory = class {\n  constructor(preferredQuote) {\n    this.preferredQuote = preferredQuote;\n  }\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case \"default\":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, { hasText: ${this.toHasText(options.hasText)} })`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, { hasNotText: ${this.toHasText(options.hasNotText)} })`;\n        return `locator(${this.quote(body)})`;\n      case \"frame\":\n        return `frameLocator(${this.quote(body)})`;\n      case \"nth\":\n        return `nth(${body})`;\n      case \"first\":\n        return `first()`;\n      case \"last\":\n        return `last()`;\n      case \"role\":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`name: ${this.regexToSourceString(options.name)}`);\n        } else if (typeof options.name === \"string\") {\n          attrs.push(`name: ${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`exact: true`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`${name}: ${typeof value === \"string\" ? this.quote(value) : value}`);\n        const attrString = attrs.length ? `, { ${attrs.join(\", \")} }` : \"\";\n        return `getByRole(${this.quote(body)}${attrString})`;\n      case \"has-text\":\n        return `filter({ hasText: ${this.toHasText(body)} })`;\n      case \"has-not-text\":\n        return `filter({ hasNotText: ${this.toHasText(body)} })`;\n      case \"has\":\n        return `filter({ has: ${body} })`;\n      case \"hasNot\":\n        return `filter({ hasNot: ${body} })`;\n      case \"and\":\n        return `and(${body})`;\n      case \"or\":\n        return `or(${body})`;\n      case \"chain\":\n        return `locator(${body})`;\n      case \"test-id\":\n        return `getByTestId(${this.toTestIdValue(body)})`;\n      case \"text\":\n        return this.toCallWithExact(\"getByText\", body, !!options.exact);\n      case \"alt\":\n        return this.toCallWithExact(\"getByAltText\", body, !!options.exact);\n      case \"placeholder\":\n        return this.toCallWithExact(\"getByPlaceholder\", body, !!options.exact);\n      case \"label\":\n        return this.toCallWithExact(\"getByLabel\", body, !!options.exact);\n      case \"title\":\n        return this.toCallWithExact(\"getByTitle\", body, !!options.exact);\n      default:\n        throw new Error(\"Unknown selector kind \" + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(\".\");\n  }\n  regexToSourceString(re) {\n    return normalizeEscapedRegexQuotes(String(re));\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToSourceString(body)})`;\n    return exact ? `${method}(${this.quote(body)}, { exact: true })` : `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToSourceString(body);\n    return this.quote(body);\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToSourceString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    var _a;\n    return escapeWithQuotes(text, (_a = this.preferredQuote) != null ? _a : \"'\");\n  }\n};\nvar PythonLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case \"default\":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, has_text=${this.toHasText(options.hasText)})`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, has_not_text=${this.toHasText(options.hasNotText)})`;\n        return `locator(${this.quote(body)})`;\n      case \"frame\":\n        return `frame_locator(${this.quote(body)})`;\n      case \"nth\":\n        return `nth(${body})`;\n      case \"first\":\n        return `first`;\n      case \"last\":\n        return `last`;\n      case \"role\":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`name=${this.regexToString(options.name)}`);\n        } else if (typeof options.name === \"string\") {\n          attrs.push(`name=${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`exact=True`);\n        }\n        for (const { name, value } of options.attrs) {\n          let valueString = typeof value === \"string\" ? this.quote(value) : value;\n          if (typeof value === \"boolean\")\n            valueString = value ? \"True\" : \"False\";\n          attrs.push(`${toSnakeCase(name)}=${valueString}`);\n        }\n        const attrString = attrs.length ? `, ${attrs.join(\", \")}` : \"\";\n        return `get_by_role(${this.quote(body)}${attrString})`;\n      case \"has-text\":\n        return `filter(has_text=${this.toHasText(body)})`;\n      case \"has-not-text\":\n        return `filter(has_not_text=${this.toHasText(body)})`;\n      case \"has\":\n        return `filter(has=${body})`;\n      case \"hasNot\":\n        return `filter(has_not=${body})`;\n      case \"and\":\n        return `and_(${body})`;\n      case \"or\":\n        return `or_(${body})`;\n      case \"chain\":\n        return `locator(${body})`;\n      case \"test-id\":\n        return `get_by_test_id(${this.toTestIdValue(body)})`;\n      case \"text\":\n        return this.toCallWithExact(\"get_by_text\", body, !!options.exact);\n      case \"alt\":\n        return this.toCallWithExact(\"get_by_alt_text\", body, !!options.exact);\n      case \"placeholder\":\n        return this.toCallWithExact(\"get_by_placeholder\", body, !!options.exact);\n      case \"label\":\n        return this.toCallWithExact(\"get_by_label\", body, !!options.exact);\n      case \"title\":\n        return this.toCallWithExact(\"get_by_title\", body, !!options.exact);\n      default:\n        throw new Error(\"Unknown selector kind \" + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(\".\");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes(\"i\") ? \", re.IGNORECASE\" : \"\";\n    return `re.compile(r\"${normalizeEscapedRegexQuotes(body.source).replace(/\\\\\\//, \"/\").replace(/\"/g, '\\\\\"')}\"${suffix})`;\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, exact=True)`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToString(body);\n    return `${this.quote(body)}`;\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    return escapeWithQuotes(text, '\"');\n  }\n};\nvar JavaLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    let clazz;\n    switch (base) {\n      case \"page\":\n        clazz = \"Page\";\n        break;\n      case \"frame-locator\":\n        clazz = \"FrameLocator\";\n        break;\n      case \"locator\":\n        clazz = \"Locator\";\n        break;\n    }\n    switch (kind) {\n      case \"default\":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasText(${this.toHasText(options.hasText)}))`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasNotText(${this.toHasText(options.hasNotText)}))`;\n        return `locator(${this.quote(body)})`;\n      case \"frame\":\n        return `frameLocator(${this.quote(body)})`;\n      case \"nth\":\n        return `nth(${body})`;\n      case \"first\":\n        return `first()`;\n      case \"last\":\n        return `last()`;\n      case \"role\":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`.setName(${this.regexToString(options.name)})`);\n        } else if (typeof options.name === \"string\") {\n          attrs.push(`.setName(${this.quote(options.name)})`);\n          if (options.exact)\n            attrs.push(`.setExact(true)`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`.set${toTitleCase(name)}(${typeof value === \"string\" ? this.quote(value) : value})`);\n        const attrString = attrs.length ? `, new ${clazz}.GetByRoleOptions()${attrs.join(\"\")}` : \"\";\n        return `getByRole(AriaRole.${toSnakeCase(body).toUpperCase()}${attrString})`;\n      case \"has-text\":\n        return `filter(new ${clazz}.FilterOptions().setHasText(${this.toHasText(body)}))`;\n      case \"has-not-text\":\n        return `filter(new ${clazz}.FilterOptions().setHasNotText(${this.toHasText(body)}))`;\n      case \"has\":\n        return `filter(new ${clazz}.FilterOptions().setHas(${body}))`;\n      case \"hasNot\":\n        return `filter(new ${clazz}.FilterOptions().setHasNot(${body}))`;\n      case \"and\":\n        return `and(${body})`;\n      case \"or\":\n        return `or(${body})`;\n      case \"chain\":\n        return `locator(${body})`;\n      case \"test-id\":\n        return `getByTestId(${this.toTestIdValue(body)})`;\n      case \"text\":\n        return this.toCallWithExact(clazz, \"getByText\", body, !!options.exact);\n      case \"alt\":\n        return this.toCallWithExact(clazz, \"getByAltText\", body, !!options.exact);\n      case \"placeholder\":\n        return this.toCallWithExact(clazz, \"getByPlaceholder\", body, !!options.exact);\n      case \"label\":\n        return this.toCallWithExact(clazz, \"getByLabel\", body, !!options.exact);\n      case \"title\":\n        return this.toCallWithExact(clazz, \"getByTitle\", body, !!options.exact);\n      default:\n        throw new Error(\"Unknown selector kind \" + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(\".\");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes(\"i\") ? \", Pattern.CASE_INSENSITIVE\" : \"\";\n    return `Pattern.compile(${this.quote(normalizeEscapedRegexQuotes(body.source))}${suffix})`;\n  }\n  toCallWithExact(clazz, method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, new ${clazz}.${toTitleCase(method)}Options().setExact(true))`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToString(body);\n    return this.quote(body);\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    return escapeWithQuotes(text, '\"');\n  }\n};\nvar CSharpLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case \"default\":\n        if (options.hasText !== void 0)\n          return `Locator(${this.quote(body)}, new() { ${this.toHasText(options.hasText)} })`;\n        if (options.hasNotText !== void 0)\n          return `Locator(${this.quote(body)}, new() { ${this.toHasNotText(options.hasNotText)} })`;\n        return `Locator(${this.quote(body)})`;\n      case \"frame\":\n        return `FrameLocator(${this.quote(body)})`;\n      case \"nth\":\n        return `Nth(${body})`;\n      case \"first\":\n        return `First`;\n      case \"last\":\n        return `Last`;\n      case \"role\":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`NameRegex = ${this.regexToString(options.name)}`);\n        } else if (typeof options.name === \"string\") {\n          attrs.push(`Name = ${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`Exact = true`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`${toTitleCase(name)} = ${typeof value === \"string\" ? this.quote(value) : value}`);\n        const attrString = attrs.length ? `, new() { ${attrs.join(\", \")} }` : \"\";\n        return `GetByRole(AriaRole.${toTitleCase(body)}${attrString})`;\n      case \"has-text\":\n        return `Filter(new() { ${this.toHasText(body)} })`;\n      case \"has-not-text\":\n        return `Filter(new() { ${this.toHasNotText(body)} })`;\n      case \"has\":\n        return `Filter(new() { Has = ${body} })`;\n      case \"hasNot\":\n        return `Filter(new() { HasNot = ${body} })`;\n      case \"and\":\n        return `And(${body})`;\n      case \"or\":\n        return `Or(${body})`;\n      case \"chain\":\n        return `Locator(${body})`;\n      case \"test-id\":\n        return `GetByTestId(${this.toTestIdValue(body)})`;\n      case \"text\":\n        return this.toCallWithExact(\"GetByText\", body, !!options.exact);\n      case \"alt\":\n        return this.toCallWithExact(\"GetByAltText\", body, !!options.exact);\n      case \"placeholder\":\n        return this.toCallWithExact(\"GetByPlaceholder\", body, !!options.exact);\n      case \"label\":\n        return this.toCallWithExact(\"GetByLabel\", body, !!options.exact);\n      case \"title\":\n        return this.toCallWithExact(\"GetByTitle\", body, !!options.exact);\n      default:\n        throw new Error(\"Unknown selector kind \" + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(\".\");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes(\"i\") ? \", RegexOptions.IgnoreCase\" : \"\";\n    return `new Regex(${this.quote(normalizeEscapedRegexQuotes(body.source))}${suffix})`;\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, new() { Exact = true })`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return `HasTextRegex = ${this.regexToString(body)}`;\n    return `HasText = ${this.quote(body)}`;\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  toHasNotText(body) {\n    if (isRegExp(body))\n      return `HasNotTextRegex = ${this.regexToString(body)}`;\n    return `HasNotText = ${this.quote(body)}`;\n  }\n  quote(text) {\n    return escapeWithQuotes(text, '\"');\n  }\n};\nvar JsonlLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    return JSON.stringify({\n      kind,\n      body,\n      options\n    });\n  }\n  chainLocators(locators) {\n    const objects = locators.map((l) => JSON.parse(l));\n    for (let i = 0; i < objects.length - 1; ++i)\n      objects[i].next = objects[i + 1];\n    return JSON.stringify(objects[0]);\n  }\n};\nvar generators = {\n  javascript: JavaScriptLocatorFactory,\n  python: PythonLocatorFactory,\n  java: JavaLocatorFactory,\n  csharp: CSharpLocatorFactory,\n  jsonl: JsonlLocatorFactory\n};\nfunction isRegExp(obj) {\n  return obj instanceof RegExp;\n}\n\n// packages/playwright-core/src/server/injected/highlight.css?inline\nvar highlight_default = `:host{font-size:13px;font-family:system-ui,Ubuntu,Droid Sans,sans-serif;color:#333}x-pw-tooltip{backdrop-filter:blur(5px);background-color:#fff;border-radius:6px;box-shadow:0 .5rem 1.2rem #0000004d;display:none;font-size:12.8px;font-weight:400;left:0;line-height:1.5;max-width:600px;position:absolute;top:0;padding:0;flex-direction:column;overflow:hidden}x-pw-tooltip-line{display:flex;max-width:600px;padding:6px;user-select:none;cursor:pointer}x-pw-tooltip-line.selectable:hover{background-color:#f2f2f2;overflow:hidden}x-pw-tooltip-footer{display:flex;max-width:600px;padding:6px;user-select:none;color:#777}x-pw-dialog{background-color:#fff;pointer-events:auto;border-radius:6px;box-shadow:0 .5rem 1.2rem #0000004d;display:flex;flex-direction:column;position:absolute;width:400px;height:150px;z-index:10;font-size:13px}x-pw-dialog-body{display:flex;flex-direction:column;flex:auto}x-pw-dialog-body label{margin:5px 8px;display:flex;flex-direction:row;align-items:center}x-pw-highlight{position:absolute;top:0;left:0;width:0;height:0}x-pw-action-point{position:absolute;width:20px;height:20px;background:red;border-radius:10px;margin:-10px 0 0 -10px;z-index:2}x-pw-separator{height:1px;margin:6px 9px;background:rgb(148 148 148 / 90%)}x-pw-tool-gripper{height:28px;width:24px;margin:2px 0;cursor:grab}x-pw-tool-gripper:active{cursor:grabbing}x-pw-tool-gripper>x-div{width:100%;height:100%;-webkit-mask-repeat:no-repeat;-webkit-mask-position:center;-webkit-mask-size:20px;mask-repeat:no-repeat;mask-position:center;mask-size:16px;-webkit-mask-image:url(\"data:image/svg+xml;utf8,<svg width='16' height='16' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' fill='currentColor'><path d='M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z' /></svg>\");mask-image:url(\"data:image/svg+xml;utf8,<svg width='16' height='16' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' fill='currentColor'><path d='M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z' /></svg>\");background-color:#555}x-pw-tools-list>label{display:flex;align-items:center;margin:0 10px;user-select:none}x-pw-tools-list{display:flex;width:100%;border-bottom:1px solid #dddddd}x-pw-tool-item{pointer-events:auto;cursor:pointer;height:28px;width:28px;border-radius:3px}x-pw-tool-item:not(.disabled):hover{background-color:#dbdbdb}x-pw-tool-item.active{background-color:#8acae480}x-pw-tool-item.active:not(.disabled):hover{background-color:#8acae4c4}x-pw-tool-item>x-div{width:100%;height:100%;-webkit-mask-repeat:no-repeat;-webkit-mask-position:center;-webkit-mask-size:20px;mask-repeat:no-repeat;mask-position:center;mask-size:16px;background-color:#3a3a3a}x-pw-tool-item.disabled>x-div{background-color:#61616180;cursor:default}x-pw-tool-item.record.active{background-color:transparent}x-pw-tool-item.record.active:hover{background-color:#dbdbdb}x-pw-tool-item.record.active>x-div{background-color:#a1260d}x-pw-tool-item.accept>x-div{background-color:#388a34}x-pw-tool-item.record>x-div{-webkit-mask-image:url(\"data:image/svg+xml;utf8,<svg width='16' height='16' viewBox='0 0 16 16' xmlns='http://www.w3.org/2000/svg' fill='currentColor'><path d='M8 1a6.8 6.8 0 0 1 1.86.253 6.899 6.899 0 0 1 3.083 1.805 6.903 6.903 0 0 1 1.804 3.083C14.916 6.738 15 7.357 15 8s-.084 1.262-.253 1.86a6.9 6.9 0 0 1-.704 1.674 7.157 7.157 0 0 1-2.516 2.509 6.966 6.966 0 0 1-1.668.71A6.984 6.984 0 0 1 8 15a6.984 6.984 0 0 1-1.86-.246 7.098 7.098 0 0 1-1.674-.711 7.3 7.3 0 0 1-1.415-1.094 7.295 7.295 0 0 1-1.094-1.415 7.098 7.098 0 0 1-.71-1.675A6.985 6.985 0 0 1 1 8c0-.643.082-1.262.246-1.86a6.968 6.968 0 0 1 .711-1.667 7.156 7.156 0 0 1 2.509-2.516 6.895 6.895 0 0 1 1.675-.704A6.808 6.808 0 0 1 8 1z'/></svg>\");mask-image:url(\"data:image/svg+xml;utf8,<svg width='16' height='16' viewBox='0 0 16 16' xmlns='http://www.w3.org/2000/svg' fill='currentColor'><path d='M8 1a6.8 6.8 0 0 1 1.86.253 6.899 6.899 0 0 1 3.083 1.805 6.903 6.903 0 0 1 1.804 3.083C14.916 6.738 15 7.357 15 8s-.084 1.262-.253 1.86a6.9 6.9 0 0 1-.704 1.674 7.157 7.157 0 0 1-2.516 2.509 6.966 6.966 0 0 1-1.668.71A6.984 6.984 0 0 1 8 15a6.984 6.984 0 0 1-1.86-.246 7.098 7.098 0 0 1-1.674-.711 7.3 7.3 0 0 1-1.415-1.094 7.295 7.295 0 0 1-1.094-1.415 7.098 7.098 0 0 1-.71-1.675A6.985 6.985 0 0 1 1 8c0-.643.082-1.262.246-1.86a6.968 6.968 0 0 1 .711-1.667 7.156 7.156 0 0 1 2.509-2.516 6.895 6.895 0 0 1 1.675-.704A6.808 6.808 0 0 1 8 1z'/></svg>\")}x-pw-tool-item.pick-locator>x-div{-webkit-mask-image:url(\"data:image/svg+xml;utf8,<svg width='16' height='16' viewBox='0 0 16 16' xmlns='http://www.w3.org/2000/svg' fill='currentColor'><path fill-rule='evenodd' clip-rule='evenodd' d='M1 3l1-1h12l1 1v6h-1V3H2v8h5v1H2l-1-1V3zm14.707 9.707L9 6v9.414l2.707-2.707h4zM10 13V8.414l3.293 3.293h-2L10 13z'/></svg>\");mask-image:url(\"data:image/svg+xml;utf8,<svg width='16' height='16' viewBox='0 0 16 16' xmlns='http://www.w3.org/2000/svg' fill='currentColor'><path fill-rule='evenodd' clip-rule='evenodd' d='M1 3l1-1h12l1 1v6h-1V3H2v8h5v1H2l-1-1V3zm14.707 9.707L9 6v9.414l2.707-2.707h4zM10 13V8.414l3.293 3.293h-2L10 13z'/></svg>\")}x-pw-tool-item.text>x-div{-webkit-mask-image:url(\"data:image/svg+xml;utf8,<svg width='16' height='16' viewBox='0 0 16 16' xmlns='http://www.w3.org/2000/svg' fill='currentColor'><path fill-rule='evenodd' clip-rule='evenodd' d='M0 11H1V13H15V11H16V14H15H1H0V11Z'/><path d='M6.84048 11H5.95963V10.1406H5.93814C5.555 10.7995 4.99104 11.1289 4.24625 11.1289C3.69839 11.1289 3.26871 10.9839 2.95718 10.6938C2.64924 10.4038 2.49527 10.0189 2.49527 9.53906C2.49527 8.51139 3.10041 7.91341 4.3107 7.74512L5.95963 7.51416C5.95963 6.57959 5.58186 6.1123 4.82632 6.1123C4.16389 6.1123 3.56591 6.33789 3.03238 6.78906V5.88672C3.57307 5.54297 4.19612 5.37109 4.90152 5.37109C6.19416 5.37109 6.84048 6.05501 6.84048 7.42285V11ZM5.95963 8.21777L4.63297 8.40039C4.22476 8.45768 3.91682 8.55973 3.70914 8.70654C3.50145 8.84977 3.39761 9.10579 3.39761 9.47461C3.39761 9.74316 3.4925 9.96338 3.68228 10.1353C3.87564 10.3035 4.13166 10.3877 4.45035 10.3877C4.8872 10.3877 5.24706 10.2355 5.52994 9.93115C5.8164 9.62321 5.95963 9.2347 5.95963 8.76562V8.21777Z'/><path d='M9.3475 10.2051H9.32601V11H8.44515V2.85742H9.32601V6.4668H9.3475C9.78076 5.73633 10.4146 5.37109 11.2489 5.37109C11.9543 5.37109 12.5057 5.61816 12.9032 6.1123C13.3042 6.60286 13.5047 7.26172 13.5047 8.08887C13.5047 9.00911 13.2809 9.74674 12.8333 10.3018C12.3857 10.8532 11.7734 11.1289 10.9964 11.1289C10.2695 11.1289 9.71989 10.821 9.3475 10.2051ZM9.32601 7.98682V8.75488C9.32601 9.20964 9.47282 9.59635 9.76644 9.91504C10.0636 10.2301 10.4396 10.3877 10.8944 10.3877C11.4279 10.3877 11.8451 10.1836 12.1458 9.77539C12.4502 9.36719 12.6024 8.79964 12.6024 8.07275C12.6024 7.46045 12.4609 6.98063 12.1781 6.6333C11.8952 6.28597 11.512 6.1123 11.0286 6.1123C10.5166 6.1123 10.1048 6.29134 9.7933 6.64941C9.48177 7.00391 9.32601 7.44971 9.32601 7.98682Z'/></svg>\");mask-image:url(\"data:image/svg+xml;utf8,<svg width='16' height='16' viewBox='0 0 16 16' xmlns='http://www.w3.org/2000/svg' fill='currentColor'><path fill-rule='evenodd' clip-rule='evenodd' d='M0 11H1V13H15V11H16V14H15H1H0V11Z'/><path d='M6.84048 11H5.95963V10.1406H5.93814C5.555 10.7995 4.99104 11.1289 4.24625 11.1289C3.69839 11.1289 3.26871 10.9839 2.95718 10.6938C2.64924 10.4038 2.49527 10.0189 2.49527 9.53906C2.49527 8.51139 3.10041 7.91341 4.3107 7.74512L5.95963 7.51416C5.95963 6.57959 5.58186 6.1123 4.82632 6.1123C4.16389 6.1123 3.56591 6.33789 3.03238 6.78906V5.88672C3.57307 5.54297 4.19612 5.37109 4.90152 5.37109C6.19416 5.37109 6.84048 6.05501 6.84048 7.42285V11ZM5.95963 8.21777L4.63297 8.40039C4.22476 8.45768 3.91682 8.55973 3.70914 8.70654C3.50145 8.84977 3.39761 9.10579 3.39761 9.47461C3.39761 9.74316 3.4925 9.96338 3.68228 10.1353C3.87564 10.3035 4.13166 10.3877 4.45035 10.3877C4.8872 10.3877 5.24706 10.2355 5.52994 9.93115C5.8164 9.62321 5.95963 9.2347 5.95963 8.76562V8.21777Z'/><path d='M9.3475 10.2051H9.32601V11H8.44515V2.85742H9.32601V6.4668H9.3475C9.78076 5.73633 10.4146 5.37109 11.2489 5.37109C11.9543 5.37109 12.5057 5.61816 12.9032 6.1123C13.3042 6.60286 13.5047 7.26172 13.5047 8.08887C13.5047 9.00911 13.2809 9.74674 12.8333 10.3018C12.3857 10.8532 11.7734 11.1289 10.9964 11.1289C10.2695 11.1289 9.71989 10.821 9.3475 10.2051ZM9.32601 7.98682V8.75488C9.32601 9.20964 9.47282 9.59635 9.76644 9.91504C10.0636 10.2301 10.4396 10.3877 10.8944 10.3877C11.4279 10.3877 11.8451 10.1836 12.1458 9.77539C12.4502 9.36719 12.6024 8.79964 12.6024 8.07275C12.6024 7.46045 12.4609 6.98063 12.1781 6.6333C11.8952 6.28597 11.512 6.1123 11.0286 6.1123C10.5166 6.1123 10.1048 6.29134 9.7933 6.64941C9.48177 7.00391 9.32601 7.44971 9.32601 7.98682Z'/></svg>\")}x-pw-tool-item.visibility>x-div{-webkit-mask-image:url(\"data:image/svg+xml;utf8,<svg width='16' height='16' viewBox='0 0 16 16' xmlns='http://www.w3.org/2000/svg' fill='currentColor'><path d='M7.99993 6.00316C9.47266 6.00316 10.6666 7.19708 10.6666 8.66981C10.6666 10.1426 9.47266 11.3365 7.99993 11.3365C6.52715 11.3365 5.33324 10.1426 5.33324 8.66981C5.33324 7.19708 6.52715 6.00316 7.99993 6.00316ZM7.99993 7.00315C7.07946 7.00315 6.33324 7.74935 6.33324 8.66981C6.33324 9.59028 7.07946 10.3365 7.99993 10.3365C8.9204 10.3365 9.6666 9.59028 9.6666 8.66981C9.6666 7.74935 8.9204 7.00315 7.99993 7.00315ZM7.99993 3.66675C11.0756 3.66675 13.7307 5.76675 14.4673 8.70968C14.5344 8.97755 14.3716 9.24908 14.1037 9.31615C13.8358 9.38315 13.5643 9.22041 13.4973 8.95248C12.8713 6.45205 10.6141 4.66675 7.99993 4.66675C5.38454 4.66675 3.12664 6.45359 2.50182 8.95555C2.43491 9.22341 2.16348 9.38635 1.89557 9.31948C1.62766 9.25255 1.46471 8.98115 1.53162 8.71321C2.26701 5.76856 4.9229 3.66675 7.99993 3.66675Z'/></svg>\");mask-image:url(\"data:image/svg+xml;utf8,<svg width='16' height='16' viewBox='0 0 16 16' xmlns='http://www.w3.org/2000/svg' fill='currentColor'><path d='M7.99993 6.00316C9.47266 6.00316 10.6666 7.19708 10.6666 8.66981C10.6666 10.1426 9.47266 11.3365 7.99993 11.3365C6.52715 11.3365 5.33324 10.1426 5.33324 8.66981C5.33324 7.19708 6.52715 6.00316 7.99993 6.00316ZM7.99993 7.00315C7.07946 7.00315 6.33324 7.74935 6.33324 8.66981C6.33324 9.59028 7.07946 10.3365 7.99993 10.3365C8.9204 10.3365 9.6666 9.59028 9.6666 8.66981C9.6666 7.74935 8.9204 7.00315 7.99993 7.00315ZM7.99993 3.66675C11.0756 3.66675 13.7307 5.76675 14.4673 8.70968C14.5344 8.97755 14.3716 9.24908 14.1037 9.31615C13.8358 9.38315 13.5643 9.22041 13.4973 8.95248C12.8713 6.45205 10.6141 4.66675 7.99993 4.66675C5.38454 4.66675 3.12664 6.45359 2.50182 8.95555C2.43491 9.22341 2.16348 9.38635 1.89557 9.31948C1.62766 9.25255 1.46471 8.98115 1.53162 8.71321C2.26701 5.76856 4.9229 3.66675 7.99993 3.66675Z'/></svg>\")}x-pw-tool-item.value>x-div{-webkit-mask-image:url(\"data:image/svg+xml;utf8,<svg width='16' height='16' viewBox='0 0 16 16' xmlns='http://www.w3.org/2000/svg' fill='currentColor'><path fill-rule='evenodd' clip-rule='evenodd' d='M4 6h8v1H4V6zm8 3H4v1h8V9z'/><path fill-rule='evenodd' clip-rule='evenodd' d='M1 4l1-1h12l1 1v8l-1 1H2l-1-1V4zm1 0v8h12V4H2z'/></svg>\");mask-image:url(\"data:image/svg+xml;utf8,<svg width='16' height='16' viewBox='0 0 16 16' xmlns='http://www.w3.org/2000/svg' fill='currentColor'><path fill-rule='evenodd' clip-rule='evenodd' d='M4 6h8v1H4V6zm8 3H4v1h8V9z'/><path fill-rule='evenodd' clip-rule='evenodd' d='M1 4l1-1h12l1 1v8l-1 1H2l-1-1V4zm1 0v8h12V4H2z'/></svg>\")}x-pw-tool-item.accept>x-div{-webkit-mask-image:url(\"data:image/svg+xml;utf8,<svg width='16' height='16' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' fill='currentColor'><path d='M9 16.17 4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z'/></svg>\");mask-image:url(\"data:image/svg+xml;utf8,<svg width='16' height='16' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' fill='currentColor'><path d='M9 16.17 4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z'/></svg>\")}x-pw-tool-item.cancel>x-div{-webkit-mask-image:url(\"data:image/svg+xml;utf8,<svg width='16' height='16' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' fill='currentColor'><path d='M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z'/></svg>\");mask-image:url(\"data:image/svg+xml;utf8,<svg width='16' height='16' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' fill='currentColor'><path d='M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z'/></svg>\")}x-pw-tool-item.succeeded>x-div{-webkit-mask-image:url(\"data:image/svg+xml;utf8,<svg width='16' height='16' viewBox='0 0 16 16' xmlns='http://www.w3.org/2000/svg' fill='currentColor'><path d='M6.27 10.87h.71l4.56-4.56-.71-.71-4.2 4.21-1.92-1.92L4 8.6l2.27 2.27z'/><path fill-rule='evenodd' clip-rule='evenodd' d='M8.6 1c1.6.1 3.1.9 4.2 2 1.3 1.4 2 3.1 2 5.1 0 1.6-.6 3.1-1.6 4.4-1 1.2-2.4 2.1-4 2.4-1.6.3-3.2.1-4.6-.7-1.4-.8-2.5-2-3.1-3.5C.9 9.2.8 7.5 1.3 6c.5-1.6 1.4-2.9 2.8-3.8C5.4 1.3 7 .9 8.6 1zm.5 12.9c1.3-.3 2.5-1 3.4-2.1.8-1.1 1.3-2.4 1.2-3.8 0-1.6-.6-3.2-1.7-4.3-1-1-2.2-1.6-3.6-1.7-1.3-.1-2.7.2-3.8 1-1.1.8-1.9 1.9-2.3 3.3-.4 1.3-.4 2.7.2 4 .6 1.3 1.5 2.3 2.7 3 1.2.7 2.6.9 3.9.6z'/></svg>\")!important;mask-image:url(\"data:image/svg+xml;utf8,<svg width='16' height='16' viewBox='0 0 16 16' xmlns='http://www.w3.org/2000/svg' fill='currentColor'><path d='M6.27 10.87h.71l4.56-4.56-.71-.71-4.2 4.21-1.92-1.92L4 8.6l2.27 2.27z'/><path fill-rule='evenodd' clip-rule='evenodd' d='M8.6 1c1.6.1 3.1.9 4.2 2 1.3 1.4 2 3.1 2 5.1 0 1.6-.6 3.1-1.6 4.4-1 1.2-2.4 2.1-4 2.4-1.6.3-3.2.1-4.6-.7-1.4-.8-2.5-2-3.1-3.5C.9 9.2.8 7.5 1.3 6c.5-1.6 1.4-2.9 2.8-3.8C5.4 1.3 7 .9 8.6 1zm.5 12.9c1.3-.3 2.5-1 3.4-2.1.8-1.1 1.3-2.4 1.2-3.8 0-1.6-.6-3.2-1.7-4.3-1-1-2.2-1.6-3.6-1.7-1.3-.1-2.7.2-3.8 1-1.1.8-1.9 1.9-2.3 3.3-.4 1.3-.4 2.7.2 4 .6 1.3 1.5 2.3 2.7 3 1.2.7 2.6.9 3.9.6z'/></svg>\")!important;background-color:#388a34!important;-webkit-mask-size:18px!important;mask-size:18px!important}x-pw-overlay{position:absolute;top:0;max-width:min-content;z-index:2147483647;background:transparent;pointer-events:auto}x-pw-overlay x-pw-tools-list{background-color:#fffd;box-shadow:#0000001a 0 5px 5px;border-radius:3px;border-bottom:none}x-pw-overlay x-pw-tool-item{margin:2px}textarea.text-editor{font-family:system-ui,Ubuntu,Droid Sans,sans-serif;flex:auto;border:none;margin:6px 10px;color:#333;outline:1px solid transparent!important;resize:none;padding:0;font-size:13px}textarea.text-editor.does-not-match{outline:1px solid red!important}x-div{display:block}x-spacer{flex:auto}*{box-sizing:border-box}*[hidden]{display:none!important}x-locator-editor{flex:none;width:100%;height:60px;padding:4px;border-bottom:1px solid #dddddd;outline:1px solid transparent}x-locator-editor.does-not-match{outline:1px solid red}.CodeMirror{width:100%!important;height:100%!important}\n`;\n\n// packages/playwright-core/src/server/injected/highlight.ts\nvar Highlight = class {\n  constructor(injectedScript) {\n    this._highlightEntries = [];\n    this._highlightOptions = {};\n    this._language = \"javascript\";\n    this._injectedScript = injectedScript;\n    const document = injectedScript.document;\n    this._isUnderTest = injectedScript.isUnderTest;\n    this._glassPaneElement = document.createElement(\"x-pw-glass\");\n    this._glassPaneElement.style.position = \"fixed\";\n    this._glassPaneElement.style.top = \"0\";\n    this._glassPaneElement.style.right = \"0\";\n    this._glassPaneElement.style.bottom = \"0\";\n    this._glassPaneElement.style.left = \"0\";\n    this._glassPaneElement.style.zIndex = \"2147483646\";\n    this._glassPaneElement.style.pointerEvents = \"none\";\n    this._glassPaneElement.style.display = \"flex\";\n    this._glassPaneElement.style.backgroundColor = \"transparent\";\n    for (const eventName of [\"click\", \"auxclick\", \"dragstart\", \"input\", \"keydown\", \"keyup\", \"pointerdown\", \"pointerup\", \"mousedown\", \"mouseup\", \"mouseleave\", \"focus\", \"scroll\"]) {\n      this._glassPaneElement.addEventListener(eventName, (e) => {\n        e.stopPropagation();\n        e.stopImmediatePropagation();\n        if (e.type === \"click\" && e.button === 0 && this._highlightOptions.tooltipListItemSelected)\n          this._highlightOptions.tooltipListItemSelected(void 0);\n      });\n    }\n    this._actionPointElement = document.createElement(\"x-pw-action-point\");\n    this._actionPointElement.setAttribute(\"hidden\", \"true\");\n    this._glassPaneShadow = this._glassPaneElement.attachShadow({ mode: this._isUnderTest ? \"open\" : \"closed\" });\n    this._glassPaneShadow.appendChild(this._actionPointElement);\n    const styleElement = document.createElement(\"style\");\n    styleElement.textContent = highlight_default;\n    this._glassPaneShadow.appendChild(styleElement);\n  }\n  install() {\n    this._injectedScript.document.documentElement.appendChild(this._glassPaneElement);\n  }\n  setLanguage(language) {\n    this._language = language;\n  }\n  runHighlightOnRaf(selector) {\n    if (this._rafRequest)\n      cancelAnimationFrame(this._rafRequest);\n    this.updateHighlight(this._injectedScript.querySelectorAll(selector, this._injectedScript.document.documentElement), { tooltipText: asLocator(this._language, stringifySelector(selector)) });\n    this._rafRequest = requestAnimationFrame(() => this.runHighlightOnRaf(selector));\n  }\n  uninstall() {\n    if (this._rafRequest)\n      cancelAnimationFrame(this._rafRequest);\n    this._glassPaneElement.remove();\n  }\n  showActionPoint(x, y) {\n    this._actionPointElement.style.top = y + \"px\";\n    this._actionPointElement.style.left = x + \"px\";\n    this._actionPointElement.hidden = false;\n  }\n  hideActionPoint() {\n    this._actionPointElement.hidden = true;\n  }\n  clearHighlight() {\n    var _a, _b;\n    for (const entry of this._highlightEntries) {\n      (_a = entry.highlightElement) == null ? void 0 : _a.remove();\n      (_b = entry.tooltipElement) == null ? void 0 : _b.remove();\n    }\n    this._highlightEntries = [];\n    this._highlightOptions = {};\n    this._glassPaneElement.style.pointerEvents = \"none\";\n  }\n  updateHighlight(elements, options) {\n    this._innerUpdateHighlight(elements, options);\n  }\n  maskElements(elements, color) {\n    this._innerUpdateHighlight(elements, { color });\n  }\n  _innerUpdateHighlight(elements, options) {\n    let color = options.color;\n    if (!color)\n      color = elements.length > 1 ? \"#f6b26b7f\" : \"#6fa8dc7f\";\n    if (this._highlightIsUpToDate(elements, options))\n      return;\n    this.clearHighlight();\n    this._highlightOptions = options;\n    this._glassPaneElement.style.pointerEvents = options.tooltipListItemSelected ? \"initial\" : \"none\";\n    for (let i = 0; i < elements.length; ++i) {\n      const highlightElement = this._createHighlightElement();\n      this._glassPaneShadow.appendChild(highlightElement);\n      let tooltipElement;\n      if (options.tooltipList || options.tooltipText || options.tooltipFooter) {\n        tooltipElement = this._injectedScript.document.createElement(\"x-pw-tooltip\");\n        this._glassPaneShadow.appendChild(tooltipElement);\n        tooltipElement.style.top = \"0\";\n        tooltipElement.style.left = \"0\";\n        tooltipElement.style.display = \"flex\";\n        let lines = [];\n        if (options.tooltipList) {\n          lines = options.tooltipList;\n        } else if (options.tooltipText) {\n          const suffix = elements.length > 1 ? ` [${i + 1} of ${elements.length}]` : \"\";\n          lines = [options.tooltipText + suffix];\n        }\n        for (let index = 0; index < lines.length; index++) {\n          const element = this._injectedScript.document.createElement(\"x-pw-tooltip-line\");\n          element.textContent = lines[index];\n          tooltipElement.appendChild(element);\n          if (options.tooltipListItemSelected) {\n            element.classList.add(\"selectable\");\n            element.addEventListener(\"click\", () => {\n              var _a;\n              return (_a = options.tooltipListItemSelected) == null ? void 0 : _a.call(options, index);\n            });\n          }\n        }\n        if (options.tooltipFooter) {\n          const footer = this._injectedScript.document.createElement(\"x-pw-tooltip-footer\");\n          footer.textContent = options.tooltipFooter;\n          tooltipElement.appendChild(footer);\n        }\n      }\n      this._highlightEntries.push({ targetElement: elements[i], tooltipElement, highlightElement });\n    }\n    for (const entry of this._highlightEntries) {\n      entry.box = entry.targetElement.getBoundingClientRect();\n      if (!entry.tooltipElement)\n        continue;\n      const { anchorLeft, anchorTop } = this.tooltipPosition(entry.box, entry.tooltipElement);\n      entry.tooltipTop = anchorTop;\n      entry.tooltipLeft = anchorLeft;\n    }\n    for (const entry of this._highlightEntries) {\n      if (entry.tooltipElement) {\n        entry.tooltipElement.style.top = entry.tooltipTop + \"px\";\n        entry.tooltipElement.style.left = entry.tooltipLeft + \"px\";\n      }\n      const box = entry.box;\n      entry.highlightElement.style.backgroundColor = color;\n      entry.highlightElement.style.left = box.x + \"px\";\n      entry.highlightElement.style.top = box.y + \"px\";\n      entry.highlightElement.style.width = box.width + \"px\";\n      entry.highlightElement.style.height = box.height + \"px\";\n      entry.highlightElement.style.display = \"block\";\n      if (this._isUnderTest)\n        console.error(\"Highlight box for test: \" + JSON.stringify({ x: box.x, y: box.y, width: box.width, height: box.height }));\n    }\n  }\n  firstBox() {\n    var _a;\n    return (_a = this._highlightEntries[0]) == null ? void 0 : _a.box;\n  }\n  tooltipPosition(box, tooltipElement) {\n    const tooltipWidth = tooltipElement.offsetWidth;\n    const tooltipHeight = tooltipElement.offsetHeight;\n    const totalWidth = this._glassPaneElement.offsetWidth;\n    const totalHeight = this._glassPaneElement.offsetHeight;\n    let anchorLeft = box.left;\n    if (anchorLeft + tooltipWidth > totalWidth - 5)\n      anchorLeft = totalWidth - tooltipWidth - 5;\n    let anchorTop = box.bottom + 5;\n    if (anchorTop + tooltipHeight > totalHeight - 5) {\n      if (box.top > tooltipHeight + 5) {\n        anchorTop = box.top - tooltipHeight - 5;\n      } else {\n        anchorTop = totalHeight - 5 - tooltipHeight;\n      }\n    }\n    return { anchorLeft, anchorTop };\n  }\n  _highlightIsUpToDate(elements, options) {\n    var _a, _b;\n    if (options.tooltipText !== this._highlightOptions.tooltipText)\n      return false;\n    if (options.tooltipListItemSelected !== this._highlightOptions.tooltipListItemSelected)\n      return false;\n    if (options.tooltipFooter !== this._highlightOptions.tooltipFooter)\n      return false;\n    if (((_a = options.tooltipList) == null ? void 0 : _a.length) !== ((_b = this._highlightOptions.tooltipList) == null ? void 0 : _b.length))\n      return false;\n    if (options.tooltipList && this._highlightOptions.tooltipList) {\n      for (let i = 0; i < options.tooltipList.length; i++) {\n        if (options.tooltipList[i] !== this._highlightOptions.tooltipList[i])\n          return false;\n      }\n    }\n    if (elements.length !== this._highlightEntries.length)\n      return false;\n    for (let i = 0; i < this._highlightEntries.length; ++i) {\n      if (elements[i] !== this._highlightEntries[i].targetElement)\n        return false;\n      const oldBox = this._highlightEntries[i].box;\n      if (!oldBox)\n        return false;\n      const box = elements[i].getBoundingClientRect();\n      if (box.top !== oldBox.top || box.right !== oldBox.right || box.bottom !== oldBox.bottom || box.left !== oldBox.left)\n        return false;\n    }\n    return true;\n  }\n  _createHighlightElement() {\n    return this._injectedScript.document.createElement(\"x-pw-highlight\");\n  }\n  appendChild(element) {\n    this._glassPaneShadow.appendChild(element);\n  }\n};\n\n// packages/playwright-core/src/server/injected/injectedScript.ts\nvar InjectedScript = class {\n  // eslint-disable-next-line no-restricted-globals\n  constructor(window, isUnderTest, sdkLanguage, testIdAttributeNameForStrictErrorAndConsoleCodegen, stableRafCount, browserName, customEngines) {\n    this.onGlobalListenersRemoved = /* @__PURE__ */ new Set();\n    this._testIdAttributeNameForStrictErrorAndConsoleCodegen = \"data-testid\";\n    this.utils = { isInsideScope, elementText, asLocator, normalizeWhiteSpace };\n    this.window = window;\n    this.document = window.document;\n    this.isUnderTest = isUnderTest;\n    this._sdkLanguage = sdkLanguage;\n    this._testIdAttributeNameForStrictErrorAndConsoleCodegen = testIdAttributeNameForStrictErrorAndConsoleCodegen;\n    this._evaluator = new SelectorEvaluatorImpl(/* @__PURE__ */ new Map());\n    this._engines = /* @__PURE__ */ new Map();\n    this._engines.set(\"xpath\", XPathEngine);\n    this._engines.set(\"xpath:light\", XPathEngine);\n    this._engines.set(\"_react\", ReactEngine);\n    this._engines.set(\"_vue\", VueEngine);\n    this._engines.set(\"role\", createRoleEngine(false));\n    this._engines.set(\"text\", this._createTextEngine(true, false));\n    this._engines.set(\"text:light\", this._createTextEngine(false, false));\n    this._engines.set(\"id\", this._createAttributeEngine(\"id\", true));\n    this._engines.set(\"id:light\", this._createAttributeEngine(\"id\", false));\n    this._engines.set(\"data-testid\", this._createAttributeEngine(\"data-testid\", true));\n    this._engines.set(\"data-testid:light\", this._createAttributeEngine(\"data-testid\", false));\n    this._engines.set(\"data-test-id\", this._createAttributeEngine(\"data-test-id\", true));\n    this._engines.set(\"data-test-id:light\", this._createAttributeEngine(\"data-test-id\", false));\n    this._engines.set(\"data-test\", this._createAttributeEngine(\"data-test\", true));\n    this._engines.set(\"data-test:light\", this._createAttributeEngine(\"data-test\", false));\n    this._engines.set(\"css\", this._createCSSEngine());\n    this._engines.set(\"nth\", { queryAll: () => [] });\n    this._engines.set(\"visible\", this._createVisibleEngine());\n    this._engines.set(\"internal:control\", this._createControlEngine());\n    this._engines.set(\"internal:has\", this._createHasEngine());\n    this._engines.set(\"internal:has-not\", this._createHasNotEngine());\n    this._engines.set(\"internal:and\", { queryAll: () => [] });\n    this._engines.set(\"internal:or\", { queryAll: () => [] });\n    this._engines.set(\"internal:chain\", this._createInternalChainEngine());\n    this._engines.set(\"internal:label\", this._createInternalLabelEngine());\n    this._engines.set(\"internal:text\", this._createTextEngine(true, true));\n    this._engines.set(\"internal:has-text\", this._createInternalHasTextEngine());\n    this._engines.set(\"internal:has-not-text\", this._createInternalHasNotTextEngine());\n    this._engines.set(\"internal:attr\", this._createNamedAttributeEngine());\n    this._engines.set(\"internal:testid\", this._createNamedAttributeEngine());\n    this._engines.set(\"internal:role\", createRoleEngine(true));\n    for (const { name, engine } of customEngines)\n      this._engines.set(name, engine);\n    this._stableRafCount = stableRafCount;\n    this._browserName = browserName;\n    setBrowserName(browserName);\n    this._setupGlobalListenersRemovalDetection();\n    this._setupHitTargetInterceptors();\n    if (isUnderTest)\n      this.window.__injectedScript = this;\n  }\n  eval(expression) {\n    return this.window.eval(expression);\n  }\n  testIdAttributeNameForStrictErrorAndConsoleCodegen() {\n    return this._testIdAttributeNameForStrictErrorAndConsoleCodegen;\n  }\n  parseSelector(selector) {\n    const result = parseSelector(selector);\n    visitAllSelectorParts(result, (part) => {\n      if (!this._engines.has(part.name))\n        throw this.createStacklessError(`Unknown engine \"${part.name}\" while parsing selector ${selector}`);\n    });\n    return result;\n  }\n  generateSelector(targetElement, options) {\n    return generateSelector(this, targetElement, options);\n  }\n  generateSelectorSimple(targetElement, options) {\n    return generateSelector(this, targetElement, { ...options, testIdAttributeName: this._testIdAttributeNameForStrictErrorAndConsoleCodegen }).selector;\n  }\n  querySelector(selector, root, strict) {\n    const result = this.querySelectorAll(selector, root);\n    if (strict && result.length > 1)\n      throw this.strictModeViolationError(selector, result);\n    return result[0];\n  }\n  _queryNth(elements, part) {\n    const list = [...elements];\n    let nth = +part.body;\n    if (nth === -1)\n      nth = list.length - 1;\n    return new Set(list.slice(nth, nth + 1));\n  }\n  _queryLayoutSelector(elements, part, originalRoot) {\n    const name = part.name;\n    const body = part.body;\n    const result = [];\n    const inner = this.querySelectorAll(body.parsed, originalRoot);\n    for (const element of elements) {\n      const score = layoutSelectorScore(name, element, inner, body.distance);\n      if (score !== void 0)\n        result.push({ element, score });\n    }\n    result.sort((a, b) => a.score - b.score);\n    return new Set(result.map((r) => r.element));\n  }\n  querySelectorAll(selector, root) {\n    if (selector.capture !== void 0) {\n      if (selector.parts.some((part) => part.name === \"nth\"))\n        throw this.createStacklessError(`Can't query n-th element in a request with the capture.`);\n      const withHas = { parts: selector.parts.slice(0, selector.capture + 1) };\n      if (selector.capture < selector.parts.length - 1) {\n        const parsed = { parts: selector.parts.slice(selector.capture + 1) };\n        const has = { name: \"internal:has\", body: { parsed }, source: stringifySelector(parsed) };\n        withHas.parts.push(has);\n      }\n      return this.querySelectorAll(withHas, root);\n    }\n    if (!root[\"querySelectorAll\"])\n      throw this.createStacklessError(\"Node is not queryable.\");\n    if (selector.capture !== void 0) {\n      throw this.createStacklessError(\"Internal error: there should not be a capture in the selector.\");\n    }\n    if (root.nodeType === 11 && selector.parts.length === 1 && selector.parts[0].name === \"css\" && selector.parts[0].source === \":scope\")\n      return [root];\n    this._evaluator.begin();\n    try {\n      let roots = /* @__PURE__ */ new Set([root]);\n      for (const part of selector.parts) {\n        if (part.name === \"nth\") {\n          roots = this._queryNth(roots, part);\n        } else if (part.name === \"internal:and\") {\n          const andElements = this.querySelectorAll(part.body.parsed, root);\n          roots = new Set(andElements.filter((e) => roots.has(e)));\n        } else if (part.name === \"internal:or\") {\n          const orElements = this.querySelectorAll(part.body.parsed, root);\n          roots = new Set(sortInDOMOrder(/* @__PURE__ */ new Set([...roots, ...orElements])));\n        } else if (kLayoutSelectorNames.includes(part.name)) {\n          roots = this._queryLayoutSelector(roots, part, root);\n        } else {\n          const next = /* @__PURE__ */ new Set();\n          for (const root2 of roots) {\n            const all = this._queryEngineAll(part, root2);\n            for (const one of all)\n              next.add(one);\n          }\n          roots = next;\n        }\n      }\n      return [...roots];\n    } finally {\n      this._evaluator.end();\n    }\n  }\n  _queryEngineAll(part, root) {\n    const result = this._engines.get(part.name).queryAll(root, part.body);\n    for (const element of result) {\n      if (!(\"nodeName\" in element))\n        throw this.createStacklessError(`Expected a Node but got ${Object.prototype.toString.call(element)}`);\n    }\n    return result;\n  }\n  _createAttributeEngine(attribute, shadow) {\n    const toCSS = (selector) => {\n      const css = `[${attribute}=${JSON.stringify(selector)}]`;\n      return [{ simples: [{ selector: { css, functions: [] }, combinator: \"\" }] }];\n    };\n    return {\n      queryAll: (root, selector) => {\n        return this._evaluator.query({ scope: root, pierceShadow: shadow }, toCSS(selector));\n      }\n    };\n  }\n  _createCSSEngine() {\n    return {\n      queryAll: (root, body) => {\n        return this._evaluator.query({ scope: root, pierceShadow: true }, body);\n      }\n    };\n  }\n  _createTextEngine(shadow, internal) {\n    const queryAll = (root, selector) => {\n      const { matcher, kind } = createTextMatcher(selector, internal);\n      const result = [];\n      let lastDidNotMatchSelf = null;\n      const appendElement = (element) => {\n        if (kind === \"lax\" && lastDidNotMatchSelf && lastDidNotMatchSelf.contains(element))\n          return false;\n        const matches = elementMatchesText(this._evaluator._cacheText, element, matcher);\n        if (matches === \"none\")\n          lastDidNotMatchSelf = element;\n        if (matches === \"self\" || matches === \"selfAndChildren\" && kind === \"strict\" && !internal)\n          result.push(element);\n      };\n      if (root.nodeType === Node.ELEMENT_NODE)\n        appendElement(root);\n      const elements = this._evaluator._queryCSS({ scope: root, pierceShadow: shadow }, \"*\");\n      for (const element of elements)\n        appendElement(element);\n      return result;\n    };\n    return { queryAll };\n  }\n  _createInternalHasTextEngine() {\n    return {\n      queryAll: (root, selector) => {\n        if (root.nodeType !== 1)\n          return [];\n        const element = root;\n        const text = elementText(this._evaluator._cacheText, element);\n        const { matcher } = createTextMatcher(selector, true);\n        return matcher(text) ? [element] : [];\n      }\n    };\n  }\n  _createInternalHasNotTextEngine() {\n    return {\n      queryAll: (root, selector) => {\n        if (root.nodeType !== 1)\n          return [];\n        const element = root;\n        const text = elementText(this._evaluator._cacheText, element);\n        const { matcher } = createTextMatcher(selector, true);\n        return matcher(text) ? [] : [element];\n      }\n    };\n  }\n  _createInternalLabelEngine() {\n    return {\n      queryAll: (root, selector) => {\n        const { matcher } = createTextMatcher(selector, true);\n        const allElements = this._evaluator._queryCSS({ scope: root, pierceShadow: true }, \"*\");\n        return allElements.filter((element) => {\n          return getElementLabels(this._evaluator._cacheText, element).some((label) => matcher(label));\n        });\n      }\n    };\n  }\n  _createNamedAttributeEngine() {\n    const queryAll = (root, selector) => {\n      const parsed = parseAttributeSelector(selector, true);\n      if (parsed.name || parsed.attributes.length !== 1)\n        throw new Error(\"Malformed attribute selector: \" + selector);\n      const { name, value, caseSensitive } = parsed.attributes[0];\n      const lowerCaseValue = caseSensitive ? null : value.toLowerCase();\n      let matcher;\n      if (value instanceof RegExp)\n        matcher = (s) => !!s.match(value);\n      else if (caseSensitive)\n        matcher = (s) => s === value;\n      else\n        matcher = (s) => s.toLowerCase().includes(lowerCaseValue);\n      const elements = this._evaluator._queryCSS({ scope: root, pierceShadow: true }, `[${name}]`);\n      return elements.filter((e) => matcher(e.getAttribute(name)));\n    };\n    return { queryAll };\n  }\n  _createControlEngine() {\n    return {\n      queryAll(root, body) {\n        if (body === \"enter-frame\")\n          return [];\n        if (body === \"return-empty\")\n          return [];\n        if (body === \"component\") {\n          if (root.nodeType !== 1)\n            return [];\n          return [root.childElementCount === 1 ? root.firstElementChild : root];\n        }\n        throw new Error(`Internal error, unknown internal:control selector ${body}`);\n      }\n    };\n  }\n  _createHasEngine() {\n    const queryAll = (root, body) => {\n      if (root.nodeType !== 1)\n        return [];\n      const has = !!this.querySelector(body.parsed, root, false);\n      return has ? [root] : [];\n    };\n    return { queryAll };\n  }\n  _createHasNotEngine() {\n    const queryAll = (root, body) => {\n      if (root.nodeType !== 1)\n        return [];\n      const has = !!this.querySelector(body.parsed, root, false);\n      return has ? [] : [root];\n    };\n    return { queryAll };\n  }\n  _createVisibleEngine() {\n    const queryAll = (root, body) => {\n      if (root.nodeType !== 1)\n        return [];\n      return isElementVisible(root) === Boolean(body) ? [root] : [];\n    };\n    return { queryAll };\n  }\n  _createInternalChainEngine() {\n    const queryAll = (root, body) => {\n      return this.querySelectorAll(body.parsed, root);\n    };\n    return { queryAll };\n  }\n  extend(source, params) {\n    const constrFunction = this.window.eval(`\n    (() => {\n      const module = {};\n      ${source}\n      return module.exports.default();\n    })()`);\n    return new constrFunction(this, params);\n  }\n  isVisible(element) {\n    return isElementVisible(element);\n  }\n  async viewportRatio(element) {\n    return await new Promise((resolve) => {\n      const observer = new IntersectionObserver((entries) => {\n        resolve(entries[0].intersectionRatio);\n        observer.disconnect();\n      });\n      observer.observe(element);\n      requestAnimationFrame(() => {\n      });\n    });\n  }\n  getElementBorderWidth(node) {\n    if (node.nodeType !== Node.ELEMENT_NODE || !node.ownerDocument || !node.ownerDocument.defaultView)\n      return { left: 0, top: 0 };\n    const style = node.ownerDocument.defaultView.getComputedStyle(node);\n    return { left: parseInt(style.borderLeftWidth || \"\", 10), top: parseInt(style.borderTopWidth || \"\", 10) };\n  }\n  describeIFrameStyle(iframe) {\n    if (!iframe.ownerDocument || !iframe.ownerDocument.defaultView)\n      return \"error:notconnected\";\n    const defaultView = iframe.ownerDocument.defaultView;\n    for (let e = iframe; e; e = parentElementOrShadowHost(e)) {\n      if (defaultView.getComputedStyle(e).transform !== \"none\")\n        return \"transformed\";\n    }\n    const iframeStyle = defaultView.getComputedStyle(iframe);\n    return {\n      left: parseInt(iframeStyle.borderLeftWidth || \"\", 10) + parseInt(iframeStyle.paddingLeft || \"\", 10),\n      top: parseInt(iframeStyle.borderTopWidth || \"\", 10) + parseInt(iframeStyle.paddingTop || \"\", 10)\n    };\n  }\n  retarget(node, behavior) {\n    let element = node.nodeType === Node.ELEMENT_NODE ? node : node.parentElement;\n    if (!element)\n      return null;\n    if (behavior === \"none\")\n      return element;\n    if (!element.matches(\"input, textarea, select\")) {\n      if (behavior === \"button-link\")\n        element = element.closest(\"button, [role=button], a, [role=link]\") || element;\n      else\n        element = element.closest(\"button, [role=button], [role=checkbox], [role=radio]\") || element;\n    }\n    if (behavior === \"follow-label\") {\n      if (!element.matches(\"input, textarea, button, select, [role=button], [role=checkbox], [role=radio]\") && !element.isContentEditable) {\n        element = element.closest(\"label\") || element;\n      }\n      if (element.nodeName === \"LABEL\")\n        element = element.control || element;\n    }\n    return element;\n  }\n  async checkElementStates(node, states) {\n    if (states.includes(\"stable\")) {\n      const stableResult = await this._checkElementIsStable(node);\n      if (stableResult === false)\n        return { missingState: \"stable\" };\n      if (stableResult === \"error:notconnected\")\n        return stableResult;\n    }\n    for (const state of states) {\n      if (state !== \"stable\") {\n        const result = this.elementState(node, state);\n        if (result === false)\n          return { missingState: state };\n        if (result === \"error:notconnected\")\n          return result;\n      }\n    }\n  }\n  async _checkElementIsStable(node) {\n    const continuePolling = Symbol(\"continuePolling\");\n    let lastRect;\n    let stableRafCounter = 0;\n    let lastTime = 0;\n    const check = () => {\n      const element = this.retarget(node, \"no-follow-label\");\n      if (!element)\n        return \"error:notconnected\";\n      const time = performance.now();\n      if (this._stableRafCount > 1 && time - lastTime < 15)\n        return continuePolling;\n      lastTime = time;\n      const clientRect = element.getBoundingClientRect();\n      const rect = { x: clientRect.top, y: clientRect.left, width: clientRect.width, height: clientRect.height };\n      if (lastRect) {\n        const samePosition = rect.x === lastRect.x && rect.y === lastRect.y && rect.width === lastRect.width && rect.height === lastRect.height;\n        if (!samePosition)\n          return false;\n        if (++stableRafCounter >= this._stableRafCount)\n          return true;\n      }\n      lastRect = rect;\n      return continuePolling;\n    };\n    let fulfill;\n    let reject;\n    const result = new Promise((f, r) => {\n      fulfill = f;\n      reject = r;\n    });\n    const raf = () => {\n      try {\n        const success = check();\n        if (success !== continuePolling)\n          fulfill(success);\n        else\n          requestAnimationFrame(raf);\n      } catch (e) {\n        reject(e);\n      }\n    };\n    requestAnimationFrame(raf);\n    return result;\n  }\n  elementState(node, state) {\n    const element = this.retarget(node, [\"stable\", \"visible\", \"hidden\"].includes(state) ? \"none\" : \"follow-label\");\n    if (!element || !element.isConnected) {\n      if (state === \"hidden\")\n        return true;\n      return \"error:notconnected\";\n    }\n    if (state === \"visible\")\n      return this.isVisible(element);\n    if (state === \"hidden\")\n      return !this.isVisible(element);\n    const disabled = getAriaDisabled(element);\n    if (state === \"disabled\")\n      return disabled;\n    if (state === \"enabled\")\n      return !disabled;\n    const editable = !([\"INPUT\", \"TEXTAREA\", \"SELECT\"].includes(element.nodeName) && element.hasAttribute(\"readonly\"));\n    if (state === \"editable\")\n      return !disabled && editable;\n    if (state === \"checked\" || state === \"unchecked\") {\n      const need = state === \"checked\";\n      const checked = getChecked(element, false);\n      if (checked === \"error\")\n        throw this.createStacklessError(\"Not a checkbox or radio button\");\n      return need === checked;\n    }\n    throw this.createStacklessError(`Unexpected element state \"${state}\"`);\n  }\n  selectOptions(node, optionsToSelect) {\n    const element = this.retarget(node, \"follow-label\");\n    if (!element)\n      return \"error:notconnected\";\n    if (element.nodeName.toLowerCase() !== \"select\")\n      throw this.createStacklessError(\"Element is not a <select> element\");\n    const select = element;\n    const options = [...select.options];\n    const selectedOptions = [];\n    let remainingOptionsToSelect = optionsToSelect.slice();\n    for (let index = 0; index < options.length; index++) {\n      const option = options[index];\n      const filter = (optionToSelect) => {\n        if (optionToSelect instanceof Node)\n          return option === optionToSelect;\n        let matches = true;\n        if (optionToSelect.valueOrLabel !== void 0)\n          matches = matches && (optionToSelect.valueOrLabel === option.value || optionToSelect.valueOrLabel === option.label);\n        if (optionToSelect.value !== void 0)\n          matches = matches && optionToSelect.value === option.value;\n        if (optionToSelect.label !== void 0)\n          matches = matches && optionToSelect.label === option.label;\n        if (optionToSelect.index !== void 0)\n          matches = matches && optionToSelect.index === index;\n        return matches;\n      };\n      if (!remainingOptionsToSelect.some(filter))\n        continue;\n      selectedOptions.push(option);\n      if (select.multiple) {\n        remainingOptionsToSelect = remainingOptionsToSelect.filter((o) => !filter(o));\n      } else {\n        remainingOptionsToSelect = [];\n        break;\n      }\n    }\n    if (remainingOptionsToSelect.length)\n      return \"error:optionsnotfound\";\n    select.value = void 0;\n    selectedOptions.forEach((option) => option.selected = true);\n    select.dispatchEvent(new Event(\"input\", { bubbles: true, composed: true }));\n    select.dispatchEvent(new Event(\"change\", { bubbles: true }));\n    return selectedOptions.map((option) => option.value);\n  }\n  fill(node, value) {\n    const element = this.retarget(node, \"follow-label\");\n    if (!element)\n      return \"error:notconnected\";\n    if (element.nodeName.toLowerCase() === \"input\") {\n      const input = element;\n      const type = input.type.toLowerCase();\n      const kInputTypesToSetValue = /* @__PURE__ */ new Set([\"color\", \"date\", \"time\", \"datetime-local\", \"month\", \"range\", \"week\"]);\n      const kInputTypesToTypeInto = /* @__PURE__ */ new Set([\"\", \"email\", \"number\", \"password\", \"search\", \"tel\", \"text\", \"url\"]);\n      if (!kInputTypesToTypeInto.has(type) && !kInputTypesToSetValue.has(type))\n        throw this.createStacklessError(`Input of type \"${type}\" cannot be filled`);\n      if (type === \"number\") {\n        value = value.trim();\n        if (isNaN(Number(value)))\n          throw this.createStacklessError(\"Cannot type text into input[type=number]\");\n      }\n      if (kInputTypesToSetValue.has(type)) {\n        value = value.trim();\n        input.focus();\n        input.value = value;\n        if (input.value !== value)\n          throw this.createStacklessError(\"Malformed value\");\n        element.dispatchEvent(new Event(\"input\", { bubbles: true, composed: true }));\n        element.dispatchEvent(new Event(\"change\", { bubbles: true }));\n        return \"done\";\n      }\n    } else if (element.nodeName.toLowerCase() === \"textarea\") {\n    } else if (!element.isContentEditable) {\n      throw this.createStacklessError(\"Element is not an <input>, <textarea> or [contenteditable] element\");\n    }\n    this.selectText(element);\n    return \"needsinput\";\n  }\n  selectText(node) {\n    const element = this.retarget(node, \"follow-label\");\n    if (!element)\n      return \"error:notconnected\";\n    if (element.nodeName.toLowerCase() === \"input\") {\n      const input = element;\n      input.select();\n      input.focus();\n      return \"done\";\n    }\n    if (element.nodeName.toLowerCase() === \"textarea\") {\n      const textarea = element;\n      textarea.selectionStart = 0;\n      textarea.selectionEnd = textarea.value.length;\n      textarea.focus();\n      return \"done\";\n    }\n    const range = element.ownerDocument.createRange();\n    range.selectNodeContents(element);\n    const selection = element.ownerDocument.defaultView.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n    element.focus();\n    return \"done\";\n  }\n  _activelyFocused(node) {\n    const activeElement = node.getRootNode().activeElement;\n    const isFocused = activeElement === node && !!node.ownerDocument && node.ownerDocument.hasFocus();\n    return { activeElement, isFocused };\n  }\n  focusNode(node, resetSelectionIfNotFocused) {\n    if (!node.isConnected)\n      return \"error:notconnected\";\n    if (node.nodeType !== Node.ELEMENT_NODE)\n      throw this.createStacklessError(\"Node is not an element\");\n    const { activeElement, isFocused: wasFocused } = this._activelyFocused(node);\n    if (node.isContentEditable && !wasFocused && activeElement && activeElement.blur) {\n      activeElement.blur();\n    }\n    node.focus();\n    node.focus();\n    if (resetSelectionIfNotFocused && !wasFocused && node.nodeName.toLowerCase() === \"input\") {\n      try {\n        const input = node;\n        input.setSelectionRange(0, 0);\n      } catch (e) {\n      }\n    }\n    return \"done\";\n  }\n  blurNode(node) {\n    if (!node.isConnected)\n      return \"error:notconnected\";\n    if (node.nodeType !== Node.ELEMENT_NODE)\n      throw this.createStacklessError(\"Node is not an element\");\n    node.blur();\n    return \"done\";\n  }\n  setInputFiles(node, payloads) {\n    if (node.nodeType !== Node.ELEMENT_NODE)\n      return \"Node is not of type HTMLElement\";\n    const element = node;\n    if (element.nodeName !== \"INPUT\")\n      return \"Not an <input> element\";\n    const input = element;\n    const type = (input.getAttribute(\"type\") || \"\").toLowerCase();\n    if (type !== \"file\")\n      return \"Not an input[type=file] element\";\n    const files = payloads.map((file) => {\n      const bytes = Uint8Array.from(atob(file.buffer), (c) => c.charCodeAt(0));\n      return new File([bytes], file.name, { type: file.mimeType, lastModified: file.lastModifiedMs });\n    });\n    const dt = new DataTransfer();\n    for (const file of files)\n      dt.items.add(file);\n    input.files = dt.files;\n    input.dispatchEvent(new Event(\"input\", { bubbles: true, composed: true }));\n    input.dispatchEvent(new Event(\"change\", { bubbles: true }));\n  }\n  expectHitTarget(hitPoint, targetElement) {\n    const roots = [];\n    let parentElement = targetElement;\n    while (parentElement) {\n      const root = enclosingShadowRootOrDocument(parentElement);\n      if (!root)\n        break;\n      roots.push(root);\n      if (root.nodeType === 9)\n        break;\n      parentElement = root.host;\n    }\n    let hitElement;\n    for (let index = roots.length - 1; index >= 0; index--) {\n      const root = roots[index];\n      const elements = root.elementsFromPoint(hitPoint.x, hitPoint.y);\n      const singleElement = root.elementFromPoint(hitPoint.x, hitPoint.y);\n      if (singleElement && elements[0] && parentElementOrShadowHost(singleElement) === elements[0]) {\n        const style = this.window.getComputedStyle(singleElement);\n        if ((style == null ? void 0 : style.display) === \"contents\") {\n          elements.unshift(singleElement);\n        }\n      }\n      if (elements[0] && elements[0].shadowRoot === root && elements[1] === singleElement) {\n        elements.shift();\n      }\n      const innerElement = elements[0];\n      if (!innerElement)\n        break;\n      hitElement = innerElement;\n      if (index && innerElement !== roots[index - 1].host)\n        break;\n    }\n    const hitParents = [];\n    while (hitElement && hitElement !== targetElement) {\n      hitParents.push(hitElement);\n      hitElement = parentElementOrShadowHost(hitElement);\n    }\n    if (hitElement === targetElement)\n      return \"done\";\n    const hitTargetDescription = this.previewNode(hitParents[0] || this.document.documentElement);\n    let rootHitTargetDescription;\n    let element = targetElement;\n    while (element) {\n      const index = hitParents.indexOf(element);\n      if (index !== -1) {\n        if (index > 1)\n          rootHitTargetDescription = this.previewNode(hitParents[index - 1]);\n        break;\n      }\n      element = parentElementOrShadowHost(element);\n    }\n    if (rootHitTargetDescription)\n      return { hitTargetDescription: `${hitTargetDescription} from ${rootHitTargetDescription} subtree` };\n    return { hitTargetDescription };\n  }\n  // Life of a pointer action, for example click.\n  //\n  // 0. Retry items 1 and 2 while action fails due to navigation or element being detached.\n  //   1. Resolve selector to an element.\n  //   2. Retry the following steps until the element is detached or frame navigates away.\n  //     2a. Wait for the element to be stable (not moving), visible and enabled.\n  //     2b. Scroll element into view. Scrolling alternates between:\n  //         - Built-in protocol scrolling.\n  //         - Anchoring to the top/left, bottom/right and center/center.\n  //         This is to scroll elements from under sticky headers/footers.\n  //     2c. Click point is calculated, either based on explicitly specified position,\n  //         or some visible point of the element based on protocol content quads.\n  //     2d. Click point relative to page viewport is converted relative to the target iframe\n  //         for the next hit-point check.\n  //     2e. (injected) Hit target at the click point must be a descendant of the target element.\n  //         This prevents mis-clicking in edge cases like <iframe> overlaying the target.\n  //     2f. (injected) Events specific for click (or some other action type) are intercepted on\n  //         the Window with capture:true. See 2i for details.\n  //         Note: this step is skipped for drag&drop (see inline comments for the reason).\n  //     2g. Necessary keyboard modifiers are pressed.\n  //     2h. Click event is issued (mousemove + mousedown + mouseup).\n  //     2i. (injected) For each event, we check that hit target at the event point\n  //         is a descendant of the target element.\n  //         This guarantees no race between issuing the event and handling it in the page,\n  //         for example due to layout shift.\n  //         When hit target check fails, we block all future events in the page.\n  //     2j. Keyboard modifiers are restored.\n  //     2k. (injected) Event interceptor is removed.\n  //     2l. All navigations triggered between 2g-2k are awaited to be either committed or canceled.\n  //     2m. If failed, wait for increasing amount of time before the next retry.\n  setupHitTargetInterceptor(node, action, hitPoint, blockAllEvents) {\n    const element = this.retarget(node, \"button-link\");\n    if (!element || !element.isConnected)\n      return \"error:notconnected\";\n    if (hitPoint) {\n      const preliminaryResult = this.expectHitTarget(hitPoint, element);\n      if (preliminaryResult !== \"done\")\n        return preliminaryResult.hitTargetDescription;\n    }\n    if (action === \"drag\")\n      return { stop: () => \"done\" };\n    const events = {\n      \"hover\": kHoverHitTargetInterceptorEvents,\n      \"tap\": kTapHitTargetInterceptorEvents,\n      \"mouse\": kMouseHitTargetInterceptorEvents\n    }[action];\n    let result;\n    const listener = (event) => {\n      if (!events.has(event.type))\n        return;\n      if (!event.isTrusted)\n        return;\n      const point = !!this.window.TouchEvent && event instanceof this.window.TouchEvent ? event.touches[0] : event;\n      if (result === void 0 && point)\n        result = this.expectHitTarget({ x: point.clientX, y: point.clientY }, element);\n      if (blockAllEvents || result !== \"done\" && result !== void 0) {\n        event.preventDefault();\n        event.stopPropagation();\n        event.stopImmediatePropagation();\n      }\n    };\n    const stop = () => {\n      if (this._hitTargetInterceptor === listener)\n        this._hitTargetInterceptor = void 0;\n      return result || \"done\";\n    };\n    this._hitTargetInterceptor = listener;\n    return { stop };\n  }\n  dispatchEvent(node, type, eventInit) {\n    let event;\n    eventInit = { bubbles: true, cancelable: true, composed: true, ...eventInit };\n    switch (eventType.get(type)) {\n      case \"mouse\":\n        event = new MouseEvent(type, eventInit);\n        break;\n      case \"keyboard\":\n        event = new KeyboardEvent(type, eventInit);\n        break;\n      case \"touch\":\n        event = new TouchEvent(type, eventInit);\n        break;\n      case \"pointer\":\n        event = new PointerEvent(type, eventInit);\n        break;\n      case \"focus\":\n        event = new FocusEvent(type, eventInit);\n        break;\n      case \"drag\":\n        event = new DragEvent(type, eventInit);\n        break;\n      case \"wheel\":\n        event = new WheelEvent(type, eventInit);\n        break;\n      case \"deviceorientation\":\n        try {\n          event = new DeviceOrientationEvent(type, eventInit);\n        } catch {\n          const { bubbles, cancelable, alpha, beta, gamma, absolute } = eventInit;\n          event = this.document.createEvent(\"DeviceOrientationEvent\");\n          event.initDeviceOrientationEvent(type, bubbles, cancelable, alpha, beta, gamma, absolute);\n        }\n        break;\n      case \"devicemotion\":\n        try {\n          event = new DeviceMotionEvent(type, eventInit);\n        } catch {\n          const { bubbles, cancelable, acceleration, accelerationIncludingGravity, rotationRate, interval } = eventInit;\n          event = this.document.createEvent(\"DeviceMotionEvent\");\n          event.initDeviceMotionEvent(type, bubbles, cancelable, acceleration, accelerationIncludingGravity, rotationRate, interval);\n        }\n        break;\n      default:\n        event = new Event(type, eventInit);\n        break;\n    }\n    node.dispatchEvent(event);\n  }\n  previewNode(node) {\n    if (node.nodeType === Node.TEXT_NODE)\n      return oneLine(`#text=${node.nodeValue || \"\"}`);\n    if (node.nodeType !== Node.ELEMENT_NODE)\n      return oneLine(`<${node.nodeName.toLowerCase()} />`);\n    const element = node;\n    const attrs = [];\n    for (let i = 0; i < element.attributes.length; i++) {\n      const { name, value } = element.attributes[i];\n      if (name === \"style\")\n        continue;\n      if (!value && booleanAttributes.has(name))\n        attrs.push(` ${name}`);\n      else\n        attrs.push(` ${name}=\"${value}\"`);\n    }\n    attrs.sort((a, b) => a.length - b.length);\n    const attrText = trimStringWithEllipsis(attrs.join(\"\"), 50);\n    if (autoClosingTags.has(element.nodeName))\n      return oneLine(`<${element.nodeName.toLowerCase()}${attrText}/>`);\n    const children = element.childNodes;\n    let onlyText = false;\n    if (children.length <= 5) {\n      onlyText = true;\n      for (let i = 0; i < children.length; i++)\n        onlyText = onlyText && children[i].nodeType === Node.TEXT_NODE;\n    }\n    const text = onlyText ? element.textContent || \"\" : children.length ? \"\\u2026\" : \"\";\n    return oneLine(`<${element.nodeName.toLowerCase()}${attrText}>${trimStringWithEllipsis(text, 50)}</${element.nodeName.toLowerCase()}>`);\n  }\n  strictModeViolationError(selector, matches) {\n    const infos = matches.slice(0, 10).map((m) => ({\n      preview: this.previewNode(m),\n      selector: this.generateSelectorSimple(m)\n    }));\n    const lines = infos.map((info, i) => `\n    ${i + 1}) ${info.preview} aka ${asLocator(this._sdkLanguage, info.selector)}`);\n    if (infos.length < matches.length)\n      lines.push(\"\\n    ...\");\n    return this.createStacklessError(`strict mode violation: ${asLocator(this._sdkLanguage, stringifySelector(selector))} resolved to ${matches.length} elements:${lines.join(\"\")}\n`);\n  }\n  createStacklessError(message) {\n    if (this._browserName === \"firefox\") {\n      const error2 = new Error(\"Error: \" + message);\n      error2.stack = \"\";\n      return error2;\n    }\n    const error = new Error(message);\n    delete error.stack;\n    return error;\n  }\n  createHighlight() {\n    return new Highlight(this);\n  }\n  maskSelectors(selectors, color) {\n    if (this._highlight)\n      this.hideHighlight();\n    this._highlight = new Highlight(this);\n    this._highlight.install();\n    const elements = [];\n    for (const selector of selectors)\n      elements.push(this.querySelectorAll(selector, this.document.documentElement));\n    this._highlight.maskElements(elements.flat(), color);\n  }\n  highlight(selector) {\n    if (!this._highlight) {\n      this._highlight = new Highlight(this);\n      this._highlight.install();\n    }\n    this._highlight.runHighlightOnRaf(selector);\n  }\n  hideHighlight() {\n    if (this._highlight) {\n      this._highlight.uninstall();\n      delete this._highlight;\n    }\n  }\n  markTargetElements(markedElements, callId) {\n    const customEvent = new CustomEvent(\"__playwright_target__\", {\n      bubbles: true,\n      cancelable: true,\n      detail: callId,\n      composed: true\n    });\n    for (const element of markedElements)\n      element.dispatchEvent(customEvent);\n  }\n  _setupGlobalListenersRemovalDetection() {\n    const customEventName = \"__playwright_global_listeners_check__\";\n    let seenEvent = false;\n    const handleCustomEvent = () => seenEvent = true;\n    this.window.addEventListener(customEventName, handleCustomEvent);\n    new MutationObserver((entries) => {\n      const newDocumentElement = entries.some((entry) => Array.from(entry.addedNodes).includes(this.document.documentElement));\n      if (!newDocumentElement)\n        return;\n      seenEvent = false;\n      this.window.dispatchEvent(new CustomEvent(customEventName));\n      if (seenEvent)\n        return;\n      this.window.addEventListener(customEventName, handleCustomEvent);\n      for (const callback of this.onGlobalListenersRemoved)\n        callback();\n    }).observe(this.document, { childList: true });\n  }\n  _setupHitTargetInterceptors() {\n    const listener = (event) => {\n      var _a;\n      return (_a = this._hitTargetInterceptor) == null ? void 0 : _a.call(this, event);\n    };\n    const addHitTargetInterceptorListeners = () => {\n      for (const event of kAllHitTargetInterceptorEvents)\n        this.window.addEventListener(event, listener, { capture: true, passive: false });\n    };\n    addHitTargetInterceptorListeners();\n    this.onGlobalListenersRemoved.add(addHitTargetInterceptorListeners);\n  }\n  async expect(element, options, elements) {\n    const isArray = options.expression === \"to.have.count\" || options.expression.endsWith(\".array\");\n    if (isArray)\n      return this.expectArray(elements, options);\n    if (!element) {\n      if (!options.isNot && options.expression === \"to.be.hidden\")\n        return { matches: true };\n      if (options.isNot && options.expression === \"to.be.visible\")\n        return { matches: false };\n      if (!options.isNot && options.expression === \"to.be.detached\")\n        return { matches: true };\n      if (options.isNot && options.expression === \"to.be.attached\")\n        return { matches: false };\n      if (options.isNot && options.expression === \"to.be.in.viewport\")\n        return { matches: false };\n      return { matches: options.isNot, missingRecevied: true };\n    }\n    return await this.expectSingleElement(element, options);\n  }\n  async expectSingleElement(element, options) {\n    var _a, _b;\n    const expression = options.expression;\n    {\n      let elementState;\n      if (expression === \"to.have.attribute\") {\n        elementState = element.hasAttribute(options.expressionArg);\n      } else if (expression === \"to.be.checked\") {\n        elementState = this.elementState(element, \"checked\");\n      } else if (expression === \"to.be.unchecked\") {\n        elementState = this.elementState(element, \"unchecked\");\n      } else if (expression === \"to.be.disabled\") {\n        elementState = this.elementState(element, \"disabled\");\n      } else if (expression === \"to.be.editable\") {\n        elementState = this.elementState(element, \"editable\");\n      } else if (expression === \"to.be.readonly\") {\n        elementState = !this.elementState(element, \"editable\");\n      } else if (expression === \"to.be.empty\") {\n        if (element.nodeName === \"INPUT\" || element.nodeName === \"TEXTAREA\")\n          elementState = !element.value;\n        else\n          elementState = !((_a = element.textContent) == null ? void 0 : _a.trim());\n      } else if (expression === \"to.be.enabled\") {\n        elementState = this.elementState(element, \"enabled\");\n      } else if (expression === \"to.be.focused\") {\n        elementState = this._activelyFocused(element).isFocused;\n      } else if (expression === \"to.be.hidden\") {\n        elementState = this.elementState(element, \"hidden\");\n      } else if (expression === \"to.be.visible\") {\n        elementState = this.elementState(element, \"visible\");\n      } else if (expression === \"to.be.attached\") {\n        elementState = true;\n      } else if (expression === \"to.be.detached\") {\n        elementState = false;\n      }\n      if (elementState !== void 0) {\n        if (elementState === \"error:notcheckbox\")\n          throw this.createStacklessError(\"Element is not a checkbox\");\n        if (elementState === \"error:notconnected\")\n          throw this.createStacklessError(\"Element is not connected\");\n        return { received: elementState, matches: elementState };\n      }\n    }\n    {\n      if (expression === \"to.have.property\") {\n        let target = element;\n        const properties = options.expressionArg.split(\".\");\n        for (let i = 0; i < properties.length - 1; i++) {\n          if (typeof target !== \"object\" || !(properties[i] in target))\n            return { received: void 0, matches: false };\n          target = target[properties[i]];\n        }\n        const received = target[properties[properties.length - 1]];\n        const matches = deepEquals(received, options.expectedValue);\n        return { received, matches };\n      }\n    }\n    {\n      if (expression === \"to.be.in.viewport\") {\n        const ratio = await this.viewportRatio(element);\n        return { received: `viewport ratio ${ratio}`, matches: ratio > 0 && ratio > ((_b = options.expectedNumber) != null ? _b : 0) - 1e-9 };\n      }\n    }\n    {\n      if (expression === \"to.have.values\") {\n        element = this.retarget(element, \"follow-label\");\n        if (element.nodeName !== \"SELECT\" || !element.multiple)\n          throw this.createStacklessError(\"Not a select element with a multiple attribute\");\n        const received = [...element.selectedOptions].map((o) => o.value);\n        if (received.length !== options.expectedText.length)\n          return { received, matches: false };\n        return { received, matches: received.map((r, i) => new ExpectedTextMatcher(options.expectedText[i]).matches(r)).every(Boolean) };\n      }\n    }\n    {\n      let received;\n      if (expression === \"to.have.attribute.value\") {\n        const value = element.getAttribute(options.expressionArg);\n        if (value === null)\n          return { received: null, matches: false };\n        received = value;\n      } else if (expression === \"to.have.class\") {\n        received = element.classList.toString();\n      } else if (expression === \"to.have.css\") {\n        received = this.window.getComputedStyle(element).getPropertyValue(options.expressionArg);\n      } else if (expression === \"to.have.id\") {\n        received = element.id;\n      } else if (expression === \"to.have.text\") {\n        received = options.useInnerText ? element.innerText : elementText(/* @__PURE__ */ new Map(), element).full;\n      } else if (expression === \"to.have.title\") {\n        received = this.document.title;\n      } else if (expression === \"to.have.url\") {\n        received = this.document.location.href;\n      } else if (expression === \"to.have.value\") {\n        element = this.retarget(element, \"follow-label\");\n        if (element.nodeName !== \"INPUT\" && element.nodeName !== \"TEXTAREA\" && element.nodeName !== \"SELECT\")\n          throw this.createStacklessError(\"Not an input element\");\n        received = element.value;\n      }\n      if (received !== void 0 && options.expectedText) {\n        const matcher = new ExpectedTextMatcher(options.expectedText[0]);\n        return { received, matches: matcher.matches(received) };\n      }\n    }\n    throw this.createStacklessError(\"Unknown expect matcher: \" + expression);\n  }\n  expectArray(elements, options) {\n    const expression = options.expression;\n    if (expression === \"to.have.count\") {\n      const received2 = elements.length;\n      const matches = received2 === options.expectedNumber;\n      return { received: received2, matches };\n    }\n    let received;\n    if (expression === \"to.have.text.array\" || expression === \"to.contain.text.array\")\n      received = elements.map((e) => options.useInnerText ? e.innerText : elementText(/* @__PURE__ */ new Map(), e).full);\n    else if (expression === \"to.have.class.array\")\n      received = elements.map((e) => e.classList.toString());\n    if (received && options.expectedText) {\n      const lengthShouldMatch = expression !== \"to.contain.text.array\";\n      const matchesLength = received.length === options.expectedText.length || !lengthShouldMatch;\n      if (!matchesLength)\n        return { received, matches: false };\n      const matchers = options.expectedText.map((e) => new ExpectedTextMatcher(e));\n      let mIndex = 0, rIndex = 0;\n      while (mIndex < matchers.length && rIndex < received.length) {\n        if (matchers[mIndex].matches(received[rIndex]))\n          ++mIndex;\n        ++rIndex;\n      }\n      return { received, matches: mIndex === matchers.length };\n    }\n    throw this.createStacklessError(\"Unknown expect matcher: \" + expression);\n  }\n  getElementAccessibleName(element, includeHidden) {\n    return getElementAccessibleName(element, !!includeHidden);\n  }\n  getAriaRole(element) {\n    return getAriaRole(element);\n  }\n};\nvar autoClosingTags = /* @__PURE__ */ new Set([\"AREA\", \"BASE\", \"BR\", \"COL\", \"COMMAND\", \"EMBED\", \"HR\", \"IMG\", \"INPUT\", \"KEYGEN\", \"LINK\", \"MENUITEM\", \"META\", \"PARAM\", \"SOURCE\", \"TRACK\", \"WBR\"]);\nvar booleanAttributes = /* @__PURE__ */ new Set([\"checked\", \"selected\", \"disabled\", \"readonly\", \"multiple\"]);\nfunction oneLine(s) {\n  return s.replace(/\\n/g, \"\\u21B5\").replace(/\\t/g, \"\\u21C6\");\n}\nvar eventType = /* @__PURE__ */ new Map([\n  [\"auxclick\", \"mouse\"],\n  [\"click\", \"mouse\"],\n  [\"dblclick\", \"mouse\"],\n  [\"mousedown\", \"mouse\"],\n  [\"mouseeenter\", \"mouse\"],\n  [\"mouseleave\", \"mouse\"],\n  [\"mousemove\", \"mouse\"],\n  [\"mouseout\", \"mouse\"],\n  [\"mouseover\", \"mouse\"],\n  [\"mouseup\", \"mouse\"],\n  [\"mouseleave\", \"mouse\"],\n  [\"mousewheel\", \"mouse\"],\n  [\"keydown\", \"keyboard\"],\n  [\"keyup\", \"keyboard\"],\n  [\"keypress\", \"keyboard\"],\n  [\"textInput\", \"keyboard\"],\n  [\"touchstart\", \"touch\"],\n  [\"touchmove\", \"touch\"],\n  [\"touchend\", \"touch\"],\n  [\"touchcancel\", \"touch\"],\n  [\"pointerover\", \"pointer\"],\n  [\"pointerout\", \"pointer\"],\n  [\"pointerenter\", \"pointer\"],\n  [\"pointerleave\", \"pointer\"],\n  [\"pointerdown\", \"pointer\"],\n  [\"pointerup\", \"pointer\"],\n  [\"pointermove\", \"pointer\"],\n  [\"pointercancel\", \"pointer\"],\n  [\"gotpointercapture\", \"pointer\"],\n  [\"lostpointercapture\", \"pointer\"],\n  [\"focus\", \"focus\"],\n  [\"blur\", \"focus\"],\n  [\"drag\", \"drag\"],\n  [\"dragstart\", \"drag\"],\n  [\"dragend\", \"drag\"],\n  [\"dragover\", \"drag\"],\n  [\"dragenter\", \"drag\"],\n  [\"dragleave\", \"drag\"],\n  [\"dragexit\", \"drag\"],\n  [\"drop\", \"drag\"],\n  [\"wheel\", \"wheel\"],\n  [\"deviceorientation\", \"deviceorientation\"],\n  [\"deviceorientationabsolute\", \"deviceorientation\"],\n  [\"devicemotion\", \"devicemotion\"]\n]);\nvar kHoverHitTargetInterceptorEvents = /* @__PURE__ */ new Set([\"mousemove\"]);\nvar kTapHitTargetInterceptorEvents = /* @__PURE__ */ new Set([\"pointerdown\", \"pointerup\", \"touchstart\", \"touchend\", \"touchcancel\"]);\nvar kMouseHitTargetInterceptorEvents = /* @__PURE__ */ new Set([\"mousedown\", \"mouseup\", \"pointerdown\", \"pointerup\", \"click\", \"auxclick\", \"dblclick\", \"contextmenu\"]);\nvar kAllHitTargetInterceptorEvents = /* @__PURE__ */ new Set([...kHoverHitTargetInterceptorEvents, ...kTapHitTargetInterceptorEvents, ...kMouseHitTargetInterceptorEvents]);\nfunction cssUnquote(s) {\n  s = s.substring(1, s.length - 1);\n  if (!s.includes(\"\\\\\"))\n    return s;\n  const r = [];\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === \"\\\\\" && i + 1 < s.length)\n      i++;\n    r.push(s[i++]);\n  }\n  return r.join(\"\");\n}\nfunction createTextMatcher(selector, internal) {\n  if (selector[0] === \"/\" && selector.lastIndexOf(\"/\") > 0) {\n    const lastSlash = selector.lastIndexOf(\"/\");\n    const re = new RegExp(selector.substring(1, lastSlash), selector.substring(lastSlash + 1));\n    return { matcher: (elementText2) => re.test(elementText2.full), kind: \"regex\" };\n  }\n  const unquote = internal ? JSON.parse.bind(JSON) : cssUnquote;\n  let strict = false;\n  if (selector.length > 1 && selector[0] === '\"' && selector[selector.length - 1] === '\"') {\n    selector = unquote(selector);\n    strict = true;\n  } else if (internal && selector.length > 1 && selector[0] === '\"' && selector[selector.length - 2] === '\"' && selector[selector.length - 1] === \"i\") {\n    selector = unquote(selector.substring(0, selector.length - 1));\n    strict = false;\n  } else if (internal && selector.length > 1 && selector[0] === '\"' && selector[selector.length - 2] === '\"' && selector[selector.length - 1] === \"s\") {\n    selector = unquote(selector.substring(0, selector.length - 1));\n    strict = true;\n  } else if (selector.length > 1 && selector[0] === \"'\" && selector[selector.length - 1] === \"'\") {\n    selector = unquote(selector);\n    strict = true;\n  }\n  selector = normalizeWhiteSpace(selector);\n  if (strict) {\n    if (internal)\n      return { kind: \"strict\", matcher: (elementText2) => elementText2.normalized === selector };\n    const strictTextNodeMatcher = (elementText2) => {\n      if (!selector && !elementText2.immediate.length)\n        return true;\n      return elementText2.immediate.some((s) => normalizeWhiteSpace(s) === selector);\n    };\n    return { matcher: strictTextNodeMatcher, kind: \"strict\" };\n  }\n  selector = selector.toLowerCase();\n  return { kind: \"lax\", matcher: (elementText2) => elementText2.normalized.toLowerCase().includes(selector) };\n}\nvar ExpectedTextMatcher = class {\n  constructor(expected) {\n    this._normalizeWhiteSpace = expected.normalizeWhiteSpace;\n    this._ignoreCase = expected.ignoreCase;\n    this._string = expected.matchSubstring ? void 0 : this.normalize(expected.string);\n    this._substring = expected.matchSubstring ? this.normalize(expected.string) : void 0;\n    if (expected.regexSource) {\n      const flags = new Set((expected.regexFlags || \"\").split(\"\"));\n      if (expected.ignoreCase === false)\n        flags.delete(\"i\");\n      if (expected.ignoreCase === true)\n        flags.add(\"i\");\n      this._regex = new RegExp(expected.regexSource, [...flags].join(\"\"));\n    }\n  }\n  matches(text) {\n    if (!this._regex)\n      text = this.normalize(text);\n    if (this._string !== void 0)\n      return text === this._string;\n    if (this._substring !== void 0)\n      return text.includes(this._substring);\n    if (this._regex)\n      return !!this._regex.test(text);\n    return false;\n  }\n  normalize(s) {\n    if (!s)\n      return s;\n    if (this._normalizeWhiteSpace)\n      s = normalizeWhiteSpace(s);\n    if (this._ignoreCase)\n      s = s.toLocaleLowerCase();\n    return s;\n  }\n};\nfunction deepEquals(a, b) {\n  if (a === b)\n    return true;\n  if (a && b && typeof a === \"object\" && typeof b === \"object\") {\n    if (a.constructor !== b.constructor)\n      return false;\n    if (Array.isArray(a)) {\n      if (a.length !== b.length)\n        return false;\n      for (let i = 0; i < a.length; ++i) {\n        if (!deepEquals(a[i], b[i]))\n          return false;\n      }\n      return true;\n    }\n    if (a instanceof RegExp)\n      return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf)\n      return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString)\n      return a.toString() === b.toString();\n    const keys = Object.keys(a);\n    if (keys.length !== Object.keys(b).length)\n      return false;\n    for (let i = 0; i < keys.length; ++i) {\n      if (!b.hasOwnProperty(keys[i]))\n        return false;\n    }\n    for (const key of keys) {\n      if (!deepEquals(a[key], b[key]))\n        return false;\n    }\n    return true;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\")\n    return isNaN(a) && isNaN(b);\n  return false;\n}\n";
});

// node_modules/playwright-core/lib/generated/utilityScriptSource.js
var require_utilityScriptSource = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.source = undefined;
  var source = exports.source = "\nvar __commonJS = obj => {\n  let required = false;\n  let result;\n  return function __require() {\n    if (!required) {\n      required = true;\n      let fn;\n      for (const name in obj) { fn = obj[name]; break; }\n      const module = { exports: {} };\n      fn(module.exports, module);\n      result = module.exports;\n    }\n    return result;\n  }\n};\nvar __export = (target, all) => {for (var name in all) target[name] = all[name];};\nvar __toESM = mod => ({ ...mod, 'default': mod });\nvar __toCommonJS = mod => ({ ...mod, __esModule: true });\n\n\n// packages/playwright-core/src/server/injected/utilityScript.ts\nvar utilityScript_exports = {};\n__export(utilityScript_exports, {\n  UtilityScript: () => UtilityScript\n});\nmodule.exports = __toCommonJS(utilityScript_exports);\n\n// packages/playwright-core/src/server/isomorphic/utilityScriptSerializers.ts\nfunction source() {\n  function isRegExp(obj) {\n    try {\n      return obj instanceof RegExp || Object.prototype.toString.call(obj) === \"[object RegExp]\";\n    } catch (error) {\n      return false;\n    }\n  }\n  function isDate(obj) {\n    try {\n      return obj instanceof Date || Object.prototype.toString.call(obj) === \"[object Date]\";\n    } catch (error) {\n      return false;\n    }\n  }\n  function isURL(obj) {\n    try {\n      return obj instanceof URL || Object.prototype.toString.call(obj) === \"[object URL]\";\n    } catch (error) {\n      return false;\n    }\n  }\n  function isError(obj) {\n    var _a;\n    try {\n      return obj instanceof Error || obj && ((_a = Object.getPrototypeOf(obj)) == null ? void 0 : _a.name) === \"Error\";\n    } catch (error) {\n      return false;\n    }\n  }\n  function parseEvaluationResultValue2(value, handles = [], refs = /* @__PURE__ */ new Map()) {\n    if (Object.is(value, void 0))\n      return void 0;\n    if (typeof value === \"object\" && value) {\n      if (\"ref\" in value)\n        return refs.get(value.ref);\n      if (\"v\" in value) {\n        if (value.v === \"undefined\")\n          return void 0;\n        if (value.v === \"null\")\n          return null;\n        if (value.v === \"NaN\")\n          return NaN;\n        if (value.v === \"Infinity\")\n          return Infinity;\n        if (value.v === \"-Infinity\")\n          return -Infinity;\n        if (value.v === \"-0\")\n          return -0;\n        return void 0;\n      }\n      if (\"d\" in value)\n        return new Date(value.d);\n      if (\"u\" in value)\n        return new URL(value.u);\n      if (\"bi\" in value)\n        return BigInt(value.bi);\n      if (\"r\" in value)\n        return new RegExp(value.r.p, value.r.f);\n      if (\"a\" in value) {\n        const result2 = [];\n        refs.set(value.id, result2);\n        for (const a of value.a)\n          result2.push(parseEvaluationResultValue2(a, handles, refs));\n        return result2;\n      }\n      if (\"o\" in value) {\n        const result2 = {};\n        refs.set(value.id, result2);\n        for (const { k, v } of value.o)\n          result2[k] = parseEvaluationResultValue2(v, handles, refs);\n        return result2;\n      }\n      if (\"h\" in value)\n        return handles[value.h];\n    }\n    return value;\n  }\n  function serializeAsCallArgument2(value, handleSerializer) {\n    return serialize(value, handleSerializer, { visited: /* @__PURE__ */ new Map(), lastId: 0 });\n  }\n  function serialize(value, handleSerializer, visitorInfo) {\n    if (value && typeof value === \"object\") {\n      if (typeof globalThis.Window === \"function\" && value instanceof globalThis.Window)\n        return \"ref: <Window>\";\n      if (typeof globalThis.Document === \"function\" && value instanceof globalThis.Document)\n        return \"ref: <Document>\";\n      if (typeof globalThis.Node === \"function\" && value instanceof globalThis.Node)\n        return \"ref: <Node>\";\n    }\n    return innerSerialize(value, handleSerializer, visitorInfo);\n  }\n  function innerSerialize(value, handleSerializer, visitorInfo) {\n    var _a;\n    const result2 = handleSerializer(value);\n    if (\"fallThrough\" in result2)\n      value = result2.fallThrough;\n    else\n      return result2;\n    if (typeof value === \"symbol\")\n      return { v: \"undefined\" };\n    if (Object.is(value, void 0))\n      return { v: \"undefined\" };\n    if (Object.is(value, null))\n      return { v: \"null\" };\n    if (Object.is(value, NaN))\n      return { v: \"NaN\" };\n    if (Object.is(value, Infinity))\n      return { v: \"Infinity\" };\n    if (Object.is(value, -Infinity))\n      return { v: \"-Infinity\" };\n    if (Object.is(value, -0))\n      return { v: \"-0\" };\n    if (typeof value === \"boolean\")\n      return value;\n    if (typeof value === \"number\")\n      return value;\n    if (typeof value === \"string\")\n      return value;\n    if (typeof value === \"bigint\")\n      return { bi: value.toString() };\n    if (isError(value)) {\n      const error = value;\n      if ((_a = error.stack) == null ? void 0 : _a.startsWith(error.name + \": \" + error.message)) {\n        return error.stack;\n      }\n      return `${error.name}: ${error.message}\n${error.stack}`;\n    }\n    if (isDate(value))\n      return { d: value.toJSON() };\n    if (isURL(value))\n      return { u: value.toJSON() };\n    if (isRegExp(value))\n      return { r: { p: value.source, f: value.flags } };\n    const id = visitorInfo.visited.get(value);\n    if (id)\n      return { ref: id };\n    if (Array.isArray(value)) {\n      const a = [];\n      const id2 = ++visitorInfo.lastId;\n      visitorInfo.visited.set(value, id2);\n      for (let i = 0; i < value.length; ++i)\n        a.push(serialize(value[i], handleSerializer, visitorInfo));\n      return { a, id: id2 };\n    }\n    if (typeof value === \"object\") {\n      const o = [];\n      const id2 = ++visitorInfo.lastId;\n      visitorInfo.visited.set(value, id2);\n      for (const name of Object.keys(value)) {\n        let item;\n        try {\n          item = value[name];\n        } catch (e) {\n          continue;\n        }\n        if (name === \"toJSON\" && typeof item === \"function\")\n          o.push({ k: name, v: { o: [], id: 0 } });\n        else\n          o.push({ k: name, v: serialize(item, handleSerializer, visitorInfo) });\n      }\n      let jsonWrapper;\n      try {\n        if (o.length === 0 && value.toJSON && typeof value.toJSON === \"function\")\n          jsonWrapper = { value: value.toJSON() };\n      } catch (e) {\n      }\n      if (jsonWrapper)\n        return innerSerialize(jsonWrapper.value, handleSerializer, visitorInfo);\n      return { o, id: id2 };\n    }\n  }\n  return { parseEvaluationResultValue: parseEvaluationResultValue2, serializeAsCallArgument: serializeAsCallArgument2 };\n}\nvar result = source();\nvar parseEvaluationResultValue = result.parseEvaluationResultValue;\nvar serializeAsCallArgument = result.serializeAsCallArgument;\n\n// packages/playwright-core/src/server/injected/utilityScript.ts\nvar UtilityScript = class {\n  constructor() {\n    this.serializeAsCallArgument = serializeAsCallArgument;\n    this.parseEvaluationResultValue = parseEvaluationResultValue;\n  }\n  evaluate(isFunction, returnByValue, exposeUtilityScript, expression, argCount, ...argsAndHandles) {\n    const args = argsAndHandles.slice(0, argCount);\n    const handles = argsAndHandles.slice(argCount);\n    const parameters = [];\n    for (let i = 0; i < args.length; i++)\n      parameters[i] = this.parseEvaluationResultValue(args[i], handles);\n    if (exposeUtilityScript)\n      parameters.unshift(this);\n    let result2 = globalThis.eval(expression);\n    if (isFunction === true) {\n      result2 = result2(...parameters);\n    } else if (isFunction === false) {\n      result2 = result2;\n    } else {\n      if (typeof result2 === \"function\")\n        result2 = result2(...parameters);\n    }\n    return returnByValue ? this._promiseAwareJsonValueNoThrow(result2) : result2;\n  }\n  jsonValue(returnByValue, value) {\n    if (Object.is(value, void 0))\n      return void 0;\n    return serializeAsCallArgument(value, (value2) => ({ fallThrough: value2 }));\n  }\n  _promiseAwareJsonValueNoThrow(value) {\n    const safeJson = (value2) => {\n      try {\n        return this.jsonValue(true, value2);\n      } catch (e) {\n        return void 0;\n      }\n    };\n    if (value && typeof value === \"object\" && typeof value.then === \"function\") {\n      return (async () => {\n        const promiseValue = await value;\n        return safeJson(promiseValue);\n      })();\n    }\n    return safeJson(value);\n  }\n};\n";
});

// node_modules/playwright-core/lib/server/isomorphic/utilityScriptSerializers.js
var require_utilityScriptSerializers = __commonJS((exports) => {
  var source = function() {
    function isRegExp(obj) {
      try {
        return obj instanceof RegExp || Object.prototype.toString.call(obj) === "[object RegExp]";
      } catch (error) {
        return false;
      }
    }
    function isDate(obj) {
      try {
        return obj instanceof Date || Object.prototype.toString.call(obj) === "[object Date]";
      } catch (error) {
        return false;
      }
    }
    function isURL(obj) {
      try {
        return obj instanceof URL || Object.prototype.toString.call(obj) === "[object URL]";
      } catch (error) {
        return false;
      }
    }
    function isError(obj) {
      try {
        var _Object$getPrototypeO;
        return obj instanceof Error || obj && ((_Object$getPrototypeO = Object.getPrototypeOf(obj)) === null || _Object$getPrototypeO === undefined ? undefined : _Object$getPrototypeO.name) === "Error";
      } catch (error) {
        return false;
      }
    }
    function parseEvaluationResultValue2(value, handles = [], refs = new Map) {
      if (Object.is(value, undefined))
        return;
      if (typeof value === "object" && value) {
        if ("ref" in value)
          return refs.get(value.ref);
        if ("v" in value) {
          if (value.v === "undefined")
            return;
          if (value.v === "null")
            return null;
          if (value.v === "NaN")
            return NaN;
          if (value.v === "Infinity")
            return Infinity;
          if (value.v === "-Infinity")
            return (-Infinity);
          if (value.v === "-0")
            return -0;
          return;
        }
        if ("d" in value)
          return new Date(value.d);
        if ("u" in value)
          return new URL(value.u);
        if ("bi" in value)
          return BigInt(value.bi);
        if ("r" in value)
          return new RegExp(value.r.p, value.r.f);
        if ("a" in value) {
          const result2 = [];
          refs.set(value.id, result2);
          for (const a of value.a)
            result2.push(parseEvaluationResultValue2(a, handles, refs));
          return result2;
        }
        if ("o" in value) {
          const result2 = {};
          refs.set(value.id, result2);
          for (const {
            k,
            v
          } of value.o)
            result2[k] = parseEvaluationResultValue2(v, handles, refs);
          return result2;
        }
        if ("h" in value)
          return handles[value.h];
      }
      return value;
    }
    function serializeAsCallArgument2(value, handleSerializer) {
      return serialize(value, handleSerializer, {
        visited: new Map,
        lastId: 0
      });
    }
    function serialize(value, handleSerializer, visitorInfo) {
      if (value && typeof value === "object") {
        if (typeof globalThis.Window === "function" && value instanceof globalThis.Window)
          return "ref: <Window>";
        if (typeof globalThis.Document === "function" && value instanceof globalThis.Document)
          return "ref: <Document>";
        if (typeof globalThis.Node === "function" && value instanceof globalThis.Node)
          return "ref: <Node>";
      }
      return innerSerialize(value, handleSerializer, visitorInfo);
    }
    function innerSerialize(value, handleSerializer, visitorInfo) {
      const result2 = handleSerializer(value);
      if ("fallThrough" in result2)
        value = result2.fallThrough;
      else
        return result2;
      if (typeof value === "symbol")
        return {
          v: "undefined"
        };
      if (Object.is(value, undefined))
        return {
          v: "undefined"
        };
      if (Object.is(value, null))
        return {
          v: "null"
        };
      if (Object.is(value, NaN))
        return {
          v: "NaN"
        };
      if (Object.is(value, Infinity))
        return {
          v: "Infinity"
        };
      if (Object.is(value, (-Infinity)))
        return {
          v: "-Infinity"
        };
      if (Object.is(value, -0))
        return {
          v: "-0"
        };
      if (typeof value === "boolean")
        return value;
      if (typeof value === "number")
        return value;
      if (typeof value === "string")
        return value;
      if (typeof value === "bigint")
        return {
          bi: value.toString()
        };
      if (isError(value)) {
        var _error$stack;
        const error = value;
        if ((_error$stack = error.stack) !== null && _error$stack !== undefined && _error$stack.startsWith(error.name + ": " + error.message)) {
          return error.stack;
        }
        return `${error.name}: ${error.message}\n${error.stack}`;
      }
      if (isDate(value))
        return {
          d: value.toJSON()
        };
      if (isURL(value))
        return {
          u: value.toJSON()
        };
      if (isRegExp(value))
        return {
          r: {
            p: value.source,
            f: value.flags
          }
        };
      const id = visitorInfo.visited.get(value);
      if (id)
        return {
          ref: id
        };
      if (Array.isArray(value)) {
        const a = [];
        const id2 = ++visitorInfo.lastId;
        visitorInfo.visited.set(value, id2);
        for (let i = 0;i < value.length; ++i)
          a.push(serialize(value[i], handleSerializer, visitorInfo));
        return {
          a,
          id: id2
        };
      }
      if (typeof value === "object") {
        const o = [];
        const id2 = ++visitorInfo.lastId;
        visitorInfo.visited.set(value, id2);
        for (const name of Object.keys(value)) {
          let item;
          try {
            item = value[name];
          } catch (e) {
            continue;
          }
          if (name === "toJSON" && typeof item === "function")
            o.push({
              k: name,
              v: {
                o: [],
                id: 0
              }
            });
          else
            o.push({
              k: name,
              v: serialize(item, handleSerializer, visitorInfo)
            });
        }
        let jsonWrapper;
        try {
          if (o.length === 0 && value.toJSON && typeof value.toJSON === "function")
            jsonWrapper = {
              value: value.toJSON()
            };
        } catch (e) {
        }
        if (jsonWrapper)
          return innerSerialize(jsonWrapper.value, handleSerializer, visitorInfo);
        return {
          o,
          id: id2
        };
      }
    }
    return {
      parseEvaluationResultValue: parseEvaluationResultValue2,
      serializeAsCallArgument: serializeAsCallArgument2
    };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.serializeAsCallArgument = exports.parseEvaluationResultValue = undefined;
  exports.source = source;
  var result = source();
  var parseEvaluationResultValue = exports.parseEvaluationResultValue = result.parseEvaluationResultValue;
  var serializeAsCallArgument = exports.serializeAsCallArgument = result.serializeAsCallArgument;
});

// node_modules/playwright-core/lib/server/javascript.js
var require_javascript = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  async function evaluate(context, returnByValue, pageFunction, ...args) {
    return evaluateExpression(context, String(pageFunction), {
      returnByValue,
      isFunction: typeof pageFunction === "function"
    }, ...args);
  }
  async function evaluateExpression(context, expression, options, ...args) {
    const utilityScript = await context.utilityScript();
    expression = normalizeEvaluationExpression(expression, options.isFunction);
    const handles = [];
    const toDispose = [];
    const pushHandle = (handle) => {
      handles.push(handle);
      return handles.length - 1;
    };
    args = args.map((arg) => (0, _utilityScriptSerializers.serializeAsCallArgument)(arg, (handle) => {
      if (handle instanceof JSHandle) {
        if (!handle._objectId)
          return {
            fallThrough: handle._value
          };
        if (handle._disposed)
          throw new JavaScriptErrorInEvaluate("JSHandle is disposed!");
        const adopted = context.adoptIfNeeded(handle);
        if (adopted === null)
          return {
            h: pushHandle(Promise.resolve(handle))
          };
        toDispose.push(adopted);
        return {
          h: pushHandle(adopted)
        };
      }
      return {
        fallThrough: handle
      };
    }));
    const utilityScriptObjectIds = [];
    for (const handle of await Promise.all(handles)) {
      if (handle._context !== context)
        throw new JavaScriptErrorInEvaluate("JSHandles can be evaluated only in the context they were created!");
      utilityScriptObjectIds.push(handle._objectId);
    }
    const utilityScriptValues = [options.isFunction, options.returnByValue, options.exposeUtilityScript, expression, args.length, ...args];
    const script = `(utilityScript, ...args) => utilityScript.evaluate(...args)`;
    try {
      return await context.evaluateWithArguments(script, options.returnByValue || false, utilityScript, utilityScriptValues, utilityScriptObjectIds);
    } finally {
      toDispose.map((handlePromise) => handlePromise.then((handle) => handle.dispose()));
    }
  }
  var parseUnserializableValue = function(unserializableValue) {
    if (unserializableValue === "NaN")
      return NaN;
    if (unserializableValue === "Infinity")
      return Infinity;
    if (unserializableValue === "-Infinity")
      return (-Infinity);
    if (unserializableValue === "-0")
      return -0;
  };
  var normalizeEvaluationExpression = function(expression, isFunction) {
    expression = expression.trim();
    if (isFunction) {
      try {
        new Function("(" + expression + ")");
      } catch (e1) {
        if (expression.startsWith("async "))
          expression = "async function " + expression.substring("async ".length);
        else
          expression = "function " + expression;
        try {
          new Function("(" + expression + ")");
        } catch (e2) {
          throw new Error("Passed function is not well-serializable!");
        }
      }
    }
    if (/^(async)?\s*function(\s|\()/.test(expression))
      expression = "(" + expression + ")";
    return expression;
  };
  var isJavaScriptErrorInEvaluate = function(error) {
    return error instanceof JavaScriptErrorInEvaluate;
  };
  var sparseArrayToString = function(entries) {
    const arrayEntries = [];
    for (const {
      name,
      value
    } of entries) {
      const index = +name;
      if (isNaN(index) || index < 0)
        continue;
      arrayEntries.push({
        index,
        value
      });
    }
    arrayEntries.sort((a, b) => a.index - b.index);
    let lastIndex = -1;
    const tokens = [];
    for (const {
      index,
      value
    } of arrayEntries) {
      const emptyItems = index - lastIndex - 1;
      if (emptyItems === 1)
        tokens.push(`empty`);
      else if (emptyItems > 1)
        tokens.push(`empty x ${emptyItems}`);
      tokens.push(String(value));
      lastIndex = index;
    }
    return "[" + tokens.join(", ") + "]";
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.JavaScriptErrorInEvaluate = exports.JSHandle = exports.ExecutionContext = undefined;
  exports.evaluate = evaluate;
  exports.evaluateExpression = evaluateExpression;
  exports.isJavaScriptErrorInEvaluate = isJavaScriptErrorInEvaluate;
  exports.normalizeEvaluationExpression = normalizeEvaluationExpression;
  exports.parseUnserializableValue = parseUnserializableValue;
  exports.sparseArrayToString = sparseArrayToString;
  var utilityScriptSource = _interopRequireWildcard(require_utilityScriptSource());
  var _utilityScriptSerializers = require_utilityScriptSerializers();
  var _instrumentation = require_instrumentation();
  var _manualPromise = require_manualPromise();

  class ExecutionContext extends _instrumentation.SdkObject {
    constructor(parent, delegate, worldNameForTest) {
      super(parent, "execution-context");
      this._delegate = undefined;
      this._utilityScriptPromise = undefined;
      this._contextDestroyedScope = new _manualPromise.LongStandingScope;
      this.worldNameForTest = undefined;
      this.worldNameForTest = worldNameForTest;
      this._delegate = delegate;
    }
    contextDestroyed(reason) {
      this._contextDestroyedScope.close(new Error(reason));
    }
    async _raceAgainstContextDestroyed(promise) {
      return this._contextDestroyedScope.race(promise);
    }
    rawEvaluateJSON(expression) {
      return this._raceAgainstContextDestroyed(this._delegate.rawEvaluateJSON(expression));
    }
    rawEvaluateHandle(expression) {
      return this._raceAgainstContextDestroyed(this._delegate.rawEvaluateHandle(expression));
    }
    rawCallFunctionNoReply(func, ...args) {
      this._delegate.rawCallFunctionNoReply(func, ...args);
    }
    evaluateWithArguments(expression, returnByValue, utilityScript, values, objectIds) {
      return this._raceAgainstContextDestroyed(this._delegate.evaluateWithArguments(expression, returnByValue, utilityScript, values, objectIds));
    }
    getProperties(context, objectId) {
      return this._raceAgainstContextDestroyed(this._delegate.getProperties(context, objectId));
    }
    createHandle(remoteObject) {
      return this._delegate.createHandle(this, remoteObject);
    }
    releaseHandle(objectId) {
      return this._delegate.releaseHandle(objectId);
    }
    adoptIfNeeded(handle) {
      return null;
    }
    utilityScript() {
      if (!this._utilityScriptPromise) {
        const source = `
      (() => {
        const module = {};
        ${utilityScriptSource.source}
        return new (module.exports.UtilityScript())();
      })();`;
        this._utilityScriptPromise = this._raceAgainstContextDestroyed(this._delegate.rawEvaluateHandle(source).then((objectId) => new JSHandle(this, "object", "UtilityScript", objectId)));
      }
      return this._utilityScriptPromise;
    }
    async objectCount(objectId) {
      return this._delegate.objectCount(objectId);
    }
    async doSlowMo() {
    }
  }
  exports.ExecutionContext = ExecutionContext;

  class JSHandle extends _instrumentation.SdkObject {
    constructor(context, type, preview, objectId, value) {
      super(context, "handle");
      this.__jshandle = true;
      this._context = undefined;
      this._disposed = false;
      this._objectId = undefined;
      this._value = undefined;
      this._objectType = undefined;
      this._preview = undefined;
      this._previewCallback = undefined;
      this._context = context;
      this._objectId = objectId;
      this._value = value;
      this._objectType = type;
      this._preview = this._objectId ? preview || `JSHandle@${this._objectType}` : String(value);
      if (this._objectId && globalThis.leakedJSHandles)
        globalThis.leakedJSHandles.set(this, new Error("Leaked JSHandle"));
    }
    callFunctionNoReply(func, arg) {
      this._context.rawCallFunctionNoReply(func, this, arg);
    }
    async evaluate(pageFunction, arg) {
      return evaluate(this._context, true, pageFunction, this, arg);
    }
    async evaluateHandle(pageFunction, arg) {
      return evaluate(this._context, false, pageFunction, this, arg);
    }
    async evaluateExpression(expression, options, arg) {
      const value = await evaluateExpression(this._context, expression, {
        ...options,
        returnByValue: true
      }, this, arg);
      await this._context.doSlowMo();
      return value;
    }
    async evaluateExpressionHandle(expression, options, arg) {
      const value = await evaluateExpression(this._context, expression, {
        ...options,
        returnByValue: false
      }, this, arg);
      await this._context.doSlowMo();
      return value;
    }
    async getProperty(propertyName) {
      const objectHandle = await this.evaluateHandle((object, propertyName2) => {
        const result2 = {
          __proto__: null
        };
        result2[propertyName2] = object[propertyName2];
        return result2;
      }, propertyName);
      const properties = await objectHandle.getProperties();
      const result = properties.get(propertyName);
      objectHandle.dispose();
      return result;
    }
    async getProperties() {
      if (!this._objectId)
        return new Map;
      return this._context.getProperties(this._context, this._objectId);
    }
    rawValue() {
      return this._value;
    }
    async jsonValue() {
      if (!this._objectId)
        return this._value;
      const utilityScript = await this._context.utilityScript();
      const script = `(utilityScript, ...args) => utilityScript.jsonValue(...args)`;
      return this._context.evaluateWithArguments(script, true, utilityScript, [true], [this._objectId]);
    }
    asElement() {
      return null;
    }
    dispose() {
      if (this._disposed)
        return;
      this._disposed = true;
      if (this._objectId) {
        this._context.releaseHandle(this._objectId).catch((e) => {
        });
        if (globalThis.leakedJSHandles)
          globalThis.leakedJSHandles.delete(this);
      }
    }
    toString() {
      return this._preview;
    }
    _setPreviewCallback(callback) {
      this._previewCallback = callback;
    }
    preview() {
      return this._preview;
    }
    worldNameForTest() {
      return this._context.worldNameForTest;
    }
    _setPreview(preview) {
      this._preview = preview;
      if (this._previewCallback)
        this._previewCallback(preview);
    }
    async objectCount() {
      if (!this._objectId)
        throw new Error("Can only count objects for a handle that points to the constructor prototype");
      return this._context.objectCount(this._objectId);
    }
  }
  exports.JSHandle = JSHandle;

  class JavaScriptErrorInEvaluate extends Error {
  }
  exports.JavaScriptErrorInEvaluate = JavaScriptErrorInEvaluate;
});

// node_modules/playwright-core/lib/server/progress.js
var require_progress = __commonJS((exports) => {
  async function runCleanup(cleanup) {
    try {
      await cleanup();
    } catch (e) {
    }
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ProgressController = undefined;
  var _errors = require_errors();
  var _utils = require_utils3();
  var _manualPromise = require_manualPromise();

  class ProgressController {
    constructor(metadata, sdkObject) {
      this._forceAbortPromise = new _manualPromise.ManualPromise;
      this._cleanups = [];
      this._logName = "api";
      this._state = "before";
      this._deadline = 0;
      this._timeout = 0;
      this.metadata = undefined;
      this.instrumentation = undefined;
      this.sdkObject = undefined;
      this.metadata = metadata;
      this.sdkObject = sdkObject;
      this.instrumentation = sdkObject.instrumentation;
      this._forceAbortPromise.catch((e) => null);
    }
    setLogName(logName) {
      this._logName = logName;
    }
    abort(error) {
      this._forceAbortPromise.reject(error);
    }
    async run(task, timeout) {
      var _this$sdkObject$attri;
      if (timeout) {
        this._timeout = timeout;
        this._deadline = timeout ? (0, _utils.monotonicTime)() + timeout : 0;
      }
      (0, _utils.assert)(this._state === "before");
      this._state = "running";
      (_this$sdkObject$attri = this.sdkObject.attribution.context) === null || _this$sdkObject$attri === undefined || _this$sdkObject$attri._activeProgressControllers.add(this);
      const progress2 = {
        log: (message) => {
          if (this._state === "running")
            this.metadata.log.push(message);
          this.instrumentation.onCallLog(this.sdkObject, this.metadata, this._logName, message);
        },
        timeUntilDeadline: () => this._deadline ? this._deadline - (0, _utils.monotonicTime)() : 2147483647,
        isRunning: () => this._state === "running",
        cleanupWhenAborted: (cleanup) => {
          if (this._state === "running")
            this._cleanups.push(cleanup);
          else
            runCleanup(cleanup);
        },
        throwIfAborted: () => {
          if (this._state === "aborted")
            throw new AbortedError;
        },
        beforeInputAction: async (element) => {
          await this.instrumentation.onBeforeInputAction(this.sdkObject, this.metadata, element);
        },
        metadata: this.metadata
      };
      const timeoutError = new _errors.TimeoutError(`Timeout ${this._timeout}ms exceeded.`);
      const timer = setTimeout(() => this._forceAbortPromise.reject(timeoutError), progress2.timeUntilDeadline());
      try {
        const promise = task(progress2);
        const result = await Promise.race([promise, this._forceAbortPromise]);
        this._state = "finished";
        return result;
      } catch (e) {
        this._state = "aborted";
        await Promise.all(this._cleanups.splice(0).map(runCleanup));
        throw e;
      } finally {
        var _this$sdkObject$attri2;
        (_this$sdkObject$attri2 = this.sdkObject.attribution.context) === null || _this$sdkObject$attri2 === undefined || _this$sdkObject$attri2._activeProgressControllers.delete(this);
        clearTimeout(timer);
      }
    }
  }
  exports.ProgressController = ProgressController;

  class AbortedError extends Error {
  }
});

// node_modules/playwright-core/lib/server/fileUploadUtils.js
var require_fileUploadUtils = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  async function filesExceedUploadLimit(files) {
    const sizes = await Promise.all(files.map(async (file) => (await _fs.default.promises.stat(file)).size));
    return sizes.reduce((total, size) => total + size, 0) >= _utils.fileUploadSizeLimit;
  }
  async function prepareFilesForUpload(frame, params) {
    var _fileBuffers;
    const {
      payloads,
      streams
    } = params;
    let {
      localPaths
    } = params;
    if ([payloads, localPaths, streams].filter(Boolean).length !== 1)
      throw new Error("Exactly one of payloads, localPaths and streams must be provided");
    if (streams)
      localPaths = streams.map((c) => c.path());
    if (localPaths) {
      for (const p of localPaths)
        (0, _utils.assert)(_path.default.isAbsolute(p) && _path.default.resolve(p) === p, "Paths provided to localPaths must be absolute and fully resolved.");
    }
    let fileBuffers = payloads;
    if (!frame._page._browserContext._browser._isCollocatedWithServer) {
      if (localPaths) {
        if (await filesExceedUploadLimit(localPaths))
          throw new Error("Cannot transfer files larger than 50Mb to a browser not co-located with the server");
        fileBuffers = await Promise.all(localPaths.map(async (item) => {
          return {
            name: _path.default.basename(item),
            buffer: await _fs.default.promises.readFile(item),
            lastModifiedMs: (await _fs.default.promises.stat(item)).mtimeMs
          };
        }));
        localPaths = undefined;
      }
    }
    const filePayloads = (_fileBuffers = fileBuffers) === null || _fileBuffers === undefined ? undefined : _fileBuffers.map((payload) => ({
      name: payload.name,
      mimeType: payload.mimeType || _utilsBundle.mime.getType(payload.name) || "application/octet-stream",
      buffer: payload.buffer.toString("base64"),
      lastModifiedMs: payload.lastModifiedMs
    }));
    return {
      localPaths,
      filePayloads
    };
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.prepareFilesForUpload = prepareFilesForUpload;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _utils = require_utils3();
  var _utilsBundle = require_utilsBundle();
});

// node_modules/playwright-core/lib/server/dom.js
var require_dom = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var isNonRecoverableDOMError = function(error) {
    return error instanceof NonRecoverableDOMError;
  };
  var throwRetargetableDOMError = function(result) {
    if (result === "error:notconnected")
      throw new Error("Element is not attached to the DOM");
    return result;
  };
  var assertDone = function(result) {
  };
  var roundPoint = function(point) {
    return {
      x: (point.x * 100 | 0) / 100,
      y: (point.y * 100 | 0) / 100
    };
  };
  var compensateHalfIntegerRoundingError = function(point) {
    const remainderX = point.x - Math.floor(point.x);
    if (remainderX > 0.49 && remainderX < 0.51)
      point.x -= 0.02;
    const remainderY = point.y - Math.floor(point.y);
    if (remainderY > 0.49 && remainderY < 0.51)
      point.y -= 0.02;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NonRecoverableDOMError = exports.FrameExecutionContext = exports.ElementHandle = undefined;
  exports.assertDone = assertDone;
  exports.isNonRecoverableDOMError = isNonRecoverableDOMError;
  exports.kUnableToAdoptErrorMessage = undefined;
  exports.throwRetargetableDOMError = throwRetargetableDOMError;
  var injectedScriptSource = _interopRequireWildcard(require_injectedScriptSource());
  var _protocolError = require_protocolError();
  var js = _interopRequireWildcard(require_javascript());
  var _progress = require_progress();
  var _utils = require_utils3();
  var _fileUploadUtils = require_fileUploadUtils();

  class NonRecoverableDOMError extends Error {
  }
  exports.NonRecoverableDOMError = NonRecoverableDOMError;

  class FrameExecutionContext extends js.ExecutionContext {
    constructor(delegate, frame, world) {
      super(frame, delegate, world || "content-script");
      this.frame = undefined;
      this._injectedScriptPromise = undefined;
      this.world = undefined;
      this.frame = frame;
      this.world = world;
    }
    adoptIfNeeded(handle) {
      if (handle instanceof ElementHandle && handle._context !== this)
        return this.frame._page._delegate.adoptElementHandle(handle, this);
      return null;
    }
    async evaluate(pageFunction, arg) {
      return js.evaluate(this, true, pageFunction, arg);
    }
    async evaluateHandle(pageFunction, arg) {
      return js.evaluate(this, false, pageFunction, arg);
    }
    async evaluateExpression(expression, options, arg) {
      return js.evaluateExpression(this, expression, {
        ...options,
        returnByValue: true
      }, arg);
    }
    async evaluateExpressionHandle(expression, options, arg) {
      return js.evaluateExpression(this, expression, {
        ...options,
        returnByValue: false
      }, arg);
    }
    createHandle(remoteObject) {
      if (this.frame._page._delegate.isElementHandle(remoteObject))
        return new ElementHandle(this, remoteObject.objectId);
      return super.createHandle(remoteObject);
    }
    injectedScript() {
      if (!this._injectedScriptPromise) {
        const custom = [];
        const selectorsRegistry = this.frame._page.context().selectors();
        for (const [name, {
          source: source2
        }] of selectorsRegistry._engines)
          custom.push(`{ name: '${name}', engine: (${source2}) }`);
        const sdkLanguage = this.frame.attribution.playwright.options.sdkLanguage;
        const source = `
        (() => {
        const module = {};
        ${injectedScriptSource.source}
        return new (module.exports.InjectedScript())(
          globalThis,
          ${(0, _utils.isUnderTest)()},
          "${sdkLanguage}",
          ${JSON.stringify(selectorsRegistry.testIdAttributeName())},
          ${this.frame._page._delegate.rafCountForStablePosition()},
          "${this.frame._page._browserContext._browser.options.name}",
          [${custom.join(",\n")}]
        );
        })();
      `;
        this._injectedScriptPromise = this.rawEvaluateHandle(source).then((objectId) => new js.JSHandle(this, "object", "InjectedScript", objectId));
      }
      return this._injectedScriptPromise;
    }
  }
  exports.FrameExecutionContext = FrameExecutionContext;

  class ElementHandle extends js.JSHandle {
    constructor(context, objectId) {
      super(context, "node", undefined, objectId);
      this.__elementhandle = true;
      this._page = undefined;
      this._frame = undefined;
      this._page = context.frame._page;
      this._frame = context.frame;
      this._initializePreview().catch((e) => {
      });
    }
    async _initializePreview() {
      const utility = await this._context.injectedScript();
      this._setPreview(await utility.evaluate((injected, e) => "JSHandle@" + injected.previewNode(e), this));
    }
    asElement() {
      return this;
    }
    async evaluateInUtility(pageFunction, arg) {
      try {
        const utility = await this._frame._utilityContext();
        return await utility.evaluate(pageFunction, [await utility.injectedScript(), this, arg]);
      } catch (e) {
        if (js.isJavaScriptErrorInEvaluate(e) || (0, _protocolError.isSessionClosedError)(e))
          throw e;
        return "error:notconnected";
      }
    }
    async evaluateHandleInUtility(pageFunction, arg) {
      try {
        const utility = await this._frame._utilityContext();
        return await utility.evaluateHandle(pageFunction, [await utility.injectedScript(), this, arg]);
      } catch (e) {
        if (js.isJavaScriptErrorInEvaluate(e) || (0, _protocolError.isSessionClosedError)(e))
          throw e;
        return "error:notconnected";
      }
    }
    async ownerFrame() {
      const frameId = await this._page._delegate.getOwnerFrame(this);
      if (!frameId)
        return null;
      const frame = this._page._frameManager.frame(frameId);
      if (frame)
        return frame;
      for (const page of this._page._browserContext.pages()) {
        const frame2 = page._frameManager.frame(frameId);
        if (frame2)
          return frame2;
      }
      return null;
    }
    async isIframeElement() {
      return this.evaluateInUtility(([injected, node]) => node && (node.nodeName === "IFRAME" || node.nodeName === "FRAME"), {});
    }
    async contentFrame() {
      const isFrameElement = throwRetargetableDOMError(await this.isIframeElement());
      if (!isFrameElement)
        return null;
      return this._page._delegate.getContentFrame(this);
    }
    async getAttribute(metadata, name) {
      return this._frame.getAttribute(metadata, ":scope", name, {}, this);
    }
    async inputValue(metadata) {
      return this._frame.inputValue(metadata, ":scope", {}, this);
    }
    async textContent(metadata) {
      return this._frame.textContent(metadata, ":scope", {}, this);
    }
    async innerText(metadata) {
      return this._frame.innerText(metadata, ":scope", {}, this);
    }
    async innerHTML(metadata) {
      return this._frame.innerHTML(metadata, ":scope", {}, this);
    }
    async dispatchEvent(metadata, type, eventInit = {}) {
      return this._frame.dispatchEvent(metadata, ":scope", type, eventInit, {}, this);
    }
    async _scrollRectIntoViewIfNeeded(rect) {
      return await this._page._delegate.scrollRectIntoViewIfNeeded(this, rect);
    }
    async _waitAndScrollIntoViewIfNeeded(progress2, waitForVisible) {
      const result = await this._retryAction(progress2, "scroll into view", async () => {
        progress2.log(`  waiting for element to be stable`);
        const waitResult = await this.evaluateInUtility(async ([injected, node, {
          waitForVisible: waitForVisible2
        }]) => {
          return await injected.checkElementStates(node, waitForVisible2 ? ["visible", "stable"] : ["stable"]);
        }, {
          waitForVisible
        });
        if (waitResult)
          return waitResult;
        return await this._scrollRectIntoViewIfNeeded();
      }, {});
      assertDone(throwRetargetableDOMError(result));
    }
    async scrollIntoViewIfNeeded(metadata, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run((progress2) => this._waitAndScrollIntoViewIfNeeded(progress2, false), this._page._timeoutSettings.timeout(options));
    }
    async _clickablePoint() {
      const intersectQuadWithViewport = (quad) => {
        return quad.map((point) => ({
          x: Math.min(Math.max(point.x, 0), metrics.width),
          y: Math.min(Math.max(point.y, 0), metrics.height)
        }));
      };
      const computeQuadArea = (quad) => {
        let area = 0;
        for (let i = 0;i < quad.length; ++i) {
          const p1 = quad[i];
          const p2 = quad[(i + 1) % quad.length];
          area += (p1.x * p2.y - p2.x * p1.y) / 2;
        }
        return Math.abs(area);
      };
      const [quads, metrics] = await Promise.all([this._page._delegate.getContentQuads(this), this._page.mainFrame()._utilityContext().then((utility) => utility.evaluate(() => ({
        width: innerWidth,
        height: innerHeight
      })))]);
      if (!quads || !quads.length)
        return "error:notvisible";
      const filtered = quads.map((quad) => intersectQuadWithViewport(quad)).filter((quad) => computeQuadArea(quad) > 0.99);
      if (!filtered.length)
        return "error:notinviewport";
      const result = {
        x: 0,
        y: 0
      };
      for (const point of filtered[0]) {
        result.x += point.x / 4;
        result.y += point.y / 4;
      }
      compensateHalfIntegerRoundingError(result);
      return result;
    }
    async _offsetPoint(offset) {
      const [box, border] = await Promise.all([this.boundingBox(), this.evaluateInUtility(([injected, node]) => injected.getElementBorderWidth(node), {}).catch((e) => {
      })]);
      if (!box || !border)
        return "error:notvisible";
      if (border === "error:notconnected")
        return border;
      return {
        x: box.x + border.left + offset.x,
        y: box.y + border.top + offset.y
      };
    }
    async _retryAction(progress2, actionName, action, options) {
      let retry = 0;
      const waitTime = [0, 20, 100, 100, 500];
      while (progress2.isRunning()) {
        if (retry) {
          progress2.log(`retrying ${actionName} action${options.trial ? " (trial run)" : ""}, attempt #${retry}`);
          const timeout = waitTime[Math.min(retry - 1, waitTime.length - 1)];
          if (timeout) {
            progress2.log(`  waiting ${timeout}ms`);
            const result2 = await this.evaluateInUtility(([injected, node, timeout2]) => new Promise((f) => setTimeout(f, timeout2)), timeout);
            if (result2 === "error:notconnected")
              return result2;
          }
        } else {
          progress2.log(`attempting ${actionName} action${options.trial ? " (trial run)" : ""}`);
        }
        if (!options.skipLocatorHandlersCheckpoint && !options.force)
          await this._frame._page.performLocatorHandlersCheckpoint(progress2);
        const result = await action(retry);
        ++retry;
        if (result === "error:notvisible") {
          if (options.force)
            throw new NonRecoverableDOMError("Element is not visible");
          progress2.log("  element is not visible");
          continue;
        }
        if (result === "error:notinviewport") {
          if (options.force)
            throw new NonRecoverableDOMError("Element is outside of the viewport");
          progress2.log("  element is outside of the viewport");
          continue;
        }
        if (result === "error:optionsnotfound") {
          progress2.log("  did not find some options");
          continue;
        }
        if (typeof result === "object" && "hitTargetDescription" in result) {
          progress2.log(`  ${result.hitTargetDescription} intercepts pointer events`);
          continue;
        }
        if (typeof result === "object" && "missingState" in result) {
          progress2.log(`  element is not ${result.missingState}`);
          continue;
        }
        return result;
      }
      return "done";
    }
    async _retryPointerAction(progress2, actionName, waitForEnabled, action, options) {
      const skipLocatorHandlersCheckpoint = actionName === "move and up";
      return await this._retryAction(progress2, actionName, async (retry) => {
        const scrollOptions = [undefined, {
          block: "end",
          inline: "end"
        }, {
          block: "center",
          inline: "center"
        }, {
          block: "start",
          inline: "start"
        }];
        const forceScrollOptions = scrollOptions[retry % scrollOptions.length];
        return await this._performPointerAction(progress2, actionName, waitForEnabled, action, forceScrollOptions, options);
      }, {
        ...options,
        skipLocatorHandlersCheckpoint
      });
    }
    async _performPointerAction(progress2, actionName, waitForEnabled, action, forceScrollOptions, options) {
      const {
        force = false,
        position
      } = options;
      const doScrollIntoView = async () => {
        if (forceScrollOptions) {
          return await this.evaluateInUtility(([injected, node, options2]) => {
            if (node.nodeType === 1)
              node.scrollIntoView(options2);
            return "done";
          }, forceScrollOptions);
        }
        return await this._scrollRectIntoViewIfNeeded(position ? {
          x: position.x,
          y: position.y,
          width: 0,
          height: 0
        } : undefined);
      };
      if (this._frame.parentFrame()) {
        progress2.throwIfAborted();
        await doScrollIntoView().catch(() => {
        });
      }
      if (options.__testHookBeforeStable)
        await options.__testHookBeforeStable();
      if (!force) {
        const elementStates = waitForEnabled ? ["visible", "enabled", "stable"] : ["visible", "stable"];
        progress2.log(`  waiting for element to be ${waitForEnabled ? "visible, enabled and stable" : "visible and stable"}`);
        const result = await this.evaluateInUtility(async ([injected, node, {
          elementStates: elementStates2
        }]) => {
          return await injected.checkElementStates(node, elementStates2);
        }, {
          elementStates
        });
        if (result)
          return result;
        progress2.log(`  element is ${waitForEnabled ? "visible, enabled and stable" : "visible and stable"}`);
      }
      if (options.__testHookAfterStable)
        await options.__testHookAfterStable();
      progress2.log("  scrolling into view if needed");
      progress2.throwIfAborted();
      const scrolled = await doScrollIntoView();
      if (scrolled !== "done")
        return scrolled;
      progress2.log("  done scrolling");
      const maybePoint = position ? await this._offsetPoint(position) : await this._clickablePoint();
      if (typeof maybePoint === "string")
        return maybePoint;
      const point = roundPoint(maybePoint);
      progress2.metadata.point = point;
      await progress2.beforeInputAction(this);
      let hitTargetInterceptionHandle;
      if (force) {
        progress2.log(`  forcing action`);
      } else {
        if (options.__testHookBeforeHitTarget)
          await options.__testHookBeforeHitTarget();
        const frameCheckResult = await this._checkFrameIsHitTarget(point);
        if (frameCheckResult === "error:notconnected" || "hitTargetDescription" in frameCheckResult)
          return frameCheckResult;
        const hitPoint = frameCheckResult.framePoint;
        const actionType = actionName === "move and up" ? "drag" : actionName === "hover" || actionName === "tap" ? actionName : "mouse";
        const handle = await this.evaluateHandleInUtility(([injected, node, {
          actionType: actionType2,
          hitPoint: hitPoint2,
          trial
        }]) => injected.setupHitTargetInterceptor(node, actionType2, hitPoint2, trial), {
          actionType,
          hitPoint,
          trial: !!options.trial
        });
        if (handle === "error:notconnected")
          return handle;
        if (!handle._objectId) {
          const error = handle.rawValue();
          if (error === "error:notconnected")
            return error;
          return {
            hitTargetDescription: error
          };
        }
        hitTargetInterceptionHandle = handle;
        progress2.cleanupWhenAborted(() => {
          hitTargetInterceptionHandle.evaluate((h) => h.stop()).catch((e) => {
          });
          hitTargetInterceptionHandle.dispose();
        });
      }
      const actionResult = await this._page._frameManager.waitForSignalsCreatedBy(progress2, options.noWaitAfter, async () => {
        if (options.__testHookBeforePointerAction)
          await options.__testHookBeforePointerAction();
        progress2.throwIfAborted();
        let restoreModifiers;
        if (options && options.modifiers)
          restoreModifiers = await this._page.keyboard._ensureModifiers(options.modifiers);
        progress2.log(`  performing ${actionName} action`);
        await action(point);
        if (restoreModifiers)
          await this._page.keyboard._ensureModifiers(restoreModifiers);
        if (hitTargetInterceptionHandle) {
          const stopHitTargetInterception = hitTargetInterceptionHandle.evaluate((h) => h.stop()).catch((e) => "done").finally(() => {
            var _hitTargetInterceptio;
            (_hitTargetInterceptio = hitTargetInterceptionHandle) === null || _hitTargetInterceptio === undefined || _hitTargetInterceptio.dispose();
          });
          if (!options.noWaitAfter) {
            const hitTargetResult = await stopHitTargetInterception;
            if (hitTargetResult !== "done")
              return hitTargetResult;
          }
        }
        progress2.log(`  ${options.trial ? "trial " : ""}${actionName} action done`);
        progress2.log("  waiting for scheduled navigations to finish");
        if (options.__testHookAfterPointerAction)
          await options.__testHookAfterPointerAction();
        return "done";
      }, "input");
      if (actionResult !== "done")
        return actionResult;
      progress2.log("  navigations have finished");
      return "done";
    }
    async hover(metadata, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._hover(progress2, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    _hover(progress2, options) {
      return this._retryPointerAction(progress2, "hover", false, (point) => this._page.mouse.move(point.x, point.y), options);
    }
    async click(metadata, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._click(progress2, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    _click(progress2, options) {
      return this._retryPointerAction(progress2, "click", true, (point) => this._page.mouse.click(point.x, point.y, options), options);
    }
    async dblclick(metadata, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._dblclick(progress2, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    _dblclick(progress2, options) {
      return this._retryPointerAction(progress2, "dblclick", true, (point) => this._page.mouse.dblclick(point.x, point.y, options), options);
    }
    async tap(metadata, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._tap(progress2, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    _tap(progress2, options) {
      return this._retryPointerAction(progress2, "tap", true, (point) => this._page.touchscreen.tap(point.x, point.y), options);
    }
    async selectOption(metadata, elements, values, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._selectOption(progress2, elements, values, options);
        return throwRetargetableDOMError(result);
      }, this._page._timeoutSettings.timeout(options));
    }
    async _selectOption(progress2, elements, values, options) {
      let resultingOptions = [];
      await this._retryAction(progress2, "select option", async () => {
        await progress2.beforeInputAction(this);
        if (!options.force)
          progress2.log(`  waiting for element to be visible and enabled`);
        const optionsToSelect = [...elements, ...values];
        const result = await this.evaluateInUtility(async ([injected, node, {
          optionsToSelect: optionsToSelect2,
          force
        }]) => {
          if (!force) {
            const checkResult = await injected.checkElementStates(node, ["visible", "enabled"]);
            if (checkResult)
              return checkResult;
          }
          return injected.selectOptions(node, optionsToSelect2);
        }, {
          optionsToSelect,
          force: options.force
        });
        if (Array.isArray(result)) {
          progress2.log("  selected specified option(s)");
          resultingOptions = result;
          return "done";
        }
        return result;
      }, options);
      return resultingOptions;
    }
    async fill(metadata, value, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._fill(progress2, value, options);
        assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    async _fill(progress2, value, options) {
      progress2.log(`  fill("${value}")`);
      return await this._retryAction(progress2, "fill", async () => {
        await progress2.beforeInputAction(this);
        return this._page._frameManager.waitForSignalsCreatedBy(progress2, options.noWaitAfter, async () => {
          if (!options.force)
            progress2.log("  waiting for element to be visible, enabled and editable");
          const result = await this.evaluateInUtility(async ([injected, node, {
            value: value2,
            force
          }]) => {
            if (!force) {
              const checkResult = await injected.checkElementStates(node, ["visible", "enabled", "editable"]);
              if (checkResult)
                return checkResult;
            }
            return injected.fill(node, value2);
          }, {
            value,
            force: options.force
          });
          progress2.throwIfAborted();
          if (result === "needsinput") {
            if (value)
              await this._page.keyboard.insertText(value);
            else
              await this._page.keyboard.press("Delete");
            return "done";
          } else {
            return result;
          }
        }, "input");
      }, options);
    }
    async selectText(metadata, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._retryAction(progress2, "selectText", async () => {
          if (!options.force)
            progress2.log("  waiting for element to be visible");
          return await this.evaluateInUtility(async ([injected, node, {
            force
          }]) => {
            if (!force) {
              const checkResult = await injected.checkElementStates(node, ["visible"]);
              if (checkResult)
                return checkResult;
            }
            return injected.selectText(node);
          }, {
            force: options.force
          });
        }, options);
        assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    async setInputFiles(metadata, params) {
      const inputFileItems = await (0, _fileUploadUtils.prepareFilesForUpload)(this._frame, params);
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._setInputFiles(progress2, inputFileItems, params);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(params));
    }
    async _setInputFiles(progress2, items, options) {
      const {
        filePayloads,
        localPaths
      } = items;
      const multiple = filePayloads && filePayloads.length > 1 || localPaths && localPaths.length > 1;
      const result = await this.evaluateHandleInUtility(([injected, node, multiple2]) => {
        const element = injected.retarget(node, "follow-label");
        if (!element)
          return;
        if (element.tagName !== "INPUT")
          throw injected.createStacklessError("Node is not an HTMLInputElement");
        if (multiple2 && !element.multiple)
          throw injected.createStacklessError("Non-multiple file input can only accept single file");
        return element;
      }, multiple);
      if (result === "error:notconnected" || !result.asElement())
        return "error:notconnected";
      const retargeted = result.asElement();
      await progress2.beforeInputAction(this);
      await this._page._frameManager.waitForSignalsCreatedBy(progress2, options.noWaitAfter, async () => {
        progress2.throwIfAborted();
        if (localPaths)
          await this._page._delegate.setInputFilePaths(progress2, retargeted, localPaths);
        else
          await this._page._delegate.setInputFiles(retargeted, filePayloads);
      });
      return "done";
    }
    async focus(metadata) {
      const controller = new _progress.ProgressController(metadata, this);
      await controller.run(async (progress2) => {
        const result = await this._focus(progress2);
        return assertDone(throwRetargetableDOMError(result));
      }, 0);
    }
    async _focus(progress2, resetSelectionIfNotFocused) {
      progress2.throwIfAborted();
      return await this.evaluateInUtility(([injected, node, resetSelectionIfNotFocused2]) => injected.focusNode(node, resetSelectionIfNotFocused2), resetSelectionIfNotFocused);
    }
    async _blur(progress2) {
      progress2.throwIfAborted();
      return await this.evaluateInUtility(([injected, node]) => injected.blurNode(node), {});
    }
    async type(metadata, text, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._type(progress2, text, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    async _type(progress2, text, options) {
      progress2.log(`elementHandle.type("${text}")`);
      await progress2.beforeInputAction(this);
      return this._page._frameManager.waitForSignalsCreatedBy(progress2, options.noWaitAfter, async () => {
        const result = await this._focus(progress2, true);
        if (result !== "done")
          return result;
        progress2.throwIfAborted();
        await this._page.keyboard.type(text, options);
        return "done";
      }, "input");
    }
    async press(metadata, key, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._press(progress2, key, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    async _press(progress2, key, options) {
      progress2.log(`elementHandle.press("${key}")`);
      await progress2.beforeInputAction(this);
      return this._page._frameManager.waitForSignalsCreatedBy(progress2, options.noWaitAfter, async () => {
        const result = await this._focus(progress2, true);
        if (result !== "done")
          return result;
        progress2.throwIfAborted();
        await this._page.keyboard.press(key, options);
        return "done";
      }, "input");
    }
    async check(metadata, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._setChecked(progress2, true, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    async uncheck(metadata, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._setChecked(progress2, false, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    async _setChecked(progress2, state, options) {
      const isChecked = async () => {
        const result2 = await this.evaluateInUtility(([injected, node]) => injected.elementState(node, "checked"), {});
        return throwRetargetableDOMError(result2);
      };
      if (await isChecked() === state)
        return "done";
      const result = await this._click(progress2, options);
      if (result !== "done")
        return result;
      if (options.trial)
        return "done";
      if (await isChecked() !== state)
        throw new NonRecoverableDOMError("Clicking the checkbox did not change its state");
      return "done";
    }
    async boundingBox() {
      return this._page._delegate.getBoundingBox(this);
    }
    async screenshot(metadata, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run((progress2) => this._page._screenshotter.screenshotElement(progress2, this, options), this._page._timeoutSettings.timeout(options));
    }
    async querySelector(selector, options) {
      return this._frame.selectors.query(selector, options, this);
    }
    async querySelectorAll(selector) {
      return this._frame.selectors.queryAll(selector, this);
    }
    async evalOnSelector(selector, strict, expression, isFunction, arg) {
      return this._frame.evalOnSelector(selector, strict, expression, isFunction, arg, this);
    }
    async evalOnSelectorAll(selector, expression, isFunction, arg) {
      return this._frame.evalOnSelectorAll(selector, expression, isFunction, arg, this);
    }
    async isVisible(metadata) {
      return this._frame.isVisible(metadata, ":scope", {}, this);
    }
    async isHidden(metadata) {
      return this._frame.isHidden(metadata, ":scope", {}, this);
    }
    async isEnabled(metadata) {
      return this._frame.isEnabled(metadata, ":scope", {}, this);
    }
    async isDisabled(metadata) {
      return this._frame.isDisabled(metadata, ":scope", {}, this);
    }
    async isEditable(metadata) {
      return this._frame.isEditable(metadata, ":scope", {}, this);
    }
    async isChecked(metadata) {
      return this._frame.isChecked(metadata, ":scope", {}, this);
    }
    async waitForElementState(metadata, state, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const actionName = `wait for ${state}`;
        const result = await this._retryAction(progress2, actionName, async () => {
          return await this.evaluateInUtility(async ([injected, node, state2]) => {
            return await injected.checkElementStates(node, [state2]) || "done";
          }, state);
        }, {});
        assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    async waitForSelector(metadata, selector, options = {}) {
      return this._frame.waitForSelector(metadata, selector, options, this);
    }
    async _adoptTo(context) {
      if (this._context !== context) {
        const adopted = await this._page._delegate.adoptElementHandle(this, context);
        this.dispose();
        return adopted;
      }
      return this;
    }
    async _checkFrameIsHitTarget(point) {
      let frame = this._frame;
      const data = [];
      while (frame.parentFrame()) {
        const frameElement = await frame.frameElement();
        const box = await frameElement.boundingBox();
        const style = await frameElement.evaluateInUtility(([injected, iframe]) => injected.describeIFrameStyle(iframe), {}).catch((e) => "error:notconnected");
        if (!box || style === "error:notconnected")
          return "error:notconnected";
        if (style === "transformed") {
          return {
            framePoint: undefined
          };
        }
        const pointInFrame = {
          x: point.x - box.x - style.left,
          y: point.y - box.y - style.top
        };
        data.push({
          frame,
          frameElement,
          pointInFrame
        });
        frame = frame.parentFrame();
      }
      data.push({
        frame,
        frameElement: null,
        pointInFrame: point
      });
      for (let i = data.length - 1;i > 0; i--) {
        const element = data[i - 1].frameElement;
        const point2 = data[i].pointInFrame;
        const hitTargetResult = await element.evaluateInUtility(([injected, element2, hitPoint]) => {
          return injected.expectHitTarget(hitPoint, element2);
        }, point2);
        if (hitTargetResult !== "done")
          return hitTargetResult;
      }
      return {
        framePoint: data[0].pointInFrame
      };
    }
  }
  exports.ElementHandle = ElementHandle;
  var kUnableToAdoptErrorMessage = exports.kUnableToAdoptErrorMessage = "Unable to adopt element handle from a different document";
});

// node_modules/playwright-core/lib/server/types.js
var require_types2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.kLifecycleEvents = undefined;
  var kLifecycleEvents = exports.kLifecycleEvents = new Set(["load", "domcontentloaded", "networkidle", "commit"]);
});

// node_modules/playwright-core/lib/server/frameSelectors.js
var require_frameSelectors = __commonJS((exports) => {
  async function adoptIfNeeded(handle, context) {
    if (handle._context === context)
      return handle;
    const adopted = handle._page._delegate.adoptElementHandle(handle, context);
    handle.dispose();
    return adopted;
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FrameSelectors = undefined;
  var _selectorParser = require_selectorParser();
  var _locatorGenerators = require_locatorGenerators();

  class FrameSelectors {
    constructor(frame) {
      this.frame = undefined;
      this.frame = frame;
    }
    _parseSelector(selector, options) {
      const strict = typeof (options === null || options === undefined ? undefined : options.strict) === "boolean" ? options.strict : !!this.frame._page.context()._options.strictSelectors;
      return this.frame._page.context().selectors().parseSelector(selector, strict);
    }
    async query(selector, options, scope) {
      const resolved = await this.resolveInjectedForSelector(selector, options, scope);
      if (!resolved)
        return null;
      const handle = await resolved.injected.evaluateHandle((injected, {
        info,
        scope: scope2
      }) => {
        return injected.querySelector(info.parsed, scope2 || document, info.strict);
      }, {
        info: resolved.info,
        scope: resolved.scope
      });
      const elementHandle = handle.asElement();
      if (!elementHandle) {
        handle.dispose();
        return null;
      }
      return adoptIfNeeded(elementHandle, await resolved.frame._mainContext());
    }
    async queryArrayInMainWorld(selector, scope) {
      const resolved = await this.resolveInjectedForSelector(selector, {
        mainWorld: true
      }, scope);
      if (!resolved)
        throw new Error(`Failed to find frame for selector "${selector}"`);
      return await resolved.injected.evaluateHandle((injected, {
        info,
        scope: scope2
      }) => {
        return injected.querySelectorAll(info.parsed, scope2 || document);
      }, {
        info: resolved.info,
        scope: resolved.scope
      });
    }
    async queryCount(selector) {
      const resolved = await this.resolveInjectedForSelector(selector);
      if (!resolved)
        throw new Error(`Failed to find frame for selector "${selector}"`);
      return await resolved.injected.evaluate((injected, {
        info
      }) => {
        return injected.querySelectorAll(info.parsed, document).length;
      }, {
        info: resolved.info
      });
    }
    async queryAll(selector, scope) {
      const resolved = await this.resolveInjectedForSelector(selector, {}, scope);
      if (!resolved)
        return [];
      const arrayHandle = await resolved.injected.evaluateHandle((injected, {
        info,
        scope: scope2
      }) => {
        return injected.querySelectorAll(info.parsed, scope2 || document);
      }, {
        info: resolved.info,
        scope: resolved.scope
      });
      const properties = await arrayHandle.getProperties();
      arrayHandle.dispose();
      const targetContext = await resolved.frame._mainContext();
      const result = [];
      for (const property of properties.values()) {
        const elementHandle = property.asElement();
        if (elementHandle)
          result.push(adoptIfNeeded(elementHandle, targetContext));
        else
          property.dispose();
      }
      return Promise.all(result);
    }
    async resolveFrameForSelector(selector, options = {}, scope) {
      let frame = this.frame;
      const frameChunks = (0, _selectorParser.splitSelectorByFrame)(selector);
      for (const chunk of frameChunks) {
        (0, _selectorParser.visitAllSelectorParts)(chunk, (part, nested) => {
          if (nested && part.name === "internal:control" && part.body === "enter-frame") {
            const locator = (0, _locatorGenerators.asLocator)(this.frame._page.attribution.playwright.options.sdkLanguage, selector);
            throw new _selectorParser.InvalidSelectorError(`Frame locators are not allowed inside composite locators, while querying "${locator}"`);
          }
        });
      }
      for (let i = 0;i < frameChunks.length - 1; ++i) {
        const info = this._parseSelector(frameChunks[i], options);
        const context = await frame._context(info.world);
        const injectedScript = await context.injectedScript();
        const handle = await injectedScript.evaluateHandle((injected, {
          info: info2,
          scope: scope2,
          selectorString
        }) => {
          const element2 = injected.querySelector(info2.parsed, scope2 || document, info2.strict);
          if (element2 && element2.nodeName !== "IFRAME" && element2.nodeName !== "FRAME")
            throw injected.createStacklessError(`Selector "${selectorString}" resolved to ${injected.previewNode(element2)}, <iframe> was expected`);
          return element2;
        }, {
          info,
          scope: i === 0 ? scope : undefined,
          selectorString: (0, _selectorParser.stringifySelector)(info.parsed)
        });
        const element = handle.asElement();
        if (!element)
          return null;
        const maybeFrame = await frame._page._delegate.getContentFrame(element);
        element.dispose();
        if (!maybeFrame)
          return null;
        frame = maybeFrame;
      }
      if (frame !== this.frame)
        scope = undefined;
      return {
        frame,
        info: frame.selectors._parseSelector(frameChunks[frameChunks.length - 1], options),
        scope
      };
    }
    async resolveInjectedForSelector(selector, options, scope) {
      const resolved = await this.resolveFrameForSelector(selector, options, scope);
      if (!resolved)
        return;
      const context = await resolved.frame._context(options !== null && options !== undefined && options.mainWorld ? "main" : resolved.info.world);
      const injected = await context.injectedScript();
      return {
        injected,
        info: resolved.info,
        frame: resolved.frame,
        scope: resolved.scope
      };
    }
  }
  exports.FrameSelectors = FrameSelectors;
});

// node_modules/playwright-core/lib/server/frames.js
var require_frames = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var verifyLifecycle = function(name, waitUntil) {
    if (waitUntil === "networkidle0")
      waitUntil = "networkidle";
    if (!types.kLifecycleEvents.has(waitUntil))
      throw new Error(`${name}: expected one of (load|domcontentloaded|networkidle|commit)`);
    return waitUntil;
  };
  var renderUnexpectedValue = function(expression, received) {
    if (expression === "to.be.checked")
      return received ? "checked" : "unchecked";
    if (expression === "to.be.unchecked")
      return received ? "unchecked" : "checked";
    if (expression === "to.be.visible")
      return received ? "visible" : "hidden";
    if (expression === "to.be.hidden")
      return received ? "hidden" : "visible";
    if (expression === "to.be.enabled")
      return received ? "enabled" : "disabled";
    if (expression === "to.be.disabled")
      return received ? "disabled" : "enabled";
    if (expression === "to.be.editable")
      return received ? "editable" : "readonly";
    if (expression === "to.be.readonly")
      return received ? "readonly" : "editable";
    if (expression === "to.be.empty")
      return received ? "empty" : "not empty";
    if (expression === "to.be.focused")
      return received ? "focused" : "not focused";
    return received;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NavigationAbortedError = exports.FrameManager = exports.Frame = undefined;
  var dom = _interopRequireWildcard(require_dom());
  var _helper = require_helper();
  var _eventsHelper = require_eventsHelper();
  var js = _interopRequireWildcard(require_javascript());
  var network = _interopRequireWildcard(require_network2());
  var _page = require_page();
  var types = _interopRequireWildcard(require_types2());
  var _browserContext = require_browserContext();
  var _progress = require_progress();
  var _utils = require_utils3();
  var _manualPromise = require_manualPromise();
  var _debugLogger = require_debugLogger();
  var _instrumentation = require_instrumentation();
  var _protocolError = require_protocolError();
  var _selectorParser = require_selectorParser();
  var _locatorGenerators = require_locatorGenerators();
  var _frameSelectors = require_frameSelectors();
  var _errors = require_errors();
  var _fileUploadUtils = require_fileUploadUtils();

  class NavigationAbortedError extends Error {
    constructor(documentId, message) {
      super(message);
      this.documentId = undefined;
      this.documentId = documentId;
    }
  }
  exports.NavigationAbortedError = NavigationAbortedError;
  var kDummyFrameId = "<dummy>";

  class FrameManager {
    constructor(page) {
      this._page = undefined;
      this._frames = new Map;
      this._mainFrame = undefined;
      this._consoleMessageTags = new Map;
      this._signalBarriers = new Set;
      this._webSockets = new Map;
      this._openedDialogs = new Set;
      this._closeAllOpeningDialogs = false;
      this._page = page;
      this._mainFrame = undefined;
    }
    createDummyMainFrameIfNeeded() {
      if (!this._mainFrame)
        this.frameAttached(kDummyFrameId, null);
    }
    dispose() {
      for (const frame of this._frames.values()) {
        frame._stopNetworkIdleTimer();
        frame._invalidateNonStallingEvaluations("Target crashed");
      }
    }
    mainFrame() {
      return this._mainFrame;
    }
    frames() {
      const frames = [];
      collect(this._mainFrame);
      return frames;
      function collect(frame) {
        frames.push(frame);
        for (const subframe of frame.childFrames())
          collect(subframe);
      }
    }
    frame(frameId) {
      return this._frames.get(frameId) || null;
    }
    frameAttached(frameId, parentFrameId) {
      const parentFrame = parentFrameId ? this._frames.get(parentFrameId) : null;
      if (!parentFrame) {
        if (this._mainFrame) {
          this._frames.delete(this._mainFrame._id);
          this._mainFrame._id = frameId;
        } else {
          (0, _utils.assert)(!this._frames.has(frameId));
          this._mainFrame = new Frame(this._page, frameId, parentFrame);
        }
        this._frames.set(frameId, this._mainFrame);
        return this._mainFrame;
      } else {
        (0, _utils.assert)(!this._frames.has(frameId));
        const frame = new Frame(this._page, frameId, parentFrame);
        this._frames.set(frameId, frame);
        this._page.emit(_page.Page.Events.FrameAttached, frame);
        return frame;
      }
    }
    async waitForSignalsCreatedBy(progress2, noWaitAfter, action, source) {
      if (noWaitAfter)
        return action();
      const barrier = new SignalBarrier(progress2);
      this._signalBarriers.add(barrier);
      if (progress2)
        progress2.cleanupWhenAborted(() => this._signalBarriers.delete(barrier));
      const result = await action();
      if (source === "input")
        await this._page._delegate.inputActionEpilogue();
      await barrier.waitFor();
      this._signalBarriers.delete(barrier);
      await new Promise((0, _utils.makeWaitForNextTask)());
      return result;
    }
    frameWillPotentiallyRequestNavigation() {
      for (const barrier of this._signalBarriers)
        barrier.retain();
    }
    frameDidPotentiallyRequestNavigation() {
      for (const barrier of this._signalBarriers)
        barrier.release();
    }
    frameRequestedNavigation(frameId, documentId) {
      const frame = this._frames.get(frameId);
      if (!frame)
        return;
      for (const barrier of this._signalBarriers)
        barrier.addFrameNavigation(frame);
      if (frame.pendingDocument() && frame.pendingDocument().documentId === documentId) {
        return;
      }
      const request = documentId ? Array.from(frame._inflightRequests).find((request2) => request2._documentId === documentId) : undefined;
      frame.setPendingDocument({
        documentId,
        request
      });
    }
    frameCommittedNewDocumentNavigation(frameId, url, name, documentId, initial) {
      const frame = this._frames.get(frameId);
      this.removeChildFramesRecursively(frame);
      this.clearWebSockets(frame);
      frame._url = url;
      frame._name = name;
      let keepPending;
      const pendingDocument = frame.pendingDocument();
      if (pendingDocument) {
        if (pendingDocument.documentId === undefined) {
          pendingDocument.documentId = documentId;
        }
        if (pendingDocument.documentId === documentId) {
          frame._currentDocument = pendingDocument;
        } else {
          keepPending = pendingDocument;
          frame._currentDocument = {
            documentId,
            request: undefined
          };
        }
        frame.setPendingDocument(undefined);
      } else {
        frame._currentDocument = {
          documentId,
          request: undefined
        };
      }
      frame._onClearLifecycle();
      const navigationEvent = {
        url,
        name,
        newDocument: frame._currentDocument,
        isPublic: true
      };
      this._fireInternalFrameNavigation(frame, navigationEvent);
      if (!initial) {
        _debugLogger.debugLogger.log("api", `  navigated to "${url}"`);
        this._page.frameNavigatedToNewDocument(frame);
      }
      frame.setPendingDocument(keepPending);
    }
    frameCommittedSameDocumentNavigation(frameId, url) {
      const frame = this._frames.get(frameId);
      if (!frame)
        return;
      frame._url = url;
      const navigationEvent = {
        url,
        name: frame._name,
        isPublic: true
      };
      this._fireInternalFrameNavigation(frame, navigationEvent);
      _debugLogger.debugLogger.log("api", `  navigated to "${url}"`);
    }
    frameAbortedNavigation(frameId, errorText, documentId) {
      const frame = this._frames.get(frameId);
      if (!frame || !frame.pendingDocument())
        return;
      if (documentId !== undefined && frame.pendingDocument().documentId !== documentId)
        return;
      const navigationEvent = {
        url: frame._url,
        name: frame._name,
        newDocument: frame.pendingDocument(),
        error: new NavigationAbortedError(documentId, errorText),
        isPublic: !(documentId && frame._redirectedNavigations.has(documentId))
      };
      frame.setPendingDocument(undefined);
      this._fireInternalFrameNavigation(frame, navigationEvent);
    }
    frameDetached(frameId) {
      const frame = this._frames.get(frameId);
      if (frame) {
        this._removeFramesRecursively(frame);
        this._page.mainFrame()._recalculateNetworkIdle();
      }
    }
    frameLifecycleEvent(frameId, event) {
      const frame = this._frames.get(frameId);
      if (frame)
        frame._onLifecycleEvent(event);
    }
    requestStarted(request, route) {
      const frame = request.frame();
      this._inflightRequestStarted(request);
      if (request._documentId)
        frame.setPendingDocument({
          documentId: request._documentId,
          request
        });
      if (request._isFavicon) {
        if (route)
          route.continue(request, {
            isFallback: true
          }).catch(() => {
          });
        return;
      }
      this._page.emitOnContext(_browserContext.BrowserContext.Events.Request, request);
      if (route) {
        var _this$_page$_serverRe, _this$_page, _this$_page$_clientRe, _this$_page2, _this$_page$_browserC, _this$_page$_browserC2;
        const r = new network.Route(request, route);
        if ((_this$_page$_serverRe = (_this$_page = this._page)._serverRequestInterceptor) !== null && _this$_page$_serverRe !== undefined && _this$_page$_serverRe.call(_this$_page, r, request))
          return;
        if ((_this$_page$_clientRe = (_this$_page2 = this._page)._clientRequestInterceptor) !== null && _this$_page$_clientRe !== undefined && _this$_page$_clientRe.call(_this$_page2, r, request))
          return;
        if ((_this$_page$_browserC = (_this$_page$_browserC2 = this._page._browserContext)._requestInterceptor) !== null && _this$_page$_browserC !== undefined && _this$_page$_browserC.call(_this$_page$_browserC2, r, request))
          return;
        r.continue({
          isFallback: true
        }).catch(() => {
        });
      }
    }
    requestReceivedResponse(response) {
      if (response.request()._isFavicon)
        return;
      this._page.emitOnContext(_browserContext.BrowserContext.Events.Response, response);
    }
    reportRequestFinished(request, response) {
      this._inflightRequestFinished(request);
      if (request._isFavicon)
        return;
      this._page.emitOnContext(_browserContext.BrowserContext.Events.RequestFinished, {
        request,
        response
      });
    }
    requestFailed(request, canceled) {
      const frame = request.frame();
      this._inflightRequestFinished(request);
      if (frame.pendingDocument() && frame.pendingDocument().request === request) {
        let errorText = request.failure().errorText;
        if (canceled)
          errorText += "; maybe frame was detached?";
        this.frameAbortedNavigation(frame._id, errorText, frame.pendingDocument().documentId);
      }
      if (request._isFavicon)
        return;
      this._page.emitOnContext(_browserContext.BrowserContext.Events.RequestFailed, request);
    }
    dialogDidOpen(dialog) {
      for (const frame of this._frames.values())
        frame._invalidateNonStallingEvaluations("JavaScript dialog interrupted evaluation");
      if (this._closeAllOpeningDialogs)
        dialog.close().then(() => {
        });
      else
        this._openedDialogs.add(dialog);
    }
    dialogWillClose(dialog) {
      this._openedDialogs.delete(dialog);
    }
    async closeOpenDialogs() {
      await Promise.all([...this._openedDialogs].map((dialog) => dialog.close())).catch(() => {
      });
      this._openedDialogs.clear();
    }
    setCloseAllOpeningDialogs(closeDialogs) {
      this._closeAllOpeningDialogs = closeDialogs;
    }
    removeChildFramesRecursively(frame) {
      for (const child of frame.childFrames())
        this._removeFramesRecursively(child);
    }
    _removeFramesRecursively(frame) {
      this.removeChildFramesRecursively(frame);
      frame._onDetached();
      this._frames.delete(frame._id);
      if (!this._page.isClosed())
        this._page.emit(_page.Page.Events.FrameDetached, frame);
    }
    _inflightRequestFinished(request) {
      const frame = request.frame();
      if (request._isFavicon)
        return;
      if (!frame._inflightRequests.has(request))
        return;
      frame._inflightRequests.delete(request);
      if (frame._inflightRequests.size === 0)
        frame._startNetworkIdleTimer();
    }
    _inflightRequestStarted(request) {
      const frame = request.frame();
      if (request._isFavicon)
        return;
      frame._inflightRequests.add(request);
      if (frame._inflightRequests.size === 1)
        frame._stopNetworkIdleTimer();
    }
    interceptConsoleMessage(message) {
      if (message.type() !== "debug")
        return false;
      const tag = message.text();
      const handler = this._consoleMessageTags.get(tag);
      if (!handler)
        return false;
      this._consoleMessageTags.delete(tag);
      handler();
      return true;
    }
    clearWebSockets(frame) {
      if (frame.parentFrame())
        return;
      this._webSockets.clear();
    }
    onWebSocketCreated(requestId, url) {
      const ws2 = new network.WebSocket(this._page, url);
      this._webSockets.set(requestId, ws2);
    }
    onWebSocketRequest(requestId) {
      const ws2 = this._webSockets.get(requestId);
      if (ws2 && ws2.markAsNotified())
        this._page.emit(_page.Page.Events.WebSocket, ws2);
    }
    onWebSocketResponse(requestId, status, statusText) {
      const ws2 = this._webSockets.get(requestId);
      if (status < 400)
        return;
      if (ws2)
        ws2.error(`${statusText}: ${status}`);
    }
    onWebSocketFrameSent(requestId, opcode, data) {
      const ws2 = this._webSockets.get(requestId);
      if (ws2)
        ws2.frameSent(opcode, data);
    }
    webSocketFrameReceived(requestId, opcode, data) {
      const ws2 = this._webSockets.get(requestId);
      if (ws2)
        ws2.frameReceived(opcode, data);
    }
    webSocketClosed(requestId) {
      const ws2 = this._webSockets.get(requestId);
      if (ws2)
        ws2.closed();
      this._webSockets.delete(requestId);
    }
    webSocketError(requestId, errorMessage) {
      const ws2 = this._webSockets.get(requestId);
      if (ws2)
        ws2.error(errorMessage);
    }
    _fireInternalFrameNavigation(frame, event) {
      frame.emit(Frame.Events.InternalNavigation, event);
    }
  }
  exports.FrameManager = FrameManager;

  class Frame extends _instrumentation.SdkObject {
    constructor(page, id, parentFrame) {
      super(page, "frame");
      this._id = undefined;
      this._firedLifecycleEvents = new Set;
      this._firedNetworkIdleSelf = false;
      this._currentDocument = undefined;
      this._pendingDocument = undefined;
      this._page = undefined;
      this._parentFrame = undefined;
      this._url = "";
      this._contextData = new Map;
      this._childFrames = new Set;
      this._name = "";
      this._inflightRequests = new Set;
      this._networkIdleTimer = undefined;
      this._setContentCounter = 0;
      this._detachedScope = new _utils.LongStandingScope;
      this._raceAgainstEvaluationStallingEventsPromises = new Set;
      this._redirectedNavigations = new Map;
      this.selectors = undefined;
      this.attribution.frame = this;
      this._id = id;
      this._page = page;
      this._parentFrame = parentFrame;
      this._currentDocument = {
        documentId: undefined,
        request: undefined
      };
      this.selectors = new _frameSelectors.FrameSelectors(this);
      this._contextData.set("main", {
        contextPromise: new _manualPromise.ManualPromise,
        context: null
      });
      this._contextData.set("utility", {
        contextPromise: new _manualPromise.ManualPromise,
        context: null
      });
      this._setContext("main", null);
      this._setContext("utility", null);
      if (this._parentFrame)
        this._parentFrame._childFrames.add(this);
      this._firedLifecycleEvents.add("commit");
      if (id !== kDummyFrameId)
        this._startNetworkIdleTimer();
    }
    isDetached() {
      return this._detachedScope.isClosed();
    }
    _onLifecycleEvent(event) {
      if (this._firedLifecycleEvents.has(event))
        return;
      this._firedLifecycleEvents.add(event);
      this.emit(Frame.Events.AddLifecycle, event);
      if (this === this._page.mainFrame() && this._url !== "about:blank")
        _debugLogger.debugLogger.log("api", `  "${event}" event fired`);
      this._page.mainFrame()._recalculateNetworkIdle();
    }
    _onClearLifecycle() {
      for (const event of this._firedLifecycleEvents)
        this.emit(Frame.Events.RemoveLifecycle, event);
      this._firedLifecycleEvents.clear();
      this._inflightRequests = new Set(Array.from(this._inflightRequests).filter((request) => request === this._currentDocument.request));
      this._stopNetworkIdleTimer();
      if (this._inflightRequests.size === 0)
        this._startNetworkIdleTimer();
      this._page.mainFrame()._recalculateNetworkIdle(this);
      this._onLifecycleEvent("commit");
    }
    setPendingDocument(documentInfo) {
      this._pendingDocument = documentInfo;
      if (documentInfo)
        this._invalidateNonStallingEvaluations("Navigation interrupted the evaluation");
    }
    pendingDocument() {
      return this._pendingDocument;
    }
    _invalidateNonStallingEvaluations(message) {
      if (!this._raceAgainstEvaluationStallingEventsPromises.size)
        return;
      const error = new Error(message);
      for (const promise of this._raceAgainstEvaluationStallingEventsPromises)
        promise.reject(error);
    }
    async raceAgainstEvaluationStallingEvents(cb) {
      if (this._pendingDocument)
        throw new Error("Frame is currently attempting a navigation");
      if (this._page._frameManager._openedDialogs.size)
        throw new Error("Open JavaScript dialog prevents evaluation");
      const promise = new _manualPromise.ManualPromise;
      this._raceAgainstEvaluationStallingEventsPromises.add(promise);
      try {
        return await Promise.race([cb(), promise]);
      } finally {
        this._raceAgainstEvaluationStallingEventsPromises.delete(promise);
      }
    }
    nonStallingRawEvaluateInExistingMainContext(expression) {
      return this.raceAgainstEvaluationStallingEvents(() => {
        const context = this._existingMainContext();
        if (!context)
          throw new Error("Frame does not yet have a main execution context");
        return context.rawEvaluateJSON(expression);
      });
    }
    nonStallingEvaluateInExistingContext(expression, isFunction, world) {
      return this.raceAgainstEvaluationStallingEvents(() => {
        var _this$_contextData$ge;
        const context = (_this$_contextData$ge = this._contextData.get(world)) === null || _this$_contextData$ge === undefined ? undefined : _this$_contextData$ge.context;
        if (!context)
          throw new Error("Frame does not yet have the execution context");
        return context.evaluateExpression(expression, {
          isFunction
        });
      });
    }
    _recalculateNetworkIdle(frameThatAllowsRemovingNetworkIdle) {
      let isNetworkIdle = this._firedNetworkIdleSelf;
      for (const child of this._childFrames) {
        child._recalculateNetworkIdle(frameThatAllowsRemovingNetworkIdle);
        if (!child._firedLifecycleEvents.has("networkidle"))
          isNetworkIdle = false;
      }
      if (isNetworkIdle && !this._firedLifecycleEvents.has("networkidle")) {
        this._firedLifecycleEvents.add("networkidle");
        this.emit(Frame.Events.AddLifecycle, "networkidle");
        if (this === this._page.mainFrame() && this._url !== "about:blank")
          _debugLogger.debugLogger.log("api", `  "networkidle" event fired`);
      }
      if (frameThatAllowsRemovingNetworkIdle !== this && this._firedLifecycleEvents.has("networkidle") && !isNetworkIdle) {
        this._firedLifecycleEvents.delete("networkidle");
        this.emit(Frame.Events.RemoveLifecycle, "networkidle");
      }
    }
    async raceNavigationAction(progress2, options, action) {
      return _utils.LongStandingScope.raceMultiple([this._detachedScope, this._page.openScope], action().catch((e) => {
        if (e instanceof NavigationAbortedError && e.documentId) {
          const data = this._redirectedNavigations.get(e.documentId);
          if (data) {
            progress2.log(`waiting for redirected navigation to "${data.url}"`);
            return data.gotoPromise;
          }
        }
        throw e;
      }));
    }
    redirectNavigation(url, documentId, referer) {
      const controller = new _progress.ProgressController((0, _instrumentation.serverSideCallMetadata)(), this);
      const data = {
        url,
        gotoPromise: controller.run((progress2) => this._gotoAction(progress2, url, {
          referer
        }), 0)
      };
      this._redirectedNavigations.set(documentId, data);
      data.gotoPromise.finally(() => this._redirectedNavigations.delete(documentId));
    }
    async goto(metadata, url, options = {}) {
      const constructedNavigationURL = (0, _utils.constructURLBasedOnBaseURL)(this._page._browserContext._options.baseURL, url);
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run((progress2) => this._goto(progress2, constructedNavigationURL, options), this._page._timeoutSettings.navigationTimeout(options));
    }
    async _goto(progress2, url, options) {
      return this.raceNavigationAction(progress2, options, async () => this._gotoAction(progress2, url, options));
    }
    async _gotoAction(progress2, url, options) {
      const waitUntil = verifyLifecycle("waitUntil", options.waitUntil === undefined ? "load" : options.waitUntil);
      progress2.log(`navigating to "${url}", waiting until "${waitUntil}"`);
      const headers = this._page.extraHTTPHeaders() || [];
      const refererHeader = headers.find((h) => h.name.toLowerCase() === "referer");
      let referer = refererHeader ? refererHeader.value : undefined;
      if (options.referer !== undefined) {
        if (referer !== undefined && referer !== options.referer)
          throw new Error('"referer" is already specified as extra HTTP header');
        referer = options.referer;
      }
      url = _helper.helper.completeUserURL(url);
      const sameDocument = _helper.helper.waitForEvent(progress2, this, Frame.Events.InternalNavigation, (e) => !e.newDocument);
      const navigateResult = await this._page._delegate.navigateFrame(this, url, referer);
      let event;
      if (navigateResult.newDocumentId) {
        sameDocument.dispose();
        event = await _helper.helper.waitForEvent(progress2, this, Frame.Events.InternalNavigation, (event2) => {
          return event2.newDocument && (event2.newDocument.documentId === navigateResult.newDocumentId || !event2.error);
        }).promise;
        if (event.newDocument.documentId !== navigateResult.newDocumentId) {
          throw new NavigationAbortedError(navigateResult.newDocumentId, `Navigation to "${url}" is interrupted by another navigation to "${event.url}"`);
        }
        if (event.error)
          throw event.error;
      } else {
        event = await sameDocument.promise;
      }
      if (!this._firedLifecycleEvents.has(waitUntil))
        await _helper.helper.waitForEvent(progress2, this, Frame.Events.AddLifecycle, (e) => e === waitUntil).promise;
      const request = event.newDocument ? event.newDocument.request : undefined;
      const response = request ? request._finalRequest().response() : null;
      return response;
    }
    async _waitForNavigation(progress2, requiresNewDocument, options) {
      const waitUntil = verifyLifecycle("waitUntil", options.waitUntil === undefined ? "load" : options.waitUntil);
      progress2.log(`waiting for navigation until "${waitUntil}"`);
      const navigationEvent = await _helper.helper.waitForEvent(progress2, this, Frame.Events.InternalNavigation, (event) => {
        if (event.error)
          return true;
        if (requiresNewDocument && !event.newDocument)
          return false;
        progress2.log(`  navigated to "${this._url}"`);
        return true;
      }).promise;
      if (navigationEvent.error)
        throw navigationEvent.error;
      if (!this._firedLifecycleEvents.has(waitUntil))
        await _helper.helper.waitForEvent(progress2, this, Frame.Events.AddLifecycle, (e) => e === waitUntil).promise;
      const request = navigationEvent.newDocument ? navigationEvent.newDocument.request : undefined;
      return request ? request._finalRequest().response() : null;
    }
    async _waitForLoadState(progress2, state) {
      const waitUntil = verifyLifecycle("state", state);
      if (!this._firedLifecycleEvents.has(waitUntil))
        await _helper.helper.waitForEvent(progress2, this, Frame.Events.AddLifecycle, (e) => e === waitUntil).promise;
    }
    async frameElement() {
      return this._page._delegate.getFrameElement(this);
    }
    _context(world) {
      return this._contextData.get(world).contextPromise.then((contextOrDestroyedReason) => {
        if (contextOrDestroyedReason instanceof js.ExecutionContext)
          return contextOrDestroyedReason;
        throw new Error(contextOrDestroyedReason.destroyedReason);
      });
    }
    _mainContext() {
      return this._context("main");
    }
    _existingMainContext() {
      var _this$_contextData$ge2;
      return ((_this$_contextData$ge2 = this._contextData.get("main")) === null || _this$_contextData$ge2 === undefined ? undefined : _this$_contextData$ge2.context) || null;
    }
    _utilityContext() {
      return this._context("utility");
    }
    async evaluateExpression(expression, options = {}, arg) {
      var _options$world;
      const context = await this._context((_options$world = options.world) !== null && _options$world !== undefined ? _options$world : "main");
      const value = await context.evaluateExpression(expression, options, arg);
      return value;
    }
    async evaluateExpressionHandle(expression, options = {}, arg) {
      var _options$world2;
      const context = await this._context((_options$world2 = options.world) !== null && _options$world2 !== undefined ? _options$world2 : "main");
      const value = await context.evaluateExpressionHandle(expression, options, arg);
      return value;
    }
    async querySelector(selector, options) {
      _debugLogger.debugLogger.log("api", `    finding element using the selector "${selector}"`);
      return this.selectors.query(selector, options);
    }
    async waitForSelector(metadata, selector, options, scope) {
      const controller = new _progress.ProgressController(metadata, this);
      if (options.visibility)
        throw new Error("options.visibility is not supported, did you mean options.state?");
      if (options.waitFor && options.waitFor !== "visible")
        throw new Error("options.waitFor is not supported, did you mean options.state?");
      const {
        state = "visible"
      } = options;
      if (!["attached", "detached", "visible", "hidden"].includes(state))
        throw new Error(`state: expected one of (attached|detached|visible|hidden)`);
      return controller.run(async (progress2) => {
        progress2.log(`waiting for ${this._asLocator(selector)}${state === "attached" ? "" : " to be " + state}`);
        const promise = this.retryWithProgressAndTimeouts(progress2, [0, 20, 50, 100, 100, 500], async (continuePolling) => {
          const resolved = await this.selectors.resolveInjectedForSelector(selector, options, scope);
          progress2.throwIfAborted();
          if (!resolved) {
            if (state === "hidden" || state === "detached")
              return null;
            return continuePolling;
          }
          const result = await resolved.injected.evaluateHandle((injected, {
            info,
            root
          }) => {
            const elements = injected.querySelectorAll(info.parsed, root || document);
            const element2 = elements[0];
            const visible2 = element2 ? injected.isVisible(element2) : false;
            let log2 = "";
            if (elements.length > 1) {
              if (info.strict)
                throw injected.strictModeViolationError(info.parsed, elements);
              log2 = `  locator resolved to ${elements.length} elements. Proceeding with the first one: ${injected.previewNode(elements[0])}`;
            } else if (element2) {
              log2 = `  locator resolved to ${visible2 ? "visible" : "hidden"} ${injected.previewNode(element2)}`;
            }
            return {
              log: log2,
              element: element2,
              visible: visible2,
              attached: !!element2
            };
          }, {
            info: resolved.info,
            root: resolved.frame === this ? scope : undefined
          });
          const {
            log,
            visible,
            attached
          } = await result.evaluate((r) => ({
            log: r.log,
            visible: r.visible,
            attached: r.attached
          }));
          if (log)
            progress2.log(log);
          const success = {
            attached,
            detached: !attached,
            visible,
            hidden: !visible
          }[state];
          if (!success) {
            result.dispose();
            return continuePolling;
          }
          if (options.omitReturnValue) {
            result.dispose();
            return null;
          }
          const element = state === "attached" || state === "visible" ? await result.evaluateHandle((r) => r.element) : null;
          result.dispose();
          if (!element)
            return null;
          if (options.__testHookBeforeAdoptNode)
            await options.__testHookBeforeAdoptNode();
          try {
            return await element._adoptTo(await resolved.frame._mainContext());
          } catch (e) {
            return continuePolling;
          }
        });
        return scope ? scope._context._raceAgainstContextDestroyed(promise) : promise;
      }, this._page._timeoutSettings.timeout(options));
    }
    async dispatchEvent(metadata, selector, type, eventInit = {}, options = {}, scope) {
      await this._callOnElementOnceMatches(metadata, selector, (injectedScript, element, data) => {
        injectedScript.dispatchEvent(element, data.type, data.eventInit);
      }, {
        type,
        eventInit
      }, {
        mainWorld: true,
        ...options
      }, scope);
    }
    async evalOnSelector(selector, strict, expression, isFunction, arg, scope) {
      const handle = await this.selectors.query(selector, {
        strict
      }, scope);
      if (!handle)
        throw new Error(`Failed to find element matching selector "${selector}"`);
      const result = await handle.evaluateExpression(expression, {
        isFunction
      }, arg);
      handle.dispose();
      return result;
    }
    async evalOnSelectorAll(selector, expression, isFunction, arg, scope) {
      const arrayHandle = await this.selectors.queryArrayInMainWorld(selector, scope);
      const result = await arrayHandle.evaluateExpression(expression, {
        isFunction
      }, arg);
      arrayHandle.dispose();
      return result;
    }
    async maskSelectors(selectors, color) {
      const context = await this._utilityContext();
      const injectedScript = await context.injectedScript();
      await injectedScript.evaluate((injected, {
        parsed,
        color: color2
      }) => {
        injected.maskSelectors(parsed, color2);
      }, {
        parsed: selectors,
        color
      });
    }
    async querySelectorAll(selector) {
      return this.selectors.queryAll(selector);
    }
    async queryCount(selector) {
      return await this.selectors.queryCount(selector);
    }
    async content() {
      try {
        const context = await this._utilityContext();
        return await context.evaluate(() => {
          let retVal = "";
          if (document.doctype)
            retVal = new XMLSerializer().serializeToString(document.doctype);
          if (document.documentElement)
            retVal += document.documentElement.outerHTML;
          return retVal;
        });
      } catch (e) {
        if (js.isJavaScriptErrorInEvaluate(e) || (0, _protocolError.isSessionClosedError)(e))
          throw e;
        throw new Error(`Unable to retrieve content because the page is navigating and changing the content.`);
      }
    }
    async setContent(metadata, html, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        await this.raceNavigationAction(progress2, options, async () => {
          const waitUntil = options.waitUntil === undefined ? "load" : options.waitUntil;
          progress2.log(`setting frame content, waiting until "${waitUntil}"`);
          const tag = `--playwright--set--content--${this._id}--${++this._setContentCounter}--`;
          const context = await this._utilityContext();
          const lifecyclePromise = new Promise((resolve, reject) => {
            this._page._frameManager._consoleMessageTags.set(tag, () => {
              this._onClearLifecycle();
              this._waitForLoadState(progress2, waitUntil).then(resolve).catch(reject);
            });
          });
          const contentPromise = context.evaluate(({
            html: html2,
            tag: tag2
          }) => {
            document.open();
            console.debug(tag2);
            document.write(html2);
            document.close();
          }, {
            html,
            tag
          });
          await Promise.all([contentPromise, lifecyclePromise]);
          return null;
        });
      }, this._page._timeoutSettings.navigationTimeout(options));
    }
    name() {
      return this._name || "";
    }
    url() {
      return this._url;
    }
    parentFrame() {
      return this._parentFrame;
    }
    childFrames() {
      return Array.from(this._childFrames);
    }
    async addScriptTag(params) {
      const {
        url = null,
        content = null,
        type = ""
      } = params;
      if (!url && !content)
        throw new Error("Provide an object with a `url`, `path` or `content` property");
      const context = await this._mainContext();
      return this._raceWithCSPError(async () => {
        if (url !== null)
          return (await context.evaluateHandle(addScriptUrl, {
            url,
            type
          })).asElement();
        const result = (await context.evaluateHandle(addScriptContent, {
          content,
          type
        })).asElement();
        if (this._page._delegate.cspErrorsAsynchronousForInlineScipts)
          await context.evaluate(() => true);
        return result;
      });
      async function addScriptUrl(params2) {
        const script = document.createElement("script");
        script.src = params2.url;
        if (params2.type)
          script.type = params2.type;
        const promise = new Promise((res, rej) => {
          script.onload = res;
          script.onerror = (e) => rej(typeof e === "string" ? new Error(e) : new Error(`Failed to load script at ${script.src}`));
        });
        document.head.appendChild(script);
        await promise;
        return script;
      }
      function addScriptContent(params2) {
        const script = document.createElement("script");
        script.type = params2.type || "text/javascript";
        script.text = params2.content;
        let error = null;
        script.onerror = (e) => error = e;
        document.head.appendChild(script);
        if (error)
          throw error;
        return script;
      }
    }
    async addStyleTag(params) {
      const {
        url = null,
        content = null
      } = params;
      if (!url && !content)
        throw new Error("Provide an object with a `url`, `path` or `content` property");
      const context = await this._mainContext();
      return this._raceWithCSPError(async () => {
        if (url !== null)
          return (await context.evaluateHandle(addStyleUrl, url)).asElement();
        return (await context.evaluateHandle(addStyleContent, content)).asElement();
      });
      async function addStyleUrl(url2) {
        const link = document.createElement("link");
        link.rel = "stylesheet";
        link.href = url2;
        const promise = new Promise((res, rej) => {
          link.onload = res;
          link.onerror = rej;
        });
        document.head.appendChild(link);
        await promise;
        return link;
      }
      async function addStyleContent(content2) {
        const style = document.createElement("style");
        style.type = "text/css";
        style.appendChild(document.createTextNode(content2));
        const promise = new Promise((res, rej) => {
          style.onload = res;
          style.onerror = rej;
        });
        document.head.appendChild(style);
        await promise;
        return style;
      }
    }
    async _raceWithCSPError(func) {
      const listeners = [];
      let result;
      let error;
      let cspMessage;
      const actionPromise = func().then((r) => result = r).catch((e) => error = e);
      const errorPromise = new Promise((resolve) => {
        listeners.push(_eventsHelper.eventsHelper.addEventListener(this._page._browserContext, _browserContext.BrowserContext.Events.Console, (message) => {
          if (message.page() !== this._page || message.type() !== "error")
            return;
          if (message.text().includes("Content-Security-Policy") || message.text().includes("Content Security Policy")) {
            cspMessage = message;
            resolve();
          }
        }));
      });
      await Promise.race([actionPromise, errorPromise]);
      _eventsHelper.eventsHelper.removeEventListeners(listeners);
      if (cspMessage)
        throw new Error(cspMessage.text());
      if (error)
        throw error;
      return result;
    }
    async retryWithProgressAndTimeouts(progress2, timeouts, action) {
      const continuePolling = Symbol("continuePolling");
      timeouts = [0, ...timeouts];
      let timeoutIndex = 0;
      while (progress2.isRunning()) {
        const timeout = timeouts[Math.min(timeoutIndex++, timeouts.length - 1)];
        if (timeout) {
          const actionPromise = new Promise((f) => setTimeout(f, timeout));
          await _utils.LongStandingScope.raceMultiple([this._page.openScope, this._detachedScope], actionPromise);
        }
        progress2.throwIfAborted();
        try {
          const result = await action(continuePolling);
          if (result === continuePolling)
            continue;
          return result;
        } catch (e) {
          if (this._isErrorThatCannotBeRetried(e))
            throw e;
          continue;
        }
      }
      progress2.throwIfAborted();
      return;
    }
    _isErrorThatCannotBeRetried(e) {
      if (js.isJavaScriptErrorInEvaluate(e) || (0, _protocolError.isSessionClosedError)(e))
        return true;
      if (dom.isNonRecoverableDOMError(e) || (0, _selectorParser.isInvalidSelectorError)(e))
        return true;
      if (this.isDetached())
        return true;
      return false;
    }
    async _retryWithProgressIfNotConnected(progress2, selector, strict, performLocatorHandlersCheckpoint, action) {
      progress2.log(`waiting for ${this._asLocator(selector)}`);
      return this.retryWithProgressAndTimeouts(progress2, [0, 20, 50, 100, 100, 500], async (continuePolling) => {
        if (performLocatorHandlersCheckpoint)
          await this._page.performLocatorHandlersCheckpoint(progress2);
        const resolved = await this.selectors.resolveInjectedForSelector(selector, {
          strict
        });
        progress2.throwIfAborted();
        if (!resolved)
          return continuePolling;
        const result = await resolved.injected.evaluateHandle((injected, {
          info
        }) => {
          const elements = injected.querySelectorAll(info.parsed, document);
          const element2 = elements[0];
          let log2 = "";
          if (elements.length > 1) {
            if (info.strict)
              throw injected.strictModeViolationError(info.parsed, elements);
            log2 = `  locator resolved to ${elements.length} elements. Proceeding with the first one: ${injected.previewNode(elements[0])}`;
          } else if (element2) {
            log2 = `  locator resolved to ${injected.previewNode(element2)}`;
          }
          return {
            log: log2,
            success: !!element2,
            element: element2
          };
        }, {
          info: resolved.info
        });
        const {
          log,
          success
        } = await result.evaluate((r) => ({
          log: r.log,
          success: r.success
        }));
        if (log)
          progress2.log(log);
        if (!success) {
          result.dispose();
          return continuePolling;
        }
        const element = await result.evaluateHandle((r) => r.element);
        result.dispose();
        try {
          const result2 = await action(element);
          if (result2 === "error:notconnected") {
            progress2.log("element was detached from the DOM, retrying");
            return continuePolling;
          }
          return result2;
        } finally {
          element === null || element === undefined || element.dispose();
        }
      });
    }
    async rafrafTimeoutScreenshotElementWithProgress(progress2, selector, timeout, options) {
      return await this._retryWithProgressIfNotConnected(progress2, selector, true, true, async (handle) => {
        await handle._frame.rafrafTimeout(timeout);
        return await this._page._screenshotter.screenshotElement(progress2, handle, options);
      });
    }
    async click(metadata, selector, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._click(progress2, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async dblclick(metadata, selector, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._dblclick(progress2, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async dragAndDrop(metadata, source, target, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      await controller.run(async (progress2) => {
        dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, source, options.strict, !options.force, async (handle) => {
          return handle._retryPointerAction(progress2, "move and down", false, async (point) => {
            await this._page.mouse.move(point.x, point.y);
            await this._page.mouse.down();
          }, {
            ...options,
            position: options.sourcePosition,
            timeout: progress2.timeUntilDeadline()
          });
        }));
        dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, target, options.strict, false, async (handle) => {
          return handle._retryPointerAction(progress2, "move and up", false, async (point) => {
            await this._page.mouse.move(point.x, point.y);
            await this._page.mouse.up();
          }, {
            ...options,
            position: options.targetPosition,
            timeout: progress2.timeUntilDeadline()
          });
        }));
      }, this._page._timeoutSettings.timeout(options));
    }
    async tap(metadata, selector, options) {
      if (!this._page._browserContext._options.hasTouch)
        throw new Error("The page does not support tap. Use hasTouch context option to enable touch support.");
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._tap(progress2, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async fill(metadata, selector, value, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._fill(progress2, value, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async focus(metadata, selector, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      await controller.run(async (progress2) => {
        dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, true, (handle) => handle._focus(progress2)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async blur(metadata, selector, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      await controller.run(async (progress2) => {
        dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, true, (handle) => handle._blur(progress2)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async textContent(metadata, selector, options = {}, scope) {
      return this._callOnElementOnceMatches(metadata, selector, (injected, element) => element.textContent, undefined, options, scope);
    }
    async innerText(metadata, selector, options = {}, scope) {
      return this._callOnElementOnceMatches(metadata, selector, (injectedScript, element) => {
        if (element.namespaceURI !== "http://www.w3.org/1999/xhtml")
          throw injectedScript.createStacklessError("Node is not an HTMLElement");
        return element.innerText;
      }, undefined, options, scope);
    }
    async innerHTML(metadata, selector, options = {}, scope) {
      return this._callOnElementOnceMatches(metadata, selector, (injected, element) => element.innerHTML, undefined, options, scope);
    }
    async getAttribute(metadata, selector, name, options = {}, scope) {
      return this._callOnElementOnceMatches(metadata, selector, (injected, element, data) => element.getAttribute(data.name), {
        name
      }, options, scope);
    }
    async inputValue(metadata, selector, options = {}, scope) {
      return this._callOnElementOnceMatches(metadata, selector, (injectedScript, node) => {
        const element = injectedScript.retarget(node, "follow-label");
        if (!element || element.nodeName !== "INPUT" && element.nodeName !== "TEXTAREA" && element.nodeName !== "SELECT")
          throw injectedScript.createStacklessError("Node is not an <input>, <textarea> or <select> element");
        return element.value;
      }, undefined, options, scope);
    }
    async highlight(selector) {
      const resolved = await this.selectors.resolveInjectedForSelector(selector);
      if (!resolved)
        return;
      return await resolved.injected.evaluate((injected, {
        info
      }) => {
        return injected.highlight(info.parsed);
      }, {
        info: resolved.info
      });
    }
    async hideHighlight() {
      return this.raceAgainstEvaluationStallingEvents(async () => {
        const context = await this._utilityContext();
        const injectedScript = await context.injectedScript();
        return await injectedScript.evaluate((injected) => {
          return injected.hideHighlight();
        });
      });
    }
    async _elementState(metadata, selector, state, options = {}, scope) {
      const result = await this._callOnElementOnceMatches(metadata, selector, (injected, element, data) => {
        return injected.elementState(element, data.state);
      }, {
        state
      }, options, scope);
      return dom.throwRetargetableDOMError(result);
    }
    async isVisible(metadata, selector, options = {}, scope) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        progress2.log(`  checking visibility of ${this._asLocator(selector)}`);
        return await this.isVisibleInternal(selector, options, scope);
      }, this._page._timeoutSettings.timeout({}));
    }
    async isVisibleInternal(selector, options = {}, scope) {
      try {
        const resolved = await this.selectors.resolveInjectedForSelector(selector, options, scope);
        if (!resolved)
          return false;
        return await resolved.injected.evaluate((injected, {
          info,
          root
        }) => {
          const element = injected.querySelector(info.parsed, root || document, info.strict);
          const state = element ? injected.elementState(element, "visible") : false;
          return state === "error:notconnected" ? false : state;
        }, {
          info: resolved.info,
          root: resolved.frame === this ? scope : undefined
        });
      } catch (e) {
        if (js.isJavaScriptErrorInEvaluate(e) || (0, _selectorParser.isInvalidSelectorError)(e) || (0, _protocolError.isSessionClosedError)(e))
          throw e;
        return false;
      }
    }
    async isHidden(metadata, selector, options = {}, scope) {
      return !await this.isVisible(metadata, selector, options, scope);
    }
    async isDisabled(metadata, selector, options = {}, scope) {
      return this._elementState(metadata, selector, "disabled", options, scope);
    }
    async isEnabled(metadata, selector, options = {}, scope) {
      return this._elementState(metadata, selector, "enabled", options, scope);
    }
    async isEditable(metadata, selector, options = {}, scope) {
      return this._elementState(metadata, selector, "editable", options, scope);
    }
    async isChecked(metadata, selector, options = {}, scope) {
      return this._elementState(metadata, selector, "checked", options, scope);
    }
    async hover(metadata, selector, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._hover(progress2, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async selectOption(metadata, selector, elements, values, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._selectOption(progress2, elements, values, options));
      }, this._page._timeoutSettings.timeout(options));
    }
    async setInputFiles(metadata, selector, params) {
      const inputFileItems = await (0, _fileUploadUtils.prepareFilesForUpload)(this, params);
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, params.strict, true, (handle) => handle._setInputFiles(progress2, inputFileItems, params)));
      }, this._page._timeoutSettings.timeout(params));
    }
    async type(metadata, selector, text, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, true, (handle) => handle._type(progress2, text, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async press(metadata, selector, key, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, true, (handle) => handle._press(progress2, key, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async check(metadata, selector, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._setChecked(progress2, true, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async uncheck(metadata, selector, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._setChecked(progress2, false, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async waitForTimeout(metadata, timeout) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async () => {
        await new Promise((resolve) => setTimeout(resolve, timeout));
      });
    }
    async expect(metadata, selector, options) {
      const result = await this._expectImpl(metadata, selector, options);
      if (result.matches === options.isNot)
        metadata.error = {
          error: {
            name: "Expect",
            message: "Expect failed"
          }
        };
      return result;
    }
    async _expectImpl(metadata, selector, options) {
      let timeout = this._page._timeoutSettings.timeout(options);
      const start = timeout > 0 ? (0, _utils.monotonicTime)() : 0;
      const lastIntermediateResult = {
        isSet: false
      };
      const resultOneShot = await this._expectInternal(metadata, selector, options, true, timeout, lastIntermediateResult);
      if (resultOneShot.matches !== options.isNot)
        return resultOneShot;
      if (timeout > 0) {
        const elapsed = (0, _utils.monotonicTime)() - start;
        timeout -= elapsed;
      }
      if (timeout < 0)
        return {
          matches: options.isNot,
          log: metadata.log,
          timedOut: true,
          received: lastIntermediateResult.received
        };
      return await this._expectInternal(metadata, selector, options, false, timeout, lastIntermediateResult);
    }
    async _expectInternal(metadata, selector, options, oneShot, timeout, lastIntermediateResult) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        if (oneShot) {
          progress2.log(`${metadata.apiName}${timeout ? ` with timeout ${timeout}ms` : ""}`);
          progress2.log(`waiting for ${this._asLocator(selector)}`);
        }
        return await this.retryWithProgressAndTimeouts(progress2, [100, 250, 500, 1000], async (continuePolling) => {
          var _info$world;
          await this._page.performLocatorHandlersCheckpoint(progress2);
          const selectorInFrame = await this.selectors.resolveFrameForSelector(selector, {
            strict: true
          });
          progress2.throwIfAborted();
          const {
            frame,
            info
          } = selectorInFrame || {
            frame: this,
            info: undefined
          };
          const world = options.expression === "to.have.property" ? "main" : (_info$world = info === null || info === undefined ? undefined : info.world) !== null && _info$world !== undefined ? _info$world : "utility";
          const context = await frame._context(world);
          const injected = await context.injectedScript();
          progress2.throwIfAborted();
          const {
            log,
            matches,
            received,
            missingRecevied
          } = await injected.evaluate(async (injected2, {
            info: info2,
            options: options2,
            callId
          }) => {
            const elements = info2 ? injected2.querySelectorAll(info2.parsed, document) : [];
            const isArray = options2.expression === "to.have.count" || options2.expression.endsWith(".array");
            let log2 = "";
            if (isArray)
              log2 = `  locator resolved to ${elements.length} element${elements.length === 1 ? "" : "s"}`;
            else if (elements.length > 1)
              throw injected2.strictModeViolationError(info2.parsed, elements);
            else if (elements.length)
              log2 = `  locator resolved to ${injected2.previewNode(elements[0])}`;
            if (callId)
              injected2.markTargetElements(new Set(elements), callId);
            return {
              log: log2,
              ...await injected2.expect(elements[0], options2, elements)
            };
          }, {
            info,
            options,
            callId: metadata.id
          });
          if (log)
            progress2.log(log);
          if (matches === options.isNot && !missingRecevied) {
            lastIntermediateResult.received = received;
            lastIntermediateResult.isSet = true;
            if (!Array.isArray(received))
              progress2.log(`  unexpected value "${renderUnexpectedValue(options.expression, received)}"`);
          }
          if (!oneShot && matches === options.isNot) {
            return continuePolling;
          }
          return {
            matches,
            received
          };
        });
      }, oneShot ? 0 : timeout).catch((e) => {
        if (js.isJavaScriptErrorInEvaluate(e) || (0, _selectorParser.isInvalidSelectorError)(e))
          throw e;
        const result = {
          matches: options.isNot,
          log: metadata.log
        };
        if (lastIntermediateResult.isSet)
          result.received = lastIntermediateResult.received;
        if (e instanceof _errors.TimeoutError)
          result.timedOut = true;
        return result;
      });
    }
    async _waitForFunctionExpression(metadata, expression, isFunction, arg, options, world = "main") {
      const controller = new _progress.ProgressController(metadata, this);
      if (typeof options.pollingInterval === "number")
        (0, _utils.assert)(options.pollingInterval > 0, "Cannot poll with non-positive interval: " + options.pollingInterval);
      expression = js.normalizeEvaluationExpression(expression, isFunction);
      return controller.run(async (progress2) => {
        return this.retryWithProgressAndTimeouts(progress2, [100], async () => {
          const context = world === "main" ? await this._mainContext() : await this._utilityContext();
          const injectedScript = await context.injectedScript();
          const handle = await injectedScript.evaluateHandle((injected, {
            expression: expression2,
            isFunction: isFunction2,
            polling,
            arg: arg2
          }) => {
            const predicate = () => {
              let result2 = globalThis.eval(expression2);
              if (isFunction2 === true) {
                result2 = result2(arg2);
              } else if (isFunction2 === false) {
                result2 = result2;
              } else {
                if (typeof result2 === "function")
                  result2 = result2(arg2);
              }
              return result2;
            };
            let fulfill;
            let reject;
            let aborted = false;
            const result = new Promise((f, r) => {
              fulfill = f;
              reject = r;
            });
            const next = () => {
              if (aborted)
                return;
              try {
                const success = predicate();
                if (success) {
                  fulfill(success);
                  return;
                }
                if (typeof polling !== "number")
                  requestAnimationFrame(next);
                else
                  setTimeout(next, polling);
              } catch (e) {
                reject(e);
              }
            };
            next();
            return {
              result,
              abort: () => aborted = true
            };
          }, {
            expression,
            isFunction,
            polling: options.pollingInterval,
            arg
          });
          progress2.cleanupWhenAborted(() => handle.evaluate((h) => h.abort()).catch(() => {
          }));
          return handle.evaluateHandle((h) => h.result);
        });
      }, this._page._timeoutSettings.timeout(options));
    }
    async waitForFunctionValueInUtility(progress2, pageFunction) {
      const expression = `() => {
      const result = (${pageFunction})();
      if (!result)
        return result;
      return JSON.stringify(result);
    }`;
      const handle = await this._waitForFunctionExpression((0, _instrumentation.serverSideCallMetadata)(), expression, true, undefined, {
        timeout: progress2.timeUntilDeadline()
      }, "utility");
      return JSON.parse(handle.rawValue());
    }
    async title() {
      const context = await this._utilityContext();
      return context.evaluate(() => document.title);
    }
    async rafrafTimeout(timeout) {
      if (timeout === 0)
        return;
      const context = await this._utilityContext();
      await Promise.all([
        context.evaluate(() => new Promise((x) => {
          requestAnimationFrame(() => {
            requestAnimationFrame(x);
          });
        })),
        new Promise((fulfill) => setTimeout(fulfill, timeout))
      ]);
    }
    _onDetached() {
      this._stopNetworkIdleTimer();
      this._detachedScope.close(new Error("Frame was detached"));
      for (const data of this._contextData.values()) {
        if (data.context)
          data.context.contextDestroyed("Frame was detached");
        data.contextPromise.resolve({
          destroyedReason: "Frame was detached"
        });
      }
      if (this._parentFrame)
        this._parentFrame._childFrames.delete(this);
      this._parentFrame = null;
    }
    async _callOnElementOnceMatches(metadata, selector, body, taskData, options = {}, scope) {
      const callbackText = body.toString();
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        progress2.log(`waiting for ${this._asLocator(selector)}`);
        const promise = this.retryWithProgressAndTimeouts(progress2, [0, 20, 50, 100, 100, 500], async (continuePolling) => {
          const resolved = await this.selectors.resolveInjectedForSelector(selector, options, scope);
          progress2.throwIfAborted();
          if (!resolved)
            return continuePolling;
          const {
            log,
            success,
            value
          } = await resolved.injected.evaluate((injected, {
            info,
            callbackText: callbackText2,
            taskData: taskData2,
            callId,
            root
          }) => {
            const callback = injected.eval(callbackText2);
            const element = injected.querySelector(info.parsed, root || document, info.strict);
            if (!element)
              return {
                success: false
              };
            const log2 = `  locator resolved to ${injected.previewNode(element)}`;
            if (callId)
              injected.markTargetElements(new Set([element]), callId);
            return {
              log: log2,
              success: true,
              value: callback(injected, element, taskData2)
            };
          }, {
            info: resolved.info,
            callbackText,
            taskData,
            callId: progress2.metadata.id,
            root: resolved.frame === this ? scope : undefined
          });
          if (log)
            progress2.log(log);
          if (!success)
            return continuePolling;
          return value;
        });
        return scope ? scope._context._raceAgainstContextDestroyed(promise) : promise;
      }, this._page._timeoutSettings.timeout(options));
    }
    _setContext(world, context) {
      const data = this._contextData.get(world);
      data.context = context;
      if (context)
        data.contextPromise.resolve(context);
      else
        data.contextPromise = new _manualPromise.ManualPromise;
    }
    _contextCreated(world, context) {
      const data = this._contextData.get(world);
      if (data.context) {
        data.context.contextDestroyed("Execution context was destroyed, most likely because of a navigation");
        this._setContext(world, null);
      }
      this._setContext(world, context);
    }
    _contextDestroyed(context) {
      if (this._detachedScope.isClosed())
        return;
      context.contextDestroyed("Execution context was destroyed, most likely because of a navigation");
      for (const [world, data] of this._contextData) {
        if (data.context === context)
          this._setContext(world, null);
      }
    }
    _startNetworkIdleTimer() {
      (0, _utils.assert)(!this._networkIdleTimer);
      if (this._firedLifecycleEvents.has("networkidle") || this._detachedScope.isClosed())
        return;
      this._networkIdleTimer = setTimeout(() => {
        this._firedNetworkIdleSelf = true;
        this._page.mainFrame()._recalculateNetworkIdle();
      }, 500);
    }
    _stopNetworkIdleTimer() {
      if (this._networkIdleTimer)
        clearTimeout(this._networkIdleTimer);
      this._networkIdleTimer = undefined;
      this._firedNetworkIdleSelf = false;
    }
    async extendInjectedScript(source, arg) {
      const context = await this._context("main");
      const injectedScriptHandle = await context.injectedScript();
      return injectedScriptHandle.evaluateHandle((injectedScript, {
        source: source2,
        arg: arg2
      }) => {
        return injectedScript.extend(source2, arg2);
      }, {
        source,
        arg
      });
    }
    async resetStorageForCurrentOriginBestEffort(newStorage) {
      const context = await this._utilityContext();
      await context.evaluate(async ({
        ls
      }) => {
        sessionStorage.clear();
        localStorage.clear();
        for (const entry of ls || [])
          localStorage[entry.name] = entry.value;
        const registrations = navigator.serviceWorker ? await navigator.serviceWorker.getRegistrations() : [];
        await Promise.all(registrations.map(async (r) => {
          if (!r.installing && !r.waiting && !r.active)
            r.unregister().catch(() => {
            });
          else
            await r.unregister().catch(() => {
            });
        }));
        for (const db of await ((_indexedDB$databases = (_indexedDB = indexedDB).databases) === null || _indexedDB$databases === undefined ? undefined : _indexedDB$databases.call(_indexedDB)) || []) {
          var _indexedDB$databases, _indexedDB;
          if (db.name)
            indexedDB.deleteDatabase(db.name);
        }
      }, {
        ls: newStorage === null || newStorage === undefined ? undefined : newStorage.localStorage
      }).catch(() => {
      });
    }
    _asLocator(selector) {
      return (0, _locatorGenerators.asLocator)(this._page.attribution.playwright.options.sdkLanguage, selector);
    }
  }
  exports.Frame = Frame;
  Frame.Events = {
    InternalNavigation: "internalnavigation",
    AddLifecycle: "addlifecycle",
    RemoveLifecycle: "removelifecycle"
  };

  class SignalBarrier {
    constructor(progress2) {
      this._progress = undefined;
      this._protectCount = 0;
      this._promise = new _manualPromise.ManualPromise;
      this._progress = progress2;
      this.retain();
    }
    waitFor() {
      this.release();
      return this._promise;
    }
    async addFrameNavigation(frame) {
      if (frame.parentFrame())
        return;
      this.retain();
      const waiter = _helper.helper.waitForEvent(null, frame, Frame.Events.InternalNavigation, (e) => {
        if (!e.isPublic)
          return false;
        if (!e.error && this._progress)
          this._progress.log(`  navigated to "${frame._url}"`);
        return true;
      });
      await _utils.LongStandingScope.raceMultiple([frame._page.openScope, frame._detachedScope], waiter.promise).catch(() => {
      });
      waiter.dispose();
      this.release();
    }
    retain() {
      ++this._protectCount;
    }
    release() {
      --this._protectCount;
      if (!this._protectCount)
        this._promise.resolve();
    }
  }
});

// node_modules/playwright-core/lib/server/usKeyboardLayout.js
var require_usKeyboardLayout = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.keypadLocation = exports.USKeyboardLayout = undefined;
  var keypadLocation = exports.keypadLocation = 3;
  var USKeyboardLayout = exports.USKeyboardLayout = {
    Escape: {
      keyCode: 27,
      key: "Escape"
    },
    F1: {
      keyCode: 112,
      key: "F1"
    },
    F2: {
      keyCode: 113,
      key: "F2"
    },
    F3: {
      keyCode: 114,
      key: "F3"
    },
    F4: {
      keyCode: 115,
      key: "F4"
    },
    F5: {
      keyCode: 116,
      key: "F5"
    },
    F6: {
      keyCode: 117,
      key: "F6"
    },
    F7: {
      keyCode: 118,
      key: "F7"
    },
    F8: {
      keyCode: 119,
      key: "F8"
    },
    F9: {
      keyCode: 120,
      key: "F9"
    },
    F10: {
      keyCode: 121,
      key: "F10"
    },
    F11: {
      keyCode: 122,
      key: "F11"
    },
    F12: {
      keyCode: 123,
      key: "F12"
    },
    Backquote: {
      keyCode: 192,
      shiftKey: "~",
      key: "`"
    },
    Digit1: {
      keyCode: 49,
      shiftKey: "!",
      key: "1"
    },
    Digit2: {
      keyCode: 50,
      shiftKey: "@",
      key: "2"
    },
    Digit3: {
      keyCode: 51,
      shiftKey: "#",
      key: "3"
    },
    Digit4: {
      keyCode: 52,
      shiftKey: "$",
      key: "4"
    },
    Digit5: {
      keyCode: 53,
      shiftKey: "%",
      key: "5"
    },
    Digit6: {
      keyCode: 54,
      shiftKey: "^",
      key: "6"
    },
    Digit7: {
      keyCode: 55,
      shiftKey: "&",
      key: "7"
    },
    Digit8: {
      keyCode: 56,
      shiftKey: "*",
      key: "8"
    },
    Digit9: {
      keyCode: 57,
      shiftKey: "(",
      key: "9"
    },
    Digit0: {
      keyCode: 48,
      shiftKey: ")",
      key: "0"
    },
    Minus: {
      keyCode: 189,
      shiftKey: "_",
      key: "-"
    },
    Equal: {
      keyCode: 187,
      shiftKey: "+",
      key: "="
    },
    Backslash: {
      keyCode: 220,
      shiftKey: "|",
      key: "\\"
    },
    Backspace: {
      keyCode: 8,
      key: "Backspace"
    },
    Tab: {
      keyCode: 9,
      key: "Tab"
    },
    KeyQ: {
      keyCode: 81,
      shiftKey: "Q",
      key: "q"
    },
    KeyW: {
      keyCode: 87,
      shiftKey: "W",
      key: "w"
    },
    KeyE: {
      keyCode: 69,
      shiftKey: "E",
      key: "e"
    },
    KeyR: {
      keyCode: 82,
      shiftKey: "R",
      key: "r"
    },
    KeyT: {
      keyCode: 84,
      shiftKey: "T",
      key: "t"
    },
    KeyY: {
      keyCode: 89,
      shiftKey: "Y",
      key: "y"
    },
    KeyU: {
      keyCode: 85,
      shiftKey: "U",
      key: "u"
    },
    KeyI: {
      keyCode: 73,
      shiftKey: "I",
      key: "i"
    },
    KeyO: {
      keyCode: 79,
      shiftKey: "O",
      key: "o"
    },
    KeyP: {
      keyCode: 80,
      shiftKey: "P",
      key: "p"
    },
    BracketLeft: {
      keyCode: 219,
      shiftKey: "{",
      key: "["
    },
    BracketRight: {
      keyCode: 221,
      shiftKey: "}",
      key: "]"
    },
    CapsLock: {
      keyCode: 20,
      key: "CapsLock"
    },
    KeyA: {
      keyCode: 65,
      shiftKey: "A",
      key: "a"
    },
    KeyS: {
      keyCode: 83,
      shiftKey: "S",
      key: "s"
    },
    KeyD: {
      keyCode: 68,
      shiftKey: "D",
      key: "d"
    },
    KeyF: {
      keyCode: 70,
      shiftKey: "F",
      key: "f"
    },
    KeyG: {
      keyCode: 71,
      shiftKey: "G",
      key: "g"
    },
    KeyH: {
      keyCode: 72,
      shiftKey: "H",
      key: "h"
    },
    KeyJ: {
      keyCode: 74,
      shiftKey: "J",
      key: "j"
    },
    KeyK: {
      keyCode: 75,
      shiftKey: "K",
      key: "k"
    },
    KeyL: {
      keyCode: 76,
      shiftKey: "L",
      key: "l"
    },
    Semicolon: {
      keyCode: 186,
      shiftKey: ":",
      key: ";"
    },
    Quote: {
      keyCode: 222,
      shiftKey: '"',
      key: "\'"
    },
    Enter: {
      keyCode: 13,
      key: "Enter",
      text: "\r"
    },
    ShiftLeft: {
      keyCode: 160,
      keyCodeWithoutLocation: 16,
      key: "Shift",
      location: 1
    },
    KeyZ: {
      keyCode: 90,
      shiftKey: "Z",
      key: "z"
    },
    KeyX: {
      keyCode: 88,
      shiftKey: "X",
      key: "x"
    },
    KeyC: {
      keyCode: 67,
      shiftKey: "C",
      key: "c"
    },
    KeyV: {
      keyCode: 86,
      shiftKey: "V",
      key: "v"
    },
    KeyB: {
      keyCode: 66,
      shiftKey: "B",
      key: "b"
    },
    KeyN: {
      keyCode: 78,
      shiftKey: "N",
      key: "n"
    },
    KeyM: {
      keyCode: 77,
      shiftKey: "M",
      key: "m"
    },
    Comma: {
      keyCode: 188,
      shiftKey: "<",
      key: ","
    },
    Period: {
      keyCode: 190,
      shiftKey: ">",
      key: "."
    },
    Slash: {
      keyCode: 191,
      shiftKey: "?",
      key: "/"
    },
    ShiftRight: {
      keyCode: 161,
      keyCodeWithoutLocation: 16,
      key: "Shift",
      location: 2
    },
    ControlLeft: {
      keyCode: 162,
      keyCodeWithoutLocation: 17,
      key: "Control",
      location: 1
    },
    MetaLeft: {
      keyCode: 91,
      key: "Meta",
      location: 1
    },
    AltLeft: {
      keyCode: 164,
      keyCodeWithoutLocation: 18,
      key: "Alt",
      location: 1
    },
    Space: {
      keyCode: 32,
      key: " "
    },
    AltRight: {
      keyCode: 165,
      keyCodeWithoutLocation: 18,
      key: "Alt",
      location: 2
    },
    AltGraph: {
      keyCode: 225,
      key: "AltGraph"
    },
    MetaRight: {
      keyCode: 92,
      key: "Meta",
      location: 2
    },
    ContextMenu: {
      keyCode: 93,
      key: "ContextMenu"
    },
    ControlRight: {
      keyCode: 163,
      keyCodeWithoutLocation: 17,
      key: "Control",
      location: 2
    },
    PrintScreen: {
      keyCode: 44,
      key: "PrintScreen"
    },
    ScrollLock: {
      keyCode: 145,
      key: "ScrollLock"
    },
    Pause: {
      keyCode: 19,
      key: "Pause"
    },
    PageUp: {
      keyCode: 33,
      key: "PageUp"
    },
    PageDown: {
      keyCode: 34,
      key: "PageDown"
    },
    Insert: {
      keyCode: 45,
      key: "Insert"
    },
    Delete: {
      keyCode: 46,
      key: "Delete"
    },
    Home: {
      keyCode: 36,
      key: "Home"
    },
    End: {
      keyCode: 35,
      key: "End"
    },
    ArrowLeft: {
      keyCode: 37,
      key: "ArrowLeft"
    },
    ArrowUp: {
      keyCode: 38,
      key: "ArrowUp"
    },
    ArrowRight: {
      keyCode: 39,
      key: "ArrowRight"
    },
    ArrowDown: {
      keyCode: 40,
      key: "ArrowDown"
    },
    NumLock: {
      keyCode: 144,
      key: "NumLock"
    },
    NumpadDivide: {
      keyCode: 111,
      key: "/",
      location: 3
    },
    NumpadMultiply: {
      keyCode: 106,
      key: "*",
      location: 3
    },
    NumpadSubtract: {
      keyCode: 109,
      key: "-",
      location: 3
    },
    Numpad7: {
      keyCode: 36,
      shiftKeyCode: 103,
      key: "Home",
      shiftKey: "7",
      location: 3
    },
    Numpad8: {
      keyCode: 38,
      shiftKeyCode: 104,
      key: "ArrowUp",
      shiftKey: "8",
      location: 3
    },
    Numpad9: {
      keyCode: 33,
      shiftKeyCode: 105,
      key: "PageUp",
      shiftKey: "9",
      location: 3
    },
    Numpad4: {
      keyCode: 37,
      shiftKeyCode: 100,
      key: "ArrowLeft",
      shiftKey: "4",
      location: 3
    },
    Numpad5: {
      keyCode: 12,
      shiftKeyCode: 101,
      key: "Clear",
      shiftKey: "5",
      location: 3
    },
    Numpad6: {
      keyCode: 39,
      shiftKeyCode: 102,
      key: "ArrowRight",
      shiftKey: "6",
      location: 3
    },
    NumpadAdd: {
      keyCode: 107,
      key: "+",
      location: 3
    },
    Numpad1: {
      keyCode: 35,
      shiftKeyCode: 97,
      key: "End",
      shiftKey: "1",
      location: 3
    },
    Numpad2: {
      keyCode: 40,
      shiftKeyCode: 98,
      key: "ArrowDown",
      shiftKey: "2",
      location: 3
    },
    Numpad3: {
      keyCode: 34,
      shiftKeyCode: 99,
      key: "PageDown",
      shiftKey: "3",
      location: 3
    },
    Numpad0: {
      keyCode: 45,
      shiftKeyCode: 96,
      key: "Insert",
      shiftKey: "0",
      location: 3
    },
    NumpadDecimal: {
      keyCode: 46,
      shiftKeyCode: 110,
      key: "\0",
      shiftKey: ".",
      location: 3
    },
    NumpadEnter: {
      keyCode: 13,
      key: "Enter",
      text: "\r",
      location: 3
    }
  };
});

// node_modules/playwright-core/lib/server/input.js
var require_input = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var buildLayoutClosure = function(layout) {
    const result = new Map;
    for (const code in layout) {
      const definition = layout[code];
      const description = {
        key: definition.key || "",
        keyCode: definition.keyCode || 0,
        keyCodeWithoutLocation: definition.keyCodeWithoutLocation || definition.keyCode || 0,
        code,
        text: definition.text || "",
        location: definition.location || 0
      };
      if (definition.key.length === 1)
        description.text = description.key;
      let shiftedDescription;
      if (definition.shiftKey) {
        (0, _utils.assert)(definition.shiftKey.length === 1);
        shiftedDescription = {
          ...description
        };
        shiftedDescription.key = definition.shiftKey;
        shiftedDescription.text = definition.shiftKey;
        if (definition.shiftKeyCode)
          shiftedDescription.keyCode = definition.shiftKeyCode;
      }
      result.set(code, {
        ...description,
        shifted: shiftedDescription
      });
      if (aliases.has(code)) {
        for (const alias of aliases.get(code))
          result.set(alias, description);
      }
      if (definition.location)
        continue;
      if (description.key.length === 1)
        result.set(description.key, description);
      if (shiftedDescription)
        result.set(shiftedDescription.key, {
          ...shiftedDescription,
          shifted: undefined
        });
    }
    return result;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.keypadLocation = exports.Touchscreen = exports.Mouse = exports.Keyboard = undefined;
  var _utils = require_utils3();
  var keyboardLayout = _interopRequireWildcard(require_usKeyboardLayout());
  var keypadLocation = exports.keypadLocation = keyboardLayout.keypadLocation;
  var kModifiers = ["Alt", "Control", "Meta", "Shift"];

  class Keyboard {
    constructor(raw, page) {
      this._pressedModifiers = new Set;
      this._pressedKeys = new Set;
      this._raw = undefined;
      this._page = undefined;
      this._raw = raw;
      this._page = page;
    }
    async down(key) {
      const description = this._keyDescriptionForString(key);
      const autoRepeat = this._pressedKeys.has(description.code);
      this._pressedKeys.add(description.code);
      if (kModifiers.includes(description.key))
        this._pressedModifiers.add(description.key);
      const text = description.text;
      await this._raw.keydown(this._pressedModifiers, description.code, description.keyCode, description.keyCodeWithoutLocation, description.key, description.location, autoRepeat, text);
    }
    _keyDescriptionForString(keyString) {
      let description = usKeyboardLayout.get(keyString);
      (0, _utils.assert)(description, `Unknown key: "${keyString}"`);
      const shift = this._pressedModifiers.has("Shift");
      description = shift && description.shifted ? description.shifted : description;
      if (this._pressedModifiers.size > 1 || !this._pressedModifiers.has("Shift") && this._pressedModifiers.size === 1)
        return {
          ...description,
          text: ""
        };
      return description;
    }
    async up(key) {
      const description = this._keyDescriptionForString(key);
      if (kModifiers.includes(description.key))
        this._pressedModifiers.delete(description.key);
      this._pressedKeys.delete(description.code);
      await this._raw.keyup(this._pressedModifiers, description.code, description.keyCode, description.keyCodeWithoutLocation, description.key, description.location);
    }
    async insertText(text) {
      await this._raw.sendText(text);
    }
    async type(text, options) {
      const delay = options && options.delay || undefined;
      for (const char of text) {
        if (usKeyboardLayout.has(char)) {
          await this.press(char, {
            delay
          });
        } else {
          if (delay)
            await new Promise((f) => setTimeout(f, delay));
          await this.insertText(char);
        }
      }
    }
    async press(key, options = {}) {
      function split(keyString) {
        const keys = [];
        let building = "";
        for (const char of keyString) {
          if (char === "+" && building) {
            keys.push(building);
            building = "";
          } else {
            building += char;
          }
        }
        keys.push(building);
        return keys;
      }
      const tokens = split(key);
      key = tokens[tokens.length - 1];
      for (let i = 0;i < tokens.length - 1; ++i)
        await this.down(tokens[i]);
      await this.down(key);
      if (options.delay)
        await new Promise((f) => setTimeout(f, options.delay));
      await this.up(key);
      for (let i = tokens.length - 2;i >= 0; --i)
        await this.up(tokens[i]);
    }
    async _ensureModifiers(modifiers) {
      for (const modifier of modifiers) {
        if (!kModifiers.includes(modifier))
          throw new Error("Unknown modifier " + modifier);
      }
      const restore = Array.from(this._pressedModifiers);
      for (const key of kModifiers) {
        const needDown = modifiers.includes(key);
        const isDown = this._pressedModifiers.has(key);
        if (needDown && !isDown)
          await this.down(key);
        else if (!needDown && isDown)
          await this.up(key);
      }
      return restore;
    }
    _modifiers() {
      return this._pressedModifiers;
    }
  }
  exports.Keyboard = Keyboard;

  class Mouse {
    constructor(raw, page) {
      this._keyboard = undefined;
      this._x = 0;
      this._y = 0;
      this._lastButton = "none";
      this._buttons = new Set;
      this._raw = undefined;
      this._page = undefined;
      this._raw = raw;
      this._page = page;
      this._keyboard = this._page.keyboard;
    }
    async move(x, y, options = {}, metadata) {
      if (metadata)
        metadata.point = {
          x,
          y
        };
      const {
        steps = 1
      } = options;
      const fromX = this._x;
      const fromY = this._y;
      this._x = x;
      this._y = y;
      for (let i = 1;i <= steps; i++) {
        const middleX = fromX + (x - fromX) * (i / steps);
        const middleY = fromY + (y - fromY) * (i / steps);
        await this._raw.move(middleX, middleY, this._lastButton, this._buttons, this._keyboard._modifiers(), !!options.forClick);
      }
    }
    async down(options = {}, metadata) {
      if (metadata)
        metadata.point = {
          x: this._x,
          y: this._y
        };
      const {
        button = "left",
        clickCount = 1
      } = options;
      this._lastButton = button;
      this._buttons.add(button);
      await this._raw.down(this._x, this._y, this._lastButton, this._buttons, this._keyboard._modifiers(), clickCount);
    }
    async up(options = {}, metadata) {
      if (metadata)
        metadata.point = {
          x: this._x,
          y: this._y
        };
      const {
        button = "left",
        clickCount = 1
      } = options;
      this._lastButton = "none";
      this._buttons.delete(button);
      await this._raw.up(this._x, this._y, button, this._buttons, this._keyboard._modifiers(), clickCount);
    }
    async click(x, y, options = {}, metadata) {
      if (metadata)
        metadata.point = {
          x: this._x,
          y: this._y
        };
      const {
        delay = null,
        clickCount = 1
      } = options;
      if (delay) {
        this.move(x, y, {
          forClick: true
        });
        for (let cc = 1;cc <= clickCount; ++cc) {
          await this.down({
            ...options,
            clickCount: cc
          });
          await new Promise((f) => setTimeout(f, delay));
          await this.up({
            ...options,
            clickCount: cc
          });
          if (cc < clickCount)
            await new Promise((f) => setTimeout(f, delay));
        }
      } else {
        const promises = [];
        promises.push(this.move(x, y, {
          forClick: true
        }));
        for (let cc = 1;cc <= clickCount; ++cc) {
          promises.push(this.down({
            ...options,
            clickCount: cc
          }));
          promises.push(this.up({
            ...options,
            clickCount: cc
          }));
        }
        await Promise.all(promises);
      }
    }
    async dblclick(x, y, options = {}) {
      await this.click(x, y, {
        ...options,
        clickCount: 2
      });
    }
    async wheel(deltaX, deltaY) {
      await this._raw.wheel(this._x, this._y, this._buttons, this._keyboard._modifiers(), deltaX, deltaY);
    }
  }
  exports.Mouse = Mouse;
  var aliases = new Map([["ShiftLeft", ["Shift"]], ["ControlLeft", ["Control"]], ["AltLeft", ["Alt"]], ["MetaLeft", ["Meta"]], ["Enter", ["\n", "\r"]]]);
  var usKeyboardLayout = buildLayoutClosure(keyboardLayout.USKeyboardLayout);

  class Touchscreen {
    constructor(raw, page) {
      this._raw = undefined;
      this._page = undefined;
      this._raw = raw;
      this._page = page;
    }
    async tap(x, y, metadata) {
      if (metadata)
        metadata.point = {
          x,
          y
        };
      if (!this._page._browserContext._options.hasTouch)
        throw new Error("hasTouch must be enabled on the browser context before using the touchscreen.");
      await this._raw.tap(x, y, this._page.keyboard._modifiers());
    }
  }
  exports.Touchscreen = Touchscreen;
});

// node_modules/playwright-core/lib/server/screenshotter.js
var require_screenshotter = __commonJS((exports) => {
  var inPagePrepareForScreenshots = function(screenshotStyle, hideCaret, disableAnimations, syncAnimations) {
    if (syncAnimations) {
      const style = document.createElement("style");
      style.textContent = "body {}";
      document.head.appendChild(style);
      document.documentElement.getBoundingClientRect();
      style.remove();
    }
    if (!screenshotStyle && !hideCaret && !disableAnimations)
      return;
    const collectRoots = (root, roots2 = []) => {
      roots2.push(root);
      const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);
      do {
        const node = walker.currentNode;
        const shadowRoot = node instanceof Element ? node.shadowRoot : null;
        if (shadowRoot)
          collectRoots(shadowRoot, roots2);
      } while (walker.nextNode());
      return roots2;
    };
    const roots = collectRoots(document);
    const cleanupCallbacks = [];
    if (screenshotStyle) {
      for (const root of roots) {
        const styleTag = document.createElement("style");
        styleTag.textContent = screenshotStyle;
        if (root === document)
          document.documentElement.append(styleTag);
        else
          root.append(styleTag);
        cleanupCallbacks.push(() => {
          styleTag.remove();
        });
      }
    }
    if (hideCaret) {
      const elements = new Map;
      for (const root of roots) {
        root.querySelectorAll("input,textarea,[contenteditable]").forEach((element) => {
          elements.set(element, {
            value: element.style.getPropertyValue("caret-color"),
            priority: element.style.getPropertyPriority("caret-color")
          });
          element.style.setProperty("caret-color", "transparent", "important");
        });
      }
      cleanupCallbacks.push(() => {
        for (const [element, value] of elements)
          element.style.setProperty("caret-color", value.value, value.priority);
      });
    }
    if (disableAnimations) {
      const infiniteAnimationsToResume = new Set;
      const handleAnimations = (root) => {
        for (const animation of root.getAnimations()) {
          if (!animation.effect || animation.playbackRate === 0 || infiniteAnimationsToResume.has(animation))
            continue;
          const endTime = animation.effect.getComputedTiming().endTime;
          if (Number.isFinite(endTime)) {
            try {
              animation.finish();
            } catch (e) {
            }
          } else {
            try {
              animation.cancel();
              infiniteAnimationsToResume.add(animation);
            } catch (e) {
            }
          }
        }
      };
      for (const root of roots) {
        const handleRootAnimations = handleAnimations.bind(null, root);
        handleRootAnimations();
        root.addEventListener("transitionrun", handleRootAnimations);
        root.addEventListener("animationstart", handleRootAnimations);
        cleanupCallbacks.push(() => {
          root.removeEventListener("transitionrun", handleRootAnimations);
          root.removeEventListener("animationstart", handleRootAnimations);
        });
      }
      cleanupCallbacks.push(() => {
        for (const animation of infiniteAnimationsToResume) {
          try {
            animation.play();
          } catch (e) {
          }
        }
      });
    }
    window.__pwCleanupScreenshot = () => {
      for (const cleanupCallback of cleanupCallbacks)
        cleanupCallback();
      delete window.__pwCleanupScreenshot;
    };
  };
  var trimClipToSize = function(clip, size) {
    const p1 = {
      x: Math.max(0, Math.min(clip.x, size.width)),
      y: Math.max(0, Math.min(clip.y, size.height))
    };
    const p2 = {
      x: Math.max(0, Math.min(clip.x + clip.width, size.width)),
      y: Math.max(0, Math.min(clip.y + clip.height, size.height))
    };
    const result = {
      x: p1.x,
      y: p1.y,
      width: p2.x - p1.x,
      height: p2.y - p1.y
    };
    (0, _utils.assert)(result.width && result.height, "Clipped area is either empty or outside the resulting image");
    return result;
  };
  var validateScreenshotOptions = function(options) {
    let format = null;
    if (options.type) {
      (0, _utils.assert)(options.type === "png" || options.type === "jpeg", "Unknown options.type value: " + options.type);
      format = options.type;
    }
    if (!format)
      format = "png";
    if (options.quality !== undefined) {
      (0, _utils.assert)(format === "jpeg", "options.quality is unsupported for the " + format + " screenshots");
      (0, _utils.assert)(typeof options.quality === "number", "Expected options.quality to be a number but found " + typeof options.quality);
      (0, _utils.assert)(Number.isInteger(options.quality), "Expected options.quality to be an integer");
      (0, _utils.assert)(options.quality >= 0 && options.quality <= 100, "Expected options.quality to be between 0 and 100 (inclusive), got " + options.quality);
    }
    if (options.clip) {
      (0, _utils.assert)(typeof options.clip.x === "number", "Expected options.clip.x to be a number but found " + typeof options.clip.x);
      (0, _utils.assert)(typeof options.clip.y === "number", "Expected options.clip.y to be a number but found " + typeof options.clip.y);
      (0, _utils.assert)(typeof options.clip.width === "number", "Expected options.clip.width to be a number but found " + typeof options.clip.width);
      (0, _utils.assert)(typeof options.clip.height === "number", "Expected options.clip.height to be a number but found " + typeof options.clip.height);
      (0, _utils.assert)(options.clip.width !== 0, "Expected options.clip.width not to be 0.");
      (0, _utils.assert)(options.clip.height !== 0, "Expected options.clip.height not to be 0.");
    }
    return format;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Screenshotter = undefined;
  exports.validateScreenshotOptions = validateScreenshotOptions;
  var _helper = require_helper();
  var _utils = require_utils3();
  var _multimap = require_multimap();

  class Screenshotter {
    constructor(page) {
      this._queue = new TaskQueue;
      this._page = undefined;
      this._page = page;
      this._queue = new TaskQueue;
    }
    async _originalViewportSize(progress2) {
      const originalViewportSize = this._page.viewportSize();
      let viewportSize = originalViewportSize;
      if (!viewportSize)
        viewportSize = await this._page.mainFrame().waitForFunctionValueInUtility(progress2, () => ({
          width: window.innerWidth,
          height: window.innerHeight
        }));
      return {
        viewportSize,
        originalViewportSize
      };
    }
    async _fullPageSize(progress2) {
      const fullPageSize = await this._page.mainFrame().waitForFunctionValueInUtility(progress2, () => {
        if (!document.body || !document.documentElement)
          return null;
        return {
          width: Math.max(document.body.scrollWidth, document.documentElement.scrollWidth, document.body.offsetWidth, document.documentElement.offsetWidth, document.body.clientWidth, document.documentElement.clientWidth),
          height: Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight)
        };
      });
      return fullPageSize;
    }
    async screenshotPage(progress2, options) {
      const format = validateScreenshotOptions(options);
      return this._queue.postTask(async () => {
        progress2.log("taking page screenshot");
        const {
          viewportSize
        } = await this._originalViewportSize(progress2);
        await this._preparePageForScreenshot(progress2, options.style, options.caret !== "initial", options.animations === "disabled");
        progress2.throwIfAborted();
        if (options.fullPage) {
          const fullPageSize = await this._fullPageSize(progress2);
          let documentRect = {
            x: 0,
            y: 0,
            width: fullPageSize.width,
            height: fullPageSize.height
          };
          const fitsViewport = fullPageSize.width <= viewportSize.width && fullPageSize.height <= viewportSize.height;
          if (options.clip)
            documentRect = trimClipToSize(options.clip, documentRect);
          const buffer2 = await this._screenshot(progress2, format, documentRect, undefined, fitsViewport, options);
          progress2.throwIfAborted();
          await this._restorePageAfterScreenshot();
          return buffer2;
        }
        const viewportRect = options.clip ? trimClipToSize(options.clip, viewportSize) : {
          x: 0,
          y: 0,
          ...viewportSize
        };
        const buffer = await this._screenshot(progress2, format, undefined, viewportRect, true, options);
        progress2.throwIfAborted();
        await this._restorePageAfterScreenshot();
        return buffer;
      });
    }
    async screenshotElement(progress2, handle, options) {
      const format = validateScreenshotOptions(options);
      return this._queue.postTask(async () => {
        progress2.log("taking element screenshot");
        const {
          viewportSize
        } = await this._originalViewportSize(progress2);
        await this._preparePageForScreenshot(progress2, options.style, options.caret !== "initial", options.animations === "disabled");
        progress2.throwIfAborted();
        await handle._waitAndScrollIntoViewIfNeeded(progress2, true);
        progress2.throwIfAborted();
        const boundingBox = await handle.boundingBox();
        (0, _utils.assert)(boundingBox, "Node is either not visible or not an HTMLElement");
        (0, _utils.assert)(boundingBox.width !== 0, "Node has 0 width.");
        (0, _utils.assert)(boundingBox.height !== 0, "Node has 0 height.");
        const fitsViewport = boundingBox.width <= viewportSize.width && boundingBox.height <= viewportSize.height;
        progress2.throwIfAborted();
        const scrollOffset = await this._page.mainFrame().waitForFunctionValueInUtility(progress2, () => ({
          x: window.scrollX,
          y: window.scrollY
        }));
        const documentRect = {
          ...boundingBox
        };
        documentRect.x += scrollOffset.x;
        documentRect.y += scrollOffset.y;
        const buffer = await this._screenshot(progress2, format, _helper.helper.enclosingIntRect(documentRect), undefined, fitsViewport, options);
        progress2.throwIfAborted();
        await this._restorePageAfterScreenshot();
        return buffer;
      });
    }
    async _preparePageForScreenshot(progress2, screenshotStyle, hideCaret, disableAnimations) {
      if (disableAnimations)
        progress2.log("  disabled all CSS animations");
      const syncAnimations = this._page._delegate.shouldToggleStyleSheetToSyncAnimations();
      await Promise.all(this._page.frames().map(async (frame) => {
        await frame.nonStallingEvaluateInExistingContext("(" + inPagePrepareForScreenshots.toString() + `)(${JSON.stringify(screenshotStyle)}, ${hideCaret}, ${disableAnimations}, ${syncAnimations})`, false, "utility").catch(() => {
        });
      }));
      if (!process.env.PW_TEST_SCREENSHOT_NO_FONTS_READY) {
        progress2.log("waiting for fonts to load...");
        await Promise.all(this._page.frames().map(async (frame) => {
          await frame.nonStallingEvaluateInExistingContext("document.fonts.ready", false, "utility").catch(() => {
          });
        }));
        progress2.log("fonts loaded");
      }
      progress2.cleanupWhenAborted(() => this._restorePageAfterScreenshot());
    }
    async _restorePageAfterScreenshot() {
      await Promise.all(this._page.frames().map(async (frame) => {
        frame.nonStallingEvaluateInExistingContext("window.__pwCleanupScreenshot && window.__pwCleanupScreenshot()", false, "utility").catch(() => {
        });
      }));
    }
    async _maskElements(progress2, options) {
      const framesToParsedSelectors = new _multimap.MultiMap;
      const cleanup = async () => {
        await Promise.all([...framesToParsedSelectors.keys()].map(async (frame) => {
          await frame.hideHighlight();
        }));
      };
      if (!options.mask || !options.mask.length)
        return cleanup;
      await Promise.all((options.mask || []).map(async ({
        frame,
        selector
      }) => {
        const pair = await frame.selectors.resolveFrameForSelector(selector);
        if (pair)
          framesToParsedSelectors.set(pair.frame, pair.info.parsed);
      }));
      progress2.throwIfAborted();
      await Promise.all([...framesToParsedSelectors.keys()].map(async (frame) => {
        await frame.maskSelectors(framesToParsedSelectors.get(frame), options.maskColor || "#F0F");
      }));
      progress2.cleanupWhenAborted(cleanup);
      return cleanup;
    }
    async _screenshot(progress2, format, documentRect, viewportRect, fitsViewport, options) {
      var _options$quality;
      if (options.__testHookBeforeScreenshot)
        await options.__testHookBeforeScreenshot();
      progress2.throwIfAborted();
      const shouldSetDefaultBackground = options.omitBackground && format === "png";
      if (shouldSetDefaultBackground) {
        await this._page._delegate.setBackgroundColor({
          r: 0,
          g: 0,
          b: 0,
          a: 0
        });
        progress2.cleanupWhenAborted(() => this._page._delegate.setBackgroundColor());
      }
      progress2.throwIfAborted();
      const cleanupHighlight = await this._maskElements(progress2, options);
      progress2.throwIfAborted();
      const quality = format === "jpeg" ? (_options$quality = options.quality) !== null && _options$quality !== undefined ? _options$quality : 80 : undefined;
      const buffer = await this._page._delegate.takeScreenshot(progress2, format, documentRect, viewportRect, quality, fitsViewport, options.scale || "device");
      progress2.throwIfAborted();
      await cleanupHighlight();
      progress2.throwIfAborted();
      if (shouldSetDefaultBackground)
        await this._page._delegate.setBackgroundColor();
      progress2.throwIfAborted();
      if (options.__testHookAfterScreenshot)
        await options.__testHookAfterScreenshot();
      return buffer;
    }
  }
  exports.Screenshotter = Screenshotter;

  class TaskQueue {
    constructor() {
      this._chain = undefined;
      this._chain = Promise.resolve();
    }
    postTask(task) {
      const result = this._chain.then(task);
      this._chain = result.catch(() => {
      });
      return result;
    }
  }
});

// node_modules/playwright-core/lib/server/console.js
var require_console = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ConsoleMessage = undefined;

  class ConsoleMessage {
    constructor(page, type, text, args, location2) {
      this._type = undefined;
      this._text = undefined;
      this._args = undefined;
      this._location = undefined;
      this._page = undefined;
      this._page = page;
      this._type = type;
      this._text = text;
      this._args = args;
      this._location = location2 || {
        url: "",
        lineNumber: 0,
        columnNumber: 0
      };
    }
    page() {
      return this._page;
    }
    type() {
      return this._type;
    }
    text() {
      if (this._text === undefined)
        this._text = this._args.map((arg) => arg.preview()).join(" ");
      return this._text;
    }
    args() {
      return this._args;
    }
    location() {
      return this._location;
    }
  }
  exports.ConsoleMessage = ConsoleMessage;
});

// node_modules/playwright-core/lib/server/accessibility.js
var require_accessibility = __commonJS((exports) => {
  var collectInterestingNodes = function(collection, node, insideControl) {
    if (node.isInteresting(insideControl))
      collection.add(node);
    if (node.isLeafNode())
      return;
    insideControl = insideControl || node.isControl();
    for (const child of node.children())
      collectInterestingNodes(collection, child, insideControl);
  };
  var serializeTree = function(node, whitelistedNodes) {
    const children = [];
    for (const child of node.children())
      children.push(...serializeTree(child, whitelistedNodes));
    if (whitelistedNodes && !whitelistedNodes.has(node))
      return children;
    const serializedNode = node.serialize();
    if (children.length)
      serializedNode.children = children;
    return [serializedNode];
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Accessibility = undefined;

  class Accessibility {
    constructor(getAXTree) {
      this._getAXTree = undefined;
      this._getAXTree = getAXTree;
    }
    async snapshot(options = {}) {
      const {
        interestingOnly = true,
        root = null
      } = options;
      const {
        tree,
        needle
      } = await this._getAXTree(root || undefined);
      if (!interestingOnly) {
        if (root)
          return needle && serializeTree(needle)[0];
        return serializeTree(tree)[0];
      }
      const interestingNodes = new Set;
      collectInterestingNodes(interestingNodes, tree, false);
      if (root && (!needle || !interestingNodes.has(needle)))
        return null;
      return serializeTree(needle || tree, interestingNodes)[0];
    }
  }
  exports.Accessibility = Accessibility;
});

// node_modules/playwright-core/lib/server/fileChooser.js
var require_fileChooser = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FileChooser = undefined;

  class FileChooser {
    constructor(page, elementHandle, isMultiple) {
      this._page = undefined;
      this._elementHandle = undefined;
      this._isMultiple = undefined;
      this._page = page;
      this._elementHandle = elementHandle;
      this._isMultiple = isMultiple;
    }
    element() {
      return this._elementHandle;
    }
    isMultiple() {
      return this._isMultiple;
    }
    page() {
      return this._page;
    }
  }
  exports.FileChooser = FileChooser;
});

// node_modules/playwright-core/lib/server/page.js
var require_page = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var addPageBinding = function(bindingName, needsHandle, utilityScriptSerializers) {
    const binding = globalThis[bindingName];
    if (binding.__installed)
      return;
    globalThis[bindingName] = (...args) => {
      const me = globalThis[bindingName];
      if (needsHandle && args.slice(1).some((arg) => arg !== undefined))
        throw new Error(`exposeBindingHandle supports a single argument, ${args.length} received`);
      let callbacks = me["callbacks"];
      if (!callbacks) {
        callbacks = new Map;
        me["callbacks"] = callbacks;
      }
      const seq = (me["lastSeq"] || 0) + 1;
      me["lastSeq"] = seq;
      let handles = me["handles"];
      if (!handles) {
        handles = new Map;
        me["handles"] = handles;
      }
      const promise = new Promise((resolve, reject) => callbacks.set(seq, {
        resolve,
        reject
      }));
      let payload;
      if (needsHandle) {
        handles.set(seq, args[0]);
        payload = {
          name: bindingName,
          seq
        };
      } else {
        const serializedArgs = [];
        for (let i = 0;i < args.length; i++) {
          serializedArgs[i] = utilityScriptSerializers.serializeAsCallArgument(args[i], (v) => {
            return {
              fallThrough: v
            };
          });
        }
        payload = {
          name: bindingName,
          seq,
          serializedArgs
        };
      }
      binding(JSON.stringify(payload));
      return promise;
    };
    globalThis[bindingName].__installed = true;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Worker = exports.PageBinding = exports.Page = undefined;
  var frames = _interopRequireWildcard(require_frames());
  var input = _interopRequireWildcard(require_input());
  var js = _interopRequireWildcard(require_javascript());
  var network = _interopRequireWildcard(require_network2());
  var _screenshotter = require_screenshotter();
  var _timeoutSettings = require_timeoutSettings();
  var _browserContext = require_browserContext();
  var _console = require_console();
  var accessibility = _interopRequireWildcard(require_accessibility());
  var _fileChooser = require_fileChooser();
  var _progress = require_progress();
  var _utils = require_utils3();
  var _manualPromise = require_manualPromise();
  var _debugLogger = require_debugLogger();
  var _comparators = require_comparators();
  var _instrumentation = require_instrumentation();
  var _selectorParser = require_selectorParser();
  var _utilityScriptSerializers = require_utilityScriptSerializers();
  var _errors = require_errors();
  var _locatorGenerators = require_locatorGenerators();

  class Page extends _instrumentation.SdkObject {
    constructor(delegate, browserContext) {
      super(browserContext, "page");
      this._closedState = "open";
      this._closedPromise = new _manualPromise.ManualPromise;
      this._initialized = false;
      this._eventsToEmitAfterInitialized = [];
      this._crashed = false;
      this.openScope = new _utils.LongStandingScope;
      this._browserContext = undefined;
      this.keyboard = undefined;
      this.mouse = undefined;
      this.touchscreen = undefined;
      this._timeoutSettings = undefined;
      this._delegate = undefined;
      this._emulatedSize = undefined;
      this._extraHTTPHeaders = undefined;
      this._emulatedMedia = {};
      this._interceptFileChooser = false;
      this._pageBindings = new Map;
      this.initScripts = [];
      this._screenshotter = undefined;
      this._frameManager = undefined;
      this.accessibility = undefined;
      this._workers = new Map;
      this.pdf = undefined;
      this.coverage = undefined;
      this._clientRequestInterceptor = undefined;
      this._serverRequestInterceptor = undefined;
      this._ownedContext = undefined;
      this._pageIsError = undefined;
      this._video = null;
      this._opener = undefined;
      this._isServerSideOnly = false;
      this._locatorHandlers = new Map;
      this._lastLocatorHandlerUid = 0;
      this._locatorHandlerRunningCounter = 0;
      this._frameThrottler = new FrameThrottler(10, 35, 200);
      this._closeReason = undefined;
      this.attribution.page = this;
      this._delegate = delegate;
      this._browserContext = browserContext;
      this.accessibility = new accessibility.Accessibility(delegate.getAccessibilityTree.bind(delegate));
      this.keyboard = new input.Keyboard(delegate.rawKeyboard, this);
      this.mouse = new input.Mouse(delegate.rawMouse, this);
      this.touchscreen = new input.Touchscreen(delegate.rawTouchscreen, this);
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings(browserContext._timeoutSettings);
      this._screenshotter = new _screenshotter.Screenshotter(this);
      this._frameManager = new frames.FrameManager(this);
      if (delegate.pdf)
        this.pdf = delegate.pdf.bind(delegate);
      this.coverage = delegate.coverage ? delegate.coverage() : null;
    }
    async initOpener(opener) {
      if (!opener)
        return;
      const openerPage = await opener.pageOrError();
      if (openerPage instanceof Page && !openerPage.isClosed())
        this._opener = openerPage;
    }
    reportAsNew(error = undefined, contextEvent = _browserContext.BrowserContext.Events.Page) {
      if (error) {
        if (this._browserContext.isClosingOrClosed())
          return;
        this._setIsError(error);
      }
      this._initialized = true;
      this.emitOnContext(contextEvent, this);
      for (const {
        event,
        args
      } of this._eventsToEmitAfterInitialized)
        this._browserContext.emit(event, ...args);
      this._eventsToEmitAfterInitialized = [];
      if (this.isClosed())
        this.emit(Page.Events.Close);
      else
        this.instrumentation.onPageOpen(this);
    }
    initializedOrUndefined() {
      return this._initialized ? this : undefined;
    }
    emitOnContext(event, ...args) {
      if (this._isServerSideOnly)
        return;
      this._browserContext.emit(event, ...args);
    }
    emitOnContextOnceInitialized(event, ...args) {
      if (this._isServerSideOnly)
        return;
      if (this._initialized)
        this._browserContext.emit(event, ...args);
      else
        this._eventsToEmitAfterInitialized.push({
          event,
          args
        });
    }
    async resetForReuse(metadata) {
      this.setDefaultNavigationTimeout(undefined);
      this.setDefaultTimeout(undefined);
      this._locatorHandlers.clear();
      await this._removeExposedBindings();
      await this._removeInitScripts();
      await this.setClientRequestInterceptor(undefined);
      await this._setServerRequestInterceptor(undefined);
      await this.setFileChooserIntercepted(false);
      await this.mainFrame().goto(metadata, "about:blank");
      this._emulatedSize = undefined;
      this._emulatedMedia = {};
      this._extraHTTPHeaders = undefined;
      this._interceptFileChooser = false;
      await Promise.all([this._delegate.updateEmulatedViewportSize(), this._delegate.updateEmulateMedia(), this._delegate.updateFileChooserInterception()]);
      await this._delegate.resetForReuse();
    }
    _didClose() {
      this._frameManager.dispose();
      this._frameThrottler.dispose();
      (0, _utils.assert)(this._closedState !== "closed", "Page closed twice");
      this._closedState = "closed";
      this.emit(Page.Events.Close);
      this._closedPromise.resolve();
      this.instrumentation.onPageClose(this);
      this.openScope.close(new _errors.TargetClosedError);
    }
    _didCrash() {
      this._frameManager.dispose();
      this._frameThrottler.dispose();
      this.emit(Page.Events.Crash);
      this._crashed = true;
      this.instrumentation.onPageClose(this);
      this.openScope.close(new Error("Page crashed"));
    }
    async _onFileChooserOpened(handle) {
      let multiple;
      try {
        multiple = await handle.evaluate((element) => !!element.multiple);
      } catch (e) {
        return;
      }
      if (!this.listenerCount(Page.Events.FileChooser)) {
        handle.dispose();
        return;
      }
      const fileChooser = new _fileChooser.FileChooser(this, handle, multiple);
      this.emit(Page.Events.FileChooser, fileChooser);
    }
    context() {
      return this._browserContext;
    }
    opener() {
      return this._opener;
    }
    mainFrame() {
      return this._frameManager.mainFrame();
    }
    frames() {
      return this._frameManager.frames();
    }
    setDefaultNavigationTimeout(timeout) {
      this._timeoutSettings.setDefaultNavigationTimeout(timeout);
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
    }
    async exposeBinding(name, needsHandle, playwrightBinding) {
      if (this._pageBindings.has(name))
        throw new Error(`Function "${name}" has been already registered`);
      if (this._browserContext._pageBindings.has(name))
        throw new Error(`Function "${name}" has been already registered in the browser context`);
      const binding = new PageBinding(name, playwrightBinding, needsHandle);
      this._pageBindings.set(name, binding);
      await this._delegate.exposeBinding(binding);
    }
    async _removeExposedBindings() {
      for (const key of this._pageBindings.keys()) {
        if (!key.startsWith("__pw"))
          this._pageBindings.delete(key);
      }
      await this._delegate.removeExposedBindings();
    }
    setExtraHTTPHeaders(headers) {
      this._extraHTTPHeaders = headers;
      return this._delegate.updateExtraHTTPHeaders();
    }
    extraHTTPHeaders() {
      return this._extraHTTPHeaders;
    }
    async _onBindingCalled(payload, context) {
      if (this._closedState === "closed")
        return;
      await PageBinding.dispatch(this, payload, context);
    }
    _addConsoleMessage(type, args, location2, text) {
      const message = new _console.ConsoleMessage(this, type, text, args, location2);
      const intercepted = this._frameManager.interceptConsoleMessage(message);
      if (intercepted) {
        args.forEach((arg) => arg.dispose());
        return;
      }
      this.emitOnContextOnceInitialized(_browserContext.BrowserContext.Events.Console, message);
    }
    async reload(metadata, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run((progress2) => this.mainFrame().raceNavigationAction(progress2, options, async () => {
        const [response] = await Promise.all([
          this.mainFrame()._waitForNavigation(progress2, true, options),
          this._delegate.reload()
        ]);
        return response;
      }), this._timeoutSettings.navigationTimeout(options));
    }
    async goBack(metadata, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run((progress2) => this.mainFrame().raceNavigationAction(progress2, options, async () => {
        let error;
        const waitPromise = this.mainFrame()._waitForNavigation(progress2, false, options).catch((e) => {
          error = e;
          return null;
        });
        const result = await this._delegate.goBack();
        if (!result)
          return null;
        const response = await waitPromise;
        if (error)
          throw error;
        return response;
      }), this._timeoutSettings.navigationTimeout(options));
    }
    async goForward(metadata, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run((progress2) => this.mainFrame().raceNavigationAction(progress2, options, async () => {
        let error;
        const waitPromise = this.mainFrame()._waitForNavigation(progress2, false, options).catch((e) => {
          error = e;
          return null;
        });
        const result = await this._delegate.goForward();
        if (!result)
          return null;
        const response = await waitPromise;
        if (error)
          throw error;
        return response;
      }), this._timeoutSettings.navigationTimeout(options));
    }
    registerLocatorHandler(selector) {
      const uid = ++this._lastLocatorHandlerUid;
      this._locatorHandlers.set(uid, {
        selector
      });
      return uid;
    }
    resolveLocatorHandler(uid) {
      const handler = this._locatorHandlers.get(uid);
      if (handler) {
        var _handler$resolved;
        (_handler$resolved = handler.resolved) === null || _handler$resolved === undefined || _handler$resolved.resolve();
        handler.resolved = undefined;
      }
    }
    async performLocatorHandlersCheckpoint(progress2) {
      if (this._locatorHandlerRunningCounter)
        return;
      for (const [uid, handler] of this._locatorHandlers) {
        if (!handler.resolved) {
          if (await this.mainFrame().isVisibleInternal(handler.selector, {
            strict: true
          })) {
            handler.resolved = new _manualPromise.ManualPromise;
            this.emit(Page.Events.LocatorHandlerTriggered, uid);
          }
        }
        if (handler.resolved) {
          ++this._locatorHandlerRunningCounter;
          progress2.log(`  found ${(0, _locatorGenerators.asLocator)(this.attribution.playwright.options.sdkLanguage, handler.selector)}, intercepting action to run the handler`);
          await this.openScope.race(handler.resolved).finally(() => --this._locatorHandlerRunningCounter);
          progress2.throwIfAborted();
          progress2.log(`  interception handler has finished, continuing`);
        }
      }
    }
    async emulateMedia(options) {
      if (options.media !== undefined)
        this._emulatedMedia.media = options.media;
      if (options.colorScheme !== undefined)
        this._emulatedMedia.colorScheme = options.colorScheme;
      if (options.reducedMotion !== undefined)
        this._emulatedMedia.reducedMotion = options.reducedMotion;
      if (options.forcedColors !== undefined)
        this._emulatedMedia.forcedColors = options.forcedColors;
      await this._delegate.updateEmulateMedia();
    }
    emulatedMedia() {
      var _contextOptions$color, _contextOptions$reduc, _contextOptions$force;
      const contextOptions = this._browserContext._options;
      return {
        media: this._emulatedMedia.media || "no-override",
        colorScheme: this._emulatedMedia.colorScheme !== undefined ? this._emulatedMedia.colorScheme : (_contextOptions$color = contextOptions.colorScheme) !== null && _contextOptions$color !== undefined ? _contextOptions$color : "light",
        reducedMotion: this._emulatedMedia.reducedMotion !== undefined ? this._emulatedMedia.reducedMotion : (_contextOptions$reduc = contextOptions.reducedMotion) !== null && _contextOptions$reduc !== undefined ? _contextOptions$reduc : "no-preference",
        forcedColors: this._emulatedMedia.forcedColors !== undefined ? this._emulatedMedia.forcedColors : (_contextOptions$force = contextOptions.forcedColors) !== null && _contextOptions$force !== undefined ? _contextOptions$force : "none"
      };
    }
    async setViewportSize(viewportSize) {
      this._emulatedSize = {
        viewport: {
          ...viewportSize
        },
        screen: {
          ...viewportSize
        }
      };
      await this._delegate.updateEmulatedViewportSize();
    }
    viewportSize() {
      var _this$emulatedSize;
      return ((_this$emulatedSize = this.emulatedSize()) === null || _this$emulatedSize === undefined ? undefined : _this$emulatedSize.viewport) || null;
    }
    emulatedSize() {
      if (this._emulatedSize)
        return this._emulatedSize;
      const contextOptions = this._browserContext._options;
      return contextOptions.viewport ? {
        viewport: contextOptions.viewport,
        screen: contextOptions.screen || contextOptions.viewport
      } : null;
    }
    async bringToFront() {
      await this._delegate.bringToFront();
    }
    async addInitScript(source) {
      this.initScripts.push(source);
      await this._delegate.addInitScript(source);
    }
    async _removeInitScripts() {
      this.initScripts.splice(0, this.initScripts.length);
      await this._delegate.removeInitScripts();
    }
    needsRequestInterception() {
      return !!this._clientRequestInterceptor || !!this._serverRequestInterceptor || !!this._browserContext._requestInterceptor;
    }
    async setClientRequestInterceptor(handler) {
      this._clientRequestInterceptor = handler;
      await this._delegate.updateRequestInterception();
    }
    async _setServerRequestInterceptor(handler) {
      this._serverRequestInterceptor = handler;
      await this._delegate.updateRequestInterception();
    }
    async expectScreenshot(metadata, options = {}) {
      const locator = options.locator;
      const rafrafScreenshot = locator ? async (progress2, timeout) => {
        return await locator.frame.rafrafTimeoutScreenshotElementWithProgress(progress2, locator.selector, timeout, options || {});
      } : async (progress2, timeout) => {
        await this.performLocatorHandlersCheckpoint(progress2);
        await this.mainFrame().rafrafTimeout(timeout);
        return await this._screenshotter.screenshotPage(progress2, options || {});
      };
      const comparator = (0, _comparators.getComparator)("image/png");
      const controller = new _progress.ProgressController(metadata, this);
      if (!options.expected && options.isNot)
        return {
          errorMessage: '"not" matcher requires expected result'
        };
      try {
        const format = (0, _screenshotter.validateScreenshotOptions)(options || {});
        if (format !== "png")
          throw new Error("Only PNG screenshots are supported");
      } catch (error) {
        return {
          errorMessage: error.message
        };
      }
      let intermediateResult = undefined;
      const areEqualScreenshots = (actual, expected, previous) => {
        const comparatorResult = actual && expected ? comparator(actual, expected, options) : undefined;
        if (comparatorResult !== undefined && !!comparatorResult === !!options.isNot)
          return true;
        if (comparatorResult)
          intermediateResult = {
            errorMessage: comparatorResult.errorMessage,
            diff: comparatorResult.diff,
            actual,
            previous
          };
        return false;
      };
      const callTimeout = this._timeoutSettings.timeout(options);
      return controller.run(async (progress2) => {
        let actual;
        let previous;
        const pollIntervals = [0, 100, 250, 500];
        progress2.log(`${metadata.apiName}${callTimeout ? ` with timeout ${callTimeout}ms` : ""}`);
        if (options.expected)
          progress2.log(`  verifying given screenshot expectation`);
        else
          progress2.log(`  generating new stable screenshot expectation`);
        let isFirstIteration = true;
        while (true) {
          var _pollIntervals$shift;
          progress2.throwIfAborted();
          if (this.isClosed())
            throw new Error("The page has closed");
          const screenshotTimeout = (_pollIntervals$shift = pollIntervals.shift()) !== null && _pollIntervals$shift !== undefined ? _pollIntervals$shift : 1000;
          if (screenshotTimeout)
            progress2.log(`waiting ${screenshotTimeout}ms before taking screenshot`);
          previous = actual;
          actual = await rafrafScreenshot(progress2, screenshotTimeout).catch((e) => {
            progress2.log(`failed to take screenshot - ` + e.message);
            return;
          });
          if (!actual)
            continue;
          const expectation = options.expected && isFirstIteration ? options.expected : previous;
          if (areEqualScreenshots(actual, expectation, previous))
            break;
          if (intermediateResult)
            progress2.log(intermediateResult.errorMessage);
          isFirstIteration = false;
        }
        if (!isFirstIteration)
          progress2.log(`captured a stable screenshot`);
        if (!options.expected)
          return {
            actual
          };
        if (isFirstIteration) {
          progress2.log(`screenshot matched expectation`);
          return {};
        }
        if (areEqualScreenshots(actual, options.expected, previous)) {
          progress2.log(`screenshot matched expectation`);
          return {};
        }
        throw new Error(intermediateResult.errorMessage);
      }, callTimeout).catch((e) => {
        if (js.isJavaScriptErrorInEvaluate(e) || (0, _selectorParser.isInvalidSelectorError)(e))
          throw e;
        return {
          log: e.message ? [...metadata.log, e.message] : metadata.log,
          ...intermediateResult,
          errorMessage: e.message
        };
      });
    }
    async screenshot(metadata, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run((progress2) => this._screenshotter.screenshotPage(progress2, options), this._timeoutSettings.timeout(options));
    }
    async close(metadata, options = {}) {
      if (this._closedState === "closed")
        return;
      if (options.reason)
        this._closeReason = options.reason;
      const runBeforeUnload = !!options.runBeforeUnload;
      if (this._closedState !== "closing") {
        this._closedState = "closing";
        await this._delegate.closePage(runBeforeUnload).catch((e) => _debugLogger.debugLogger.log("error", e));
      }
      if (!runBeforeUnload)
        await this._closedPromise;
      if (this._ownedContext)
        await this._ownedContext.close(options);
    }
    _setIsError(error) {
      this._pageIsError = error;
      this._frameManager.createDummyMainFrameIfNeeded();
    }
    isClosed() {
      return this._closedState === "closed";
    }
    hasCrashed() {
      return this._crashed;
    }
    isClosedOrClosingOrCrashed() {
      return this._closedState !== "open" || this._crashed;
    }
    _addWorker(workerId, worker) {
      this._workers.set(workerId, worker);
      this.emit(Page.Events.Worker, worker);
    }
    _removeWorker(workerId) {
      const worker = this._workers.get(workerId);
      if (!worker)
        return;
      worker.didClose();
      this._workers.delete(workerId);
    }
    _clearWorkers() {
      for (const [workerId, worker] of this._workers) {
        worker.didClose();
        this._workers.delete(workerId);
      }
    }
    async setFileChooserIntercepted(enabled) {
      this._interceptFileChooser = enabled;
      await this._delegate.updateFileChooserInterception();
    }
    fileChooserIntercepted() {
      return this._interceptFileChooser;
    }
    frameNavigatedToNewDocument(frame) {
      this.emit(Page.Events.InternalFrameNavigatedToNewDocument, frame);
      const url = frame.url();
      if (!url.startsWith("http"))
        return;
      const purl = network.parsedURL(url);
      if (purl)
        this._browserContext.addVisitedOrigin(purl.origin);
    }
    allBindings() {
      return [...this._browserContext._pageBindings.values(), ...this._pageBindings.values()];
    }
    getBinding(name) {
      return this._pageBindings.get(name) || this._browserContext._pageBindings.get(name);
    }
    setScreencastOptions(options) {
      this._delegate.setScreencastOptions(options).catch((e) => _debugLogger.debugLogger.log("error", e));
      this._frameThrottler.setThrottlingEnabled(!!options);
    }
    throttleScreencastFrameAck(ack) {
      this._frameThrottler.ack(ack);
    }
    temporarilyDisableTracingScreencastThrottling() {
      this._frameThrottler.recharge();
    }
    async hideHighlight() {
      await Promise.all(this.frames().map((frame) => frame.hideHighlight().catch(() => {
      })));
    }
    markAsServerSideOnly() {
      this._isServerSideOnly = true;
    }
  }
  exports.Page = Page;
  Page.Events = {
    Close: "close",
    Crash: "crash",
    Download: "download",
    FileChooser: "filechooser",
    FrameAttached: "frameattached",
    FrameDetached: "framedetached",
    InternalFrameNavigatedToNewDocument: "internalframenavigatedtonewdocument",
    LocatorHandlerTriggered: "locatorhandlertriggered",
    ScreencastFrame: "screencastframe",
    Video: "video",
    WebSocket: "websocket",
    Worker: "worker"
  };

  class Worker extends _instrumentation.SdkObject {
    constructor(parent, url) {
      super(parent, "worker");
      this._url = undefined;
      this._executionContextPromise = undefined;
      this._executionContextCallback = undefined;
      this._existingExecutionContext = null;
      this.openScope = new _utils.LongStandingScope;
      this._url = url;
      this._executionContextCallback = () => {
      };
      this._executionContextPromise = new Promise((x) => this._executionContextCallback = x);
    }
    _createExecutionContext(delegate) {
      this._existingExecutionContext = new js.ExecutionContext(this, delegate, "worker");
      this._executionContextCallback(this._existingExecutionContext);
    }
    url() {
      return this._url;
    }
    didClose() {
      if (this._existingExecutionContext)
        this._existingExecutionContext.contextDestroyed("Worker was closed");
      this.emit(Worker.Events.Close, this);
      this.openScope.close(new Error("Worker closed"));
    }
    async evaluateExpression(expression, isFunction, arg) {
      return js.evaluateExpression(await this._executionContextPromise, expression, {
        returnByValue: true,
        isFunction
      }, arg);
    }
    async evaluateExpressionHandle(expression, isFunction, arg) {
      return js.evaluateExpression(await this._executionContextPromise, expression, {
        returnByValue: false,
        isFunction
      }, arg);
    }
  }
  exports.Worker = Worker;
  Worker.Events = {
    Close: "close"
  };

  class PageBinding {
    constructor(name, playwrightFunction, needsHandle) {
      this.name = undefined;
      this.playwrightFunction = undefined;
      this.source = undefined;
      this.needsHandle = undefined;
      this.name = name;
      this.playwrightFunction = playwrightFunction;
      this.source = `(${addPageBinding.toString()})(${JSON.stringify(name)}, ${needsHandle}, (${_utilityScriptSerializers.source})())`;
      this.needsHandle = needsHandle;
    }
    static async dispatch(page, payload, context) {
      const {
        name,
        seq,
        serializedArgs
      } = JSON.parse(payload);
      try {
        (0, _utils.assert)(context.world);
        const binding = page.getBinding(name);
        let result;
        if (binding.needsHandle) {
          const handle = await context.evaluateHandle(takeHandle, {
            name,
            seq
          }).catch((e) => null);
          result = await binding.playwrightFunction({
            frame: context.frame,
            page,
            context: page._browserContext
          }, handle);
        } else {
          const args = serializedArgs.map((a) => (0, _utilityScriptSerializers.parseEvaluationResultValue)(a));
          result = await binding.playwrightFunction({
            frame: context.frame,
            page,
            context: page._browserContext
          }, ...args);
        }
        context.evaluate(deliverResult, {
          name,
          seq,
          result
        }).catch((e) => _debugLogger.debugLogger.log("error", e));
      } catch (error) {
        if ((0, _utils.isError)(error))
          context.evaluate(deliverError, {
            name,
            seq,
            message: error.message,
            stack: error.stack
          }).catch((e) => _debugLogger.debugLogger.log("error", e));
        else
          context.evaluate(deliverErrorValue, {
            name,
            seq,
            error
          }).catch((e) => _debugLogger.debugLogger.log("error", e));
      }
      function takeHandle(arg) {
        const handle = globalThis[arg.name]["handles"].get(arg.seq);
        globalThis[arg.name]["handles"].delete(arg.seq);
        return handle;
      }
      function deliverResult(arg) {
        globalThis[arg.name]["callbacks"].get(arg.seq).resolve(arg.result);
        globalThis[arg.name]["callbacks"].delete(arg.seq);
      }
      function deliverError(arg) {
        const error = new Error(arg.message);
        error.stack = arg.stack;
        globalThis[arg.name]["callbacks"].get(arg.seq).reject(error);
        globalThis[arg.name]["callbacks"].delete(arg.seq);
      }
      function deliverErrorValue(arg) {
        globalThis[arg.name]["callbacks"].get(arg.seq).reject(arg.error);
        globalThis[arg.name]["callbacks"].delete(arg.seq);
      }
    }
  }
  exports.PageBinding = PageBinding;

  class FrameThrottler {
    constructor(nonThrottledFrames, defaultInterval, throttlingInterval) {
      this._acks = [];
      this._defaultInterval = undefined;
      this._throttlingInterval = undefined;
      this._nonThrottledFrames = undefined;
      this._budget = undefined;
      this._throttlingEnabled = false;
      this._timeoutId = undefined;
      this._nonThrottledFrames = nonThrottledFrames;
      this._budget = nonThrottledFrames;
      this._defaultInterval = defaultInterval;
      this._throttlingInterval = throttlingInterval;
      this._tick();
    }
    dispose() {
      if (this._timeoutId) {
        clearTimeout(this._timeoutId);
        this._timeoutId = undefined;
      }
    }
    setThrottlingEnabled(enabled) {
      this._throttlingEnabled = enabled;
    }
    recharge() {
      for (const ack of this._acks)
        ack();
      this._acks = [];
      this._budget = this._nonThrottledFrames;
      if (this._timeoutId) {
        clearTimeout(this._timeoutId);
        this._tick();
      }
    }
    ack(ack) {
      if (!this._timeoutId) {
        ack();
        return;
      }
      this._acks.push(ack);
    }
    _tick() {
      const ack = this._acks.shift();
      if (ack) {
        --this._budget;
        ack();
      }
      if (this._throttlingEnabled && this._budget <= 0) {
        this._timeoutId = setTimeout(() => this._tick(), this._throttlingInterval);
      } else {
        this._timeoutId = setTimeout(() => this._tick(), this._defaultInterval);
      }
    }
  }
});

// node_modules/playwright-core/lib/protocol/debug.js
var require_debug6 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.slowMoActions = exports.pausesBeforeInputActions = exports.commandsWithTracingSnapshots = undefined;
  var slowMoActions = exports.slowMoActions = new Set(["Page.goBack", "Page.goForward", "Page.reload", "Page.keyboardDown", "Page.keyboardUp", "Page.keyboardInsertText", "Page.keyboardType", "Page.keyboardPress", "Page.mouseMove", "Page.mouseDown", "Page.mouseUp", "Page.mouseClick", "Page.mouseWheel", "Page.touchscreenTap", "Frame.blur", "Frame.check", "Frame.click", "Frame.dragAndDrop", "Frame.dblclick", "Frame.dispatchEvent", "Frame.fill", "Frame.focus", "Frame.goto", "Frame.hover", "Frame.press", "Frame.selectOption", "Frame.setInputFiles", "Frame.tap", "Frame.type", "Frame.uncheck", "ElementHandle.check", "ElementHandle.click", "ElementHandle.dblclick", "ElementHandle.dispatchEvent", "ElementHandle.fill", "ElementHandle.focus", "ElementHandle.hover", "ElementHandle.press", "ElementHandle.scrollIntoViewIfNeeded", "ElementHandle.selectOption", "ElementHandle.selectText", "ElementHandle.setInputFiles", "ElementHandle.tap", "ElementHandle.type", "ElementHandle.uncheck"]);
  var commandsWithTracingSnapshots = exports.commandsWithTracingSnapshots = new Set(["EventTarget.waitForEventInfo", "BrowserContext.waitForEventInfo", "Page.waitForEventInfo", "WebSocket.waitForEventInfo", "ElectronApplication.waitForEventInfo", "AndroidDevice.waitForEventInfo", "Page.emulateMedia", "Page.goBack", "Page.goForward", "Page.reload", "Page.expectScreenshot", "Page.screenshot", "Page.setViewportSize", "Page.keyboardDown", "Page.keyboardUp", "Page.keyboardInsertText", "Page.keyboardType", "Page.keyboardPress", "Page.mouseMove", "Page.mouseDown", "Page.mouseUp", "Page.mouseClick", "Page.mouseWheel", "Page.touchscreenTap", "Frame.evalOnSelector", "Frame.evalOnSelectorAll", "Frame.addScriptTag", "Frame.addStyleTag", "Frame.blur", "Frame.check", "Frame.click", "Frame.dragAndDrop", "Frame.dblclick", "Frame.dispatchEvent", "Frame.evaluateExpression", "Frame.evaluateExpressionHandle", "Frame.fill", "Frame.focus", "Frame.getAttribute", "Frame.goto", "Frame.hover", "Frame.innerHTML", "Frame.innerText", "Frame.inputValue", "Frame.isChecked", "Frame.isDisabled", "Frame.isEnabled", "Frame.isHidden", "Frame.isVisible", "Frame.isEditable", "Frame.press", "Frame.selectOption", "Frame.setContent", "Frame.setInputFiles", "Frame.tap", "Frame.textContent", "Frame.type", "Frame.uncheck", "Frame.waitForTimeout", "Frame.waitForFunction", "Frame.waitForSelector", "Frame.expect", "JSHandle.evaluateExpression", "ElementHandle.evaluateExpression", "JSHandle.evaluateExpressionHandle", "ElementHandle.evaluateExpressionHandle", "ElementHandle.evalOnSelector", "ElementHandle.evalOnSelectorAll", "ElementHandle.check", "ElementHandle.click", "ElementHandle.dblclick", "ElementHandle.dispatchEvent", "ElementHandle.fill", "ElementHandle.focus", "ElementHandle.hover", "ElementHandle.innerHTML", "ElementHandle.innerText", "ElementHandle.inputValue", "ElementHandle.isChecked", "ElementHandle.isDisabled", "ElementHandle.isEditable", "ElementHandle.isEnabled", "ElementHandle.isHidden", "ElementHandle.isVisible", "ElementHandle.press", "ElementHandle.screenshot", "ElementHandle.scrollIntoViewIfNeeded", "ElementHandle.selectOption", "ElementHandle.selectText", "ElementHandle.setInputFiles", "ElementHandle.tap", "ElementHandle.textContent", "ElementHandle.type", "ElementHandle.uncheck", "ElementHandle.waitForElementState", "ElementHandle.waitForSelector"]);
  var pausesBeforeInputActions = exports.pausesBeforeInputActions = new Set(["Frame.check", "Frame.click", "Frame.dragAndDrop", "Frame.dblclick", "Frame.fill", "Frame.hover", "Frame.press", "Frame.selectOption", "Frame.setInputFiles", "Frame.tap", "Frame.type", "Frame.uncheck", "ElementHandle.check", "ElementHandle.click", "ElementHandle.dblclick", "ElementHandle.fill", "ElementHandle.hover", "ElementHandle.press", "ElementHandle.selectOption", "ElementHandle.setInputFiles", "ElementHandle.tap", "ElementHandle.type", "ElementHandle.uncheck"]);
});

// node_modules/playwright-core/lib/server/debugger.js
var require_debugger = __commonJS((exports) => {
  var shouldPauseOnCall = function(sdkObject, metadata) {
    var _sdkObject$attributio;
    if (sdkObject.attribution.playwright.options.isServer)
      return false;
    if (!((_sdkObject$attributio = sdkObject.attribution.browser) !== null && _sdkObject$attributio !== undefined && _sdkObject$attributio.options.headful) && !(0, _utils.isUnderTest)())
      return false;
    return metadata.method === "pause";
  };
  var shouldPauseBeforeStep = function(metadata) {
    if (!metadata.apiName)
      return false;
    if (metadata.method === "close")
      return true;
    if (metadata.method === "waitForSelector" || metadata.method === "waitForEventInfo")
      return false;
    const step = metadata.type + "." + metadata.method;
    return _debug.commandsWithTracingSnapshots.has(step) && !_debug.pausesBeforeInputActions.has(metadata.type + "." + metadata.method);
  };
  var shouldSlowMo = function(metadata) {
    return _debug.slowMoActions.has(metadata.type + "." + metadata.method);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Debugger = undefined;
  exports.shouldSlowMo = shouldSlowMo;
  var _events = import.meta.require("events");
  var _utils = require_utils3();
  var _browserContext = require_browserContext();
  var _debug = require_debug6();
  var symbol = Symbol("Debugger");

  class Debugger extends _events.EventEmitter {
    constructor(context) {
      super();
      this._pauseOnNextStatement = false;
      this._pausedCallsMetadata = new Map;
      this._enabled = undefined;
      this._context = undefined;
      this._muted = false;
      this._slowMo = undefined;
      this._context = context;
      this._context[symbol] = this;
      this._enabled = (0, _utils.debugMode)() === "inspector";
      if (this._enabled)
        this.pauseOnNextStatement();
      context.instrumentation.addListener(this, context);
      this._context.once(_browserContext.BrowserContext.Events.Close, () => {
        this._context.instrumentation.removeListener(this);
      });
      this._slowMo = this._context._browser.options.slowMo;
    }
    async setMuted(muted) {
      this._muted = muted;
    }
    async onBeforeCall(sdkObject, metadata) {
      if (this._muted)
        return;
      if (shouldPauseOnCall(sdkObject, metadata) || this._pauseOnNextStatement && shouldPauseBeforeStep(metadata))
        await this.pause(sdkObject, metadata);
    }
    async _doSlowMo() {
      await new Promise((f) => setTimeout(f, this._slowMo));
    }
    async onAfterCall(sdkObject, metadata) {
      if (this._slowMo && shouldSlowMo(metadata))
        await this._doSlowMo();
    }
    async onBeforeInputAction(sdkObject, metadata) {
      if (this._muted)
        return;
      if (this._enabled && this._pauseOnNextStatement)
        await this.pause(sdkObject, metadata);
    }
    async pause(sdkObject, metadata) {
      if (this._muted)
        return;
      this._enabled = true;
      metadata.pauseStartTime = (0, _utils.monotonicTime)();
      const result = new Promise((resolve) => {
        this._pausedCallsMetadata.set(metadata, {
          resolve,
          sdkObject
        });
      });
      this.emit(Debugger.Events.PausedStateChanged);
      return result;
    }
    resume(step) {
      if (!this.isPaused())
        return;
      this._pauseOnNextStatement = step;
      const endTime = (0, _utils.monotonicTime)();
      for (const [metadata, {
        resolve
      }] of this._pausedCallsMetadata) {
        metadata.pauseEndTime = endTime;
        resolve();
      }
      this._pausedCallsMetadata.clear();
      this.emit(Debugger.Events.PausedStateChanged);
    }
    pauseOnNextStatement() {
      this._pauseOnNextStatement = true;
    }
    isPaused(metadata) {
      if (metadata)
        return this._pausedCallsMetadata.has(metadata);
      return !!this._pausedCallsMetadata.size;
    }
    pausedDetails() {
      const result = [];
      for (const [metadata, {
        sdkObject
      }] of this._pausedCallsMetadata)
        result.push({
          metadata,
          sdkObject
        });
      return result;
    }
  }
  exports.Debugger = Debugger;
  Debugger.Events = {
    PausedStateChanged: "pausedstatechanged"
  };
});

// node_modules/playwright-core/lib/server/artifact.js
var require_artifact = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Artifact = undefined;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _utils = require_utils3();
  var _manualPromise = require_manualPromise();
  var _instrumentation = require_instrumentation();
  var _errors = require_errors();

  class Artifact extends _instrumentation.SdkObject {
    constructor(parent, localPath, unaccessibleErrorMessage, cancelCallback) {
      super(parent, "artifact");
      this._localPath = undefined;
      this._unaccessibleErrorMessage = undefined;
      this._cancelCallback = undefined;
      this._finishedPromise = new _manualPromise.ManualPromise;
      this._saveCallbacks = [];
      this._finished = false;
      this._deleted = false;
      this._failureError = undefined;
      this._localPath = localPath;
      this._unaccessibleErrorMessage = unaccessibleErrorMessage;
      this._cancelCallback = cancelCallback;
    }
    finishedPromise() {
      return this._finishedPromise;
    }
    localPath() {
      return this._localPath;
    }
    async localPathAfterFinished() {
      if (this._unaccessibleErrorMessage)
        throw new Error(this._unaccessibleErrorMessage);
      await this._finishedPromise;
      if (this._failureError)
        throw this._failureError;
      return this._localPath;
    }
    saveAs(saveCallback) {
      if (this._unaccessibleErrorMessage)
        throw new Error(this._unaccessibleErrorMessage);
      if (this._deleted)
        throw new Error(`File already deleted. Save before deleting.`);
      if (this._failureError)
        throw this._failureError;
      if (this._finished) {
        saveCallback(this._localPath).catch(() => {
        });
        return;
      }
      this._saveCallbacks.push(saveCallback);
    }
    async failureError() {
      var _this$_failureError;
      if (this._unaccessibleErrorMessage)
        return this._unaccessibleErrorMessage;
      await this._finishedPromise;
      return ((_this$_failureError = this._failureError) === null || _this$_failureError === undefined ? undefined : _this$_failureError.message) || null;
    }
    async cancel() {
      (0, _utils.assert)(this._cancelCallback !== undefined);
      return this._cancelCallback();
    }
    async delete() {
      if (this._unaccessibleErrorMessage)
        return;
      const fileName = await this.localPathAfterFinished();
      if (this._deleted)
        return;
      this._deleted = true;
      if (fileName)
        await _fs.default.promises.unlink(fileName).catch((e) => {
        });
    }
    async deleteOnContextClose() {
      if (this._deleted)
        return;
      this._deleted = true;
      if (!this._unaccessibleErrorMessage)
        await _fs.default.promises.unlink(this._localPath).catch((e) => {
        });
      await this.reportFinished(new _errors.TargetClosedError);
    }
    async reportFinished(error) {
      if (this._finished)
        return;
      this._finished = true;
      this._failureError = error;
      if (error) {
        for (const callback of this._saveCallbacks)
          await callback("", error);
      } else {
        for (const callback of this._saveCallbacks)
          await callback(this._localPath);
      }
      this._saveCallbacks = [];
      this._finishedPromise.resolve();
    }
  }
  exports.Artifact = Artifact;
});

// node_modules/playwright-core/lib/server/har/harTracer.js
var require_harTracer = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var createHarEntry = function(method, url, frameref, options) {
    const harEntry = {
      _frameref: options.includeTraceInfo ? frameref : undefined,
      _monotonicTime: options.includeTraceInfo ? (0, _utils.monotonicTime)() : undefined,
      startedDateTime: new Date().toISOString(),
      time: -1,
      request: {
        method,
        url: url.toString(),
        httpVersion: FALLBACK_HTTP_VERSION,
        cookies: [],
        headers: [],
        queryString: [...url.searchParams].map((e) => ({
          name: e[0],
          value: e[1]
        })),
        headersSize: -1,
        bodySize: -1
      },
      response: {
        status: -1,
        statusText: "",
        httpVersion: FALLBACK_HTTP_VERSION,
        cookies: [],
        headers: [],
        content: {
          size: -1,
          mimeType: "x-unknown"
        },
        headersSize: -1,
        bodySize: -1,
        redirectURL: "",
        _transferSize: options.omitSizes ? undefined : -1
      },
      cache: {},
      timings: {
        send: -1,
        wait: -1,
        receive: -1
      }
    };
    return harEntry;
  };
  var parseCookie = function(c) {
    const cookie = {
      name: "",
      value: ""
    };
    let first = true;
    for (const pair of c.split(/; */)) {
      const indexOfEquals = pair.indexOf("=");
      const name = indexOfEquals !== -1 ? pair.substr(0, indexOfEquals).trim() : pair.trim();
      const value = indexOfEquals !== -1 ? pair.substr(indexOfEquals + 1, pair.length).trim() : "";
      if (first) {
        first = false;
        cookie.name = name;
        cookie.value = value;
        continue;
      }
      if (name === "Domain")
        cookie.domain = value;
      if (name === "Expires")
        cookie.expires = safeDateToISOString(value);
      if (name === "HttpOnly")
        cookie.httpOnly = true;
      if (name === "Max-Age")
        cookie.expires = safeDateToISOString(Date.now() + +value * 1000);
      if (name === "Path")
        cookie.path = value;
      if (name === "SameSite")
        cookie.sameSite = value;
      if (name === "Secure")
        cookie.secure = true;
    }
    return cookie;
  };
  var safeDateToISOString = function(value) {
    try {
      return new Date(value).toISOString();
    } catch (e) {
    }
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.HarTracer = undefined;
  var _browserContext = require_browserContext();
  var _fetch = require_fetch();
  var _helper = require_helper();
  var network = _interopRequireWildcard(require_network2());
  var _utils = require_utils3();
  var _eventsHelper = require_eventsHelper();
  var _utilsBundle = require_utilsBundle();
  var _manualPromise = require_manualPromise();
  var _userAgent = require_userAgent();
  var _network2 = require_network();
  var _frames = require_frames();
  var _mimeType = require_mimeType();
  var FALLBACK_HTTP_VERSION = "HTTP/1.1";

  class HarTracer {
    constructor(context, page, delegate, options) {
      this._context = undefined;
      this._barrierPromises = new Set;
      this._delegate = undefined;
      this._options = undefined;
      this._pageEntries = new Map;
      this._eventListeners = [];
      this._started = false;
      this._entrySymbol = undefined;
      this._baseURL = undefined;
      this._page = undefined;
      this._context = context;
      this._page = page;
      this._delegate = delegate;
      this._options = options;
      if (options.slimMode) {
        options.omitSecurityDetails = true;
        options.omitCookies = true;
        options.omitTiming = true;
        options.omitServerIP = true;
        options.omitSizes = true;
        options.omitPages = true;
      }
      this._entrySymbol = Symbol("requestHarEntry");
      this._baseURL = context instanceof _fetch.APIRequestContext ? context._defaultOptions().baseURL : context._options.baseURL;
    }
    start(options) {
      if (this._started)
        return;
      this._options.omitScripts = options.omitScripts;
      this._started = true;
      const apiRequest = this._context instanceof _fetch.APIRequestContext ? this._context : this._context.fetchRequest;
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(apiRequest, _fetch.APIRequestContext.Events.Request, (event) => this._onAPIRequest(event)), _eventsHelper.eventsHelper.addEventListener(apiRequest, _fetch.APIRequestContext.Events.RequestFinished, (event) => this._onAPIRequestFinished(event))];
      if (this._context instanceof _browserContext.BrowserContext) {
        this._eventListeners.push(_eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.Page, (page) => this._createPageEntryIfNeeded(page)), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.Request, (request) => this._onRequest(request)), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.RequestFinished, ({
          request,
          response
        }) => this._onRequestFinished(request, response).catch(() => {
        })), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.RequestFailed, (request) => this._onRequestFailed(request)), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.Response, (response) => this._onResponse(response)), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.RequestAborted, (request) => this._onRequestAborted(request)), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.RequestFulfilled, (request) => this._onRequestFulfilled(request)), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.RequestContinued, (request) => this._onRequestContinued(request)));
      }
    }
    _shouldIncludeEntryWithUrl(urlString) {
      return !this._options.urlFilter || (0, _network2.urlMatches)(this._baseURL, urlString, this._options.urlFilter);
    }
    _entryForRequest(request) {
      return request[this._entrySymbol];
    }
    _createPageEntryIfNeeded(page) {
      if (!page)
        return;
      if (this._options.omitPages)
        return;
      if (this._page && page !== this._page)
        return;
      let pageEntry = this._pageEntries.get(page);
      if (!pageEntry) {
        const date = new Date;
        pageEntry = {
          startedDateTime: date.toISOString(),
          id: page.guid,
          title: "",
          pageTimings: this._options.omitTiming ? {} : {
            onContentLoad: -1,
            onLoad: -1
          }
        };
        pageEntry[startedDateSymbol] = date;
        page.mainFrame().on(_frames.Frame.Events.AddLifecycle, (event) => {
          if (event === "load")
            this._onLoad(page, pageEntry);
          if (event === "domcontentloaded")
            this._onDOMContentLoaded(page, pageEntry);
        });
        this._pageEntries.set(page, pageEntry);
      }
      return pageEntry;
    }
    _onDOMContentLoaded(page, pageEntry) {
      const promise = page.mainFrame().evaluateExpression(String(() => {
        return {
          title: document.title,
          domContentLoaded: performance.timing.domContentLoadedEventStart
        };
      }), {
        isFunction: true,
        world: "utility"
      }).then((result) => {
        pageEntry.title = result.title;
        if (!this._options.omitTiming)
          pageEntry.pageTimings.onContentLoad = result.domContentLoaded;
      }).catch(() => {
      });
      this._addBarrier(page, promise);
    }
    _onLoad(page, pageEntry) {
      const promise = page.mainFrame().evaluateExpression(String(() => {
        return {
          title: document.title,
          loaded: performance.timing.loadEventStart
        };
      }), {
        isFunction: true,
        world: "utility"
      }).then((result) => {
        pageEntry.title = result.title;
        if (!this._options.omitTiming)
          pageEntry.pageTimings.onLoad = result.loaded;
      }).catch(() => {
      });
      this._addBarrier(page, promise);
    }
    _addBarrier(target, promise) {
      if (!target)
        return null;
      if (!this._options.waitForContentOnStop)
        return;
      const race = target.openScope.safeRace(promise);
      this._barrierPromises.add(race);
      race.then(() => this._barrierPromises.delete(race));
    }
    _onAPIRequest(event) {
      var _event$postData;
      if (!this._shouldIncludeEntryWithUrl(event.url.toString()))
        return;
      const harEntry = createHarEntry(event.method, event.url, undefined, this._options);
      harEntry._apiRequest = true;
      if (!this._options.omitCookies)
        harEntry.request.cookies = event.cookies;
      harEntry.request.headers = Object.entries(event.headers).map(([name, value]) => ({
        name,
        value
      }));
      harEntry.request.postData = this._postDataForBuffer(event.postData || null, event.headers["content-type"], this._options.content);
      if (!this._options.omitSizes)
        harEntry.request.bodySize = ((_event$postData = event.postData) === null || _event$postData === undefined ? undefined : _event$postData.length) || 0;
      event[this._entrySymbol] = harEntry;
      if (this._started)
        this._delegate.onEntryStarted(harEntry);
    }
    _onAPIRequestFinished(event) {
      const harEntry = this._entryForRequest(event.requestEvent);
      if (!harEntry)
        return;
      harEntry.response.status = event.statusCode;
      harEntry.response.statusText = event.statusMessage;
      harEntry.response.httpVersion = event.httpVersion;
      harEntry.response.redirectURL = event.headers.location || "";
      for (let i = 0;i < event.rawHeaders.length; i += 2) {
        harEntry.response.headers.push({
          name: event.rawHeaders[i],
          value: event.rawHeaders[i + 1]
        });
      }
      harEntry.response.cookies = this._options.omitCookies ? [] : event.cookies.map((c) => {
        return {
          ...c,
          expires: c.expires === -1 ? undefined : safeDateToISOString(c.expires)
        };
      });
      const content = harEntry.response.content;
      const contentType = event.headers["content-type"];
      if (contentType)
        content.mimeType = contentType;
      this._storeResponseContent(event.body, content, "other");
      if (this._started)
        this._delegate.onEntryFinished(harEntry);
    }
    _onRequest(request) {
      var _request$frame, _request$frame2;
      if (!this._shouldIncludeEntryWithUrl(request.url()))
        return;
      const page = (_request$frame = request.frame()) === null || _request$frame === undefined ? undefined : _request$frame._page;
      if (this._page && page !== this._page)
        return;
      const url = network.parsedURL(request.url());
      if (!url)
        return;
      const pageEntry = this._createPageEntryIfNeeded(page);
      const harEntry = createHarEntry(request.method(), url, (_request$frame2 = request.frame()) === null || _request$frame2 === undefined ? undefined : _request$frame2.guid, this._options);
      if (pageEntry)
        harEntry.pageref = pageEntry.id;
      this._recordRequestHeadersAndCookies(harEntry, request.headers());
      harEntry.request.postData = this._postDataForRequest(request, this._options.content);
      if (!this._options.omitSizes)
        harEntry.request.bodySize = request.bodySize();
      if (request.redirectedFrom()) {
        const fromEntry = this._entryForRequest(request.redirectedFrom());
        if (fromEntry)
          fromEntry.response.redirectURL = request.url();
      }
      request[this._entrySymbol] = harEntry;
      (0, _utils.assert)(this._started);
      this._delegate.onEntryStarted(harEntry);
    }
    _recordRequestHeadersAndCookies(harEntry, headers) {
      if (!this._options.omitCookies) {
        harEntry.request.cookies = [];
        for (const header of headers.filter((header2) => header2.name.toLowerCase() === "cookie"))
          harEntry.request.cookies.push(...header.value.split(";").map(parseCookie));
      }
      harEntry.request.headers = headers;
    }
    _recordRequestOverrides(harEntry, request) {
      if (!request._hasOverrides() || !this._options.recordRequestOverrides)
        return;
      harEntry.request.method = request.method();
      harEntry.request.url = request.url();
      harEntry.request.postData = this._postDataForRequest(request, this._options.content);
      this._recordRequestHeadersAndCookies(harEntry, request.headers());
    }
    async _onRequestFinished(request, response) {
      var _request$frame3;
      if (!response)
        return;
      const harEntry = this._entryForRequest(request);
      if (!harEntry)
        return;
      const page = (_request$frame3 = request.frame()) === null || _request$frame3 === undefined ? undefined : _request$frame3._page;
      if (!this._options.omitServerIP) {
        this._addBarrier(page || request.serviceWorker(), response.serverAddr().then((server) => {
          if (server !== null && server !== undefined && server.ipAddress)
            harEntry.serverIPAddress = server.ipAddress;
          if (server !== null && server !== undefined && server.port)
            harEntry._serverPort = server.port;
        }));
      }
      if (!this._options.omitSecurityDetails) {
        this._addBarrier(page || request.serviceWorker(), response.securityDetails().then((details) => {
          if (details)
            harEntry._securityDetails = details;
        }));
      }
      const httpVersion = response.httpVersion();
      harEntry.request.httpVersion = httpVersion;
      harEntry.response.httpVersion = httpVersion;
      const compressionCalculationBarrier = this._options.omitSizes ? undefined : {
        _encodedBodySize: -1,
        _decodedBodySize: -1,
        barrier: new _manualPromise.ManualPromise,
        _check: function() {
          if (this._encodedBodySize !== -1 && this._decodedBodySize !== -1) {
            harEntry.response.content.compression = Math.max(0, this._decodedBodySize - this._encodedBodySize);
            this.barrier.resolve();
          }
        },
        setEncodedBodySize: function(encodedBodySize) {
          this._encodedBodySize = encodedBodySize;
          this._check();
        },
        setDecodedBodySize: function(decodedBodySize) {
          this._decodedBodySize = decodedBodySize;
          this._check();
        }
      };
      if (compressionCalculationBarrier)
        this._addBarrier(page || request.serviceWorker(), compressionCalculationBarrier.barrier);
      const promise = response.body().then((buffer) => {
        if (this._options.omitScripts && request.resourceType() === "script") {
          compressionCalculationBarrier === null || compressionCalculationBarrier === undefined || compressionCalculationBarrier.setDecodedBodySize(0);
          return;
        }
        const content = harEntry.response.content;
        compressionCalculationBarrier === null || compressionCalculationBarrier === undefined || compressionCalculationBarrier.setDecodedBodySize(buffer.length);
        this._storeResponseContent(buffer, content, request.resourceType());
      }).catch(() => {
        compressionCalculationBarrier === null || compressionCalculationBarrier === undefined || compressionCalculationBarrier.setDecodedBodySize(0);
      }).then(() => {
        if (this._started)
          this._delegate.onEntryFinished(harEntry);
      });
      this._addBarrier(page || request.serviceWorker(), promise);
      const timing = response.timing();
      harEntry.timings.receive = response.request()._responseEndTiming !== -1 ? _helper.helper.millisToRoundishMillis(response.request()._responseEndTiming - timing.responseStart) : -1;
      this._computeHarEntryTotalTime(harEntry);
      if (!this._options.omitSizes) {
        this._addBarrier(page || request.serviceWorker(), response.sizes().then((sizes) => {
          harEntry.response.bodySize = sizes.responseBodySize;
          harEntry.response.headersSize = sizes.responseHeadersSize;
          harEntry.response._transferSize = sizes.transferSize;
          harEntry.request.headersSize = sizes.requestHeadersSize;
          compressionCalculationBarrier === null || compressionCalculationBarrier === undefined || compressionCalculationBarrier.setEncodedBodySize(sizes.responseBodySize);
        }));
      }
    }
    async _onRequestFailed(request) {
      const harEntry = this._entryForRequest(request);
      if (!harEntry)
        return;
      if (request._failureText !== null)
        harEntry.response._failureText = request._failureText;
      this._recordRequestOverrides(harEntry, request);
      if (this._started)
        this._delegate.onEntryFinished(harEntry);
    }
    _onRequestAborted(request) {
      const harEntry = this._entryForRequest(request);
      if (harEntry)
        harEntry._wasAborted = true;
    }
    _onRequestFulfilled(request) {
      const harEntry = this._entryForRequest(request);
      if (harEntry)
        harEntry._wasFulfilled = true;
    }
    _onRequestContinued(request) {
      const harEntry = this._entryForRequest(request);
      if (harEntry)
        harEntry._wasContinued = true;
    }
    _storeResponseContent(buffer, content, resourceType) {
      if (!buffer) {
        content.size = 0;
        return;
      }
      if (!this._options.omitSizes)
        content.size = buffer.length;
      if (this._options.content === "embed") {
        if ((0, _mimeType.isTextualMimeType)(content.mimeType) && resourceType !== "font") {
          content.text = buffer.toString();
        } else {
          content.text = buffer.toString("base64");
          content.encoding = "base64";
        }
      } else if (this._options.content === "attach") {
        const sha1 = (0, _utils.calculateSha1)(buffer) + "." + (_utilsBundle.mime.getExtension(content.mimeType) || "dat");
        if (this._options.includeTraceInfo)
          content._sha1 = sha1;
        else
          content._file = sha1;
        if (this._started)
          this._delegate.onContentBlob(sha1, buffer);
      }
    }
    _onResponse(response) {
      var _response$frame;
      const harEntry = this._entryForRequest(response.request());
      if (!harEntry)
        return;
      const page = (_response$frame = response.frame()) === null || _response$frame === undefined ? undefined : _response$frame._page;
      const pageEntry = this._createPageEntryIfNeeded(page);
      const request = response.request();
      if (this._options.includeTraceInfo)
        harEntry._monotonicTime = (0, _utils.monotonicTime)();
      harEntry.response = {
        status: response.status(),
        statusText: response.statusText(),
        httpVersion: response.httpVersion(),
        cookies: [],
        headers: [],
        content: {
          size: -1,
          mimeType: "x-unknown"
        },
        headersSize: -1,
        bodySize: -1,
        redirectURL: "",
        _transferSize: this._options.omitSizes ? undefined : -1
      };
      if (!this._options.omitTiming) {
        const startDateTime = pageEntry ? pageEntry[startedDateSymbol].valueOf() : 0;
        const timing = response.timing();
        if (pageEntry && startDateTime > timing.startTime)
          pageEntry.startedDateTime = new Date(timing.startTime).toISOString();
        const dns = timing.domainLookupEnd !== -1 ? _helper.helper.millisToRoundishMillis(timing.domainLookupEnd - timing.domainLookupStart) : -1;
        const connect = timing.connectEnd !== -1 ? _helper.helper.millisToRoundishMillis(timing.connectEnd - timing.connectStart) : -1;
        const ssl = timing.connectEnd !== -1 ? _helper.helper.millisToRoundishMillis(timing.connectEnd - timing.secureConnectionStart) : -1;
        const wait = timing.responseStart !== -1 ? _helper.helper.millisToRoundishMillis(timing.responseStart - timing.requestStart) : -1;
        const receive = -1;
        harEntry.timings = {
          dns,
          connect,
          ssl,
          send: 0,
          wait,
          receive
        };
        this._computeHarEntryTotalTime(harEntry);
      }
      this._recordRequestOverrides(harEntry, request);
      this._addBarrier(page || request.serviceWorker(), request.rawRequestHeaders().then((headers) => {
        this._recordRequestHeadersAndCookies(harEntry, headers);
      }));
      this._recordResponseHeaders(harEntry, response.headers());
      this._addBarrier(page || request.serviceWorker(), response.rawResponseHeaders().then((headers) => {
        this._recordResponseHeaders(harEntry, headers);
      }));
    }
    _recordResponseHeaders(harEntry, headers) {
      if (!this._options.omitCookies) {
        harEntry.response.cookies = headers.filter((header) => header.name.toLowerCase() === "set-cookie").map((header) => parseCookie(header.value));
      }
      harEntry.response.headers = headers;
      const contentType = headers.find((header) => header.name.toLowerCase() === "content-type");
      if (contentType)
        harEntry.response.content.mimeType = contentType.value;
    }
    _computeHarEntryTotalTime(harEntry) {
      harEntry.time = [harEntry.timings.dns, harEntry.timings.connect, harEntry.timings.ssl, harEntry.timings.wait, harEntry.timings.receive].reduce((pre, cur) => (cur || -1) > 0 ? cur + pre : pre, 0);
    }
    async flush() {
      await Promise.all(this._barrierPromises);
    }
    stop() {
      this._started = false;
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      this._barrierPromises.clear();
      const context = this._context instanceof _browserContext.BrowserContext ? this._context : undefined;
      const log = {
        version: "1.2",
        creator: {
          name: "Playwright",
          version: (0, _userAgent.getPlaywrightVersion)()
        },
        browser: {
          name: (context === null || context === undefined ? undefined : context._browser.options.name) || "",
          version: (context === null || context === undefined ? undefined : context._browser.version()) || ""
        },
        pages: this._pageEntries.size ? Array.from(this._pageEntries.values()) : undefined,
        entries: []
      };
      if (!this._options.omitTiming) {
        for (const pageEntry of log.pages || []) {
          const startDateTime = pageEntry[startedDateSymbol].valueOf();
          if (typeof pageEntry.pageTimings.onContentLoad === "number" && pageEntry.pageTimings.onContentLoad >= 0)
            pageEntry.pageTimings.onContentLoad -= startDateTime;
          else
            pageEntry.pageTimings.onContentLoad = -1;
          if (typeof pageEntry.pageTimings.onLoad === "number" && pageEntry.pageTimings.onLoad >= 0)
            pageEntry.pageTimings.onLoad -= startDateTime;
          else
            pageEntry.pageTimings.onLoad = -1;
        }
      }
      this._pageEntries.clear();
      return log;
    }
    _postDataForRequest(request, content) {
      const postData = request.postDataBuffer();
      if (!postData)
        return;
      const contentType = request.headerValue("content-type");
      return this._postDataForBuffer(postData, contentType, content);
    }
    _postDataForBuffer(postData, contentType, content) {
      var _contentType;
      if (!postData)
        return;
      (_contentType = contentType) !== null && _contentType !== undefined || (contentType = "application/octet-stream");
      const result = {
        mimeType: contentType,
        text: "",
        params: []
      };
      if (content === "embed" && contentType !== "application/octet-stream")
        result.text = postData.toString();
      if (content === "attach") {
        const sha1 = (0, _utils.calculateSha1)(postData) + "." + (_utilsBundle.mime.getExtension(contentType) || "dat");
        if (this._options.includeTraceInfo)
          result._sha1 = sha1;
        else
          result._file = sha1;
        this._delegate.onContentBlob(sha1, postData);
      }
      if (contentType === "application/x-www-form-urlencoded") {
        const parsed = new URLSearchParams(postData.toString());
        for (const [name, value] of parsed.entries())
          result.params.push({
            name,
            value
          });
      }
      return result;
    }
  }
  exports.HarTracer = HarTracer;
  var startedDateSymbol = Symbol("startedDate");
});

// node_modules/playwright-core/lib/server/trace/recorder/snapshotterInjected.js
var require_snapshotterInjected = __commonJS((exports) => {
  var frameSnapshotStreamer = function(snapshotStreamer, removeNoScript) {
    if (window[snapshotStreamer])
      return;
    const kShadowAttribute = "__playwright_shadow_root_";
    const kValueAttribute = "__playwright_value_";
    const kCheckedAttribute = "__playwright_checked_";
    const kSelectedAttribute = "__playwright_selected_";
    const kScrollTopAttribute = "__playwright_scroll_top_";
    const kScrollLeftAttribute = "__playwright_scroll_left_";
    const kStyleSheetAttribute = "__playwright_style_sheet_";
    const kTargetAttribute = "__playwright_target__";
    const kCustomElementsAttribute = "__playwright_custom_elements__";
    const kCurrentSrcAttribute = "__playwright_current_src__";
    const kSnapshotFrameId = Symbol("__playwright_snapshot_frameid_");
    const kCachedData = Symbol("__playwright_snapshot_cache_");
    const kEndOfList = Symbol("__playwright_end_of_list_");
    function resetCachedData(obj) {
      delete obj[kCachedData];
    }
    function ensureCachedData(obj) {
      if (!obj[kCachedData])
        obj[kCachedData] = {};
      return obj[kCachedData];
    }
    function removeHash(url) {
      try {
        const u = new URL(url);
        u.hash = "";
        return u.toString();
      } catch (e) {
        return url;
      }
    }

    class Streamer {
      constructor() {
        this._lastSnapshotNumber = 0;
        this._staleStyleSheets = new Set;
        this._readingStyleSheet = false;
        this._fakeBase = undefined;
        this._observer = undefined;
        const invalidateCSSGroupingRule = (rule) => {
          if (rule.parentStyleSheet)
            this._invalidateStyleSheet(rule.parentStyleSheet);
        };
        this._interceptNativeMethod(window.CSSStyleSheet.prototype, "insertRule", (sheet) => this._invalidateStyleSheet(sheet));
        this._interceptNativeMethod(window.CSSStyleSheet.prototype, "deleteRule", (sheet) => this._invalidateStyleSheet(sheet));
        this._interceptNativeMethod(window.CSSStyleSheet.prototype, "addRule", (sheet) => this._invalidateStyleSheet(sheet));
        this._interceptNativeMethod(window.CSSStyleSheet.prototype, "removeRule", (sheet) => this._invalidateStyleSheet(sheet));
        this._interceptNativeGetter(window.CSSStyleSheet.prototype, "rules", (sheet) => this._invalidateStyleSheet(sheet));
        this._interceptNativeGetter(window.CSSStyleSheet.prototype, "cssRules", (sheet) => this._invalidateStyleSheet(sheet));
        this._interceptNativeMethod(window.CSSStyleSheet.prototype, "replaceSync", (sheet) => this._invalidateStyleSheet(sheet));
        this._interceptNativeMethod(window.CSSGroupingRule.prototype, "insertRule", invalidateCSSGroupingRule);
        this._interceptNativeMethod(window.CSSGroupingRule.prototype, "deleteRule", invalidateCSSGroupingRule);
        this._interceptNativeGetter(window.CSSGroupingRule.prototype, "cssRules", invalidateCSSGroupingRule);
        this._interceptNativeAsyncMethod(window.CSSStyleSheet.prototype, "replace", (sheet) => this._invalidateStyleSheet(sheet));
        this._fakeBase = document.createElement("base");
        this._observer = new MutationObserver((list) => this._handleMutations(list));
        const observerConfig = {
          attributes: true,
          subtree: true
        };
        this._observer.observe(document, observerConfig);
        this._refreshListenersWhenNeeded();
      }
      _refreshListenersWhenNeeded() {
        this._refreshListeners();
        const customEventName = "__playwright_snapshotter_global_listeners_check__";
        let seenEvent = false;
        const handleCustomEvent = () => seenEvent = true;
        window.addEventListener(customEventName, handleCustomEvent);
        const observer = new MutationObserver((entries) => {
          const newDocumentElement = entries.some((entry) => Array.from(entry.addedNodes).includes(document.documentElement));
          if (newDocumentElement) {
            seenEvent = false;
            window.dispatchEvent(new CustomEvent(customEventName));
            if (!seenEvent) {
              window.addEventListener(customEventName, handleCustomEvent);
              this._refreshListeners();
            }
          }
        });
        observer.observe(document, {
          childList: true
        });
      }
      _refreshListeners() {
        document.addEventListener("__playwright_target__", (event) => {
          if (!event.detail)
            return;
          const callId = event.detail;
          event.composedPath()[0].__playwright_target__ = callId;
        });
      }
      _interceptNativeMethod(obj, method, cb) {
        const native = obj[method];
        if (!native)
          return;
        obj[method] = function(...args) {
          const result = native.call(this, ...args);
          cb(this, result);
          return result;
        };
      }
      _interceptNativeAsyncMethod(obj, method, cb) {
        const native = obj[method];
        if (!native)
          return;
        obj[method] = async function(...args) {
          const result = await native.call(this, ...args);
          cb(this, result);
          return result;
        };
      }
      _interceptNativeGetter(obj, prop, cb) {
        const descriptor = Object.getOwnPropertyDescriptor(obj, prop);
        Object.defineProperty(obj, prop, {
          ...descriptor,
          get: function() {
            const result = descriptor.get.call(this);
            cb(this, result);
            return result;
          }
        });
      }
      _handleMutations(list) {
        for (const mutation of list)
          ensureCachedData(mutation.target).attributesCached = undefined;
      }
      _invalidateStyleSheet(sheet) {
        if (this._readingStyleSheet)
          return;
        this._staleStyleSheets.add(sheet);
      }
      _updateStyleElementStyleSheetTextIfNeeded(sheet, forceText) {
        const data = ensureCachedData(sheet);
        if (this._staleStyleSheets.has(sheet) || forceText && data.cssText === undefined) {
          this._staleStyleSheets.delete(sheet);
          try {
            data.cssText = this._getSheetText(sheet);
          } catch (e) {
            data.cssText = "";
          }
        }
        return data.cssText;
      }
      _updateLinkStyleSheetTextIfNeeded(sheet, snapshotNumber) {
        const data = ensureCachedData(sheet);
        if (this._staleStyleSheets.has(sheet)) {
          this._staleStyleSheets.delete(sheet);
          try {
            data.cssText = this._getSheetText(sheet);
            data.cssRef = snapshotNumber;
            return data.cssText;
          } catch (e) {
          }
        }
        return data.cssRef === undefined ? undefined : snapshotNumber - data.cssRef;
      }
      markIframe(iframeElement, frameId) {
        iframeElement[kSnapshotFrameId] = frameId;
      }
      reset() {
        this._staleStyleSheets.clear();
        const visitNode = (node) => {
          resetCachedData(node);
          if (node.nodeType === Node.ELEMENT_NODE) {
            const element = node;
            if (element.shadowRoot)
              visitNode(element.shadowRoot);
          }
          for (let child = node.firstChild;child; child = child.nextSibling)
            visitNode(child);
        };
        visitNode(document.documentElement);
        visitNode(this._fakeBase);
      }
      __sanitizeMetaAttribute(name, value, httpEquiv) {
        if (name === "charset")
          return "utf-8";
        if (httpEquiv.toLowerCase() !== "content-type" || name !== "content")
          return value;
        const [type, ...params] = value.split(";");
        if (type !== "text/html" || params.length <= 0)
          return value;
        const charsetParamIdx = params.findIndex((param) => param.trim().startsWith("charset="));
        if (charsetParamIdx > -1)
          params[charsetParamIdx] = "charset=utf-8";
        return `${type}; ${params.join("; ")}`;
      }
      _sanitizeUrl(url) {
        if (url.startsWith("javascript:") || url.startsWith("vbscript:"))
          return "";
        return url;
      }
      _sanitizeSrcSet(srcset) {
        return srcset.split(",").map((src) => {
          src = src.trim();
          const spaceIndex = src.lastIndexOf(" ");
          if (spaceIndex === -1)
            return this._sanitizeUrl(src);
          return this._sanitizeUrl(src.substring(0, spaceIndex).trim()) + src.substring(spaceIndex);
        }).join(", ");
      }
      _resolveUrl(base, url) {
        if (url === "")
          return "";
        try {
          return new URL(url, base).href;
        } catch (e) {
          return url;
        }
      }
      _getSheetBase(sheet) {
        let rootSheet = sheet;
        while (rootSheet.parentStyleSheet)
          rootSheet = rootSheet.parentStyleSheet;
        if (rootSheet.ownerNode)
          return rootSheet.ownerNode.baseURI;
        return document.baseURI;
      }
      _getSheetText(sheet) {
        this._readingStyleSheet = true;
        try {
          const rules = [];
          for (const rule of sheet.cssRules)
            rules.push(rule.cssText);
          return rules.join("\n");
        } finally {
          this._readingStyleSheet = false;
        }
      }
      captureSnapshot() {
        const timestamp = performance.now();
        const snapshotNumber = ++this._lastSnapshotNumber;
        let nodeCounter = 0;
        let shadowDomNesting = 0;
        let headNesting = 0;
        this._handleMutations(this._observer.takeRecords());
        const definedCustomElements = new Set;
        const visitNode = (node) => {
          const nodeType = node.nodeType;
          const nodeName = nodeType === Node.DOCUMENT_FRAGMENT_NODE ? "template" : node.nodeName;
          if (nodeType !== Node.ELEMENT_NODE && nodeType !== Node.DOCUMENT_FRAGMENT_NODE && nodeType !== Node.TEXT_NODE)
            return;
          if (nodeName === "SCRIPT")
            return;
          if (nodeName === "LINK" && nodeType === Node.ELEMENT_NODE) {
            var _getAttribute;
            const rel = (_getAttribute = node.getAttribute("rel")) === null || _getAttribute === undefined ? undefined : _getAttribute.toLowerCase();
            if (rel === "preload" || rel === "prefetch")
              return;
          }
          if (removeNoScript && nodeName === "NOSCRIPT")
            return;
          if (nodeName === "META" && node.httpEquiv.toLowerCase() === "content-security-policy")
            return;
          if ((nodeName === "IFRAME" || nodeName === "FRAME") && headNesting)
            return;
          const data = ensureCachedData(node);
          const values = [];
          let equals = !!data.cached;
          let extraNodes = 0;
          const expectValue = (value) => {
            equals = equals && data.cached[values.length] === value;
            values.push(value);
          };
          const checkAndReturn = (n) => {
            data.attributesCached = true;
            if (equals)
              return {
                equals: true,
                n: [[snapshotNumber - data.ref[0], data.ref[1]]]
              };
            nodeCounter += extraNodes;
            data.ref = [snapshotNumber, nodeCounter++];
            data.cached = values;
            return {
              equals: false,
              n
            };
          };
          if (nodeType === Node.TEXT_NODE) {
            const value = node.nodeValue || "";
            expectValue(value);
            return checkAndReturn(value);
          }
          if (nodeName === "STYLE") {
            const sheet = node.sheet;
            let cssText;
            if (sheet)
              cssText = this._updateStyleElementStyleSheetTextIfNeeded(sheet);
            cssText = cssText || node.textContent || "";
            expectValue(cssText);
            extraNodes++;
            return checkAndReturn([nodeName, {}, cssText]);
          }
          const attrs = {};
          const result2 = [nodeName, attrs];
          const visitChild = (child) => {
            const snapshot = visitNode(child);
            if (snapshot) {
              result2.push(snapshot.n);
              expectValue(child);
              equals = equals && snapshot.equals;
            }
          };
          const visitChildStyleSheet = (child) => {
            const snapshot = visitStyleSheet(child);
            if (snapshot) {
              result2.push(snapshot.n);
              expectValue(child);
              equals = equals && snapshot.equals;
            }
          };
          if (nodeType === Node.DOCUMENT_FRAGMENT_NODE)
            attrs[kShadowAttribute] = "open";
          if (nodeType === Node.ELEMENT_NODE) {
            var _window$customElement;
            const element = node;
            if (element.localName.includes("-") && (_window$customElement = window.customElements) !== null && _window$customElement !== undefined && _window$customElement.get(element.localName))
              definedCustomElements.add(element.localName);
            if (nodeName === "INPUT" || nodeName === "TEXTAREA") {
              const value = element.value;
              expectValue(kValueAttribute);
              expectValue(value);
              attrs[kValueAttribute] = value;
            }
            if (nodeName === "INPUT" && ["checkbox", "radio"].includes(element.type)) {
              const value = element.checked ? "true" : "false";
              expectValue(kCheckedAttribute);
              expectValue(value);
              attrs[kCheckedAttribute] = value;
            }
            if (nodeName === "OPTION") {
              const value = element.selected ? "true" : "false";
              expectValue(kSelectedAttribute);
              expectValue(value);
              attrs[kSelectedAttribute] = value;
            }
            if (element.scrollTop) {
              expectValue(kScrollTopAttribute);
              expectValue(element.scrollTop);
              attrs[kScrollTopAttribute] = "" + element.scrollTop;
            }
            if (element.scrollLeft) {
              expectValue(kScrollLeftAttribute);
              expectValue(element.scrollLeft);
              attrs[kScrollLeftAttribute] = "" + element.scrollLeft;
            }
            if (element.shadowRoot) {
              ++shadowDomNesting;
              visitChild(element.shadowRoot);
              --shadowDomNesting;
            }
            if ("__playwright_target__" in element) {
              expectValue(kTargetAttribute);
              expectValue(element["__playwright_target__"]);
              attrs[kTargetAttribute] = element["__playwright_target__"];
            }
          }
          if (nodeName === "HEAD") {
            ++headNesting;
            this._fakeBase.setAttribute("href", document.baseURI);
            visitChild(this._fakeBase);
          }
          for (let child = node.firstChild;child; child = child.nextSibling)
            visitChild(child);
          if (nodeName === "HEAD")
            --headNesting;
          expectValue(kEndOfList);
          let documentOrShadowRoot = null;
          if (node.ownerDocument.documentElement === node)
            documentOrShadowRoot = node.ownerDocument;
          else if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE)
            documentOrShadowRoot = node;
          if (documentOrShadowRoot) {
            for (const sheet of documentOrShadowRoot.adoptedStyleSheets || [])
              visitChildStyleSheet(sheet);
            expectValue(kEndOfList);
          }
          if (nodeName === "IFRAME" || nodeName === "FRAME") {
            const element = node;
            const frameId = element[kSnapshotFrameId];
            const name = "src";
            const value = frameId ? `/snapshot/${frameId}` : "";
            expectValue(name);
            expectValue(value);
            attrs[name] = value;
          }
          if (nodeName === "BODY" && definedCustomElements.size) {
            const value = [...definedCustomElements].join(",");
            expectValue(kCustomElementsAttribute);
            expectValue(value);
            attrs[kCustomElementsAttribute] = value;
          }
          if (nodeName === "IMG" || nodeName === "PICTURE") {
            const value = nodeName === "PICTURE" ? "" : this._sanitizeUrl(node.currentSrc);
            expectValue(kCurrentSrcAttribute);
            expectValue(value);
            attrs[kCurrentSrcAttribute] = value;
          }
          if (equals && data.attributesCached && !shadowDomNesting)
            return checkAndReturn(result2);
          if (nodeType === Node.ELEMENT_NODE) {
            const element = node;
            for (let i = 0;i < element.attributes.length; i++) {
              const name = element.attributes[i].name;
              if (nodeName === "LINK" && name === "integrity")
                continue;
              if (nodeName === "IFRAME" && (name === "src" || name === "srcdoc" || name === "sandbox"))
                continue;
              if (nodeName === "FRAME" && name === "src")
                continue;
              let value = element.attributes[i].value;
              if (nodeName === "META")
                value = this.__sanitizeMetaAttribute(name, value, node.httpEquiv);
              else if (name === "src" && nodeName === "IMG")
                value = this._sanitizeUrl(value);
              else if (name === "srcset" && nodeName === "IMG")
                value = this._sanitizeSrcSet(value);
              else if (name === "srcset" && nodeName === "SOURCE")
                value = this._sanitizeSrcSet(value);
              else if (name === "href" && nodeName === "LINK")
                value = this._sanitizeUrl(value);
              else if (name.startsWith("on"))
                value = "";
              expectValue(name);
              expectValue(value);
              attrs[name] = value;
            }
            expectValue(kEndOfList);
          }
          if (result2.length === 2 && !Object.keys(attrs).length)
            result2.pop();
          return checkAndReturn(result2);
        };
        const visitStyleSheet = (sheet) => {
          const data = ensureCachedData(sheet);
          const oldCSSText = data.cssText;
          const cssText = this._updateStyleElementStyleSheetTextIfNeeded(sheet, true);
          if (cssText === oldCSSText)
            return {
              equals: true,
              n: [[snapshotNumber - data.ref[0], data.ref[1]]]
            };
          data.ref = [snapshotNumber, nodeCounter++];
          return {
            equals: false,
            n: ["template", {
              [kStyleSheetAttribute]: cssText
            }]
          };
        };
        let html;
        if (document.documentElement) {
          const {
            n
          } = visitNode(document.documentElement);
          html = n;
        } else {
          html = ["html"];
        }
        const result = {
          html,
          doctype: document.doctype ? document.doctype.name : undefined,
          resourceOverrides: [],
          viewport: {
            width: window.innerWidth,
            height: window.innerHeight
          },
          url: location.href,
          timestamp,
          collectionTime: 0
        };
        for (const sheet of this._staleStyleSheets) {
          if (sheet.href === null)
            continue;
          const content = this._updateLinkStyleSheetTextIfNeeded(sheet, snapshotNumber);
          if (content === undefined) {
            continue;
          }
          const base = this._getSheetBase(sheet);
          const url = removeHash(this._resolveUrl(base, sheet.href));
          result.resourceOverrides.push({
            url,
            content,
            contentType: "text/css"
          });
        }
        result.collectionTime = performance.now() - result.timestamp;
        return result;
      }
    }
    window[snapshotStreamer] = new Streamer;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.frameSnapshotStreamer = frameSnapshotStreamer;
});

// node_modules/playwright-core/lib/server/trace/recorder/snapshotter.js
var require_snapshotter = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Snapshotter = undefined;
  var _browserContext = require_browserContext();
  var _page = require_page();
  var _eventsHelper = require_eventsHelper();
  var _debugLogger = require_debugLogger();
  var _snapshotterInjected = require_snapshotterInjected();
  var _utils = require_utils3();
  var _utilsBundle = require_utilsBundle();

  class Snapshotter {
    constructor(context, delegate) {
      this._context = undefined;
      this._delegate = undefined;
      this._eventListeners = [];
      this._snapshotStreamer = undefined;
      this._initialized = false;
      this._started = false;
      this._context = context;
      this._delegate = delegate;
      const guid = (0, _utils.createGuid)();
      this._snapshotStreamer = "__playwright_snapshot_streamer_" + guid;
    }
    started() {
      return this._started;
    }
    async start() {
      this._started = true;
      if (!this._initialized) {
        this._initialized = true;
        await this._initialize();
      }
      await this.reset();
    }
    async reset() {
      if (this._started)
        await this._runInAllFrames(`window["${this._snapshotStreamer}"].reset()`);
    }
    async stop() {
      this._started = false;
    }
    resetForReuse() {
      this._initialized = false;
    }
    async _initialize() {
      for (const page of this._context.pages())
        this._onPage(page);
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.Page, this._onPage.bind(this))];
      const initScript = `(${_snapshotterInjected.frameSnapshotStreamer})("${this._snapshotStreamer}", ${!!this._context._options.javaScriptEnabled})`;
      await this._context.addInitScript(initScript);
      await this._runInAllFrames(initScript);
    }
    async _runInAllFrames(expression) {
      const frames = [];
      for (const page of this._context.pages())
        frames.push(...page.frames());
      await Promise.all(frames.map((frame) => {
        return frame.nonStallingRawEvaluateInExistingMainContext(expression).catch((e) => _debugLogger.debugLogger.log("error", e));
      }));
    }
    dispose() {
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
    }
    async captureSnapshot(page, callId, snapshotName, element) {
      const expression = `window["${this._snapshotStreamer}"].captureSnapshot(${JSON.stringify(snapshotName)})`;
      element === null || element === undefined || element.callFunctionNoReply((element2, callId2) => {
        const customEvent = new CustomEvent("__playwright_target__", {
          bubbles: true,
          cancelable: true,
          detail: callId2,
          composed: true
        });
        element2.dispatchEvent(customEvent);
      }, callId);
      const snapshots = page.frames().map(async (frame) => {
        const data = await frame.nonStallingRawEvaluateInExistingMainContext(expression).catch((e) => _debugLogger.debugLogger.log("error", e));
        if (!data || !this._started)
          return;
        const snapshot = {
          callId,
          snapshotName,
          pageId: page.guid,
          frameId: frame.guid,
          frameUrl: data.url,
          doctype: data.doctype,
          html: data.html,
          viewport: data.viewport,
          timestamp: (0, _utils.monotonicTime)(),
          collectionTime: data.collectionTime,
          resourceOverrides: [],
          isMainFrame: page.mainFrame() === frame
        };
        for (const {
          url,
          content,
          contentType
        } of data.resourceOverrides) {
          if (typeof content === "string") {
            const buffer = Buffer.from(content);
            const sha1 = (0, _utils.calculateSha1)(buffer) + "." + (_utilsBundle.mime.getExtension(contentType) || "dat");
            this._delegate.onSnapshotterBlob({
              sha1,
              buffer
            });
            snapshot.resourceOverrides.push({
              url,
              sha1
            });
          } else {
            snapshot.resourceOverrides.push({
              url,
              ref: content
            });
          }
        }
        this._delegate.onFrameSnapshot(snapshot);
      });
      await Promise.all(snapshots);
    }
    _onPage(page) {
      for (const frame of page.frames())
        this._annotateFrameHierarchy(frame);
      this._eventListeners.push(_eventsHelper.eventsHelper.addEventListener(page, _page.Page.Events.FrameAttached, (frame) => this._annotateFrameHierarchy(frame)));
    }
    async _annotateFrameHierarchy(frame) {
      try {
        const frameElement = await frame.frameElement();
        const parent = frame.parentFrame();
        if (!parent)
          return;
        const context = await parent._mainContext();
        await (context === null || context === undefined ? undefined : context.evaluate(({
          snapshotStreamer,
          frameElement: frameElement2,
          frameId
        }) => {
          window[snapshotStreamer].markIframe(frameElement2, frameId);
        }, {
          snapshotStreamer: this._snapshotStreamer,
          frameElement,
          frameId: frame.guid
        }));
        frameElement.dispose();
      } catch (e) {
      }
    }
  }
  exports.Snapshotter = Snapshotter;
});

// node_modules/playwright-core/lib/server/trace/recorder/tracing.js
var require_tracing = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var visitTraceEvent = function(object, sha1s) {
    if (Array.isArray(object))
      return object.map((o) => visitTraceEvent(o, sha1s));
    if (object instanceof _dispatcher.Dispatcher)
      return `<${object._type}>`;
    if (object instanceof Buffer)
      return `<Buffer>`;
    if (object instanceof Date)
      return object;
    if (typeof object === "object") {
      const result = {};
      for (const key in object) {
        if (key === "sha1" || key === "_sha1" || key.endsWith("Sha1")) {
          const sha1 = object[key];
          if (sha1)
            sha1s.add(sha1);
        }
        result[key] = visitTraceEvent(object[key], sha1s);
      }
      return result;
    }
    return object;
  };
  var shouldCaptureSnapshot = function(metadata) {
    return _debug.commandsWithTracingSnapshots.has(metadata.type + "." + metadata.method);
  };
  var createBeforeActionTraceEvent = function(metadata) {
    if (metadata.internal || metadata.method.startsWith("tracing"))
      return null;
    return {
      type: "before",
      callId: metadata.id,
      startTime: metadata.startTime,
      apiName: metadata.apiName || metadata.type + "." + metadata.method,
      class: metadata.type,
      method: metadata.method,
      params: metadata.params,
      wallTime: metadata.wallTime,
      pageId: metadata.pageId
    };
  };
  var createInputActionTraceEvent = function(metadata) {
    if (metadata.internal || metadata.method.startsWith("tracing"))
      return null;
    return {
      type: "input",
      callId: metadata.id,
      point: metadata.point
    };
  };
  var createActionLogTraceEvent = function(metadata, message) {
    if (metadata.internal || metadata.method.startsWith("tracing"))
      return null;
    return {
      type: "log",
      callId: metadata.id,
      time: (0, _utils.monotonicTime)(),
      message
    };
  };
  var createAfterActionTraceEvent = function(metadata) {
    var _metadata$error;
    if (metadata.internal || metadata.method.startsWith("tracing"))
      return null;
    return {
      type: "after",
      callId: metadata.id,
      endTime: metadata.endTime,
      error: (_metadata$error = metadata.error) === null || _metadata$error === undefined ? undefined : _metadata$error.error,
      result: metadata.result,
      point: metadata.point
    };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Tracing = undefined;
  exports.shouldCaptureSnapshot = shouldCaptureSnapshot;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _os = _interopRequireDefault(import.meta.require("os"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _debug = require_debug6();
  var _manualPromise = require_manualPromise();
  var _eventsHelper = require_eventsHelper();
  var _utils = require_utils3();
  var _fileUtils = require_fileUtils();
  var _artifact = require_artifact();
  var _browserContext = require_browserContext();
  var _instrumentation = require_instrumentation();
  var _page = require_page();
  var _harTracer = require_harTracer();
  var _snapshotter = require_snapshotter();
  var _zipBundle = require_zipBundle();
  var _dispatcher = require_dispatcher();
  var version = 6;
  var kScreencastOptions = {
    width: 800,
    height: 600,
    quality: 90
  };

  class Tracing extends _instrumentation.SdkObject {
    constructor(context, tracesDir) {
      super(context, "tracing");
      this._fs = new SerializedFS;
      this._snapshotter = undefined;
      this._harTracer = undefined;
      this._screencastListeners = [];
      this._eventListeners = [];
      this._context = undefined;
      this._state = undefined;
      this._isStopping = false;
      this._precreatedTracesDir = undefined;
      this._tracesTmpDir = undefined;
      this._allResources = new Set;
      this._contextCreatedEvent = undefined;
      this._pendingHarEntries = new Set;
      this._context = context;
      this._precreatedTracesDir = tracesDir;
      this._harTracer = new _harTracer.HarTracer(context, null, this, {
        content: "attach",
        includeTraceInfo: true,
        recordRequestOverrides: false,
        waitForContentOnStop: false
      });
      const testIdAttributeName = "selectors" in context ? context.selectors().testIdAttributeName() : undefined;
      this._contextCreatedEvent = {
        version,
        type: "context-options",
        browserName: "",
        options: {},
        platform: process.platform,
        wallTime: 0,
        sdkLanguage: context.attribution.playwright.options.sdkLanguage,
        testIdAttributeName
      };
      if (context instanceof _browserContext.BrowserContext) {
        this._snapshotter = new _snapshotter.Snapshotter(context, this);
        (0, _utils.assert)(tracesDir, "tracesDir must be specified for BrowserContext");
        this._contextCreatedEvent.browserName = context._browser.options.name;
        this._contextCreatedEvent.channel = context._browser.options.channel;
        this._contextCreatedEvent.options = context._options;
      }
    }
    async resetForReuse() {
      var _this$_snapshotter;
      await this.stopChunk({
        mode: "discard"
      }).catch(() => {
      });
      await this.stop();
      (_this$_snapshotter = this._snapshotter) === null || _this$_snapshotter === undefined || _this$_snapshotter.resetForReuse();
    }
    async start(options) {
      if (this._isStopping)
        throw new Error("Cannot start tracing while stopping");
      if (this._state)
        throw new Error("Tracing has been already started");
      this._contextCreatedEvent.sdkLanguage = this._context.attribution.playwright.options.sdkLanguage;
      const traceName = options.name || (0, _utils.createGuid)();
      const tracesDir = this._createTracesDirIfNeeded();
      this._state = {
        options,
        traceName,
        tracesDir,
        traceFile: _path.default.join(tracesDir, traceName + ".trace"),
        networkFile: _path.default.join(tracesDir, traceName + ".network"),
        resourcesDir: _path.default.join(tracesDir, "resources"),
        chunkOrdinal: 0,
        traceSha1s: new Set,
        networkSha1s: new Set,
        recording: false,
        callIds: new Set
      };
      this._fs.mkdir(this._state.resourcesDir);
      this._fs.writeFile(this._state.networkFile, "");
      if (options.snapshots)
        this._harTracer.start({
          omitScripts: !options.live
        });
    }
    async startChunk(options = {}) {
      var _this$_snapshotter2;
      if (this._state && this._state.recording)
        await this.stopChunk({
          mode: "discard"
        });
      if (!this._state)
        throw new Error("Must start tracing before starting a new chunk");
      if (this._isStopping)
        throw new Error("Cannot start a trace chunk while stopping");
      this._state.recording = true;
      this._state.callIds.clear();
      if (options.name && options.name !== this._state.traceName)
        this._changeTraceName(this._state, options.name);
      else
        this._allocateNewTraceFile(this._state);
      this._fs.mkdir(_path.default.dirname(this._state.traceFile));
      const event = {
        ...this._contextCreatedEvent,
        title: options.title,
        wallTime: Date.now()
      };
      this._fs.appendFile(this._state.traceFile, JSON.stringify(event) + "\n");
      this._context.instrumentation.addListener(this, this._context);
      this._eventListeners.push(_eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.Console, this._onConsoleMessage.bind(this)));
      if (this._state.options.screenshots)
        this._startScreencast();
      if (this._state.options.snapshots)
        await ((_this$_snapshotter2 = this._snapshotter) === null || _this$_snapshotter2 === undefined ? undefined : _this$_snapshotter2.start());
      return {
        traceName: this._state.traceName
      };
    }
    _startScreencast() {
      if (!(this._context instanceof _browserContext.BrowserContext))
        return;
      for (const page of this._context.pages())
        this._startScreencastInPage(page);
      this._screencastListeners.push(_eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.Page, this._startScreencastInPage.bind(this)));
    }
    _stopScreencast() {
      _eventsHelper.eventsHelper.removeEventListeners(this._screencastListeners);
      if (!(this._context instanceof _browserContext.BrowserContext))
        return;
      for (const page of this._context.pages())
        page.setScreencastOptions(null);
    }
    _allocateNewTraceFile(state) {
      const suffix = state.chunkOrdinal ? `-chunk${state.chunkOrdinal}` : ``;
      state.chunkOrdinal++;
      state.traceFile = _path.default.join(state.tracesDir, `${state.traceName}${suffix}.trace`);
    }
    _changeTraceName(state, name) {
      state.traceName = name;
      state.chunkOrdinal = 0;
      this._allocateNewTraceFile(state);
      const newNetworkFile = _path.default.join(state.tracesDir, name + ".network");
      this._fs.copyFile(state.networkFile, newNetworkFile);
      state.networkFile = newNetworkFile;
    }
    async stop() {
      if (!this._state)
        return;
      if (this._isStopping)
        throw new Error(`Tracing is already stopping`);
      if (this._state.recording)
        throw new Error(`Must stop trace file before stopping tracing`);
      this._harTracer.stop();
      this.flushHarEntries();
      await this._fs.syncAndGetError();
      this._state = undefined;
    }
    async deleteTmpTracesDir() {
      if (this._tracesTmpDir)
        await (0, _fileUtils.removeFolders)([this._tracesTmpDir]);
    }
    _createTracesDirIfNeeded() {
      if (this._precreatedTracesDir)
        return this._precreatedTracesDir;
      this._tracesTmpDir = _fs.default.mkdtempSync(_path.default.join(_os.default.tmpdir(), "playwright-tracing-"));
      return this._tracesTmpDir;
    }
    abort() {
      var _this$_snapshotter3;
      (_this$_snapshotter3 = this._snapshotter) === null || _this$_snapshotter3 === undefined || _this$_snapshotter3.dispose();
      this._harTracer.stop();
    }
    async flush() {
      this.abort();
      await this._fs.syncAndGetError();
    }
    async stopChunk(params) {
      var _this$_snapshotter4;
      if (this._isStopping)
        throw new Error(`Tracing is already stopping`);
      this._isStopping = true;
      if (!this._state || !this._state.recording) {
        this._isStopping = false;
        if (params.mode !== "discard")
          throw new Error(`Must start tracing before stopping`);
        return {};
      }
      this._context.instrumentation.removeListener(this);
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      if (this._state.options.screenshots)
        this._stopScreencast();
      if (this._state.options.snapshots)
        await ((_this$_snapshotter4 = this._snapshotter) === null || _this$_snapshotter4 === undefined ? undefined : _this$_snapshotter4.stop());
      this.flushHarEntries();
      const newNetworkFile = _path.default.join(this._state.tracesDir, this._state.traceName + `-pwnetcopy-${this._state.chunkOrdinal}.network`);
      const entries = [];
      entries.push({
        name: "trace.trace",
        value: this._state.traceFile
      });
      entries.push({
        name: "trace.network",
        value: newNetworkFile
      });
      for (const sha1 of new Set([...this._state.traceSha1s, ...this._state.networkSha1s]))
        entries.push({
          name: _path.default.join("resources", sha1),
          value: _path.default.join(this._state.resourcesDir, sha1)
        });
      this._state.traceSha1s = new Set;
      if (params.mode === "discard") {
        this._isStopping = false;
        this._state.recording = false;
        return {};
      }
      this._fs.copyFile(this._state.networkFile, newNetworkFile);
      const zipFileName = this._state.traceFile + ".zip";
      if (params.mode === "archive")
        this._fs.zip(entries, zipFileName);
      const error = await this._fs.syncAndGetError();
      this._isStopping = false;
      if (this._state)
        this._state.recording = false;
      if (error) {
        if (this._context instanceof _browserContext.BrowserContext && !this._context._browser.isConnected())
          return {};
        throw error;
      }
      if (params.mode === "entries")
        return {
          entries
        };
      const artifact = new _artifact.Artifact(this._context, zipFileName);
      artifact.reportFinished();
      return {
        artifact
      };
    }
    async _captureSnapshot(snapshotName, sdkObject, metadata, element) {
      if (!this._snapshotter)
        return;
      if (!sdkObject.attribution.page)
        return;
      if (!this._snapshotter.started())
        return;
      if (!shouldCaptureSnapshot(metadata))
        return;
      await this._snapshotter.captureSnapshot(sdkObject.attribution.page, metadata.id, snapshotName, element).catch(() => {
      });
    }
    onBeforeCall(sdkObject, metadata) {
      var _sdkObject$attributio, _this$_state;
      const event = createBeforeActionTraceEvent(metadata);
      if (!event)
        return Promise.resolve();
      (_sdkObject$attributio = sdkObject.attribution.page) === null || _sdkObject$attributio === undefined || _sdkObject$attributio.temporarilyDisableTracingScreencastThrottling();
      event.beforeSnapshot = `before@${metadata.id}`;
      (_this$_state = this._state) === null || _this$_state === undefined || _this$_state.callIds.add(metadata.id);
      this._appendTraceEvent(event);
      return this._captureSnapshot(event.beforeSnapshot, sdkObject, metadata);
    }
    onBeforeInputAction(sdkObject, metadata, element) {
      var _this$_state2, _sdkObject$attributio2;
      if (!((_this$_state2 = this._state) !== null && _this$_state2 !== undefined && _this$_state2.callIds.has(metadata.id)))
        return Promise.resolve();
      const event = createInputActionTraceEvent(metadata);
      if (!event)
        return Promise.resolve();
      (_sdkObject$attributio2 = sdkObject.attribution.page) === null || _sdkObject$attributio2 === undefined || _sdkObject$attributio2.temporarilyDisableTracingScreencastThrottling();
      event.inputSnapshot = `input@${metadata.id}`;
      this._appendTraceEvent(event);
      return this._captureSnapshot(event.inputSnapshot, sdkObject, metadata, element);
    }
    onCallLog(sdkObject, metadata, logName, message) {
      if (metadata.isServerSide || metadata.internal)
        return;
      if (logName !== "api")
        return;
      const event = createActionLogTraceEvent(metadata, message);
      if (event)
        this._appendTraceEvent(event);
    }
    async onAfterCall(sdkObject, metadata) {
      var _this$_state3, _this$_state4, _sdkObject$attributio3;
      if (!((_this$_state3 = this._state) !== null && _this$_state3 !== undefined && _this$_state3.callIds.has(metadata.id)))
        return;
      (_this$_state4 = this._state) === null || _this$_state4 === undefined || _this$_state4.callIds.delete(metadata.id);
      const event = createAfterActionTraceEvent(metadata);
      if (!event)
        return;
      (_sdkObject$attributio3 = sdkObject.attribution.page) === null || _sdkObject$attributio3 === undefined || _sdkObject$attributio3.temporarilyDisableTracingScreencastThrottling();
      event.afterSnapshot = `after@${metadata.id}`;
      this._appendTraceEvent(event);
      return this._captureSnapshot(event.afterSnapshot, sdkObject, metadata);
    }
    onEvent(sdkObject, event) {
      if (!sdkObject.attribution.context)
        return;
      if (event.method === "console" || event.method === "__create__" && event.class === "ConsoleMessage" || event.method === "__create__" && event.class === "JSHandle") {
        return;
      }
      this._appendTraceEvent(event);
    }
    onEntryStarted(entry) {
      this._pendingHarEntries.add(entry);
    }
    onEntryFinished(entry) {
      this._pendingHarEntries.delete(entry);
      const event = {
        type: "resource-snapshot",
        snapshot: entry
      };
      const visited = visitTraceEvent(event, this._state.networkSha1s);
      this._fs.appendFile(this._state.networkFile, JSON.stringify(visited) + "\n", true);
    }
    flushHarEntries() {
      const harLines = [];
      for (const entry of this._pendingHarEntries) {
        const event = {
          type: "resource-snapshot",
          snapshot: entry
        };
        const visited = visitTraceEvent(event, this._state.networkSha1s);
        harLines.push(JSON.stringify(visited));
      }
      this._pendingHarEntries.clear();
      if (harLines.length)
        this._fs.appendFile(this._state.networkFile, harLines.join("\n") + "\n", true);
    }
    onContentBlob(sha1, buffer) {
      this._appendResource(sha1, buffer);
    }
    onSnapshotterBlob(blob) {
      this._appendResource(blob.sha1, blob.buffer);
    }
    onFrameSnapshot(snapshot) {
      this._appendTraceEvent({
        type: "frame-snapshot",
        snapshot
      });
    }
    _onConsoleMessage(message) {
      var _message$page;
      const event = {
        type: "console",
        messageType: message.type(),
        text: message.text(),
        args: message.args().map((a) => ({
          preview: a.toString(),
          value: a.rawValue()
        })),
        location: message.location(),
        time: (0, _utils.monotonicTime)(),
        pageId: (_message$page = message.page()) === null || _message$page === undefined ? undefined : _message$page.guid
      };
      this._appendTraceEvent(event);
    }
    _startScreencastInPage(page) {
      page.setScreencastOptions(kScreencastOptions);
      const prefix = page.guid;
      this._screencastListeners.push(_eventsHelper.eventsHelper.addEventListener(page, _page.Page.Events.ScreencastFrame, (params) => {
        const suffix = params.timestamp || Date.now();
        const sha1 = `${prefix}-${suffix}.jpeg`;
        const event = {
          type: "screencast-frame",
          pageId: page.guid,
          sha1,
          width: params.width,
          height: params.height,
          timestamp: (0, _utils.monotonicTime)()
        };
        this._appendResource(sha1, params.buffer);
        this._appendTraceEvent(event);
      }));
    }
    _appendTraceEvent(event) {
      const visited = visitTraceEvent(event, this._state.traceSha1s);
      const flush = this._state.options.live || event.type !== "event" && event.type !== "console" && event.type !== "log";
      this._fs.appendFile(this._state.traceFile, JSON.stringify(visited) + "\n", flush);
    }
    _appendResource(sha1, buffer) {
      if (this._allResources.has(sha1))
        return;
      this._allResources.add(sha1);
      const resourcePath = _path.default.join(this._state.resourcesDir, sha1);
      this._fs.writeFile(resourcePath, buffer, true);
    }
  }
  exports.Tracing = Tracing;

  class SerializedFS {
    constructor() {
      this._writeChain = Promise.resolve();
      this._buffers = new Map;
      this._error = undefined;
    }
    mkdir(dir) {
      this._appendOperation(() => _fs.default.promises.mkdir(dir, {
        recursive: true
      }));
    }
    writeFile(file, content, skipIfExists) {
      this._buffers.delete(file);
      this._appendOperation(async () => {
        if (skipIfExists)
          await _fs.default.promises.writeFile(file, content, {
            flag: "wx"
          }).catch(() => {
          });
        else
          await _fs.default.promises.writeFile(file, content);
      });
    }
    appendFile(file, text, flush) {
      if (!this._buffers.has(file))
        this._buffers.set(file, []);
      this._buffers.get(file).push(text);
      if (flush)
        this._flushFile(file);
    }
    _flushFile(file) {
      const buffer = this._buffers.get(file);
      if (buffer === undefined)
        return;
      const text = buffer.join("");
      this._buffers.delete(file);
      this._appendOperation(() => _fs.default.promises.appendFile(file, text));
    }
    copyFile(from, to) {
      this._flushFile(from);
      this._buffers.delete(to);
      this._appendOperation(() => _fs.default.promises.copyFile(from, to));
    }
    async syncAndGetError() {
      for (const file of this._buffers.keys())
        this._flushFile(file);
      await this._writeChain;
      return this._error;
    }
    zip(entries, zipFileName) {
      for (const file of this._buffers.keys())
        this._flushFile(file);
      this._appendOperation(async () => {
        const zipFile = new _zipBundle.yazl.ZipFile;
        const result = new _manualPromise.ManualPromise;
        zipFile.on("error", (error) => result.reject(error));
        for (const entry of entries)
          zipFile.addFile(entry.value, entry.name);
        zipFile.end();
        zipFile.outputStream.pipe(_fs.default.createWriteStream(zipFileName)).on("close", () => result.resolve()).on("error", (error) => result.reject(error));
        await result;
      });
    }
    _appendOperation(cb) {
      this._writeChain = this._writeChain.then(async () => {
        if (this._error)
          return;
        try {
          await cb();
        } catch (e) {
          this._error = e;
        }
      });
    }
  }
});

// node_modules/playwright-core/lib/server/har/harRecorder.js
var require_harRecorder = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var jsonStringify = function(object) {
    const tokens = [];
    innerJsonStringify(object, tokens, "", false, undefined);
    return tokens.join("");
  };
  var innerJsonStringify = function(object, tokens, indent, flat, parentKey) {
    if (typeof object !== "object" || object === null) {
      tokens.push(JSON.stringify(object));
      return;
    }
    const isArray = Array.isArray(object);
    if (!isArray && object.constructor.name !== "Object") {
      tokens.push(JSON.stringify(object));
      return;
    }
    const entries = isArray ? object : Object.entries(object).filter((e) => e[1] !== undefined);
    if (!entries.length) {
      tokens.push(isArray ? `[]` : `{}`);
      return;
    }
    const childIndent = `${indent}  `;
    let brackets;
    if (isArray)
      brackets = flat ? {
        open: "[",
        close: "]"
      } : {
        open: `[\n${childIndent}`,
        close: `\n${indent}]`
      };
    else
      brackets = flat ? {
        open: "{ ",
        close: " }"
      } : {
        open: `{\n${childIndent}`,
        close: `\n${indent}}`
      };
    tokens.push(brackets.open);
    for (let i = 0;i < entries.length; ++i) {
      const entry = entries[i];
      if (i)
        tokens.push(flat ? `, ` : `,\n${childIndent}`);
      if (!isArray)
        tokens.push(`${JSON.stringify(entry[0])}: `);
      const key = isArray ? undefined : entry[0];
      const flatten = flat || key === "timings" || parentKey === "headers";
      innerJsonStringify(isArray ? entry : entry[1], tokens, childIndent, flatten, key);
    }
    tokens.push(brackets.close);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.HarRecorder = undefined;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _artifact = require_artifact();
  var _harTracer = require_harTracer();
  var _zipBundle = require_zipBundle();
  var _manualPromise = require_manualPromise();
  var _utils = require_utils3();

  class HarRecorder {
    constructor(context, page, options) {
      this._artifact = undefined;
      this._isFlushed = false;
      this._tracer = undefined;
      this._entries = [];
      this._zipFile = null;
      this._writtenZipEntries = new Set;
      this._artifact = new _artifact.Artifact(context, _path.default.join(context._browser.options.artifactsDir, `${(0, _utils.createGuid)()}.har`));
      const urlFilterRe = options.urlRegexSource !== undefined && options.urlRegexFlags !== undefined ? new RegExp(options.urlRegexSource, options.urlRegexFlags) : undefined;
      const expectsZip = options.path.endsWith(".zip");
      const content = options.content || (expectsZip ? "attach" : "embed");
      this._tracer = new _harTracer.HarTracer(context, page, this, {
        content,
        slimMode: options.mode === "minimal",
        includeTraceInfo: false,
        recordRequestOverrides: true,
        waitForContentOnStop: true,
        urlFilter: urlFilterRe !== null && urlFilterRe !== undefined ? urlFilterRe : options.urlGlob
      });
      this._zipFile = content === "attach" || expectsZip ? new _zipBundle.yazl.ZipFile : null;
      this._tracer.start({
        omitScripts: false
      });
    }
    onEntryStarted(entry) {
      this._entries.push(entry);
    }
    onEntryFinished(entry) {
    }
    onContentBlob(sha1, buffer) {
      if (!this._zipFile || this._writtenZipEntries.has(sha1))
        return;
      this._writtenZipEntries.add(sha1);
      this._zipFile.addBuffer(buffer, sha1);
    }
    async flush() {
      if (this._isFlushed)
        return;
      this._isFlushed = true;
      await this._tracer.flush();
      const log = this._tracer.stop();
      log.entries = this._entries;
      const harFileContent = jsonStringify({
        log
      });
      if (this._zipFile) {
        const result = new _manualPromise.ManualPromise;
        this._zipFile.on("error", (error) => result.reject(error));
        this._zipFile.addBuffer(Buffer.from(harFileContent, "utf-8"), "har.har");
        this._zipFile.end();
        this._zipFile.outputStream.pipe(_fs.default.createWriteStream(this._artifact.localPath())).on("close", () => {
          result.resolve();
        });
        await result;
      } else {
        await _fs.default.promises.writeFile(this._artifact.localPath(), harFileContent);
      }
    }
    async export() {
      await this.flush();
      this._artifact.reportFinished();
      return this._artifact;
    }
  }
  exports.HarRecorder = HarRecorder;
});

// node_modules/playwright-core/lib/server/recorder/codeGenerator.js
var require_codeGenerator = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CodeGenerator = undefined;
  var _events = import.meta.require("events");

  class CodeGenerator extends _events.EventEmitter {
    constructor(browserName, enabled, launchOptions, contextOptions, deviceName, saveStorage) {
      super();
      this._currentAction = null;
      this._lastAction = null;
      this._actions = [];
      this._enabled = undefined;
      this._options = undefined;
      launchOptions = {
        headless: false,
        ...launchOptions
      };
      contextOptions = {
        ...contextOptions
      };
      this._enabled = enabled;
      this._options = {
        browserName,
        launchOptions,
        contextOptions,
        deviceName,
        saveStorage
      };
      this.restart();
    }
    restart() {
      this._currentAction = null;
      this._lastAction = null;
      this._actions = [];
      this.emit("change");
    }
    setEnabled(enabled) {
      this._enabled = enabled;
    }
    addAction(action) {
      if (!this._enabled)
        return;
      this.willPerformAction(action);
      this.didPerformAction(action);
    }
    willPerformAction(action) {
      if (!this._enabled)
        return;
      this._currentAction = action;
    }
    performedActionFailed(action) {
      if (!this._enabled)
        return;
      if (this._currentAction === action)
        this._currentAction = null;
    }
    didPerformAction(actionInContext) {
      if (!this._enabled)
        return;
      const action = actionInContext.action;
      let eraseLastAction = false;
      if (this._lastAction && this._lastAction.frame.pageAlias === actionInContext.frame.pageAlias) {
        const lastAction = this._lastAction.action;
        if (this._lastAction && action.name === "fill" && lastAction.name === "fill") {
          if (action.selector === lastAction.selector)
            eraseLastAction = true;
        }
        if (lastAction && action.name === "click" && lastAction.name === "click") {
          if (action.selector === lastAction.selector && action.clickCount > lastAction.clickCount)
            eraseLastAction = true;
        }
        if (lastAction && action.name === "navigate" && lastAction.name === "navigate") {
          if (action.url === lastAction.url) {
            this._currentAction = null;
            return;
          }
        }
        if (lastAction && (action.name === "check" || action.name === "uncheck") && lastAction.name === "click") {
          if (action.selector === lastAction.selector)
            eraseLastAction = true;
        }
      }
      this._lastAction = actionInContext;
      this._currentAction = null;
      if (eraseLastAction)
        this._actions.pop();
      this._actions.push(actionInContext);
      this.emit("change");
    }
    commitLastAction() {
      if (!this._enabled)
        return;
      const action = this._lastAction;
      if (action)
        action.committed = true;
    }
    signal(pageAlias, frame, signal) {
      if (!this._enabled)
        return;
      if (this._currentAction) {
        this._currentAction.action.signals.push(signal);
        return;
      }
      if (this._lastAction && !this._lastAction.committed) {
        const signals = this._lastAction.action.signals;
        if (signal.name === "navigation" && signals.length && signals[signals.length - 1].name === "download")
          return;
        if (signal.name === "download" && signals.length && signals[signals.length - 1].name === "navigation")
          signals.length = signals.length - 1;
        this._lastAction.action.signals.push(signal);
        this.emit("change");
        return;
      }
      if (signal.name === "navigation" && frame._page.mainFrame() === frame) {
        this.addAction({
          frame: {
            pageAlias,
            isMainFrame: true
          },
          committed: true,
          action: {
            name: "navigate",
            url: frame.url(),
            signals: []
          }
        });
      }
    }
    generateStructure(languageGenerator) {
      const header = languageGenerator.generateHeader(this._options);
      const footer = languageGenerator.generateFooter(this._options.saveStorage);
      const actions = this._actions.map((a) => languageGenerator.generateAction(a)).filter(Boolean);
      const text = [header, ...actions, footer].join("\n");
      return {
        header,
        footer,
        actions,
        text
      };
    }
  }
  exports.CodeGenerator = CodeGenerator;
});

// node_modules/playwright-core/lib/server/recorder/utils.js
var require_utils4 = __commonJS((exports) => {
  var toClickOptions = function(action) {
    let method = "click";
    if (action.clickCount === 2)
      method = "dblclick";
    const modifiers = toModifiers(action.modifiers);
    const options = {};
    if (action.button !== "left")
      options.button = action.button;
    if (modifiers.length)
      options.modifiers = modifiers;
    if (action.clickCount > 2)
      options.clickCount = action.clickCount;
    if (action.position)
      options.position = action.position;
    return {
      method,
      options
    };
  };
  var toModifiers = function(modifiers) {
    const result = [];
    if (modifiers & 1)
      result.push("Alt");
    if (modifiers & 2)
      result.push("Control");
    if (modifiers & 4)
      result.push("Meta");
    if (modifiers & 8)
      result.push("Shift");
    return result;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.toClickOptions = toClickOptions;
  exports.toModifiers = toModifiers;
});

// node_modules/playwright-core/lib/server/recorder/language.js
var require_language2 = __commonJS((exports) => {
  var sanitizeDeviceOptions = function(device, options) {
    const cleanedOptions = {};
    for (const property in options) {
      if (JSON.stringify(device[property]) !== JSON.stringify(options[property]))
        cleanedOptions[property] = options[property];
    }
    return cleanedOptions;
  };
  var toSignalMap = function(action) {
    let popup;
    let download;
    let dialog;
    for (const signal of action.signals) {
      if (signal.name === "popup")
        popup = signal;
      else if (signal.name === "download")
        download = signal;
      else if (signal.name === "dialog")
        dialog = signal;
    }
    return {
      popup,
      download,
      dialog
    };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.sanitizeDeviceOptions = sanitizeDeviceOptions;
  exports.toSignalMap = toSignalMap;
});

// node_modules/playwright-core/lib/server/deviceDescriptorsSource.json
var require_deviceDescriptorsSource = __commonJS((exports, module) => {
  module.exports = {
    "Blackberry PlayBook": {
      userAgent: "Mozilla/5.0 (PlayBook; U; RIM Tablet OS 2.1.0; en-US) AppleWebKit/536.2+ (KHTML like Gecko) Version/17.4 Safari/536.2+",
      viewport: {
        width: 600,
        height: 1024
      },
      deviceScaleFactor: 1,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Blackberry PlayBook landscape": {
      userAgent: "Mozilla/5.0 (PlayBook; U; RIM Tablet OS 2.1.0; en-US) AppleWebKit/536.2+ (KHTML like Gecko) Version/17.4 Safari/536.2+",
      viewport: {
        width: 1024,
        height: 600
      },
      deviceScaleFactor: 1,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "BlackBerry Z30": {
      userAgent: "Mozilla/5.0 (BB10; Touch) AppleWebKit/537.10+ (KHTML, like Gecko) Version/17.4 Mobile Safari/537.10+",
      viewport: {
        width: 360,
        height: 640
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "BlackBerry Z30 landscape": {
      userAgent: "Mozilla/5.0 (BB10; Touch) AppleWebKit/537.10+ (KHTML, like Gecko) Version/17.4 Mobile Safari/537.10+",
      viewport: {
        width: 640,
        height: 360
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Galaxy Note 3": {
      userAgent: "Mozilla/5.0 (Linux; U; Android 4.3; en-us; SM-N900T Build/JSS15J) AppleWebKit/534.30 (KHTML, like Gecko) Version/17.4 Mobile Safari/534.30",
      viewport: {
        width: 360,
        height: 640
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Galaxy Note 3 landscape": {
      userAgent: "Mozilla/5.0 (Linux; U; Android 4.3; en-us; SM-N900T Build/JSS15J) AppleWebKit/534.30 (KHTML, like Gecko) Version/17.4 Mobile Safari/534.30",
      viewport: {
        width: 640,
        height: 360
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Galaxy Note II": {
      userAgent: "Mozilla/5.0 (Linux; U; Android 4.1; en-us; GT-N7100 Build/JRO03C) AppleWebKit/534.30 (KHTML, like Gecko) Version/17.4 Mobile Safari/534.30",
      viewport: {
        width: 360,
        height: 640
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Galaxy Note II landscape": {
      userAgent: "Mozilla/5.0 (Linux; U; Android 4.1; en-us; GT-N7100 Build/JRO03C) AppleWebKit/534.30 (KHTML, like Gecko) Version/17.4 Mobile Safari/534.30",
      viewport: {
        width: 640,
        height: 360
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Galaxy S III": {
      userAgent: "Mozilla/5.0 (Linux; U; Android 4.0; en-us; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/17.4 Mobile Safari/534.30",
      viewport: {
        width: 360,
        height: 640
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Galaxy S III landscape": {
      userAgent: "Mozilla/5.0 (Linux; U; Android 4.0; en-us; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/17.4 Mobile Safari/534.30",
      viewport: {
        width: 640,
        height: 360
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Galaxy S5": {
      userAgent: "Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      viewport: {
        width: 360,
        height: 640
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Galaxy S5 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      viewport: {
        width: 640,
        height: 360
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Galaxy S8": {
      userAgent: "Mozilla/5.0 (Linux; Android 7.0; SM-G950U Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      viewport: {
        width: 360,
        height: 740
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Galaxy S8 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 7.0; SM-G950U Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      viewport: {
        width: 740,
        height: 360
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Galaxy S9+": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; SM-G965U Build/R16NW) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      viewport: {
        width: 320,
        height: 658
      },
      deviceScaleFactor: 4.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Galaxy S9+ landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; SM-G965U Build/R16NW) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      viewport: {
        width: 658,
        height: 320
      },
      deviceScaleFactor: 4.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Galaxy Tab S4": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.1.0; SM-T837A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Safari/537.36",
      viewport: {
        width: 712,
        height: 1138
      },
      deviceScaleFactor: 2.25,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Galaxy Tab S4 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.1.0; SM-T837A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Safari/537.36",
      viewport: {
        width: 1138,
        height: 712
      },
      deviceScaleFactor: 2.25,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "iPad (gen 5)": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 768,
        height: 1024
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPad (gen 5) landscape": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 1024,
        height: 768
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPad (gen 6)": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 768,
        height: 1024
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPad (gen 6) landscape": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 1024,
        height: 768
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPad (gen 7)": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 810,
        height: 1080
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPad (gen 7) landscape": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 1080,
        height: 810
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPad Mini": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 768,
        height: 1024
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPad Mini landscape": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 1024,
        height: 768
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPad Pro 11": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 834,
        height: 1194
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPad Pro 11 landscape": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 1194,
        height: 834
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 6": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/17.4 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 375,
        height: 667
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 6 landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/17.4 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 667,
        height: 375
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 6 Plus": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/17.4 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 414,
        height: 736
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 6 Plus landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/17.4 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 736,
        height: 414
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 7": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/17.4 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 375,
        height: 667
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 7 landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/17.4 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 667,
        height: 375
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 7 Plus": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/17.4 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 414,
        height: 736
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 7 Plus landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/17.4 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 736,
        height: 414
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 8": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/17.4 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 375,
        height: 667
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 8 landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/17.4 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 667,
        height: 375
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 8 Plus": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/17.4 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 414,
        height: 736
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 8 Plus landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/17.4 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 736,
        height: 414
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone SE": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/17.4 Mobile/14E304 Safari/602.1",
      viewport: {
        width: 320,
        height: 568
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone SE landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/17.4 Mobile/14E304 Safari/602.1",
      viewport: {
        width: 568,
        height: 320
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone X": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/17.4 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 375,
        height: 812
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone X landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/17.4 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 812,
        height: 375
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone XR": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 414,
        height: 896
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone XR landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 896,
        height: 414
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 11": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 414,
        height: 896
      },
      viewport: {
        width: 414,
        height: 715
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 11 landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 414,
        height: 896
      },
      viewport: {
        width: 800,
        height: 364
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 11 Pro": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 375,
        height: 812
      },
      viewport: {
        width: 375,
        height: 635
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 11 Pro landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 375,
        height: 812
      },
      viewport: {
        width: 724,
        height: 325
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 11 Pro Max": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 414,
        height: 896
      },
      viewport: {
        width: 414,
        height: 715
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 11 Pro Max landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 414,
        height: 896
      },
      viewport: {
        width: 808,
        height: 364
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 12": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 390,
        height: 664
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 12 landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 750,
        height: 340
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 12 Pro": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 390,
        height: 664
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 12 Pro landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 750,
        height: 340
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 12 Pro Max": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 428,
        height: 926
      },
      viewport: {
        width: 428,
        height: 746
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 12 Pro Max landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 428,
        height: 926
      },
      viewport: {
        width: 832,
        height: 378
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 12 Mini": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 375,
        height: 812
      },
      viewport: {
        width: 375,
        height: 629
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 12 Mini landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 375,
        height: 812
      },
      viewport: {
        width: 712,
        height: 325
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 13": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 390,
        height: 664
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 13 landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 750,
        height: 342
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 13 Pro": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 390,
        height: 664
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 13 Pro landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 750,
        height: 342
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 13 Pro Max": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 428,
        height: 926
      },
      viewport: {
        width: 428,
        height: 746
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 13 Pro Max landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 428,
        height: 926
      },
      viewport: {
        width: 832,
        height: 380
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 13 Mini": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 375,
        height: 812
      },
      viewport: {
        width: 375,
        height: 629
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 13 Mini landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 375,
        height: 812
      },
      viewport: {
        width: 712,
        height: 327
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 14": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 390,
        height: 664
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 14 landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 750,
        height: 340
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 14 Plus": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 428,
        height: 926
      },
      viewport: {
        width: 428,
        height: 746
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 14 Plus landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 428,
        height: 926
      },
      viewport: {
        width: 832,
        height: 378
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 14 Pro": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 393,
        height: 852
      },
      viewport: {
        width: 393,
        height: 660
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 14 Pro landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 393,
        height: 852
      },
      viewport: {
        width: 734,
        height: 343
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 14 Pro Max": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 430,
        height: 932
      },
      viewport: {
        width: 430,
        height: 740
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 14 Pro Max landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 430,
        height: 932
      },
      viewport: {
        width: 814,
        height: 380
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Kindle Fire HDX": {
      userAgent: "Mozilla/5.0 (Linux; U; en-us; KFAPWI Build/JDQ39) AppleWebKit/535.19 (KHTML, like Gecko) Silk/3.13 Safari/535.19 Silk-Accelerated=true",
      viewport: {
        width: 800,
        height: 1280
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Kindle Fire HDX landscape": {
      userAgent: "Mozilla/5.0 (Linux; U; en-us; KFAPWI Build/JDQ39) AppleWebKit/535.19 (KHTML, like Gecko) Silk/3.13 Safari/535.19 Silk-Accelerated=true",
      viewport: {
        width: 1280,
        height: 800
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "LG Optimus L70": {
      userAgent: "Mozilla/5.0 (Linux; U; Android 4.4.2; en-us; LGMS323 Build/KOT49I.MS32310c) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/123.0.6312.4 Mobile Safari/537.36",
      viewport: {
        width: 384,
        height: 640
      },
      deviceScaleFactor: 1.25,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "LG Optimus L70 landscape": {
      userAgent: "Mozilla/5.0 (Linux; U; Android 4.4.2; en-us; LGMS323 Build/KOT49I.MS32310c) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/123.0.6312.4 Mobile Safari/537.36",
      viewport: {
        width: 640,
        height: 384
      },
      deviceScaleFactor: 1.25,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Microsoft Lumia 550": {
      userAgent: "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 550) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36 Edge/14.14263",
      viewport: {
        width: 640,
        height: 360
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Microsoft Lumia 550 landscape": {
      userAgent: "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 550) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36 Edge/14.14263",
      viewport: {
        width: 360,
        height: 640
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Microsoft Lumia 950": {
      userAgent: "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 950) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36 Edge/14.14263",
      viewport: {
        width: 360,
        height: 640
      },
      deviceScaleFactor: 4,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Microsoft Lumia 950 landscape": {
      userAgent: "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 950) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36 Edge/14.14263",
      viewport: {
        width: 640,
        height: 360
      },
      deviceScaleFactor: 4,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 10": {
      userAgent: "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 10 Build/MOB31T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Safari/537.36",
      viewport: {
        width: 800,
        height: 1280
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 10 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 10 Build/MOB31T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Safari/537.36",
      viewport: {
        width: 1280,
        height: 800
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 4": {
      userAgent: "Mozilla/5.0 (Linux; Android 4.4.2; Nexus 4 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      viewport: {
        width: 384,
        height: 640
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 4 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 4.4.2; Nexus 4 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      viewport: {
        width: 640,
        height: 384
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 5": {
      userAgent: "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      viewport: {
        width: 360,
        height: 640
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 5 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      viewport: {
        width: 640,
        height: 360
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 5X": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 5X Build/OPR4.170623.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      viewport: {
        width: 412,
        height: 732
      },
      deviceScaleFactor: 2.625,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 5X landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 5X Build/OPR4.170623.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      viewport: {
        width: 732,
        height: 412
      },
      deviceScaleFactor: 2.625,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 6": {
      userAgent: "Mozilla/5.0 (Linux; Android 7.1.1; Nexus 6 Build/N6F26U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      viewport: {
        width: 412,
        height: 732
      },
      deviceScaleFactor: 3.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 6 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 7.1.1; Nexus 6 Build/N6F26U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      viewport: {
        width: 732,
        height: 412
      },
      deviceScaleFactor: 3.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 6P": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 6P Build/OPP3.170518.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      viewport: {
        width: 412,
        height: 732
      },
      deviceScaleFactor: 3.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 6P landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 6P Build/OPP3.170518.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      viewport: {
        width: 732,
        height: 412
      },
      deviceScaleFactor: 3.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 7": {
      userAgent: "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 7 Build/MOB30X) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Safari/537.36",
      viewport: {
        width: 600,
        height: 960
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 7 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 7 Build/MOB30X) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Safari/537.36",
      viewport: {
        width: 960,
        height: 600
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nokia Lumia 520": {
      userAgent: "Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 520)",
      viewport: {
        width: 320,
        height: 533
      },
      deviceScaleFactor: 1.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nokia Lumia 520 landscape": {
      userAgent: "Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 520)",
      viewport: {
        width: 533,
        height: 320
      },
      deviceScaleFactor: 1.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nokia N9": {
      userAgent: "Mozilla/5.0 (MeeGo; NokiaN9) AppleWebKit/534.13 (KHTML, like Gecko) NokiaBrowser/8.5.0 Mobile Safari/534.13",
      viewport: {
        width: 480,
        height: 854
      },
      deviceScaleFactor: 1,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Nokia N9 landscape": {
      userAgent: "Mozilla/5.0 (MeeGo; NokiaN9) AppleWebKit/534.13 (KHTML, like Gecko) NokiaBrowser/8.5.0 Mobile Safari/534.13",
      viewport: {
        width: 854,
        height: 480
      },
      deviceScaleFactor: 1,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Pixel 2": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0; Pixel 2 Build/OPD3.170816.012) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      viewport: {
        width: 411,
        height: 731
      },
      deviceScaleFactor: 2.625,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 2 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0; Pixel 2 Build/OPD3.170816.012) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      viewport: {
        width: 731,
        height: 411
      },
      deviceScaleFactor: 2.625,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 2 XL": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Pixel 2 XL Build/OPD1.170816.004) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      viewport: {
        width: 411,
        height: 823
      },
      deviceScaleFactor: 3.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 2 XL landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Pixel 2 XL Build/OPD1.170816.004) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      viewport: {
        width: 823,
        height: 411
      },
      deviceScaleFactor: 3.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 3": {
      userAgent: "Mozilla/5.0 (Linux; Android 9; Pixel 3 Build/PQ1A.181105.017.A1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      viewport: {
        width: 393,
        height: 786
      },
      deviceScaleFactor: 2.75,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 3 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 9; Pixel 3 Build/PQ1A.181105.017.A1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      viewport: {
        width: 786,
        height: 393
      },
      deviceScaleFactor: 2.75,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 4": {
      userAgent: "Mozilla/5.0 (Linux; Android 10; Pixel 4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      viewport: {
        width: 353,
        height: 745
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 4 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 10; Pixel 4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      viewport: {
        width: 745,
        height: 353
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 4a (5G)": {
      userAgent: "Mozilla/5.0 (Linux; Android 11; Pixel 4a (5G)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      screen: {
        width: 412,
        height: 892
      },
      viewport: {
        width: 412,
        height: 765
      },
      deviceScaleFactor: 2.63,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 4a (5G) landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 11; Pixel 4a (5G)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      screen: {
        height: 892,
        width: 412
      },
      viewport: {
        width: 840,
        height: 312
      },
      deviceScaleFactor: 2.63,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 5": {
      userAgent: "Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      screen: {
        width: 393,
        height: 851
      },
      viewport: {
        width: 393,
        height: 727
      },
      deviceScaleFactor: 2.75,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 5 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      screen: {
        width: 851,
        height: 393
      },
      viewport: {
        width: 802,
        height: 293
      },
      deviceScaleFactor: 2.75,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 7": {
      userAgent: "Mozilla/5.0 (Linux; Android 14; Pixel 7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      screen: {
        width: 412,
        height: 915
      },
      viewport: {
        width: 412,
        height: 839
      },
      deviceScaleFactor: 2.625,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 7 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 14; Pixel 7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      screen: {
        width: 915,
        height: 412
      },
      viewport: {
        width: 863,
        height: 360
      },
      deviceScaleFactor: 2.625,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Moto G4": {
      userAgent: "Mozilla/5.0 (Linux; Android 7.0; Moto G (4)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      viewport: {
        width: 360,
        height: 640
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Moto G4 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 7.0; Moto G (4)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Mobile Safari/537.36",
      viewport: {
        width: 640,
        height: 360
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Desktop Chrome HiDPI": {
      userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Safari/537.36",
      screen: {
        width: 1792,
        height: 1120
      },
      viewport: {
        width: 1280,
        height: 720
      },
      deviceScaleFactor: 2,
      isMobile: false,
      hasTouch: false,
      defaultBrowserType: "chromium"
    },
    "Desktop Edge HiDPI": {
      userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Safari/537.36 Edg/123.0.6312.4",
      screen: {
        width: 1792,
        height: 1120
      },
      viewport: {
        width: 1280,
        height: 720
      },
      deviceScaleFactor: 2,
      isMobile: false,
      hasTouch: false,
      defaultBrowserType: "chromium"
    },
    "Desktop Firefox HiDPI": {
      userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0",
      screen: {
        width: 1792,
        height: 1120
      },
      viewport: {
        width: 1280,
        height: 720
      },
      deviceScaleFactor: 2,
      isMobile: false,
      hasTouch: false,
      defaultBrowserType: "firefox"
    },
    "Desktop Safari": {
      userAgent: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Safari/605.1.15",
      screen: {
        width: 1792,
        height: 1120
      },
      viewport: {
        width: 1280,
        height: 720
      },
      deviceScaleFactor: 2,
      isMobile: false,
      hasTouch: false,
      defaultBrowserType: "webkit"
    },
    "Desktop Chrome": {
      userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Safari/537.36",
      screen: {
        width: 1920,
        height: 1080
      },
      viewport: {
        width: 1280,
        height: 720
      },
      deviceScaleFactor: 1,
      isMobile: false,
      hasTouch: false,
      defaultBrowserType: "chromium"
    },
    "Desktop Edge": {
      userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.4 Safari/537.36 Edg/123.0.6312.4",
      screen: {
        width: 1920,
        height: 1080
      },
      viewport: {
        width: 1280,
        height: 720
      },
      deviceScaleFactor: 1,
      isMobile: false,
      hasTouch: false,
      defaultBrowserType: "chromium"
    },
    "Desktop Firefox": {
      userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0",
      screen: {
        width: 1920,
        height: 1080
      },
      viewport: {
        width: 1280,
        height: 720
      },
      deviceScaleFactor: 1,
      isMobile: false,
      hasTouch: false,
      defaultBrowserType: "firefox"
    }
  };
});

// node_modules/playwright-core/lib/server/recorder/javascript.js
var require_javascript2 = __commonJS((exports) => {
  var formatOptions = function(value, hasArguments) {
    const keys = Object.keys(value);
    if (!keys.length)
      return "";
    return (hasArguments ? ", " : "") + formatObject(value);
  };
  var formatObject = function(value, indent = "  ") {
    if (typeof value === "string")
      return quote(value);
    if (Array.isArray(value))
      return `[${value.map((o) => formatObject(o)).join(", ")}]`;
    if (typeof value === "object") {
      const keys = Object.keys(value).filter((key) => value[key] !== undefined).sort();
      if (!keys.length)
        return "{}";
      const tokens = [];
      for (const key of keys)
        tokens.push(`${key}: ${formatObject(value[key])}`);
      return `{\n${indent}${tokens.join(`,\n${indent}`)}\n}`;
    }
    return String(value);
  };
  var formatObjectOrVoid = function(value, indent = "  ") {
    const result = formatObject(value, indent);
    return result === "{}" ? "" : result;
  };
  var formatContextOptions = function(options, deviceName) {
    const device = deviceName && deviceDescriptors[deviceName];
    if (!device)
      return formatObjectOrVoid(options);
    let serializedObject = formatObjectOrVoid((0, _language.sanitizeDeviceOptions)(device, options));
    if (!serializedObject)
      serializedObject = "{\n}";
    const lines = serializedObject.split("\n");
    lines.splice(1, 0, `...devices[${quote(deviceName)}],`);
    return lines.join("\n");
  };
  var quote = function(text) {
    return (0, _stringUtils.escapeWithQuotes)(text, "\'");
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.JavaScriptLanguageGenerator = exports.JavaScriptFormatter = undefined;
  var _language = require_language2();
  var _utils = require_utils4();
  var _stringUtils = require_stringUtils();
  var _locatorGenerators = require_locatorGenerators();
  var deviceDescriptors = require_deviceDescriptorsSource();

  class JavaScriptLanguageGenerator {
    constructor(isTest) {
      this.id = undefined;
      this.groupName = "Node.js";
      this.name = undefined;
      this.highlighter = "javascript";
      this._isTest = undefined;
      this.id = isTest ? "playwright-test" : "javascript";
      this.name = isTest ? "Test Runner" : "Library";
      this._isTest = isTest;
    }
    generateAction(actionInContext) {
      const action = actionInContext.action;
      if (this._isTest && (action.name === "openPage" || action.name === "closePage"))
        return "";
      const pageAlias = actionInContext.frame.pageAlias;
      const formatter = new JavaScriptFormatter(2);
      if (action.name === "openPage") {
        formatter.add(`const ${pageAlias} = await context.newPage();`);
        if (action.url && action.url !== "about:blank" && action.url !== "chrome://newtab/")
          formatter.add(`await ${pageAlias}.goto(${quote(action.url)});`);
        return formatter.format();
      }
      let subject;
      if (actionInContext.frame.isMainFrame) {
        subject = pageAlias;
      } else {
        const locators = actionInContext.frame.selectorsChain.map((selector) => `.frameLocator(${quote(selector)})`);
        subject = `${pageAlias}${locators.join("")}`;
      }
      const signals = (0, _language.toSignalMap)(action);
      if (signals.dialog) {
        formatter.add(`  ${pageAlias}.once('dialog', dialog => {
    console.log(\`Dialog message: \${dialog.message()}\`);
    dialog.dismiss().catch(() => {});
  });`);
      }
      if (signals.popup)
        formatter.add(`const ${signals.popup.popupAlias}Promise = ${pageAlias}.waitForEvent('popup');`);
      if (signals.download)
        formatter.add(`const download${signals.download.downloadAlias}Promise = ${pageAlias}.waitForEvent('download');`);
      formatter.add(this._generateActionCall(subject, action));
      if (signals.popup)
        formatter.add(`const ${signals.popup.popupAlias} = await ${signals.popup.popupAlias}Promise;`);
      if (signals.download)
        formatter.add(`const download${signals.download.downloadAlias} = await download${signals.download.downloadAlias}Promise;`);
      return formatter.format();
    }
    _generateActionCall(subject, action) {
      switch (action.name) {
        case "openPage":
          throw Error("Not reached");
        case "closePage":
          return `await ${subject}.close();`;
        case "click": {
          let method = "click";
          if (action.clickCount === 2)
            method = "dblclick";
          const modifiers = (0, _utils.toModifiers)(action.modifiers);
          const options = {};
          if (action.button !== "left")
            options.button = action.button;
          if (modifiers.length)
            options.modifiers = modifiers;
          if (action.clickCount > 2)
            options.clickCount = action.clickCount;
          if (action.position)
            options.position = action.position;
          const optionsString = formatOptions(options, false);
          return `await ${subject}.${this._asLocator(action.selector)}.${method}(${optionsString});`;
        }
        case "check":
          return `await ${subject}.${this._asLocator(action.selector)}.check();`;
        case "uncheck":
          return `await ${subject}.${this._asLocator(action.selector)}.uncheck();`;
        case "fill":
          return `await ${subject}.${this._asLocator(action.selector)}.fill(${quote(action.text)});`;
        case "setInputFiles":
          return `await ${subject}.${this._asLocator(action.selector)}.setInputFiles(${formatObject(action.files.length === 1 ? action.files[0] : action.files)});`;
        case "press": {
          const modifiers = (0, _utils.toModifiers)(action.modifiers);
          const shortcut = [...modifiers, action.key].join("+");
          return `await ${subject}.${this._asLocator(action.selector)}.press(${quote(shortcut)});`;
        }
        case "navigate":
          return `await ${subject}.goto(${quote(action.url)});`;
        case "select":
          return `await ${subject}.${this._asLocator(action.selector)}.selectOption(${formatObject(action.options.length > 1 ? action.options : action.options[0])});`;
        case "assertText":
          return `${this._isTest ? "" : "// "}await expect(${subject}.${this._asLocator(action.selector)}).${action.substring ? "toContainText" : "toHaveText"}(${quote(action.text)});`;
        case "assertChecked":
          return `${this._isTest ? "" : "// "}await expect(${subject}.${this._asLocator(action.selector)})${action.checked ? "" : ".not"}.toBeChecked();`;
        case "assertVisible":
          return `${this._isTest ? "" : "// "}await expect(${subject}.${this._asLocator(action.selector)}).toBeVisible();`;
        case "assertValue": {
          const assertion = action.value ? `toHaveValue(${quote(action.value)})` : `toBeEmpty()`;
          return `${this._isTest ? "" : "// "}await expect(${subject}.${this._asLocator(action.selector)}).${assertion};`;
        }
      }
    }
    _asLocator(selector) {
      return (0, _locatorGenerators.asLocator)("javascript", selector);
    }
    generateHeader(options) {
      if (this._isTest)
        return this.generateTestHeader(options);
      return this.generateStandaloneHeader(options);
    }
    generateFooter(saveStorage) {
      if (this._isTest)
        return this.generateTestFooter(saveStorage);
      return this.generateStandaloneFooter(saveStorage);
    }
    generateTestHeader(options) {
      const formatter = new JavaScriptFormatter;
      const useText = formatContextOptions(options.contextOptions, options.deviceName);
      formatter.add(`
      import { test, expect${options.deviceName ? ", devices" : ""} } from '@playwright/test';
${useText ? "\ntest.use(" + useText + ");\n" : ""}
      test('test', async ({ page }) => {`);
      return formatter.format();
    }
    generateTestFooter(saveStorage) {
      return `});`;
    }
    generateStandaloneHeader(options) {
      const formatter = new JavaScriptFormatter;
      formatter.add(`
      const { ${options.browserName}${options.deviceName ? ", devices" : ""} } = require('playwright');

      (async () => {
        const browser = await ${options.browserName}.launch(${formatObjectOrVoid(options.launchOptions)});
        const context = await browser.newContext(${formatContextOptions(options.contextOptions, options.deviceName)});`);
      return formatter.format();
    }
    generateStandaloneFooter(saveStorage) {
      const storageStateLine = saveStorage ? `\n  await context.storageState({ path: ${quote(saveStorage)} });` : "";
      return `\n  // ---------------------${storageStateLine}
  await context.close();
  await browser.close();
})();`;
    }
  }
  exports.JavaScriptLanguageGenerator = JavaScriptLanguageGenerator;

  class JavaScriptFormatter {
    constructor(offset = 0) {
      this._baseIndent = undefined;
      this._baseOffset = undefined;
      this._lines = [];
      this._baseIndent = " ".repeat(2);
      this._baseOffset = " ".repeat(offset);
    }
    prepend(text) {
      this._lines = text.trim().split("\n").map((line) => line.trim()).concat(this._lines);
    }
    add(text) {
      this._lines.push(...text.trim().split("\n").map((line) => line.trim()));
    }
    newLine() {
      this._lines.push("");
    }
    format() {
      let spaces = "";
      let previousLine = "";
      return this._lines.map((line) => {
        if (line === "")
          return line;
        if (line.startsWith("}") || line.startsWith("]"))
          spaces = spaces.substring(this._baseIndent.length);
        const extraSpaces = /^(for|while|if|try).*\(.*\)$/.test(previousLine) ? this._baseIndent : "";
        previousLine = line;
        const callCarryOver = line.startsWith(".set");
        line = spaces + extraSpaces + (callCarryOver ? this._baseIndent : "") + line;
        if (line.endsWith("{") || line.endsWith("["))
          spaces += this._baseIndent;
        return this._baseOffset + line;
      }).join("\n");
    }
  }
  exports.JavaScriptFormatter = JavaScriptFormatter;
});

// node_modules/playwright-core/lib/server/recorder/java.js
var require_java = __commonJS((exports) => {
  var formatPath = function(files) {
    if (Array.isArray(files)) {
      if (files.length === 0)
        return "new Path[0]";
      return `new Path[] {${files.map((s) => "Paths.get(" + quote(s) + ")").join(", ")}}`;
    }
    return `Paths.get(${quote(files)})`;
  };
  var formatSelectOption = function(options) {
    if (Array.isArray(options)) {
      if (options.length === 0)
        return "new String[0]";
      return `new String[] {${options.map((s) => quote(s)).join(", ")}}`;
    }
    return quote(options);
  };
  var formatLaunchOptions = function(options) {
    const lines = [];
    if (!Object.keys(options).filter((key) => options[key] !== undefined).length)
      return "";
    lines.push("new BrowserType.LaunchOptions()");
    if (options.channel)
      lines.push(`  .setChannel(${quote(options.channel)})`);
    if (typeof options.headless === "boolean")
      lines.push(`  .setHeadless(false)`);
    return lines.join("\n");
  };
  var formatContextOptions = function(contextOptions, deviceName) {
    var _options$recordHar, _options$recordHar2, _options$recordHar3, _options$recordHar4, _options$recordHar5, _options$recordHar6, _options$recordHar7;
    const lines = [];
    if (!Object.keys(contextOptions).length && !deviceName)
      return "";
    const device = deviceName ? deviceDescriptors[deviceName] : {};
    const options = {
      ...device,
      ...contextOptions
    };
    lines.push("new Browser.NewContextOptions()");
    if (options.acceptDownloads)
      lines.push(`  .setAcceptDownloads(true)`);
    if (options.bypassCSP)
      lines.push(`  .setBypassCSP(true)`);
    if (options.colorScheme)
      lines.push(`  .setColorScheme(ColorScheme.${options.colorScheme.toUpperCase()})`);
    if (options.deviceScaleFactor)
      lines.push(`  .setDeviceScaleFactor(${options.deviceScaleFactor})`);
    if (options.geolocation)
      lines.push(`  .setGeolocation(${options.geolocation.latitude}, ${options.geolocation.longitude})`);
    if (options.hasTouch)
      lines.push(`  .setHasTouch(${options.hasTouch})`);
    if (options.isMobile)
      lines.push(`  .setIsMobile(${options.isMobile})`);
    if (options.locale)
      lines.push(`  .setLocale(${quote(options.locale)})`);
    if (options.proxy)
      lines.push(`  .setProxy(new Proxy(${quote(options.proxy.server)}))`);
    if ((_options$recordHar = options.recordHar) !== null && _options$recordHar !== undefined && _options$recordHar.content)
      lines.push(`  .setRecordHarContent(HarContentPolicy.${(_options$recordHar2 = options.recordHar) === null || _options$recordHar2 === undefined ? undefined : _options$recordHar2.content.toUpperCase()})`);
    if ((_options$recordHar3 = options.recordHar) !== null && _options$recordHar3 !== undefined && _options$recordHar3.mode)
      lines.push(`  .setRecordHarMode(HarMode.${(_options$recordHar4 = options.recordHar) === null || _options$recordHar4 === undefined ? undefined : _options$recordHar4.mode.toUpperCase()})`);
    if ((_options$recordHar5 = options.recordHar) !== null && _options$recordHar5 !== undefined && _options$recordHar5.omitContent)
      lines.push(`  .setRecordHarOmitContent(true)`);
    if ((_options$recordHar6 = options.recordHar) !== null && _options$recordHar6 !== undefined && _options$recordHar6.path)
      lines.push(`  .setRecordHarPath(Paths.get(${quote(options.recordHar.path)}))`);
    if ((_options$recordHar7 = options.recordHar) !== null && _options$recordHar7 !== undefined && _options$recordHar7.urlFilter)
      lines.push(`  .setRecordHarUrlFilter(${quote(options.recordHar.urlFilter)})`);
    if (options.serviceWorkers)
      lines.push(`  .setServiceWorkers(ServiceWorkerPolicy.${options.serviceWorkers.toUpperCase()})`);
    if (options.storageState)
      lines.push(`  .setStorageStatePath(Paths.get(${quote(options.storageState)}))`);
    if (options.timezoneId)
      lines.push(`  .setTimezoneId(${quote(options.timezoneId)})`);
    if (options.userAgent)
      lines.push(`  .setUserAgent(${quote(options.userAgent)})`);
    if (options.viewport)
      lines.push(`  .setViewportSize(${options.viewport.width}, ${options.viewport.height})`);
    return lines.join("\n");
  };
  var formatClickOptions = function(options) {
    const lines = [];
    if (options.button)
      lines.push(`  .setButton(MouseButton.${options.button.toUpperCase()})`);
    if (options.modifiers)
      lines.push(`  .setModifiers(Arrays.asList(${options.modifiers.map((m) => `KeyboardModifier.${m.toUpperCase()}`).join(", ")}))`);
    if (options.clickCount)
      lines.push(`  .setClickCount(${options.clickCount})`);
    if (options.position)
      lines.push(`  .setPosition(${options.position.x}, ${options.position.y})`);
    if (!lines.length)
      return "";
    lines.unshift(`new Locator.ClickOptions()`);
    return lines.join("\n");
  };
  var quote = function(text) {
    return (0, _stringUtils.escapeWithQuotes)(text, "\"");
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.JavaLanguageGenerator = undefined;
  var _language = require_language2();
  var _utils = require_utils4();
  var _javascript = require_javascript2();
  var _stringUtils = require_stringUtils();
  var _locatorGenerators = require_locatorGenerators();
  var deviceDescriptors = require_deviceDescriptorsSource();

  class JavaLanguageGenerator {
    constructor(mode) {
      this.id = undefined;
      this.groupName = "Java";
      this.name = undefined;
      this.highlighter = "java";
      this._mode = undefined;
      if (mode === "library") {
        this.name = "Library";
        this.id = "java";
      } else if (mode === "junit") {
        this.name = "JUnit";
        this.id = "java-junit";
      } else {
        throw new Error(`Unknown Java language mode: ${mode}`);
      }
      this._mode = mode;
    }
    generateAction(actionInContext) {
      const action = actionInContext.action;
      const pageAlias = actionInContext.frame.pageAlias;
      const offset = this._mode === "junit" ? 4 : 6;
      const formatter = new _javascript.JavaScriptFormatter(offset);
      if (this._mode !== "library" && (action.name === "openPage" || action.name === "closePage"))
        return "";
      if (action.name === "openPage") {
        formatter.add(`Page ${pageAlias} = context.newPage();`);
        if (action.url && action.url !== "about:blank" && action.url !== "chrome://newtab/")
          formatter.add(`${pageAlias}.navigate(${quote(action.url)});`);
        return formatter.format();
      }
      let subject;
      let inFrameLocator = false;
      if (actionInContext.frame.isMainFrame) {
        subject = pageAlias;
      } else {
        const locators = actionInContext.frame.selectorsChain.map((selector) => `.frameLocator(${quote(selector)})`);
        subject = `${pageAlias}${locators.join("")}`;
        inFrameLocator = true;
      }
      const signals = (0, _language.toSignalMap)(action);
      if (signals.dialog) {
        formatter.add(`  ${pageAlias}.onceDialog(dialog -> {
        System.out.println(String.format("Dialog message: %s", dialog.message()));
        dialog.dismiss();
      });`);
      }
      let code = this._generateActionCall(subject, action, inFrameLocator);
      if (signals.popup) {
        code = `Page ${signals.popup.popupAlias} = ${pageAlias}.waitForPopup(() -> {
        ${code}
      });`;
      }
      if (signals.download) {
        code = `Download download${signals.download.downloadAlias} = ${pageAlias}.waitForDownload(() -> {
        ${code}
      });`;
      }
      formatter.add(code);
      return formatter.format();
    }
    _generateActionCall(subject, action, inFrameLocator) {
      switch (action.name) {
        case "openPage":
          throw Error("Not reached");
        case "closePage":
          return `${subject}.close();`;
        case "click": {
          let method = "click";
          if (action.clickCount === 2)
            method = "dblclick";
          const modifiers = (0, _utils.toModifiers)(action.modifiers);
          const options = {};
          if (action.button !== "left")
            options.button = action.button;
          if (modifiers.length)
            options.modifiers = modifiers;
          if (action.clickCount > 2)
            options.clickCount = action.clickCount;
          if (action.position)
            options.position = action.position;
          const optionsText = formatClickOptions(options);
          return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.${method}(${optionsText});`;
        }
        case "check":
          return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.check();`;
        case "uncheck":
          return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.uncheck();`;
        case "fill":
          return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.fill(${quote(action.text)});`;
        case "setInputFiles":
          return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.setInputFiles(${formatPath(action.files.length === 1 ? action.files[0] : action.files)});`;
        case "press": {
          const modifiers = (0, _utils.toModifiers)(action.modifiers);
          const shortcut = [...modifiers, action.key].join("+");
          return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.press(${quote(shortcut)});`;
        }
        case "navigate":
          return `${subject}.navigate(${quote(action.url)});`;
        case "select":
          return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.selectOption(${formatSelectOption(action.options.length > 1 ? action.options : action.options[0])});`;
        case "assertText":
          return `assertThat(${subject}.${this._asLocator(action.selector, inFrameLocator)}).${action.substring ? "containsText" : "hasText"}(${quote(action.text)});`;
        case "assertChecked":
          return `assertThat(${subject}.${this._asLocator(action.selector, inFrameLocator)})${action.checked ? "" : ".not()"}.isChecked();`;
        case "assertVisible":
          return `assertThat(${subject}.${this._asLocator(action.selector, inFrameLocator)}).isVisible();`;
        case "assertValue": {
          const assertion = action.value ? `hasValue(${quote(action.value)})` : `isEmpty()`;
          return `assertThat(${subject}.${this._asLocator(action.selector, inFrameLocator)}).${assertion};`;
        }
      }
    }
    _asLocator(selector, inFrameLocator) {
      return (0, _locatorGenerators.asLocator)("java", selector, inFrameLocator);
    }
    generateHeader(options) {
      const formatter = new _javascript.JavaScriptFormatter;
      if (this._mode === "junit") {
        formatter.add(`
      import com.microsoft.playwright.junit.UsePlaywright;
      import com.microsoft.playwright.Page;
      import com.microsoft.playwright.options.*;

      import org.junit.jupiter.api.*;
      import static com.microsoft.playwright.assertions.PlaywrightAssertions.*;

      @UsePlaywright
      public class TestExample {
        @Test
        void test(Page page) {`);
        return formatter.format();
      }
      formatter.add(`
    import com.microsoft.playwright.*;
    import com.microsoft.playwright.options.*;
    import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;
    import java.util.*;

    public class Example {
      public static void main(String[] args) {
        try (Playwright playwright = Playwright.create()) {
          Browser browser = playwright.${options.browserName}().launch(${formatLaunchOptions(options.launchOptions)});
          BrowserContext context = browser.newContext(${formatContextOptions(options.contextOptions, options.deviceName)});`);
      return formatter.format();
    }
    generateFooter(saveStorage) {
      const storageStateLine = saveStorage ? `\n      context.storageState(new BrowserContext.StorageStateOptions().setPath(${quote(saveStorage)}));\n` : "";
      if (this._mode === "junit") {
        return `${storageStateLine}  }
}`;
      }
      return `${storageStateLine}    }
  }
}`;
    }
  }
  exports.JavaLanguageGenerator = JavaLanguageGenerator;
});

// node_modules/playwright-core/lib/server/recorder/jsonl.js
var require_jsonl = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.JsonlLanguageGenerator = undefined;
  var _locatorGenerators = require_locatorGenerators();

  class JsonlLanguageGenerator {
    constructor() {
      this.id = "jsonl";
      this.groupName = "";
      this.name = "JSONL";
      this.highlighter = "javascript";
    }
    generateAction(actionInContext) {
      const locator = actionInContext.action.selector ? JSON.parse((0, _locatorGenerators.asLocator)("jsonl", actionInContext.action.selector)) : undefined;
      const entry = {
        ...actionInContext.action,
        pageAlias: actionInContext.frame.pageAlias,
        locator
      };
      return JSON.stringify(entry);
    }
    generateHeader(options) {
      return JSON.stringify(options);
    }
    generateFooter(saveStorage) {
      return "";
    }
  }
  exports.JsonlLanguageGenerator = JsonlLanguageGenerator;
});

// node_modules/playwright-core/lib/server/recorder/csharp.js
var require_csharp = __commonJS((exports) => {
  var formatObject = function(value, indent = "    ", name = "") {
    if (typeof value === "string") {
      if (["permissions", "colorScheme", "modifiers", "button", "recordHarContent", "recordHarMode", "serviceWorkers"].includes(name))
        return `${getClassName(name)}.${toPascal(value)}`;
      return quote(value);
    }
    if (Array.isArray(value))
      return `new[] { ${value.map((o) => formatObject(o, indent, name)).join(", ")} }`;
    if (typeof value === "object") {
      const keys = Object.keys(value).filter((key) => value[key] !== undefined).sort();
      if (!keys.length)
        return name ? `new ${getClassName(name)}` : "";
      const tokens = [];
      for (const key of keys) {
        const property = getPropertyName(key);
        tokens.push(`${property} = ${formatObject(value[key], indent, key)},`);
      }
      if (name)
        return `new ${getClassName(name)}\n{\n${indent}${tokens.join(`\n${indent}`)}\n${indent}}`;
      return `{\n${indent}${tokens.join(`\n${indent}`)}\n${indent}}`;
    }
    if (name === "latitude" || name === "longitude")
      return String(value) + "m";
    return String(value);
  };
  var getClassName = function(value) {
    switch (value) {
      case "viewport":
        return "ViewportSize";
      case "proxy":
        return "ProxySettings";
      case "permissions":
        return "ContextPermission";
      case "modifiers":
        return "KeyboardModifier";
      case "button":
        return "MouseButton";
      case "recordHarMode":
        return "HarMode";
      case "recordHarContent":
        return "HarContentPolicy";
      case "serviceWorkers":
        return "ServiceWorkerPolicy";
      default:
        return toPascal(value);
    }
  };
  var getPropertyName = function(key) {
    switch (key) {
      case "storageState":
        return "StorageStatePath";
      case "viewport":
        return "ViewportSize";
      default:
        return toPascal(key);
    }
  };
  var toPascal = function(value) {
    return value[0].toUpperCase() + value.slice(1);
  };
  var convertContextOptions = function(options) {
    const result = {
      ...options
    };
    if (options.recordHar) {
      result["recordHarPath"] = options.recordHar.path;
      result["recordHarContent"] = options.recordHar.content;
      result["recordHarMode"] = options.recordHar.mode;
      result["recordHarOmitContent"] = options.recordHar.omitContent;
      result["recordHarUrlFilter"] = options.recordHar.urlFilter;
      delete result.recordHar;
    }
    return result;
  };
  var formatContextOptions = function(options, deviceName) {
    const device = deviceName && deviceDescriptors[deviceName];
    if (!device) {
      if (!Object.entries(options).length)
        return "";
      return formatObject(convertContextOptions(options), "    ", "BrowserNewContextOptions");
    }
    options = (0, _language.sanitizeDeviceOptions)(device, options);
    if (!Object.entries(options).length)
      return `playwright.Devices[${quote(deviceName)}]`;
    return formatObject(convertContextOptions(options), "    ", `BrowserNewContextOptions(playwright.Devices[${quote(deviceName)}])`);
  };
  var quote = function(text) {
    return (0, _stringUtils.escapeWithQuotes)(text, "\"");
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CSharpLanguageGenerator = undefined;
  var _language = require_language2();
  var _utils = require_utils4();
  var _stringUtils = require_stringUtils();
  var _locatorGenerators = require_locatorGenerators();
  var deviceDescriptors = require_deviceDescriptorsSource();

  class CSharpLanguageGenerator {
    constructor(mode) {
      this.id = undefined;
      this.groupName = ".NET C#";
      this.name = undefined;
      this.highlighter = "csharp";
      this._mode = undefined;
      if (mode === "library") {
        this.name = "Library";
        this.id = "csharp";
      } else if (mode === "mstest") {
        this.name = "MSTest";
        this.id = "csharp-mstest";
      } else if (mode === "nunit") {
        this.name = "NUnit";
        this.id = "csharp-nunit";
      } else {
        throw new Error(`Unknown C# language mode: ${mode}`);
      }
      this._mode = mode;
    }
    generateAction(actionInContext) {
      const action = this._generateActionInner(actionInContext);
      if (action)
        return action;
      return "";
    }
    _generateActionInner(actionInContext) {
      const action = actionInContext.action;
      if (this._mode !== "library" && (action.name === "openPage" || action.name === "closePage"))
        return "";
      let pageAlias = actionInContext.frame.pageAlias;
      if (this._mode !== "library")
        pageAlias = pageAlias.replace("page", "Page");
      const formatter = new CSharpFormatter(this._mode === "library" ? 0 : 8);
      if (action.name === "openPage") {
        formatter.add(`var ${pageAlias} = await context.NewPageAsync();`);
        if (action.url && action.url !== "about:blank" && action.url !== "chrome://newtab/")
          formatter.add(`await ${pageAlias}.GotoAsync(${quote(action.url)});`);
        return formatter.format();
      }
      let subject;
      if (actionInContext.frame.isMainFrame) {
        subject = pageAlias;
      } else {
        const locators = actionInContext.frame.selectorsChain.map((selector) => `.FrameLocator(${quote(selector)})`);
        subject = `${pageAlias}${locators.join("")}`;
      }
      const signals = (0, _language.toSignalMap)(action);
      if (signals.dialog) {
        formatter.add(`    void ${pageAlias}_Dialog${signals.dialog.dialogAlias}_EventHandler(object sender, IDialog dialog)
      {
          Console.WriteLine(\$"Dialog message: {dialog.Message}");
          dialog.DismissAsync();
          ${pageAlias}.Dialog -= ${pageAlias}_Dialog${signals.dialog.dialogAlias}_EventHandler;
      }
      ${pageAlias}.Dialog += ${pageAlias}_Dialog${signals.dialog.dialogAlias}_EventHandler;`);
      }
      const lines = [];
      lines.push(this._generateActionCall(subject, action));
      if (signals.download) {
        lines.unshift(`var download${signals.download.downloadAlias} = await ${pageAlias}.RunAndWaitForDownloadAsync(async () =>\n{`);
        lines.push(`});`);
      }
      if (signals.popup) {
        lines.unshift(`var ${signals.popup.popupAlias} = await ${pageAlias}.RunAndWaitForPopupAsync(async () =>\n{`);
        lines.push(`});`);
      }
      for (const line of lines)
        formatter.add(line);
      return formatter.format();
    }
    _generateActionCall(subject, action) {
      switch (action.name) {
        case "openPage":
          throw Error("Not reached");
        case "closePage":
          return `await ${subject}.CloseAsync();`;
        case "click": {
          let method = "Click";
          if (action.clickCount === 2)
            method = "DblClick";
          const modifiers = (0, _utils.toModifiers)(action.modifiers);
          const options = {};
          if (action.button !== "left")
            options.button = action.button;
          if (modifiers.length)
            options.modifiers = modifiers;
          if (action.clickCount > 2)
            options.clickCount = action.clickCount;
          if (action.position)
            options.position = action.position;
          if (!Object.entries(options).length)
            return `await ${subject}.${this._asLocator(action.selector)}.${method}Async();`;
          const optionsString = formatObject(options, "    ", "Locator" + method + "Options");
          return `await ${subject}.${this._asLocator(action.selector)}.${method}Async(${optionsString});`;
        }
        case "check":
          return `await ${subject}.${this._asLocator(action.selector)}.CheckAsync();`;
        case "uncheck":
          return `await ${subject}.${this._asLocator(action.selector)}.UncheckAsync();`;
        case "fill":
          return `await ${subject}.${this._asLocator(action.selector)}.FillAsync(${quote(action.text)});`;
        case "setInputFiles":
          return `await ${subject}.${this._asLocator(action.selector)}.SetInputFilesAsync(${formatObject(action.files)});`;
        case "press": {
          const modifiers = (0, _utils.toModifiers)(action.modifiers);
          const shortcut = [...modifiers, action.key].join("+");
          return `await ${subject}.${this._asLocator(action.selector)}.PressAsync(${quote(shortcut)});`;
        }
        case "navigate":
          return `await ${subject}.GotoAsync(${quote(action.url)});`;
        case "select":
          return `await ${subject}.${this._asLocator(action.selector)}.SelectOptionAsync(${formatObject(action.options)});`;
        case "assertText":
          return `await Expect(${subject}.${this._asLocator(action.selector)}).${action.substring ? "ToContainTextAsync" : "ToHaveTextAsync"}(${quote(action.text)});`;
        case "assertChecked":
          return `await Expect(${subject}.${this._asLocator(action.selector)})${action.checked ? "" : ".Not"}.ToBeCheckedAsync();`;
        case "assertVisible":
          return `await Expect(${subject}.${this._asLocator(action.selector)}).ToBeVisibleAsync();`;
        case "assertValue": {
          const assertion = action.value ? `ToHaveValueAsync(${quote(action.value)})` : `ToBeEmptyAsync()`;
          return `await Expect(${subject}.${this._asLocator(action.selector)}).${assertion};`;
        }
      }
    }
    _asLocator(selector) {
      return (0, _locatorGenerators.asLocator)("csharp", selector);
    }
    generateHeader(options) {
      if (this._mode === "library")
        return this.generateStandaloneHeader(options);
      return this.generateTestRunnerHeader(options);
    }
    generateStandaloneHeader(options) {
      const formatter = new CSharpFormatter(0);
      formatter.add(`
      using Microsoft.Playwright;
      using System;
      using System.Threading.Tasks;

      using var playwright = await Playwright.CreateAsync();
      await using var browser = await playwright.${toPascal(options.browserName)}.LaunchAsync(${formatObject(options.launchOptions, "    ", "BrowserTypeLaunchOptions")});
      var context = await browser.NewContextAsync(${formatContextOptions(options.contextOptions, options.deviceName)});`);
      formatter.newLine();
      return formatter.format();
    }
    generateTestRunnerHeader(options) {
      const formatter = new CSharpFormatter(0);
      formatter.add(`
      using Microsoft.Playwright.${this._mode === "nunit" ? "NUnit" : "MSTest"};
      using Microsoft.Playwright;

      ${this._mode === "nunit" ? `[Parallelizable(ParallelScope.Self)]
      [TestFixture]` : "[TestClass]"}
      public class Tests : PageTest
      {`);
      const formattedContextOptions = formatContextOptions(options.contextOptions, options.deviceName);
      if (formattedContextOptions) {
        formatter.add(`public override BrowserNewContextOptions ContextOptions()
      {
          return ${formattedContextOptions};
      }`);
        formatter.newLine();
      }
      formatter.add(`    [${this._mode === "nunit" ? "Test" : "TestMethod"}]
    public async Task MyTest()
    {`);
      return formatter.format();
    }
    generateFooter(saveStorage) {
      const offset = this._mode === "library" ? "" : "        ";
      let storageStateLine = saveStorage ? `\n${offset}await context.StorageStateAsync(new BrowserContextStorageStateOptions\n${offset}{\n${offset}    Path = ${quote(saveStorage)}\n${offset}});\n` : "";
      if (this._mode !== "library")
        storageStateLine += `    }\n}\n`;
      return storageStateLine;
    }
  }
  exports.CSharpLanguageGenerator = CSharpLanguageGenerator;

  class CSharpFormatter {
    constructor(offset = 0) {
      this._baseIndent = undefined;
      this._baseOffset = undefined;
      this._lines = [];
      this._baseIndent = " ".repeat(4);
      this._baseOffset = " ".repeat(offset);
    }
    prepend(text) {
      this._lines = text.trim().split("\n").map((line) => line.trim()).concat(this._lines);
    }
    add(text) {
      this._lines.push(...text.trim().split("\n").map((line) => line.trim()));
    }
    newLine() {
      this._lines.push("");
    }
    format() {
      let spaces = "";
      let previousLine = "";
      return this._lines.map((line) => {
        if (line === "")
          return line;
        if (line.startsWith("}") || line.startsWith("]") || line.includes("});") || line === ");")
          spaces = spaces.substring(this._baseIndent.length);
        const extraSpaces = /^(for|while|if).*\(.*\)$/.test(previousLine) ? this._baseIndent : "";
        previousLine = line;
        line = spaces + extraSpaces + line;
        if (line.endsWith("{") || line.endsWith("[") || line.endsWith("("))
          spaces += this._baseIndent;
        if (line.endsWith("));"))
          spaces = spaces.substring(this._baseIndent.length);
        return this._baseOffset + line;
      }).join("\n");
    }
  }
});

// node_modules/playwright-core/lib/server/recorder/python.js
var require_python = __commonJS((exports) => {
  var formatValue = function(value) {
    if (value === false)
      return "False";
    if (value === true)
      return "True";
    if (value === undefined)
      return "None";
    if (Array.isArray(value))
      return `[${value.map(formatValue).join(", ")}]`;
    if (typeof value === "string")
      return quote(value);
    if (typeof value === "object")
      return JSON.stringify(value);
    return String(value);
  };
  var formatOptions = function(value, hasArguments, asDict) {
    const keys = Object.keys(value).filter((key) => value[key] !== undefined).sort();
    if (!keys.length)
      return "";
    return (hasArguments ? ", " : "") + keys.map((key) => {
      if (asDict)
        return `"${(0, _stringUtils.toSnakeCase)(key)}": ${formatValue(value[key])}`;
      return `${(0, _stringUtils.toSnakeCase)(key)}=${formatValue(value[key])}`;
    }).join(", ");
  };
  var convertContextOptions = function(options) {
    const result = {
      ...options
    };
    if (options.recordHar) {
      result["record_har_path"] = options.recordHar.path;
      result["record_har_content"] = options.recordHar.content;
      result["record_har_mode"] = options.recordHar.mode;
      result["record_har_omit_content"] = options.recordHar.omitContent;
      result["record_har_url_filter"] = options.recordHar.urlFilter;
      delete result.recordHar;
    }
    return result;
  };
  var formatContextOptions = function(options, deviceName, asDict) {
    const device = deviceName && deviceDescriptors[deviceName];
    if (!device)
      return formatOptions(convertContextOptions(options), false, asDict);
    return `**playwright.devices[${quote(deviceName)}]` + formatOptions(convertContextOptions((0, _language.sanitizeDeviceOptions)(device, options)), true, asDict);
  };
  var quote = function(text) {
    return (0, _stringUtils.escapeWithQuotes)(text, "\"");
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PythonLanguageGenerator = undefined;
  var _language = require_language2();
  var _utils = require_utils4();
  var _stringUtils = require_stringUtils();
  var _locatorGenerators = require_locatorGenerators();
  var deviceDescriptors = require_deviceDescriptorsSource();

  class PythonLanguageGenerator {
    constructor(isAsync, isPyTest) {
      this.id = undefined;
      this.groupName = "Python";
      this.name = undefined;
      this.highlighter = "python";
      this._awaitPrefix = undefined;
      this._asyncPrefix = undefined;
      this._isAsync = undefined;
      this._isPyTest = undefined;
      this.id = isPyTest ? "python-pytest" : isAsync ? "python-async" : "python";
      this.name = isPyTest ? "Pytest" : isAsync ? "Library Async" : "Library";
      this._isAsync = isAsync;
      this._isPyTest = isPyTest;
      this._awaitPrefix = isAsync ? "await " : "";
      this._asyncPrefix = isAsync ? "async " : "";
    }
    generateAction(actionInContext) {
      const action = actionInContext.action;
      if (this._isPyTest && (action.name === "openPage" || action.name === "closePage"))
        return "";
      const pageAlias = actionInContext.frame.pageAlias;
      const formatter = new PythonFormatter(4);
      if (action.name === "openPage") {
        formatter.add(`${pageAlias} = ${this._awaitPrefix}context.new_page()`);
        if (action.url && action.url !== "about:blank" && action.url !== "chrome://newtab/")
          formatter.add(`${this._awaitPrefix}${pageAlias}.goto(${quote(action.url)})`);
        return formatter.format();
      }
      let subject;
      if (actionInContext.frame.isMainFrame) {
        subject = pageAlias;
      } else {
        const locators = actionInContext.frame.selectorsChain.map((selector) => `.frame_locator(${quote(selector)})`);
        subject = `${pageAlias}${locators.join("")}`;
      }
      const signals = (0, _language.toSignalMap)(action);
      if (signals.dialog)
        formatter.add(`  ${pageAlias}.once("dialog", lambda dialog: dialog.dismiss())`);
      let code = `${this._awaitPrefix}${this._generateActionCall(subject, action)}`;
      if (signals.popup) {
        code = `${this._asyncPrefix}with ${pageAlias}.expect_popup() as ${signals.popup.popupAlias}_info {
        ${code}
      }
      ${signals.popup.popupAlias} = ${this._awaitPrefix}${signals.popup.popupAlias}_info.value`;
      }
      if (signals.download) {
        code = `${this._asyncPrefix}with ${pageAlias}.expect_download() as download${signals.download.downloadAlias}_info {
        ${code}
      }
      download${signals.download.downloadAlias} = ${this._awaitPrefix}download${signals.download.downloadAlias}_info.value`;
      }
      formatter.add(code);
      return formatter.format();
    }
    _generateActionCall(subject, action) {
      switch (action.name) {
        case "openPage":
          throw Error("Not reached");
        case "closePage":
          return `${subject}.close()`;
        case "click": {
          let method = "click";
          if (action.clickCount === 2)
            method = "dblclick";
          const modifiers = (0, _utils.toModifiers)(action.modifiers);
          const options = {};
          if (action.button !== "left")
            options.button = action.button;
          if (modifiers.length)
            options.modifiers = modifiers;
          if (action.clickCount > 2)
            options.clickCount = action.clickCount;
          if (action.position)
            options.position = action.position;
          const optionsString = formatOptions(options, false);
          return `${subject}.${this._asLocator(action.selector)}.${method}(${optionsString})`;
        }
        case "check":
          return `${subject}.${this._asLocator(action.selector)}.check()`;
        case "uncheck":
          return `${subject}.${this._asLocator(action.selector)}.uncheck()`;
        case "fill":
          return `${subject}.${this._asLocator(action.selector)}.fill(${quote(action.text)})`;
        case "setInputFiles":
          return `${subject}.${this._asLocator(action.selector)}.set_input_files(${formatValue(action.files.length === 1 ? action.files[0] : action.files)})`;
        case "press": {
          const modifiers = (0, _utils.toModifiers)(action.modifiers);
          const shortcut = [...modifiers, action.key].join("+");
          return `${subject}.${this._asLocator(action.selector)}.press(${quote(shortcut)})`;
        }
        case "navigate":
          return `${subject}.goto(${quote(action.url)})`;
        case "select":
          return `${subject}.${this._asLocator(action.selector)}.select_option(${formatValue(action.options.length === 1 ? action.options[0] : action.options)})`;
        case "assertText":
          return `expect(${subject}.${this._asLocator(action.selector)}).${action.substring ? "to_contain_text" : "to_have_text"}(${quote(action.text)})`;
        case "assertChecked":
          return `expect(${subject}.${this._asLocator(action.selector)}).${action.checked ? "to_be_checked()" : "not_to_be_checked()"}`;
        case "assertVisible":
          return `expect(${subject}.${this._asLocator(action.selector)}).to_be_visible()`;
        case "assertValue": {
          const assertion = action.value ? `to_have_value(${quote(action.value)})` : `to_be_empty()`;
          return `expect(${subject}.${this._asLocator(action.selector)}).${assertion};`;
        }
      }
    }
    _asLocator(selector) {
      return (0, _locatorGenerators.asLocator)("python", selector);
    }
    generateHeader(options) {
      const formatter = new PythonFormatter;
      if (this._isPyTest) {
        const contextOptions = formatContextOptions(options.contextOptions, options.deviceName, true);
        const fixture = contextOptions ? `

@pytest.fixture(scope="session")
def browser_context_args(browser_context_args, playwright) {
    return {${contextOptions}}
}
` : "";
        formatter.add(`${options.deviceName ? "import pytest\n" : ""}
from playwright.sync_api import Page, expect
${fixture}

def test_example(page: Page) -> None {`);
      } else if (this._isAsync) {
        formatter.add(`
import asyncio

from playwright.async_api import Playwright, async_playwright, expect


async def run(playwright: Playwright) -> None {
    browser = await playwright.${options.browserName}.launch(${formatOptions(options.launchOptions, false)})
    context = await browser.new_context(${formatContextOptions(options.contextOptions, options.deviceName)})`);
      } else {
        formatter.add(`
from playwright.sync_api import Playwright, sync_playwright, expect


def run(playwright: Playwright) -> None {
    browser = playwright.${options.browserName}.launch(${formatOptions(options.launchOptions, false)})
    context = browser.new_context(${formatContextOptions(options.contextOptions, options.deviceName)})`);
      }
      return formatter.format();
    }
    generateFooter(saveStorage) {
      if (this._isPyTest) {
        return "";
      } else if (this._isAsync) {
        const storageStateLine = saveStorage ? `\n    await context.storage_state(path=${quote(saveStorage)})` : "";
        return `\n    # ---------------------${storageStateLine}
    await context.close()
    await browser.close()


async def main() -> None:
    async with async_playwright() as playwright:
        await run(playwright)


asyncio.run(main())
`;
      } else {
        const storageStateLine = saveStorage ? `\n    context.storage_state(path=${quote(saveStorage)})` : "";
        return `\n    # ---------------------${storageStateLine}
    context.close()
    browser.close()


with sync_playwright() as playwright:
    run(playwright)
`;
      }
    }
  }
  exports.PythonLanguageGenerator = PythonLanguageGenerator;

  class PythonFormatter {
    constructor(offset = 0) {
      this._baseIndent = undefined;
      this._baseOffset = undefined;
      this._lines = [];
      this._baseIndent = " ".repeat(4);
      this._baseOffset = " ".repeat(offset);
    }
    prepend(text) {
      this._lines = text.trim().split("\n").map((line) => line.trim()).concat(this._lines);
    }
    add(text) {
      this._lines.push(...text.trim().split("\n").map((line) => line.trim()));
    }
    newLine() {
      this._lines.push("");
    }
    format() {
      let spaces = "";
      const lines = [];
      this._lines.forEach((line) => {
        if (line === "")
          return lines.push(line);
        if (line === "}") {
          spaces = spaces.substring(this._baseIndent.length);
          return;
        }
        line = spaces + line;
        if (line.endsWith("{")) {
          spaces += this._baseIndent;
          line = line.substring(0, line.length - 1).trimEnd() + ":";
        }
        return lines.push(this._baseOffset + line);
      });
      return lines.join("\n");
    }
  }
});

// node_modules/playwright-core/lib/generated/recorderSource.js
var require_recorderSource = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.source = undefined;
  var source = exports.source = "\nvar __commonJS = obj => {\n  let required = false;\n  let result;\n  return function __require() {\n    if (!required) {\n      required = true;\n      let fn;\n      for (const name in obj) { fn = obj[name]; break; }\n      const module = { exports: {} };\n      fn(module.exports, module);\n      result = module.exports;\n    }\n    return result;\n  }\n};\nvar __export = (target, all) => {for (var name in all) target[name] = all[name];};\nvar __toESM = mod => ({ ...mod, 'default': mod });\nvar __toCommonJS = mod => ({ ...mod, __esModule: true });\n\n\n// packages/playwright-core/src/server/injected/recorder/recorder.ts\nvar recorder_exports = {};\n__export(recorder_exports, {\n  PollingRecorder: () => PollingRecorder,\n  Recorder: () => Recorder,\n  default: () => recorder_default\n});\nmodule.exports = __toCommonJS(recorder_exports);\nvar NoneTool = class {\n  cursor() {\n    return \"default\";\n  }\n};\nvar InspectTool = class {\n  constructor(recorder, assertVisibility) {\n    this._hoveredModel = null;\n    this._hoveredElement = null;\n    this._hoveredSelectors = null;\n    this._recorder = recorder;\n    this._assertVisibility = assertVisibility;\n  }\n  cursor() {\n    return \"pointer\";\n  }\n  cleanup() {\n    this._hoveredModel = null;\n    this._hoveredElement = null;\n    this._hoveredSelectors = null;\n  }\n  onClick(event) {\n    var _a;\n    consumeEvent(event);\n    if (event.button !== 0)\n      return;\n    if ((_a = this._hoveredModel) == null ? void 0 : _a.selector)\n      this._commit(this._hoveredModel.selector);\n  }\n  onContextMenu(event) {\n    if (this._hoveredModel && !this._hoveredModel.tooltipListItemSelected && this._hoveredSelectors && this._hoveredSelectors.length > 1) {\n      consumeEvent(event);\n      const selectors = this._hoveredSelectors;\n      this._hoveredModel.tooltipFooter = void 0;\n      this._hoveredModel.tooltipList = selectors.map((selector) => this._recorder.injectedScript.utils.asLocator(this._recorder.state.language, selector));\n      this._hoveredModel.tooltipListItemSelected = (index) => {\n        if (index === void 0)\n          this._reset(true);\n        else\n          this._commit(selectors[index]);\n      };\n      this._recorder.updateHighlight(this._hoveredModel, true);\n    }\n  }\n  onPointerDown(event) {\n    consumeEvent(event);\n  }\n  onPointerUp(event) {\n    consumeEvent(event);\n  }\n  onMouseDown(event) {\n    consumeEvent(event);\n  }\n  onMouseUp(event) {\n    consumeEvent(event);\n  }\n  onMouseMove(event) {\n    var _a;\n    consumeEvent(event);\n    let target = this._recorder.deepEventTarget(event);\n    if (!target.isConnected)\n      target = null;\n    if (this._hoveredElement === target)\n      return;\n    this._hoveredElement = target;\n    let model = null;\n    let selectors = [];\n    if (this._hoveredElement) {\n      const generated = this._recorder.injectedScript.generateSelector(this._hoveredElement, { testIdAttributeName: this._recorder.state.testIdAttributeName, multiple: false });\n      selectors = generated.selectors;\n      model = {\n        selector: generated.selector,\n        elements: generated.elements,\n        tooltipText: this._recorder.injectedScript.utils.asLocator(this._recorder.state.language, generated.selector),\n        tooltipFooter: selectors.length > 1 ? `Click to select, right-click for more options` : void 0,\n        color: this._assertVisibility ? \"#8acae480\" : void 0\n      };\n    }\n    if (((_a = this._hoveredModel) == null ? void 0 : _a.selector) === (model == null ? void 0 : model.selector))\n      return;\n    this._hoveredModel = model;\n    this._hoveredSelectors = selectors;\n    this._recorder.updateHighlight(model, true);\n  }\n  onMouseEnter(event) {\n    consumeEvent(event);\n  }\n  onMouseLeave(event) {\n    consumeEvent(event);\n    const window = this._recorder.injectedScript.window;\n    if (window.top !== window && this._recorder.deepEventTarget(event).nodeType === Node.DOCUMENT_NODE)\n      this._reset(true);\n  }\n  onKeyDown(event) {\n    var _a, _b, _c;\n    consumeEvent(event);\n    if (event.key === \"Escape\") {\n      if ((_a = this._hoveredModel) == null ? void 0 : _a.tooltipListItemSelected)\n        this._reset(true);\n      else if (this._assertVisibility)\n        (_c = (_b = this._recorder.delegate).setMode) == null ? void 0 : _c.call(_b, \"recording\");\n    }\n  }\n  onKeyUp(event) {\n    consumeEvent(event);\n  }\n  onScroll(event) {\n    this._reset(false);\n  }\n  _commit(selector) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    if (this._assertVisibility) {\n      (_b = (_a = this._recorder.delegate).recordAction) == null ? void 0 : _b.call(_a, {\n        name: \"assertVisible\",\n        selector,\n        signals: []\n      });\n      (_d = (_c = this._recorder.delegate).setMode) == null ? void 0 : _d.call(_c, \"recording\");\n      (_e = this._recorder.overlay) == null ? void 0 : _e.flashToolSucceeded(\"assertingVisibility\");\n    } else {\n      (_g = (_f = this._recorder.delegate).setSelector) == null ? void 0 : _g.call(_f, selector);\n    }\n  }\n  _reset(userGesture) {\n    this._hoveredElement = null;\n    this._hoveredModel = null;\n    this._hoveredSelectors = null;\n    this._recorder.updateHighlight(null, userGesture);\n  }\n};\nvar RecordActionTool = class {\n  constructor(recorder) {\n    this._performingAction = false;\n    this._hoveredModel = null;\n    this._hoveredElement = null;\n    this._activeModel = null;\n    this._expectProgrammaticKeyUp = false;\n    this._recorder = recorder;\n  }\n  cursor() {\n    return \"pointer\";\n  }\n  cleanup() {\n    this._hoveredModel = null;\n    this._hoveredElement = null;\n    this._activeModel = null;\n    this._expectProgrammaticKeyUp = false;\n  }\n  onClick(event) {\n    if (isRangeInput(this._hoveredElement))\n      return;\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (this._actionInProgress(event))\n      return;\n    if (this._consumedDueToNoModel(event, this._hoveredModel))\n      return;\n    const checkbox = asCheckbox(this._recorder.deepEventTarget(event));\n    if (checkbox) {\n      this._performAction({\n        name: checkbox.checked ? \"check\" : \"uncheck\",\n        selector: this._hoveredModel.selector,\n        signals: []\n      });\n      return;\n    }\n    this._performAction({\n      name: \"click\",\n      selector: this._hoveredModel.selector,\n      position: positionForEvent(event),\n      signals: [],\n      button: buttonForEvent(event),\n      modifiers: modifiersForEvent(event),\n      clickCount: event.detail\n    });\n  }\n  onPointerDown(event) {\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (!this._performingAction)\n      consumeEvent(event);\n  }\n  onPointerUp(event) {\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (!this._performingAction)\n      consumeEvent(event);\n  }\n  onMouseDown(event) {\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (!this._performingAction)\n      consumeEvent(event);\n    this._activeModel = this._hoveredModel;\n  }\n  onMouseUp(event) {\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (!this._performingAction)\n      consumeEvent(event);\n  }\n  onMouseMove(event) {\n    const target = this._recorder.deepEventTarget(event);\n    if (this._hoveredElement === target)\n      return;\n    this._hoveredElement = target;\n    this._updateModelForHoveredElement();\n  }\n  onMouseLeave(event) {\n    const window = this._recorder.injectedScript.window;\n    if (window.top !== window && this._recorder.deepEventTarget(event).nodeType === Node.DOCUMENT_NODE) {\n      this._hoveredElement = null;\n      this._updateModelForHoveredElement();\n    }\n  }\n  onFocus(event) {\n    this._onFocus(true);\n  }\n  onInput(event) {\n    var _a, _b, _c, _d, _e, _f;\n    const target = this._recorder.deepEventTarget(event);\n    if (target.nodeName === \"INPUT\" && target.type.toLowerCase() === \"file\") {\n      (_b = (_a = this._recorder.delegate).recordAction) == null ? void 0 : _b.call(_a, {\n        name: \"setInputFiles\",\n        selector: this._activeModel.selector,\n        signals: [],\n        files: [...target.files || []].map((file) => file.name)\n      });\n      return;\n    }\n    if (isRangeInput(target)) {\n      (_d = (_c = this._recorder.delegate).recordAction) == null ? void 0 : _d.call(_c, {\n        name: \"fill\",\n        // must use hoveredModel instead of activeModel for it to work in webkit\n        selector: this._hoveredModel.selector,\n        signals: [],\n        text: target.value\n      });\n      return;\n    }\n    if ([\"INPUT\", \"TEXTAREA\"].includes(target.nodeName) || target.isContentEditable) {\n      if (target.nodeName === \"INPUT\" && [\"checkbox\", \"radio\"].includes(target.type.toLowerCase())) {\n        return;\n      }\n      if (this._consumedDueWrongTarget(event))\n        return;\n      (_f = (_e = this._recorder.delegate).recordAction) == null ? void 0 : _f.call(_e, {\n        name: \"fill\",\n        selector: this._activeModel.selector,\n        signals: [],\n        text: target.isContentEditable ? target.innerText : target.value\n      });\n    }\n    if (target.nodeName === \"SELECT\") {\n      const selectElement = target;\n      if (this._actionInProgress(event))\n        return;\n      this._performAction({\n        name: \"select\",\n        selector: this._hoveredModel.selector,\n        options: [...selectElement.selectedOptions].map((option) => option.value),\n        signals: []\n      });\n    }\n  }\n  onKeyDown(event) {\n    if (!this._shouldGenerateKeyPressFor(event))\n      return;\n    if (this._actionInProgress(event)) {\n      this._expectProgrammaticKeyUp = true;\n      return;\n    }\n    if (this._consumedDueWrongTarget(event))\n      return;\n    if (event.key === \" \") {\n      const checkbox = asCheckbox(this._recorder.deepEventTarget(event));\n      if (checkbox) {\n        this._performAction({\n          name: checkbox.checked ? \"uncheck\" : \"check\",\n          selector: this._activeModel.selector,\n          signals: []\n        });\n        return;\n      }\n    }\n    this._performAction({\n      name: \"press\",\n      selector: this._activeModel.selector,\n      signals: [],\n      key: event.key,\n      modifiers: modifiersForEvent(event)\n    });\n  }\n  onKeyUp(event) {\n    if (!this._shouldGenerateKeyPressFor(event))\n      return;\n    if (!this._expectProgrammaticKeyUp) {\n      consumeEvent(event);\n      return;\n    }\n    this._expectProgrammaticKeyUp = false;\n  }\n  onScroll(event) {\n    this._hoveredModel = null;\n    this._hoveredElement = null;\n    this._recorder.updateHighlight(null, false);\n  }\n  _onFocus(userGesture) {\n    const activeElement = deepActiveElement(this._recorder.document);\n    if (userGesture && activeElement === this._recorder.document.body)\n      return;\n    const result = activeElement ? this._recorder.injectedScript.generateSelector(activeElement, { testIdAttributeName: this._recorder.state.testIdAttributeName }) : null;\n    this._activeModel = result && result.selector ? result : null;\n    if (userGesture)\n      this._hoveredElement = activeElement;\n    this._updateModelForHoveredElement();\n  }\n  _shouldIgnoreMouseEvent(event) {\n    const target = this._recorder.deepEventTarget(event);\n    const nodeName = target.nodeName;\n    if (nodeName === \"SELECT\" || nodeName === \"OPTION\")\n      return true;\n    if (nodeName === \"INPUT\" && [\"date\", \"range\"].includes(target.type))\n      return true;\n    return false;\n  }\n  _actionInProgress(event) {\n    if (this._performingAction)\n      return true;\n    consumeEvent(event);\n    return false;\n  }\n  _consumedDueToNoModel(event, model) {\n    if (model)\n      return false;\n    consumeEvent(event);\n    return true;\n  }\n  _consumedDueWrongTarget(event) {\n    if (this._activeModel && this._activeModel.elements[0] === this._recorder.deepEventTarget(event))\n      return false;\n    consumeEvent(event);\n    return true;\n  }\n  async _performAction(action) {\n    var _a, _b;\n    this._hoveredElement = null;\n    this._hoveredModel = null;\n    this._activeModel = null;\n    this._recorder.updateHighlight(null, false);\n    this._performingAction = true;\n    await ((_b = (_a = this._recorder.delegate).performAction) == null ? void 0 : _b.call(_a, action).catch(() => {\n    }));\n    this._performingAction = false;\n    this._onFocus(false);\n    if (this._recorder.injectedScript.isUnderTest) {\n      console.error(\"Action performed for test: \" + JSON.stringify({\n        // eslint-disable-line no-console\n        hovered: this._hoveredModel ? this._hoveredModel.selector : null,\n        active: this._activeModel ? this._activeModel.selector : null\n      }));\n    }\n  }\n  _shouldGenerateKeyPressFor(event) {\n    if (event.key === \"Enter\" && (this._recorder.deepEventTarget(event).nodeName === \"TEXTAREA\" || this._recorder.deepEventTarget(event).isContentEditable))\n      return false;\n    if ([\"Backspace\", \"Delete\", \"AltGraph\"].includes(event.key))\n      return false;\n    if (event.key === \"@\" && event.code === \"KeyL\")\n      return false;\n    if (navigator.platform.includes(\"Mac\")) {\n      if (event.key === \"v\" && event.metaKey)\n        return false;\n    } else {\n      if (event.key === \"v\" && event.ctrlKey)\n        return false;\n      if (event.key === \"Insert\" && event.shiftKey)\n        return false;\n    }\n    if ([\"Shift\", \"Control\", \"Meta\", \"Alt\", \"Process\"].includes(event.key))\n      return false;\n    const hasModifier = event.ctrlKey || event.altKey || event.metaKey;\n    if (event.key.length === 1 && !hasModifier)\n      return !!asCheckbox(this._recorder.deepEventTarget(event));\n    return true;\n  }\n  _updateModelForHoveredElement() {\n    if (!this._hoveredElement || !this._hoveredElement.isConnected) {\n      this._hoveredModel = null;\n      this._hoveredElement = null;\n      this._recorder.updateHighlight(null, true);\n      return;\n    }\n    const { selector, elements } = this._recorder.injectedScript.generateSelector(this._hoveredElement, { testIdAttributeName: this._recorder.state.testIdAttributeName });\n    if (this._hoveredModel && this._hoveredModel.selector === selector)\n      return;\n    this._hoveredModel = selector ? { selector, elements, color: \"#dc6f6f7f\" } : null;\n    this._recorder.updateHighlight(this._hoveredModel, true);\n  }\n};\nvar TextAssertionTool = class {\n  constructor(recorder, kind) {\n    this._hoverHighlight = null;\n    this._action = null;\n    this._dialogElement = null;\n    this._textCache = /* @__PURE__ */ new Map();\n    this._recorder = recorder;\n    this._kind = kind;\n    this._acceptButton = this._recorder.document.createElement(\"x-pw-tool-item\");\n    this._acceptButton.title = \"Accept\";\n    this._acceptButton.classList.add(\"accept\");\n    this._acceptButton.appendChild(this._recorder.document.createElement(\"x-div\"));\n    this._acceptButton.addEventListener(\"click\", () => this._commit());\n    this._cancelButton = this._recorder.document.createElement(\"x-pw-tool-item\");\n    this._cancelButton.title = \"Close\";\n    this._cancelButton.classList.add(\"cancel\");\n    this._cancelButton.appendChild(this._recorder.document.createElement(\"x-div\"));\n    this._cancelButton.addEventListener(\"click\", () => this._closeDialog());\n  }\n  cursor() {\n    return \"pointer\";\n  }\n  cleanup() {\n    this._closeDialog();\n    this._hoverHighlight = null;\n  }\n  onClick(event) {\n    consumeEvent(event);\n    if (this._kind === \"value\") {\n      this._commitAssertValue();\n    } else {\n      if (!this._dialogElement)\n        this._showDialog();\n    }\n  }\n  onMouseDown(event) {\n    const target = this._recorder.deepEventTarget(event);\n    if (this._elementHasValue(target))\n      event.preventDefault();\n  }\n  onPointerUp(event) {\n    var _a;\n    const target = (_a = this._hoverHighlight) == null ? void 0 : _a.elements[0];\n    if (this._kind === \"value\" && target && target.nodeName === \"INPUT\" && target.disabled) {\n      this._commitAssertValue();\n    }\n  }\n  onMouseMove(event) {\n    var _a;\n    if (this._dialogElement)\n      return;\n    const target = this._recorder.deepEventTarget(event);\n    if (((_a = this._hoverHighlight) == null ? void 0 : _a.elements[0]) === target)\n      return;\n    if (this._kind === \"text\")\n      this._hoverHighlight = this._recorder.injectedScript.utils.elementText(this._textCache, target).full ? { elements: [target], selector: \"\" } : null;\n    else\n      this._hoverHighlight = this._elementHasValue(target) ? this._recorder.injectedScript.generateSelector(target, { testIdAttributeName: this._recorder.state.testIdAttributeName }) : null;\n    if (this._hoverHighlight)\n      this._hoverHighlight.color = \"#8acae480\";\n    this._recorder.updateHighlight(this._hoverHighlight, true);\n  }\n  onKeyDown(event) {\n    var _a, _b;\n    if (event.key === \"Escape\")\n      (_b = (_a = this._recorder.delegate).setMode) == null ? void 0 : _b.call(_a, \"recording\");\n    consumeEvent(event);\n  }\n  onScroll(event) {\n    this._recorder.updateHighlight(this._hoverHighlight, false);\n  }\n  _elementHasValue(element) {\n    return element.nodeName === \"TEXTAREA\" || element.nodeName === \"SELECT\" || element.nodeName === \"INPUT\" && ![\"button\", \"image\", \"reset\", \"submit\"].includes(element.type);\n  }\n  _generateAction() {\n    var _a;\n    this._textCache.clear();\n    const target = (_a = this._hoverHighlight) == null ? void 0 : _a.elements[0];\n    if (!target)\n      return null;\n    if (this._kind === \"value\") {\n      if (!this._elementHasValue(target))\n        return null;\n      const { selector } = this._recorder.injectedScript.generateSelector(target, { testIdAttributeName: this._recorder.state.testIdAttributeName });\n      if (target.nodeName === \"INPUT\" && [\"checkbox\", \"radio\"].includes(target.type.toLowerCase())) {\n        return {\n          name: \"assertChecked\",\n          selector,\n          signals: [],\n          // Interestingly, inputElement.checked is reversed inside this event handler.\n          checked: !target.checked\n        };\n      } else {\n        return {\n          name: \"assertValue\",\n          selector,\n          signals: [],\n          value: target.value\n        };\n      }\n    } else {\n      this._hoverHighlight = this._recorder.injectedScript.generateSelector(target, { testIdAttributeName: this._recorder.state.testIdAttributeName, forTextExpect: true });\n      this._hoverHighlight.color = \"#8acae480\";\n      this._recorder.updateHighlight(this._hoverHighlight, true);\n      return {\n        name: \"assertText\",\n        selector: this._hoverHighlight.selector,\n        signals: [],\n        text: this._recorder.injectedScript.utils.elementText(this._textCache, target).normalized,\n        substring: true\n      };\n    }\n  }\n  _renderValue(action) {\n    if ((action == null ? void 0 : action.name) === \"assertText\")\n      return this._recorder.injectedScript.utils.normalizeWhiteSpace(action.text);\n    if ((action == null ? void 0 : action.name) === \"assertChecked\")\n      return String(action.checked);\n    if ((action == null ? void 0 : action.name) === \"assertValue\")\n      return action.value;\n    return \"\";\n  }\n  _commit() {\n    var _a, _b, _c, _d;\n    if (!this._action || !this._dialogElement)\n      return;\n    this._closeDialog();\n    (_b = (_a = this._recorder.delegate).recordAction) == null ? void 0 : _b.call(_a, this._action);\n    (_d = (_c = this._recorder.delegate).setMode) == null ? void 0 : _d.call(_c, \"recording\");\n  }\n  _showDialog() {\n    var _a;\n    if (!((_a = this._hoverHighlight) == null ? void 0 : _a.elements[0]))\n      return;\n    this._action = this._generateAction();\n    if (!this._action || this._action.name !== \"assertText\")\n      return;\n    this._dialogElement = this._recorder.document.createElement(\"x-pw-dialog\");\n    this._keyboardListener = (event) => {\n      if (event.key === \"Escape\") {\n        this._closeDialog();\n        return;\n      }\n      if (event.key === \"Enter\" && (event.ctrlKey || event.metaKey)) {\n        if (this._dialogElement)\n          this._commit();\n        return;\n      }\n    };\n    this._recorder.document.addEventListener(\"keydown\", this._keyboardListener, true);\n    const toolbarElement = this._recorder.document.createElement(\"x-pw-tools-list\");\n    const labelElement = this._recorder.document.createElement(\"label\");\n    labelElement.textContent = \"Assert that element contains text\";\n    toolbarElement.appendChild(labelElement);\n    toolbarElement.appendChild(this._recorder.document.createElement(\"x-spacer\"));\n    toolbarElement.appendChild(this._acceptButton);\n    toolbarElement.appendChild(this._cancelButton);\n    this._dialogElement.appendChild(toolbarElement);\n    const bodyElement = this._recorder.document.createElement(\"x-pw-dialog-body\");\n    const action = this._action;\n    const textElement = this._recorder.document.createElement(\"textarea\");\n    textElement.setAttribute(\"spellcheck\", \"false\");\n    textElement.value = this._renderValue(this._action);\n    textElement.classList.add(\"text-editor\");\n    const updateAndValidate = () => {\n      var _a2;\n      const newValue = this._recorder.injectedScript.utils.normalizeWhiteSpace(textElement.value);\n      const target = (_a2 = this._hoverHighlight) == null ? void 0 : _a2.elements[0];\n      if (!target)\n        return;\n      action.text = newValue;\n      const targetText = this._recorder.injectedScript.utils.elementText(this._textCache, target).normalized;\n      const matches = newValue && targetText.includes(newValue);\n      textElement.classList.toggle(\"does-not-match\", !matches);\n    };\n    textElement.addEventListener(\"input\", updateAndValidate);\n    bodyElement.appendChild(textElement);\n    this._dialogElement.appendChild(bodyElement);\n    this._recorder.highlight.appendChild(this._dialogElement);\n    const position = this._recorder.highlight.tooltipPosition(this._recorder.highlight.firstBox(), this._dialogElement);\n    this._dialogElement.style.top = position.anchorTop + \"px\";\n    this._dialogElement.style.left = position.anchorLeft + \"px\";\n    textElement.focus();\n  }\n  _closeDialog() {\n    if (!this._dialogElement)\n      return;\n    this._dialogElement.remove();\n    this._recorder.document.removeEventListener(\"keydown\", this._keyboardListener);\n    this._dialogElement = null;\n  }\n  _commitAssertValue() {\n    var _a, _b, _c, _d, _e;\n    if (this._kind !== \"value\")\n      return;\n    const action = this._generateAction();\n    if (!action)\n      return;\n    (_b = (_a = this._recorder.delegate).recordAction) == null ? void 0 : _b.call(_a, action);\n    (_d = (_c = this._recorder.delegate).setMode) == null ? void 0 : _d.call(_c, \"recording\");\n    (_e = this._recorder.overlay) == null ? void 0 : _e.flashToolSucceeded(\"assertingValue\");\n  }\n};\nvar Overlay = class {\n  constructor(recorder) {\n    this._listeners = [];\n    this._offsetX = 0;\n    this._measure = { width: 0, height: 0 };\n    this._recorder = recorder;\n    const document = this._recorder.injectedScript.document;\n    this._overlayElement = document.createElement(\"x-pw-overlay\");\n    const toolsListElement = document.createElement(\"x-pw-tools-list\");\n    this._overlayElement.appendChild(toolsListElement);\n    this._dragHandle = document.createElement(\"x-pw-tool-gripper\");\n    this._dragHandle.appendChild(document.createElement(\"x-div\"));\n    toolsListElement.appendChild(this._dragHandle);\n    this._recordToggle = this._recorder.injectedScript.document.createElement(\"x-pw-tool-item\");\n    this._recordToggle.title = \"Record\";\n    this._recordToggle.classList.add(\"record\");\n    this._recordToggle.appendChild(this._recorder.injectedScript.document.createElement(\"x-div\"));\n    toolsListElement.appendChild(this._recordToggle);\n    this._pickLocatorToggle = this._recorder.injectedScript.document.createElement(\"x-pw-tool-item\");\n    this._pickLocatorToggle.title = \"Pick locator\";\n    this._pickLocatorToggle.classList.add(\"pick-locator\");\n    this._pickLocatorToggle.appendChild(this._recorder.injectedScript.document.createElement(\"x-div\"));\n    toolsListElement.appendChild(this._pickLocatorToggle);\n    this._assertVisibilityToggle = this._recorder.injectedScript.document.createElement(\"x-pw-tool-item\");\n    this._assertVisibilityToggle.title = \"Assert visibility\";\n    this._assertVisibilityToggle.classList.add(\"visibility\");\n    this._assertVisibilityToggle.appendChild(this._recorder.injectedScript.document.createElement(\"x-div\"));\n    toolsListElement.appendChild(this._assertVisibilityToggle);\n    this._assertTextToggle = this._recorder.injectedScript.document.createElement(\"x-pw-tool-item\");\n    this._assertTextToggle.title = \"Assert text\";\n    this._assertTextToggle.classList.add(\"text\");\n    this._assertTextToggle.appendChild(this._recorder.injectedScript.document.createElement(\"x-div\"));\n    toolsListElement.appendChild(this._assertTextToggle);\n    this._assertValuesToggle = this._recorder.injectedScript.document.createElement(\"x-pw-tool-item\");\n    this._assertValuesToggle.title = \"Assert value\";\n    this._assertValuesToggle.classList.add(\"value\");\n    this._assertValuesToggle.appendChild(this._recorder.injectedScript.document.createElement(\"x-div\"));\n    toolsListElement.appendChild(this._assertValuesToggle);\n    this._updateVisualPosition();\n    this._refreshListeners();\n  }\n  _refreshListeners() {\n    removeEventListeners(this._listeners);\n    this._listeners = [\n      addEventListener(this._dragHandle, \"mousedown\", (event) => {\n        this._dragState = { offsetX: this._offsetX, dragStart: { x: event.clientX, y: 0 } };\n      }),\n      addEventListener(this._recordToggle, \"click\", () => {\n        var _a, _b;\n        (_b = (_a = this._recorder.delegate).setMode) == null ? void 0 : _b.call(_a, this._recorder.state.mode === \"none\" || this._recorder.state.mode === \"standby\" || this._recorder.state.mode === \"inspecting\" ? \"recording\" : \"standby\");\n      }),\n      addEventListener(this._pickLocatorToggle, \"click\", () => {\n        var _a, _b;\n        const newMode = {\n          \"inspecting\": \"standby\",\n          \"none\": \"inspecting\",\n          \"standby\": \"inspecting\",\n          \"recording\": \"recording-inspecting\",\n          \"recording-inspecting\": \"recording\",\n          \"assertingText\": \"recording-inspecting\",\n          \"assertingVisibility\": \"recording-inspecting\",\n          \"assertingValue\": \"recording-inspecting\"\n        };\n        (_b = (_a = this._recorder.delegate).setMode) == null ? void 0 : _b.call(_a, newMode[this._recorder.state.mode]);\n      }),\n      addEventListener(this._assertVisibilityToggle, \"click\", () => {\n        var _a, _b;\n        if (!this._assertVisibilityToggle.classList.contains(\"disabled\"))\n          (_b = (_a = this._recorder.delegate).setMode) == null ? void 0 : _b.call(_a, this._recorder.state.mode === \"assertingVisibility\" ? \"recording\" : \"assertingVisibility\");\n      }),\n      addEventListener(this._assertTextToggle, \"click\", () => {\n        var _a, _b;\n        if (!this._assertTextToggle.classList.contains(\"disabled\"))\n          (_b = (_a = this._recorder.delegate).setMode) == null ? void 0 : _b.call(_a, this._recorder.state.mode === \"assertingText\" ? \"recording\" : \"assertingText\");\n      }),\n      addEventListener(this._assertValuesToggle, \"click\", () => {\n        var _a, _b;\n        if (!this._assertValuesToggle.classList.contains(\"disabled\"))\n          (_b = (_a = this._recorder.delegate).setMode) == null ? void 0 : _b.call(_a, this._recorder.state.mode === \"assertingValue\" ? \"recording\" : \"assertingValue\");\n      })\n    ];\n  }\n  install() {\n    this._recorder.highlight.appendChild(this._overlayElement);\n    this._refreshListeners();\n    this._updateVisualPosition();\n  }\n  contains(element) {\n    return this._recorder.injectedScript.utils.isInsideScope(this._overlayElement, element);\n  }\n  setUIState(state) {\n    this._recordToggle.classList.toggle(\"active\", state.mode === \"recording\" || state.mode === \"assertingText\" || state.mode === \"assertingVisibility\" || state.mode === \"assertingValue\" || state.mode === \"recording-inspecting\");\n    this._pickLocatorToggle.classList.toggle(\"active\", state.mode === \"inspecting\" || state.mode === \"recording-inspecting\");\n    this._assertVisibilityToggle.classList.toggle(\"active\", state.mode === \"assertingVisibility\");\n    this._assertVisibilityToggle.classList.toggle(\"disabled\", state.mode === \"none\" || state.mode === \"standby\" || state.mode === \"inspecting\");\n    this._assertTextToggle.classList.toggle(\"active\", state.mode === \"assertingText\");\n    this._assertTextToggle.classList.toggle(\"disabled\", state.mode === \"none\" || state.mode === \"standby\" || state.mode === \"inspecting\");\n    this._assertValuesToggle.classList.toggle(\"active\", state.mode === \"assertingValue\");\n    this._assertValuesToggle.classList.toggle(\"disabled\", state.mode === \"none\" || state.mode === \"standby\" || state.mode === \"inspecting\");\n    if (this._offsetX !== state.overlay.offsetX) {\n      this._offsetX = state.overlay.offsetX;\n      this._updateVisualPosition();\n    }\n    if (state.mode === \"none\")\n      this._hideOverlay();\n    else\n      this._showOverlay();\n  }\n  flashToolSucceeded(tool) {\n    const element = tool === \"assertingVisibility\" ? this._assertVisibilityToggle : this._assertValuesToggle;\n    element.classList.add(\"succeeded\");\n    setTimeout(() => element.classList.remove(\"succeeded\"), 2e3);\n  }\n  _hideOverlay() {\n    this._overlayElement.setAttribute(\"hidden\", \"true\");\n  }\n  _showOverlay() {\n    if (!this._overlayElement.hasAttribute(\"hidden\"))\n      return;\n    this._overlayElement.removeAttribute(\"hidden\");\n    this._updateVisualPosition();\n  }\n  _updateVisualPosition() {\n    this._measure = this._overlayElement.getBoundingClientRect();\n    this._overlayElement.style.left = (this._recorder.injectedScript.window.innerWidth - this._measure.width) / 2 + this._offsetX + \"px\";\n  }\n  onMouseMove(event) {\n    var _a, _b;\n    if (!event.buttons) {\n      this._dragState = void 0;\n      return false;\n    }\n    if (this._dragState) {\n      this._offsetX = this._dragState.offsetX + event.clientX - this._dragState.dragStart.x;\n      const halfGapSize = (this._recorder.injectedScript.window.innerWidth - this._measure.width) / 2 - 10;\n      this._offsetX = Math.max(-halfGapSize, Math.min(halfGapSize, this._offsetX));\n      this._updateVisualPosition();\n      (_b = (_a = this._recorder.delegate).setOverlayState) == null ? void 0 : _b.call(_a, { offsetX: this._offsetX });\n      consumeEvent(event);\n      return true;\n    }\n    return false;\n  }\n  onMouseUp(event) {\n    if (this._dragState) {\n      consumeEvent(event);\n      return true;\n    }\n    return false;\n  }\n  onClick(event) {\n    if (this._dragState) {\n      this._dragState = void 0;\n      consumeEvent(event);\n      return true;\n    }\n    return false;\n  }\n};\nvar Recorder = class {\n  constructor(injectedScript) {\n    this._listeners = [];\n    this._actionSelectorModel = null;\n    this.state = { mode: \"none\", testIdAttributeName: \"data-testid\", language: \"javascript\", overlay: { offsetX: 0 } };\n    this.delegate = {};\n    this.document = injectedScript.document;\n    this.injectedScript = injectedScript;\n    this.highlight = injectedScript.createHighlight();\n    this._tools = {\n      \"none\": new NoneTool(),\n      \"standby\": new NoneTool(),\n      \"inspecting\": new InspectTool(this, false),\n      \"recording\": new RecordActionTool(this),\n      \"recording-inspecting\": new InspectTool(this, false),\n      \"assertingText\": new TextAssertionTool(this, \"text\"),\n      \"assertingVisibility\": new InspectTool(this, true),\n      \"assertingValue\": new TextAssertionTool(this, \"value\")\n    };\n    this._currentTool = this._tools.none;\n    if (injectedScript.window.top === injectedScript.window) {\n      this.overlay = new Overlay(this);\n      this.overlay.setUIState(this.state);\n    }\n    this._styleElement = this.document.createElement(\"style\");\n    this._styleElement.textContent = `\n      body[data-pw-cursor=pointer] *, body[data-pw-cursor=pointer] *::after { cursor: pointer !important; }\n      body[data-pw-cursor=text] *, body[data-pw-cursor=text] *::after { cursor: text !important; }\n    `;\n    this.installListeners();\n    if (injectedScript.isUnderTest)\n      console.error(\"Recorder script ready for test\");\n  }\n  installListeners() {\n    var _a;\n    removeEventListeners(this._listeners);\n    this._listeners = [\n      addEventListener(this.document, \"click\", (event) => this._onClick(event), true),\n      addEventListener(this.document, \"auxclick\", (event) => this._onClick(event), true),\n      addEventListener(this.document, \"contextmenu\", (event) => this._onContextMenu(event), true),\n      addEventListener(this.document, \"dragstart\", (event) => this._onDragStart(event), true),\n      addEventListener(this.document, \"input\", (event) => this._onInput(event), true),\n      addEventListener(this.document, \"keydown\", (event) => this._onKeyDown(event), true),\n      addEventListener(this.document, \"keyup\", (event) => this._onKeyUp(event), true),\n      addEventListener(this.document, \"pointerdown\", (event) => this._onPointerDown(event), true),\n      addEventListener(this.document, \"pointerup\", (event) => this._onPointerUp(event), true),\n      addEventListener(this.document, \"mousedown\", (event) => this._onMouseDown(event), true),\n      addEventListener(this.document, \"mouseup\", (event) => this._onMouseUp(event), true),\n      addEventListener(this.document, \"mousemove\", (event) => this._onMouseMove(event), true),\n      addEventListener(this.document, \"mouseleave\", (event) => this._onMouseLeave(event), true),\n      addEventListener(this.document, \"mouseenter\", (event) => this._onMouseEnter(event), true),\n      addEventListener(this.document, \"focus\", (event) => this._onFocus(event), true),\n      addEventListener(this.document, \"scroll\", (event) => this._onScroll(event), true)\n    ];\n    this.highlight.install();\n    (_a = this.overlay) == null ? void 0 : _a.install();\n    this.injectedScript.document.head.appendChild(this._styleElement);\n  }\n  _switchCurrentTool() {\n    var _a, _b, _c;\n    const newTool = this._tools[this.state.mode];\n    if (newTool === this._currentTool)\n      return;\n    (_b = (_a = this._currentTool).cleanup) == null ? void 0 : _b.call(_a);\n    this.clearHighlight();\n    this._currentTool = newTool;\n    (_c = this.injectedScript.document.body) == null ? void 0 : _c.setAttribute(\"data-pw-cursor\", newTool.cursor());\n  }\n  setUIState(state, delegate) {\n    var _a, _b, _c, _d;\n    this.delegate = delegate;\n    if (state.actionPoint && this.state.actionPoint && state.actionPoint.x === this.state.actionPoint.x && state.actionPoint.y === this.state.actionPoint.y) {\n    } else if (!state.actionPoint && !this.state.actionPoint) {\n    } else {\n      if (state.actionPoint)\n        this.highlight.showActionPoint(state.actionPoint.x, state.actionPoint.y);\n      else\n        this.highlight.hideActionPoint();\n    }\n    this.state = state;\n    this.highlight.setLanguage(state.language);\n    this._switchCurrentTool();\n    (_a = this.overlay) == null ? void 0 : _a.setUIState(state);\n    if (((_b = this._actionSelectorModel) == null ? void 0 : _b.selector) && !((_c = this._actionSelectorModel) == null ? void 0 : _c.elements.length))\n      this._actionSelectorModel = null;\n    if (state.actionSelector !== ((_d = this._actionSelectorModel) == null ? void 0 : _d.selector))\n      this._actionSelectorModel = state.actionSelector ? querySelector(this.injectedScript, state.actionSelector, this.document) : null;\n    if (this.state.mode === \"none\" || this.state.mode === \"standby\")\n      this.updateHighlight(this._actionSelectorModel, false);\n  }\n  clearHighlight() {\n    var _a, _b;\n    (_b = (_a = this._currentTool).cleanup) == null ? void 0 : _b.call(_a);\n    this.updateHighlight(null, false);\n  }\n  _onClick(event) {\n    var _a, _b, _c;\n    if (!event.isTrusted)\n      return;\n    if ((_a = this.overlay) == null ? void 0 : _a.onClick(event))\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_c = (_b = this._currentTool).onClick) == null ? void 0 : _c.call(_b, event);\n  }\n  _onContextMenu(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onContextMenu) == null ? void 0 : _b.call(_a, event);\n  }\n  _onDragStart(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onDragStart) == null ? void 0 : _b.call(_a, event);\n  }\n  _onPointerDown(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onPointerDown) == null ? void 0 : _b.call(_a, event);\n  }\n  _onPointerUp(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onPointerUp) == null ? void 0 : _b.call(_a, event);\n  }\n  _onMouseDown(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onMouseDown) == null ? void 0 : _b.call(_a, event);\n  }\n  _onMouseUp(event) {\n    var _a, _b, _c;\n    if (!event.isTrusted)\n      return;\n    if ((_a = this.overlay) == null ? void 0 : _a.onMouseUp(event))\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_c = (_b = this._currentTool).onMouseUp) == null ? void 0 : _c.call(_b, event);\n  }\n  _onMouseMove(event) {\n    var _a, _b, _c;\n    if (!event.isTrusted)\n      return;\n    if ((_a = this.overlay) == null ? void 0 : _a.onMouseMove(event))\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_c = (_b = this._currentTool).onMouseMove) == null ? void 0 : _c.call(_b, event);\n  }\n  _onMouseEnter(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onMouseEnter) == null ? void 0 : _b.call(_a, event);\n  }\n  _onMouseLeave(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onMouseLeave) == null ? void 0 : _b.call(_a, event);\n  }\n  _onFocus(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onFocus) == null ? void 0 : _b.call(_a, event);\n  }\n  _onScroll(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    this.highlight.hideActionPoint();\n    (_b = (_a = this._currentTool).onScroll) == null ? void 0 : _b.call(_a, event);\n  }\n  _onInput(event) {\n    var _a, _b;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onInput) == null ? void 0 : _b.call(_a, event);\n  }\n  _onKeyDown(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onKeyDown) == null ? void 0 : _b.call(_a, event);\n  }\n  _onKeyUp(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onKeyUp) == null ? void 0 : _b.call(_a, event);\n  }\n  updateHighlight(model, userGesture) {\n    var _a, _b;\n    let tooltipText = model == null ? void 0 : model.tooltipText;\n    if (tooltipText === void 0 && !(model == null ? void 0 : model.tooltipList) && (model == null ? void 0 : model.selector))\n      tooltipText = this.injectedScript.utils.asLocator(this.state.language, model.selector);\n    this.highlight.updateHighlight((model == null ? void 0 : model.elements) || [], { ...model, tooltipText });\n    if (userGesture)\n      (_b = (_a = this.delegate).highlightUpdated) == null ? void 0 : _b.call(_a);\n  }\n  _ignoreOverlayEvent(event) {\n    return event.composedPath().some((e) => {\n      const nodeName = e.nodeName || \"\";\n      return nodeName.toLowerCase() === \"x-pw-glass\";\n    });\n  }\n  deepEventTarget(event) {\n    var _a;\n    for (const element of event.composedPath()) {\n      if (!((_a = this.overlay) == null ? void 0 : _a.contains(element)))\n        return element;\n    }\n    return event.composedPath()[0];\n  }\n};\nfunction deepActiveElement(document) {\n  let activeElement = document.activeElement;\n  while (activeElement && activeElement.shadowRoot && activeElement.shadowRoot.activeElement)\n    activeElement = activeElement.shadowRoot.activeElement;\n  return activeElement;\n}\nfunction modifiersForEvent(event) {\n  return (event.altKey ? 1 : 0) | (event.ctrlKey ? 2 : 0) | (event.metaKey ? 4 : 0) | (event.shiftKey ? 8 : 0);\n}\nfunction buttonForEvent(event) {\n  switch (event.which) {\n    case 1:\n      return \"left\";\n    case 2:\n      return \"middle\";\n    case 3:\n      return \"right\";\n  }\n  return \"left\";\n}\nfunction positionForEvent(event) {\n  const targetElement = event.target;\n  if (targetElement.nodeName !== \"CANVAS\")\n    return;\n  return {\n    x: event.offsetX,\n    y: event.offsetY\n  };\n}\nfunction consumeEvent(e) {\n  e.preventDefault();\n  e.stopPropagation();\n  e.stopImmediatePropagation();\n}\nfunction asCheckbox(node) {\n  if (!node || node.nodeName !== \"INPUT\")\n    return null;\n  const inputElement = node;\n  return [\"checkbox\", \"radio\"].includes(inputElement.type) ? inputElement : null;\n}\nfunction isRangeInput(node) {\n  if (!node || node.nodeName !== \"INPUT\")\n    return false;\n  const inputElement = node;\n  return inputElement.type.toLowerCase() === \"range\";\n}\nfunction addEventListener(target, eventName, listener, useCapture) {\n  target.addEventListener(eventName, listener, useCapture);\n  const remove = () => {\n    target.removeEventListener(eventName, listener, useCapture);\n  };\n  return remove;\n}\nfunction removeEventListeners(listeners) {\n  for (const listener of listeners)\n    listener();\n  listeners.splice(0, listeners.length);\n}\nfunction querySelector(injectedScript, selector, ownerDocument) {\n  try {\n    const parsedSelector = injectedScript.parseSelector(selector);\n    return {\n      selector,\n      elements: injectedScript.querySelectorAll(parsedSelector, ownerDocument)\n    };\n  } catch (e) {\n    return {\n      selector,\n      elements: []\n    };\n  }\n}\nvar PollingRecorder = class {\n  constructor(injectedScript) {\n    this._recorder = new Recorder(injectedScript);\n    this._embedder = injectedScript.window;\n    injectedScript.onGlobalListenersRemoved.add(() => this._recorder.installListeners());\n    const refreshOverlay = () => {\n      this._pollRecorderMode().catch((e) => console.log(e));\n    };\n    this._embedder.__pw_refreshOverlay = refreshOverlay;\n    refreshOverlay();\n  }\n  async _pollRecorderMode() {\n    const pollPeriod = 1e3;\n    if (this._pollRecorderModeTimer)\n      clearTimeout(this._pollRecorderModeTimer);\n    const state = await this._embedder.__pw_recorderState().catch(() => {\n    });\n    if (!state) {\n      this._pollRecorderModeTimer = setTimeout(() => this._pollRecorderMode(), pollPeriod);\n      return;\n    }\n    const win = this._recorder.document.defaultView;\n    if (win.top !== win) {\n      state.actionPoint = void 0;\n    }\n    this._recorder.setUIState(state, this);\n    this._pollRecorderModeTimer = setTimeout(() => this._pollRecorderMode(), pollPeriod);\n  }\n  async performAction(action) {\n    await this._embedder.__pw_recorderPerformAction(action);\n  }\n  async recordAction(action) {\n    await this._embedder.__pw_recorderRecordAction(action);\n  }\n  async setSelector(selector) {\n    await this._embedder.__pw_recorderSetSelector(selector);\n  }\n  async setMode(mode) {\n    await this._embedder.__pw_recorderSetMode(mode);\n  }\n  async setOverlayState(state) {\n    await this._embedder.__pw_recorderSetOverlayState(state);\n  }\n};\nvar recorder_default = PollingRecorder;\n";
});

// node_modules/playwright-core/lib/generated/consoleApiSource.js
var require_consoleApiSource = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.source = undefined;
  var source = exports.source = "\nvar __commonJS = obj => {\n  let required = false;\n  let result;\n  return function __require() {\n    if (!required) {\n      required = true;\n      let fn;\n      for (const name in obj) { fn = obj[name]; break; }\n      const module = { exports: {} };\n      fn(module.exports, module);\n      result = module.exports;\n    }\n    return result;\n  }\n};\nvar __export = (target, all) => {for (var name in all) target[name] = all[name];};\nvar __toESM = mod => ({ ...mod, 'default': mod });\nvar __toCommonJS = mod => ({ ...mod, __esModule: true });\n\n\n// packages/playwright-core/src/server/injected/consoleApi.ts\nvar consoleApi_exports = {};\n__export(consoleApi_exports, {\n  default: () => consoleApi_default\n});\nmodule.exports = __toCommonJS(consoleApi_exports);\n\n// packages/playwright-core/src/utils/isomorphic/stringUtils.ts\nfunction escapeWithQuotes(text, char = \"'\") {\n  const stringified = JSON.stringify(text);\n  const escapedText = stringified.substring(1, stringified.length - 1).replace(/\\\\\"/g, '\"');\n  if (char === \"'\")\n    return char + escapedText.replace(/[']/g, \"\\\\'\") + char;\n  if (char === '\"')\n    return char + escapedText.replace(/[\"]/g, '\\\\\"') + char;\n  if (char === \"`\")\n    return char + escapedText.replace(/[`]/g, \"`\") + char;\n  throw new Error(\"Invalid escape char\");\n}\nfunction toTitleCase(name) {\n  return name.charAt(0).toUpperCase() + name.substring(1);\n}\nfunction toSnakeCase(name) {\n  return name.replace(/([a-z0-9])([A-Z])/g, \"$1_$2\").replace(/([A-Z])([A-Z][a-z])/g, \"$1_$2\").toLowerCase();\n}\nfunction normalizeEscapedRegexQuotes(source) {\n  return source.replace(/(^|[^\\\\])(\\\\\\\\)*\\\\(['\"`])/g, \"$1$2$3\");\n}\nfunction escapeRegexForSelector(re) {\n  if (re.unicode || re.unicodeSets)\n    return String(re);\n  return String(re).replace(/(^|[^\\\\])(\\\\\\\\)*([\"'`])/g, \"$1$2\\\\$3\").replace(/>>/g, \"\\\\>\\\\>\");\n}\nfunction escapeForTextSelector(text, exact) {\n  if (typeof text !== \"string\")\n    return escapeRegexForSelector(text);\n  return `${JSON.stringify(text)}${exact ? \"s\" : \"i\"}`;\n}\nfunction escapeForAttributeSelector(value, exact) {\n  if (typeof value !== \"string\")\n    return escapeRegexForSelector(value);\n  return `\"${value.replace(/\\\\/g, \"\\\\\\\\\").replace(/[\"]/g, '\\\\\"')}\"${exact ? \"s\" : \"i\"}`;\n}\n\n// packages/playwright-core/src/utils/isomorphic/locatorUtils.ts\nfunction getByAttributeTextSelector(attrName, text, options) {\n  return `internal:attr=[${attrName}=${escapeForAttributeSelector(text, (options == null ? void 0 : options.exact) || false)}]`;\n}\nfunction getByTestIdSelector(testIdAttributeName, testId) {\n  return `internal:testid=[${testIdAttributeName}=${escapeForAttributeSelector(testId, true)}]`;\n}\nfunction getByLabelSelector(text, options) {\n  return \"internal:label=\" + escapeForTextSelector(text, !!(options == null ? void 0 : options.exact));\n}\nfunction getByAltTextSelector(text, options) {\n  return getByAttributeTextSelector(\"alt\", text, options);\n}\nfunction getByTitleSelector(text, options) {\n  return getByAttributeTextSelector(\"title\", text, options);\n}\nfunction getByPlaceholderSelector(text, options) {\n  return getByAttributeTextSelector(\"placeholder\", text, options);\n}\nfunction getByTextSelector(text, options) {\n  return \"internal:text=\" + escapeForTextSelector(text, !!(options == null ? void 0 : options.exact));\n}\nfunction getByRoleSelector(role, options = {}) {\n  const props = [];\n  if (options.checked !== void 0)\n    props.push([\"checked\", String(options.checked)]);\n  if (options.disabled !== void 0)\n    props.push([\"disabled\", String(options.disabled)]);\n  if (options.selected !== void 0)\n    props.push([\"selected\", String(options.selected)]);\n  if (options.expanded !== void 0)\n    props.push([\"expanded\", String(options.expanded)]);\n  if (options.includeHidden !== void 0)\n    props.push([\"include-hidden\", String(options.includeHidden)]);\n  if (options.level !== void 0)\n    props.push([\"level\", String(options.level)]);\n  if (options.name !== void 0)\n    props.push([\"name\", escapeForAttributeSelector(options.name, !!options.exact)]);\n  if (options.pressed !== void 0)\n    props.push([\"pressed\", String(options.pressed)]);\n  return `internal:role=${role}${props.map(([n, v]) => `[${n}=${v}]`).join(\"\")}`;\n}\n\n// packages/playwright-core/src/utils/isomorphic/cssTokenizer.ts\nvar between = function(num, first, last) {\n  return num >= first && num <= last;\n};\nfunction digit(code) {\n  return between(code, 48, 57);\n}\nfunction hexdigit(code) {\n  return digit(code) || between(code, 65, 70) || between(code, 97, 102);\n}\nfunction uppercaseletter(code) {\n  return between(code, 65, 90);\n}\nfunction lowercaseletter(code) {\n  return between(code, 97, 122);\n}\nfunction letter(code) {\n  return uppercaseletter(code) || lowercaseletter(code);\n}\nfunction nonascii(code) {\n  return code >= 128;\n}\nfunction namestartchar(code) {\n  return letter(code) || nonascii(code) || code === 95;\n}\nfunction namechar(code) {\n  return namestartchar(code) || digit(code) || code === 45;\n}\nfunction nonprintable(code) {\n  return between(code, 0, 8) || code === 11 || between(code, 14, 31) || code === 127;\n}\nfunction newline(code) {\n  return code === 10;\n}\nfunction whitespace(code) {\n  return newline(code) || code === 9 || code === 32;\n}\nvar maximumallowedcodepoint = 1114111;\nvar InvalidCharacterError = class extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"InvalidCharacterError\";\n  }\n};\nfunction preprocess(str) {\n  const codepoints = [];\n  for (let i = 0; i < str.length; i++) {\n    let code = str.charCodeAt(i);\n    if (code === 13 && str.charCodeAt(i + 1) === 10) {\n      code = 10;\n      i++;\n    }\n    if (code === 13 || code === 12)\n      code = 10;\n    if (code === 0)\n      code = 65533;\n    if (between(code, 55296, 56319) && between(str.charCodeAt(i + 1), 56320, 57343)) {\n      const lead = code - 55296;\n      const trail = str.charCodeAt(i + 1) - 56320;\n      code = Math.pow(2, 16) + lead * Math.pow(2, 10) + trail;\n      i++;\n    }\n    codepoints.push(code);\n  }\n  return codepoints;\n}\nfunction stringFromCode(code) {\n  if (code <= 65535)\n    return String.fromCharCode(code);\n  code -= Math.pow(2, 16);\n  const lead = Math.floor(code / Math.pow(2, 10)) + 55296;\n  const trail = code % Math.pow(2, 10) + 56320;\n  return String.fromCharCode(lead) + String.fromCharCode(trail);\n}\nfunction tokenize(str1) {\n  const str = preprocess(str1);\n  let i = -1;\n  const tokens = [];\n  let code;\n  let line = 0;\n  let column = 0;\n  let lastLineLength = 0;\n  const incrLineno = function() {\n    line += 1;\n    lastLineLength = column;\n    column = 0;\n  };\n  const locStart = { line, column };\n  const codepoint = function(i2) {\n    if (i2 >= str.length)\n      return -1;\n    return str[i2];\n  };\n  const next = function(num) {\n    if (num === void 0)\n      num = 1;\n    if (num > 3)\n      throw \"Spec Error: no more than three codepoints of lookahead.\";\n    return codepoint(i + num);\n  };\n  const consume = function(num) {\n    if (num === void 0)\n      num = 1;\n    i += num;\n    code = codepoint(i);\n    if (newline(code))\n      incrLineno();\n    else\n      column += num;\n    return true;\n  };\n  const reconsume = function() {\n    i -= 1;\n    if (newline(code)) {\n      line -= 1;\n      column = lastLineLength;\n    } else {\n      column -= 1;\n    }\n    locStart.line = line;\n    locStart.column = column;\n    return true;\n  };\n  const eof = function(codepoint2) {\n    if (codepoint2 === void 0)\n      codepoint2 = code;\n    return codepoint2 === -1;\n  };\n  const donothing = function() {\n  };\n  const parseerror = function() {\n  };\n  const consumeAToken = function() {\n    consumeComments();\n    consume();\n    if (whitespace(code)) {\n      while (whitespace(next()))\n        consume();\n      return new WhitespaceToken();\n    } else if (code === 34) {\n      return consumeAStringToken();\n    } else if (code === 35) {\n      if (namechar(next()) || areAValidEscape(next(1), next(2))) {\n        const token = new HashToken(\"\");\n        if (wouldStartAnIdentifier(next(1), next(2), next(3)))\n          token.type = \"id\";\n        token.value = consumeAName();\n        return token;\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 36) {\n      if (next() === 61) {\n        consume();\n        return new SuffixMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 39) {\n      return consumeAStringToken();\n    } else if (code === 40) {\n      return new OpenParenToken();\n    } else if (code === 41) {\n      return new CloseParenToken();\n    } else if (code === 42) {\n      if (next() === 61) {\n        consume();\n        return new SubstringMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 43) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 44) {\n      return new CommaToken();\n    } else if (code === 45) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else if (next(1) === 45 && next(2) === 62) {\n        consume(2);\n        return new CDCToken();\n      } else if (startsWithAnIdentifier()) {\n        reconsume();\n        return consumeAnIdentlikeToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 46) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 58) {\n      return new ColonToken();\n    } else if (code === 59) {\n      return new SemicolonToken();\n    } else if (code === 60) {\n      if (next(1) === 33 && next(2) === 45 && next(3) === 45) {\n        consume(3);\n        return new CDOToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 64) {\n      if (wouldStartAnIdentifier(next(1), next(2), next(3)))\n        return new AtKeywordToken(consumeAName());\n      else\n        return new DelimToken(code);\n    } else if (code === 91) {\n      return new OpenSquareToken();\n    } else if (code === 92) {\n      if (startsWithAValidEscape()) {\n        reconsume();\n        return consumeAnIdentlikeToken();\n      } else {\n        parseerror();\n        return new DelimToken(code);\n      }\n    } else if (code === 93) {\n      return new CloseSquareToken();\n    } else if (code === 94) {\n      if (next() === 61) {\n        consume();\n        return new PrefixMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 123) {\n      return new OpenCurlyToken();\n    } else if (code === 124) {\n      if (next() === 61) {\n        consume();\n        return new DashMatchToken();\n      } else if (next() === 124) {\n        consume();\n        return new ColumnToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 125) {\n      return new CloseCurlyToken();\n    } else if (code === 126) {\n      if (next() === 61) {\n        consume();\n        return new IncludeMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (digit(code)) {\n      reconsume();\n      return consumeANumericToken();\n    } else if (namestartchar(code)) {\n      reconsume();\n      return consumeAnIdentlikeToken();\n    } else if (eof()) {\n      return new EOFToken();\n    } else {\n      return new DelimToken(code);\n    }\n  };\n  const consumeComments = function() {\n    while (next(1) === 47 && next(2) === 42) {\n      consume(2);\n      while (true) {\n        consume();\n        if (code === 42 && next() === 47) {\n          consume();\n          break;\n        } else if (eof()) {\n          parseerror();\n          return;\n        }\n      }\n    }\n  };\n  const consumeANumericToken = function() {\n    const num = consumeANumber();\n    if (wouldStartAnIdentifier(next(1), next(2), next(3))) {\n      const token = new DimensionToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      token.type = num.type;\n      token.unit = consumeAName();\n      return token;\n    } else if (next() === 37) {\n      consume();\n      const token = new PercentageToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      return token;\n    } else {\n      const token = new NumberToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      token.type = num.type;\n      return token;\n    }\n  };\n  const consumeAnIdentlikeToken = function() {\n    const str2 = consumeAName();\n    if (str2.toLowerCase() === \"url\" && next() === 40) {\n      consume();\n      while (whitespace(next(1)) && whitespace(next(2)))\n        consume();\n      if (next() === 34 || next() === 39)\n        return new FunctionToken(str2);\n      else if (whitespace(next()) && (next(2) === 34 || next(2) === 39))\n        return new FunctionToken(str2);\n      else\n        return consumeAURLToken();\n    } else if (next() === 40) {\n      consume();\n      return new FunctionToken(str2);\n    } else {\n      return new IdentToken(str2);\n    }\n  };\n  const consumeAStringToken = function(endingCodePoint) {\n    if (endingCodePoint === void 0)\n      endingCodePoint = code;\n    let string = \"\";\n    while (consume()) {\n      if (code === endingCodePoint || eof()) {\n        return new StringToken(string);\n      } else if (newline(code)) {\n        parseerror();\n        reconsume();\n        return new BadStringToken();\n      } else if (code === 92) {\n        if (eof(next()))\n          donothing();\n        else if (newline(next()))\n          consume();\n        else\n          string += stringFromCode(consumeEscape());\n      } else {\n        string += stringFromCode(code);\n      }\n    }\n    throw new Error(\"Internal error\");\n  };\n  const consumeAURLToken = function() {\n    const token = new URLToken(\"\");\n    while (whitespace(next()))\n      consume();\n    if (eof(next()))\n      return token;\n    while (consume()) {\n      if (code === 41 || eof()) {\n        return token;\n      } else if (whitespace(code)) {\n        while (whitespace(next()))\n          consume();\n        if (next() === 41 || eof(next())) {\n          consume();\n          return token;\n        } else {\n          consumeTheRemnantsOfABadURL();\n          return new BadURLToken();\n        }\n      } else if (code === 34 || code === 39 || code === 40 || nonprintable(code)) {\n        parseerror();\n        consumeTheRemnantsOfABadURL();\n        return new BadURLToken();\n      } else if (code === 92) {\n        if (startsWithAValidEscape()) {\n          token.value += stringFromCode(consumeEscape());\n        } else {\n          parseerror();\n          consumeTheRemnantsOfABadURL();\n          return new BadURLToken();\n        }\n      } else {\n        token.value += stringFromCode(code);\n      }\n    }\n    throw new Error(\"Internal error\");\n  };\n  const consumeEscape = function() {\n    consume();\n    if (hexdigit(code)) {\n      const digits = [code];\n      for (let total = 0; total < 5; total++) {\n        if (hexdigit(next())) {\n          consume();\n          digits.push(code);\n        } else {\n          break;\n        }\n      }\n      if (whitespace(next()))\n        consume();\n      let value = parseInt(digits.map(function(x) {\n        return String.fromCharCode(x);\n      }).join(\"\"), 16);\n      if (value > maximumallowedcodepoint)\n        value = 65533;\n      return value;\n    } else if (eof()) {\n      return 65533;\n    } else {\n      return code;\n    }\n  };\n  const areAValidEscape = function(c1, c2) {\n    if (c1 !== 92)\n      return false;\n    if (newline(c2))\n      return false;\n    return true;\n  };\n  const startsWithAValidEscape = function() {\n    return areAValidEscape(code, next());\n  };\n  const wouldStartAnIdentifier = function(c1, c2, c3) {\n    if (c1 === 45)\n      return namestartchar(c2) || c2 === 45 || areAValidEscape(c2, c3);\n    else if (namestartchar(c1))\n      return true;\n    else if (c1 === 92)\n      return areAValidEscape(c1, c2);\n    else\n      return false;\n  };\n  const startsWithAnIdentifier = function() {\n    return wouldStartAnIdentifier(code, next(1), next(2));\n  };\n  const wouldStartANumber = function(c1, c2, c3) {\n    if (c1 === 43 || c1 === 45) {\n      if (digit(c2))\n        return true;\n      if (c2 === 46 && digit(c3))\n        return true;\n      return false;\n    } else if (c1 === 46) {\n      if (digit(c2))\n        return true;\n      return false;\n    } else if (digit(c1)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  const startsWithANumber = function() {\n    return wouldStartANumber(code, next(1), next(2));\n  };\n  const consumeAName = function() {\n    let result = \"\";\n    while (consume()) {\n      if (namechar(code)) {\n        result += stringFromCode(code);\n      } else if (startsWithAValidEscape()) {\n        result += stringFromCode(consumeEscape());\n      } else {\n        reconsume();\n        return result;\n      }\n    }\n    throw new Error(\"Internal parse error\");\n  };\n  const consumeANumber = function() {\n    let repr = \"\";\n    let type = \"integer\";\n    if (next() === 43 || next() === 45) {\n      consume();\n      repr += stringFromCode(code);\n    }\n    while (digit(next())) {\n      consume();\n      repr += stringFromCode(code);\n    }\n    if (next(1) === 46 && digit(next(2))) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = \"number\";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    }\n    const c1 = next(1), c2 = next(2), c3 = next(3);\n    if ((c1 === 69 || c1 === 101) && digit(c2)) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = \"number\";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    } else if ((c1 === 69 || c1 === 101) && (c2 === 43 || c2 === 45) && digit(c3)) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = \"number\";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    }\n    const value = convertAStringToANumber(repr);\n    return { type, value, repr };\n  };\n  const convertAStringToANumber = function(string) {\n    return +string;\n  };\n  const consumeTheRemnantsOfABadURL = function() {\n    while (consume()) {\n      if (code === 41 || eof()) {\n        return;\n      } else if (startsWithAValidEscape()) {\n        consumeEscape();\n        donothing();\n      } else {\n        donothing();\n      }\n    }\n  };\n  let iterationCount = 0;\n  while (!eof(next())) {\n    tokens.push(consumeAToken());\n    iterationCount++;\n    if (iterationCount > str.length * 2)\n      throw new Error(\"I'm infinite-looping!\");\n  }\n  return tokens;\n}\nvar CSSParserToken = class {\n  constructor() {\n    this.tokenType = \"\";\n  }\n  toJSON() {\n    return { token: this.tokenType };\n  }\n  toString() {\n    return this.tokenType;\n  }\n  toSource() {\n    return \"\" + this;\n  }\n};\nvar BadStringToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"BADSTRING\";\n  }\n};\nvar BadURLToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"BADURL\";\n  }\n};\nvar WhitespaceToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"WHITESPACE\";\n  }\n  toString() {\n    return \"WS\";\n  }\n  toSource() {\n    return \" \";\n  }\n};\nvar CDOToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"CDO\";\n  }\n  toSource() {\n    return \"<!--\";\n  }\n};\nvar CDCToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"CDC\";\n  }\n  toSource() {\n    return \"-->\";\n  }\n};\nvar ColonToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \":\";\n  }\n};\nvar SemicolonToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \";\";\n  }\n};\nvar CommaToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \",\";\n  }\n};\nvar GroupingToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.value = \"\";\n    this.mirror = \"\";\n  }\n};\nvar OpenCurlyToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = \"{\";\n    this.value = \"{\";\n    this.mirror = \"}\";\n  }\n};\nvar CloseCurlyToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = \"}\";\n    this.value = \"}\";\n    this.mirror = \"{\";\n  }\n};\nvar OpenSquareToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = \"[\";\n    this.value = \"[\";\n    this.mirror = \"]\";\n  }\n};\nvar CloseSquareToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = \"]\";\n    this.value = \"]\";\n    this.mirror = \"[\";\n  }\n};\nvar OpenParenToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = \"(\";\n    this.value = \"(\";\n    this.mirror = \")\";\n  }\n};\nvar CloseParenToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = \")\";\n    this.value = \")\";\n    this.mirror = \"(\";\n  }\n};\nvar IncludeMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"~=\";\n  }\n};\nvar DashMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"|=\";\n  }\n};\nvar PrefixMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"^=\";\n  }\n};\nvar SuffixMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"$=\";\n  }\n};\nvar SubstringMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"*=\";\n  }\n};\nvar ColumnToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"||\";\n  }\n};\nvar EOFToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"EOF\";\n  }\n  toSource() {\n    return \"\";\n  }\n};\nvar DelimToken = class extends CSSParserToken {\n  constructor(code) {\n    super();\n    this.tokenType = \"DELIM\";\n    this.value = \"\";\n    this.value = stringFromCode(code);\n  }\n  toString() {\n    return \"DELIM(\" + this.value + \")\";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    return json;\n  }\n  toSource() {\n    if (this.value === \"\\\\\")\n      return \"\\\\\\n\";\n    else\n      return this.value;\n  }\n};\nvar StringValuedToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.value = \"\";\n  }\n  ASCIIMatch(str) {\n    return this.value.toLowerCase() === str.toLowerCase();\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    return json;\n  }\n};\nvar IdentToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = \"IDENT\";\n    this.value = val;\n  }\n  toString() {\n    return \"IDENT(\" + this.value + \")\";\n  }\n  toSource() {\n    return escapeIdent(this.value);\n  }\n};\nvar FunctionToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = \"FUNCTION\";\n    this.value = val;\n    this.mirror = \")\";\n  }\n  toString() {\n    return \"FUNCTION(\" + this.value + \")\";\n  }\n  toSource() {\n    return escapeIdent(this.value) + \"(\";\n  }\n};\nvar AtKeywordToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = \"AT-KEYWORD\";\n    this.value = val;\n  }\n  toString() {\n    return \"AT(\" + this.value + \")\";\n  }\n  toSource() {\n    return \"@\" + escapeIdent(this.value);\n  }\n};\nvar HashToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = \"HASH\";\n    this.value = val;\n    this.type = \"unrestricted\";\n  }\n  toString() {\n    return \"HASH(\" + this.value + \")\";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.type = this.type;\n    return json;\n  }\n  toSource() {\n    if (this.type === \"id\")\n      return \"#\" + escapeIdent(this.value);\n    else\n      return \"#\" + escapeHash(this.value);\n  }\n};\nvar StringToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = \"STRING\";\n    this.value = val;\n  }\n  toString() {\n    return '\"' + escapeString(this.value) + '\"';\n  }\n};\nvar URLToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = \"URL\";\n    this.value = val;\n  }\n  toString() {\n    return \"URL(\" + this.value + \")\";\n  }\n  toSource() {\n    return 'url(\"' + escapeString(this.value) + '\")';\n  }\n};\nvar NumberToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = \"NUMBER\";\n    this.type = \"integer\";\n    this.repr = \"\";\n  }\n  toString() {\n    if (this.type === \"integer\")\n      return \"INT(\" + this.value + \")\";\n    return \"NUMBER(\" + this.value + \")\";\n  }\n  toJSON() {\n    const json = super.toJSON();\n    json.value = this.value;\n    json.type = this.type;\n    json.repr = this.repr;\n    return json;\n  }\n  toSource() {\n    return this.repr;\n  }\n};\nvar PercentageToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = \"PERCENTAGE\";\n    this.repr = \"\";\n  }\n  toString() {\n    return \"PERCENTAGE(\" + this.value + \")\";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.repr = this.repr;\n    return json;\n  }\n  toSource() {\n    return this.repr + \"%\";\n  }\n};\nvar DimensionToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = \"DIMENSION\";\n    this.type = \"integer\";\n    this.repr = \"\";\n    this.unit = \"\";\n  }\n  toString() {\n    return \"DIM(\" + this.value + \",\" + this.unit + \")\";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.type = this.type;\n    json.repr = this.repr;\n    json.unit = this.unit;\n    return json;\n  }\n  toSource() {\n    const source = this.repr;\n    let unit = escapeIdent(this.unit);\n    if (unit[0].toLowerCase() === \"e\" && (unit[1] === \"-\" || between(unit.charCodeAt(1), 48, 57))) {\n      unit = \"\\\\65 \" + unit.slice(1, unit.length);\n    }\n    return source + unit;\n  }\n};\nfunction escapeIdent(string) {\n  string = \"\" + string;\n  let result = \"\";\n  const firstcode = string.charCodeAt(0);\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError(\"Invalid character: the input contains U+0000.\");\n    if (between(code, 1, 31) || code === 127 || i === 0 && between(code, 48, 57) || i === 1 && between(code, 48, 57) && firstcode === 45)\n      result += \"\\\\\" + code.toString(16) + \" \";\n    else if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))\n      result += string[i];\n    else\n      result += \"\\\\\" + string[i];\n  }\n  return result;\n}\nfunction escapeHash(string) {\n  string = \"\" + string;\n  let result = \"\";\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError(\"Invalid character: the input contains U+0000.\");\n    if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))\n      result += string[i];\n    else\n      result += \"\\\\\" + code.toString(16) + \" \";\n  }\n  return result;\n}\nfunction escapeString(string) {\n  string = \"\" + string;\n  let result = \"\";\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError(\"Invalid character: the input contains U+0000.\");\n    if (between(code, 1, 31) || code === 127)\n      result += \"\\\\\" + code.toString(16) + \" \";\n    else if (code === 34 || code === 92)\n      result += \"\\\\\" + string[i];\n    else\n      result += string[i];\n  }\n  return result;\n}\n\n// packages/playwright-core/src/utils/isomorphic/cssParser.ts\nvar InvalidSelectorError = class extends Error {\n};\nfunction parseCSS(selector, customNames) {\n  let tokens;\n  try {\n    tokens = tokenize(selector);\n    if (!(tokens[tokens.length - 1] instanceof EOFToken))\n      tokens.push(new EOFToken());\n  } catch (e) {\n    const newMessage = e.message + ` while parsing selector \"${selector}\"`;\n    const index = (e.stack || \"\").indexOf(e.message);\n    if (index !== -1)\n      e.stack = e.stack.substring(0, index) + newMessage + e.stack.substring(index + e.message.length);\n    e.message = newMessage;\n    throw e;\n  }\n  const unsupportedToken = tokens.find((token) => {\n    return token instanceof AtKeywordToken || token instanceof BadStringToken || token instanceof BadURLToken || token instanceof ColumnToken || token instanceof CDOToken || token instanceof CDCToken || token instanceof SemicolonToken || // TODO: Consider using these for something, e.g. to escape complex strings.\n    // For example :xpath{ (//div/bar[@attr=\"foo\"])[2]/baz }\n    // Or this way :xpath( {complex-xpath-goes-here(\"hello\")} )\n    token instanceof OpenCurlyToken || token instanceof CloseCurlyToken || // TODO: Consider treating these as strings?\n    token instanceof URLToken || token instanceof PercentageToken;\n  });\n  if (unsupportedToken)\n    throw new InvalidSelectorError(`Unsupported token \"${unsupportedToken.toSource()}\" while parsing selector \"${selector}\"`);\n  let pos = 0;\n  const names = /* @__PURE__ */ new Set();\n  function unexpected() {\n    return new InvalidSelectorError(`Unexpected token \"${tokens[pos].toSource()}\" while parsing selector \"${selector}\"`);\n  }\n  function skipWhitespace() {\n    while (tokens[pos] instanceof WhitespaceToken)\n      pos++;\n  }\n  function isIdent(p = pos) {\n    return tokens[p] instanceof IdentToken;\n  }\n  function isString(p = pos) {\n    return tokens[p] instanceof StringToken;\n  }\n  function isNumber(p = pos) {\n    return tokens[p] instanceof NumberToken;\n  }\n  function isComma(p = pos) {\n    return tokens[p] instanceof CommaToken;\n  }\n  function isOpenParen(p = pos) {\n    return tokens[p] instanceof OpenParenToken;\n  }\n  function isCloseParen(p = pos) {\n    return tokens[p] instanceof CloseParenToken;\n  }\n  function isFunction(p = pos) {\n    return tokens[p] instanceof FunctionToken;\n  }\n  function isStar(p = pos) {\n    return tokens[p] instanceof DelimToken && tokens[p].value === \"*\";\n  }\n  function isEOF(p = pos) {\n    return tokens[p] instanceof EOFToken;\n  }\n  function isClauseCombinator(p = pos) {\n    return tokens[p] instanceof DelimToken && [\">\", \"+\", \"~\"].includes(tokens[p].value);\n  }\n  function isSelectorClauseEnd(p = pos) {\n    return isComma(p) || isCloseParen(p) || isEOF(p) || isClauseCombinator(p) || tokens[p] instanceof WhitespaceToken;\n  }\n  function consumeFunctionArguments() {\n    const result2 = [consumeArgument()];\n    while (true) {\n      skipWhitespace();\n      if (!isComma())\n        break;\n      pos++;\n      result2.push(consumeArgument());\n    }\n    return result2;\n  }\n  function consumeArgument() {\n    skipWhitespace();\n    if (isNumber())\n      return tokens[pos++].value;\n    if (isString())\n      return tokens[pos++].value;\n    return consumeComplexSelector();\n  }\n  function consumeComplexSelector() {\n    const result2 = { simples: [] };\n    skipWhitespace();\n    if (isClauseCombinator()) {\n      result2.simples.push({ selector: { functions: [{ name: \"scope\", args: [] }] }, combinator: \"\" });\n    } else {\n      result2.simples.push({ selector: consumeSimpleSelector(), combinator: \"\" });\n    }\n    while (true) {\n      skipWhitespace();\n      if (isClauseCombinator()) {\n        result2.simples[result2.simples.length - 1].combinator = tokens[pos++].value;\n        skipWhitespace();\n      } else if (isSelectorClauseEnd()) {\n        break;\n      }\n      result2.simples.push({ combinator: \"\", selector: consumeSimpleSelector() });\n    }\n    return result2;\n  }\n  function consumeSimpleSelector() {\n    let rawCSSString = \"\";\n    const functions = [];\n    while (!isSelectorClauseEnd()) {\n      if (isIdent() || isStar()) {\n        rawCSSString += tokens[pos++].toSource();\n      } else if (tokens[pos] instanceof HashToken) {\n        rawCSSString += tokens[pos++].toSource();\n      } else if (tokens[pos] instanceof DelimToken && tokens[pos].value === \".\") {\n        pos++;\n        if (isIdent())\n          rawCSSString += \".\" + tokens[pos++].toSource();\n        else\n          throw unexpected();\n      } else if (tokens[pos] instanceof ColonToken) {\n        pos++;\n        if (isIdent()) {\n          if (!customNames.has(tokens[pos].value.toLowerCase())) {\n            rawCSSString += \":\" + tokens[pos++].toSource();\n          } else {\n            const name = tokens[pos++].value.toLowerCase();\n            functions.push({ name, args: [] });\n            names.add(name);\n          }\n        } else if (isFunction()) {\n          const name = tokens[pos++].value.toLowerCase();\n          if (!customNames.has(name)) {\n            rawCSSString += `:${name}(${consumeBuiltinFunctionArguments()})`;\n          } else {\n            functions.push({ name, args: consumeFunctionArguments() });\n            names.add(name);\n          }\n          skipWhitespace();\n          if (!isCloseParen())\n            throw unexpected();\n          pos++;\n        } else {\n          throw unexpected();\n        }\n      } else if (tokens[pos] instanceof OpenSquareToken) {\n        rawCSSString += \"[\";\n        pos++;\n        while (!(tokens[pos] instanceof CloseSquareToken) && !isEOF())\n          rawCSSString += tokens[pos++].toSource();\n        if (!(tokens[pos] instanceof CloseSquareToken))\n          throw unexpected();\n        rawCSSString += \"]\";\n        pos++;\n      } else {\n        throw unexpected();\n      }\n    }\n    if (!rawCSSString && !functions.length)\n      throw unexpected();\n    return { css: rawCSSString || void 0, functions };\n  }\n  function consumeBuiltinFunctionArguments() {\n    let s = \"\";\n    let balance = 1;\n    while (!isEOF()) {\n      if (isOpenParen() || isFunction())\n        balance++;\n      if (isCloseParen())\n        balance--;\n      if (!balance)\n        break;\n      s += tokens[pos++].toSource();\n    }\n    return s;\n  }\n  const result = consumeFunctionArguments();\n  if (!isEOF())\n    throw unexpected();\n  if (result.some((arg) => typeof arg !== \"object\" || !(\"simples\" in arg)))\n    throw new InvalidSelectorError(`Error while parsing selector \"${selector}\"`);\n  return { selector: result, names: Array.from(names) };\n}\n\n// packages/playwright-core/src/utils/isomorphic/selectorParser.ts\nvar kNestedSelectorNames = /* @__PURE__ */ new Set([\"internal:has\", \"internal:has-not\", \"internal:and\", \"internal:or\", \"internal:chain\", \"left-of\", \"right-of\", \"above\", \"below\", \"near\"]);\nvar kNestedSelectorNamesWithDistance = /* @__PURE__ */ new Set([\"left-of\", \"right-of\", \"above\", \"below\", \"near\"]);\nvar customCSSNames = /* @__PURE__ */ new Set([\"not\", \"is\", \"where\", \"has\", \"scope\", \"light\", \"visible\", \"text\", \"text-matches\", \"text-is\", \"has-text\", \"above\", \"below\", \"right-of\", \"left-of\", \"near\", \"nth-match\"]);\nfunction parseSelector(selector) {\n  const parsedStrings = parseSelectorString(selector);\n  const parts = [];\n  for (const part of parsedStrings.parts) {\n    if (part.name === \"css\" || part.name === \"css:light\") {\n      if (part.name === \"css:light\")\n        part.body = \":light(\" + part.body + \")\";\n      const parsedCSS = parseCSS(part.body, customCSSNames);\n      parts.push({\n        name: \"css\",\n        body: parsedCSS.selector,\n        source: part.body\n      });\n      continue;\n    }\n    if (kNestedSelectorNames.has(part.name)) {\n      let innerSelector;\n      let distance;\n      try {\n        const unescaped = JSON.parse(\"[\" + part.body + \"]\");\n        if (!Array.isArray(unescaped) || unescaped.length < 1 || unescaped.length > 2 || typeof unescaped[0] !== \"string\")\n          throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n        innerSelector = unescaped[0];\n        if (unescaped.length === 2) {\n          if (typeof unescaped[1] !== \"number\" || !kNestedSelectorNamesWithDistance.has(part.name))\n            throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n          distance = unescaped[1];\n        }\n      } catch (e) {\n        throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n      }\n      const nested = { name: part.name, source: part.body, body: { parsed: parseSelector(innerSelector), distance } };\n      const lastFrame = [...nested.body.parsed.parts].reverse().find((part2) => part2.name === \"internal:control\" && part2.body === \"enter-frame\");\n      const lastFrameIndex = lastFrame ? nested.body.parsed.parts.indexOf(lastFrame) : -1;\n      if (lastFrameIndex !== -1 && selectorPartsEqual(nested.body.parsed.parts.slice(0, lastFrameIndex + 1), parts.slice(0, lastFrameIndex + 1)))\n        nested.body.parsed.parts.splice(0, lastFrameIndex + 1);\n      parts.push(nested);\n      continue;\n    }\n    parts.push({ ...part, source: part.body });\n  }\n  if (kNestedSelectorNames.has(parts[0].name))\n    throw new InvalidSelectorError(`\"${parts[0].name}\" selector cannot be first`);\n  return {\n    capture: parsedStrings.capture,\n    parts\n  };\n}\nfunction selectorPartsEqual(list1, list2) {\n  return stringifySelector({ parts: list1 }) === stringifySelector({ parts: list2 });\n}\nfunction stringifySelector(selector, forceEngineName) {\n  if (typeof selector === \"string\")\n    return selector;\n  return selector.parts.map((p, i) => {\n    let includeEngine = true;\n    if (!forceEngineName && i !== selector.capture) {\n      if (p.name === \"css\")\n        includeEngine = false;\n      else if (p.name === \"xpath\" && p.source.startsWith(\"//\") || p.source.startsWith(\"..\"))\n        includeEngine = false;\n    }\n    const prefix = includeEngine ? p.name + \"=\" : \"\";\n    return `${i === selector.capture ? \"*\" : \"\"}${prefix}${p.source}`;\n  }).join(\" >> \");\n}\nfunction parseSelectorString(selector) {\n  let index = 0;\n  let quote;\n  let start = 0;\n  const result = { parts: [] };\n  const append = () => {\n    const part = selector.substring(start, index).trim();\n    const eqIndex = part.indexOf(\"=\");\n    let name;\n    let body;\n    if (eqIndex !== -1 && part.substring(0, eqIndex).trim().match(/^[a-zA-Z_0-9-+:*]+$/)) {\n      name = part.substring(0, eqIndex).trim();\n      body = part.substring(eqIndex + 1);\n    } else if (part.length > 1 && part[0] === '\"' && part[part.length - 1] === '\"') {\n      name = \"text\";\n      body = part;\n    } else if (part.length > 1 && part[0] === \"'\" && part[part.length - 1] === \"'\") {\n      name = \"text\";\n      body = part;\n    } else if (/^\\(*\\/\\//.test(part) || part.startsWith(\"..\")) {\n      name = \"xpath\";\n      body = part;\n    } else {\n      name = \"css\";\n      body = part;\n    }\n    let capture = false;\n    if (name[0] === \"*\") {\n      capture = true;\n      name = name.substring(1);\n    }\n    result.parts.push({ name, body });\n    if (capture) {\n      if (result.capture !== void 0)\n        throw new InvalidSelectorError(`Only one of the selectors can capture using * modifier`);\n      result.capture = result.parts.length - 1;\n    }\n  };\n  if (!selector.includes(\">>\")) {\n    index = selector.length;\n    append();\n    return result;\n  }\n  const shouldIgnoreTextSelectorQuote = () => {\n    const prefix = selector.substring(start, index);\n    const match = prefix.match(/^\\s*text\\s*=(.*)$/);\n    return !!match && !!match[1];\n  };\n  while (index < selector.length) {\n    const c = selector[index];\n    if (c === \"\\\\\" && index + 1 < selector.length) {\n      index += 2;\n    } else if (c === quote) {\n      quote = void 0;\n      index++;\n    } else if (!quote && (c === '\"' || c === \"'\" || c === \"`\") && !shouldIgnoreTextSelectorQuote()) {\n      quote = c;\n      index++;\n    } else if (!quote && c === \">\" && selector[index + 1] === \">\") {\n      append();\n      index += 2;\n      start = index;\n    } else {\n      index++;\n    }\n  }\n  append();\n  return result;\n}\nfunction parseAttributeSelector(selector, allowUnquotedStrings) {\n  let wp = 0;\n  let EOL = selector.length === 0;\n  const next = () => selector[wp] || \"\";\n  const eat1 = () => {\n    const result2 = next();\n    ++wp;\n    EOL = wp >= selector.length;\n    return result2;\n  };\n  const syntaxError = (stage) => {\n    if (EOL)\n      throw new InvalidSelectorError(`Unexpected end of selector while parsing selector \\`${selector}\\``);\n    throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - unexpected symbol \"${next()}\" at position ${wp}` + (stage ? \" during \" + stage : \"\"));\n  };\n  function skipSpaces() {\n    while (!EOL && /\\s/.test(next()))\n      eat1();\n  }\n  function isCSSNameChar(char) {\n    return char >= \"\\x80\" || char >= \"0\" && char <= \"9\" || char >= \"A\" && char <= \"Z\" || char >= \"a\" && char <= \"z\" || char >= \"0\" && char <= \"9\" || char === \"_\" || char === \"-\";\n  }\n  function readIdentifier() {\n    let result2 = \"\";\n    skipSpaces();\n    while (!EOL && isCSSNameChar(next()))\n      result2 += eat1();\n    return result2;\n  }\n  function readQuotedString(quote) {\n    let result2 = eat1();\n    if (result2 !== quote)\n      syntaxError(\"parsing quoted string\");\n    while (!EOL && next() !== quote) {\n      if (next() === \"\\\\\")\n        eat1();\n      result2 += eat1();\n    }\n    if (next() !== quote)\n      syntaxError(\"parsing quoted string\");\n    result2 += eat1();\n    return result2;\n  }\n  function readRegularExpression() {\n    if (eat1() !== \"/\")\n      syntaxError(\"parsing regular expression\");\n    let source = \"\";\n    let inClass = false;\n    while (!EOL) {\n      if (next() === \"\\\\\") {\n        source += eat1();\n        if (EOL)\n          syntaxError(\"parsing regular expression\");\n      } else if (inClass && next() === \"]\") {\n        inClass = false;\n      } else if (!inClass && next() === \"[\") {\n        inClass = true;\n      } else if (!inClass && next() === \"/\") {\n        break;\n      }\n      source += eat1();\n    }\n    if (eat1() !== \"/\")\n      syntaxError(\"parsing regular expression\");\n    let flags = \"\";\n    while (!EOL && next().match(/[dgimsuy]/))\n      flags += eat1();\n    try {\n      return new RegExp(source, flags);\n    } catch (e) {\n      throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\`: ${e.message}`);\n    }\n  }\n  function readAttributeToken() {\n    let token = \"\";\n    skipSpaces();\n    if (next() === `'` || next() === `\"`)\n      token = readQuotedString(next()).slice(1, -1);\n    else\n      token = readIdentifier();\n    if (!token)\n      syntaxError(\"parsing property path\");\n    return token;\n  }\n  function readOperator() {\n    skipSpaces();\n    let op = \"\";\n    if (!EOL)\n      op += eat1();\n    if (!EOL && op !== \"=\")\n      op += eat1();\n    if (![\"=\", \"*=\", \"^=\", \"$=\", \"|=\", \"~=\"].includes(op))\n      syntaxError(\"parsing operator\");\n    return op;\n  }\n  function readAttribute() {\n    eat1();\n    const jsonPath = [];\n    jsonPath.push(readAttributeToken());\n    skipSpaces();\n    while (next() === \".\") {\n      eat1();\n      jsonPath.push(readAttributeToken());\n      skipSpaces();\n    }\n    if (next() === \"]\") {\n      eat1();\n      return { name: jsonPath.join(\".\"), jsonPath, op: \"<truthy>\", value: null, caseSensitive: false };\n    }\n    const operator = readOperator();\n    let value = void 0;\n    let caseSensitive = true;\n    skipSpaces();\n    if (next() === \"/\") {\n      if (operator !== \"=\")\n        throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - cannot use ${operator} in attribute with regular expression`);\n      value = readRegularExpression();\n    } else if (next() === `'` || next() === `\"`) {\n      value = readQuotedString(next()).slice(1, -1);\n      skipSpaces();\n      if (next() === \"i\" || next() === \"I\") {\n        caseSensitive = false;\n        eat1();\n      } else if (next() === \"s\" || next() === \"S\") {\n        caseSensitive = true;\n        eat1();\n      }\n    } else {\n      value = \"\";\n      while (!EOL && (isCSSNameChar(next()) || next() === \"+\" || next() === \".\"))\n        value += eat1();\n      if (value === \"true\") {\n        value = true;\n      } else if (value === \"false\") {\n        value = false;\n      } else {\n        if (!allowUnquotedStrings) {\n          value = +value;\n          if (Number.isNaN(value))\n            syntaxError(\"parsing attribute value\");\n        }\n      }\n    }\n    skipSpaces();\n    if (next() !== \"]\")\n      syntaxError(\"parsing attribute value\");\n    eat1();\n    if (operator !== \"=\" && typeof value !== \"string\")\n      throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - cannot use ${operator} in attribute with non-string matching value - ${value}`);\n    return { name: jsonPath.join(\".\"), jsonPath, op: operator, value, caseSensitive };\n  }\n  const result = {\n    name: \"\",\n    attributes: []\n  };\n  result.name = readIdentifier();\n  skipSpaces();\n  while (next() === \"[\") {\n    result.attributes.push(readAttribute());\n    skipSpaces();\n  }\n  if (!EOL)\n    syntaxError(void 0);\n  if (!result.name && !result.attributes.length)\n    throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - selector cannot be empty`);\n  return result;\n}\n\n// packages/playwright-core/src/utils/isomorphic/locatorGenerators.ts\nfunction asLocator(lang, selector, isFrameLocator = false) {\n  return asLocators(lang, selector, isFrameLocator)[0];\n}\nfunction asLocators(lang, selector, isFrameLocator = false, maxOutputSize = 20, preferredQuote) {\n  try {\n    return innerAsLocators(new generators[lang](preferredQuote), parseSelector(selector), isFrameLocator, maxOutputSize);\n  } catch (e) {\n    return [selector];\n  }\n}\nfunction innerAsLocators(factory, parsed, isFrameLocator = false, maxOutputSize = 20) {\n  const parts = [...parsed.parts];\n  for (let index = 0; index < parts.length - 1; index++) {\n    if (parts[index].name === \"nth\" && parts[index + 1].name === \"internal:control\" && parts[index + 1].body === \"enter-frame\") {\n      const [nth] = parts.splice(index, 1);\n      parts.splice(index + 1, 0, nth);\n    }\n  }\n  const tokens = [];\n  let nextBase = isFrameLocator ? \"frame-locator\" : \"page\";\n  for (let index = 0; index < parts.length; index++) {\n    const part = parts[index];\n    const base = nextBase;\n    nextBase = \"locator\";\n    if (part.name === \"nth\") {\n      if (part.body === \"0\")\n        tokens.push([factory.generateLocator(base, \"first\", \"\"), factory.generateLocator(base, \"nth\", \"0\")]);\n      else if (part.body === \"-1\")\n        tokens.push([factory.generateLocator(base, \"last\", \"\"), factory.generateLocator(base, \"nth\", \"-1\")]);\n      else\n        tokens.push([factory.generateLocator(base, \"nth\", part.body)]);\n      continue;\n    }\n    if (part.name === \"internal:text\") {\n      const { exact, text } = detectExact(part.body);\n      tokens.push([factory.generateLocator(base, \"text\", text, { exact })]);\n      continue;\n    }\n    if (part.name === \"internal:has-text\") {\n      const { exact, text } = detectExact(part.body);\n      if (!exact) {\n        tokens.push([factory.generateLocator(base, \"has-text\", text, { exact })]);\n        continue;\n      }\n    }\n    if (part.name === \"internal:has-not-text\") {\n      const { exact, text } = detectExact(part.body);\n      if (!exact) {\n        tokens.push([factory.generateLocator(base, \"has-not-text\", text, { exact })]);\n        continue;\n      }\n    }\n    if (part.name === \"internal:has\") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, \"has\", inner)));\n      continue;\n    }\n    if (part.name === \"internal:has-not\") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, \"hasNot\", inner)));\n      continue;\n    }\n    if (part.name === \"internal:and\") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, \"and\", inner)));\n      continue;\n    }\n    if (part.name === \"internal:or\") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, \"or\", inner)));\n      continue;\n    }\n    if (part.name === \"internal:chain\") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, \"chain\", inner)));\n      continue;\n    }\n    if (part.name === \"internal:label\") {\n      const { exact, text } = detectExact(part.body);\n      tokens.push([factory.generateLocator(base, \"label\", text, { exact })]);\n      continue;\n    }\n    if (part.name === \"internal:role\") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const options = { attrs: [] };\n      for (const attr of attrSelector.attributes) {\n        if (attr.name === \"name\") {\n          options.exact = attr.caseSensitive;\n          options.name = attr.value;\n        } else {\n          if (attr.name === \"level\" && typeof attr.value === \"string\")\n            attr.value = +attr.value;\n          options.attrs.push({ name: attr.name === \"include-hidden\" ? \"includeHidden\" : attr.name, value: attr.value });\n        }\n      }\n      tokens.push([factory.generateLocator(base, \"role\", attrSelector.name, options)]);\n      continue;\n    }\n    if (part.name === \"internal:testid\") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const { value } = attrSelector.attributes[0];\n      tokens.push([factory.generateLocator(base, \"test-id\", value)]);\n      continue;\n    }\n    if (part.name === \"internal:attr\") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const { name, value, caseSensitive } = attrSelector.attributes[0];\n      const text = value;\n      const exact = !!caseSensitive;\n      if (name === \"placeholder\") {\n        tokens.push([factory.generateLocator(base, \"placeholder\", text, { exact })]);\n        continue;\n      }\n      if (name === \"alt\") {\n        tokens.push([factory.generateLocator(base, \"alt\", text, { exact })]);\n        continue;\n      }\n      if (name === \"title\") {\n        tokens.push([factory.generateLocator(base, \"title\", text, { exact })]);\n        continue;\n      }\n    }\n    let locatorType = \"default\";\n    const nextPart = parts[index + 1];\n    if (nextPart && nextPart.name === \"internal:control\" && nextPart.body === \"enter-frame\") {\n      locatorType = \"frame\";\n      nextBase = \"frame-locator\";\n      index++;\n    }\n    const selectorPart = stringifySelector({ parts: [part] });\n    const locatorPart = factory.generateLocator(base, locatorType, selectorPart);\n    if (locatorType === \"default\" && nextPart && [\"internal:has-text\", \"internal:has-not-text\"].includes(nextPart.name)) {\n      const { exact, text } = detectExact(nextPart.body);\n      if (!exact) {\n        const nextLocatorPart = factory.generateLocator(\"locator\", nextPart.name === \"internal:has-text\" ? \"has-text\" : \"has-not-text\", text, { exact });\n        const options = {};\n        if (nextPart.name === \"internal:has-text\")\n          options.hasText = text;\n        else\n          options.hasNotText = text;\n        const combinedPart = factory.generateLocator(base, \"default\", selectorPart, options);\n        tokens.push([factory.chainLocators([locatorPart, nextLocatorPart]), combinedPart]);\n        index++;\n        continue;\n      }\n    }\n    let locatorPartWithEngine;\n    if ([\"xpath\", \"css\"].includes(part.name)) {\n      const selectorPart2 = stringifySelector(\n        { parts: [part] },\n        /* forceEngineName */\n        true\n      );\n      locatorPartWithEngine = factory.generateLocator(base, locatorType, selectorPart2);\n    }\n    tokens.push([locatorPart, locatorPartWithEngine].filter(Boolean));\n  }\n  return combineTokens(factory, tokens, maxOutputSize);\n}\nfunction combineTokens(factory, tokens, maxOutputSize) {\n  const currentTokens = tokens.map(() => \"\");\n  const result = [];\n  const visit = (index) => {\n    if (index === tokens.length) {\n      result.push(factory.chainLocators(currentTokens));\n      return currentTokens.length < maxOutputSize;\n    }\n    for (const taken of tokens[index]) {\n      currentTokens[index] = taken;\n      if (!visit(index + 1))\n        return false;\n    }\n    return true;\n  };\n  visit(0);\n  return result;\n}\nfunction detectExact(text) {\n  let exact = false;\n  const match = text.match(/^\\/(.*)\\/([igm]*)$/);\n  if (match)\n    return { text: new RegExp(match[1], match[2]) };\n  if (text.endsWith('\"')) {\n    text = JSON.parse(text);\n    exact = true;\n  } else if (text.endsWith('\"s')) {\n    text = JSON.parse(text.substring(0, text.length - 1));\n    exact = true;\n  } else if (text.endsWith('\"i')) {\n    text = JSON.parse(text.substring(0, text.length - 1));\n    exact = false;\n  }\n  return { exact, text };\n}\nvar JavaScriptLocatorFactory = class {\n  constructor(preferredQuote) {\n    this.preferredQuote = preferredQuote;\n  }\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case \"default\":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, { hasText: ${this.toHasText(options.hasText)} })`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, { hasNotText: ${this.toHasText(options.hasNotText)} })`;\n        return `locator(${this.quote(body)})`;\n      case \"frame\":\n        return `frameLocator(${this.quote(body)})`;\n      case \"nth\":\n        return `nth(${body})`;\n      case \"first\":\n        return `first()`;\n      case \"last\":\n        return `last()`;\n      case \"role\":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`name: ${this.regexToSourceString(options.name)}`);\n        } else if (typeof options.name === \"string\") {\n          attrs.push(`name: ${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`exact: true`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`${name}: ${typeof value === \"string\" ? this.quote(value) : value}`);\n        const attrString = attrs.length ? `, { ${attrs.join(\", \")} }` : \"\";\n        return `getByRole(${this.quote(body)}${attrString})`;\n      case \"has-text\":\n        return `filter({ hasText: ${this.toHasText(body)} })`;\n      case \"has-not-text\":\n        return `filter({ hasNotText: ${this.toHasText(body)} })`;\n      case \"has\":\n        return `filter({ has: ${body} })`;\n      case \"hasNot\":\n        return `filter({ hasNot: ${body} })`;\n      case \"and\":\n        return `and(${body})`;\n      case \"or\":\n        return `or(${body})`;\n      case \"chain\":\n        return `locator(${body})`;\n      case \"test-id\":\n        return `getByTestId(${this.toTestIdValue(body)})`;\n      case \"text\":\n        return this.toCallWithExact(\"getByText\", body, !!options.exact);\n      case \"alt\":\n        return this.toCallWithExact(\"getByAltText\", body, !!options.exact);\n      case \"placeholder\":\n        return this.toCallWithExact(\"getByPlaceholder\", body, !!options.exact);\n      case \"label\":\n        return this.toCallWithExact(\"getByLabel\", body, !!options.exact);\n      case \"title\":\n        return this.toCallWithExact(\"getByTitle\", body, !!options.exact);\n      default:\n        throw new Error(\"Unknown selector kind \" + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(\".\");\n  }\n  regexToSourceString(re) {\n    return normalizeEscapedRegexQuotes(String(re));\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToSourceString(body)})`;\n    return exact ? `${method}(${this.quote(body)}, { exact: true })` : `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToSourceString(body);\n    return this.quote(body);\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToSourceString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    var _a;\n    return escapeWithQuotes(text, (_a = this.preferredQuote) != null ? _a : \"'\");\n  }\n};\nvar PythonLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case \"default\":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, has_text=${this.toHasText(options.hasText)})`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, has_not_text=${this.toHasText(options.hasNotText)})`;\n        return `locator(${this.quote(body)})`;\n      case \"frame\":\n        return `frame_locator(${this.quote(body)})`;\n      case \"nth\":\n        return `nth(${body})`;\n      case \"first\":\n        return `first`;\n      case \"last\":\n        return `last`;\n      case \"role\":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`name=${this.regexToString(options.name)}`);\n        } else if (typeof options.name === \"string\") {\n          attrs.push(`name=${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`exact=True`);\n        }\n        for (const { name, value } of options.attrs) {\n          let valueString = typeof value === \"string\" ? this.quote(value) : value;\n          if (typeof value === \"boolean\")\n            valueString = value ? \"True\" : \"False\";\n          attrs.push(`${toSnakeCase(name)}=${valueString}`);\n        }\n        const attrString = attrs.length ? `, ${attrs.join(\", \")}` : \"\";\n        return `get_by_role(${this.quote(body)}${attrString})`;\n      case \"has-text\":\n        return `filter(has_text=${this.toHasText(body)})`;\n      case \"has-not-text\":\n        return `filter(has_not_text=${this.toHasText(body)})`;\n      case \"has\":\n        return `filter(has=${body})`;\n      case \"hasNot\":\n        return `filter(has_not=${body})`;\n      case \"and\":\n        return `and_(${body})`;\n      case \"or\":\n        return `or_(${body})`;\n      case \"chain\":\n        return `locator(${body})`;\n      case \"test-id\":\n        return `get_by_test_id(${this.toTestIdValue(body)})`;\n      case \"text\":\n        return this.toCallWithExact(\"get_by_text\", body, !!options.exact);\n      case \"alt\":\n        return this.toCallWithExact(\"get_by_alt_text\", body, !!options.exact);\n      case \"placeholder\":\n        return this.toCallWithExact(\"get_by_placeholder\", body, !!options.exact);\n      case \"label\":\n        return this.toCallWithExact(\"get_by_label\", body, !!options.exact);\n      case \"title\":\n        return this.toCallWithExact(\"get_by_title\", body, !!options.exact);\n      default:\n        throw new Error(\"Unknown selector kind \" + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(\".\");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes(\"i\") ? \", re.IGNORECASE\" : \"\";\n    return `re.compile(r\"${normalizeEscapedRegexQuotes(body.source).replace(/\\\\\\//, \"/\").replace(/\"/g, '\\\\\"')}\"${suffix})`;\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, exact=True)`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToString(body);\n    return `${this.quote(body)}`;\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    return escapeWithQuotes(text, '\"');\n  }\n};\nvar JavaLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    let clazz;\n    switch (base) {\n      case \"page\":\n        clazz = \"Page\";\n        break;\n      case \"frame-locator\":\n        clazz = \"FrameLocator\";\n        break;\n      case \"locator\":\n        clazz = \"Locator\";\n        break;\n    }\n    switch (kind) {\n      case \"default\":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasText(${this.toHasText(options.hasText)}))`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasNotText(${this.toHasText(options.hasNotText)}))`;\n        return `locator(${this.quote(body)})`;\n      case \"frame\":\n        return `frameLocator(${this.quote(body)})`;\n      case \"nth\":\n        return `nth(${body})`;\n      case \"first\":\n        return `first()`;\n      case \"last\":\n        return `last()`;\n      case \"role\":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`.setName(${this.regexToString(options.name)})`);\n        } else if (typeof options.name === \"string\") {\n          attrs.push(`.setName(${this.quote(options.name)})`);\n          if (options.exact)\n            attrs.push(`.setExact(true)`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`.set${toTitleCase(name)}(${typeof value === \"string\" ? this.quote(value) : value})`);\n        const attrString = attrs.length ? `, new ${clazz}.GetByRoleOptions()${attrs.join(\"\")}` : \"\";\n        return `getByRole(AriaRole.${toSnakeCase(body).toUpperCase()}${attrString})`;\n      case \"has-text\":\n        return `filter(new ${clazz}.FilterOptions().setHasText(${this.toHasText(body)}))`;\n      case \"has-not-text\":\n        return `filter(new ${clazz}.FilterOptions().setHasNotText(${this.toHasText(body)}))`;\n      case \"has\":\n        return `filter(new ${clazz}.FilterOptions().setHas(${body}))`;\n      case \"hasNot\":\n        return `filter(new ${clazz}.FilterOptions().setHasNot(${body}))`;\n      case \"and\":\n        return `and(${body})`;\n      case \"or\":\n        return `or(${body})`;\n      case \"chain\":\n        return `locator(${body})`;\n      case \"test-id\":\n        return `getByTestId(${this.toTestIdValue(body)})`;\n      case \"text\":\n        return this.toCallWithExact(clazz, \"getByText\", body, !!options.exact);\n      case \"alt\":\n        return this.toCallWithExact(clazz, \"getByAltText\", body, !!options.exact);\n      case \"placeholder\":\n        return this.toCallWithExact(clazz, \"getByPlaceholder\", body, !!options.exact);\n      case \"label\":\n        return this.toCallWithExact(clazz, \"getByLabel\", body, !!options.exact);\n      case \"title\":\n        return this.toCallWithExact(clazz, \"getByTitle\", body, !!options.exact);\n      default:\n        throw new Error(\"Unknown selector kind \" + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(\".\");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes(\"i\") ? \", Pattern.CASE_INSENSITIVE\" : \"\";\n    return `Pattern.compile(${this.quote(normalizeEscapedRegexQuotes(body.source))}${suffix})`;\n  }\n  toCallWithExact(clazz, method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, new ${clazz}.${toTitleCase(method)}Options().setExact(true))`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToString(body);\n    return this.quote(body);\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    return escapeWithQuotes(text, '\"');\n  }\n};\nvar CSharpLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case \"default\":\n        if (options.hasText !== void 0)\n          return `Locator(${this.quote(body)}, new() { ${this.toHasText(options.hasText)} })`;\n        if (options.hasNotText !== void 0)\n          return `Locator(${this.quote(body)}, new() { ${this.toHasNotText(options.hasNotText)} })`;\n        return `Locator(${this.quote(body)})`;\n      case \"frame\":\n        return `FrameLocator(${this.quote(body)})`;\n      case \"nth\":\n        return `Nth(${body})`;\n      case \"first\":\n        return `First`;\n      case \"last\":\n        return `Last`;\n      case \"role\":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`NameRegex = ${this.regexToString(options.name)}`);\n        } else if (typeof options.name === \"string\") {\n          attrs.push(`Name = ${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`Exact = true`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`${toTitleCase(name)} = ${typeof value === \"string\" ? this.quote(value) : value}`);\n        const attrString = attrs.length ? `, new() { ${attrs.join(\", \")} }` : \"\";\n        return `GetByRole(AriaRole.${toTitleCase(body)}${attrString})`;\n      case \"has-text\":\n        return `Filter(new() { ${this.toHasText(body)} })`;\n      case \"has-not-text\":\n        return `Filter(new() { ${this.toHasNotText(body)} })`;\n      case \"has\":\n        return `Filter(new() { Has = ${body} })`;\n      case \"hasNot\":\n        return `Filter(new() { HasNot = ${body} })`;\n      case \"and\":\n        return `And(${body})`;\n      case \"or\":\n        return `Or(${body})`;\n      case \"chain\":\n        return `Locator(${body})`;\n      case \"test-id\":\n        return `GetByTestId(${this.toTestIdValue(body)})`;\n      case \"text\":\n        return this.toCallWithExact(\"GetByText\", body, !!options.exact);\n      case \"alt\":\n        return this.toCallWithExact(\"GetByAltText\", body, !!options.exact);\n      case \"placeholder\":\n        return this.toCallWithExact(\"GetByPlaceholder\", body, !!options.exact);\n      case \"label\":\n        return this.toCallWithExact(\"GetByLabel\", body, !!options.exact);\n      case \"title\":\n        return this.toCallWithExact(\"GetByTitle\", body, !!options.exact);\n      default:\n        throw new Error(\"Unknown selector kind \" + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(\".\");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes(\"i\") ? \", RegexOptions.IgnoreCase\" : \"\";\n    return `new Regex(${this.quote(normalizeEscapedRegexQuotes(body.source))}${suffix})`;\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, new() { Exact = true })`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return `HasTextRegex = ${this.regexToString(body)}`;\n    return `HasText = ${this.quote(body)}`;\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  toHasNotText(body) {\n    if (isRegExp(body))\n      return `HasNotTextRegex = ${this.regexToString(body)}`;\n    return `HasNotText = ${this.quote(body)}`;\n  }\n  quote(text) {\n    return escapeWithQuotes(text, '\"');\n  }\n};\nvar JsonlLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    return JSON.stringify({\n      kind,\n      body,\n      options\n    });\n  }\n  chainLocators(locators) {\n    const objects = locators.map((l) => JSON.parse(l));\n    for (let i = 0; i < objects.length - 1; ++i)\n      objects[i].next = objects[i + 1];\n    return JSON.stringify(objects[0]);\n  }\n};\nvar generators = {\n  javascript: JavaScriptLocatorFactory,\n  python: PythonLocatorFactory,\n  java: JavaLocatorFactory,\n  csharp: CSharpLocatorFactory,\n  jsonl: JsonlLocatorFactory\n};\nfunction isRegExp(obj) {\n  return obj instanceof RegExp;\n}\n\n// packages/playwright-core/src/server/injected/consoleApi.ts\nvar selectorSymbol = Symbol(\"selector\");\nvar _Locator = class _Locator {\n  constructor(injectedScript, selector, options) {\n    if (options == null ? void 0 : options.hasText)\n      selector += ` >> internal:has-text=${escapeForTextSelector(options.hasText, false)}`;\n    if (options == null ? void 0 : options.hasNotText)\n      selector += ` >> internal:has-not-text=${escapeForTextSelector(options.hasNotText, false)}`;\n    if (options == null ? void 0 : options.has)\n      selector += ` >> internal:has=` + JSON.stringify(options.has[selectorSymbol]);\n    if (options == null ? void 0 : options.hasNot)\n      selector += ` >> internal:has-not=` + JSON.stringify(options.hasNot[selectorSymbol]);\n    this[selectorSymbol] = selector;\n    if (selector) {\n      const parsed = injectedScript.parseSelector(selector);\n      this.element = injectedScript.querySelector(parsed, injectedScript.document, false);\n      this.elements = injectedScript.querySelectorAll(parsed, injectedScript.document);\n    }\n    const selectorBase = selector;\n    const self = this;\n    self.locator = (selector2, options2) => {\n      return new _Locator(injectedScript, selectorBase ? selectorBase + \" >> \" + selector2 : selector2, options2);\n    };\n    self.getByTestId = (testId) => self.locator(getByTestIdSelector(injectedScript.testIdAttributeNameForStrictErrorAndConsoleCodegen(), testId));\n    self.getByAltText = (text, options2) => self.locator(getByAltTextSelector(text, options2));\n    self.getByLabel = (text, options2) => self.locator(getByLabelSelector(text, options2));\n    self.getByPlaceholder = (text, options2) => self.locator(getByPlaceholderSelector(text, options2));\n    self.getByText = (text, options2) => self.locator(getByTextSelector(text, options2));\n    self.getByTitle = (text, options2) => self.locator(getByTitleSelector(text, options2));\n    self.getByRole = (role, options2 = {}) => self.locator(getByRoleSelector(role, options2));\n    self.filter = (options2) => new _Locator(injectedScript, selector, options2);\n    self.first = () => self.locator(\"nth=0\");\n    self.last = () => self.locator(\"nth=-1\");\n    self.nth = (index) => self.locator(`nth=${index}`);\n    self.and = (locator) => new _Locator(injectedScript, selectorBase + ` >> internal:and=` + JSON.stringify(locator[selectorSymbol]));\n    self.or = (locator) => new _Locator(injectedScript, selectorBase + ` >> internal:or=` + JSON.stringify(locator[selectorSymbol]));\n  }\n};\nselectorSymbol;\nvar Locator = _Locator;\nvar ConsoleAPI = class {\n  constructor(injectedScript) {\n    this._injectedScript = injectedScript;\n    if (this._injectedScript.window.playwright)\n      return;\n    this._injectedScript.window.playwright = {\n      $: (selector, strict) => this._querySelector(selector, !!strict),\n      $$: (selector) => this._querySelectorAll(selector),\n      inspect: (selector) => this._inspect(selector),\n      selector: (element) => this._selector(element),\n      generateLocator: (element, language) => this._generateLocator(element, language),\n      resume: () => this._resume(),\n      ...new Locator(injectedScript, \"\")\n    };\n    delete this._injectedScript.window.playwright.filter;\n    delete this._injectedScript.window.playwright.first;\n    delete this._injectedScript.window.playwright.last;\n    delete this._injectedScript.window.playwright.nth;\n    delete this._injectedScript.window.playwright.and;\n    delete this._injectedScript.window.playwright.or;\n  }\n  _querySelector(selector, strict) {\n    if (typeof selector !== \"string\")\n      throw new Error(`Usage: playwright.query('Playwright >> selector').`);\n    const parsed = this._injectedScript.parseSelector(selector);\n    return this._injectedScript.querySelector(parsed, this._injectedScript.document, strict);\n  }\n  _querySelectorAll(selector) {\n    if (typeof selector !== \"string\")\n      throw new Error(`Usage: playwright.$$('Playwright >> selector').`);\n    const parsed = this._injectedScript.parseSelector(selector);\n    return this._injectedScript.querySelectorAll(parsed, this._injectedScript.document);\n  }\n  _inspect(selector) {\n    if (typeof selector !== \"string\")\n      throw new Error(`Usage: playwright.inspect('Playwright >> selector').`);\n    this._injectedScript.window.inspect(this._querySelector(selector, false));\n  }\n  _selector(element) {\n    if (!(element instanceof Element))\n      throw new Error(`Usage: playwright.selector(element).`);\n    return this._injectedScript.generateSelectorSimple(element);\n  }\n  _generateLocator(element, language) {\n    if (!(element instanceof Element))\n      throw new Error(`Usage: playwright.locator(element).`);\n    const selector = this._injectedScript.generateSelectorSimple(element);\n    return asLocator(language || \"javascript\", selector);\n  }\n  _resume() {\n    this._injectedScript.window.__pw_resume().catch(() => {\n    });\n  }\n};\nvar consoleApi_default = ConsoleAPI;\n";
});

// node_modules/playwright-core/lib/server/chromium/appIcon.png
var exports_appIcon = {};
__export(exports_appIcon, {
  default: () => {
    {
      return appIcon_default;
    }
  }
});
var appIcon_default;
var init_appIcon = __esm(() => {
  appIcon_default = "./appIcon-feda845524d897ac.png";
});

// node_modules/playwright-core/lib/server/launchApp.js
var require_launchApp = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  async function launchApp(browserType, options) {
    var _options$persistentCo, _options$persistentCo2;
    const args = [...(_options$persistentCo = (_options$persistentCo2 = options.persistentContextOptions) === null || _options$persistentCo2 === undefined ? undefined : _options$persistentCo2.args) !== null && _options$persistentCo !== undefined ? _options$persistentCo : []];
    if (browserType.name() === "chromium") {
      args.push("--app=data:text/html,", `--window-size=${options.windowSize.width},${options.windowSize.height}`, ...options.windowPosition ? [`--window-position=${options.windowPosition.x},${options.windowPosition.y}`] : [], "--test-type=");
    }
    const context = await browserType.launchPersistentContext((0, _instrumentation.serverSideCallMetadata)(), "", {
      channel: (0, _registry.findChromiumChannel)(options.sdkLanguage),
      noDefaultViewport: true,
      ignoreDefaultArgs: ["--enable-automation"],
      colorScheme: "no-override",
      acceptDownloads: (0, _utils.isUnderTest)() ? "accept" : "internal-browser-default",
      ...options === null || options === undefined ? undefined : options.persistentContextOptions,
      args
    });
    const [page] = context.pages();
    if (browserType.name() === "chromium" && process.platform === "darwin") {
      context.on("page", async (newPage) => {
        if (newPage.mainFrame().url() === "chrome://new-tab-page/") {
          await page.bringToFront();
          await newPage.close((0, _instrumentation.serverSideCallMetadata)());
        }
      });
    }
    if (browserType.name() === "chromium")
      await installAppIcon(page);
    return {
      context,
      page
    };
  }
  async function installAppIcon(page) {
    const icon = await _fs.default.promises.readFile(import.meta.require.resolve("/Users/hottin/project/jwave_playlist/node_modules/playwright-core/lib/server/chromium/appIcon.png"));
    const crPage = page._delegate;
    await crPage._mainFrameSession._client.send("Browser.setDockTile", {
      image: icon.toString("base64")
    });
  }
  async function syncLocalStorageWithSettings(page, appName) {
    if ((0, _utils.isUnderTest)())
      return;
    const settingsFile = _path.default.join(_registry.registryDirectory, ".settings", `${appName}.json`);
    await page.exposeBinding("_saveSerializedSettings", false, (_, settings2) => {
      _fs.default.mkdirSync(_path.default.dirname(settingsFile), {
        recursive: true
      });
      _fs.default.writeFileSync(settingsFile, settings2);
    });
    const settings = await _fs.default.promises.readFile(settingsFile, "utf-8").catch(() => "{}");
    await page.addInitScript(`(${String((settings2) => {
      if (location && location.protocol === "data:")
        return;
      Object.entries(settings2).map(([k, v]) => localStorage[k] = v);
      window.saveSettings = () => {
        window._saveSerializedSettings(JSON.stringify({
          ...localStorage
        }));
      };
    })})(${settings});
  `);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.launchApp = launchApp;
  exports.syncLocalStorageWithSettings = syncLocalStorageWithSettings;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _registry = require_registry();
  var _utils = require_utils3();
  var _instrumentation = require_instrumentation();
});

// node_modules/playwright-core/lib/server/download.js
var require_download = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Download = undefined;
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _page = require_page();
  var _utils = require_utils3();
  var _artifact = require_artifact();

  class Download {
    constructor(page, downloadsPath, uuid, url, suggestedFilename) {
      this.artifact = undefined;
      this.url = undefined;
      this._page = undefined;
      this._suggestedFilename = undefined;
      const unaccessibleErrorMessage = page._browserContext._options.acceptDownloads === "deny" ? "Pass { acceptDownloads: true } when you are creating your browser context." : undefined;
      this.artifact = new _artifact.Artifact(page, _path.default.join(downloadsPath, uuid), unaccessibleErrorMessage, () => {
        return this._page._browserContext.cancelDownload(uuid);
      });
      this._page = page;
      this.url = url;
      this._suggestedFilename = suggestedFilename;
      page._browserContext._downloads.add(this);
      if (suggestedFilename !== undefined)
        this._page.emit(_page.Page.Events.Download, this);
    }
    _filenameSuggested(suggestedFilename) {
      (0, _utils.assert)(this._suggestedFilename === undefined);
      this._suggestedFilename = suggestedFilename;
      this._page.emit(_page.Page.Events.Download, this);
    }
    suggestedFilename() {
      return this._suggestedFilename;
    }
  }
  exports.Download = Download;
});

// node_modules/playwright-core/lib/server/browser.js
var require_browser5 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Browser = undefined;
  var _browserContext = require_browserContext();
  var _page = require_page();
  var _download = require_download();
  var _instrumentation = require_instrumentation();
  var _artifact = require_artifact();

  class Browser extends _instrumentation.SdkObject {
    constructor(parent, options) {
      super(parent, "browser");
      this.options = undefined;
      this._downloads = new Map;
      this._defaultContext = null;
      this._startedClosing = false;
      this._idToVideo = new Map;
      this._contextForReuse = undefined;
      this._closeReason = undefined;
      this._isCollocatedWithServer = true;
      this.attribution.browser = this;
      this.options = options;
      this.instrumentation.onBrowserOpen(this);
    }
    async newContext(metadata, options) {
      (0, _browserContext.validateBrowserContextOptions)(options, this.options);
      const context = await this.doCreateNewContext(options);
      if (options.storageState)
        await context.setStorageState(metadata, options.storageState);
      return context;
    }
    async newContextForReuse(params, metadata) {
      const hash = _browserContext.BrowserContext.reusableContextHash(params);
      if (!this._contextForReuse || hash !== this._contextForReuse.hash || !this._contextForReuse.context.canResetForReuse()) {
        if (this._contextForReuse)
          await this._contextForReuse.context.close({
            reason: "Context reused"
          });
        this._contextForReuse = {
          context: await this.newContext(metadata, params),
          hash
        };
        return {
          context: this._contextForReuse.context,
          needsReset: false
        };
      }
      await this._contextForReuse.context.stopPendingOperations("Context recreated");
      return {
        context: this._contextForReuse.context,
        needsReset: true
      };
    }
    async stopPendingOperations(reason) {
      var _this$_contextForReus;
      await ((_this$_contextForReus = this._contextForReuse) === null || _this$_contextForReus === undefined || (_this$_contextForReus = _this$_contextForReus.context) === null || _this$_contextForReus === undefined ? undefined : _this$_contextForReus.stopPendingOperations(reason));
    }
    _downloadCreated(page, uuid, url, suggestedFilename) {
      const download = new _download.Download(page, this.options.downloadsPath || "", uuid, url, suggestedFilename);
      this._downloads.set(uuid, download);
    }
    _downloadFilenameSuggested(uuid, suggestedFilename) {
      const download = this._downloads.get(uuid);
      if (!download)
        return;
      download._filenameSuggested(suggestedFilename);
    }
    _downloadFinished(uuid, error) {
      const download = this._downloads.get(uuid);
      if (!download)
        return;
      download.artifact.reportFinished(error ? new Error(error) : undefined);
      this._downloads.delete(uuid);
    }
    _videoStarted(context, videoId, path, pageOrError) {
      const artifact = new _artifact.Artifact(context, path);
      this._idToVideo.set(videoId, {
        context,
        artifact
      });
      pageOrError.then((page) => {
        if (page instanceof _page.Page) {
          page._video = artifact;
          page.emitOnContext(_browserContext.BrowserContext.Events.VideoStarted, artifact);
          page.emit(_page.Page.Events.Video, artifact);
        }
      });
    }
    _takeVideo(videoId) {
      const video = this._idToVideo.get(videoId);
      this._idToVideo.delete(videoId);
      return video === null || video === undefined ? undefined : video.artifact;
    }
    _didClose() {
      for (const context of this.contexts())
        context._browserClosed();
      if (this._defaultContext)
        this._defaultContext._browserClosed();
      this.emit(Browser.Events.Disconnected);
      this.instrumentation.onBrowserClose(this);
    }
    async close(options) {
      if (!this._startedClosing) {
        if (options.reason)
          this._closeReason = options.reason;
        this._startedClosing = true;
        await this.options.browserProcess.close();
      }
      if (this.isConnected())
        await new Promise((x) => this.once(Browser.Events.Disconnected, x));
    }
    async killForTests() {
      await this.options.browserProcess.kill();
    }
  }
  exports.Browser = Browser;
  Browser.Events = {
    Disconnected: "disconnected"
  };
});

// node_modules/playwright-core/lib/server/chromium/crConnection.js
var require_crConnection = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.kBrowserCloseMessageId = exports.ConnectionEvents = exports.CRSession = exports.CRConnection = exports.CDPSession = undefined;
  var _utils = require_utils3();
  var _events = import.meta.require("events");
  var _debugLogger = require_debugLogger();
  var _helper = require_helper();
  var _protocolError = require_protocolError();
  var ConnectionEvents = exports.ConnectionEvents = {
    Disconnected: Symbol("ConnectionEvents.Disconnected")
  };
  var kBrowserCloseMessageId = exports.kBrowserCloseMessageId = -9999;

  class CRConnection extends _events.EventEmitter {
    constructor(transport, protocolLogger, browserLogsCollector) {
      super();
      this._lastId = 0;
      this._transport = undefined;
      this._sessions = new Map;
      this._protocolLogger = undefined;
      this._browserLogsCollector = undefined;
      this._browserDisconnectedLogs = undefined;
      this.rootSession = undefined;
      this._closed = false;
      this.setMaxListeners(0);
      this._transport = transport;
      this._protocolLogger = protocolLogger;
      this._browserLogsCollector = browserLogsCollector;
      this.rootSession = new CRSession(this, null, "");
      this._sessions.set("", this.rootSession);
      this._transport.onmessage = this._onMessage.bind(this);
      this._transport.onclose = this._onClose.bind(this);
    }
    _rawSend(sessionId, method, params) {
      const id = ++this._lastId;
      const message = {
        id,
        method,
        params
      };
      if (sessionId)
        message.sessionId = sessionId;
      this._protocolLogger("send", message);
      this._transport.send(message);
      return id;
    }
    async _onMessage(message) {
      this._protocolLogger("receive", message);
      if (message.id === kBrowserCloseMessageId)
        return;
      const session = this._sessions.get(message.sessionId || "");
      if (session)
        session._onMessage(message);
    }
    _onClose() {
      this._closed = true;
      this._transport.onmessage = undefined;
      this._transport.onclose = undefined;
      this._browserDisconnectedLogs = _helper.helper.formatBrowserLogs(this._browserLogsCollector.recentLogs());
      this.rootSession.dispose();
      Promise.resolve().then(() => this.emit(ConnectionEvents.Disconnected));
    }
    close() {
      if (!this._closed)
        this._transport.close();
    }
    async createBrowserSession() {
      const {
        sessionId
      } = await this.rootSession.send("Target.attachToBrowserTarget");
      return new CDPSession(this.rootSession, sessionId);
    }
  }
  exports.CRConnection = CRConnection;

  class CRSession extends _events.EventEmitter {
    constructor(connection, parentSession, sessionId, eventListener) {
      super();
      this._connection = undefined;
      this._eventListener = undefined;
      this._callbacks = new Map;
      this._sessionId = undefined;
      this._parentSession = undefined;
      this._crashed = false;
      this._closed = false;
      this.on = undefined;
      this.addListener = undefined;
      this.off = undefined;
      this.removeListener = undefined;
      this.once = undefined;
      this.setMaxListeners(0);
      this._connection = connection;
      this._parentSession = parentSession;
      this._sessionId = sessionId;
      this._eventListener = eventListener;
      this.on = super.on;
      this.addListener = super.addListener;
      this.off = super.removeListener;
      this.removeListener = super.removeListener;
      this.once = super.once;
    }
    _markAsCrashed() {
      this._crashed = true;
    }
    createChildSession(sessionId, eventListener) {
      const session = new CRSession(this._connection, this, sessionId, eventListener);
      this._connection._sessions.set(sessionId, session);
      return session;
    }
    async send(method, params) {
      if (this._crashed || this._closed || this._connection._closed || this._connection._browserDisconnectedLogs)
        throw new _protocolError.ProtocolError(this._crashed ? "crashed" : "closed", undefined, this._connection._browserDisconnectedLogs);
      const id = this._connection._rawSend(this._sessionId, method, params);
      return new Promise((resolve, reject) => {
        this._callbacks.set(id, {
          resolve,
          reject,
          error: new _protocolError.ProtocolError("error", method)
        });
      });
    }
    _sendMayFail(method, params) {
      return this.send(method, params).catch((error) => _debugLogger.debugLogger.log("error", error));
    }
    _onMessage(object) {
      var _object$error;
      if (object.id && this._callbacks.has(object.id)) {
        const callback = this._callbacks.get(object.id);
        this._callbacks.delete(object.id);
        if (object.error) {
          callback.error.setMessage(object.error.message);
          callback.reject(callback.error);
        } else {
          callback.resolve(object.result);
        }
      } else if (object.id && ((_object$error = object.error) === null || _object$error === undefined ? undefined : _object$error.code) === -32001) {
      } else {
        var _object$error2;
        (0, _utils.assert)(!object.id, (object === null || object === undefined || (_object$error2 = object.error) === null || _object$error2 === undefined ? undefined : _object$error2.message) || undefined);
        Promise.resolve().then(() => {
          if (this._eventListener)
            this._eventListener(object.method, object.params);
          this.emit(object.method, object.params);
        });
      }
    }
    async detach() {
      if (this._closed)
        throw new Error(`Session already detached. Most likely the page has been closed.`);
      if (!this._parentSession)
        throw new Error("Root session cannot be closed");
      await this._sendMayFail("Runtime.runIfWaitingForDebugger");
      await this._parentSession.send("Target.detachFromTarget", {
        sessionId: this._sessionId
      });
      this.dispose();
    }
    dispose() {
      this._closed = true;
      this._connection._sessions.delete(this._sessionId);
      for (const callback of this._callbacks.values()) {
        callback.error.setMessage(`Internal server error, session closed.`);
        callback.error.type = this._crashed ? "crashed" : "closed";
        callback.error.logs = this._connection._browserDisconnectedLogs;
        callback.reject(callback.error);
      }
      this._callbacks.clear();
    }
  }
  exports.CRSession = CRSession;

  class CDPSession extends _events.EventEmitter {
    constructor(parentSession, sessionId) {
      super();
      this.guid = undefined;
      this._session = undefined;
      this._listeners = [];
      this.guid = `cdp-session@${sessionId}`;
      this._session = parentSession.createChildSession(sessionId, (method, params) => this.emit(CDPSession.Events.Event, {
        method,
        params
      }));
      this._listeners = [_utils.eventsHelper.addEventListener(parentSession, "Target.detachedFromTarget", (event) => {
        if (event.sessionId === sessionId)
          this._onClose();
      })];
    }
    async send(method, params) {
      return await this._session.send(method, params);
    }
    async detach() {
      return await this._session.detach();
    }
    async attachToTarget(targetId) {
      const {
        sessionId
      } = await this.send("Target.attachToTarget", {
        targetId,
        flatten: true
      });
      return new CDPSession(this._session, sessionId);
    }
    _onClose() {
      _utils.eventsHelper.removeEventListeners(this._listeners);
      this._session.dispose();
      this.emit(CDPSession.Events.Closed);
    }
  }
  exports.CDPSession = CDPSession;
  CDPSession.Events = {
    Event: "event",
    Closed: "close"
  };
});

// node_modules/playwright-core/lib/server/dialog.js
var require_dialog = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Dialog = undefined;
  var _utils = require_utils3();
  var _instrumentation = require_instrumentation();

  class Dialog extends _instrumentation.SdkObject {
    constructor(page, type, message, onHandle, defaultValue) {
      super(page, "dialog");
      this._page = undefined;
      this._type = undefined;
      this._message = undefined;
      this._onHandle = undefined;
      this._handled = false;
      this._defaultValue = undefined;
      this._page = page;
      this._type = type;
      this._message = message;
      this._onHandle = onHandle;
      this._defaultValue = defaultValue || "";
      this._page._frameManager.dialogDidOpen(this);
    }
    page() {
      return this._page;
    }
    type() {
      return this._type;
    }
    message() {
      return this._message;
    }
    defaultValue() {
      return this._defaultValue;
    }
    async accept(promptText) {
      (0, _utils.assert)(!this._handled, "Cannot accept dialog which is already handled!");
      this._handled = true;
      this._page._frameManager.dialogWillClose(this);
      await this._onHandle(true, promptText);
    }
    async dismiss() {
      (0, _utils.assert)(!this._handled, "Cannot dismiss dialog which is already handled!");
      this._handled = true;
      this._page._frameManager.dialogWillClose(this);
      await this._onHandle(false);
    }
    async close() {
      if (this._type === "beforeunload")
        await this.accept();
      else
        await this.dismiss();
    }
  }
  exports.Dialog = Dialog;
});

// node_modules/playwright-core/lib/server/chromium/crAccessibility.js
var require_crAccessibility = __commonJS((exports) => {
  async function getAccessibilityTree(client, needle) {
    const {
      nodes
    } = await client.send("Accessibility.getFullAXTree");
    const tree = CRAXNode.createTree(client, nodes);
    return {
      tree,
      needle: needle ? await tree._findElement(needle) : null
    };
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getAccessibilityTree = getAccessibilityTree;

  class CRAXNode {
    constructor(client, payload) {
      this._payload = undefined;
      this._children = [];
      this._richlyEditable = false;
      this._editable = false;
      this._focusable = false;
      this._expanded = false;
      this._hidden = false;
      this._name = undefined;
      this._role = undefined;
      this._cachedHasFocusableChild = undefined;
      this._client = undefined;
      this._client = client;
      this._payload = payload;
      this._name = this._payload.name ? this._payload.name.value : "";
      this._role = this._payload.role ? this._payload.role.value : "Unknown";
      for (const property of this._payload.properties || []) {
        if (property.name === "editable") {
          this._richlyEditable = property.value.value === "richtext";
          this._editable = true;
        }
        if (property.name === "focusable")
          this._focusable = property.value.value;
        if (property.name === "expanded")
          this._expanded = property.value.value;
        if (property.name === "hidden")
          this._hidden = property.value.value;
      }
    }
    _isPlainTextField() {
      if (this._richlyEditable)
        return false;
      if (this._editable)
        return true;
      return this._role === "textbox" || this._role === "ComboBox" || this._role === "searchbox";
    }
    _isTextOnlyObject() {
      const role = this._role;
      return role === "LineBreak" || role === "text" || role === "InlineTextBox" || role === "StaticText";
    }
    _hasFocusableChild() {
      if (this._cachedHasFocusableChild === undefined) {
        this._cachedHasFocusableChild = false;
        for (const child of this._children) {
          if (child._focusable || child._hasFocusableChild()) {
            this._cachedHasFocusableChild = true;
            break;
          }
        }
      }
      return this._cachedHasFocusableChild;
    }
    children() {
      return this._children;
    }
    async _findElement(element) {
      const objectId = element._objectId;
      const {
        node: {
          backendNodeId
        }
      } = await this._client.send("DOM.describeNode", {
        objectId
      });
      const needle = this.find((node) => node._payload.backendDOMNodeId === backendNodeId);
      return needle || null;
    }
    find(predicate) {
      if (predicate(this))
        return this;
      for (const child of this._children) {
        const result = child.find(predicate);
        if (result)
          return result;
      }
      return null;
    }
    isLeafNode() {
      if (!this._children.length)
        return true;
      if (this._isPlainTextField() || this._isTextOnlyObject())
        return true;
      switch (this._role) {
        case "doc-cover":
        case "graphics-symbol":
        case "img":
        case "Meter":
        case "scrollbar":
        case "slider":
        case "separator":
        case "progressbar":
          return true;
        default:
          break;
      }
      if (this._hasFocusableChild())
        return false;
      if (this._focusable && this._role !== "WebArea" && this._role !== "RootWebArea" && this._name)
        return true;
      if (this._role === "heading" && this._name)
        return true;
      return false;
    }
    isControl() {
      switch (this._role) {
        case "button":
        case "checkbox":
        case "ColorWell":
        case "combobox":
        case "DisclosureTriangle":
        case "listbox":
        case "menu":
        case "menubar":
        case "menuitem":
        case "menuitemcheckbox":
        case "menuitemradio":
        case "radio":
        case "scrollbar":
        case "searchbox":
        case "slider":
        case "spinbutton":
        case "switch":
        case "tab":
        case "textbox":
        case "tree":
          return true;
        default:
          return false;
      }
    }
    isInteresting(insideControl) {
      const role = this._role;
      if (role === "Ignored" || this._hidden)
        return false;
      if (this._focusable || this._richlyEditable)
        return true;
      if (this.isControl())
        return true;
      if (insideControl)
        return false;
      return this.isLeafNode() && !!this._name;
    }
    normalizedRole() {
      switch (this._role) {
        case "RootWebArea":
          return "WebArea";
        case "StaticText":
          return "text";
        default:
          return this._role;
      }
    }
    serialize() {
      const properties = new Map;
      for (const property of this._payload.properties || [])
        properties.set(property.name.toLowerCase(), property.value.value);
      if (this._payload.description)
        properties.set("description", this._payload.description.value);
      const node = {
        role: this.normalizedRole(),
        name: this._payload.name ? this._payload.name.value || "" : ""
      };
      const userStringProperties = ["description", "keyshortcuts", "roledescription", "valuetext"];
      for (const userStringProperty of userStringProperties) {
        if (!properties.has(userStringProperty))
          continue;
        node[userStringProperty] = properties.get(userStringProperty);
      }
      const booleanProperties = ["disabled", "expanded", "focused", "modal", "multiline", "multiselectable", "readonly", "required", "selected"];
      for (const booleanProperty of booleanProperties) {
        if (booleanProperty === "focused" && (this._role === "WebArea" || this._role === "RootWebArea"))
          continue;
        const value = properties.get(booleanProperty);
        if (!value)
          continue;
        node[booleanProperty] = value;
      }
      const numericalProperties = ["level", "valuemax", "valuemin"];
      for (const numericalProperty of numericalProperties) {
        if (!properties.has(numericalProperty))
          continue;
        node[numericalProperty] = properties.get(numericalProperty);
      }
      const tokenProperties = ["autocomplete", "haspopup", "invalid", "orientation"];
      for (const tokenProperty of tokenProperties) {
        const value = properties.get(tokenProperty);
        if (!value || value === "false")
          continue;
        node[tokenProperty] = value;
      }
      const axNode = node;
      if (this._payload.value) {
        if (typeof this._payload.value.value === "string")
          axNode.valueString = this._payload.value.value;
        if (typeof this._payload.value.value === "number")
          axNode.valueNumber = this._payload.value.value;
      }
      if (properties.has("checked"))
        axNode.checked = properties.get("checked") === "true" ? "checked" : properties.get("checked") === "false" ? "unchecked" : "mixed";
      if (properties.has("pressed"))
        axNode.pressed = properties.get("pressed") === "true" ? "pressed" : properties.get("pressed") === "false" ? "released" : "mixed";
      return axNode;
    }
    static createTree(client, payloads) {
      const nodeById = new Map;
      for (const payload of payloads)
        nodeById.set(payload.nodeId, new CRAXNode(client, payload));
      for (const node of nodeById.values()) {
        for (const childId of node._payload.childIds || [])
          node._children.push(nodeById.get(childId));
      }
      return nodeById.values().next().value;
    }
  }
});

// node_modules/playwright-core/lib/server/chromium/crCoverage.js
var require_crCoverage = __commonJS((exports) => {
  var convertToDisjointRanges = function(nestedRanges) {
    const points = [];
    for (const range of nestedRanges) {
      points.push({
        offset: range.startOffset,
        type: 0,
        range
      });
      points.push({
        offset: range.endOffset,
        type: 1,
        range
      });
    }
    points.sort((a, b) => {
      if (a.offset !== b.offset)
        return a.offset - b.offset;
      if (a.type !== b.type)
        return b.type - a.type;
      const aLength = a.range.endOffset - a.range.startOffset;
      const bLength = b.range.endOffset - b.range.startOffset;
      if (a.type === 0)
        return bLength - aLength;
      return aLength - bLength;
    });
    const hitCountStack = [];
    const results = [];
    let lastOffset = 0;
    for (const point of points) {
      if (hitCountStack.length && lastOffset < point.offset && hitCountStack[hitCountStack.length - 1] > 0) {
        const lastResult = results.length ? results[results.length - 1] : null;
        if (lastResult && lastResult.end === lastOffset)
          lastResult.end = point.offset;
        else
          results.push({
            start: lastOffset,
            end: point.offset
          });
      }
      lastOffset = point.offset;
      if (point.type === 0)
        hitCountStack.push(point.range.count);
      else
        hitCountStack.pop();
    }
    return results.filter((range) => range.end - range.start > 1);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CRCoverage = undefined;
  var _eventsHelper = require_eventsHelper();
  var _utils = require_utils3();

  class CRCoverage {
    constructor(client) {
      this._jsCoverage = undefined;
      this._cssCoverage = undefined;
      this._jsCoverage = new JSCoverage(client);
      this._cssCoverage = new CSSCoverage(client);
    }
    async startJSCoverage(options) {
      return await this._jsCoverage.start(options);
    }
    async stopJSCoverage() {
      return await this._jsCoverage.stop();
    }
    async startCSSCoverage(options) {
      return await this._cssCoverage.start(options);
    }
    async stopCSSCoverage() {
      return await this._cssCoverage.stop();
    }
  }
  exports.CRCoverage = CRCoverage;

  class JSCoverage {
    constructor(client) {
      this._client = undefined;
      this._enabled = undefined;
      this._scriptIds = undefined;
      this._scriptSources = undefined;
      this._eventListeners = undefined;
      this._resetOnNavigation = undefined;
      this._reportAnonymousScripts = false;
      this._client = client;
      this._enabled = false;
      this._scriptIds = new Set;
      this._scriptSources = new Map;
      this._eventListeners = [];
      this._resetOnNavigation = false;
    }
    async start(options) {
      (0, _utils.assert)(!this._enabled, "JSCoverage is already enabled");
      const {
        resetOnNavigation = true,
        reportAnonymousScripts = false
      } = options;
      this._resetOnNavigation = resetOnNavigation;
      this._reportAnonymousScripts = reportAnonymousScripts;
      this._enabled = true;
      this._scriptIds.clear();
      this._scriptSources.clear();
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(this._client, "Debugger.scriptParsed", this._onScriptParsed.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.executionContextsCleared", this._onExecutionContextsCleared.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._client, "Debugger.paused", this._onDebuggerPaused.bind(this))];
      await Promise.all([this._client.send("Profiler.enable"), this._client.send("Profiler.startPreciseCoverage", {
        callCount: true,
        detailed: true
      }), this._client.send("Debugger.enable"), this._client.send("Debugger.setSkipAllPauses", {
        skip: true
      })]);
    }
    _onDebuggerPaused() {
      this._client.send("Debugger.resume");
    }
    _onExecutionContextsCleared() {
      if (!this._resetOnNavigation)
        return;
      this._scriptIds.clear();
      this._scriptSources.clear();
    }
    async _onScriptParsed(event) {
      this._scriptIds.add(event.scriptId);
      if (!event.url && !this._reportAnonymousScripts)
        return;
      const response = await this._client._sendMayFail("Debugger.getScriptSource", {
        scriptId: event.scriptId
      });
      if (response)
        this._scriptSources.set(event.scriptId, response.scriptSource);
    }
    async stop() {
      (0, _utils.assert)(this._enabled, "JSCoverage is not enabled");
      this._enabled = false;
      const [profileResponse] = await Promise.all([this._client.send("Profiler.takePreciseCoverage"), this._client.send("Profiler.stopPreciseCoverage"), this._client.send("Profiler.disable"), this._client.send("Debugger.disable")]);
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      const coverage = {
        entries: []
      };
      for (const entry of profileResponse.result) {
        if (!this._scriptIds.has(entry.scriptId))
          continue;
        if (!entry.url && !this._reportAnonymousScripts)
          continue;
        const source = this._scriptSources.get(entry.scriptId);
        if (source)
          coverage.entries.push({
            ...entry,
            source
          });
        else
          coverage.entries.push(entry);
      }
      return coverage;
    }
  }

  class CSSCoverage {
    constructor(client) {
      this._client = undefined;
      this._enabled = undefined;
      this._stylesheetURLs = undefined;
      this._stylesheetSources = undefined;
      this._eventListeners = undefined;
      this._resetOnNavigation = undefined;
      this._client = client;
      this._enabled = false;
      this._stylesheetURLs = new Map;
      this._stylesheetSources = new Map;
      this._eventListeners = [];
      this._resetOnNavigation = false;
    }
    async start(options) {
      (0, _utils.assert)(!this._enabled, "CSSCoverage is already enabled");
      const {
        resetOnNavigation = true
      } = options;
      this._resetOnNavigation = resetOnNavigation;
      this._enabled = true;
      this._stylesheetURLs.clear();
      this._stylesheetSources.clear();
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(this._client, "CSS.styleSheetAdded", this._onStyleSheet.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.executionContextsCleared", this._onExecutionContextsCleared.bind(this))];
      await Promise.all([this._client.send("DOM.enable"), this._client.send("CSS.enable"), this._client.send("CSS.startRuleUsageTracking")]);
    }
    _onExecutionContextsCleared() {
      if (!this._resetOnNavigation)
        return;
      this._stylesheetURLs.clear();
      this._stylesheetSources.clear();
    }
    async _onStyleSheet(event) {
      const header = event.header;
      if (!header.sourceURL)
        return;
      const response = await this._client._sendMayFail("CSS.getStyleSheetText", {
        styleSheetId: header.styleSheetId
      });
      if (response) {
        this._stylesheetURLs.set(header.styleSheetId, header.sourceURL);
        this._stylesheetSources.set(header.styleSheetId, response.text);
      }
    }
    async stop() {
      (0, _utils.assert)(this._enabled, "CSSCoverage is not enabled");
      this._enabled = false;
      const ruleTrackingResponse = await this._client.send("CSS.stopRuleUsageTracking");
      await Promise.all([this._client.send("CSS.disable"), this._client.send("DOM.disable")]);
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      const styleSheetIdToCoverage = new Map;
      for (const entry of ruleTrackingResponse.ruleUsage) {
        let ranges = styleSheetIdToCoverage.get(entry.styleSheetId);
        if (!ranges) {
          ranges = [];
          styleSheetIdToCoverage.set(entry.styleSheetId, ranges);
        }
        ranges.push({
          startOffset: entry.startOffset,
          endOffset: entry.endOffset,
          count: entry.used ? 1 : 0
        });
      }
      const coverage = {
        entries: []
      };
      for (const styleSheetId of this._stylesheetURLs.keys()) {
        const url = this._stylesheetURLs.get(styleSheetId);
        const text = this._stylesheetSources.get(styleSheetId);
        const ranges = convertToDisjointRanges(styleSheetIdToCoverage.get(styleSheetId) || []);
        coverage.entries.push({
          url,
          ranges,
          text
        });
      }
      return coverage;
    }
  }
});

// node_modules/playwright-core/lib/server/chromium/crProtocolHelper.js
var require_crProtocolHelper = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var getExceptionMessage = function(exceptionDetails) {
    if (exceptionDetails.exception)
      return exceptionDetails.exception.description || String(exceptionDetails.exception.value);
    let message = exceptionDetails.text;
    if (exceptionDetails.stackTrace) {
      for (const callframe of exceptionDetails.stackTrace.callFrames) {
        const location2 = callframe.url + ":" + callframe.lineNumber + ":" + callframe.columnNumber;
        const functionName = callframe.functionName || "<anonymous>";
        message += `\n    at ${functionName} (${location2})`;
      }
    }
    return message;
  };
  async function releaseObject(client, objectId) {
    await client.send("Runtime.releaseObject", {
      objectId
    }).catch((error) => {
    });
  }
  async function saveProtocolStream(client, handle, path) {
    let eof = false;
    await (0, _fileUtils.mkdirIfNeeded)(path);
    const fd = await _fs.default.promises.open(path, "w");
    while (!eof) {
      const response = await client.send("IO.read", {
        handle
      });
      eof = response.eof;
      const buf = Buffer.from(response.data, response.base64Encoded ? "base64" : undefined);
      await fd.write(buf);
    }
    await fd.close();
    await client.send("IO.close", {
      handle
    });
  }
  async function readProtocolStream(client, handle) {
    let eof = false;
    const chunks = [];
    while (!eof) {
      const response = await client.send("IO.read", {
        handle
      });
      eof = response.eof;
      const buf = Buffer.from(response.data, response.base64Encoded ? "base64" : undefined);
      chunks.push(buf);
    }
    await client.send("IO.close", {
      handle
    });
    return Buffer.concat(chunks);
  }
  var toConsoleMessageLocation = function(stackTrace) {
    return stackTrace && stackTrace.callFrames.length ? {
      url: stackTrace.callFrames[0].url,
      lineNumber: stackTrace.callFrames[0].lineNumber,
      columnNumber: stackTrace.callFrames[0].columnNumber
    } : {
      url: "",
      lineNumber: 0,
      columnNumber: 0
    };
  };
  var exceptionToError = function(exceptionDetails) {
    const messageWithStack = getExceptionMessage(exceptionDetails);
    const lines = messageWithStack.split("\n");
    const firstStackTraceLine = lines.findIndex((line) => line.startsWith("    at"));
    let messageWithName = "";
    let stack = "";
    if (firstStackTraceLine === -1) {
      messageWithName = messageWithStack;
    } else {
      messageWithName = lines.slice(0, firstStackTraceLine).join("\n");
      stack = messageWithStack;
    }
    const {
      name,
      message
    } = (0, _stackTrace.splitErrorMessage)(messageWithName);
    const err = new Error(message);
    err.stack = stack;
    err.name = name;
    return err;
  };
  var toModifiersMask = function(modifiers) {
    let mask = 0;
    if (modifiers.has("Alt"))
      mask |= 1;
    if (modifiers.has("Control"))
      mask |= 2;
    if (modifiers.has("Meta"))
      mask |= 4;
    if (modifiers.has("Shift"))
      mask |= 8;
    return mask;
  };
  var toButtonsMask = function(buttons) {
    let mask = 0;
    if (buttons.has("left"))
      mask |= 1;
    if (buttons.has("right"))
      mask |= 2;
    if (buttons.has("middle"))
      mask |= 4;
    return mask;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.exceptionToError = exceptionToError;
  exports.getExceptionMessage = getExceptionMessage;
  exports.readProtocolStream = readProtocolStream;
  exports.releaseObject = releaseObject;
  exports.saveProtocolStream = saveProtocolStream;
  exports.toButtonsMask = toButtonsMask;
  exports.toConsoleMessageLocation = toConsoleMessageLocation;
  exports.toModifiersMask = toModifiersMask;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _fileUtils = require_fileUtils();
  var _stackTrace = require_stackTrace();
});

// node_modules/playwright-core/lib/server/chromium/crDragDrop.js
var require_crDragDrop = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DragManager = undefined;
  var _utils = require_utils3();
  var _crProtocolHelper = require_crProtocolHelper();

  class DragManager {
    constructor(page) {
      this._crPage = undefined;
      this._dragState = null;
      this._lastPosition = {
        x: 0,
        y: 0
      };
      this._crPage = page;
    }
    async cancelDrag() {
      if (!this._dragState)
        return false;
      await this._crPage._mainFrameSession._client.send("Input.dispatchDragEvent", {
        type: "dragCancel",
        x: this._lastPosition.x,
        y: this._lastPosition.y,
        data: {
          items: [],
          dragOperationsMask: 65535
        }
      });
      this._dragState = null;
      return true;
    }
    async interceptDragCausedByMove(x, y, button, buttons, modifiers, moveCallback) {
      this._lastPosition = {
        x,
        y
      };
      if (this._dragState) {
        await this._crPage._mainFrameSession._client.send("Input.dispatchDragEvent", {
          type: "dragOver",
          x,
          y,
          data: this._dragState,
          modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers)
        });
        return;
      }
      if (button !== "left")
        return moveCallback();
      const client = this._crPage._mainFrameSession._client;
      let onDragIntercepted;
      const dragInterceptedPromise = new Promise((x2) => onDragIntercepted = x2);
      await Promise.all(this._crPage._page.frames().map(async (frame) => {
        await frame.nonStallingEvaluateInExistingContext(function() {
          let didStartDrag = Promise.resolve(false);
          let dragEvent = null;
          const dragListener = (event) => dragEvent = event;
          const mouseListener = () => {
            didStartDrag = new Promise((callback) => {
              window.addEventListener("dragstart", dragListener, {
                once: true,
                capture: true
              });
              setTimeout(() => callback(dragEvent ? !dragEvent.defaultPrevented : false), 0);
            });
          };
          window.addEventListener("mousemove", mouseListener, {
            once: true,
            capture: true
          });
          window.__cleanupDrag = async () => {
            const val = await didStartDrag;
            window.removeEventListener("mousemove", mouseListener, {
              capture: true
            });
            window.removeEventListener("dragstart", dragListener, {
              capture: true
            });
            delete window.__cleanupDrag;
            return val;
          };
        }.toString(), true, "utility").catch(() => {
        });
      }));
      client.on("Input.dragIntercepted", onDragIntercepted);
      try {
        await client.send("Input.setInterceptDrags", {
          enabled: true
        });
      } catch {
        client.off("Input.dragIntercepted", onDragIntercepted);
        return moveCallback();
      }
      await moveCallback();
      const expectingDrag = (await Promise.all(this._crPage._page.frames().map(async (frame) => {
        return frame.nonStallingEvaluateInExistingContext("window.__cleanupDrag && window.__cleanupDrag()", false, "utility").catch(() => false);
      }))).some((x2) => x2);
      this._dragState = expectingDrag ? (await dragInterceptedPromise).data : null;
      client.off("Input.dragIntercepted", onDragIntercepted);
      await client.send("Input.setInterceptDrags", {
        enabled: false
      });
      if (this._dragState) {
        await this._crPage._mainFrameSession._client.send("Input.dispatchDragEvent", {
          type: "dragEnter",
          x,
          y,
          data: this._dragState,
          modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers)
        });
      }
    }
    isDragging() {
      return !!this._dragState;
    }
    async drop(x, y, modifiers) {
      (0, _utils.assert)(this._dragState, "missing drag state");
      await this._crPage._mainFrameSession._client.send("Input.dispatchDragEvent", {
        type: "drop",
        x,
        y,
        data: this._dragState,
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers)
      });
      this._dragState = null;
    }
  }
  exports.DragManager = DragManager;
});

// node_modules/playwright-core/lib/server/chromium/crExecutionContext.js
var require_crExecutionContext = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var rewriteError = function(error) {
    if (error.message.includes("Object reference chain is too long"))
      return {
        result: {
          type: "undefined"
        }
      };
    if (error.message.includes("Object couldn\'t be returned by value"))
      return {
        result: {
          type: "undefined"
        }
      };
    if (error instanceof TypeError && error.message.startsWith("Converting circular structure to JSON"))
      (0, _stackTrace.rewriteErrorMessage)(error, error.message + " Are you passing a nested JSHandle?");
    if (!js.isJavaScriptErrorInEvaluate(error) && !(0, _protocolError.isSessionClosedError)(error))
      throw new Error("Execution context was destroyed, most likely because of a navigation.");
    throw error;
  };
  var potentiallyUnserializableValue = function(remoteObject) {
    const value = remoteObject.value;
    const unserializableValue = remoteObject.unserializableValue;
    return unserializableValue ? js.parseUnserializableValue(unserializableValue) : value;
  };
  var renderPreview = function(object) {
    if (object.type === "undefined")
      return "undefined";
    if ("value" in object)
      return String(object.value);
    if (object.unserializableValue)
      return String(object.unserializableValue);
    if (object.description === "Object" && object.preview) {
      const tokens = [];
      for (const {
        name,
        value
      } of object.preview.properties)
        tokens.push(`${name}: ${value}`);
      return `{${tokens.join(", ")}}`;
    }
    if (object.subtype === "array" && object.preview)
      return js.sparseArrayToString(object.preview.properties);
    return object.description;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CRExecutionContext = undefined;
  var _crProtocolHelper = require_crProtocolHelper();
  var js = _interopRequireWildcard(require_javascript());
  var _stackTrace = require_stackTrace();
  var _utilityScriptSerializers = require_utilityScriptSerializers();
  var _protocolError = require_protocolError();

  class CRExecutionContext {
    constructor(client, contextPayload) {
      this._client = undefined;
      this._contextId = undefined;
      this._client = client;
      this._contextId = contextPayload.id;
    }
    async rawEvaluateJSON(expression) {
      const {
        exceptionDetails,
        result: remoteObject
      } = await this._client.send("Runtime.evaluate", {
        expression,
        contextId: this._contextId,
        returnByValue: true
      }).catch(rewriteError);
      if (exceptionDetails)
        throw new js.JavaScriptErrorInEvaluate((0, _crProtocolHelper.getExceptionMessage)(exceptionDetails));
      return remoteObject.value;
    }
    async rawEvaluateHandle(expression) {
      const {
        exceptionDetails,
        result: remoteObject
      } = await this._client.send("Runtime.evaluate", {
        expression,
        contextId: this._contextId
      }).catch(rewriteError);
      if (exceptionDetails)
        throw new js.JavaScriptErrorInEvaluate((0, _crProtocolHelper.getExceptionMessage)(exceptionDetails));
      return remoteObject.objectId;
    }
    rawCallFunctionNoReply(func, ...args) {
      this._client.send("Runtime.callFunctionOn", {
        functionDeclaration: func.toString(),
        arguments: args.map((a) => a instanceof js.JSHandle ? {
          objectId: a._objectId
        } : {
          value: a
        }),
        returnByValue: true,
        executionContextId: this._contextId,
        userGesture: true
      }).catch(() => {
      });
    }
    async evaluateWithArguments(expression, returnByValue, utilityScript, values, objectIds) {
      const {
        exceptionDetails,
        result: remoteObject
      } = await this._client.send("Runtime.callFunctionOn", {
        functionDeclaration: expression,
        objectId: utilityScript._objectId,
        arguments: [{
          objectId: utilityScript._objectId
        }, ...values.map((value) => ({
          value
        })), ...objectIds.map((objectId) => ({
          objectId
        }))],
        returnByValue,
        awaitPromise: true,
        userGesture: true
      }).catch(rewriteError);
      if (exceptionDetails)
        throw new js.JavaScriptErrorInEvaluate((0, _crProtocolHelper.getExceptionMessage)(exceptionDetails));
      return returnByValue ? (0, _utilityScriptSerializers.parseEvaluationResultValue)(remoteObject.value) : utilityScript._context.createHandle(remoteObject);
    }
    async getProperties(context, objectId) {
      const response = await this._client.send("Runtime.getProperties", {
        objectId,
        ownProperties: true
      });
      const result = new Map;
      for (const property of response.result) {
        if (!property.enumerable || !property.value)
          continue;
        result.set(property.name, context.createHandle(property.value));
      }
      return result;
    }
    createHandle(context, remoteObject) {
      return new js.JSHandle(context, remoteObject.subtype || remoteObject.type, renderPreview(remoteObject), remoteObject.objectId, potentiallyUnserializableValue(remoteObject));
    }
    async releaseHandle(objectId) {
      await (0, _crProtocolHelper.releaseObject)(this._client, objectId);
    }
    async objectCount(objectId) {
      const result = await this._client.send("Runtime.queryObjects", {
        prototypeObjectId: objectId
      });
      const match = result.objects.description.match(/Array\((\d+)\)/);
      return +match[1];
    }
  }
  exports.CRExecutionContext = CRExecutionContext;
});

// node_modules/playwright-core/lib/server/macEditingCommands.js
var require_macEditingCommands = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.macEditingCommands = undefined;
  var macEditingCommands = exports.macEditingCommands = {
    Backspace: "deleteBackward:",
    Enter: "insertNewline:",
    NumpadEnter: "insertNewline:",
    Escape: "cancelOperation:",
    ArrowUp: "moveUp:",
    ArrowDown: "moveDown:",
    ArrowLeft: "moveLeft:",
    ArrowRight: "moveRight:",
    F5: "complete:",
    Delete: "deleteForward:",
    Home: "scrollToBeginningOfDocument:",
    End: "scrollToEndOfDocument:",
    PageUp: "scrollPageUp:",
    PageDown: "scrollPageDown:",
    "Shift+Backspace": "deleteBackward:",
    "Shift+Enter": "insertNewline:",
    "Shift+NumpadEnter": "insertNewline:",
    "Shift+Escape": "cancelOperation:",
    "Shift+ArrowUp": "moveUpAndModifySelection:",
    "Shift+ArrowDown": "moveDownAndModifySelection:",
    "Shift+ArrowLeft": "moveLeftAndModifySelection:",
    "Shift+ArrowRight": "moveRightAndModifySelection:",
    "Shift+F5": "complete:",
    "Shift+Delete": "deleteForward:",
    "Shift+Home": "moveToBeginningOfDocumentAndModifySelection:",
    "Shift+End": "moveToEndOfDocumentAndModifySelection:",
    "Shift+PageUp": "pageUpAndModifySelection:",
    "Shift+PageDown": "pageDownAndModifySelection:",
    "Shift+Numpad5": "delete:",
    "Control+Tab": "selectNextKeyView:",
    "Control+Enter": "insertLineBreak:",
    "Control+NumpadEnter": "insertLineBreak:",
    "Control+Quote": "insertSingleQuoteIgnoringSubstitution:",
    "Control+KeyA": "moveToBeginningOfParagraph:",
    "Control+KeyB": "moveBackward:",
    "Control+KeyD": "deleteForward:",
    "Control+KeyE": "moveToEndOfParagraph:",
    "Control+KeyF": "moveForward:",
    "Control+KeyH": "deleteBackward:",
    "Control+KeyK": "deleteToEndOfParagraph:",
    "Control+KeyL": "centerSelectionInVisibleArea:",
    "Control+KeyN": "moveDown:",
    "Control+KeyO": ["insertNewlineIgnoringFieldEditor:", "moveBackward:"],
    "Control+KeyP": "moveUp:",
    "Control+KeyT": "transpose:",
    "Control+KeyV": "pageDown:",
    "Control+KeyY": "yank:",
    "Control+Backspace": "deleteBackwardByDecomposingPreviousCharacter:",
    "Control+ArrowUp": "scrollPageUp:",
    "Control+ArrowDown": "scrollPageDown:",
    "Control+ArrowLeft": "moveToLeftEndOfLine:",
    "Control+ArrowRight": "moveToRightEndOfLine:",
    "Shift+Control+Enter": "insertLineBreak:",
    "Shift+Control+NumpadEnter": "insertLineBreak:",
    "Shift+Control+Tab": "selectPreviousKeyView:",
    "Shift+Control+Quote": "insertDoubleQuoteIgnoringSubstitution:",
    "Shift+Control+KeyA": "moveToBeginningOfParagraphAndModifySelection:",
    "Shift+Control+KeyB": "moveBackwardAndModifySelection:",
    "Shift+Control+KeyE": "moveToEndOfParagraphAndModifySelection:",
    "Shift+Control+KeyF": "moveForwardAndModifySelection:",
    "Shift+Control+KeyN": "moveDownAndModifySelection:",
    "Shift+Control+KeyP": "moveUpAndModifySelection:",
    "Shift+Control+KeyV": "pageDownAndModifySelection:",
    "Shift+Control+Backspace": "deleteBackwardByDecomposingPreviousCharacter:",
    "Shift+Control+ArrowUp": "scrollPageUp:",
    "Shift+Control+ArrowDown": "scrollPageDown:",
    "Shift+Control+ArrowLeft": "moveToLeftEndOfLineAndModifySelection:",
    "Shift+Control+ArrowRight": "moveToRightEndOfLineAndModifySelection:",
    "Alt+Backspace": "deleteWordBackward:",
    "Alt+Enter": "insertNewlineIgnoringFieldEditor:",
    "Alt+NumpadEnter": "insertNewlineIgnoringFieldEditor:",
    "Alt+Escape": "complete:",
    "Alt+ArrowUp": ["moveBackward:", "moveToBeginningOfParagraph:"],
    "Alt+ArrowDown": ["moveForward:", "moveToEndOfParagraph:"],
    "Alt+ArrowLeft": "moveWordLeft:",
    "Alt+ArrowRight": "moveWordRight:",
    "Alt+Delete": "deleteWordForward:",
    "Alt+PageUp": "pageUp:",
    "Alt+PageDown": "pageDown:",
    "Shift+Alt+Backspace": "deleteWordBackward:",
    "Shift+Alt+Enter": "insertNewlineIgnoringFieldEditor:",
    "Shift+Alt+NumpadEnter": "insertNewlineIgnoringFieldEditor:",
    "Shift+Alt+Escape": "complete:",
    "Shift+Alt+ArrowUp": "moveParagraphBackwardAndModifySelection:",
    "Shift+Alt+ArrowDown": "moveParagraphForwardAndModifySelection:",
    "Shift+Alt+ArrowLeft": "moveWordLeftAndModifySelection:",
    "Shift+Alt+ArrowRight": "moveWordRightAndModifySelection:",
    "Shift+Alt+Delete": "deleteWordForward:",
    "Shift+Alt+PageUp": "pageUp:",
    "Shift+Alt+PageDown": "pageDown:",
    "Control+Alt+KeyB": "moveWordBackward:",
    "Control+Alt+KeyF": "moveWordForward:",
    "Control+Alt+Backspace": "deleteWordBackward:",
    "Shift+Control+Alt+KeyB": "moveWordBackwardAndModifySelection:",
    "Shift+Control+Alt+KeyF": "moveWordForwardAndModifySelection:",
    "Shift+Control+Alt+Backspace": "deleteWordBackward:",
    "Meta+NumpadSubtract": "cancel:",
    "Meta+Backspace": "deleteToBeginningOfLine:",
    "Meta+ArrowUp": "moveToBeginningOfDocument:",
    "Meta+ArrowDown": "moveToEndOfDocument:",
    "Meta+ArrowLeft": "moveToLeftEndOfLine:",
    "Meta+ArrowRight": "moveToRightEndOfLine:",
    "Shift+Meta+NumpadSubtract": "cancel:",
    "Shift+Meta+Backspace": "deleteToBeginningOfLine:",
    "Shift+Meta+ArrowUp": "moveToBeginningOfDocumentAndModifySelection:",
    "Shift+Meta+ArrowDown": "moveToEndOfDocumentAndModifySelection:",
    "Shift+Meta+ArrowLeft": "moveToLeftEndOfLineAndModifySelection:",
    "Shift+Meta+ArrowRight": "moveToRightEndOfLineAndModifySelection:",
    "Meta+KeyA": "selectAll:",
    "Meta+KeyC": "copy:",
    "Meta+KeyX": "cut:",
    "Meta+KeyV": "paste:",
    "Meta+KeyZ": "undo:",
    "Shift+Meta+KeyZ": "redo:"
  };
});

// node_modules/playwright-core/lib/server/chromium/crInput.js
var require_crInput = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.RawTouchscreenImpl = exports.RawMouseImpl = exports.RawKeyboardImpl = undefined;
  var input = _interopRequireWildcard(require_input());
  var _macEditingCommands = require_macEditingCommands();
  var _utils = require_utils3();
  var _crProtocolHelper = require_crProtocolHelper();

  class RawKeyboardImpl {
    constructor(_client, _isMac, _dragManger) {
      this._client = _client;
      this._isMac = _isMac;
      this._dragManger = _dragManger;
    }
    _commandsForCode(code, modifiers) {
      if (!this._isMac)
        return [];
      const parts = [];
      for (const modifier of ["Shift", "Control", "Alt", "Meta"]) {
        if (modifiers.has(modifier))
          parts.push(modifier);
      }
      parts.push(code);
      const shortcut = parts.join("+");
      let commands = _macEditingCommands.macEditingCommands[shortcut] || [];
      if ((0, _utils.isString)(commands))
        commands = [commands];
      commands = commands.filter((x) => !x.startsWith("insert"));
      return commands.map((c) => c.substring(0, c.length - 1));
    }
    async keydown(modifiers, code, keyCode, keyCodeWithoutLocation, key, location2, autoRepeat, text) {
      if (code === "Escape" && await this._dragManger.cancelDrag())
        return;
      const commands = this._commandsForCode(code, modifiers);
      await this._client.send("Input.dispatchKeyEvent", {
        type: text ? "keyDown" : "rawKeyDown",
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers),
        windowsVirtualKeyCode: keyCodeWithoutLocation,
        code,
        commands,
        key,
        text,
        unmodifiedText: text,
        autoRepeat,
        location: location2,
        isKeypad: location2 === input.keypadLocation
      });
    }
    async keyup(modifiers, code, keyCode, keyCodeWithoutLocation, key, location2) {
      await this._client.send("Input.dispatchKeyEvent", {
        type: "keyUp",
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers),
        key,
        windowsVirtualKeyCode: keyCodeWithoutLocation,
        code,
        location: location2
      });
    }
    async sendText(text) {
      await this._client.send("Input.insertText", {
        text
      });
    }
  }
  exports.RawKeyboardImpl = RawKeyboardImpl;

  class RawMouseImpl {
    constructor(page, client, dragManager) {
      this._client = undefined;
      this._page = undefined;
      this._dragManager = undefined;
      this._page = page;
      this._client = client;
      this._dragManager = dragManager;
    }
    async move(x, y, button, buttons, modifiers, forClick) {
      const actualMove = async () => {
        await this._client.send("Input.dispatchMouseEvent", {
          type: "mouseMoved",
          button,
          buttons: (0, _crProtocolHelper.toButtonsMask)(buttons),
          x,
          y,
          modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers)
        });
      };
      if (forClick) {
        return actualMove();
      }
      await this._dragManager.interceptDragCausedByMove(x, y, button, buttons, modifiers, actualMove);
    }
    async down(x, y, button, buttons, modifiers, clickCount) {
      if (this._dragManager.isDragging())
        return;
      await this._client.send("Input.dispatchMouseEvent", {
        type: "mousePressed",
        button,
        buttons: (0, _crProtocolHelper.toButtonsMask)(buttons),
        x,
        y,
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers),
        clickCount
      });
    }
    async up(x, y, button, buttons, modifiers, clickCount) {
      if (this._dragManager.isDragging()) {
        await this._dragManager.drop(x, y, modifiers);
        return;
      }
      await this._client.send("Input.dispatchMouseEvent", {
        type: "mouseReleased",
        button,
        buttons: (0, _crProtocolHelper.toButtonsMask)(buttons),
        x,
        y,
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers),
        clickCount
      });
    }
    async wheel(x, y, buttons, modifiers, deltaX, deltaY) {
      await this._client.send("Input.dispatchMouseEvent", {
        type: "mouseWheel",
        x,
        y,
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers),
        deltaX,
        deltaY
      });
    }
  }
  exports.RawMouseImpl = RawMouseImpl;

  class RawTouchscreenImpl {
    constructor(client) {
      this._client = undefined;
      this._client = client;
    }
    async tap(x, y, modifiers) {
      await Promise.all([this._client.send("Input.dispatchTouchEvent", {
        type: "touchStart",
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers),
        touchPoints: [{
          x,
          y
        }]
      }), this._client.send("Input.dispatchTouchEvent", {
        type: "touchEnd",
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers),
        touchPoints: []
      })]);
    }
  }
  exports.RawTouchscreenImpl = RawTouchscreenImpl;
});

// node_modules/playwright-core/lib/server/chromium/crNetworkManager.js
var require_crNetworkManager = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  async function catchDisallowedErrors(callback) {
    try {
      return await callback();
    } catch (e) {
      if ((0, _protocolError.isProtocolError)(e) && e.message.includes("Invalid http status code or phrase"))
        throw e;
    }
  }
  var splitSetCookieHeader = function(headers) {
    const index = headers.findIndex(({
      name
    }) => name.toLowerCase() === "set-cookie");
    if (index === -1)
      return headers;
    const header = headers[index];
    const values = header.value.split("\n");
    if (values.length === 1)
      return headers;
    const result = headers.slice();
    result.splice(index, 1, ...values.map((value) => ({
      name: header.name,
      value
    })));
    return result;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CRNetworkManager = undefined;
  var _helper = require_helper();
  var _eventsHelper = require_eventsHelper();
  var network = _interopRequireWildcard(require_network2());
  var _utils = require_utils3();
  var _protocolError = require_protocolError();

  class CRNetworkManager {
    constructor(session, page, serviceWorker, parentManager) {
      this._session = undefined;
      this._page = undefined;
      this._serviceWorker = undefined;
      this._parentManager = undefined;
      this._requestIdToRequest = new Map;
      this._requestIdToRequestWillBeSentEvent = new Map;
      this._credentials = null;
      this._attemptedAuthentications = new Set;
      this._userRequestInterceptionEnabled = false;
      this._protocolRequestInterceptionEnabled = false;
      this._requestIdToRequestPausedEvent = new Map;
      this._eventListeners = undefined;
      this._responseExtraInfoTracker = new ResponseExtraInfoTracker;
      this._session = session;
      this._page = page;
      this._serviceWorker = serviceWorker;
      this._parentManager = parentManager;
      this._eventListeners = this.instrumentNetworkEvents({
        session
      });
    }
    instrumentNetworkEvents(sessionInfo) {
      const listeners = [_eventsHelper.eventsHelper.addEventListener(sessionInfo.session, "Fetch.requestPaused", this._onRequestPaused.bind(this, sessionInfo)), _eventsHelper.eventsHelper.addEventListener(sessionInfo.session, "Fetch.authRequired", this._onAuthRequired.bind(this)), _eventsHelper.eventsHelper.addEventListener(sessionInfo.session, "Network.requestWillBeSent", this._onRequestWillBeSent.bind(this, sessionInfo)), _eventsHelper.eventsHelper.addEventListener(sessionInfo.session, "Network.requestWillBeSentExtraInfo", this._onRequestWillBeSentExtraInfo.bind(this)), _eventsHelper.eventsHelper.addEventListener(sessionInfo.session, "Network.requestServedFromCache", this._onRequestServedFromCache.bind(this)), _eventsHelper.eventsHelper.addEventListener(sessionInfo.session, "Network.responseReceived", this._onResponseReceived.bind(this, sessionInfo)), _eventsHelper.eventsHelper.addEventListener(sessionInfo.session, "Network.responseReceivedExtraInfo", this._onResponseReceivedExtraInfo.bind(this)), _eventsHelper.eventsHelper.addEventListener(sessionInfo.session, "Network.loadingFinished", this._onLoadingFinished.bind(this)), _eventsHelper.eventsHelper.addEventListener(sessionInfo.session, "Network.loadingFailed", this._onLoadingFailed.bind(this, sessionInfo))];
      if (this._page) {
        listeners.push(...[_eventsHelper.eventsHelper.addEventListener(sessionInfo.session, "Network.webSocketCreated", (e) => this._page._frameManager.onWebSocketCreated(e.requestId, e.url)), _eventsHelper.eventsHelper.addEventListener(sessionInfo.session, "Network.webSocketWillSendHandshakeRequest", (e) => this._page._frameManager.onWebSocketRequest(e.requestId)), _eventsHelper.eventsHelper.addEventListener(sessionInfo.session, "Network.webSocketHandshakeResponseReceived", (e) => this._page._frameManager.onWebSocketResponse(e.requestId, e.response.status, e.response.statusText)), _eventsHelper.eventsHelper.addEventListener(sessionInfo.session, "Network.webSocketFrameSent", (e) => e.response.payloadData && this._page._frameManager.onWebSocketFrameSent(e.requestId, e.response.opcode, e.response.payloadData)), _eventsHelper.eventsHelper.addEventListener(sessionInfo.session, "Network.webSocketFrameReceived", (e) => e.response.payloadData && this._page._frameManager.webSocketFrameReceived(e.requestId, e.response.opcode, e.response.payloadData)), _eventsHelper.eventsHelper.addEventListener(sessionInfo.session, "Network.webSocketClosed", (e) => this._page._frameManager.webSocketClosed(e.requestId)), _eventsHelper.eventsHelper.addEventListener(sessionInfo.session, "Network.webSocketFrameError", (e) => this._page._frameManager.webSocketError(e.requestId, e.errorMessage))]);
      }
      return listeners;
    }
    async initialize() {
      await this._session.send("Network.enable");
    }
    dispose() {
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
    }
    async authenticate(credentials) {
      this._credentials = credentials;
      await this._updateProtocolRequestInterception();
    }
    async setOffline(offline) {
      await this._session.send("Network.emulateNetworkConditions", {
        offline,
        latency: 0,
        downloadThroughput: -1,
        uploadThroughput: -1
      });
    }
    async setRequestInterception(value) {
      this._userRequestInterceptionEnabled = value;
      await this._updateProtocolRequestInterception();
    }
    async _updateProtocolRequestInterception() {
      const enabled = this._userRequestInterceptionEnabled || !!this._credentials;
      if (enabled === this._protocolRequestInterceptionEnabled)
        return;
      this._protocolRequestInterceptionEnabled = enabled;
      if (enabled) {
        await Promise.all([this._session.send("Network.setCacheDisabled", {
          cacheDisabled: true
        }), this._session.send("Fetch.enable", {
          handleAuthRequests: true,
          patterns: [{
            urlPattern: "*",
            requestStage: "Request"
          }]
        })]);
      } else {
        await Promise.all([this._session.send("Network.setCacheDisabled", {
          cacheDisabled: false
        }), this._session.send("Fetch.disable")]);
      }
    }
    async clearCache() {
      await this._session.send("Network.setCacheDisabled", {
        cacheDisabled: true
      });
      if (!this._protocolRequestInterceptionEnabled)
        await this._session.send("Network.setCacheDisabled", {
          cacheDisabled: false
        });
      await this._session.send("Network.clearBrowserCache");
    }
    _onRequestWillBeSent(sessionInfo, event) {
      if (this._protocolRequestInterceptionEnabled && !event.request.url.startsWith("data:")) {
        const requestId = event.requestId;
        const requestPausedEvent = this._requestIdToRequestPausedEvent.get(requestId);
        if (requestPausedEvent) {
          this._onRequest(sessionInfo, event, requestPausedEvent);
          this._requestIdToRequestPausedEvent.delete(requestId);
        } else {
          this._requestIdToRequestWillBeSentEvent.set(event.requestId, event);
        }
      } else {
        this._onRequest(sessionInfo, event, null);
      }
    }
    _onRequestServedFromCache(event) {
      this._responseExtraInfoTracker.requestServedFromCache(event);
    }
    _onRequestWillBeSentExtraInfo(event) {
      this._responseExtraInfoTracker.requestWillBeSentExtraInfo(event);
    }
    _onAuthRequired(event) {
      let response = "Default";
      const shouldProvideCredentials = this._shouldProvideCredentials(event.request.url);
      if (this._attemptedAuthentications.has(event.requestId)) {
        response = "CancelAuth";
      } else if (shouldProvideCredentials) {
        response = "ProvideCredentials";
        this._attemptedAuthentications.add(event.requestId);
      }
      const {
        username,
        password
      } = shouldProvideCredentials && this._credentials ? this._credentials : {
        username: undefined,
        password: undefined
      };
      this._session._sendMayFail("Fetch.continueWithAuth", {
        requestId: event.requestId,
        authChallengeResponse: {
          response,
          username,
          password
        }
      });
    }
    _shouldProvideCredentials(url) {
      if (!this._credentials)
        return false;
      return !this._credentials.origin || new URL(url).origin.toLowerCase() === this._credentials.origin.toLowerCase();
    }
    _onRequestPaused(sessionInfo, event) {
      if (!event.networkId) {
        this._session._sendMayFail("Fetch.continueRequest", {
          requestId: event.requestId
        });
        return;
      }
      if (event.request.url.startsWith("data:"))
        return;
      const requestId = event.networkId;
      const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(requestId);
      if (requestWillBeSentEvent) {
        this._onRequest(sessionInfo, requestWillBeSentEvent, event);
        this._requestIdToRequestWillBeSentEvent.delete(requestId);
      } else {
        var _existingRequest$_rou;
        const existingRequest = this._requestIdToRequest.get(requestId);
        const alreadyContinuedParams = existingRequest === null || existingRequest === undefined || (_existingRequest$_rou = existingRequest._route) === null || _existingRequest$_rou === undefined ? undefined : _existingRequest$_rou._alreadyContinuedParams;
        if (alreadyContinuedParams && !event.redirectedRequestId) {
          this._session._sendMayFail("Fetch.continueRequest", {
            ...alreadyContinuedParams,
            requestId: event.requestId
          });
          return;
        }
        this._requestIdToRequestPausedEvent.set(requestId, event);
      }
    }
    _onRequest(sessionInfo, requestWillBeSentEvent, requestPausedEvent) {
      var _this$_page, _this$_page2, _this$_page3;
      if (requestWillBeSentEvent.request.url.startsWith("data:"))
        return;
      let redirectedFrom = null;
      if (requestWillBeSentEvent.redirectResponse) {
        const request2 = this._requestIdToRequest.get(requestWillBeSentEvent.requestId);
        if (request2) {
          this._handleRequestRedirect(request2, requestWillBeSentEvent.redirectResponse, requestWillBeSentEvent.timestamp, requestWillBeSentEvent.redirectHasExtraInfo);
          redirectedFrom = request2;
        }
      }
      let frame = requestWillBeSentEvent.frameId ? (_this$_page = this._page) === null || _this$_page === undefined ? undefined : _this$_page._frameManager.frame(requestWillBeSentEvent.frameId) : sessionInfo.workerFrame;
      if (!frame && this._page && requestPausedEvent && requestPausedEvent.frameId)
        frame = this._page._frameManager.frame(requestPausedEvent.frameId);
      if (!frame && this._page && requestWillBeSentEvent.frameId === ((_this$_page2 = this._page) === null || _this$_page2 === undefined ? undefined : _this$_page2._delegate)._targetId) {
        frame = this._page._frameManager.frameAttached(requestWillBeSentEvent.frameId, null);
      }
      const isInterceptedOptionsPreflight = !!requestPausedEvent && requestPausedEvent.request.method === "OPTIONS" && requestWillBeSentEvent.initiator.type === "preflight";
      if (isInterceptedOptionsPreflight && (this._page || this._serviceWorker).needsRequestInterception()) {
        const requestHeaders = requestPausedEvent.request.headers;
        const responseHeaders = [{
          name: "Access-Control-Allow-Origin",
          value: requestHeaders["Origin"] || "*"
        }, {
          name: "Access-Control-Allow-Methods",
          value: requestHeaders["Access-Control-Request-Method"] || "GET, POST, OPTIONS, DELETE"
        }, {
          name: "Access-Control-Allow-Credentials",
          value: "true"
        }];
        if (requestHeaders["Access-Control-Request-Headers"])
          responseHeaders.push({
            name: "Access-Control-Allow-Headers",
            value: requestHeaders["Access-Control-Request-Headers"]
          });
        this._session._sendMayFail("Fetch.fulfillRequest", {
          requestId: requestPausedEvent.requestId,
          responseCode: 204,
          responsePhrase: network.STATUS_TEXTS["204"],
          responseHeaders,
          body: ""
        });
        return;
      }
      if (!frame && !this._serviceWorker) {
        if (requestPausedEvent)
          this._session._sendMayFail("Fetch.continueRequest", {
            requestId: requestPausedEvent.requestId
          });
        return;
      }
      let route = null;
      if (requestPausedEvent) {
        if (redirectedFrom || !this._userRequestInterceptionEnabled && this._protocolRequestInterceptionEnabled) {
          var _redirectedFrom;
          const headers = (_redirectedFrom = redirectedFrom) === null || _redirectedFrom === undefined || (_redirectedFrom = _redirectedFrom._originalRequestRoute) === null || _redirectedFrom === undefined || (_redirectedFrom = _redirectedFrom._alreadyContinuedParams) === null || _redirectedFrom === undefined ? undefined : _redirectedFrom.headers;
          this._session._sendMayFail("Fetch.continueRequest", {
            requestId: requestPausedEvent.requestId,
            headers
          });
        } else {
          route = new RouteImpl(this._session, requestPausedEvent.requestId);
        }
      }
      const isNavigationRequest = requestWillBeSentEvent.requestId === requestWillBeSentEvent.loaderId && requestWillBeSentEvent.type === "Document";
      const documentId = isNavigationRequest ? requestWillBeSentEvent.loaderId : undefined;
      const request = new InterceptableRequest({
        session: sessionInfo.session,
        context: (this._page || this._serviceWorker)._browserContext,
        frame: frame || null,
        serviceWorker: this._serviceWorker || null,
        documentId,
        route,
        requestWillBeSentEvent,
        requestPausedEvent,
        redirectedFrom
      });
      this._requestIdToRequest.set(requestWillBeSentEvent.requestId, request);
      if (requestPausedEvent) {
        request.request.setRawRequestHeaders((0, _utils.headersObjectToArray)(requestPausedEvent.request.headers, "\n"));
      }
      (((_this$_page3 = this._page) === null || _this$_page3 === undefined ? undefined : _this$_page3._frameManager) || this._serviceWorker).requestStarted(request.request, route || undefined);
    }
    _createResponse(request, responsePayload, hasExtraInfo) {
      var _responsePayload$secu, _responsePayload$secu2, _responsePayload$secu3, _responsePayload$secu4, _responsePayload$secu5;
      const getResponseBody = async () => {
        const contentLengthHeader = Object.entries(responsePayload.headers).find((header) => header[0].toLowerCase() === "content-length");
        const expectedLength = contentLengthHeader ? +contentLengthHeader[1] : undefined;
        const session = request.session;
        const response2 = await session.send("Network.getResponseBody", {
          requestId: request._requestId
        });
        if (response2.body || !expectedLength)
          return Buffer.from(response2.body, response2.base64Encoded ? "base64" : "utf8");
        const resource = await session.send("Network.loadNetworkResource", {
          url: request.request.url(),
          frameId: this._serviceWorker ? undefined : request.request.frame()._id,
          options: {
            disableCache: false,
            includeCredentials: true
          }
        });
        const chunks = [];
        while (resource.resource.stream) {
          const chunk = await session.send("IO.read", {
            handle: resource.resource.stream
          });
          chunks.push(Buffer.from(chunk.data, chunk.base64Encoded ? "base64" : "utf-8"));
          if (chunk.eof) {
            await session.send("IO.close", {
              handle: resource.resource.stream
            });
            break;
          }
        }
        return Buffer.concat(chunks);
      };
      const timingPayload = responsePayload.timing;
      let timing;
      if (timingPayload && !this._responseExtraInfoTracker.servedFromCache(request._requestId)) {
        timing = {
          startTime: (timingPayload.requestTime - request._timestamp + request._wallTime) * 1000,
          domainLookupStart: timingPayload.dnsStart,
          domainLookupEnd: timingPayload.dnsEnd,
          connectStart: timingPayload.connectStart,
          secureConnectionStart: timingPayload.sslStart,
          connectEnd: timingPayload.connectEnd,
          requestStart: timingPayload.sendStart,
          responseStart: timingPayload.receiveHeadersEnd
        };
      } else {
        timing = {
          startTime: request._wallTime * 1000,
          domainLookupStart: -1,
          domainLookupEnd: -1,
          connectStart: -1,
          secureConnectionStart: -1,
          connectEnd: -1,
          requestStart: -1,
          responseStart: -1
        };
      }
      const response = new network.Response(request.request, responsePayload.status, responsePayload.statusText, (0, _utils.headersObjectToArray)(responsePayload.headers), timing, getResponseBody, !!responsePayload.fromServiceWorker, responsePayload.protocol);
      if (responsePayload !== null && responsePayload !== undefined && responsePayload.remoteIPAddress && typeof (responsePayload === null || responsePayload === undefined ? undefined : responsePayload.remotePort) === "number") {
        response._serverAddrFinished({
          ipAddress: responsePayload.remoteIPAddress,
          port: responsePayload.remotePort
        });
      } else {
        response._serverAddrFinished();
      }
      response._securityDetailsFinished({
        protocol: responsePayload === null || responsePayload === undefined || (_responsePayload$secu = responsePayload.securityDetails) === null || _responsePayload$secu === undefined ? undefined : _responsePayload$secu.protocol,
        subjectName: responsePayload === null || responsePayload === undefined || (_responsePayload$secu2 = responsePayload.securityDetails) === null || _responsePayload$secu2 === undefined ? undefined : _responsePayload$secu2.subjectName,
        issuer: responsePayload === null || responsePayload === undefined || (_responsePayload$secu3 = responsePayload.securityDetails) === null || _responsePayload$secu3 === undefined ? undefined : _responsePayload$secu3.issuer,
        validFrom: responsePayload === null || responsePayload === undefined || (_responsePayload$secu4 = responsePayload.securityDetails) === null || _responsePayload$secu4 === undefined ? undefined : _responsePayload$secu4.validFrom,
        validTo: responsePayload === null || responsePayload === undefined || (_responsePayload$secu5 = responsePayload.securityDetails) === null || _responsePayload$secu5 === undefined ? undefined : _responsePayload$secu5.validTo
      });
      this._responseExtraInfoTracker.processResponse(request._requestId, response, hasExtraInfo);
      return response;
    }
    _deleteRequest(request) {
      this._requestIdToRequest.delete(request._requestId);
      if (request._interceptionId)
        this._attemptedAuthentications.delete(request._interceptionId);
    }
    _handleRequestRedirect(request, responsePayload, timestamp, hasExtraInfo) {
      var _this$_page4, _this$_page5;
      const response = this._createResponse(request, responsePayload, hasExtraInfo);
      response.setTransferSize(null);
      response.setEncodedBodySize(null);
      response._requestFinished((timestamp - request._timestamp) * 1000);
      this._deleteRequest(request);
      (((_this$_page4 = this._page) === null || _this$_page4 === undefined ? undefined : _this$_page4._frameManager) || this._serviceWorker).requestReceivedResponse(response);
      (((_this$_page5 = this._page) === null || _this$_page5 === undefined ? undefined : _this$_page5._frameManager) || this._serviceWorker).reportRequestFinished(request.request, response);
    }
    _onResponseReceivedExtraInfo(event) {
      this._responseExtraInfoTracker.responseReceivedExtraInfo(event);
    }
    _onResponseReceived(sessionInfo, event) {
      var _this$_page6;
      let request = this._requestIdToRequest.get(event.requestId);
      if (!request && event.response.fromServiceWorker) {
        const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
        if (requestWillBeSentEvent) {
          this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
          this._onRequest(sessionInfo, requestWillBeSentEvent, null);
          request = this._requestIdToRequest.get(event.requestId);
        }
      }
      if (!request)
        return;
      const response = this._createResponse(request, event.response, event.hasExtraInfo);
      (((_this$_page6 = this._page) === null || _this$_page6 === undefined ? undefined : _this$_page6._frameManager) || this._serviceWorker).requestReceivedResponse(response);
    }
    _onLoadingFinished(event) {
      var _this$_page7;
      this._responseExtraInfoTracker.loadingFinished(event);
      let request = this._requestIdToRequest.get(event.requestId);
      if (!request)
        request = this._maybeAdoptMainRequest(event.requestId);
      if (!request)
        return;
      const response = request.request._existingResponse();
      if (response) {
        response.setTransferSize(event.encodedDataLength);
        response.responseHeadersSize().then((size) => response.setEncodedBodySize(event.encodedDataLength - size));
        response._requestFinished(_helper.helper.secondsToRoundishMillis(event.timestamp - request._timestamp));
      }
      this._deleteRequest(request);
      (((_this$_page7 = this._page) === null || _this$_page7 === undefined ? undefined : _this$_page7._frameManager) || this._serviceWorker).reportRequestFinished(request.request, response);
    }
    _onLoadingFailed(sessionInfo, event) {
      var _this$_page8;
      this._responseExtraInfoTracker.loadingFailed(event);
      let request = this._requestIdToRequest.get(event.requestId);
      if (!request)
        request = this._maybeAdoptMainRequest(event.requestId);
      if (!request) {
        const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
        if (requestWillBeSentEvent) {
          this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
          this._onRequest(sessionInfo, requestWillBeSentEvent, null);
          request = this._requestIdToRequest.get(event.requestId);
        }
      }
      if (!request)
        return;
      const response = request.request._existingResponse();
      if (response) {
        response.setTransferSize(null);
        response.setEncodedBodySize(null);
        response._requestFinished(_helper.helper.secondsToRoundishMillis(event.timestamp - request._timestamp));
      }
      this._deleteRequest(request);
      request.request._setFailureText(event.errorText);
      (((_this$_page8 = this._page) === null || _this$_page8 === undefined ? undefined : _this$_page8._frameManager) || this._serviceWorker).requestFailed(request.request, !!event.canceled);
    }
    _maybeAdoptMainRequest(requestId) {
      if (!this._parentManager)
        return;
      const request = this._parentManager._requestIdToRequest.get(requestId);
      if (!request || request._documentId !== requestId)
        return;
      this._requestIdToRequest.set(requestId, request);
      request.session = this._session;
      this._parentManager._requestIdToRequest.delete(requestId);
      if (request._interceptionId && this._parentManager._attemptedAuthentications.has(request._interceptionId)) {
        this._parentManager._attemptedAuthentications.delete(request._interceptionId);
        this._attemptedAuthentications.add(request._interceptionId);
      }
      return request;
    }
  }
  exports.CRNetworkManager = CRNetworkManager;

  class InterceptableRequest {
    constructor(options) {
      this.request = undefined;
      this._requestId = undefined;
      this._interceptionId = undefined;
      this._documentId = undefined;
      this._timestamp = undefined;
      this._wallTime = undefined;
      this._route = undefined;
      this._originalRequestRoute = undefined;
      this.session = undefined;
      const {
        session,
        context,
        frame,
        documentId,
        route,
        requestWillBeSentEvent,
        requestPausedEvent,
        redirectedFrom,
        serviceWorker
      } = options;
      this.session = session;
      this._timestamp = requestWillBeSentEvent.timestamp;
      this._wallTime = requestWillBeSentEvent.wallTime;
      this._requestId = requestWillBeSentEvent.requestId;
      this._interceptionId = requestPausedEvent && requestPausedEvent.requestId;
      this._documentId = documentId;
      this._route = route;
      this._originalRequestRoute = route !== null && route !== undefined ? route : redirectedFrom === null || redirectedFrom === undefined ? undefined : redirectedFrom._originalRequestRoute;
      const {
        headers,
        method,
        url,
        postDataEntries = null
      } = requestPausedEvent ? requestPausedEvent.request : requestWillBeSentEvent.request;
      const type = (requestWillBeSentEvent.type || "").toLowerCase();
      let postDataBuffer = null;
      if (postDataEntries && postDataEntries.length && postDataEntries[0].bytes)
        postDataBuffer = Buffer.from(postDataEntries[0].bytes, "base64");
      this.request = new network.Request(context, frame, serviceWorker, (redirectedFrom === null || redirectedFrom === undefined ? undefined : redirectedFrom.request) || null, documentId, url, type, method, postDataBuffer, (0, _utils.headersObjectToArray)(headers));
    }
  }

  class RouteImpl {
    constructor(session, interceptionId) {
      this._session = undefined;
      this._interceptionId = undefined;
      this._alreadyContinuedParams = undefined;
      this._session = session;
      this._interceptionId = interceptionId;
    }
    async continue(request, overrides) {
      this._alreadyContinuedParams = {
        requestId: this._interceptionId,
        url: overrides.url,
        headers: overrides.headers,
        method: overrides.method,
        postData: overrides.postData ? overrides.postData.toString("base64") : undefined
      };
      await catchDisallowedErrors(async () => {
        await this._session.send("Fetch.continueRequest", this._alreadyContinuedParams);
      });
    }
    async fulfill(response) {
      const body = response.isBase64 ? response.body : Buffer.from(response.body).toString("base64");
      const responseHeaders = splitSetCookieHeader(response.headers);
      await catchDisallowedErrors(async () => {
        await this._session.send("Fetch.fulfillRequest", {
          requestId: this._interceptionId,
          responseCode: response.status,
          responsePhrase: network.STATUS_TEXTS[String(response.status)],
          responseHeaders,
          body
        });
      });
    }
    async abort(errorCode = "failed") {
      const errorReason = errorReasons[errorCode];
      (0, _utils.assert)(errorReason, "Unknown error code: " + errorCode);
      await catchDisallowedErrors(async () => {
        await this._session.send("Fetch.failRequest", {
          requestId: this._interceptionId,
          errorReason
        });
      });
    }
  }
  var errorReasons = {
    aborted: "Aborted",
    accessdenied: "AccessDenied",
    addressunreachable: "AddressUnreachable",
    blockedbyclient: "BlockedByClient",
    blockedbyresponse: "BlockedByResponse",
    connectionaborted: "ConnectionAborted",
    connectionclosed: "ConnectionClosed",
    connectionfailed: "ConnectionFailed",
    connectionrefused: "ConnectionRefused",
    connectionreset: "ConnectionReset",
    internetdisconnected: "InternetDisconnected",
    namenotresolved: "NameNotResolved",
    timedout: "TimedOut",
    failed: "Failed"
  };

  class ResponseExtraInfoTracker {
    constructor() {
      this._requests = new Map;
    }
    requestWillBeSentExtraInfo(event) {
      const info = this._getOrCreateEntry(event.requestId);
      info.requestWillBeSentExtraInfo.push(event);
      this._patchHeaders(info, info.requestWillBeSentExtraInfo.length - 1);
      this._checkFinished(info);
    }
    requestServedFromCache(event) {
      const info = this._getOrCreateEntry(event.requestId);
      info.servedFromCache = true;
    }
    servedFromCache(requestId) {
      const info = this._requests.get(requestId);
      return !!(info !== null && info !== undefined && info.servedFromCache);
    }
    responseReceivedExtraInfo(event) {
      const info = this._getOrCreateEntry(event.requestId);
      info.responseReceivedExtraInfo.push(event);
      this._patchHeaders(info, info.responseReceivedExtraInfo.length - 1);
      this._checkFinished(info);
    }
    processResponse(requestId, response, hasExtraInfo) {
      var _info;
      let info = this._requests.get(requestId);
      if (!hasExtraInfo || (_info = info) !== null && _info !== undefined && _info.servedFromCache) {
        response.request().setRawRequestHeaders(null);
        response.setResponseHeadersSize(null);
        response.setRawResponseHeaders(null);
        return;
      }
      info = this._getOrCreateEntry(requestId);
      info.responses.push(response);
      this._patchHeaders(info, info.responses.length - 1);
    }
    loadingFinished(event) {
      const info = this._requests.get(event.requestId);
      if (!info)
        return;
      info.loadingFinished = event;
      this._checkFinished(info);
    }
    loadingFailed(event) {
      const info = this._requests.get(event.requestId);
      if (!info)
        return;
      info.loadingFailed = event;
      this._checkFinished(info);
    }
    _getOrCreateEntry(requestId) {
      let info = this._requests.get(requestId);
      if (!info) {
        info = {
          requestId,
          requestWillBeSentExtraInfo: [],
          responseReceivedExtraInfo: [],
          responses: []
        };
        this._requests.set(requestId, info);
      }
      return info;
    }
    _patchHeaders(info, index) {
      const response = info.responses[index];
      const requestExtraInfo = info.requestWillBeSentExtraInfo[index];
      if (response && requestExtraInfo) {
        response.request().setRawRequestHeaders((0, _utils.headersObjectToArray)(requestExtraInfo.headers, "\n"));
        info.requestWillBeSentExtraInfo[index] = undefined;
      }
      const responseExtraInfo = info.responseReceivedExtraInfo[index];
      if (response && responseExtraInfo) {
        var _responseExtraInfo$he;
        response.setResponseHeadersSize(((_responseExtraInfo$he = responseExtraInfo.headersText) === null || _responseExtraInfo$he === undefined ? undefined : _responseExtraInfo$he.length) || 0);
        response.setRawResponseHeaders((0, _utils.headersObjectToArray)(responseExtraInfo.headers, "\n"));
        info.responseReceivedExtraInfo[index] = undefined;
      }
    }
    _checkFinished(info) {
      if (!info.loadingFinished && !info.loadingFailed)
        return;
      if (info.responses.length <= info.responseReceivedExtraInfo.length) {
        this._stopTracking(info.requestId);
        return;
      }
    }
    _stopTracking(requestId) {
      this._requests.delete(requestId);
    }
  }
});

// node_modules/playwright-core/lib/server/chromium/crPdf.js
var require_crPdf = __commonJS((exports) => {
  var convertPrintParameterToInches = function(text) {
    if (text === undefined)
      return;
    let unit = text.substring(text.length - 2).toLowerCase();
    let valueText = "";
    if (unitToPixels.hasOwnProperty(unit)) {
      valueText = text.substring(0, text.length - 2);
    } else {
      unit = "px";
      valueText = text;
    }
    const value = Number(valueText);
    (0, _utils.assert)(!isNaN(value), "Failed to parse parameter value: " + text);
    const pixels = value * unitToPixels[unit];
    return pixels / 96;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CRPDF = undefined;
  var _utils = require_utils3();
  var _crProtocolHelper = require_crProtocolHelper();
  var PagePaperFormats = {
    letter: {
      width: 8.5,
      height: 11
    },
    legal: {
      width: 8.5,
      height: 14
    },
    tabloid: {
      width: 11,
      height: 17
    },
    ledger: {
      width: 17,
      height: 11
    },
    a0: {
      width: 33.1,
      height: 46.8
    },
    a1: {
      width: 23.4,
      height: 33.1
    },
    a2: {
      width: 16.54,
      height: 23.4
    },
    a3: {
      width: 11.7,
      height: 16.54
    },
    a4: {
      width: 8.27,
      height: 11.7
    },
    a5: {
      width: 5.83,
      height: 8.27
    },
    a6: {
      width: 4.13,
      height: 5.83
    }
  };
  var unitToPixels = {
    px: 1,
    in: 96,
    cm: 37.8,
    mm: 3.78
  };

  class CRPDF {
    constructor(client) {
      this._client = undefined;
      this._client = client;
    }
    async generate(options) {
      const {
        scale = 1,
        displayHeaderFooter = false,
        headerTemplate = "",
        footerTemplate = "",
        printBackground = false,
        landscape = false,
        pageRanges = "",
        preferCSSPageSize = false,
        margin = {},
        tagged = false,
        outline = false
      } = options;
      let paperWidth = 8.5;
      let paperHeight = 11;
      if (options.format) {
        const format = PagePaperFormats[options.format.toLowerCase()];
        (0, _utils.assert)(format, "Unknown paper format: " + options.format);
        paperWidth = format.width;
        paperHeight = format.height;
      } else {
        paperWidth = convertPrintParameterToInches(options.width) || paperWidth;
        paperHeight = convertPrintParameterToInches(options.height) || paperHeight;
      }
      const marginTop = convertPrintParameterToInches(margin.top) || 0;
      const marginLeft = convertPrintParameterToInches(margin.left) || 0;
      const marginBottom = convertPrintParameterToInches(margin.bottom) || 0;
      const marginRight = convertPrintParameterToInches(margin.right) || 0;
      const generateDocumentOutline = outline;
      const generateTaggedPDF = tagged;
      const result = await this._client.send("Page.printToPDF", {
        transferMode: "ReturnAsStream",
        landscape,
        displayHeaderFooter,
        headerTemplate,
        footerTemplate,
        printBackground,
        scale,
        paperWidth,
        paperHeight,
        marginTop,
        marginBottom,
        marginLeft,
        marginRight,
        pageRanges,
        preferCSSPageSize,
        generateTaggedPDF,
        generateDocumentOutline
      });
      return await (0, _crProtocolHelper.readProtocolStream)(this._client, result.stream);
    }
  }
  exports.CRPDF = CRPDF;
});

// node_modules/playwright-core/lib/server/chromium/defaultFontFamilies.js
var require_defaultFontFamilies = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.platformToFontFamilies = undefined;
  var platformToFontFamilies = exports.platformToFontFamilies = {
    linux: {
      fontFamilies: {
        standard: "Times New Roman",
        fixed: "Monospace",
        serif: "Times New Roman",
        sansSerif: "Arial",
        cursive: "Comic Sans MS",
        fantasy: "Impact"
      }
    },
    mac: {
      fontFamilies: {
        standard: "Times",
        fixed: "Courier",
        serif: "Times",
        sansSerif: "Helvetica",
        cursive: "Apple Chancery",
        fantasy: "Papyrus"
      },
      forScripts: [{
        script: "jpan",
        fontFamilies: {
          standard: "Hiragino Kaku Gothic ProN",
          fixed: "Osaka-Mono",
          serif: "Hiragino Mincho ProN",
          sansSerif: "Hiragino Kaku Gothic ProN"
        }
      }, {
        script: "hang",
        fontFamilies: {
          standard: "Apple SD Gothic Neo",
          serif: "AppleMyungjo",
          sansSerif: "Apple SD Gothic Neo"
        }
      }, {
        script: "hans",
        fontFamilies: {
          standard: ",PingFang SC,STHeiti",
          serif: "Songti SC",
          sansSerif: ",PingFang SC,STHeiti",
          cursive: "Kaiti SC"
        }
      }, {
        script: "hant",
        fontFamilies: {
          standard: ",PingFang TC,Heiti TC",
          serif: "Songti TC",
          sansSerif: ",PingFang TC,Heiti TC",
          cursive: "Kaiti TC"
        }
      }]
    },
    win: {
      fontFamilies: {
        standard: "Times New Roman",
        fixed: "Consolas",
        serif: "Times New Roman",
        sansSerif: "Arial",
        cursive: "Comic Sans MS",
        fantasy: "Impact"
      },
      forScripts: [{
        script: "cyrl",
        fontFamilies: {
          standard: "Times New Roman",
          fixed: "Courier New",
          serif: "Times New Roman",
          sansSerif: "Arial"
        }
      }, {
        script: "arab",
        fontFamilies: {
          fixed: "Courier New",
          sansSerif: "Segoe UI"
        }
      }, {
        script: "grek",
        fontFamilies: {
          standard: "Times New Roman",
          fixed: "Courier New",
          serif: "Times New Roman",
          sansSerif: "Arial"
        }
      }, {
        script: "jpan",
        fontFamilies: {
          standard: ",Meiryo,Yu Gothic",
          fixed: "MS Gothic",
          serif: ",Yu Mincho,MS PMincho",
          sansSerif: ",Meiryo,Yu Gothic"
        }
      }, {
        script: "hang",
        fontFamilies: {
          standard: "Malgun Gothic",
          fixed: "Gulimche",
          serif: "Batang",
          sansSerif: "Malgun Gothic",
          cursive: "Gungsuh"
        }
      }, {
        script: "hans",
        fontFamilies: {
          standard: "Microsoft YaHei",
          fixed: "NSimsun",
          serif: "Simsun",
          sansSerif: "Microsoft YaHei",
          cursive: "KaiTi"
        }
      }, {
        script: "hant",
        fontFamilies: {
          standard: "Microsoft JhengHei",
          fixed: "MingLiU",
          serif: "PMingLiU",
          sansSerif: "Microsoft JhengHei",
          cursive: "DFKai-SB"
        }
      }]
    }
  };
});

// node_modules/playwright-core/lib/server/chromium/videoRecorder.js
var require_videoRecorder = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.VideoRecorder = undefined;
  var _utils = require_utils3();
  var _page = require_page();
  var _processLauncher = require_processLauncher();
  var _progress = require_progress();
  var _instrumentation = require_instrumentation();
  var fps = 25;

  class VideoRecorder {
    static async launch(page, ffmpegPath, options) {
      if (!options.outputFile.endsWith(".webm"))
        throw new Error("File must have .webm extension");
      const controller = new _progress.ProgressController((0, _instrumentation.serverSideCallMetadata)(), page);
      controller.setLogName("browser");
      return await controller.run(async (progress2) => {
        const recorder = new VideoRecorder(page, ffmpegPath, progress2);
        await recorder._launch(options);
        return recorder;
      });
    }
    constructor(page, ffmpegPath, progress2) {
      this._process = null;
      this._gracefullyClose = null;
      this._lastWritePromise = Promise.resolve();
      this._lastFrameTimestamp = 0;
      this._lastFrameBuffer = null;
      this._lastWriteTimestamp = 0;
      this._progress = undefined;
      this._frameQueue = [];
      this._isStopped = false;
      this._ffmpegPath = undefined;
      this._progress = progress2;
      this._ffmpegPath = ffmpegPath;
      page.on(_page.Page.Events.ScreencastFrame, (frame) => this.writeFrame(frame.buffer, frame.timestamp));
    }
    async _launch(options) {
      const w = options.width;
      const h = options.height;
      const args = `-loglevel error -f image2pipe -avioflags direct -fpsprobesize 0 -probesize 32 -analyzeduration 0 -c:v mjpeg -i - -y -an -r ${fps} -c:v vp8 -qmin 0 -qmax 50 -crf 8 -deadline realtime -speed 8 -b:v 1M -threads 1 -vf pad=${w}:${h}:0:0:gray,crop=${w}:${h}:0:0`.split(" ");
      args.push(options.outputFile);
      const progress2 = this._progress;
      const {
        launchedProcess,
        gracefullyClose
      } = await (0, _processLauncher.launchProcess)({
        command: this._ffmpegPath,
        args,
        stdio: "stdin",
        log: (message) => progress2.log(message),
        tempDirectories: [],
        attemptToGracefullyClose: async () => {
          progress2.log("Closing stdin...");
          launchedProcess.stdin.end();
        },
        onExit: (exitCode, signal) => {
          progress2.log(`ffmpeg onkill exitCode=${exitCode} signal=${signal}`);
        }
      });
      launchedProcess.stdin.on("finish", () => {
        progress2.log("ffmpeg finished input.");
      });
      launchedProcess.stdin.on("error", () => {
        progress2.log("ffmpeg error.");
      });
      this._process = launchedProcess;
      this._gracefullyClose = gracefullyClose;
    }
    writeFrame(frame, timestamp) {
      (0, _utils.assert)(this._process);
      if (this._isStopped)
        return;
      if (this._lastFrameBuffer) {
        const durationSec = timestamp - this._lastFrameTimestamp;
        const repeatCount = Math.max(1, Math.round(fps * durationSec));
        for (let i = 0;i < repeatCount; ++i)
          this._frameQueue.push(this._lastFrameBuffer);
        this._lastWritePromise = this._lastWritePromise.then(() => this._sendFrames());
      }
      this._lastFrameBuffer = frame;
      this._lastFrameTimestamp = timestamp;
      this._lastWriteTimestamp = (0, _utils.monotonicTime)();
    }
    async _sendFrames() {
      while (this._frameQueue.length)
        await this._sendFrame(this._frameQueue.shift());
    }
    async _sendFrame(frame) {
      return new Promise((f) => this._process.stdin.write(frame, f)).then((error) => {
        if (error)
          this._progress.log(`ffmpeg failed to write: ${String(error)}`);
      });
    }
    async stop() {
      if (this._isStopped)
        return;
      this.writeFrame(Buffer.from([]), this._lastFrameTimestamp + ((0, _utils.monotonicTime)() - this._lastWriteTimestamp) / 1000);
      this._isStopped = true;
      await this._lastWritePromise;
      await this._gracefullyClose();
    }
  }
  exports.VideoRecorder = VideoRecorder;
});

// node_modules/playwright-core/lib/server/chromium/crPage.js
var require_crPage = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  async function emulateLocale(session, locale) {
    try {
      await session.send("Emulation.setLocaleOverride", {
        locale
      });
    } catch (exception) {
      if (exception.message.includes("Another locale override is already in effect"))
        return;
      throw exception;
    }
  }
  async function emulateTimezone(session, timezoneId) {
    try {
      await session.send("Emulation.setTimezoneOverride", {
        timezoneId
      });
    } catch (exception) {
      if (exception.message.includes("Timezone override is already in effect"))
        return;
      if (exception.message.includes("Invalid timezone"))
        throw new Error(`Invalid timezone ID: ${timezoneId}`);
      throw exception;
    }
  }
  var calculateUserAgentMetadata = function(options) {
    const ua = options.userAgent;
    if (!ua)
      return;
    const metadata = {
      mobile: !!options.isMobile,
      model: "",
      architecture: "x64",
      platform: "Windows",
      platformVersion: ""
    };
    const androidMatch = ua.match(/Android (\d+(\.\d+)?(\.\d+)?)/);
    const iPhoneMatch = ua.match(/iPhone OS (\d+(_\d+)?)/);
    const iPadMatch = ua.match(/iPad; CPU OS (\d+(_\d+)?)/);
    const macOSMatch = ua.match(/Mac OS X (\d+(_\d+)?(_\d+)?)/);
    const windowsMatch = ua.match(/Windows\D+(\d+(\.\d+)?(\.\d+)?)/);
    if (androidMatch) {
      metadata.platform = "Android";
      metadata.platformVersion = androidMatch[1];
      metadata.architecture = "arm";
    } else if (iPhoneMatch) {
      metadata.platform = "iOS";
      metadata.platformVersion = iPhoneMatch[1];
      metadata.architecture = "arm";
    } else if (iPadMatch) {
      metadata.platform = "iOS";
      metadata.platformVersion = iPadMatch[1];
      metadata.architecture = "arm";
    } else if (macOSMatch) {
      metadata.platform = "macOS";
      metadata.platformVersion = macOSMatch[1];
      if (!ua.includes("Intel"))
        metadata.architecture = "arm";
    } else if (windowsMatch) {
      metadata.platform = "Windows";
      metadata.platformVersion = windowsMatch[1];
    } else if (ua.toLowerCase().includes("linux")) {
      metadata.platform = "Linux";
    }
    if (ua.includes("ARM"))
      metadata.architecture = "arm";
    return metadata;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CRPage = undefined;
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _eventsHelper = require_eventsHelper();
  var _registry = require_registry();
  var _stackTrace = require_stackTrace();
  var _utils = require_utils3();
  var dialog = _interopRequireWildcard(require_dialog());
  var dom = _interopRequireWildcard(require_dom());
  var frames = _interopRequireWildcard(require_frames());
  var _helper = require_helper();
  var network = _interopRequireWildcard(require_network2());
  var _page = require_page();
  var _crAccessibility = require_crAccessibility();
  var _crBrowser = require_crBrowser();
  var _crCoverage = require_crCoverage();
  var _crDragDrop = require_crDragDrop();
  var _crExecutionContext = require_crExecutionContext();
  var _crInput = require_crInput();
  var _crNetworkManager = require_crNetworkManager();
  var _crPdf = require_crPdf();
  var _crProtocolHelper = require_crProtocolHelper();
  var _defaultFontFamilies = require_defaultFontFamilies();
  var _videoRecorder = require_videoRecorder();
  var _browserContext = require_browserContext();
  var _errors = require_errors();
  var _protocolError = require_protocolError();
  var UTILITY_WORLD_NAME = "__playwright_utility_world__";

  class CRPage {
    static mainFrameSession(page) {
      const crPage = page._delegate;
      return crPage._mainFrameSession;
    }
    constructor(client, targetId, browserContext, opener, bits) {
      this._mainFrameSession = undefined;
      this._sessions = new Map;
      this._page = undefined;
      this.rawMouse = undefined;
      this.rawKeyboard = undefined;
      this.rawTouchscreen = undefined;
      this._targetId = undefined;
      this._opener = undefined;
      this._pdf = undefined;
      this._coverage = undefined;
      this._browserContext = undefined;
      this._pagePromise = undefined;
      this._initializedPage = null;
      this._isBackgroundPage = undefined;
      this._nextWindowOpenPopupFeatures = [];
      this._targetId = targetId;
      this._opener = opener;
      this._isBackgroundPage = bits.isBackgroundPage;
      const dragManager = new _crDragDrop.DragManager(this);
      this.rawKeyboard = new _crInput.RawKeyboardImpl(client, browserContext._browser._platform() === "mac", dragManager);
      this.rawMouse = new _crInput.RawMouseImpl(this, client, dragManager);
      this.rawTouchscreen = new _crInput.RawTouchscreenImpl(client);
      this._pdf = new _crPdf.CRPDF(client);
      this._coverage = new _crCoverage.CRCoverage(client);
      this._browserContext = browserContext;
      this._page = new _page.Page(this, browserContext);
      this._mainFrameSession = new FrameSession(this, client, targetId, null);
      this._sessions.set(targetId, this._mainFrameSession);
      if (opener && !browserContext._options.noDefaultViewport) {
        const features = opener._nextWindowOpenPopupFeatures.shift() || [];
        const viewportSize = _helper.helper.getViewportSizeFromWindowFeatures(features);
        if (viewportSize)
          this._page._emulatedSize = {
            viewport: viewportSize,
            screen: viewportSize
          };
      }
      this._pagePromise = this._mainFrameSession._initialize(bits.hasUIWindow).then(async (r) => {
        await this._page.initOpener(this._opener);
        return r;
      }).catch(async (e) => {
        await this._page.initOpener(this._opener);
        throw e;
      }).then(() => {
        this._initializedPage = this._page;
        this._reportAsNew();
        return this._page;
      }).catch((e) => {
        this._reportAsNew(e);
        return e;
      });
    }
    potentiallyUninitializedPage() {
      return this._page;
    }
    _reportAsNew(error) {
      this._page.reportAsNew(error, this._isBackgroundPage ? _crBrowser.CRBrowserContext.CREvents.BackgroundPage : _browserContext.BrowserContext.Events.Page);
    }
    async _forAllFrameSessions(cb) {
      const frameSessions = Array.from(this._sessions.values());
      await Promise.all(frameSessions.map((frameSession) => {
        if (frameSession._isMainFrame())
          return cb(frameSession);
        return cb(frameSession).catch((e) => {
          if ((0, _protocolError.isSessionClosedError)(e))
            return;
          throw e;
        });
      }));
    }
    _sessionForFrame(frame) {
      while (!this._sessions.has(frame._id)) {
        const parent = frame.parentFrame();
        if (!parent)
          throw new Error(`Frame has been detached.`);
        frame = parent;
      }
      return this._sessions.get(frame._id);
    }
    _sessionForHandle(handle) {
      const frame = handle._context.frame;
      return this._sessionForFrame(frame);
    }
    willBeginDownload() {
      this._mainFrameSession._willBeginDownload();
    }
    async pageOrError() {
      return this._pagePromise;
    }
    didClose() {
      for (const session of this._sessions.values())
        session.dispose();
      this._page._didClose();
    }
    async navigateFrame(frame, url, referrer) {
      return this._sessionForFrame(frame)._navigate(frame, url, referrer);
    }
    async exposeBinding(binding) {
      await this._forAllFrameSessions((frame) => frame._initBinding(binding));
      await Promise.all(this._page.frames().map((frame) => frame.evaluateExpression(binding.source).catch((e) => {
      })));
    }
    async removeExposedBindings() {
      await this._forAllFrameSessions((frame) => frame._removeExposedBindings());
    }
    async updateExtraHTTPHeaders() {
      await this._forAllFrameSessions((frame) => frame._updateExtraHTTPHeaders(false));
    }
    async updateGeolocation() {
      await this._forAllFrameSessions((frame) => frame._updateGeolocation(false));
    }
    async updateOffline() {
      await this._forAllFrameSessions((frame) => frame._updateOffline(false));
    }
    async updateHttpCredentials() {
      await this._forAllFrameSessions((frame) => frame._updateHttpCredentials(false));
    }
    async updateEmulatedViewportSize(preserveWindowBoundaries) {
      await this._mainFrameSession._updateViewport(preserveWindowBoundaries);
    }
    async bringToFront() {
      await this._mainFrameSession._client.send("Page.bringToFront");
    }
    async updateEmulateMedia() {
      await this._forAllFrameSessions((frame) => frame._updateEmulateMedia());
    }
    async updateUserAgent() {
      await this._forAllFrameSessions((frame) => frame._updateUserAgent());
    }
    async updateRequestInterception() {
      await this._forAllFrameSessions((frame) => frame._updateRequestInterception());
    }
    async updateFileChooserInterception() {
      await this._forAllFrameSessions((frame) => frame._updateFileChooserInterception(false));
    }
    async reload() {
      await this._mainFrameSession._client.send("Page.reload");
    }
    async _go(delta) {
      const history = await this._mainFrameSession._client.send("Page.getNavigationHistory");
      const entry = history.entries[history.currentIndex + delta];
      if (!entry)
        return false;
      await this._mainFrameSession._client.send("Page.navigateToHistoryEntry", {
        entryId: entry.id
      });
      return true;
    }
    goBack() {
      return this._go(-1);
    }
    goForward() {
      return this._go(1);
    }
    async addInitScript(source, world = "main") {
      await this._forAllFrameSessions((frame) => frame._evaluateOnNewDocument(source, world));
    }
    async removeInitScripts() {
      await this._forAllFrameSessions((frame) => frame._removeEvaluatesOnNewDocument());
    }
    async closePage(runBeforeUnload) {
      if (runBeforeUnload)
        await this._mainFrameSession._client.send("Page.close");
      else
        await this._browserContext._browser._closePage(this);
    }
    async setBackgroundColor(color) {
      await this._mainFrameSession._client.send("Emulation.setDefaultBackgroundColorOverride", {
        color
      });
    }
    async takeScreenshot(progress2, format, documentRect, viewportRect, quality, fitsViewport, scale) {
      const {
        visualViewport
      } = await this._mainFrameSession._client.send("Page.getLayoutMetrics");
      if (!documentRect) {
        documentRect = {
          x: visualViewport.pageX + viewportRect.x,
          y: visualViewport.pageY + viewportRect.y,
          ..._helper.helper.enclosingIntSize({
            width: viewportRect.width / visualViewport.scale,
            height: viewportRect.height / visualViewport.scale
          })
        };
      }
      const clip = {
        ...documentRect,
        scale: viewportRect ? visualViewport.scale : 1
      };
      if (scale === "css") {
        const deviceScaleFactor = this._browserContext._options.deviceScaleFactor || 1;
        clip.scale /= deviceScaleFactor;
      }
      progress2.throwIfAborted();
      const result = await this._mainFrameSession._client.send("Page.captureScreenshot", {
        format,
        quality,
        clip,
        captureBeyondViewport: !fitsViewport
      });
      return Buffer.from(result.data, "base64");
    }
    async getContentFrame(handle) {
      return this._sessionForHandle(handle)._getContentFrame(handle);
    }
    async getOwnerFrame(handle) {
      return this._sessionForHandle(handle)._getOwnerFrame(handle);
    }
    isElementHandle(remoteObject) {
      return remoteObject.subtype === "node";
    }
    async getBoundingBox(handle) {
      return this._sessionForHandle(handle)._getBoundingBox(handle);
    }
    async scrollRectIntoViewIfNeeded(handle, rect) {
      return this._sessionForHandle(handle)._scrollRectIntoViewIfNeeded(handle, rect);
    }
    async setScreencastOptions(options) {
      if (options) {
        await this._mainFrameSession._startScreencast(this, {
          format: "jpeg",
          quality: options.quality,
          maxWidth: options.width,
          maxHeight: options.height
        });
      } else {
        await this._mainFrameSession._stopScreencast(this);
      }
    }
    rafCountForStablePosition() {
      return 1;
    }
    async getContentQuads(handle) {
      return this._sessionForHandle(handle)._getContentQuads(handle);
    }
    async setInputFiles(handle, files) {
      await handle.evaluateInUtility(([injected, node, files2]) => injected.setInputFiles(node, files2), files);
    }
    async setInputFilePaths(progress2, handle, files) {
      const frame = await handle.ownerFrame();
      if (!frame)
        throw new Error("Cannot set input files to detached input element");
      const parentSession = this._sessionForFrame(frame);
      await parentSession._client.send("DOM.setFileInputFiles", {
        objectId: handle._objectId,
        files
      });
    }
    async adoptElementHandle(handle, to) {
      return this._sessionForHandle(handle)._adoptElementHandle(handle, to);
    }
    async getAccessibilityTree(needle) {
      return (0, _crAccessibility.getAccessibilityTree)(this._mainFrameSession._client, needle);
    }
    async inputActionEpilogue() {
      await this._mainFrameSession._client.send("Page.enable").catch((e) => {
      });
    }
    async resetForReuse() {
    }
    async pdf(options) {
      return this._pdf.generate(options);
    }
    coverage() {
      return this._coverage;
    }
    async getFrameElement(frame) {
      let parent = frame.parentFrame();
      if (!parent)
        throw new Error("Frame has been detached.");
      const parentSession = this._sessionForFrame(parent);
      const {
        backendNodeId
      } = await parentSession._client.send("DOM.getFrameOwner", {
        frameId: frame._id
      }).catch((e) => {
        if (e instanceof Error && e.message.includes("Frame with the given id was not found."))
          (0, _stackTrace.rewriteErrorMessage)(e, "Frame has been detached.");
        throw e;
      });
      parent = frame.parentFrame();
      if (!parent)
        throw new Error("Frame has been detached.");
      return parentSession._adoptBackendNodeId(backendNodeId, await parent._mainContext());
    }
    shouldToggleStyleSheetToSyncAnimations() {
      return false;
    }
  }
  exports.CRPage = CRPage;

  class FrameSession {
    constructor(crPage, client, targetId, parentSession) {
      this._client = undefined;
      this._crPage = undefined;
      this._page = undefined;
      this._networkManager = undefined;
      this._parentSession = undefined;
      this._childSessions = new Set;
      this._contextIdToContext = new Map;
      this._eventListeners = [];
      this._targetId = undefined;
      this._firstNonInitialNavigationCommittedPromise = undefined;
      this._firstNonInitialNavigationCommittedFulfill = () => {
      };
      this._firstNonInitialNavigationCommittedReject = (e) => {
      };
      this._windowId = undefined;
      this._swappedIn = false;
      this._videoRecorder = null;
      this._screencastId = null;
      this._screencastClients = new Set;
      this._evaluateOnNewDocumentIdentifiers = [];
      this._exposedBindingNames = [];
      this._metricsOverride = undefined;
      this._workerSessions = new Map;
      this._client = client;
      this._crPage = crPage;
      this._page = crPage._page;
      this._targetId = targetId;
      this._networkManager = new _crNetworkManager.CRNetworkManager(client, this._page, null, parentSession ? parentSession._networkManager : null);
      this._parentSession = parentSession;
      if (parentSession)
        parentSession._childSessions.add(this);
      this._firstNonInitialNavigationCommittedPromise = new Promise((f, r) => {
        this._firstNonInitialNavigationCommittedFulfill = f;
        this._firstNonInitialNavigationCommittedReject = r;
      });
    }
    _isMainFrame() {
      return this._targetId === this._crPage._targetId;
    }
    _addRendererListeners() {
      this._eventListeners.push(...[_eventsHelper.eventsHelper.addEventListener(this._client, "Log.entryAdded", (event) => this._onLogEntryAdded(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.fileChooserOpened", (event) => this._onFileChooserOpened(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.frameAttached", (event) => this._onFrameAttached(event.frameId, event.parentFrameId)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.frameDetached", (event) => this._onFrameDetached(event.frameId, event.reason)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.frameNavigated", (event) => this._onFrameNavigated(event.frame, false)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.frameRequestedNavigation", (event) => this._onFrameRequestedNavigation(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.javascriptDialogOpening", (event) => this._onDialog(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.navigatedWithinDocument", (event) => this._onFrameNavigatedWithinDocument(event.frameId, event.url)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.bindingCalled", (event) => this._onBindingCalled(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.consoleAPICalled", (event) => this._onConsoleAPI(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.exceptionThrown", (exception) => this._handleException(exception.exceptionDetails)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.executionContextCreated", (event) => this._onExecutionContextCreated(event.context)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.executionContextDestroyed", (event) => this._onExecutionContextDestroyed(event.executionContextId)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.executionContextsCleared", (event) => this._onExecutionContextsCleared()), _eventsHelper.eventsHelper.addEventListener(this._client, "Target.attachedToTarget", (event) => this._onAttachedToTarget(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Target.detachedFromTarget", (event) => this._onDetachedFromTarget(event))]);
    }
    _addBrowserListeners() {
      this._eventListeners.push(...[_eventsHelper.eventsHelper.addEventListener(this._client, "Inspector.targetCrashed", (event) => this._onTargetCrashed()), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.screencastFrame", (event) => this._onScreencastFrame(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.windowOpen", (event) => this._onWindowOpen(event))]);
    }
    async _initialize(hasUIWindow) {
      const isSettingStorageState = this._page._browserContext.isSettingStorageState();
      if (!isSettingStorageState && hasUIWindow && !this._crPage._browserContext._browser.isClank() && !this._crPage._browserContext._options.noDefaultViewport) {
        const {
          windowId
        } = await this._client.send("Browser.getWindowForTarget");
        this._windowId = windowId;
      }
      let screencastOptions;
      if (!isSettingStorageState && this._isMainFrame() && this._crPage._browserContext._options.recordVideo && hasUIWindow) {
        const screencastId = (0, _utils.createGuid)();
        const outputFile = _path.default.join(this._crPage._browserContext._options.recordVideo.dir, screencastId + ".webm");
        screencastOptions = {
          ...this._crPage._browserContext._options.recordVideo.size,
          outputFile
        };
        await this._crPage._browserContext._ensureVideosPath();
        await this._createVideoRecorder(screencastId, screencastOptions);
        this._crPage.pageOrError().then((p) => {
          if (p instanceof Error)
            this._stopVideoRecording().catch(() => {
            });
        });
      }
      let lifecycleEventsEnabled;
      if (!this._isMainFrame())
        this._addRendererListeners();
      this._addBrowserListeners();
      const promises = [this._client.send("Page.enable"), this._client.send("Page.getFrameTree").then(({
        frameTree
      }) => {
        if (this._isMainFrame()) {
          this._handleFrameTree(frameTree);
          this._addRendererListeners();
        }
        const localFrames = this._isMainFrame() ? this._page.frames() : [this._page._frameManager.frame(this._targetId)];
        for (const frame of localFrames) {
          this._client._sendMayFail("Page.createIsolatedWorld", {
            frameId: frame._id,
            grantUniveralAccess: true,
            worldName: UTILITY_WORLD_NAME
          });
          for (const binding of this._crPage._browserContext._pageBindings.values())
            frame.evaluateExpression(binding.source).catch((e) => {
            });
          for (const source of this._crPage._browserContext.initScripts)
            frame.evaluateExpression(source).catch((e) => {
            });
        }
        const isInitialEmptyPage = this._isMainFrame() && this._page.mainFrame().url() === ":";
        if (isInitialEmptyPage) {
          lifecycleEventsEnabled.catch((e) => {
          }).then(() => {
            this._eventListeners.push(_eventsHelper.eventsHelper.addEventListener(this._client, "Page.lifecycleEvent", (event) => this._onLifecycleEvent(event)));
          });
        } else {
          this._firstNonInitialNavigationCommittedFulfill();
          this._eventListeners.push(_eventsHelper.eventsHelper.addEventListener(this._client, "Page.lifecycleEvent", (event) => this._onLifecycleEvent(event)));
        }
      }), this._client.send("Log.enable", {}), lifecycleEventsEnabled = this._client.send("Page.setLifecycleEventsEnabled", {
        enabled: true
      }), this._client.send("Runtime.enable", {}), this._client.send("Page.addScriptToEvaluateOnNewDocument", {
        source: "",
        worldName: UTILITY_WORLD_NAME
      }), this._networkManager.initialize(), this._client.send("Target.setAutoAttach", {
        autoAttach: true,
        waitForDebuggerOnStart: true,
        flatten: true
      })];
      if (!isSettingStorageState) {
        if (this._isMainFrame())
          promises.push(this._client.send("Emulation.setFocusEmulationEnabled", {
            enabled: true
          }));
        const options = this._crPage._browserContext._options;
        if (options.bypassCSP)
          promises.push(this._client.send("Page.setBypassCSP", {
            enabled: true
          }));
        if (options.ignoreHTTPSErrors)
          promises.push(this._client.send("Security.setIgnoreCertificateErrors", {
            ignore: true
          }));
        if (this._isMainFrame())
          promises.push(this._updateViewport());
        if (options.hasTouch)
          promises.push(this._client.send("Emulation.setTouchEmulationEnabled", {
            enabled: true
          }));
        if (options.javaScriptEnabled === false)
          promises.push(this._client.send("Emulation.setScriptExecutionDisabled", {
            value: true
          }));
        if (options.userAgent || options.locale)
          promises.push(this._updateUserAgent());
        if (options.locale)
          promises.push(emulateLocale(this._client, options.locale));
        if (options.timezoneId)
          promises.push(emulateTimezone(this._client, options.timezoneId));
        if (!this._crPage._browserContext._browser.options.headful)
          promises.push(this._setDefaultFontFamilies(this._client));
        promises.push(this._updateGeolocation(true));
        promises.push(this._updateExtraHTTPHeaders(true));
        promises.push(this._updateRequestInterception());
        promises.push(this._updateOffline(true));
        promises.push(this._updateHttpCredentials(true));
        promises.push(this._updateEmulateMedia());
        promises.push(this._updateFileChooserInterception(true));
        for (const binding of this._crPage._page.allBindings())
          promises.push(this._initBinding(binding));
        for (const source of this._crPage._browserContext.initScripts)
          promises.push(this._evaluateOnNewDocument(source, "main"));
        for (const source of this._crPage._page.initScripts)
          promises.push(this._evaluateOnNewDocument(source, "main"));
        if (screencastOptions)
          promises.push(this._startVideoRecording(screencastOptions));
      }
      promises.push(this._client.send("Runtime.runIfWaitingForDebugger"));
      promises.push(this._firstNonInitialNavigationCommittedPromise);
      await Promise.all(promises);
    }
    dispose() {
      this._firstNonInitialNavigationCommittedReject(new _errors.TargetClosedError);
      for (const childSession of this._childSessions)
        childSession.dispose();
      if (this._parentSession)
        this._parentSession._childSessions.delete(this);
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      this._networkManager.dispose();
      this._crPage._sessions.delete(this._targetId);
      this._client.dispose();
    }
    async _navigate(frame, url, referrer) {
      const response = await this._client.send("Page.navigate", {
        url,
        referrer,
        frameId: frame._id,
        referrerPolicy: "unsafeUrl"
      });
      if (response.errorText)
        throw new frames.NavigationAbortedError(response.loaderId, `${response.errorText} at ${url}`);
      return {
        newDocumentId: response.loaderId
      };
    }
    _onLifecycleEvent(event) {
      if (this._eventBelongsToStaleFrame(event.frameId))
        return;
      if (event.name === "load")
        this._page._frameManager.frameLifecycleEvent(event.frameId, "load");
      else if (event.name === "DOMContentLoaded")
        this._page._frameManager.frameLifecycleEvent(event.frameId, "domcontentloaded");
    }
    _handleFrameTree(frameTree) {
      this._onFrameAttached(frameTree.frame.id, frameTree.frame.parentId || null);
      this._onFrameNavigated(frameTree.frame, true);
      if (!frameTree.childFrames)
        return;
      for (const child of frameTree.childFrames)
        this._handleFrameTree(child);
    }
    _eventBelongsToStaleFrame(frameId) {
      const frame = this._page._frameManager.frame(frameId);
      if (!frame)
        return true;
      const session = this._crPage._sessionForFrame(frame);
      return session && session !== this && !session._swappedIn;
    }
    _onFrameAttached(frameId, parentFrameId) {
      const frameSession = this._crPage._sessions.get(frameId);
      if (frameSession && frameId !== this._targetId) {
        frameSession._swappedIn = true;
        const frame = this._page._frameManager.frame(frameId);
        if (frame)
          this._page._frameManager.removeChildFramesRecursively(frame);
        return;
      }
      if (parentFrameId && !this._page._frameManager.frame(parentFrameId)) {
        return;
      }
      this._page._frameManager.frameAttached(frameId, parentFrameId);
    }
    _onFrameNavigated(framePayload, initial) {
      if (this._eventBelongsToStaleFrame(framePayload.id))
        return;
      this._page._frameManager.frameCommittedNewDocumentNavigation(framePayload.id, framePayload.url + (framePayload.urlFragment || ""), framePayload.name || "", framePayload.loaderId, initial);
      if (!initial)
        this._firstNonInitialNavigationCommittedFulfill();
    }
    _onFrameRequestedNavigation(payload) {
      if (this._eventBelongsToStaleFrame(payload.frameId))
        return;
      if (payload.disposition === "currentTab")
        this._page._frameManager.frameRequestedNavigation(payload.frameId);
    }
    _onFrameNavigatedWithinDocument(frameId, url) {
      if (this._eventBelongsToStaleFrame(frameId))
        return;
      this._page._frameManager.frameCommittedSameDocumentNavigation(frameId, url);
    }
    _onFrameDetached(frameId, reason) {
      if (this._crPage._sessions.has(frameId)) {
        return;
      }
      if (reason === "swap") {
        const frame = this._page._frameManager.frame(frameId);
        if (frame)
          this._page._frameManager.removeChildFramesRecursively(frame);
        return;
      }
      this._page._frameManager.frameDetached(frameId);
    }
    _onExecutionContextCreated(contextPayload) {
      const frame = contextPayload.auxData ? this._page._frameManager.frame(contextPayload.auxData.frameId) : null;
      if (!frame || this._eventBelongsToStaleFrame(frame._id))
        return;
      const delegate = new _crExecutionContext.CRExecutionContext(this._client, contextPayload);
      let worldName = null;
      if (contextPayload.auxData && !!contextPayload.auxData.isDefault)
        worldName = "main";
      else if (contextPayload.name === UTILITY_WORLD_NAME)
        worldName = "utility";
      const context = new dom.FrameExecutionContext(delegate, frame, worldName);
      context[contextDelegateSymbol] = delegate;
      if (worldName)
        frame._contextCreated(worldName, context);
      this._contextIdToContext.set(contextPayload.id, context);
    }
    _onExecutionContextDestroyed(executionContextId) {
      const context = this._contextIdToContext.get(executionContextId);
      if (!context)
        return;
      this._contextIdToContext.delete(executionContextId);
      context.frame._contextDestroyed(context);
    }
    _onExecutionContextsCleared() {
      for (const contextId of Array.from(this._contextIdToContext.keys()))
        this._onExecutionContextDestroyed(contextId);
    }
    _onAttachedToTarget(event) {
      var _this$_page$_frameMan;
      const session = this._client.createChildSession(event.sessionId);
      if (event.targetInfo.type === "iframe") {
        const targetId = event.targetInfo.targetId;
        const frame = this._page._frameManager.frame(targetId);
        if (!frame)
          return;
        this._page._frameManager.removeChildFramesRecursively(frame);
        const frameSession = new FrameSession(this._crPage, session, targetId, this);
        this._crPage._sessions.set(targetId, frameSession);
        frameSession._initialize(false).catch((e) => e);
        return;
      }
      if (event.targetInfo.type !== "worker") {
        session.detach().catch(() => {
        });
        return;
      }
      const url = event.targetInfo.url;
      const worker = new _page.Worker(this._page, url);
      this._page._addWorker(event.sessionId, worker);
      this._workerSessions.set(event.sessionId, session);
      session.once("Runtime.executionContextCreated", async (event2) => {
        worker._createExecutionContext(new _crExecutionContext.CRExecutionContext(session, event2.context));
      });
      session._sendMayFail("Runtime.enable");
      session._sendMayFail("Network.enable");
      session._sendMayFail("Runtime.runIfWaitingForDebugger");
      session._sendMayFail("Target.setAutoAttach", {
        autoAttach: true,
        waitForDebuggerOnStart: true,
        flatten: true
      });
      session.on("Target.attachedToTarget", (event2) => this._onAttachedToTarget(event2));
      session.on("Target.detachedFromTarget", (event2) => this._onDetachedFromTarget(event2));
      session.on("Runtime.consoleAPICalled", (event2) => {
        const args = event2.args.map((o) => worker._existingExecutionContext.createHandle(o));
        this._page._addConsoleMessage(event2.type, args, (0, _crProtocolHelper.toConsoleMessageLocation)(event2.stackTrace));
      });
      session.on("Runtime.exceptionThrown", (exception) => this._page.emitOnContextOnceInitialized(_browserContext.BrowserContext.Events.PageError, (0, _crProtocolHelper.exceptionToError)(exception.exceptionDetails), this._page));
      this._networkManager.instrumentNetworkEvents({
        session,
        workerFrame: (_this$_page$_frameMan = this._page._frameManager.frame(this._targetId)) !== null && _this$_page$_frameMan !== undefined ? _this$_page$_frameMan : undefined
      });
    }
    _onDetachedFromTarget(event) {
      const workerSession = this._workerSessions.get(event.sessionId);
      if (workerSession) {
        workerSession.dispose();
        this._page._removeWorker(event.sessionId);
        return;
      }
      const childFrameSession = this._crPage._sessions.get(event.targetId);
      if (!childFrameSession)
        return;
      if (childFrameSession._swappedIn) {
        childFrameSession.dispose();
        return;
      }
      this._client.send("Page.enable").catch((e) => null).then(() => {
        if (!childFrameSession._swappedIn)
          this._page._frameManager.frameDetached(event.targetId);
        childFrameSession.dispose();
      });
    }
    _onWindowOpen(event) {
      this._crPage._nextWindowOpenPopupFeatures.push(event.windowFeatures);
    }
    async _onConsoleAPI(event) {
      if (event.executionContextId === 0) {
        return;
      }
      const context = this._contextIdToContext.get(event.executionContextId);
      if (!context)
        return;
      const values = event.args.map((arg) => context.createHandle(arg));
      this._page._addConsoleMessage(event.type, values, (0, _crProtocolHelper.toConsoleMessageLocation)(event.stackTrace));
    }
    async _initBinding(binding) {
      const [, response] = await Promise.all([this._client.send("Runtime.addBinding", {
        name: binding.name
      }), this._client.send("Page.addScriptToEvaluateOnNewDocument", {
        source: binding.source
      })]);
      this._exposedBindingNames.push(binding.name);
      if (!binding.name.startsWith("__pw"))
        this._evaluateOnNewDocumentIdentifiers.push(response.identifier);
    }
    async _removeExposedBindings() {
      const toRetain = [];
      const toRemove = [];
      for (const name of this._exposedBindingNames)
        (name.startsWith("__pw_") ? toRetain : toRemove).push(name);
      this._exposedBindingNames = toRetain;
      await Promise.all(toRemove.map((name) => this._client.send("Runtime.removeBinding", {
        name
      })));
    }
    async _onBindingCalled(event) {
      const pageOrError = await this._crPage.pageOrError();
      if (!(pageOrError instanceof Error)) {
        const context = this._contextIdToContext.get(event.executionContextId);
        if (context)
          await this._page._onBindingCalled(event.payload, context);
      }
    }
    _onDialog(event) {
      if (!this._page._frameManager.frame(this._targetId))
        return;
      this._page.emitOnContext(_browserContext.BrowserContext.Events.Dialog, new dialog.Dialog(this._page, event.type, event.message, async (accept, promptText) => {
        await this._client.send("Page.handleJavaScriptDialog", {
          accept,
          promptText
        });
      }, event.defaultPrompt));
    }
    _handleException(exceptionDetails) {
      this._page.emitOnContextOnceInitialized(_browserContext.BrowserContext.Events.PageError, (0, _crProtocolHelper.exceptionToError)(exceptionDetails), this._page);
    }
    async _onTargetCrashed() {
      this._client._markAsCrashed();
      this._page._didCrash();
    }
    _onLogEntryAdded(event) {
      const {
        level,
        text,
        args,
        source,
        url,
        lineNumber
      } = event.entry;
      if (args)
        args.map((arg) => (0, _crProtocolHelper.releaseObject)(this._client, arg.objectId));
      if (source !== "worker") {
        const location2 = {
          url: url || "",
          lineNumber: lineNumber || 0,
          columnNumber: 0
        };
        this._page._addConsoleMessage(level, [], location2, text);
      }
    }
    async _onFileChooserOpened(event) {
      if (!event.backendNodeId)
        return;
      const frame = this._page._frameManager.frame(event.frameId);
      if (!frame)
        return;
      let handle;
      try {
        const utilityContext = await frame._utilityContext();
        handle = await this._adoptBackendNodeId(event.backendNodeId, utilityContext);
      } catch (e) {
        return;
      }
      await this._page._onFileChooserOpened(handle);
    }
    _willBeginDownload() {
      const originPage = this._crPage._initializedPage;
      if (!originPage) {
        this._firstNonInitialNavigationCommittedReject(new Error("Starting new page download"));
      }
    }
    _onScreencastFrame(payload) {
      this._page.throttleScreencastFrameAck(() => {
        this._client.send("Page.screencastFrameAck", {
          sessionId: payload.sessionId
        }).catch(() => {
        });
      });
      const buffer = Buffer.from(payload.data, "base64");
      this._page.emit(_page.Page.Events.ScreencastFrame, {
        buffer,
        timestamp: payload.metadata.timestamp,
        width: payload.metadata.deviceWidth,
        height: payload.metadata.deviceHeight
      });
    }
    async _createVideoRecorder(screencastId, options) {
      (0, _utils.assert)(!this._screencastId);
      const ffmpegPath = _registry.registry.findExecutable("ffmpeg").executablePathOrDie(this._page.attribution.playwright.options.sdkLanguage);
      this._videoRecorder = await _videoRecorder.VideoRecorder.launch(this._crPage._page, ffmpegPath, options);
      this._screencastId = screencastId;
    }
    async _startVideoRecording(options) {
      const screencastId = this._screencastId;
      (0, _utils.assert)(screencastId);
      this._page.once(_page.Page.Events.Close, () => this._stopVideoRecording().catch(() => {
      }));
      const gotFirstFrame = new Promise((f) => this._client.once("Page.screencastFrame", f));
      await this._startScreencast(this._videoRecorder, {
        format: "jpeg",
        quality: 90,
        maxWidth: options.width,
        maxHeight: options.height
      });
      gotFirstFrame.then(() => {
        this._crPage._browserContext._browser._videoStarted(this._crPage._browserContext, screencastId, options.outputFile, this._crPage.pageOrError());
      });
    }
    async _stopVideoRecording() {
      if (!this._screencastId)
        return;
      const screencastId = this._screencastId;
      this._screencastId = null;
      const recorder = this._videoRecorder;
      this._videoRecorder = null;
      await this._stopScreencast(recorder);
      await recorder.stop().catch(() => {
      });
      const video = this._crPage._browserContext._browser._takeVideo(screencastId);
      video === null || video === undefined || video.reportFinished();
    }
    async _startScreencast(client, options = {}) {
      this._screencastClients.add(client);
      if (this._screencastClients.size === 1)
        await this._client.send("Page.startScreencast", options);
    }
    async _stopScreencast(client) {
      this._screencastClients.delete(client);
      if (!this._screencastClients.size)
        await this._client._sendMayFail("Page.stopScreencast");
    }
    async _updateExtraHTTPHeaders(initial) {
      const headers = network.mergeHeaders([this._crPage._browserContext._options.extraHTTPHeaders, this._page.extraHTTPHeaders()]);
      if (!initial || headers.length)
        await this._client.send("Network.setExtraHTTPHeaders", {
          headers: (0, _utils.headersArrayToObject)(headers, false)
        });
    }
    async _updateGeolocation(initial) {
      const geolocation = this._crPage._browserContext._options.geolocation;
      if (!initial || geolocation)
        await this._client.send("Emulation.setGeolocationOverride", geolocation || {});
    }
    async _updateOffline(initial) {
      const offline = !!this._crPage._browserContext._options.offline;
      if (!initial || offline)
        await this._networkManager.setOffline(offline);
    }
    async _updateHttpCredentials(initial) {
      const credentials = this._crPage._browserContext._options.httpCredentials || null;
      if (!initial || credentials)
        await this._networkManager.authenticate(credentials);
    }
    async _updateViewport(preserveWindowBoundaries) {
      if (this._crPage._browserContext._browser.isClank())
        return;
      (0, _utils.assert)(this._isMainFrame());
      const options = this._crPage._browserContext._options;
      const emulatedSize = this._page.emulatedSize();
      if (emulatedSize === null)
        return;
      const viewportSize = emulatedSize.viewport;
      const screenSize = emulatedSize.screen;
      const isLandscape = screenSize.width > screenSize.height;
      const metricsOverride = {
        mobile: !!options.isMobile,
        width: viewportSize.width,
        height: viewportSize.height,
        screenWidth: screenSize.width,
        screenHeight: screenSize.height,
        deviceScaleFactor: options.deviceScaleFactor || 1,
        screenOrientation: options.isMobile ? isLandscape ? {
          angle: 90,
          type: "landscapePrimary"
        } : {
          angle: 0,
          type: "portraitPrimary"
        } : {
          angle: 0,
          type: "landscapePrimary"
        },
        dontSetVisibleSize: preserveWindowBoundaries
      };
      if (JSON.stringify(this._metricsOverride) === JSON.stringify(metricsOverride))
        return;
      const promises = [this._client.send("Emulation.setDeviceMetricsOverride", metricsOverride)];
      if (!preserveWindowBoundaries && this._windowId) {
        let insets = {
          width: 0,
          height: 0
        };
        if (this._crPage._browserContext._browser.options.headful) {
          insets = {
            width: 24,
            height: 88
          };
          if (process.platform === "win32")
            insets = {
              width: 16,
              height: 88
            };
          else if (process.platform === "linux")
            insets = {
              width: 8,
              height: 85
            };
          else if (process.platform === "darwin")
            insets = {
              width: 2,
              height: 80
            };
          if (this._crPage._browserContext.isPersistentContext()) {
            insets.height += 46;
          }
        }
        promises.push(this.setWindowBounds({
          width: viewportSize.width + insets.width,
          height: viewportSize.height + insets.height
        }));
      }
      await Promise.all(promises);
      this._metricsOverride = metricsOverride;
    }
    async windowBounds() {
      const {
        bounds
      } = await this._client.send("Browser.getWindowBounds", {
        windowId: this._windowId
      });
      return bounds;
    }
    async setWindowBounds(bounds) {
      return await this._client.send("Browser.setWindowBounds", {
        windowId: this._windowId,
        bounds
      });
    }
    async _updateEmulateMedia() {
      const emulatedMedia = this._page.emulatedMedia();
      const media = emulatedMedia.media === "no-override" ? "" : emulatedMedia.media;
      const colorScheme = emulatedMedia.colorScheme === "no-override" ? "" : emulatedMedia.colorScheme;
      const reducedMotion = emulatedMedia.reducedMotion === "no-override" ? "" : emulatedMedia.reducedMotion;
      const forcedColors = emulatedMedia.forcedColors === "no-override" ? "" : emulatedMedia.forcedColors;
      const features = [{
        name: "prefers-color-scheme",
        value: colorScheme
      }, {
        name: "prefers-reduced-motion",
        value: reducedMotion
      }, {
        name: "forced-colors",
        value: forcedColors
      }];
      await this._client.send("Emulation.setEmulatedMedia", {
        media,
        features
      });
    }
    async _updateUserAgent() {
      const options = this._crPage._browserContext._options;
      await this._client.send("Emulation.setUserAgentOverride", {
        userAgent: options.userAgent || "",
        acceptLanguage: options.locale,
        userAgentMetadata: calculateUserAgentMetadata(options)
      });
    }
    async _setDefaultFontFamilies(session) {
      const fontFamilies = _defaultFontFamilies.platformToFontFamilies[this._crPage._browserContext._browser._platform()];
      await session.send("Page.setFontFamilies", fontFamilies);
    }
    async _updateRequestInterception() {
      await this._networkManager.setRequestInterception(this._page.needsRequestInterception());
    }
    async _updateFileChooserInterception(initial) {
      const enabled = this._page.fileChooserIntercepted();
      if (initial && !enabled)
        return;
      await this._client.send("Page.setInterceptFileChooserDialog", {
        enabled
      }).catch(() => {
      });
    }
    async _evaluateOnNewDocument(source, world) {
      const worldName = world === "utility" ? UTILITY_WORLD_NAME : undefined;
      const {
        identifier
      } = await this._client.send("Page.addScriptToEvaluateOnNewDocument", {
        source,
        worldName
      });
      this._evaluateOnNewDocumentIdentifiers.push(identifier);
    }
    async _removeEvaluatesOnNewDocument() {
      const identifiers = this._evaluateOnNewDocumentIdentifiers;
      this._evaluateOnNewDocumentIdentifiers = [];
      await Promise.all(identifiers.map((identifier) => this._client.send("Page.removeScriptToEvaluateOnNewDocument", {
        identifier
      })));
    }
    async _getContentFrame(handle) {
      const nodeInfo = await this._client.send("DOM.describeNode", {
        objectId: handle._objectId
      });
      if (!nodeInfo || typeof nodeInfo.node.frameId !== "string")
        return null;
      return this._page._frameManager.frame(nodeInfo.node.frameId);
    }
    async _getOwnerFrame(handle) {
      const documentElement = await handle.evaluateHandle((node) => {
        const doc = node;
        if (doc.documentElement && doc.documentElement.ownerDocument === doc)
          return doc.documentElement;
        return node.ownerDocument ? node.ownerDocument.documentElement : null;
      });
      if (!documentElement)
        return null;
      if (!documentElement._objectId)
        return null;
      const nodeInfo = await this._client.send("DOM.describeNode", {
        objectId: documentElement._objectId
      });
      const frameId = nodeInfo && typeof nodeInfo.node.frameId === "string" ? nodeInfo.node.frameId : null;
      documentElement.dispose();
      return frameId;
    }
    async _getBoundingBox(handle) {
      const result = await this._client._sendMayFail("DOM.getBoxModel", {
        objectId: handle._objectId
      });
      if (!result)
        return null;
      const quad = result.model.border;
      const x = Math.min(quad[0], quad[2], quad[4], quad[6]);
      const y = Math.min(quad[1], quad[3], quad[5], quad[7]);
      const width = Math.max(quad[0], quad[2], quad[4], quad[6]) - x;
      const height = Math.max(quad[1], quad[3], quad[5], quad[7]) - y;
      const position = await this._framePosition();
      if (!position)
        return null;
      return {
        x: x + position.x,
        y: y + position.y,
        width,
        height
      };
    }
    async _framePosition() {
      const frame = this._page._frameManager.frame(this._targetId);
      if (!frame)
        return null;
      if (frame === this._page.mainFrame())
        return {
          x: 0,
          y: 0
        };
      const element = await frame.frameElement();
      const box = await element.boundingBox();
      return box;
    }
    async _scrollRectIntoViewIfNeeded(handle, rect) {
      return await this._client.send("DOM.scrollIntoViewIfNeeded", {
        objectId: handle._objectId,
        rect
      }).then(() => "done").catch((e) => {
        if (e instanceof Error && e.message.includes("Node does not have a layout object"))
          return "error:notvisible";
        if (e instanceof Error && e.message.includes("Node is detached from document"))
          return "error:notconnected";
        throw e;
      });
    }
    async _getContentQuads(handle) {
      const result = await this._client._sendMayFail("DOM.getContentQuads", {
        objectId: handle._objectId
      });
      if (!result)
        return null;
      const position = await this._framePosition();
      if (!position)
        return null;
      return result.quads.map((quad) => [{
        x: quad[0] + position.x,
        y: quad[1] + position.y
      }, {
        x: quad[2] + position.x,
        y: quad[3] + position.y
      }, {
        x: quad[4] + position.x,
        y: quad[5] + position.y
      }, {
        x: quad[6] + position.x,
        y: quad[7] + position.y
      }]);
    }
    async _adoptElementHandle(handle, to) {
      const nodeInfo = await this._client.send("DOM.describeNode", {
        objectId: handle._objectId
      });
      return this._adoptBackendNodeId(nodeInfo.node.backendNodeId, to);
    }
    async _adoptBackendNodeId(backendNodeId, to) {
      const result = await this._client._sendMayFail("DOM.resolveNode", {
        backendNodeId,
        executionContextId: to[contextDelegateSymbol]._contextId
      });
      if (!result || result.object.subtype === "null")
        throw new Error(dom.kUnableToAdoptErrorMessage);
      return to.createHandle(result.object).asElement();
    }
  }
  var contextDelegateSymbol = Symbol("delegate");
});

// node_modules/playwright-core/lib/server/chromium/crServiceWorker.js
var require_crServiceWorker = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CRServiceWorker = undefined;
  var _page = require_page();
  var _crExecutionContext = require_crExecutionContext();
  var _crNetworkManager = require_crNetworkManager();
  var network = _interopRequireWildcard(require_network2());
  var _browserContext = require_browserContext();
  var _utils = require_utils3();

  class CRServiceWorker extends _page.Worker {
    constructor(browserContext, session, url) {
      super(browserContext, url);
      this._browserContext = undefined;
      this._networkManager = undefined;
      this._session = undefined;
      this._extraHTTPHeaders = null;
      this._session = session;
      this._browserContext = browserContext;
      if (!!process.env.PW_EXPERIMENTAL_SERVICE_WORKER_NETWORK_EVENTS)
        this._networkManager = new _crNetworkManager.CRNetworkManager(session, null, this, null);
      session.once("Runtime.executionContextCreated", (event) => {
        this._createExecutionContext(new _crExecutionContext.CRExecutionContext(session, event.context));
      });
      if (this._networkManager && this._isNetworkInspectionEnabled()) {
        this._networkManager.initialize().catch(() => {
        });
        this.updateRequestInterception();
        this.updateExtraHTTPHeaders(true);
        this.updateHttpCredentials(true);
        this.updateOffline(true);
      }
      session.send("Runtime.enable", {}).catch((e) => {
      });
      session.send("Runtime.runIfWaitingForDebugger").catch((e) => {
      });
      session.on("Inspector.targetReloadedAfterCrash", () => {
        session._sendMayFail("Runtime.runIfWaitingForDebugger", {});
      });
    }
    didClose() {
      this._session.dispose();
      super.didClose();
    }
    async updateOffline(initial) {
      var _this$_networkManager;
      if (!this._isNetworkInspectionEnabled())
        return;
      const offline = !!this._browserContext._options.offline;
      if (!initial || offline)
        await ((_this$_networkManager = this._networkManager) === null || _this$_networkManager === undefined ? undefined : _this$_networkManager.setOffline(offline));
    }
    async updateHttpCredentials(initial) {
      var _this$_networkManager2;
      if (!this._isNetworkInspectionEnabled())
        return;
      const credentials = this._browserContext._options.httpCredentials || null;
      if (!initial || credentials)
        await ((_this$_networkManager2 = this._networkManager) === null || _this$_networkManager2 === undefined ? undefined : _this$_networkManager2.authenticate(credentials));
    }
    async updateExtraHTTPHeaders(initial) {
      if (!this._isNetworkInspectionEnabled())
        return;
      const headers = network.mergeHeaders([this._browserContext._options.extraHTTPHeaders, this._extraHTTPHeaders]);
      if (!initial || headers.length)
        await this._session.send("Network.setExtraHTTPHeaders", {
          headers: (0, _utils.headersArrayToObject)(headers, false)
        });
    }
    updateRequestInterception() {
      if (!this._networkManager || !this._isNetworkInspectionEnabled())
        return Promise.resolve();
      return this._networkManager.setRequestInterception(this.needsRequestInterception()).catch((e) => {
      });
    }
    needsRequestInterception() {
      return this._isNetworkInspectionEnabled() && !!this._browserContext._requestInterceptor;
    }
    reportRequestFinished(request, response) {
      this._browserContext.emit(_browserContext.BrowserContext.Events.RequestFinished, {
        request,
        response
      });
    }
    requestFailed(request, _canceled) {
      this._browserContext.emit(_browserContext.BrowserContext.Events.RequestFailed, request);
    }
    requestReceivedResponse(response) {
      this._browserContext.emit(_browserContext.BrowserContext.Events.Response, response);
    }
    requestStarted(request, route) {
      this._browserContext.emit(_browserContext.BrowserContext.Events.Request, request);
      if (route) {
        var _this$_browserContext, _this$_browserContext2;
        const r = new network.Route(request, route);
        if ((_this$_browserContext = (_this$_browserContext2 = this._browserContext)._requestInterceptor) !== null && _this$_browserContext !== undefined && _this$_browserContext.call(_this$_browserContext2, r, request))
          return;
        r.continue({
          isFallback: true
        }).catch(() => {
        });
      }
    }
    _isNetworkInspectionEnabled() {
      return this._browserContext._options.serviceWorkers !== "block";
    }
  }
  exports.CRServiceWorker = CRServiceWorker;
});

// node_modules/playwright-core/lib/server/chromium/crBrowser.js
var require_crBrowser = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CRBrowserContext = exports.CRBrowser = undefined;
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _browser = require_browser5();
  var _browserContext = require_browserContext();
  var _utils = require_utils3();
  var network = _interopRequireWildcard(require_network2());
  var _page = require_page();
  var _frames = require_frames();
  var _crConnection = require_crConnection();
  var _crPage = require_crPage();
  var _crProtocolHelper = require_crProtocolHelper();
  var _crServiceWorker = require_crServiceWorker();
  var _artifact = require_artifact();

  class CRBrowser extends _browser.Browser {
    static async connect(parent, transport, options, devtools) {
      options = {
        ...options
      };
      const connection = new _crConnection.CRConnection(transport, options.protocolLogger, options.browserLogsCollector);
      const browser = new CRBrowser(parent, connection, options);
      browser._devtools = devtools;
      if (browser.isClank())
        browser._isCollocatedWithServer = false;
      const session = connection.rootSession;
      if (options.__testHookOnConnectToBrowser)
        await options.__testHookOnConnectToBrowser();
      const version = await session.send("Browser.getVersion");
      browser._version = version.product.substring(version.product.indexOf("/") + 1);
      browser._userAgent = version.userAgent;
      browser.options.headful = !version.userAgent.includes("Headless");
      if (!options.persistent) {
        await session.send("Target.setAutoAttach", {
          autoAttach: true,
          waitForDebuggerOnStart: true,
          flatten: true
        });
        return browser;
      }
      browser._defaultContext = new CRBrowserContext(browser, undefined, options.persistent);
      await Promise.all([session.send("Target.setAutoAttach", {
        autoAttach: true,
        waitForDebuggerOnStart: true,
        flatten: true
      }).then(async () => {
        await session.send("Target.getTargetInfo");
      }), browser._defaultContext._initialize()]);
      await browser._waitForAllPagesToBeInitialized();
      return browser;
    }
    constructor(parent, connection, options) {
      super(parent, options);
      this._connection = undefined;
      this._session = undefined;
      this._clientRootSessionPromise = null;
      this._contexts = new Map;
      this._crPages = new Map;
      this._backgroundPages = new Map;
      this._serviceWorkers = new Map;
      this._devtools = undefined;
      this._version = "";
      this._tracingRecording = false;
      this._tracingClient = undefined;
      this._userAgent = "";
      this._connection = connection;
      this._session = this._connection.rootSession;
      this._connection.on(_crConnection.ConnectionEvents.Disconnected, () => this._didDisconnect());
      this._session.on("Target.attachedToTarget", this._onAttachedToTarget.bind(this));
      this._session.on("Target.detachedFromTarget", this._onDetachedFromTarget.bind(this));
      this._session.on("Browser.downloadWillBegin", this._onDownloadWillBegin.bind(this));
      this._session.on("Browser.downloadProgress", this._onDownloadProgress.bind(this));
    }
    async doCreateNewContext(options) {
      let proxyBypassList = undefined;
      if (options.proxy) {
        if (process.env.PLAYWRIGHT_DISABLE_FORCED_CHROMIUM_PROXIED_LOOPBACK)
          proxyBypassList = options.proxy.bypass;
        else
          proxyBypassList = "<-loopback>" + (options.proxy.bypass ? `,${options.proxy.bypass}` : "");
      }
      const {
        browserContextId
      } = await this._session.send("Target.createBrowserContext", {
        disposeOnDetach: true,
        proxyServer: options.proxy ? options.proxy.server : undefined,
        proxyBypassList
      });
      const context = new CRBrowserContext(this, browserContextId, options);
      await context._initialize();
      this._contexts.set(browserContextId, context);
      return context;
    }
    contexts() {
      return Array.from(this._contexts.values());
    }
    version() {
      return this._version;
    }
    userAgent() {
      return this._userAgent;
    }
    _platform() {
      if (this._userAgent.includes("Windows"))
        return "win";
      if (this._userAgent.includes("Macintosh"))
        return "mac";
      return "linux";
    }
    isClank() {
      return this.options.name === "clank";
    }
    async _waitForAllPagesToBeInitialized() {
      await Promise.all([...this._crPages.values()].map((page) => page.pageOrError()));
    }
    _onAttachedToTarget({
      targetInfo,
      sessionId,
      waitingForDebugger
    }) {
      if (targetInfo.type === "browser")
        return;
      const session = this._session.createChildSession(sessionId);
      (0, _utils.assert)(targetInfo.browserContextId, "targetInfo: " + JSON.stringify(targetInfo, null, 2));
      let context = this._contexts.get(targetInfo.browserContextId) || null;
      if (!context) {
        context = this._defaultContext;
      }
      if (targetInfo.type === "other" && targetInfo.url.startsWith("devtools://devtools") && this._devtools) {
        this._devtools.install(session);
        return;
      }
      const treatOtherAsPage = targetInfo.type === "other" && process.env.PW_CHROMIUM_ATTACH_TO_OTHER;
      if (!context || targetInfo.type === "other" && !treatOtherAsPage) {
        session.detach().catch(() => {
        });
        return;
      }
      (0, _utils.assert)(!this._crPages.has(targetInfo.targetId), "Duplicate target " + targetInfo.targetId);
      (0, _utils.assert)(!this._backgroundPages.has(targetInfo.targetId), "Duplicate target " + targetInfo.targetId);
      (0, _utils.assert)(!this._serviceWorkers.has(targetInfo.targetId), "Duplicate target " + targetInfo.targetId);
      if (targetInfo.type === "background_page") {
        const backgroundPage = new _crPage.CRPage(session, targetInfo.targetId, context, null, {
          hasUIWindow: false,
          isBackgroundPage: true
        });
        this._backgroundPages.set(targetInfo.targetId, backgroundPage);
        return;
      }
      if (targetInfo.type === "page" || treatOtherAsPage) {
        const opener = targetInfo.openerId ? this._crPages.get(targetInfo.openerId) || null : null;
        const crPage = new _crPage.CRPage(session, targetInfo.targetId, context, opener, {
          hasUIWindow: targetInfo.type === "page",
          isBackgroundPage: false
        });
        this._crPages.set(targetInfo.targetId, crPage);
        return;
      }
      if (targetInfo.type === "service_worker") {
        const serviceWorker = new _crServiceWorker.CRServiceWorker(context, session, targetInfo.url);
        this._serviceWorkers.set(targetInfo.targetId, serviceWorker);
        context.emit(CRBrowserContext.CREvents.ServiceWorker, serviceWorker);
        return;
      }
      session.detach().catch(() => {
      });
    }
    _onDetachedFromTarget(payload) {
      const targetId = payload.targetId;
      const crPage = this._crPages.get(targetId);
      if (crPage) {
        this._crPages.delete(targetId);
        crPage.didClose();
        return;
      }
      const backgroundPage = this._backgroundPages.get(targetId);
      if (backgroundPage) {
        this._backgroundPages.delete(targetId);
        backgroundPage.didClose();
        return;
      }
      const serviceWorker = this._serviceWorkers.get(targetId);
      if (serviceWorker) {
        this._serviceWorkers.delete(targetId);
        serviceWorker.didClose();
        return;
      }
    }
    _didDisconnect() {
      for (const crPage of this._crPages.values())
        crPage.didClose();
      this._crPages.clear();
      for (const backgroundPage of this._backgroundPages.values())
        backgroundPage.didClose();
      this._backgroundPages.clear();
      for (const serviceWorker of this._serviceWorkers.values())
        serviceWorker.didClose();
      this._serviceWorkers.clear();
      this._didClose();
    }
    _findOwningPage(frameId) {
      for (const crPage of this._crPages.values()) {
        const frame = crPage._page._frameManager.frame(frameId);
        if (frame)
          return crPage;
      }
      return null;
    }
    _onDownloadWillBegin(payload) {
      const page = this._findOwningPage(payload.frameId);
      if (!page) {
        return;
      }
      page.willBeginDownload();
      let originPage = page._initializedPage;
      if (!originPage && page._opener)
        originPage = page._opener._initializedPage;
      if (!originPage)
        return;
      this._downloadCreated(originPage, payload.guid, payload.url, payload.suggestedFilename);
    }
    _onDownloadProgress(payload) {
      if (payload.state === "completed")
        this._downloadFinished(payload.guid, "");
      if (payload.state === "canceled")
        this._downloadFinished(payload.guid, this._closeReason || "canceled");
    }
    async _closePage(crPage) {
      await this._session.send("Target.closeTarget", {
        targetId: crPage._targetId
      });
    }
    async newBrowserCDPSession() {
      return await this._connection.createBrowserSession();
    }
    async startTracing(page, options = {}) {
      (0, _utils.assert)(!this._tracingRecording, "Cannot start recording trace while already recording trace.");
      this._tracingClient = page ? page._delegate._mainFrameSession._client : this._session;
      const defaultCategories = ["-*", "devtools.timeline", "v8.execute", "disabled-by-default-devtools.timeline", "disabled-by-default-devtools.timeline.frame", "toplevel", "blink.console", "blink.user_timing", "latencyInfo", "disabled-by-default-devtools.timeline.stack", "disabled-by-default-v8.cpu_profiler", "disabled-by-default-v8.cpu_profiler.hires"];
      const {
        screenshots = false,
        categories = defaultCategories
      } = options;
      if (screenshots)
        categories.push("disabled-by-default-devtools.screenshot");
      this._tracingRecording = true;
      await this._tracingClient.send("Tracing.start", {
        transferMode: "ReturnAsStream",
        categories: categories.join(",")
      });
    }
    async stopTracing() {
      (0, _utils.assert)(this._tracingClient, "Tracing was not started.");
      const [event] = await Promise.all([new Promise((f) => this._tracingClient.once("Tracing.tracingComplete", f)), this._tracingClient.send("Tracing.end")]);
      const tracingPath = _path.default.join(this.options.artifactsDir, (0, _utils.createGuid)() + ".crtrace");
      await (0, _crProtocolHelper.saveProtocolStream)(this._tracingClient, event.stream, tracingPath);
      this._tracingRecording = false;
      const artifact = new _artifact.Artifact(this, tracingPath);
      artifact.reportFinished();
      return artifact;
    }
    isConnected() {
      return !this._connection._closed;
    }
    async _clientRootSession() {
      if (!this._clientRootSessionPromise)
        this._clientRootSessionPromise = this._connection.createBrowserSession();
      return this._clientRootSessionPromise;
    }
  }
  exports.CRBrowser = CRBrowser;

  class CRBrowserContext extends _browserContext.BrowserContext {
    constructor(browser, browserContextId, options) {
      super(browser, options, browserContextId);
      this._authenticateProxyViaCredentials();
    }
    async _initialize() {
      (0, _utils.assert)(!Array.from(this._browser._crPages.values()).some((page) => page._browserContext === this));
      const promises = [super._initialize()];
      if (this._browser.options.name !== "electron" && this._browser.options.name !== "clank" && this._options.acceptDownloads !== "internal-browser-default") {
        promises.push(this._browser._session.send("Browser.setDownloadBehavior", {
          behavior: this._options.acceptDownloads === "accept" ? "allowAndName" : "deny",
          browserContextId: this._browserContextId,
          downloadPath: this._browser.options.downloadsPath,
          eventsEnabled: true
        }));
      }
      await Promise.all(promises);
    }
    _crPages() {
      return [...this._browser._crPages.values()].filter((crPage) => crPage._browserContext === this);
    }
    pages() {
      return this._crPages().map((crPage) => crPage._initializedPage).filter(Boolean);
    }
    async newPageDelegate() {
      (0, _browserContext.assertBrowserContextIsNotOwned)(this);
      const oldKeys = this._browser.isClank() ? new Set(this._browser._crPages.keys()) : undefined;
      let {
        targetId
      } = await this._browser._session.send("Target.createTarget", {
        url: "about:blank",
        browserContextId: this._browserContextId
      });
      if (oldKeys) {
        const newKeys = new Set(this._browser._crPages.keys());
        for (const key of oldKeys)
          newKeys.delete(key);
        for (const key of newKeys) {
          const page = this._browser._crPages.get(key);
          if (page._opener)
            newKeys.delete(key);
        }
        (0, _utils.assert)(newKeys.size === 1);
        [targetId] = [...newKeys];
      }
      return this._browser._crPages.get(targetId);
    }
    async doGetCookies(urls) {
      const {
        cookies
      } = await this._browser._session.send("Storage.getCookies", {
        browserContextId: this._browserContextId
      });
      return network.filterCookies(cookies.map((c) => {
        const copy = {
          sameSite: "Lax",
          ...c
        };
        delete copy.size;
        delete copy.priority;
        delete copy.session;
        delete copy.sameParty;
        delete copy.sourceScheme;
        delete copy.sourcePort;
        return copy;
      }), urls);
    }
    async addCookies(cookies) {
      await this._browser._session.send("Storage.setCookies", {
        cookies: network.rewriteCookies(cookies),
        browserContextId: this._browserContextId
      });
    }
    async clearCookies() {
      await this._browser._session.send("Storage.clearCookies", {
        browserContextId: this._browserContextId
      });
    }
    async doGrantPermissions(origin, permissions) {
      const webPermissionToProtocol = new Map([
        ["geolocation", "geolocation"],
        ["midi", "midi"],
        ["notifications", "notifications"],
        ["camera", "videoCapture"],
        ["microphone", "audioCapture"],
        ["background-sync", "backgroundSync"],
        ["ambient-light-sensor", "sensors"],
        ["accelerometer", "sensors"],
        ["gyroscope", "sensors"],
        ["magnetometer", "sensors"],
        ["accessibility-events", "accessibilityEvents"],
        ["clipboard-read", "clipboardReadWrite"],
        ["clipboard-write", "clipboardSanitizedWrite"],
        ["payment-handler", "paymentHandler"],
        ["midi-sysex", "midiSysex"]
      ]);
      const filtered = permissions.map((permission) => {
        const protocolPermission = webPermissionToProtocol.get(permission);
        if (!protocolPermission)
          throw new Error("Unknown permission: " + permission);
        return protocolPermission;
      });
      await this._browser._session.send("Browser.grantPermissions", {
        origin: origin === "*" ? undefined : origin,
        browserContextId: this._browserContextId,
        permissions: filtered
      });
    }
    async doClearPermissions() {
      await this._browser._session.send("Browser.resetPermissions", {
        browserContextId: this._browserContextId
      });
    }
    async setGeolocation(geolocation) {
      (0, _browserContext.verifyGeolocation)(geolocation);
      this._options.geolocation = geolocation;
      for (const page of this.pages())
        await page._delegate.updateGeolocation();
    }
    async setExtraHTTPHeaders(headers) {
      this._options.extraHTTPHeaders = headers;
      for (const page of this.pages())
        await page._delegate.updateExtraHTTPHeaders();
      for (const sw of this.serviceWorkers())
        await sw.updateExtraHTTPHeaders(false);
    }
    async setUserAgent(userAgent) {
      this._options.userAgent = userAgent;
      for (const page of this.pages())
        await page._delegate.updateUserAgent();
    }
    async setOffline(offline) {
      this._options.offline = offline;
      for (const page of this.pages())
        await page._delegate.updateOffline();
      for (const sw of this.serviceWorkers())
        await sw.updateOffline(false);
    }
    async doSetHTTPCredentials(httpCredentials) {
      this._options.httpCredentials = httpCredentials;
      for (const page of this.pages())
        await page._delegate.updateHttpCredentials();
      for (const sw of this.serviceWorkers())
        await sw.updateHttpCredentials(false);
    }
    async doAddInitScript(source) {
      for (const page of this.pages())
        await page._delegate.addInitScript(source);
    }
    async doRemoveInitScripts() {
      for (const page of this.pages())
        await page._delegate.removeInitScripts();
    }
    async doExposeBinding(binding) {
      for (const page of this.pages())
        await page._delegate.exposeBinding(binding);
    }
    async doRemoveExposedBindings() {
      for (const page of this.pages())
        await page._delegate.removeExposedBindings();
    }
    async doUpdateRequestInterception() {
      for (const page of this.pages())
        await page._delegate.updateRequestInterception();
      for (const sw of this.serviceWorkers())
        await sw.updateRequestInterception();
    }
    async doClose(reason) {
      const openedBeforeUnloadDialogs = [];
      for (const crPage of this._crPages()) {
        const dialogs = [...crPage._page._frameManager._openedDialogs].filter((dialog) => dialog.type() === "beforeunload");
        openedBeforeUnloadDialogs.push(...dialogs);
      }
      await Promise.all(openedBeforeUnloadDialogs.map((dialog) => dialog.dismiss()));
      if (!this._browserContextId) {
        await this.stopVideoRecording();
        await this._browser.close({
          reason
        });
        return;
      }
      await this._browser._session.send("Target.disposeBrowserContext", {
        browserContextId: this._browserContextId
      });
      this._browser._contexts.delete(this._browserContextId);
      for (const [targetId, serviceWorker] of this._browser._serviceWorkers) {
        if (serviceWorker._browserContext !== this)
          continue;
        serviceWorker.didClose();
        this._browser._serviceWorkers.delete(targetId);
      }
    }
    async stopVideoRecording() {
      await Promise.all(this._crPages().map((crPage) => crPage._mainFrameSession._stopVideoRecording()));
    }
    onClosePersistent() {
      for (const [targetId, backgroundPage] of this._browser._backgroundPages.entries()) {
        if (backgroundPage._browserContext === this && backgroundPage._initializedPage) {
          backgroundPage.didClose();
          this._browser._backgroundPages.delete(targetId);
        }
      }
    }
    async clearCache() {
      for (const page of this._crPages())
        await page._mainFrameSession._networkManager.clearCache();
    }
    async cancelDownload(guid) {
      await this._browser._session.send("Browser.cancelDownload", {
        guid,
        browserContextId: this._browserContextId
      });
    }
    backgroundPages() {
      const result = [];
      for (const backgroundPage of this._browser._backgroundPages.values()) {
        if (backgroundPage._browserContext === this && backgroundPage._initializedPage)
          result.push(backgroundPage._initializedPage);
      }
      return result;
    }
    serviceWorkers() {
      return Array.from(this._browser._serviceWorkers.values()).filter((serviceWorker) => serviceWorker._browserContext === this);
    }
    async newCDPSession(page) {
      let targetId = null;
      if (page instanceof _page.Page) {
        targetId = page._delegate._targetId;
      } else if (page instanceof _frames.Frame) {
        const session = page._page._delegate._sessions.get(page._id);
        if (!session)
          throw new Error(`This frame does not have a separate CDP session, it is a part of the parent frame's session`);
        targetId = session._targetId;
      } else {
        throw new Error("page: expected Page or Frame");
      }
      const rootSession = await this._browser._clientRootSession();
      return rootSession.attachToTarget(targetId);
    }
  }
  exports.CRBrowserContext = CRBrowserContext;
  CRBrowserContext.CREvents = {
    BackgroundPage: "backgroundpage",
    ServiceWorker: "serviceworker"
  };
});

// node_modules/playwright-core/lib/protocol/transport.js
var require_transport = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PipeTransport = undefined;
  var _utils = require_utils3();

  class PipeTransport {
    constructor(pipeWrite, pipeRead, closeable, endian = "le") {
      this._pipeWrite = undefined;
      this._data = Buffer.from([]);
      this._waitForNextTask = (0, _utils.makeWaitForNextTask)();
      this._closed = false;
      this._bytesLeft = 0;
      this.onmessage = undefined;
      this.onclose = undefined;
      this._endian = undefined;
      this._closeableStream = undefined;
      this._pipeWrite = pipeWrite;
      this._endian = endian;
      this._closeableStream = closeable;
      pipeRead.on("data", (buffer) => this._dispatch(buffer));
      pipeRead.on("close", () => {
        this._closed = true;
        if (this.onclose)
          this.onclose();
      });
      this.onmessage = undefined;
      this.onclose = undefined;
    }
    send(message) {
      if (this._closed)
        throw new Error("Pipe has been closed");
      const data = Buffer.from(message, "utf-8");
      const dataLength = Buffer.alloc(4);
      if (this._endian === "be")
        dataLength.writeUInt32BE(data.length, 0);
      else
        dataLength.writeUInt32LE(data.length, 0);
      this._pipeWrite.write(dataLength);
      this._pipeWrite.write(data);
    }
    close() {
      this._closeableStream.close();
    }
    _dispatch(buffer) {
      this._data = Buffer.concat([this._data, buffer]);
      while (true) {
        if (!this._bytesLeft && this._data.length < 4) {
          break;
        }
        if (!this._bytesLeft) {
          this._bytesLeft = this._endian === "be" ? this._data.readUInt32BE(0) : this._data.readUInt32LE(0);
          this._data = this._data.slice(4);
        }
        if (!this._bytesLeft || this._data.length < this._bytesLeft) {
          break;
        }
        const message = this._data.slice(0, this._bytesLeft);
        this._data = this._data.slice(this._bytesLeft);
        this._bytesLeft = 0;
        this._waitForNextTask(() => {
          if (this.onmessage)
            this.onmessage(message.toString("utf-8"));
        });
      }
    }
  }
  exports.PipeTransport = PipeTransport;
});

// node_modules/playwright-core/lib/server/chromium/chromiumSwitches.js
var require_chromiumSwitches = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.chromiumSwitches = undefined;
  var chromiumSwitches = exports.chromiumSwitches = [
    "--disable-field-trial-config",
    "--disable-background-networking",
    "--enable-features=NetworkService,NetworkServiceInProcess",
    "--disable-background-timer-throttling",
    "--disable-backgrounding-occluded-windows",
    "--disable-back-forward-cache",
    "--disable-breakpad",
    "--disable-client-side-phishing-detection",
    "--disable-component-extensions-with-background-pages",
    "--disable-component-update",
    "--no-default-browser-check",
    "--disable-default-apps",
    "--disable-dev-shm-usage",
    "--disable-extensions",
    "--disable-features=ImprovedCookieControls,LazyFrameLoading,GlobalMediaControls,DestroyProfileOnBrowserClose,MediaRouter,DialMediaRouteProvider,AcceptCHFrame,AutoExpandDetailsElement,CertificateTransparencyComponentUpdater,AvoidUnnecessaryBeforeUnloadCheckSync,Translate,HttpsUpgrades,PaintHolding",
    "--allow-pre-commit-input",
    "--disable-hang-monitor",
    "--disable-ipc-flooding-protection",
    "--disable-popup-blocking",
    "--disable-prompt-on-repost",
    "--disable-renderer-backgrounding",
    "--force-color-profile=srgb",
    "--metrics-recording-only",
    "--no-first-run",
    "--enable-automation",
    "--password-store=basic",
    "--use-mock-keychain",
    "--no-service-autorun",
    "--export-tagged-pdf",
    "--disable-search-engine-choice-screen"
  ];
});

// node_modules/playwright-core/lib/server/android/android.js
var require_android = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var encodeWebFrame = function(data) {
    return _utilsBundle.wsSender.frame(Buffer.from(data), {
      opcode: 1,
      mask: true,
      fin: true,
      readOnly: true
    })[0];
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AndroidDevice = exports.Android = undefined;
  var _utilsBundle = require_utilsBundle();
  var _events = import.meta.require("events");
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _os = _interopRequireDefault(import.meta.require("os"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _utils = require_utils3();
  var _fileUtils = require_fileUtils();
  var _browserContext = require_browserContext();
  var _progress = require_progress();
  var _crBrowser = require_crBrowser();
  var _helper = require_helper();
  var _transport = require_transport();
  var _debugLogger = require_debugLogger();
  var _processLauncher = require_processLauncher();
  var _timeoutSettings = require_timeoutSettings();
  var _instrumentation = require_instrumentation();
  var _chromiumSwitches = require_chromiumSwitches();
  var _registry = require_registry();
  var ARTIFACTS_FOLDER = _path.default.join(_os.default.tmpdir(), "playwright-artifacts-");

  class Android extends _instrumentation.SdkObject {
    constructor(parent, backend) {
      super(parent, "android");
      this._backend = undefined;
      this._devices = new Map;
      this._timeoutSettings = undefined;
      this._backend = backend;
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings;
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
    }
    async devices(options) {
      const devices = (await this._backend.devices(options)).filter((d) => d.status === "device");
      const newSerials = new Set;
      for (const d of devices) {
        newSerials.add(d.serial);
        if (this._devices.has(d.serial))
          continue;
        const device = await AndroidDevice.create(this, d, options);
        this._devices.set(d.serial, device);
      }
      for (const d of this._devices.keys()) {
        if (!newSerials.has(d))
          this._devices.delete(d);
      }
      return [...this._devices.values()];
    }
    _deviceClosed(device) {
      this._devices.delete(device.serial);
    }
  }
  exports.Android = Android;

  class AndroidDevice extends _instrumentation.SdkObject {
    constructor(android, backend, model, options) {
      super(android, "android-device");
      this._backend = undefined;
      this.model = undefined;
      this.serial = undefined;
      this._options = undefined;
      this._driverPromise = undefined;
      this._lastId = 0;
      this._callbacks = new Map;
      this._pollingWebViews = undefined;
      this._timeoutSettings = undefined;
      this._webViews = new Map;
      this._browserConnections = new Set;
      this._android = undefined;
      this._isClosed = false;
      this._android = android;
      this._backend = backend;
      this.model = model;
      this.serial = backend.serial;
      this._options = options;
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings(android._timeoutSettings);
    }
    static async create(android, backend, options) {
      await backend.init();
      const model = await backend.runCommand("shell:getprop ro.product.model");
      const device = new AndroidDevice(android, backend, model.toString().trim(), options);
      await device._init();
      return device;
    }
    async _init() {
      await this._refreshWebViews();
      const poll = () => {
        this._pollingWebViews = setTimeout(() => this._refreshWebViews().then(poll).catch(() => {
          this.close().catch(() => {
          });
        }), 500);
      };
      poll();
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
    }
    async shell(command) {
      const result = await this._backend.runCommand(`shell:${command}`);
      await this._refreshWebViews();
      return result;
    }
    async open(command) {
      return await this._backend.open(`${command}`);
    }
    async screenshot() {
      return await this._backend.runCommand(`shell:screencap -p`);
    }
    async _driver() {
      if (this._isClosed)
        return;
      if (!this._driverPromise)
        this._driverPromise = this._installDriver();
      return this._driverPromise;
    }
    async _installDriver() {
      (0, _utilsBundle.debug)("pw:android")("Stopping the old driver");
      await this.shell(`am force-stop com.microsoft.playwright.androiddriver`);
      if (!this._options.omitDriverInstall) {
        (0, _utilsBundle.debug)("pw:android")("Uninstalling the old driver");
        await this.shell(`cmd package uninstall com.microsoft.playwright.androiddriver`);
        await this.shell(`cmd package uninstall com.microsoft.playwright.androiddriver.test`);
        (0, _utilsBundle.debug)("pw:android")("Installing the new driver");
        const executable = _registry.registry.findExecutable("android");
        const packageManagerCommand = (0, _utils.getPackageManagerExecCommand)();
        for (const file of ["android-driver.apk", "android-driver-target.apk"]) {
          const fullName = _path.default.join(executable.directory, file);
          if (!_fs.default.existsSync(fullName))
            throw new Error(`Please install Android driver apk using '${packageManagerCommand} playwright install android'`);
          await this.installApk(await _fs.default.promises.readFile(fullName));
        }
      } else {
        (0, _utilsBundle.debug)("pw:android")("Skipping the driver installation");
      }
      (0, _utilsBundle.debug)("pw:android")("Starting the new driver");
      this.shell("am instrument -w com.microsoft.playwright.androiddriver.test/androidx.test.runner.AndroidJUnitRunner").catch((e) => (0, _utilsBundle.debug)("pw:android")(e));
      const socket = await this._waitForLocalAbstract("playwright_android_driver_socket");
      const transport = new _transport.PipeTransport(socket, socket, socket, "be");
      transport.onmessage = (message) => {
        const response = JSON.parse(message);
        const {
          id,
          result,
          error
        } = response;
        const callback = this._callbacks.get(id);
        if (!callback)
          return;
        if (error)
          callback.reject(new Error(error));
        else
          callback.fulfill(result);
        this._callbacks.delete(id);
      };
      return transport;
    }
    async _waitForLocalAbstract(socketName) {
      let socket;
      (0, _utilsBundle.debug)("pw:android")(`Polling the socket localabstract:${socketName}`);
      while (!socket) {
        try {
          socket = await this._backend.open(`localabstract:${socketName}`);
        } catch (e) {
          await new Promise((f) => setTimeout(f, 250));
        }
      }
      (0, _utilsBundle.debug)("pw:android")(`Connected to localabstract:${socketName}`);
      return socket;
    }
    async send(method, params = {}) {
      params.timeout = this._timeoutSettings.timeout(params);
      const driver = await this._driver();
      if (!driver)
        throw new Error("Device is closed");
      const id = ++this._lastId;
      const result = new Promise((fulfill, reject) => this._callbacks.set(id, {
        fulfill,
        reject
      }));
      driver.send(JSON.stringify({
        id,
        method,
        params
      }));
      return result;
    }
    async close() {
      if (this._isClosed)
        return;
      this._isClosed = true;
      if (this._pollingWebViews)
        clearTimeout(this._pollingWebViews);
      for (const connection of this._browserConnections)
        await connection.close();
      if (this._driverPromise) {
        const driver = await this._driver();
        driver === null || driver === undefined || driver.close();
      }
      await this._backend.close();
      this._android._deviceClosed(this);
      this.emit(AndroidDevice.Events.Close);
    }
    async launchBrowser(pkg = "com.android.chrome", options) {
      (0, _utilsBundle.debug)("pw:android")("Force-stopping", pkg);
      await this._backend.runCommand(`shell:am force-stop ${pkg}`);
      const socketName = (0, _utils.isUnderTest)() ? "webview_devtools_remote_playwright_test" : "playwright_" + (0, _utils.createGuid)() + "_devtools_remote";
      const commandLine = this._defaultArgs(options, socketName).join(" ");
      (0, _utilsBundle.debug)("pw:android")("Starting", pkg, commandLine);
      await this._backend.runCommand(`shell:echo "${Buffer.from(commandLine).toString("base64")}" | base64 -d > /data/local/tmp/chrome-command-line`);
      await this._backend.runCommand(`shell:am start -a android.intent.action.VIEW -d about:blank ${pkg}`);
      const browserContext = await this._connectToBrowser(socketName, options);
      await this._backend.runCommand(`shell:rm /data/local/tmp/chrome-command-line`);
      return browserContext;
    }
    _defaultArgs(options, socketName) {
      const chromeArguments = ["_", "--disable-fre", "--no-default-browser-check", `--remote-debugging-socket-name=${socketName}`, ..._chromiumSwitches.chromiumSwitches, ...this._innerDefaultArgs(options)];
      return chromeArguments;
    }
    _innerDefaultArgs(options) {
      const {
        args = [],
        proxy
      } = options;
      const chromeArguments = [];
      if (proxy) {
        chromeArguments.push(`--proxy-server=${proxy.server}`);
        const proxyBypassRules = [];
        if (proxy.bypass)
          proxyBypassRules.push(...proxy.bypass.split(",").map((t) => t.trim()).map((t) => t.startsWith(".") ? "*" + t : t));
        if (!process.env.PLAYWRIGHT_DISABLE_FORCED_CHROMIUM_PROXIED_LOOPBACK && !proxyBypassRules.includes("<-loopback>"))
          proxyBypassRules.push("<-loopback>");
        if (proxyBypassRules.length > 0)
          chromeArguments.push(`--proxy-bypass-list=${proxyBypassRules.join(";")}`);
      }
      chromeArguments.push(...args);
      return chromeArguments;
    }
    async connectToWebView(socketName) {
      const webView = this._webViews.get(socketName);
      if (!webView)
        throw new Error("WebView has been closed");
      return await this._connectToBrowser(socketName);
    }
    async _connectToBrowser(socketName, options = {}) {
      const socket = await this._waitForLocalAbstract(socketName);
      const androidBrowser = new AndroidBrowser(this, socket);
      await androidBrowser._init();
      this._browserConnections.add(androidBrowser);
      const artifactsDir = await _fs.default.promises.mkdtemp(ARTIFACTS_FOLDER);
      const cleanupArtifactsDir = async () => {
        const errors = await (0, _fileUtils.removeFolders)([artifactsDir]);
        for (let i = 0;i < (errors || []).length; ++i)
          (0, _utilsBundle.debug)("pw:android")(`exception while removing ${artifactsDir}: ${errors[i]}`);
      };
      _processLauncher.gracefullyCloseSet.add(cleanupArtifactsDir);
      socket.on("close", async () => {
        _processLauncher.gracefullyCloseSet.delete(cleanupArtifactsDir);
        cleanupArtifactsDir().catch((e) => (0, _utilsBundle.debug)("pw:android")(`could not cleanup artifacts dir: ${e}`));
      });
      const browserOptions = {
        name: "clank",
        isChromium: true,
        slowMo: 0,
        persistent: {
          ...options,
          noDefaultViewport: true
        },
        artifactsDir,
        downloadsPath: artifactsDir,
        tracesDir: artifactsDir,
        browserProcess: new ClankBrowserProcess(androidBrowser),
        proxy: options.proxy,
        protocolLogger: _helper.helper.debugProtocolLogger(),
        browserLogsCollector: new _debugLogger.RecentLogsCollector,
        originalLaunchOptions: {}
      };
      (0, _browserContext.validateBrowserContextOptions)(options, browserOptions);
      const browser = await _crBrowser.CRBrowser.connect(this.attribution.playwright, androidBrowser, browserOptions);
      const controller = new _progress.ProgressController((0, _instrumentation.serverSideCallMetadata)(), this);
      const defaultContext = browser._defaultContext;
      await controller.run(async (progress2) => {
        await defaultContext._loadDefaultContextAsIs(progress2);
      });
      return defaultContext;
    }
    webViews() {
      return [...this._webViews.values()];
    }
    async installApk(content, options) {
      const args = options && options.args ? options.args : ["-r", "-t", "-S"];
      (0, _utilsBundle.debug)("pw:android")("Opening install socket");
      const installSocket = await this._backend.open(`shell:cmd package install ${args.join(" ")} ${content.length}`);
      (0, _utilsBundle.debug)("pw:android")("Writing driver bytes: " + content.length);
      await installSocket.write(content);
      const success = await new Promise((f) => installSocket.on("data", f));
      (0, _utilsBundle.debug)("pw:android")("Written driver bytes: " + success);
      installSocket.close();
    }
    async push(content, path, mode = 420) {
      const socket = await this._backend.open(`sync:`);
      const sendHeader = async (command, length) => {
        const buffer = Buffer.alloc(command.length + 4);
        buffer.write(command, 0);
        buffer.writeUInt32LE(length, command.length);
        await socket.write(buffer);
      };
      const send = async (command, data) => {
        await sendHeader(command, data.length);
        await socket.write(data);
      };
      await send("SEND", Buffer.from(`${path},${mode}`));
      const maxChunk = 65535;
      for (let i = 0;i < content.length; i += maxChunk)
        await send("DATA", content.slice(i, i + maxChunk));
      await sendHeader("DONE", Date.now() / 1000 | 0);
      const result = await new Promise((f) => socket.once("data", f));
      const code = result.slice(0, 4).toString();
      if (code !== "OKAY")
        throw new Error("Could not push: " + code);
      socket.close();
    }
    async _refreshWebViews() {
      const sockets = (await this._backend.runCommand(`shell:cat /proc/net/unix | grep webview_devtools_remote`)).toString().split("\n");
      if (this._isClosed)
        return;
      const socketNames = new Set;
      for (const line of sockets) {
        const matchSocketName = line.match(/[^@]+@(.*?webview_devtools_remote_?.*)/);
        if (!matchSocketName)
          continue;
        const socketName = matchSocketName[1];
        socketNames.add(socketName);
        if (this._webViews.has(socketName))
          continue;
        const match = line.match(/[^@]+@.*?webview_devtools_remote_?(\d*)/);
        let pid = -1;
        if (match && match[1])
          pid = +match[1];
        const pkg = await this._extractPkg(pid);
        if (this._isClosed)
          return;
        const webView = {
          pid,
          pkg,
          socketName
        };
        this._webViews.set(socketName, webView);
        this.emit(AndroidDevice.Events.WebViewAdded, webView);
      }
      for (const p of this._webViews.keys()) {
        if (!socketNames.has(p)) {
          this._webViews.delete(p);
          this.emit(AndroidDevice.Events.WebViewRemoved, p);
        }
      }
    }
    async _extractPkg(pid) {
      let pkg = "";
      if (pid === -1)
        return pkg;
      const procs = (await this._backend.runCommand(`shell:ps -A | grep ${pid}`)).toString().split("\n");
      for (const proc of procs) {
        const match = proc.match(/[^\s]+\s+(\d+).*$/);
        if (!match)
          continue;
        pkg = proc.substring(proc.lastIndexOf(" ") + 1);
      }
      return pkg;
    }
  }
  exports.AndroidDevice = AndroidDevice;
  AndroidDevice.Events = {
    WebViewAdded: "webViewAdded",
    WebViewRemoved: "webViewRemoved",
    Close: "close"
  };

  class AndroidBrowser extends _events.EventEmitter {
    constructor(device, socket) {
      super();
      this.device = undefined;
      this._socket = undefined;
      this._receiver = undefined;
      this._waitForNextTask = (0, _utils.makeWaitForNextTask)();
      this.onmessage = undefined;
      this.onclose = undefined;
      this.setMaxListeners(0);
      this.device = device;
      this._socket = socket;
      this._socket.on("close", () => {
        this._waitForNextTask(() => {
          if (this.onclose)
            this.onclose();
        });
      });
      this._receiver = new _utilsBundle.wsReceiver;
      this._receiver.on("message", (message) => {
        this._waitForNextTask(() => {
          if (this.onmessage)
            this.onmessage(JSON.parse(message));
        });
      });
    }
    async _init() {
      await this._socket.write(Buffer.from(`GET /devtools/browser HTTP/1.1\r
Upgrade: WebSocket\r
Connection: Upgrade\r
Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\r
Sec-WebSocket-Version: 13\r
\r
`));
      await new Promise((f) => this._socket.once("data", f));
      this._socket.on("data", (data) => this._receiver._write(data, "binary", () => {
      }));
    }
    async send(s) {
      await this._socket.write(encodeWebFrame(JSON.stringify(s)));
    }
    async close() {
      this._socket.close();
    }
  }

  class ClankBrowserProcess {
    constructor(browser) {
      this._browser = undefined;
      this.onclose = undefined;
      this._browser = browser;
    }
    async kill() {
    }
    async close() {
      await this._browser.close();
    }
  }
});

// node_modules/playwright-core/lib/server/android/backendAdb.js
var require_backendAdb = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  async function runCommand(command, host = "127.0.0.1", port = 5037, serial) {
    (0, _utilsBundle.debug)("pw:adb:runCommand")(command, serial);
    const socket = new BufferedSocketWrapper(command, net.createConnection({
      host,
      port
    }));
    try {
      if (serial) {
        await socket.write(encodeMessage(`host:transport:${serial}`));
        const status2 = await socket.read(4);
        (0, _utils.assert)(status2.toString() === "OKAY", status2.toString());
      }
      await socket.write(encodeMessage(command));
      const status = await socket.read(4);
      (0, _utils.assert)(status.toString() === "OKAY", status.toString());
      let commandOutput;
      if (!command.startsWith("shell:")) {
        const remainingLength = parseInt((await socket.read(4)).toString(), 16);
        commandOutput = await socket.read(remainingLength);
      } else {
        commandOutput = await socket.readAll();
      }
      return commandOutput;
    } finally {
      socket.close();
    }
  }
  async function open2(command, host = "127.0.0.1", port = 5037, serial) {
    const socket = new BufferedSocketWrapper(command, net.createConnection({
      host,
      port
    }));
    if (serial) {
      await socket.write(encodeMessage(`host:transport:${serial}`));
      const status2 = await socket.read(4);
      (0, _utils.assert)(status2.toString() === "OKAY", status2.toString());
    }
    await socket.write(encodeMessage(command));
    const status = await socket.read(4);
    (0, _utils.assert)(status.toString() === "OKAY", status.toString());
    return socket;
  }
  var encodeMessage = function(message) {
    let lenHex = message.length.toString(16);
    lenHex = "0".repeat(4 - lenHex.length) + lenHex;
    return Buffer.from(lenHex + message);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AdbBackend = undefined;
  var _utilsBundle = require_utilsBundle();
  var net = _interopRequireWildcard(import.meta.require("net"));
  var _events = import.meta.require("events");
  var _utils = require_utils3();

  class AdbBackend {
    async devices(options = {}) {
      const result = await runCommand("host:devices", options.host, options.port);
      const lines = result.toString().trim().split("\n");
      return lines.map((line) => {
        const [serial, status] = line.trim().split("\t");
        return new AdbDevice(serial, status, options.host, options.port);
      });
    }
  }
  exports.AdbBackend = AdbBackend;

  class AdbDevice {
    constructor(serial, status, host, port) {
      this.serial = undefined;
      this.status = undefined;
      this.host = undefined;
      this.port = undefined;
      this._closed = false;
      this.serial = serial;
      this.status = status;
      this.host = host;
      this.port = port;
    }
    async init() {
    }
    async close() {
      this._closed = true;
    }
    runCommand(command) {
      if (this._closed)
        throw new Error("Device is closed");
      return runCommand(command, this.host, this.port, this.serial);
    }
    async open(command) {
      if (this._closed)
        throw new Error("Device is closed");
      const result = await open2(command, this.host, this.port, this.serial);
      result.becomeSocket();
      return result;
    }
  }

  class BufferedSocketWrapper extends _events.EventEmitter {
    constructor(command, socket) {
      super();
      this.guid = (0, _utils.createGuid)();
      this._socket = undefined;
      this._buffer = Buffer.from([]);
      this._isSocket = false;
      this._notifyReader = undefined;
      this._connectPromise = undefined;
      this._isClosed = false;
      this._command = undefined;
      this._command = command;
      this._socket = socket;
      this._connectPromise = new Promise((f) => this._socket.on("connect", f));
      this._socket.on("data", (data) => {
        (0, _utilsBundle.debug)("pw:adb:data")(data.toString());
        if (this._isSocket) {
          this.emit("data", data);
          return;
        }
        this._buffer = Buffer.concat([this._buffer, data]);
        if (this._notifyReader)
          this._notifyReader();
      });
      this._socket.on("close", () => {
        this._isClosed = true;
        if (this._notifyReader)
          this._notifyReader();
        this.close();
        this.emit("close");
      });
      this._socket.on("error", (error) => this.emit("error", error));
    }
    async write(data) {
      (0, _utilsBundle.debug)("pw:adb:send")(data.toString().substring(0, 100) + "...");
      await this._connectPromise;
      await new Promise((f) => this._socket.write(data, f));
    }
    close() {
      if (this._isClosed)
        return;
      (0, _utilsBundle.debug)("pw:adb")("Close " + this._command);
      this._socket.destroy();
    }
    async read(length) {
      await this._connectPromise;
      (0, _utils.assert)(!this._isSocket, "Can not read by length in socket mode");
      while (this._buffer.length < length)
        await new Promise((f) => this._notifyReader = f);
      const result = this._buffer.slice(0, length);
      this._buffer = this._buffer.slice(length);
      (0, _utilsBundle.debug)("pw:adb:recv")(result.toString().substring(0, 100) + "...");
      return result;
    }
    async readAll() {
      while (!this._isClosed)
        await new Promise((f) => this._notifyReader = f);
      return this._buffer;
    }
    becomeSocket() {
      (0, _utils.assert)(!this._buffer.length);
      this._isSocket = true;
    }
  }
});

// node_modules/playwright-core/lib/server/transport.js
var require_transport2 = __commonJS((exports) => {
  var stripQueryParams = function(url) {
    try {
      const u = new URL(url);
      u.search = "";
      u.hash = "";
      return u.toString();
    } catch {
      return url;
    }
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.perMessageDeflate = exports.WebSocketTransport = undefined;
  var _utilsBundle = require_utilsBundle();
  var _utils = require_utils3();
  var _happyEyeballs = require_happy_eyeballs();
  var perMessageDeflate = exports.perMessageDeflate = {
    zlibDeflateOptions: {
      level: 3
    },
    zlibInflateOptions: {
      chunkSize: 10 * 1024
    },
    threshold: 10 * 1024
  };

  class WebSocketTransport {
    static async connect(progress2, url, headers, followRedirects, debugLogHeader) {
      return await WebSocketTransport._connect(progress2, url, headers || {}, {
        follow: !!followRedirects,
        hadRedirects: false
      }, debugLogHeader);
    }
    static async _connect(progress2, url, headers, redirect, debugLogHeader) {
      const logUrl = stripQueryParams(url);
      progress2 === null || progress2 === undefined || progress2.log(`<ws connecting> ${logUrl}`);
      const transport = new WebSocketTransport(progress2, url, logUrl, headers, redirect.follow && redirect.hadRedirects, debugLogHeader);
      let success = false;
      progress2 === null || progress2 === undefined || progress2.cleanupWhenAborted(async () => {
        if (!success)
          await transport.closeAndWait().catch((e) => null);
      });
      const result = await new Promise((fulfill, reject) => {
        transport._ws.on("open", async () => {
          progress2 === null || progress2 === undefined || progress2.log(`<ws connected> ${logUrl}`);
          fulfill({
            transport
          });
        });
        transport._ws.on("error", (event) => {
          progress2 === null || progress2 === undefined || progress2.log(`<ws connect error> ${logUrl} ${event.message}`);
          reject(new Error("WebSocket error: " + event.message));
          transport._ws.close();
        });
        transport._ws.on("unexpected-response", (request, response) => {
          if (redirect.follow && !redirect.hadRedirects && (response.statusCode === 301 || response.statusCode === 302 || response.statusCode === 307 || response.statusCode === 308)) {
            fulfill({
              redirect: response
            });
            transport._ws.close();
            return;
          }
          for (let i = 0;i < response.rawHeaders.length; i += 2) {
            if (debugLogHeader && response.rawHeaders[i] === debugLogHeader)
              progress2 === null || progress2 === undefined || progress2.log(response.rawHeaders[i + 1]);
          }
          const chunks = [];
          const errorPrefix = `${logUrl} ${response.statusCode} ${response.statusMessage}`;
          response.on("data", (chunk) => chunks.push(chunk));
          response.on("close", () => {
            const error = chunks.length ? `${errorPrefix}\n${Buffer.concat(chunks)}` : errorPrefix;
            progress2 === null || progress2 === undefined || progress2.log(`<ws unexpected response> ${error}`);
            reject(new Error("WebSocket error: " + error));
            transport._ws.close();
          });
        });
      });
      if (result.redirect) {
        const newHeaders = Object.fromEntries(Object.entries(headers || {}).filter(([name]) => {
          return !name.includes("access-key") && name.toLowerCase() !== "authorization";
        }));
        return WebSocketTransport._connect(progress2, result.redirect.headers.location, newHeaders, {
          follow: true,
          hadRedirects: true
        }, debugLogHeader);
      }
      success = true;
      return transport;
    }
    constructor(progress2, url, logUrl, headers, followRedirects, debugLogHeader) {
      var _progress$timeUntilDe;
      this._ws = undefined;
      this._progress = undefined;
      this._logUrl = undefined;
      this.onmessage = undefined;
      this.onclose = undefined;
      this.wsEndpoint = undefined;
      this.headers = [];
      this.wsEndpoint = url;
      this._logUrl = logUrl;
      this._ws = new _utilsBundle.ws(url, [], {
        maxPayload: 256 * 1024 * 1024,
        handshakeTimeout: Math.max((_progress$timeUntilDe = progress2 === null || progress2 === undefined ? undefined : progress2.timeUntilDeadline()) !== null && _progress$timeUntilDe !== undefined ? _progress$timeUntilDe : 30000, 1),
        headers,
        followRedirects,
        agent: /^(https|wss):\/\//.test(url) ? _happyEyeballs.httpsHappyEyeballsAgent : _happyEyeballs.httpHappyEyeballsAgent,
        perMessageDeflate
      });
      this._ws.on("upgrade", (response) => {
        for (let i = 0;i < response.rawHeaders.length; i += 2) {
          this.headers.push({
            name: response.rawHeaders[i],
            value: response.rawHeaders[i + 1]
          });
          if (debugLogHeader && response.rawHeaders[i] === debugLogHeader)
            progress2 === null || progress2 === undefined || progress2.log(response.rawHeaders[i + 1]);
        }
      });
      this._progress = progress2;
      const messageWrap = (0, _utils.makeWaitForNextTask)();
      this._ws.addEventListener("message", (event) => {
        messageWrap(() => {
          const eventData = event.data;
          let parsedJson;
          try {
            parsedJson = JSON.parse(eventData);
          } catch (e) {
            var _this$_progress;
            (_this$_progress = this._progress) === null || _this$_progress === undefined || _this$_progress.log(`<closing ws> Closing websocket due to malformed JSON. eventData=${eventData} e=${e === null || e === undefined ? undefined : e.message}`);
            this._ws.close();
            return;
          }
          try {
            if (this.onmessage)
              this.onmessage.call(null, parsedJson);
          } catch (e) {
            var _this$_progress2;
            (_this$_progress2 = this._progress) === null || _this$_progress2 === undefined || _this$_progress2.log(`<closing ws> Closing websocket due to failed onmessage callback. eventData=${eventData} e=${e === null || e === undefined ? undefined : e.message}`);
            this._ws.close();
          }
        });
      });
      this._ws.addEventListener("close", (event) => {
        var _this$_progress3;
        (_this$_progress3 = this._progress) === null || _this$_progress3 === undefined || _this$_progress3.log(`<ws disconnected> ${logUrl} code=${event.code} reason=${event.reason}`);
        if (this.onclose)
          this.onclose.call(null);
      });
      this._ws.addEventListener("error", (error) => {
        var _this$_progress4;
        return (_this$_progress4 = this._progress) === null || _this$_progress4 === undefined ? undefined : _this$_progress4.log(`<ws error> ${logUrl} ${error.type} ${error.message}`);
      });
    }
    send(message) {
      this._ws.send(JSON.stringify(message));
    }
    close() {
      var _this$_progress5;
      (_this$_progress5 = this._progress) === null || _this$_progress5 === undefined || _this$_progress5.log(`<ws disconnecting> ${this._logUrl}`);
      this._ws.close();
    }
    async closeAndWait() {
      if (this._ws.readyState === _utilsBundle.ws.CLOSED)
        return;
      const promise = new Promise((f) => this._ws.once("close", f));
      this.close();
      await promise;
    }
  }
  exports.WebSocketTransport = WebSocketTransport;
});

// node_modules/playwright-core/lib/server/pipeTransport.js
var require_pipeTransport = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PipeTransport = undefined;
  var _utils = require_utils3();
  var _debugLogger = require_debugLogger();

  class PipeTransport {
    constructor(pipeWrite, pipeRead) {
      this._pipeRead = undefined;
      this._pipeWrite = undefined;
      this._pendingBuffers = [];
      this._waitForNextTask = (0, _utils.makeWaitForNextTask)();
      this._closed = false;
      this._onclose = undefined;
      this.onmessage = undefined;
      this._pipeRead = pipeRead;
      this._pipeWrite = pipeWrite;
      pipeRead.on("data", (buffer) => this._dispatch(buffer));
      pipeRead.on("close", () => {
        this._closed = true;
        if (this._onclose)
          this._onclose.call(null);
      });
      pipeRead.on("error", (e) => _debugLogger.debugLogger.log("error", e));
      pipeWrite.on("error", (e) => _debugLogger.debugLogger.log("error", e));
      this.onmessage = undefined;
    }
    get onclose() {
      return this._onclose;
    }
    set onclose(onclose) {
      this._onclose = onclose;
      if (onclose && !this._pipeRead.readable)
        onclose();
    }
    send(message) {
      if (this._closed)
        throw new Error("Pipe has been closed");
      this._pipeWrite.write(JSON.stringify(message));
      this._pipeWrite.write("\0");
    }
    close() {
      throw new Error("unimplemented");
    }
    _dispatch(buffer) {
      let end = buffer.indexOf("\0");
      if (end === -1) {
        this._pendingBuffers.push(buffer);
        return;
      }
      this._pendingBuffers.push(buffer.slice(0, end));
      const message = Buffer.concat(this._pendingBuffers).toString();
      this._waitForNextTask(() => {
        if (this.onmessage)
          this.onmessage.call(null, JSON.parse(message));
      });
      let start = end + 1;
      end = buffer.indexOf("\0", start);
      while (end !== -1) {
        const message2 = buffer.toString(undefined, start, end);
        this._waitForNextTask(() => {
          if (this.onmessage)
            this.onmessage.call(null, JSON.parse(message2));
        });
        start = end + 1;
        end = buffer.indexOf("\0", start);
      }
      this._pendingBuffers = [buffer.slice(start)];
    }
  }
  exports.PipeTransport = PipeTransport;
});

// node_modules/playwright-core/lib/server/browserType.js
var require_browserType = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var copyTestHooks = function(from, to) {
    for (const [key, value] of Object.entries(from)) {
      if (key.startsWith("__testHook"))
        to[key] = value;
    }
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.kNoXServerRunningError = exports.BrowserType = undefined;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var os = _interopRequireWildcard(import.meta.require("os"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _browserContext = require_browserContext();
  var _registry = require_registry();
  var _transport = require_transport2();
  var _processLauncher = require_processLauncher();
  var _pipeTransport = require_pipeTransport();
  var _progress = require_progress();
  var _timeoutSettings = require_timeoutSettings();
  var _utils = require_utils3();
  var _fileUtils = require_fileUtils();
  var _helper = require_helper();
  var _debugLogger = require_debugLogger();
  var _instrumentation = require_instrumentation();
  var _manualPromise = require_manualPromise();
  var _protocolError = require_protocolError();
  var kNoXServerRunningError = exports.kNoXServerRunningError = "Looks like you launched a headed browser without having a XServer running.\nSet either \'headless: true\' or use \'xvfb-run <your-playwright-app>\' before running Playwright.\n\n<3 Playwright Team";

  class BrowserType extends _instrumentation.SdkObject {
    constructor(parent, browserName) {
      super(parent, "browser-type");
      this._name = undefined;
      this.attribution.browserType = this;
      this._name = browserName;
    }
    executablePath() {
      return _registry.registry.findExecutable(this._name).executablePath(this.attribution.playwright.options.sdkLanguage) || "";
    }
    name() {
      return this._name;
    }
    async launch(metadata, options, protocolLogger) {
      options = this._validateLaunchOptions(options);
      const controller = new _progress.ProgressController(metadata, this);
      controller.setLogName("browser");
      const browser = await controller.run((progress2) => {
        const seleniumHubUrl = options.__testHookSeleniumRemoteURL || process.env.SELENIUM_REMOTE_URL;
        if (seleniumHubUrl)
          return this._launchWithSeleniumHub(progress2, seleniumHubUrl, options);
        return this._innerLaunchWithRetries(progress2, options, undefined, _helper.helper.debugProtocolLogger(protocolLogger)).catch((e) => {
          throw this._rewriteStartupLog(e);
        });
      }, _timeoutSettings.TimeoutSettings.launchTimeout(options));
      return browser;
    }
    async launchPersistentContext(metadata, userDataDir, options) {
      options = this._validateLaunchOptions(options);
      const controller = new _progress.ProgressController(metadata, this);
      const persistent = options;
      controller.setLogName("browser");
      const browser = await controller.run((progress2) => {
        return this._innerLaunchWithRetries(progress2, options, persistent, _helper.helper.debugProtocolLogger(), userDataDir).catch((e) => {
          throw this._rewriteStartupLog(e);
        });
      }, _timeoutSettings.TimeoutSettings.launchTimeout(options));
      return browser._defaultContext;
    }
    async _innerLaunchWithRetries(progress2, options, persistent, protocolLogger, userDataDir) {
      try {
        return await this._innerLaunch(progress2, options, persistent, protocolLogger, userDataDir);
      } catch (error) {
        const errorMessage = typeof error === "object" && typeof error.message === "string" ? error.message : "";
        if (errorMessage.includes("Inconsistency detected by ld.so")) {
          progress2.log(`<restarting browser due to hitting race condition in glibc>`);
          return this._innerLaunch(progress2, options, persistent, protocolLogger, userDataDir);
        }
        throw error;
      }
    }
    async _innerLaunch(progress2, options, persistent, protocolLogger, maybeUserDataDir) {
      options.proxy = options.proxy ? (0, _browserContext.normalizeProxySettings)(options.proxy) : undefined;
      const browserLogsCollector = new _debugLogger.RecentLogsCollector;
      const {
        browserProcess,
        userDataDir,
        artifactsDir,
        transport
      } = await this._launchProcess(progress2, options, !!persistent, browserLogsCollector, maybeUserDataDir);
      if (options.__testHookBeforeCreateBrowser)
        await options.__testHookBeforeCreateBrowser();
      const browserOptions = {
        name: this._name,
        isChromium: this._name === "chromium",
        channel: options.channel,
        slowMo: options.slowMo,
        persistent,
        headful: !options.headless,
        artifactsDir,
        downloadsPath: options.downloadsPath || artifactsDir,
        tracesDir: options.tracesDir || artifactsDir,
        browserProcess,
        customExecutablePath: options.executablePath,
        proxy: options.proxy,
        protocolLogger,
        browserLogsCollector,
        wsEndpoint: options.useWebSocket ? transport.wsEndpoint : undefined,
        originalLaunchOptions: options
      };
      if (persistent)
        (0, _browserContext.validateBrowserContextOptions)(persistent, browserOptions);
      copyTestHooks(options, browserOptions);
      const browser = await this._connectToTransport(transport, browserOptions);
      browser._userDataDirForTest = userDataDir;
      if (persistent && !options.ignoreAllDefaultArgs)
        await browser._defaultContext._loadDefaultContext(progress2);
      return browser;
    }
    async _launchProcess(progress2, options, isPersistent, browserLogsCollector, userDataDir) {
      var _options$args;
      const {
        ignoreDefaultArgs,
        ignoreAllDefaultArgs,
        args = [],
        executablePath = null,
        handleSIGINT = true,
        handleSIGTERM = true,
        handleSIGHUP = true
      } = options;
      const env = options.env ? (0, _processLauncher.envArrayToObject)(options.env) : process.env;
      await this._createArtifactDirs(options);
      const tempDirectories = [];
      const artifactsDir = await _fs.default.promises.mkdtemp(_path.default.join(os.tmpdir(), "playwright-artifacts-"));
      tempDirectories.push(artifactsDir);
      if (userDataDir) {
        if (!await (0, _fileUtils.existsAsync)(userDataDir))
          await _fs.default.promises.mkdir(userDataDir, {
            recursive: true,
            mode: 448
          });
      } else {
        userDataDir = await _fs.default.promises.mkdtemp(_path.default.join(os.tmpdir(), `playwright_${this._name}dev_profile-`));
        tempDirectories.push(userDataDir);
      }
      const browserArguments = [];
      if (ignoreAllDefaultArgs)
        browserArguments.push(...args);
      else if (ignoreDefaultArgs)
        browserArguments.push(...this._defaultArgs(options, isPersistent, userDataDir).filter((arg) => ignoreDefaultArgs.indexOf(arg) === -1));
      else
        browserArguments.push(...this._defaultArgs(options, isPersistent, userDataDir));
      let executable;
      if (executablePath) {
        if (!await (0, _fileUtils.existsAsync)(executablePath))
          throw new Error(`Failed to launch ${this._name} because executable doesn't exist at ${executablePath}`);
        executable = executablePath;
      } else {
        const registryExecutable = _registry.registry.findExecutable(options.channel || this._name);
        if (!registryExecutable || registryExecutable.browserName !== this._name)
          throw new Error(`Unsupported ${this._name} channel "${options.channel}"`);
        executable = registryExecutable.executablePathOrDie(this.attribution.playwright.options.sdkLanguage);
        await _registry.registry.validateHostRequirementsForExecutablesIfNeeded([registryExecutable], this.attribution.playwright.options.sdkLanguage);
      }
      const waitForWSEndpoint = options.useWebSocket || (_options$args = options.args) !== null && _options$args !== undefined && _options$args.some((a) => a.startsWith("--remote-debugging-port")) ? new _manualPromise.ManualPromise : undefined;
      const waitForJuggler = this._name === "firefox" ? new _manualPromise.ManualPromise : undefined;
      let transport = undefined;
      let browserProcess = undefined;
      const {
        launchedProcess,
        gracefullyClose,
        kill
      } = await (0, _processLauncher.launchProcess)({
        command: executable,
        args: browserArguments,
        env: this._amendEnvironment(env, userDataDir, executable, browserArguments),
        handleSIGINT,
        handleSIGTERM,
        handleSIGHUP,
        log: (message) => {
          if (waitForWSEndpoint) {
            const match = message.match(/DevTools listening on (.*)/);
            if (match)
              waitForWSEndpoint.resolve(match[1]);
          }
          if (waitForJuggler && message.includes("Juggler listening to the pipe"))
            waitForJuggler.resolve();
          progress2.log(message);
          browserLogsCollector.log(message);
        },
        stdio: "pipe",
        tempDirectories,
        attemptToGracefullyClose: async () => {
          if (options.__testHookGracefullyClose)
            await options.__testHookGracefullyClose();
          this._attemptToGracefullyCloseBrowser(transport);
        },
        onExit: (exitCode, signal) => {
          waitForJuggler === null || waitForJuggler === undefined || waitForJuggler.resolve();
          if (browserProcess && browserProcess.onclose)
            browserProcess.onclose(exitCode, signal);
        }
      });
      async function closeOrKill(timeout) {
        let timer;
        try {
          await Promise.race([gracefullyClose(), new Promise((resolve, reject) => timer = setTimeout(reject, timeout))]);
        } catch (ignored) {
          await kill().catch((ignored2) => {
          });
        } finally {
          clearTimeout(timer);
        }
      }
      browserProcess = {
        onclose: undefined,
        process: launchedProcess,
        close: () => closeOrKill(options.__testHookBrowserCloseTimeout || _timeoutSettings.DEFAULT_TIMEOUT),
        kill
      };
      progress2.cleanupWhenAborted(() => closeOrKill(progress2.timeUntilDeadline()));
      const wsEndpoint = await waitForWSEndpoint;
      await waitForJuggler;
      if (options.useWebSocket) {
        transport = await _transport.WebSocketTransport.connect(progress2, wsEndpoint);
      } else {
        const stdio = launchedProcess.stdio;
        transport = new _pipeTransport.PipeTransport(stdio[3], stdio[4]);
      }
      return {
        browserProcess,
        artifactsDir,
        userDataDir,
        transport
      };
    }
    async _createArtifactDirs(options) {
      if (options.downloadsPath)
        await _fs.default.promises.mkdir(options.downloadsPath, {
          recursive: true
        });
      if (options.tracesDir)
        await _fs.default.promises.mkdir(options.tracesDir, {
          recursive: true
        });
    }
    async connectOverCDP(metadata, endpointURL, options, timeout) {
      throw new Error("CDP connections are only supported by Chromium");
    }
    async _launchWithSeleniumHub(progress2, hubUrl, options) {
      throw new Error("Connecting to SELENIUM_REMOTE_URL is only supported by Chromium");
    }
    _validateLaunchOptions(options) {
      const {
        devtools = false
      } = options;
      let {
        headless = !devtools,
        downloadsPath,
        proxy
      } = options;
      if ((0, _utils.debugMode)())
        headless = false;
      if (downloadsPath && !_path.default.isAbsolute(downloadsPath))
        downloadsPath = _path.default.join(process.cwd(), downloadsPath);
      if (this.attribution.playwright.options.socksProxyPort)
        proxy = {
          server: `socks5://127.0.0.1:${this.attribution.playwright.options.socksProxyPort}`
        };
      return {
        ...options,
        devtools,
        headless,
        downloadsPath,
        proxy
      };
    }
    _createUserDataDirArgMisuseError(userDataDirArg) {
      switch (this.attribution.playwright.options.sdkLanguage) {
        case "java":
          return new Error(`Pass userDataDir parameter to 'BrowserType.launchPersistentContext(userDataDir, options)' instead of specifying '${userDataDirArg}' argument`);
        case "python":
          return new Error(`Pass user_data_dir parameter to 'browser_type.launch_persistent_context(user_data_dir, **kwargs)' instead of specifying '${userDataDirArg}' argument`);
        case "csharp":
          return new Error(`Pass userDataDir parameter to 'BrowserType.LaunchPersistentContextAsync(userDataDir, options)' instead of specifying '${userDataDirArg}' argument`);
        default:
          return new Error(`Pass userDataDir parameter to 'browserType.launchPersistentContext(userDataDir, options)' instead of specifying '${userDataDirArg}' argument`);
      }
    }
    _rewriteStartupLog(error) {
      if (!(0, _protocolError.isProtocolError)(error))
        return error;
      return this._doRewriteStartupLog(error);
    }
  }
  exports.BrowserType = BrowserType;
});

// node_modules/playwright-core/lib/server/chromium/crDevTools.js
var require_crDevTools = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CRDevTools = undefined;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var kBindingName = "__pw_devtools__";

  class CRDevTools {
    constructor(preferencesPath) {
      this._preferencesPath = undefined;
      this._prefs = undefined;
      this._savePromise = undefined;
      this.__testHookOnBinding = undefined;
      this._preferencesPath = preferencesPath;
      this._savePromise = Promise.resolve();
    }
    install(session) {
      session.on("Runtime.bindingCalled", async (event) => {
        if (event.name !== kBindingName)
          return;
        const parsed = JSON.parse(event.payload);
        let result = undefined;
        if (this.__testHookOnBinding)
          this.__testHookOnBinding(parsed);
        if (parsed.method === "getPreferences") {
          if (this._prefs === undefined) {
            try {
              const json = await _fs.default.promises.readFile(this._preferencesPath, "utf8");
              this._prefs = JSON.parse(json);
            } catch (e) {
              this._prefs = {};
            }
          }
          result = this._prefs;
        } else if (parsed.method === "setPreference") {
          this._prefs[parsed.params[0]] = parsed.params[1];
          this._save();
        } else if (parsed.method === "removePreference") {
          delete this._prefs[parsed.params[0]];
          this._save();
        } else if (parsed.method === "clearPreferences") {
          this._prefs = {};
          this._save();
        }
        session.send("Runtime.evaluate", {
          expression: `window.DevToolsAPI.embedderMessageAck(${parsed.id}, ${JSON.stringify(result)})`,
          contextId: event.executionContextId
        }).catch((e) => null);
      });
      Promise.all([session.send("Runtime.enable"), session.send("Runtime.addBinding", {
        name: kBindingName
      }), session.send("Page.enable"), session.send("Page.addScriptToEvaluateOnNewDocument", {
        source: `
        (() => {
          const init = () => {
            // Lazy init happens when InspectorFrontendHost is initialized.
            // At this point DevToolsHost is ready to be used.
            const host = window.DevToolsHost;
            const old = host.sendMessageToEmbedder.bind(host);
            host.sendMessageToEmbedder = message => {
              if (['getPreferences', 'setPreference', 'removePreference', 'clearPreferences'].includes(JSON.parse(message).method))
                window.${kBindingName}(message);
              else
                old(message);
            };
          };
          let value;
          Object.defineProperty(window, 'InspectorFrontendHost', {
            configurable: true,
            enumerable: true,
            get() { return value; },
            set(v) { value = v; init(); },
          });
        })()
      `
      }), session.send("Runtime.runIfWaitingForDebugger")]).catch((e) => null);
    }
    _save() {
      this._savePromise = this._savePromise.then(async () => {
        await _fs.default.promises.writeFile(this._preferencesPath, JSON.stringify(this._prefs)).catch((e) => null);
      });
    }
  }
  exports.CRDevTools = CRDevTools;
});

// node_modules/playwright-core/lib/server/chromium/chromium.js
var require_chromium = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  async function urlToWSEndpoint(progress2, endpointURL, headers) {
    if (endpointURL.startsWith("ws"))
      return endpointURL;
    progress2.log(`<ws preparing> retrieving websocket url from ${endpointURL}`);
    const httpURL = endpointURL.endsWith("/") ? `${endpointURL}json/version/` : `${endpointURL}/json/version/`;
    const json = await (0, _network.fetchData)({
      url: httpURL,
      headers
    }, async (_, resp) => new Error(`Unexpected status ${resp.statusCode} when connecting to ${httpURL}.\n` + `This does not look like a DevTools server, try connecting via ws://.`));
    return JSON.parse(json).webSocketDebuggerUrl;
  }
  async function seleniumErrorHandler(params, response) {
    const body = await streamToString(response);
    let message = body;
    try {
      const json = JSON.parse(body);
      message = json.value.localizedMessage || json.value.message;
    } catch (e) {
    }
    return new Error(`Error connecting to Selenium at ${params.url}: ${message}`);
  }
  var addProtocol = function(url) {
    if (!["ws://", "wss://", "http://", "https://"].some((protocol) => url.startsWith(protocol)))
      return "http://" + url;
    return url;
  };
  var streamToString = function(stream) {
    return new Promise((resolve, reject) => {
      const chunks = [];
      stream.on("data", (chunk) => chunks.push(Buffer.from(chunk)));
      stream.on("error", reject);
      stream.on("end", () => resolve(Buffer.concat(chunks).toString("utf8")));
    });
  };
  var parseSeleniumRemoteParams = function(env, progress2) {
    try {
      const parsed = JSON.parse(env.value);
      progress2.log(`<selenium> using additional ${env.name} "${env.value}"`);
      return parsed;
    } catch (e) {
      progress2.log(`<selenium> ignoring additional ${env.name} "${env.value}": ${e}`);
    }
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Chromium = undefined;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _os = _interopRequireDefault(import.meta.require("os"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _crBrowser = require_crBrowser();
  var _processLauncher = require_processLauncher();
  var _crConnection = require_crConnection();
  var _browserType = require_browserType();
  var _transport = require_transport2();
  var _crDevTools = require_crDevTools();
  var _browser = require_browser5();
  var _network = require_network();
  var _userAgent = require_userAgent();
  var _ascii = require_ascii();
  var _utils = require_utils3();
  var _fileUtils = require_fileUtils();
  var _debugLogger = require_debugLogger();
  var _progress = require_progress();
  var _timeoutSettings = require_timeoutSettings();
  var _helper = require_helper();
  var _registry = require_registry();
  var _manualPromise = require_manualPromise();
  var _browserContext = require_browserContext();
  var _chromiumSwitches = require_chromiumSwitches();
  var ARTIFACTS_FOLDER = _path.default.join(_os.default.tmpdir(), "playwright-artifacts-");

  class Chromium extends _browserType.BrowserType {
    constructor(parent) {
      super(parent, "chromium");
      this._devtools = undefined;
      if ((0, _utils.debugMode)())
        this._devtools = this._createDevTools();
    }
    async connectOverCDP(metadata, endpointURL, options, timeout) {
      const controller = new _progress.ProgressController(metadata, this);
      controller.setLogName("browser");
      return controller.run(async (progress2) => {
        return await this._connectOverCDPInternal(progress2, endpointURL, options);
      }, _timeoutSettings.TimeoutSettings.timeout({
        timeout
      }));
    }
    async _connectOverCDPInternal(progress2, endpointURL, options, onClose) {
      let headersMap;
      if (options.headers)
        headersMap = (0, _utils.headersArrayToObject)(options.headers, false);
      if (!headersMap)
        headersMap = {
          "User-Agent": (0, _userAgent.getUserAgent)()
        };
      else if (headersMap && !Object.keys(headersMap).some((key) => key.toLowerCase() === "user-agent"))
        headersMap["User-Agent"] = (0, _userAgent.getUserAgent)();
      const artifactsDir = await _fs.default.promises.mkdtemp(ARTIFACTS_FOLDER);
      const wsEndpoint = await urlToWSEndpoint(progress2, endpointURL, headersMap);
      progress2.throwIfAborted();
      const chromeTransport = await _transport.WebSocketTransport.connect(progress2, wsEndpoint, headersMap);
      const cleanedUp = new _manualPromise.ManualPromise;
      const doCleanup = async () => {
        await (0, _fileUtils.removeFolders)([artifactsDir]);
        await (onClose === null || onClose === undefined ? undefined : onClose());
        cleanedUp.resolve();
      };
      const doClose = async () => {
        await chromeTransport.closeAndWait();
        await cleanedUp;
      };
      const browserProcess = {
        close: doClose,
        kill: doClose
      };
      const persistent = {
        noDefaultViewport: true
      };
      const browserOptions = {
        slowMo: options.slowMo,
        name: "chromium",
        isChromium: true,
        persistent,
        browserProcess,
        protocolLogger: _helper.helper.debugProtocolLogger(),
        browserLogsCollector: new _debugLogger.RecentLogsCollector,
        artifactsDir,
        downloadsPath: options.downloadsPath || artifactsDir,
        tracesDir: options.tracesDir || artifactsDir,
        proxy: {
          server: "per-context"
        },
        originalLaunchOptions: {}
      };
      (0, _browserContext.validateBrowserContextOptions)(persistent, browserOptions);
      progress2.throwIfAborted();
      const browser = await _crBrowser.CRBrowser.connect(this.attribution.playwright, chromeTransport, browserOptions);
      browser._isCollocatedWithServer = false;
      browser.on(_browser.Browser.Events.Disconnected, doCleanup);
      return browser;
    }
    _createDevTools() {
      const directory = _registry.registry.findExecutable("chromium").directory;
      return directory ? new _crDevTools.CRDevTools(_path.default.join(directory, "devtools-preferences.json")) : undefined;
    }
    async _connectToTransport(transport, options) {
      let devtools = this._devtools;
      if (options.__testHookForDevTools) {
        devtools = this._createDevTools();
        await options.__testHookForDevTools(devtools);
      }
      return _crBrowser.CRBrowser.connect(this.attribution.playwright, transport, options, devtools);
    }
    _doRewriteStartupLog(error) {
      if (!error.logs)
        return error;
      if (error.logs.includes("Missing X server"))
        error.logs = "\n" + (0, _ascii.wrapInASCIIBox)(_browserType.kNoXServerRunningError, 1);
      if (!error.logs.includes("crbug.com/357670") && !error.logs.includes("No usable sandbox!") && !error.logs.includes("crbug.com/638180"))
        return error;
      error.logs = [`Chromium sandboxing failed!`, `================================`, `To workaround sandboxing issues, do either of the following:`, `  - (preferred): Configure environment to support sandboxing: https://playwright.dev/docs/troubleshooting`, `  - (alternative): Launch Chromium without sandbox using 'chromiumSandbox: false' option`, `================================`, ``].join("\n");
      return error;
    }
    _amendEnvironment(env, userDataDir, executable, browserArguments) {
      return env;
    }
    _attemptToGracefullyCloseBrowser(transport) {
      const message = {
        method: "Browser.close",
        id: _crConnection.kBrowserCloseMessageId,
        params: {}
      };
      transport.send(message);
    }
    async _launchWithSeleniumHub(progress2, hubUrl, options) {
      await this._createArtifactDirs(options);
      if (!hubUrl.endsWith("/"))
        hubUrl = hubUrl + "/";
      const args = this._innerDefaultArgs(options);
      args.push("--remote-debugging-port=0");
      const isEdge = options.channel && options.channel.startsWith("msedge");
      let desiredCapabilities = {
        browserName: isEdge ? "MicrosoftEdge" : "chrome",
        [isEdge ? "ms:edgeOptions" : "goog:chromeOptions"]: {
          args
        }
      };
      if (process.env.SELENIUM_REMOTE_CAPABILITIES) {
        const remoteCapabilities = parseSeleniumRemoteParams({
          name: "capabilities",
          value: process.env.SELENIUM_REMOTE_CAPABILITIES
        }, progress2);
        if (remoteCapabilities)
          desiredCapabilities = {
            ...desiredCapabilities,
            ...remoteCapabilities
          };
      }
      let headers = {};
      if (process.env.SELENIUM_REMOTE_HEADERS) {
        const remoteHeaders = parseSeleniumRemoteParams({
          name: "headers",
          value: process.env.SELENIUM_REMOTE_HEADERS
        }, progress2);
        if (remoteHeaders)
          headers = remoteHeaders;
      }
      progress2.log(`<selenium> connecting to ${hubUrl}`);
      const response = await (0, _network.fetchData)({
        url: hubUrl + "session",
        method: "POST",
        headers: {
          "Content-Type": "application/json; charset=utf-8",
          ...headers
        },
        data: JSON.stringify({
          capabilities: {
            alwaysMatch: desiredCapabilities
          }
        }),
        timeout: progress2.timeUntilDeadline()
      }, seleniumErrorHandler);
      const value = JSON.parse(response).value;
      const sessionId = value.sessionId;
      progress2.log(`<selenium> connected to sessionId=${sessionId}`);
      const disconnectFromSelenium = async () => {
        progress2.log(`<selenium> disconnecting from sessionId=${sessionId}`);
        await (0, _network.fetchData)({
          url: hubUrl + "session/" + sessionId,
          method: "DELETE",
          headers
        }).catch((error) => progress2.log(`<error disconnecting from selenium>: ${error}`));
        progress2.log(`<selenium> disconnected from sessionId=${sessionId}`);
        _processLauncher.gracefullyCloseSet.delete(disconnectFromSelenium);
      };
      _processLauncher.gracefullyCloseSet.add(disconnectFromSelenium);
      try {
        const capabilities = value.capabilities;
        let endpointURL;
        if (capabilities["se:cdp"]) {
          progress2.log(`<selenium> using selenium v4`);
          const endpointURLString = addProtocol(capabilities["se:cdp"]);
          endpointURL = new URL(endpointURLString);
          if (endpointURL.hostname === "localhost" || endpointURL.hostname === "127.0.0.1")
            endpointURL.hostname = new URL(hubUrl).hostname;
          progress2.log(`<selenium> retrieved endpoint ${endpointURL.toString()} for sessionId=${sessionId}`);
        } else {
          progress2.log(`<selenium> using selenium v3`);
          const maybeChromeOptions = capabilities["goog:chromeOptions"];
          const chromeOptions = maybeChromeOptions && typeof maybeChromeOptions === "object" ? maybeChromeOptions : undefined;
          const debuggerAddress = chromeOptions && typeof chromeOptions.debuggerAddress === "string" ? chromeOptions.debuggerAddress : undefined;
          const chromeOptionsURL = typeof maybeChromeOptions === "string" ? maybeChromeOptions : undefined;
          const endpointURLString = addProtocol(debuggerAddress || chromeOptionsURL).replace("localhost", "127.0.0.1");
          progress2.log(`<selenium> retrieved endpoint ${endpointURLString} for sessionId=${sessionId}`);
          endpointURL = new URL(endpointURLString);
          if (endpointURL.hostname === "localhost" || endpointURL.hostname === "127.0.0.1") {
            const sessionInfoUrl = new URL(hubUrl).origin + "/grid/api/testsession?session=" + sessionId;
            try {
              const sessionResponse = await (0, _network.fetchData)({
                url: sessionInfoUrl,
                method: "GET",
                timeout: progress2.timeUntilDeadline(),
                headers
              }, seleniumErrorHandler);
              const proxyId = JSON.parse(sessionResponse).proxyId;
              endpointURL.hostname = new URL(proxyId).hostname;
              progress2.log(`<selenium> resolved endpoint ip ${endpointURL.toString()} for sessionId=${sessionId}`);
            } catch (e) {
              progress2.log(`<selenium> unable to resolve endpoint ip for sessionId=${sessionId}, running in standalone?`);
            }
          }
        }
        return await this._connectOverCDPInternal(progress2, endpointURL.toString(), {
          ...options,
          headers: (0, _utils.headersObjectToArray)(headers)
        }, disconnectFromSelenium);
      } catch (e) {
        await disconnectFromSelenium();
        throw e;
      }
    }
    _defaultArgs(options, isPersistent, userDataDir) {
      const chromeArguments = this._innerDefaultArgs(options);
      chromeArguments.push(`--user-data-dir=${userDataDir}`);
      if (options.useWebSocket)
        chromeArguments.push("--remote-debugging-port=0");
      else
        chromeArguments.push("--remote-debugging-pipe");
      if (isPersistent)
        chromeArguments.push("about:blank");
      else
        chromeArguments.push("--no-startup-window");
      return chromeArguments;
    }
    _innerDefaultArgs(options) {
      const {
        args = [],
        proxy
      } = options;
      const userDataDirArg = args.find((arg) => arg.startsWith("--user-data-dir"));
      if (userDataDirArg)
        throw this._createUserDataDirArgMisuseError("--user-data-dir");
      if (args.find((arg) => arg.startsWith("--remote-debugging-pipe")))
        throw new Error("Playwright manages remote debugging connection itself.");
      if (args.find((arg) => !arg.startsWith("-")))
        throw new Error("Arguments can not specify page to be opened");
      const chromeArguments = [..._chromiumSwitches.chromiumSwitches];
      if (_os.default.platform() === "darwin") {
        chromeArguments.push("--enable-use-zoom-for-dsf=false");
        if (options.headless)
          chromeArguments.push("--use-angle");
      }
      if (options.devtools)
        chromeArguments.push("--auto-open-devtools-for-tabs");
      if (options.headless) {
        if (process.env.PLAYWRIGHT_CHROMIUM_USE_HEADLESS_NEW)
          chromeArguments.push("--headless=new");
        else
          chromeArguments.push("--headless");
        chromeArguments.push("--hide-scrollbars", "--mute-audio", "--blink-settings=primaryHoverType=2,availableHoverTypes=2,primaryPointerType=4,availablePointerTypes=4");
      }
      if (options.chromiumSandbox !== true)
        chromeArguments.push("--no-sandbox");
      if (proxy) {
        const proxyURL = new URL(proxy.server);
        const isSocks = proxyURL.protocol === "socks5:";
        if (isSocks && !this.attribution.playwright.options.socksProxyPort) {
          chromeArguments.push(`--host-resolver-rules="MAP * ~NOTFOUND , EXCLUDE ${proxyURL.hostname}"`);
        }
        chromeArguments.push(`--proxy-server=${proxy.server}`);
        const proxyBypassRules = [];
        if (this.attribution.playwright.options.socksProxyPort)
          proxyBypassRules.push("<-loopback>");
        if (proxy.bypass)
          proxyBypassRules.push(...proxy.bypass.split(",").map((t) => t.trim()).map((t) => t.startsWith(".") ? "*" + t : t));
        if (!process.env.PLAYWRIGHT_DISABLE_FORCED_CHROMIUM_PROXIED_LOOPBACK && !proxyBypassRules.includes("<-loopback>"))
          proxyBypassRules.push("<-loopback>");
        if (proxyBypassRules.length > 0)
          chromeArguments.push(`--proxy-bypass-list=${proxyBypassRules.join(";")}`);
      }
      chromeArguments.push(...args);
      return chromeArguments;
    }
  }
  exports.Chromium = Chromium;
});

// node_modules/electron/index.js
var require_electron = __commonJS((exports, module) => {
  var getElectronPath = function() {
    let executablePath;
    if (fs.existsSync(pathFile)) {
      executablePath = fs.readFileSync(pathFile, "utf-8");
    }
    if (process.env.ELECTRON_OVERRIDE_DIST_PATH) {
      return path.join(process.env.ELECTRON_OVERRIDE_DIST_PATH, executablePath || "electron");
    }
    if (executablePath) {
      return path.join(__dirname, "dist", executablePath);
    } else {
      throw new Error("Electron failed to install correctly, please delete node_modules/electron and try installing again");
    }
  };
  var __dirname = "/Users/hottin/project/jwave_playlist/node_modules/electron";
  var fs = import.meta.require("fs");
  var path = import.meta.require("path");
  var pathFile = path.join(__dirname, "path.txt");
  module.exports = getElectronPath();
});

// node_modules/playwright-core/lib/server/electron/loader.js
var require_loader = __commonJS(() => {
  var {
    app
  } = require_electron();
  var {
    chromiumSwitches
  } = require_chromiumSwitches();
  process.argv.splice(1, process.argv.indexOf("--remote-debugging-port=0"));
  for (const arg of chromiumSwitches) {
    const match = arg.match(/--([^=]*)=?(.*)/);
    app.commandLine.appendSwitch(match[1], match[2]);
  }
  var originalWhenReady = app.whenReady();
  var originalEmit = app.emit.bind(app);
  var readyEventArgs;
  app.emit = (event, ...args) => {
    if (event === "ready") {
      readyEventArgs = args;
      return app.listenerCount("ready") > 0;
    }
    return originalEmit(event, ...args);
  };
  var isReady = false;
  var whenReadyCallback;
  var whenReadyPromise = new Promise((f) => whenReadyCallback = f);
  app.isReady = () => isReady;
  app.whenReady = () => whenReadyPromise;
  globalThis.__playwright_run = async () => {
    const event = await originalWhenReady;
    isReady = true;
    whenReadyCallback(event);
    originalEmit("ready", ...readyEventArgs);
  };
});

// node_modules/playwright-core/lib/server/electron/electron.js
var require_electron2 = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var waitForLine = function(progress2, process2, regex) {
    return new Promise((resolve, reject) => {
      const rl = readline.createInterface({
        input: process2.stderr
      });
      const failError = new Error("Process failed to launch!");
      const listeners = [
        _eventsHelper.eventsHelper.addEventListener(rl, "line", onLine),
        _eventsHelper.eventsHelper.addEventListener(rl, "close", reject.bind(null, failError)),
        _eventsHelper.eventsHelper.addEventListener(process2, "exit", reject.bind(null, failError)),
        _eventsHelper.eventsHelper.addEventListener(process2, "error", reject.bind(null, failError))
      ];
      progress2.cleanupWhenAborted(cleanup);
      function onLine(line) {
        const match = line.match(regex);
        if (!match)
          return;
        cleanup();
        resolve(match);
      }
      function cleanup() {
        _eventsHelper.eventsHelper.removeEventListeners(listeners);
      }
    });
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ElectronApplication = exports.Electron = undefined;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _os = _interopRequireDefault(import.meta.require("os"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _crBrowser = require_crBrowser();
  var _crConnection = require_crConnection();
  var _crExecutionContext = require_crExecutionContext();
  var js = _interopRequireWildcard(require_javascript());
  var _timeoutSettings = require_timeoutSettings();
  var _utils = require_utils3();
  var _transport = require_transport2();
  var _processLauncher = require_processLauncher();
  var _browserContext = require_browserContext();
  var _progress = require_progress();
  var _helper = require_helper();
  var _eventsHelper = require_eventsHelper();
  var readline = _interopRequireWildcard(import.meta.require("readline"));
  var _debugLogger = require_debugLogger();
  var _instrumentation = require_instrumentation();
  var _crProtocolHelper = require_crProtocolHelper();
  var _console = require_console();
  var ARTIFACTS_FOLDER = _path.default.join(_os.default.tmpdir(), "playwright-artifacts-");

  class ElectronApplication extends _instrumentation.SdkObject {
    constructor(parent, browser, nodeConnection, process2) {
      super(parent, "electron-app");
      this._browserContext = undefined;
      this._nodeConnection = undefined;
      this._nodeSession = undefined;
      this._nodeExecutionContext = undefined;
      this._nodeElectronHandlePromise = new _utils.ManualPromise;
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings;
      this._process = undefined;
      this._process = process2;
      this._browserContext = browser._defaultContext;
      this._nodeConnection = nodeConnection;
      this._nodeSession = nodeConnection.rootSession;
      this._nodeSession.on("Runtime.executionContextCreated", async (event) => {
        if (!event.context.auxData || !event.context.auxData.isDefault)
          return;
        const crExecutionContext = new _crExecutionContext.CRExecutionContext(this._nodeSession, event.context);
        this._nodeExecutionContext = new js.ExecutionContext(this, crExecutionContext, "electron");
        const {
          result: remoteObject
        } = await crExecutionContext._client.send("Runtime.evaluate", {
          expression: `require('electron')`,
          contextId: event.context.id,
          includeCommandLineAPI: true
        });
        this._nodeElectronHandlePromise.resolve(new js.JSHandle(this._nodeExecutionContext, "object", "ElectronModule", remoteObject.objectId));
      });
      this._nodeSession.on("Runtime.consoleAPICalled", (event) => this._onConsoleAPI(event));
      const appClosePromise = new Promise((f) => this.once(ElectronApplication.Events.Close, f));
      this._browserContext.setCustomCloseHandler(async () => {
        await this._browserContext.stopVideoRecording();
        const electronHandle = await this._nodeElectronHandlePromise;
        await electronHandle.evaluate(({
          app
        }) => app.quit()).catch(() => {
        });
        this._nodeConnection.close();
        await appClosePromise;
      });
    }
    async _onConsoleAPI(event) {
      if (event.executionContextId === 0) {
        return;
      }
      if (!this._nodeExecutionContext)
        return;
      const args = event.args.map((arg) => this._nodeExecutionContext.createHandle(arg));
      const message = new _console.ConsoleMessage(null, event.type, undefined, args, (0, _crProtocolHelper.toConsoleMessageLocation)(event.stackTrace));
      this.emit(ElectronApplication.Events.Console, message);
    }
    async initialize() {
      await this._nodeSession.send("Runtime.enable", {});
      await this._nodeSession.send("Runtime.evaluate", {
        expression: "__playwright_run()"
      });
    }
    process() {
      return this._process;
    }
    context() {
      return this._browserContext;
    }
    async close() {
      await this._browserContext.close({
        reason: "Application exited"
      });
    }
    async browserWindow(page) {
      const targetId = page._delegate._targetId;
      const electronHandle = await this._nodeElectronHandlePromise;
      return await electronHandle.evaluateHandle(({
        BrowserWindow,
        webContents
      }, targetId2) => {
        const wc = webContents.fromDevToolsTargetId(targetId2);
        return BrowserWindow.fromWebContents(wc);
      }, targetId);
    }
  }
  exports.ElectronApplication = ElectronApplication;
  ElectronApplication.Events = {
    Close: "close",
    Console: "console"
  };

  class Electron extends _instrumentation.SdkObject {
    constructor(playwright) {
      super(playwright, "electron");
    }
    async launch(options) {
      const {
        args = []
      } = options;
      const controller = new _progress.ProgressController((0, _instrumentation.serverSideCallMetadata)(), this);
      controller.setLogName("browser");
      return controller.run(async (progress2) => {
        let app = undefined;
        const electronArguments = ["--inspect=0", "--remote-debugging-port=0", ...args];
        if (_os.default.platform() === "linux") {
          const runningAsRoot = process.geteuid && process.geteuid() === 0;
          if (runningAsRoot && electronArguments.indexOf("--no-sandbox") === -1)
            electronArguments.unshift("--no-sandbox");
        }
        const artifactsDir = await _fs.default.promises.mkdtemp(ARTIFACTS_FOLDER);
        const browserLogsCollector = new _debugLogger.RecentLogsCollector;
        const env = options.env ? (0, _processLauncher.envArrayToObject)(options.env) : process.env;
        let command;
        if (options.executablePath) {
          command = options.executablePath;
        } else {
          try {
            command = require_electron();
          } catch (error) {
            if ((error === null || error === undefined ? undefined : error.code) === "MODULE_NOT_FOUND") {
              throw new Error("\n" + (0, _utils.wrapInASCIIBox)(["Electron executablePath not found!", "Please install it using `npm install -D electron` or set the executablePath to your Electron executable."].join("\n"), 1));
            }
            throw error;
          }
          electronArguments.unshift("-r", import.meta.require.resolve("/Users/hottin/project/jwave_playlist/node_modules/playwright-core/lib/server/electron/loader.js"));
        }
        delete env.NODE_OPTIONS;
        const {
          launchedProcess,
          gracefullyClose,
          kill
        } = await (0, _processLauncher.launchProcess)({
          command,
          args: electronArguments,
          env,
          log: (message) => {
            progress2.log(message);
            browserLogsCollector.log(message);
          },
          stdio: "pipe",
          cwd: options.cwd,
          tempDirectories: [artifactsDir],
          attemptToGracefullyClose: () => app.close(),
          handleSIGINT: true,
          handleSIGTERM: true,
          handleSIGHUP: true,
          onExit: () => {
            var _app;
            return (_app = app) === null || _app === undefined ? undefined : _app.emit(ElectronApplication.Events.Close);
          }
        });
        const waitForXserverError = new Promise(async (resolve, reject) => {
          waitForLine(progress2, launchedProcess, /Unable to open X display/).then(() => reject(new Error(["Unable to open X display!", `================================`, "Most likely this is because there is no X server available.", "Use 'xvfb-run' on Linux to launch your tests with an emulated display server.", "For example: 'xvfb-run npm run test:e2e'", `================================`, progress2.metadata.log].join("\n")))).catch(() => {
          });
        });
        const nodeMatch = await waitForLine(progress2, launchedProcess, /^Debugger listening on (ws:\/\/.*)$/);
        const nodeTransport = await _transport.WebSocketTransport.connect(progress2, nodeMatch[1]);
        const nodeConnection = new _crConnection.CRConnection(nodeTransport, _helper.helper.debugProtocolLogger(), browserLogsCollector);
        waitForLine(progress2, launchedProcess, /Waiting for the debugger to disconnect\.\.\./).then(() => {
          nodeTransport.close();
        }).catch(() => {
        });
        const chromeMatch = await Promise.race([waitForLine(progress2, launchedProcess, /^DevTools listening on (ws:\/\/.*)$/), waitForXserverError]);
        const chromeTransport = await _transport.WebSocketTransport.connect(progress2, chromeMatch[1]);
        const browserProcess = {
          onclose: undefined,
          process: launchedProcess,
          close: gracefullyClose,
          kill
        };
        const contextOptions = {
          ...options,
          noDefaultViewport: true
        };
        const browserOptions = {
          name: "electron",
          isChromium: true,
          headful: true,
          persistent: contextOptions,
          browserProcess,
          protocolLogger: _helper.helper.debugProtocolLogger(),
          browserLogsCollector,
          artifactsDir,
          downloadsPath: artifactsDir,
          tracesDir: options.tracesDir || artifactsDir,
          originalLaunchOptions: {}
        };
        (0, _browserContext.validateBrowserContextOptions)(contextOptions, browserOptions);
        const browser = await _crBrowser.CRBrowser.connect(this.attribution.playwright, chromeTransport, browserOptions);
        app = new ElectronApplication(this, browser, nodeConnection, launchedProcess);
        await app.initialize();
        return app;
      }, _timeoutSettings.TimeoutSettings.launchTimeout(options));
    }
  }
  exports.Electron = Electron;
});

// node_modules/playwright-core/lib/server/firefox/ffConnection.js
var require_ffConnection = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.kBrowserCloseMessageId = exports.FFSession = exports.FFConnection = exports.ConnectionEvents = undefined;
  var _events = import.meta.require("events");
  var _debugLogger = require_debugLogger();
  var _helper = require_helper();
  var _protocolError = require_protocolError();
  var ConnectionEvents = exports.ConnectionEvents = {
    Disconnected: Symbol("Disconnected")
  };
  var kBrowserCloseMessageId = exports.kBrowserCloseMessageId = -9999;

  class FFConnection extends _events.EventEmitter {
    constructor(transport, protocolLogger, browserLogsCollector) {
      super();
      this._lastId = undefined;
      this._transport = undefined;
      this._protocolLogger = undefined;
      this._browserLogsCollector = undefined;
      this._browserDisconnectedLogs = undefined;
      this.rootSession = undefined;
      this._sessions = undefined;
      this._closed = undefined;
      this.setMaxListeners(0);
      this._transport = transport;
      this._protocolLogger = protocolLogger;
      this._browserLogsCollector = browserLogsCollector;
      this._lastId = 0;
      this._sessions = new Map;
      this._closed = false;
      this.rootSession = new FFSession(this, "", (message) => this._rawSend(message));
      this._sessions.set("", this.rootSession);
      this._transport.onmessage = this._onMessage.bind(this);
      this._transport.onclose = this._onClose.bind(this);
    }
    nextMessageId() {
      return ++this._lastId;
    }
    _rawSend(message) {
      this._protocolLogger("send", message);
      this._transport.send(message);
    }
    async _onMessage(message) {
      this._protocolLogger("receive", message);
      if (message.id === kBrowserCloseMessageId)
        return;
      const session = this._sessions.get(message.sessionId || "");
      if (session)
        session.dispatchMessage(message);
    }
    _onClose() {
      this._closed = true;
      this._transport.onmessage = undefined;
      this._transport.onclose = undefined;
      this._browserDisconnectedLogs = _helper.helper.formatBrowserLogs(this._browserLogsCollector.recentLogs());
      this.rootSession.dispose();
      Promise.resolve().then(() => this.emit(ConnectionEvents.Disconnected));
    }
    close() {
      if (!this._closed)
        this._transport.close();
    }
    createSession(sessionId) {
      const session = new FFSession(this, sessionId, (message) => this._rawSend({
        ...message,
        sessionId
      }));
      this._sessions.set(sessionId, session);
      return session;
    }
  }
  exports.FFConnection = FFConnection;

  class FFSession extends _events.EventEmitter {
    constructor(connection, sessionId, rawSend) {
      super();
      this._connection = undefined;
      this._disposed = false;
      this._callbacks = undefined;
      this._sessionId = undefined;
      this._rawSend = undefined;
      this._crashed = false;
      this.on = undefined;
      this.addListener = undefined;
      this.off = undefined;
      this.removeListener = undefined;
      this.once = undefined;
      this.setMaxListeners(0);
      this._callbacks = new Map;
      this._connection = connection;
      this._sessionId = sessionId;
      this._rawSend = rawSend;
      this.on = super.on;
      this.addListener = super.addListener;
      this.off = super.removeListener;
      this.removeListener = super.removeListener;
      this.once = super.once;
    }
    markAsCrashed() {
      this._crashed = true;
    }
    async send(method, params) {
      if (this._crashed || this._disposed || this._connection._closed || this._connection._browserDisconnectedLogs)
        throw new _protocolError.ProtocolError(this._crashed ? "crashed" : "closed", undefined, this._connection._browserDisconnectedLogs);
      const id = this._connection.nextMessageId();
      this._rawSend({
        method,
        params,
        id
      });
      return new Promise((resolve, reject) => {
        this._callbacks.set(id, {
          resolve,
          reject,
          error: new _protocolError.ProtocolError("error", method)
        });
      });
    }
    sendMayFail(method, params) {
      return this.send(method, params).catch((error) => _debugLogger.debugLogger.log("error", error));
    }
    dispatchMessage(object) {
      if (object.id) {
        const callback = this._callbacks.get(object.id);
        if (callback) {
          this._callbacks.delete(object.id);
          if (object.error) {
            callback.error.setMessage(object.error.message);
            callback.reject(callback.error);
          } else {
            callback.resolve(object.result);
          }
        }
      } else {
        Promise.resolve().then(() => this.emit(object.method, object.params));
      }
    }
    dispose() {
      this._disposed = true;
      this._connection._sessions.delete(this._sessionId);
      for (const callback of this._callbacks.values()) {
        callback.error.type = this._crashed ? "crashed" : "closed";
        callback.error.logs = this._connection._browserDisconnectedLogs;
        callback.reject(callback.error);
      }
      this._callbacks.clear();
    }
  }
  exports.FFSession = FFSession;
});

// node_modules/playwright-core/lib/server/firefox/ffAccessibility.js
var require_ffAccessibility = __commonJS((exports) => {
  async function getAccessibilityTree(session, needle) {
    const objectId = needle ? needle._objectId : undefined;
    const {
      tree
    } = await session.send("Accessibility.getFullAXTree", {
      objectId
    });
    const axNode = new FFAXNode(tree);
    return {
      tree: axNode,
      needle: needle ? axNode._findNeedle() : null
    };
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getAccessibilityTree = getAccessibilityTree;
  var FFRoleToARIARole = new Map(Object.entries({
    pushbutton: "button",
    checkbutton: "checkbox",
    editcombobox: "combobox",
    "content deletion": "deletion",
    footnote: "doc-footnote",
    "non-native document": "document",
    grouping: "group",
    graphic: "img",
    "content insertion": "insertion",
    animation: "marquee",
    "flat equation": "math",
    menupopup: "menu",
    "check menu item": "menuitemcheckbox",
    "radio menu item": "menuitemradio",
    "listbox option": "option",
    radiobutton: "radio",
    statusbar: "status",
    pagetab: "tab",
    pagetablist: "tablist",
    propertypage: "tabpanel",
    entry: "textbox",
    outline: "tree",
    "tree table": "treegrid",
    outlineitem: "treeitem"
  }));

  class FFAXNode {
    constructor(payload) {
      this._children = undefined;
      this._payload = undefined;
      this._editable = undefined;
      this._richlyEditable = undefined;
      this._focusable = undefined;
      this._expanded = undefined;
      this._name = undefined;
      this._role = undefined;
      this._cachedHasFocusableChild = undefined;
      this._payload = payload;
      this._children = (payload.children || []).map((x) => new FFAXNode(x));
      this._editable = !!payload.editable;
      this._richlyEditable = this._editable && payload.tag !== "textarea" && payload.tag !== "input";
      this._focusable = !!payload.focusable;
      this._expanded = !!payload.expanded;
      this._name = this._payload.name;
      this._role = this._payload.role;
    }
    _isPlainTextField() {
      if (this._richlyEditable)
        return false;
      if (this._editable)
        return true;
      return this._role === "entry";
    }
    _isTextOnlyObject() {
      const role = this._role;
      return role === "text leaf" || role === "text" || role === "statictext";
    }
    _hasFocusableChild() {
      if (this._cachedHasFocusableChild === undefined) {
        this._cachedHasFocusableChild = false;
        for (const child of this._children) {
          if (child._focusable || child._hasFocusableChild()) {
            this._cachedHasFocusableChild = true;
            break;
          }
        }
      }
      return this._cachedHasFocusableChild;
    }
    children() {
      return this._children;
    }
    _findNeedle() {
      if (this._payload.foundObject)
        return this;
      for (const child of this._children) {
        const found = child._findNeedle();
        if (found)
          return found;
      }
      return null;
    }
    isLeafNode() {
      if (!this._children.length)
        return true;
      if (this._isPlainTextField() || this._isTextOnlyObject())
        return true;
      switch (this._role) {
        case "graphic":
        case "scrollbar":
        case "slider":
        case "separator":
        case "progressbar":
          return true;
        default:
          break;
      }
      if (this._hasFocusableChild())
        return false;
      if (this._focusable && this._role !== "document" && this._name)
        return true;
      if (this._role === "heading" && this._name)
        return true;
      return false;
    }
    isControl() {
      switch (this._role) {
        case "checkbutton":
        case "check menu item":
        case "check rich option":
        case "combobox":
        case "combobox option":
        case "color chooser":
        case "listbox":
        case "listbox option":
        case "listbox rich option":
        case "popup menu":
        case "menupopup":
        case "menuitem":
        case "menubar":
        case "button":
        case "pushbutton":
        case "radiobutton":
        case "radio menuitem":
        case "scrollbar":
        case "slider":
        case "spinbutton":
        case "switch":
        case "pagetab":
        case "entry":
        case "tree table":
          return true;
        default:
          return false;
      }
    }
    isInteresting(insideControl) {
      if (this._focusable || this._richlyEditable)
        return true;
      if (this.isControl())
        return true;
      if (insideControl)
        return false;
      return this.isLeafNode() && !!this._name.trim();
    }
    serialize() {
      const node = {
        role: FFRoleToARIARole.get(this._role) || this._role,
        name: this._name || ""
      };
      const userStringProperties = ["name", "description", "roledescription", "valuetext", "keyshortcuts"];
      for (const userStringProperty of userStringProperties) {
        if (!(userStringProperty in this._payload))
          continue;
        node[userStringProperty] = this._payload[userStringProperty];
      }
      const booleanProperties = ["disabled", "expanded", "focused", "modal", "multiline", "multiselectable", "readonly", "required", "selected"];
      for (const booleanProperty of booleanProperties) {
        if (this._role === "document" && booleanProperty === "focused")
          continue;
        const value = this._payload[booleanProperty];
        if (!value)
          continue;
        node[booleanProperty] = value;
      }
      const numericalProperties = ["level"];
      for (const numericalProperty of numericalProperties) {
        if (!(numericalProperty in this._payload))
          continue;
        node[numericalProperty] = this._payload[numericalProperty];
      }
      const tokenProperties = ["autocomplete", "haspopup", "orientation"];
      for (const tokenProperty of tokenProperties) {
        const value = this._payload[tokenProperty];
        if (!value || value === "false")
          continue;
        node[tokenProperty] = value;
      }
      const axNode = node;
      axNode.valueString = this._payload.value;
      if ("checked" in this._payload)
        axNode.checked = this._payload.checked === true ? "checked" : this._payload.checked === "mixed" ? "mixed" : "unchecked";
      if ("pressed" in this._payload)
        axNode.pressed = this._payload.pressed === true ? "pressed" : "released";
      if ("invalid" in this._payload)
        axNode.invalid = this._payload.invalid === true ? "true" : "false";
      return axNode;
    }
  }
});

// node_modules/playwright-core/lib/server/firefox/ffExecutionContext.js
var require_ffExecutionContext = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var checkException = function(exceptionDetails) {
    if (!exceptionDetails)
      return;
    if (exceptionDetails.value)
      throw new js.JavaScriptErrorInEvaluate(JSON.stringify(exceptionDetails.value));
    else
      throw new js.JavaScriptErrorInEvaluate(exceptionDetails.text + (exceptionDetails.stack ? "\n" + exceptionDetails.stack : ""));
  };
  var rewriteError = function(error) {
    if (error.message.includes("cyclic object value") || error.message.includes("Object is not serializable"))
      return {
        result: {
          type: "undefined",
          value: undefined
        }
      };
    if (error instanceof TypeError && error.message.startsWith("Converting circular structure to JSON"))
      (0, _stackTrace.rewriteErrorMessage)(error, error.message + " Are you passing a nested JSHandle?");
    if (!js.isJavaScriptErrorInEvaluate(error) && !(0, _protocolError.isSessionClosedError)(error))
      throw new Error("Execution context was destroyed, most likely because of a navigation.");
    throw error;
  };
  var potentiallyUnserializableValue = function(remoteObject) {
    const value = remoteObject.value;
    const unserializableValue = remoteObject.unserializableValue;
    return unserializableValue ? js.parseUnserializableValue(unserializableValue) : value;
  };
  var renderPreview = function(object) {
    if (object.type === "undefined")
      return "undefined";
    if (object.unserializableValue)
      return String(object.unserializableValue);
    if (object.type === "symbol")
      return "Symbol()";
    if (object.subtype === "regexp")
      return "RegExp";
    if (object.subtype === "weakmap")
      return "WeakMap";
    if (object.subtype === "weakset")
      return "WeakSet";
    if (object.subtype)
      return object.subtype[0].toUpperCase() + object.subtype.slice(1);
    if ("value" in object)
      return String(object.value);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FFExecutionContext = undefined;
  var js = _interopRequireWildcard(require_javascript());
  var _stackTrace = require_stackTrace();
  var _utilityScriptSerializers = require_utilityScriptSerializers();
  var _protocolError = require_protocolError();

  class FFExecutionContext {
    constructor(session, executionContextId) {
      this._session = undefined;
      this._executionContextId = undefined;
      this._session = session;
      this._executionContextId = executionContextId;
    }
    async rawEvaluateJSON(expression) {
      const payload = await this._session.send("Runtime.evaluate", {
        expression,
        returnByValue: true,
        executionContextId: this._executionContextId
      }).catch(rewriteError);
      checkException(payload.exceptionDetails);
      return payload.result.value;
    }
    async rawEvaluateHandle(expression) {
      const payload = await this._session.send("Runtime.evaluate", {
        expression,
        returnByValue: false,
        executionContextId: this._executionContextId
      }).catch(rewriteError);
      checkException(payload.exceptionDetails);
      return payload.result.objectId;
    }
    rawCallFunctionNoReply(func, ...args) {
      this._session.send("Runtime.callFunction", {
        functionDeclaration: func.toString(),
        args: args.map((a) => a instanceof js.JSHandle ? {
          objectId: a._objectId
        } : {
          value: a
        }),
        returnByValue: true,
        executionContextId: this._executionContextId
      }).catch(() => {
      });
    }
    async evaluateWithArguments(expression, returnByValue, utilityScript, values, objectIds) {
      const payload = await this._session.send("Runtime.callFunction", {
        functionDeclaration: expression,
        args: [{
          objectId: utilityScript._objectId,
          value: undefined
        }, ...values.map((value) => ({
          value
        })), ...objectIds.map((objectId) => ({
          objectId,
          value: undefined
        }))],
        returnByValue,
        executionContextId: this._executionContextId
      }).catch(rewriteError);
      checkException(payload.exceptionDetails);
      if (returnByValue)
        return (0, _utilityScriptSerializers.parseEvaluationResultValue)(payload.result.value);
      return utilityScript._context.createHandle(payload.result);
    }
    async getProperties(context, objectId) {
      const response = await this._session.send("Runtime.getObjectProperties", {
        executionContextId: this._executionContextId,
        objectId
      });
      const result = new Map;
      for (const property of response.properties)
        result.set(property.name, context.createHandle(property.value));
      return result;
    }
    createHandle(context, remoteObject) {
      return new js.JSHandle(context, remoteObject.subtype || remoteObject.type || "", renderPreview(remoteObject), remoteObject.objectId, potentiallyUnserializableValue(remoteObject));
    }
    async releaseHandle(objectId) {
      await this._session.send("Runtime.disposeObject", {
        executionContextId: this._executionContextId,
        objectId
      });
    }
    objectCount(objectId) {
      throw new Error("Method not implemented in Firefox.");
    }
  }
  exports.FFExecutionContext = FFExecutionContext;
});

// node_modules/playwright-core/lib/server/firefox/ffInput.js
var require_ffInput = __commonJS((exports) => {
  var toModifiersMask = function(modifiers) {
    let mask = 0;
    if (modifiers.has("Alt"))
      mask |= 1;
    if (modifiers.has("Control"))
      mask |= 2;
    if (modifiers.has("Shift"))
      mask |= 4;
    if (modifiers.has("Meta"))
      mask |= 8;
    return mask;
  };
  var toButtonNumber = function(button) {
    if (button === "left")
      return 0;
    if (button === "middle")
      return 1;
    if (button === "right")
      return 2;
    return 0;
  };
  var toButtonsMask = function(buttons) {
    let mask = 0;
    if (buttons.has("left"))
      mask |= 1;
    if (buttons.has("right"))
      mask |= 2;
    if (buttons.has("middle"))
      mask |= 4;
    return mask;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.RawTouchscreenImpl = exports.RawMouseImpl = exports.RawKeyboardImpl = undefined;

  class RawKeyboardImpl {
    constructor(client) {
      this._client = undefined;
      this._client = client;
    }
    async keydown(modifiers, code, keyCode, keyCodeWithoutLocation, key, location2, autoRepeat, text) {
      if (text === "\r")
        text = "";
      await this._client.send("Page.dispatchKeyEvent", {
        type: "keydown",
        keyCode: keyCodeWithoutLocation,
        code,
        key,
        repeat: autoRepeat,
        location: location2,
        text
      });
    }
    async keyup(modifiers, code, keyCode, keyCodeWithoutLocation, key, location2) {
      await this._client.send("Page.dispatchKeyEvent", {
        type: "keyup",
        key,
        keyCode: keyCodeWithoutLocation,
        code,
        location: location2,
        repeat: false
      });
    }
    async sendText(text) {
      await this._client.send("Page.insertText", {
        text
      });
    }
  }
  exports.RawKeyboardImpl = RawKeyboardImpl;

  class RawMouseImpl {
    constructor(client) {
      this._client = undefined;
      this._page = undefined;
      this._client = client;
    }
    async move(x, y, button, buttons, modifiers, forClick) {
      await this._client.send("Page.dispatchMouseEvent", {
        type: "mousemove",
        button: 0,
        buttons: toButtonsMask(buttons),
        x: Math.floor(x),
        y: Math.floor(y),
        modifiers: toModifiersMask(modifiers)
      });
    }
    async down(x, y, button, buttons, modifiers, clickCount) {
      await this._client.send("Page.dispatchMouseEvent", {
        type: "mousedown",
        button: toButtonNumber(button),
        buttons: toButtonsMask(buttons),
        x: Math.floor(x),
        y: Math.floor(y),
        modifiers: toModifiersMask(modifiers),
        clickCount
      });
    }
    async up(x, y, button, buttons, modifiers, clickCount) {
      await this._client.send("Page.dispatchMouseEvent", {
        type: "mouseup",
        button: toButtonNumber(button),
        buttons: toButtonsMask(buttons),
        x: Math.floor(x),
        y: Math.floor(y),
        modifiers: toModifiersMask(modifiers),
        clickCount
      });
    }
    async wheel(x, y, buttons, modifiers, deltaX, deltaY) {
      await this._page.mainFrame().evaluateExpression(`new Promise(requestAnimationFrame)`, {
        world: "utility"
      });
      await this._client.send("Page.dispatchWheelEvent", {
        deltaX,
        deltaY,
        x: Math.floor(x),
        y: Math.floor(y),
        deltaZ: 0,
        modifiers: toModifiersMask(modifiers)
      });
    }
    setPage(page) {
      this._page = page;
    }
  }
  exports.RawMouseImpl = RawMouseImpl;

  class RawTouchscreenImpl {
    constructor(client) {
      this._client = undefined;
      this._client = client;
    }
    async tap(x, y, modifiers) {
      await this._client.send("Page.dispatchTapEvent", {
        x,
        y,
        modifiers: toModifiersMask(modifiers)
      });
    }
  }
  exports.RawTouchscreenImpl = RawTouchscreenImpl;
});

// node_modules/playwright-core/lib/server/firefox/ffNetworkManager.js
var require_ffNetworkManager = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var parseMultivalueHeaders = function(headers) {
    const result = [];
    for (const header of headers) {
      const separator = header.name.toLowerCase() === "set-cookie" ? "\n" : ",";
      const tokens = header.value.split(separator).map((s) => s.trim());
      for (const token of tokens)
        result.push({
          name: header.name,
          value: token
        });
    }
    return result;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FFNetworkManager = undefined;
  var _eventsHelper = require_eventsHelper();
  var network = _interopRequireWildcard(require_network2());

  class FFNetworkManager {
    constructor(session, page) {
      this._session = undefined;
      this._requests = undefined;
      this._page = undefined;
      this._eventListeners = undefined;
      this._session = session;
      this._requests = new Map;
      this._page = page;
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(session, "Network.requestWillBeSent", this._onRequestWillBeSent.bind(this)), _eventsHelper.eventsHelper.addEventListener(session, "Network.responseReceived", this._onResponseReceived.bind(this)), _eventsHelper.eventsHelper.addEventListener(session, "Network.requestFinished", this._onRequestFinished.bind(this)), _eventsHelper.eventsHelper.addEventListener(session, "Network.requestFailed", this._onRequestFailed.bind(this))];
    }
    dispose() {
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
    }
    async setRequestInterception(enabled) {
      await this._session.send("Network.setRequestInterception", {
        enabled
      });
    }
    _onRequestWillBeSent(event) {
      const redirectedFrom = event.redirectedFrom ? this._requests.get(event.redirectedFrom) || null : null;
      const frame = redirectedFrom ? redirectedFrom.request.frame() : event.frameId ? this._page._frameManager.frame(event.frameId) : null;
      if (!frame)
        return;
      if (redirectedFrom)
        this._requests.delete(redirectedFrom._id);
      const request = new InterceptableRequest(frame, redirectedFrom, event);
      let route;
      if (event.isIntercepted)
        route = new FFRouteImpl(this._session, request);
      this._requests.set(request._id, request);
      this._page._frameManager.requestStarted(request.request, route);
    }
    _onResponseReceived(event) {
      var _event$securityDetail, _event$securityDetail2, _event$securityDetail3, _event$securityDetail4, _event$securityDetail5;
      const request = this._requests.get(event.requestId);
      if (!request)
        return;
      const getResponseBody = async () => {
        const response2 = await this._session.send("Network.getResponseBody", {
          requestId: request._id
        });
        if (response2.evicted)
          throw new Error(`Response body for ${request.request.method()} ${request.request.url()} was evicted!`);
        return Buffer.from(response2.base64body, "base64");
      };
      const startTime = event.timing.startTime;
      function relativeToStart(time) {
        if (!time)
          return -1;
        return (time - startTime) / 1000;
      }
      const timing = {
        startTime: startTime / 1000,
        domainLookupStart: relativeToStart(event.timing.domainLookupStart),
        domainLookupEnd: relativeToStart(event.timing.domainLookupEnd),
        connectStart: relativeToStart(event.timing.connectStart),
        secureConnectionStart: relativeToStart(event.timing.secureConnectionStart),
        connectEnd: relativeToStart(event.timing.connectEnd),
        requestStart: relativeToStart(event.timing.requestStart),
        responseStart: relativeToStart(event.timing.responseStart)
      };
      const response = new network.Response(request.request, event.status, event.statusText, parseMultivalueHeaders(event.headers), timing, getResponseBody, event.fromServiceWorker);
      if (event !== null && event !== undefined && event.remoteIPAddress && typeof (event === null || event === undefined ? undefined : event.remotePort) === "number") {
        response._serverAddrFinished({
          ipAddress: event.remoteIPAddress,
          port: event.remotePort
        });
      } else {
        response._serverAddrFinished();
      }
      response._securityDetailsFinished({
        protocol: event === null || event === undefined || (_event$securityDetail = event.securityDetails) === null || _event$securityDetail === undefined ? undefined : _event$securityDetail.protocol,
        subjectName: event === null || event === undefined || (_event$securityDetail2 = event.securityDetails) === null || _event$securityDetail2 === undefined ? undefined : _event$securityDetail2.subjectName,
        issuer: event === null || event === undefined || (_event$securityDetail3 = event.securityDetails) === null || _event$securityDetail3 === undefined ? undefined : _event$securityDetail3.issuer,
        validFrom: event === null || event === undefined || (_event$securityDetail4 = event.securityDetails) === null || _event$securityDetail4 === undefined ? undefined : _event$securityDetail4.validFrom,
        validTo: event === null || event === undefined || (_event$securityDetail5 = event.securityDetails) === null || _event$securityDetail5 === undefined ? undefined : _event$securityDetail5.validTo
      });
      response.setRawResponseHeaders(null);
      response.setResponseHeadersSize(null);
      this._page._frameManager.requestReceivedResponse(response);
    }
    _onRequestFinished(event) {
      const request = this._requests.get(event.requestId);
      if (!request)
        return;
      const response = request.request._existingResponse();
      response.setTransferSize(event.transferSize);
      response.setEncodedBodySize(event.encodedBodySize);
      const isRedirected = response.status() >= 300 && response.status() <= 399;
      const responseEndTime = event.responseEndTime ? event.responseEndTime / 1000 - response.timing().startTime : -1;
      if (isRedirected) {
        response._requestFinished(responseEndTime);
      } else {
        this._requests.delete(request._id);
        response._requestFinished(responseEndTime);
      }
      if (event.protocolVersion)
        response._setHttpVersion(event.protocolVersion);
      this._page._frameManager.reportRequestFinished(request.request, response);
    }
    _onRequestFailed(event) {
      const request = this._requests.get(event.requestId);
      if (!request)
        return;
      this._requests.delete(request._id);
      const response = request.request._existingResponse();
      if (response) {
        response.setTransferSize(null);
        response.setEncodedBodySize(null);
        response._requestFinished(-1);
      }
      request.request._setFailureText(event.errorCode);
      this._page._frameManager.requestFailed(request.request, event.errorCode === "NS_BINDING_ABORTED");
    }
  }
  exports.FFNetworkManager = FFNetworkManager;
  var causeToResourceType = {
    TYPE_INVALID: "other",
    TYPE_OTHER: "other",
    TYPE_SCRIPT: "script",
    TYPE_IMAGE: "image",
    TYPE_STYLESHEET: "stylesheet",
    TYPE_OBJECT: "other",
    TYPE_DOCUMENT: "document",
    TYPE_SUBDOCUMENT: "document",
    TYPE_REFRESH: "document",
    TYPE_XBL: "other",
    TYPE_PING: "other",
    TYPE_XMLHTTPREQUEST: "xhr",
    TYPE_OBJECT_SUBREQUEST: "other",
    TYPE_DTD: "other",
    TYPE_FONT: "font",
    TYPE_MEDIA: "media",
    TYPE_WEBSOCKET: "websocket",
    TYPE_CSP_REPORT: "other",
    TYPE_XSLT: "other",
    TYPE_BEACON: "other",
    TYPE_FETCH: "fetch",
    TYPE_IMAGESET: "images",
    TYPE_WEB_MANIFEST: "manifest"
  };
  var internalCauseToResourceType = {
    TYPE_INTERNAL_EVENTSOURCE: "eventsource"
  };

  class InterceptableRequest {
    constructor(frame, redirectedFrom, payload) {
      this.request = undefined;
      this._id = undefined;
      this._redirectedTo = undefined;
      this._id = payload.requestId;
      if (redirectedFrom)
        redirectedFrom._redirectedTo = this;
      let postDataBuffer = null;
      if (payload.postData)
        postDataBuffer = Buffer.from(payload.postData, "base64");
      this.request = new network.Request(frame._page._browserContext, frame, null, redirectedFrom ? redirectedFrom.request : null, payload.navigationId, payload.url, internalCauseToResourceType[payload.internalCause] || causeToResourceType[payload.cause] || "other", payload.method, postDataBuffer, payload.headers);
      this.request.setRawRequestHeaders(null);
    }
    _finalRequest() {
      let request = this;
      while (request._redirectedTo)
        request = request._redirectedTo;
      return request;
    }
  }

  class FFRouteImpl {
    constructor(session, request) {
      this._request = undefined;
      this._session = undefined;
      this._session = session;
      this._request = request;
    }
    async continue(request, overrides) {
      await this._session.sendMayFail("Network.resumeInterceptedRequest", {
        requestId: this._request._id,
        url: overrides.url,
        method: overrides.method,
        headers: overrides.headers,
        postData: overrides.postData ? Buffer.from(overrides.postData).toString("base64") : undefined
      });
    }
    async fulfill(response) {
      const base64body = response.isBase64 ? response.body : Buffer.from(response.body).toString("base64");
      await this._session.sendMayFail("Network.fulfillInterceptedRequest", {
        requestId: this._request._id,
        status: response.status,
        statusText: network.STATUS_TEXTS[String(response.status)] || "",
        headers: response.headers,
        base64body
      });
    }
    async abort(errorCode) {
      await this._session.sendMayFail("Network.abortInterceptedRequest", {
        requestId: this._request._id,
        errorCode
      });
    }
  }
});

// node_modules/playwright-core/lib/server/firefox/ffPage.js
var require_ffPage = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var webSocketId = function(frameId, wsid) {
    return `${frameId}---${wsid}`;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.UTILITY_WORLD_NAME = exports.FFPage = undefined;
  var dialog = _interopRequireWildcard(require_dialog());
  var dom = _interopRequireWildcard(require_dom());
  var _eventsHelper = require_eventsHelper();
  var _page = require_page();
  var _ffAccessibility = require_ffAccessibility();
  var _ffConnection = require_ffConnection();
  var _ffExecutionContext = require_ffExecutionContext();
  var _ffInput = require_ffInput();
  var _ffNetworkManager = require_ffNetworkManager();
  var _stackTrace = require_stackTrace();
  var _debugLogger = require_debugLogger();
  var _manualPromise = require_manualPromise();
  var _browserContext = require_browserContext();
  var _errors = require_errors();
  var UTILITY_WORLD_NAME = exports.UTILITY_WORLD_NAME = "__playwright_utility_world__";

  class FFPage {
    constructor(session, browserContext, opener) {
      this.cspErrorsAsynchronousForInlineScipts = true;
      this.rawMouse = undefined;
      this.rawKeyboard = undefined;
      this.rawTouchscreen = undefined;
      this._session = undefined;
      this._page = undefined;
      this._networkManager = undefined;
      this._browserContext = undefined;
      this._pagePromise = new _manualPromise.ManualPromise;
      this._initializedPage = null;
      this._initializationFailed = false;
      this._opener = undefined;
      this._contextIdToContext = undefined;
      this._eventListeners = undefined;
      this._workers = new Map;
      this._screencastId = undefined;
      this._initScripts = [];
      this._session = session;
      this._opener = opener;
      this.rawKeyboard = new _ffInput.RawKeyboardImpl(session);
      this.rawMouse = new _ffInput.RawMouseImpl(session);
      this.rawTouchscreen = new _ffInput.RawTouchscreenImpl(session);
      this._contextIdToContext = new Map;
      this._browserContext = browserContext;
      this._page = new _page.Page(this, browserContext);
      this.rawMouse.setPage(this._page);
      this._networkManager = new _ffNetworkManager.FFNetworkManager(session, this._page);
      this._page.on(_page.Page.Events.FrameDetached, (frame) => this._removeContextsForFrame(frame));
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(this._session, "Page.eventFired", this._onEventFired.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameAttached", this._onFrameAttached.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameDetached", this._onFrameDetached.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.navigationAborted", this._onNavigationAborted.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.navigationCommitted", this._onNavigationCommitted.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.navigationStarted", this._onNavigationStarted.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.sameDocumentNavigation", this._onSameDocumentNavigation.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.executionContextCreated", this._onExecutionContextCreated.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.executionContextDestroyed", this._onExecutionContextDestroyed.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.executionContextsCleared", this._onExecutionContextsCleared.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.linkClicked", (event) => this._onLinkClicked(event.phase)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.uncaughtError", this._onUncaughtError.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.console", this._onConsole.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.dialogOpened", this._onDialogOpened.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.bindingCalled", this._onBindingCalled.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.fileChooserOpened", this._onFileChooserOpened.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.workerCreated", this._onWorkerCreated.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.workerDestroyed", this._onWorkerDestroyed.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.dispatchMessageFromWorker", this._onDispatchMessageFromWorker.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.crashed", this._onCrashed.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.videoRecordingStarted", this._onVideoRecordingStarted.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.webSocketCreated", this._onWebSocketCreated.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.webSocketClosed", this._onWebSocketClosed.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.webSocketFrameReceived", this._onWebSocketFrameReceived.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.webSocketFrameSent", this._onWebSocketFrameSent.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.screencastFrame", this._onScreencastFrame.bind(this))];
      this._session.once("Page.ready", async () => {
        await this._page.initOpener(this._opener);
        if (this._initializationFailed)
          return;
        this._initializedPage = this._page;
        this._page.reportAsNew();
        this._pagePromise.resolve(this._page);
      });
      this.addInitScript("", UTILITY_WORLD_NAME).catch((e) => this._markAsError(e));
    }
    potentiallyUninitializedPage() {
      return this._page;
    }
    async _markAsError(error) {
      if (this._initializationFailed)
        return;
      this._initializationFailed = true;
      if (!this._initializedPage) {
        await this._page.initOpener(this._opener);
        this._page.reportAsNew(error);
        this._pagePromise.resolve(error);
      }
    }
    async pageOrError() {
      return this._pagePromise;
    }
    _onWebSocketCreated(event) {
      this._page._frameManager.onWebSocketCreated(webSocketId(event.frameId, event.wsid), event.requestURL);
      this._page._frameManager.onWebSocketRequest(webSocketId(event.frameId, event.wsid));
    }
    _onWebSocketClosed(event) {
      if (event.error)
        this._page._frameManager.webSocketError(webSocketId(event.frameId, event.wsid), event.error);
      this._page._frameManager.webSocketClosed(webSocketId(event.frameId, event.wsid));
    }
    _onWebSocketFrameReceived(event) {
      this._page._frameManager.webSocketFrameReceived(webSocketId(event.frameId, event.wsid), event.opcode, event.data);
    }
    _onWebSocketFrameSent(event) {
      this._page._frameManager.onWebSocketFrameSent(webSocketId(event.frameId, event.wsid), event.opcode, event.data);
    }
    _onExecutionContextCreated(payload) {
      const {
        executionContextId,
        auxData
      } = payload;
      const frame = this._page._frameManager.frame(auxData.frameId);
      if (!frame)
        return;
      const delegate = new _ffExecutionContext.FFExecutionContext(this._session, executionContextId);
      let worldName = null;
      if (auxData.name === UTILITY_WORLD_NAME)
        worldName = "utility";
      else if (!auxData.name)
        worldName = "main";
      const context = new dom.FrameExecutionContext(delegate, frame, worldName);
      context[contextDelegateSymbol] = delegate;
      if (worldName)
        frame._contextCreated(worldName, context);
      this._contextIdToContext.set(executionContextId, context);
    }
    _onExecutionContextDestroyed(payload) {
      const {
        executionContextId
      } = payload;
      const context = this._contextIdToContext.get(executionContextId);
      if (!context)
        return;
      this._contextIdToContext.delete(executionContextId);
      context.frame._contextDestroyed(context);
    }
    _onExecutionContextsCleared() {
      for (const executionContextId of Array.from(this._contextIdToContext.keys()))
        this._onExecutionContextDestroyed({
          executionContextId
        });
    }
    _removeContextsForFrame(frame) {
      for (const [contextId, context] of this._contextIdToContext) {
        if (context.frame === frame)
          this._contextIdToContext.delete(contextId);
      }
    }
    _onLinkClicked(phase) {
      if (phase === "before")
        this._page._frameManager.frameWillPotentiallyRequestNavigation();
      else
        this._page._frameManager.frameDidPotentiallyRequestNavigation();
    }
    _onNavigationStarted(params) {
      this._page._frameManager.frameRequestedNavigation(params.frameId, params.navigationId);
    }
    _onNavigationAborted(params) {
      this._page._frameManager.frameAbortedNavigation(params.frameId, params.errorText, params.navigationId);
    }
    _onNavigationCommitted(params) {
      for (const [workerId, worker] of this._workers) {
        if (worker.frameId === params.frameId)
          this._onWorkerDestroyed({
            workerId
          });
      }
      this._page._frameManager.frameCommittedNewDocumentNavigation(params.frameId, params.url, params.name || "", params.navigationId || "", false);
    }
    _onSameDocumentNavigation(params) {
      this._page._frameManager.frameCommittedSameDocumentNavigation(params.frameId, params.url);
    }
    _onFrameAttached(params) {
      this._page._frameManager.frameAttached(params.frameId, params.parentFrameId);
    }
    _onFrameDetached(params) {
      this._page._frameManager.frameDetached(params.frameId);
    }
    _onEventFired(payload) {
      const {
        frameId,
        name
      } = payload;
      if (name === "load")
        this._page._frameManager.frameLifecycleEvent(frameId, "load");
      if (name === "DOMContentLoaded")
        this._page._frameManager.frameLifecycleEvent(frameId, "domcontentloaded");
    }
    _onUncaughtError(params) {
      const {
        name,
        message
      } = (0, _stackTrace.splitErrorMessage)(params.message);
      const error = new Error(message);
      error.stack = params.message + "\n" + params.stack.split("\n").filter(Boolean).map((a) => a.replace(/([^@]*)@(.*)/, "    at $1 ($2)")).join("\n");
      error.name = name;
      this._page.emitOnContextOnceInitialized(_browserContext.BrowserContext.Events.PageError, error, this._page);
    }
    _onConsole(payload) {
      const {
        type,
        args,
        executionContextId,
        location: location2
      } = payload;
      const context = this._contextIdToContext.get(executionContextId);
      if (!context)
        return;
      this._page._addConsoleMessage(type, args.map((arg) => context.createHandle(arg)), location2);
    }
    _onDialogOpened(params) {
      this._page.emitOnContext(_browserContext.BrowserContext.Events.Dialog, new dialog.Dialog(this._page, params.type, params.message, async (accept, promptText) => {
        await this._session.sendMayFail("Page.handleDialog", {
          dialogId: params.dialogId,
          accept,
          promptText
        });
      }, params.defaultValue));
    }
    async _onBindingCalled(event) {
      const pageOrError = await this.pageOrError();
      if (!(pageOrError instanceof Error)) {
        const context = this._contextIdToContext.get(event.executionContextId);
        if (context)
          await this._page._onBindingCalled(event.payload, context);
      }
    }
    async _onFileChooserOpened(payload) {
      const {
        executionContextId,
        element
      } = payload;
      const context = this._contextIdToContext.get(executionContextId);
      if (!context)
        return;
      const handle = context.createHandle(element).asElement();
      await this._page._onFileChooserOpened(handle);
    }
    async _onWorkerCreated(event) {
      const workerId = event.workerId;
      const worker = new _page.Worker(this._page, event.url);
      const workerSession = new _ffConnection.FFSession(this._session._connection, workerId, (message) => {
        this._session.send("Page.sendMessageToWorker", {
          frameId: event.frameId,
          workerId,
          message: JSON.stringify(message)
        }).catch((e) => {
          workerSession.dispatchMessage({
            id: message.id,
            method: "",
            params: {},
            error: {
              message: e.message,
              data: undefined
            }
          });
        });
      });
      this._workers.set(workerId, {
        session: workerSession,
        frameId: event.frameId
      });
      this._page._addWorker(workerId, worker);
      workerSession.once("Runtime.executionContextCreated", (event2) => {
        worker._createExecutionContext(new _ffExecutionContext.FFExecutionContext(workerSession, event2.executionContextId));
      });
      workerSession.on("Runtime.console", (event2) => {
        const {
          type,
          args,
          location: location2
        } = event2;
        const context = worker._existingExecutionContext;
        this._page._addConsoleMessage(type, args.map((arg) => context.createHandle(arg)), location2);
      });
    }
    _onWorkerDestroyed(event) {
      const workerId = event.workerId;
      const worker = this._workers.get(workerId);
      if (!worker)
        return;
      worker.session.dispose();
      this._workers.delete(workerId);
      this._page._removeWorker(workerId);
    }
    async _onDispatchMessageFromWorker(event) {
      const worker = this._workers.get(event.workerId);
      if (!worker)
        return;
      worker.session.dispatchMessage(JSON.parse(event.message));
    }
    async _onCrashed(event) {
      this._session.markAsCrashed();
      this._page._didCrash();
    }
    _onVideoRecordingStarted(event) {
      this._browserContext._browser._videoStarted(this._browserContext, event.screencastId, event.file, this.pageOrError());
    }
    async exposeBinding(binding) {
      await this._session.send("Page.addBinding", {
        name: binding.name,
        script: binding.source
      });
    }
    async removeExposedBindings() {
    }
    didClose() {
      this._markAsError(new _errors.TargetClosedError);
      this._session.dispose();
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      this._networkManager.dispose();
      this._page._didClose();
    }
    async navigateFrame(frame, url, referer) {
      const response = await this._session.send("Page.navigate", {
        url,
        referer,
        frameId: frame._id
      });
      return {
        newDocumentId: response.navigationId || undefined
      };
    }
    async updateExtraHTTPHeaders() {
      await this._session.send("Network.setExtraHTTPHeaders", {
        headers: this._page.extraHTTPHeaders() || []
      });
    }
    async updateEmulatedViewportSize() {
      const viewportSize = this._page.viewportSize();
      await this._session.send("Page.setViewportSize", {
        viewportSize
      });
    }
    async bringToFront() {
      await this._session.send("Page.bringToFront", {});
    }
    async updateEmulateMedia() {
      const emulatedMedia = this._page.emulatedMedia();
      const colorScheme = emulatedMedia.colorScheme === "no-override" ? undefined : emulatedMedia.colorScheme;
      const reducedMotion = emulatedMedia.reducedMotion === "no-override" ? undefined : emulatedMedia.reducedMotion;
      const forcedColors = emulatedMedia.forcedColors === "no-override" ? undefined : emulatedMedia.forcedColors;
      await this._session.send("Page.setEmulatedMedia", {
        type: emulatedMedia.media === "no-override" ? "" : emulatedMedia.media,
        colorScheme,
        reducedMotion,
        forcedColors
      });
    }
    async updateRequestInterception() {
      await this._networkManager.setRequestInterception(this._page.needsRequestInterception());
    }
    async updateFileChooserInterception() {
      const enabled = this._page.fileChooserIntercepted();
      await this._session.send("Page.setInterceptFileChooserDialog", {
        enabled
      }).catch(() => {
      });
    }
    async reload() {
      await this._session.send("Page.reload");
    }
    async goBack() {
      const {
        success
      } = await this._session.send("Page.goBack", {
        frameId: this._page.mainFrame()._id
      });
      return success;
    }
    async goForward() {
      const {
        success
      } = await this._session.send("Page.goForward", {
        frameId: this._page.mainFrame()._id
      });
      return success;
    }
    async addInitScript(script, worldName) {
      this._initScripts.push({
        script,
        worldName
      });
      await this._session.send("Page.setInitScripts", {
        scripts: this._initScripts
      });
    }
    async removeInitScripts() {
      this._initScripts = [];
      await this._session.send("Page.setInitScripts", {
        scripts: []
      });
    }
    async closePage(runBeforeUnload) {
      await this._session.send("Page.close", {
        runBeforeUnload
      });
    }
    async setBackgroundColor(color) {
      if (color)
        throw new Error("Not implemented");
    }
    async takeScreenshot(progress2, format, documentRect, viewportRect, quality, fitsViewport, scale) {
      if (!documentRect) {
        const scrollOffset = await this._page.mainFrame().waitForFunctionValueInUtility(progress2, () => ({
          x: window.scrollX,
          y: window.scrollY
        }));
        documentRect = {
          x: viewportRect.x + scrollOffset.x,
          y: viewportRect.y + scrollOffset.y,
          width: viewportRect.width,
          height: viewportRect.height
        };
      }
      progress2.throwIfAborted();
      const {
        data
      } = await this._session.send("Page.screenshot", {
        mimeType: "image/" + format,
        clip: documentRect,
        quality,
        omitDeviceScaleFactor: scale === "css"
      });
      return Buffer.from(data, "base64");
    }
    async getContentFrame(handle) {
      const {
        contentFrameId
      } = await this._session.send("Page.describeNode", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId
      });
      if (!contentFrameId)
        return null;
      return this._page._frameManager.frame(contentFrameId);
    }
    async getOwnerFrame(handle) {
      const {
        ownerFrameId
      } = await this._session.send("Page.describeNode", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId
      });
      return ownerFrameId || null;
    }
    isElementHandle(remoteObject) {
      return remoteObject.subtype === "node";
    }
    async getBoundingBox(handle) {
      const quads = await this.getContentQuads(handle);
      if (!quads || !quads.length)
        return null;
      let minX = Infinity;
      let maxX = (-Infinity);
      let minY = Infinity;
      let maxY = (-Infinity);
      for (const quad of quads) {
        for (const point of quad) {
          minX = Math.min(minX, point.x);
          maxX = Math.max(maxX, point.x);
          minY = Math.min(minY, point.y);
          maxY = Math.max(maxY, point.y);
        }
      }
      return {
        x: minX,
        y: minY,
        width: maxX - minX,
        height: maxY - minY
      };
    }
    async scrollRectIntoViewIfNeeded(handle, rect) {
      return await this._session.send("Page.scrollIntoViewIfNeeded", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId,
        rect
      }).then(() => "done").catch((e) => {
        if (e instanceof Error && e.message.includes("Node is detached from document"))
          return "error:notconnected";
        if (e instanceof Error && e.message.includes("Node does not have a layout object"))
          return "error:notvisible";
        throw e;
      });
    }
    async setScreencastOptions(options) {
      if (options) {
        const {
          screencastId
        } = await this._session.send("Page.startScreencast", options);
        this._screencastId = screencastId;
      } else {
        await this._session.send("Page.stopScreencast");
      }
    }
    _onScreencastFrame(event) {
      if (!this._screencastId)
        return;
      const screencastId = this._screencastId;
      this._page.throttleScreencastFrameAck(() => {
        this._session.send("Page.screencastFrameAck", {
          screencastId
        }).catch((e) => _debugLogger.debugLogger.log("error", e));
      });
      const buffer = Buffer.from(event.data, "base64");
      this._page.emit(_page.Page.Events.ScreencastFrame, {
        buffer,
        width: event.deviceWidth,
        height: event.deviceHeight
      });
    }
    rafCountForStablePosition() {
      return 1;
    }
    async getContentQuads(handle) {
      const result = await this._session.sendMayFail("Page.getContentQuads", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId
      });
      if (!result)
        return null;
      return result.quads.map((quad) => [quad.p1, quad.p2, quad.p3, quad.p4]);
    }
    async setInputFiles(handle, files) {
      await handle.evaluateInUtility(([injected, node, files2]) => injected.setInputFiles(node, files2), files);
    }
    async setInputFilePaths(progress2, handle, files) {
      await Promise.all([this._session.send("Page.setFileInputFiles", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId,
        files
      }), handle.dispatchEvent(progress2.metadata, "input"), handle.dispatchEvent(progress2.metadata, "change")]);
    }
    async adoptElementHandle(handle, to) {
      const result = await this._session.send("Page.adoptNode", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId,
        executionContextId: to[contextDelegateSymbol]._executionContextId
      });
      if (!result.remoteObject)
        throw new Error(dom.kUnableToAdoptErrorMessage);
      return to.createHandle(result.remoteObject);
    }
    async getAccessibilityTree(needle) {
      return (0, _ffAccessibility.getAccessibilityTree)(this._session, needle);
    }
    async inputActionEpilogue() {
    }
    async resetForReuse() {
      await this.rawMouse.move(-1, -1, "none", new Set, new Set, false);
    }
    async getFrameElement(frame) {
      const parent = frame.parentFrame();
      if (!parent)
        throw new Error("Frame has been detached.");
      const context = await parent._mainContext();
      const result = await this._session.send("Page.adoptNode", {
        frameId: frame._id,
        executionContextId: context[contextDelegateSymbol]._executionContextId
      });
      if (!result.remoteObject)
        throw new Error("Frame has been detached.");
      return context.createHandle(result.remoteObject);
    }
    shouldToggleStyleSheetToSyncAnimations() {
      return false;
    }
  }
  exports.FFPage = FFPage;
  var contextDelegateSymbol = Symbol("delegate");
});

// node_modules/playwright-core/lib/server/firefox/ffBrowser.js
var require_ffBrowser = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var toJugglerProxyOptions = function(proxy) {
    const proxyServer = new URL(proxy.server);
    let port = parseInt(proxyServer.port, 10);
    let type = "http";
    if (proxyServer.protocol === "socks5:")
      type = "socks";
    else if (proxyServer.protocol === "socks4:")
      type = "socks4";
    else if (proxyServer.protocol === "https:")
      type = "https";
    if (proxyServer.port === "") {
      if (proxyServer.protocol === "http:")
        port = 80;
      else if (proxyServer.protocol === "https:")
        port = 443;
    }
    return {
      type,
      bypass: proxy.bypass ? proxy.bypass.split(",").map((domain) => domain.trim()) : [],
      host: proxyServer.hostname,
      port,
      username: proxy.username,
      password: proxy.password
    };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FFBrowserContext = exports.FFBrowser = undefined;
  var _errors = require_errors();
  var _utils = require_utils3();
  var _browser = require_browser5();
  var _browserContext = require_browserContext();
  var network = _interopRequireWildcard(require_network2());
  var _ffConnection = require_ffConnection();
  var _ffPage = require_ffPage();

  class FFBrowser extends _browser.Browser {
    static async connect(parent, transport, options) {
      var _options$originalLaun;
      const connection = new _ffConnection.FFConnection(transport, options.protocolLogger, options.browserLogsCollector);
      const browser = new FFBrowser(parent, connection, options);
      if (options.__testHookOnConnectToBrowser)
        await options.__testHookOnConnectToBrowser();
      let firefoxUserPrefs = (_options$originalLaun = options.originalLaunchOptions.firefoxUserPrefs) !== null && _options$originalLaun !== undefined ? _options$originalLaun : {};
      if (Object.keys(kBandaidFirefoxUserPrefs).length)
        firefoxUserPrefs = {
          ...kBandaidFirefoxUserPrefs,
          ...firefoxUserPrefs
        };
      const promises = [browser.session.send("Browser.enable", {
        attachToDefaultContext: !!options.persistent,
        userPrefs: Object.entries(firefoxUserPrefs).map(([name, value]) => ({
          name,
          value
        }))
      }), browser._initVersion()];
      if (options.persistent) {
        browser._defaultContext = new FFBrowserContext(browser, undefined, options.persistent);
        promises.push(browser._defaultContext._initialize());
      }
      if (options.proxy)
        promises.push(browser.session.send("Browser.setBrowserProxy", toJugglerProxyOptions(options.proxy)));
      await Promise.all(promises);
      return browser;
    }
    constructor(parent, connection, options) {
      super(parent, options);
      this._connection = undefined;
      this.session = undefined;
      this._ffPages = undefined;
      this._contexts = undefined;
      this._version = "";
      this._userAgent = "";
      this._connection = connection;
      this.session = connection.rootSession;
      this._ffPages = new Map;
      this._contexts = new Map;
      this._connection.on(_ffConnection.ConnectionEvents.Disconnected, () => this._onDisconnect());
      this.session.on("Browser.attachedToTarget", this._onAttachedToTarget.bind(this));
      this.session.on("Browser.detachedFromTarget", this._onDetachedFromTarget.bind(this));
      this.session.on("Browser.downloadCreated", this._onDownloadCreated.bind(this));
      this.session.on("Browser.downloadFinished", this._onDownloadFinished.bind(this));
      this.session.on("Browser.videoRecordingFinished", this._onVideoRecordingFinished.bind(this));
    }
    async _initVersion() {
      const result = await this.session.send("Browser.getInfo");
      this._version = result.version.substring(result.version.indexOf("/") + 1);
      this._userAgent = result.userAgent;
    }
    isConnected() {
      return !this._connection._closed;
    }
    async doCreateNewContext(options) {
      if (options.isMobile)
        throw new Error("options.isMobile is not supported in Firefox");
      const {
        browserContextId
      } = await this.session.send("Browser.createBrowserContext", {
        removeOnDetach: true
      });
      const context = new FFBrowserContext(this, browserContextId, options);
      await context._initialize();
      this._contexts.set(browserContextId, context);
      return context;
    }
    contexts() {
      return Array.from(this._contexts.values());
    }
    version() {
      return this._version;
    }
    userAgent() {
      return this._userAgent;
    }
    _onDetachedFromTarget(payload) {
      const ffPage = this._ffPages.get(payload.targetId);
      this._ffPages.delete(payload.targetId);
      ffPage.didClose();
    }
    _onAttachedToTarget(payload) {
      const {
        targetId,
        browserContextId,
        openerId,
        type
      } = payload.targetInfo;
      (0, _utils.assert)(type === "page");
      const context = browserContextId ? this._contexts.get(browserContextId) : this._defaultContext;
      (0, _utils.assert)(context, `Unknown context id:${browserContextId}, _defaultContext: ${this._defaultContext}`);
      const session = this._connection.createSession(payload.sessionId);
      const opener = openerId ? this._ffPages.get(openerId) : null;
      const ffPage = new _ffPage.FFPage(session, context, opener);
      this._ffPages.set(targetId, ffPage);
    }
    _onDownloadCreated(payload) {
      const ffPage = this._ffPages.get(payload.pageTargetId);
      if (!ffPage)
        return;
      ffPage._page._frameManager.frameAbortedNavigation(payload.frameId, "Download is starting");
      let originPage = ffPage._initializedPage;
      if (!originPage) {
        ffPage._markAsError(new Error("Starting new page download"));
        if (ffPage._opener)
          originPage = ffPage._opener._initializedPage;
      }
      if (!originPage)
        return;
      this._downloadCreated(originPage, payload.uuid, payload.url, payload.suggestedFileName);
    }
    _onDownloadFinished(payload) {
      const error = payload.canceled ? "canceled" : payload.error;
      this._downloadFinished(payload.uuid, error);
    }
    _onVideoRecordingFinished(payload) {
      var _this$_takeVideo;
      (_this$_takeVideo = this._takeVideo(payload.screencastId)) === null || _this$_takeVideo === undefined || _this$_takeVideo.reportFinished();
    }
    _onDisconnect() {
      for (const video of this._idToVideo.values())
        video.artifact.reportFinished(new _errors.TargetClosedError);
      this._idToVideo.clear();
      for (const ffPage of this._ffPages.values())
        ffPage.didClose();
      this._ffPages.clear();
      this._didClose();
    }
  }
  exports.FFBrowser = FFBrowser;

  class FFBrowserContext extends _browserContext.BrowserContext {
    constructor(browser, browserContextId, options) {
      super(browser, options, browserContextId);
    }
    async _initialize() {
      (0, _utils.assert)(!this._ffPages().length);
      const browserContextId = this._browserContextId;
      const promises = [super._initialize()];
      if (this._options.acceptDownloads !== "internal-browser-default") {
        promises.push(this._browser.session.send("Browser.setDownloadOptions", {
          browserContextId,
          downloadOptions: {
            behavior: this._options.acceptDownloads === "accept" ? "saveToDisk" : "cancel",
            downloadsDir: this._browser.options.downloadsPath
          }
        }));
      }
      if (this._options.viewport) {
        const viewport = {
          viewportSize: {
            width: this._options.viewport.width,
            height: this._options.viewport.height
          },
          deviceScaleFactor: this._options.deviceScaleFactor || 1
        };
        promises.push(this._browser.session.send("Browser.setDefaultViewport", {
          browserContextId,
          viewport
        }));
      }
      if (this._options.hasTouch)
        promises.push(this._browser.session.send("Browser.setTouchOverride", {
          browserContextId,
          hasTouch: true
        }));
      if (this._options.userAgent)
        promises.push(this._browser.session.send("Browser.setUserAgentOverride", {
          browserContextId,
          userAgent: this._options.userAgent
        }));
      if (this._options.bypassCSP)
        promises.push(this._browser.session.send("Browser.setBypassCSP", {
          browserContextId,
          bypassCSP: true
        }));
      if (this._options.ignoreHTTPSErrors)
        promises.push(this._browser.session.send("Browser.setIgnoreHTTPSErrors", {
          browserContextId,
          ignoreHTTPSErrors: true
        }));
      if (this._options.javaScriptEnabled === false)
        promises.push(this._browser.session.send("Browser.setJavaScriptDisabled", {
          browserContextId,
          javaScriptDisabled: true
        }));
      if (this._options.locale)
        promises.push(this._browser.session.send("Browser.setLocaleOverride", {
          browserContextId,
          locale: this._options.locale
        }));
      if (this._options.timezoneId)
        promises.push(this._browser.session.send("Browser.setTimezoneOverride", {
          browserContextId,
          timezoneId: this._options.timezoneId
        }));
      if (this._options.extraHTTPHeaders || this._options.locale)
        promises.push(this.setExtraHTTPHeaders(this._options.extraHTTPHeaders || []));
      if (this._options.httpCredentials)
        promises.push(this.setHTTPCredentials(this._options.httpCredentials));
      if (this._options.geolocation)
        promises.push(this.setGeolocation(this._options.geolocation));
      if (this._options.offline)
        promises.push(this.setOffline(this._options.offline));
      if (this._options.colorScheme !== "no-override") {
        promises.push(this._browser.session.send("Browser.setColorScheme", {
          browserContextId,
          colorScheme: this._options.colorScheme !== undefined ? this._options.colorScheme : "light"
        }));
      }
      if (this._options.reducedMotion !== "no-override") {
        promises.push(this._browser.session.send("Browser.setReducedMotion", {
          browserContextId,
          reducedMotion: this._options.reducedMotion !== undefined ? this._options.reducedMotion : "no-preference"
        }));
      }
      if (this._options.forcedColors !== "no-override") {
        promises.push(this._browser.session.send("Browser.setForcedColors", {
          browserContextId,
          forcedColors: this._options.forcedColors !== undefined ? this._options.forcedColors : "none"
        }));
      }
      if (this._options.recordVideo) {
        promises.push(this._ensureVideosPath().then(() => {
          return this._browser.session.send("Browser.setVideoRecordingOptions", {
            options: {
              ...this._options.recordVideo.size,
              dir: this._options.recordVideo.dir
            },
            browserContextId: this._browserContextId
          });
        }));
      }
      if (this._options.proxy) {
        promises.push(this._browser.session.send("Browser.setContextProxy", {
          browserContextId: this._browserContextId,
          ...toJugglerProxyOptions(this._options.proxy)
        }));
      }
      await Promise.all(promises);
    }
    _ffPages() {
      return Array.from(this._browser._ffPages.values()).filter((ffPage) => ffPage._browserContext === this);
    }
    pages() {
      return this._ffPages().map((ffPage) => ffPage._initializedPage).filter((pageOrNull) => !!pageOrNull);
    }
    async newPageDelegate() {
      (0, _browserContext.assertBrowserContextIsNotOwned)(this);
      const {
        targetId
      } = await this._browser.session.send("Browser.newPage", {
        browserContextId: this._browserContextId
      }).catch((e) => {
        if (e.message.includes("Failed to override timezone"))
          throw new Error(`Invalid timezone ID: ${this._options.timezoneId}`);
        throw e;
      });
      return this._browser._ffPages.get(targetId);
    }
    async doGetCookies(urls) {
      const {
        cookies
      } = await this._browser.session.send("Browser.getCookies", {
        browserContextId: this._browserContextId
      });
      return network.filterCookies(cookies.map((c) => {
        const copy = {
          ...c
        };
        delete copy.size;
        delete copy.session;
        return copy;
      }), urls);
    }
    async addCookies(cookies) {
      const cc = network.rewriteCookies(cookies).map((c) => ({
        ...c,
        expires: c.expires === -1 ? undefined : c.expires
      }));
      await this._browser.session.send("Browser.setCookies", {
        browserContextId: this._browserContextId,
        cookies: cc
      });
    }
    async clearCookies() {
      await this._browser.session.send("Browser.clearCookies", {
        browserContextId: this._browserContextId
      });
    }
    async doGrantPermissions(origin, permissions) {
      const webPermissionToProtocol = new Map([["geolocation", "geo"], ["persistent-storage", "persistent-storage"], ["push", "push"], ["notifications", "desktop-notification"]]);
      const filtered = permissions.map((permission) => {
        const protocolPermission = webPermissionToProtocol.get(permission);
        if (!protocolPermission)
          throw new Error("Unknown permission: " + permission);
        return protocolPermission;
      });
      await this._browser.session.send("Browser.grantPermissions", {
        origin,
        browserContextId: this._browserContextId,
        permissions: filtered
      });
    }
    async doClearPermissions() {
      await this._browser.session.send("Browser.resetPermissions", {
        browserContextId: this._browserContextId
      });
    }
    async setGeolocation(geolocation) {
      (0, _browserContext.verifyGeolocation)(geolocation);
      this._options.geolocation = geolocation;
      await this._browser.session.send("Browser.setGeolocationOverride", {
        browserContextId: this._browserContextId,
        geolocation: geolocation || null
      });
    }
    async setExtraHTTPHeaders(headers) {
      this._options.extraHTTPHeaders = headers;
      let allHeaders = this._options.extraHTTPHeaders;
      if (this._options.locale)
        allHeaders = network.mergeHeaders([allHeaders, network.singleHeader("Accept-Language", this._options.locale)]);
      await this._browser.session.send("Browser.setExtraHTTPHeaders", {
        browserContextId: this._browserContextId,
        headers: allHeaders
      });
    }
    async setUserAgent(userAgent) {
      await this._browser.session.send("Browser.setUserAgentOverride", {
        browserContextId: this._browserContextId,
        userAgent: userAgent || null
      });
    }
    async setOffline(offline) {
      this._options.offline = offline;
      await this._browser.session.send("Browser.setOnlineOverride", {
        browserContextId: this._browserContextId,
        override: offline ? "offline" : "online"
      });
    }
    async doSetHTTPCredentials(httpCredentials) {
      this._options.httpCredentials = httpCredentials;
      await this._browser.session.send("Browser.setHTTPCredentials", {
        browserContextId: this._browserContextId,
        credentials: httpCredentials || null
      });
    }
    async doAddInitScript(source) {
      await this._browser.session.send("Browser.setInitScripts", {
        browserContextId: this._browserContextId,
        scripts: this.initScripts.map((script) => ({
          script
        }))
      });
    }
    async doRemoveInitScripts() {
      await this._browser.session.send("Browser.setInitScripts", {
        browserContextId: this._browserContextId,
        scripts: []
      });
    }
    async doExposeBinding(binding) {
      await this._browser.session.send("Browser.addBinding", {
        browserContextId: this._browserContextId,
        name: binding.name,
        script: binding.source
      });
    }
    async doRemoveExposedBindings() {
    }
    async doUpdateRequestInterception() {
      await this._browser.session.send("Browser.setRequestInterception", {
        browserContextId: this._browserContextId,
        enabled: !!this._requestInterceptor
      });
    }
    onClosePersistent() {
    }
    async clearCache() {
      await this._browser.session.send("Browser.clearCache");
    }
    async doClose(reason) {
      if (!this._browserContextId) {
        if (this._options.recordVideo) {
          await this._browser.session.send("Browser.setVideoRecordingOptions", {
            options: undefined,
            browserContextId: this._browserContextId
          });
        }
        await this._browser.close({
          reason
        });
      } else {
        await this._browser.session.send("Browser.removeBrowserContext", {
          browserContextId: this._browserContextId
        });
        this._browser._contexts.delete(this._browserContextId);
      }
    }
    async cancelDownload(uuid) {
      await this._browser.session.send("Browser.cancelDownload", {
        uuid
      });
    }
  }
  exports.FFBrowserContext = FFBrowserContext;
  var kBandaidFirefoxUserPrefs = {};
});

// node_modules/playwright-core/lib/server/firefox/firefox.js
var require_firefox = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Firefox = undefined;
  var os = _interopRequireWildcard(import.meta.require("os"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _ffBrowser = require_ffBrowser();
  var _ffConnection = require_ffConnection();
  var _browserType = require_browserType();
  var _utils = require_utils3();

  class Firefox extends _browserType.BrowserType {
    constructor(parent) {
      super(parent, "firefox");
    }
    _connectToTransport(transport, options) {
      return _ffBrowser.FFBrowser.connect(this.attribution.playwright, transport, options);
    }
    _doRewriteStartupLog(error) {
      if (!error.logs)
        return error;
      if (error.logs.includes(`as root in a regular user's session is not supported.`))
        error.logs = "\n" + (0, _utils.wrapInASCIIBox)(`Firefox is unable to launch if the \$HOME folder isn't owned by the current user.\nWorkaround: Set the HOME=/root environment variable${process.env.GITHUB_ACTION ? " in your GitHub Actions workflow file" : ""} when running Playwright.`, 1);
      if (error.logs.includes("no DISPLAY environment variable specified"))
        error.logs = "\n" + (0, _utils.wrapInASCIIBox)(_browserType.kNoXServerRunningError, 1);
      return error;
    }
    _amendEnvironment(env, userDataDir, executable, browserArguments) {
      if (!_path.default.isAbsolute(os.homedir()))
        throw new Error(`Cannot launch Firefox with relative home directory. Did you set ${os.platform() === "win32" ? "USERPROFILE" : "HOME"} to a relative path?`);
      if (os.platform() === "linux") {
        return {
          ...env,
          SNAP_NAME: undefined,
          SNAP_INSTANCE_NAME: undefined
        };
      }
      return env;
    }
    _attemptToGracefullyCloseBrowser(transport) {
      const message = {
        method: "Browser.close",
        params: {},
        id: _ffConnection.kBrowserCloseMessageId
      };
      transport.send(message);
    }
    _defaultArgs(options, isPersistent, userDataDir) {
      const {
        args = [],
        headless
      } = options;
      const userDataDirArg = args.find((arg) => arg.startsWith("-profile") || arg.startsWith("--profile"));
      if (userDataDirArg)
        throw this._createUserDataDirArgMisuseError("--profile");
      if (args.find((arg) => arg.startsWith("-juggler")))
        throw new Error("Use the port parameter instead of -juggler argument");
      const firefoxArguments = ["-no-remote"];
      if (headless) {
        firefoxArguments.push("-headless");
      } else {
        firefoxArguments.push("-wait-for-browser");
        firefoxArguments.push("-foreground");
      }
      firefoxArguments.push(`-profile`, userDataDir);
      firefoxArguments.push("-juggler-pipe");
      firefoxArguments.push(...args);
      if (isPersistent)
        firefoxArguments.push("about:blank");
      else
        firefoxArguments.push("-silent");
      return firefoxArguments;
    }
  }
  exports.Firefox = Firefox;
});

// node_modules/playwright-core/lib/server/selectors.js
var require_selectors = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Selectors = undefined;
  var _selectorParser = require_selectorParser();
  var _utils = require_utils3();

  class Selectors {
    constructor() {
      this._builtinEngines = undefined;
      this._builtinEnginesInMainWorld = undefined;
      this._engines = undefined;
      this.guid = `selectors@${(0, _utils.createGuid)()}`;
      this._testIdAttributeName = "data-testid";
      this._builtinEngines = new Set(["css", "css:light", "xpath", "xpath:light", "_react", "_vue", "text", "text:light", "id", "id:light", "data-testid", "data-testid:light", "data-test-id", "data-test-id:light", "data-test", "data-test:light", "nth", "visible", "internal:control", "internal:has", "internal:has-not", "internal:has-text", "internal:has-not-text", "internal:and", "internal:or", "internal:chain", "role", "internal:attr", "internal:label", "internal:text", "internal:role", "internal:testid"]);
      this._builtinEnginesInMainWorld = new Set(["_react", "_vue"]);
      this._engines = new Map;
    }
    async register(name, source, contentScript = false) {
      if (!name.match(/^[a-zA-Z_0-9-]+$/))
        throw new Error("Selector engine name may only contain [a-zA-Z0-9_] characters");
      if (this._builtinEngines.has(name) || name === "zs" || name === "zs:light")
        throw new Error(`"${name}" is a predefined selector engine`);
      if (this._engines.has(name))
        throw new Error(`"${name}" selector engine has been already registered`);
      this._engines.set(name, {
        source,
        contentScript
      });
    }
    testIdAttributeName() {
      return this._testIdAttributeName;
    }
    setTestIdAttributeName(testIdAttributeName) {
      this._testIdAttributeName = testIdAttributeName;
    }
    unregisterAll() {
      this._engines.clear();
    }
    parseSelector(selector, strict) {
      const parsed = typeof selector === "string" ? (0, _selectorParser.parseSelector)(selector) : selector;
      let needsMainWorld = false;
      (0, _selectorParser.visitAllSelectorParts)(parsed, (part) => {
        const name = part.name;
        const custom = this._engines.get(name);
        if (!custom && !this._builtinEngines.has(name))
          throw new _selectorParser.InvalidSelectorError(`Unknown engine "${name}" while parsing selector ${(0, _selectorParser.stringifySelector)(parsed)}`);
        if (custom && !custom.contentScript)
          needsMainWorld = true;
        if (this._builtinEnginesInMainWorld.has(name))
          needsMainWorld = true;
      });
      return {
        parsed,
        world: needsMainWorld ? "main" : "utility",
        strict
      };
    }
  }
  exports.Selectors = Selectors;
});

// node_modules/playwright-core/lib/server/webkit/wkConnection.js
var require_wkConnection = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.kPageProxyMessageReceived = exports.kBrowserCloseMessageId = exports.WKSession = exports.WKConnection = undefined;
  var _events = import.meta.require("events");
  var _utils = require_utils3();
  var _debugLogger = require_debugLogger();
  var _helper = require_helper();
  var _protocolError = require_protocolError();
  var kBrowserCloseMessageId = exports.kBrowserCloseMessageId = -9999;
  var kPageProxyMessageReceived = exports.kPageProxyMessageReceived = "kPageProxyMessageReceived";

  class WKConnection {
    constructor(transport, onDisconnect, protocolLogger, browserLogsCollector) {
      this._transport = undefined;
      this._onDisconnect = undefined;
      this._protocolLogger = undefined;
      this._browserLogsCollector = undefined;
      this._browserDisconnectedLogs = undefined;
      this._lastId = 0;
      this._closed = false;
      this.browserSession = undefined;
      this._transport = transport;
      this._onDisconnect = onDisconnect;
      this._protocolLogger = protocolLogger;
      this._browserLogsCollector = browserLogsCollector;
      this.browserSession = new WKSession(this, "", (message) => {
        this.rawSend(message);
      });
      this._transport.onmessage = this._dispatchMessage.bind(this);
      this._transport.onclose = this._onClose.bind(this);
    }
    nextMessageId() {
      return ++this._lastId;
    }
    rawSend(message) {
      this._protocolLogger("send", message);
      this._transport.send(message);
    }
    _dispatchMessage(message) {
      this._protocolLogger("receive", message);
      if (message.id === kBrowserCloseMessageId)
        return;
      if (message.pageProxyId) {
        const payload = {
          message,
          pageProxyId: message.pageProxyId
        };
        this.browserSession.dispatchMessage({
          method: kPageProxyMessageReceived,
          params: payload
        });
        return;
      }
      this.browserSession.dispatchMessage(message);
    }
    _onClose() {
      this._closed = true;
      this._transport.onmessage = undefined;
      this._transport.onclose = undefined;
      this._browserDisconnectedLogs = _helper.helper.formatBrowserLogs(this._browserLogsCollector.recentLogs());
      this.browserSession.dispose();
      this._onDisconnect();
    }
    isClosed() {
      return this._closed;
    }
    close() {
      if (!this._closed)
        this._transport.close();
    }
  }
  exports.WKConnection = WKConnection;

  class WKSession extends _events.EventEmitter {
    constructor(connection, sessionId, rawSend) {
      super();
      this.connection = undefined;
      this.sessionId = undefined;
      this._disposed = false;
      this._rawSend = undefined;
      this._callbacks = new Map;
      this._crashed = false;
      this.on = undefined;
      this.addListener = undefined;
      this.off = undefined;
      this.removeListener = undefined;
      this.once = undefined;
      this.setMaxListeners(0);
      this.connection = connection;
      this.sessionId = sessionId;
      this._rawSend = rawSend;
      this.on = super.on;
      this.off = super.removeListener;
      this.addListener = super.addListener;
      this.removeListener = super.removeListener;
      this.once = super.once;
    }
    async send(method, params) {
      if (this._crashed || this._disposed || this.connection._browserDisconnectedLogs)
        throw new _protocolError.ProtocolError(this._crashed ? "crashed" : "closed", undefined, this.connection._browserDisconnectedLogs);
      const id = this.connection.nextMessageId();
      const messageObj = {
        id,
        method,
        params
      };
      this._rawSend(messageObj);
      return new Promise((resolve, reject) => {
        this._callbacks.set(id, {
          resolve,
          reject,
          error: new _protocolError.ProtocolError("error", method)
        });
      });
    }
    sendMayFail(method, params) {
      return this.send(method, params).catch((error) => _debugLogger.debugLogger.log("error", error));
    }
    markAsCrashed() {
      this._crashed = true;
    }
    isDisposed() {
      return this._disposed;
    }
    dispose() {
      for (const callback of this._callbacks.values()) {
        callback.error.type = this._crashed ? "crashed" : "closed";
        callback.error.logs = this.connection._browserDisconnectedLogs;
        callback.reject(callback.error);
      }
      this._callbacks.clear();
      this._disposed = true;
    }
    dispatchMessage(object) {
      if (object.id && this._callbacks.has(object.id)) {
        const callback = this._callbacks.get(object.id);
        this._callbacks.delete(object.id);
        if (object.error) {
          callback.error.setMessage(object.error.message);
          callback.reject(callback.error);
        } else {
          callback.resolve(object.result);
        }
      } else if (object.id && !object.error) {
        (0, _utils.assert)(this.isDisposed());
      } else {
        Promise.resolve().then(() => this.emit(object.method, object.params));
      }
    }
  }
  exports.WKSession = WKSession;
});

// node_modules/playwright-core/lib/server/webkit/wkAccessibility.js
var require_wkAccessibility = __commonJS((exports) => {
  async function getAccessibilityTree(session, needle) {
    const objectId = needle ? needle._objectId : undefined;
    const {
      axNode
    } = await session.send("Page.accessibilitySnapshot", {
      objectId
    });
    const tree = new WKAXNode(axNode);
    return {
      tree,
      needle: needle ? tree._findNeedle() : null
    };
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getAccessibilityTree = getAccessibilityTree;
  var WKRoleToARIARole = new Map(Object.entries({
    TextField: "textbox"
  }));
  var WKUnhelpfulRoleDescriptions = new Map(Object.entries({
    WebArea: "HTML content",
    Summary: "summary",
    DescriptionList: "description list",
    ImageMap: "image map",
    ListMarker: "list marker",
    Video: "video playback",
    Mark: "highlighted",
    contentinfo: "content information",
    Details: "details",
    DescriptionListDetail: "description",
    DescriptionListTerm: "term",
    alertdialog: "web alert dialog",
    dialog: "web dialog",
    status: "application status",
    tabpanel: "tab panel",
    application: "web application"
  }));

  class WKAXNode {
    constructor(payload) {
      this._payload = undefined;
      this._children = undefined;
      this._payload = payload;
      this._children = [];
      for (const payload2 of this._payload.children || [])
        this._children.push(new WKAXNode(payload2));
    }
    children() {
      return this._children;
    }
    _findNeedle() {
      if (this._payload.found)
        return this;
      for (const child of this._children) {
        const found = child._findNeedle();
        if (found)
          return found;
      }
      return null;
    }
    isControl() {
      switch (this._payload.role) {
        case "button":
        case "checkbox":
        case "ColorWell":
        case "combobox":
        case "DisclosureTriangle":
        case "listbox":
        case "menu":
        case "menubar":
        case "menuitem":
        case "menuitemcheckbox":
        case "menuitemradio":
        case "radio":
        case "scrollbar":
        case "searchbox":
        case "slider":
        case "spinbutton":
        case "switch":
        case "tab":
        case "textbox":
        case "TextField":
        case "tree":
          return true;
        default:
          return false;
      }
    }
    _isTextControl() {
      switch (this._payload.role) {
        case "combobox":
        case "searchfield":
        case "textbox":
        case "TextField":
          return true;
      }
      return false;
    }
    _name() {
      if (this._payload.role === "text")
        return this._payload.value || "";
      return this._payload.name || "";
    }
    isInteresting(insideControl) {
      const {
        role,
        focusable
      } = this._payload;
      const name = this._name();
      if (role === "ScrollArea")
        return false;
      if (role === "WebArea")
        return true;
      if (focusable || role === "MenuListOption")
        return true;
      if (this.isControl())
        return true;
      if (insideControl)
        return false;
      return this.isLeafNode() && !!name;
    }
    _hasRedundantTextChild() {
      if (this._children.length !== 1)
        return false;
      const child = this._children[0];
      return child._payload.role === "text" && this._payload.name === child._payload.value;
    }
    isLeafNode() {
      if (!this._children.length)
        return true;
      if (this._isTextControl())
        return true;
      if (this._hasRedundantTextChild())
        return true;
      return false;
    }
    serialize() {
      const node = {
        role: WKRoleToARIARole.get(this._payload.role) || this._payload.role,
        name: this._name()
      };
      if ("description" in this._payload && this._payload.description !== node.name)
        node.description = this._payload.description;
      if ("roledescription" in this._payload) {
        const roledescription = this._payload.roledescription;
        if (roledescription !== this._payload.role && WKUnhelpfulRoleDescriptions.get(this._payload.role) !== roledescription)
          node.roledescription = roledescription;
      }
      if ("value" in this._payload && this._payload.role !== "text") {
        if (typeof this._payload.value === "string")
          node.valueString = this._payload.value;
        else if (typeof this._payload.value === "number")
          node.valueNumber = this._payload.value;
      }
      if ("checked" in this._payload)
        node.checked = this._payload.checked === "true" ? "checked" : this._payload.checked === "false" ? "unchecked" : "mixed";
      if ("pressed" in this._payload)
        node.pressed = this._payload.pressed === "true" ? "pressed" : this._payload.pressed === "false" ? "released" : "mixed";
      const userStringProperties = ["keyshortcuts", "valuetext"];
      for (const userStringProperty of userStringProperties) {
        if (!(userStringProperty in this._payload))
          continue;
        node[userStringProperty] = this._payload[userStringProperty];
      }
      const booleanProperties = ["disabled", "expanded", "focused", "modal", "multiselectable", "readonly", "required", "selected"];
      for (const booleanProperty of booleanProperties) {
        if (booleanProperty === "focused" && (this._payload.role === "WebArea" || this._payload.role === "ScrollArea"))
          continue;
        const value = this._payload[booleanProperty];
        if (!value)
          continue;
        node[booleanProperty] = value;
      }
      const numericalProperties = ["level", "valuemax", "valuemin"];
      for (const numericalProperty of numericalProperties) {
        if (!(numericalProperty in this._payload))
          continue;
        node[numericalProperty] = this._payload[numericalProperty];
      }
      const tokenProperties = ["autocomplete", "haspopup", "invalid"];
      for (const tokenProperty of tokenProperties) {
        const value = this._payload[tokenProperty];
        if (!value || value === "false")
          continue;
        node[tokenProperty] = value;
      }
      const orientationIsApplicable = new Set(["ScrollArea", "scrollbar", "listbox", "combobox", "menu", "tree", "separator", "slider", "tablist", "toolbar"]);
      if (this._payload.orientation && orientationIsApplicable.has(this._payload.role))
        node.orientation = this._payload.orientation;
      return node;
    }
  }
});

// node_modules/playwright-core/lib/server/webkit/wkExecutionContext.js
var require_wkExecutionContext = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var potentiallyUnserializableValue = function(remoteObject) {
    const value = remoteObject.value;
    const isUnserializable = remoteObject.type === "number" && ["NaN", "-Infinity", "Infinity", "-0"].includes(remoteObject.description);
    return isUnserializable ? js.parseUnserializableValue(remoteObject.description) : value;
  };
  var rewriteError = function(error) {
    if (!js.isJavaScriptErrorInEvaluate(error) && !(0, _protocolError.isSessionClosedError)(error))
      return new Error("Execution context was destroyed, most likely because of a navigation.");
    return error;
  };
  var renderPreview = function(object) {
    if (object.type === "undefined")
      return "undefined";
    if ("value" in object)
      return String(object.value);
    if (object.description === "Object" && object.preview) {
      const tokens = [];
      for (const {
        name,
        value
      } of object.preview.properties)
        tokens.push(`${name}: ${value}`);
      return `{${tokens.join(", ")}}`;
    }
    if (object.subtype === "array" && object.preview)
      return js.sparseArrayToString(object.preview.properties);
    return object.description;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WKExecutionContext = undefined;
  var js = _interopRequireWildcard(require_javascript());
  var _utilityScriptSerializers = require_utilityScriptSerializers();
  var _protocolError = require_protocolError();

  class WKExecutionContext {
    constructor(session, contextId) {
      this._session = undefined;
      this._contextId = undefined;
      this._session = session;
      this._contextId = contextId;
    }
    async rawEvaluateJSON(expression) {
      try {
        const response = await this._session.send("Runtime.evaluate", {
          expression,
          contextId: this._contextId,
          returnByValue: true
        });
        if (response.wasThrown)
          throw new js.JavaScriptErrorInEvaluate(response.result.description);
        return response.result.value;
      } catch (error) {
        throw rewriteError(error);
      }
    }
    async rawEvaluateHandle(expression) {
      try {
        const response = await this._session.send("Runtime.evaluate", {
          expression,
          contextId: this._contextId,
          returnByValue: false
        });
        if (response.wasThrown)
          throw new js.JavaScriptErrorInEvaluate(response.result.description);
        return response.result.objectId;
      } catch (error) {
        throw rewriteError(error);
      }
    }
    rawCallFunctionNoReply(func, ...args) {
      this._session.send("Runtime.callFunctionOn", {
        functionDeclaration: func.toString(),
        objectId: args.find((a) => a instanceof js.JSHandle)._objectId,
        arguments: args.map((a) => a instanceof js.JSHandle ? {
          objectId: a._objectId
        } : {
          value: a
        }),
        returnByValue: true,
        emulateUserGesture: true
      }).catch(() => {
      });
    }
    async evaluateWithArguments(expression, returnByValue, utilityScript, values, objectIds) {
      try {
        const response = await this._session.send("Runtime.callFunctionOn", {
          functionDeclaration: expression,
          objectId: utilityScript._objectId,
          arguments: [{
            objectId: utilityScript._objectId
          }, ...values.map((value) => ({
            value
          })), ...objectIds.map((objectId) => ({
            objectId
          }))],
          returnByValue,
          emulateUserGesture: true,
          awaitPromise: true
        });
        if (response.wasThrown)
          throw new js.JavaScriptErrorInEvaluate(response.result.description);
        if (returnByValue)
          return (0, _utilityScriptSerializers.parseEvaluationResultValue)(response.result.value);
        return utilityScript._context.createHandle(response.result);
      } catch (error) {
        throw rewriteError(error);
      }
    }
    async getProperties(context, objectId) {
      const response = await this._session.send("Runtime.getProperties", {
        objectId,
        ownProperties: true
      });
      const result = new Map;
      for (const property of response.properties) {
        if (!property.enumerable || !property.value)
          continue;
        result.set(property.name, context.createHandle(property.value));
      }
      return result;
    }
    createHandle(context, remoteObject) {
      const isPromise = remoteObject.className === "Promise";
      return new js.JSHandle(context, isPromise ? "promise" : remoteObject.subtype || remoteObject.type, renderPreview(remoteObject), remoteObject.objectId, potentiallyUnserializableValue(remoteObject));
    }
    async releaseHandle(objectId) {
      await this._session.send("Runtime.releaseObject", {
        objectId
      });
    }
    objectCount(objectId) {
      throw new Error("Method not implemented in WebKit.");
    }
  }
  exports.WKExecutionContext = WKExecutionContext;
});

// node_modules/playwright-core/lib/server/webkit/wkInput.js
var require_wkInput = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var toModifiersMask = function(modifiers) {
    let mask = 0;
    if (modifiers.has("Shift"))
      mask |= 1;
    if (modifiers.has("Control"))
      mask |= 2;
    if (modifiers.has("Alt"))
      mask |= 4;
    if (modifiers.has("Meta"))
      mask |= 8;
    return mask;
  };
  var toButtonsMask = function(buttons) {
    let mask = 0;
    if (buttons.has("left"))
      mask |= 1;
    if (buttons.has("right"))
      mask |= 2;
    if (buttons.has("middle"))
      mask |= 4;
    return mask;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.RawTouchscreenImpl = exports.RawMouseImpl = exports.RawKeyboardImpl = undefined;
  var input = _interopRequireWildcard(require_input());
  var _macEditingCommands = require_macEditingCommands();
  var _utils = require_utils3();

  class RawKeyboardImpl {
    constructor(session) {
      this._pageProxySession = undefined;
      this._session = undefined;
      this._pageProxySession = session;
    }
    setSession(session) {
      this._session = session;
    }
    async keydown(modifiers, code, keyCode, keyCodeWithoutLocation, key, location2, autoRepeat, text) {
      const parts = [];
      for (const modifier of ["Shift", "Control", "Alt", "Meta"]) {
        if (modifiers.has(modifier))
          parts.push(modifier);
      }
      parts.push(code);
      const shortcut = parts.join("+");
      let commands = _macEditingCommands.macEditingCommands[shortcut];
      if ((0, _utils.isString)(commands))
        commands = [commands];
      await this._pageProxySession.send("Input.dispatchKeyEvent", {
        type: "keyDown",
        modifiers: toModifiersMask(modifiers),
        windowsVirtualKeyCode: keyCode,
        code,
        key,
        text,
        unmodifiedText: text,
        autoRepeat,
        macCommands: commands,
        isKeypad: location2 === input.keypadLocation
      });
    }
    async keyup(modifiers, code, keyCode, keyCodeWithoutLocation, key, location2) {
      await this._pageProxySession.send("Input.dispatchKeyEvent", {
        type: "keyUp",
        modifiers: toModifiersMask(modifiers),
        key,
        windowsVirtualKeyCode: keyCode,
        code,
        isKeypad: location2 === input.keypadLocation
      });
    }
    async sendText(text) {
      await this._session.send("Page.insertText", {
        text
      });
    }
  }
  exports.RawKeyboardImpl = RawKeyboardImpl;

  class RawMouseImpl {
    constructor(session) {
      this._pageProxySession = undefined;
      this._session = undefined;
      this._page = undefined;
      this._pageProxySession = session;
    }
    setSession(session) {
      this._session = session;
    }
    async move(x, y, button, buttons, modifiers, forClick) {
      await this._pageProxySession.send("Input.dispatchMouseEvent", {
        type: "move",
        button,
        buttons: toButtonsMask(buttons),
        x,
        y,
        modifiers: toModifiersMask(modifiers)
      });
    }
    async down(x, y, button, buttons, modifiers, clickCount) {
      await this._pageProxySession.send("Input.dispatchMouseEvent", {
        type: "down",
        button,
        buttons: toButtonsMask(buttons),
        x,
        y,
        modifiers: toModifiersMask(modifiers),
        clickCount
      });
    }
    async up(x, y, button, buttons, modifiers, clickCount) {
      await this._pageProxySession.send("Input.dispatchMouseEvent", {
        type: "up",
        button,
        buttons: toButtonsMask(buttons),
        x,
        y,
        modifiers: toModifiersMask(modifiers),
        clickCount
      });
    }
    async wheel(x, y, buttons, modifiers, deltaX, deltaY) {
      var _this$_page;
      if ((_this$_page = this._page) !== null && _this$_page !== undefined && _this$_page._browserContext._options.isMobile)
        throw new Error("Mouse wheel is not supported in mobile WebKit");
      await this._session.send("Page.updateScrollingState");
      await this._page.mainFrame().evaluateExpression(`new Promise(requestAnimationFrame)`, {
        world: "utility"
      });
      await this._pageProxySession.send("Input.dispatchWheelEvent", {
        x,
        y,
        deltaX,
        deltaY,
        modifiers: toModifiersMask(modifiers)
      });
    }
    setPage(page) {
      this._page = page;
    }
  }
  exports.RawMouseImpl = RawMouseImpl;

  class RawTouchscreenImpl {
    constructor(session) {
      this._pageProxySession = undefined;
      this._pageProxySession = session;
    }
    async tap(x, y, modifiers) {
      await this._pageProxySession.send("Input.dispatchTapEvent", {
        x,
        y,
        modifiers: toModifiersMask(modifiers)
      });
    }
  }
  exports.RawTouchscreenImpl = RawTouchscreenImpl;
});

// node_modules/playwright-core/lib/server/webkit/wkInterceptableRequest.js
var require_wkInterceptableRequest = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var wkMillisToRoundishMillis = function(value) {
    if (value === -1000)
      return -1;
    if (value <= 0) {
      return -1;
    }
    return (value * 1000 | 0) / 1000;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WKRouteImpl = exports.WKInterceptableRequest = undefined;
  var network = _interopRequireWildcard(require_network2());
  var _utils = require_utils3();
  var errorReasons = {
    aborted: "Cancellation",
    accessdenied: "AccessControl",
    addressunreachable: "General",
    blockedbyclient: "Cancellation",
    blockedbyresponse: "General",
    connectionaborted: "General",
    connectionclosed: "General",
    connectionfailed: "General",
    connectionrefused: "General",
    connectionreset: "General",
    internetdisconnected: "General",
    namenotresolved: "General",
    timedout: "Timeout",
    failed: "General"
  };

  class WKInterceptableRequest {
    constructor(session, frame, event, redirectedFrom, documentId) {
      this._session = undefined;
      this.request = undefined;
      this._requestId = undefined;
      this._timestamp = undefined;
      this._wallTime = undefined;
      this._session = session;
      this._requestId = event.requestId;
      const resourceType = event.type ? event.type.toLowerCase() : redirectedFrom ? redirectedFrom.request.resourceType() : "other";
      let postDataBuffer = null;
      this._timestamp = event.timestamp;
      this._wallTime = event.walltime * 1000;
      if (event.request.postData)
        postDataBuffer = Buffer.from(event.request.postData, "base64");
      this.request = new network.Request(frame._page._browserContext, frame, null, (redirectedFrom === null || redirectedFrom === undefined ? undefined : redirectedFrom.request) || null, documentId, event.request.url, resourceType, event.request.method, postDataBuffer, (0, _utils.headersObjectToArray)(event.request.headers));
    }
    createResponse(responsePayload) {
      const getResponseBody = async () => {
        const response2 = await this._session.send("Network.getResponseBody", {
          requestId: this._requestId
        });
        return Buffer.from(response2.body, response2.base64Encoded ? "base64" : "utf8");
      };
      const timingPayload = responsePayload.timing;
      const timing = {
        startTime: this._wallTime,
        domainLookupStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.domainLookupStart) : -1,
        domainLookupEnd: timingPayload ? wkMillisToRoundishMillis(timingPayload.domainLookupEnd) : -1,
        connectStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.connectStart) : -1,
        secureConnectionStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.secureConnectionStart) : -1,
        connectEnd: timingPayload ? wkMillisToRoundishMillis(timingPayload.connectEnd) : -1,
        requestStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.requestStart) : -1,
        responseStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.responseStart) : -1
      };
      const setCookieSeparator = process.platform === "darwin" ? "," : "\n";
      const response = new network.Response(this.request, responsePayload.status, responsePayload.statusText, (0, _utils.headersObjectToArray)(responsePayload.headers, ",", setCookieSeparator), timing, getResponseBody, responsePayload.source === "service-worker");
      response.setRawResponseHeaders(null);
      response.setTransferSize(null);
      if (responsePayload.requestHeaders && Object.keys(responsePayload.requestHeaders).length) {
        const headers = {
          ...responsePayload.requestHeaders
        };
        if (!headers["host"])
          headers["Host"] = new URL(this.request.url()).host;
        this.request.setRawRequestHeaders((0, _utils.headersObjectToArray)(headers));
      } else {
        this.request.setRawRequestHeaders(null);
      }
      return response;
    }
  }
  exports.WKInterceptableRequest = WKInterceptableRequest;

  class WKRouteImpl {
    constructor(session, requestId) {
      this._session = undefined;
      this._requestId = undefined;
      this._session = session;
      this._requestId = requestId;
    }
    async abort(errorCode) {
      const errorType = errorReasons[errorCode];
      (0, _utils.assert)(errorType, "Unknown error code: " + errorCode);
      await this._session.sendMayFail("Network.interceptRequestWithError", {
        requestId: this._requestId,
        errorType
      });
    }
    async fulfill(response) {
      if (300 <= response.status && response.status < 400)
        throw new Error("Cannot fulfill with redirect status: " + response.status);
      let mimeType = response.isBase64 ? "application/octet-stream" : "text/plain";
      const headers = (0, _utils.headersArrayToObject)(response.headers, true);
      const contentType = headers["content-type"];
      if (contentType)
        mimeType = contentType.split(";")[0].trim();
      await this._session.sendMayFail("Network.interceptRequestWithResponse", {
        requestId: this._requestId,
        status: response.status,
        statusText: network.STATUS_TEXTS[String(response.status)],
        mimeType,
        headers,
        base64Encoded: response.isBase64,
        content: response.body
      });
    }
    async continue(request, overrides) {
      await this._session.sendMayFail("Network.interceptWithRequest", {
        requestId: this._requestId,
        url: overrides.url,
        method: overrides.method,
        headers: overrides.headers ? (0, _utils.headersArrayToObject)(overrides.headers, false) : undefined,
        postData: overrides.postData ? Buffer.from(overrides.postData).toString("base64") : undefined
      });
    }
  }
  exports.WKRouteImpl = WKRouteImpl;
});

// node_modules/playwright-core/lib/server/webkit/wkProvisionalPage.js
var require_wkProvisionalPage = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WKProvisionalPage = undefined;
  var _eventsHelper = require_eventsHelper();
  var _utils = require_utils3();

  class WKProvisionalPage {
    constructor(session, page) {
      this._session = undefined;
      this._wkPage = undefined;
      this._sessionListeners = [];
      this._mainFrameId = null;
      this.initializationPromise = undefined;
      this._session = session;
      this._wkPage = page;
      const overrideFrameId = (handler) => {
        return (payload) => {
          if (payload.frameId)
            payload.frameId = this._wkPage._page._frameManager.mainFrame()._id;
          handler(payload);
        };
      };
      const wkPage = this._wkPage;
      this._sessionListeners = [_eventsHelper.eventsHelper.addEventListener(session, "Network.requestWillBeSent", overrideFrameId((e) => wkPage._onRequestWillBeSent(session, e))), _eventsHelper.eventsHelper.addEventListener(session, "Network.requestIntercepted", overrideFrameId((e) => wkPage._onRequestIntercepted(session, e))), _eventsHelper.eventsHelper.addEventListener(session, "Network.responseReceived", overrideFrameId((e) => wkPage._onResponseReceived(session, e))), _eventsHelper.eventsHelper.addEventListener(session, "Network.loadingFinished", overrideFrameId((e) => wkPage._onLoadingFinished(e))), _eventsHelper.eventsHelper.addEventListener(session, "Network.loadingFailed", overrideFrameId((e) => wkPage._onLoadingFailed(session, e)))];
      this.initializationPromise = this._wkPage._initializeSession(session, true, ({
        frameTree
      }) => this._handleFrameTree(frameTree));
    }
    dispose() {
      _eventsHelper.eventsHelper.removeEventListeners(this._sessionListeners);
    }
    commit() {
      (0, _utils.assert)(this._mainFrameId);
      this._wkPage._onFrameAttached(this._mainFrameId, null);
    }
    _handleFrameTree(frameTree) {
      (0, _utils.assert)(!frameTree.frame.parentId);
      this._mainFrameId = frameTree.frame.id;
    }
  }
  exports.WKProvisionalPage = WKProvisionalPage;
});

// node_modules/playwright-core/lib/server/webkit/wkWorkers.js
var require_wkWorkers = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WKWorkers = undefined;
  var _eventsHelper = require_eventsHelper();
  var _page = require_page();
  var _wkConnection = require_wkConnection();
  var _wkExecutionContext = require_wkExecutionContext();

  class WKWorkers {
    constructor(page) {
      this._sessionListeners = [];
      this._page = undefined;
      this._workerSessions = new Map;
      this._page = page;
    }
    setSession(session) {
      _eventsHelper.eventsHelper.removeEventListeners(this._sessionListeners);
      this.clear();
      this._sessionListeners = [_eventsHelper.eventsHelper.addEventListener(session, "Worker.workerCreated", (event) => {
        const worker = new _page.Worker(this._page, event.url);
        const workerSession = new _wkConnection.WKSession(session.connection, event.workerId, (message) => {
          session.send("Worker.sendMessageToWorker", {
            workerId: event.workerId,
            message: JSON.stringify(message)
          }).catch((e) => {
            workerSession.dispatchMessage({
              id: message.id,
              error: {
                message: e.message
              }
            });
          });
        });
        this._workerSessions.set(event.workerId, workerSession);
        worker._createExecutionContext(new _wkExecutionContext.WKExecutionContext(workerSession, undefined));
        this._page._addWorker(event.workerId, worker);
        workerSession.on("Console.messageAdded", (event2) => this._onConsoleMessage(worker, event2));
        Promise.all([workerSession.send("Runtime.enable"), workerSession.send("Console.enable"), session.send("Worker.initialized", {
          workerId: event.workerId
        })]).catch((e) => {
          this._page._removeWorker(event.workerId);
        });
      }), _eventsHelper.eventsHelper.addEventListener(session, "Worker.dispatchMessageFromWorker", (event) => {
        const workerSession = this._workerSessions.get(event.workerId);
        if (!workerSession)
          return;
        workerSession.dispatchMessage(JSON.parse(event.message));
      }), _eventsHelper.eventsHelper.addEventListener(session, "Worker.workerTerminated", (event) => {
        const workerSession = this._workerSessions.get(event.workerId);
        if (!workerSession)
          return;
        workerSession.dispose();
        this._workerSessions.delete(event.workerId);
        this._page._removeWorker(event.workerId);
      })];
    }
    clear() {
      this._page._clearWorkers();
      this._workerSessions.clear();
    }
    async initializeSession(session) {
      await session.send("Worker.enable");
    }
    async _onConsoleMessage(worker, event) {
      const {
        type,
        level,
        text,
        parameters,
        url,
        line: lineNumber,
        column: columnNumber
      } = event.message;
      let derivedType = type || "";
      if (type === "log")
        derivedType = level;
      else if (type === "timing")
        derivedType = "timeEnd";
      const handles = (parameters || []).map((p) => {
        return worker._existingExecutionContext.createHandle(p);
      });
      const location2 = {
        url: url || "",
        lineNumber: (lineNumber || 1) - 1,
        columnNumber: (columnNumber || 1) - 1
      };
      this._page._addConsoleMessage(derivedType, handles, location2, handles.length ? undefined : text);
    }
  }
  exports.WKWorkers = WKWorkers;
});

// node_modules/playwright-core/lib/server/webkit/wkPage.js
var require_wkPage = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var parseRemoteAddress = function(value) {
    if (!value)
      return;
    try {
      const colon = value.lastIndexOf(":");
      const dot = value.lastIndexOf(".");
      if (dot < 0) {
        return {
          ipAddress: `[${value.slice(0, colon)}]`,
          port: +value.slice(colon + 1)
        };
      }
      if (colon > dot) {
        const [address, port] = value.split(":");
        return {
          ipAddress: address,
          port: +port
        };
      } else {
        const [address, port] = value.split(".");
        return {
          ipAddress: `[${address}]`,
          port: +port
        };
      }
    } catch (_) {
    }
  };
  var isLoadedSecurely = function(url, timing) {
    try {
      const u = new URL(url);
      if (u.protocol !== "https:" && u.protocol !== "wss:" && u.protocol !== "sftp:")
        return false;
      if (timing.secureConnectionStart === -1 && timing.connectStart !== -1)
        return false;
      return true;
    } catch (_) {
    }
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WKPage = undefined;
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _utilsBundle = require_utilsBundle();
  var _stackTrace = require_stackTrace();
  var _utils = require_utils3();
  var _hostPlatform = require_hostPlatform();
  var dialog = _interopRequireWildcard(require_dialog());
  var dom = _interopRequireWildcard(require_dom());
  var _eventsHelper = require_eventsHelper();
  var _helper = require_helper();
  var network = _interopRequireWildcard(require_network2());
  var _page = require_page();
  var _wkAccessibility = require_wkAccessibility();
  var _wkConnection = require_wkConnection();
  var _wkExecutionContext = require_wkExecutionContext();
  var _wkInput = require_wkInput();
  var _wkInterceptableRequest = require_wkInterceptableRequest();
  var _wkProvisionalPage = require_wkProvisionalPage();
  var _wkWorkers = require_wkWorkers();
  var _debugLogger = require_debugLogger();
  var _manualPromise = require_manualPromise();
  var _browserContext = require_browserContext();
  var _errors = require_errors();
  var UTILITY_WORLD_NAME = "__playwright_utility_world__";

  class WKPage {
    constructor(browserContext, pageProxySession, opener) {
      this.rawMouse = undefined;
      this.rawKeyboard = undefined;
      this.rawTouchscreen = undefined;
      this._session = undefined;
      this._provisionalPage = null;
      this._page = undefined;
      this._pagePromise = new _manualPromise.ManualPromise;
      this._pageProxySession = undefined;
      this._opener = undefined;
      this._requestIdToRequest = new Map;
      this._requestIdToRequestWillBeSentEvent = new Map;
      this._workers = undefined;
      this._contextIdToContext = undefined;
      this._sessionListeners = [];
      this._eventListeners = undefined;
      this._browserContext = undefined;
      this._initializedPage = null;
      this._firstNonInitialNavigationCommittedPromise = undefined;
      this._firstNonInitialNavigationCommittedFulfill = () => {
      };
      this._firstNonInitialNavigationCommittedReject = (e) => {
      };
      this._lastConsoleMessage = null;
      this._requestIdToResponseReceivedPayloadEvent = new Map;
      this._nextWindowOpenPopupFeatures = undefined;
      this._recordingVideoFile = null;
      this._screencastGeneration = 0;
      this._pageProxySession = pageProxySession;
      this._opener = opener;
      this.rawKeyboard = new _wkInput.RawKeyboardImpl(pageProxySession);
      this.rawMouse = new _wkInput.RawMouseImpl(pageProxySession);
      this.rawTouchscreen = new _wkInput.RawTouchscreenImpl(pageProxySession);
      this._contextIdToContext = new Map;
      this._page = new _page.Page(this, browserContext);
      this.rawMouse.setPage(this._page);
      this._workers = new _wkWorkers.WKWorkers(this._page);
      this._session = undefined;
      this._browserContext = browserContext;
      this._page.on(_page.Page.Events.FrameDetached, (frame) => this._removeContextsForFrame(frame, false));
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Target.targetCreated", this._onTargetCreated.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Target.targetDestroyed", this._onTargetDestroyed.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Target.dispatchMessageFromTarget", this._onDispatchMessageFromTarget.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Target.didCommitProvisionalTarget", this._onDidCommitProvisionalTarget.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Screencast.screencastFrame", this._onScreencastFrame.bind(this))];
      this._firstNonInitialNavigationCommittedPromise = new Promise((f, r) => {
        this._firstNonInitialNavigationCommittedFulfill = f;
        this._firstNonInitialNavigationCommittedReject = r;
      });
      if (opener && !browserContext._options.noDefaultViewport && opener._nextWindowOpenPopupFeatures) {
        const viewportSize = _helper.helper.getViewportSizeFromWindowFeatures(opener._nextWindowOpenPopupFeatures);
        opener._nextWindowOpenPopupFeatures = undefined;
        if (viewportSize)
          this._page._emulatedSize = {
            viewport: viewportSize,
            screen: viewportSize
          };
      }
    }
    potentiallyUninitializedPage() {
      return this._page;
    }
    async _initializePageProxySession() {
      if (this._page._browserContext.isSettingStorageState())
        return;
      const promises = [this._pageProxySession.send("Dialog.enable"), this._pageProxySession.send("Emulation.setActiveAndFocused", {
        active: true
      })];
      const contextOptions = this._browserContext._options;
      if (contextOptions.javaScriptEnabled === false)
        promises.push(this._pageProxySession.send("Emulation.setJavaScriptEnabled", {
          enabled: false
        }));
      promises.push(this._updateViewport());
      promises.push(this.updateHttpCredentials());
      if (this._browserContext._permissions.size) {
        for (const [key, value] of this._browserContext._permissions)
          promises.push(this._grantPermissions(key, value));
      }
      if (this._browserContext._options.recordVideo) {
        const outputFile = _path.default.join(this._browserContext._options.recordVideo.dir, (0, _utils.createGuid)() + ".webm");
        promises.push(this._browserContext._ensureVideosPath().then(() => {
          return this._startVideo({
            ...this._browserContext._options.recordVideo.size,
            outputFile
          });
        }));
      }
      await Promise.all(promises);
    }
    _setSession(session) {
      _eventsHelper.eventsHelper.removeEventListeners(this._sessionListeners);
      this._session = session;
      this.rawKeyboard.setSession(session);
      this.rawMouse.setSession(session);
      this._addSessionListeners();
      this._workers.setSession(session);
    }
    async _initializeSession(session, provisional, resourceTreeHandler) {
      await this._initializeSessionMayThrow(session, resourceTreeHandler).catch((e) => {
        if (provisional && session.isDisposed())
          return;
        if (this._session === session)
          throw e;
      });
    }
    async _initializeSessionMayThrow(session, resourceTreeHandler) {
      const [, frameTree] = await Promise.all([
        session.send("Page.enable"),
        session.send("Page.getResourceTree")
      ]);
      resourceTreeHandler(frameTree);
      const promises = [
        session.send("Runtime.enable"),
        session.send("Page.createUserWorld", {
          name: UTILITY_WORLD_NAME
        }).catch((_) => {
        }),
        session.send("Console.enable"),
        session.send("Network.enable"),
        this._workers.initializeSession(session)
      ];
      if (this._page.needsRequestInterception()) {
        promises.push(session.send("Network.setInterceptionEnabled", {
          enabled: true
        }));
        promises.push(session.send("Network.setResourceCachingDisabled", {
          disabled: true
        }));
        promises.push(session.send("Network.addInterception", {
          url: ".*",
          stage: "request",
          isRegex: true
        }));
      }
      if (this._page._browserContext.isSettingStorageState()) {
        await Promise.all(promises);
        return;
      }
      const contextOptions = this._browserContext._options;
      if (contextOptions.userAgent)
        promises.push(this.updateUserAgent());
      const emulatedMedia = this._page.emulatedMedia();
      if (emulatedMedia.media || emulatedMedia.colorScheme || emulatedMedia.reducedMotion || emulatedMedia.forcedColors)
        promises.push(WKPage._setEmulateMedia(session, emulatedMedia.media, emulatedMedia.colorScheme, emulatedMedia.reducedMotion, emulatedMedia.forcedColors));
      for (const binding of this._page.allBindings())
        promises.push(session.send("Runtime.addBinding", {
          name: binding.name
        }));
      const bootstrapScript = this._calculateBootstrapScript();
      if (bootstrapScript.length)
        promises.push(session.send("Page.setBootstrapScript", {
          source: bootstrapScript
        }));
      this._page.frames().map((frame) => frame.evaluateExpression(bootstrapScript).catch((e) => {
      }));
      if (contextOptions.bypassCSP)
        promises.push(session.send("Page.setBypassCSP", {
          enabled: true
        }));
      const emulatedSize = this._page.emulatedSize();
      if (emulatedSize) {
        promises.push(session.send("Page.setScreenSizeOverride", {
          width: emulatedSize.screen.width,
          height: emulatedSize.screen.height
        }));
      }
      promises.push(this.updateEmulateMedia());
      promises.push(session.send("Network.setExtraHTTPHeaders", {
        headers: (0, _utils.headersArrayToObject)(this._calculateExtraHTTPHeaders(), false)
      }));
      if (contextOptions.offline)
        promises.push(session.send("Network.setEmulateOfflineState", {
          offline: true
        }));
      promises.push(session.send("Page.setTouchEmulationEnabled", {
        enabled: !!contextOptions.hasTouch
      }));
      if (contextOptions.timezoneId) {
        promises.push(session.send("Page.setTimeZone", {
          timeZone: contextOptions.timezoneId
        }).catch((e) => {
          throw new Error(`Invalid timezone ID: ${contextOptions.timezoneId}`);
        }));
      }
      if (this._page.fileChooserIntercepted())
        promises.push(session.send("Page.setInterceptFileChooserDialog", {
          enabled: true
        }));
      promises.push(session.send("Page.overrideSetting", {
        setting: "DeviceOrientationEventEnabled",
        value: contextOptions.isMobile
      }));
      promises.push(session.send("Page.overrideSetting", {
        setting: "FullScreenEnabled",
        value: !contextOptions.isMobile
      }));
      promises.push(session.send("Page.overrideSetting", {
        setting: "NotificationsEnabled",
        value: !contextOptions.isMobile
      }));
      promises.push(session.send("Page.overrideSetting", {
        setting: "PointerLockEnabled",
        value: !contextOptions.isMobile
      }));
      promises.push(session.send("Page.overrideSetting", {
        setting: "InputTypeMonthEnabled",
        value: contextOptions.isMobile
      }));
      promises.push(session.send("Page.overrideSetting", {
        setting: "InputTypeWeekEnabled",
        value: contextOptions.isMobile
      }));
      await Promise.all(promises);
    }
    _onDidCommitProvisionalTarget(event) {
      const {
        oldTargetId,
        newTargetId
      } = event;
      (0, _utils.assert)(this._provisionalPage);
      (0, _utils.assert)(this._provisionalPage._session.sessionId === newTargetId, "Unknown new target: " + newTargetId);
      (0, _utils.assert)(this._session.sessionId === oldTargetId, "Unknown old target: " + oldTargetId);
      const newSession = this._provisionalPage._session;
      this._provisionalPage.commit();
      this._provisionalPage.dispose();
      this._provisionalPage = null;
      this._setSession(newSession);
    }
    _onTargetDestroyed(event) {
      const {
        targetId,
        crashed
      } = event;
      if (this._provisionalPage && this._provisionalPage._session.sessionId === targetId) {
        this._provisionalPage._session.dispose();
        this._provisionalPage.dispose();
        this._provisionalPage = null;
      } else if (this._session.sessionId === targetId) {
        this._session.dispose();
        _eventsHelper.eventsHelper.removeEventListeners(this._sessionListeners);
        if (crashed) {
          this._session.markAsCrashed();
          this._page._didCrash();
        }
      }
    }
    didClose() {
      this._pageProxySession.dispose();
      _eventsHelper.eventsHelper.removeEventListeners(this._sessionListeners);
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      if (this._session)
        this._session.dispose();
      if (this._provisionalPage) {
        this._provisionalPage._session.dispose();
        this._provisionalPage.dispose();
        this._provisionalPage = null;
      }
      this._firstNonInitialNavigationCommittedReject(new _errors.TargetClosedError);
      this._page._didClose();
    }
    dispatchMessageToSession(message) {
      this._pageProxySession.dispatchMessage(message);
    }
    handleProvisionalLoadFailed(event) {
      if (!this._initializedPage) {
        this._firstNonInitialNavigationCommittedReject(new Error("Initial load failed"));
        return;
      }
      if (!this._provisionalPage)
        return;
      let errorText = event.error;
      if (errorText.includes("cancelled"))
        errorText += "; maybe frame was detached?";
      this._page._frameManager.frameAbortedNavigation(this._page.mainFrame()._id, errorText, event.loaderId);
    }
    handleWindowOpen(event) {
      (0, _utils.debugAssert)(!this._nextWindowOpenPopupFeatures);
      this._nextWindowOpenPopupFeatures = event.windowFeatures;
    }
    async pageOrError() {
      return this._pagePromise;
    }
    async _onTargetCreated(event) {
      const {
        targetInfo
      } = event;
      const session = new _wkConnection.WKSession(this._pageProxySession.connection, targetInfo.targetId, (message) => {
        this._pageProxySession.send("Target.sendMessageToTarget", {
          message: JSON.stringify(message),
          targetId: targetInfo.targetId
        }).catch((e) => {
          session.dispatchMessage({
            id: message.id,
            error: {
              message: e.message
            }
          });
        });
      });
      (0, _utils.assert)(targetInfo.type === "page", "Only page targets are expected in WebKit, received: " + targetInfo.type);
      if (!targetInfo.isProvisional) {
        (0, _utils.assert)(!this._initializedPage);
        let pageOrError;
        try {
          this._setSession(session);
          await Promise.all([this._initializePageProxySession(), this._initializeSession(session, false, ({
            frameTree
          }) => this._handleFrameTree(frameTree))]);
          pageOrError = this._page;
        } catch (e) {
          pageOrError = e;
        }
        if (targetInfo.isPaused)
          this._pageProxySession.sendMayFail("Target.resume", {
            targetId: targetInfo.targetId
          });
        if (pageOrError instanceof _page.Page && this._page.mainFrame().url() === "") {
          try {
            await this._firstNonInitialNavigationCommittedPromise;
          } catch (e) {
            pageOrError = e;
          }
        } else {
          this._firstNonInitialNavigationCommittedPromise.catch(() => {
          });
        }
        await this._page.initOpener(this._opener);
        this._initializedPage = pageOrError instanceof _page.Page ? pageOrError : null;
        this._page.reportAsNew(pageOrError instanceof _page.Page ? undefined : pageOrError);
        this._pagePromise.resolve(pageOrError);
      } else {
        (0, _utils.assert)(targetInfo.isProvisional);
        (0, _utils.assert)(!this._provisionalPage);
        this._provisionalPage = new _wkProvisionalPage.WKProvisionalPage(session, this);
        if (targetInfo.isPaused) {
          this._provisionalPage.initializationPromise.then(() => {
            this._pageProxySession.sendMayFail("Target.resume", {
              targetId: targetInfo.targetId
            });
          });
        }
      }
    }
    _onDispatchMessageFromTarget(event) {
      const {
        targetId,
        message
      } = event;
      if (this._provisionalPage && this._provisionalPage._session.sessionId === targetId)
        this._provisionalPage._session.dispatchMessage(JSON.parse(message));
      else if (this._session.sessionId === targetId)
        this._session.dispatchMessage(JSON.parse(message));
      else
        throw new Error("Unknown target: " + targetId);
    }
    _addSessionListeners() {
      this._sessionListeners = [_eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameNavigated", (event) => this._onFrameNavigated(event.frame, false)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.navigatedWithinDocument", (event) => this._onFrameNavigatedWithinDocument(event.frameId, event.url)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameAttached", (event) => this._onFrameAttached(event.frameId, event.parentFrameId)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameDetached", (event) => this._onFrameDetached(event.frameId)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.willCheckNavigationPolicy", (event) => this._onWillCheckNavigationPolicy(event.frameId)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.didCheckNavigationPolicy", (event) => this._onDidCheckNavigationPolicy(event.frameId, event.cancel)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameScheduledNavigation", (event) => this._onFrameScheduledNavigation(event.frameId, event.delay, event.targetIsCurrentFrame)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.loadEventFired", (event) => this._page._frameManager.frameLifecycleEvent(event.frameId, "load")), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.domContentEventFired", (event) => this._page._frameManager.frameLifecycleEvent(event.frameId, "domcontentloaded")), _eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.executionContextCreated", (event) => this._onExecutionContextCreated(event.context)), _eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.bindingCalled", (event) => this._onBindingCalled(event.contextId, event.argument)), _eventsHelper.eventsHelper.addEventListener(this._session, "Console.messageAdded", (event) => this._onConsoleMessage(event)), _eventsHelper.eventsHelper.addEventListener(this._session, "Console.messageRepeatCountUpdated", (event) => this._onConsoleRepeatCountUpdated(event)), _eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Dialog.javascriptDialogOpening", (event) => this._onDialog(event)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.fileChooserOpened", (event) => this._onFileChooserOpened(event)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.requestWillBeSent", (e) => this._onRequestWillBeSent(this._session, e)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.requestIntercepted", (e) => this._onRequestIntercepted(this._session, e)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.responseReceived", (e) => this._onResponseReceived(this._session, e)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.loadingFinished", (e) => this._onLoadingFinished(e)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.loadingFailed", (e) => this._onLoadingFailed(this._session, e)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketCreated", (e) => this._page._frameManager.onWebSocketCreated(e.requestId, e.url)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketWillSendHandshakeRequest", (e) => this._page._frameManager.onWebSocketRequest(e.requestId)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketHandshakeResponseReceived", (e) => this._page._frameManager.onWebSocketResponse(e.requestId, e.response.status, e.response.statusText)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketFrameSent", (e) => e.response.payloadData && this._page._frameManager.onWebSocketFrameSent(e.requestId, e.response.opcode, e.response.payloadData)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketFrameReceived", (e) => e.response.payloadData && this._page._frameManager.webSocketFrameReceived(e.requestId, e.response.opcode, e.response.payloadData)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketClosed", (e) => this._page._frameManager.webSocketClosed(e.requestId)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketFrameError", (e) => this._page._frameManager.webSocketError(e.requestId, e.errorMessage))];
    }
    async _updateState(method, params) {
      await this._forAllSessions((session) => session.send(method, params).then());
    }
    async _forAllSessions(callback) {
      const sessions = [this._session];
      if (this._provisionalPage)
        sessions.push(this._provisionalPage._session);
      await Promise.all(sessions.map((session) => callback(session).catch((e) => {
      })));
    }
    _onWillCheckNavigationPolicy(frameId) {
      if (this._provisionalPage)
        return;
      this._page._frameManager.frameRequestedNavigation(frameId);
    }
    _onDidCheckNavigationPolicy(frameId, cancel) {
      if (!cancel)
        return;
      if (this._provisionalPage)
        return;
      this._page._frameManager.frameAbortedNavigation(frameId, "Navigation canceled by policy check");
    }
    _onFrameScheduledNavigation(frameId, delay, targetIsCurrentFrame) {
      if (targetIsCurrentFrame)
        this._page._frameManager.frameRequestedNavigation(frameId);
    }
    _handleFrameTree(frameTree) {
      this._onFrameAttached(frameTree.frame.id, frameTree.frame.parentId || null);
      this._onFrameNavigated(frameTree.frame, true);
      this._page._frameManager.frameLifecycleEvent(frameTree.frame.id, "domcontentloaded");
      this._page._frameManager.frameLifecycleEvent(frameTree.frame.id, "load");
      if (!frameTree.childFrames)
        return;
      for (const child of frameTree.childFrames)
        this._handleFrameTree(child);
    }
    _onFrameAttached(frameId, parentFrameId) {
      return this._page._frameManager.frameAttached(frameId, parentFrameId);
    }
    _onFrameNavigated(framePayload, initial) {
      const frame = this._page._frameManager.frame(framePayload.id);
      (0, _utils.assert)(frame);
      this._removeContextsForFrame(frame, true);
      if (!framePayload.parentId)
        this._workers.clear();
      this._page._frameManager.frameCommittedNewDocumentNavigation(framePayload.id, framePayload.url, framePayload.name || "", framePayload.loaderId, initial);
      if (!initial)
        this._firstNonInitialNavigationCommittedFulfill();
    }
    _onFrameNavigatedWithinDocument(frameId, url) {
      this._page._frameManager.frameCommittedSameDocumentNavigation(frameId, url);
    }
    _onFrameDetached(frameId) {
      this._page._frameManager.frameDetached(frameId);
    }
    _removeContextsForFrame(frame, notifyFrame) {
      for (const [contextId, context] of this._contextIdToContext) {
        if (context.frame === frame) {
          this._contextIdToContext.delete(contextId);
          if (notifyFrame)
            frame._contextDestroyed(context);
        }
      }
    }
    _onExecutionContextCreated(contextPayload) {
      if (this._contextIdToContext.has(contextPayload.id))
        return;
      const frame = this._page._frameManager.frame(contextPayload.frameId);
      if (!frame)
        return;
      const delegate = new _wkExecutionContext.WKExecutionContext(this._session, contextPayload.id);
      let worldName = null;
      if (contextPayload.type === "normal")
        worldName = "main";
      else if (contextPayload.type === "user" && contextPayload.name === UTILITY_WORLD_NAME)
        worldName = "utility";
      const context = new dom.FrameExecutionContext(delegate, frame, worldName);
      context[contextDelegateSymbol] = delegate;
      if (worldName)
        frame._contextCreated(worldName, context);
      this._contextIdToContext.set(contextPayload.id, context);
    }
    async _onBindingCalled(contextId, argument) {
      const pageOrError = await this.pageOrError();
      if (!(pageOrError instanceof Error)) {
        const context = this._contextIdToContext.get(contextId);
        if (context)
          await this._page._onBindingCalled(argument, context);
      }
    }
    async navigateFrame(frame, url, referrer) {
      if (this._pageProxySession.isDisposed())
        throw new _errors.TargetClosedError;
      const pageProxyId = this._pageProxySession.sessionId;
      const result = await this._pageProxySession.connection.browserSession.send("Playwright.navigate", {
        url,
        pageProxyId,
        frameId: frame._id,
        referrer
      });
      return {
        newDocumentId: result.loaderId
      };
    }
    _onConsoleMessage(event) {
      const {
        type,
        level,
        text,
        parameters,
        url,
        line: lineNumber,
        column: columnNumber,
        source
      } = event.message;
      if (level === "error" && source === "javascript") {
        const {
          name,
          message
        } = (0, _stackTrace.splitErrorMessage)(text);
        let stack;
        if (event.message.stackTrace) {
          stack = text + "\n" + event.message.stackTrace.callFrames.map((callFrame) => {
            return `    at ${callFrame.functionName || "unknown"} (${callFrame.url}:${callFrame.lineNumber}:${callFrame.columnNumber})`;
          }).join("\n");
        } else {
          stack = "";
        }
        this._lastConsoleMessage = null;
        const error = new Error(message);
        error.stack = stack;
        error.name = name;
        this._page.emitOnContextOnceInitialized(_browserContext.BrowserContext.Events.PageError, error, this._page);
        return;
      }
      let derivedType = type || "";
      if (type === "log")
        derivedType = level;
      else if (type === "timing")
        derivedType = "timeEnd";
      const handles = [];
      for (const p of parameters || []) {
        let context;
        if (p.objectId) {
          const objectId = JSON.parse(p.objectId);
          context = this._contextIdToContext.get(objectId.injectedScriptId);
        } else {
          context = [...this._contextIdToContext.values()].find((c) => c.frame === this._page.mainFrame());
        }
        if (!context)
          return;
        handles.push(context.createHandle(p));
      }
      this._lastConsoleMessage = {
        derivedType,
        text,
        handles,
        count: 0,
        location: {
          url: url || "",
          lineNumber: (lineNumber || 1) - 1,
          columnNumber: (columnNumber || 1) - 1
        }
      };
      this._onConsoleRepeatCountUpdated({
        count: 1
      });
    }
    _onConsoleRepeatCountUpdated(event) {
      if (this._lastConsoleMessage) {
        const {
          derivedType,
          text,
          handles,
          count,
          location: location2
        } = this._lastConsoleMessage;
        for (let i = count;i < event.count; ++i)
          this._page._addConsoleMessage(derivedType, handles, location2, handles.length ? undefined : text);
        this._lastConsoleMessage.count = event.count;
      }
    }
    _onDialog(event) {
      this._page.emitOnContext(_browserContext.BrowserContext.Events.Dialog, new dialog.Dialog(this._page, event.type, event.message, async (accept, promptText) => {
        await this._pageProxySession.send("Dialog.handleJavaScriptDialog", {
          accept,
          promptText
        });
      }, event.defaultPrompt));
    }
    async _onFileChooserOpened(event) {
      let handle;
      try {
        const context = await this._page._frameManager.frame(event.frameId)._mainContext();
        handle = context.createHandle(event.element).asElement();
      } catch (e) {
        return;
      }
      await this._page._onFileChooserOpened(handle);
    }
    static async _setEmulateMedia(session, mediaType, colorScheme, reducedMotion, forcedColors) {
      const promises = [];
      promises.push(session.send("Page.setEmulatedMedia", {
        media: mediaType === "no-override" ? "" : mediaType
      }));
      let appearance = undefined;
      switch (colorScheme) {
        case "light":
          appearance = "Light";
          break;
        case "dark":
          appearance = "Dark";
          break;
        case "no-override":
          appearance = undefined;
          break;
      }
      promises.push(session.send("Page.overrideUserPreference", {
        name: "PrefersColorScheme",
        value: appearance
      }));
      let reducedMotionWk = undefined;
      switch (reducedMotion) {
        case "reduce":
          reducedMotionWk = "Reduce";
          break;
        case "no-preference":
          reducedMotionWk = "NoPreference";
          break;
        case "no-override":
          reducedMotionWk = undefined;
          break;
      }
      promises.push(session.send("Page.overrideUserPreference", {
        name: "PrefersReducedMotion",
        value: reducedMotionWk
      }));
      let forcedColorsWk = undefined;
      switch (forcedColors) {
        case "active":
          forcedColorsWk = "Active";
          break;
        case "none":
          forcedColorsWk = "None";
          break;
        case "no-override":
          forcedColorsWk = undefined;
          break;
      }
      promises.push(session.send("Page.setForcedColors", {
        forcedColors: forcedColorsWk
      }));
      await Promise.all(promises);
    }
    async updateExtraHTTPHeaders() {
      await this._updateState("Network.setExtraHTTPHeaders", {
        headers: (0, _utils.headersArrayToObject)(this._calculateExtraHTTPHeaders(), false)
      });
    }
    _calculateExtraHTTPHeaders() {
      const locale = this._browserContext._options.locale;
      const headers = network.mergeHeaders([this._browserContext._options.extraHTTPHeaders, this._page.extraHTTPHeaders(), locale ? network.singleHeader("Accept-Language", locale) : undefined]);
      return headers;
    }
    async updateEmulateMedia() {
      const emulatedMedia = this._page.emulatedMedia();
      const colorScheme = emulatedMedia.colorScheme;
      const reducedMotion = emulatedMedia.reducedMotion;
      const forcedColors = emulatedMedia.forcedColors;
      await this._forAllSessions((session) => WKPage._setEmulateMedia(session, emulatedMedia.media, colorScheme, reducedMotion, forcedColors));
    }
    async updateEmulatedViewportSize() {
      this._browserContext._validateEmulatedViewport(this._page.viewportSize());
      await this._updateViewport();
    }
    async updateUserAgent() {
      const contextOptions = this._browserContext._options;
      this._updateState("Page.overrideUserAgent", {
        value: contextOptions.userAgent
      });
    }
    async bringToFront() {
      this._pageProxySession.send("Target.activate", {
        targetId: this._session.sessionId
      });
    }
    async _updateViewport() {
      const options = this._browserContext._options;
      const deviceSize = this._page.emulatedSize();
      if (deviceSize === null)
        return;
      const viewportSize = deviceSize.viewport;
      const screenSize = deviceSize.screen;
      const promises = [this._pageProxySession.send("Emulation.setDeviceMetricsOverride", {
        width: viewportSize.width,
        height: viewportSize.height,
        fixedLayout: !!options.isMobile,
        deviceScaleFactor: options.deviceScaleFactor || 1
      }), this._session.send("Page.setScreenSizeOverride", {
        width: screenSize.width,
        height: screenSize.height
      })];
      if (options.isMobile) {
        const angle = viewportSize.width > viewportSize.height ? 90 : 0;
        promises.push(this._session.send("Page.setOrientationOverride", {
          angle
        }));
      }
      await Promise.all(promises);
    }
    async updateRequestInterception() {
      const enabled = this._page.needsRequestInterception();
      await Promise.all([this._updateState("Network.setInterceptionEnabled", {
        enabled
      }), this._updateState("Network.setResourceCachingDisabled", {
        disabled: enabled
      }), this._updateState("Network.addInterception", {
        url: ".*",
        stage: "request",
        isRegex: true
      })]);
    }
    async updateOffline() {
      await this._updateState("Network.setEmulateOfflineState", {
        offline: !!this._browserContext._options.offline
      });
    }
    async updateHttpCredentials() {
      const credentials = this._browserContext._options.httpCredentials || {
        username: "",
        password: "",
        origin: ""
      };
      await this._pageProxySession.send("Emulation.setAuthCredentials", {
        username: credentials.username,
        password: credentials.password,
        origin: credentials.origin
      });
    }
    async updateFileChooserInterception() {
      const enabled = this._page.fileChooserIntercepted();
      await this._session.send("Page.setInterceptFileChooserDialog", {
        enabled
      }).catch(() => {
      });
    }
    async reload() {
      await this._session.send("Page.reload");
    }
    goBack() {
      return this._session.send("Page.goBack").then(() => true).catch((error) => {
        if (error instanceof Error && error.message.includes(`Protocol error (Page.goBack): Failed to go`))
          return false;
        throw error;
      });
    }
    goForward() {
      return this._session.send("Page.goForward").then(() => true).catch((error) => {
        if (error instanceof Error && error.message.includes(`Protocol error (Page.goForward): Failed to go`))
          return false;
        throw error;
      });
    }
    async exposeBinding(binding) {
      this._session.send("Runtime.addBinding", {
        name: binding.name
      });
      await this._updateBootstrapScript();
      await Promise.all(this._page.frames().map((frame) => frame.evaluateExpression(binding.source).catch((e) => {
      })));
    }
    async removeExposedBindings() {
      await this._updateBootstrapScript();
    }
    async addInitScript(script) {
      await this._updateBootstrapScript();
    }
    async removeInitScripts() {
      await this._updateBootstrapScript();
    }
    _calculateBootstrapScript() {
      const scripts = [];
      if (!this._page.context()._options.isMobile) {
        scripts.push("delete window.orientation");
        scripts.push("delete window.ondevicemotion");
        scripts.push("delete window.ondeviceorientation");
      }
      scripts.push('if (!window.safari) window.safari = { pushNotification: { toString() { return "[object SafariRemoteNotification]"; } } };');
      scripts.push("if (!window.GestureEvent) window.GestureEvent = function GestureEvent() {};");
      for (const binding of this._page.allBindings())
        scripts.push(binding.source);
      scripts.push(...this._browserContext.initScripts);
      scripts.push(...this._page.initScripts);
      return scripts.join(";\n");
    }
    async _updateBootstrapScript() {
      await this._updateState("Page.setBootstrapScript", {
        source: this._calculateBootstrapScript()
      });
    }
    async closePage(runBeforeUnload) {
      await this._stopVideo();
      await this._pageProxySession.sendMayFail("Target.close", {
        targetId: this._session.sessionId,
        runBeforeUnload
      });
    }
    async setBackgroundColor(color) {
      await this._session.send("Page.setDefaultBackgroundColorOverride", {
        color
      });
    }
    _toolbarHeight() {
      var _this$_page$_browserC;
      if ((_this$_page$_browserC = this._page._browserContext._browser) !== null && _this$_page$_browserC !== undefined && _this$_page$_browserC.options.headful)
        return _hostPlatform.hostPlatform === "mac10.15" ? 55 : 59;
      return 0;
    }
    async _startVideo(options) {
      (0, _utils.assert)(!this._recordingVideoFile);
      const {
        screencastId
      } = await this._pageProxySession.send("Screencast.startVideo", {
        file: options.outputFile,
        width: options.width,
        height: options.height,
        toolbarHeight: this._toolbarHeight()
      });
      this._recordingVideoFile = options.outputFile;
      this._browserContext._browser._videoStarted(this._browserContext, screencastId, options.outputFile, this.pageOrError());
    }
    async _stopVideo() {
      if (!this._recordingVideoFile)
        return;
      await this._pageProxySession.sendMayFail("Screencast.stopVideo");
      this._recordingVideoFile = null;
    }
    validateScreenshotDimension(side, omitDeviceScaleFactor) {
      if (process.platform === "darwin")
        return;
      if (!omitDeviceScaleFactor && this._page._browserContext._options.deviceScaleFactor)
        side = Math.ceil(side * this._page._browserContext._options.deviceScaleFactor);
      if (side > 32767)
        throw new Error("Cannot take screenshot larger than 32767 pixels on any dimension");
    }
    async takeScreenshot(progress2, format, documentRect, viewportRect, quality, fitsViewport, scale) {
      const rect = documentRect || viewportRect;
      const omitDeviceScaleFactor = scale === "css";
      this.validateScreenshotDimension(rect.width, omitDeviceScaleFactor);
      this.validateScreenshotDimension(rect.height, omitDeviceScaleFactor);
      const result = await this._session.send("Page.snapshotRect", {
        ...rect,
        coordinateSystem: documentRect ? "Page" : "Viewport",
        omitDeviceScaleFactor
      });
      const prefix = "data:image/png;base64,";
      let buffer = Buffer.from(result.dataURL.substr(prefix.length), "base64");
      if (format === "jpeg")
        buffer = _utilsBundle.jpegjs.encode(_utilsBundle.PNG.sync.read(buffer), quality).data;
      return buffer;
    }
    async getContentFrame(handle) {
      const nodeInfo = await this._session.send("DOM.describeNode", {
        objectId: handle._objectId
      });
      if (!nodeInfo.contentFrameId)
        return null;
      return this._page._frameManager.frame(nodeInfo.contentFrameId);
    }
    async getOwnerFrame(handle) {
      if (!handle._objectId)
        return null;
      const nodeInfo = await this._session.send("DOM.describeNode", {
        objectId: handle._objectId
      });
      return nodeInfo.ownerFrameId || null;
    }
    isElementHandle(remoteObject) {
      return remoteObject.subtype === "node";
    }
    async getBoundingBox(handle) {
      const quads = await this.getContentQuads(handle);
      if (!quads || !quads.length)
        return null;
      let minX = Infinity;
      let maxX = (-Infinity);
      let minY = Infinity;
      let maxY = (-Infinity);
      for (const quad of quads) {
        for (const point of quad) {
          minX = Math.min(minX, point.x);
          maxX = Math.max(maxX, point.x);
          minY = Math.min(minY, point.y);
          maxY = Math.max(maxY, point.y);
        }
      }
      return {
        x: minX,
        y: minY,
        width: maxX - minX,
        height: maxY - minY
      };
    }
    async scrollRectIntoViewIfNeeded(handle, rect) {
      return await this._session.send("DOM.scrollIntoViewIfNeeded", {
        objectId: handle._objectId,
        rect
      }).then(() => "done").catch((e) => {
        if (e instanceof Error && e.message.includes("Node does not have a layout object"))
          return "error:notvisible";
        if (e instanceof Error && e.message.includes("Node is detached from document"))
          return "error:notconnected";
        throw e;
      });
    }
    async setScreencastOptions(options) {
      if (options) {
        const so = {
          ...options,
          toolbarHeight: this._toolbarHeight()
        };
        const {
          generation
        } = await this._pageProxySession.send("Screencast.startScreencast", so);
        this._screencastGeneration = generation;
      } else {
        await this._pageProxySession.send("Screencast.stopScreencast");
      }
    }
    _onScreencastFrame(event) {
      const generation = this._screencastGeneration;
      this._page.throttleScreencastFrameAck(() => {
        this._pageProxySession.send("Screencast.screencastFrameAck", {
          generation
        }).catch((e) => _debugLogger.debugLogger.log("error", e));
      });
      const buffer = Buffer.from(event.data, "base64");
      this._page.emit(_page.Page.Events.ScreencastFrame, {
        buffer,
        width: event.deviceWidth,
        height: event.deviceHeight
      });
    }
    rafCountForStablePosition() {
      return process.platform === "win32" ? 5 : 1;
    }
    async getContentQuads(handle) {
      const result = await this._session.sendMayFail("DOM.getContentQuads", {
        objectId: handle._objectId
      });
      if (!result)
        return null;
      return result.quads.map((quad) => [{
        x: quad[0],
        y: quad[1]
      }, {
        x: quad[2],
        y: quad[3]
      }, {
        x: quad[4],
        y: quad[5]
      }, {
        x: quad[6],
        y: quad[7]
      }]);
    }
    async setInputFiles(handle, files) {
      const objectId = handle._objectId;
      const protocolFiles = files.map((file) => ({
        name: file.name,
        type: file.mimeType,
        data: file.buffer
      }));
      await this._session.send("DOM.setInputFiles", {
        objectId,
        files: protocolFiles
      });
    }
    async setInputFilePaths(progress2, handle, paths) {
      const pageProxyId = this._pageProxySession.sessionId;
      const objectId = handle._objectId;
      await Promise.all([this._pageProxySession.connection.browserSession.send("Playwright.grantFileReadAccess", {
        pageProxyId,
        paths
      }), this._session.send("DOM.setInputFiles", {
        objectId,
        paths
      })]);
    }
    async adoptElementHandle(handle, to) {
      const result = await this._session.sendMayFail("DOM.resolveNode", {
        objectId: handle._objectId,
        executionContextId: to[contextDelegateSymbol]._contextId
      });
      if (!result || result.object.subtype === "null")
        throw new Error(dom.kUnableToAdoptErrorMessage);
      return to.createHandle(result.object);
    }
    async getAccessibilityTree(needle) {
      return (0, _wkAccessibility.getAccessibilityTree)(this._session, needle);
    }
    async inputActionEpilogue() {
    }
    async resetForReuse() {
    }
    async getFrameElement(frame) {
      const parent = frame.parentFrame();
      if (!parent)
        throw new Error("Frame has been detached.");
      const context = await parent._mainContext();
      const result = await this._session.send("DOM.resolveNode", {
        frameId: frame._id,
        executionContextId: context[contextDelegateSymbol]._contextId
      });
      if (!result || result.object.subtype === "null")
        throw new Error("Frame has been detached.");
      return context.createHandle(result.object);
    }
    _onRequestWillBeSent(session, event) {
      if (event.request.url.startsWith("data:"))
        return;
      if (this._page.needsRequestInterception() && !event.redirectResponse)
        this._requestIdToRequestWillBeSentEvent.set(event.requestId, event);
      else
        this._onRequest(session, event, false);
    }
    _onRequest(session, event, intercepted) {
      let redirectedFrom = null;
      if (event.redirectResponse) {
        const request2 = this._requestIdToRequest.get(event.requestId);
        if (request2) {
          this._handleRequestRedirect(request2, event.redirectResponse, event.timestamp);
          redirectedFrom = request2;
        }
      }
      const frame = redirectedFrom ? redirectedFrom.request.frame() : this._page._frameManager.frame(event.frameId);
      if (!frame)
        return;
      const isNavigationRequest = event.type === "Document";
      const documentId = isNavigationRequest ? event.loaderId : undefined;
      const request = new _wkInterceptableRequest.WKInterceptableRequest(session, frame, event, redirectedFrom, documentId);
      let route;
      if (intercepted) {
        route = new _wkInterceptableRequest.WKRouteImpl(session, request._requestId);
        request.request.setRawRequestHeaders(null);
      }
      this._requestIdToRequest.set(event.requestId, request);
      this._page._frameManager.requestStarted(request.request, route);
    }
    _handleRequestRedirect(request, responsePayload, timestamp) {
      const response = request.createResponse(responsePayload);
      response._securityDetailsFinished();
      response._serverAddrFinished();
      response.setResponseHeadersSize(null);
      response.setEncodedBodySize(null);
      response._requestFinished(responsePayload.timing ? _helper.helper.secondsToRoundishMillis(timestamp - request._timestamp) : -1);
      this._requestIdToRequest.delete(request._requestId);
      this._page._frameManager.requestReceivedResponse(response);
      this._page._frameManager.reportRequestFinished(request.request, response);
    }
    _onRequestIntercepted(session, event) {
      const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
      if (!requestWillBeSentEvent) {
        session.sendMayFail("Network.interceptWithRequest", {
          requestId: event.requestId
        });
        return;
      }
      this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
      this._onRequest(session, requestWillBeSentEvent, true);
    }
    _onResponseReceived(session, event) {
      const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
      if (requestWillBeSentEvent) {
        this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
        this._onRequest(session, requestWillBeSentEvent, false);
      }
      const request = this._requestIdToRequest.get(event.requestId);
      if (!request)
        return;
      this._requestIdToResponseReceivedPayloadEvent.set(request._requestId, event);
      const response = request.createResponse(event.response);
      this._page._frameManager.requestReceivedResponse(response);
      if (response.status() === 204) {
        this._onLoadingFailed(session, {
          requestId: event.requestId,
          errorText: "Aborted: 204 No Content",
          timestamp: event.timestamp
        });
      }
    }
    _onLoadingFinished(event) {
      const request = this._requestIdToRequest.get(event.requestId);
      if (!request)
        return;
      const response = request.request._existingResponse();
      if (response) {
        var _event$metrics, _event$metrics2, _responseReceivedPayl, _responseReceivedPayl2, _responseReceivedPayl3, _event$metrics3, _event$metrics$respon, _event$metrics4, _event$metrics$respon2, _event$metrics5;
        const responseReceivedPayload = this._requestIdToResponseReceivedPayloadEvent.get(request._requestId);
        response._serverAddrFinished(parseRemoteAddress(event === null || event === undefined || (_event$metrics = event.metrics) === null || _event$metrics === undefined ? undefined : _event$metrics.remoteAddress));
        response._securityDetailsFinished({
          protocol: isLoadedSecurely(response.url(), response.timing()) ? (_event$metrics2 = event.metrics) === null || _event$metrics2 === undefined || (_event$metrics2 = _event$metrics2.securityConnection) === null || _event$metrics2 === undefined ? undefined : _event$metrics2.protocol : undefined,
          subjectName: responseReceivedPayload === null || responseReceivedPayload === undefined || (_responseReceivedPayl = responseReceivedPayload.response.security) === null || _responseReceivedPayl === undefined || (_responseReceivedPayl = _responseReceivedPayl.certificate) === null || _responseReceivedPayl === undefined ? undefined : _responseReceivedPayl.subject,
          validFrom: responseReceivedPayload === null || responseReceivedPayload === undefined || (_responseReceivedPayl2 = responseReceivedPayload.response.security) === null || _responseReceivedPayl2 === undefined || (_responseReceivedPayl2 = _responseReceivedPayl2.certificate) === null || _responseReceivedPayl2 === undefined ? undefined : _responseReceivedPayl2.validFrom,
          validTo: responseReceivedPayload === null || responseReceivedPayload === undefined || (_responseReceivedPayl3 = responseReceivedPayload.response.security) === null || _responseReceivedPayl3 === undefined || (_responseReceivedPayl3 = _responseReceivedPayl3.certificate) === null || _responseReceivedPayl3 === undefined ? undefined : _responseReceivedPayl3.validUntil
        });
        if ((_event$metrics3 = event.metrics) !== null && _event$metrics3 !== undefined && _event$metrics3.protocol)
          response._setHttpVersion(event.metrics.protocol);
        response.setEncodedBodySize((_event$metrics$respon = (_event$metrics4 = event.metrics) === null || _event$metrics4 === undefined ? undefined : _event$metrics4.responseBodyBytesReceived) !== null && _event$metrics$respon !== undefined ? _event$metrics$respon : null);
        response.setResponseHeadersSize((_event$metrics$respon2 = (_event$metrics5 = event.metrics) === null || _event$metrics5 === undefined ? undefined : _event$metrics5.responseHeaderBytesReceived) !== null && _event$metrics$respon2 !== undefined ? _event$metrics$respon2 : null);
        response._requestFinished(_helper.helper.secondsToRoundishMillis(event.timestamp - request._timestamp));
      } else {
        request.request.setRawRequestHeaders(null);
      }
      this._requestIdToResponseReceivedPayloadEvent.delete(request._requestId);
      this._requestIdToRequest.delete(request._requestId);
      this._page._frameManager.reportRequestFinished(request.request, response);
    }
    _onLoadingFailed(session, event) {
      const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
      if (requestWillBeSentEvent) {
        this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
        this._onRequest(session, requestWillBeSentEvent, false);
      }
      const request = this._requestIdToRequest.get(event.requestId);
      if (!request)
        return;
      const response = request.request._existingResponse();
      if (response) {
        response._serverAddrFinished();
        response._securityDetailsFinished();
        response.setResponseHeadersSize(null);
        response.setEncodedBodySize(null);
        response._requestFinished(_helper.helper.secondsToRoundishMillis(event.timestamp - request._timestamp));
      } else {
        request.request.setRawRequestHeaders(null);
      }
      this._requestIdToRequest.delete(request._requestId);
      request.request._setFailureText(event.errorText);
      this._page._frameManager.requestFailed(request.request, event.errorText.includes("cancelled"));
    }
    async _grantPermissions(origin, permissions) {
      const webPermissionToProtocol = new Map([["geolocation", "geolocation"], ["clipboard-read", "clipboard-read"]]);
      const filtered = permissions.map((permission) => {
        const protocolPermission = webPermissionToProtocol.get(permission);
        if (!protocolPermission)
          throw new Error("Unknown permission: " + permission);
        return protocolPermission;
      });
      await this._pageProxySession.send("Emulation.grantPermissions", {
        origin,
        permissions: filtered
      });
    }
    async _clearPermissions() {
      await this._pageProxySession.send("Emulation.resetPermissions", {});
    }
    shouldToggleStyleSheetToSyncAnimations() {
      return true;
    }
  }
  exports.WKPage = WKPage;
  var contextDelegateSymbol = Symbol("delegate");
});

// node_modules/playwright-core/lib/server/webkit/wkBrowser.js
var require_wkBrowser = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WKBrowserContext = exports.WKBrowser = undefined;
  var _browser = require_browser5();
  var _browserContext = require_browserContext();
  var _utils = require_utils3();
  var _eventsHelper = require_eventsHelper();
  var network = _interopRequireWildcard(require_network2());
  var _wkConnection = require_wkConnection();
  var _wkPage = require_wkPage();
  var _errors = require_errors();
  var DEFAULT_USER_AGENT = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Safari/605.1.15";
  var BROWSER_VERSION = "17.4";

  class WKBrowser extends _browser.Browser {
    static async connect(parent, transport, options) {
      const browser = new WKBrowser(parent, transport, options);
      if (options.__testHookOnConnectToBrowser)
        await options.__testHookOnConnectToBrowser();
      const promises = [browser._browserSession.send("Playwright.enable")];
      if (options.persistent) {
        var _options$persistent;
        (_options$persistent = options.persistent).userAgent || (_options$persistent.userAgent = DEFAULT_USER_AGENT);
        browser._defaultContext = new WKBrowserContext(browser, undefined, options.persistent);
        promises.push(browser._defaultContext._initialize());
      }
      await Promise.all(promises);
      return browser;
    }
    constructor(parent, transport, options) {
      super(parent, options);
      this._connection = undefined;
      this._browserSession = undefined;
      this._contexts = new Map;
      this._wkPages = new Map;
      this._eventListeners = undefined;
      this._connection = new _wkConnection.WKConnection(transport, this._onDisconnect.bind(this), options.protocolLogger, options.browserLogsCollector);
      this._browserSession = this._connection.browserSession;
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(this._browserSession, "Playwright.pageProxyCreated", this._onPageProxyCreated.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._browserSession, "Playwright.pageProxyDestroyed", this._onPageProxyDestroyed.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._browserSession, "Playwright.provisionalLoadFailed", (event) => this._onProvisionalLoadFailed(event)), _eventsHelper.eventsHelper.addEventListener(this._browserSession, "Playwright.windowOpen", (event) => this._onWindowOpen(event)), _eventsHelper.eventsHelper.addEventListener(this._browserSession, "Playwright.downloadCreated", this._onDownloadCreated.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._browserSession, "Playwright.downloadFilenameSuggested", this._onDownloadFilenameSuggested.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._browserSession, "Playwright.downloadFinished", this._onDownloadFinished.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._browserSession, "Playwright.screencastFinished", this._onScreencastFinished.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._browserSession, _wkConnection.kPageProxyMessageReceived, this._onPageProxyMessageReceived.bind(this))];
    }
    _onDisconnect() {
      for (const wkPage of this._wkPages.values())
        wkPage.didClose();
      this._wkPages.clear();
      for (const video of this._idToVideo.values())
        video.artifact.reportFinished(new _errors.TargetClosedError);
      this._idToVideo.clear();
      this._didClose();
    }
    async doCreateNewContext(options) {
      const createOptions = options.proxy ? {
        proxyServer: process.platform === "win32" ? options.proxy.server.replace(/^socks5:\/\//, "socks5h://") : options.proxy.server,
        proxyBypassList: options.proxy.bypass
      } : undefined;
      const {
        browserContextId
      } = await this._browserSession.send("Playwright.createContext", createOptions);
      options.userAgent = options.userAgent || DEFAULT_USER_AGENT;
      const context = new WKBrowserContext(this, browserContextId, options);
      await context._initialize();
      this._contexts.set(browserContextId, context);
      return context;
    }
    contexts() {
      return Array.from(this._contexts.values());
    }
    version() {
      return BROWSER_VERSION;
    }
    userAgent() {
      return DEFAULT_USER_AGENT;
    }
    _onDownloadCreated(payload) {
      const page = this._wkPages.get(payload.pageProxyId);
      if (!page)
        return;
      page._page._frameManager.frameAbortedNavigation(payload.frameId, "Download is starting");
      let originPage = page._initializedPage;
      if (!originPage) {
        page._firstNonInitialNavigationCommittedReject(new Error("Starting new page download"));
        if (page._opener)
          originPage = page._opener._initializedPage;
      }
      if (!originPage)
        return;
      this._downloadCreated(originPage, payload.uuid, payload.url);
    }
    _onDownloadFilenameSuggested(payload) {
      this._downloadFilenameSuggested(payload.uuid, payload.suggestedFilename);
    }
    _onDownloadFinished(payload) {
      this._downloadFinished(payload.uuid, payload.error);
    }
    _onScreencastFinished(payload) {
      var _this$_takeVideo;
      (_this$_takeVideo = this._takeVideo(payload.screencastId)) === null || _this$_takeVideo === undefined || _this$_takeVideo.reportFinished();
    }
    _onPageProxyCreated(event) {
      const pageProxyId = event.pageProxyId;
      let context = null;
      if (event.browserContextId) {
        context = this._contexts.get(event.browserContextId) || null;
      }
      if (!context)
        context = this._defaultContext;
      if (!context)
        return;
      const pageProxySession = new _wkConnection.WKSession(this._connection, pageProxyId, (message) => {
        this._connection.rawSend({
          ...message,
          pageProxyId
        });
      });
      const opener = event.openerId ? this._wkPages.get(event.openerId) : undefined;
      const wkPage = new _wkPage.WKPage(context, pageProxySession, opener || null);
      this._wkPages.set(pageProxyId, wkPage);
    }
    _onPageProxyDestroyed(event) {
      const pageProxyId = event.pageProxyId;
      const wkPage = this._wkPages.get(pageProxyId);
      if (!wkPage)
        return;
      wkPage.didClose();
      this._wkPages.delete(pageProxyId);
    }
    _onPageProxyMessageReceived(event) {
      const wkPage = this._wkPages.get(event.pageProxyId);
      if (!wkPage)
        return;
      wkPage.dispatchMessageToSession(event.message);
    }
    _onProvisionalLoadFailed(event) {
      const wkPage = this._wkPages.get(event.pageProxyId);
      if (!wkPage)
        return;
      wkPage.handleProvisionalLoadFailed(event);
    }
    _onWindowOpen(event) {
      const wkPage = this._wkPages.get(event.pageProxyId);
      if (!wkPage)
        return;
      wkPage.handleWindowOpen(event);
    }
    isConnected() {
      return !this._connection.isClosed();
    }
  }
  exports.WKBrowser = WKBrowser;

  class WKBrowserContext extends _browserContext.BrowserContext {
    constructor(browser, browserContextId, options) {
      super(browser, options, browserContextId);
      this._validateEmulatedViewport(options.viewport);
      this._authenticateProxyViaHeader();
    }
    async _initialize() {
      (0, _utils.assert)(!this._wkPages().length);
      const browserContextId = this._browserContextId;
      const promises = [super._initialize()];
      promises.push(this._browser._browserSession.send("Playwright.setDownloadBehavior", {
        behavior: this._options.acceptDownloads === "accept" ? "allow" : "deny",
        downloadPath: this._browser.options.downloadsPath,
        browserContextId
      }));
      if (this._options.ignoreHTTPSErrors)
        promises.push(this._browser._browserSession.send("Playwright.setIgnoreCertificateErrors", {
          browserContextId,
          ignore: true
        }));
      if (this._options.locale)
        promises.push(this._browser._browserSession.send("Playwright.setLanguages", {
          browserContextId,
          languages: [this._options.locale]
        }));
      if (this._options.geolocation)
        promises.push(this.setGeolocation(this._options.geolocation));
      if (this._options.offline)
        promises.push(this.setOffline(this._options.offline));
      if (this._options.httpCredentials)
        promises.push(this.setHTTPCredentials(this._options.httpCredentials));
      await Promise.all(promises);
    }
    _wkPages() {
      return Array.from(this._browser._wkPages.values()).filter((wkPage) => wkPage._browserContext === this);
    }
    pages() {
      return this._wkPages().map((wkPage) => wkPage._initializedPage).filter((pageOrNull) => !!pageOrNull);
    }
    async newPageDelegate() {
      (0, _browserContext.assertBrowserContextIsNotOwned)(this);
      const {
        pageProxyId
      } = await this._browser._browserSession.send("Playwright.createPage", {
        browserContextId: this._browserContextId
      });
      return this._browser._wkPages.get(pageProxyId);
    }
    async doGetCookies(urls) {
      const {
        cookies
      } = await this._browser._browserSession.send("Playwright.getAllCookies", {
        browserContextId: this._browserContextId
      });
      return network.filterCookies(cookies.map((c) => {
        const copy = {
          ...c
        };
        copy.expires = c.expires === -1 ? -1 : c.expires / 1000;
        delete copy.session;
        return copy;
      }), urls);
    }
    async addCookies(cookies) {
      const cc = network.rewriteCookies(cookies).map((c) => ({
        ...c,
        session: c.expires === -1 || c.expires === undefined,
        expires: c.expires && c.expires !== -1 ? c.expires * 1000 : c.expires
      }));
      await this._browser._browserSession.send("Playwright.setCookies", {
        cookies: cc,
        browserContextId: this._browserContextId
      });
    }
    async clearCookies() {
      await this._browser._browserSession.send("Playwright.deleteAllCookies", {
        browserContextId: this._browserContextId
      });
    }
    async doGrantPermissions(origin, permissions) {
      await Promise.all(this.pages().map((page) => page._delegate._grantPermissions(origin, permissions)));
    }
    async doClearPermissions() {
      await Promise.all(this.pages().map((page) => page._delegate._clearPermissions()));
    }
    async setGeolocation(geolocation) {
      (0, _browserContext.verifyGeolocation)(geolocation);
      this._options.geolocation = geolocation;
      const payload = geolocation ? {
        ...geolocation,
        timestamp: Date.now()
      } : undefined;
      await this._browser._browserSession.send("Playwright.setGeolocationOverride", {
        browserContextId: this._browserContextId,
        geolocation: payload
      });
    }
    async setExtraHTTPHeaders(headers) {
      this._options.extraHTTPHeaders = headers;
      for (const page of this.pages())
        await page._delegate.updateExtraHTTPHeaders();
    }
    async setUserAgent(userAgent) {
      this._options.userAgent = userAgent;
      for (const page of this.pages())
        await page._delegate.updateUserAgent();
    }
    async setOffline(offline) {
      this._options.offline = offline;
      for (const page of this.pages())
        await page._delegate.updateOffline();
    }
    async doSetHTTPCredentials(httpCredentials) {
      this._options.httpCredentials = httpCredentials;
      for (const page of this.pages())
        await page._delegate.updateHttpCredentials();
    }
    async doAddInitScript(source) {
      for (const page of this.pages())
        await page._delegate._updateBootstrapScript();
    }
    async doRemoveInitScripts() {
      for (const page of this.pages())
        await page._delegate._updateBootstrapScript();
    }
    async doExposeBinding(binding) {
      for (const page of this.pages())
        await page._delegate.exposeBinding(binding);
    }
    async doRemoveExposedBindings() {
      for (const page of this.pages())
        await page._delegate.removeExposedBindings();
    }
    async doUpdateRequestInterception() {
      for (const page of this.pages())
        await page._delegate.updateRequestInterception();
    }
    onClosePersistent() {
    }
    async clearCache() {
      await this._browser._browserSession.send("Playwright.clearMemoryCache", {
        browserContextId: this._browserContextId
      });
    }
    async doClose(reason) {
      if (!this._browserContextId) {
        await Promise.all(this._wkPages().map((wkPage) => wkPage._stopVideo()));
        await this._browser.close({
          reason
        });
      } else {
        await this._browser._browserSession.send("Playwright.deleteContext", {
          browserContextId: this._browserContextId
        });
        this._browser._contexts.delete(this._browserContextId);
      }
    }
    async cancelDownload(uuid) {
      await this._browser._browserSession.send("Playwright.cancelDownload", {
        uuid
      });
    }
    _validateEmulatedViewport(viewportSize) {
      if (!viewportSize)
        return;
      if (process.platform === "win32" && this._browser.options.headful && (viewportSize.width < 250 || viewportSize.height < 240))
        throw new Error(`WebKit on Windows has a minimal viewport of 250x240.`);
    }
  }
  exports.WKBrowserContext = WKBrowserContext;
});

// node_modules/playwright-core/lib/server/webkit/webkit.js
var require_webkit = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WebKit = undefined;
  var _wkBrowser = require_wkBrowser();
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _wkConnection = require_wkConnection();
  var _browserType = require_browserType();
  var _utils = require_utils3();

  class WebKit extends _browserType.BrowserType {
    constructor(parent) {
      super(parent, "webkit");
    }
    _connectToTransport(transport, options) {
      return _wkBrowser.WKBrowser.connect(this.attribution.playwright, transport, options);
    }
    _amendEnvironment(env, userDataDir, executable, browserArguments) {
      return {
        ...env,
        CURL_COOKIE_JAR_PATH: _path.default.join(userDataDir, "cookiejar.db")
      };
    }
    _doRewriteStartupLog(error) {
      if (!error.logs)
        return error;
      if (error.logs.includes("cannot open display"))
        error.logs = "\n" + (0, _utils.wrapInASCIIBox)(_browserType.kNoXServerRunningError, 1);
      return error;
    }
    _attemptToGracefullyCloseBrowser(transport) {
      transport.send({
        method: "Playwright.close",
        params: {},
        id: _wkConnection.kBrowserCloseMessageId
      });
    }
    _defaultArgs(options, isPersistent, userDataDir) {
      const {
        args = [],
        proxy,
        headless
      } = options;
      const userDataDirArg = args.find((arg) => arg.startsWith("--user-data-dir"));
      if (userDataDirArg)
        throw this._createUserDataDirArgMisuseError("--user-data-dir");
      if (args.find((arg) => !arg.startsWith("-")))
        throw new Error("Arguments can not specify page to be opened");
      const webkitArguments = ["--inspector-pipe"];
      if (process.platform === "win32")
        webkitArguments.push("--disable-accelerated-compositing");
      if (headless)
        webkitArguments.push("--headless");
      if (isPersistent)
        webkitArguments.push(`--user-data-dir=${userDataDir}`);
      else
        webkitArguments.push(`--no-startup-window`);
      if (proxy) {
        if (process.platform === "darwin") {
          webkitArguments.push(`--proxy=${proxy.server}`);
          if (proxy.bypass)
            webkitArguments.push(`--proxy-bypass-list=${proxy.bypass}`);
        } else if (process.platform === "linux") {
          webkitArguments.push(`--proxy=${proxy.server}`);
          if (proxy.bypass)
            webkitArguments.push(...proxy.bypass.split(",").map((t) => `--ignore-host=${t}`));
        } else if (process.platform === "win32") {
          webkitArguments.push(`--curl-proxy=${proxy.server.replace(/^socks5:\/\//, "socks5h://")}`);
          if (proxy.bypass)
            webkitArguments.push(`--curl-noproxy=${proxy.bypass}`);
        }
      }
      webkitArguments.push(...args);
      if (isPersistent)
        webkitArguments.push("about:blank");
      return webkitArguments;
    }
  }
  exports.WebKit = WebKit;
});

// node_modules/playwright-core/lib/server/debugController.js
var require_debugController = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DebugController = undefined;
  var _processLauncher = require_processLauncher();
  var _instrumentation = require_instrumentation();
  var _recorder = require_recorder();
  var _recorderApp = require_recorderApp();
  var _locatorGenerators = require_locatorGenerators();
  var internalMetadata = (0, _instrumentation.serverSideCallMetadata)();

  class DebugController extends _instrumentation.SdkObject {
    constructor(playwright) {
      super({
        attribution: {
          isInternalPlaywright: true
        },
        instrumentation: (0, _instrumentation.createInstrumentation)()
      }, undefined, "DebugController");
      this._autoCloseTimer = undefined;
      this._autoCloseAllowed = false;
      this._trackHierarchyListener = undefined;
      this._playwright = undefined;
      this._sdkLanguage = "javascript";
      this._codegenId = "playwright-test";
      this._playwright = playwright;
    }
    initialize(codegenId, sdkLanguage) {
      this._codegenId = codegenId;
      this._sdkLanguage = sdkLanguage;
      _recorder.Recorder.setAppFactory(async () => new InspectingRecorderApp(this));
    }
    setAutoCloseAllowed(allowed) {
      this._autoCloseAllowed = allowed;
    }
    dispose() {
      this.setReportStateChanged(false);
      this.setAutoCloseAllowed(false);
      _recorder.Recorder.setAppFactory(undefined);
    }
    setReportStateChanged(enabled) {
      if (enabled && !this._trackHierarchyListener) {
        this._trackHierarchyListener = {
          onPageOpen: () => this._emitSnapshot(),
          onPageClose: () => this._emitSnapshot()
        };
        this._playwright.instrumentation.addListener(this._trackHierarchyListener, null);
      } else if (!enabled && this._trackHierarchyListener) {
        this._playwright.instrumentation.removeListener(this._trackHierarchyListener);
        this._trackHierarchyListener = undefined;
      }
    }
    async resetForReuse() {
      const contexts = new Set;
      for (const page of this._playwright.allPages())
        contexts.add(page.context());
      for (const context of contexts)
        await context.resetForReuse(internalMetadata, null);
    }
    async navigate(url) {
      for (const p of this._playwright.allPages())
        await p.mainFrame().goto(internalMetadata, url);
    }
    async setRecorderMode(params) {
      await this._closeBrowsersWithoutPages();
      if (params.mode === "none") {
        for (const recorder of await this._allRecorders()) {
          recorder.hideHighlightedSelector();
          recorder.setMode("none");
        }
        this.setAutoCloseEnabled(true);
        return;
      }
      if (!this._playwright.allBrowsers().length)
        await this._playwright.chromium.launch(internalMetadata, {
          headless: !!process.env.PW_DEBUG_CONTROLLER_HEADLESS
        });
      const pages = this._playwright.allPages();
      if (!pages.length) {
        const [browser] = this._playwright.allBrowsers();
        const {
          context
        } = await browser.newContextForReuse({}, internalMetadata);
        await context.newPage(internalMetadata);
      }
      if (params.testIdAttributeName) {
        for (const page of this._playwright.allPages())
          page.context().selectors().setTestIdAttributeName(params.testIdAttributeName);
      }
      for (const recorder of await this._allRecorders()) {
        recorder.hideHighlightedSelector();
        if (params.mode !== "inspecting")
          recorder.setOutput(this._codegenId, params.file);
        recorder.setMode(params.mode);
      }
      this.setAutoCloseEnabled(true);
    }
    async setAutoCloseEnabled(enabled) {
      if (!this._autoCloseAllowed)
        return;
      if (this._autoCloseTimer)
        clearTimeout(this._autoCloseTimer);
      if (!enabled)
        return;
      const heartBeat = () => {
        if (!this._playwright.allPages().length)
          (0, _processLauncher.gracefullyProcessExitDoNotHang)(0);
        else
          this._autoCloseTimer = setTimeout(heartBeat, 5000);
      };
      this._autoCloseTimer = setTimeout(heartBeat, 30000);
    }
    async highlight(selector) {
      for (const recorder of await this._allRecorders())
        recorder.setHighlightedSelector(this._sdkLanguage, selector);
    }
    async hideHighlight() {
      for (const recorder of await this._allRecorders())
        recorder.hideHighlightedSelector();
      await this._playwright.hideHighlight();
    }
    allBrowsers() {
      return [...this._playwright.allBrowsers()];
    }
    async resume() {
      for (const recorder of await this._allRecorders())
        recorder.resume();
    }
    async kill() {
      (0, _processLauncher.gracefullyProcessExitDoNotHang)(0);
    }
    async closeAllBrowsers() {
      await Promise.all(this.allBrowsers().map((browser) => browser.close({
        reason: "Close all browsers requested"
      })));
    }
    _emitSnapshot() {
      const browsers = [];
      let pageCount = 0;
      for (const browser of this._playwright.allBrowsers()) {
        const b = {
          contexts: []
        };
        browsers.push(b);
        for (const context of browser.contexts()) {
          const c = {
            pages: []
          };
          b.contexts.push(c);
          for (const page of context.pages())
            c.pages.push(page.mainFrame().url());
          pageCount += context.pages().length;
        }
      }
      this.emit(DebugController.Events.StateChanged, {
        pageCount
      });
    }
    async _allRecorders() {
      const contexts = new Set;
      for (const page of this._playwright.allPages())
        contexts.add(page.context());
      const result = await Promise.all([...contexts].map((c) => _recorder.Recorder.show(c, {
        omitCallTracking: true
      })));
      return result.filter(Boolean);
    }
    async _closeBrowsersWithoutPages() {
      for (const browser of this._playwright.allBrowsers()) {
        for (const context of browser.contexts()) {
          if (!context.pages().length)
            await context.close({
              reason: "Browser collected"
            });
        }
        if (!browser.contexts())
          await browser.close({
            reason: "Browser collected"
          });
      }
    }
  }
  exports.DebugController = DebugController;
  DebugController.Events = {
    StateChanged: "stateChanged",
    InspectRequested: "inspectRequested",
    SourceChanged: "sourceChanged",
    Paused: "paused",
    SetModeRequested: "setModeRequested"
  };

  class InspectingRecorderApp extends _recorderApp.EmptyRecorderApp {
    constructor(debugController) {
      super();
      this._debugController = undefined;
      this._debugController = debugController;
    }
    async setSelector(selector) {
      const locator = (0, _locatorGenerators.asLocator)(this._debugController._sdkLanguage, selector);
      this._debugController.emit(DebugController.Events.InspectRequested, {
        selector,
        locator
      });
    }
    async setSources(sources) {
      const source = sources.find((s) => s.id === this._debugController._codegenId);
      const {
        text,
        header,
        footer,
        actions
      } = source || {
        text: ""
      };
      this._debugController.emit(DebugController.Events.SourceChanged, {
        text,
        header,
        footer,
        actions
      });
    }
    async setPaused(paused) {
      this._debugController.emit(DebugController.Events.Paused, {
        paused
      });
    }
    async setMode(mode) {
      this._debugController.emit(DebugController.Events.SetModeRequested, {
        mode
      });
    }
  }
});

// node_modules/playwright-core/lib/server/playwright.js
var require_playwright = __commonJS((exports) => {
  var createPlaywright = function(options) {
    return new Playwright(options);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Playwright = undefined;
  exports.createPlaywright = createPlaywright;
  var _android = require_android();
  var _backendAdb = require_backendAdb();
  var _chromium = require_chromium();
  var _electron = require_electron2();
  var _firefox = require_firefox();
  var _selectors = require_selectors();
  var _webkit = require_webkit();
  var _instrumentation = require_instrumentation();
  var _debugLogger = require_debugLogger();
  var _debugController = require_debugController();

  class Playwright extends _instrumentation.SdkObject {
    constructor(options) {
      super({
        attribution: {},
        instrumentation: (0, _instrumentation.createInstrumentation)()
      }, undefined, "Playwright");
      this.selectors = undefined;
      this.chromium = undefined;
      this.android = undefined;
      this.electron = undefined;
      this.firefox = undefined;
      this.webkit = undefined;
      this.options = undefined;
      this.debugController = undefined;
      this._allPages = new Set;
      this._allBrowsers = new Set;
      this.options = options;
      this.attribution.playwright = this;
      this.instrumentation.addListener({
        onBrowserOpen: (browser) => this._allBrowsers.add(browser),
        onBrowserClose: (browser) => this._allBrowsers.delete(browser),
        onPageOpen: (page) => this._allPages.add(page),
        onPageClose: (page) => this._allPages.delete(page),
        onCallLog: (sdkObject, metadata, logName, message) => {
          _debugLogger.debugLogger.log(logName, message);
        }
      }, null);
      this.chromium = new _chromium.Chromium(this);
      this.firefox = new _firefox.Firefox(this);
      this.webkit = new _webkit.WebKit(this);
      this.electron = new _electron.Electron(this);
      this.android = new _android.Android(this, new _backendAdb.AdbBackend);
      this.selectors = new _selectors.Selectors;
      this.debugController = new _debugController.DebugController(this);
    }
    async hideHighlight() {
      await Promise.all([...this._allPages].map((p) => p.hideHighlight().catch(() => {
      })));
    }
    allBrowsers() {
      return [...this._allBrowsers];
    }
    allPages() {
      return [...this._allPages];
    }
  }
  exports.Playwright = Playwright;
});

// node_modules/playwright-core/lib/server/recorder/recorderApp.js
var require_recorderApp = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.RecorderApp = exports.EmptyRecorderApp = undefined;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _progress = require_progress();
  var _events = import.meta.require("events");
  var _instrumentation = require_instrumentation();
  var _utils = require_utils3();
  var _utilsBundle = require_utilsBundle();
  var _launchApp = require_launchApp();

  class EmptyRecorderApp extends _events.EventEmitter {
    async close() {
    }
    async setPaused(paused) {
    }
    async setMode(mode) {
    }
    async setFileIfNeeded(file) {
    }
    async setSelector(selector, userGesture) {
    }
    async updateCallLogs(callLogs) {
    }
    async setSources(sources) {
    }
  }
  exports.EmptyRecorderApp = EmptyRecorderApp;

  class RecorderApp extends _events.EventEmitter {
    constructor(recorder, page, wsEndpoint) {
      super();
      this._page = undefined;
      this.wsEndpoint = undefined;
      this._recorder = undefined;
      this.setMaxListeners(0);
      this._recorder = recorder;
      this._page = page;
      this.wsEndpoint = wsEndpoint;
    }
    async close() {
      await this._page.context().close({
        reason: "Recorder window closed"
      });
    }
    async _init() {
      await (0, _launchApp.syncLocalStorageWithSettings)(this._page, "recorder");
      await this._page._setServerRequestInterceptor((route) => {
        if (!route.request().url().startsWith("https://playwright/"))
          return false;
        const uri = route.request().url().substring("https://playwright/".length);
        const file = import.meta.require.resolve("../../vite/recorder/" + uri);
        _fs.default.promises.readFile(file).then((buffer) => {
          route.fulfill({
            requestUrl: route.request().url(),
            status: 200,
            headers: [{
              name: "Content-Type",
              value: _utilsBundle.mime.getType(_path.default.extname(file)) || "application/octet-stream"
            }],
            body: buffer.toString("base64"),
            isBase64: true
          }).catch(() => {
          });
        });
        return true;
      });
      await this._page.exposeBinding("dispatch", false, (_, data) => this.emit("event", data));
      this._page.once("close", () => {
        this.emit("close");
        this._page.context().close({
          reason: "Recorder window closed"
        }).catch(() => {
        });
      });
      const mainFrame = this._page.mainFrame();
      await mainFrame.goto((0, _instrumentation.serverSideCallMetadata)(), "https://playwright/index.html");
    }
    static async open(recorder, inspectedContext, handleSIGINT) {
      const sdkLanguage = inspectedContext.attribution.playwright.options.sdkLanguage;
      const headed = !!inspectedContext._browser.options.headful;
      const recorderPlaywright = require_playwright().createPlaywright({
        sdkLanguage: "javascript",
        isInternalPlaywright: true
      });
      const {
        context,
        page
      } = await (0, _launchApp.launchApp)(recorderPlaywright.chromium, {
        sdkLanguage,
        windowSize: {
          width: 600,
          height: 600
        },
        windowPosition: {
          x: 1020,
          y: 10
        },
        persistentContextOptions: {
          noDefaultViewport: true,
          headless: !!process.env.PWTEST_CLI_HEADLESS || (0, _utils.isUnderTest)() && !headed,
          useWebSocket: !!process.env.PWTEST_RECORDER_PORT,
          handleSIGINT,
          args: process.env.PWTEST_RECORDER_PORT ? [`--remote-debugging-port=${process.env.PWTEST_RECORDER_PORT}`] : []
        }
      });
      const controller = new _progress.ProgressController((0, _instrumentation.serverSideCallMetadata)(), context._browser);
      await controller.run(async (progress2) => {
        await context._browser._defaultContext._loadDefaultContextAsIs(progress2);
      });
      const result = new RecorderApp(recorder, page, context._browser.options.wsEndpoint);
      await result._init();
      return result;
    }
    async setMode(mode) {
      await this._page.mainFrame().evaluateExpression(((mode2) => {
        window.playwrightSetMode(mode2);
      }).toString(), {
        isFunction: true
      }, mode).catch(() => {
      });
    }
    async setFileIfNeeded(file) {
      await this._page.mainFrame().evaluateExpression(((file2) => {
        window.playwrightSetFileIfNeeded(file2);
      }).toString(), {
        isFunction: true
      }, file).catch(() => {
      });
    }
    async setPaused(paused) {
      await this._page.mainFrame().evaluateExpression(((paused2) => {
        window.playwrightSetPaused(paused2);
      }).toString(), {
        isFunction: true
      }, paused).catch(() => {
      });
    }
    async setSources(sources) {
      await this._page.mainFrame().evaluateExpression(((sources2) => {
        window.playwrightSetSources(sources2);
      }).toString(), {
        isFunction: true
      }, sources).catch(() => {
      });
      if (process.env.PWTEST_CLI_IS_UNDER_TEST && sources.length)
        process._didSetSourcesForTest(sources[0].text);
    }
    async setSelector(selector, userGesture) {
      if (userGesture) {
        if (this._recorder.mode() === "inspecting") {
          this._recorder.setMode("standby");
          this._page.bringToFront();
        } else {
          this._recorder.setMode("recording");
        }
      }
      await this._page.mainFrame().evaluateExpression(((data) => {
        window.playwrightSetSelector(data.selector, data.userGesture);
      }).toString(), {
        isFunction: true
      }, {
        selector,
        userGesture
      }).catch(() => {
      });
    }
    async updateCallLogs(callLogs) {
      await this._page.mainFrame().evaluateExpression(((callLogs2) => {
        window.playwrightUpdateLogs(callLogs2);
      }).toString(), {
        isFunction: true
      }, callLogs).catch(() => {
      });
    }
  }
  exports.RecorderApp = RecorderApp;
});

// node_modules/playwright-core/lib/server/recorder/recorderUtils.js
var require_recorderUtils = __commonJS((exports) => {
  var metadataToCallLog = function(metadata, status) {
    var _metadata$params, _metadata$params2, _metadata$error;
    let title = metadata.apiName || metadata.method;
    if (metadata.method === "waitForEventInfo")
      title += `(${metadata.params.info.event})`;
    title = title.replace("object.expect", "expect");
    if (metadata.error)
      status = "error";
    const params = {
      url: (_metadata$params = metadata.params) === null || _metadata$params === undefined ? undefined : _metadata$params.url,
      selector: (_metadata$params2 = metadata.params) === null || _metadata$params2 === undefined ? undefined : _metadata$params2.selector
    };
    let duration = metadata.endTime ? metadata.endTime - metadata.startTime : undefined;
    if (typeof duration === "number" && metadata.pauseStartTime && metadata.pauseEndTime) {
      duration -= metadata.pauseEndTime - metadata.pauseStartTime;
      duration = Math.max(duration, 0);
    }
    const callLog = {
      id: metadata.id,
      messages: metadata.log,
      title,
      status,
      error: (_metadata$error = metadata.error) === null || _metadata$error === undefined || (_metadata$error = _metadata$error.error) === null || _metadata$error === undefined ? undefined : _metadata$error.message,
      params,
      duration
    };
    return callLog;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.metadataToCallLog = metadataToCallLog;
});

// node_modules/playwright-core/lib/utils/isomorphic/locatorParser.js
var require_locatorParser = __commonJS((exports) => {
  var parseLocator = function(locator, testIdAttributeName) {
    locator = locator.replace(/AriaRole\s*\.\s*([\w]+)/g, (_, group) => group.toLowerCase()).replace(/(get_by_role|getByRole)\s*\(\s*(?:["'`])([^'"`]+)['"`]/g, (_, group1, group2) => `${group1}(${group2.toLowerCase()}`);
    const params = [];
    let template = "";
    for (let i = 0;i < locator.length; ++i) {
      const quote = locator[i];
      if (quote !== '"' && quote !== "\'" && quote !== "`" && quote !== "/") {
        template += quote;
        continue;
      }
      const isRegexEscaping = locator[i - 1] === "r" || locator[i] === "/";
      ++i;
      let text = "";
      while (i < locator.length) {
        if (locator[i] === "\\") {
          if (isRegexEscaping) {
            if (locator[i + 1] !== quote)
              text += locator[i];
            ++i;
            text += locator[i];
          } else {
            ++i;
            if (locator[i] === "n")
              text += "\n";
            else if (locator[i] === "r")
              text += "\r";
            else if (locator[i] === "t")
              text += "\t";
            else
              text += locator[i];
          }
          ++i;
          continue;
        }
        if (locator[i] !== quote) {
          text += locator[i++];
          continue;
        }
        break;
      }
      params.push({
        quote,
        text
      });
      template += (quote === "/" ? "r" : "") + "$" + params.length;
    }
    template = template.toLowerCase().replace(/get_by_alt_text/g, "getbyalttext").replace(/get_by_test_id/g, "getbytestid").replace(/get_by_([\w]+)/g, "getby$1").replace(/has_not_text/g, "hasnottext").replace(/has_text/g, "hastext").replace(/has_not/g, "hasnot").replace(/frame_locator/g, "framelocator").replace(/[{}\s]/g, "").replace(/new\(\)/g, "").replace(/new[\w]+\.[\w]+options\(\)/g, "").replace(/\.set/g, ",set").replace(/\.or_\(/g, "or(").replace(/\.and_\(/g, "and(").replace(/:/g, "=").replace(/,re\.ignorecase/g, "i").replace(/,pattern.case_insensitive/g, "i").replace(/,regexoptions.ignorecase/g, "i").replace(/re.compile\(([^)]+)\)/g, "$1").replace(/pattern.compile\(([^)]+)\)/g, "r$1").replace(/newregex\(([^)]+)\)/g, "r$1").replace(/string=/g, "=").replace(/regex=/g, "=").replace(/,,/g, ",");
    const preferredQuote = params.map((p) => p.quote).filter((quote) => '\'"`'.includes(quote))[0];
    return {
      selector: transform(template, params, testIdAttributeName),
      preferredQuote
    };
  };
  var countParams = function(template) {
    return [...template.matchAll(/\$\d+/g)].length;
  };
  var shiftParams = function(template, sub) {
    return template.replace(/\$(\d+)/g, (_, ordinal) => `\$${ordinal - sub}`);
  };
  var transform = function(template, params, testIdAttributeName) {
    while (true) {
      const hasMatch = template.match(/filter\(,?(has=|hasnot=|sethas\(|sethasnot\()/);
      if (!hasMatch)
        break;
      const start = hasMatch.index + hasMatch[0].length;
      let balance = 0;
      let end = start;
      for (;end < template.length; end++) {
        if (template[end] === "(")
          balance++;
        else if (template[end] === ")")
          balance--;
        if (balance < 0)
          break;
      }
      let prefix = template.substring(0, start);
      let extraSymbol = 0;
      if (["sethas(", "sethasnot("].includes(hasMatch[1])) {
        extraSymbol = 1;
        prefix = prefix.replace(/sethas\($/, "has=").replace(/sethasnot\($/, "hasnot=");
      }
      const paramsCountBeforeHas = countParams(template.substring(0, start));
      const hasTemplate = shiftParams(template.substring(start, end), paramsCountBeforeHas);
      const paramsCountInHas = countParams(hasTemplate);
      const hasParams = params.slice(paramsCountBeforeHas, paramsCountBeforeHas + paramsCountInHas);
      const hasSelector = JSON.stringify(transform(hasTemplate, hasParams, testIdAttributeName));
      template = prefix.replace(/=$/, "2=") + `\$${paramsCountBeforeHas + 1}` + shiftParams(template.substring(end + extraSymbol), paramsCountInHas - 1);
      const paramsBeforeHas = params.slice(0, paramsCountBeforeHas);
      const paramsAfterHas = params.slice(paramsCountBeforeHas + paramsCountInHas);
      params = paramsBeforeHas.concat([{
        quote: '"',
        text: hasSelector
      }]).concat(paramsAfterHas);
    }
    template = template.replace(/\,set([\w]+)\(([^)]+)\)/g, (_, group1, group2) => "," + group1.toLowerCase() + "=" + group2.toLowerCase()).replace(/framelocator\(([^)]+)\)/g, "$1.internal:control=enter-frame").replace(/locator\(([^)]+),hastext=([^),]+)\)/g, "locator($1).internal:has-text=$2").replace(/locator\(([^)]+),hasnottext=([^),]+)\)/g, "locator($1).internal:has-not-text=$2").replace(/locator\(([^)]+),hastext=([^),]+)\)/g, "locator($1).internal:has-text=$2").replace(/locator\(([^)]+)\)/g, "$1").replace(/getbyrole\(([^)]+)\)/g, "internal:role=$1").replace(/getbytext\(([^)]+)\)/g, "internal:text=$1").replace(/getbylabel\(([^)]+)\)/g, "internal:label=$1").replace(/getbytestid\(([^)]+)\)/g, `internal:testid=[${testIdAttributeName}=\$1]`).replace(/getby(placeholder|alt|title)(?:text)?\(([^)]+)\)/g, "internal:attr=[$1=$2]").replace(/first(\(\))?/g, "nth=0").replace(/last(\(\))?/g, "nth=-1").replace(/nth\(([^)]+)\)/g, "nth=$1").replace(/filter\(,?hastext=([^)]+)\)/g, "internal:has-text=$1").replace(/filter\(,?hasnottext=([^)]+)\)/g, "internal:has-not-text=$1").replace(/filter\(,?has2=([^)]+)\)/g, "internal:has=$1").replace(/filter\(,?hasnot2=([^)]+)\)/g, "internal:has-not=$1").replace(/,exact=false/g, "").replace(/,exact=true/g, "s").replace(/\,/g, "][");
    const parts = template.split(".");
    for (let index = 0;index < parts.length - 1; index++) {
      if (parts[index] === "internal:control=enter-frame" && parts[index + 1].startsWith("nth=")) {
        const [nth] = parts.splice(index, 1);
        parts.splice(index + 1, 0, nth);
      }
    }
    return parts.map((t) => {
      if (!t.startsWith("internal:") || t === "internal:control")
        return t.replace(/\$(\d+)/g, (_, ordinal) => {
          const param = params[+ordinal - 1];
          return param.text;
        });
      t = t.includes("[") ? t.replace(/\]/, "") + "]" : t;
      t = t.replace(/(?:r)\$(\d+)(i)?/g, (_, ordinal, suffix) => {
        const param = params[+ordinal - 1];
        if (t.startsWith("internal:attr") || t.startsWith("internal:testid") || t.startsWith("internal:role"))
          return (0, _stringUtils.escapeForAttributeSelector)(new RegExp(param.text), false) + (suffix || "");
        return (0, _stringUtils.escapeForTextSelector)(new RegExp(param.text, suffix), false);
      }).replace(/\$(\d+)(i|s)?/g, (_, ordinal, suffix) => {
        const param = params[+ordinal - 1];
        if (t.startsWith("internal:has=") || t.startsWith("internal:has-not="))
          return param.text;
        if (t.startsWith("internal:testid"))
          return (0, _stringUtils.escapeForAttributeSelector)(param.text, true);
        if (t.startsWith("internal:attr") || t.startsWith("internal:role"))
          return (0, _stringUtils.escapeForAttributeSelector)(param.text, suffix === "s");
        return (0, _stringUtils.escapeForTextSelector)(param.text, suffix === "s");
      });
      return t;
    }).join(" >> ");
  };
  var locatorOrSelectorAsSelector = function(language, locator, testIdAttributeName) {
    try {
      (0, _selectorParser.parseSelector)(locator);
      return locator;
    } catch (e) {
    }
    try {
      const {
        selector,
        preferredQuote
      } = parseLocator(locator, testIdAttributeName);
      const locators = (0, _locatorGenerators.asLocators)(language, selector, undefined, undefined, preferredQuote);
      const digest = digestForComparison(language, locator);
      if (locators.some((candidate) => digestForComparison(language, candidate) === digest))
        return selector;
    } catch (e) {
    }
    return "";
  };
  var digestForComparison = function(language, locator) {
    locator = locator.replace(/\s/g, "");
    if (language === "javascript")
      locator = locator.replace(/\\?["`]/g, "\'");
    return locator;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.locatorOrSelectorAsSelector = locatorOrSelectorAsSelector;
  var _stringUtils = require_stringUtils();
  var _locatorGenerators = require_locatorGenerators();
  var _selectorParser = require_selectorParser();
});

// node_modules/playwright-core/lib/server/recorder.js
var require_recorder = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var languageForFile = function(file) {
    if (file.endsWith(".py"))
      return "python";
    if (file.endsWith(".java"))
      return "java";
    if (file.endsWith(".cs"))
      return "csharp";
    return "javascript";
  };
  var isScreenshotCommand = function(metadata) {
    return metadata.method.toLowerCase().includes("screenshot");
  };
  async function findFrameSelector(frame) {
    try {
      const parent = frame.parentFrame();
      const frameElement = await frame.frameElement();
      if (!frameElement || !parent)
        return;
      const utility = await parent._utilityContext();
      const injected = await utility.injectedScript();
      const selector = await injected.evaluate((injected2, element) => {
        return injected2.generateSelectorSimple(element, {
          testIdAttributeName: "",
          omitInternalEngines: true
        });
      }, frameElement);
      return selector;
    } catch (e) {
    }
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Recorder = undefined;
  var fs = _interopRequireWildcard(import.meta.require("fs"));
  var _codeGenerator = require_codeGenerator();
  var _utils = require_utils4();
  var _page = require_page();
  var _frames = require_frames();
  var _browserContext = require_browserContext();
  var _java = require_java();
  var _javascript = require_javascript2();
  var _jsonl = require_jsonl();
  var _csharp = require_csharp();
  var _python = require_python();
  var recorderSource = _interopRequireWildcard(require_recorderSource());
  var consoleApiSource = _interopRequireWildcard(require_consoleApiSource());
  var _recorderApp = require_recorderApp();
  var _utils2 = require_utils3();
  var _recorderUtils = require_recorderUtils();
  var _debugger = require_debugger();
  var _events = import.meta.require("events");
  var _timeoutRunner = require_timeoutRunner();
  var _locatorParser = require_locatorParser();
  var _stringUtils = require_stringUtils();
  var _eventsHelper = require_eventsHelper();
  var recorderSymbol = Symbol("recorderSymbol");

  class Recorder {
    static setAppFactory(recorderAppFactory) {
      Recorder.recorderAppFactory = recorderAppFactory;
    }
    static showInspector(context) {
      const params = {};
      if ((0, _utils2.isUnderTest)())
        params.language = process.env.TEST_INSPECTOR_LANGUAGE;
      Recorder.show(context, params).catch(() => {
      });
    }
    static show(context, params = {}) {
      let recorderPromise = context[recorderSymbol];
      if (!recorderPromise) {
        const recorder = new Recorder(context, params);
        recorderPromise = recorder.install().then(() => recorder);
        context[recorderSymbol] = recorderPromise;
      }
      return recorderPromise;
    }
    constructor(context, params) {
      this._context = undefined;
      this._mode = undefined;
      this._highlightedSelector = "";
      this._overlayState = {
        offsetX: 0
      };
      this._recorderApp = null;
      this._currentCallsMetadata = new Map;
      this._recorderSources = [];
      this._userSources = new Map;
      this._debugger = undefined;
      this._contextRecorder = undefined;
      this._handleSIGINT = undefined;
      this._omitCallTracking = false;
      this._currentLanguage = undefined;
      this._mode = params.mode || "none";
      this._contextRecorder = new ContextRecorder(context, params);
      this._context = context;
      this._omitCallTracking = !!params.omitCallTracking;
      this._debugger = context.debugger();
      this._handleSIGINT = params.handleSIGINT;
      context.instrumentation.addListener(this, context);
      this._currentLanguage = this._contextRecorder.languageName();
      if ((0, _utils2.isUnderTest)()) {
        this._overlayState.offsetX = 200;
      }
    }
    static async defaultRecorderAppFactory(recorder) {
      if (process.env.PW_CODEGEN_NO_INSPECTOR)
        return new _recorderApp.EmptyRecorderApp;
      return await _recorderApp.RecorderApp.open(recorder, recorder._context, recorder._handleSIGINT);
    }
    async install() {
      const recorderApp = await (Recorder.recorderAppFactory || Recorder.defaultRecorderAppFactory)(this);
      this._recorderApp = recorderApp;
      recorderApp.once("close", () => {
        this._debugger.resume(false);
        this._recorderApp = null;
      });
      recorderApp.on("event", (data) => {
        if (data.event === "setMode") {
          this.setMode(data.params.mode);
          return;
        }
        if (data.event === "selectorUpdated") {
          this.setHighlightedSelector(this._currentLanguage, data.params.selector);
          return;
        }
        if (data.event === "step") {
          this._debugger.resume(true);
          return;
        }
        if (data.event === "fileChanged") {
          this._currentLanguage = this._contextRecorder.languageName(data.params.file);
          this._refreshOverlay();
          return;
        }
        if (data.event === "resume") {
          this._debugger.resume(false);
          return;
        }
        if (data.event === "pause") {
          this._debugger.pauseOnNextStatement();
          return;
        }
        if (data.event === "clear") {
          this._contextRecorder.clearScript();
          return;
        }
      });
      await Promise.all([recorderApp.setMode(this._mode), recorderApp.setPaused(this._debugger.isPaused()), this._pushAllSources()]);
      this._context.once(_browserContext.BrowserContext.Events.Close, () => {
        this._contextRecorder.dispose();
        this._context.instrumentation.removeListener(this);
        recorderApp.close().catch(() => {
        });
      });
      this._contextRecorder.on(ContextRecorder.Events.Change, (data) => {
        var _this$_recorderApp;
        this._recorderSources = data.sources;
        this._pushAllSources();
        (_this$_recorderApp = this._recorderApp) === null || _this$_recorderApp === undefined || _this$_recorderApp.setFileIfNeeded(data.primaryFileName);
      });
      await this._context.exposeBinding("__pw_recorderState", false, (source) => {
        let actionSelector = "";
        let actionPoint;
        const hasActiveScreenshotCommand = [...this._currentCallsMetadata.keys()].some(isScreenshotCommand);
        if (!hasActiveScreenshotCommand) {
          actionSelector = this._highlightedSelector;
          for (const [metadata, sdkObject] of this._currentCallsMetadata) {
            if (source.page === sdkObject.attribution.page) {
              actionPoint = metadata.point || actionPoint;
              actionSelector = actionSelector || metadata.params.selector;
            }
          }
        }
        const uiState = {
          mode: this._mode,
          actionPoint,
          actionSelector,
          language: this._currentLanguage,
          testIdAttributeName: this._contextRecorder.testIdAttributeName(),
          overlay: this._overlayState
        };
        return uiState;
      });
      await this._context.exposeBinding("__pw_recorderSetSelector", false, async ({
        frame
      }, selector) => {
        var _this$_recorderApp2;
        const selectorPromises = [];
        let currentFrame = frame;
        while (currentFrame) {
          selectorPromises.push(findFrameSelector(currentFrame));
          currentFrame = currentFrame.parentFrame();
        }
        const fullSelector = (await Promise.all(selectorPromises)).filter(Boolean);
        fullSelector.push(selector);
        await ((_this$_recorderApp2 = this._recorderApp) === null || _this$_recorderApp2 === undefined ? undefined : _this$_recorderApp2.setSelector(fullSelector.join(" >> internal:control=enter-frame >> "), true));
      });
      await this._context.exposeBinding("__pw_recorderSetMode", false, async ({
        frame
      }, mode) => {
        if (frame.parentFrame())
          return;
        this.setMode(mode);
      });
      await this._context.exposeBinding("__pw_recorderSetOverlayState", false, async ({
        frame
      }, state) => {
        if (frame.parentFrame())
          return;
        this._overlayState = state;
      });
      await this._context.exposeBinding("__pw_resume", false, () => {
        this._debugger.resume(false);
      });
      await this._context.extendInjectedScript(consoleApiSource.source);
      await this._contextRecorder.install();
      if (this._debugger.isPaused())
        this._pausedStateChanged();
      this._debugger.on(_debugger.Debugger.Events.PausedStateChanged, () => this._pausedStateChanged());
      this._context.recorderAppForTest = recorderApp;
    }
    _pausedStateChanged() {
      var _this$_recorderApp3;
      for (const {
        metadata,
        sdkObject
      } of this._debugger.pausedDetails()) {
        if (!this._currentCallsMetadata.has(metadata))
          this.onBeforeCall(sdkObject, metadata);
      }
      (_this$_recorderApp3 = this._recorderApp) === null || _this$_recorderApp3 === undefined || _this$_recorderApp3.setPaused(this._debugger.isPaused());
      this._updateUserSources();
      this.updateCallLog([...this._currentCallsMetadata.keys()]);
    }
    setMode(mode) {
      var _this$_recorderApp4;
      if (this._mode === mode)
        return;
      this._highlightedSelector = "";
      this._mode = mode;
      (_this$_recorderApp4 = this._recorderApp) === null || _this$_recorderApp4 === undefined || _this$_recorderApp4.setMode(this._mode);
      this._contextRecorder.setEnabled(this._mode === "recording" || this._mode === "assertingText" || this._mode === "assertingVisibility" || this._mode === "assertingValue");
      this._debugger.setMuted(this._mode === "recording" || this._mode === "assertingText" || this._mode === "assertingVisibility" || this._mode === "assertingValue");
      if (this._mode !== "none" && this._mode !== "standby" && this._context.pages().length === 1)
        this._context.pages()[0].bringToFront().catch(() => {
        });
      this._refreshOverlay();
    }
    resume() {
      this._debugger.resume(false);
    }
    mode() {
      return this._mode;
    }
    setHighlightedSelector(language, selector) {
      this._highlightedSelector = (0, _locatorParser.locatorOrSelectorAsSelector)(language, selector, this._context.selectors().testIdAttributeName());
      this._refreshOverlay();
    }
    hideHighlightedSelector() {
      this._highlightedSelector = "";
      this._refreshOverlay();
    }
    setOutput(codegenId, outputFile) {
      this._contextRecorder.setOutput(codegenId, outputFile);
    }
    _refreshOverlay() {
      for (const page of this._context.pages())
        page.mainFrame().evaluateExpression("window.__pw_refreshOverlay()").catch(() => {
        });
    }
    async onBeforeCall(sdkObject, metadata) {
      if (this._omitCallTracking || this._mode === "recording" || this._mode === "assertingText" || this._mode === "assertingVisibility" || this._mode === "assertingValue")
        return;
      this._currentCallsMetadata.set(metadata, sdkObject);
      this._updateUserSources();
      this.updateCallLog([metadata]);
      if (isScreenshotCommand(metadata)) {
        this.hideHighlightedSelector();
      } else if (metadata.params && metadata.params.selector) {
        var _this$_recorderApp5;
        this._highlightedSelector = metadata.params.selector;
        (_this$_recorderApp5 = this._recorderApp) === null || _this$_recorderApp5 === undefined || _this$_recorderApp5.setSelector(this._highlightedSelector).catch(() => {
        });
      }
    }
    async onAfterCall(sdkObject, metadata) {
      if (this._omitCallTracking || this._mode === "recording" || this._mode === "assertingText" || this._mode === "assertingVisibility" || this._mode === "assertingValue")
        return;
      if (!metadata.error)
        this._currentCallsMetadata.delete(metadata);
      this._updateUserSources();
      this.updateCallLog([metadata]);
    }
    _updateUserSources() {
      var _this$_recorderApp6;
      for (const source of this._userSources.values()) {
        source.highlight = [];
        source.revealLine = undefined;
      }
      let fileToSelect = undefined;
      for (const metadata of this._currentCallsMetadata.keys()) {
        if (!metadata.location)
          continue;
        const {
          file,
          line
        } = metadata.location;
        let source = this._userSources.get(file);
        if (!source) {
          source = {
            isRecorded: false,
            label: file,
            id: file,
            text: this._readSource(file),
            highlight: [],
            language: languageForFile(file)
          };
          this._userSources.set(file, source);
        }
        if (line) {
          const paused = this._debugger.isPaused(metadata);
          source.highlight.push({
            line,
            type: metadata.error ? "error" : paused ? "paused" : "running"
          });
          source.revealLine = line;
          fileToSelect = source.id;
        }
      }
      this._pushAllSources();
      if (fileToSelect)
        (_this$_recorderApp6 = this._recorderApp) === null || _this$_recorderApp6 === undefined || _this$_recorderApp6.setFileIfNeeded(fileToSelect);
    }
    _pushAllSources() {
      var _this$_recorderApp7;
      (_this$_recorderApp7 = this._recorderApp) === null || _this$_recorderApp7 === undefined || _this$_recorderApp7.setSources([...this._recorderSources, ...this._userSources.values()]);
    }
    async onBeforeInputAction(sdkObject, metadata) {
    }
    async onCallLog(sdkObject, metadata, logName, message) {
      this.updateCallLog([metadata]);
    }
    updateCallLog(metadatas) {
      var _this$_recorderApp8;
      if (this._mode === "recording" || this._mode === "assertingText" || this._mode === "assertingVisibility" || this._mode === "assertingValue")
        return;
      const logs = [];
      for (const metadata of metadatas) {
        if (!metadata.method || metadata.internal)
          continue;
        let status = "done";
        if (this._currentCallsMetadata.has(metadata))
          status = "in-progress";
        if (this._debugger.isPaused(metadata))
          status = "paused";
        logs.push((0, _recorderUtils.metadataToCallLog)(metadata, status));
      }
      (_this$_recorderApp8 = this._recorderApp) === null || _this$_recorderApp8 === undefined || _this$_recorderApp8.updateCallLogs(logs);
    }
    _readSource(fileName) {
      try {
        return fs.readFileSync(fileName, "utf-8");
      } catch (e) {
        return "// No source available";
      }
    }
  }
  exports.Recorder = Recorder;
  Recorder.recorderAppFactory = undefined;

  class ContextRecorder extends _events.EventEmitter {
    constructor(context, params) {
      super();
      this._generator = undefined;
      this._pageAliases = new Map;
      this._lastPopupOrdinal = 0;
      this._lastDialogOrdinal = -1;
      this._lastDownloadOrdinal = -1;
      this._timers = new Set;
      this._context = undefined;
      this._params = undefined;
      this._recorderSources = undefined;
      this._throttledOutputFile = null;
      this._orderedLanguages = [];
      this._listeners = [];
      this._context = context;
      this._params = params;
      this._recorderSources = [];
      const language = params.language || context.attribution.playwright.options.sdkLanguage;
      this.setOutput(language, params.outputFile);
      const generator = new _codeGenerator.CodeGenerator(context._browser.options.name, params.mode === "recording", params.launchOptions || {}, params.contextOptions || {}, params.device, params.saveStorage);
      generator.on("change", () => {
        this._recorderSources = [];
        for (const languageGenerator of this._orderedLanguages) {
          var _this$_throttledOutpu;
          const {
            header,
            footer,
            actions,
            text
          } = generator.generateStructure(languageGenerator);
          const source = {
            isRecorded: true,
            label: languageGenerator.name,
            group: languageGenerator.groupName,
            id: languageGenerator.id,
            text,
            header,
            footer,
            actions,
            language: languageGenerator.highlighter,
            highlight: []
          };
          source.revealLine = text.split("\n").length - 1;
          this._recorderSources.push(source);
          if (languageGenerator === this._orderedLanguages[0])
            (_this$_throttledOutpu = this._throttledOutputFile) === null || _this$_throttledOutpu === undefined || _this$_throttledOutpu.setContent(source.text);
        }
        this.emit(ContextRecorder.Events.Change, {
          sources: this._recorderSources,
          primaryFileName: this._orderedLanguages[0].id
        });
      });
      context.on(_browserContext.BrowserContext.Events.BeforeClose, () => {
        var _this$_throttledOutpu2;
        (_this$_throttledOutpu2 = this._throttledOutputFile) === null || _this$_throttledOutpu2 === undefined || _this$_throttledOutpu2.flush();
      });
      this._listeners.push(_eventsHelper.eventsHelper.addEventListener(process, "exit", () => {
        var _this$_throttledOutpu3;
        (_this$_throttledOutpu3 = this._throttledOutputFile) === null || _this$_throttledOutpu3 === undefined || _this$_throttledOutpu3.flush();
      }));
      this._generator = generator;
    }
    setOutput(codegenId, outputFile) {
      var _this$_generator;
      const languages = new Set([new _java.JavaLanguageGenerator("junit"), new _java.JavaLanguageGenerator("library"), new _javascript.JavaScriptLanguageGenerator(false), new _javascript.JavaScriptLanguageGenerator(true), new _python.PythonLanguageGenerator(false, true), new _python.PythonLanguageGenerator(false, false), new _python.PythonLanguageGenerator(true, false), new _csharp.CSharpLanguageGenerator("mstest"), new _csharp.CSharpLanguageGenerator("nunit"), new _csharp.CSharpLanguageGenerator("library"), new _jsonl.JsonlLanguageGenerator]);
      const primaryLanguage = [...languages].find((l) => l.id === codegenId);
      if (!primaryLanguage)
        throw new Error(`\n===============================\nUnsupported language: '${codegenId}'\n===============================\n`);
      languages.delete(primaryLanguage);
      this._orderedLanguages = [primaryLanguage, ...languages];
      this._throttledOutputFile = outputFile ? new ThrottledFile(outputFile) : null;
      (_this$_generator = this._generator) === null || _this$_generator === undefined || _this$_generator.restart();
    }
    languageName(id) {
      for (const lang of this._orderedLanguages) {
        if (!id || lang.id === id)
          return lang.highlighter;
      }
      return "javascript";
    }
    async install() {
      this._context.on(_browserContext.BrowserContext.Events.Page, (page) => this._onPage(page));
      for (const page of this._context.pages())
        this._onPage(page);
      this._context.on(_browserContext.BrowserContext.Events.Dialog, (dialog) => this._onDialog(dialog.page()));
      await this._context.exposeBinding("__pw_recorderPerformAction", false, (source, action) => this._performAction(source.frame, action));
      await this._context.exposeBinding("__pw_recorderRecordAction", false, (source, action) => this._recordAction(source.frame, action));
      await this._context.extendInjectedScript(recorderSource.source);
    }
    setEnabled(enabled) {
      this._generator.setEnabled(enabled);
    }
    dispose() {
      for (const timer of this._timers)
        clearTimeout(timer);
      this._timers.clear();
      _eventsHelper.eventsHelper.removeEventListeners(this._listeners);
    }
    async _onPage(page) {
      const frame = page.mainFrame();
      page.on("close", () => {
        this._generator.addAction({
          frame: this._describeMainFrame(page),
          committed: true,
          action: {
            name: "closePage",
            signals: []
          }
        });
        this._pageAliases.delete(page);
      });
      frame.on(_frames.Frame.Events.InternalNavigation, (event) => {
        if (event.isPublic)
          this._onFrameNavigated(frame, page);
      });
      page.on(_page.Page.Events.Download, () => this._onDownload(page));
      const suffix = this._pageAliases.size ? String(++this._lastPopupOrdinal) : "";
      const pageAlias = "page" + suffix;
      this._pageAliases.set(page, pageAlias);
      if (page.opener()) {
        this._onPopup(page.opener(), page);
      } else {
        this._generator.addAction({
          frame: this._describeMainFrame(page),
          committed: true,
          action: {
            name: "openPage",
            url: page.mainFrame().url(),
            signals: []
          }
        });
      }
    }
    clearScript() {
      this._generator.restart();
      if (this._params.mode === "recording") {
        for (const page of this._context.pages())
          this._onFrameNavigated(page.mainFrame(), page);
      }
    }
    _describeMainFrame(page) {
      return {
        pageAlias: this._pageAliases.get(page),
        isMainFrame: true
      };
    }
    async _describeFrame(frame) {
      const page = frame._page;
      const pageAlias = this._pageAliases.get(page);
      const chain = [];
      for (let ancestor = frame;ancestor; ancestor = ancestor.parentFrame())
        chain.push(ancestor);
      chain.reverse();
      if (chain.length === 1)
        return this._describeMainFrame(page);
      const selectorPromises = [];
      for (let i = 0;i < chain.length - 1; i++)
        selectorPromises.push(findFrameSelector(chain[i + 1]));
      const result = await (0, _timeoutRunner.raceAgainstDeadline)(() => Promise.all(selectorPromises), (0, _utils2.monotonicTime)() + 2000);
      if (!result.timedOut && result.result.every((selector) => !!selector)) {
        return {
          pageAlias,
          isMainFrame: false,
          selectorsChain: result.result
        };
      }
      const selectorsChain = [];
      for (let i = 0;i < chain.length - 1; i++) {
        if (chain[i].name())
          selectorsChain.push(`iframe[name=${(0, _stringUtils.quoteCSSAttributeValue)(chain[i].name())}]`);
        else
          selectorsChain.push(`iframe[src=${(0, _stringUtils.quoteCSSAttributeValue)(chain[i].url())}]`);
      }
      return {
        pageAlias,
        isMainFrame: false,
        selectorsChain
      };
    }
    testIdAttributeName() {
      return this._params.testIdAttributeName || this._context.selectors().testIdAttributeName() || "data-testid";
    }
    async _performAction(frame, action) {
      this._generator.commitLastAction();
      const frameDescription = await this._describeFrame(frame);
      const actionInContext = {
        frame: frameDescription,
        action
      };
      const perform = async (action2, params, cb) => {
        const callMetadata = {
          id: `call@${(0, _utils2.createGuid)()}`,
          apiName: "frame." + action2,
          objectId: frame.guid,
          pageId: frame._page.guid,
          frameId: frame.guid,
          startTime: (0, _utils2.monotonicTime)(),
          endTime: 0,
          wallTime: Date.now(),
          type: "Frame",
          method: action2,
          params,
          log: []
        };
        this._generator.willPerformAction(actionInContext);
        try {
          await frame.instrumentation.onBeforeCall(frame, callMetadata);
          await cb(callMetadata);
        } catch (e) {
          callMetadata.endTime = (0, _utils2.monotonicTime)();
          await frame.instrumentation.onAfterCall(frame, callMetadata);
          this._generator.performedActionFailed(actionInContext);
          return;
        }
        callMetadata.endTime = (0, _utils2.monotonicTime)();
        await frame.instrumentation.onAfterCall(frame, callMetadata);
        const timer = setTimeout(() => {
          actionInContext.committed = true;
          this._timers.delete(timer);
        }, 5000);
        this._generator.didPerformAction(actionInContext);
        this._timers.add(timer);
      };
      const kActionTimeout = 5000;
      if (action.name === "click") {
        const {
          options
        } = (0, _utils.toClickOptions)(action);
        await perform("click", {
          selector: action.selector
        }, (callMetadata) => frame.click(callMetadata, action.selector, {
          ...options,
          timeout: kActionTimeout,
          strict: true
        }));
      }
      if (action.name === "press") {
        const modifiers = (0, _utils.toModifiers)(action.modifiers);
        const shortcut = [...modifiers, action.key].join("+");
        await perform("press", {
          selector: action.selector,
          key: shortcut
        }, (callMetadata) => frame.press(callMetadata, action.selector, shortcut, {
          timeout: kActionTimeout,
          strict: true
        }));
      }
      if (action.name === "check")
        await perform("check", {
          selector: action.selector
        }, (callMetadata) => frame.check(callMetadata, action.selector, {
          timeout: kActionTimeout,
          strict: true
        }));
      if (action.name === "uncheck")
        await perform("uncheck", {
          selector: action.selector
        }, (callMetadata) => frame.uncheck(callMetadata, action.selector, {
          timeout: kActionTimeout,
          strict: true
        }));
      if (action.name === "select") {
        const values = action.options.map((value) => ({
          value
        }));
        await perform("selectOption", {
          selector: action.selector,
          values
        }, (callMetadata) => frame.selectOption(callMetadata, action.selector, [], values, {
          timeout: kActionTimeout,
          strict: true
        }));
      }
    }
    async _recordAction(frame, action) {
      this._generator.commitLastAction();
      const frameDescription = await this._describeFrame(frame);
      const actionInContext = {
        frame: frameDescription,
        action
      };
      this._generator.addAction(actionInContext);
    }
    _onFrameNavigated(frame, page) {
      const pageAlias = this._pageAliases.get(page);
      this._generator.signal(pageAlias, frame, {
        name: "navigation",
        url: frame.url()
      });
    }
    _onPopup(page, popup) {
      const pageAlias = this._pageAliases.get(page);
      const popupAlias = this._pageAliases.get(popup);
      this._generator.signal(pageAlias, page.mainFrame(), {
        name: "popup",
        popupAlias
      });
    }
    _onDownload(page) {
      const pageAlias = this._pageAliases.get(page);
      ++this._lastDownloadOrdinal;
      this._generator.signal(pageAlias, page.mainFrame(), {
        name: "download",
        downloadAlias: this._lastDownloadOrdinal ? String(this._lastDownloadOrdinal) : ""
      });
    }
    _onDialog(page) {
      const pageAlias = this._pageAliases.get(page);
      ++this._lastDialogOrdinal;
      this._generator.signal(pageAlias, page.mainFrame(), {
        name: "dialog",
        dialogAlias: this._lastDialogOrdinal ? String(this._lastDialogOrdinal) : ""
      });
    }
  }
  ContextRecorder.Events = {
    Change: "change"
  };

  class ThrottledFile {
    constructor(file) {
      this._file = undefined;
      this._timer = undefined;
      this._text = undefined;
      this._file = file;
    }
    setContent(text) {
      this._text = text;
      if (!this._timer)
        this._timer = setTimeout(() => this.flush(), 250);
    }
    flush() {
      if (this._timer) {
        clearTimeout(this._timer);
        this._timer = undefined;
      }
      if (this._text)
        fs.writeFileSync(this._file, this._text);
      this._text = undefined;
    }
  }
});

// node_modules/playwright-core/lib/server/browserContext.js
var require_browserContext = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var assertBrowserContextIsNotOwned = function(context) {
    for (const page of context.pages()) {
      if (page._ownedContext)
        throw new Error("Please use browser.newContext() for multi-page scripts that share the context.");
    }
  };
  var validateBrowserContextOptions = function(options, browserOptions) {
    if (options.noDefaultViewport && options.deviceScaleFactor !== undefined)
      throw new Error(`"deviceScaleFactor" option is not supported with null "viewport"`);
    if (options.noDefaultViewport && !!options.isMobile)
      throw new Error(`"isMobile" option is not supported with null "viewport"`);
    if (options.acceptDownloads === undefined)
      options.acceptDownloads = "accept";
    if (!options.viewport && !options.noDefaultViewport)
      options.viewport = {
        width: 1280,
        height: 720
      };
    if (options.recordVideo) {
      if (!options.recordVideo.size) {
        if (options.noDefaultViewport) {
          options.recordVideo.size = {
            width: 800,
            height: 600
          };
        } else {
          const size = options.viewport;
          const scale = Math.min(1, 800 / Math.max(size.width, size.height));
          options.recordVideo.size = {
            width: Math.floor(size.width * scale),
            height: Math.floor(size.height * scale)
          };
        }
      }
      options.recordVideo.size.width &= ~1;
      options.recordVideo.size.height &= ~1;
    }
    if (options.proxy) {
      if (!browserOptions.proxy && browserOptions.isChromium && os.platform() === "win32")
        throw new Error(`Browser needs to be launched with the global proxy. If all contexts override the proxy, global proxy will be never used and can be any string, for example "launch({ proxy: { server: 'http://per-context' } })"`);
      options.proxy = normalizeProxySettings(options.proxy);
    }
    verifyGeolocation(options.geolocation);
  };
  var verifyGeolocation = function(geolocation) {
    if (!geolocation)
      return;
    geolocation.accuracy = geolocation.accuracy || 0;
    const {
      longitude,
      latitude,
      accuracy
    } = geolocation;
    if (longitude < -180 || longitude > 180)
      throw new Error(`geolocation.longitude: precondition -180 <= LONGITUDE <= 180 failed.`);
    if (latitude < -90 || latitude > 90)
      throw new Error(`geolocation.latitude: precondition -90 <= LATITUDE <= 90 failed.`);
    if (accuracy < 0)
      throw new Error(`geolocation.accuracy: precondition 0 <= ACCURACY failed.`);
  };
  var normalizeProxySettings = function(proxy) {
    let {
      server,
      bypass
    } = proxy;
    let url;
    try {
      url = new URL(server);
      if (!url.host || !url.protocol)
        url = new URL("http://" + server);
    } catch (e) {
      url = new URL("http://" + server);
    }
    if (url.protocol === "socks4:" && (proxy.username || proxy.password))
      throw new Error(`Socks4 proxy protocol does not support authentication`);
    if (url.protocol === "socks5:" && (proxy.username || proxy.password))
      throw new Error(`Browser does not support socks5 proxy authentication`);
    server = url.protocol + "//" + url.host;
    if (bypass)
      bypass = bypass.split(",").map((t) => t.trim()).join(",");
    return {
      ...proxy,
      server,
      bypass
    };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BrowserContext = undefined;
  exports.assertBrowserContextIsNotOwned = assertBrowserContextIsNotOwned;
  exports.normalizeProxySettings = normalizeProxySettings;
  exports.validateBrowserContextOptions = validateBrowserContextOptions;
  exports.verifyGeolocation = verifyGeolocation;
  var os = _interopRequireWildcard(import.meta.require("os"));
  var _timeoutSettings = require_timeoutSettings();
  var _utils = require_utils3();
  var _fileUtils = require_fileUtils();
  var _helper = require_helper();
  var network = _interopRequireWildcard(require_network2());
  var _page6 = require_page();
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _instrumentation = require_instrumentation();
  var _debugger = require_debugger();
  var _tracing = require_tracing();
  var _harRecorder = require_harRecorder();
  var _recorder = require_recorder();
  var consoleApiSource = _interopRequireWildcard(require_consoleApiSource());
  var _fetch = require_fetch();

  class BrowserContext extends _instrumentation.SdkObject {
    constructor(browser, options, browserContextId) {
      super(browser, "browser-context");
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings;
      this._pageBindings = new Map;
      this._activeProgressControllers = new Set;
      this._options = undefined;
      this._requestInterceptor = undefined;
      this._isPersistentContext = undefined;
      this._closedStatus = "open";
      this._closePromise = undefined;
      this._closePromiseFulfill = undefined;
      this._permissions = new Map;
      this._downloads = new Set;
      this._browser = undefined;
      this._browserContextId = undefined;
      this._selectors = undefined;
      this._origins = new Set;
      this._harRecorders = new Map;
      this.tracing = undefined;
      this.fetchRequest = undefined;
      this._customCloseHandler = undefined;
      this._tempDirs = [];
      this._settingStorageState = false;
      this.initScripts = [];
      this._routesInFlight = new Set;
      this._debugger = undefined;
      this._closeReason = undefined;
      this.attribution.context = this;
      this._browser = browser;
      this._options = options;
      this._browserContextId = browserContextId;
      this._isPersistentContext = !browserContextId;
      this._closePromise = new Promise((fulfill) => this._closePromiseFulfill = fulfill);
      this.fetchRequest = new _fetch.BrowserContextAPIRequestContext(this);
      if (this._options.recordHar)
        this._harRecorders.set("", new _harRecorder.HarRecorder(this, null, this._options.recordHar));
      this.tracing = new _tracing.Tracing(this, browser.options.tracesDir);
    }
    isPersistentContext() {
      return this._isPersistentContext;
    }
    setSelectors(selectors) {
      this._selectors = selectors;
    }
    selectors() {
      return this._selectors || this.attribution.playwright.selectors;
    }
    async _initialize() {
      if (this.attribution.playwright.options.isInternalPlaywright)
        return;
      this._debugger = new _debugger.Debugger(this);
      if ((0, _utils.debugMode)() === "inspector")
        await _recorder.Recorder.show(this, {
          pauseOnNextStatement: true
        });
      if (this._debugger.isPaused())
        _recorder.Recorder.showInspector(this);
      this._debugger.on(_debugger.Debugger.Events.PausedStateChanged, () => {
        _recorder.Recorder.showInspector(this);
      });
      if ((0, _utils.debugMode)() === "console")
        await this.extendInjectedScript(consoleApiSource.source);
      if (this._options.serviceWorkers === "block")
        await this.addInitScript(`\nnavigator.serviceWorker.register = async () => { console.warn('Service Worker registration blocked by Playwright'); };\n`);
      if (this._options.permissions)
        await this.grantPermissions(this._options.permissions);
    }
    debugger() {
      return this._debugger;
    }
    async _ensureVideosPath() {
      if (this._options.recordVideo)
        await (0, _fileUtils.mkdirIfNeeded)(_path.default.join(this._options.recordVideo.dir, "dummy"));
    }
    canResetForReuse() {
      if (this._closedStatus !== "open")
        return false;
      return true;
    }
    async stopPendingOperations(reason) {
      for (const controller of this._activeProgressControllers)
        controller.abort(new Error(reason));
      await new Promise((f) => setTimeout(f, 0));
    }
    static reusableContextHash(params) {
      const paramsCopy = {
        ...params
      };
      for (const k of Object.keys(paramsCopy)) {
        const key = k;
        if (paramsCopy[key] === defaultNewContextParamValues[key])
          delete paramsCopy[key];
      }
      for (const key of paramsThatAllowContextReuse)
        delete paramsCopy[key];
      return JSON.stringify(paramsCopy);
    }
    async resetForReuse(metadata, params) {
      var _page, _page2, _page3, _page4, _page5;
      this.setDefaultNavigationTimeout(undefined);
      this.setDefaultTimeout(undefined);
      this.tracing.resetForReuse();
      if (params) {
        for (const key of paramsThatAllowContextReuse)
          this._options[key] = params[key];
      }
      await this._cancelAllRoutesInFlight();
      let page = this.pages()[0];
      const [, ...otherPages] = this.pages();
      for (const p of otherPages)
        await p.close(metadata);
      if (page && page.hasCrashed()) {
        await page.close(metadata);
        page = undefined;
      }
      (_page = page) === null || _page === undefined || _page._frameManager.setCloseAllOpeningDialogs(true);
      await ((_page2 = page) === null || _page2 === undefined ? undefined : _page2._frameManager.closeOpenDialogs());
      await ((_page3 = page) === null || _page3 === undefined ? undefined : _page3.mainFrame().goto(metadata, "about:blank", {
        timeout: 0
      }));
      (_page4 = page) === null || _page4 === undefined || _page4._frameManager.setCloseAllOpeningDialogs(false);
      await this._resetStorage();
      await this._removeExposedBindings();
      await this._removeInitScripts();
      if (this._options.permissions)
        await this.grantPermissions(this._options.permissions);
      else
        await this.clearPermissions();
      await this.setExtraHTTPHeaders(this._options.extraHTTPHeaders || []);
      await this.setGeolocation(this._options.geolocation);
      await this.setOffline(!!this._options.offline);
      await this.setUserAgent(this._options.userAgent);
      await this.clearCache();
      await this._resetCookies();
      await ((_page5 = page) === null || _page5 === undefined ? undefined : _page5.resetForReuse(metadata));
    }
    _browserClosed() {
      for (const page of this.pages())
        page._didClose();
      this._didCloseInternal();
    }
    _didCloseInternal() {
      if (this._closedStatus === "closed") {
        return;
      }
      this.tracing.abort();
      if (this._isPersistentContext)
        this.onClosePersistent();
      this._closePromiseFulfill(new Error("Context closed"));
      this.emit(BrowserContext.Events.Close);
    }
    async cookies(urls = []) {
      if (urls && !Array.isArray(urls))
        urls = [urls];
      return await this.doGetCookies(urls);
    }
    setHTTPCredentials(httpCredentials) {
      return this.doSetHTTPCredentials(httpCredentials);
    }
    async exposeBinding(name, needsHandle, playwrightBinding) {
      if (this._pageBindings.has(name))
        throw new Error(`Function "${name}" has been already registered`);
      for (const page of this.pages()) {
        if (page.getBinding(name))
          throw new Error(`Function "${name}" has been already registered in one of the pages`);
      }
      const binding = new _page6.PageBinding(name, playwrightBinding, needsHandle);
      this._pageBindings.set(name, binding);
      await this.doExposeBinding(binding);
    }
    async _removeExposedBindings() {
      for (const key of this._pageBindings.keys()) {
        if (!key.startsWith("__pw"))
          this._pageBindings.delete(key);
      }
      await this.doRemoveExposedBindings();
    }
    async grantPermissions(permissions, origin) {
      let resolvedOrigin = "*";
      if (origin) {
        const url = new URL(origin);
        resolvedOrigin = url.origin;
      }
      const existing = new Set(this._permissions.get(resolvedOrigin) || []);
      permissions.forEach((p) => existing.add(p));
      const list = [...existing.values()];
      this._permissions.set(resolvedOrigin, list);
      await this.doGrantPermissions(resolvedOrigin, list);
    }
    async clearPermissions() {
      this._permissions.clear();
      await this.doClearPermissions();
    }
    setDefaultNavigationTimeout(timeout) {
      this._timeoutSettings.setDefaultNavigationTimeout(timeout);
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
    }
    async _loadDefaultContextAsIs(progress2) {
      if (!this.pages().length) {
        const waitForEvent = _helper.helper.waitForEvent(progress2, this, BrowserContext.Events.Page);
        progress2.cleanupWhenAborted(() => waitForEvent.dispose);
        const page = await waitForEvent.promise;
        if (page._pageIsError)
          throw page._pageIsError;
      }
      const pages = this.pages();
      if (pages[0]._pageIsError)
        throw pages[0]._pageIsError;
      await pages[0].mainFrame()._waitForLoadState(progress2, "load");
      return pages;
    }
    async _loadDefaultContext(progress2) {
      const pages = await this._loadDefaultContextAsIs(progress2);
      const browserName = this._browser.options.name;
      if (this._options.isMobile && browserName === "chromium" || this._options.locale && browserName === "webkit") {
        const oldPage = pages[0];
        await this.newPage(progress2.metadata);
        await oldPage.close(progress2.metadata);
      }
    }
    _authenticateProxyViaHeader() {
      const proxy = this._options.proxy || this._browser.options.proxy || {
        username: undefined,
        password: undefined
      };
      const {
        username,
        password
      } = proxy;
      if (username) {
        this._options.httpCredentials = {
          username,
          password
        };
        const token = Buffer.from(`${username}:${password}`).toString("base64");
        this._options.extraHTTPHeaders = network.mergeHeaders([this._options.extraHTTPHeaders, network.singleHeader("Proxy-Authorization", `Basic ${token}`)]);
      }
    }
    _authenticateProxyViaCredentials() {
      const proxy = this._options.proxy || this._browser.options.proxy;
      if (!proxy)
        return;
      const {
        username,
        password
      } = proxy;
      if (username)
        this._options.httpCredentials = {
          username,
          password: password || ""
        };
    }
    async addInitScript(script) {
      this.initScripts.push(script);
      await this.doAddInitScript(script);
    }
    async _removeInitScripts() {
      this.initScripts.splice(0, this.initScripts.length);
      await this.doRemoveInitScripts();
    }
    async setRequestInterceptor(handler) {
      this._requestInterceptor = handler;
      await this.doUpdateRequestInterception();
    }
    isClosingOrClosed() {
      return this._closedStatus !== "open";
    }
    async _deleteAllDownloads() {
      await Promise.all(Array.from(this._downloads).map((download) => download.artifact.deleteOnContextClose()));
    }
    async _deleteAllTempDirs() {
      await Promise.all(this._tempDirs.map(async (dir) => await _fs.default.promises.unlink(dir).catch((e) => {
      })));
    }
    setCustomCloseHandler(handler) {
      this._customCloseHandler = handler;
    }
    async close(options) {
      if (this._closedStatus === "open") {
        if (options.reason)
          this._closeReason = options.reason;
        this.emit(BrowserContext.Events.BeforeClose);
        this._closedStatus = "closing";
        for (const harRecorder of this._harRecorders.values())
          await harRecorder.flush();
        await this.tracing.flush();
        const promises = [];
        for (const {
          context,
          artifact
        } of this._browser._idToVideo.values()) {
          if (context === this)
            promises.push(artifact.finishedPromise());
        }
        if (this._customCloseHandler) {
          await this._customCloseHandler();
        } else {
          await this.doClose(options.reason);
        }
        promises.push(this._deleteAllDownloads());
        promises.push(this._deleteAllTempDirs());
        await Promise.all(promises);
        if (!this._customCloseHandler)
          this._didCloseInternal();
      }
      await this._closePromise;
    }
    async newPage(metadata) {
      const pageDelegate = await this.newPageDelegate();
      if (metadata.isServerSide)
        pageDelegate.potentiallyUninitializedPage().markAsServerSideOnly();
      const pageOrError = await pageDelegate.pageOrError();
      if (pageOrError instanceof _page6.Page) {
        if (pageOrError.isClosed())
          throw new Error("Page has been closed.");
        return pageOrError;
      }
      throw pageOrError;
    }
    addVisitedOrigin(origin) {
      this._origins.add(origin);
    }
    async storageState() {
      const result = {
        cookies: await this.cookies(),
        origins: []
      };
      if (this._origins.size) {
        const internalMetadata = (0, _instrumentation.serverSideCallMetadata)();
        const page = await this.newPage(internalMetadata);
        await page._setServerRequestInterceptor((handler) => {
          handler.fulfill({
            body: "<html></html>",
            requestUrl: handler.request().url()
          }).catch(() => {
          });
          return true;
        });
        for (const origin of this._origins) {
          const originStorage = {
            origin,
            localStorage: []
          };
          const frame = page.mainFrame();
          await frame.goto(internalMetadata, origin);
          const storage = await frame.evaluateExpression(`({
          localStorage: Object.keys(localStorage).map(name => ({ name, value: localStorage.getItem(name) })),
        })`, {
            world: "utility"
          });
          originStorage.localStorage = storage.localStorage;
          if (storage.localStorage.length)
            result.origins.push(originStorage);
        }
        await page.close(internalMetadata);
      }
      return result;
    }
    async _resetStorage() {
      var _this$_options$storag;
      const oldOrigins = this._origins;
      const newOrigins = new Map(((_this$_options$storag = this._options.storageState) === null || _this$_options$storag === undefined || (_this$_options$storag = _this$_options$storag.origins) === null || _this$_options$storag === undefined ? undefined : _this$_options$storag.map((p) => [p.origin, p])) || []);
      if (!oldOrigins.size && !newOrigins.size)
        return;
      let page = this.pages()[0];
      const internalMetadata = (0, _instrumentation.serverSideCallMetadata)();
      page = page || await this.newPage({
        ...internalMetadata,
        isServerSide: false
      });
      await page._setServerRequestInterceptor((handler) => {
        handler.fulfill({
          body: "<html></html>",
          requestUrl: handler.request().url()
        }).catch(() => {
        });
        return true;
      });
      for (const origin of new Set([...oldOrigins, ...newOrigins.keys()])) {
        const frame = page.mainFrame();
        await frame.goto(internalMetadata, origin);
        await frame.resetStorageForCurrentOriginBestEffort(newOrigins.get(origin));
      }
      await page._setServerRequestInterceptor(undefined);
      this._origins = new Set([...newOrigins.keys()]);
    }
    async _resetCookies() {
      var _this$_options$storag2, _this$_options$storag3;
      await this.clearCookies();
      if ((_this$_options$storag2 = this._options.storageState) !== null && _this$_options$storag2 !== undefined && _this$_options$storag2.cookies)
        await this.addCookies((_this$_options$storag3 = this._options.storageState) === null || _this$_options$storag3 === undefined ? undefined : _this$_options$storag3.cookies);
    }
    isSettingStorageState() {
      return this._settingStorageState;
    }
    async setStorageState(metadata, state) {
      this._settingStorageState = true;
      try {
        if (state.cookies)
          await this.addCookies(state.cookies);
        if (state.origins && state.origins.length) {
          const internalMetadata = (0, _instrumentation.serverSideCallMetadata)();
          const page = await this.newPage(internalMetadata);
          await page._setServerRequestInterceptor((handler) => {
            handler.fulfill({
              body: "<html></html>",
              requestUrl: handler.request().url()
            }).catch(() => {
            });
            return true;
          });
          for (const originState of state.origins) {
            const frame = page.mainFrame();
            await frame.goto(metadata, originState.origin);
            await frame.evaluateExpression(`
            originState => {
              for (const { name, value } of (originState.localStorage || []))
                localStorage.setItem(name, value);
            }`, {
              isFunction: true,
              world: "utility"
            }, originState);
          }
          await page.close(internalMetadata);
        }
      } finally {
        this._settingStorageState = false;
      }
    }
    async extendInjectedScript(source, arg) {
      const installInFrame = (frame) => frame.extendInjectedScript(source, arg).catch(() => {
      });
      const installInPage = (page) => {
        page.on(_page6.Page.Events.InternalFrameNavigatedToNewDocument, installInFrame);
        return Promise.all(page.frames().map(installInFrame));
      };
      this.on(BrowserContext.Events.Page, installInPage);
      return Promise.all(this.pages().map(installInPage));
    }
    async _harStart(page, options) {
      const harId = (0, _utils.createGuid)();
      this._harRecorders.set(harId, new _harRecorder.HarRecorder(this, page, options));
      return harId;
    }
    async _harExport(harId) {
      const recorder = this._harRecorders.get(harId || "");
      return recorder.export();
    }
    addRouteInFlight(route) {
      this._routesInFlight.add(route);
    }
    removeRouteInFlight(route) {
      this._routesInFlight.delete(route);
    }
    async _cancelAllRoutesInFlight() {
      await Promise.all([...this._routesInFlight].map((r) => r.abort())).catch(() => {
      });
      this._routesInFlight.clear();
    }
  }
  exports.BrowserContext = BrowserContext;
  BrowserContext.Events = {
    Console: "console",
    Close: "close",
    Dialog: "dialog",
    Page: "page",
    PageError: "pageerror",
    Request: "request",
    Response: "response",
    RequestFailed: "requestfailed",
    RequestFinished: "requestfinished",
    RequestAborted: "requestaborted",
    RequestFulfilled: "requestfulfilled",
    RequestContinued: "requestcontinued",
    BeforeClose: "beforeclose",
    VideoStarted: "videostarted"
  };
  var paramsThatAllowContextReuse = ["colorScheme", "forcedColors", "reducedMotion", "screen", "userAgent", "viewport"];
  var defaultNewContextParamValues = {
    noDefaultViewport: false,
    ignoreHTTPSErrors: false,
    javaScriptEnabled: true,
    bypassCSP: false,
    offline: false,
    isMobile: false,
    hasTouch: false,
    acceptDownloads: "accept",
    strictSelectors: false,
    serviceWorkers: "allow",
    locale: "en-US"
  };
});

// node_modules/playwright-core/lib/server/cookieStore.js
var require_cookieStore = __commonJS((exports) => {
  var domainMatches = function(value, domain) {
    if (value === domain)
      return true;
    if (!domain.startsWith("."))
      return false;
    value = "." + value;
    return value.endsWith(domain);
  };
  var pathMatches = function(value, path) {
    if (value === path)
      return true;
    if (!value.endsWith("/"))
      value = value + "/";
    if (!path.endsWith("/"))
      path = path + "/";
    return value.startsWith(path);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CookieStore = undefined;
  exports.domainMatches = domainMatches;

  class Cookie {
    constructor(data) {
      this._raw = undefined;
      this._raw = data;
    }
    name() {
      return this._raw.name;
    }
    matches(url) {
      if (this._raw.secure && url.protocol !== "https:" && url.hostname !== "localhost")
        return false;
      if (!domainMatches(url.hostname, this._raw.domain))
        return false;
      if (!pathMatches(url.pathname, this._raw.path))
        return false;
      return true;
    }
    equals(other) {
      return this._raw.name === other._raw.name && this._raw.domain === other._raw.domain && this._raw.path === other._raw.path;
    }
    networkCookie() {
      return this._raw;
    }
    updateExpiresFrom(other) {
      this._raw.expires = other._raw.expires;
    }
    expired() {
      if (this._raw.expires === -1)
        return false;
      return this._raw.expires * 1000 < Date.now();
    }
  }

  class CookieStore {
    constructor() {
      this._nameToCookies = new Map;
    }
    addCookies(cookies) {
      for (const cookie of cookies)
        this._addCookie(new Cookie(cookie));
    }
    cookies(url) {
      const result = [];
      for (const cookie of this._cookiesIterator()) {
        if (cookie.matches(url))
          result.push(cookie.networkCookie());
      }
      return result;
    }
    allCookies() {
      const result = [];
      for (const cookie of this._cookiesIterator())
        result.push(cookie.networkCookie());
      return result;
    }
    _addCookie(cookie) {
      let set = this._nameToCookies.get(cookie.name());
      if (!set) {
        set = new Set;
        this._nameToCookies.set(cookie.name(), set);
      }
      for (const other of set) {
        if (other.equals(cookie))
          set.delete(other);
      }
      set.add(cookie);
      CookieStore.pruneExpired(set);
    }
    *_cookiesIterator() {
      for (const [name, cookies] of this._nameToCookies) {
        CookieStore.pruneExpired(cookies);
        for (const cookie of cookies)
          yield cookie;
        if (cookies.size === 0)
          this._nameToCookies.delete(name);
      }
    }
    static pruneExpired(cookies) {
      for (const cookie of cookies) {
        if (cookie.expired())
          cookies.delete(cookie);
      }
    }
  }
  exports.CookieStore = CookieStore;
});

// node_modules/playwright-core/lib/server/formData.js
var require_formData = __commonJS((exports) => {
  var generateUniqueBoundaryString = function() {
    const charCodes = [];
    for (let i = 0;i < 16; i++)
      charCodes.push(alphaNumericEncodingMap[Math.floor(Math.random() * alphaNumericEncodingMap.length)]);
    return "----WebKitFormBoundary" + String.fromCharCode(...charCodes);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.MultipartFormData = undefined;
  var _utilsBundle = require_utilsBundle();

  class MultipartFormData {
    constructor() {
      this._boundary = undefined;
      this._chunks = [];
      this._boundary = generateUniqueBoundaryString();
    }
    contentTypeHeader() {
      return `multipart/form-data; boundary=${this._boundary}`;
    }
    addField(name, value) {
      this._beginMultiPartHeader(name);
      this._finishMultiPartHeader();
      this._chunks.push(Buffer.from(value));
      this._finishMultiPartField();
    }
    addFileField(name, value) {
      this._beginMultiPartHeader(name);
      this._chunks.push(Buffer.from(`; filename="${value.name}"`));
      this._chunks.push(Buffer.from(`\r\ncontent-type: ${value.mimeType || _utilsBundle.mime.getType(value.name) || "application/octet-stream"}`));
      this._finishMultiPartHeader();
      this._chunks.push(value.buffer);
      this._finishMultiPartField();
    }
    finish() {
      this._addBoundary(true);
      return Buffer.concat(this._chunks);
    }
    _beginMultiPartHeader(name) {
      this._addBoundary();
      this._chunks.push(Buffer.from(`content-disposition: form-data; name="${name}"`));
    }
    _finishMultiPartHeader() {
      this._chunks.push(Buffer.from(`\r\n\r\n`));
    }
    _finishMultiPartField() {
      this._chunks.push(Buffer.from(`\r\n`));
    }
    _addBoundary(isLastBoundary) {
      this._chunks.push(Buffer.from("--" + this._boundary));
      if (isLastBoundary)
        this._chunks.push(Buffer.from("--"));
      this._chunks.push(Buffer.from("\r\n"));
    }
  }
  exports.MultipartFormData = MultipartFormData;
  var alphaNumericEncodingMap = [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66];
});

// node_modules/playwright-core/lib/server/fetch.js
var require_fetch = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var toHeadersArray = function(rawHeaders) {
    const result = [];
    for (let i = 0;i < rawHeaders.length; i += 2)
      result.push({
        name: rawHeaders[i],
        value: rawHeaders[i + 1]
      });
    return result;
  };
  var parseCookie = function(header) {
    const pairs = header.split(";").filter((s) => s.trim().length > 0).map((p) => {
      let key = "";
      let value2 = "";
      const separatorPos = p.indexOf("=");
      if (separatorPos === -1) {
        key = p.trim();
      } else {
        key = p.slice(0, separatorPos).trim();
        value2 = p.slice(separatorPos + 1).trim();
      }
      return [key, value2];
    });
    if (!pairs.length)
      return null;
    const [name, value] = pairs[0];
    const cookie = {
      name,
      value,
      domain: "",
      path: "",
      expires: -1,
      httpOnly: false,
      secure: false,
      sameSite: "Lax"
    };
    for (let i = 1;i < pairs.length; i++) {
      const [name2, value2] = pairs[i];
      switch (name2.toLowerCase()) {
        case "expires":
          const expiresMs = +new Date(value2);
          if (isFinite(expiresMs)) {
            if (expiresMs <= 0)
              cookie.expires = 0;
            else
              cookie.expires = Math.min(expiresMs / 1000, _network.kMaxCookieExpiresDateInSeconds);
          }
          break;
        case "max-age":
          const maxAgeSec = parseInt(value2, 10);
          if (isFinite(maxAgeSec)) {
            if (maxAgeSec <= 0)
              cookie.expires = 0;
            else
              cookie.expires = Math.min(Date.now() / 1000 + maxAgeSec, _network.kMaxCookieExpiresDateInSeconds);
          }
          break;
        case "domain":
          cookie.domain = value2.toLocaleLowerCase() || "";
          if (cookie.domain && !cookie.domain.startsWith(".") && cookie.domain.includes("."))
            cookie.domain = "." + cookie.domain;
          break;
        case "path":
          cookie.path = value2 || "";
          break;
        case "secure":
          cookie.secure = true;
          break;
        case "httponly":
          cookie.httpOnly = true;
          break;
        case "samesite":
          switch (value2.toLowerCase()) {
            case "none":
              cookie.sameSite = "None";
              break;
            case "lax":
              cookie.sameSite = "Lax";
              break;
            case "strict":
              cookie.sameSite = "Strict";
              break;
          }
          break;
      }
    }
    return cookie;
  };
  var serializePostData = function(params, headers) {
    (0, _utils.assert)((params.postData ? 1 : 0) + (params.jsonData ? 1 : 0) + (params.formData ? 1 : 0) + (params.multipartData ? 1 : 0) <= 1, `Only one of 'data', 'form' or 'multipart' can be specified`);
    if (params.jsonData !== undefined) {
      setHeader(headers, "content-type", "application/json", true);
      return Buffer.from(params.jsonData, "utf8");
    } else if (params.formData) {
      const searchParams = new URLSearchParams;
      for (const {
        name,
        value
      } of params.formData)
        searchParams.append(name, value);
      setHeader(headers, "content-type", "application/x-www-form-urlencoded", true);
      return Buffer.from(searchParams.toString(), "utf8");
    } else if (params.multipartData) {
      const formData = new _formData.MultipartFormData;
      for (const field of params.multipartData) {
        if (field.file)
          formData.addFileField(field.name, field.file);
        else if (field.value)
          formData.addField(field.name, field.value);
      }
      setHeader(headers, "content-type", formData.contentTypeHeader(), true);
      return formData.finish();
    } else if (params.postData !== undefined) {
      setHeader(headers, "content-type", "application/octet-stream", true);
      return params.postData;
    }
    return;
  };
  var setHeader = function(headers, name, value, keepExisting = false) {
    const existing = Object.entries(headers).find((pair) => pair[0].toLowerCase() === name.toLowerCase());
    if (!existing)
      headers[name] = value;
    else if (!keepExisting)
      headers[existing[0]] = value;
  };
  var getHeader = function(headers, name) {
    const existing = Object.entries(headers).find((pair) => pair[0].toLowerCase() === name.toLowerCase());
    return existing ? existing[1] : undefined;
  };
  var removeHeader = function(headers, name) {
    delete headers[name];
  };
  var shouldBypassProxy = function(url, bypass) {
    if (!bypass)
      return false;
    const domains = bypass.split(",").map((s) => {
      s = s.trim();
      if (!s.startsWith("."))
        s = "." + s;
      return s;
    });
    const domain = "." + url.hostname;
    return domains.some((d) => domain.endsWith(d));
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.GlobalAPIRequestContext = exports.BrowserContextAPIRequestContext = exports.APIRequestContext = undefined;
  var http = _interopRequireWildcard(import.meta.require("http"));
  var https = _interopRequireWildcard(import.meta.require("https"));
  var _stream = import.meta.require("stream");
  var _url = _interopRequireDefault(import.meta.require("url"));
  var _zlib = _interopRequireDefault(import.meta.require("zlib"));
  var _timeoutSettings = require_timeoutSettings();
  var _userAgent = require_userAgent();
  var _utils = require_utils3();
  var _utilsBundle = require_utilsBundle();
  var _browserContext = require_browserContext();
  var _cookieStore = require_cookieStore();
  var _formData = require_formData();
  var _happyEyeballs = require_happy_eyeballs();
  var _instrumentation = require_instrumentation();
  var _progress = require_progress();
  var _tracing = require_tracing();
  var _network = require_network2();

  class APIRequestContext extends _instrumentation.SdkObject {
    static findResponseBody(guid) {
      for (const request of APIRequestContext.allInstances) {
        const body = request.fetchResponses.get(guid);
        if (body)
          return body;
      }
      return;
    }
    constructor(parent) {
      super(parent, "request-context");
      this.fetchResponses = new Map;
      this.fetchLog = new Map;
      this._activeProgressControllers = new Set;
      this._closeReason = undefined;
      APIRequestContext.allInstances.add(this);
    }
    _disposeImpl() {
      APIRequestContext.allInstances.delete(this);
      this.fetchResponses.clear();
      this.fetchLog.clear();
      this.emit(APIRequestContext.Events.Dispose);
    }
    disposeResponse(fetchUid) {
      this.fetchResponses.delete(fetchUid);
      this.fetchLog.delete(fetchUid);
    }
    _storeResponseBody(body) {
      const uid = (0, _utils.createGuid)();
      this.fetchResponses.set(uid, body);
      return uid;
    }
    async fetch(params, metadata) {
      var _params$method;
      const defaults = this._defaultOptions();
      const headers = {
        "user-agent": defaults.userAgent,
        accept: "*/*",
        "accept-encoding": "gzip,deflate,br"
      };
      if (defaults.extraHTTPHeaders) {
        for (const {
          name,
          value
        } of defaults.extraHTTPHeaders)
          setHeader(headers, name, value);
      }
      if (params.headers) {
        for (const {
          name,
          value
        } of params.headers)
          setHeader(headers, name, value);
      }
      const requestUrl = new URL(params.url, defaults.baseURL);
      if (params.params) {
        for (const {
          name,
          value
        } of params.params)
          requestUrl.searchParams.set(name, value);
      }
      const method = ((_params$method = params.method) === null || _params$method === undefined ? undefined : _params$method.toUpperCase()) || "GET";
      const proxy = defaults.proxy;
      let agent;
      if (proxy && proxy.server !== "per-context" && !shouldBypassProxy(requestUrl, proxy.bypass)) {
        var _proxyOpts$protocol;
        const proxyOpts = _url.default.parse(proxy.server);
        if ((_proxyOpts$protocol = proxyOpts.protocol) !== null && _proxyOpts$protocol !== undefined && _proxyOpts$protocol.startsWith("socks")) {
          agent = new _utilsBundle.SocksProxyAgent({
            host: proxyOpts.hostname,
            port: proxyOpts.port || undefined
          });
        } else {
          if (proxy.username)
            proxyOpts.auth = `${proxy.username}:${proxy.password || ""}`;
          agent = new _utilsBundle.HttpsProxyAgent(proxyOpts);
        }
      }
      const timeout = defaults.timeoutSettings.timeout(params);
      const deadline = timeout && (0, _utils.monotonicTime)() + timeout;
      const options = {
        method,
        headers,
        agent,
        maxRedirects: params.maxRedirects === 0 ? -1 : params.maxRedirects === undefined ? 20 : params.maxRedirects,
        timeout,
        deadline,
        __testHookLookup: params.__testHookLookup
      };
      if (params.ignoreHTTPSErrors || defaults.ignoreHTTPSErrors)
        options.rejectUnauthorized = false;
      const postData = serializePostData(params, headers);
      if (postData)
        setHeader(headers, "content-length", String(postData.byteLength));
      const controller = new _progress.ProgressController(metadata, this);
      const fetchResponse = await controller.run((progress2) => {
        return this._sendRequest(progress2, requestUrl, options, postData);
      });
      const fetchUid = this._storeResponseBody(fetchResponse.body);
      this.fetchLog.set(fetchUid, controller.metadata.log);
      if (params.failOnStatusCode && (fetchResponse.status < 200 || fetchResponse.status >= 400))
        throw new Error(`${fetchResponse.status} ${fetchResponse.statusText}`);
      return {
        ...fetchResponse,
        fetchUid
      };
    }
    _parseSetCookieHeader(responseUrl, setCookie) {
      if (!setCookie)
        return [];
      const url = new URL(responseUrl);
      const defaultPath = "/" + url.pathname.substr(1).split("/").slice(0, -1).join("/");
      const cookies = [];
      for (const header of setCookie) {
        const cookie = parseCookie(header);
        if (!cookie)
          continue;
        if (!cookie.domain)
          cookie.domain = url.hostname;
        else
          (0, _utils.assert)(cookie.domain.startsWith(".") || !cookie.domain.includes("."));
        if (!(0, _cookieStore.domainMatches)(url.hostname, cookie.domain))
          continue;
        if (!cookie.path || !cookie.path.startsWith("/"))
          cookie.path = defaultPath;
        cookies.push(cookie);
      }
      return cookies;
    }
    async _updateRequestCookieHeader(url, headers) {
      if (getHeader(headers, "cookie") !== undefined)
        return;
      const cookies = await this._cookies(url);
      if (cookies.length) {
        const valueArray = cookies.map((c) => `${c.name}=${c.value}`);
        setHeader(headers, "cookie", valueArray.join("; "));
      }
    }
    async _sendRequest(progress2, url, options, postData) {
      var _getHeader;
      await this._updateRequestCookieHeader(url, options.headers);
      const requestCookies = ((_getHeader = getHeader(options.headers, "cookie")) === null || _getHeader === undefined ? undefined : _getHeader.split(";").map((p) => {
        const [name, value] = p.split("=").map((v) => v.trim());
        return {
          name,
          value
        };
      })) || [];
      const requestEvent = {
        url,
        method: options.method,
        headers: options.headers,
        cookies: requestCookies,
        postData
      };
      this.emit(APIRequestContext.Events.Request, requestEvent);
      return new Promise((fulfill, reject) => {
        const requestConstructor = (url.protocol === "https:" ? https : http).request;
        const agent = options.agent || (url.protocol === "https:" ? _happyEyeballs.httpsHappyEyeballsAgent : _happyEyeballs.httpHappyEyeballsAgent);
        const requestOptions = {
          ...options,
          agent
        };
        const request = requestConstructor(url, requestOptions, async (response) => {
          const notifyRequestFinished = (body2) => {
            const requestFinishedEvent = {
              requestEvent,
              httpVersion: response.httpVersion,
              statusCode: response.statusCode || 0,
              statusMessage: response.statusMessage || "",
              headers: response.headers,
              rawHeaders: response.rawHeaders,
              cookies,
              body: body2
            };
            this.emit(APIRequestContext.Events.RequestFinished, requestFinishedEvent);
          };
          progress2.log(`\u2190 ${response.statusCode} ${response.statusMessage}`);
          for (const [name, value] of Object.entries(response.headers))
            progress2.log(`  ${name}: ${value}`);
          const cookies = this._parseSetCookieHeader(response.url || url.toString(), response.headers["set-cookie"]);
          if (cookies.length) {
            try {
              await this._addCookies(cookies);
            } catch (e) {
              await Promise.all(cookies.map((c) => this._addCookies([c]).catch(() => {
              })));
            }
          }
          if (redirectStatus.includes(response.statusCode) && options.maxRedirects >= 0) {
            if (!options.maxRedirects) {
              reject(new Error("Max redirect count exceeded"));
              request.destroy();
              return;
            }
            const headers = {
              ...options.headers
            };
            removeHeader(headers, `cookie`);
            const status = response.statusCode;
            let method = options.method;
            if ((status === 301 || status === 302) && method === "POST" || status === 303 && !["GET", "HEAD"].includes(method)) {
              method = "GET";
              postData = undefined;
              removeHeader(headers, `content-encoding`);
              removeHeader(headers, `content-language`);
              removeHeader(headers, `content-length`);
              removeHeader(headers, `content-location`);
              removeHeader(headers, `content-type`);
            }
            const redirectOptions = {
              method,
              headers,
              agent: options.agent,
              maxRedirects: options.maxRedirects - 1,
              timeout: options.timeout,
              deadline: options.deadline,
              __testHookLookup: options.__testHookLookup
            };
            if (options.rejectUnauthorized === false)
              redirectOptions.rejectUnauthorized = false;
            if (response.headers.location) {
              let locationURL;
              try {
                locationURL = new URL(response.headers.location, url);
              } catch (error) {
                reject(new Error(`uri requested responds with an invalid redirect URL: ${response.headers.location}`));
                request.destroy();
                return;
              }
              if (headers["host"])
                headers["host"] = locationURL.host;
              notifyRequestFinished();
              fulfill(this._sendRequest(progress2, locationURL, redirectOptions, postData));
              request.destroy();
              return;
            }
          }
          if (response.statusCode === 401 && !getHeader(options.headers, "authorization")) {
            const auth = response.headers["www-authenticate"];
            const credentials = this._getHttpCredentials(url);
            if (auth !== null && auth !== undefined && auth.trim().startsWith("Basic") && credentials) {
              const {
                username,
                password
              } = credentials;
              const encoded = Buffer.from(`${username || ""}:${password || ""}`).toString("base64");
              setHeader(options.headers, "authorization", `Basic ${encoded}`);
              notifyRequestFinished();
              fulfill(this._sendRequest(progress2, url, options, postData));
              request.destroy();
              return;
            }
          }
          response.on("aborted", () => reject(new Error("aborted")));
          const chunks = [];
          const notifyBodyFinished = () => {
            const body2 = Buffer.concat(chunks);
            notifyRequestFinished(body2);
            fulfill({
              url: response.url || url.toString(),
              status: response.statusCode || 0,
              statusText: response.statusMessage || "",
              headers: toHeadersArray(response.rawHeaders),
              body: body2
            });
          };
          let body = response;
          let transform;
          const encoding = response.headers["content-encoding"];
          if (encoding === "gzip" || encoding === "x-gzip") {
            transform = _zlib.default.createGunzip({
              flush: _zlib.default.constants.Z_SYNC_FLUSH,
              finishFlush: _zlib.default.constants.Z_SYNC_FLUSH
            });
          } else if (encoding === "br") {
            transform = _zlib.default.createBrotliDecompress();
          } else if (encoding === "deflate") {
            transform = _zlib.default.createInflate();
          }
          if (transform) {
            const emptyStreamTransform = new SafeEmptyStreamTransform(notifyBodyFinished);
            body = (0, _stream.pipeline)(response, emptyStreamTransform, transform, (e) => {
              if (e)
                reject(new Error(`failed to decompress '${encoding}' encoding: ${e.message}`));
            });
            body.on("error", (e) => reject(new Error(`failed to decompress '${encoding}' encoding: ${e}`)));
          } else {
            body.on("error", reject);
          }
          body.on("data", (chunk) => chunks.push(chunk));
          body.on("end", notifyBodyFinished);
        });
        request.on("error", reject);
        const disposeListener = () => {
          reject(new Error("Request context disposed."));
          request.destroy();
        };
        this.on(APIRequestContext.Events.Dispose, disposeListener);
        request.on("close", () => this.off(APIRequestContext.Events.Dispose, disposeListener));
        progress2.log(`\u2192 ${options.method} ${url.toString()}`);
        if (options.headers) {
          for (const [name, value] of Object.entries(options.headers))
            progress2.log(`  ${name}: ${value}`);
        }
        if (options.deadline) {
          const rejectOnTimeout = () => {
            reject(new Error(`Request timed out after ${options.timeout}ms`));
            request.destroy();
          };
          const remaining = options.deadline - (0, _utils.monotonicTime)();
          if (remaining <= 0) {
            rejectOnTimeout();
            return;
          }
          request.setTimeout(remaining, rejectOnTimeout);
        }
        if (postData)
          request.write(postData);
        request.end();
      });
    }
    _getHttpCredentials(url) {
      var _this$_defaultOptions, _this$_defaultOptions2;
      if (!((_this$_defaultOptions = this._defaultOptions().httpCredentials) !== null && _this$_defaultOptions !== undefined && _this$_defaultOptions.origin) || url.origin.toLowerCase() === ((_this$_defaultOptions2 = this._defaultOptions().httpCredentials) === null || _this$_defaultOptions2 === undefined || (_this$_defaultOptions2 = _this$_defaultOptions2.origin) === null || _this$_defaultOptions2 === undefined ? undefined : _this$_defaultOptions2.toLowerCase()))
        return this._defaultOptions().httpCredentials;
      return;
    }
  }
  exports.APIRequestContext = APIRequestContext;
  APIRequestContext.Events = {
    Dispose: "dispose",
    Request: "request",
    RequestFinished: "requestfinished"
  };
  APIRequestContext.allInstances = new Set;

  class SafeEmptyStreamTransform extends _stream.Transform {
    constructor(onEmptyStreamCallback) {
      super();
      this._receivedSomeData = false;
      this._onEmptyStreamCallback = undefined;
      this._onEmptyStreamCallback = onEmptyStreamCallback;
    }
    _transform(chunk, encoding, callback) {
      this._receivedSomeData = true;
      callback(null, chunk);
    }
    _flush(callback) {
      if (this._receivedSomeData)
        callback(null);
      else
        this._onEmptyStreamCallback();
    }
  }

  class BrowserContextAPIRequestContext extends APIRequestContext {
    constructor(context) {
      super(context);
      this._context = undefined;
      this._context = context;
      context.once(_browserContext.BrowserContext.Events.Close, () => this._disposeImpl());
    }
    tracing() {
      return this._context.tracing;
    }
    async dispose() {
      this.fetchResponses.clear();
    }
    _defaultOptions() {
      return {
        userAgent: this._context._options.userAgent || this._context._browser.userAgent(),
        extraHTTPHeaders: this._context._options.extraHTTPHeaders,
        httpCredentials: this._context._options.httpCredentials,
        proxy: this._context._options.proxy || this._context._browser.options.proxy,
        timeoutSettings: this._context._timeoutSettings,
        ignoreHTTPSErrors: this._context._options.ignoreHTTPSErrors,
        baseURL: this._context._options.baseURL
      };
    }
    async _addCookies(cookies) {
      await this._context.addCookies(cookies);
    }
    async _cookies(url) {
      return await this._context.cookies(url.toString());
    }
    async storageState() {
      return this._context.storageState();
    }
  }
  exports.BrowserContextAPIRequestContext = BrowserContextAPIRequestContext;

  class GlobalAPIRequestContext extends APIRequestContext {
    constructor(playwright, options) {
      super(playwright);
      this._cookieStore = new _cookieStore.CookieStore;
      this._options = undefined;
      this._origins = undefined;
      this._tracing = undefined;
      this.attribution.context = this;
      const timeoutSettings = new _timeoutSettings.TimeoutSettings;
      if (options.timeout !== undefined)
        timeoutSettings.setDefaultTimeout(options.timeout);
      const proxy = options.proxy;
      if (proxy !== null && proxy !== undefined && proxy.server) {
        let url = proxy === null || proxy === undefined ? undefined : proxy.server.trim();
        if (!/^\w+:\/\//.test(url))
          url = "http://" + url;
        proxy.server = url;
      }
      if (options.storageState) {
        this._origins = options.storageState.origins;
        this._cookieStore.addCookies(options.storageState.cookies || []);
      }
      this._options = {
        baseURL: options.baseURL,
        userAgent: options.userAgent || (0, _userAgent.getUserAgent)(),
        extraHTTPHeaders: options.extraHTTPHeaders,
        ignoreHTTPSErrors: !!options.ignoreHTTPSErrors,
        httpCredentials: options.httpCredentials,
        proxy,
        timeoutSettings
      };
      this._tracing = new _tracing.Tracing(this, options.tracesDir);
    }
    tracing() {
      return this._tracing;
    }
    async dispose() {
      await this._tracing.flush();
      await this._tracing.deleteTmpTracesDir();
      this._disposeImpl();
    }
    _defaultOptions() {
      return this._options;
    }
    async _addCookies(cookies) {
      this._cookieStore.addCookies(cookies);
    }
    async _cookies(url) {
      return this._cookieStore.cookies(url);
    }
    async storageState() {
      return {
        cookies: this._cookieStore.allCookies(),
        origins: this._origins || []
      };
    }
  }
  exports.GlobalAPIRequestContext = GlobalAPIRequestContext;
  var redirectStatus = [301, 302, 303, 307, 308];
});

// node_modules/playwright-core/lib/common/socksProxy.js
var require_socksProxy = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var hexToNumber = function(hex) {
    return [...hex].reduce((value, digit) => {
      const code = digit.charCodeAt(0);
      if (code >= 48 && code <= 57)
        return value + code;
      if (code >= 97 && code <= 102)
        return value + (code - 97) + 10;
      if (code >= 65 && code <= 70)
        return value + (code - 65) + 10;
      throw new Error("Invalid IPv6 token " + hex);
    }, 0);
  };
  var ipToSocksAddress = function(address) {
    if (_net.default.isIPv4(address)) {
      return [
        1,
        ...address.split(".", 4).map((t) => +t & 255)
      ];
    }
    if (_net.default.isIPv6(address)) {
      const result = [4];
      const tokens = address.split(":", 8);
      while (tokens.length < 8)
        tokens.unshift("");
      for (const token of tokens) {
        const value = hexToNumber(token);
        result.push(value >> 8 & 255, value & 255);
      }
      return result;
    }
    throw new Error("Only IPv4 and IPv6 addresses are supported");
  };
  var starMatchToRegex = function(pattern) {
    const source = pattern.split("*").map((s) => {
      return s.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    }).join(".*");
    return new RegExp("^" + source + "$");
  };
  var parsePattern = function(pattern) {
    if (!pattern)
      return () => false;
    const matchers = pattern.split(",").map((token) => {
      const match = token.match(/^(.*?)(?::(\d+))?$/);
      if (!match)
        throw new Error(`Unsupported token "${token}" in pattern "${pattern}"`);
      const tokenPort = match[2] ? +match[2] : undefined;
      const portMatches = (port) => tokenPort === undefined || tokenPort === port;
      let tokenHost = match[1];
      if (tokenHost === "<loopback>") {
        return (host, port) => {
          if (!portMatches(port))
            return false;
          return host === "localhost" || host.endsWith(".localhost") || host === "127.0.0.1" || host === "[::1]";
        };
      }
      if (tokenHost === "*")
        return (host, port) => portMatches(port);
      if (_net.default.isIPv4(tokenHost) || _net.default.isIPv6(tokenHost))
        return (host, port) => host === tokenHost && portMatches(port);
      if (tokenHost[0] === ".")
        tokenHost = "*" + tokenHost;
      const tokenRegex = starMatchToRegex(tokenHost);
      return (host, port) => {
        if (!portMatches(port))
          return false;
        if (_net.default.isIPv4(host) || _net.default.isIPv6(host))
          return false;
        return !!host.match(tokenRegex);
      };
    });
    return (host, port) => matchers.some((matcher) => matcher(host, port));
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SocksProxyHandler = exports.SocksProxy = undefined;
  exports.parsePattern = parsePattern;
  var _events = _interopRequireDefault(import.meta.require("events"));
  var _net = _interopRequireDefault(import.meta.require("net"));
  var _debugLogger = require_debugLogger();
  var _happyEyeballs = require_happy_eyeballs();
  var _utils = require_utils3();
  var SocksAuth = function(SocksAuth2) {
    SocksAuth2[SocksAuth2["NO_AUTHENTICATION_REQUIRED"] = 0] = "NO_AUTHENTICATION_REQUIRED";
    SocksAuth2[SocksAuth2["GSSAPI"] = 1] = "GSSAPI";
    SocksAuth2[SocksAuth2["USERNAME_PASSWORD"] = 2] = "USERNAME_PASSWORD";
    SocksAuth2[SocksAuth2["NO_ACCEPTABLE_METHODS"] = 255] = "NO_ACCEPTABLE_METHODS";
    return SocksAuth2;
  }(SocksAuth || {});
  var SocksAddressType = function(SocksAddressType2) {
    SocksAddressType2[SocksAddressType2["IPv4"] = 1] = "IPv4";
    SocksAddressType2[SocksAddressType2["FqName"] = 3] = "FqName";
    SocksAddressType2[SocksAddressType2["IPv6"] = 4] = "IPv6";
    return SocksAddressType2;
  }(SocksAddressType || {});
  var SocksCommand = function(SocksCommand2) {
    SocksCommand2[SocksCommand2["CONNECT"] = 1] = "CONNECT";
    SocksCommand2[SocksCommand2["BIND"] = 2] = "BIND";
    SocksCommand2[SocksCommand2["UDP_ASSOCIATE"] = 3] = "UDP_ASSOCIATE";
    return SocksCommand2;
  }(SocksCommand || {});
  var SocksReply = function(SocksReply2) {
    SocksReply2[SocksReply2["Succeeded"] = 0] = "Succeeded";
    SocksReply2[SocksReply2["GeneralServerFailure"] = 1] = "GeneralServerFailure";
    SocksReply2[SocksReply2["NotAllowedByRuleSet"] = 2] = "NotAllowedByRuleSet";
    SocksReply2[SocksReply2["NetworkUnreachable"] = 3] = "NetworkUnreachable";
    SocksReply2[SocksReply2["HostUnreachable"] = 4] = "HostUnreachable";
    SocksReply2[SocksReply2["ConnectionRefused"] = 5] = "ConnectionRefused";
    SocksReply2[SocksReply2["TtlExpired"] = 6] = "TtlExpired";
    SocksReply2[SocksReply2["CommandNotSupported"] = 7] = "CommandNotSupported";
    SocksReply2[SocksReply2["AddressTypeNotSupported"] = 8] = "AddressTypeNotSupported";
    return SocksReply2;
  }(SocksReply || {});

  class SocksConnection {
    constructor(uid, socket, client) {
      this._buffer = Buffer.from([]);
      this._offset = 0;
      this._fence = 0;
      this._fenceCallback = undefined;
      this._socket = undefined;
      this._boundOnData = undefined;
      this._uid = undefined;
      this._client = undefined;
      this._uid = uid;
      this._socket = socket;
      this._client = client;
      this._boundOnData = this._onData.bind(this);
      socket.on("data", this._boundOnData);
      socket.on("close", () => this._onClose());
      socket.on("end", () => this._onClose());
      socket.on("error", () => this._onClose());
      this._run().catch(() => this._socket.end());
    }
    async _run() {
      (0, _utils.assert)(await this._authenticate());
      const {
        command,
        host,
        port
      } = await this._parseRequest();
      if (command !== SocksCommand.CONNECT) {
        this._writeBytes(Buffer.from([
          5,
          SocksReply.CommandNotSupported,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0
        ]));
        return;
      }
      this._socket.off("data", this._boundOnData);
      this._client.onSocketRequested({
        uid: this._uid,
        host,
        port
      });
    }
    async _authenticate() {
      const version = await this._readByte();
      (0, _utils.assert)(version === 5, "The VER field must be set to x05 for this version of the protocol, was " + version);
      const nMethods = await this._readByte();
      (0, _utils.assert)(nMethods, "No authentication methods specified");
      const methods = await this._readBytes(nMethods);
      for (const method of methods) {
        if (method === 0) {
          this._writeBytes(Buffer.from([version, method]));
          return true;
        }
      }
      this._writeBytes(Buffer.from([version, SocksAuth.NO_ACCEPTABLE_METHODS]));
      return false;
    }
    async _parseRequest() {
      const version = await this._readByte();
      (0, _utils.assert)(version === 5, "The VER field must be set to x05 for this version of the protocol, was " + version);
      const command = await this._readByte();
      await this._readByte();
      const addressType = await this._readByte();
      let host = "";
      switch (addressType) {
        case SocksAddressType.IPv4:
          host = (await this._readBytes(4)).join(".");
          break;
        case SocksAddressType.FqName:
          const length = await this._readByte();
          host = (await this._readBytes(length)).toString();
          break;
        case SocksAddressType.IPv6:
          const bytes = await this._readBytes(16);
          const tokens = [];
          for (let i = 0;i < 8; ++i)
            tokens.push(bytes.readUInt16BE(i * 2).toString(16));
          host = tokens.join(":");
          break;
      }
      const port = (await this._readBytes(2)).readUInt16BE(0);
      this._buffer = Buffer.from([]);
      this._offset = 0;
      this._fence = 0;
      return {
        command,
        host,
        port
      };
    }
    async _readByte() {
      const buffer = await this._readBytes(1);
      return buffer[0];
    }
    async _readBytes(length) {
      this._fence = this._offset + length;
      if (!this._buffer || this._buffer.length < this._fence)
        await new Promise((f) => this._fenceCallback = f);
      this._offset += length;
      return this._buffer.slice(this._offset - length, this._offset);
    }
    _writeBytes(buffer) {
      if (this._socket.writable)
        this._socket.write(buffer);
    }
    _onClose() {
      this._client.onSocketClosed({
        uid: this._uid
      });
    }
    _onData(buffer) {
      this._buffer = Buffer.concat([this._buffer, buffer]);
      if (this._fenceCallback && this._buffer.length >= this._fence) {
        const callback = this._fenceCallback;
        this._fenceCallback = undefined;
        callback();
      }
    }
    socketConnected(host, port) {
      this._writeBytes(Buffer.from([
        5,
        SocksReply.Succeeded,
        0,
        ...ipToSocksAddress(host),
        port >> 8,
        port & 255
      ]));
      this._socket.on("data", (data) => this._client.onSocketData({
        uid: this._uid,
        data
      }));
    }
    socketFailed(errorCode) {
      const buffer = Buffer.from([
        5,
        0,
        0,
        ...ipToSocksAddress("0.0.0.0"),
        0,
        0
      ]);
      switch (errorCode) {
        case "ENOENT":
        case "ENOTFOUND":
        case "ETIMEDOUT":
        case "EHOSTUNREACH":
          buffer[1] = SocksReply.HostUnreachable;
          break;
        case "ENETUNREACH":
          buffer[1] = SocksReply.NetworkUnreachable;
          break;
        case "ECONNREFUSED":
          buffer[1] = SocksReply.ConnectionRefused;
          break;
        case "ERULESET":
          buffer[1] = SocksReply.NotAllowedByRuleSet;
          break;
      }
      this._writeBytes(buffer);
      this._socket.end();
    }
    sendData(data) {
      this._socket.write(data);
    }
    end() {
      this._socket.end();
    }
    error(error) {
      this._socket.destroy(new Error(error));
    }
  }

  class SocksProxy extends _events.default {
    constructor() {
      super();
      this._server = undefined;
      this._connections = new Map;
      this._sockets = new Set;
      this._closed = false;
      this._port = undefined;
      this._patternMatcher = () => false;
      this._directSockets = new Map;
      this._server = new _net.default.Server((socket) => {
        const uid = (0, _utils.createGuid)();
        const connection = new SocksConnection(uid, socket, this);
        this._connections.set(uid, connection);
      });
      this._server.on("connection", (socket) => {
        if (this._closed) {
          socket.destroy();
          return;
        }
        this._sockets.add(socket);
        socket.once("close", () => this._sockets.delete(socket));
      });
    }
    setPattern(pattern) {
      try {
        this._patternMatcher = parsePattern(pattern);
      } catch (e) {
        this._patternMatcher = () => false;
      }
    }
    async _handleDirect(request) {
      try {
        var _this$_connections$ge4;
        const socket = await (0, _happyEyeballs.createSocket)(request.host, request.port);
        socket.on("data", (data) => {
          var _this$_connections$ge;
          return (_this$_connections$ge = this._connections.get(request.uid)) === null || _this$_connections$ge === undefined ? undefined : _this$_connections$ge.sendData(data);
        });
        socket.on("error", (error) => {
          var _this$_connections$ge2;
          (_this$_connections$ge2 = this._connections.get(request.uid)) === null || _this$_connections$ge2 === undefined || _this$_connections$ge2.error(error.message);
          this._directSockets.delete(request.uid);
        });
        socket.on("end", () => {
          var _this$_connections$ge3;
          (_this$_connections$ge3 = this._connections.get(request.uid)) === null || _this$_connections$ge3 === undefined || _this$_connections$ge3.end();
          this._directSockets.delete(request.uid);
        });
        const localAddress = socket.localAddress;
        const localPort = socket.localPort;
        this._directSockets.set(request.uid, socket);
        (_this$_connections$ge4 = this._connections.get(request.uid)) === null || _this$_connections$ge4 === undefined || _this$_connections$ge4.socketConnected(localAddress, localPort);
      } catch (error) {
        var _this$_connections$ge5;
        (_this$_connections$ge5 = this._connections.get(request.uid)) === null || _this$_connections$ge5 === undefined || _this$_connections$ge5.socketFailed(error.code);
      }
    }
    port() {
      return this._port;
    }
    async listen(port) {
      return new Promise((f) => {
        this._server.listen(port, () => {
          const port2 = this._server.address().port;
          this._port = port2;
          f(port2);
        });
      });
    }
    async close() {
      if (this._closed)
        return;
      this._closed = true;
      for (const socket of this._sockets)
        socket.destroy();
      this._sockets.clear();
      await new Promise((f) => this._server.close(f));
    }
    onSocketRequested(payload) {
      if (!this._patternMatcher(payload.host, payload.port)) {
        this._handleDirect(payload);
        return;
      }
      this.emit(SocksProxy.Events.SocksRequested, payload);
    }
    onSocketData(payload) {
      const direct = this._directSockets.get(payload.uid);
      if (direct) {
        direct.write(payload.data);
        return;
      }
      this.emit(SocksProxy.Events.SocksData, payload);
    }
    onSocketClosed(payload) {
      const direct = this._directSockets.get(payload.uid);
      if (direct) {
        direct.destroy();
        this._directSockets.delete(payload.uid);
        return;
      }
      this.emit(SocksProxy.Events.SocksClosed, payload);
    }
    socketConnected({
      uid,
      host,
      port
    }) {
      var _this$_connections$ge6;
      (_this$_connections$ge6 = this._connections.get(uid)) === null || _this$_connections$ge6 === undefined || _this$_connections$ge6.socketConnected(host, port);
    }
    socketFailed({
      uid,
      errorCode
    }) {
      var _this$_connections$ge7;
      (_this$_connections$ge7 = this._connections.get(uid)) === null || _this$_connections$ge7 === undefined || _this$_connections$ge7.socketFailed(errorCode);
    }
    sendSocketData({
      uid,
      data
    }) {
      var _this$_connections$ge8;
      (_this$_connections$ge8 = this._connections.get(uid)) === null || _this$_connections$ge8 === undefined || _this$_connections$ge8.sendData(data);
    }
    sendSocketEnd({
      uid
    }) {
      var _this$_connections$ge9;
      (_this$_connections$ge9 = this._connections.get(uid)) === null || _this$_connections$ge9 === undefined || _this$_connections$ge9.end();
    }
    sendSocketError({
      uid,
      error
    }) {
      var _this$_connections$ge10;
      (_this$_connections$ge10 = this._connections.get(uid)) === null || _this$_connections$ge10 === undefined || _this$_connections$ge10.error(error);
    }
  }
  exports.SocksProxy = SocksProxy;
  SocksProxy.Events = {
    SocksRequested: "socksRequested",
    SocksData: "socksData",
    SocksClosed: "socksClosed"
  };

  class SocksProxyHandler extends _events.default {
    constructor(pattern, redirectPortForTest) {
      super();
      this._sockets = new Map;
      this._patternMatcher = () => false;
      this._redirectPortForTest = undefined;
      this._patternMatcher = parsePattern(pattern);
      this._redirectPortForTest = redirectPortForTest;
    }
    cleanup() {
      for (const uid of this._sockets.keys())
        this.socketClosed({
          uid
        });
    }
    async socketRequested({
      uid,
      host,
      port
    }) {
      _debugLogger.debugLogger.log("socks", `[${uid}] => request ${host}:${port}`);
      if (!this._patternMatcher(host, port)) {
        const payload = {
          uid,
          errorCode: "ERULESET"
        };
        _debugLogger.debugLogger.log("socks", `[${uid}] <= pattern error ${payload.errorCode}`);
        this.emit(SocksProxyHandler.Events.SocksFailed, payload);
        return;
      }
      if (host === "local.playwright")
        host = "localhost";
      try {
        if (this._redirectPortForTest)
          port = this._redirectPortForTest;
        const socket = await (0, _happyEyeballs.createSocket)(host, port);
        socket.on("data", (data) => {
          const payload2 = {
            uid,
            data
          };
          this.emit(SocksProxyHandler.Events.SocksData, payload2);
        });
        socket.on("error", (error) => {
          const payload2 = {
            uid,
            error: error.message
          };
          _debugLogger.debugLogger.log("socks", `[${uid}] <= network socket error ${payload2.error}`);
          this.emit(SocksProxyHandler.Events.SocksError, payload2);
          this._sockets.delete(uid);
        });
        socket.on("end", () => {
          const payload2 = {
            uid
          };
          _debugLogger.debugLogger.log("socks", `[${uid}] <= network socket closed`);
          this.emit(SocksProxyHandler.Events.SocksEnd, payload2);
          this._sockets.delete(uid);
        });
        const localAddress = socket.localAddress;
        const localPort = socket.localPort;
        this._sockets.set(uid, socket);
        const payload = {
          uid,
          host: localAddress,
          port: localPort
        };
        _debugLogger.debugLogger.log("socks", `[${uid}] <= connected to network ${payload.host}:${payload.port}`);
        this.emit(SocksProxyHandler.Events.SocksConnected, payload);
      } catch (error) {
        const payload = {
          uid,
          errorCode: error.code
        };
        _debugLogger.debugLogger.log("socks", `[${uid}] <= connect error ${payload.errorCode}`);
        this.emit(SocksProxyHandler.Events.SocksFailed, payload);
      }
    }
    sendSocketData({
      uid,
      data
    }) {
      var _this$_sockets$get;
      (_this$_sockets$get = this._sockets.get(uid)) === null || _this$_sockets$get === undefined || _this$_sockets$get.write(data);
    }
    socketClosed({
      uid
    }) {
      var _this$_sockets$get2;
      _debugLogger.debugLogger.log("socks", `[${uid}] <= browser socket closed`);
      (_this$_sockets$get2 = this._sockets.get(uid)) === null || _this$_sockets$get2 === undefined || _this$_sockets$get2.destroy();
      this._sockets.delete(uid);
    }
  }
  exports.SocksProxyHandler = SocksProxyHandler;
  SocksProxyHandler.Events = {
    SocksConnected: "socksConnected",
    SocksData: "socksData",
    SocksError: "socksError",
    SocksFailed: "socksFailed",
    SocksEnd: "socksEnd"
  };
});

// node_modules/playwright-core/lib/server/dispatchers/jsHandleDispatcher.js
var require_jsHandleDispatcher = __commonJS((exports) => {
  var parseArgument = function(arg) {
    return (0, _serializers.parseSerializedValue)(arg.value, arg.handles.map((a) => a._object));
  };
  var parseValue = function(v) {
    return (0, _serializers.parseSerializedValue)(v, []);
  };
  var serializeResult = function(arg) {
    return (0, _serializers.serializeValue)(arg, (value) => ({
      fallThrough: value
    }));
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.JSHandleDispatcher = undefined;
  exports.parseArgument = parseArgument;
  exports.parseValue = parseValue;
  exports.serializeResult = serializeResult;
  var _dispatcher = require_dispatcher();
  var _elementHandlerDispatcher = require_elementHandlerDispatcher();
  var _serializers = require_serializers();

  class JSHandleDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, jsHandle) {
      super(scope, jsHandle, jsHandle.asElement() ? "ElementHandle" : "JSHandle", {
        preview: jsHandle.toString()
      });
      this._type_JSHandle = true;
      jsHandle._setPreviewCallback((preview) => this._dispatchEvent("previewUpdated", {
        preview
      }));
    }
    async evaluateExpression(params) {
      return {
        value: serializeResult(await this._object.evaluateExpression(params.expression, {
          isFunction: params.isFunction
        }, parseArgument(params.arg)))
      };
    }
    async evaluateExpressionHandle(params) {
      const jsHandle = await this._object.evaluateExpressionHandle(params.expression, {
        isFunction: params.isFunction
      }, parseArgument(params.arg));
      return {
        handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this.parentScope(), jsHandle)
      };
    }
    async getProperty(params) {
      const jsHandle = await this._object.getProperty(params.name);
      return {
        handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this.parentScope(), jsHandle)
      };
    }
    async getPropertyList() {
      const map = await this._object.getProperties();
      const properties = [];
      for (const [name, value] of map)
        properties.push({
          name,
          value: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this.parentScope(), value)
        });
      return {
        properties
      };
    }
    async jsonValue() {
      return {
        value: serializeResult(await this._object.jsonValue())
      };
    }
    async objectCount(params) {
      return {
        count: await this._object.objectCount()
      };
    }
    async dispose(_, metadata) {
      metadata.potentiallyClosesScope = true;
      this._object.dispose();
      this._dispose();
    }
  }
  exports.JSHandleDispatcher = JSHandleDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/elementHandlerDispatcher.js
var require_elementHandlerDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ElementHandleDispatcher = undefined;
  var _dispatcher = require_dispatcher();
  var _jsHandleDispatcher = require_jsHandleDispatcher();
  var _frameDispatcher = require_frameDispatcher();
  var _browserContextDispatcher = require_browserContextDispatcher();
  var _pageDispatcher = require_pageDispatcher();

  class ElementHandleDispatcher extends _jsHandleDispatcher.JSHandleDispatcher {
    static from(scope, handle) {
      return (0, _dispatcher.existingDispatcher)(handle) || new ElementHandleDispatcher(scope, handle);
    }
    static fromNullable(scope, handle) {
      if (!handle)
        return;
      return (0, _dispatcher.existingDispatcher)(handle) || new ElementHandleDispatcher(scope, handle);
    }
    static fromJSHandle(scope, handle) {
      const result = (0, _dispatcher.existingDispatcher)(handle);
      if (result)
        return result;
      return handle.asElement() ? new ElementHandleDispatcher(scope, handle.asElement()) : new _jsHandleDispatcher.JSHandleDispatcher(scope, handle);
    }
    constructor(scope, elementHandle) {
      super(scope, elementHandle);
      this._type_ElementHandle = true;
      this._elementHandle = undefined;
      this._elementHandle = elementHandle;
    }
    async ownerFrame(params, metadata) {
      const frame = await this._elementHandle.ownerFrame();
      return {
        frame: frame ? _frameDispatcher.FrameDispatcher.from(this._browserContextDispatcher(), frame) : undefined
      };
    }
    async contentFrame(params, metadata) {
      const frame = await this._elementHandle.contentFrame();
      return {
        frame: frame ? _frameDispatcher.FrameDispatcher.from(this._browserContextDispatcher(), frame) : undefined
      };
    }
    async getAttribute(params, metadata) {
      const value = await this._elementHandle.getAttribute(metadata, params.name);
      return {
        value: value === null ? undefined : value
      };
    }
    async inputValue(params, metadata) {
      const value = await this._elementHandle.inputValue(metadata);
      return {
        value
      };
    }
    async textContent(params, metadata) {
      const value = await this._elementHandle.textContent(metadata);
      return {
        value: value === null ? undefined : value
      };
    }
    async innerText(params, metadata) {
      return {
        value: await this._elementHandle.innerText(metadata)
      };
    }
    async innerHTML(params, metadata) {
      return {
        value: await this._elementHandle.innerHTML(metadata)
      };
    }
    async isChecked(params, metadata) {
      return {
        value: await this._elementHandle.isChecked(metadata)
      };
    }
    async isDisabled(params, metadata) {
      return {
        value: await this._elementHandle.isDisabled(metadata)
      };
    }
    async isEditable(params, metadata) {
      return {
        value: await this._elementHandle.isEditable(metadata)
      };
    }
    async isEnabled(params, metadata) {
      return {
        value: await this._elementHandle.isEnabled(metadata)
      };
    }
    async isHidden(params, metadata) {
      return {
        value: await this._elementHandle.isHidden(metadata)
      };
    }
    async isVisible(params, metadata) {
      return {
        value: await this._elementHandle.isVisible(metadata)
      };
    }
    async dispatchEvent(params, metadata) {
      await this._elementHandle.dispatchEvent(metadata, params.type, (0, _jsHandleDispatcher.parseArgument)(params.eventInit));
    }
    async scrollIntoViewIfNeeded(params, metadata) {
      await this._elementHandle.scrollIntoViewIfNeeded(metadata, params);
    }
    async hover(params, metadata) {
      return await this._elementHandle.hover(metadata, params);
    }
    async click(params, metadata) {
      return await this._elementHandle.click(metadata, params);
    }
    async dblclick(params, metadata) {
      return await this._elementHandle.dblclick(metadata, params);
    }
    async tap(params, metadata) {
      return await this._elementHandle.tap(metadata, params);
    }
    async selectOption(params, metadata) {
      const elements = (params.elements || []).map((e) => e._elementHandle);
      return {
        values: await this._elementHandle.selectOption(metadata, elements, params.options || [], params)
      };
    }
    async fill(params, metadata) {
      return await this._elementHandle.fill(metadata, params.value, params);
    }
    async selectText(params, metadata) {
      await this._elementHandle.selectText(metadata, params);
    }
    async setInputFiles(params, metadata) {
      return await this._elementHandle.setInputFiles(metadata, params);
    }
    async focus(params, metadata) {
      await this._elementHandle.focus(metadata);
    }
    async type(params, metadata) {
      return await this._elementHandle.type(metadata, params.text, params);
    }
    async press(params, metadata) {
      return await this._elementHandle.press(metadata, params.key, params);
    }
    async check(params, metadata) {
      return await this._elementHandle.check(metadata, params);
    }
    async uncheck(params, metadata) {
      return await this._elementHandle.uncheck(metadata, params);
    }
    async boundingBox(params, metadata) {
      const value = await this._elementHandle.boundingBox();
      return {
        value: value || undefined
      };
    }
    async screenshot(params, metadata) {
      const mask = (params.mask || []).map(({
        frame,
        selector
      }) => ({
        frame: frame._object,
        selector
      }));
      return {
        binary: await this._elementHandle.screenshot(metadata, {
          ...params,
          mask
        })
      };
    }
    async querySelector(params, metadata) {
      const handle = await this._elementHandle.querySelector(params.selector, params);
      return {
        element: ElementHandleDispatcher.fromNullable(this.parentScope(), handle)
      };
    }
    async querySelectorAll(params, metadata) {
      const elements = await this._elementHandle.querySelectorAll(params.selector);
      return {
        elements: elements.map((e) => ElementHandleDispatcher.from(this.parentScope(), e))
      };
    }
    async evalOnSelector(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher.serializeResult)(await this._elementHandle.evalOnSelector(params.selector, !!params.strict, params.expression, params.isFunction, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async evalOnSelectorAll(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher.serializeResult)(await this._elementHandle.evalOnSelectorAll(params.selector, params.expression, params.isFunction, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async waitForElementState(params, metadata) {
      await this._elementHandle.waitForElementState(metadata, params.state, params);
    }
    async waitForSelector(params, metadata) {
      return {
        element: ElementHandleDispatcher.fromNullable(this.parentScope(), await this._elementHandle.waitForSelector(metadata, params.selector, params))
      };
    }
    _browserContextDispatcher() {
      const scope = this.parentScope();
      if (scope instanceof _browserContextDispatcher.BrowserContextDispatcher)
        return scope;
      if (scope instanceof _pageDispatcher.PageDispatcher)
        return scope.parentScope();
      if (scope instanceof _pageDispatcher.WorkerDispatcher || scope instanceof _frameDispatcher.FrameDispatcher) {
        const parentScope = scope.parentScope();
        if (parentScope instanceof _browserContextDispatcher.BrowserContextDispatcher)
          return parentScope;
        return parentScope.parentScope();
      }
      throw new Error("ElementHandle belongs to unexpected scope");
    }
  }
  exports.ElementHandleDispatcher = ElementHandleDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/streamDispatcher.js
var require_streamDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.StreamDispatcher = undefined;
  var _dispatcher = require_dispatcher();
  var _utils = require_utils3();

  class StreamDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, stream) {
      super(scope, {
        guid: "stream@" + (0, _utils.createGuid)(),
        stream
      }, "Stream", {});
      this._type_Stream = true;
      this._ended = false;
      stream.once("end", () => this._ended = true);
      stream.once("error", () => this._ended = true);
    }
    async read(params) {
      const stream = this._object.stream;
      if (this._ended)
        return {
          binary: Buffer.from("")
        };
      if (!stream.readableLength) {
        const readyPromise = new _utils.ManualPromise;
        const done = () => readyPromise.resolve();
        stream.on("readable", done);
        stream.on("end", done);
        stream.on("error", done);
        await readyPromise;
        stream.off("readable", done);
        stream.off("end", done);
        stream.off("error", done);
      }
      const buffer = stream.read(Math.min(stream.readableLength, params.size || stream.readableLength));
      return {
        binary: buffer || Buffer.from("")
      };
    }
    async close() {
      this._object.stream.destroy();
    }
  }
  exports.StreamDispatcher = StreamDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/artifactDispatcher.js
var require_artifactDispatcher = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ArtifactDispatcher = undefined;
  var _dispatcher = require_dispatcher();
  var _streamDispatcher = require_streamDispatcher();
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _fileUtils = require_fileUtils();

  class ArtifactDispatcher extends _dispatcher.Dispatcher {
    static from(parentScope, artifact) {
      return ArtifactDispatcher.fromNullable(parentScope, artifact);
    }
    static fromNullable(parentScope, artifact) {
      if (!artifact)
        return;
      const result = (0, _dispatcher.existingDispatcher)(artifact);
      return result || new ArtifactDispatcher(parentScope, artifact);
    }
    constructor(scope, artifact) {
      super(scope, artifact, "Artifact", {
        absolutePath: artifact.localPath()
      });
      this._type_Artifact = true;
    }
    async pathAfterFinished() {
      const path = await this._object.localPathAfterFinished();
      return {
        value: path
      };
    }
    async saveAs(params) {
      return await new Promise((resolve, reject) => {
        this._object.saveAs(async (localPath, error) => {
          if (error) {
            reject(error);
            return;
          }
          try {
            await (0, _fileUtils.mkdirIfNeeded)(params.path);
            await _fs.default.promises.copyFile(localPath, params.path);
            resolve();
          } catch (e) {
            reject(e);
          }
        });
      });
    }
    async saveAsStream() {
      return await new Promise((resolve, reject) => {
        this._object.saveAs(async (localPath, error) => {
          if (error) {
            reject(error);
            return;
          }
          try {
            const readable = _fs.default.createReadStream(localPath, {
              highWaterMark: 1024 * 1024
            });
            const stream = new _streamDispatcher.StreamDispatcher(this, readable);
            resolve({
              stream
            });
            await new Promise((resolve2) => {
              readable.on("close", resolve2);
              readable.on("end", resolve2);
              readable.on("error", resolve2);
            });
          } catch (e) {
            reject(e);
          }
        });
      });
    }
    async stream() {
      const fileName = await this._object.localPathAfterFinished();
      const readable = _fs.default.createReadStream(fileName, {
        highWaterMark: 1024 * 1024
      });
      return {
        stream: new _streamDispatcher.StreamDispatcher(this, readable)
      };
    }
    async failure() {
      const error = await this._object.failureError();
      return {
        error: error || undefined
      };
    }
    async cancel() {
      await this._object.cancel();
    }
    async delete(_, metadata) {
      metadata.potentiallyClosesScope = true;
      await this._object.delete();
      this._dispose();
    }
  }
  exports.ArtifactDispatcher = ArtifactDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/tracingDispatcher.js
var require_tracingDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TracingDispatcher = undefined;
  var _artifactDispatcher = require_artifactDispatcher();
  var _dispatcher = require_dispatcher();

  class TracingDispatcher extends _dispatcher.Dispatcher {
    static from(scope, tracing) {
      const result = (0, _dispatcher.existingDispatcher)(tracing);
      return result || new TracingDispatcher(scope, tracing);
    }
    constructor(scope, tracing) {
      super(scope, tracing, "Tracing", {});
      this._type_Tracing = true;
    }
    async tracingStart(params) {
      await this._object.start(params);
    }
    async tracingStartChunk(params) {
      return await this._object.startChunk(params);
    }
    async tracingStopChunk(params) {
      const {
        artifact,
        entries
      } = await this._object.stopChunk(params);
      return {
        artifact: artifact ? _artifactDispatcher.ArtifactDispatcher.from(this, artifact) : undefined,
        entries
      };
    }
    async tracingStop(params) {
      await this._object.stop();
    }
  }
  exports.TracingDispatcher = TracingDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/networkDispatchers.js
var require_networkDispatchers = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WebSocketDispatcher = exports.RouteDispatcher = exports.ResponseDispatcher = exports.RequestDispatcher = exports.APIRequestContextDispatcher = undefined;
  var _network = require_network2();
  var _dispatcher = require_dispatcher();
  var _tracingDispatcher = require_tracingDispatcher();
  var _frameDispatcher = require_frameDispatcher();
  var _pageDispatcher = require_pageDispatcher();

  class RequestDispatcher extends _dispatcher.Dispatcher {
    static from(scope, request) {
      const result = (0, _dispatcher.existingDispatcher)(request);
      return result || new RequestDispatcher(scope, request);
    }
    static fromNullable(scope, request) {
      return request ? RequestDispatcher.from(scope, request) : undefined;
    }
    constructor(scope, request) {
      var _request$frame;
      const postData = request.postDataBuffer();
      const frame = request.frame();
      const page = (_request$frame = request.frame()) === null || _request$frame === undefined ? undefined : _request$frame._page;
      const pageDispatcher = page ? (0, _dispatcher.existingDispatcher)(page) : null;
      const frameDispatcher = frame ? _frameDispatcher.FrameDispatcher.from(scope, frame) : null;
      super(pageDispatcher || frameDispatcher || scope, request, "Request", {
        frame: _frameDispatcher.FrameDispatcher.fromNullable(scope, request.frame()),
        serviceWorker: _pageDispatcher.WorkerDispatcher.fromNullable(scope, request.serviceWorker()),
        url: request.url(),
        resourceType: request.resourceType(),
        method: request.method(),
        postData: postData === null ? undefined : postData,
        headers: request.headers(),
        isNavigationRequest: request.isNavigationRequest(),
        redirectedFrom: RequestDispatcher.fromNullable(scope, request.redirectedFrom())
      });
      this._type_Request = undefined;
      this._browserContextDispatcher = undefined;
      this._type_Request = true;
      this._browserContextDispatcher = scope;
    }
    async rawRequestHeaders(params) {
      return {
        headers: await this._object.rawRequestHeaders()
      };
    }
    async response() {
      return {
        response: ResponseDispatcher.fromNullable(this._browserContextDispatcher, await this._object.response())
      };
    }
  }
  exports.RequestDispatcher = RequestDispatcher;

  class ResponseDispatcher extends _dispatcher.Dispatcher {
    static from(scope, response) {
      const result = (0, _dispatcher.existingDispatcher)(response);
      const requestDispatcher = RequestDispatcher.from(scope, response.request());
      return result || new ResponseDispatcher(requestDispatcher, response);
    }
    static fromNullable(scope, response) {
      return response ? ResponseDispatcher.from(scope, response) : undefined;
    }
    constructor(scope, response) {
      super(scope, response, "Response", {
        request: scope,
        url: response.url(),
        status: response.status(),
        statusText: response.statusText(),
        headers: response.headers(),
        timing: response.timing(),
        fromServiceWorker: response.fromServiceWorker()
      });
      this._type_Response = true;
    }
    async body() {
      return {
        binary: await this._object.body()
      };
    }
    async securityDetails() {
      return {
        value: await this._object.securityDetails() || undefined
      };
    }
    async serverAddr() {
      return {
        value: await this._object.serverAddr() || undefined
      };
    }
    async rawResponseHeaders(params) {
      return {
        headers: await this._object.rawResponseHeaders()
      };
    }
    async sizes(params) {
      return {
        sizes: await this._object.sizes()
      };
    }
  }
  exports.ResponseDispatcher = ResponseDispatcher;

  class RouteDispatcher extends _dispatcher.Dispatcher {
    static from(scope, route) {
      const result = (0, _dispatcher.existingDispatcher)(route);
      return result || new RouteDispatcher(scope, route);
    }
    constructor(scope, route) {
      super(scope, route, "Route", {
        request: scope
      });
      this._type_Route = true;
    }
    async continue(params, metadata) {
      await this._object.continue({
        url: params.url,
        method: params.method,
        headers: params.headers,
        postData: params.postData,
        isFallback: params.isFallback
      });
    }
    async fulfill(params, metadata) {
      await this._object.fulfill(params);
    }
    async abort(params, metadata) {
      await this._object.abort(params.errorCode || "failed");
    }
    async redirectNavigationRequest(params) {
      await this._object.redirectNavigationRequest(params.url);
    }
  }
  exports.RouteDispatcher = RouteDispatcher;

  class WebSocketDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, webSocket) {
      super(scope, webSocket, "WebSocket", {
        url: webSocket.url()
      });
      this._type_EventTarget = true;
      this._type_WebSocket = true;
      this.addObjectListener(_network.WebSocket.Events.FrameSent, (event) => this._dispatchEvent("frameSent", event));
      this.addObjectListener(_network.WebSocket.Events.FrameReceived, (event) => this._dispatchEvent("frameReceived", event));
      this.addObjectListener(_network.WebSocket.Events.SocketError, (error) => this._dispatchEvent("socketError", {
        error
      }));
      this.addObjectListener(_network.WebSocket.Events.Close, () => this._dispatchEvent("close", {}));
    }
  }
  exports.WebSocketDispatcher = WebSocketDispatcher;

  class APIRequestContextDispatcher extends _dispatcher.Dispatcher {
    static from(scope, request) {
      const result = (0, _dispatcher.existingDispatcher)(request);
      return result || new APIRequestContextDispatcher(scope, request);
    }
    static fromNullable(scope, request) {
      return request ? APIRequestContextDispatcher.from(scope, request) : undefined;
    }
    constructor(parentScope, request) {
      const tracing = _tracingDispatcher.TracingDispatcher.from(parentScope, request.tracing());
      super(parentScope, request, "APIRequestContext", {
        tracing
      });
      this._type_APIRequestContext = true;
      this.adopt(tracing);
    }
    async storageState() {
      return this._object.storageState();
    }
    async dispose(_, metadata) {
      metadata.potentiallyClosesScope = true;
      await this._object.dispose();
      this._dispose();
    }
    async fetch(params, metadata) {
      const fetchResponse = await this._object.fetch(params, metadata);
      return {
        response: {
          url: fetchResponse.url,
          status: fetchResponse.status,
          statusText: fetchResponse.statusText,
          headers: fetchResponse.headers,
          fetchUid: fetchResponse.fetchUid
        }
      };
    }
    async fetchResponseBody(params) {
      return {
        binary: this._object.fetchResponses.get(params.fetchUid)
      };
    }
    async fetchLog(params) {
      const log = this._object.fetchLog.get(params.fetchUid) || [];
      return {
        log
      };
    }
    async disposeAPIResponse(params) {
      this._object.disposeResponse(params.fetchUid);
    }
  }
  exports.APIRequestContextDispatcher = APIRequestContextDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/frameDispatcher.js
var require_frameDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FrameDispatcher = undefined;
  var _frames = require_frames();
  var _dispatcher = require_dispatcher();
  var _elementHandlerDispatcher = require_elementHandlerDispatcher();
  var _jsHandleDispatcher = require_jsHandleDispatcher();
  var _networkDispatchers = require_networkDispatchers();
  var _utils = require_utils3();

  class FrameDispatcher extends _dispatcher.Dispatcher {
    static from(scope, frame) {
      const result = (0, _dispatcher.existingDispatcher)(frame);
      return result || new FrameDispatcher(scope, frame);
    }
    static fromNullable(scope, frame) {
      if (!frame)
        return;
      return FrameDispatcher.from(scope, frame);
    }
    constructor(scope, frame) {
      (0, _utils.debugAssert)(frame._page.mainFrame(), "Cannot determine whether the frame is a main frame");
      const gcBucket = frame._page.mainFrame() === frame ? "MainFrame" : "Frame";
      const pageDispatcher = (0, _dispatcher.existingDispatcher)(frame._page);
      super(pageDispatcher || scope, frame, "Frame", {
        url: frame.url(),
        name: frame.name(),
        parentFrame: FrameDispatcher.fromNullable(scope, frame.parentFrame()),
        loadStates: Array.from(frame._firedLifecycleEvents)
      }, gcBucket);
      this._type_Frame = true;
      this._frame = undefined;
      this._browserContextDispatcher = undefined;
      this._browserContextDispatcher = scope;
      this._frame = frame;
      this.addObjectListener(_frames.Frame.Events.AddLifecycle, (lifecycleEvent) => {
        this._dispatchEvent("loadstate", {
          add: lifecycleEvent
        });
      });
      this.addObjectListener(_frames.Frame.Events.RemoveLifecycle, (lifecycleEvent) => {
        this._dispatchEvent("loadstate", {
          remove: lifecycleEvent
        });
      });
      this.addObjectListener(_frames.Frame.Events.InternalNavigation, (event) => {
        if (!event.isPublic)
          return;
        const params = {
          url: event.url,
          name: event.name,
          error: event.error ? event.error.message : undefined
        };
        if (event.newDocument)
          params.newDocument = {
            request: _networkDispatchers.RequestDispatcher.fromNullable(this._browserContextDispatcher, event.newDocument.request || null)
          };
        this._dispatchEvent("navigated", params);
      });
    }
    async goto(params, metadata) {
      return {
        response: _networkDispatchers.ResponseDispatcher.fromNullable(this._browserContextDispatcher, await this._frame.goto(metadata, params.url, params))
      };
    }
    async frameElement() {
      return {
        element: _elementHandlerDispatcher.ElementHandleDispatcher.from(this, await this._frame.frameElement())
      };
    }
    async evaluateExpression(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher.serializeResult)(await this._frame.evaluateExpression(params.expression, {
          isFunction: params.isFunction,
          exposeUtilityScript: params.exposeUtilityScript
        }, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async evaluateExpressionHandle(params, metadata) {
      return {
        handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, await this._frame.evaluateExpressionHandle(params.expression, {
          isFunction: params.isFunction
        }, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async waitForSelector(params, metadata) {
      return {
        element: _elementHandlerDispatcher.ElementHandleDispatcher.fromNullable(this, await this._frame.waitForSelector(metadata, params.selector, params))
      };
    }
    async dispatchEvent(params, metadata) {
      return this._frame.dispatchEvent(metadata, params.selector, params.type, (0, _jsHandleDispatcher.parseArgument)(params.eventInit), params);
    }
    async evalOnSelector(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher.serializeResult)(await this._frame.evalOnSelector(params.selector, !!params.strict, params.expression, params.isFunction, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async evalOnSelectorAll(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher.serializeResult)(await this._frame.evalOnSelectorAll(params.selector, params.expression, params.isFunction, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async querySelector(params, metadata) {
      return {
        element: _elementHandlerDispatcher.ElementHandleDispatcher.fromNullable(this, await this._frame.querySelector(params.selector, params))
      };
    }
    async querySelectorAll(params, metadata) {
      const elements = await this._frame.querySelectorAll(params.selector);
      return {
        elements: elements.map((e) => _elementHandlerDispatcher.ElementHandleDispatcher.from(this, e))
      };
    }
    async queryCount(params) {
      return {
        value: await this._frame.queryCount(params.selector)
      };
    }
    async content() {
      return {
        value: await this._frame.content()
      };
    }
    async setContent(params, metadata) {
      return await this._frame.setContent(metadata, params.html, params);
    }
    async addScriptTag(params, metadata) {
      return {
        element: _elementHandlerDispatcher.ElementHandleDispatcher.from(this, await this._frame.addScriptTag(params))
      };
    }
    async addStyleTag(params, metadata) {
      return {
        element: _elementHandlerDispatcher.ElementHandleDispatcher.from(this, await this._frame.addStyleTag(params))
      };
    }
    async click(params, metadata) {
      metadata.potentiallyClosesScope = true;
      return await this._frame.click(metadata, params.selector, params);
    }
    async dblclick(params, metadata) {
      return await this._frame.dblclick(metadata, params.selector, params);
    }
    async dragAndDrop(params, metadata) {
      return await this._frame.dragAndDrop(metadata, params.source, params.target, params);
    }
    async tap(params, metadata) {
      return await this._frame.tap(metadata, params.selector, params);
    }
    async fill(params, metadata) {
      return await this._frame.fill(metadata, params.selector, params.value, params);
    }
    async focus(params, metadata) {
      await this._frame.focus(metadata, params.selector, params);
    }
    async blur(params, metadata) {
      await this._frame.blur(metadata, params.selector, params);
    }
    async textContent(params, metadata) {
      const value = await this._frame.textContent(metadata, params.selector, params);
      return {
        value: value === null ? undefined : value
      };
    }
    async innerText(params, metadata) {
      return {
        value: await this._frame.innerText(metadata, params.selector, params)
      };
    }
    async innerHTML(params, metadata) {
      return {
        value: await this._frame.innerHTML(metadata, params.selector, params)
      };
    }
    async getAttribute(params, metadata) {
      const value = await this._frame.getAttribute(metadata, params.selector, params.name, params);
      return {
        value: value === null ? undefined : value
      };
    }
    async inputValue(params, metadata) {
      const value = await this._frame.inputValue(metadata, params.selector, params);
      return {
        value
      };
    }
    async isChecked(params, metadata) {
      return {
        value: await this._frame.isChecked(metadata, params.selector, params)
      };
    }
    async isDisabled(params, metadata) {
      return {
        value: await this._frame.isDisabled(metadata, params.selector, params)
      };
    }
    async isEditable(params, metadata) {
      return {
        value: await this._frame.isEditable(metadata, params.selector, params)
      };
    }
    async isEnabled(params, metadata) {
      return {
        value: await this._frame.isEnabled(metadata, params.selector, params)
      };
    }
    async isHidden(params, metadata) {
      return {
        value: await this._frame.isHidden(metadata, params.selector, params)
      };
    }
    async isVisible(params, metadata) {
      return {
        value: await this._frame.isVisible(metadata, params.selector, params)
      };
    }
    async hover(params, metadata) {
      return await this._frame.hover(metadata, params.selector, params);
    }
    async selectOption(params, metadata) {
      const elements = (params.elements || []).map((e) => e._elementHandle);
      return {
        values: await this._frame.selectOption(metadata, params.selector, elements, params.options || [], params)
      };
    }
    async setInputFiles(params, metadata) {
      return await this._frame.setInputFiles(metadata, params.selector, params);
    }
    async type(params, metadata) {
      return await this._frame.type(metadata, params.selector, params.text, params);
    }
    async press(params, metadata) {
      return await this._frame.press(metadata, params.selector, params.key, params);
    }
    async check(params, metadata) {
      return await this._frame.check(metadata, params.selector, params);
    }
    async uncheck(params, metadata) {
      return await this._frame.uncheck(metadata, params.selector, params);
    }
    async waitForTimeout(params, metadata) {
      return await this._frame.waitForTimeout(metadata, params.timeout);
    }
    async waitForFunction(params, metadata) {
      return {
        handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, await this._frame._waitForFunctionExpression(metadata, params.expression, params.isFunction, (0, _jsHandleDispatcher.parseArgument)(params.arg), params))
      };
    }
    async title(params, metadata) {
      return {
        value: await this._frame.title()
      };
    }
    async highlight(params, metadata) {
      return await this._frame.highlight(params.selector);
    }
    async expect(params, metadata) {
      metadata.potentiallyClosesScope = true;
      const expectedValue = params.expectedValue ? (0, _jsHandleDispatcher.parseArgument)(params.expectedValue) : undefined;
      const result = await this._frame.expect(metadata, params.selector, {
        ...params,
        expectedValue
      });
      if (result.received !== undefined)
        result.received = (0, _jsHandleDispatcher.serializeResult)(result.received);
      return result;
    }
  }
  exports.FrameDispatcher = FrameDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/pageDispatcher.js
var require_pageDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WorkerDispatcher = exports.PageDispatcher = exports.BindingCallDispatcher = undefined;
  var _page = require_page();
  var _dispatcher = require_dispatcher();
  var _errors = require_errors();
  var _frameDispatcher = require_frameDispatcher();
  var _networkDispatchers = require_networkDispatchers();
  var _jsHandleDispatcher = require_jsHandleDispatcher();
  var _elementHandlerDispatcher = require_elementHandlerDispatcher();
  var _artifactDispatcher = require_artifactDispatcher();
  var _utils = require_utils3();

  class PageDispatcher extends _dispatcher.Dispatcher {
    static from(parentScope, page) {
      return PageDispatcher.fromNullable(parentScope, page);
    }
    static fromNullable(parentScope, page) {
      if (!page)
        return;
      const result = (0, _dispatcher.existingDispatcher)(page);
      return result || new PageDispatcher(parentScope, page);
    }
    constructor(parentScope, page) {
      const mainFrame = _frameDispatcher.FrameDispatcher.from(parentScope, page.mainFrame());
      super(parentScope, page, "Page", {
        mainFrame,
        viewportSize: page.viewportSize() || undefined,
        isClosed: page.isClosed(),
        opener: PageDispatcher.fromNullable(parentScope, page.opener())
      });
      this._type_EventTarget = true;
      this._type_Page = true;
      this._page = undefined;
      this._subscriptions = new Set;
      this.adopt(mainFrame);
      this._page = page;
      this.addObjectListener(_page.Page.Events.Close, () => {
        this._dispatchEvent("close");
        this._dispose();
      });
      this.addObjectListener(_page.Page.Events.Crash, () => this._dispatchEvent("crash"));
      this.addObjectListener(_page.Page.Events.Download, (download) => {
        this._dispatchEvent("download", {
          url: download.url,
          suggestedFilename: download.suggestedFilename(),
          artifact: _artifactDispatcher.ArtifactDispatcher.from(parentScope, download.artifact)
        });
      });
      this.addObjectListener(_page.Page.Events.FileChooser, (fileChooser) => this._dispatchEvent("fileChooser", {
        element: _elementHandlerDispatcher.ElementHandleDispatcher.from(mainFrame, fileChooser.element()),
        isMultiple: fileChooser.isMultiple()
      }));
      this.addObjectListener(_page.Page.Events.FrameAttached, (frame) => this._onFrameAttached(frame));
      this.addObjectListener(_page.Page.Events.FrameDetached, (frame) => this._onFrameDetached(frame));
      this.addObjectListener(_page.Page.Events.LocatorHandlerTriggered, (uid) => this._dispatchEvent("locatorHandlerTriggered", {
        uid
      }));
      this.addObjectListener(_page.Page.Events.WebSocket, (webSocket) => this._dispatchEvent("webSocket", {
        webSocket: new _networkDispatchers.WebSocketDispatcher(this, webSocket)
      }));
      this.addObjectListener(_page.Page.Events.Worker, (worker) => this._dispatchEvent("worker", {
        worker: new WorkerDispatcher(this, worker)
      }));
      this.addObjectListener(_page.Page.Events.Video, (artifact) => this._dispatchEvent("video", {
        artifact: _artifactDispatcher.ArtifactDispatcher.from(parentScope, artifact)
      }));
      if (page._video)
        this._dispatchEvent("video", {
          artifact: _artifactDispatcher.ArtifactDispatcher.from(this.parentScope(), page._video)
        });
      const frames = page._frameManager.frames();
      for (let i = 1;i < frames.length; i++)
        this._onFrameAttached(frames[i]);
    }
    page() {
      return this._page;
    }
    async setDefaultNavigationTimeoutNoReply(params, metadata) {
      this._page.setDefaultNavigationTimeout(params.timeout);
    }
    async setDefaultTimeoutNoReply(params, metadata) {
      this._page.setDefaultTimeout(params.timeout);
    }
    async exposeBinding(params, metadata) {
      await this._page.exposeBinding(params.name, !!params.needsHandle, (source, ...args) => {
        if (this._disposed)
          return;
        const binding = new BindingCallDispatcher(this, params.name, !!params.needsHandle, source, args);
        this._dispatchEvent("bindingCall", {
          binding
        });
        return binding.promise();
      });
    }
    async setExtraHTTPHeaders(params, metadata) {
      await this._page.setExtraHTTPHeaders(params.headers);
    }
    async reload(params, metadata) {
      return {
        response: _networkDispatchers.ResponseDispatcher.fromNullable(this.parentScope(), await this._page.reload(metadata, params))
      };
    }
    async goBack(params, metadata) {
      return {
        response: _networkDispatchers.ResponseDispatcher.fromNullable(this.parentScope(), await this._page.goBack(metadata, params))
      };
    }
    async goForward(params, metadata) {
      return {
        response: _networkDispatchers.ResponseDispatcher.fromNullable(this.parentScope(), await this._page.goForward(metadata, params))
      };
    }
    async registerLocatorHandler(params, metadata) {
      const uid = this._page.registerLocatorHandler(params.selector);
      return {
        uid
      };
    }
    async resolveLocatorHandlerNoReply(params, metadata) {
      this._page.resolveLocatorHandler(params.uid);
    }
    async emulateMedia(params, metadata) {
      await this._page.emulateMedia({
        media: params.media,
        colorScheme: params.colorScheme,
        reducedMotion: params.reducedMotion,
        forcedColors: params.forcedColors
      });
    }
    async setViewportSize(params, metadata) {
      await this._page.setViewportSize(params.viewportSize);
    }
    async addInitScript(params, metadata) {
      await this._page.addInitScript(params.source);
    }
    async setNetworkInterceptionPatterns(params, metadata) {
      if (!params.patterns.length) {
        await this._page.setClientRequestInterceptor(undefined);
        return;
      }
      const urlMatchers = params.patterns.map((pattern) => pattern.regexSource ? new RegExp(pattern.regexSource, pattern.regexFlags) : pattern.glob);
      await this._page.setClientRequestInterceptor((route, request) => {
        const matchesSome = urlMatchers.some((urlMatch) => (0, _utils.urlMatches)(this._page._browserContext._options.baseURL, request.url(), urlMatch));
        if (!matchesSome)
          return false;
        this._dispatchEvent("route", {
          route: _networkDispatchers.RouteDispatcher.from(_networkDispatchers.RequestDispatcher.from(this.parentScope(), request), route)
        });
        return true;
      });
    }
    async expectScreenshot(params, metadata) {
      const mask = (params.mask || []).map(({
        frame,
        selector
      }) => ({
        frame: frame._object,
        selector
      }));
      const locator = params.locator ? {
        frame: params.locator.frame._object,
        selector: params.locator.selector
      } : undefined;
      return await this._page.expectScreenshot(metadata, {
        ...params,
        locator,
        mask
      });
    }
    async screenshot(params, metadata) {
      const mask = (params.mask || []).map(({
        frame,
        selector
      }) => ({
        frame: frame._object,
        selector
      }));
      return {
        binary: await this._page.screenshot(metadata, {
          ...params,
          mask
        })
      };
    }
    async close(params, metadata) {
      if (!params.runBeforeUnload)
        metadata.potentiallyClosesScope = true;
      await this._page.close(metadata, params);
    }
    async updateSubscription(params) {
      if (params.event === "fileChooser")
        await this._page.setFileChooserIntercepted(params.enabled);
      if (params.enabled)
        this._subscriptions.add(params.event);
      else
        this._subscriptions.delete(params.event);
    }
    async keyboardDown(params, metadata) {
      await this._page.keyboard.down(params.key);
    }
    async keyboardUp(params, metadata) {
      await this._page.keyboard.up(params.key);
    }
    async keyboardInsertText(params, metadata) {
      await this._page.keyboard.insertText(params.text);
    }
    async keyboardType(params, metadata) {
      await this._page.keyboard.type(params.text, params);
    }
    async keyboardPress(params, metadata) {
      await this._page.keyboard.press(params.key, params);
    }
    async mouseMove(params, metadata) {
      await this._page.mouse.move(params.x, params.y, params, metadata);
    }
    async mouseDown(params, metadata) {
      await this._page.mouse.down(params, metadata);
    }
    async mouseUp(params, metadata) {
      await this._page.mouse.up(params, metadata);
    }
    async mouseClick(params, metadata) {
      await this._page.mouse.click(params.x, params.y, params, metadata);
    }
    async mouseWheel(params, metadata) {
      await this._page.mouse.wheel(params.deltaX, params.deltaY);
    }
    async touchscreenTap(params, metadata) {
      await this._page.touchscreen.tap(params.x, params.y, metadata);
    }
    async accessibilitySnapshot(params, metadata) {
      const rootAXNode = await this._page.accessibility.snapshot({
        interestingOnly: params.interestingOnly,
        root: params.root ? params.root._elementHandle : undefined
      });
      return {
        rootAXNode: rootAXNode || undefined
      };
    }
    async pdf(params, metadata) {
      if (!this._page.pdf)
        throw new Error("PDF generation is only supported for Headless Chromium");
      const buffer = await this._page.pdf(params);
      return {
        pdf: buffer
      };
    }
    async bringToFront(params, metadata) {
      await this._page.bringToFront();
    }
    async startJSCoverage(params, metadata) {
      const coverage = this._page.coverage;
      await coverage.startJSCoverage(params);
    }
    async stopJSCoverage(params, metadata) {
      const coverage = this._page.coverage;
      return await coverage.stopJSCoverage();
    }
    async startCSSCoverage(params, metadata) {
      const coverage = this._page.coverage;
      await coverage.startCSSCoverage(params);
    }
    async stopCSSCoverage(params, metadata) {
      const coverage = this._page.coverage;
      return await coverage.stopCSSCoverage();
    }
    _onFrameAttached(frame) {
      this._dispatchEvent("frameAttached", {
        frame: _frameDispatcher.FrameDispatcher.from(this.parentScope(), frame)
      });
    }
    _onFrameDetached(frame) {
      this._dispatchEvent("frameDetached", {
        frame: _frameDispatcher.FrameDispatcher.from(this.parentScope(), frame)
      });
    }
    _onDispose() {
      if (!this._page.isClosedOrClosingOrCrashed())
        this._page.setClientRequestInterceptor(undefined).catch(() => {
        });
    }
  }
  exports.PageDispatcher = PageDispatcher;

  class WorkerDispatcher extends _dispatcher.Dispatcher {
    static fromNullable(scope, worker) {
      if (!worker)
        return;
      const result = (0, _dispatcher.existingDispatcher)(worker);
      return result || new WorkerDispatcher(scope, worker);
    }
    constructor(scope, worker) {
      super(scope, worker, "Worker", {
        url: worker.url()
      });
      this._type_Worker = true;
      this.addObjectListener(_page.Worker.Events.Close, () => this._dispatchEvent("close"));
    }
    async evaluateExpression(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher.serializeResult)(await this._object.evaluateExpression(params.expression, params.isFunction, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async evaluateExpressionHandle(params, metadata) {
      return {
        handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, await this._object.evaluateExpressionHandle(params.expression, params.isFunction, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
  }
  exports.WorkerDispatcher = WorkerDispatcher;

  class BindingCallDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, name, needsHandle, source, args) {
      super(scope, {
        guid: "bindingCall@" + (0, _utils.createGuid)()
      }, "BindingCall", {
        frame: _frameDispatcher.FrameDispatcher.from(scope.parentScope(), source.frame),
        name,
        args: needsHandle ? undefined : args.map(_jsHandleDispatcher.serializeResult),
        handle: needsHandle ? _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(scope, args[0]) : undefined
      });
      this._type_BindingCall = true;
      this._resolve = undefined;
      this._reject = undefined;
      this._promise = undefined;
      this._promise = new Promise((resolve, reject) => {
        this._resolve = resolve;
        this._reject = reject;
      });
    }
    promise() {
      return this._promise;
    }
    async resolve(params, metadata) {
      this._resolve((0, _jsHandleDispatcher.parseArgument)(params.result));
      this._dispose();
    }
    async reject(params, metadata) {
      this._reject((0, _errors.parseError)(params.error));
      this._dispose();
    }
  }
  exports.BindingCallDispatcher = BindingCallDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/cdpSessionDispatcher.js
var require_cdpSessionDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CDPSessionDispatcher = undefined;
  var _crConnection = require_crConnection();
  var _dispatcher = require_dispatcher();

  class CDPSessionDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, cdpSession) {
      super(scope, cdpSession, "CDPSession", {});
      this._type_CDPSession = true;
      this.addObjectListener(_crConnection.CDPSession.Events.Event, ({
        method,
        params
      }) => this._dispatchEvent("event", {
        method,
        params
      }));
      this.addObjectListener(_crConnection.CDPSession.Events.Closed, () => this._dispose());
    }
    async send(params) {
      return {
        result: await this._object.send(params.method, params.params)
      };
    }
    async detach(_, metadata) {
      metadata.potentiallyClosesScope = true;
      await this._object.detach();
    }
  }
  exports.CDPSessionDispatcher = CDPSessionDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/writableStreamDispatcher.js
var require_writableStreamDispatcher = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WritableStreamDispatcher = undefined;
  var _dispatcher = require_dispatcher();
  var fs = _interopRequireWildcard(import.meta.require("fs"));
  var _utils = require_utils3();

  class WritableStreamDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, stream, lastModifiedMs) {
      super(scope, {
        guid: "writableStream@" + (0, _utils.createGuid)(),
        stream
      }, "WritableStream", {});
      this._type_WritableStream = true;
      this._lastModifiedMs = undefined;
      this._lastModifiedMs = lastModifiedMs;
    }
    async write(params) {
      const stream = this._object.stream;
      await new Promise((fulfill, reject) => {
        stream.write(params.binary, (error) => {
          if (error)
            reject(error);
          else
            fulfill();
        });
      });
    }
    async close() {
      const stream = this._object.stream;
      await new Promise((fulfill) => stream.end(fulfill));
      if (this._lastModifiedMs)
        await fs.promises.utimes(this.path(), new Date(this._lastModifiedMs), new Date(this._lastModifiedMs));
    }
    path() {
      return this._object.stream.path;
    }
  }
  exports.WritableStreamDispatcher = WritableStreamDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/dialogDispatcher.js
var require_dialogDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DialogDispatcher = undefined;
  var _dispatcher = require_dispatcher();
  var _pageDispatcher = require_pageDispatcher();

  class DialogDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, dialog) {
      const page = _pageDispatcher.PageDispatcher.fromNullable(scope, dialog.page().initializedOrUndefined());
      super(page || scope, dialog, "Dialog", {
        page,
        type: dialog.type(),
        message: dialog.message(),
        defaultValue: dialog.defaultValue()
      });
      this._type_Dialog = true;
    }
    async accept(params) {
      await this._object.accept(params.promptText);
    }
    async dismiss() {
      await this._object.dismiss();
    }
  }
  exports.DialogDispatcher = DialogDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/browserContextDispatcher.js
var require_browserContextDispatcher = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BrowserContextDispatcher = undefined;
  var _browserContext = require_browserContext();
  var _dispatcher = require_dispatcher();
  var _pageDispatcher = require_pageDispatcher();
  var _networkDispatchers = require_networkDispatchers();
  var _crBrowser = require_crBrowser();
  var _cdpSessionDispatcher = require_cdpSessionDispatcher();
  var _recorder = require_recorder();
  var _artifactDispatcher = require_artifactDispatcher();
  var _tracingDispatcher = require_tracingDispatcher();
  var fs = _interopRequireWildcard(import.meta.require("fs"));
  var path = _interopRequireWildcard(import.meta.require("path"));
  var _utils = require_utils3();
  var _writableStreamDispatcher = require_writableStreamDispatcher();
  var _dialogDispatcher = require_dialogDispatcher();
  var _errors = require_errors();
  var _elementHandlerDispatcher = require_elementHandlerDispatcher();

  class BrowserContextDispatcher extends _dispatcher.Dispatcher {
    constructor(parentScope, context) {
      const requestContext = _networkDispatchers.APIRequestContextDispatcher.from(parentScope, context.fetchRequest);
      const tracing = _tracingDispatcher.TracingDispatcher.from(parentScope, context.tracing);
      super(parentScope, context, "BrowserContext", {
        isChromium: context._browser.options.isChromium,
        isLocalBrowserOnServer: context._browser._isCollocatedWithServer,
        requestContext,
        tracing
      });
      this._type_EventTarget = true;
      this._type_BrowserContext = true;
      this._context = undefined;
      this._subscriptions = new Set;
      this.adopt(requestContext);
      this.adopt(tracing);
      this._context = context;
      const onVideo = (artifact) => {
        const artifactDispatcher = _artifactDispatcher.ArtifactDispatcher.from(parentScope, artifact);
        this._dispatchEvent("video", {
          artifact: artifactDispatcher
        });
      };
      this.addObjectListener(_browserContext.BrowserContext.Events.VideoStarted, onVideo);
      for (const video of context._browser._idToVideo.values()) {
        if (video.context === context)
          onVideo(video.artifact);
      }
      for (const page of context.pages())
        this._dispatchEvent("page", {
          page: _pageDispatcher.PageDispatcher.from(this, page)
        });
      this.addObjectListener(_browserContext.BrowserContext.Events.Page, (page) => {
        this._dispatchEvent("page", {
          page: _pageDispatcher.PageDispatcher.from(this, page)
        });
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.Close, () => {
        this._dispatchEvent("close");
        this._dispose();
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.PageError, (error, page) => {
        this._dispatchEvent("pageError", {
          error: (0, _errors.serializeError)(error),
          page: _pageDispatcher.PageDispatcher.from(this, page)
        });
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.Console, (message) => {
        const page = message.page();
        if (this._shouldDispatchEvent(page, "console")) {
          const pageDispatcher = _pageDispatcher.PageDispatcher.from(this, page);
          this._dispatchEvent("console", {
            page: pageDispatcher,
            type: message.type(),
            text: message.text(),
            args: message.args().map((a) => _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(pageDispatcher, a)),
            location: message.location()
          });
        }
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.Dialog, (dialog) => {
        if (this._shouldDispatchEvent(dialog.page(), "dialog"))
          this._dispatchEvent("dialog", {
            dialog: new _dialogDispatcher.DialogDispatcher(this, dialog)
          });
        else
          dialog.close().catch(() => {
          });
      });
      if (context._browser.options.name === "chromium") {
        for (const page of context.backgroundPages())
          this._dispatchEvent("backgroundPage", {
            page: _pageDispatcher.PageDispatcher.from(this, page)
          });
        this.addObjectListener(_crBrowser.CRBrowserContext.CREvents.BackgroundPage, (page) => this._dispatchEvent("backgroundPage", {
          page: _pageDispatcher.PageDispatcher.from(this, page)
        }));
        for (const serviceWorker of context.serviceWorkers())
          this._dispatchEvent("serviceWorker", {
            worker: new _pageDispatcher.WorkerDispatcher(this, serviceWorker)
          });
        this.addObjectListener(_crBrowser.CRBrowserContext.CREvents.ServiceWorker, (serviceWorker) => this._dispatchEvent("serviceWorker", {
          worker: new _pageDispatcher.WorkerDispatcher(this, serviceWorker)
        }));
      }
      this.addObjectListener(_browserContext.BrowserContext.Events.Request, (request) => {
        var _request$frame;
        const redirectFromDispatcher = request.redirectedFrom() && (0, _dispatcher.existingDispatcher)(request.redirectedFrom());
        if (!redirectFromDispatcher && !this._shouldDispatchNetworkEvent(request, "request") && !request.isNavigationRequest())
          return;
        const requestDispatcher = _networkDispatchers.RequestDispatcher.from(this, request);
        this._dispatchEvent("request", {
          request: requestDispatcher,
          page: _pageDispatcher.PageDispatcher.fromNullable(this, (_request$frame = request.frame()) === null || _request$frame === undefined ? undefined : _request$frame._page.initializedOrUndefined())
        });
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.Response, (response) => {
        var _response$frame;
        const requestDispatcher = (0, _dispatcher.existingDispatcher)(response.request());
        if (!requestDispatcher && !this._shouldDispatchNetworkEvent(response.request(), "response"))
          return;
        this._dispatchEvent("response", {
          response: _networkDispatchers.ResponseDispatcher.from(this, response),
          page: _pageDispatcher.PageDispatcher.fromNullable(this, (_response$frame = response.frame()) === null || _response$frame === undefined ? undefined : _response$frame._page.initializedOrUndefined())
        });
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.RequestFailed, (request) => {
        var _request$frame2;
        const requestDispatcher = (0, _dispatcher.existingDispatcher)(request);
        if (!requestDispatcher && !this._shouldDispatchNetworkEvent(request, "requestFailed"))
          return;
        this._dispatchEvent("requestFailed", {
          request: _networkDispatchers.RequestDispatcher.from(this, request),
          failureText: request._failureText || undefined,
          responseEndTiming: request._responseEndTiming,
          page: _pageDispatcher.PageDispatcher.fromNullable(this, (_request$frame2 = request.frame()) === null || _request$frame2 === undefined ? undefined : _request$frame2._page.initializedOrUndefined())
        });
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.RequestFinished, ({
        request,
        response
      }) => {
        var _request$frame3;
        const requestDispatcher = (0, _dispatcher.existingDispatcher)(request);
        if (!requestDispatcher && !this._shouldDispatchNetworkEvent(request, "requestFinished"))
          return;
        this._dispatchEvent("requestFinished", {
          request: _networkDispatchers.RequestDispatcher.from(this, request),
          response: _networkDispatchers.ResponseDispatcher.fromNullable(this, response),
          responseEndTiming: request._responseEndTiming,
          page: _pageDispatcher.PageDispatcher.fromNullable(this, (_request$frame3 = request.frame()) === null || _request$frame3 === undefined ? undefined : _request$frame3._page.initializedOrUndefined())
        });
      });
    }
    _shouldDispatchNetworkEvent(request, event) {
      var _request$frame4;
      return this._shouldDispatchEvent((_request$frame4 = request.frame()) === null || _request$frame4 === undefined || (_request$frame4 = _request$frame4._page) === null || _request$frame4 === undefined ? undefined : _request$frame4.initializedOrUndefined(), event);
    }
    _shouldDispatchEvent(page, event) {
      if (this._subscriptions.has(event))
        return true;
      const pageDispatcher = page ? (0, _dispatcher.existingDispatcher)(page) : undefined;
      if (pageDispatcher !== null && pageDispatcher !== undefined && pageDispatcher._subscriptions.has(event))
        return true;
      return false;
    }
    async createTempFile(params) {
      const dir = this._context._browser.options.artifactsDir;
      const tmpDir = path.join(dir, "upload-" + (0, _utils.createGuid)());
      await fs.promises.mkdir(tmpDir);
      this._context._tempDirs.push(tmpDir);
      const file = fs.createWriteStream(path.join(tmpDir, params.name));
      return {
        writableStream: new _writableStreamDispatcher.WritableStreamDispatcher(this, file, params.lastModifiedMs)
      };
    }
    async setDefaultNavigationTimeoutNoReply(params) {
      this._context.setDefaultNavigationTimeout(params.timeout);
    }
    async setDefaultTimeoutNoReply(params) {
      this._context.setDefaultTimeout(params.timeout);
    }
    async exposeBinding(params) {
      await this._context.exposeBinding(params.name, !!params.needsHandle, (source, ...args) => {
        if (this._disposed)
          return;
        const pageDispatcher = _pageDispatcher.PageDispatcher.from(this, source.page);
        const binding = new _pageDispatcher.BindingCallDispatcher(pageDispatcher, params.name, !!params.needsHandle, source, args);
        this._dispatchEvent("bindingCall", {
          binding
        });
        return binding.promise();
      });
    }
    async newPage(params, metadata) {
      return {
        page: _pageDispatcher.PageDispatcher.from(this, await this._context.newPage(metadata))
      };
    }
    async cookies(params) {
      return {
        cookies: await this._context.cookies(params.urls)
      };
    }
    async addCookies(params) {
      await this._context.addCookies(params.cookies);
    }
    async clearCookies() {
      await this._context.clearCookies();
    }
    async grantPermissions(params) {
      await this._context.grantPermissions(params.permissions, params.origin);
    }
    async clearPermissions() {
      await this._context.clearPermissions();
    }
    async setGeolocation(params) {
      await this._context.setGeolocation(params.geolocation);
    }
    async setExtraHTTPHeaders(params) {
      await this._context.setExtraHTTPHeaders(params.headers);
    }
    async setOffline(params) {
      await this._context.setOffline(params.offline);
    }
    async setHTTPCredentials(params) {
      await this._context.setHTTPCredentials(params.httpCredentials);
    }
    async addInitScript(params) {
      await this._context.addInitScript(params.source);
    }
    async setNetworkInterceptionPatterns(params) {
      if (!params.patterns.length) {
        await this._context.setRequestInterceptor(undefined);
        return;
      }
      const urlMatchers = params.patterns.map((pattern) => pattern.regexSource ? new RegExp(pattern.regexSource, pattern.regexFlags) : pattern.glob);
      await this._context.setRequestInterceptor((route, request) => {
        const matchesSome = urlMatchers.some((urlMatch) => (0, _utils.urlMatches)(this._context._options.baseURL, request.url(), urlMatch));
        if (!matchesSome)
          return false;
        this._dispatchEvent("route", {
          route: _networkDispatchers.RouteDispatcher.from(_networkDispatchers.RequestDispatcher.from(this, request), route)
        });
        return true;
      });
    }
    async storageState(params, metadata) {
      return await this._context.storageState();
    }
    async close(params, metadata) {
      metadata.potentiallyClosesScope = true;
      await this._context.close(params);
    }
    async recorderSupplementEnable(params) {
      await _recorder.Recorder.show(this._context, params);
    }
    async pause(params, metadata) {
    }
    async newCDPSession(params) {
      if (!this._object._browser.options.isChromium)
        throw new Error(`CDP session is only available in Chromium`);
      if (!params.page && !params.frame || params.page && params.frame)
        throw new Error(`CDP session must be initiated with either Page or Frame, not none or both`);
      const crBrowserContext = this._object;
      return {
        session: new _cdpSessionDispatcher.CDPSessionDispatcher(this, await crBrowserContext.newCDPSession((params.page ? params.page : params.frame)._object))
      };
    }
    async harStart(params) {
      const harId = await this._context._harStart(params.page ? params.page._object : null, params.options);
      return {
        harId
      };
    }
    async harExport(params) {
      const artifact = await this._context._harExport(params.harId);
      if (!artifact)
        throw new Error("No HAR artifact. Ensure record.harPath is set.");
      return {
        artifact: _artifactDispatcher.ArtifactDispatcher.from(this, artifact)
      };
    }
    async updateSubscription(params) {
      if (params.enabled)
        this._subscriptions.add(params.event);
      else
        this._subscriptions.delete(params.event);
    }
    _onDispose() {
      if (!this._context.isClosingOrClosed())
        this._context.setRequestInterceptor(undefined).catch(() => {
        });
    }
  }
  exports.BrowserContextDispatcher = BrowserContextDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/androidDispatcher.js
var require_androidDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AndroidSocketDispatcher = exports.AndroidDispatcher = exports.AndroidDeviceDispatcher = undefined;
  var _dispatcher = require_dispatcher();
  var _android = require_android();
  var _browserContextDispatcher = require_browserContextDispatcher();

  class AndroidDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, android) {
      super(scope, android, "Android", {});
      this._type_Android = true;
    }
    async devices(params) {
      const devices = await this._object.devices(params);
      return {
        devices: devices.map((d) => AndroidDeviceDispatcher.from(this, d))
      };
    }
    async setDefaultTimeoutNoReply(params) {
      this._object.setDefaultTimeout(params.timeout);
    }
  }
  exports.AndroidDispatcher = AndroidDispatcher;

  class AndroidDeviceDispatcher extends _dispatcher.Dispatcher {
    static from(scope, device) {
      const result = (0, _dispatcher.existingDispatcher)(device);
      return result || new AndroidDeviceDispatcher(scope, device);
    }
    constructor(scope, device) {
      super(scope, device, "AndroidDevice", {
        model: device.model,
        serial: device.serial
      });
      this._type_EventTarget = true;
      this._type_AndroidDevice = true;
      for (const webView of device.webViews())
        this._dispatchEvent("webViewAdded", {
          webView
        });
      this.addObjectListener(_android.AndroidDevice.Events.WebViewAdded, (webView) => this._dispatchEvent("webViewAdded", {
        webView
      }));
      this.addObjectListener(_android.AndroidDevice.Events.WebViewRemoved, (socketName) => this._dispatchEvent("webViewRemoved", {
        socketName
      }));
      this.addObjectListener(_android.AndroidDevice.Events.Close, (socketName) => this._dispatchEvent("close"));
    }
    async wait(params) {
      await this._object.send("wait", params);
    }
    async fill(params) {
      await this._object.send("click", {
        selector: params.selector
      });
      await this._object.send("fill", params);
    }
    async tap(params) {
      await this._object.send("click", params);
    }
    async drag(params) {
      await this._object.send("drag", params);
    }
    async fling(params) {
      await this._object.send("fling", params);
    }
    async longTap(params) {
      await this._object.send("longClick", params);
    }
    async pinchClose(params) {
      await this._object.send("pinchClose", params);
    }
    async pinchOpen(params) {
      await this._object.send("pinchOpen", params);
    }
    async scroll(params) {
      await this._object.send("scroll", params);
    }
    async swipe(params) {
      await this._object.send("swipe", params);
    }
    async info(params) {
      return {
        info: await this._object.send("info", params)
      };
    }
    async inputType(params) {
      const text = params.text;
      const keyCodes = [];
      for (let i = 0;i < text.length; ++i) {
        const code = keyMap.get(text[i].toUpperCase());
        if (code === undefined)
          throw new Error("No mapping for " + text[i] + " found");
        keyCodes.push(code);
      }
      await Promise.all(keyCodes.map((keyCode) => this._object.send("inputPress", {
        keyCode
      })));
    }
    async inputPress(params) {
      if (!keyMap.has(params.key))
        throw new Error("Unknown key: " + params.key);
      await this._object.send("inputPress", {
        keyCode: keyMap.get(params.key)
      });
    }
    async inputTap(params) {
      await this._object.send("inputClick", params);
    }
    async inputSwipe(params) {
      await this._object.send("inputSwipe", params);
    }
    async inputDrag(params) {
      await this._object.send("inputDrag", params);
    }
    async screenshot(params) {
      return {
        binary: await this._object.screenshot()
      };
    }
    async shell(params) {
      return {
        result: await this._object.shell(params.command)
      };
    }
    async open(params, metadata) {
      const socket = await this._object.open(params.command);
      return {
        socket: new AndroidSocketDispatcher(this, socket)
      };
    }
    async installApk(params) {
      await this._object.installApk(params.file, {
        args: params.args
      });
    }
    async push(params) {
      await this._object.push(params.file, params.path, params.mode);
    }
    async launchBrowser(params) {
      const context = await this._object.launchBrowser(params.pkg, params);
      return {
        context: new _browserContextDispatcher.BrowserContextDispatcher(this, context)
      };
    }
    async close(params) {
      await this._object.close();
    }
    async setDefaultTimeoutNoReply(params) {
      this._object.setDefaultTimeout(params.timeout);
    }
    async connectToWebView(params) {
      return {
        context: new _browserContextDispatcher.BrowserContextDispatcher(this, await this._object.connectToWebView(params.socketName))
      };
    }
  }
  exports.AndroidDeviceDispatcher = AndroidDeviceDispatcher;

  class AndroidSocketDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, socket) {
      super(scope, socket, "AndroidSocket", {});
      this._type_AndroidSocket = true;
      this.addObjectListener("data", (data) => this._dispatchEvent("data", {
        data
      }));
      this.addObjectListener("close", () => {
        this._dispatchEvent("close");
        this._dispose();
      });
    }
    async write(params, metadata) {
      await this._object.write(params.data);
    }
    async close(params, metadata) {
      this._object.close();
    }
  }
  exports.AndroidSocketDispatcher = AndroidSocketDispatcher;
  var keyMap = new Map([["Unknown", 0], ["SoftLeft", 1], ["SoftRight", 2], ["Home", 3], ["Back", 4], ["Call", 5], ["EndCall", 6], ["0", 7], ["1", 8], ["2", 9], ["3", 10], ["4", 11], ["5", 12], ["6", 13], ["7", 14], ["8", 15], ["9", 16], ["Star", 17], ["*", 17], ["Pound", 18], ["#", 18], ["DialUp", 19], ["DialDown", 20], ["DialLeft", 21], ["DialRight", 22], ["DialCenter", 23], ["VolumeUp", 24], ["VolumeDown", 25], ["Power", 26], ["Camera", 27], ["Clear", 28], ["A", 29], ["B", 30], ["C", 31], ["D", 32], ["E", 33], ["F", 34], ["G", 35], ["H", 36], ["I", 37], ["J", 38], ["K", 39], ["L", 40], ["M", 41], ["N", 42], ["O", 43], ["P", 44], ["Q", 45], ["R", 46], ["S", 47], ["T", 48], ["U", 49], ["V", 50], ["W", 51], ["X", 52], ["Y", 53], ["Z", 54], ["Comma", 55], [",", 55], ["Period", 56], [".", 56], ["AltLeft", 57], ["AltRight", 58], ["ShiftLeft", 59], ["ShiftRight", 60], ["Tab", 61], ["\t", 61], ["Space", 62], [" ", 62], ["Sym", 63], ["Explorer", 64], ["Envelop", 65], ["Enter", 66], ["Del", 67], ["Grave", 68], ["Minus", 69], ["-", 69], ["Equals", 70], ["=", 70], ["LeftBracket", 71], ["(", 71], ["RightBracket", 72], [")", 72], ["Backslash", 73], ["\\", 73], ["Semicolon", 74], [";", 74], ["Apostrophe", 75], ["`", 75], ["Slash", 76], ["/", 76], ["At", 77], ["@", 77], ["Num", 78], ["HeadsetHook", 79], ["Focus", 80], ["Plus", 81], ["Menu", 82], ["Notification", 83], ["Search", 84], ["AppSwitch", 187], ["Assist", 219], ["Cut", 277], ["Copy", 278], ["Paste", 279]]);
});

// node_modules/playwright-core/lib/server/dispatchers/browserDispatcher.js
var require_browserDispatcher = __commonJS((exports) => {
  async function newContextForReuse(browser, scope, params, selectors, metadata) {
    const {
      context,
      needsReset
    } = await browser.newContextForReuse(params, metadata);
    if (needsReset) {
      const oldContextDispatcher = (0, _dispatcher.existingDispatcher)(context);
      if (oldContextDispatcher)
        oldContextDispatcher._dispose();
      await context.resetForReuse(metadata, params);
    }
    if (selectors)
      context.setSelectors(selectors);
    const contextDispatcher = new _browserContextDispatcher.BrowserContextDispatcher(scope, context);
    return {
      context: contextDispatcher
    };
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ConnectedBrowserDispatcher = exports.BrowserDispatcher = undefined;
  var _browser = require_browser5();
  var _browserContextDispatcher = require_browserContextDispatcher();
  var _cdpSessionDispatcher = require_cdpSessionDispatcher();
  var _dispatcher = require_dispatcher();
  var _browserContext = require_browserContext();
  var _selectors = require_selectors();
  var _artifactDispatcher = require_artifactDispatcher();

  class BrowserDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, browser) {
      super(scope, browser, "Browser", {
        version: browser.version(),
        name: browser.options.name
      });
      this._type_Browser = true;
      this.addObjectListener(_browser.Browser.Events.Disconnected, () => this._didClose());
    }
    _didClose() {
      this._dispatchEvent("close");
      this._dispose();
    }
    async newContext(params, metadata) {
      const context = await this._object.newContext(metadata, params);
      return {
        context: new _browserContextDispatcher.BrowserContextDispatcher(this, context)
      };
    }
    async newContextForReuse(params, metadata) {
      return await newContextForReuse(this._object, this, params, null, metadata);
    }
    async stopPendingOperations(params, metadata) {
      await this._object.stopPendingOperations(params.reason);
    }
    async close(params, metadata) {
      metadata.potentiallyClosesScope = true;
      await this._object.close(params);
    }
    async killForTests(_, metadata) {
      metadata.potentiallyClosesScope = true;
      await this._object.killForTests();
    }
    async defaultUserAgentForTest() {
      return {
        userAgent: this._object.userAgent()
      };
    }
    async newBrowserCDPSession() {
      if (!this._object.options.isChromium)
        throw new Error(`CDP session is only available in Chromium`);
      const crBrowser = this._object;
      return {
        session: new _cdpSessionDispatcher.CDPSessionDispatcher(this, await crBrowser.newBrowserCDPSession())
      };
    }
    async startTracing(params) {
      if (!this._object.options.isChromium)
        throw new Error(`Tracing is only available in Chromium`);
      const crBrowser = this._object;
      await crBrowser.startTracing(params.page ? params.page._object : undefined, params);
    }
    async stopTracing() {
      if (!this._object.options.isChromium)
        throw new Error(`Tracing is only available in Chromium`);
      const crBrowser = this._object;
      return {
        artifact: _artifactDispatcher.ArtifactDispatcher.from(this, await crBrowser.stopTracing())
      };
    }
  }
  exports.BrowserDispatcher = BrowserDispatcher;

  class ConnectedBrowserDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, browser) {
      super(scope, browser, "Browser", {
        version: browser.version(),
        name: browser.options.name
      });
      this._type_Browser = true;
      this._contexts = new Set;
      this.selectors = undefined;
      this.selectors = new _selectors.Selectors;
    }
    async newContext(params, metadata) {
      if (params.recordVideo)
        params.recordVideo.dir = this._object.options.artifactsDir;
      const context = await this._object.newContext(metadata, params);
      this._contexts.add(context);
      context.setSelectors(this.selectors);
      context.on(_browserContext.BrowserContext.Events.Close, () => this._contexts.delete(context));
      return {
        context: new _browserContextDispatcher.BrowserContextDispatcher(this, context)
      };
    }
    async newContextForReuse(params, metadata) {
      return await newContextForReuse(this._object, this, params, this.selectors, metadata);
    }
    async stopPendingOperations(params, metadata) {
      await this._object.stopPendingOperations(params.reason);
    }
    async close() {
    }
    async killForTests() {
    }
    async defaultUserAgentForTest() {
      throw new Error("Client should not send us Browser.defaultUserAgentForTest");
    }
    async newBrowserCDPSession() {
      if (!this._object.options.isChromium)
        throw new Error(`CDP session is only available in Chromium`);
      const crBrowser = this._object;
      return {
        session: new _cdpSessionDispatcher.CDPSessionDispatcher(this, await crBrowser.newBrowserCDPSession())
      };
    }
    async startTracing(params) {
      if (!this._object.options.isChromium)
        throw new Error(`Tracing is only available in Chromium`);
      const crBrowser = this._object;
      await crBrowser.startTracing(params.page ? params.page._object : undefined, params);
    }
    async stopTracing() {
      if (!this._object.options.isChromium)
        throw new Error(`Tracing is only available in Chromium`);
      const crBrowser = this._object;
      return {
        artifact: _artifactDispatcher.ArtifactDispatcher.from(this, await crBrowser.stopTracing())
      };
    }
    async cleanupContexts() {
      await Promise.all(Array.from(this._contexts).map((context) => context.close({
        reason: "Global context cleanup (connection terminated)"
      })));
    }
  }
  exports.ConnectedBrowserDispatcher = ConnectedBrowserDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/browserTypeDispatcher.js
var require_browserTypeDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BrowserTypeDispatcher = undefined;
  var _browserDispatcher = require_browserDispatcher();
  var _dispatcher = require_dispatcher();
  var _browserContextDispatcher = require_browserContextDispatcher();

  class BrowserTypeDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, browserType) {
      super(scope, browserType, "BrowserType", {
        executablePath: browserType.executablePath(),
        name: browserType.name()
      });
      this._type_BrowserType = true;
    }
    async launch(params, metadata) {
      const browser = await this._object.launch(metadata, params);
      return {
        browser: new _browserDispatcher.BrowserDispatcher(this, browser)
      };
    }
    async launchPersistentContext(params, metadata) {
      const browserContext = await this._object.launchPersistentContext(metadata, params.userDataDir, params);
      return {
        context: new _browserContextDispatcher.BrowserContextDispatcher(this, browserContext)
      };
    }
    async connectOverCDP(params, metadata) {
      const browser = await this._object.connectOverCDP(metadata, params.endpointURL, params, params.timeout);
      const browserDispatcher = new _browserDispatcher.BrowserDispatcher(this, browser);
      return {
        browser: browserDispatcher,
        defaultContext: browser._defaultContext ? new _browserContextDispatcher.BrowserContextDispatcher(browserDispatcher, browser._defaultContext) : undefined
      };
    }
  }
  exports.BrowserTypeDispatcher = BrowserTypeDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/electronDispatcher.js
var require_electronDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ElectronDispatcher = exports.ElectronApplicationDispatcher = undefined;
  var _dispatcher = require_dispatcher();
  var _electron = require_electron2();
  var _browserContextDispatcher = require_browserContextDispatcher();
  var _jsHandleDispatcher = require_jsHandleDispatcher();
  var _elementHandlerDispatcher = require_elementHandlerDispatcher();

  class ElectronDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, electron) {
      super(scope, electron, "Electron", {});
      this._type_Electron = true;
    }
    async launch(params) {
      const electronApplication = await this._object.launch(params);
      return {
        electronApplication: new ElectronApplicationDispatcher(this, electronApplication)
      };
    }
  }
  exports.ElectronDispatcher = ElectronDispatcher;

  class ElectronApplicationDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, electronApplication) {
      super(scope, electronApplication, "ElectronApplication", {
        context: new _browserContextDispatcher.BrowserContextDispatcher(scope, electronApplication.context())
      });
      this._type_EventTarget = true;
      this._type_ElectronApplication = true;
      this._subscriptions = new Set;
      this.addObjectListener(_electron.ElectronApplication.Events.Close, () => {
        this._dispatchEvent("close");
        this._dispose();
      });
      this.addObjectListener(_electron.ElectronApplication.Events.Console, (message) => {
        if (!this._subscriptions.has("console"))
          return;
        this._dispatchEvent("console", {
          type: message.type(),
          text: message.text(),
          args: message.args().map((a) => _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, a)),
          location: message.location()
        });
      });
    }
    async browserWindow(params) {
      const handle = await this._object.browserWindow(params.page.page());
      return {
        handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, handle)
      };
    }
    async evaluateExpression(params) {
      const handle = await this._object._nodeElectronHandlePromise;
      return {
        value: (0, _jsHandleDispatcher.serializeResult)(await handle.evaluateExpression(params.expression, {
          isFunction: params.isFunction
        }, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async evaluateExpressionHandle(params) {
      const handle = await this._object._nodeElectronHandlePromise;
      const result = await handle.evaluateExpressionHandle(params.expression, {
        isFunction: params.isFunction
      }, (0, _jsHandleDispatcher.parseArgument)(params.arg));
      return {
        handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, result)
      };
    }
    async updateSubscription(params) {
      if (params.enabled)
        this._subscriptions.add(params.event);
      else
        this._subscriptions.delete(params.event);
    }
    async close() {
      await this._object.close();
    }
  }
  exports.ElectronApplicationDispatcher = ElectronApplicationDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/jsonPipeDispatcher.js
var require_jsonPipeDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.JsonPipeDispatcher = undefined;
  var _dispatcher = require_dispatcher();
  var _utils = require_utils3();
  var _errors = require_errors();

  class JsonPipeDispatcher extends _dispatcher.Dispatcher {
    constructor(scope) {
      super(scope, {
        guid: "jsonPipe@" + (0, _utils.createGuid)()
      }, "JsonPipe", {});
      this._type_JsonPipe = true;
    }
    async send(params) {
      this.emit("message", params.message);
    }
    async close() {
      this.emit("close");
      if (!this._disposed) {
        this._dispatchEvent("closed", {});
        this._dispose();
      }
    }
    dispatch(message) {
      if (!this._disposed)
        this._dispatchEvent("message", {
          message
        });
    }
    wasClosed(error) {
      if (!this._disposed) {
        const params = error ? {
          error: (0, _errors.serializeError)(error)
        } : {};
        this._dispatchEvent("closed", params);
        this._dispose();
      }
    }
    dispose() {
      this._dispose();
    }
  }
  exports.JsonPipeDispatcher = JsonPipeDispatcher;
});

// node_modules/playwright-core/lib/server/socksInterceptor.js
var require_socksInterceptor = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var tChannelForSocks = function(names, arg, path, context) {
    throw new _validator.ValidationError(`${path}: channels are not expected in SocksSupport`);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SocksInterceptor = undefined;
  var socks = _interopRequireWildcard(require_socksProxy());
  var _events = _interopRequireDefault(import.meta.require("events"));
  var _validator = require_validator();

  class SocksInterceptor {
    constructor(transport, pattern, redirectPortForTest) {
      this._handler = undefined;
      this._channel = undefined;
      this._socksSupportObjectGuid = undefined;
      this._ids = new Set;
      this._handler = new socks.SocksProxyHandler(pattern, redirectPortForTest);
      let lastId = -1;
      this._channel = new Proxy(new _events.default, {
        get: (obj, prop) => {
          if (prop in obj || obj[prop] !== undefined || typeof prop !== "string")
            return obj[prop];
          return (params) => {
            try {
              const id = --lastId;
              this._ids.add(id);
              const validator = (0, _validator.findValidator)("SocksSupport", prop, "Params");
              params = validator(params, "", {
                tChannelImpl: tChannelForSocks,
                binary: "toBase64"
              });
              transport.send({
                id,
                guid: this._socksSupportObjectGuid,
                method: prop,
                params,
                metadata: {
                  stack: [],
                  apiName: "",
                  internal: true
                }
              });
            } catch (e) {
            }
          };
        }
      });
      this._handler.on(socks.SocksProxyHandler.Events.SocksConnected, (payload) => this._channel.socksConnected(payload));
      this._handler.on(socks.SocksProxyHandler.Events.SocksData, (payload) => this._channel.socksData(payload));
      this._handler.on(socks.SocksProxyHandler.Events.SocksError, (payload) => this._channel.socksError(payload));
      this._handler.on(socks.SocksProxyHandler.Events.SocksFailed, (payload) => this._channel.socksFailed(payload));
      this._handler.on(socks.SocksProxyHandler.Events.SocksEnd, (payload) => this._channel.socksEnd(payload));
      this._channel.on("socksRequested", (payload) => this._handler.socketRequested(payload));
      this._channel.on("socksClosed", (payload) => this._handler.socketClosed(payload));
      this._channel.on("socksData", (payload) => this._handler.sendSocketData(payload));
    }
    cleanup() {
      this._handler.cleanup();
    }
    interceptMessage(message) {
      if (this._ids.has(message.id)) {
        this._ids.delete(message.id);
        return true;
      }
      if (message.method === "__create__" && message.params.type === "SocksSupport") {
        this._socksSupportObjectGuid = message.params.guid;
        return false;
      }
      if (this._socksSupportObjectGuid && message.guid === this._socksSupportObjectGuid) {
        const validator = (0, _validator.findValidator)("SocksSupport", message.method, "Event");
        const params = validator(message.params, "", {
          tChannelImpl: tChannelForSocks,
          binary: "fromBase64"
        });
        this._channel.emit(message.method, params);
        return true;
      }
      return false;
    }
  }
  exports.SocksInterceptor = SocksInterceptor;
});

// node_modules/playwright-core/lib/server/dispatchers/localUtilsDispatcher.js
var require_localUtilsDispatcher = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var countMatchingHeaders = function(harHeaders, headers) {
    const set = new Set(headers.map((h) => h.name.toLowerCase() + ":" + h.value));
    let matches = 0;
    for (const h of harHeaders) {
      if (set.has(h.name.toLowerCase() + ":" + h.value))
        ++matches;
    }
    return matches;
  };
  async function urlToWSEndpoint(progress2, endpointURL) {
    var _progress$timeUntilDe;
    if (endpointURL.startsWith("ws"))
      return endpointURL;
    progress2 === null || progress2 === undefined || progress2.log(`<ws preparing> retrieving websocket url from ${endpointURL}`);
    const fetchUrl = new URL(endpointURL);
    if (!fetchUrl.pathname.endsWith("/"))
      fetchUrl.pathname += "/";
    fetchUrl.pathname += "json";
    const json = await (0, _network.fetchData)({
      url: fetchUrl.toString(),
      method: "GET",
      timeout: (_progress$timeUntilDe = progress2 === null || progress2 === undefined ? undefined : progress2.timeUntilDeadline()) !== null && _progress$timeUntilDe !== undefined ? _progress$timeUntilDe : 30000,
      headers: {
        "User-Agent": (0, _userAgent.getUserAgent)()
      }
    }, async (params, response) => {
      return new Error(`Unexpected status ${response.statusCode} when connecting to ${fetchUrl.toString()}.\n` + `This does not look like a Playwright server, try connecting via ws://.`);
    });
    progress2 === null || progress2 === undefined || progress2.throwIfAborted();
    const wsUrl = new URL(endpointURL);
    let wsEndpointPath = JSON.parse(json).wsEndpointPath;
    if (wsEndpointPath.startsWith("/"))
      wsEndpointPath = wsEndpointPath.substring(1);
    if (!wsUrl.pathname.endsWith("/"))
      wsUrl.pathname += "/";
    wsUrl.pathname += wsEndpointPath;
    wsUrl.protocol = wsUrl.protocol === "https:" ? "wss:" : "ws:";
    return wsUrl.toString();
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.LocalUtilsDispatcher = undefined;
  exports.urlToWSEndpoint = urlToWSEndpoint;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _os = _interopRequireDefault(import.meta.require("os"));
  var _manualPromise = require_manualPromise();
  var _utils = require_utils3();
  var _dispatcher = require_dispatcher();
  var _zipBundle = require_zipBundle();
  var _zipFile = require_zipFile();
  var _jsonPipeDispatcher = require_jsonPipeDispatcher();
  var _transport = require_transport2();
  var _socksInterceptor = require_socksInterceptor();
  var _userAgent = require_userAgent();
  var _progress = require_progress();
  var _network = require_network();
  var _instrumentation = require_instrumentation();

  class LocalUtilsDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, playwright) {
      const localUtils = new _instrumentation.SdkObject(playwright, "localUtils", "localUtils");
      const descriptors = require_deviceDescriptorsSource();
      const deviceDescriptors = Object.entries(descriptors).map(([name, descriptor]) => ({
        name,
        descriptor
      }));
      super(scope, localUtils, "LocalUtils", {
        deviceDescriptors
      });
      this._type_LocalUtils = undefined;
      this._harBackends = new Map;
      this._stackSessions = new Map;
      this._type_LocalUtils = true;
    }
    async zip(params) {
      const promise = new _manualPromise.ManualPromise;
      const zipFile = new _zipBundle.yazl.ZipFile;
      zipFile.on("error", (error) => promise.reject(error));
      const addFile = (file, name) => {
        try {
          if (_fs.default.statSync(file).isFile())
            zipFile.addFile(file, name);
        } catch (e) {
        }
      };
      for (const entry of params.entries)
        addFile(entry.value, entry.name);
      const stackSession = params.stacksId ? this._stackSessions.get(params.stacksId) : undefined;
      if (stackSession !== null && stackSession !== undefined && stackSession.callStacks.length) {
        await stackSession.writer;
        if (process.env.PW_LIVE_TRACE_STACKS) {
          zipFile.addFile(stackSession.file, "trace.stacks");
        } else {
          const buffer = Buffer.from(JSON.stringify((0, _utils.serializeClientSideCallMetadata)(stackSession.callStacks)));
          zipFile.addBuffer(buffer, "trace.stacks");
        }
      }
      if (params.includeSources) {
        const sourceFiles = new Set;
        for (const {
          stack
        } of (stackSession === null || stackSession === undefined ? undefined : stackSession.callStacks) || []) {
          if (!stack)
            continue;
          for (const {
            file
          } of stack)
            sourceFiles.add(file);
        }
        for (const sourceFile of sourceFiles)
          addFile(sourceFile, "resources/src@" + (0, _utils.calculateSha1)(sourceFile) + ".txt");
      }
      if (params.mode === "write") {
        await _fs.default.promises.mkdir(_path.default.dirname(params.zipFile), {
          recursive: true
        });
        zipFile.end(undefined, () => {
          zipFile.outputStream.pipe(_fs.default.createWriteStream(params.zipFile)).on("close", () => promise.resolve()).on("error", (error) => promise.reject(error));
        });
        await promise;
        await this._deleteStackSession(params.stacksId);
        return;
      }
      const tempFile = params.zipFile + ".tmp";
      await _fs.default.promises.rename(params.zipFile, tempFile);
      _zipBundle.yauzl.open(tempFile, (err, inZipFile) => {
        if (err) {
          promise.reject(err);
          return;
        }
        (0, _utils.assert)(inZipFile);
        let pendingEntries = inZipFile.entryCount;
        inZipFile.on("entry", (entry) => {
          inZipFile.openReadStream(entry, (err2, readStream) => {
            if (err2) {
              promise.reject(err2);
              return;
            }
            zipFile.addReadStream(readStream, entry.fileName);
            if (--pendingEntries === 0) {
              zipFile.end(undefined, () => {
                zipFile.outputStream.pipe(_fs.default.createWriteStream(params.zipFile)).on("close", () => {
                  _fs.default.promises.unlink(tempFile).then(() => {
                    promise.resolve();
                  }).catch((error) => promise.reject(error));
                });
              });
            }
          });
        });
      });
      await promise;
      await this._deleteStackSession(params.stacksId);
    }
    async harOpen(params, metadata) {
      let harBackend;
      if (params.file.endsWith(".zip")) {
        const zipFile = new _zipFile.ZipFile(params.file);
        const entryNames = await zipFile.entries();
        const harEntryName = entryNames.find((e) => e.endsWith(".har"));
        if (!harEntryName)
          return {
            error: "Specified archive does not have a .har file"
          };
        const har = await zipFile.read(harEntryName);
        const harFile = JSON.parse(har.toString());
        harBackend = new HarBackend(harFile, null, zipFile);
      } else {
        const harFile = JSON.parse(await _fs.default.promises.readFile(params.file, "utf-8"));
        harBackend = new HarBackend(harFile, _path.default.dirname(params.file), null);
      }
      this._harBackends.set(harBackend.id, harBackend);
      return {
        harId: harBackend.id
      };
    }
    async harLookup(params, metadata) {
      const harBackend = this._harBackends.get(params.harId);
      if (!harBackend)
        return {
          action: "error",
          message: `Internal error: har was not opened`
        };
      return await harBackend.lookup(params.url, params.method, params.headers, params.postData, params.isNavigationRequest);
    }
    async harClose(params, metadata) {
      const harBackend = this._harBackends.get(params.harId);
      if (harBackend) {
        this._harBackends.delete(harBackend.id);
        harBackend.dispose();
      }
    }
    async harUnzip(params, metadata) {
      const dir = _path.default.dirname(params.zipFile);
      const zipFile = new _zipFile.ZipFile(params.zipFile);
      for (const entry of await zipFile.entries()) {
        const buffer = await zipFile.read(entry);
        if (entry === "har.har")
          await _fs.default.promises.writeFile(params.harFile, buffer);
        else
          await _fs.default.promises.writeFile(_path.default.join(dir, entry), buffer);
      }
      zipFile.close();
      await _fs.default.promises.unlink(params.zipFile);
    }
    async connect(params, metadata) {
      const controller = new _progress.ProgressController(metadata, this._object);
      controller.setLogName("browser");
      return await controller.run(async (progress2) => {
        var _params$exposeNetwork;
        const wsHeaders = {
          "User-Agent": (0, _userAgent.getUserAgent)(),
          "x-playwright-proxy": (_params$exposeNetwork = params.exposeNetwork) !== null && _params$exposeNetwork !== undefined ? _params$exposeNetwork : "",
          ...params.headers
        };
        const wsEndpoint = await urlToWSEndpoint(progress2, params.wsEndpoint);
        const transport = await _transport.WebSocketTransport.connect(progress2, wsEndpoint, wsHeaders, true, "x-playwright-debug-log");
        const socksInterceptor = new _socksInterceptor.SocksInterceptor(transport, params.exposeNetwork, params.socksProxyRedirectPortForTest);
        const pipe = new _jsonPipeDispatcher.JsonPipeDispatcher(this);
        transport.onmessage = (json) => {
          if (socksInterceptor.interceptMessage(json))
            return;
          const cb = () => {
            try {
              pipe.dispatch(json);
            } catch (e) {
              transport.close();
            }
          };
          if (params.slowMo)
            setTimeout(cb, params.slowMo);
          else
            cb();
        };
        pipe.on("message", (message) => {
          transport.send(message);
        });
        transport.onclose = () => {
          socksInterceptor === null || socksInterceptor === undefined || socksInterceptor.cleanup();
          pipe.wasClosed();
        };
        pipe.on("close", () => transport.close());
        return {
          pipe,
          headers: transport.headers
        };
      }, params.timeout || 0);
    }
    async tracingStarted(params, metadata) {
      let tmpDir = undefined;
      if (!params.tracesDir)
        tmpDir = await _fs.default.promises.mkdtemp(_path.default.join(_os.default.tmpdir(), "playwright-tracing-"));
      const traceStacksFile = _path.default.join(params.tracesDir || tmpDir, params.traceName + ".stacks");
      this._stackSessions.set(traceStacksFile, {
        callStacks: [],
        file: traceStacksFile,
        writer: Promise.resolve(),
        tmpDir
      });
      return {
        stacksId: traceStacksFile
      };
    }
    async traceDiscarded(params, metadata) {
      await this._deleteStackSession(params.stacksId);
    }
    async addStackToTracingNoReply(params, metadata) {
      for (const session of this._stackSessions.values()) {
        session.callStacks.push(params.callData);
        if (process.env.PW_LIVE_TRACE_STACKS) {
          session.writer = session.writer.then(() => {
            const buffer = Buffer.from(JSON.stringify((0, _utils.serializeClientSideCallMetadata)(session.callStacks)));
            return _fs.default.promises.writeFile(session.file, buffer);
          });
        }
      }
    }
    async _deleteStackSession(stacksId) {
      const session = stacksId ? this._stackSessions.get(stacksId) : undefined;
      if (!session)
        return;
      await session.writer;
      if (session.tmpDir)
        await (0, _utils.removeFolders)([session.tmpDir]);
      this._stackSessions.delete(stacksId);
    }
  }
  exports.LocalUtilsDispatcher = LocalUtilsDispatcher;
  var redirectStatus = [301, 302, 303, 307, 308];

  class HarBackend {
    constructor(harFile, baseDir, zipFile) {
      this.id = (0, _utils.createGuid)();
      this._harFile = undefined;
      this._zipFile = undefined;
      this._baseDir = undefined;
      this._harFile = harFile;
      this._baseDir = baseDir;
      this._zipFile = zipFile;
    }
    async lookup(url, method, headers, postData, isNavigationRequest) {
      let entry;
      try {
        entry = await this._harFindResponse(url, method, headers, postData);
      } catch (e) {
        return {
          action: "error",
          message: "HAR error: " + e.message
        };
      }
      if (!entry)
        return {
          action: "noentry"
        };
      if (entry.request.url !== url && isNavigationRequest)
        return {
          action: "redirect",
          redirectURL: entry.request.url
        };
      const response = entry.response;
      try {
        const buffer = await this._loadContent(response.content);
        return {
          action: "fulfill",
          status: response.status,
          headers: response.headers,
          body: buffer
        };
      } catch (e) {
        return {
          action: "error",
          message: e.message
        };
      }
    }
    async _loadContent(content) {
      const file = content._file;
      let buffer;
      if (file) {
        if (this._zipFile)
          buffer = await this._zipFile.read(file);
        else
          buffer = await _fs.default.promises.readFile(_path.default.resolve(this._baseDir, file));
      } else {
        buffer = Buffer.from(content.text || "", content.encoding === "base64" ? "base64" : "utf-8");
      }
      return buffer;
    }
    async _harFindResponse(url, method, headers, postData) {
      const harLog = this._harFile.log;
      const visited = new Set;
      while (true) {
        const entries = [];
        for (const candidate of harLog.entries) {
          if (candidate.request.url !== url || candidate.request.method !== method)
            continue;
          if (method === "POST" && postData && candidate.request.postData) {
            const buffer = await this._loadContent(candidate.request.postData);
            if (!buffer.equals(postData))
              continue;
          }
          entries.push(candidate);
        }
        if (!entries.length)
          return;
        let entry = entries[0];
        if (entries.length > 1) {
          const list = [];
          for (const candidate of entries) {
            const matchingHeaders = countMatchingHeaders(candidate.request.headers, headers);
            list.push({
              candidate,
              matchingHeaders
            });
          }
          list.sort((a, b) => b.matchingHeaders - a.matchingHeaders);
          entry = list[0].candidate;
        }
        if (visited.has(entry))
          throw new Error(`Found redirect cycle for ${url}`);
        visited.add(entry);
        const locationHeader = entry.response.headers.find((h) => h.name.toLowerCase() === "location");
        if (redirectStatus.includes(entry.response.status) && locationHeader) {
          const locationURL = new URL(locationHeader.value, url);
          url = locationURL.toString();
          if ((entry.response.status === 301 || entry.response.status === 302) && method === "POST" || entry.response.status === 303 && !["GET", "HEAD"].includes(method)) {
            method = "GET";
          }
          continue;
        }
        return entry;
      }
    }
    dispose() {
      var _this$_zipFile;
      (_this$_zipFile = this._zipFile) === null || _this$_zipFile === undefined || _this$_zipFile.close();
    }
  }
});

// node_modules/playwright-core/lib/server/dispatchers/selectorsDispatcher.js
var require_selectorsDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SelectorsDispatcher = undefined;
  var _dispatcher = require_dispatcher();

  class SelectorsDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, selectors) {
      super(scope, selectors, "Selectors", {});
      this._type_Selectors = true;
    }
    async register(params) {
      await this._object.register(params.name, params.source, params.contentScript);
    }
    async setTestIdAttributeName(params) {
      this._object.setTestIdAttributeName(params.testIdAttributeName);
    }
  }
  exports.SelectorsDispatcher = SelectorsDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/playwrightDispatcher.js
var require_playwrightDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PlaywrightDispatcher = undefined;
  var _fetch = require_fetch();
  var _socksProxy = require_socksProxy();
  var _androidDispatcher = require_androidDispatcher();
  var _browserTypeDispatcher = require_browserTypeDispatcher();
  var _dispatcher = require_dispatcher();
  var _electronDispatcher = require_electronDispatcher();
  var _localUtilsDispatcher = require_localUtilsDispatcher();
  var _networkDispatchers = require_networkDispatchers();
  var _selectorsDispatcher = require_selectorsDispatcher();
  var _browserDispatcher = require_browserDispatcher();
  var _utils = require_utils3();
  var _eventsHelper = require_eventsHelper();

  class PlaywrightDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, playwright, socksProxy, preLaunchedBrowser, prelaunchedAndroidDevice) {
      const browserDispatcher = preLaunchedBrowser ? new _browserDispatcher.ConnectedBrowserDispatcher(scope, preLaunchedBrowser) : undefined;
      const android = new _androidDispatcher.AndroidDispatcher(scope, playwright.android);
      const prelaunchedAndroidDeviceDispatcher = prelaunchedAndroidDevice ? new _androidDispatcher.AndroidDeviceDispatcher(android, prelaunchedAndroidDevice) : undefined;
      super(scope, playwright, "Playwright", {
        chromium: new _browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright.chromium),
        firefox: new _browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright.firefox),
        webkit: new _browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright.webkit),
        android,
        electron: new _electronDispatcher.ElectronDispatcher(scope, playwright.electron),
        utils: playwright.options.isServer ? undefined : new _localUtilsDispatcher.LocalUtilsDispatcher(scope, playwright),
        selectors: new _selectorsDispatcher.SelectorsDispatcher(scope, (browserDispatcher === null || browserDispatcher === undefined ? undefined : browserDispatcher.selectors) || playwright.selectors),
        preLaunchedBrowser: browserDispatcher,
        preConnectedAndroidDevice: prelaunchedAndroidDeviceDispatcher,
        socksSupport: socksProxy ? new SocksSupportDispatcher(scope, socksProxy) : undefined
      });
      this._type_Playwright = undefined;
      this._browserDispatcher = undefined;
      this._type_Playwright = true;
      this._browserDispatcher = browserDispatcher;
    }
    async newRequest(params) {
      const request = new _fetch.GlobalAPIRequestContext(this._object, params);
      return {
        request: _networkDispatchers.APIRequestContextDispatcher.from(this.parentScope(), request)
      };
    }
    async cleanup() {
      var _this$_browserDispatc;
      await ((_this$_browserDispatc = this._browserDispatcher) === null || _this$_browserDispatc === undefined ? undefined : _this$_browserDispatc.cleanupContexts());
    }
  }
  exports.PlaywrightDispatcher = PlaywrightDispatcher;

  class SocksSupportDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, socksProxy) {
      super(scope, {
        guid: "socksSupport@" + (0, _utils.createGuid)()
      }, "SocksSupport", {});
      this._type_SocksSupport = undefined;
      this._socksProxy = undefined;
      this._socksListeners = undefined;
      this._type_SocksSupport = true;
      this._socksProxy = socksProxy;
      this._socksListeners = [_eventsHelper.eventsHelper.addEventListener(socksProxy, _socksProxy.SocksProxy.Events.SocksRequested, (payload) => this._dispatchEvent("socksRequested", payload)), _eventsHelper.eventsHelper.addEventListener(socksProxy, _socksProxy.SocksProxy.Events.SocksData, (payload) => this._dispatchEvent("socksData", payload)), _eventsHelper.eventsHelper.addEventListener(socksProxy, _socksProxy.SocksProxy.Events.SocksClosed, (payload) => this._dispatchEvent("socksClosed", payload))];
    }
    async socksConnected(params) {
      var _this$_socksProxy;
      (_this$_socksProxy = this._socksProxy) === null || _this$_socksProxy === undefined || _this$_socksProxy.socketConnected(params);
    }
    async socksFailed(params) {
      var _this$_socksProxy2;
      (_this$_socksProxy2 = this._socksProxy) === null || _this$_socksProxy2 === undefined || _this$_socksProxy2.socketFailed(params);
    }
    async socksData(params) {
      var _this$_socksProxy3;
      (_this$_socksProxy3 = this._socksProxy) === null || _this$_socksProxy3 === undefined || _this$_socksProxy3.sendSocketData(params);
    }
    async socksError(params) {
      var _this$_socksProxy4;
      (_this$_socksProxy4 = this._socksProxy) === null || _this$_socksProxy4 === undefined || _this$_socksProxy4.sendSocketError(params);
    }
    async socksEnd(params) {
      var _this$_socksProxy5;
      (_this$_socksProxy5 = this._socksProxy) === null || _this$_socksProxy5 === undefined || _this$_socksProxy5.sendSocketEnd(params);
    }
    _onDispose() {
      _eventsHelper.eventsHelper.removeEventListeners(this._socksListeners);
    }
  }
});

// node_modules/playwright-core/lib/server/trace/viewer/traceViewer.js
var require_traceViewer = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  async function startTraceViewerServer(traceUrls, options) {
    for (const traceUrl of traceUrls) {
      let traceFile = traceUrl;
      if (traceUrl.endsWith(".json"))
        traceFile = traceUrl.substring(0, traceUrl.length - ".json".length);
      if (!traceUrl.startsWith("http://") && !traceUrl.startsWith("https://") && !_fs.default.existsSync(traceFile) && !_fs.default.existsSync(traceFile + ".trace")) {
        console.error(`Trace file ${traceUrl} does not exist!`);
        (0, _utils.gracefullyProcessExitDoNotHang)(1);
      }
    }
    const server = new _httpServer.HttpServer;
    server.routePrefix("/trace", (request, response) => {
      const url2 = new URL("http://localhost" + request.url);
      const relativePath = url2.pathname.slice("/trace".length);
      if (relativePath.endsWith("/stall.js"))
        return true;
      if (relativePath.startsWith("/file")) {
        try {
          const filePath = url2.searchParams.get("path");
          if (_fs.default.existsSync(filePath))
            return server.serveFile(request, response, url2.searchParams.get("path"));
          if (filePath.endsWith(".json")) {
            const traceName = filePath.substring(0, filePath.length - ".json".length);
            response.statusCode = 200;
            response.setHeader("Content-Type", "application/json");
            response.end(JSON.stringify(traceDescriptor(traceName)));
            return true;
          }
        } catch (e) {
        }
        response.statusCode = 404;
        response.end();
        return true;
      }
      const absolutePath = _path.default.join(__dirname, "..", "..", "..", "vite", "traceViewer", ...relativePath.split("/"));
      return server.serveFile(request, response, absolutePath);
    });
    const params = traceUrls.map((t) => `trace=${encodeURIComponent(t)}`);
    const transport = (options === null || options === undefined ? undefined : options.transport) || (options !== null && options !== undefined && options.isServer ? new StdinServer : undefined);
    if (transport) {
      const guid = (0, _utils.createGuid)();
      params.push("ws=" + guid);
      const wss = new _utilsBundle.wsServer({
        server: server.server(),
        path: "/" + guid
      });
      wss.on("connection", (ws2) => {
        transport.sendEvent = (method, params2) => ws2.send(JSON.stringify({
          method,
          params: params2
        }));
        transport.close = () => ws2.close();
        ws2.on("message", async (message) => {
          const {
            id,
            method,
            params: params2
          } = JSON.parse(message);
          const result = await transport.dispatch(method, params2);
          ws2.send(JSON.stringify({
            id,
            result
          }));
        });
        ws2.on("close", () => transport.onclose());
        ws2.on("error", () => transport.onclose());
      });
    }
    if (options !== null && options !== undefined && options.isServer)
      params.push("isServer");
    if ((0, _utils.isUnderTest)())
      params.push("isUnderTest=true");
    const {
      host,
      port
    } = options || {};
    const url = await server.start({
      preferredPort: port,
      host
    });
    const {
      app
    } = options || {};
    const searchQuery = params.length ? "?" + params.join("&") : "";
    const urlPath = `/trace/${app || "index.html"}${searchQuery}`;
    server.routePath("/", (request, response) => {
      response.statusCode = 302;
      response.setHeader("Location", urlPath + request.url.substring(1));
      response.end();
      return true;
    });
    return {
      server,
      url
    };
  }
  async function openTraceViewerApp(traceUrls, browserName, options) {
    const {
      url
    } = await startTraceViewerServer(traceUrls, options);
    const traceViewerPlaywright = (0, _playwright.createPlaywright)({
      sdkLanguage: "javascript",
      isInternalPlaywright: true
    });
    const traceViewerBrowser = (0, _utils.isUnderTest)() ? "chromium" : browserName;
    const {
      context,
      page
    } = await (0, _launchApp.launchApp)(traceViewerPlaywright[traceViewerBrowser], {
      sdkLanguage: traceViewerPlaywright.options.sdkLanguage,
      windowSize: {
        width: 1280,
        height: 800
      },
      persistentContextOptions: {
        ...options === null || options === undefined ? undefined : options.persistentContextOptions,
        useWebSocket: (0, _utils.isUnderTest)(),
        headless: options === null || options === undefined ? undefined : options.headless
      }
    });
    const controller = new _progress.ProgressController((0, _instrumentation.serverSideCallMetadata)(), context._browser);
    await controller.run(async (progress2) => {
      await context._browser._defaultContext._loadDefaultContextAsIs(progress2);
    });
    if (process.env.PWTEST_PRINT_WS_ENDPOINT)
      process.stderr.write("DevTools listening on: " + context._browser.options.wsEndpoint + "\n");
    if (!(0, _utils.isUnderTest)())
      await (0, _launchApp.syncLocalStorageWithSettings)(page, "traceviewer");
    if ((0, _utils.isUnderTest)())
      page.on("close", () => context.close({
        reason: "Trace viewer closed"
      }).catch(() => {
      }));
    await page.mainFrame().goto((0, _instrumentation.serverSideCallMetadata)(), url);
    return page;
  }
  async function openTraceInBrowser(traceUrls, options) {
    const {
      url
    } = await startTraceViewerServer(traceUrls, options);
    console.log("\nListening on " + url);
    if (!(0, _utils.isUnderTest)())
      await (0, _utilsBundle.open)(url.replace("0.0.0.0", "localhost")).catch(() => {
      });
  }
  var traceDescriptor = function(traceName) {
    const result = {
      entries: []
    };
    const traceDir = _path.default.dirname(traceName);
    const traceFile = _path.default.basename(traceName);
    for (const name of _fs.default.readdirSync(traceDir)) {
      if (name.startsWith(traceFile))
        result.entries.push({
          name,
          path: _path.default.join(traceDir, name)
        });
    }
    const resourcesDir = _path.default.join(traceDir, "resources");
    if (_fs.default.existsSync(resourcesDir)) {
      for (const name of _fs.default.readdirSync(resourcesDir))
        result.entries.push({
          name: "resources/" + name,
          path: _path.default.join(resourcesDir, name)
        });
    }
    return result;
  };
  var __dirname = "/Users/hottin/project/jwave_playlist/node_modules/playwright-core/lib/server/trace/viewer";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.openTraceInBrowser = openTraceInBrowser;
  exports.openTraceViewerApp = openTraceViewerApp;
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _httpServer = require_httpServer();
  var _utils = require_utils3();
  var _launchApp = require_launchApp();
  var _instrumentation = require_instrumentation();
  var _playwright = require_playwright();
  var _progress = require_progress();
  var _utilsBundle = require_utilsBundle();

  class StdinServer {
    constructor() {
      this._pollTimer = undefined;
      this._traceUrl = undefined;
      this.sendEvent = undefined;
      this.close = undefined;
      process.stdin.on("data", (data) => {
        const url = data.toString().trim();
        if (url === this._traceUrl)
          return;
        if (url.endsWith(".json"))
          this._pollLoadTrace(url);
        else
          this._loadTrace(url);
      });
      process.stdin.on("close", () => (0, _utils.gracefullyProcessExitDoNotHang)(0));
    }
    async dispatch(method, params) {
      if (method === "ready") {
        if (this._traceUrl)
          this._loadTrace(this._traceUrl);
      }
    }
    onclose() {
      (0, _utils.gracefullyProcessExitDoNotHang)(0);
    }
    _loadTrace(url) {
      var _this$sendEvent;
      this._traceUrl = url;
      clearTimeout(this._pollTimer);
      (_this$sendEvent = this.sendEvent) === null || _this$sendEvent === undefined || _this$sendEvent.call(this, "loadTrace", {
        url
      });
    }
    _pollLoadTrace(url) {
      this._loadTrace(url);
      this._pollTimer = setTimeout(() => {
        this._pollLoadTrace(url);
      }, 500);
    }
  }
});

// node_modules/playwright-core/lib/server/index.js
var require_server = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "DispatcherConnection", {
    enumerable: true,
    get: function() {
      return _dispatcher.DispatcherConnection;
    }
  });
  Object.defineProperty(exports, "PlaywrightDispatcher", {
    enumerable: true,
    get: function() {
      return _playwrightDispatcher.PlaywrightDispatcher;
    }
  });
  Object.defineProperty(exports, "Registry", {
    enumerable: true,
    get: function() {
      return _registry.Registry;
    }
  });
  Object.defineProperty(exports, "RootDispatcher", {
    enumerable: true,
    get: function() {
      return _dispatcher.RootDispatcher;
    }
  });
  Object.defineProperty(exports, "SocksProxy", {
    enumerable: true,
    get: function() {
      return _socksProxy.SocksProxy;
    }
  });
  Object.defineProperty(exports, "createPlaywright", {
    enumerable: true,
    get: function() {
      return _playwright.createPlaywright;
    }
  });
  Object.defineProperty(exports, "installBrowsersForNpmInstall", {
    enumerable: true,
    get: function() {
      return _registry.installBrowsersForNpmInstall;
    }
  });
  Object.defineProperty(exports, "installDefaultBrowsersForNpmInstall", {
    enumerable: true,
    get: function() {
      return _registry.installDefaultBrowsersForNpmInstall;
    }
  });
  Object.defineProperty(exports, "openTraceInBrowser", {
    enumerable: true,
    get: function() {
      return _traceViewer.openTraceInBrowser;
    }
  });
  Object.defineProperty(exports, "openTraceViewerApp", {
    enumerable: true,
    get: function() {
      return _traceViewer.openTraceViewerApp;
    }
  });
  Object.defineProperty(exports, "registry", {
    enumerable: true,
    get: function() {
      return _registry.registry;
    }
  });
  Object.defineProperty(exports, "registryDirectory", {
    enumerable: true,
    get: function() {
      return _registry.registryDirectory;
    }
  });
  Object.defineProperty(exports, "serverSideCallMetadata", {
    enumerable: true,
    get: function() {
      return _instrumentation.serverSideCallMetadata;
    }
  });
  Object.defineProperty(exports, "writeDockerVersion", {
    enumerable: true,
    get: function() {
      return _registry.writeDockerVersion;
    }
  });
  var _registry = require_registry();
  var _dispatcher = require_dispatcher();
  var _playwrightDispatcher = require_playwrightDispatcher();
  var _playwright = require_playwright();
  var _traceViewer = require_traceViewer();
  var _instrumentation = require_instrumentation();
  var _socksProxy = require_socksProxy();
});

// node_modules/playwright-core/lib/client/errors.js
var require_errors2 = __commonJS((exports) => {
  var isTargetClosedError = function(error) {
    return error instanceof TargetClosedError;
  };
  var serializeError = function(e) {
    if ((0, _utils.isError)(e))
      return {
        error: {
          message: e.message,
          stack: e.stack,
          name: e.name
        }
      };
    return {
      value: (0, _serializers.serializeValue)(e, (value) => ({
        fallThrough: value
      }))
    };
  };
  var parseError = function(error) {
    if (!error.error) {
      if (error.value === undefined)
        throw new Error("Serialized error must have either an error or a value");
      return (0, _serializers.parseSerializedValue)(error.value, undefined);
    }
    if (error.error.name === "TimeoutError") {
      const e2 = new TimeoutError(error.error.message);
      e2.stack = error.error.stack || "";
      return e2;
    }
    if (error.error.name === "TargetClosedError") {
      const e2 = new TargetClosedError(error.error.message);
      e2.stack = error.error.stack || "";
      return e2;
    }
    const e = new Error(error.error.message);
    e.stack = error.error.stack || "";
    e.name = error.error.name;
    return e;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TimeoutError = exports.TargetClosedError = undefined;
  exports.isTargetClosedError = isTargetClosedError;
  exports.parseError = parseError;
  exports.serializeError = serializeError;
  var _utils = require_utils3();
  var _serializers = require_serializers();

  class TimeoutError extends Error {
    constructor(message) {
      super(message);
      this.name = "TimeoutError";
    }
  }
  exports.TimeoutError = TimeoutError;

  class TargetClosedError extends Error {
    constructor(cause) {
      super(cause || "Target page, context or browser has been closed");
    }
  }
  exports.TargetClosedError = TargetClosedError;
});

// node_modules/playwright-core/lib/client/accessibility.js
var require_accessibility2 = __commonJS((exports) => {
  var axNodeFromProtocol = function(axNode) {
    const result = {
      ...axNode,
      value: axNode.valueNumber !== undefined ? axNode.valueNumber : axNode.valueString,
      checked: axNode.checked === "checked" ? true : axNode.checked === "unchecked" ? false : axNode.checked,
      pressed: axNode.pressed === "pressed" ? true : axNode.pressed === "released" ? false : axNode.pressed,
      children: axNode.children ? axNode.children.map(axNodeFromProtocol) : undefined
    };
    delete result.valueNumber;
    delete result.valueString;
    return result;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Accessibility = undefined;

  class Accessibility {
    constructor(channel) {
      this._channel = undefined;
      this._channel = channel;
    }
    async snapshot(options = {}) {
      const root = options.root ? options.root._elementChannel : undefined;
      const result = await this._channel.accessibilitySnapshot({
        interestingOnly: options.interestingOnly,
        root
      });
      return result.rootAXNode ? axNodeFromProtocol(result.rootAXNode) : null;
    }
  }
  exports.Accessibility = Accessibility;
});

// node_modules/playwright-core/lib/client/channelOwner.js
var require_channelOwner = __commonJS((exports) => {
  var logApiCall = function(logger, message, isNested) {
    if (isNested)
      return;
    if (logger && logger.isEnabled("api", "info"))
      logger.log("api", "info", message, [], {
        color: "cyan"
      });
    _debugLogger.debugLogger.log("api", message);
  };
  var tChannelImplToWire = function(names, arg, path, context) {
    if (arg._object instanceof ChannelOwner && (names === "*" || names.includes(arg._object._type)))
      return {
        guid: arg._object._guid
      };
    throw new _validator.ValidationError(`${path}: expected channel ${names.toString()}`);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ChannelOwner = undefined;
  var _events = import.meta.require("events");
  var _validator = require_validator();
  var _debugLogger = require_debugLogger();
  var _stackTrace = require_stackTrace();
  var _utils = require_utils3();
  var _zones = require_zones();

  class ChannelOwner extends _events.EventEmitter {
    constructor(parent, type, guid, initializer) {
      super();
      this._connection = undefined;
      this._parent = undefined;
      this._objects = new Map;
      this._type = undefined;
      this._guid = undefined;
      this._channel = undefined;
      this._initializer = undefined;
      this._logger = undefined;
      this._instrumentation = undefined;
      this._eventToSubscriptionMapping = new Map;
      this._wasCollected = false;
      this.setMaxListeners(0);
      this._connection = parent instanceof ChannelOwner ? parent._connection : parent;
      this._type = type;
      this._guid = guid;
      this._parent = parent instanceof ChannelOwner ? parent : undefined;
      this._instrumentation = this._connection._instrumentation;
      this._connection._objects.set(guid, this);
      if (this._parent) {
        this._parent._objects.set(guid, this);
        this._logger = this._parent._logger;
      }
      this._channel = this._createChannel(new _events.EventEmitter);
      this._initializer = initializer;
    }
    _setEventToSubscriptionMapping(mapping) {
      this._eventToSubscriptionMapping = mapping;
    }
    _updateSubscription(event, enabled) {
      const protocolEvent = this._eventToSubscriptionMapping.get(String(event));
      if (protocolEvent) {
        this._wrapApiCall(async () => {
          await this._channel.updateSubscription({
            event: protocolEvent,
            enabled
          });
        }, true).catch(() => {
        });
      }
    }
    on(event, listener) {
      if (!this.listenerCount(event))
        this._updateSubscription(event, true);
      super.on(event, listener);
      return this;
    }
    addListener(event, listener) {
      if (!this.listenerCount(event))
        this._updateSubscription(event, true);
      super.addListener(event, listener);
      return this;
    }
    prependListener(event, listener) {
      if (!this.listenerCount(event))
        this._updateSubscription(event, true);
      super.prependListener(event, listener);
      return this;
    }
    off(event, listener) {
      super.off(event, listener);
      if (!this.listenerCount(event))
        this._updateSubscription(event, false);
      return this;
    }
    removeListener(event, listener) {
      super.removeListener(event, listener);
      if (!this.listenerCount(event))
        this._updateSubscription(event, false);
      return this;
    }
    _adopt(child) {
      child._parent._objects.delete(child._guid);
      this._objects.set(child._guid, child);
      child._parent = this;
    }
    _dispose(reason) {
      if (this._parent)
        this._parent._objects.delete(this._guid);
      this._connection._objects.delete(this._guid);
      this._wasCollected = reason === "gc";
      for (const object of [...this._objects.values()])
        object._dispose(reason);
      this._objects.clear();
    }
    _debugScopeState() {
      return {
        _guid: this._guid,
        objects: Array.from(this._objects.values()).map((o) => o._debugScopeState())
      };
    }
    _createChannel(base) {
      const channel = new Proxy(base, {
        get: (obj, prop) => {
          if (typeof prop === "string") {
            const validator = (0, _validator.maybeFindValidator)(this._type, prop, "Params");
            if (validator) {
              return async (params) => {
                return await this._wrapApiCall(async (apiZone) => {
                  const {
                    apiName,
                    frames,
                    csi,
                    callCookie,
                    wallTime
                  } = apiZone.reported ? {
                    apiName: undefined,
                    csi: undefined,
                    callCookie: undefined,
                    frames: [],
                    wallTime: undefined
                  } : apiZone;
                  apiZone.reported = true;
                  if (csi && apiName)
                    csi.onApiCallBegin(apiName, params, frames, wallTime, callCookie);
                  return await this._connection.sendMessageToServer(this, prop, validator(params, "", {
                    tChannelImpl: tChannelImplToWire,
                    binary: this._connection.rawBuffers() ? "buffer" : "toBase64"
                  }), apiName, frames, wallTime);
                });
              };
            }
          }
          return obj[prop];
        }
      });
      channel._object = this;
      return channel;
    }
    async _wrapApiCall(func, isInternal = false) {
      const logger = this._logger;
      const stack = (0, _stackTrace.captureRawStack)();
      const apiZone = _zones.zones.zoneData("apiZone", stack);
      if (apiZone)
        return await func(apiZone);
      const stackTrace = (0, _stackTrace.captureLibraryStackTrace)(stack);
      let apiName = stackTrace.apiName;
      const frames = stackTrace.frames;
      isInternal = isInternal || this._type === "LocalUtils";
      if (isInternal)
        apiName = undefined;
      const expectZone = _zones.zones.zoneData("expectZone", stack);
      const wallTime = expectZone ? expectZone.wallTime : Date.now();
      if (!isInternal && expectZone)
        apiName = expectZone.title;
      const csi = isInternal || expectZone ? undefined : this._instrumentation;
      const callCookie = {};
      try {
        logApiCall(logger, `=> ${apiName} started`, isInternal);
        const apiZone2 = {
          apiName,
          frames,
          isInternal,
          reported: false,
          csi,
          callCookie,
          wallTime
        };
        const result = await _zones.zones.run("apiZone", apiZone2, async () => {
          return await func(apiZone2);
        });
        csi === null || csi === undefined || csi.onApiCallEnd(callCookie);
        logApiCall(logger, `<= ${apiName} succeeded`, isInternal);
        return result;
      } catch (e) {
        const innerError = (process.env.PWDEBUGIMPL || (0, _utils.isUnderTest)()) && e.stack ? "\n<inner error>\n" + e.stack : "";
        if (apiName && !apiName.includes("<anonymous>"))
          e.message = apiName + ": " + e.message;
        const stackFrames = "\n" + (0, _stackTrace.stringifyStackFrames)(stackTrace.frames).join("\n") + innerError;
        if (stackFrames.trim())
          e.stack = e.message + stackFrames;
        else
          e.stack = "";
        csi === null || csi === undefined || csi.onApiCallEnd(callCookie, e);
        logApiCall(logger, `<= ${apiName} failed`, isInternal);
        throw e;
      }
    }
    _toImpl() {
      var _this$_connection$toI, _this$_connection;
      return (_this$_connection$toI = (_this$_connection = this._connection).toImpl) === null || _this$_connection$toI === undefined ? undefined : _this$_connection$toI.call(_this$_connection, this);
    }
    toJSON() {
      return {
        _type: this._type,
        _guid: this._guid
      };
    }
  }
  exports.ChannelOwner = ChannelOwner;
});

// node_modules/playwright-core/lib/client/stream.js
var require_stream = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Stream = undefined;
  var _stream = import.meta.require("stream");
  var _channelOwner = require_channelOwner();

  class Stream extends _channelOwner.ChannelOwner {
    static from(Stream2) {
      return Stream2._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
    }
    stream() {
      return new StreamImpl(this._channel);
    }
  }
  exports.Stream = Stream;

  class StreamImpl extends _stream.Readable {
    constructor(channel) {
      super();
      this._channel = undefined;
      this._channel = channel;
    }
    async _read() {
      const result = await this._channel.read({
        size: 1024 * 1024
      });
      if (result.binary.byteLength)
        this.push(result.binary);
      else
        this.push(null);
    }
    _destroy(error, callback) {
      this._channel.close().catch((e) => null);
      super._destroy(error, callback);
    }
  }
});

// node_modules/playwright-core/lib/client/artifact.js
var require_artifact2 = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Artifact = undefined;
  var fs = _interopRequireWildcard(import.meta.require("fs"));
  var _stream = require_stream();
  var _fileUtils = require_fileUtils();
  var _channelOwner = require_channelOwner();

  class Artifact extends _channelOwner.ChannelOwner {
    static from(channel) {
      return channel._object;
    }
    async pathAfterFinished() {
      if (this._connection.isRemote())
        throw new Error(`Path is not available when connecting remotely. Use saveAs() to save a local copy.`);
      return (await this._channel.pathAfterFinished()).value;
    }
    async saveAs(path) {
      if (!this._connection.isRemote()) {
        await this._channel.saveAs({
          path
        });
        return;
      }
      const result = await this._channel.saveAsStream();
      const stream = _stream.Stream.from(result.stream);
      await (0, _fileUtils.mkdirIfNeeded)(path);
      await new Promise((resolve, reject) => {
        stream.stream().pipe(fs.createWriteStream(path)).on("finish", resolve).on("error", reject);
      });
    }
    async failure() {
      return (await this._channel.failure()).error || null;
    }
    async createReadStream() {
      const result = await this._channel.stream();
      const stream = _stream.Stream.from(result.stream);
      return stream.stream();
    }
    async readIntoBuffer() {
      const stream = await this.createReadStream();
      return await new Promise((resolve, reject) => {
        const chunks = [];
        stream.on("data", (chunk) => {
          chunks.push(chunk);
        });
        stream.on("end", () => {
          resolve(Buffer.concat(chunks));
        });
        stream.on("error", reject);
      });
    }
    async cancel() {
      return await this._channel.cancel();
    }
    async delete() {
      return await this._channel.delete();
    }
  }
  exports.Artifact = Artifact;
});

// node_modules/playwright-core/lib/client/clientHelper.js
var require_clientHelper = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var envObjectToArray = function(env) {
    const result = [];
    for (const name in env) {
      if (!Object.is(env[name], undefined))
        result.push({
          name,
          value: String(env[name])
        });
    }
    return result;
  };
  async function evaluationScript(fun, arg, addSourceUrl = true) {
    if (typeof fun === "function") {
      const source = fun.toString();
      const argString = Object.is(arg, undefined) ? "undefined" : JSON.stringify(arg);
      return `(${source})(${argString})`;
    }
    if (arg !== undefined)
      throw new Error("Cannot evaluate a string with arguments");
    if ((0, _utils.isString)(fun))
      return fun;
    if (fun.content !== undefined)
      return fun.content;
    if (fun.path !== undefined) {
      let source = await _fs.default.promises.readFile(fun.path, "utf8");
      if (addSourceUrl)
        source = addSourceUrlToScript(source, fun.path);
      return source;
    }
    throw new Error("Either path or content property must be present");
  }
  var addSourceUrlToScript = function(source, path) {
    return `${source}\n//# sourceURL=${path.replace(/\n/g, "")}`;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.addSourceUrlToScript = addSourceUrlToScript;
  exports.envObjectToArray = envObjectToArray;
  exports.evaluationScript = evaluationScript;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _utils = require_utils3();
});

// node_modules/playwright-core/lib/client/coverage.js
var require_coverage = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Coverage = undefined;

  class Coverage {
    constructor(channel) {
      this._channel = undefined;
      this._channel = channel;
    }
    async startJSCoverage(options = {}) {
      await this._channel.startJSCoverage(options);
    }
    async stopJSCoverage() {
      return (await this._channel.stopJSCoverage()).entries;
    }
    async startCSSCoverage(options = {}) {
      await this._channel.startCSSCoverage(options);
    }
    async stopCSSCoverage() {
      return (await this._channel.stopCSSCoverage()).entries;
    }
  }
  exports.Coverage = Coverage;
});

// node_modules/playwright-core/lib/client/download.js
var require_download2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Download = undefined;

  class Download {
    constructor(page, url, suggestedFilename, artifact) {
      this._page = undefined;
      this._url = undefined;
      this._suggestedFilename = undefined;
      this._artifact = undefined;
      this._page = page;
      this._url = url;
      this._suggestedFilename = suggestedFilename;
      this._artifact = artifact;
    }
    page() {
      return this._page;
    }
    url() {
      return this._url;
    }
    suggestedFilename() {
      return this._suggestedFilename;
    }
    async path() {
      return await this._artifact.pathAfterFinished();
    }
    async saveAs(path) {
      return await this._artifact.saveAs(path);
    }
    async failure() {
      return await this._artifact.failure();
    }
    async createReadStream() {
      return await this._artifact.createReadStream();
    }
    async cancel() {
      return await this._artifact.cancel();
    }
    async delete() {
      return await this._artifact.delete();
    }
  }
  exports.Download = Download;
});

// node_modules/playwright-core/lib/client/jsHandle.js
var require_jsHandle = __commonJS((exports) => {
  var serializeArgument = function(arg) {
    const handles = [];
    const pushHandle = (channel) => {
      handles.push(channel);
      return handles.length - 1;
    };
    const value = (0, _serializers.serializeValue)(arg, (value2) => {
      if (value2 instanceof JSHandle)
        return {
          h: pushHandle(value2._channel)
        };
      return {
        fallThrough: value2
      };
    });
    return {
      value,
      handles
    };
  };
  var parseResult = function(value) {
    return (0, _serializers.parseSerializedValue)(value, undefined);
  };
  var assertMaxArguments = function(count, max) {
    if (count > max)
      throw new Error("Too many arguments. If you need to pass more than 1 argument to the function wrap them in an object.");
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.JSHandle = undefined;
  exports.assertMaxArguments = assertMaxArguments;
  exports.parseResult = parseResult;
  exports.serializeArgument = serializeArgument;
  var _channelOwner = require_channelOwner();
  var _serializers = require_serializers();
  var _Symbol$asyncDispose;
  _Symbol$asyncDispose = Symbol.asyncDispose;

  class JSHandle extends _channelOwner.ChannelOwner {
    static from(handle) {
      return handle._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._preview = undefined;
      this._preview = this._initializer.preview;
      this._channel.on("previewUpdated", ({
        preview
      }) => this._preview = preview);
    }
    async evaluate(pageFunction, arg) {
      const result = await this._channel.evaluateExpression({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: serializeArgument(arg)
      });
      return parseResult(result.value);
    }
    async evaluateHandle(pageFunction, arg) {
      const result = await this._channel.evaluateExpressionHandle({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: serializeArgument(arg)
      });
      return JSHandle.from(result.handle);
    }
    async getProperty(propertyName) {
      const result = await this._channel.getProperty({
        name: propertyName
      });
      return JSHandle.from(result.handle);
    }
    async getProperties() {
      const map = new Map;
      for (const {
        name,
        value
      } of (await this._channel.getPropertyList()).properties)
        map.set(name, JSHandle.from(value));
      return map;
    }
    async jsonValue() {
      return parseResult((await this._channel.jsonValue()).value);
    }
    asElement() {
      return null;
    }
    async[_Symbol$asyncDispose]() {
      await this.dispose();
    }
    async dispose() {
      return await this._channel.dispose();
    }
    async _objectCount() {
      return await this._wrapApiCall(async () => {
        const {
          count
        } = await this._channel.objectCount();
        return count;
      });
    }
    toString() {
      return this._preview;
    }
  }
  exports.JSHandle = JSHandle;
});

// node_modules/playwright-core/lib/utils/isomorphic/locatorUtils.js
var require_locatorUtils = __commonJS((exports) => {
  var getByAttributeTextSelector = function(attrName, text, options) {
    return `internal:attr=[${attrName}=${(0, _stringUtils.escapeForAttributeSelector)(text, (options === null || options === undefined ? undefined : options.exact) || false)}]`;
  };
  var getByTestIdSelector = function(testIdAttributeName, testId) {
    return `internal:testid=[${testIdAttributeName}=${(0, _stringUtils.escapeForAttributeSelector)(testId, true)}]`;
  };
  var getByLabelSelector = function(text, options) {
    return "internal:label=" + (0, _stringUtils.escapeForTextSelector)(text, !!(options !== null && options !== undefined && options.exact));
  };
  var getByAltTextSelector = function(text, options) {
    return getByAttributeTextSelector("alt", text, options);
  };
  var getByTitleSelector = function(text, options) {
    return getByAttributeTextSelector("title", text, options);
  };
  var getByPlaceholderSelector = function(text, options) {
    return getByAttributeTextSelector("placeholder", text, options);
  };
  var getByTextSelector = function(text, options) {
    return "internal:text=" + (0, _stringUtils.escapeForTextSelector)(text, !!(options !== null && options !== undefined && options.exact));
  };
  var getByRoleSelector = function(role, options = {}) {
    const props = [];
    if (options.checked !== undefined)
      props.push(["checked", String(options.checked)]);
    if (options.disabled !== undefined)
      props.push(["disabled", String(options.disabled)]);
    if (options.selected !== undefined)
      props.push(["selected", String(options.selected)]);
    if (options.expanded !== undefined)
      props.push(["expanded", String(options.expanded)]);
    if (options.includeHidden !== undefined)
      props.push(["include-hidden", String(options.includeHidden)]);
    if (options.level !== undefined)
      props.push(["level", String(options.level)]);
    if (options.name !== undefined)
      props.push(["name", (0, _stringUtils.escapeForAttributeSelector)(options.name, !!options.exact)]);
    if (options.pressed !== undefined)
      props.push(["pressed", String(options.pressed)]);
    return `internal:role=${role}${props.map(([n, v]) => `[${n}=${v}]`).join("")}`;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getByAltTextSelector = getByAltTextSelector;
  exports.getByLabelSelector = getByLabelSelector;
  exports.getByPlaceholderSelector = getByPlaceholderSelector;
  exports.getByRoleSelector = getByRoleSelector;
  exports.getByTestIdSelector = getByTestIdSelector;
  exports.getByTextSelector = getByTextSelector;
  exports.getByTitleSelector = getByTitleSelector;
  var _stringUtils = require_stringUtils();
});

// node_modules/playwright-core/lib/client/locator.js
var require_locator = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var testIdAttributeName = function() {
    return _testIdAttributeName;
  };
  var setTestIdAttribute = function(attributeName) {
    _testIdAttributeName = attributeName;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Locator = exports.FrameLocator = undefined;
  exports.setTestIdAttribute = setTestIdAttribute;
  exports.testIdAttributeName = testIdAttributeName;
  var util = _interopRequireWildcard(import.meta.require("util"));
  var _utils = require_utils3();
  var _elementHandle = require_elementHandle();
  var _jsHandle = require_jsHandle();
  var _stringUtils = require_stringUtils();
  var _locatorUtils = require_locatorUtils();
  var _util$inspect$custom;
  _util$inspect$custom = util.inspect.custom;

  class Locator {
    constructor(frame, selector, options) {
      this._frame = undefined;
      this._selector = undefined;
      this._frame = frame;
      this._selector = selector;
      if (options !== null && options !== undefined && options.hasText)
        this._selector += ` >> internal:has-text=${(0, _stringUtils.escapeForTextSelector)(options.hasText, false)}`;
      if (options !== null && options !== undefined && options.hasNotText)
        this._selector += ` >> internal:has-not-text=${(0, _stringUtils.escapeForTextSelector)(options.hasNotText, false)}`;
      if (options !== null && options !== undefined && options.has) {
        const locator = options.has;
        if (locator._frame !== frame)
          throw new Error(`Inner "has" locator must belong to the same frame.`);
        this._selector += ` >> internal:has=` + JSON.stringify(locator._selector);
      }
      if (options !== null && options !== undefined && options.hasNot) {
        const locator = options.hasNot;
        if (locator._frame !== frame)
          throw new Error(`Inner "hasNot" locator must belong to the same frame.`);
        this._selector += ` >> internal:has-not=` + JSON.stringify(locator._selector);
      }
    }
    async _withElement(task, timeout) {
      timeout = this._frame.page()._timeoutSettings.timeout({
        timeout
      });
      const deadline = timeout ? (0, _utils.monotonicTime)() + timeout : 0;
      return await this._frame._wrapApiCall(async () => {
        const result = await this._frame._channel.waitForSelector({
          selector: this._selector,
          strict: true,
          state: "attached",
          timeout
        });
        const handle = _elementHandle.ElementHandle.fromNullable(result.element);
        if (!handle)
          throw new Error(`Could not resolve ${this._selector} to DOM Element`);
        try {
          return await task(handle, deadline ? deadline - (0, _utils.monotonicTime)() : 0);
        } finally {
          await handle.dispose();
        }
      });
    }
    page() {
      return this._frame.page();
    }
    async boundingBox(options) {
      return await this._withElement((h) => h.boundingBox(), options === null || options === undefined ? undefined : options.timeout);
    }
    async check(options = {}) {
      return await this._frame.check(this._selector, {
        strict: true,
        ...options
      });
    }
    async click(options = {}) {
      return await this._frame.click(this._selector, {
        strict: true,
        ...options
      });
    }
    async dblclick(options = {}) {
      return await this._frame.dblclick(this._selector, {
        strict: true,
        ...options
      });
    }
    async dispatchEvent(type, eventInit = {}, options) {
      return await this._frame.dispatchEvent(this._selector, type, eventInit, {
        strict: true,
        ...options
      });
    }
    async dragTo(target, options = {}) {
      return await this._frame.dragAndDrop(this._selector, target._selector, {
        strict: true,
        ...options
      });
    }
    async evaluate(pageFunction, arg, options) {
      return await this._withElement((h) => h.evaluate(pageFunction, arg), options === null || options === undefined ? undefined : options.timeout);
    }
    async evaluateAll(pageFunction, arg) {
      return await this._frame.$$eval(this._selector, pageFunction, arg);
    }
    async evaluateHandle(pageFunction, arg, options) {
      return await this._withElement((h) => h.evaluateHandle(pageFunction, arg), options === null || options === undefined ? undefined : options.timeout);
    }
    async fill(value, options = {}) {
      return await this._frame.fill(this._selector, value, {
        strict: true,
        ...options
      });
    }
    async clear(options = {}) {
      return await this.fill("", options);
    }
    async _highlight() {
      return await this._frame._highlight(this._selector);
    }
    async highlight() {
      return await this._frame._highlight(this._selector);
    }
    locator(selectorOrLocator, options) {
      if ((0, _utils.isString)(selectorOrLocator))
        return new Locator(this._frame, this._selector + " >> " + selectorOrLocator, options);
      if (selectorOrLocator._frame !== this._frame)
        throw new Error(`Locators must belong to the same frame.`);
      return new Locator(this._frame, this._selector + " >> internal:chain=" + JSON.stringify(selectorOrLocator._selector), options);
    }
    getByTestId(testId) {
      return this.locator((0, _locatorUtils.getByTestIdSelector)(testIdAttributeName(), testId));
    }
    getByAltText(text, options) {
      return this.locator((0, _locatorUtils.getByAltTextSelector)(text, options));
    }
    getByLabel(text, options) {
      return this.locator((0, _locatorUtils.getByLabelSelector)(text, options));
    }
    getByPlaceholder(text, options) {
      return this.locator((0, _locatorUtils.getByPlaceholderSelector)(text, options));
    }
    getByText(text, options) {
      return this.locator((0, _locatorUtils.getByTextSelector)(text, options));
    }
    getByTitle(text, options) {
      return this.locator((0, _locatorUtils.getByTitleSelector)(text, options));
    }
    getByRole(role, options = {}) {
      return this.locator((0, _locatorUtils.getByRoleSelector)(role, options));
    }
    frameLocator(selector) {
      return new FrameLocator(this._frame, this._selector + " >> " + selector);
    }
    filter(options) {
      return new Locator(this._frame, this._selector, options);
    }
    async elementHandle(options) {
      return await this._frame.waitForSelector(this._selector, {
        strict: true,
        state: "attached",
        ...options
      });
    }
    async elementHandles() {
      return await this._frame.$$(this._selector);
    }
    first() {
      return new Locator(this._frame, this._selector + " >> nth=0");
    }
    last() {
      return new Locator(this._frame, this._selector + ` >> nth=-1`);
    }
    nth(index) {
      return new Locator(this._frame, this._selector + ` >> nth=${index}`);
    }
    and(locator) {
      if (locator._frame !== this._frame)
        throw new Error(`Locators must belong to the same frame.`);
      return new Locator(this._frame, this._selector + ` >> internal:and=` + JSON.stringify(locator._selector));
    }
    or(locator) {
      if (locator._frame !== this._frame)
        throw new Error(`Locators must belong to the same frame.`);
      return new Locator(this._frame, this._selector + ` >> internal:or=` + JSON.stringify(locator._selector));
    }
    async focus(options) {
      return await this._frame.focus(this._selector, {
        strict: true,
        ...options
      });
    }
    async blur(options) {
      await this._frame._channel.blur({
        selector: this._selector,
        strict: true,
        ...options
      });
    }
    async count() {
      return await this._frame._queryCount(this._selector);
    }
    async getAttribute(name, options) {
      return await this._frame.getAttribute(this._selector, name, {
        strict: true,
        ...options
      });
    }
    async hover(options = {}) {
      return await this._frame.hover(this._selector, {
        strict: true,
        ...options
      });
    }
    async innerHTML(options) {
      return await this._frame.innerHTML(this._selector, {
        strict: true,
        ...options
      });
    }
    async innerText(options) {
      return await this._frame.innerText(this._selector, {
        strict: true,
        ...options
      });
    }
    async inputValue(options) {
      return await this._frame.inputValue(this._selector, {
        strict: true,
        ...options
      });
    }
    async isChecked(options) {
      return await this._frame.isChecked(this._selector, {
        strict: true,
        ...options
      });
    }
    async isDisabled(options) {
      return await this._frame.isDisabled(this._selector, {
        strict: true,
        ...options
      });
    }
    async isEditable(options) {
      return await this._frame.isEditable(this._selector, {
        strict: true,
        ...options
      });
    }
    async isEnabled(options) {
      return await this._frame.isEnabled(this._selector, {
        strict: true,
        ...options
      });
    }
    async isHidden(options) {
      return await this._frame.isHidden(this._selector, {
        strict: true,
        ...options
      });
    }
    async isVisible(options) {
      return await this._frame.isVisible(this._selector, {
        strict: true,
        ...options
      });
    }
    async press(key, options = {}) {
      return await this._frame.press(this._selector, key, {
        strict: true,
        ...options
      });
    }
    async screenshot(options = {}) {
      return await this._withElement((h, timeout) => h.screenshot({
        ...options,
        timeout
      }), options.timeout);
    }
    async scrollIntoViewIfNeeded(options = {}) {
      return await this._withElement((h, timeout) => h.scrollIntoViewIfNeeded({
        ...options,
        timeout
      }), options.timeout);
    }
    async selectOption(values, options = {}) {
      return await this._frame.selectOption(this._selector, values, {
        strict: true,
        ...options
      });
    }
    async selectText(options = {}) {
      return await this._withElement((h, timeout) => h.selectText({
        ...options,
        timeout
      }), options.timeout);
    }
    async setChecked(checked, options) {
      if (checked)
        await this.check(options);
      else
        await this.uncheck(options);
    }
    async setInputFiles(files, options = {}) {
      return await this._frame.setInputFiles(this._selector, files, {
        strict: true,
        ...options
      });
    }
    async tap(options = {}) {
      return await this._frame.tap(this._selector, {
        strict: true,
        ...options
      });
    }
    async textContent(options) {
      return await this._frame.textContent(this._selector, {
        strict: true,
        ...options
      });
    }
    async type(text, options = {}) {
      return await this._frame.type(this._selector, text, {
        strict: true,
        ...options
      });
    }
    async pressSequentially(text, options = {}) {
      return await this.type(text, options);
    }
    async uncheck(options = {}) {
      return await this._frame.uncheck(this._selector, {
        strict: true,
        ...options
      });
    }
    async all() {
      return new Array(await this.count()).fill(0).map((e, i) => this.nth(i));
    }
    async allInnerTexts() {
      return await this._frame.$$eval(this._selector, (ee) => ee.map((e) => e.innerText));
    }
    async allTextContents() {
      return await this._frame.$$eval(this._selector, (ee) => ee.map((e) => e.textContent || ""));
    }
    async waitFor(options) {
      await this._frame._channel.waitForSelector({
        selector: this._selector,
        strict: true,
        omitReturnValue: true,
        ...options
      });
    }
    async _expect(expression, options) {
      const params = {
        selector: this._selector,
        expression,
        ...options,
        isNot: !!options.isNot
      };
      params.expectedValue = (0, _jsHandle.serializeArgument)(options.expectedValue);
      const result = await this._frame._channel.expect(params);
      if (result.received !== undefined)
        result.received = (0, _jsHandle.parseResult)(result.received);
      return result;
    }
    [_util$inspect$custom]() {
      return this.toString();
    }
    toString() {
      return (0, _utils.asLocator)("javascript", this._selector);
    }
  }
  exports.Locator = Locator;

  class FrameLocator {
    constructor(frame, selector) {
      this._frame = undefined;
      this._frameSelector = undefined;
      this._frame = frame;
      this._frameSelector = selector;
    }
    locator(selectorOrLocator, options) {
      if ((0, _utils.isString)(selectorOrLocator))
        return new Locator(this._frame, this._frameSelector + " >> internal:control=enter-frame >> " + selectorOrLocator, options);
      if (selectorOrLocator._frame !== this._frame)
        throw new Error(`Locators must belong to the same frame.`);
      return new Locator(this._frame, this._frameSelector + " >> internal:control=enter-frame >> " + selectorOrLocator._selector, options);
    }
    getByTestId(testId) {
      return this.locator((0, _locatorUtils.getByTestIdSelector)(testIdAttributeName(), testId));
    }
    getByAltText(text, options) {
      return this.locator((0, _locatorUtils.getByAltTextSelector)(text, options));
    }
    getByLabel(text, options) {
      return this.locator((0, _locatorUtils.getByLabelSelector)(text, options));
    }
    getByPlaceholder(text, options) {
      return this.locator((0, _locatorUtils.getByPlaceholderSelector)(text, options));
    }
    getByText(text, options) {
      return this.locator((0, _locatorUtils.getByTextSelector)(text, options));
    }
    getByTitle(text, options) {
      return this.locator((0, _locatorUtils.getByTitleSelector)(text, options));
    }
    getByRole(role, options = {}) {
      return this.locator((0, _locatorUtils.getByRoleSelector)(role, options));
    }
    frameLocator(selector) {
      return new FrameLocator(this._frame, this._frameSelector + " >> internal:control=enter-frame >> " + selector);
    }
    first() {
      return new FrameLocator(this._frame, this._frameSelector + " >> nth=0");
    }
    last() {
      return new FrameLocator(this._frame, this._frameSelector + ` >> nth=-1`);
    }
    nth(index) {
      return new FrameLocator(this._frame, this._frameSelector + ` >> nth=${index}`);
    }
  }
  exports.FrameLocator = FrameLocator;
  var _testIdAttributeName = "data-testid";
});

// node_modules/playwright-core/lib/client/events.js
var require_events = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Events = undefined;
  var Events = exports.Events = {
    AndroidDevice: {
      WebView: "webview",
      Close: "close"
    },
    AndroidSocket: {
      Data: "data",
      Close: "close"
    },
    AndroidWebView: {
      Close: "close"
    },
    Browser: {
      Disconnected: "disconnected"
    },
    BrowserContext: {
      Console: "console",
      Close: "close",
      Dialog: "dialog",
      Page: "page",
      WebError: "weberror",
      BackgroundPage: "backgroundpage",
      ServiceWorker: "serviceworker",
      Request: "request",
      Response: "response",
      RequestFailed: "requestfailed",
      RequestFinished: "requestfinished"
    },
    BrowserServer: {
      Close: "close"
    },
    Page: {
      Close: "close",
      Crash: "crash",
      Console: "console",
      Dialog: "dialog",
      Download: "download",
      FileChooser: "filechooser",
      DOMContentLoaded: "domcontentloaded",
      PageError: "pageerror",
      Request: "request",
      Response: "response",
      RequestFailed: "requestfailed",
      RequestFinished: "requestfinished",
      FrameAttached: "frameattached",
      FrameDetached: "framedetached",
      FrameNavigated: "framenavigated",
      Load: "load",
      Popup: "popup",
      WebSocket: "websocket",
      Worker: "worker"
    },
    WebSocket: {
      Close: "close",
      Error: "socketerror",
      FrameReceived: "framereceived",
      FrameSent: "framesent"
    },
    Worker: {
      Close: "close"
    },
    ElectronApplication: {
      Close: "close",
      Console: "console",
      Window: "window"
    }
  };
});

// node_modules/playwright-core/lib/client/worker.js
var require_worker = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Worker = undefined;
  var _events = require_events();
  var _channelOwner = require_channelOwner();
  var _jsHandle = require_jsHandle();
  var _utils = require_utils3();
  var _errors = require_errors2();

  class Worker extends _channelOwner.ChannelOwner {
    static from(worker) {
      return worker._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._page = undefined;
      this._context = undefined;
      this._closedScope = new _utils.LongStandingScope;
      this._channel.on("close", () => {
        if (this._page)
          this._page._workers.delete(this);
        if (this._context)
          this._context._serviceWorkers.delete(this);
        this.emit(_events.Events.Worker.Close, this);
      });
      this.once(_events.Events.Worker.Close, () => {
        var _this$_page;
        return this._closedScope.close(((_this$_page = this._page) === null || _this$_page === undefined ? undefined : _this$_page._closeErrorWithReason()) || new _errors.TargetClosedError);
      });
    }
    url() {
      return this._initializer.url;
    }
    async evaluate(pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 2);
      const result = await this._channel.evaluateExpression({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async evaluateHandle(pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 2);
      const result = await this._channel.evaluateExpressionHandle({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return _jsHandle.JSHandle.from(result.handle);
    }
  }
  exports.Worker = Worker;
});

// node_modules/playwright-core/lib/client/waiter.js
var require_waiter = __commonJS((exports) => {
  var waitForEvent = function(emitter, event, predicate) {
    let listener;
    const promise = new Promise((resolve, reject) => {
      listener = async (eventArg) => {
        try {
          if (predicate && !await predicate(eventArg))
            return;
          emitter.removeListener(event, listener);
          resolve(eventArg);
        } catch (e) {
          emitter.removeListener(event, listener);
          reject(e);
        }
      };
      emitter.addListener(event, listener);
    });
    const dispose = () => emitter.removeListener(event, listener);
    return {
      promise,
      dispose
    };
  };
  var waitForTimeout = function(timeout) {
    let timeoutId;
    const promise = new Promise((resolve) => timeoutId = setTimeout(resolve, timeout));
    const dispose = () => clearTimeout(timeoutId);
    return {
      promise,
      dispose
    };
  };
  var formatLogRecording = function(log) {
    if (!log.length)
      return "";
    const header = ` logs `;
    const headerLength = 60;
    const leftLength = (headerLength - header.length) / 2;
    const rightLength = headerLength - header.length - leftLength;
    return `\n${"=".repeat(leftLength)}${header}${"=".repeat(rightLength)}\n${log.join("\n")}\n${"=".repeat(headerLength)}`;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Waiter = undefined;
  var _stackTrace = require_stackTrace();
  var _errors = require_errors2();
  var _utils = require_utils3();

  class Waiter {
    constructor(channelOwner, event) {
      this._dispose = undefined;
      this._failures = [];
      this._immediateError = undefined;
      this._logs = [];
      this._channelOwner = undefined;
      this._waitId = undefined;
      this._error = undefined;
      this._waitId = (0, _utils.createGuid)();
      this._channelOwner = channelOwner;
      this._channelOwner._channel.waitForEventInfo({
        info: {
          waitId: this._waitId,
          phase: "before",
          event
        }
      }).catch(() => {
      });
      this._dispose = [() => this._channelOwner._wrapApiCall(async () => {
        await this._channelOwner._channel.waitForEventInfo({
          info: {
            waitId: this._waitId,
            phase: "after",
            error: this._error
          }
        });
      }, true).catch(() => {
      })];
    }
    static createForEvent(channelOwner, event) {
      return new Waiter(channelOwner, event);
    }
    async waitForEvent(emitter, event, predicate) {
      const {
        promise,
        dispose
      } = waitForEvent(emitter, event, predicate);
      return await this.waitForPromise(promise, dispose);
    }
    rejectOnEvent(emitter, event, error, predicate) {
      const {
        promise,
        dispose
      } = waitForEvent(emitter, event, predicate);
      this._rejectOn(promise.then(() => {
        throw typeof error === "function" ? error() : error;
      }), dispose);
    }
    rejectOnTimeout(timeout, message) {
      if (!timeout)
        return;
      const {
        promise,
        dispose
      } = waitForTimeout(timeout);
      this._rejectOn(promise.then(() => {
        throw new _errors.TimeoutError(message);
      }), dispose);
    }
    rejectImmediately(error) {
      this._immediateError = error;
    }
    dispose() {
      for (const dispose of this._dispose)
        dispose();
    }
    async waitForPromise(promise, dispose) {
      try {
        if (this._immediateError)
          throw this._immediateError;
        const result = await Promise.race([promise, ...this._failures]);
        if (dispose)
          dispose();
        return result;
      } catch (e) {
        if (dispose)
          dispose();
        this._error = e.message;
        this.dispose();
        (0, _stackTrace.rewriteErrorMessage)(e, e.message + formatLogRecording(this._logs));
        throw e;
      }
    }
    log(s) {
      this._logs.push(s);
      this._channelOwner._wrapApiCall(async () => {
        await this._channelOwner._channel.waitForEventInfo({
          info: {
            waitId: this._waitId,
            phase: "log",
            message: s
          }
        }).catch(() => {
        });
      }, true);
    }
    _rejectOn(promise, dispose) {
      this._failures.push(promise);
      if (dispose)
        this._dispose.push(dispose);
    }
  }
  exports.Waiter = Waiter;
});

// node_modules/playwright-core/lib/client/tracing.js
var require_tracing2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Tracing = undefined;
  var _artifact = require_artifact2();
  var _channelOwner = require_channelOwner();

  class Tracing extends _channelOwner.ChannelOwner {
    static from(channel) {
      return channel._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._includeSources = false;
      this._tracesDir = undefined;
      this._stacksId = undefined;
      this._isTracing = false;
    }
    async start(options = {}) {
      this._includeSources = !!options.sources;
      const traceName = await this._wrapApiCall(async () => {
        await this._channel.tracingStart({
          name: options.name,
          snapshots: options.snapshots,
          screenshots: options.screenshots,
          live: options._live
        });
        const response = await this._channel.tracingStartChunk({
          name: options.name,
          title: options.title
        });
        return response.traceName;
      }, true);
      await this._startCollectingStacks(traceName);
    }
    async startChunk(options = {}) {
      const {
        traceName
      } = await this._channel.tracingStartChunk(options);
      await this._startCollectingStacks(traceName);
    }
    async _startCollectingStacks(traceName) {
      if (!this._isTracing) {
        this._isTracing = true;
        this._connection.setIsTracing(true);
      }
      const result = await this._connection.localUtils()._channel.tracingStarted({
        tracesDir: this._tracesDir,
        traceName
      });
      this._stacksId = result.stacksId;
    }
    async stopChunk(options = {}) {
      await this._wrapApiCall(async () => {
        await this._doStopChunk(options.path);
      }, true);
    }
    async stop(options = {}) {
      await this._wrapApiCall(async () => {
        await this._doStopChunk(options.path);
        await this._channel.tracingStop();
      }, true);
    }
    async _doStopChunk(filePath) {
      if (this._isTracing) {
        this._isTracing = false;
        this._connection.setIsTracing(false);
      }
      if (!filePath) {
        await this._channel.tracingStopChunk({
          mode: "discard"
        });
        if (this._stacksId)
          await this._connection.localUtils()._channel.traceDiscarded({
            stacksId: this._stacksId
          });
        return;
      }
      const isLocal = !this._connection.isRemote();
      if (isLocal) {
        const result2 = await this._channel.tracingStopChunk({
          mode: "entries"
        });
        await this._connection.localUtils()._channel.zip({
          zipFile: filePath,
          entries: result2.entries,
          mode: "write",
          stacksId: this._stacksId,
          includeSources: this._includeSources
        });
        return;
      }
      const result = await this._channel.tracingStopChunk({
        mode: "archive"
      });
      if (!result.artifact) {
        if (this._stacksId)
          await this._connection.localUtils()._channel.traceDiscarded({
            stacksId: this._stacksId
          });
        return;
      }
      const artifact = _artifact.Artifact.from(result.artifact);
      await artifact.saveAs(filePath);
      await artifact.delete();
      await this._connection.localUtils()._channel.zip({
        zipFile: filePath,
        entries: [],
        mode: "append",
        stacksId: this._stacksId,
        includeSources: this._includeSources
      });
    }
  }
  exports.Tracing = Tracing;
});

// node_modules/playwright-core/lib/client/fetch.js
var require_fetch2 = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var isJsonParsable = function(value) {
    if (typeof value !== "string")
      return false;
    try {
      JSON.parse(value);
      return true;
    } catch (e) {
      if (e instanceof SyntaxError)
        return false;
      else
        throw e;
    }
  };
  var filePayloadToJson = function(payload) {
    return {
      name: payload.name,
      mimeType: payload.mimeType,
      buffer: payload.buffer
    };
  };
  async function readStreamToJson(stream) {
    const buffer = await new Promise((resolve, reject) => {
      const chunks = [];
      stream.on("data", (chunk) => chunks.push(chunk));
      stream.on("end", () => resolve(Buffer.concat(chunks)));
      stream.on("error", (err) => reject(err));
    });
    const streamPath = Buffer.isBuffer(stream.path) ? stream.path.toString("utf8") : stream.path;
    return {
      name: _path.default.basename(streamPath),
      buffer
    };
  }
  var isJsonContentType = function(headers) {
    if (!headers)
      return false;
    for (const {
      name,
      value
    } of headers) {
      if (name.toLocaleLowerCase() === "content-type")
        return value === "application/json";
    }
    return false;
  };
  var objectToArray = function(map) {
    if (!map)
      return;
    const result = [];
    for (const [name, value] of Object.entries(map))
      result.push({
        name,
        value: String(value)
      });
    return result;
  };
  var isFilePayload = function(value) {
    return typeof value === "object" && value["name"] && value["mimeType"] && value["buffer"];
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.APIResponse = exports.APIRequestContext = exports.APIRequest = undefined;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var util = _interopRequireWildcard(import.meta.require("util"));
  var _utils = require_utils3();
  var _fileUtils = require_fileUtils();
  var _channelOwner = require_channelOwner();
  var _network = require_network3();
  var _tracing = require_tracing2();
  var _errors = require_errors2();
  var _Symbol$asyncDispose;
  var _Symbol$asyncDispose2;
  var _util$inspect$custom;

  class APIRequest {
    constructor(playwright) {
      this._playwright = undefined;
      this._contexts = new Set;
      this._defaultContextOptions = undefined;
      this._playwright = playwright;
    }
    async newContext(options = {}) {
      var _this$_defaultContext;
      options = {
        ...this._defaultContextOptions,
        ...options
      };
      const storageState = typeof options.storageState === "string" ? JSON.parse(await _fs.default.promises.readFile(options.storageState, "utf8")) : options.storageState;
      const tracesDir = (_this$_defaultContext = this._defaultContextOptions) === null || _this$_defaultContext === undefined ? undefined : _this$_defaultContext.tracesDir;
      const context = APIRequestContext.from((await this._playwright._channel.newRequest({
        ...options,
        extraHTTPHeaders: options.extraHTTPHeaders ? (0, _utils.headersObjectToArray)(options.extraHTTPHeaders) : undefined,
        storageState,
        tracesDir
      })).request);
      this._contexts.add(context);
      context._request = this;
      context._tracing._tracesDir = tracesDir;
      await context._instrumentation.onDidCreateRequestContext(context);
      return context;
    }
  }
  exports.APIRequest = APIRequest;
  _Symbol$asyncDispose = Symbol.asyncDispose;

  class APIRequestContext extends _channelOwner.ChannelOwner {
    static from(channel) {
      return channel._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._request = undefined;
      this._tracing = undefined;
      this._tracing = _tracing.Tracing.from(initializer.tracing);
    }
    async[_Symbol$asyncDispose]() {
      await this.dispose();
    }
    async dispose() {
      var _this$_request;
      await this._instrumentation.onWillCloseRequestContext(this);
      await this._channel.dispose();
      (_this$_request = this._request) === null || _this$_request === undefined || _this$_request._contexts.delete(this);
    }
    async delete(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "DELETE"
      });
    }
    async head(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "HEAD"
      });
    }
    async get(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "GET"
      });
    }
    async patch(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "PATCH"
      });
    }
    async post(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "POST"
      });
    }
    async put(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "PUT"
      });
    }
    async fetch(urlOrRequest, options = {}) {
      const url = (0, _utils.isString)(urlOrRequest) ? urlOrRequest : undefined;
      const request = (0, _utils.isString)(urlOrRequest) ? undefined : urlOrRequest;
      return await this._innerFetch({
        url,
        request,
        ...options
      });
    }
    async _innerFetch(options = {}) {
      return await this._wrapApiCall(async () => {
        var _options$request, _options$request2, _options$request3;
        (0, _utils.assert)(options.request || typeof options.url === "string", "First argument must be either URL string or Request");
        (0, _utils.assert)((options.data === undefined ? 0 : 1) + (options.form === undefined ? 0 : 1) + (options.multipart === undefined ? 0 : 1) <= 1, `Only one of 'data', 'form' or 'multipart' can be specified`);
        (0, _utils.assert)(options.maxRedirects === undefined || options.maxRedirects >= 0, `'maxRedirects' should be greater than or equal to '0'`);
        const url = options.url !== undefined ? options.url : options.request.url();
        const params = objectToArray(options.params);
        const method = options.method || ((_options$request = options.request) === null || _options$request === undefined ? undefined : _options$request.method());
        const maxRedirects = options.maxRedirects;
        const headersObj = options.headers || ((_options$request2 = options.request) === null || _options$request2 === undefined ? undefined : _options$request2.headers());
        const headers = headersObj ? (0, _utils.headersObjectToArray)(headersObj) : undefined;
        let jsonData;
        let formData;
        let multipartData;
        let postDataBuffer;
        if (options.data !== undefined) {
          if ((0, _utils.isString)(options.data)) {
            if (isJsonContentType(headers))
              jsonData = isJsonParsable(options.data) ? options.data : JSON.stringify(options.data);
            else
              postDataBuffer = Buffer.from(options.data, "utf8");
          } else if (Buffer.isBuffer(options.data)) {
            postDataBuffer = options.data;
          } else if (typeof options.data === "object" || typeof options.data === "number" || typeof options.data === "boolean") {
            jsonData = JSON.stringify(options.data);
          } else {
            throw new Error(`Unexpected 'data' type`);
          }
        } else if (options.form) {
          formData = objectToArray(options.form);
        } else if (options.multipart) {
          multipartData = [];
          for (const [name, value] of Object.entries(options.multipart)) {
            if (isFilePayload(value)) {
              const payload = value;
              if (!Buffer.isBuffer(payload.buffer))
                throw new Error(`Unexpected buffer type of 'data.${name}'`);
              multipartData.push({
                name,
                file: filePayloadToJson(payload)
              });
            } else if (value instanceof _fs.default.ReadStream) {
              multipartData.push({
                name,
                file: await readStreamToJson(value)
              });
            } else {
              multipartData.push({
                name,
                value: String(value)
              });
            }
          }
        }
        if (postDataBuffer === undefined && jsonData === undefined && formData === undefined && multipartData === undefined)
          postDataBuffer = ((_options$request3 = options.request) === null || _options$request3 === undefined ? undefined : _options$request3.postDataBuffer()) || undefined;
        const fixtures = {
          __testHookLookup: options.__testHookLookup
        };
        const result = await this._channel.fetch({
          url,
          params,
          method,
          headers,
          postData: postDataBuffer,
          jsonData,
          formData,
          multipartData,
          timeout: options.timeout,
          failOnStatusCode: options.failOnStatusCode,
          ignoreHTTPSErrors: options.ignoreHTTPSErrors,
          maxRedirects,
          ...fixtures
        });
        return new APIResponse(this, result.response);
      });
    }
    async storageState(options = {}) {
      const state = await this._channel.storageState();
      if (options.path) {
        await (0, _fileUtils.mkdirIfNeeded)(options.path);
        await _fs.default.promises.writeFile(options.path, JSON.stringify(state, undefined, 2), "utf8");
      }
      return state;
    }
  }
  exports.APIRequestContext = APIRequestContext;
  _Symbol$asyncDispose2 = Symbol.asyncDispose;
  _util$inspect$custom = util.inspect.custom;

  class APIResponse {
    constructor(context, initializer) {
      this._initializer = undefined;
      this._headers = undefined;
      this._request = undefined;
      this._request = context;
      this._initializer = initializer;
      this._headers = new _network.RawHeaders(this._initializer.headers);
    }
    ok() {
      return this._initializer.status >= 200 && this._initializer.status <= 299;
    }
    url() {
      return this._initializer.url;
    }
    status() {
      return this._initializer.status;
    }
    statusText() {
      return this._initializer.statusText;
    }
    headers() {
      return this._headers.headers();
    }
    headersArray() {
      return this._headers.headersArray();
    }
    async body() {
      try {
        const result = await this._request._channel.fetchResponseBody({
          fetchUid: this._fetchUid()
        });
        if (result.binary === undefined)
          throw new Error("Response has been disposed");
        return result.binary;
      } catch (e) {
        if ((0, _errors.isTargetClosedError)(e))
          throw new Error("Response has been disposed");
        throw e;
      }
    }
    async text() {
      const content = await this.body();
      return content.toString("utf8");
    }
    async json() {
      const content = await this.text();
      return JSON.parse(content);
    }
    async[_Symbol$asyncDispose2]() {
      await this.dispose();
    }
    async dispose() {
      await this._request._channel.disposeAPIResponse({
        fetchUid: this._fetchUid()
      });
    }
    [_util$inspect$custom]() {
      const headers = this.headersArray().map(({
        name,
        value
      }) => `  ${name}: ${value}`);
      return `APIResponse: ${this.status()} ${this.statusText()}\n${headers.join("\n")}`;
    }
    _fetchUid() {
      return this._initializer.fetchUid;
    }
    async _fetchLog() {
      const {
        log
      } = await this._request._channel.fetchLog({
        fetchUid: this._fetchUid()
      });
      return log;
    }
  }
  exports.APIResponse = APIResponse;
});

// node_modules/playwright-core/lib/client/network.js
var require_network3 = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var validateHeaders = function(headers) {
    for (const key of Object.keys(headers)) {
      const value = headers[key];
      if (!Object.is(value, undefined) && !(0, _utils.isString)(value))
        throw new Error(`Expected value of header "${key}" to be String, but "${typeof value}" is found.`);
    }
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WebSocket = exports.RouteHandler = exports.Route = exports.Response = exports.Request = exports.RawHeaders = undefined;
  exports.validateHeaders = validateHeaders;
  var _url = import.meta.require("url");
  var _channelOwner = require_channelOwner();
  var _frame = require_frame();
  var _worker = require_worker();
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _utilsBundle = require_utilsBundle();
  var _utils = require_utils3();
  var _manualPromise = require_manualPromise();
  var _events = require_events();
  var _waiter = require_waiter();
  var _network = require_network();
  var _multimap = require_multimap();
  var _fetch = require_fetch2();

  class Request extends _channelOwner.ChannelOwner {
    static from(request) {
      return request._object;
    }
    static fromNullable(request) {
      return request ? Request.from(request) : null;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._redirectedFrom = null;
      this._redirectedTo = null;
      this._failureText = null;
      this._provisionalHeaders = undefined;
      this._actualHeadersPromise = undefined;
      this._timing = undefined;
      this._fallbackOverrides = {};
      this._redirectedFrom = Request.fromNullable(initializer.redirectedFrom);
      if (this._redirectedFrom)
        this._redirectedFrom._redirectedTo = this;
      this._provisionalHeaders = new RawHeaders(initializer.headers);
      this._fallbackOverrides.postDataBuffer = initializer.postData;
      this._timing = {
        startTime: 0,
        domainLookupStart: -1,
        domainLookupEnd: -1,
        connectStart: -1,
        secureConnectionStart: -1,
        connectEnd: -1,
        requestStart: -1,
        responseStart: -1,
        responseEnd: -1
      };
    }
    url() {
      return this._fallbackOverrides.url || this._initializer.url;
    }
    resourceType() {
      return this._initializer.resourceType;
    }
    method() {
      return this._fallbackOverrides.method || this._initializer.method;
    }
    postData() {
      var _this$_fallbackOverri;
      return ((_this$_fallbackOverri = this._fallbackOverrides.postDataBuffer) === null || _this$_fallbackOverri === undefined ? undefined : _this$_fallbackOverri.toString("utf-8")) || null;
    }
    postDataBuffer() {
      return this._fallbackOverrides.postDataBuffer || null;
    }
    postDataJSON() {
      const postData = this.postData();
      if (!postData)
        return null;
      const contentType = this.headers()["content-type"];
      if (contentType === "application/x-www-form-urlencoded") {
        const entries = {};
        const parsed = new _url.URLSearchParams(postData);
        for (const [k, v] of parsed.entries())
          entries[k] = v;
        return entries;
      }
      try {
        return JSON.parse(postData);
      } catch (e) {
        throw new Error("POST data is not a valid JSON object: " + postData);
      }
    }
    headers() {
      if (this._fallbackOverrides.headers)
        return RawHeaders._fromHeadersObjectLossy(this._fallbackOverrides.headers).headers();
      return this._provisionalHeaders.headers();
    }
    async _actualHeaders() {
      if (this._fallbackOverrides.headers)
        return RawHeaders._fromHeadersObjectLossy(this._fallbackOverrides.headers);
      if (!this._actualHeadersPromise) {
        this._actualHeadersPromise = this._wrapApiCall(async () => {
          return new RawHeaders((await this._channel.rawRequestHeaders()).headers);
        });
      }
      return await this._actualHeadersPromise;
    }
    async allHeaders() {
      return (await this._actualHeaders()).headers();
    }
    async headersArray() {
      return (await this._actualHeaders()).headersArray();
    }
    async headerValue(name) {
      return (await this._actualHeaders()).get(name);
    }
    async response() {
      return Response.fromNullable((await this._channel.response()).response);
    }
    async _internalResponse() {
      return await this._wrapApiCall(async () => {
        return Response.fromNullable((await this._channel.response()).response);
      }, true);
    }
    frame() {
      if (!this._initializer.frame) {
        (0, _utils.assert)(this.serviceWorker());
        throw new Error("Service Worker requests do not have an associated frame.");
      }
      const frame = _frame.Frame.from(this._initializer.frame);
      if (!frame._page) {
        throw new Error(["Frame for this navigation request is not available, because the request", "was issued before the frame is created. You can check whether the request", "is a navigation request by calling isNavigationRequest() method."].join("\n"));
      }
      return frame;
    }
    _safePage() {
      var _Frame$fromNullable;
      return ((_Frame$fromNullable = _frame.Frame.fromNullable(this._initializer.frame)) === null || _Frame$fromNullable === undefined ? undefined : _Frame$fromNullable._page) || null;
    }
    serviceWorker() {
      return this._initializer.serviceWorker ? _worker.Worker.from(this._initializer.serviceWorker) : null;
    }
    isNavigationRequest() {
      return this._initializer.isNavigationRequest;
    }
    redirectedFrom() {
      return this._redirectedFrom;
    }
    redirectedTo() {
      return this._redirectedTo;
    }
    failure() {
      if (this._failureText === null)
        return null;
      return {
        errorText: this._failureText
      };
    }
    timing() {
      return this._timing;
    }
    async sizes() {
      const response = await this.response();
      if (!response)
        throw new Error("Unable to fetch sizes for failed request");
      return (await response._channel.sizes()).sizes;
    }
    _setResponseEndTiming(responseEndTiming) {
      this._timing.responseEnd = responseEndTiming;
      if (this._timing.responseStart === -1)
        this._timing.responseStart = responseEndTiming;
    }
    _finalRequest() {
      return this._redirectedTo ? this._redirectedTo._finalRequest() : this;
    }
    _applyFallbackOverrides(overrides) {
      if (overrides.url)
        this._fallbackOverrides.url = overrides.url;
      if (overrides.method)
        this._fallbackOverrides.method = overrides.method;
      if (overrides.headers)
        this._fallbackOverrides.headers = overrides.headers;
      if ((0, _utils.isString)(overrides.postData))
        this._fallbackOverrides.postDataBuffer = Buffer.from(overrides.postData, "utf-8");
      else if (overrides.postData instanceof Buffer)
        this._fallbackOverrides.postDataBuffer = overrides.postData;
      else if (overrides.postData)
        this._fallbackOverrides.postDataBuffer = Buffer.from(JSON.stringify(overrides.postData), "utf-8");
    }
    _fallbackOverridesForContinue() {
      return this._fallbackOverrides;
    }
    _targetClosedScope() {
      var _this$serviceWorker, _this$_safePage;
      return ((_this$serviceWorker = this.serviceWorker()) === null || _this$serviceWorker === undefined ? undefined : _this$serviceWorker._closedScope) || ((_this$_safePage = this._safePage()) === null || _this$_safePage === undefined ? undefined : _this$_safePage._closedOrCrashedScope) || new _manualPromise.LongStandingScope;
    }
  }
  exports.Request = Request;

  class Route extends _channelOwner.ChannelOwner {
    static from(route) {
      return route._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._handlingPromise = null;
      this._context = undefined;
      this._didThrow = false;
    }
    request() {
      return Request.from(this._initializer.request);
    }
    async _raceWithTargetClose(promise) {
      return await this.request()._targetClosedScope().safeRace(promise);
    }
    async _startHandling() {
      this._handlingPromise = new _manualPromise.ManualPromise;
      return await this._handlingPromise;
    }
    async fallback(options = {}) {
      this._checkNotHandled();
      this.request()._applyFallbackOverrides(options);
      this._reportHandled(false);
    }
    async abort(errorCode) {
      await this._handleRoute(async () => {
        await this._raceWithTargetClose(this._channel.abort({
          requestUrl: this.request()._initializer.url,
          errorCode
        }));
      });
    }
    async _redirectNavigationRequest(url) {
      await this._handleRoute(async () => {
        await this._raceWithTargetClose(this._channel.redirectNavigationRequest({
          url
        }));
      });
    }
    async fetch(options = {}) {
      return await this._wrapApiCall(async () => {
        return await this._context.request._innerFetch({
          request: this.request(),
          data: options.postData,
          ...options
        });
      });
    }
    async fulfill(options = {}) {
      await this._handleRoute(async () => {
        await this._wrapApiCall(async () => {
          await this._innerFulfill(options);
        });
      });
    }
    async _handleRoute(callback) {
      this._checkNotHandled();
      try {
        await callback();
        this._reportHandled(true);
      } catch (e) {
        this._didThrow = true;
        throw e;
      }
    }
    async _innerFulfill(options = {}) {
      let fetchResponseUid;
      let {
        status: statusOption,
        headers: headersOption,
        body
      } = options;
      if (options.json !== undefined) {
        (0, _utils.assert)(options.body === undefined, "Can specify either body or json parameters");
        body = JSON.stringify(options.json);
      }
      if (options.response instanceof _fetch.APIResponse) {
        var _statusOption, _headersOption;
        (_statusOption = statusOption) !== null && _statusOption !== undefined || (statusOption = options.response.status());
        (_headersOption = headersOption) !== null && _headersOption !== undefined || (headersOption = options.response.headers());
        if (body === undefined && options.path === undefined) {
          if (options.response._request._connection === this._connection)
            fetchResponseUid = options.response._fetchUid();
          else
            body = await options.response.body();
        }
      }
      let isBase64 = false;
      let length = 0;
      if (options.path) {
        const buffer = await _fs.default.promises.readFile(options.path);
        body = buffer.toString("base64");
        isBase64 = true;
        length = buffer.length;
      } else if ((0, _utils.isString)(body)) {
        isBase64 = false;
        length = Buffer.byteLength(body);
      } else if (body) {
        length = body.length;
        body = body.toString("base64");
        isBase64 = true;
      }
      const headers = {};
      for (const header of Object.keys(headersOption || {}))
        headers[header.toLowerCase()] = String(headersOption[header]);
      if (options.contentType)
        headers["content-type"] = String(options.contentType);
      else if (options.json)
        headers["content-type"] = "application/json";
      else if (options.path)
        headers["content-type"] = _utilsBundle.mime.getType(options.path) || "application/octet-stream";
      if (length && !("content-length" in headers))
        headers["content-length"] = String(length);
      await this._raceWithTargetClose(this._channel.fulfill({
        requestUrl: this.request()._initializer.url,
        status: statusOption || 200,
        headers: (0, _utils.headersObjectToArray)(headers),
        body,
        isBase64,
        fetchResponseUid
      }));
    }
    async continue(options = {}) {
      await this._handleRoute(async () => {
        this.request()._applyFallbackOverrides(options);
        await this._innerContinue();
      });
    }
    _checkNotHandled() {
      if (!this._handlingPromise)
        throw new Error("Route is already handled!");
    }
    _reportHandled(done) {
      const chain = this._handlingPromise;
      this._handlingPromise = null;
      chain.resolve(done);
    }
    async _innerContinue(internal = false) {
      const options = this.request()._fallbackOverridesForContinue();
      return await this._wrapApiCall(async () => {
        await this._raceWithTargetClose(this._channel.continue({
          requestUrl: this.request()._initializer.url,
          url: options.url,
          method: options.method,
          headers: options.headers ? (0, _utils.headersObjectToArray)(options.headers) : undefined,
          postData: options.postDataBuffer,
          isFallback: internal
        }));
      }, !!internal);
    }
  }
  exports.Route = Route;

  class Response extends _channelOwner.ChannelOwner {
    static from(response) {
      return response._object;
    }
    static fromNullable(response) {
      return response ? Response.from(response) : null;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._provisionalHeaders = undefined;
      this._actualHeadersPromise = undefined;
      this._request = undefined;
      this._finishedPromise = new _manualPromise.ManualPromise;
      this._provisionalHeaders = new RawHeaders(initializer.headers);
      this._request = Request.from(this._initializer.request);
      Object.assign(this._request._timing, this._initializer.timing);
    }
    url() {
      return this._initializer.url;
    }
    ok() {
      return this._initializer.status === 0 || this._initializer.status >= 200 && this._initializer.status <= 299;
    }
    status() {
      return this._initializer.status;
    }
    statusText() {
      return this._initializer.statusText;
    }
    fromServiceWorker() {
      return this._initializer.fromServiceWorker;
    }
    headers() {
      return this._provisionalHeaders.headers();
    }
    async _actualHeaders() {
      if (!this._actualHeadersPromise) {
        this._actualHeadersPromise = (async () => {
          return new RawHeaders((await this._channel.rawResponseHeaders()).headers);
        })();
      }
      return await this._actualHeadersPromise;
    }
    async allHeaders() {
      return (await this._actualHeaders()).headers();
    }
    async headersArray() {
      return (await this._actualHeaders()).headersArray().slice();
    }
    async headerValue(name) {
      return (await this._actualHeaders()).get(name);
    }
    async headerValues(name) {
      return (await this._actualHeaders()).getAll(name);
    }
    async finished() {
      return await this.request()._targetClosedScope().race(this._finishedPromise);
    }
    async body() {
      return (await this._channel.body()).binary;
    }
    async text() {
      const content = await this.body();
      return content.toString("utf8");
    }
    async json() {
      const content = await this.text();
      return JSON.parse(content);
    }
    request() {
      return this._request;
    }
    frame() {
      return this._request.frame();
    }
    async serverAddr() {
      return (await this._channel.serverAddr()).value || null;
    }
    async securityDetails() {
      return (await this._channel.securityDetails()).value || null;
    }
  }
  exports.Response = Response;

  class WebSocket extends _channelOwner.ChannelOwner {
    static from(webSocket) {
      return webSocket._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._page = undefined;
      this._isClosed = undefined;
      this._isClosed = false;
      this._page = parent;
      this._channel.on("frameSent", (event) => {
        if (event.opcode === 1)
          this.emit(_events.Events.WebSocket.FrameSent, {
            payload: event.data
          });
        else if (event.opcode === 2)
          this.emit(_events.Events.WebSocket.FrameSent, {
            payload: Buffer.from(event.data, "base64")
          });
      });
      this._channel.on("frameReceived", (event) => {
        if (event.opcode === 1)
          this.emit(_events.Events.WebSocket.FrameReceived, {
            payload: event.data
          });
        else if (event.opcode === 2)
          this.emit(_events.Events.WebSocket.FrameReceived, {
            payload: Buffer.from(event.data, "base64")
          });
      });
      this._channel.on("socketError", ({
        error
      }) => this.emit(_events.Events.WebSocket.Error, error));
      this._channel.on("close", () => {
        this._isClosed = true;
        this.emit(_events.Events.WebSocket.Close, this);
      });
    }
    url() {
      return this._initializer.url;
    }
    isClosed() {
      return this._isClosed;
    }
    async waitForEvent(event, optionsOrPredicate = {}) {
      return await this._wrapApiCall(async () => {
        const timeout = this._page._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
        const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
        const waiter = _waiter.Waiter.createForEvent(this, event);
        waiter.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
        if (event !== _events.Events.WebSocket.Error)
          waiter.rejectOnEvent(this, _events.Events.WebSocket.Error, new Error("Socket error"));
        if (event !== _events.Events.WebSocket.Close)
          waiter.rejectOnEvent(this, _events.Events.WebSocket.Close, new Error("Socket closed"));
        waiter.rejectOnEvent(this._page, _events.Events.Page.Close, () => this._page._closeErrorWithReason());
        const result = await waiter.waitForEvent(this, event, predicate);
        waiter.dispose();
        return result;
      });
    }
  }
  exports.WebSocket = WebSocket;

  class RouteHandler {
    constructor(baseURL, url, handler, times = Number.MAX_SAFE_INTEGER) {
      this.handledCount = 0;
      this._baseURL = undefined;
      this._times = undefined;
      this.url = undefined;
      this.handler = undefined;
      this._ignoreException = false;
      this._activeInvocations = new Set;
      this._baseURL = baseURL;
      this._times = times;
      this.url = url;
      this.handler = handler;
    }
    static prepareInterceptionPatterns(handlers) {
      const patterns = [];
      let all = false;
      for (const handler of handlers) {
        if ((0, _utils.isString)(handler.url))
          patterns.push({
            glob: handler.url
          });
        else if ((0, _utils.isRegExp)(handler.url))
          patterns.push({
            regexSource: handler.url.source,
            regexFlags: handler.url.flags
          });
        else
          all = true;
      }
      if (all)
        return [{
          glob: "**/*"
        }];
      return patterns;
    }
    matches(requestURL) {
      return (0, _network.urlMatches)(this._baseURL, requestURL, this.url);
    }
    async handle(route) {
      const handlerInvocation = {
        complete: new _manualPromise.ManualPromise,
        route
      };
      this._activeInvocations.add(handlerInvocation);
      try {
        return await this._handleInternal(route);
      } catch (e) {
        if (this._ignoreException)
          return false;
        throw e;
      } finally {
        handlerInvocation.complete.resolve();
        this._activeInvocations.delete(handlerInvocation);
      }
    }
    async stop(behavior) {
      if (behavior === "ignoreErrors") {
        this._ignoreException = true;
      } else {
        const promises = [];
        for (const activation of this._activeInvocations) {
          if (!activation.route._didThrow)
            promises.push(activation.complete);
        }
        await Promise.all(promises);
      }
    }
    async _handleInternal(route) {
      ++this.handledCount;
      const handledPromise = route._startHandling();
      const handler = this.handler;
      const [handled] = await Promise.all([handledPromise, handler(route, route.request())]);
      return handled;
    }
    willExpire() {
      return this.handledCount + 1 >= this._times;
    }
  }
  exports.RouteHandler = RouteHandler;

  class RawHeaders {
    static _fromHeadersObjectLossy(headers) {
      const headersArray = Object.entries(headers).map(([name, value]) => ({
        name,
        value
      })).filter((header) => header.value !== undefined);
      return new RawHeaders(headersArray);
    }
    constructor(headers) {
      this._headersArray = undefined;
      this._headersMap = new _multimap.MultiMap;
      this._headersArray = headers;
      for (const header of headers)
        this._headersMap.set(header.name.toLowerCase(), header.value);
    }
    get(name) {
      const values = this.getAll(name);
      if (!values || !values.length)
        return null;
      return values.join(name.toLowerCase() === "set-cookie" ? "\n" : ", ");
    }
    getAll(name) {
      return [...this._headersMap.get(name.toLowerCase())];
    }
    headers() {
      const result = {};
      for (const name of this._headersMap.keys())
        result[name] = this.get(name);
      return result;
    }
    headersArray() {
      return this._headersArray;
    }
  }
  exports.RawHeaders = RawHeaders;
});

// node_modules/playwright-core/lib/client/types.js
var require_types3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.kLifecycleEvents = undefined;
  var kLifecycleEvents = exports.kLifecycleEvents = new Set(["load", "domcontentloaded", "networkidle", "commit"]);
});

// node_modules/playwright-core/lib/client/frame.js
var require_frame = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var verifyLoadState = function(name, waitUntil) {
    if (waitUntil === "networkidle0")
      waitUntil = "networkidle";
    if (!_types.kLifecycleEvents.has(waitUntil))
      throw new Error(`${name}: expected one of (load|domcontentloaded|networkidle|commit)`);
    return waitUntil;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Frame = undefined;
  exports.verifyLoadState = verifyLoadState;
  var _utils = require_utils3();
  var _channelOwner = require_channelOwner();
  var _locator = require_locator();
  var _locatorUtils = require_locatorUtils();
  var _elementHandle = require_elementHandle();
  var _jsHandle = require_jsHandle();
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var network = _interopRequireWildcard(require_network3());
  var _events = import.meta.require("events");
  var _waiter = require_waiter();
  var _events2 = require_events();
  var _types = require_types3();
  var _network2 = require_network();
  var _clientHelper = require_clientHelper();

  class Frame extends _channelOwner.ChannelOwner {
    static from(frame) {
      return frame._object;
    }
    static fromNullable(frame) {
      return frame ? Frame.from(frame) : null;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._eventEmitter = undefined;
      this._loadStates = undefined;
      this._parentFrame = null;
      this._url = "";
      this._name = "";
      this._detached = false;
      this._childFrames = new Set;
      this._page = undefined;
      this._eventEmitter = new _events.EventEmitter;
      this._eventEmitter.setMaxListeners(0);
      this._parentFrame = Frame.fromNullable(initializer.parentFrame);
      if (this._parentFrame)
        this._parentFrame._childFrames.add(this);
      this._name = initializer.name;
      this._url = initializer.url;
      this._loadStates = new Set(initializer.loadStates);
      this._channel.on("loadstate", (event) => {
        if (event.add) {
          this._loadStates.add(event.add);
          this._eventEmitter.emit("loadstate", event.add);
        }
        if (event.remove)
          this._loadStates.delete(event.remove);
        if (!this._parentFrame && event.add === "load" && this._page)
          this._page.emit(_events2.Events.Page.Load, this._page);
        if (!this._parentFrame && event.add === "domcontentloaded" && this._page)
          this._page.emit(_events2.Events.Page.DOMContentLoaded, this._page);
      });
      this._channel.on("navigated", (event) => {
        this._url = event.url;
        this._name = event.name;
        this._eventEmitter.emit("navigated", event);
        if (!event.error && this._page)
          this._page.emit(_events2.Events.Page.FrameNavigated, this);
      });
    }
    page() {
      return this._page;
    }
    async goto(url, options = {}) {
      const waitUntil = verifyLoadState("waitUntil", options.waitUntil === undefined ? "load" : options.waitUntil);
      return network.Response.fromNullable((await this._channel.goto({
        url,
        ...options,
        waitUntil
      })).response);
    }
    _setupNavigationWaiter(options) {
      const waiter = new _waiter.Waiter(this._page, "");
      if (this._page.isClosed())
        waiter.rejectImmediately(this._page._closeErrorWithReason());
      waiter.rejectOnEvent(this._page, _events2.Events.Page.Close, () => this._page._closeErrorWithReason());
      waiter.rejectOnEvent(this._page, _events2.Events.Page.Crash, new Error("Navigation failed because page crashed!"));
      waiter.rejectOnEvent(this._page, _events2.Events.Page.FrameDetached, new Error("Navigating frame was detached!"), (frame) => frame === this);
      const timeout = this._page._timeoutSettings.navigationTimeout(options);
      waiter.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded.`);
      return waiter;
    }
    async waitForNavigation(options = {}) {
      return await this._page._wrapApiCall(async () => {
        const waitUntil = verifyLoadState("waitUntil", options.waitUntil === undefined ? "load" : options.waitUntil);
        const waiter = this._setupNavigationWaiter(options);
        const toUrl = typeof options.url === "string" ? ` to "${options.url}"` : "";
        waiter.log(`waiting for navigation${toUrl} until "${waitUntil}"`);
        const navigatedEvent = await waiter.waitForEvent(this._eventEmitter, "navigated", (event) => {
          var _this$_page;
          if (event.error)
            return true;
          waiter.log(`  navigated to "${event.url}"`);
          return (0, _network2.urlMatches)((_this$_page = this._page) === null || _this$_page === undefined ? undefined : _this$_page.context()._options.baseURL, event.url, options.url);
        });
        if (navigatedEvent.error) {
          const e = new Error(navigatedEvent.error);
          e.stack = "";
          await waiter.waitForPromise(Promise.reject(e));
        }
        if (!this._loadStates.has(waitUntil)) {
          await waiter.waitForEvent(this._eventEmitter, "loadstate", (s) => {
            waiter.log(`  "${s}" event fired`);
            return s === waitUntil;
          });
        }
        const request = navigatedEvent.newDocument ? network.Request.fromNullable(navigatedEvent.newDocument.request) : null;
        const response = request ? await waiter.waitForPromise(request._finalRequest()._internalResponse()) : null;
        waiter.dispose();
        return response;
      });
    }
    async waitForLoadState(state = "load", options = {}) {
      state = verifyLoadState("state", state);
      return await this._page._wrapApiCall(async () => {
        const waiter = this._setupNavigationWaiter(options);
        if (this._loadStates.has(state)) {
          waiter.log(`  not waiting, "${state}" event already fired`);
        } else {
          await waiter.waitForEvent(this._eventEmitter, "loadstate", (s) => {
            waiter.log(`  "${s}" event fired`);
            return s === state;
          });
        }
        waiter.dispose();
      });
    }
    async waitForURL(url, options = {}) {
      var _this$_page2;
      if ((0, _network2.urlMatches)((_this$_page2 = this._page) === null || _this$_page2 === undefined ? undefined : _this$_page2.context()._options.baseURL, this.url(), url))
        return await this.waitForLoadState(options.waitUntil, options);
      await this.waitForNavigation({
        url,
        ...options
      });
    }
    async frameElement() {
      return _elementHandle.ElementHandle.from((await this._channel.frameElement()).element);
    }
    async evaluateHandle(pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 2);
      const result = await this._channel.evaluateExpressionHandle({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return _jsHandle.JSHandle.from(result.handle);
    }
    async evaluate(pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 2);
      const result = await this._channel.evaluateExpression({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async _evaluateExposeUtilityScript(pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 2);
      const result = await this._channel.evaluateExpression({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        exposeUtilityScript: true,
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async $(selector, options) {
      const result = await this._channel.querySelector({
        selector,
        ...options
      });
      return _elementHandle.ElementHandle.fromNullable(result.element);
    }
    async waitForSelector(selector, options = {}) {
      if (options.visibility)
        throw new Error("options.visibility is not supported, did you mean options.state?");
      if (options.waitFor && options.waitFor !== "visible")
        throw new Error("options.waitFor is not supported, did you mean options.state?");
      const result = await this._channel.waitForSelector({
        selector,
        ...options
      });
      return _elementHandle.ElementHandle.fromNullable(result.element);
    }
    async dispatchEvent(selector, type, eventInit, options = {}) {
      await this._channel.dispatchEvent({
        selector,
        type,
        eventInit: (0, _jsHandle.serializeArgument)(eventInit),
        ...options
      });
    }
    async $eval(selector, pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 3);
      const result = await this._channel.evalOnSelector({
        selector,
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async $$eval(selector, pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 3);
      const result = await this._channel.evalOnSelectorAll({
        selector,
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async $$(selector) {
      const result = await this._channel.querySelectorAll({
        selector
      });
      return result.elements.map((e) => _elementHandle.ElementHandle.from(e));
    }
    async _queryCount(selector) {
      return (await this._channel.queryCount({
        selector
      })).value;
    }
    async content() {
      return (await this._channel.content()).value;
    }
    async setContent(html, options = {}) {
      const waitUntil = verifyLoadState("waitUntil", options.waitUntil === undefined ? "load" : options.waitUntil);
      await this._channel.setContent({
        html,
        ...options,
        waitUntil
      });
    }
    name() {
      return this._name || "";
    }
    url() {
      return this._url;
    }
    parentFrame() {
      return this._parentFrame;
    }
    childFrames() {
      return Array.from(this._childFrames);
    }
    isDetached() {
      return this._detached;
    }
    async addScriptTag(options = {}) {
      const copy = {
        ...options
      };
      if (copy.path) {
        copy.content = (await _fs.default.promises.readFile(copy.path)).toString();
        copy.content = (0, _clientHelper.addSourceUrlToScript)(copy.content, copy.path);
      }
      return _elementHandle.ElementHandle.from((await this._channel.addScriptTag({
        ...copy
      })).element);
    }
    async addStyleTag(options = {}) {
      const copy = {
        ...options
      };
      if (copy.path) {
        copy.content = (await _fs.default.promises.readFile(copy.path)).toString();
        copy.content += "/*# sourceURL=" + copy.path.replace(/\n/g, "") + "*/";
      }
      return _elementHandle.ElementHandle.from((await this._channel.addStyleTag({
        ...copy
      })).element);
    }
    async click(selector, options = {}) {
      return await this._channel.click({
        selector,
        ...options
      });
    }
    async dblclick(selector, options = {}) {
      return await this._channel.dblclick({
        selector,
        ...options
      });
    }
    async dragAndDrop(source, target, options = {}) {
      return await this._channel.dragAndDrop({
        source,
        target,
        ...options
      });
    }
    async tap(selector, options = {}) {
      return await this._channel.tap({
        selector,
        ...options
      });
    }
    async fill(selector, value, options = {}) {
      return await this._channel.fill({
        selector,
        value,
        ...options
      });
    }
    async _highlight(selector) {
      return await this._channel.highlight({
        selector
      });
    }
    locator(selector, options) {
      return new _locator.Locator(this, selector, options);
    }
    getByTestId(testId) {
      return this.locator((0, _locatorUtils.getByTestIdSelector)((0, _locator.testIdAttributeName)(), testId));
    }
    getByAltText(text, options) {
      return this.locator((0, _locatorUtils.getByAltTextSelector)(text, options));
    }
    getByLabel(text, options) {
      return this.locator((0, _locatorUtils.getByLabelSelector)(text, options));
    }
    getByPlaceholder(text, options) {
      return this.locator((0, _locatorUtils.getByPlaceholderSelector)(text, options));
    }
    getByText(text, options) {
      return this.locator((0, _locatorUtils.getByTextSelector)(text, options));
    }
    getByTitle(text, options) {
      return this.locator((0, _locatorUtils.getByTitleSelector)(text, options));
    }
    getByRole(role, options = {}) {
      return this.locator((0, _locatorUtils.getByRoleSelector)(role, options));
    }
    frameLocator(selector) {
      return new _locator.FrameLocator(this, selector);
    }
    async focus(selector, options = {}) {
      await this._channel.focus({
        selector,
        ...options
      });
    }
    async textContent(selector, options = {}) {
      const value = (await this._channel.textContent({
        selector,
        ...options
      })).value;
      return value === undefined ? null : value;
    }
    async innerText(selector, options = {}) {
      return (await this._channel.innerText({
        selector,
        ...options
      })).value;
    }
    async innerHTML(selector, options = {}) {
      return (await this._channel.innerHTML({
        selector,
        ...options
      })).value;
    }
    async getAttribute(selector, name, options = {}) {
      const value = (await this._channel.getAttribute({
        selector,
        name,
        ...options
      })).value;
      return value === undefined ? null : value;
    }
    async inputValue(selector, options = {}) {
      return (await this._channel.inputValue({
        selector,
        ...options
      })).value;
    }
    async isChecked(selector, options = {}) {
      return (await this._channel.isChecked({
        selector,
        ...options
      })).value;
    }
    async isDisabled(selector, options = {}) {
      return (await this._channel.isDisabled({
        selector,
        ...options
      })).value;
    }
    async isEditable(selector, options = {}) {
      return (await this._channel.isEditable({
        selector,
        ...options
      })).value;
    }
    async isEnabled(selector, options = {}) {
      return (await this._channel.isEnabled({
        selector,
        ...options
      })).value;
    }
    async isHidden(selector, options = {}) {
      return (await this._channel.isHidden({
        selector,
        ...options
      })).value;
    }
    async isVisible(selector, options = {}) {
      return (await this._channel.isVisible({
        selector,
        ...options
      })).value;
    }
    async hover(selector, options = {}) {
      await this._channel.hover({
        selector,
        ...options
      });
    }
    async selectOption(selector, values, options = {}) {
      return (await this._channel.selectOption({
        selector,
        ...(0, _elementHandle.convertSelectOptionValues)(values),
        ...options
      })).values;
    }
    async setInputFiles(selector, files, options = {}) {
      const converted = await (0, _elementHandle.convertInputFiles)(files, this.page().context());
      await this._channel.setInputFiles({
        selector,
        ...converted,
        ...options
      });
    }
    async type(selector, text, options = {}) {
      await this._channel.type({
        selector,
        text,
        ...options
      });
    }
    async press(selector, key, options = {}) {
      await this._channel.press({
        selector,
        key,
        ...options
      });
    }
    async check(selector, options = {}) {
      await this._channel.check({
        selector,
        ...options
      });
    }
    async uncheck(selector, options = {}) {
      await this._channel.uncheck({
        selector,
        ...options
      });
    }
    async setChecked(selector, checked, options) {
      if (checked)
        await this.check(selector, options);
      else
        await this.uncheck(selector, options);
    }
    async waitForTimeout(timeout) {
      await this._channel.waitForTimeout({
        timeout
      });
    }
    async waitForFunction(pageFunction, arg, options = {}) {
      if (typeof options.polling === "string")
        (0, _utils.assert)(options.polling === "raf", "Unknown polling option: " + options.polling);
      const result = await this._channel.waitForFunction({
        ...options,
        pollingInterval: options.polling === "raf" ? undefined : options.polling,
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return _jsHandle.JSHandle.from(result.handle);
    }
    async title() {
      return (await this._channel.title()).value;
    }
  }
  exports.Frame = Frame;
});

// node_modules/playwright-core/lib/client/writableStream.js
var require_writableStream = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WritableStream = undefined;
  var _stream = import.meta.require("stream");
  var _channelOwner = require_channelOwner();

  class WritableStream extends _channelOwner.ChannelOwner {
    static from(Stream) {
      return Stream._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
    }
    stream() {
      return new WritableStreamImpl(this._channel);
    }
  }
  exports.WritableStream = WritableStream;

  class WritableStreamImpl extends _stream.Writable {
    constructor(channel) {
      super();
      this._channel = undefined;
      this._channel = channel;
    }
    async _write(chunk, encoding, callback) {
      const error = await this._channel.write({
        binary: typeof chunk === "string" ? Buffer.from(chunk) : chunk
      }).catch((e) => e);
      callback(error || null);
    }
    async _final(callback) {
      const error = await this._channel.close().catch((e) => e);
      callback(error || null);
    }
  }
});

// node_modules/playwright-core/lib/client/elementHandle.js
var require_elementHandle = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var convertSelectOptionValues = function(values) {
    if (values === null)
      return {};
    if (!Array.isArray(values))
      values = [values];
    if (!values.length)
      return {};
    for (let i = 0;i < values.length; i++)
      (0, _utils.assert)(values[i] !== null, `options[${i}]: expected object, got null`);
    if (values[0] instanceof ElementHandle)
      return {
        elements: values.map((v) => v._elementChannel)
      };
    if ((0, _utils.isString)(values[0]))
      return {
        options: values.map((valueOrLabel) => ({
          valueOrLabel
        }))
      };
    return {
      options: values
    };
  };
  var filePayloadExceedsSizeLimit = function(payloads) {
    return payloads.reduce((size, item) => size + (item.buffer ? item.buffer.byteLength : 0), 0) >= _fileUtils.fileUploadSizeLimit;
  };
  async function convertInputFiles(files, context) {
    const items = Array.isArray(files) ? files.slice() : [files];
    if (items.some((item) => typeof item === "string")) {
      if (!items.every((item) => typeof item === "string"))
        throw new Error("File paths cannot be mixed with buffers");
      if (context._connection.isRemote()) {
        const streams = await Promise.all(items.map(async (item) => {
          const lastModifiedMs = (await _fs.default.promises.stat(item)).mtimeMs;
          const {
            writableStream: stream
          } = await context._wrapApiCall(() => context._channel.createTempFile({
            name: _path.default.basename(item),
            lastModifiedMs
          }), true);
          const writable = _writableStream.WritableStream.from(stream);
          await pipelineAsync(_fs.default.createReadStream(item), writable.stream());
          return stream;
        }));
        return {
          streams
        };
      }
      return {
        localPaths: items.map((f) => _path.default.resolve(f))
      };
    }
    const payloads = items;
    if (filePayloadExceedsSizeLimit(payloads))
      throw new Error("Cannot set buffer larger than 50Mb, please write it to a file and pass its path instead.");
    return {
      payloads
    };
  }
  var determineScreenshotType = function(options) {
    if (options.path) {
      const mimeType = _utilsBundle.mime.getType(options.path);
      if (mimeType === "image/png")
        return "png";
      else if (mimeType === "image/jpeg")
        return "jpeg";
      throw new Error(`path: unsupported mime type "${mimeType}"`);
    }
    return options.type;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ElementHandle = undefined;
  exports.convertInputFiles = convertInputFiles;
  exports.convertSelectOptionValues = convertSelectOptionValues;
  exports.determineScreenshotType = determineScreenshotType;
  var _frame = require_frame();
  var _jsHandle = require_jsHandle();
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _utilsBundle = require_utilsBundle();
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _utils = require_utils3();
  var _fileUtils = require_fileUtils();
  var _writableStream = require_writableStream();
  var _stream = import.meta.require("stream");
  var _util = import.meta.require("util");
  var pipelineAsync = (0, _util.promisify)(_stream.pipeline);

  class ElementHandle extends _jsHandle.JSHandle {
    static from(handle) {
      return handle._object;
    }
    static fromNullable(handle) {
      return handle ? ElementHandle.from(handle) : null;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._elementChannel = undefined;
      this._elementChannel = this._channel;
    }
    asElement() {
      return this;
    }
    async ownerFrame() {
      return _frame.Frame.fromNullable((await this._elementChannel.ownerFrame()).frame);
    }
    async contentFrame() {
      return _frame.Frame.fromNullable((await this._elementChannel.contentFrame()).frame);
    }
    async getAttribute(name) {
      const value = (await this._elementChannel.getAttribute({
        name
      })).value;
      return value === undefined ? null : value;
    }
    async inputValue() {
      return (await this._elementChannel.inputValue()).value;
    }
    async textContent() {
      const value = (await this._elementChannel.textContent()).value;
      return value === undefined ? null : value;
    }
    async innerText() {
      return (await this._elementChannel.innerText()).value;
    }
    async innerHTML() {
      return (await this._elementChannel.innerHTML()).value;
    }
    async isChecked() {
      return (await this._elementChannel.isChecked()).value;
    }
    async isDisabled() {
      return (await this._elementChannel.isDisabled()).value;
    }
    async isEditable() {
      return (await this._elementChannel.isEditable()).value;
    }
    async isEnabled() {
      return (await this._elementChannel.isEnabled()).value;
    }
    async isHidden() {
      return (await this._elementChannel.isHidden()).value;
    }
    async isVisible() {
      return (await this._elementChannel.isVisible()).value;
    }
    async dispatchEvent(type, eventInit = {}) {
      await this._elementChannel.dispatchEvent({
        type,
        eventInit: (0, _jsHandle.serializeArgument)(eventInit)
      });
    }
    async scrollIntoViewIfNeeded(options = {}) {
      await this._elementChannel.scrollIntoViewIfNeeded(options);
    }
    async hover(options = {}) {
      await this._elementChannel.hover(options);
    }
    async click(options = {}) {
      return await this._elementChannel.click(options);
    }
    async dblclick(options = {}) {
      return await this._elementChannel.dblclick(options);
    }
    async tap(options = {}) {
      return await this._elementChannel.tap(options);
    }
    async selectOption(values, options = {}) {
      const result = await this._elementChannel.selectOption({
        ...convertSelectOptionValues(values),
        ...options
      });
      return result.values;
    }
    async fill(value, options = {}) {
      return await this._elementChannel.fill({
        value,
        ...options
      });
    }
    async selectText(options = {}) {
      await this._elementChannel.selectText(options);
    }
    async setInputFiles(files, options = {}) {
      const frame = await this.ownerFrame();
      if (!frame)
        throw new Error("Cannot set input files to detached element");
      const converted = await convertInputFiles(files, frame.page().context());
      await this._elementChannel.setInputFiles({
        ...converted,
        ...options
      });
    }
    async focus() {
      await this._elementChannel.focus();
    }
    async type(text, options = {}) {
      await this._elementChannel.type({
        text,
        ...options
      });
    }
    async press(key, options = {}) {
      await this._elementChannel.press({
        key,
        ...options
      });
    }
    async check(options = {}) {
      return await this._elementChannel.check(options);
    }
    async uncheck(options = {}) {
      return await this._elementChannel.uncheck(options);
    }
    async setChecked(checked, options) {
      if (checked)
        await this.check(options);
      else
        await this.uncheck(options);
    }
    async boundingBox() {
      const value = (await this._elementChannel.boundingBox()).value;
      return value === undefined ? null : value;
    }
    async screenshot(options = {}) {
      const copy = {
        ...options,
        mask: undefined
      };
      if (!copy.type)
        copy.type = determineScreenshotType(options);
      if (options.mask) {
        copy.mask = options.mask.map((locator) => ({
          frame: locator._frame._channel,
          selector: locator._selector
        }));
      }
      const result = await this._elementChannel.screenshot(copy);
      if (options.path) {
        await (0, _fileUtils.mkdirIfNeeded)(options.path);
        await _fs.default.promises.writeFile(options.path, result.binary);
      }
      return result.binary;
    }
    async $(selector) {
      return ElementHandle.fromNullable((await this._elementChannel.querySelector({
        selector
      })).element);
    }
    async $$(selector) {
      const result = await this._elementChannel.querySelectorAll({
        selector
      });
      return result.elements.map((h) => ElementHandle.from(h));
    }
    async $eval(selector, pageFunction, arg) {
      const result = await this._elementChannel.evalOnSelector({
        selector,
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async $$eval(selector, pageFunction, arg) {
      const result = await this._elementChannel.evalOnSelectorAll({
        selector,
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async waitForElementState(state, options = {}) {
      return await this._elementChannel.waitForElementState({
        state,
        ...options
      });
    }
    async waitForSelector(selector, options = {}) {
      const result = await this._elementChannel.waitForSelector({
        selector,
        ...options
      });
      return ElementHandle.fromNullable(result.element);
    }
  }
  exports.ElementHandle = ElementHandle;
});

// node_modules/playwright-core/lib/client/fileChooser.js
var require_fileChooser2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FileChooser = undefined;

  class FileChooser {
    constructor(page, elementHandle, isMultiple) {
      this._page = undefined;
      this._elementHandle = undefined;
      this._isMultiple = undefined;
      this._page = page;
      this._elementHandle = elementHandle;
      this._isMultiple = isMultiple;
    }
    element() {
      return this._elementHandle;
    }
    isMultiple() {
      return this._isMultiple;
    }
    page() {
      return this._page;
    }
    async setFiles(files, options) {
      return await this._elementHandle.setInputFiles(files, options);
    }
  }
  exports.FileChooser = FileChooser;
});

// node_modules/playwright-core/lib/client/input.js
var require_input2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Touchscreen = exports.Mouse = exports.Keyboard = undefined;

  class Keyboard {
    constructor(page) {
      this._page = undefined;
      this._page = page;
    }
    async down(key) {
      await this._page._channel.keyboardDown({
        key
      });
    }
    async up(key) {
      await this._page._channel.keyboardUp({
        key
      });
    }
    async insertText(text) {
      await this._page._channel.keyboardInsertText({
        text
      });
    }
    async type(text, options = {}) {
      await this._page._channel.keyboardType({
        text,
        ...options
      });
    }
    async press(key, options = {}) {
      await this._page._channel.keyboardPress({
        key,
        ...options
      });
    }
  }
  exports.Keyboard = Keyboard;

  class Mouse {
    constructor(page) {
      this._page = undefined;
      this._page = page;
    }
    async move(x, y, options = {}) {
      await this._page._channel.mouseMove({
        x,
        y,
        ...options
      });
    }
    async down(options = {}) {
      await this._page._channel.mouseDown({
        ...options
      });
    }
    async up(options = {}) {
      await this._page._channel.mouseUp(options);
    }
    async click(x, y, options = {}) {
      await this._page._channel.mouseClick({
        x,
        y,
        ...options
      });
    }
    async dblclick(x, y, options = {}) {
      await this.click(x, y, {
        ...options,
        clickCount: 2
      });
    }
    async wheel(deltaX, deltaY) {
      await this._page._channel.mouseWheel({
        deltaX,
        deltaY
      });
    }
  }
  exports.Mouse = Mouse;

  class Touchscreen {
    constructor(page) {
      this._page = undefined;
      this._page = page;
    }
    async tap(x, y) {
      await this._page._channel.touchscreenTap({
        x,
        y
      });
    }
  }
  exports.Touchscreen = Touchscreen;
});

// node_modules/playwright-core/lib/client/video.js
var require_video = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Video = undefined;
  var _utils = require_utils3();

  class Video {
    constructor(page, connection) {
      this._artifact = null;
      this._artifactReadyPromise = new _utils.ManualPromise;
      this._isRemote = false;
      this._isRemote = connection.isRemote();
      this._artifact = page._closedOrCrashedScope.safeRace(this._artifactReadyPromise);
    }
    _artifactReady(artifact) {
      this._artifactReadyPromise.resolve(artifact);
    }
    async path() {
      if (this._isRemote)
        throw new Error(`Path is not available when connecting remotely. Use saveAs() to save a local copy.`);
      const artifact = await this._artifact;
      if (!artifact)
        throw new Error("Page did not produce any video frames");
      return artifact._initializer.absolutePath;
    }
    async saveAs(path) {
      const artifact = await this._artifact;
      if (!artifact)
        throw new Error("Page did not produce any video frames");
      return await artifact.saveAs(path);
    }
    async delete() {
      const artifact = await this._artifact;
      if (artifact)
        await artifact.delete();
    }
  }
  exports.Video = Video;
});

// node_modules/playwright-core/lib/client/harRouter.js
var require_harRouter = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.HarRouter = undefined;
  var _debugLogger = require_debugLogger();
  var _Symbol$asyncDispose;
  _Symbol$asyncDispose = Symbol.asyncDispose;

  class HarRouter {
    static async create(localUtils, file, notFoundAction, options) {
      const {
        harId,
        error
      } = await localUtils._channel.harOpen({
        file
      });
      if (error)
        throw new Error(error);
      return new HarRouter(localUtils, harId, notFoundAction, options);
    }
    constructor(localUtils, harId, notFoundAction, options) {
      this._localUtils = undefined;
      this._harId = undefined;
      this._notFoundAction = undefined;
      this._options = undefined;
      this._localUtils = localUtils;
      this._harId = harId;
      this._options = options;
      this._notFoundAction = notFoundAction;
    }
    async _handle(route) {
      const request = route.request();
      const response = await this._localUtils._channel.harLookup({
        harId: this._harId,
        url: request.url(),
        method: request.method(),
        headers: await request.headersArray(),
        postData: request.postDataBuffer() || undefined,
        isNavigationRequest: request.isNavigationRequest()
      });
      if (response.action === "redirect") {
        _debugLogger.debugLogger.log("api", `HAR: ${route.request().url()} redirected to ${response.redirectURL}`);
        await route._redirectNavigationRequest(response.redirectURL);
        return;
      }
      if (response.action === "fulfill") {
        if (response.status === -1)
          return;
        await route.fulfill({
          status: response.status,
          headers: Object.fromEntries(response.headers.map((h) => [h.name, h.value])),
          body: response.body
        });
        return;
      }
      if (response.action === "error")
        _debugLogger.debugLogger.log("api", "HAR: " + response.message);
      if (this._notFoundAction === "abort") {
        await route.abort();
        return;
      }
      await route.fallback();
    }
    async addContextRoute(context) {
      await context.route(this._options.urlMatch || "**/*", (route) => this._handle(route));
    }
    async addPageRoute(page) {
      await page.route(this._options.urlMatch || "**/*", (route) => this._handle(route));
    }
    async[_Symbol$asyncDispose]() {
      await this.dispose();
    }
    dispose() {
      this._localUtils._channel.harClose({
        harId: this._harId
      }).catch(() => {
      });
    }
  }
  exports.HarRouter = HarRouter;
});

// node_modules/playwright-core/lib/client/page.js
var require_page2 = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var trimUrl = function(param) {
    if ((0, _utils.isRegExp)(param))
      return `/${(0, _stringUtils.trimStringWithEllipsis)(param.source, 50)}/${param.flags}`;
    if ((0, _utils.isString)(param))
      return `"${(0, _stringUtils.trimStringWithEllipsis)(param, 50)}"`;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Page = exports.BindingCall = undefined;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _errors = require_errors2();
  var _network = require_network();
  var _timeoutSettings = require_timeoutSettings();
  var _utils = require_utils3();
  var _fileUtils = require_fileUtils();
  var _accessibility = require_accessibility2();
  var _artifact = require_artifact2();
  var _channelOwner = require_channelOwner();
  var _clientHelper = require_clientHelper();
  var _coverage = require_coverage();
  var _download = require_download2();
  var _elementHandle = require_elementHandle();
  var _events = require_events();
  var _fileChooser = require_fileChooser2();
  var _frame = require_frame();
  var _input = require_input2();
  var _jsHandle = require_jsHandle();
  var _stringUtils = require_stringUtils();
  var _network2 = require_network3();
  var _video = require_video();
  var _waiter = require_waiter();
  var _worker = require_worker();
  var _harRouter = require_harRouter();
  var _Symbol$asyncDispose;
  _Symbol$asyncDispose = Symbol.asyncDispose;

  class Page extends _channelOwner.ChannelOwner {
    static from(page) {
      return page._object;
    }
    static fromNullable(page) {
      return page ? Page.from(page) : null;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._browserContext = undefined;
      this._ownedContext = undefined;
      this._mainFrame = undefined;
      this._frames = new Set;
      this._workers = new Set;
      this._closed = false;
      this._closedOrCrashedScope = new _utils.LongStandingScope;
      this._viewportSize = undefined;
      this._routes = [];
      this.accessibility = undefined;
      this.coverage = undefined;
      this.keyboard = undefined;
      this.mouse = undefined;
      this.request = undefined;
      this.touchscreen = undefined;
      this._bindings = new Map;
      this._timeoutSettings = undefined;
      this._video = null;
      this._opener = undefined;
      this._closeReason = undefined;
      this._closeWasCalled = false;
      this._harRouters = [];
      this._locatorHandlers = new Map;
      this._browserContext = parent;
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings(this._browserContext._timeoutSettings);
      this.accessibility = new _accessibility.Accessibility(this._channel);
      this.keyboard = new _input.Keyboard(this);
      this.mouse = new _input.Mouse(this);
      this.request = this._browserContext.request;
      this.touchscreen = new _input.Touchscreen(this);
      this._mainFrame = _frame.Frame.from(initializer.mainFrame);
      this._mainFrame._page = this;
      this._frames.add(this._mainFrame);
      this._viewportSize = initializer.viewportSize || null;
      this._closed = initializer.isClosed;
      this._opener = Page.fromNullable(initializer.opener);
      this._channel.on("bindingCall", ({
        binding
      }) => this._onBinding(BindingCall.from(binding)));
      this._channel.on("close", () => this._onClose());
      this._channel.on("crash", () => this._onCrash());
      this._channel.on("download", ({
        url,
        suggestedFilename,
        artifact
      }) => {
        const artifactObject = _artifact.Artifact.from(artifact);
        this.emit(_events.Events.Page.Download, new _download.Download(this, url, suggestedFilename, artifactObject));
      });
      this._channel.on("fileChooser", ({
        element,
        isMultiple
      }) => this.emit(_events.Events.Page.FileChooser, new _fileChooser.FileChooser(this, _elementHandle.ElementHandle.from(element), isMultiple)));
      this._channel.on("frameAttached", ({
        frame
      }) => this._onFrameAttached(_frame.Frame.from(frame)));
      this._channel.on("frameDetached", ({
        frame
      }) => this._onFrameDetached(_frame.Frame.from(frame)));
      this._channel.on("locatorHandlerTriggered", ({
        uid
      }) => this._onLocatorHandlerTriggered(uid));
      this._channel.on("route", ({
        route
      }) => this._onRoute(_network2.Route.from(route)));
      this._channel.on("video", ({
        artifact
      }) => {
        const artifactObject = _artifact.Artifact.from(artifact);
        this._forceVideo()._artifactReady(artifactObject);
      });
      this._channel.on("webSocket", ({
        webSocket
      }) => this.emit(_events.Events.Page.WebSocket, _network2.WebSocket.from(webSocket)));
      this._channel.on("worker", ({
        worker
      }) => this._onWorker(_worker.Worker.from(worker)));
      this.coverage = new _coverage.Coverage(this._channel);
      this.once(_events.Events.Page.Close, () => this._closedOrCrashedScope.close(this._closeErrorWithReason()));
      this.once(_events.Events.Page.Crash, () => this._closedOrCrashedScope.close(new _errors.TargetClosedError));
      this._setEventToSubscriptionMapping(new Map([[_events.Events.Page.Console, "console"], [_events.Events.Page.Dialog, "dialog"], [_events.Events.Page.Request, "request"], [_events.Events.Page.Response, "response"], [_events.Events.Page.RequestFinished, "requestFinished"], [_events.Events.Page.RequestFailed, "requestFailed"], [_events.Events.Page.FileChooser, "fileChooser"]]));
    }
    _onFrameAttached(frame) {
      frame._page = this;
      this._frames.add(frame);
      if (frame._parentFrame)
        frame._parentFrame._childFrames.add(frame);
      this.emit(_events.Events.Page.FrameAttached, frame);
    }
    _onFrameDetached(frame) {
      this._frames.delete(frame);
      frame._detached = true;
      if (frame._parentFrame)
        frame._parentFrame._childFrames.delete(frame);
      this.emit(_events.Events.Page.FrameDetached, frame);
    }
    async _onRoute(route) {
      route._context = this.context();
      const routeHandlers = this._routes.slice();
      for (const routeHandler of routeHandlers) {
        if (this._closeWasCalled || this._browserContext._closeWasCalled)
          return;
        if (!routeHandler.matches(route.request().url()))
          continue;
        const index = this._routes.indexOf(routeHandler);
        if (index === -1)
          continue;
        if (routeHandler.willExpire())
          this._routes.splice(index, 1);
        const handled = await routeHandler.handle(route);
        if (!this._routes.length)
          this._wrapApiCall(() => this._updateInterceptionPatterns(), true).catch(() => {
          });
        if (handled)
          return;
      }
      await this._browserContext._onRoute(route);
    }
    async _onBinding(bindingCall) {
      const func = this._bindings.get(bindingCall._initializer.name);
      if (func) {
        await bindingCall.call(func);
        return;
      }
      await this._browserContext._onBinding(bindingCall);
    }
    _onWorker(worker) {
      this._workers.add(worker);
      worker._page = this;
      this.emit(_events.Events.Page.Worker, worker);
    }
    _onClose() {
      this._closed = true;
      this._browserContext._pages.delete(this);
      this._browserContext._backgroundPages.delete(this);
      this._disposeHarRouters();
      this.emit(_events.Events.Page.Close, this);
    }
    _onCrash() {
      this.emit(_events.Events.Page.Crash, this);
    }
    context() {
      return this._browserContext;
    }
    async opener() {
      if (!this._opener || this._opener.isClosed())
        return null;
      return this._opener;
    }
    mainFrame() {
      return this._mainFrame;
    }
    frame(frameSelector) {
      const name = (0, _utils.isString)(frameSelector) ? frameSelector : frameSelector.name;
      const url = (0, _utils.isObject)(frameSelector) ? frameSelector.url : undefined;
      (0, _utils.assert)(name || url, "Either name or url matcher should be specified");
      return this.frames().find((f) => {
        if (name)
          return f.name() === name;
        return (0, _network.urlMatches)(this._browserContext._options.baseURL, f.url(), url);
      }) || null;
    }
    frames() {
      return [...this._frames];
    }
    setDefaultNavigationTimeout(timeout) {
      this._timeoutSettings.setDefaultNavigationTimeout(timeout);
      this._wrapApiCall(async () => {
        this._channel.setDefaultNavigationTimeoutNoReply({
          timeout
        }).catch(() => {
        });
      }, true);
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
      this._wrapApiCall(async () => {
        this._channel.setDefaultTimeoutNoReply({
          timeout
        }).catch(() => {
        });
      }, true);
    }
    _forceVideo() {
      if (!this._video)
        this._video = new _video.Video(this, this._connection);
      return this._video;
    }
    video() {
      if (!this._browserContext._options.recordVideo)
        return null;
      return this._forceVideo();
    }
    async $(selector, options) {
      return await this._mainFrame.$(selector, options);
    }
    async waitForSelector(selector, options) {
      return await this._mainFrame.waitForSelector(selector, options);
    }
    async dispatchEvent(selector, type, eventInit, options) {
      return await this._mainFrame.dispatchEvent(selector, type, eventInit, options);
    }
    async evaluateHandle(pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 2);
      return await this._mainFrame.evaluateHandle(pageFunction, arg);
    }
    async $eval(selector, pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 3);
      return await this._mainFrame.$eval(selector, pageFunction, arg);
    }
    async $$eval(selector, pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 3);
      return await this._mainFrame.$$eval(selector, pageFunction, arg);
    }
    async $$(selector) {
      return await this._mainFrame.$$(selector);
    }
    async addScriptTag(options = {}) {
      return await this._mainFrame.addScriptTag(options);
    }
    async addStyleTag(options = {}) {
      return await this._mainFrame.addStyleTag(options);
    }
    async exposeFunction(name, callback) {
      await this._channel.exposeBinding({
        name
      });
      const binding = (source, ...args) => callback(...args);
      this._bindings.set(name, binding);
    }
    async exposeBinding(name, callback, options = {}) {
      await this._channel.exposeBinding({
        name,
        needsHandle: options.handle
      });
      this._bindings.set(name, callback);
    }
    async setExtraHTTPHeaders(headers) {
      (0, _network2.validateHeaders)(headers);
      await this._channel.setExtraHTTPHeaders({
        headers: (0, _utils.headersObjectToArray)(headers)
      });
    }
    url() {
      return this._mainFrame.url();
    }
    async content() {
      return await this._mainFrame.content();
    }
    async setContent(html, options) {
      return await this._mainFrame.setContent(html, options);
    }
    async goto(url, options) {
      return await this._mainFrame.goto(url, options);
    }
    async reload(options = {}) {
      const waitUntil = (0, _frame.verifyLoadState)("waitUntil", options.waitUntil === undefined ? "load" : options.waitUntil);
      return _network2.Response.fromNullable((await this._channel.reload({
        ...options,
        waitUntil
      })).response);
    }
    async addLocatorHandler(locator, handler) {
      if (locator._frame !== this._mainFrame)
        throw new Error(`Locator must belong to the main frame of this page`);
      const {
        uid
      } = await this._channel.registerLocatorHandler({
        selector: locator._selector
      });
      this._locatorHandlers.set(uid, handler);
    }
    async _onLocatorHandlerTriggered(uid) {
      try {
        const handler = this._locatorHandlers.get(uid);
        await (handler === null || handler === undefined ? undefined : handler());
      } finally {
        this._wrapApiCall(() => this._channel.resolveLocatorHandlerNoReply({
          uid
        }), true).catch(() => {
        });
      }
    }
    async waitForLoadState(state, options) {
      return await this._mainFrame.waitForLoadState(state, options);
    }
    async waitForNavigation(options) {
      return await this._mainFrame.waitForNavigation(options);
    }
    async waitForURL(url, options) {
      return await this._mainFrame.waitForURL(url, options);
    }
    async waitForRequest(urlOrPredicate, options = {}) {
      const predicate = async (request) => {
        if ((0, _utils.isString)(urlOrPredicate) || (0, _utils.isRegExp)(urlOrPredicate))
          return (0, _network.urlMatches)(this._browserContext._options.baseURL, request.url(), urlOrPredicate);
        return await urlOrPredicate(request);
      };
      const trimmedUrl = trimUrl(urlOrPredicate);
      const logLine = trimmedUrl ? `waiting for request ${trimmedUrl}` : undefined;
      return await this._waitForEvent(_events.Events.Page.Request, {
        predicate,
        timeout: options.timeout
      }, logLine);
    }
    async waitForResponse(urlOrPredicate, options = {}) {
      const predicate = async (response) => {
        if ((0, _utils.isString)(urlOrPredicate) || (0, _utils.isRegExp)(urlOrPredicate))
          return (0, _network.urlMatches)(this._browserContext._options.baseURL, response.url(), urlOrPredicate);
        return await urlOrPredicate(response);
      };
      const trimmedUrl = trimUrl(urlOrPredicate);
      const logLine = trimmedUrl ? `waiting for response ${trimmedUrl}` : undefined;
      return await this._waitForEvent(_events.Events.Page.Response, {
        predicate,
        timeout: options.timeout
      }, logLine);
    }
    async waitForEvent(event, optionsOrPredicate = {}) {
      return await this._waitForEvent(event, optionsOrPredicate, `waiting for event "${event}"`);
    }
    _closeErrorWithReason() {
      return new _errors.TargetClosedError(this._closeReason || this._browserContext._effectiveCloseReason());
    }
    async _waitForEvent(event, optionsOrPredicate, logLine) {
      return await this._wrapApiCall(async () => {
        const timeout = this._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
        const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
        const waiter = _waiter.Waiter.createForEvent(this, event);
        if (logLine)
          waiter.log(logLine);
        waiter.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
        if (event !== _events.Events.Page.Crash)
          waiter.rejectOnEvent(this, _events.Events.Page.Crash, new Error("Page crashed"));
        if (event !== _events.Events.Page.Close)
          waiter.rejectOnEvent(this, _events.Events.Page.Close, () => this._closeErrorWithReason());
        const result = await waiter.waitForEvent(this, event, predicate);
        waiter.dispose();
        return result;
      });
    }
    async goBack(options = {}) {
      const waitUntil = (0, _frame.verifyLoadState)("waitUntil", options.waitUntil === undefined ? "load" : options.waitUntil);
      return _network2.Response.fromNullable((await this._channel.goBack({
        ...options,
        waitUntil
      })).response);
    }
    async goForward(options = {}) {
      const waitUntil = (0, _frame.verifyLoadState)("waitUntil", options.waitUntil === undefined ? "load" : options.waitUntil);
      return _network2.Response.fromNullable((await this._channel.goForward({
        ...options,
        waitUntil
      })).response);
    }
    async emulateMedia(options = {}) {
      await this._channel.emulateMedia({
        media: options.media === null ? "no-override" : options.media,
        colorScheme: options.colorScheme === null ? "no-override" : options.colorScheme,
        reducedMotion: options.reducedMotion === null ? "no-override" : options.reducedMotion,
        forcedColors: options.forcedColors === null ? "no-override" : options.forcedColors
      });
    }
    async setViewportSize(viewportSize) {
      this._viewportSize = viewportSize;
      await this._channel.setViewportSize({
        viewportSize
      });
    }
    viewportSize() {
      return this._viewportSize;
    }
    async evaluate(pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 2);
      return await this._mainFrame.evaluate(pageFunction, arg);
    }
    async addInitScript(script, arg) {
      const source = await (0, _clientHelper.evaluationScript)(script, arg);
      await this._channel.addInitScript({
        source
      });
    }
    async route(url, handler, options = {}) {
      this._routes.unshift(new _network2.RouteHandler(this._browserContext._options.baseURL, url, handler, options.times));
      await this._updateInterceptionPatterns();
    }
    async routeFromHAR(har, options = {}) {
      if (options.update) {
        await this._browserContext._recordIntoHAR(har, this, options);
        return;
      }
      const harRouter = await _harRouter.HarRouter.create(this._connection.localUtils(), har, options.notFound || "abort", {
        urlMatch: options.url
      });
      this._harRouters.push(harRouter);
      await harRouter.addPageRoute(this);
    }
    _disposeHarRouters() {
      this._harRouters.forEach((router) => router.dispose());
      this._harRouters = [];
    }
    async unrouteAll(options) {
      await this._unrouteInternal(this._routes, [], options === null || options === undefined ? undefined : options.behavior);
      this._disposeHarRouters();
    }
    async unroute(url, handler) {
      const removed = [];
      const remaining = [];
      for (const route of this._routes) {
        if ((0, _utils.urlMatchesEqual)(route.url, url) && (!handler || route.handler === handler))
          removed.push(route);
        else
          remaining.push(route);
      }
      await this._unrouteInternal(removed, remaining, "default");
    }
    async _unrouteInternal(removed, remaining, behavior) {
      this._routes = remaining;
      await this._updateInterceptionPatterns();
      if (!behavior || behavior === "default")
        return;
      const promises = removed.map((routeHandler) => routeHandler.stop(behavior));
      await Promise.all(promises);
    }
    async _updateInterceptionPatterns() {
      const patterns = _network2.RouteHandler.prepareInterceptionPatterns(this._routes);
      await this._channel.setNetworkInterceptionPatterns({
        patterns
      });
    }
    async screenshot(options = {}) {
      const copy = {
        ...options,
        mask: undefined
      };
      if (!copy.type)
        copy.type = (0, _elementHandle.determineScreenshotType)(options);
      if (options.mask) {
        copy.mask = options.mask.map((locator) => ({
          frame: locator._frame._channel,
          selector: locator._selector
        }));
      }
      const result = await this._channel.screenshot(copy);
      if (options.path) {
        await (0, _fileUtils.mkdirIfNeeded)(options.path);
        await _fs.default.promises.writeFile(options.path, result.binary);
      }
      return result.binary;
    }
    async _expectScreenshot(options) {
      const mask = options !== null && options !== undefined && options.mask ? options === null || options === undefined ? undefined : options.mask.map((locator2) => ({
        frame: locator2._frame._channel,
        selector: locator2._selector
      })) : undefined;
      const locator = options.locator ? {
        frame: options.locator._frame._channel,
        selector: options.locator._selector
      } : undefined;
      return await this._channel.expectScreenshot({
        ...options,
        isNot: !!options.isNot,
        locator,
        mask
      });
    }
    async title() {
      return await this._mainFrame.title();
    }
    async bringToFront() {
      await this._channel.bringToFront();
    }
    async[_Symbol$asyncDispose]() {
      await this.close();
    }
    async close(options = {}) {
      this._closeReason = options.reason;
      this._closeWasCalled = true;
      try {
        if (this._ownedContext)
          await this._ownedContext.close();
        else
          await this._channel.close(options);
      } catch (e) {
        if ((0, _errors.isTargetClosedError)(e) && !options.runBeforeUnload)
          return;
        throw e;
      }
    }
    isClosed() {
      return this._closed;
    }
    async click(selector, options) {
      return await this._mainFrame.click(selector, options);
    }
    async dragAndDrop(source, target, options) {
      return await this._mainFrame.dragAndDrop(source, target, options);
    }
    async dblclick(selector, options) {
      return await this._mainFrame.dblclick(selector, options);
    }
    async tap(selector, options) {
      return await this._mainFrame.tap(selector, options);
    }
    async fill(selector, value, options) {
      return await this._mainFrame.fill(selector, value, options);
    }
    locator(selector, options) {
      return this.mainFrame().locator(selector, options);
    }
    getByTestId(testId) {
      return this.mainFrame().getByTestId(testId);
    }
    getByAltText(text, options) {
      return this.mainFrame().getByAltText(text, options);
    }
    getByLabel(text, options) {
      return this.mainFrame().getByLabel(text, options);
    }
    getByPlaceholder(text, options) {
      return this.mainFrame().getByPlaceholder(text, options);
    }
    getByText(text, options) {
      return this.mainFrame().getByText(text, options);
    }
    getByTitle(text, options) {
      return this.mainFrame().getByTitle(text, options);
    }
    getByRole(role, options = {}) {
      return this.mainFrame().getByRole(role, options);
    }
    frameLocator(selector) {
      return this.mainFrame().frameLocator(selector);
    }
    async focus(selector, options) {
      return await this._mainFrame.focus(selector, options);
    }
    async textContent(selector, options) {
      return await this._mainFrame.textContent(selector, options);
    }
    async innerText(selector, options) {
      return await this._mainFrame.innerText(selector, options);
    }
    async innerHTML(selector, options) {
      return await this._mainFrame.innerHTML(selector, options);
    }
    async getAttribute(selector, name, options) {
      return await this._mainFrame.getAttribute(selector, name, options);
    }
    async inputValue(selector, options) {
      return await this._mainFrame.inputValue(selector, options);
    }
    async isChecked(selector, options) {
      return await this._mainFrame.isChecked(selector, options);
    }
    async isDisabled(selector, options) {
      return await this._mainFrame.isDisabled(selector, options);
    }
    async isEditable(selector, options) {
      return await this._mainFrame.isEditable(selector, options);
    }
    async isEnabled(selector, options) {
      return await this._mainFrame.isEnabled(selector, options);
    }
    async isHidden(selector, options) {
      return await this._mainFrame.isHidden(selector, options);
    }
    async isVisible(selector, options) {
      return await this._mainFrame.isVisible(selector, options);
    }
    async hover(selector, options) {
      return await this._mainFrame.hover(selector, options);
    }
    async selectOption(selector, values, options) {
      return await this._mainFrame.selectOption(selector, values, options);
    }
    async setInputFiles(selector, files, options) {
      return await this._mainFrame.setInputFiles(selector, files, options);
    }
    async type(selector, text, options) {
      return await this._mainFrame.type(selector, text, options);
    }
    async press(selector, key, options) {
      return await this._mainFrame.press(selector, key, options);
    }
    async check(selector, options) {
      return await this._mainFrame.check(selector, options);
    }
    async uncheck(selector, options) {
      return await this._mainFrame.uncheck(selector, options);
    }
    async setChecked(selector, checked, options) {
      return await this._mainFrame.setChecked(selector, checked, options);
    }
    async waitForTimeout(timeout) {
      return await this._mainFrame.waitForTimeout(timeout);
    }
    async waitForFunction(pageFunction, arg, options) {
      return await this._mainFrame.waitForFunction(pageFunction, arg, options);
    }
    workers() {
      return [...this._workers];
    }
    async pause() {
      var _this$_instrumentatio;
      if (import.meta.require("inspector").url())
        return;
      const defaultNavigationTimeout = this._browserContext._timeoutSettings.defaultNavigationTimeout();
      const defaultTimeout = this._browserContext._timeoutSettings.defaultTimeout();
      this._browserContext.setDefaultNavigationTimeout(0);
      this._browserContext.setDefaultTimeout(0);
      (_this$_instrumentatio = this._instrumentation) === null || _this$_instrumentatio === undefined || _this$_instrumentatio.onWillPause();
      await this._closedOrCrashedScope.safeRace(this.context()._channel.pause());
      this._browserContext.setDefaultNavigationTimeout(defaultNavigationTimeout);
      this._browserContext.setDefaultTimeout(defaultTimeout);
    }
    async pdf(options = {}) {
      const transportOptions = {
        ...options
      };
      if (transportOptions.margin)
        transportOptions.margin = {
          ...transportOptions.margin
        };
      if (typeof options.width === "number")
        transportOptions.width = options.width + "px";
      if (typeof options.height === "number")
        transportOptions.height = options.height + "px";
      for (const margin of ["top", "right", "bottom", "left"]) {
        const index = margin;
        if (options.margin && typeof options.margin[index] === "number")
          transportOptions.margin[index] = transportOptions.margin[index] + "px";
      }
      const result = await this._channel.pdf(transportOptions);
      if (options.path) {
        await _fs.default.promises.mkdir(_path.default.dirname(options.path), {
          recursive: true
        });
        await _fs.default.promises.writeFile(options.path, result.pdf);
      }
      return result.pdf;
    }
  }
  exports.Page = Page;

  class BindingCall extends _channelOwner.ChannelOwner {
    static from(channel) {
      return channel._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
    }
    async call(func) {
      try {
        const frame = _frame.Frame.from(this._initializer.frame);
        const source = {
          context: frame._page.context(),
          page: frame._page,
          frame
        };
        let result;
        if (this._initializer.handle)
          result = await func(source, _jsHandle.JSHandle.from(this._initializer.handle));
        else
          result = await func(source, ...this._initializer.args.map(_jsHandle.parseResult));
        this._channel.resolve({
          result: (0, _jsHandle.serializeArgument)(result)
        }).catch(() => {
        });
      } catch (e) {
        this._channel.reject({
          error: (0, _errors.serializeError)(e)
        }).catch(() => {
        });
      }
    }
  }
  exports.BindingCall = BindingCall;
});

// node_modules/playwright-core/lib/client/cdpSession.js
var require_cdpSession = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CDPSession = undefined;
  var _channelOwner = require_channelOwner();

  class CDPSession extends _channelOwner.ChannelOwner {
    static from(cdpSession) {
      return cdpSession._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._channel.on("event", ({
        method,
        params
      }) => {
        this.emit(method, params);
      });
      this.on = super.on;
      this.addListener = super.addListener;
      this.off = super.removeListener;
      this.removeListener = super.removeListener;
      this.once = super.once;
    }
    async send(method, params) {
      const result = await this._channel.send({
        method,
        params
      });
      return result.result;
    }
    async detach() {
      return await this._channel.detach();
    }
  }
  exports.CDPSession = CDPSession;
});

// node_modules/playwright-core/lib/client/consoleMessage.js
var require_consoleMessage = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ConsoleMessage = undefined;
  var util = _interopRequireWildcard(import.meta.require("util"));
  var _jsHandle = require_jsHandle();
  var _page = require_page2();
  var _util$inspect$custom;
  _util$inspect$custom = util.inspect.custom;

  class ConsoleMessage {
    constructor(event) {
      this._page = undefined;
      this._event = undefined;
      this._page = "page" in event && event.page ? _page.Page.from(event.page) : null;
      this._event = event;
    }
    page() {
      return this._page;
    }
    type() {
      return this._event.type;
    }
    text() {
      return this._event.text;
    }
    args() {
      return this._event.args.map(_jsHandle.JSHandle.from);
    }
    location() {
      return this._event.location;
    }
    [_util$inspect$custom]() {
      return this.text();
    }
  }
  exports.ConsoleMessage = ConsoleMessage;
});

// node_modules/playwright-core/lib/client/dialog.js
var require_dialog2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Dialog = undefined;
  var _channelOwner = require_channelOwner();
  var _page = require_page2();

  class Dialog extends _channelOwner.ChannelOwner {
    static from(dialog) {
      return dialog._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._page = undefined;
      this._page = _page.Page.fromNullable(initializer.page);
    }
    page() {
      return this._page;
    }
    type() {
      return this._initializer.type;
    }
    message() {
      return this._initializer.message;
    }
    defaultValue() {
      return this._initializer.defaultValue;
    }
    async accept(promptText) {
      await this._channel.accept({
        promptText
      });
    }
    async dismiss() {
      await this._channel.dismiss();
    }
  }
  exports.Dialog = Dialog;
});

// node_modules/playwright-core/lib/client/webError.js
var require_webError = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WebError = undefined;

  class WebError {
    constructor(page, error) {
      this._page = undefined;
      this._error = undefined;
      this._page = page;
      this._error = error;
    }
    page() {
      return this._page;
    }
    error() {
      return this._error;
    }
  }
  exports.WebError = WebError;
});

// node_modules/playwright-core/lib/client/browserContext.js
var require_browserContext2 = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  async function prepareStorageState(options) {
    if (typeof options.storageState !== "string")
      return options.storageState;
    try {
      return JSON.parse(await _fs.default.promises.readFile(options.storageState, "utf8"));
    } catch (e) {
      (0, _stackTrace.rewriteErrorMessage)(e, `Error reading storage state from ${options.storageState}:\n` + e.message);
      throw e;
    }
  }
  var prepareRecordHarOptions = function(options) {
    if (!options)
      return;
    return {
      path: options.path,
      content: options.content || (options.omitContent ? "omit" : undefined),
      urlGlob: (0, _utils.isString)(options.urlFilter) ? options.urlFilter : undefined,
      urlRegexSource: (0, _utils.isRegExp)(options.urlFilter) ? options.urlFilter.source : undefined,
      urlRegexFlags: (0, _utils.isRegExp)(options.urlFilter) ? options.urlFilter.flags : undefined,
      mode: options.mode
    };
  };
  async function prepareBrowserContextParams(options) {
    if (options.videoSize && !options.videosPath)
      throw new Error(`"videoSize" option requires "videosPath" to be specified`);
    if (options.extraHTTPHeaders)
      network.validateHeaders(options.extraHTTPHeaders);
    const contextParams = {
      ...options,
      viewport: options.viewport === null ? undefined : options.viewport,
      noDefaultViewport: options.viewport === null,
      extraHTTPHeaders: options.extraHTTPHeaders ? (0, _utils.headersObjectToArray)(options.extraHTTPHeaders) : undefined,
      storageState: await prepareStorageState(options),
      serviceWorkers: options.serviceWorkers,
      recordHar: prepareRecordHarOptions(options.recordHar),
      colorScheme: options.colorScheme === null ? "no-override" : options.colorScheme,
      reducedMotion: options.reducedMotion === null ? "no-override" : options.reducedMotion,
      forcedColors: options.forcedColors === null ? "no-override" : options.forcedColors,
      acceptDownloads: toAcceptDownloadsProtocol(options.acceptDownloads)
    };
    if (!contextParams.recordVideo && options.videosPath) {
      contextParams.recordVideo = {
        dir: options.videosPath,
        size: options.videoSize
      };
    }
    if (contextParams.recordVideo && contextParams.recordVideo.dir)
      contextParams.recordVideo.dir = _path.default.resolve(process.cwd(), contextParams.recordVideo.dir);
    return contextParams;
  }
  var toAcceptDownloadsProtocol = function(acceptDownloads) {
    if (acceptDownloads === undefined)
      return;
    if (acceptDownloads)
      return "accept";
    return "deny";
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BrowserContext = undefined;
  exports.prepareBrowserContextParams = prepareBrowserContextParams;
  var _page = require_page2();
  var _frame = require_frame();
  var network = _interopRequireWildcard(require_network3());
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _channelOwner = require_channelOwner();
  var _clientHelper = require_clientHelper();
  var _browser = require_browser6();
  var _worker = require_worker();
  var _events = require_events();
  var _timeoutSettings = require_timeoutSettings();
  var _waiter = require_waiter();
  var _utils = require_utils3();
  var _fileUtils = require_fileUtils();
  var _cdpSession = require_cdpSession();
  var _tracing = require_tracing2();
  var _artifact = require_artifact2();
  var _fetch = require_fetch2();
  var _stackTrace = require_stackTrace();
  var _harRouter = require_harRouter();
  var _consoleMessage = require_consoleMessage();
  var _dialog = require_dialog2();
  var _webError = require_webError();
  var _errors = require_errors2();
  var _Symbol$asyncDispose;
  _Symbol$asyncDispose = Symbol.asyncDispose;

  class BrowserContext extends _channelOwner.ChannelOwner {
    static from(context) {
      return context._object;
    }
    static fromNullable(context) {
      return context ? BrowserContext.from(context) : null;
    }
    constructor(parent, type, guid, initializer) {
      var _this$_browser, _this$_browser2;
      super(parent, type, guid, initializer);
      this._pages = new Set;
      this._routes = [];
      this._browser = null;
      this._browserType = undefined;
      this._bindings = new Map;
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings;
      this._ownerPage = undefined;
      this._closedPromise = undefined;
      this._options = {};
      this.request = undefined;
      this.tracing = undefined;
      this._backgroundPages = new Set;
      this._serviceWorkers = new Set;
      this._isChromium = undefined;
      this._harRecorders = new Map;
      this._closeWasCalled = false;
      this._closeReason = undefined;
      this._harRouters = [];
      if (parent instanceof _browser.Browser)
        this._browser = parent;
      (_this$_browser = this._browser) === null || _this$_browser === undefined || _this$_browser._contexts.add(this);
      this._isChromium = ((_this$_browser2 = this._browser) === null || _this$_browser2 === undefined ? undefined : _this$_browser2._name) === "chromium";
      this.tracing = _tracing.Tracing.from(initializer.tracing);
      this.request = _fetch.APIRequestContext.from(initializer.requestContext);
      this._channel.on("bindingCall", ({
        binding
      }) => this._onBinding(_page.BindingCall.from(binding)));
      this._channel.on("close", () => this._onClose());
      this._channel.on("page", ({
        page
      }) => this._onPage(_page.Page.from(page)));
      this._channel.on("route", ({
        route
      }) => this._onRoute(network.Route.from(route)));
      this._channel.on("backgroundPage", ({
        page
      }) => {
        const backgroundPage = _page.Page.from(page);
        this._backgroundPages.add(backgroundPage);
        this.emit(_events.Events.BrowserContext.BackgroundPage, backgroundPage);
      });
      this._channel.on("serviceWorker", ({
        worker
      }) => {
        const serviceWorker = _worker.Worker.from(worker);
        serviceWorker._context = this;
        this._serviceWorkers.add(serviceWorker);
        this.emit(_events.Events.BrowserContext.ServiceWorker, serviceWorker);
      });
      this._channel.on("console", (event) => {
        const consoleMessage = new _consoleMessage.ConsoleMessage(event);
        this.emit(_events.Events.BrowserContext.Console, consoleMessage);
        const page = consoleMessage.page();
        if (page)
          page.emit(_events.Events.Page.Console, consoleMessage);
      });
      this._channel.on("pageError", ({
        error,
        page
      }) => {
        const pageObject = _page.Page.from(page);
        const parsedError = (0, _errors.parseError)(error);
        this.emit(_events.Events.BrowserContext.WebError, new _webError.WebError(pageObject, parsedError));
        if (pageObject)
          pageObject.emit(_events.Events.Page.PageError, parsedError);
      });
      this._channel.on("dialog", ({
        dialog
      }) => {
        const dialogObject = _dialog.Dialog.from(dialog);
        let hasListeners = this.emit(_events.Events.BrowserContext.Dialog, dialogObject);
        const page = dialogObject.page();
        if (page)
          hasListeners = page.emit(_events.Events.Page.Dialog, dialogObject) || hasListeners;
        if (!hasListeners) {
          if (dialogObject.type() === "beforeunload")
            dialog.accept({}).catch(() => {
            });
          else
            dialog.dismiss().catch(() => {
            });
        }
      });
      this._channel.on("request", ({
        request,
        page
      }) => this._onRequest(network.Request.from(request), _page.Page.fromNullable(page)));
      this._channel.on("requestFailed", ({
        request,
        failureText,
        responseEndTiming,
        page
      }) => this._onRequestFailed(network.Request.from(request), responseEndTiming, failureText, _page.Page.fromNullable(page)));
      this._channel.on("requestFinished", (params) => this._onRequestFinished(params));
      this._channel.on("response", ({
        response,
        page
      }) => this._onResponse(network.Response.from(response), _page.Page.fromNullable(page)));
      this._closedPromise = new Promise((f) => this.once(_events.Events.BrowserContext.Close, f));
      this._setEventToSubscriptionMapping(new Map([[_events.Events.BrowserContext.Console, "console"], [_events.Events.BrowserContext.Dialog, "dialog"], [_events.Events.BrowserContext.Request, "request"], [_events.Events.BrowserContext.Response, "response"], [_events.Events.BrowserContext.RequestFinished, "requestFinished"], [_events.Events.BrowserContext.RequestFailed, "requestFailed"]]));
    }
    _setOptions(contextOptions, browserOptions) {
      this._options = contextOptions;
      if (this._options.recordHar)
        this._harRecorders.set("", {
          path: this._options.recordHar.path,
          content: this._options.recordHar.content
        });
      this.tracing._tracesDir = browserOptions.tracesDir;
    }
    _onPage(page) {
      this._pages.add(page);
      this.emit(_events.Events.BrowserContext.Page, page);
      if (page._opener && !page._opener.isClosed())
        page._opener.emit(_events.Events.Page.Popup, page);
    }
    _onRequest(request, page) {
      this.emit(_events.Events.BrowserContext.Request, request);
      if (page)
        page.emit(_events.Events.Page.Request, request);
    }
    _onResponse(response, page) {
      this.emit(_events.Events.BrowserContext.Response, response);
      if (page)
        page.emit(_events.Events.Page.Response, response);
    }
    _onRequestFailed(request, responseEndTiming, failureText, page) {
      request._failureText = failureText || null;
      request._setResponseEndTiming(responseEndTiming);
      this.emit(_events.Events.BrowserContext.RequestFailed, request);
      if (page)
        page.emit(_events.Events.Page.RequestFailed, request);
    }
    _onRequestFinished(params) {
      const {
        responseEndTiming
      } = params;
      const request = network.Request.from(params.request);
      const response = network.Response.fromNullable(params.response);
      const page = _page.Page.fromNullable(params.page);
      request._setResponseEndTiming(responseEndTiming);
      this.emit(_events.Events.BrowserContext.RequestFinished, request);
      if (page)
        page.emit(_events.Events.Page.RequestFinished, request);
      if (response)
        response._finishedPromise.resolve(null);
    }
    async _onRoute(route) {
      route._context = this;
      const page = route.request()._safePage();
      const routeHandlers = this._routes.slice();
      for (const routeHandler of routeHandlers) {
        if (page !== null && page !== undefined && page._closeWasCalled || this._closeWasCalled)
          return;
        if (!routeHandler.matches(route.request().url()))
          continue;
        const index = this._routes.indexOf(routeHandler);
        if (index === -1)
          continue;
        if (routeHandler.willExpire())
          this._routes.splice(index, 1);
        const handled = await routeHandler.handle(route);
        if (!this._routes.length)
          this._wrapApiCall(() => this._updateInterceptionPatterns(), true).catch(() => {
          });
        if (handled)
          return;
      }
      await route._innerContinue(true).catch(() => {
      });
    }
    async _onBinding(bindingCall) {
      const func = this._bindings.get(bindingCall._initializer.name);
      if (!func)
        return;
      await bindingCall.call(func);
    }
    setDefaultNavigationTimeout(timeout) {
      this._timeoutSettings.setDefaultNavigationTimeout(timeout);
      this._wrapApiCall(async () => {
        this._channel.setDefaultNavigationTimeoutNoReply({
          timeout
        }).catch(() => {
        });
      }, true);
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
      this._wrapApiCall(async () => {
        this._channel.setDefaultTimeoutNoReply({
          timeout
        }).catch(() => {
        });
      }, true);
    }
    browser() {
      return this._browser;
    }
    pages() {
      return [...this._pages];
    }
    async newPage() {
      if (this._ownerPage)
        throw new Error("Please use browser.newContext()");
      return _page.Page.from((await this._channel.newPage()).page);
    }
    async cookies(urls) {
      if (!urls)
        urls = [];
      if (urls && typeof urls === "string")
        urls = [urls];
      return (await this._channel.cookies({
        urls
      })).cookies;
    }
    async addCookies(cookies) {
      await this._channel.addCookies({
        cookies
      });
    }
    async clearCookies() {
      await this._channel.clearCookies();
    }
    async grantPermissions(permissions, options) {
      await this._channel.grantPermissions({
        permissions,
        ...options
      });
    }
    async clearPermissions() {
      await this._channel.clearPermissions();
    }
    async setGeolocation(geolocation) {
      await this._channel.setGeolocation({
        geolocation: geolocation || undefined
      });
    }
    async setExtraHTTPHeaders(headers) {
      network.validateHeaders(headers);
      await this._channel.setExtraHTTPHeaders({
        headers: (0, _utils.headersObjectToArray)(headers)
      });
    }
    async setOffline(offline) {
      await this._channel.setOffline({
        offline
      });
    }
    async setHTTPCredentials(httpCredentials) {
      await this._channel.setHTTPCredentials({
        httpCredentials: httpCredentials || undefined
      });
    }
    async addInitScript(script, arg) {
      const source = await (0, _clientHelper.evaluationScript)(script, arg);
      await this._channel.addInitScript({
        source
      });
    }
    async exposeBinding(name, callback, options = {}) {
      await this._channel.exposeBinding({
        name,
        needsHandle: options.handle
      });
      this._bindings.set(name, callback);
    }
    async exposeFunction(name, callback) {
      await this._channel.exposeBinding({
        name
      });
      const binding = (source, ...args) => callback(...args);
      this._bindings.set(name, binding);
    }
    async route(url, handler, options = {}) {
      this._routes.unshift(new network.RouteHandler(this._options.baseURL, url, handler, options.times));
      await this._updateInterceptionPatterns();
    }
    async _recordIntoHAR(har, page, options = {}) {
      var _options$updateConten, _options$updateMode, _options$updateConten2;
      const {
        harId
      } = await this._channel.harStart({
        page: page === null || page === undefined ? undefined : page._channel,
        options: prepareRecordHarOptions({
          path: har,
          content: (_options$updateConten = options.updateContent) !== null && _options$updateConten !== undefined ? _options$updateConten : "attach",
          mode: (_options$updateMode = options.updateMode) !== null && _options$updateMode !== undefined ? _options$updateMode : "minimal",
          urlFilter: options.url
        })
      });
      this._harRecorders.set(harId, {
        path: har,
        content: (_options$updateConten2 = options.updateContent) !== null && _options$updateConten2 !== undefined ? _options$updateConten2 : "attach"
      });
    }
    async routeFromHAR(har, options = {}) {
      if (options.update) {
        await this._recordIntoHAR(har, null, options);
        return;
      }
      const harRouter = await _harRouter.HarRouter.create(this._connection.localUtils(), har, options.notFound || "abort", {
        urlMatch: options.url
      });
      this._harRouters.push(harRouter);
      await harRouter.addContextRoute(this);
    }
    _disposeHarRouters() {
      this._harRouters.forEach((router) => router.dispose());
      this._harRouters = [];
    }
    async unrouteAll(options) {
      await this._unrouteInternal(this._routes, [], options === null || options === undefined ? undefined : options.behavior);
      this._disposeHarRouters();
    }
    async unroute(url, handler) {
      const removed = [];
      const remaining = [];
      for (const route of this._routes) {
        if ((0, _utils.urlMatchesEqual)(route.url, url) && (!handler || route.handler === handler))
          removed.push(route);
        else
          remaining.push(route);
      }
      await this._unrouteInternal(removed, remaining, "default");
    }
    async _unrouteInternal(removed, remaining, behavior) {
      this._routes = remaining;
      await this._updateInterceptionPatterns();
      if (!behavior || behavior === "default")
        return;
      const promises = removed.map((routeHandler) => routeHandler.stop(behavior));
      await Promise.all(promises);
    }
    async _updateInterceptionPatterns() {
      const patterns = network.RouteHandler.prepareInterceptionPatterns(this._routes);
      await this._channel.setNetworkInterceptionPatterns({
        patterns
      });
    }
    _effectiveCloseReason() {
      var _this$_browser3;
      return this._closeReason || ((_this$_browser3 = this._browser) === null || _this$_browser3 === undefined ? undefined : _this$_browser3._closeReason);
    }
    async waitForEvent(event, optionsOrPredicate = {}) {
      return await this._wrapApiCall(async () => {
        const timeout = this._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
        const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
        const waiter = _waiter.Waiter.createForEvent(this, event);
        waiter.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
        if (event !== _events.Events.BrowserContext.Close)
          waiter.rejectOnEvent(this, _events.Events.BrowserContext.Close, () => new _errors.TargetClosedError(this._effectiveCloseReason()));
        const result = await waiter.waitForEvent(this, event, predicate);
        waiter.dispose();
        return result;
      });
    }
    async storageState(options = {}) {
      const state = await this._channel.storageState();
      if (options.path) {
        await (0, _fileUtils.mkdirIfNeeded)(options.path);
        await _fs.default.promises.writeFile(options.path, JSON.stringify(state, undefined, 2), "utf8");
      }
      return state;
    }
    backgroundPages() {
      return [...this._backgroundPages];
    }
    serviceWorkers() {
      return [...this._serviceWorkers];
    }
    async newCDPSession(page) {
      if (!(page instanceof _page.Page) && !(page instanceof _frame.Frame))
        throw new Error("page: expected Page or Frame");
      const result = await this._channel.newCDPSession(page instanceof _page.Page ? {
        page: page._channel
      } : {
        frame: page._channel
      });
      return _cdpSession.CDPSession.from(result.session);
    }
    _onClose() {
      var _this$_browserType;
      if (this._browser)
        this._browser._contexts.delete(this);
      (_this$_browserType = this._browserType) === null || _this$_browserType === undefined || (_this$_browserType = _this$_browserType._contexts) === null || _this$_browserType === undefined || _this$_browserType.delete(this);
      this._disposeHarRouters();
      this.emit(_events.Events.BrowserContext.Close, this);
    }
    async[_Symbol$asyncDispose]() {
      await this.close();
    }
    async close(options = {}) {
      if (this._closeWasCalled)
        return;
      this._closeReason = options.reason;
      this._closeWasCalled = true;
      await this._wrapApiCall(async () => {
        var _this$_browserType2;
        await ((_this$_browserType2 = this._browserType) === null || _this$_browserType2 === undefined ? undefined : _this$_browserType2._willCloseContext(this));
        for (const [harId, harParams] of this._harRecorders) {
          const har = await this._channel.harExport({
            harId
          });
          const artifact = _artifact.Artifact.from(har.artifact);
          const isCompressed = harParams.content === "attach" || harParams.path.endsWith(".zip");
          const needCompressed = harParams.path.endsWith(".zip");
          if (isCompressed && !needCompressed) {
            await artifact.saveAs(harParams.path + ".tmp");
            await this._connection.localUtils()._channel.harUnzip({
              zipFile: harParams.path + ".tmp",
              harFile: harParams.path
            });
          } else {
            await artifact.saveAs(harParams.path);
          }
          await artifact.delete();
        }
      }, true);
      await this._channel.close(options);
      await this._closedPromise;
    }
    async _enableRecorder(params) {
      await this._channel.recorderSupplementEnable(params);
    }
  }
  exports.BrowserContext = BrowserContext;
});

// node_modules/playwright-core/lib/client/browser.js
var require_browser6 = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Browser = undefined;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _browserContext = require_browserContext2();
  var _channelOwner = require_channelOwner();
  var _events = require_events();
  var _errors = require_errors2();
  var _cdpSession = require_cdpSession();
  var _artifact = require_artifact2();
  var _utils = require_utils3();
  var _Symbol$asyncDispose;
  _Symbol$asyncDispose = Symbol.asyncDispose;

  class Browser extends _channelOwner.ChannelOwner {
    static from(browser) {
      return browser._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._contexts = new Set;
      this._isConnected = true;
      this._closedPromise = undefined;
      this._shouldCloseConnectionOnClose = false;
      this._browserType = undefined;
      this._options = {};
      this._name = undefined;
      this._path = undefined;
      this._connectHeaders = undefined;
      this._closeReason = undefined;
      this._name = initializer.name;
      this._channel.on("close", () => this._didClose());
      this._closedPromise = new Promise((f) => this.once(_events.Events.Browser.Disconnected, f));
    }
    browserType() {
      return this._browserType;
    }
    async newContext(options = {}) {
      return await this._innerNewContext(options, false);
    }
    async _newContextForReuse(options = {}) {
      return await this._wrapApiCall(async () => {
        for (const context of this._contexts) {
          await this._browserType._willCloseContext(context);
          for (const page of context.pages())
            page._onClose();
          context._onClose();
        }
        return await this._innerNewContext(options, true);
      }, true);
    }
    async _stopPendingOperations(reason) {
      return await this._wrapApiCall(async () => {
        await this._channel.stopPendingOperations({
          reason
        });
      }, true);
    }
    async _innerNewContext(options = {}, forReuse) {
      options = {
        ...this._browserType._defaultContextOptions,
        ...options
      };
      const contextOptions = await (0, _browserContext.prepareBrowserContextParams)(options);
      const response = forReuse ? await this._channel.newContextForReuse(contextOptions) : await this._channel.newContext(contextOptions);
      const context = _browserContext.BrowserContext.from(response.context);
      await this._browserType._didCreateContext(context, contextOptions, this._options, options.logger || this._logger);
      return context;
    }
    contexts() {
      return [...this._contexts];
    }
    version() {
      return this._initializer.version;
    }
    async newPage(options = {}) {
      return await this._wrapApiCall(async () => {
        const context = await this.newContext(options);
        const page = await context.newPage();
        page._ownedContext = context;
        context._ownerPage = page;
        return page;
      });
    }
    isConnected() {
      return this._isConnected;
    }
    async newBrowserCDPSession() {
      return _cdpSession.CDPSession.from((await this._channel.newBrowserCDPSession()).session);
    }
    async startTracing(page, options = {}) {
      this._path = options.path;
      await this._channel.startTracing({
        ...options,
        page: page ? page._channel : undefined
      });
    }
    async stopTracing() {
      const artifact = _artifact.Artifact.from((await this._channel.stopTracing()).artifact);
      const buffer = await artifact.readIntoBuffer();
      await artifact.delete();
      if (this._path) {
        await (0, _utils.mkdirIfNeeded)(this._path);
        await _fs.default.promises.writeFile(this._path, buffer);
        this._path = undefined;
      }
      return buffer;
    }
    async[_Symbol$asyncDispose]() {
      await this.close();
    }
    async close(options = {}) {
      this._closeReason = options.reason;
      try {
        if (this._shouldCloseConnectionOnClose)
          this._connection.close();
        else
          await this._channel.close(options);
        await this._closedPromise;
      } catch (e) {
        if ((0, _errors.isTargetClosedError)(e))
          return;
        throw e;
      }
    }
    _didClose() {
      this._isConnected = false;
      this.emit(_events.Events.Browser.Disconnected, this);
    }
  }
  exports.Browser = Browser;
});

// node_modules/playwright-core/lib/client/browserType.js
var require_browserType2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BrowserType = undefined;
  var _browser3 = require_browser6();
  var _browserContext = require_browserContext2();
  var _channelOwner = require_channelOwner();
  var _connection = require_connection();
  var _events = require_events();
  var _clientHelper = require_clientHelper();
  var _utils = require_utils3();
  var _timeoutRunner = require_timeoutRunner();

  class BrowserType extends _channelOwner.ChannelOwner {
    constructor(...args) {
      super(...args);
      this._serverLauncher = undefined;
      this._contexts = new Set;
      this._playwright = undefined;
      this._defaultContextOptions = undefined;
      this._defaultContextTimeout = undefined;
      this._defaultContextNavigationTimeout = undefined;
      this._defaultLaunchOptions = undefined;
    }
    static from(browserType) {
      return browserType._object;
    }
    executablePath() {
      if (!this._initializer.executablePath)
        throw new Error("Browser is not supported on current platform");
      return this._initializer.executablePath;
    }
    name() {
      return this._initializer.name;
    }
    async launch(options = {}) {
      var _this$_defaultLaunchO;
      (0, _utils.assert)(!options.userDataDir, "userDataDir option is not supported in `browserType.launch`. Use `browserType.launchPersistentContext` instead");
      (0, _utils.assert)(!options.port, "Cannot specify a port without launching as a server.");
      const logger = options.logger || ((_this$_defaultLaunchO = this._defaultLaunchOptions) === null || _this$_defaultLaunchO === undefined ? undefined : _this$_defaultLaunchO.logger);
      options = {
        ...this._defaultLaunchOptions,
        ...options
      };
      const launchOptions = {
        ...options,
        ignoreDefaultArgs: Array.isArray(options.ignoreDefaultArgs) ? options.ignoreDefaultArgs : undefined,
        ignoreAllDefaultArgs: !!options.ignoreDefaultArgs && !Array.isArray(options.ignoreDefaultArgs),
        env: options.env ? (0, _clientHelper.envObjectToArray)(options.env) : undefined
      };
      return await this._wrapApiCall(async () => {
        const browser = _browser3.Browser.from((await this._channel.launch(launchOptions)).browser);
        this._didLaunchBrowser(browser, options, logger);
        return browser;
      });
    }
    async launchServer(options = {}) {
      if (!this._serverLauncher)
        throw new Error("Launching server is not supported");
      options = {
        ...this._defaultLaunchOptions,
        ...options
      };
      return await this._serverLauncher.launchServer(options);
    }
    async launchPersistentContext(userDataDir, options = {}) {
      var _this$_defaultLaunchO2;
      const logger = options.logger || ((_this$_defaultLaunchO2 = this._defaultLaunchOptions) === null || _this$_defaultLaunchO2 === undefined ? undefined : _this$_defaultLaunchO2.logger);
      (0, _utils.assert)(!options.port, "Cannot specify a port without launching as a server.");
      options = {
        ...this._defaultLaunchOptions,
        ...this._defaultContextOptions,
        ...options
      };
      const contextParams = await (0, _browserContext.prepareBrowserContextParams)(options);
      const persistentParams = {
        ...contextParams,
        ignoreDefaultArgs: Array.isArray(options.ignoreDefaultArgs) ? options.ignoreDefaultArgs : undefined,
        ignoreAllDefaultArgs: !!options.ignoreDefaultArgs && !Array.isArray(options.ignoreDefaultArgs),
        env: options.env ? (0, _clientHelper.envObjectToArray)(options.env) : undefined,
        channel: options.channel,
        userDataDir
      };
      return await this._wrapApiCall(async () => {
        const result = await this._channel.launchPersistentContext(persistentParams);
        const context = _browserContext.BrowserContext.from(result.context);
        await this._didCreateContext(context, contextParams, options, logger);
        return context;
      });
    }
    async connect(optionsOrWsEndpoint, options) {
      if (typeof optionsOrWsEndpoint === "string")
        return await this._connect({
          ...options,
          wsEndpoint: optionsOrWsEndpoint
        });
      (0, _utils.assert)(optionsOrWsEndpoint.wsEndpoint, "options.wsEndpoint is required");
      return await this._connect(optionsOrWsEndpoint);
    }
    async _connect(params) {
      const logger = params.logger;
      return await this._wrapApiCall(async () => {
        var _params$exposeNetwork;
        const deadline = params.timeout ? (0, _utils.monotonicTime)() + params.timeout : 0;
        const headers = {
          "x-playwright-browser": this.name(),
          ...params.headers
        };
        const localUtils = this._connection.localUtils();
        const connectParams = {
          wsEndpoint: params.wsEndpoint,
          headers,
          exposeNetwork: (_params$exposeNetwork = params.exposeNetwork) !== null && _params$exposeNetwork !== undefined ? _params$exposeNetwork : params._exposeNetwork,
          slowMo: params.slowMo,
          timeout: params.timeout
        };
        if (params.__testHookRedirectPortForwarding)
          connectParams.socksProxyRedirectPortForTest = params.__testHookRedirectPortForwarding;
        const {
          pipe,
          headers: connectHeaders
        } = await localUtils._channel.connect(connectParams);
        const closePipe = () => pipe.close().catch(() => {
        });
        const connection = new _connection.Connection(localUtils, this._instrumentation);
        connection.markAsRemote();
        connection.on("close", closePipe);
        let browser;
        let closeError;
        const onPipeClosed = () => {
          var _browser2;
          for (const context of ((_browser = browser) === null || _browser === undefined ? undefined : _browser.contexts()) || []) {
            var _browser;
            for (const page of context.pages())
              page._onClose();
            context._onClose();
          }
          (_browser2 = browser) === null || _browser2 === undefined || _browser2._didClose();
          connection.close(closeError);
        };
        pipe.on("closed", onPipeClosed);
        connection.onmessage = (message) => pipe.send({
          message
        }).catch(onPipeClosed);
        pipe.on("message", ({
          message
        }) => {
          try {
            connection.dispatch(message);
          } catch (e) {
            closeError = e;
            closePipe();
          }
        });
        const result = await (0, _timeoutRunner.raceAgainstDeadline)(async () => {
          if (params.__testHookBeforeCreateBrowser)
            await params.__testHookBeforeCreateBrowser();
          const playwright = await connection.initializePlaywright();
          if (!playwright._initializer.preLaunchedBrowser) {
            closePipe();
            throw new Error("Malformed endpoint. Did you use BrowserType.launchServer method?");
          }
          playwright._setSelectors(this._playwright.selectors);
          browser = _browser3.Browser.from(playwright._initializer.preLaunchedBrowser);
          this._didLaunchBrowser(browser, {}, logger);
          browser._shouldCloseConnectionOnClose = true;
          browser._connectHeaders = connectHeaders;
          browser.on(_events.Events.Browser.Disconnected, closePipe);
          return browser;
        }, deadline);
        if (!result.timedOut) {
          return result.result;
        } else {
          closePipe();
          throw new Error(`Timeout ${params.timeout}ms exceeded`);
        }
      });
    }
    async connectOverCDP(endpointURLOrOptions, options) {
      if (typeof endpointURLOrOptions === "string")
        return await this._connectOverCDP(endpointURLOrOptions, options);
      const endpointURL = "endpointURL" in endpointURLOrOptions ? endpointURLOrOptions.endpointURL : endpointURLOrOptions.wsEndpoint;
      (0, _utils.assert)(endpointURL, "Cannot connect over CDP without wsEndpoint.");
      return await this.connectOverCDP(endpointURL, endpointURLOrOptions);
    }
    async _connectOverCDP(endpointURL, params = {}) {
      if (this.name() !== "chromium")
        throw new Error("Connecting over CDP is only supported in Chromium.");
      const headers = params.headers ? (0, _utils.headersObjectToArray)(params.headers) : undefined;
      const result = await this._channel.connectOverCDP({
        endpointURL,
        headers,
        slowMo: params.slowMo,
        timeout: params.timeout
      });
      const browser = _browser3.Browser.from(result.browser);
      this._didLaunchBrowser(browser, {}, params.logger);
      if (result.defaultContext)
        await this._didCreateContext(_browserContext.BrowserContext.from(result.defaultContext), {}, {}, params.logger);
      return browser;
    }
    _didLaunchBrowser(browser, browserOptions, logger) {
      browser._browserType = this;
      browser._options = browserOptions;
      browser._logger = logger;
    }
    async _didCreateContext(context, contextOptions, browserOptions, logger) {
      context._logger = logger;
      context._browserType = this;
      this._contexts.add(context);
      context._setOptions(contextOptions, browserOptions);
      if (this._defaultContextTimeout !== undefined)
        context.setDefaultTimeout(this._defaultContextTimeout);
      if (this._defaultContextNavigationTimeout !== undefined)
        context.setDefaultNavigationTimeout(this._defaultContextNavigationTimeout);
      await this._instrumentation.onDidCreateBrowserContext(context);
    }
    async _willCloseContext(context) {
      this._contexts.delete(context);
      await this._instrumentation.onWillCloseBrowserContext(context);
    }
  }
  exports.BrowserType = BrowserType;
});

// node_modules/playwright-core/lib/client/android.js
var require_android2 = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  async function loadFile(file) {
    if ((0, _utils.isString)(file))
      return await _fs.default.promises.readFile(file);
    return file;
  }
  var toSelectorChannel = function(selector) {
    const {
      checkable,
      checked,
      clazz,
      clickable,
      depth,
      desc,
      enabled,
      focusable,
      focused,
      hasChild,
      hasDescendant,
      longClickable,
      pkg,
      res,
      scrollable,
      selected,
      text
    } = selector;
    const toRegex = (value) => {
      if (value === undefined)
        return;
      if ((0, _utils.isRegExp)(value))
        return value.source;
      return "^" + value.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d") + "$";
    };
    return {
      checkable,
      checked,
      clazz: toRegex(clazz),
      pkg: toRegex(pkg),
      desc: toRegex(desc),
      res: toRegex(res),
      text: toRegex(text),
      clickable,
      depth,
      enabled,
      focusable,
      focused,
      hasChild: hasChild ? {
        selector: toSelectorChannel(hasChild.selector)
      } : undefined,
      hasDescendant: hasDescendant ? {
        selector: toSelectorChannel(hasDescendant.selector),
        maxDepth: hasDescendant.maxDepth
      } : undefined,
      longClickable,
      scrollable,
      selected
    };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AndroidWebView = exports.AndroidSocket = exports.AndroidInput = exports.AndroidDevice = exports.Android = undefined;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _utils = require_utils3();
  var _events = require_events();
  var _browserContext = require_browserContext2();
  var _channelOwner = require_channelOwner();
  var _timeoutSettings = require_timeoutSettings();
  var _waiter = require_waiter();
  var _events2 = import.meta.require("events");
  var _connection = require_connection();
  var _errors = require_errors2();
  var _timeoutRunner = require_timeoutRunner();
  var _Symbol$asyncDispose;

  class Android extends _channelOwner.ChannelOwner {
    static from(android) {
      return android._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._timeoutSettings = undefined;
      this._serverLauncher = undefined;
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings;
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
      this._channel.setDefaultTimeoutNoReply({
        timeout
      });
    }
    async devices(options = {}) {
      const {
        devices
      } = await this._channel.devices(options);
      return devices.map((d) => AndroidDevice.from(d));
    }
    async launchServer(options = {}) {
      if (!this._serverLauncher)
        throw new Error("Launching server is not supported");
      return await this._serverLauncher.launchServer(options);
    }
    async connect(wsEndpoint, options = {}) {
      return await this._wrapApiCall(async () => {
        const deadline = options.timeout ? (0, _utils.monotonicTime)() + options.timeout : 0;
        const headers = {
          "x-playwright-browser": "android",
          ...options.headers
        };
        const localUtils = this._connection.localUtils();
        const connectParams = {
          wsEndpoint,
          headers,
          slowMo: options.slowMo,
          timeout: options.timeout
        };
        const {
          pipe
        } = await localUtils._channel.connect(connectParams);
        const closePipe = () => pipe.close().catch(() => {
        });
        const connection = new _connection.Connection(localUtils, this._instrumentation);
        connection.markAsRemote();
        connection.on("close", closePipe);
        let device;
        let closeError;
        const onPipeClosed = () => {
          var _device;
          (_device = device) === null || _device === undefined || _device._didClose();
          connection.close(closeError);
        };
        pipe.on("closed", onPipeClosed);
        connection.onmessage = (message) => pipe.send({
          message
        }).catch(onPipeClosed);
        pipe.on("message", ({
          message
        }) => {
          try {
            connection.dispatch(message);
          } catch (e) {
            closeError = e;
            closePipe();
          }
        });
        const result = await (0, _timeoutRunner.raceAgainstDeadline)(async () => {
          const playwright = await connection.initializePlaywright();
          if (!playwright._initializer.preConnectedAndroidDevice) {
            closePipe();
            throw new Error("Malformed endpoint. Did you use Android.launchServer method?");
          }
          device = AndroidDevice.from(playwright._initializer.preConnectedAndroidDevice);
          device._shouldCloseConnectionOnClose = true;
          device.on(_events.Events.AndroidDevice.Close, closePipe);
          return device;
        }, deadline);
        if (!result.timedOut) {
          return result.result;
        } else {
          closePipe();
          throw new Error(`Timeout ${options.timeout}ms exceeded`);
        }
      });
    }
  }
  exports.Android = Android;
  _Symbol$asyncDispose = Symbol.asyncDispose;

  class AndroidDevice extends _channelOwner.ChannelOwner {
    static from(androidDevice) {
      return androidDevice._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._timeoutSettings = undefined;
      this._webViews = new Map;
      this._shouldCloseConnectionOnClose = false;
      this.input = undefined;
      this.input = new AndroidInput(this);
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings(parent._timeoutSettings);
      this._channel.on("webViewAdded", ({
        webView
      }) => this._onWebViewAdded(webView));
      this._channel.on("webViewRemoved", ({
        socketName
      }) => this._onWebViewRemoved(socketName));
      this._channel.on("close", () => this._didClose());
    }
    _onWebViewAdded(webView) {
      const view = new AndroidWebView(this, webView);
      this._webViews.set(webView.socketName, view);
      this.emit(_events.Events.AndroidDevice.WebView, view);
    }
    _onWebViewRemoved(socketName) {
      const view = this._webViews.get(socketName);
      this._webViews.delete(socketName);
      if (view)
        view.emit(_events.Events.AndroidWebView.Close);
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
      this._channel.setDefaultTimeoutNoReply({
        timeout
      });
    }
    serial() {
      return this._initializer.serial;
    }
    model() {
      return this._initializer.model;
    }
    webViews() {
      return [...this._webViews.values()];
    }
    async webView(selector, options) {
      const predicate = (v) => {
        if (selector.pkg)
          return v.pkg() === selector.pkg;
        if (selector.socketName)
          return v._socketName() === selector.socketName;
        return false;
      };
      const webView = [...this._webViews.values()].find(predicate);
      if (webView)
        return webView;
      return await this.waitForEvent("webview", {
        ...options,
        predicate
      });
    }
    async wait(selector, options) {
      await this._channel.wait({
        selector: toSelectorChannel(selector),
        ...options
      });
    }
    async fill(selector, text, options) {
      await this._channel.fill({
        selector: toSelectorChannel(selector),
        text,
        ...options
      });
    }
    async press(selector, key, options) {
      await this.tap(selector, options);
      await this.input.press(key);
    }
    async tap(selector, options) {
      await this._channel.tap({
        selector: toSelectorChannel(selector),
        ...options
      });
    }
    async drag(selector, dest, options) {
      await this._channel.drag({
        selector: toSelectorChannel(selector),
        dest,
        ...options
      });
    }
    async fling(selector, direction, options) {
      await this._channel.fling({
        selector: toSelectorChannel(selector),
        direction,
        ...options
      });
    }
    async longTap(selector, options) {
      await this._channel.longTap({
        selector: toSelectorChannel(selector),
        ...options
      });
    }
    async pinchClose(selector, percent, options) {
      await this._channel.pinchClose({
        selector: toSelectorChannel(selector),
        percent,
        ...options
      });
    }
    async pinchOpen(selector, percent, options) {
      await this._channel.pinchOpen({
        selector: toSelectorChannel(selector),
        percent,
        ...options
      });
    }
    async scroll(selector, direction, percent, options) {
      await this._channel.scroll({
        selector: toSelectorChannel(selector),
        direction,
        percent,
        ...options
      });
    }
    async swipe(selector, direction, percent, options) {
      await this._channel.swipe({
        selector: toSelectorChannel(selector),
        direction,
        percent,
        ...options
      });
    }
    async info(selector) {
      return (await this._channel.info({
        selector: toSelectorChannel(selector)
      })).info;
    }
    async screenshot(options = {}) {
      const {
        binary
      } = await this._channel.screenshot();
      if (options.path)
        await _fs.default.promises.writeFile(options.path, binary);
      return binary;
    }
    async[_Symbol$asyncDispose]() {
      await this.close();
    }
    async close() {
      try {
        if (this._shouldCloseConnectionOnClose)
          this._connection.close();
        else
          await this._channel.close();
      } catch (e) {
        if ((0, _errors.isTargetClosedError)(e))
          return;
        throw e;
      }
    }
    _didClose() {
      this.emit(_events.Events.AndroidDevice.Close, this);
    }
    async shell(command) {
      const {
        result
      } = await this._channel.shell({
        command
      });
      return result;
    }
    async open(command) {
      return AndroidSocket.from((await this._channel.open({
        command
      })).socket);
    }
    async installApk(file, options) {
      await this._channel.installApk({
        file: await loadFile(file),
        args: options && options.args
      });
    }
    async push(file, path, options) {
      await this._channel.push({
        file: await loadFile(file),
        path,
        mode: options ? options.mode : undefined
      });
    }
    async launchBrowser(options = {}) {
      const contextOptions = await (0, _browserContext.prepareBrowserContextParams)(options);
      const result = await this._channel.launchBrowser(contextOptions);
      const context = _browserContext.BrowserContext.from(result.context);
      context._setOptions(contextOptions, {});
      return context;
    }
    async waitForEvent(event, optionsOrPredicate = {}) {
      return await this._wrapApiCall(async () => {
        const timeout = this._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
        const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
        const waiter = _waiter.Waiter.createForEvent(this, event);
        waiter.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
        if (event !== _events.Events.AndroidDevice.Close)
          waiter.rejectOnEvent(this, _events.Events.AndroidDevice.Close, () => new _errors.TargetClosedError);
        const result = await waiter.waitForEvent(this, event, predicate);
        waiter.dispose();
        return result;
      });
    }
  }
  exports.AndroidDevice = AndroidDevice;

  class AndroidSocket extends _channelOwner.ChannelOwner {
    static from(androidDevice) {
      return androidDevice._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._channel.on("data", ({
        data
      }) => this.emit(_events.Events.AndroidSocket.Data, data));
      this._channel.on("close", () => this.emit(_events.Events.AndroidSocket.Close));
    }
    async write(data) {
      await this._channel.write({
        data
      });
    }
    async close() {
      await this._channel.close();
    }
    async[Symbol.asyncDispose]() {
      await this.close();
    }
  }
  exports.AndroidSocket = AndroidSocket;

  class AndroidInput {
    constructor(device) {
      this._device = undefined;
      this._device = device;
    }
    async type(text) {
      await this._device._channel.inputType({
        text
      });
    }
    async press(key) {
      await this._device._channel.inputPress({
        key
      });
    }
    async tap(point) {
      await this._device._channel.inputTap({
        point
      });
    }
    async swipe(from, segments, steps) {
      await this._device._channel.inputSwipe({
        segments,
        steps
      });
    }
    async drag(from, to, steps) {
      await this._device._channel.inputDrag({
        from,
        to,
        steps
      });
    }
  }
  exports.AndroidInput = AndroidInput;

  class AndroidWebView extends _events2.EventEmitter {
    constructor(device, data) {
      super();
      this._device = undefined;
      this._data = undefined;
      this._pagePromise = undefined;
      this._device = device;
      this._data = data;
    }
    pid() {
      return this._data.pid;
    }
    pkg() {
      return this._data.pkg;
    }
    _socketName() {
      return this._data.socketName;
    }
    async page() {
      if (!this._pagePromise)
        this._pagePromise = this._fetchPage();
      return await this._pagePromise;
    }
    async _fetchPage() {
      const {
        context
      } = await this._device._channel.connectToWebView({
        socketName: this._data.socketName
      });
      return _browserContext.BrowserContext.from(context).pages()[0];
    }
  }
  exports.AndroidWebView = AndroidWebView;
});

// node_modules/playwright-core/lib/client/electron.js
var require_electron3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ElectronApplication = exports.Electron = undefined;
  var _timeoutSettings = require_timeoutSettings();
  var _browserContext = require_browserContext2();
  var _channelOwner = require_channelOwner();
  var _clientHelper = require_clientHelper();
  var _events = require_events();
  var _jsHandle = require_jsHandle();
  var _consoleMessage = require_consoleMessage();
  var _waiter = require_waiter();
  var _errors = require_errors2();
  var _Symbol$asyncDispose;

  class Electron extends _channelOwner.ChannelOwner {
    static from(electron) {
      return electron._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
    }
    async launch(options = {}) {
      const params = {
        ...await (0, _browserContext.prepareBrowserContextParams)(options),
        env: (0, _clientHelper.envObjectToArray)(options.env ? options.env : process.env),
        tracesDir: options.tracesDir
      };
      const app = ElectronApplication.from((await this._channel.launch(params)).electronApplication);
      app._context._options = params;
      return app;
    }
  }
  exports.Electron = Electron;
  _Symbol$asyncDispose = Symbol.asyncDispose;

  class ElectronApplication extends _channelOwner.ChannelOwner {
    static from(electronApplication) {
      return electronApplication._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._context = undefined;
      this._windows = new Set;
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings;
      this._isClosed = false;
      this._context = _browserContext.BrowserContext.from(initializer.context);
      for (const page of this._context._pages)
        this._onPage(page);
      this._context.on(_events.Events.BrowserContext.Page, (page) => this._onPage(page));
      this._channel.on("close", () => {
        this._isClosed = true;
        this.emit(_events.Events.ElectronApplication.Close);
      });
      this._channel.on("console", (event) => this.emit(_events.Events.ElectronApplication.Console, new _consoleMessage.ConsoleMessage(event)));
      this._setEventToSubscriptionMapping(new Map([[_events.Events.ElectronApplication.Console, "console"]]));
    }
    process() {
      return this._toImpl().process();
    }
    _onPage(page) {
      this._windows.add(page);
      this.emit(_events.Events.ElectronApplication.Window, page);
      page.once(_events.Events.Page.Close, () => this._windows.delete(page));
    }
    windows() {
      return [...this._windows];
    }
    async firstWindow(options) {
      if (this._windows.size)
        return this._windows.values().next().value;
      return await this.waitForEvent("window", options);
    }
    context() {
      return this._context;
    }
    async[_Symbol$asyncDispose]() {
      await this.close();
    }
    async close() {
      if (this._isClosed)
        return;
      await this._channel.close().catch(() => {
      });
    }
    async waitForEvent(event, optionsOrPredicate = {}) {
      return await this._wrapApiCall(async () => {
        const timeout = this._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
        const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
        const waiter = _waiter.Waiter.createForEvent(this, event);
        waiter.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
        if (event !== _events.Events.ElectronApplication.Close)
          waiter.rejectOnEvent(this, _events.Events.ElectronApplication.Close, () => new _errors.TargetClosedError);
        const result = await waiter.waitForEvent(this, event, predicate);
        waiter.dispose();
        return result;
      });
    }
    async browserWindow(page) {
      const result = await this._channel.browserWindow({
        page: page._channel
      });
      return _jsHandle.JSHandle.from(result.handle);
    }
    async evaluate(pageFunction, arg) {
      const result = await this._channel.evaluateExpression({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async evaluateHandle(pageFunction, arg) {
      const result = await this._channel.evaluateExpressionHandle({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return _jsHandle.JSHandle.from(result.handle);
    }
  }
  exports.ElectronApplication = ElectronApplication;
});

// node_modules/playwright-core/lib/client/selectors.js
var require_selectors2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SelectorsOwner = exports.Selectors = undefined;
  var _clientHelper = require_clientHelper();
  var _channelOwner = require_channelOwner();
  var _locator = require_locator();

  class Selectors {
    constructor() {
      this._channels = new Set;
      this._registrations = [];
    }
    async register(name, script, options = {}) {
      const source = await (0, _clientHelper.evaluationScript)(script, undefined, false);
      const params = {
        ...options,
        name,
        source
      };
      for (const channel of this._channels)
        await channel._channel.register(params);
      this._registrations.push(params);
    }
    setTestIdAttribute(attributeName) {
      (0, _locator.setTestIdAttribute)(attributeName);
      for (const channel of this._channels)
        channel._channel.setTestIdAttributeName({
          testIdAttributeName: attributeName
        }).catch(() => {
        });
    }
    _addChannel(channel) {
      this._channels.add(channel);
      for (const params of this._registrations) {
        channel._channel.register(params).catch(() => {
        });
        channel._channel.setTestIdAttributeName({
          testIdAttributeName: (0, _locator.testIdAttributeName)()
        }).catch(() => {
        });
      }
    }
    _removeChannel(channel) {
      this._channels.delete(channel);
    }
  }
  exports.Selectors = Selectors;

  class SelectorsOwner extends _channelOwner.ChannelOwner {
    static from(browser) {
      return browser._object;
    }
  }
  exports.SelectorsOwner = SelectorsOwner;
});

// node_modules/playwright-core/lib/client/playwright.js
var require_playwright2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Playwright = undefined;
  var _errors = require_errors2();
  var _android = require_android2();
  var _browserType = require_browserType2();
  var _channelOwner = require_channelOwner();
  var _electron = require_electron3();
  var _fetch = require_fetch2();
  var _selectors = require_selectors2();

  class Playwright extends _channelOwner.ChannelOwner {
    constructor(parent, type, guid, initializer) {
      var _this$_connection$loc, _this$_connection$loc2;
      super(parent, type, guid, initializer);
      this._android = undefined;
      this._electron = undefined;
      this.chromium = undefined;
      this.firefox = undefined;
      this.webkit = undefined;
      this.devices = undefined;
      this.selectors = undefined;
      this.request = undefined;
      this.errors = undefined;
      this.request = new _fetch.APIRequest(this);
      this.chromium = _browserType.BrowserType.from(initializer.chromium);
      this.chromium._playwright = this;
      this.firefox = _browserType.BrowserType.from(initializer.firefox);
      this.firefox._playwright = this;
      this.webkit = _browserType.BrowserType.from(initializer.webkit);
      this.webkit._playwright = this;
      this._android = _android.Android.from(initializer.android);
      this._electron = _electron.Electron.from(initializer.electron);
      this.devices = (_this$_connection$loc = (_this$_connection$loc2 = this._connection.localUtils()) === null || _this$_connection$loc2 === undefined ? undefined : _this$_connection$loc2.devices) !== null && _this$_connection$loc !== undefined ? _this$_connection$loc : {};
      this.selectors = new _selectors.Selectors;
      this.errors = {
        TimeoutError: _errors.TimeoutError
      };
      const selectorsOwner = _selectors.SelectorsOwner.from(initializer.selectors);
      this.selectors._addChannel(selectorsOwner);
      this._connection.on("close", () => {
        this.selectors._removeChannel(selectorsOwner);
      });
      global._playwrightInstance = this;
    }
    _setSelectors(selectors) {
      const selectorsOwner = _selectors.SelectorsOwner.from(this._initializer.selectors);
      this.selectors._removeChannel(selectorsOwner);
      this.selectors = selectors;
      this.selectors._addChannel(selectorsOwner);
    }
    static from(channel) {
      return channel._object;
    }
  }
  exports.Playwright = Playwright;
});

// node_modules/playwright-core/lib/client/jsonPipe.js
var require_jsonPipe = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.JsonPipe = undefined;
  var _channelOwner = require_channelOwner();

  class JsonPipe extends _channelOwner.ChannelOwner {
    static from(jsonPipe) {
      return jsonPipe._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
    }
    channel() {
      return this._channel;
    }
  }
  exports.JsonPipe = JsonPipe;
});

// node_modules/playwright-core/lib/client/localUtils.js
var require_localUtils = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.LocalUtils = undefined;
  var _channelOwner = require_channelOwner();

  class LocalUtils extends _channelOwner.ChannelOwner {
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this.devices = undefined;
      this.devices = {};
      for (const {
        name,
        descriptor
      } of initializer.deviceDescriptors)
        this.devices[name] = descriptor;
    }
  }
  exports.LocalUtils = LocalUtils;
});

// node_modules/playwright-core/lib/client/clientInstrumentation.js
var require_clientInstrumentation = __commonJS((exports) => {
  var createInstrumentation = function() {
    const listeners = [];
    return new Proxy({}, {
      get: (obj, prop) => {
        if (typeof prop !== "string")
          return obj[prop];
        if (prop === "addListener")
          return (listener) => listeners.push(listener);
        if (prop === "removeListener")
          return (listener) => listeners.splice(listeners.indexOf(listener), 1);
        if (prop === "removeAllListeners")
          return () => listeners.splice(0, listeners.length);
        if (!prop.startsWith("on"))
          return obj[prop];
        return async (...params) => {
          for (const listener of listeners) {
            var _prop, _ref;
            await ((_prop = (_ref = listener)[prop]) === null || _prop === undefined ? undefined : _prop.call(_ref, ...params));
          }
        };
      }
    });
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createInstrumentation = createInstrumentation;
});

// node_modules/playwright-core/lib/client/connection.js
var require_connection = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Connection = undefined;
  var _browser = require_browser6();
  var _browserContext = require_browserContext2();
  var _browserType = require_browserType2();
  var _channelOwner = require_channelOwner();
  var _elementHandle = require_elementHandle();
  var _frame = require_frame();
  var _jsHandle = require_jsHandle();
  var _network = require_network3();
  var _page = require_page2();
  var _worker = require_worker();
  var _dialog = require_dialog2();
  var _errors = require_errors2();
  var _cdpSession = require_cdpSession();
  var _playwright = require_playwright2();
  var _electron = require_electron3();
  var _stream = require_stream();
  var _writableStream = require_writableStream();
  var _debugLogger = require_debugLogger();
  var _selectors = require_selectors2();
  var _android = require_android2();
  var _artifact = require_artifact2();
  var _events = import.meta.require("events");
  var _jsonPipe = require_jsonPipe();
  var _fetch = require_fetch2();
  var _localUtils = require_localUtils();
  var _tracing = require_tracing2();
  var _validator = require_validator();
  var _clientInstrumentation = require_clientInstrumentation();
  var _utils = require_utils3();

  class Root extends _channelOwner.ChannelOwner {
    constructor(connection) {
      super(connection, "Root", "", {});
    }
    async initialize() {
      return _playwright.Playwright.from((await this._channel.initialize({
        sdkLanguage: "javascript"
      })).playwright);
    }
  }

  class DummyChannelOwner extends _channelOwner.ChannelOwner {
  }

  class Connection extends _events.EventEmitter {
    constructor(localUtils, instrumentation) {
      super();
      this._objects = new Map;
      this.onmessage = (message) => {
      };
      this._lastId = 0;
      this._callbacks = new Map;
      this._rootObject = undefined;
      this._closedError = undefined;
      this._isRemote = false;
      this._localUtils = undefined;
      this._rawBuffers = false;
      this.toImpl = undefined;
      this._tracingCount = 0;
      this._instrumentation = undefined;
      this._rootObject = new Root(this);
      this._localUtils = localUtils;
      this._instrumentation = instrumentation || (0, _clientInstrumentation.createInstrumentation)();
    }
    markAsRemote() {
      this._isRemote = true;
    }
    isRemote() {
      return this._isRemote;
    }
    useRawBuffers() {
      this._rawBuffers = true;
    }
    rawBuffers() {
      return this._rawBuffers;
    }
    localUtils() {
      return this._localUtils;
    }
    async initializePlaywright() {
      return await this._rootObject.initialize();
    }
    getObjectWithKnownName(guid) {
      return this._objects.get(guid);
    }
    setIsTracing(isTracing) {
      if (isTracing)
        this._tracingCount++;
      else
        this._tracingCount--;
    }
    async sendMessageToServer(object, method, params, apiName, frames, wallTime) {
      var _this$_localUtils;
      if (this._closedError)
        throw this._closedError;
      if (object._wasCollected)
        throw new Error("The object has been collected to prevent unbounded heap growth.");
      const guid = object._guid;
      const type = object._type;
      const id = ++this._lastId;
      const message = {
        id,
        guid,
        method,
        params
      };
      if (_debugLogger.debugLogger.isEnabled("channel")) {
        _debugLogger.debugLogger.log("channel", "SEND> " + JSON.stringify(message));
      }
      const location2 = frames[0] ? {
        file: frames[0].file,
        line: frames[0].line,
        column: frames[0].column
      } : undefined;
      const metadata = {
        wallTime,
        apiName,
        location: location2,
        internal: !apiName
      };
      if (this._tracingCount && frames && type !== "LocalUtils")
        (_this$_localUtils = this._localUtils) === null || _this$_localUtils === undefined || _this$_localUtils._channel.addStackToTracingNoReply({
          callData: {
            stack: frames,
            id
          }
        }).catch(() => {
        });
      this.onmessage({
        ...message,
        metadata
      });
      return await new Promise((resolve, reject) => this._callbacks.set(id, {
        resolve,
        reject,
        apiName,
        type,
        method
      }));
    }
    dispatch(message) {
      if (this._closedError)
        return;
      const {
        id,
        guid,
        method,
        params,
        result,
        error,
        log
      } = message;
      if (id) {
        if (_debugLogger.debugLogger.isEnabled("channel"))
          _debugLogger.debugLogger.log("channel", "<RECV " + JSON.stringify(message));
        const callback = this._callbacks.get(id);
        if (!callback)
          throw new Error(`Cannot find command to respond: ${id}`);
        this._callbacks.delete(id);
        if (error && !result) {
          const parsedError = (0, _errors.parseError)(error);
          (0, _utils.rewriteErrorMessage)(parsedError, parsedError.message + (0, _utils.formatCallLog)(log));
          callback.reject(parsedError);
        } else {
          const validator2 = (0, _validator.findValidator)(callback.type, callback.method, "Result");
          callback.resolve(validator2(result, "", {
            tChannelImpl: this._tChannelImplFromWire.bind(this),
            binary: this._rawBuffers ? "buffer" : "fromBase64"
          }));
        }
        return;
      }
      if (_debugLogger.debugLogger.isEnabled("channel"))
        _debugLogger.debugLogger.log("channel", "<EVENT " + JSON.stringify(message));
      if (method === "__create__") {
        this._createRemoteObject(guid, params.type, params.guid, params.initializer);
        return;
      }
      const object = this._objects.get(guid);
      if (!object)
        throw new Error(`Cannot find object to "${method}": ${guid}`);
      if (method === "__adopt__") {
        const child = this._objects.get(params.guid);
        if (!child)
          throw new Error(`Unknown new child: ${params.guid}`);
        object._adopt(child);
        return;
      }
      if (method === "__dispose__") {
        object._dispose(params.reason);
        return;
      }
      const validator = (0, _validator.findValidator)(object._type, method, "Event");
      object._channel.emit(method, validator(params, "", {
        tChannelImpl: this._tChannelImplFromWire.bind(this),
        binary: this._rawBuffers ? "buffer" : "fromBase64"
      }));
    }
    close(cause) {
      this._closedError = new _errors.TargetClosedError(cause === null || cause === undefined ? undefined : cause.toString());
      for (const callback of this._callbacks.values())
        callback.reject(this._closedError);
      this._callbacks.clear();
      this.emit("close");
    }
    _tChannelImplFromWire(names, arg, path, context) {
      if (arg && typeof arg === "object" && typeof arg.guid === "string") {
        const object = this._objects.get(arg.guid);
        if (!object)
          throw new Error(`Object with guid ${arg.guid} was not bound in the connection`);
        if (names !== "*" && !names.includes(object._type))
          throw new _validator.ValidationError(`${path}: expected channel ${names.toString()}`);
        return object._channel;
      }
      throw new _validator.ValidationError(`${path}: expected channel ${names.toString()}`);
    }
    _createRemoteObject(parentGuid, type, guid, initializer) {
      const parent = this._objects.get(parentGuid);
      if (!parent)
        throw new Error(`Cannot find parent object ${parentGuid} to create ${guid}`);
      let result;
      const validator = (0, _validator.findValidator)(type, "", "Initializer");
      initializer = validator(initializer, "", {
        tChannelImpl: this._tChannelImplFromWire.bind(this),
        binary: this._rawBuffers ? "buffer" : "fromBase64"
      });
      switch (type) {
        case "Android":
          result = new _android.Android(parent, type, guid, initializer);
          break;
        case "AndroidSocket":
          result = new _android.AndroidSocket(parent, type, guid, initializer);
          break;
        case "AndroidDevice":
          result = new _android.AndroidDevice(parent, type, guid, initializer);
          break;
        case "APIRequestContext":
          result = new _fetch.APIRequestContext(parent, type, guid, initializer);
          break;
        case "Artifact":
          result = new _artifact.Artifact(parent, type, guid, initializer);
          break;
        case "BindingCall":
          result = new _page.BindingCall(parent, type, guid, initializer);
          break;
        case "Browser":
          result = new _browser.Browser(parent, type, guid, initializer);
          break;
        case "BrowserContext":
          result = new _browserContext.BrowserContext(parent, type, guid, initializer);
          break;
        case "BrowserType":
          result = new _browserType.BrowserType(parent, type, guid, initializer);
          break;
        case "CDPSession":
          result = new _cdpSession.CDPSession(parent, type, guid, initializer);
          break;
        case "Dialog":
          result = new _dialog.Dialog(parent, type, guid, initializer);
          break;
        case "Electron":
          result = new _electron.Electron(parent, type, guid, initializer);
          break;
        case "ElectronApplication":
          result = new _electron.ElectronApplication(parent, type, guid, initializer);
          break;
        case "ElementHandle":
          result = new _elementHandle.ElementHandle(parent, type, guid, initializer);
          break;
        case "Frame":
          result = new _frame.Frame(parent, type, guid, initializer);
          break;
        case "JSHandle":
          result = new _jsHandle.JSHandle(parent, type, guid, initializer);
          break;
        case "JsonPipe":
          result = new _jsonPipe.JsonPipe(parent, type, guid, initializer);
          break;
        case "LocalUtils":
          result = new _localUtils.LocalUtils(parent, type, guid, initializer);
          if (!this._localUtils)
            this._localUtils = result;
          break;
        case "Page":
          result = new _page.Page(parent, type, guid, initializer);
          break;
        case "Playwright":
          result = new _playwright.Playwright(parent, type, guid, initializer);
          break;
        case "Request":
          result = new _network.Request(parent, type, guid, initializer);
          break;
        case "Response":
          result = new _network.Response(parent, type, guid, initializer);
          break;
        case "Route":
          result = new _network.Route(parent, type, guid, initializer);
          break;
        case "Stream":
          result = new _stream.Stream(parent, type, guid, initializer);
          break;
        case "Selectors":
          result = new _selectors.SelectorsOwner(parent, type, guid, initializer);
          break;
        case "SocksSupport":
          result = new DummyChannelOwner(parent, type, guid, initializer);
          break;
        case "Tracing":
          result = new _tracing.Tracing(parent, type, guid, initializer);
          break;
        case "WebSocket":
          result = new _network.WebSocket(parent, type, guid, initializer);
          break;
        case "Worker":
          result = new _worker.Worker(parent, type, guid, initializer);
          break;
        case "WritableStream":
          result = new _writableStream.WritableStream(parent, type, guid, initializer);
          break;
        default:
          throw new Error("Missing type " + type);
      }
      return result;
    }
  }
  exports.Connection = Connection;
});

// node_modules/playwright-core/lib/server/dispatchers/debugControllerDispatcher.js
var require_debugControllerDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DebugControllerDispatcher = undefined;
  var _utils = require_utils3();
  var _debugController = require_debugController();
  var _dispatcher = require_dispatcher();

  class DebugControllerDispatcher extends _dispatcher.Dispatcher {
    constructor(connection, debugController) {
      super(connection, debugController, "DebugController", {});
      this._type_DebugController = undefined;
      this._listeners = undefined;
      this._type_DebugController = true;
      this._listeners = [_utils.eventsHelper.addEventListener(this._object, _debugController.DebugController.Events.StateChanged, (params) => {
        this._dispatchEvent("stateChanged", params);
      }), _utils.eventsHelper.addEventListener(this._object, _debugController.DebugController.Events.InspectRequested, ({
        selector,
        locator
      }) => {
        this._dispatchEvent("inspectRequested", {
          selector,
          locator
        });
      }), _utils.eventsHelper.addEventListener(this._object, _debugController.DebugController.Events.SourceChanged, ({
        text,
        header,
        footer,
        actions
      }) => {
        this._dispatchEvent("sourceChanged", {
          text,
          header,
          footer,
          actions
        });
      }), _utils.eventsHelper.addEventListener(this._object, _debugController.DebugController.Events.Paused, ({
        paused
      }) => {
        this._dispatchEvent("paused", {
          paused
        });
      }), _utils.eventsHelper.addEventListener(this._object, _debugController.DebugController.Events.SetModeRequested, ({
        mode
      }) => {
        this._dispatchEvent("setModeRequested", {
          mode
        });
      })];
    }
    async initialize(params) {
      this._object.initialize(params.codegenId, params.sdkLanguage);
    }
    async setReportStateChanged(params) {
      this._object.setReportStateChanged(params.enabled);
    }
    async resetForReuse() {
      await this._object.resetForReuse();
    }
    async navigate(params) {
      await this._object.navigate(params.url);
    }
    async setRecorderMode(params) {
      await this._object.setRecorderMode(params);
    }
    async highlight(params) {
      await this._object.highlight(params.selector);
    }
    async hideHighlight() {
      await this._object.hideHighlight();
    }
    async resume() {
      await this._object.resume();
    }
    async kill() {
      await this._object.kill();
    }
    async closeAllBrowsers() {
      await this._object.closeAllBrowsers();
    }
    _onDispose() {
      _utils.eventsHelper.removeEventListeners(this._listeners);
      this._object.dispose();
    }
  }
  exports.DebugControllerDispatcher = DebugControllerDispatcher;
});

// node_modules/playwright-core/lib/remote/playwrightConnection.js
var require_playwrightConnection = __commonJS((exports) => {
  var launchOptionsHash = function(options) {
    const copy = {
      ...options
    };
    for (const k of Object.keys(copy)) {
      const key = k;
      if (copy[key] === defaultLaunchOptions[key])
        delete copy[key];
    }
    for (const key of optionsThatAllowBrowserReuse)
      delete copy[key];
    return JSON.stringify(copy);
  };
  var filterLaunchOptions = function(options) {
    return {
      channel: options.channel,
      args: options.args,
      ignoreAllDefaultArgs: options.ignoreAllDefaultArgs,
      ignoreDefaultArgs: options.ignoreDefaultArgs,
      timeout: options.timeout,
      headless: options.headless,
      proxy: options.proxy,
      chromiumSandbox: options.chromiumSandbox,
      firefoxUserPrefs: options.firefoxUserPrefs,
      slowMo: options.slowMo,
      executablePath: (0, _utils.isUnderTest)() ? options.executablePath : undefined
    };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PlaywrightConnection = undefined;
  var _server = require_server();
  var _browser = require_browser5();
  var _instrumentation = require_instrumentation();
  var _socksProxy = require_socksProxy();
  var _utils = require_utils3();
  var _android = require_android();
  var _debugControllerDispatcher = require_debugControllerDispatcher();
  var _debugLogger = require_debugLogger();

  class PlaywrightConnection {
    constructor(lock, clientType, ws2, options, preLaunched, id, onClose) {
      this._ws = undefined;
      this._onClose = undefined;
      this._dispatcherConnection = undefined;
      this._cleanups = [];
      this._id = undefined;
      this._disconnected = false;
      this._preLaunched = undefined;
      this._options = undefined;
      this._root = undefined;
      this._profileName = undefined;
      this._ws = ws2;
      this._preLaunched = preLaunched;
      this._options = options;
      options.launchOptions = filterLaunchOptions(options.launchOptions);
      if (clientType === "reuse-browser" || clientType === "pre-launched-browser-or-android")
        (0, _utils.assert)(preLaunched.playwright);
      if (clientType === "pre-launched-browser-or-android")
        (0, _utils.assert)(preLaunched.browser || preLaunched.androidDevice);
      this._onClose = onClose;
      this._id = id;
      this._profileName = `${new Date().toISOString()}-${clientType}`;
      this._dispatcherConnection = new _server.DispatcherConnection;
      this._dispatcherConnection.onmessage = async (message) => {
        await lock;
        if (ws2.readyState !== ws2.CLOSING) {
          const messageString = JSON.stringify(message);
          if (_debugLogger.debugLogger.isEnabled("server:channel"))
            _debugLogger.debugLogger.log("server:channel", `[${this._id}] ${(0, _utils.monotonicTime)() * 1000} SEND \u25BA ${messageString}`);
          if (_debugLogger.debugLogger.isEnabled("server:metadata"))
            this.logServerMetadata(message, messageString, "SEND");
          ws2.send(messageString);
        }
      };
      ws2.on("message", async (message) => {
        await lock;
        const messageString = Buffer.from(message).toString();
        const jsonMessage = JSON.parse(messageString);
        if (_debugLogger.debugLogger.isEnabled("server:channel"))
          _debugLogger.debugLogger.log("server:channel", `[${this._id}] ${(0, _utils.monotonicTime)() * 1000} \u25C0 RECV ${messageString}`);
        if (_debugLogger.debugLogger.isEnabled("server:metadata"))
          this.logServerMetadata(jsonMessage, messageString, "RECV");
        this._dispatcherConnection.dispatch(jsonMessage);
      });
      ws2.on("close", () => this._onDisconnect());
      ws2.on("error", (error) => this._onDisconnect(error));
      if (clientType === "controller") {
        this._root = this._initDebugControllerMode();
        return;
      }
      this._root = new _server.RootDispatcher(this._dispatcherConnection, async (scope, options2) => {
        await (0, _utils.startProfiling)();
        if (clientType === "reuse-browser")
          return await this._initReuseBrowsersMode(scope);
        if (clientType === "pre-launched-browser-or-android")
          return this._preLaunched.browser ? await this._initPreLaunchedBrowserMode(scope) : await this._initPreLaunchedAndroidMode(scope);
        if (clientType === "launch-browser")
          return await this._initLaunchBrowserMode(scope, options2);
        throw new Error("Unsupported client type: " + clientType);
      });
    }
    async _initLaunchBrowserMode(scope, options) {
      _debugLogger.debugLogger.log("server", `[${this._id}] engaged launch mode for "${this._options.browserName}"`);
      const playwright = (0, _server.createPlaywright)({
        sdkLanguage: options.sdkLanguage,
        isServer: true
      });
      const ownedSocksProxy = await this._createOwnedSocksProxy(playwright);
      const browser = await playwright[this._options.browserName].launch((0, _instrumentation.serverSideCallMetadata)(), this._options.launchOptions);
      this._cleanups.push(async () => {
        for (const browser2 of playwright.allBrowsers())
          await browser2.close({
            reason: "Connection terminated"
          });
      });
      browser.on(_browser.Browser.Events.Disconnected, () => {
        this.close({
          code: 1001,
          reason: "Browser closed"
        });
      });
      return new _server.PlaywrightDispatcher(scope, playwright, ownedSocksProxy, browser);
    }
    async _initPreLaunchedBrowserMode(scope) {
      var _this$_preLaunched$so;
      _debugLogger.debugLogger.log("server", `[${this._id}] engaged pre-launched (browser) mode`);
      const playwright = this._preLaunched.playwright;
      (_this$_preLaunched$so = this._preLaunched.socksProxy) === null || _this$_preLaunched$so === undefined || _this$_preLaunched$so.setPattern(this._options.socksProxyPattern);
      const browser = this._preLaunched.browser;
      browser.on(_browser.Browser.Events.Disconnected, () => {
        this.close({
          code: 1001,
          reason: "Browser closed"
        });
      });
      const playwrightDispatcher = new _server.PlaywrightDispatcher(scope, playwright, this._preLaunched.socksProxy, browser);
      for (const b of playwright.allBrowsers()) {
        if (b !== browser)
          await b.close({
            reason: "Connection terminated"
          });
      }
      this._cleanups.push(() => playwrightDispatcher.cleanup());
      return playwrightDispatcher;
    }
    async _initPreLaunchedAndroidMode(scope) {
      _debugLogger.debugLogger.log("server", `[${this._id}] engaged pre-launched (Android) mode`);
      const playwright = this._preLaunched.playwright;
      const androidDevice = this._preLaunched.androidDevice;
      androidDevice.on(_android.AndroidDevice.Events.Close, () => {
        this.close({
          code: 1001,
          reason: "Android device disconnected"
        });
      });
      const playwrightDispatcher = new _server.PlaywrightDispatcher(scope, playwright, undefined, undefined, androidDevice);
      this._cleanups.push(() => playwrightDispatcher.cleanup());
      return playwrightDispatcher;
    }
    _initDebugControllerMode() {
      _debugLogger.debugLogger.log("server", `[${this._id}] engaged reuse controller mode`);
      const playwright = this._preLaunched.playwright;
      return new _debugControllerDispatcher.DebugControllerDispatcher(this._dispatcherConnection, playwright.debugController);
    }
    async _initReuseBrowsersMode(scope) {
      _debugLogger.debugLogger.log("server", `[${this._id}] engaged reuse browsers mode for ${this._options.browserName}`);
      const playwright = this._preLaunched.playwright;
      const requestedOptions = launchOptionsHash(this._options.launchOptions);
      let browser = playwright.allBrowsers().find((b) => {
        if (b.options.name !== this._options.browserName)
          return false;
        const existingOptions = launchOptionsHash(b.options.originalLaunchOptions);
        return existingOptions === requestedOptions;
      });
      for (const b of playwright.allBrowsers()) {
        if (b === browser)
          continue;
        if (b.options.name === this._options.browserName && b.options.channel === this._options.launchOptions.channel)
          await b.close({
            reason: "Connection terminated"
          });
      }
      if (!browser) {
        browser = await playwright[this._options.browserName || "chromium"].launch((0, _instrumentation.serverSideCallMetadata)(), {
          ...this._options.launchOptions,
          headless: !!process.env.PW_DEBUG_CONTROLLER_HEADLESS
        });
        browser.on(_browser.Browser.Events.Disconnected, () => {
          this.close({
            code: 1001,
            reason: "Browser closed"
          });
        });
      }
      this._cleanups.push(async () => {
        for (const browser2 of playwright.allBrowsers()) {
          for (const context of browser2.contexts()) {
            if (!context.pages().length)
              await context.close({
                reason: "Connection terminated"
              });
            else
              await context.stopPendingOperations("Connection closed");
          }
          if (!browser2.contexts())
            await browser2.close({
              reason: "Connection terminated"
            });
        }
      });
      const playwrightDispatcher = new _server.PlaywrightDispatcher(scope, playwright, undefined, browser);
      return playwrightDispatcher;
    }
    async _createOwnedSocksProxy(playwright) {
      if (!this._options.socksProxyPattern)
        return;
      const socksProxy = new _socksProxy.SocksProxy;
      socksProxy.setPattern(this._options.socksProxyPattern);
      playwright.options.socksProxyPort = await socksProxy.listen(0);
      _debugLogger.debugLogger.log("server", `[${this._id}] started socks proxy on port ${playwright.options.socksProxyPort}`);
      this._cleanups.push(() => socksProxy.close());
      return socksProxy;
    }
    async _onDisconnect(error) {
      this._disconnected = true;
      _debugLogger.debugLogger.log("server", `[${this._id}] disconnected. error: ${error}`);
      this._root._dispose();
      _debugLogger.debugLogger.log("server", `[${this._id}] starting cleanup`);
      for (const cleanup of this._cleanups)
        await cleanup().catch(() => {
        });
      await (0, _utils.stopProfiling)(this._profileName);
      this._onClose();
      _debugLogger.debugLogger.log("server", `[${this._id}] finished cleanup`);
    }
    logServerMetadata(message, messageString, direction) {
      const serverLogMetadata = {
        wallTime: Date.now(),
        id: message.id,
        guid: message.guid,
        method: message.method,
        payloadSizeInBytes: Buffer.byteLength(messageString, "utf-8")
      };
      _debugLogger.debugLogger.log("server:metadata", (direction === "SEND" ? "SEND \u25BA " : "\u25C0 RECV ") + JSON.stringify(serverLogMetadata));
    }
    async close(reason) {
      if (this._disconnected)
        return;
      _debugLogger.debugLogger.log("server", `[${this._id}] force closing connection: ${(reason === null || reason === undefined ? undefined : reason.reason) || ""} (${(reason === null || reason === undefined ? undefined : reason.code) || 0})`);
      try {
        this._ws.close(reason === null || reason === undefined ? undefined : reason.code, reason === null || reason === undefined ? undefined : reason.reason);
      } catch (e) {
      }
    }
  }
  exports.PlaywrightConnection = PlaywrightConnection;
  var defaultLaunchOptions = {
    ignoreAllDefaultArgs: false,
    handleSIGINT: false,
    handleSIGTERM: false,
    handleSIGHUP: false,
    headless: true,
    devtools: false
  };
  var optionsThatAllowBrowserReuse = ["headless", "tracesDir"];
});

// node_modules/playwright-core/lib/remote/playwrightServer.js
var require_playwrightServer = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PlaywrightServer = undefined;
  var _playwright = require_playwright();
  var _playwrightConnection = require_playwrightConnection();
  var _semaphore = require_semaphore();
  var _debugLogger = require_debugLogger();
  var _utils = require_utils3();
  var _wsServer = require_wsServer();

  class PlaywrightServer {
    constructor(options) {
      this._preLaunchedPlaywright = undefined;
      this._options = undefined;
      this._wsServer = undefined;
      this._options = options;
      if (options.preLaunchedBrowser)
        this._preLaunchedPlaywright = options.preLaunchedBrowser.attribution.playwright;
      if (options.preLaunchedAndroidDevice)
        this._preLaunchedPlaywright = options.preLaunchedAndroidDevice._android.attribution.playwright;
      const browserSemaphore = new _semaphore.Semaphore(this._options.maxConnections);
      const controllerSemaphore = new _semaphore.Semaphore(1);
      const reuseBrowserSemaphore = new _semaphore.Semaphore(1);
      this._wsServer = new _wsServer.WSServer({
        onUpgrade: (request, socket) => {
          const uaError = (0, _utils.userAgentVersionMatchesErrorMessage)(request.headers["user-agent"] || "");
          if (uaError)
            return {
              error: `HTTP/${request.httpVersion} 428 Precondition Required\r\n\r\n${uaError}`
            };
        },
        onHeaders: (headers) => {
          if (process.env.PWTEST_SERVER_WS_HEADERS)
            headers.push(process.env.PWTEST_SERVER_WS_HEADERS);
        },
        onConnection: (request, url, ws2, id) => {
          const browserHeader = request.headers["x-playwright-browser"];
          const browserName = url.searchParams.get("browser") || (Array.isArray(browserHeader) ? browserHeader[0] : browserHeader) || null;
          const proxyHeader = request.headers["x-playwright-proxy"];
          const proxyValue = url.searchParams.get("proxy") || (Array.isArray(proxyHeader) ? proxyHeader[0] : proxyHeader);
          const launchOptionsHeader = request.headers["x-playwright-launch-options"] || "";
          const launchOptionsHeaderValue = Array.isArray(launchOptionsHeader) ? launchOptionsHeader[0] : launchOptionsHeader;
          const launchOptionsParam = url.searchParams.get("launch-options");
          let launchOptions = {};
          try {
            launchOptions = JSON.parse(launchOptionsParam || launchOptionsHeaderValue);
          } catch (e) {
          }
          const isExtension = this._options.mode === "extension";
          if (isExtension) {
            if (!this._preLaunchedPlaywright)
              this._preLaunchedPlaywright = (0, _playwright.createPlaywright)({
                sdkLanguage: "javascript",
                isServer: true
              });
          }
          let clientType = "launch-browser";
          let semaphore = browserSemaphore;
          if (isExtension && url.searchParams.has("debug-controller")) {
            clientType = "controller";
            semaphore = controllerSemaphore;
          } else if (isExtension) {
            clientType = "reuse-browser";
            semaphore = reuseBrowserSemaphore;
          } else if (this._options.mode === "launchServer") {
            clientType = "pre-launched-browser-or-android";
            semaphore = browserSemaphore;
          }
          return new _playwrightConnection.PlaywrightConnection(semaphore.acquire(), clientType, ws2, {
            socksProxyPattern: proxyValue,
            browserName,
            launchOptions
          }, {
            playwright: this._preLaunchedPlaywright,
            browser: this._options.preLaunchedBrowser,
            androidDevice: this._options.preLaunchedAndroidDevice,
            socksProxy: this._options.preLaunchedSocksProxy
          }, id, () => semaphore.release());
        },
        onClose: async () => {
          _debugLogger.debugLogger.log("server", "closing browsers");
          if (this._preLaunchedPlaywright)
            await Promise.all(this._preLaunchedPlaywright.allBrowsers().map((browser) => browser.close({
              reason: "Playwright Server stopped"
            })));
          _debugLogger.debugLogger.log("server", "closed browsers");
        }
      });
    }
    async listen(port = 0, hostname) {
      return this._wsServer.listen(port, hostname, this._options.path);
    }
    async close() {
      await this._wsServer.close();
    }
  }
  exports.PlaywrightServer = PlaywrightServer;
});

// node_modules/playwright-core/lib/browserServerImpl.js
var require_browserServerImpl = __commonJS((exports) => {
  var toProtocolLogger = function(logger) {
    return logger ? (direction, message) => {
      if (logger.isEnabled("protocol", "verbose"))
        logger.log("protocol", "verbose", (direction === "send" ? "SEND \u25BA " : "\u25C0 RECV ") + JSON.stringify(message), [], {});
    } : undefined;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BrowserServerLauncherImpl = undefined;
  var _utilsBundle = require_utilsBundle();
  var _clientHelper = require_clientHelper();
  var _utils = require_utils3();
  var _instrumentation = require_instrumentation();
  var _playwright = require_playwright();
  var _playwrightServer = require_playwrightServer();
  var _helper = require_helper();
  var _stackTrace = require_stackTrace();
  var _socksProxy = require_socksProxy();

  class BrowserServerLauncherImpl {
    constructor(browserName) {
      this._browserName = undefined;
      this._browserName = browserName;
    }
    async launchServer(options = {}) {
      const playwright = (0, _playwright.createPlaywright)({
        sdkLanguage: "javascript",
        isServer: true
      });
      const socksProxy = undefined;
      playwright.options.socksProxyPort = await (socksProxy === null || socksProxy === undefined ? undefined : socksProxy.listen(0));
      const metadata = (0, _instrumentation.serverSideCallMetadata)();
      const browser = await playwright[this._browserName].launch(metadata, {
        ...options,
        ignoreDefaultArgs: Array.isArray(options.ignoreDefaultArgs) ? options.ignoreDefaultArgs : undefined,
        ignoreAllDefaultArgs: !!options.ignoreDefaultArgs && !Array.isArray(options.ignoreDefaultArgs),
        env: options.env ? (0, _clientHelper.envObjectToArray)(options.env) : undefined
      }, toProtocolLogger(options.logger)).catch((e) => {
        const log = _helper.helper.formatBrowserLogs(metadata.log);
        (0, _stackTrace.rewriteErrorMessage)(e, `${e.message} Failed to launch browser.${log}`);
        throw e;
      });
      const path = options.wsPath ? options.wsPath.startsWith("/") ? options.wsPath : `/${options.wsPath}` : `/${(0, _utils.createGuid)()}`;
      const server = new _playwrightServer.PlaywrightServer({
        mode: "launchServer",
        path,
        maxConnections: Infinity,
        preLaunchedBrowser: browser,
        preLaunchedSocksProxy: socksProxy
      });
      const wsEndpoint = await server.listen(options.port);
      const browserServer = new _utilsBundle.ws.EventEmitter;
      browserServer.process = () => browser.options.browserProcess.process;
      browserServer.wsEndpoint = () => wsEndpoint;
      browserServer.close = () => browser.options.browserProcess.close();
      browserServer[Symbol.asyncDispose] = browserServer.close;
      browserServer.kill = () => browser.options.browserProcess.kill();
      browserServer._disconnectForTest = () => server.close();
      browserServer._userDataDirForTest = browser._userDataDirForTest;
      browser.options.browserProcess.onclose = (exitCode, signal) => {
        socksProxy === null || socksProxy === undefined || socksProxy.close().catch(() => {
        });
        server.close();
        browserServer.emit("close", exitCode, signal);
      };
      return browserServer;
    }
  }
  exports.BrowserServerLauncherImpl = BrowserServerLauncherImpl;
});

// node_modules/playwright-core/lib/androidServerImpl.js
var require_androidServerImpl = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AndroidServerLauncherImpl = undefined;
  var _utilsBundle = require_utilsBundle();
  var _utils = require_utils3();
  var _playwright = require_playwright();
  var _playwrightServer = require_playwrightServer();

  class AndroidServerLauncherImpl {
    async launchServer(options = {}) {
      const playwright = (0, _playwright.createPlaywright)({
        sdkLanguage: "javascript",
        isServer: true
      });
      let devices = await playwright.android.devices({
        host: options.adbHost,
        port: options.adbPort,
        omitDriverInstall: options.omitDriverInstall
      });
      if (devices.length === 0)
        throw new Error("No devices found");
      if (options.deviceSerialNumber) {
        devices = devices.filter((d) => d.serial === options.deviceSerialNumber);
        if (devices.length === 0)
          throw new Error(`No device with serial number '${options.deviceSerialNumber}' not found`);
      }
      if (devices.length > 1)
        throw new Error(`More than one device found. Please specify deviceSerialNumber`);
      const device = devices[0];
      const path = options.wsPath ? options.wsPath.startsWith("/") ? options.wsPath : `/${options.wsPath}` : `/${(0, _utils.createGuid)()}`;
      const server = new _playwrightServer.PlaywrightServer({
        mode: "launchServer",
        path,
        maxConnections: 1,
        preLaunchedAndroidDevice: device
      });
      const wsEndpoint = await server.listen(options.port);
      const browserServer = new _utilsBundle.ws.EventEmitter;
      browserServer.wsEndpoint = () => wsEndpoint;
      browserServer.close = () => device.close();
      browserServer.kill = () => device.close();
      device.on("close", () => {
        server.close();
        browserServer.emit("close");
      });
      return browserServer;
    }
  }
  exports.AndroidServerLauncherImpl = AndroidServerLauncherImpl;
});

// node_modules/playwright-core/lib/inProcessFactory.js
var require_inProcessFactory = __commonJS((exports) => {
  var createInProcessPlaywright = function() {
    const playwright = (0, _server.createPlaywright)({
      sdkLanguage: process.env.PW_LANG_NAME || "javascript"
    });
    const clientConnection = new _connection.Connection(undefined, undefined);
    clientConnection.useRawBuffers();
    const dispatcherConnection = new _server.DispatcherConnection(true);
    dispatcherConnection.onmessage = (message) => clientConnection.dispatch(message);
    clientConnection.onmessage = (message) => dispatcherConnection.dispatch(message);
    const rootScope = new _server.RootDispatcher(dispatcherConnection);
    new _server.PlaywrightDispatcher(rootScope, playwright);
    const playwrightAPI = clientConnection.getObjectWithKnownName("Playwright");
    playwrightAPI.chromium._serverLauncher = new _browserServerImpl.BrowserServerLauncherImpl("chromium");
    playwrightAPI.firefox._serverLauncher = new _browserServerImpl.BrowserServerLauncherImpl("firefox");
    playwrightAPI.webkit._serverLauncher = new _browserServerImpl.BrowserServerLauncherImpl("webkit");
    playwrightAPI._android._serverLauncher = new _androidServerImpl.AndroidServerLauncherImpl;
    dispatcherConnection.onmessage = (message) => setImmediate(() => clientConnection.dispatch(message));
    clientConnection.onmessage = (message) => setImmediate(() => dispatcherConnection.dispatch(message));
    clientConnection.toImpl = (x) => x ? dispatcherConnection._dispatchers.get(x._guid)._object : dispatcherConnection._dispatchers.get("");
    playwrightAPI._toImpl = clientConnection.toImpl;
    return playwrightAPI;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createInProcessPlaywright = createInProcessPlaywright;
  var _server = require_server();
  var _connection = require_connection();
  var _browserServerImpl = require_browserServerImpl();
  var _androidServerImpl = require_androidServerImpl();
});

// node_modules/playwright-core/lib/inprocess.js
var require_inprocess = __commonJS((exports, module) => {
  var _inProcessFactory = require_inProcessFactory();
  module.exports = (0, _inProcessFactory.createInProcessPlaywright)();
});

// node_modules/playwright-core/index.js
var require_playwright_core = __commonJS((exports, module) => {
  var minimumMajorNodeVersion = 14;
  var currentNodeVersion = process.versions.node;
  var semver = currentNodeVersion.split(".");
  var [major] = [+semver[0]];
  if (major < minimumMajorNodeVersion) {
    console.error("You are running Node.js " + currentNodeVersion + ".\n" + `Playwright requires Node.js ${minimumMajorNodeVersion} or higher. \n` + "Please update your version of Node.js.");
    process.exit(1);
  }
  module.exports = require_inprocess();
});

// node_modules/dotenv/package.json
var require_package2 = __commonJS((exports, module) => {
  module.exports = {
    name: "dotenv",
    version: "16.4.5",
    description: "Loads environment variables from .env file",
    main: "lib/main.js",
    types: "lib/main.d.ts",
    exports: {
      ".": {
        types: "./lib/main.d.ts",
        require: "./lib/main.js",
        default: "./lib/main.js"
      },
      "./config": "./config.js",
      "./config.js": "./config.js",
      "./lib/env-options": "./lib/env-options.js",
      "./lib/env-options.js": "./lib/env-options.js",
      "./lib/cli-options": "./lib/cli-options.js",
      "./lib/cli-options.js": "./lib/cli-options.js",
      "./package.json": "./package.json"
    },
    scripts: {
      "dts-check": "tsc --project tests/types/tsconfig.json",
      lint: "standard",
      "lint-readme": "standard-markdown",
      pretest: "npm run lint && npm run dts-check",
      test: "tap tests/*.js --100 -Rspec",
      "test:coverage": "tap --coverage-report=lcov",
      prerelease: "npm test",
      release: "standard-version"
    },
    repository: {
      type: "git",
      url: "git://github.com/motdotla/dotenv.git"
    },
    funding: "https://dotenvx.com",
    keywords: [
      "dotenv",
      "env",
      ".env",
      "environment",
      "variables",
      "config",
      "settings"
    ],
    readmeFilename: "README.md",
    license: "BSD-2-Clause",
    devDependencies: {
      "@definitelytyped/dtslint": "^0.0.133",
      "@types/node": "^18.11.3",
      decache: "^4.6.1",
      sinon: "^14.0.1",
      standard: "^17.0.0",
      "standard-markdown": "^7.1.0",
      "standard-version": "^9.5.0",
      tap: "^16.3.0",
      tar: "^6.1.11",
      typescript: "^4.8.4"
    },
    engines: {
      node: ">=12"
    },
    browser: {
      fs: false
    }
  };
});

// node_modules/dotenv/lib/main.js
var require_main = __commonJS((exports, module) => {
  var parse = function(src) {
    const obj = {};
    let lines = src.toString();
    lines = lines.replace(/\r\n?/mg, "\n");
    let match;
    while ((match = LINE.exec(lines)) != null) {
      const key = match[1];
      let value = match[2] || "";
      value = value.trim();
      const maybeQuote = value[0];
      value = value.replace(/^(['"`])([\s\S]*)\1$/mg, "$2");
      if (maybeQuote === '"') {
        value = value.replace(/\\n/g, "\n");
        value = value.replace(/\\r/g, "\r");
      }
      obj[key] = value;
    }
    return obj;
  };
  var _parseVault = function(options) {
    const vaultPath = _vaultPath(options);
    const result = DotenvModule.configDotenv({ path: vaultPath });
    if (!result.parsed) {
      const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`);
      err.code = "MISSING_DATA";
      throw err;
    }
    const keys = _dotenvKey(options).split(",");
    const length = keys.length;
    let decrypted;
    for (let i = 0;i < length; i++) {
      try {
        const key = keys[i].trim();
        const attrs = _instructions(result, key);
        decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key);
        break;
      } catch (error) {
        if (i + 1 >= length) {
          throw error;
        }
      }
    }
    return DotenvModule.parse(decrypted);
  };
  var _log = function(message) {
    console.log(`[dotenv@${version}][INFO] ${message}`);
  };
  var _warn = function(message) {
    console.log(`[dotenv@${version}][WARN] ${message}`);
  };
  var _debug = function(message) {
    console.log(`[dotenv@${version}][DEBUG] ${message}`);
  };
  var _dotenvKey = function(options) {
    if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {
      return options.DOTENV_KEY;
    }
    if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {
      return process.env.DOTENV_KEY;
    }
    return "";
  };
  var _instructions = function(result, dotenvKey) {
    let uri;
    try {
      uri = new URL(dotenvKey);
    } catch (error) {
      if (error.code === "ERR_INVALID_URL") {
        const err = new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");
        err.code = "INVALID_DOTENV_KEY";
        throw err;
      }
      throw error;
    }
    const key = uri.password;
    if (!key) {
      const err = new Error("INVALID_DOTENV_KEY: Missing key part");
      err.code = "INVALID_DOTENV_KEY";
      throw err;
    }
    const environment = uri.searchParams.get("environment");
    if (!environment) {
      const err = new Error("INVALID_DOTENV_KEY: Missing environment part");
      err.code = "INVALID_DOTENV_KEY";
      throw err;
    }
    const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`;
    const ciphertext = result.parsed[environmentKey];
    if (!ciphertext) {
      const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`);
      err.code = "NOT_FOUND_DOTENV_ENVIRONMENT";
      throw err;
    }
    return { ciphertext, key };
  };
  var _vaultPath = function(options) {
    let possibleVaultPath = null;
    if (options && options.path && options.path.length > 0) {
      if (Array.isArray(options.path)) {
        for (const filepath of options.path) {
          if (fs.existsSync(filepath)) {
            possibleVaultPath = filepath.endsWith(".vault") ? filepath : `${filepath}.vault`;
          }
        }
      } else {
        possibleVaultPath = options.path.endsWith(".vault") ? options.path : `${options.path}.vault`;
      }
    } else {
      possibleVaultPath = path.resolve(process.cwd(), ".env.vault");
    }
    if (fs.existsSync(possibleVaultPath)) {
      return possibleVaultPath;
    }
    return null;
  };
  var _resolveHome = function(envPath) {
    return envPath[0] === "~" ? path.join(os.homedir(), envPath.slice(1)) : envPath;
  };
  var _configVault = function(options) {
    _log("Loading env from encrypted .env.vault");
    const parsed = DotenvModule._parseVault(options);
    let processEnv = process.env;
    if (options && options.processEnv != null) {
      processEnv = options.processEnv;
    }
    DotenvModule.populate(processEnv, parsed, options);
    return { parsed };
  };
  var configDotenv = function(options) {
    const dotenvPath = path.resolve(process.cwd(), ".env");
    let encoding = "utf8";
    const debug2 = Boolean(options && options.debug);
    if (options && options.encoding) {
      encoding = options.encoding;
    } else {
      if (debug2) {
        _debug("No encoding is specified. UTF-8 is used by default");
      }
    }
    let optionPaths = [dotenvPath];
    if (options && options.path) {
      if (!Array.isArray(options.path)) {
        optionPaths = [_resolveHome(options.path)];
      } else {
        optionPaths = [];
        for (const filepath of options.path) {
          optionPaths.push(_resolveHome(filepath));
        }
      }
    }
    let lastError;
    const parsedAll = {};
    for (const path2 of optionPaths) {
      try {
        const parsed = DotenvModule.parse(fs.readFileSync(path2, { encoding }));
        DotenvModule.populate(parsedAll, parsed, options);
      } catch (e) {
        if (debug2) {
          _debug(`Failed to load ${path2} ${e.message}`);
        }
        lastError = e;
      }
    }
    let processEnv = process.env;
    if (options && options.processEnv != null) {
      processEnv = options.processEnv;
    }
    DotenvModule.populate(processEnv, parsedAll, options);
    if (lastError) {
      return { parsed: parsedAll, error: lastError };
    } else {
      return { parsed: parsedAll };
    }
  };
  var config = function(options) {
    if (_dotenvKey(options).length === 0) {
      return DotenvModule.configDotenv(options);
    }
    const vaultPath = _vaultPath(options);
    if (!vaultPath) {
      _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`);
      return DotenvModule.configDotenv(options);
    }
    return DotenvModule._configVault(options);
  };
  var decrypt = function(encrypted, keyStr) {
    const key = Buffer.from(keyStr.slice(-64), "hex");
    let ciphertext = Buffer.from(encrypted, "base64");
    const nonce = ciphertext.subarray(0, 12);
    const authTag = ciphertext.subarray(-16);
    ciphertext = ciphertext.subarray(12, -16);
    try {
      const aesgcm = crypto.createDecipheriv("aes-256-gcm", key, nonce);
      aesgcm.setAuthTag(authTag);
      return `${aesgcm.update(ciphertext)}${aesgcm.final()}`;
    } catch (error) {
      const isRange = error instanceof RangeError;
      const invalidKeyLength = error.message === "Invalid key length";
      const decryptionFailed = error.message === "Unsupported state or unable to authenticate data";
      if (isRange || invalidKeyLength) {
        const err = new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");
        err.code = "INVALID_DOTENV_KEY";
        throw err;
      } else if (decryptionFailed) {
        const err = new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");
        err.code = "DECRYPTION_FAILED";
        throw err;
      } else {
        throw error;
      }
    }
  };
  var populate = function(processEnv, parsed, options = {}) {
    const debug2 = Boolean(options && options.debug);
    const override = Boolean(options && options.override);
    if (typeof parsed !== "object") {
      const err = new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");
      err.code = "OBJECT_REQUIRED";
      throw err;
    }
    for (const key of Object.keys(parsed)) {
      if (Object.prototype.hasOwnProperty.call(processEnv, key)) {
        if (override === true) {
          processEnv[key] = parsed[key];
        }
        if (debug2) {
          if (override === true) {
            _debug(`"${key}" is already defined and WAS overwritten`);
          } else {
            _debug(`"${key}" is already defined and was NOT overwritten`);
          }
        }
      } else {
        processEnv[key] = parsed[key];
      }
    }
  };
  var fs = import.meta.require("fs");
  var path = import.meta.require("path");
  var os = import.meta.require("os");
  var crypto = import.meta.require("crypto");
  var packageJson = require_package2();
  var version = packageJson.version;
  var LINE = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;
  var DotenvModule = {
    configDotenv,
    _configVault,
    _parseVault,
    config,
    decrypt,
    parse,
    populate
  };
  exports.configDotenv = DotenvModule.configDotenv;
  exports._configVault = DotenvModule._configVault;
  exports._parseVault = DotenvModule._parseVault;
  exports.config = DotenvModule.config;
  exports.decrypt = DotenvModule.decrypt;
  exports.parse = DotenvModule.parse;
  exports.populate = DotenvModule.populate;
  module.exports = DotenvModule;
});

// node_modules/dayjs/dayjs.min.js
var require_dayjs_min = __commonJS((exports, module) => {
  (function(t, e) {
    typeof exports == "object" && typeof module != "undefined" ? module.exports = e() : typeof define == "function" && define.amd ? define(e) : (t = typeof globalThis != "undefined" ? globalThis : t || self).dayjs = e();
  })(exports, function() {
    var t = 1000, e = 60000, n = 3600000, r = "millisecond", i = "second", s = "minute", u = "hour", a = "day", o = "week", c = "month", f = "quarter", h = "year", d = "date", l = "Invalid Date", $ = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(t2) {
      var e2 = ["th", "st", "nd", "rd"], n2 = t2 % 100;
      return "[" + t2 + (e2[(n2 - 20) % 10] || e2[n2] || e2[0]) + "]";
    } }, m = function(t2, e2, n2) {
      var r2 = String(t2);
      return !r2 || r2.length >= e2 ? t2 : "" + Array(e2 + 1 - r2.length).join(n2) + t2;
    }, v = { s: m, z: function(t2) {
      var e2 = -t2.utcOffset(), n2 = Math.abs(e2), r2 = Math.floor(n2 / 60), i2 = n2 % 60;
      return (e2 <= 0 ? "+" : "-") + m(r2, 2, "0") + ":" + m(i2, 2, "0");
    }, m: function t(e2, n2) {
      if (e2.date() < n2.date())
        return -t(n2, e2);
      var r2 = 12 * (n2.year() - e2.year()) + (n2.month() - e2.month()), i2 = e2.clone().add(r2, c), s2 = n2 - i2 < 0, u2 = e2.clone().add(r2 + (s2 ? -1 : 1), c);
      return +(-(r2 + (n2 - i2) / (s2 ? i2 - u2 : u2 - i2)) || 0);
    }, a: function(t2) {
      return t2 < 0 ? Math.ceil(t2) || 0 : Math.floor(t2);
    }, p: function(t2) {
      return { M: c, y: h, w: o, d: a, D: d, h: u, m: s, s: i, ms: r, Q: f }[t2] || String(t2 || "").toLowerCase().replace(/s$/, "");
    }, u: function(t2) {
      return t2 === undefined;
    } }, g = "en", D = {};
    D[g] = M;
    var p = "$isDayjsObject", S = function(t2) {
      return t2 instanceof _ || !(!t2 || !t2[p]);
    }, w = function t(e2, n2, r2) {
      var i2;
      if (!e2)
        return g;
      if (typeof e2 == "string") {
        var s2 = e2.toLowerCase();
        D[s2] && (i2 = s2), n2 && (D[s2] = n2, i2 = s2);
        var u2 = e2.split("-");
        if (!i2 && u2.length > 1)
          return t(u2[0]);
      } else {
        var a2 = e2.name;
        D[a2] = e2, i2 = a2;
      }
      return !r2 && i2 && (g = i2), i2 || !r2 && g;
    }, O = function(t2, e2) {
      if (S(t2))
        return t2.clone();
      var n2 = typeof e2 == "object" ? e2 : {};
      return n2.date = t2, n2.args = arguments, new _(n2);
    }, b = v;
    b.l = w, b.i = S, b.w = function(t2, e2) {
      return O(t2, { locale: e2.$L, utc: e2.$u, x: e2.$x, $offset: e2.$offset });
    };
    var _ = function() {
      function M2(t2) {
        this.$L = w(t2.locale, null, true), this.parse(t2), this.$x = this.$x || t2.x || {}, this[p] = true;
      }
      var m2 = M2.prototype;
      return m2.parse = function(t2) {
        this.$d = function(t3) {
          var { date: e2, utc: n2 } = t3;
          if (e2 === null)
            return new Date(NaN);
          if (b.u(e2))
            return new Date;
          if (e2 instanceof Date)
            return new Date(e2);
          if (typeof e2 == "string" && !/Z$/i.test(e2)) {
            var r2 = e2.match($);
            if (r2) {
              var i2 = r2[2] - 1 || 0, s2 = (r2[7] || "0").substring(0, 3);
              return n2 ? new Date(Date.UTC(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2)) : new Date(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2);
            }
          }
          return new Date(e2);
        }(t2), this.init();
      }, m2.init = function() {
        var t2 = this.$d;
        this.$y = t2.getFullYear(), this.$M = t2.getMonth(), this.$D = t2.getDate(), this.$W = t2.getDay(), this.$H = t2.getHours(), this.$m = t2.getMinutes(), this.$s = t2.getSeconds(), this.$ms = t2.getMilliseconds();
      }, m2.$utils = function() {
        return b;
      }, m2.isValid = function() {
        return !(this.$d.toString() === l);
      }, m2.isSame = function(t2, e2) {
        var n2 = O(t2);
        return this.startOf(e2) <= n2 && n2 <= this.endOf(e2);
      }, m2.isAfter = function(t2, e2) {
        return O(t2) < this.startOf(e2);
      }, m2.isBefore = function(t2, e2) {
        return this.endOf(e2) < O(t2);
      }, m2.$g = function(t2, e2, n2) {
        return b.u(t2) ? this[e2] : this.set(n2, t2);
      }, m2.unix = function() {
        return Math.floor(this.valueOf() / 1000);
      }, m2.valueOf = function() {
        return this.$d.getTime();
      }, m2.startOf = function(t2, e2) {
        var n2 = this, r2 = !!b.u(e2) || e2, f2 = b.p(t2), l2 = function(t3, e3) {
          var i2 = b.w(n2.$u ? Date.UTC(n2.$y, e3, t3) : new Date(n2.$y, e3, t3), n2);
          return r2 ? i2 : i2.endOf(a);
        }, $2 = function(t3, e3) {
          return b.w(n2.toDate()[t3].apply(n2.toDate("s"), (r2 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e3)), n2);
        }, y2 = this.$W, M3 = this.$M, m3 = this.$D, v2 = "set" + (this.$u ? "UTC" : "");
        switch (f2) {
          case h:
            return r2 ? l2(1, 0) : l2(31, 11);
          case c:
            return r2 ? l2(1, M3) : l2(0, M3 + 1);
          case o:
            var g2 = this.$locale().weekStart || 0, D2 = (y2 < g2 ? y2 + 7 : y2) - g2;
            return l2(r2 ? m3 - D2 : m3 + (6 - D2), M3);
          case a:
          case d:
            return $2(v2 + "Hours", 0);
          case u:
            return $2(v2 + "Minutes", 1);
          case s:
            return $2(v2 + "Seconds", 2);
          case i:
            return $2(v2 + "Milliseconds", 3);
          default:
            return this.clone();
        }
      }, m2.endOf = function(t2) {
        return this.startOf(t2, false);
      }, m2.$set = function(t2, e2) {
        var n2, o2 = b.p(t2), f2 = "set" + (this.$u ? "UTC" : ""), l2 = (n2 = {}, n2[a] = f2 + "Date", n2[d] = f2 + "Date", n2[c] = f2 + "Month", n2[h] = f2 + "FullYear", n2[u] = f2 + "Hours", n2[s] = f2 + "Minutes", n2[i] = f2 + "Seconds", n2[r] = f2 + "Milliseconds", n2)[o2], $2 = o2 === a ? this.$D + (e2 - this.$W) : e2;
        if (o2 === c || o2 === h) {
          var y2 = this.clone().set(d, 1);
          y2.$d[l2]($2), y2.init(), this.$d = y2.set(d, Math.min(this.$D, y2.daysInMonth())).$d;
        } else
          l2 && this.$d[l2]($2);
        return this.init(), this;
      }, m2.set = function(t2, e2) {
        return this.clone().$set(t2, e2);
      }, m2.get = function(t2) {
        return this[b.p(t2)]();
      }, m2.add = function(r2, f2) {
        var d2, l2 = this;
        r2 = Number(r2);
        var $2 = b.p(f2), y2 = function(t2) {
          var e2 = O(l2);
          return b.w(e2.date(e2.date() + Math.round(t2 * r2)), l2);
        };
        if ($2 === c)
          return this.set(c, this.$M + r2);
        if ($2 === h)
          return this.set(h, this.$y + r2);
        if ($2 === a)
          return y2(1);
        if ($2 === o)
          return y2(7);
        var M3 = (d2 = {}, d2[s] = e, d2[u] = n, d2[i] = t, d2)[$2] || 1, m3 = this.$d.getTime() + r2 * M3;
        return b.w(m3, this);
      }, m2.subtract = function(t2, e2) {
        return this.add(-1 * t2, e2);
      }, m2.format = function(t2) {
        var e2 = this, n2 = this.$locale();
        if (!this.isValid())
          return n2.invalidDate || l;
        var r2 = t2 || "YYYY-MM-DDTHH:mm:ssZ", i2 = b.z(this), s2 = this.$H, u2 = this.$m, a2 = this.$M, o2 = n2.weekdays, c2 = n2.months, f2 = n2.meridiem, h2 = function(t3, n3, i3, s3) {
          return t3 && (t3[n3] || t3(e2, r2)) || i3[n3].slice(0, s3);
        }, d2 = function(t3) {
          return b.s(s2 % 12 || 12, t3, "0");
        }, $2 = f2 || function(t3, e3, n3) {
          var r3 = t3 < 12 ? "AM" : "PM";
          return n3 ? r3.toLowerCase() : r3;
        };
        return r2.replace(y, function(t3, r3) {
          return r3 || function(t4) {
            switch (t4) {
              case "YY":
                return String(e2.$y).slice(-2);
              case "YYYY":
                return b.s(e2.$y, 4, "0");
              case "M":
                return a2 + 1;
              case "MM":
                return b.s(a2 + 1, 2, "0");
              case "MMM":
                return h2(n2.monthsShort, a2, c2, 3);
              case "MMMM":
                return h2(c2, a2);
              case "D":
                return e2.$D;
              case "DD":
                return b.s(e2.$D, 2, "0");
              case "d":
                return String(e2.$W);
              case "dd":
                return h2(n2.weekdaysMin, e2.$W, o2, 2);
              case "ddd":
                return h2(n2.weekdaysShort, e2.$W, o2, 3);
              case "dddd":
                return o2[e2.$W];
              case "H":
                return String(s2);
              case "HH":
                return b.s(s2, 2, "0");
              case "h":
                return d2(1);
              case "hh":
                return d2(2);
              case "a":
                return $2(s2, u2, true);
              case "A":
                return $2(s2, u2, false);
              case "m":
                return String(u2);
              case "mm":
                return b.s(u2, 2, "0");
              case "s":
                return String(e2.$s);
              case "ss":
                return b.s(e2.$s, 2, "0");
              case "SSS":
                return b.s(e2.$ms, 3, "0");
              case "Z":
                return i2;
            }
            return null;
          }(t3) || i2.replace(":", "");
        });
      }, m2.utcOffset = function() {
        return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
      }, m2.diff = function(r2, d2, l2) {
        var $2, y2 = this, M3 = b.p(d2), m3 = O(r2), v2 = (m3.utcOffset() - this.utcOffset()) * e, g2 = this - m3, D2 = function() {
          return b.m(y2, m3);
        };
        switch (M3) {
          case h:
            $2 = D2() / 12;
            break;
          case c:
            $2 = D2();
            break;
          case f:
            $2 = D2() / 3;
            break;
          case o:
            $2 = (g2 - v2) / 604800000;
            break;
          case a:
            $2 = (g2 - v2) / 86400000;
            break;
          case u:
            $2 = g2 / n;
            break;
          case s:
            $2 = g2 / e;
            break;
          case i:
            $2 = g2 / t;
            break;
          default:
            $2 = g2;
        }
        return l2 ? $2 : b.a($2);
      }, m2.daysInMonth = function() {
        return this.endOf(c).$D;
      }, m2.$locale = function() {
        return D[this.$L];
      }, m2.locale = function(t2, e2) {
        if (!t2)
          return this.$L;
        var n2 = this.clone(), r2 = w(t2, e2, true);
        return r2 && (n2.$L = r2), n2;
      }, m2.clone = function() {
        return b.w(this.$d, this);
      }, m2.toDate = function() {
        return new Date(this.valueOf());
      }, m2.toJSON = function() {
        return this.isValid() ? this.toISOString() : null;
      }, m2.toISOString = function() {
        return this.$d.toISOString();
      }, m2.toString = function() {
        return this.$d.toUTCString();
      }, M2;
    }(), k = _.prototype;
    return O.prototype = k, [["$ms", r], ["$s", i], ["$m", s], ["$H", u], ["$W", a], ["$M", c], ["$y", h], ["$D", d]].forEach(function(t2) {
      k[t2[1]] = function(e2) {
        return this.$g(e2, t2[0], t2[1]);
      };
    }), O.extend = function(t2, e2) {
      return t2.$i || (t2(e2, _, O), t2.$i = true), O;
    }, O.locale = w, O.isDayjs = S, O.unix = function(t2) {
      return O(1000 * t2);
    }, O.en = D[g], O.Ls = D, O.p = {}, O;
  });
});

// node_modules/aspida/dist/esm/index.js
var import_form_data = __toESM(require_form_data(), 1);
var headersToObject = (headers) => [...headers.entries()].reduce((prev, [key, val]) => ({ ...prev, [key]: val }), {});
var appendDataToFormData = (data, formData) => {
  for (const key in data) {
    if (Array.isArray(data[key])) {
      data[key].forEach((d) => formData.append(key, d));
    } else if (data[key] != null) {
      formData.append(key, data[key]);
    }
  }
  return formData;
};
var encode = (str) => encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, (match) => ({
  "!": "%21",
  "'": "%27",
  "(": "%28",
  ")": "%29",
  "~": "%7E",
  "%20": "+",
  "%00": "\0"
})[match]);
var dataToURLString = (data) => Object.keys(data).filter((key) => data[key] != null).map((key) => Array.isArray(data[key]) ? data[key].map((v) => `${encode(key)}=${encode(v)}`).join("&") : `${encode(key)}=${encode(data[key])}`).join("&");
var hasFormData = typeof FormData !== "undefined";
var optionToRequest = (option, type) => {
  if ((option === null || option === undefined ? undefined : option.body) === undefined)
    return option;
  let httpBody;
  let headers = {};
  switch (type) {
    case "FormData":
      if (hasFormData) {
        httpBody = appendDataToFormData(option.body, new FormData);
      } else {
        const formData = new import_form_data.default;
        httpBody = appendDataToFormData(option.body, formData);
        headers = formData.getHeaders();
      }
      break;
    case "URLSearchParams":
      httpBody = dataToURLString(option.body);
      headers["Content-Type"] = "application/x-www-form-urlencoded;charset=utf-8";
      break;
    case "ArrayBuffer":
    case "string":
    case "Blob":
    case "any":
      httpBody = option.body;
      break;
    default:
      httpBody = JSON.stringify(option.body);
      headers["Content-Type"] = "application/json;charset=utf-8";
      break;
  }
  return { httpBody, ...option, headers: { ...headers, ...option.headers } };
};

// spotify-auth/$api.ts
var api = ({ baseURL, fetch: fetch2 }) => {
  const prefix = (baseURL === undefined ? "https://accounts.spotify.com" : baseURL).replace(/\/$/, "");
  const PATH0 = "/api/token";
  const PATH1 = "/authorize";
  const GET = "GET";
  const POST = "POST";
  return {
    api: {
      token: {
        post: (option) => fetch2(prefix, PATH0, POST, option, "URLSearchParams").json(),
        $post: (option) => fetch2(prefix, PATH0, POST, option, "URLSearchParams").json().then((r) => r.body),
        $path: () => `${prefix}${PATH0}`
      }
    },
    authorize: {
      get: (option) => fetch2(prefix, PATH1, GET, option).json(),
      $get: (option) => fetch2(prefix, PATH1, GET, option).json().then((r) => r.body),
      $path: (option) => `${prefix}${PATH1}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
    }
  };
};
var $api_default = api;

// node_modules/@aspida/fetch/dist/esm/index.js
class HTTPError extends Error {
  constructor(response) {
    super(`HTTP Error: ${response.status} ${response.statusText}`);
    this.response = response;
    Object.setPrototypeOf(this, new.target.prototype);
  }
}
var esm_default = (client = fetch, config) => ({
  baseURL: config === null || config === undefined ? undefined : config.baseURL,
  fetch(baseURL, url, method, params, type) {
    const send = (fn) => async () => {
      var _a, _b, _c;
      const request = optionToRequest(params, type);
      const serializer = (config === null || config === undefined ? undefined : config.paramsSerializer) || dataToURLString;
      const res = await client(`${(_b = (_a = request === null || request === undefined ? undefined : request.config) === null || _a === undefined ? undefined : _a.baseURL) !== null && _b !== undefined ? _b : baseURL}${url}${(request === null || request === undefined ? undefined : request.query) ? `?${serializer(request.query)}` : ""}`, {
        method,
        ...config,
        ...request === null || request === undefined ? undefined : request.config,
        body: request === null || request === undefined ? undefined : request.httpBody,
        headers: { ...config === null || config === undefined ? undefined : config.headers, ...(_c = request === null || request === undefined ? undefined : request.config) === null || _c === undefined ? undefined : _c.headers, ...request === null || request === undefined ? undefined : request.headers }
      }).then((res2) => !res2.ok && (config === null || config === undefined ? undefined : config.throwHttpErrors) ? Promise.reject(new HTTPError(res2)) : res2);
      return {
        status: res.status,
        headers: headersToObject(res.headers),
        originalResponse: res,
        body: await fn(res)
      };
    };
    return {
      send: send(() => Promise.resolve()),
      json: send((res) => res.json()),
      text: send((res) => res.text()),
      arrayBuffer: send((res) => res.arrayBuffer()),
      blob: send((res) => res.blob()),
      formData: send((res) => res.formData())
    };
  }
});

// src/lib/spotify-auth.ts
var import_express = __toESM(require_express2(), 1);
import http from "http";
import * as querystring from "querystring";

// node_modules/playwright-core/index.mjs
var import_ = __toESM(require_playwright_core(), 1);
var chromium = import_.default.chromium;
var firefox = import_.default.firefox;
var webkit = import_.default.webkit;
var selectors = import_.default.selectors;
var devices = import_.default.devices;
var errors = import_.default.errors;
var request = import_.default.request;
var _electron = import_.default._electron;
var _android = import_.default._android;

// src/lib/spotify-auth.ts
var import_dotenv = __toESM(require_main(), 1);

// node_modules/result-type-ts/dist/index.mjs
var getOrThrow = function() {
  if (this.isSuccess)
    return this.value;
  throw this.error;
};
var toUnion = function() {
  if (this.isSuccess)
    return this.value;
  return this.error;
};
var ifSuccess = function(f) {
  if (this.isFailure)
    return;
  return f(this.value);
};
var ifFailure = function(f) {
  if (this.isSuccess)
    return;
  return f(this.error);
};
var match = function(f, g) {
  if (this.isSuccess)
    return f(this.value);
  return g(this.error);
};
var map = function(f) {
  if (this.isFailure)
    return this;
  return Result.success(f(this.value));
};
var mapError = function(f) {
  if (this.isSuccess)
    return this;
  return Result.failure(f(this.error));
};
var flatMap = function(f) {
  if (this.isFailure)
    return this;
  return f(this.value);
};
var flatten = function() {
  if (this.isFailure)
    return this;
  return this.value;
};
var assertErrorInstanceOf = function(constructor) {
  if (this.isSuccess)
    return this;
  if (this.error instanceof constructor)
    return this;
  throw new TypeError(`Assertion failed: Expected error to be an instance of ${constructor.name}.`);
};
var withPrototype = function(target, prototype2) {
  return Object.assign(Object.create(prototype2), target);
};
var prototype = {
  getOrThrow,
  toUnion,
  ifSuccess,
  ifFailure,
  match,
  map,
  mapError,
  flatMap,
  flatten,
  assertErrorInstanceOf
};
var Result;
((Result2) => {
  function success(value) {
    return withPrototype({ value, isSuccess: true, isFailure: false }, prototype);
  }
  Result2.success = success;
  function failure(error) {
    return withPrototype({ error, isSuccess: false, isFailure: true }, prototype);
  }
  Result2.failure = failure;
  function tryCatch(f) {
    try {
      return success(f());
    } catch (error) {
      return failure(error);
    }
  }
  Result2.tryCatch = tryCatch;
  async function fromPromise(promise) {
    try {
      return success(await promise);
    } catch (error) {
      return failure(error);
    }
  }
  Result2.fromPromise = fromPromise;
  function fromNullish(value) {
    return value != null ? success(value) : failure(value);
  }
  Result2.fromNullish = fromNullish;
  function all(results) {
    const values = [];
    for (const result of results) {
      if (result.isFailure)
        return result;
      values.push(result.value);
    }
    return success(values);
  }
  Result2.all = all;
})(Result || (Result = {}));

// src/lib/spotify-auth.ts
import_dotenv.default.config();
var BASE_URL = "http://localhost";
var PORT = "3000";
var AUTH_BASE_URL = BASE_URL + (PORT ? `:${PORT}` : "");
var SPOTIFY_AUTHORIZE_URL = "https://accounts.spotify.com/authorize";
var SCOPE = "playlist-read-private playlist-modify-private playlist-modify-public";
var AUTH_REDIRECT_URL = `${AUTH_BASE_URL}/callback`;
var BASE_CHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
var generateString = (length) => {
  const chars = Array.from({ length }, () => {
    const index = Math.floor(Math.random() * BASE_CHARS.length);
    return BASE_CHARS[index];
  });
  return chars.join("");
};
var state = generateString(16);
var loginPage = async () => {
  const url = SPOTIFY_AUTHORIZE_URL + "?" + querystring.stringify({
    response_type: "code",
    client_id: "da5386eb1d3f4c1ba01a763a8e0cea92",
    scope: SCOPE,
    redirect_uri: AUTH_REDIRECT_URL,
    state
  });
  const browser = await chromium.launch({
    channel: "chrome",
    headless: false
  });
  const page = await browser.newPage();
  await page.goto(url);
  await page.fill("#login-username", "hotterdragon@gmail.com");
  await page.fill("#login-password", "xkc1kcw.phv-jhf.UCK");
  await page.locator("#login-button").click();
  await page.waitForTimeout(1000);
  const [locator] = await Promise.all([page.locator("button")]);
  const buttons = await locator.all();
  for (const button of buttons) {
    const testId = await button.getAttribute("data-testid");
    if (testId === "auth-accept") {
      await button.click();
    }
  }
  return browser;
};
var callbackAction = (app, state2) => new Promise((resolve, reject) => {
  app.get("/callback", (req, res) => {
    const code = req.query.code || null;
    const s = req.query.state || null;
    if (state2 !== s) {
      reject(new Error("state is not matched"));
      res.status(400);
      return;
    }
    res.status(200);
    resolve(code);
    res.send("OK");
  });
});
var validateValueSet = (value, message) => {
  if (!value) {
    throw new Error(message);
  }
};
var token = async (code, redirectUri) => {
  const client = $api_default(esm_default());
  try {
    validateValueSet("da5386eb1d3f4c1ba01a763a8e0cea92", "SPOTIFY_CLIENT_ID is not set");
    validateValueSet("9b56b3bcd4104ecb8d6eb06360df38ea", "SPOTIFY_CLIENT_SECRET is not set");
    const clientId = "da5386eb1d3f4c1ba01a763a8e0cea92";
    const clientSecret = "9b56b3bcd4104ecb8d6eb06360df38ea";
    const basicAuth = Buffer.from(`${clientId}:${clientSecret}`).toString("base64");
    const { body } = await client.api.token.post({
      body: {
        code,
        redirect_uri: redirectUri,
        grant_type: "authorization_code"
      },
      config: {
        headers: {
          Authorization: `Basic ${basicAuth}`
        }
      }
    });
    return Result.success(body);
  } catch (e) {
    return Result.failure(e);
  }
};
var authorize = async () => {
  const app = import_express.default();
  const server = http.createServer(app);
  try {
    validateValueSet("hotterdragon@gmail.com", "SPOTIFY_USER_NAME is not set");
    validateValueSet("xkc1kcw.phv-jhf.UCK", "SPOTIFY_USER_PASSWORD is not set");
    const getCode = callbackAction(app, state);
    server.listen(PORT, () => {
      console.log(`Server is running on port ${PORT}`);
    });
    const browser = await loginPage();
    const code = await getCode;
    await browser.close();
    return await token(code, AUTH_REDIRECT_URL);
  } catch (e) {
    console.log(e);
    return Result.failure(e);
  } finally {
    server.close();
  }
};

// src/lib/scrape-songs.ts
var scrapeSongs = async (url, songsSelector, artistSelector, songSelector) => {
  const browser = await chromium.launch({
    channel: "chrome",
    headless: true,
    slowMo: 500
  });
  try {
    const page = await browser.newPage();
    await page.goto(url);
    return await page.evaluate(([songsSelector2, artistSelector2, songSelector2]) => {
      const songInfos = document.querySelectorAll(songsSelector2);
      return Array.from(songInfos.values()).map((songInfo) => {
        const artistName = (songInfo.querySelector(artistSelector2)?.textContent ?? "").trim();
        const songName = (songInfo.querySelector(songSelector2)?.textContent ?? "").trim();
        return {
          songName,
          artistName
        };
      });
    }, [songsSelector, artistSelector, songSelector]);
  } finally {
    await browser.close();
  }
};

// src/lib/jwave.ts
var JWAVE_ON_AIR_URL = "https://www.j-wave.co.jp/songlist/";
var getOnAirList = async () => {
  return await scrapeSongs(JWAVE_ON_AIR_URL, ".list_songs > .song > .song_wrap > .song_inner > .col_l > .song_info", ".txt_artist > span", "h4");
};

// src/lib/fm802.ts
var FM802_ON_AIR_URL = "https://funky802.com/site/onairlist";
var getOnAirList2 = async () => {
  return await scrapeSongs(FM802_ON_AIR_URL, ".c-infoOnair__list", ".c-infoOnair__list--artist", ".c-infoOnair__list--title");
};

// spotify/search/$api.ts
var api2 = ({ baseURL, fetch: fetch3 }) => {
  const prefix = (baseURL === undefined ? "https://api.spotify.com/v1" : baseURL).replace(/\/$/, "");
  const PATH0 = "/search";
  const GET = "GET";
  return {
    get: (option) => fetch3(prefix, PATH0, GET, option).json(),
    $get: (option) => fetch3(prefix, PATH0, GET, option).json().then((r) => r.body),
    $path: (option) => `${prefix}${PATH0}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
  };
};
var $api_default2 = api2;

// spotify/users/$api.ts
var api3 = ({ baseURL, fetch: fetch3 }) => {
  const prefix = (baseURL === undefined ? "https://api.spotify.com/v1" : baseURL).replace(/\/$/, "");
  const PATH0 = "/users";
  const PATH1 = "/playlists";
  const GET = "GET";
  const POST = "POST";
  return {
    _user_id: (val0) => {
      const prefix0 = `${PATH0}/${val0}`;
      return {
        playlists: {
          get: (option) => fetch3(prefix, `${prefix0}${PATH1}`, GET, option).json(),
          $get: (option) => fetch3(prefix, `${prefix0}${PATH1}`, GET, option).json().then((r) => r.body),
          post: (option) => fetch3(prefix, `${prefix0}${PATH1}`, POST, option).json(),
          $post: (option) => fetch3(prefix, `${prefix0}${PATH1}`, POST, option).json().then((r) => r.body),
          $path: (option) => `${prefix}${prefix0}${PATH1}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
        },
        get: (option) => fetch3(prefix, prefix0, GET, option).json(),
        $get: (option) => fetch3(prefix, prefix0, GET, option).json().then((r) => r.body),
        $path: () => `${prefix}${prefix0}`
      };
    }
  };
};
var $api_default3 = api3;

// spotify/playlists/$api.ts
var api4 = ({ baseURL, fetch: fetch3 }) => {
  const prefix = (baseURL === undefined ? "https://api.spotify.com/v1" : baseURL).replace(/\/$/, "");
  const PATH0 = "/playlists";
  const PATH1 = "/followers";
  const PATH2 = "/followers/contains";
  const PATH3 = "/images";
  const PATH4 = "/tracks";
  const GET = "GET";
  const POST = "POST";
  const PUT = "PUT";
  const DELETE = "DELETE";
  return {
    _playlist_id: (val0) => {
      const prefix0 = `${PATH0}/${val0}`;
      return {
        followers: {
          contains: {
            get: (option) => fetch3(prefix, `${prefix0}${PATH2}`, GET, option).json(),
            $get: (option) => fetch3(prefix, `${prefix0}${PATH2}`, GET, option).json().then((r) => r.body),
            $path: (option) => `${prefix}${prefix0}${PATH2}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
          },
          put: (option) => fetch3(prefix, `${prefix0}${PATH1}`, PUT, option).send(),
          $put: (option) => fetch3(prefix, `${prefix0}${PATH1}`, PUT, option).send().then((r) => r.body),
          delete: (option) => fetch3(prefix, `${prefix0}${PATH1}`, DELETE, option).send(),
          $delete: (option) => fetch3(prefix, `${prefix0}${PATH1}`, DELETE, option).send().then((r) => r.body),
          $path: () => `${prefix}${prefix0}${PATH1}`
        },
        images: {
          get: (option) => fetch3(prefix, `${prefix0}${PATH3}`, GET, option).json(),
          $get: (option) => fetch3(prefix, `${prefix0}${PATH3}`, GET, option).json().then((r) => r.body),
          put: (option) => fetch3(prefix, `${prefix0}${PATH3}`, PUT, option).send(),
          $put: (option) => fetch3(prefix, `${prefix0}${PATH3}`, PUT, option).send().then((r) => r.body),
          $path: () => `${prefix}${prefix0}${PATH3}`
        },
        tracks: {
          get: (option) => fetch3(prefix, `${prefix0}${PATH4}`, GET, option).json(),
          $get: (option) => fetch3(prefix, `${prefix0}${PATH4}`, GET, option).json().then((r) => r.body),
          post: (option) => fetch3(prefix, `${prefix0}${PATH4}`, POST, option).json(),
          $post: (option) => fetch3(prefix, `${prefix0}${PATH4}`, POST, option).json().then((r) => r.body),
          put: (option) => fetch3(prefix, `${prefix0}${PATH4}`, PUT, option).json(),
          $put: (option) => fetch3(prefix, `${prefix0}${PATH4}`, PUT, option).json().then((r) => r.body),
          delete: (option) => fetch3(prefix, `${prefix0}${PATH4}`, DELETE, option).json(),
          $delete: (option) => fetch3(prefix, `${prefix0}${PATH4}`, DELETE, option).json().then((r) => r.body),
          $path: (option) => `${prefix}${prefix0}${PATH4}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
        },
        get: (option) => fetch3(prefix, prefix0, GET, option).json(),
        $get: (option) => fetch3(prefix, prefix0, GET, option).json().then((r) => r.body),
        put: (option) => fetch3(prefix, prefix0, PUT, option).send(),
        $put: (option) => fetch3(prefix, prefix0, PUT, option).send().then((r) => r.body),
        $path: (option) => `${prefix}${prefix0}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      };
    }
  };
};
var $api_default4 = api4;

// spotify/me/$api.ts
var api5 = ({ baseURL, fetch: fetch3 }) => {
  const prefix = (baseURL === undefined ? "https://api.spotify.com/v1" : baseURL).replace(/\/$/, "");
  const PATH0 = "/me";
  const PATH1 = "/me/albums";
  const PATH2 = "/me/albums/contains";
  const PATH3 = "/me/audiobooks";
  const PATH4 = "/me/audiobooks/contains";
  const PATH5 = "/me/episodes";
  const PATH6 = "/me/episodes/contains";
  const PATH7 = "/me/following";
  const PATH8 = "/me/following/contains";
  const PATH9 = "/me/player";
  const PATH10 = "/me/player/currently-playing";
  const PATH11 = "/me/player/devices";
  const PATH12 = "/me/player/next";
  const PATH13 = "/me/player/pause";
  const PATH14 = "/me/player/play";
  const PATH15 = "/me/player/previous";
  const PATH16 = "/me/player/queue";
  const PATH17 = "/me/player/recently-played";
  const PATH18 = "/me/player/repeat";
  const PATH19 = "/me/player/seek";
  const PATH20 = "/me/player/shuffle";
  const PATH21 = "/me/player/volume";
  const PATH22 = "/me/playlists";
  const PATH23 = "/me/shows";
  const PATH24 = "/me/shows/contains";
  const PATH25 = "/me/top/artists";
  const PATH26 = "/me/top/tracks";
  const PATH27 = "/me/tracks";
  const PATH28 = "/me/tracks/contains";
  const GET = "GET";
  const POST = "POST";
  const PUT = "PUT";
  const DELETE = "DELETE";
  return {
    albums: {
      contains: {
        get: (option) => fetch3(prefix, PATH2, GET, option).json(),
        $get: (option) => fetch3(prefix, PATH2, GET, option).json().then((r) => r.body),
        $path: (option) => `${prefix}${PATH2}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      get: (option) => fetch3(prefix, PATH1, GET, option).json(),
      $get: (option) => fetch3(prefix, PATH1, GET, option).json().then((r) => r.body),
      put: (option) => fetch3(prefix, PATH1, PUT, option).send(),
      $put: (option) => fetch3(prefix, PATH1, PUT, option).send().then((r) => r.body),
      delete: (option) => fetch3(prefix, PATH1, DELETE, option).send(),
      $delete: (option) => fetch3(prefix, PATH1, DELETE, option).send().then((r) => r.body),
      $path: (option) => `${prefix}${PATH1}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
    },
    audiobooks: {
      contains: {
        get: (option) => fetch3(prefix, PATH4, GET, option).json(),
        $get: (option) => fetch3(prefix, PATH4, GET, option).json().then((r) => r.body),
        $path: (option) => `${prefix}${PATH4}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      get: (option) => fetch3(prefix, PATH3, GET, option).json(),
      $get: (option) => fetch3(prefix, PATH3, GET, option).json().then((r) => r.body),
      put: (option) => fetch3(prefix, PATH3, PUT, option).send(),
      $put: (option) => fetch3(prefix, PATH3, PUT, option).send().then((r) => r.body),
      delete: (option) => fetch3(prefix, PATH3, DELETE, option).send(),
      $delete: (option) => fetch3(prefix, PATH3, DELETE, option).send().then((r) => r.body),
      $path: (option) => `${prefix}${PATH3}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
    },
    episodes: {
      contains: {
        get: (option) => fetch3(prefix, PATH6, GET, option).json(),
        $get: (option) => fetch3(prefix, PATH6, GET, option).json().then((r) => r.body),
        $path: (option) => `${prefix}${PATH6}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      get: (option) => fetch3(prefix, PATH5, GET, option).json(),
      $get: (option) => fetch3(prefix, PATH5, GET, option).json().then((r) => r.body),
      put: (option) => fetch3(prefix, PATH5, PUT, option).send(),
      $put: (option) => fetch3(prefix, PATH5, PUT, option).send().then((r) => r.body),
      delete: (option) => fetch3(prefix, PATH5, DELETE, option).send(),
      $delete: (option) => fetch3(prefix, PATH5, DELETE, option).send().then((r) => r.body),
      $path: (option) => `${prefix}${PATH5}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
    },
    following: {
      contains: {
        get: (option) => fetch3(prefix, PATH8, GET, option).json(),
        $get: (option) => fetch3(prefix, PATH8, GET, option).json().then((r) => r.body),
        $path: (option) => `${prefix}${PATH8}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      get: (option) => fetch3(prefix, PATH7, GET, option).json(),
      $get: (option) => fetch3(prefix, PATH7, GET, option).json().then((r) => r.body),
      put: (option) => fetch3(prefix, PATH7, PUT, option).send(),
      $put: (option) => fetch3(prefix, PATH7, PUT, option).send().then((r) => r.body),
      delete: (option) => fetch3(prefix, PATH7, DELETE, option).send(),
      $delete: (option) => fetch3(prefix, PATH7, DELETE, option).send().then((r) => r.body),
      $path: (option) => `${prefix}${PATH7}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
    },
    player: {
      currently_playing: {
        get: (option) => fetch3(prefix, PATH10, GET, option).json(),
        $get: (option) => fetch3(prefix, PATH10, GET, option).json().then((r) => r.body),
        $path: (option) => `${prefix}${PATH10}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      devices: {
        get: (option) => fetch3(prefix, PATH11, GET, option).json(),
        $get: (option) => fetch3(prefix, PATH11, GET, option).json().then((r) => r.body),
        $path: () => `${prefix}${PATH11}`
      },
      next: {
        post: (option) => fetch3(prefix, PATH12, POST, option).send(),
        $post: (option) => fetch3(prefix, PATH12, POST, option).send().then((r) => r.body),
        $path: (option) => `${prefix}${PATH12}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      pause: {
        put: (option) => fetch3(prefix, PATH13, PUT, option).send(),
        $put: (option) => fetch3(prefix, PATH13, PUT, option).send().then((r) => r.body),
        $path: (option) => `${prefix}${PATH13}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      play: {
        put: (option) => fetch3(prefix, PATH14, PUT, option).send(),
        $put: (option) => fetch3(prefix, PATH14, PUT, option).send().then((r) => r.body),
        $path: (option) => `${prefix}${PATH14}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      previous: {
        post: (option) => fetch3(prefix, PATH15, POST, option).send(),
        $post: (option) => fetch3(prefix, PATH15, POST, option).send().then((r) => r.body),
        $path: (option) => `${prefix}${PATH15}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      queue: {
        get: (option) => fetch3(prefix, PATH16, GET, option).json(),
        $get: (option) => fetch3(prefix, PATH16, GET, option).json().then((r) => r.body),
        post: (option) => fetch3(prefix, PATH16, POST, option).send(),
        $post: (option) => fetch3(prefix, PATH16, POST, option).send().then((r) => r.body),
        $path: (option) => `${prefix}${PATH16}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      recently_played: {
        get: (option) => fetch3(prefix, PATH17, GET, option).json(),
        $get: (option) => fetch3(prefix, PATH17, GET, option).json().then((r) => r.body),
        $path: (option) => `${prefix}${PATH17}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      repeat: {
        put: (option) => fetch3(prefix, PATH18, PUT, option).send(),
        $put: (option) => fetch3(prefix, PATH18, PUT, option).send().then((r) => r.body),
        $path: (option) => `${prefix}${PATH18}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      seek: {
        put: (option) => fetch3(prefix, PATH19, PUT, option).send(),
        $put: (option) => fetch3(prefix, PATH19, PUT, option).send().then((r) => r.body),
        $path: (option) => `${prefix}${PATH19}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      shuffle: {
        put: (option) => fetch3(prefix, PATH20, PUT, option).send(),
        $put: (option) => fetch3(prefix, PATH20, PUT, option).send().then((r) => r.body),
        $path: (option) => `${prefix}${PATH20}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      volume: {
        put: (option) => fetch3(prefix, PATH21, PUT, option).send(),
        $put: (option) => fetch3(prefix, PATH21, PUT, option).send().then((r) => r.body),
        $path: (option) => `${prefix}${PATH21}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      get: (option) => fetch3(prefix, PATH9, GET, option).json(),
      $get: (option) => fetch3(prefix, PATH9, GET, option).json().then((r) => r.body),
      put: (option) => fetch3(prefix, PATH9, PUT, option).send(),
      $put: (option) => fetch3(prefix, PATH9, PUT, option).send().then((r) => r.body),
      $path: (option) => `${prefix}${PATH9}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
    },
    playlists: {
      get: (option) => fetch3(prefix, PATH22, GET, option).json(),
      $get: (option) => fetch3(prefix, PATH22, GET, option).json().then((r) => r.body),
      $path: (option) => `${prefix}${PATH22}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
    },
    shows: {
      contains: {
        get: (option) => fetch3(prefix, PATH24, GET, option).json(),
        $get: (option) => fetch3(prefix, PATH24, GET, option).json().then((r) => r.body),
        $path: (option) => `${prefix}${PATH24}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      get: (option) => fetch3(prefix, PATH23, GET, option).json(),
      $get: (option) => fetch3(prefix, PATH23, GET, option).json().then((r) => r.body),
      put: (option) => fetch3(prefix, PATH23, PUT, option).send(),
      $put: (option) => fetch3(prefix, PATH23, PUT, option).send().then((r) => r.body),
      delete: (option) => fetch3(prefix, PATH23, DELETE, option).send(),
      $delete: (option) => fetch3(prefix, PATH23, DELETE, option).send().then((r) => r.body),
      $path: (option) => `${prefix}${PATH23}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
    },
    top: {
      artists: {
        get: (option) => fetch3(prefix, PATH25, GET, option).json(),
        $get: (option) => fetch3(prefix, PATH25, GET, option).json().then((r) => r.body),
        $path: (option) => `${prefix}${PATH25}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      tracks: {
        get: (option) => fetch3(prefix, PATH26, GET, option).json(),
        $get: (option) => fetch3(prefix, PATH26, GET, option).json().then((r) => r.body),
        $path: (option) => `${prefix}${PATH26}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      }
    },
    tracks: {
      contains: {
        get: (option) => fetch3(prefix, PATH28, GET, option).json(),
        $get: (option) => fetch3(prefix, PATH28, GET, option).json().then((r) => r.body),
        $path: (option) => `${prefix}${PATH28}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      get: (option) => fetch3(prefix, PATH27, GET, option).json(),
      $get: (option) => fetch3(prefix, PATH27, GET, option).json().then((r) => r.body),
      put: (option) => fetch3(prefix, PATH27, PUT, option).send(),
      $put: (option) => fetch3(prefix, PATH27, PUT, option).send().then((r) => r.body),
      delete: (option) => fetch3(prefix, PATH27, DELETE, option).send(),
      $delete: (option) => fetch3(prefix, PATH27, DELETE, option).send().then((r) => r.body),
      $path: (option) => `${prefix}${PATH27}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
    },
    get: (option) => fetch3(prefix, PATH0, GET, option).json(),
    $get: (option) => fetch3(prefix, PATH0, GET, option).json().then((r) => r.body),
    $path: () => `${prefix}${PATH0}`
  };
};
var $api_default5 = api5;

// src/lib/spotify.ts
import * as process2 from "process";
var userId = process2.env.SPOTIFY_USER_ID ?? "";
var spotify = (accessToken) => {
  const config = {
    headers: {
      Authorization: `Bearer ${accessToken}`
    }
  };
  const getResult = (callback) => callback().then((data) => Result.success(data)).catch((e) => Result.failure(e));
  const partialMatch = (artistName, artist) => {
    const matchLength = Math.round(artist.length * 0.8);
    const partialArtistName = artistName.slice(0, matchLength);
    return artistName.startsWith(partialArtistName);
  };
  const splitMatch = (artistName, artist) => {
    const splitString = ["/", "feat.", "with", "&", "and"];
    for (const str of splitString) {
      if (artist.includes(str)) {
        const [name] = artist.split(str);
        if (artistName === name.trim()) {
          return true;
        }
      }
    }
    return false;
  };
  return {
    searchTrack: async (artist, song) => getResult(async () => {
      const client = $api_default2(esm_default());
      const query = `remaster track:${song} artist:${artist}`.replace(/ /g, "%20");
      const data = await client.get({
        query: { q: query, type: ["track"], limit: 50 },
        config
      });
      return (data.body.tracks.items ?? []).filter((item) => {
        if ((item.album?.artists.length ?? 0) === 0) {
          return false;
        }
        const target = artist.toLowerCase();
        for (const artist2 of item.album?.artists ?? []) {
          const artistName = artist2.name?.toLowerCase() ?? "";
          if (artistName === target || partialMatch(artistName, target) || splitMatch(artistName, target)) {
            return item.name?.toLowerCase().startsWith(song.toLowerCase());
          }
        }
        return false;
      });
    }),
    createPlaylist: async (name, description, isPublic = false) => getResult(async () => {
      const client = $api_default3(esm_default());
      const data = await client._user_id(userId).playlists.post({
        body: { name, description: description ?? "", public: isPublic },
        config
      });
      return data.body;
    }),
    getUserPlaylists: async (offset = 0, limit = 50) => getResult(async () => {
      const client = $api_default3(esm_default());
      const data = await client._user_id(userId).playlists.get({
        query: { offset, limit },
        config
      });
      return data.body;
    }),
    getPlaylistTracks: async (playlistId, offset = 0, limit = 50) => getResult(async () => {
      const client = $api_default4(esm_default());
      const data = await client._playlist_id(playlistId).tracks.get({
        query: { offset, limit },
        config
      });
      return data.body;
    }),
    addItemsToPlaylist: async (playlistId, trackUris) => getResult(async () => {
      const client = $api_default4(esm_default());
      const data = await client._playlist_id(playlistId).tracks.post({
        body: { position: 0, uris: trackUris },
        config
      });
      return data.body;
    }),
    me: async () => getResult(async () => {
      const client = $api_default5(esm_default());
      const data = await client.get({
        config
      });
      return data.body;
    })
  };
};

// src/index.ts
var import_dayjs = __toESM(require_dayjs_min(), 1);
var RadioStation = {
  JWave: "J-WAVE",
  FM802: "FM802"
};
var searchTracks = async (client, songs) => {
  const tracks = songs.map(async (item, i) => {
    if (i !== 0 && i % 30 === 0) {
      await sleep(30000);
    }
    const result2 = await client.searchTrack(item.artistName, item.songName);
    return result2.flatMap((tracks2) => {
      if (tracks2.length > 0) {
        const track = tracks2[0];
        console.debug(track.artists?.[0].name ?? "");
        console.debug(track.name);
        console.debug(track.external_urls?.spotify);
        console.debug(track.uri);
        return Result.success(track.uri ?? "");
      } else {
        return Result.failure(new Error(`artist: ${item.artistName} song: ${item.songName}, no data`));
      }
    });
  });
  const result = await Promise.all(tracks);
  const [uris, errors2] = result.reduce((previousValue, currentValue) => {
    const [uris2, errors3] = previousValue;
    return currentValue.isFailure ? [uris2, [...errors3, currentValue.error]] : [[...uris2, currentValue.value], errors3];
  }, [[], []]);
  if (errors2.length > 0) {
    console.error(errors2.map((error) => error.message).join("\n"));
  }
  return uris;
};
var sleep = (ms) => new Promise((resolve) => {
  setTimeout(() => {
    resolve();
  }, ms);
});
var createPlaylist = async (client, playlistName) => {
  const result = await client.createPlaylist(playlistName);
  return result.map((value) => value.id);
};
var getPlaylist = async (client, playlistName, offset = 0) => {
  const result = await client.getUserPlaylists(offset);
  return await result.match(async (value) => {
    const playlist = value.items?.find((item) => item.name === playlistName);
    if (playlist) {
      return Result.success(playlist);
    } else {
      return !value.next ? Result.success(undefined) : await getPlaylist(client, playlistName, offset + 50);
    }
  }, (error) => Result.failure(error));
};
var getPlaylistTrackUris = async (client, playlistId, offset = 0) => {
  const result = await client.getPlaylistTracks(playlistId, offset, 50);
  return result.match(async (value) => {
    const tracks = value?.items?.map((item) => item.track?.uri ?? "") ?? [];
    const result2 = !value?.next ? Result.success([]) : await getPlaylistTrackUris(client, playlistId, offset + 50);
    return result2.map((nextTracks) => [...tracks, ...nextTracks]);
  }, (error) => Result.failure(error));
};
var getOrCreatePlaylist = async (client, playlistName) => {
  const listResult = await getPlaylist(client, playlistName);
  return await listResult.match(async (playlist) => {
    const idResult = playlist ? Result.success(playlist.id) : await createPlaylist(client, playlistName);
    return idResult.flatMap((id) => {
      if (!id) {
        return Result.failure(new Error("playlistId is undefined"));
      }
      return Result.success(id ?? "");
    });
  }, (error) => Result.failure(error));
};
var filterTrackUris = async (client, playlistId, trackUris) => (await getPlaylistTrackUris(client, playlistId)).map((uris) => trackUris.filter((uri) => !uris.includes(uri) && uri !== ""));
var savePlaylist = async (client, playlistName, trackUris) => {
  const today = import_dayjs.default().format("YYYY-MM-DD");
  const fullPlaylistName = `${playlistName} ${today}`;
  const idResult = await getOrCreatePlaylist(client, fullPlaylistName);
  return idResult.match(async (id) => {
    const urisResult = await filterTrackUris(client, id, trackUris);
    return urisResult.match(async (uris) => (await client.addItemsToPlaylist(id, uris)).map(() => id), (error) => Result.failure(error));
  }, (error) => Result.failure(error));
};
var registerOnAirList = async (client, radioStation, songs) => {
  const trackUris = await searchTracks(client, songs.slice(0, 100));
  if (trackUris.length === 0) {
    console.debug("no tracks");
  } else {
    console.debug(`uris.length: ${trackUris.length}`);
    const name = `${radioStation} On Air`;
    const result = await savePlaylist(client, name, trackUris);
    result.match((value) => {
      console.log(value);
    }, (error) => {
      console.error(error.message);
    });
  }
};
var main = async () => {
  const result = await authorize();
  await result.match(async (auth) => {
    console.debug(`auth_token: ${auth.access_token}`);
    const client = spotify(auth?.access_token ?? "");
    const rows = [
      { radio: RadioStation.JWave, getOnAirList },
      { radio: RadioStation.FM802, getOnAirList: getOnAirList2 }
    ];
    for (const row of rows) {
      await registerOnAirList(client, row.radio, await row.getOnAirList());
    }
  }, (error) => {
    console.error(error.message);
  });
};
main().then(console.log).catch(console.error);
