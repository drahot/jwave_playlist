// @bun
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};
var __esm = (fn, res) => () => (fn && (res = fn(fn = 0)), res);

// node_modules/delayed-stream/lib/delayed_stream.js
var require_delayed_stream = __commonJS((exports, module) => {
  var DelayedStream = function() {
    this.source = null;
    this.dataSize = 0;
    this.maxDataSize = 1024 * 1024;
    this.pauseStream = true;
    this._maxDataSizeExceeded = false;
    this._released = false;
    this._bufferedEvents = [];
  };
  var Stream = import.meta.require("stream").Stream;
  var util = import.meta.require("util");
  module.exports = DelayedStream;
  util.inherits(DelayedStream, Stream);
  DelayedStream.create = function(source, options) {
    var delayedStream = new this;
    options = options || {};
    for (var option in options) {
      delayedStream[option] = options[option];
    }
    delayedStream.source = source;
    var realEmit = source.emit;
    source.emit = function() {
      delayedStream._handleEmit(arguments);
      return realEmit.apply(source, arguments);
    };
    source.on("error", function() {
    });
    if (delayedStream.pauseStream) {
      source.pause();
    }
    return delayedStream;
  };
  Object.defineProperty(DelayedStream.prototype, "readable", {
    configurable: true,
    enumerable: true,
    get: function() {
      return this.source.readable;
    }
  });
  DelayedStream.prototype.setEncoding = function() {
    return this.source.setEncoding.apply(this.source, arguments);
  };
  DelayedStream.prototype.resume = function() {
    if (!this._released) {
      this.release();
    }
    this.source.resume();
  };
  DelayedStream.prototype.pause = function() {
    this.source.pause();
  };
  DelayedStream.prototype.release = function() {
    this._released = true;
    this._bufferedEvents.forEach(function(args) {
      this.emit.apply(this, args);
    }.bind(this));
    this._bufferedEvents = [];
  };
  DelayedStream.prototype.pipe = function() {
    var r = Stream.prototype.pipe.apply(this, arguments);
    this.resume();
    return r;
  };
  DelayedStream.prototype._handleEmit = function(args) {
    if (this._released) {
      this.emit.apply(this, args);
      return;
    }
    if (args[0] === "data") {
      this.dataSize += args[1].length;
      this._checkIfMaxDataSizeExceeded();
    }
    this._bufferedEvents.push(args);
  };
  DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {
    if (this._maxDataSizeExceeded) {
      return;
    }
    if (this.dataSize <= this.maxDataSize) {
      return;
    }
    this._maxDataSizeExceeded = true;
    var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
    this.emit("error", new Error(message));
  };
});

// node_modules/combined-stream/lib/combined_stream.js
var require_combined_stream = __commonJS((exports, module) => {
  var CombinedStream = function() {
    this.writable = false;
    this.readable = true;
    this.dataSize = 0;
    this.maxDataSize = 2 * 1024 * 1024;
    this.pauseStreams = true;
    this._released = false;
    this._streams = [];
    this._currentStream = null;
    this._insideLoop = false;
    this._pendingNext = false;
  };
  var util = import.meta.require("util");
  var Stream = import.meta.require("stream").Stream;
  var DelayedStream = require_delayed_stream();
  module.exports = CombinedStream;
  util.inherits(CombinedStream, Stream);
  CombinedStream.create = function(options) {
    var combinedStream = new this;
    options = options || {};
    for (var option in options) {
      combinedStream[option] = options[option];
    }
    return combinedStream;
  };
  CombinedStream.isStreamLike = function(stream) {
    return typeof stream !== "function" && typeof stream !== "string" && typeof stream !== "boolean" && typeof stream !== "number" && !Buffer.isBuffer(stream);
  };
  CombinedStream.prototype.append = function(stream) {
    var isStreamLike = CombinedStream.isStreamLike(stream);
    if (isStreamLike) {
      if (!(stream instanceof DelayedStream)) {
        var newStream = DelayedStream.create(stream, {
          maxDataSize: Infinity,
          pauseStream: this.pauseStreams
        });
        stream.on("data", this._checkDataSize.bind(this));
        stream = newStream;
      }
      this._handleErrors(stream);
      if (this.pauseStreams) {
        stream.pause();
      }
    }
    this._streams.push(stream);
    return this;
  };
  CombinedStream.prototype.pipe = function(dest, options) {
    Stream.prototype.pipe.call(this, dest, options);
    this.resume();
    return dest;
  };
  CombinedStream.prototype._getNext = function() {
    this._currentStream = null;
    if (this._insideLoop) {
      this._pendingNext = true;
      return;
    }
    this._insideLoop = true;
    try {
      do {
        this._pendingNext = false;
        this._realGetNext();
      } while (this._pendingNext);
    } finally {
      this._insideLoop = false;
    }
  };
  CombinedStream.prototype._realGetNext = function() {
    var stream = this._streams.shift();
    if (typeof stream == "undefined") {
      this.end();
      return;
    }
    if (typeof stream !== "function") {
      this._pipeNext(stream);
      return;
    }
    var getStream = stream;
    getStream(function(stream2) {
      var isStreamLike = CombinedStream.isStreamLike(stream2);
      if (isStreamLike) {
        stream2.on("data", this._checkDataSize.bind(this));
        this._handleErrors(stream2);
      }
      this._pipeNext(stream2);
    }.bind(this));
  };
  CombinedStream.prototype._pipeNext = function(stream) {
    this._currentStream = stream;
    var isStreamLike = CombinedStream.isStreamLike(stream);
    if (isStreamLike) {
      stream.on("end", this._getNext.bind(this));
      stream.pipe(this, { end: false });
      return;
    }
    var value = stream;
    this.write(value);
    this._getNext();
  };
  CombinedStream.prototype._handleErrors = function(stream) {
    var self2 = this;
    stream.on("error", function(err) {
      self2._emitError(err);
    });
  };
  CombinedStream.prototype.write = function(data) {
    this.emit("data", data);
  };
  CombinedStream.prototype.pause = function() {
    if (!this.pauseStreams) {
      return;
    }
    if (this.pauseStreams && this._currentStream && typeof this._currentStream.pause == "function")
      this._currentStream.pause();
    this.emit("pause");
  };
  CombinedStream.prototype.resume = function() {
    if (!this._released) {
      this._released = true;
      this.writable = true;
      this._getNext();
    }
    if (this.pauseStreams && this._currentStream && typeof this._currentStream.resume == "function")
      this._currentStream.resume();
    this.emit("resume");
  };
  CombinedStream.prototype.end = function() {
    this._reset();
    this.emit("end");
  };
  CombinedStream.prototype.destroy = function() {
    this._reset();
    this.emit("close");
  };
  CombinedStream.prototype._reset = function() {
    this.writable = false;
    this._streams = [];
    this._currentStream = null;
  };
  CombinedStream.prototype._checkDataSize = function() {
    this._updateDataSize();
    if (this.dataSize <= this.maxDataSize) {
      return;
    }
    var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
    this._emitError(new Error(message));
  };
  CombinedStream.prototype._updateDataSize = function() {
    this.dataSize = 0;
    var self2 = this;
    this._streams.forEach(function(stream) {
      if (!stream.dataSize) {
        return;
      }
      self2.dataSize += stream.dataSize;
    });
    if (this._currentStream && this._currentStream.dataSize) {
      this.dataSize += this._currentStream.dataSize;
    }
  };
  CombinedStream.prototype._emitError = function(err) {
    this._reset();
    this.emit("error", err);
  };
});

// node_modules/mime-db/db.json
var require_db = __commonJS((exports, module) => {
  module.exports = {
    "application/1d-interleaved-parityfec": {
      source: "iana"
    },
    "application/3gpdash-qoe-report+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/3gpp-ims+xml": {
      source: "iana",
      compressible: true
    },
    "application/3gpphal+json": {
      source: "iana",
      compressible: true
    },
    "application/3gpphalforms+json": {
      source: "iana",
      compressible: true
    },
    "application/a2l": {
      source: "iana"
    },
    "application/ace+cbor": {
      source: "iana"
    },
    "application/activemessage": {
      source: "iana"
    },
    "application/activity+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-costmap+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-costmapfilter+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-directory+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-endpointcost+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-endpointcostparams+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-endpointprop+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-endpointpropparams+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-error+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-networkmap+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-networkmapfilter+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-updatestreamcontrol+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-updatestreamparams+json": {
      source: "iana",
      compressible: true
    },
    "application/aml": {
      source: "iana"
    },
    "application/andrew-inset": {
      source: "iana",
      extensions: ["ez"]
    },
    "application/applefile": {
      source: "iana"
    },
    "application/applixware": {
      source: "apache",
      extensions: ["aw"]
    },
    "application/at+jwt": {
      source: "iana"
    },
    "application/atf": {
      source: "iana"
    },
    "application/atfx": {
      source: "iana"
    },
    "application/atom+xml": {
      source: "iana",
      compressible: true,
      extensions: ["atom"]
    },
    "application/atomcat+xml": {
      source: "iana",
      compressible: true,
      extensions: ["atomcat"]
    },
    "application/atomdeleted+xml": {
      source: "iana",
      compressible: true,
      extensions: ["atomdeleted"]
    },
    "application/atomicmail": {
      source: "iana"
    },
    "application/atomsvc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["atomsvc"]
    },
    "application/atsc-dwd+xml": {
      source: "iana",
      compressible: true,
      extensions: ["dwd"]
    },
    "application/atsc-dynamic-event-message": {
      source: "iana"
    },
    "application/atsc-held+xml": {
      source: "iana",
      compressible: true,
      extensions: ["held"]
    },
    "application/atsc-rdt+json": {
      source: "iana",
      compressible: true
    },
    "application/atsc-rsat+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rsat"]
    },
    "application/atxml": {
      source: "iana"
    },
    "application/auth-policy+xml": {
      source: "iana",
      compressible: true
    },
    "application/bacnet-xdd+zip": {
      source: "iana",
      compressible: false
    },
    "application/batch-smtp": {
      source: "iana"
    },
    "application/bdoc": {
      compressible: false,
      extensions: ["bdoc"]
    },
    "application/beep+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/calendar+json": {
      source: "iana",
      compressible: true
    },
    "application/calendar+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xcs"]
    },
    "application/call-completion": {
      source: "iana"
    },
    "application/cals-1840": {
      source: "iana"
    },
    "application/captive+json": {
      source: "iana",
      compressible: true
    },
    "application/cbor": {
      source: "iana"
    },
    "application/cbor-seq": {
      source: "iana"
    },
    "application/cccex": {
      source: "iana"
    },
    "application/ccmp+xml": {
      source: "iana",
      compressible: true
    },
    "application/ccxml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ccxml"]
    },
    "application/cdfx+xml": {
      source: "iana",
      compressible: true,
      extensions: ["cdfx"]
    },
    "application/cdmi-capability": {
      source: "iana",
      extensions: ["cdmia"]
    },
    "application/cdmi-container": {
      source: "iana",
      extensions: ["cdmic"]
    },
    "application/cdmi-domain": {
      source: "iana",
      extensions: ["cdmid"]
    },
    "application/cdmi-object": {
      source: "iana",
      extensions: ["cdmio"]
    },
    "application/cdmi-queue": {
      source: "iana",
      extensions: ["cdmiq"]
    },
    "application/cdni": {
      source: "iana"
    },
    "application/cea": {
      source: "iana"
    },
    "application/cea-2018+xml": {
      source: "iana",
      compressible: true
    },
    "application/cellml+xml": {
      source: "iana",
      compressible: true
    },
    "application/cfw": {
      source: "iana"
    },
    "application/city+json": {
      source: "iana",
      compressible: true
    },
    "application/clr": {
      source: "iana"
    },
    "application/clue+xml": {
      source: "iana",
      compressible: true
    },
    "application/clue_info+xml": {
      source: "iana",
      compressible: true
    },
    "application/cms": {
      source: "iana"
    },
    "application/cnrp+xml": {
      source: "iana",
      compressible: true
    },
    "application/coap-group+json": {
      source: "iana",
      compressible: true
    },
    "application/coap-payload": {
      source: "iana"
    },
    "application/commonground": {
      source: "iana"
    },
    "application/conference-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/cose": {
      source: "iana"
    },
    "application/cose-key": {
      source: "iana"
    },
    "application/cose-key-set": {
      source: "iana"
    },
    "application/cpl+xml": {
      source: "iana",
      compressible: true,
      extensions: ["cpl"]
    },
    "application/csrattrs": {
      source: "iana"
    },
    "application/csta+xml": {
      source: "iana",
      compressible: true
    },
    "application/cstadata+xml": {
      source: "iana",
      compressible: true
    },
    "application/csvm+json": {
      source: "iana",
      compressible: true
    },
    "application/cu-seeme": {
      source: "apache",
      extensions: ["cu"]
    },
    "application/cwt": {
      source: "iana"
    },
    "application/cybercash": {
      source: "iana"
    },
    "application/dart": {
      compressible: true
    },
    "application/dash+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mpd"]
    },
    "application/dash-patch+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mpp"]
    },
    "application/dashdelta": {
      source: "iana"
    },
    "application/davmount+xml": {
      source: "iana",
      compressible: true,
      extensions: ["davmount"]
    },
    "application/dca-rft": {
      source: "iana"
    },
    "application/dcd": {
      source: "iana"
    },
    "application/dec-dx": {
      source: "iana"
    },
    "application/dialog-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/dicom": {
      source: "iana"
    },
    "application/dicom+json": {
      source: "iana",
      compressible: true
    },
    "application/dicom+xml": {
      source: "iana",
      compressible: true
    },
    "application/dii": {
      source: "iana"
    },
    "application/dit": {
      source: "iana"
    },
    "application/dns": {
      source: "iana"
    },
    "application/dns+json": {
      source: "iana",
      compressible: true
    },
    "application/dns-message": {
      source: "iana"
    },
    "application/docbook+xml": {
      source: "apache",
      compressible: true,
      extensions: ["dbk"]
    },
    "application/dots+cbor": {
      source: "iana"
    },
    "application/dskpp+xml": {
      source: "iana",
      compressible: true
    },
    "application/dssc+der": {
      source: "iana",
      extensions: ["dssc"]
    },
    "application/dssc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xdssc"]
    },
    "application/dvcs": {
      source: "iana"
    },
    "application/ecmascript": {
      source: "iana",
      compressible: true,
      extensions: ["es", "ecma"]
    },
    "application/edi-consent": {
      source: "iana"
    },
    "application/edi-x12": {
      source: "iana",
      compressible: false
    },
    "application/edifact": {
      source: "iana",
      compressible: false
    },
    "application/efi": {
      source: "iana"
    },
    "application/elm+json": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/elm+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.cap+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/emergencycalldata.comment+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.control+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.deviceinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.ecall.msd": {
      source: "iana"
    },
    "application/emergencycalldata.providerinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.serviceinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.subscriberinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.veds+xml": {
      source: "iana",
      compressible: true
    },
    "application/emma+xml": {
      source: "iana",
      compressible: true,
      extensions: ["emma"]
    },
    "application/emotionml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["emotionml"]
    },
    "application/encaprtp": {
      source: "iana"
    },
    "application/epp+xml": {
      source: "iana",
      compressible: true
    },
    "application/epub+zip": {
      source: "iana",
      compressible: false,
      extensions: ["epub"]
    },
    "application/eshop": {
      source: "iana"
    },
    "application/exi": {
      source: "iana",
      extensions: ["exi"]
    },
    "application/expect-ct-report+json": {
      source: "iana",
      compressible: true
    },
    "application/express": {
      source: "iana",
      extensions: ["exp"]
    },
    "application/fastinfoset": {
      source: "iana"
    },
    "application/fastsoap": {
      source: "iana"
    },
    "application/fdt+xml": {
      source: "iana",
      compressible: true,
      extensions: ["fdt"]
    },
    "application/fhir+json": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/fhir+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/fido.trusted-apps+json": {
      compressible: true
    },
    "application/fits": {
      source: "iana"
    },
    "application/flexfec": {
      source: "iana"
    },
    "application/font-sfnt": {
      source: "iana"
    },
    "application/font-tdpfr": {
      source: "iana",
      extensions: ["pfr"]
    },
    "application/font-woff": {
      source: "iana",
      compressible: false
    },
    "application/framework-attributes+xml": {
      source: "iana",
      compressible: true
    },
    "application/geo+json": {
      source: "iana",
      compressible: true,
      extensions: ["geojson"]
    },
    "application/geo+json-seq": {
      source: "iana"
    },
    "application/geopackage+sqlite3": {
      source: "iana"
    },
    "application/geoxacml+xml": {
      source: "iana",
      compressible: true
    },
    "application/gltf-buffer": {
      source: "iana"
    },
    "application/gml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["gml"]
    },
    "application/gpx+xml": {
      source: "apache",
      compressible: true,
      extensions: ["gpx"]
    },
    "application/gxf": {
      source: "apache",
      extensions: ["gxf"]
    },
    "application/gzip": {
      source: "iana",
      compressible: false,
      extensions: ["gz"]
    },
    "application/h224": {
      source: "iana"
    },
    "application/held+xml": {
      source: "iana",
      compressible: true
    },
    "application/hjson": {
      extensions: ["hjson"]
    },
    "application/http": {
      source: "iana"
    },
    "application/hyperstudio": {
      source: "iana",
      extensions: ["stk"]
    },
    "application/ibe-key-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/ibe-pkg-reply+xml": {
      source: "iana",
      compressible: true
    },
    "application/ibe-pp-data": {
      source: "iana"
    },
    "application/iges": {
      source: "iana"
    },
    "application/im-iscomposing+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/index": {
      source: "iana"
    },
    "application/index.cmd": {
      source: "iana"
    },
    "application/index.obj": {
      source: "iana"
    },
    "application/index.response": {
      source: "iana"
    },
    "application/index.vnd": {
      source: "iana"
    },
    "application/inkml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ink", "inkml"]
    },
    "application/iotp": {
      source: "iana"
    },
    "application/ipfix": {
      source: "iana",
      extensions: ["ipfix"]
    },
    "application/ipp": {
      source: "iana"
    },
    "application/isup": {
      source: "iana"
    },
    "application/its+xml": {
      source: "iana",
      compressible: true,
      extensions: ["its"]
    },
    "application/java-archive": {
      source: "apache",
      compressible: false,
      extensions: ["jar", "war", "ear"]
    },
    "application/java-serialized-object": {
      source: "apache",
      compressible: false,
      extensions: ["ser"]
    },
    "application/java-vm": {
      source: "apache",
      compressible: false,
      extensions: ["class"]
    },
    "application/javascript": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["js", "mjs"]
    },
    "application/jf2feed+json": {
      source: "iana",
      compressible: true
    },
    "application/jose": {
      source: "iana"
    },
    "application/jose+json": {
      source: "iana",
      compressible: true
    },
    "application/jrd+json": {
      source: "iana",
      compressible: true
    },
    "application/jscalendar+json": {
      source: "iana",
      compressible: true
    },
    "application/json": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["json", "map"]
    },
    "application/json-patch+json": {
      source: "iana",
      compressible: true
    },
    "application/json-seq": {
      source: "iana"
    },
    "application/json5": {
      extensions: ["json5"]
    },
    "application/jsonml+json": {
      source: "apache",
      compressible: true,
      extensions: ["jsonml"]
    },
    "application/jwk+json": {
      source: "iana",
      compressible: true
    },
    "application/jwk-set+json": {
      source: "iana",
      compressible: true
    },
    "application/jwt": {
      source: "iana"
    },
    "application/kpml-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/kpml-response+xml": {
      source: "iana",
      compressible: true
    },
    "application/ld+json": {
      source: "iana",
      compressible: true,
      extensions: ["jsonld"]
    },
    "application/lgr+xml": {
      source: "iana",
      compressible: true,
      extensions: ["lgr"]
    },
    "application/link-format": {
      source: "iana"
    },
    "application/load-control+xml": {
      source: "iana",
      compressible: true
    },
    "application/lost+xml": {
      source: "iana",
      compressible: true,
      extensions: ["lostxml"]
    },
    "application/lostsync+xml": {
      source: "iana",
      compressible: true
    },
    "application/lpf+zip": {
      source: "iana",
      compressible: false
    },
    "application/lxf": {
      source: "iana"
    },
    "application/mac-binhex40": {
      source: "iana",
      extensions: ["hqx"]
    },
    "application/mac-compactpro": {
      source: "apache",
      extensions: ["cpt"]
    },
    "application/macwriteii": {
      source: "iana"
    },
    "application/mads+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mads"]
    },
    "application/manifest+json": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["webmanifest"]
    },
    "application/marc": {
      source: "iana",
      extensions: ["mrc"]
    },
    "application/marcxml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mrcx"]
    },
    "application/mathematica": {
      source: "iana",
      extensions: ["ma", "nb", "mb"]
    },
    "application/mathml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mathml"]
    },
    "application/mathml-content+xml": {
      source: "iana",
      compressible: true
    },
    "application/mathml-presentation+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-associated-procedure-description+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-deregister+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-envelope+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-msk+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-msk-response+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-protection-description+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-reception-report+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-register+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-register-response+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-schedule+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-user-service-description+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbox": {
      source: "iana",
      extensions: ["mbox"]
    },
    "application/media-policy-dataset+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mpf"]
    },
    "application/media_control+xml": {
      source: "iana",
      compressible: true
    },
    "application/mediaservercontrol+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mscml"]
    },
    "application/merge-patch+json": {
      source: "iana",
      compressible: true
    },
    "application/metalink+xml": {
      source: "apache",
      compressible: true,
      extensions: ["metalink"]
    },
    "application/metalink4+xml": {
      source: "iana",
      compressible: true,
      extensions: ["meta4"]
    },
    "application/mets+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mets"]
    },
    "application/mf4": {
      source: "iana"
    },
    "application/mikey": {
      source: "iana"
    },
    "application/mipc": {
      source: "iana"
    },
    "application/missing-blocks+cbor-seq": {
      source: "iana"
    },
    "application/mmt-aei+xml": {
      source: "iana",
      compressible: true,
      extensions: ["maei"]
    },
    "application/mmt-usd+xml": {
      source: "iana",
      compressible: true,
      extensions: ["musd"]
    },
    "application/mods+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mods"]
    },
    "application/moss-keys": {
      source: "iana"
    },
    "application/moss-signature": {
      source: "iana"
    },
    "application/mosskey-data": {
      source: "iana"
    },
    "application/mosskey-request": {
      source: "iana"
    },
    "application/mp21": {
      source: "iana",
      extensions: ["m21", "mp21"]
    },
    "application/mp4": {
      source: "iana",
      extensions: ["mp4s", "m4p"]
    },
    "application/mpeg4-generic": {
      source: "iana"
    },
    "application/mpeg4-iod": {
      source: "iana"
    },
    "application/mpeg4-iod-xmt": {
      source: "iana"
    },
    "application/mrb-consumer+xml": {
      source: "iana",
      compressible: true
    },
    "application/mrb-publish+xml": {
      source: "iana",
      compressible: true
    },
    "application/msc-ivr+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/msc-mixer+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/msword": {
      source: "iana",
      compressible: false,
      extensions: ["doc", "dot"]
    },
    "application/mud+json": {
      source: "iana",
      compressible: true
    },
    "application/multipart-core": {
      source: "iana"
    },
    "application/mxf": {
      source: "iana",
      extensions: ["mxf"]
    },
    "application/n-quads": {
      source: "iana",
      extensions: ["nq"]
    },
    "application/n-triples": {
      source: "iana",
      extensions: ["nt"]
    },
    "application/nasdata": {
      source: "iana"
    },
    "application/news-checkgroups": {
      source: "iana",
      charset: "US-ASCII"
    },
    "application/news-groupinfo": {
      source: "iana",
      charset: "US-ASCII"
    },
    "application/news-transmission": {
      source: "iana"
    },
    "application/nlsml+xml": {
      source: "iana",
      compressible: true
    },
    "application/node": {
      source: "iana",
      extensions: ["cjs"]
    },
    "application/nss": {
      source: "iana"
    },
    "application/oauth-authz-req+jwt": {
      source: "iana"
    },
    "application/oblivious-dns-message": {
      source: "iana"
    },
    "application/ocsp-request": {
      source: "iana"
    },
    "application/ocsp-response": {
      source: "iana"
    },
    "application/octet-stream": {
      source: "iana",
      compressible: false,
      extensions: ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"]
    },
    "application/oda": {
      source: "iana",
      extensions: ["oda"]
    },
    "application/odm+xml": {
      source: "iana",
      compressible: true
    },
    "application/odx": {
      source: "iana"
    },
    "application/oebps-package+xml": {
      source: "iana",
      compressible: true,
      extensions: ["opf"]
    },
    "application/ogg": {
      source: "iana",
      compressible: false,
      extensions: ["ogx"]
    },
    "application/omdoc+xml": {
      source: "apache",
      compressible: true,
      extensions: ["omdoc"]
    },
    "application/onenote": {
      source: "apache",
      extensions: ["onetoc", "onetoc2", "onetmp", "onepkg"]
    },
    "application/opc-nodeset+xml": {
      source: "iana",
      compressible: true
    },
    "application/oscore": {
      source: "iana"
    },
    "application/oxps": {
      source: "iana",
      extensions: ["oxps"]
    },
    "application/p21": {
      source: "iana"
    },
    "application/p21+zip": {
      source: "iana",
      compressible: false
    },
    "application/p2p-overlay+xml": {
      source: "iana",
      compressible: true,
      extensions: ["relo"]
    },
    "application/parityfec": {
      source: "iana"
    },
    "application/passport": {
      source: "iana"
    },
    "application/patch-ops-error+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xer"]
    },
    "application/pdf": {
      source: "iana",
      compressible: false,
      extensions: ["pdf"]
    },
    "application/pdx": {
      source: "iana"
    },
    "application/pem-certificate-chain": {
      source: "iana"
    },
    "application/pgp-encrypted": {
      source: "iana",
      compressible: false,
      extensions: ["pgp"]
    },
    "application/pgp-keys": {
      source: "iana",
      extensions: ["asc"]
    },
    "application/pgp-signature": {
      source: "iana",
      extensions: ["asc", "sig"]
    },
    "application/pics-rules": {
      source: "apache",
      extensions: ["prf"]
    },
    "application/pidf+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/pidf-diff+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/pkcs10": {
      source: "iana",
      extensions: ["p10"]
    },
    "application/pkcs12": {
      source: "iana"
    },
    "application/pkcs7-mime": {
      source: "iana",
      extensions: ["p7m", "p7c"]
    },
    "application/pkcs7-signature": {
      source: "iana",
      extensions: ["p7s"]
    },
    "application/pkcs8": {
      source: "iana",
      extensions: ["p8"]
    },
    "application/pkcs8-encrypted": {
      source: "iana"
    },
    "application/pkix-attr-cert": {
      source: "iana",
      extensions: ["ac"]
    },
    "application/pkix-cert": {
      source: "iana",
      extensions: ["cer"]
    },
    "application/pkix-crl": {
      source: "iana",
      extensions: ["crl"]
    },
    "application/pkix-pkipath": {
      source: "iana",
      extensions: ["pkipath"]
    },
    "application/pkixcmp": {
      source: "iana",
      extensions: ["pki"]
    },
    "application/pls+xml": {
      source: "iana",
      compressible: true,
      extensions: ["pls"]
    },
    "application/poc-settings+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/postscript": {
      source: "iana",
      compressible: true,
      extensions: ["ai", "eps", "ps"]
    },
    "application/ppsp-tracker+json": {
      source: "iana",
      compressible: true
    },
    "application/problem+json": {
      source: "iana",
      compressible: true
    },
    "application/problem+xml": {
      source: "iana",
      compressible: true
    },
    "application/provenance+xml": {
      source: "iana",
      compressible: true,
      extensions: ["provx"]
    },
    "application/prs.alvestrand.titrax-sheet": {
      source: "iana"
    },
    "application/prs.cww": {
      source: "iana",
      extensions: ["cww"]
    },
    "application/prs.cyn": {
      source: "iana",
      charset: "7-BIT"
    },
    "application/prs.hpub+zip": {
      source: "iana",
      compressible: false
    },
    "application/prs.nprend": {
      source: "iana"
    },
    "application/prs.plucker": {
      source: "iana"
    },
    "application/prs.rdf-xml-crypt": {
      source: "iana"
    },
    "application/prs.xsf+xml": {
      source: "iana",
      compressible: true
    },
    "application/pskc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["pskcxml"]
    },
    "application/pvd+json": {
      source: "iana",
      compressible: true
    },
    "application/qsig": {
      source: "iana"
    },
    "application/raml+yaml": {
      compressible: true,
      extensions: ["raml"]
    },
    "application/raptorfec": {
      source: "iana"
    },
    "application/rdap+json": {
      source: "iana",
      compressible: true
    },
    "application/rdf+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rdf", "owl"]
    },
    "application/reginfo+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rif"]
    },
    "application/relax-ng-compact-syntax": {
      source: "iana",
      extensions: ["rnc"]
    },
    "application/remote-printing": {
      source: "iana"
    },
    "application/reputon+json": {
      source: "iana",
      compressible: true
    },
    "application/resource-lists+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rl"]
    },
    "application/resource-lists-diff+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rld"]
    },
    "application/rfc+xml": {
      source: "iana",
      compressible: true
    },
    "application/riscos": {
      source: "iana"
    },
    "application/rlmi+xml": {
      source: "iana",
      compressible: true
    },
    "application/rls-services+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rs"]
    },
    "application/route-apd+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rapd"]
    },
    "application/route-s-tsid+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sls"]
    },
    "application/route-usd+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rusd"]
    },
    "application/rpki-ghostbusters": {
      source: "iana",
      extensions: ["gbr"]
    },
    "application/rpki-manifest": {
      source: "iana",
      extensions: ["mft"]
    },
    "application/rpki-publication": {
      source: "iana"
    },
    "application/rpki-roa": {
      source: "iana",
      extensions: ["roa"]
    },
    "application/rpki-updown": {
      source: "iana"
    },
    "application/rsd+xml": {
      source: "apache",
      compressible: true,
      extensions: ["rsd"]
    },
    "application/rss+xml": {
      source: "apache",
      compressible: true,
      extensions: ["rss"]
    },
    "application/rtf": {
      source: "iana",
      compressible: true,
      extensions: ["rtf"]
    },
    "application/rtploopback": {
      source: "iana"
    },
    "application/rtx": {
      source: "iana"
    },
    "application/samlassertion+xml": {
      source: "iana",
      compressible: true
    },
    "application/samlmetadata+xml": {
      source: "iana",
      compressible: true
    },
    "application/sarif+json": {
      source: "iana",
      compressible: true
    },
    "application/sarif-external-properties+json": {
      source: "iana",
      compressible: true
    },
    "application/sbe": {
      source: "iana"
    },
    "application/sbml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sbml"]
    },
    "application/scaip+xml": {
      source: "iana",
      compressible: true
    },
    "application/scim+json": {
      source: "iana",
      compressible: true
    },
    "application/scvp-cv-request": {
      source: "iana",
      extensions: ["scq"]
    },
    "application/scvp-cv-response": {
      source: "iana",
      extensions: ["scs"]
    },
    "application/scvp-vp-request": {
      source: "iana",
      extensions: ["spq"]
    },
    "application/scvp-vp-response": {
      source: "iana",
      extensions: ["spp"]
    },
    "application/sdp": {
      source: "iana",
      extensions: ["sdp"]
    },
    "application/secevent+jwt": {
      source: "iana"
    },
    "application/senml+cbor": {
      source: "iana"
    },
    "application/senml+json": {
      source: "iana",
      compressible: true
    },
    "application/senml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["senmlx"]
    },
    "application/senml-etch+cbor": {
      source: "iana"
    },
    "application/senml-etch+json": {
      source: "iana",
      compressible: true
    },
    "application/senml-exi": {
      source: "iana"
    },
    "application/sensml+cbor": {
      source: "iana"
    },
    "application/sensml+json": {
      source: "iana",
      compressible: true
    },
    "application/sensml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sensmlx"]
    },
    "application/sensml-exi": {
      source: "iana"
    },
    "application/sep+xml": {
      source: "iana",
      compressible: true
    },
    "application/sep-exi": {
      source: "iana"
    },
    "application/session-info": {
      source: "iana"
    },
    "application/set-payment": {
      source: "iana"
    },
    "application/set-payment-initiation": {
      source: "iana",
      extensions: ["setpay"]
    },
    "application/set-registration": {
      source: "iana"
    },
    "application/set-registration-initiation": {
      source: "iana",
      extensions: ["setreg"]
    },
    "application/sgml": {
      source: "iana"
    },
    "application/sgml-open-catalog": {
      source: "iana"
    },
    "application/shf+xml": {
      source: "iana",
      compressible: true,
      extensions: ["shf"]
    },
    "application/sieve": {
      source: "iana",
      extensions: ["siv", "sieve"]
    },
    "application/simple-filter+xml": {
      source: "iana",
      compressible: true
    },
    "application/simple-message-summary": {
      source: "iana"
    },
    "application/simplesymbolcontainer": {
      source: "iana"
    },
    "application/sipc": {
      source: "iana"
    },
    "application/slate": {
      source: "iana"
    },
    "application/smil": {
      source: "iana"
    },
    "application/smil+xml": {
      source: "iana",
      compressible: true,
      extensions: ["smi", "smil"]
    },
    "application/smpte336m": {
      source: "iana"
    },
    "application/soap+fastinfoset": {
      source: "iana"
    },
    "application/soap+xml": {
      source: "iana",
      compressible: true
    },
    "application/sparql-query": {
      source: "iana",
      extensions: ["rq"]
    },
    "application/sparql-results+xml": {
      source: "iana",
      compressible: true,
      extensions: ["srx"]
    },
    "application/spdx+json": {
      source: "iana",
      compressible: true
    },
    "application/spirits-event+xml": {
      source: "iana",
      compressible: true
    },
    "application/sql": {
      source: "iana"
    },
    "application/srgs": {
      source: "iana",
      extensions: ["gram"]
    },
    "application/srgs+xml": {
      source: "iana",
      compressible: true,
      extensions: ["grxml"]
    },
    "application/sru+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sru"]
    },
    "application/ssdl+xml": {
      source: "apache",
      compressible: true,
      extensions: ["ssdl"]
    },
    "application/ssml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ssml"]
    },
    "application/stix+json": {
      source: "iana",
      compressible: true
    },
    "application/swid+xml": {
      source: "iana",
      compressible: true,
      extensions: ["swidtag"]
    },
    "application/tamp-apex-update": {
      source: "iana"
    },
    "application/tamp-apex-update-confirm": {
      source: "iana"
    },
    "application/tamp-community-update": {
      source: "iana"
    },
    "application/tamp-community-update-confirm": {
      source: "iana"
    },
    "application/tamp-error": {
      source: "iana"
    },
    "application/tamp-sequence-adjust": {
      source: "iana"
    },
    "application/tamp-sequence-adjust-confirm": {
      source: "iana"
    },
    "application/tamp-status-query": {
      source: "iana"
    },
    "application/tamp-status-response": {
      source: "iana"
    },
    "application/tamp-update": {
      source: "iana"
    },
    "application/tamp-update-confirm": {
      source: "iana"
    },
    "application/tar": {
      compressible: true
    },
    "application/taxii+json": {
      source: "iana",
      compressible: true
    },
    "application/td+json": {
      source: "iana",
      compressible: true
    },
    "application/tei+xml": {
      source: "iana",
      compressible: true,
      extensions: ["tei", "teicorpus"]
    },
    "application/tetra_isi": {
      source: "iana"
    },
    "application/thraud+xml": {
      source: "iana",
      compressible: true,
      extensions: ["tfi"]
    },
    "application/timestamp-query": {
      source: "iana"
    },
    "application/timestamp-reply": {
      source: "iana"
    },
    "application/timestamped-data": {
      source: "iana",
      extensions: ["tsd"]
    },
    "application/tlsrpt+gzip": {
      source: "iana"
    },
    "application/tlsrpt+json": {
      source: "iana",
      compressible: true
    },
    "application/tnauthlist": {
      source: "iana"
    },
    "application/token-introspection+jwt": {
      source: "iana"
    },
    "application/toml": {
      compressible: true,
      extensions: ["toml"]
    },
    "application/trickle-ice-sdpfrag": {
      source: "iana"
    },
    "application/trig": {
      source: "iana",
      extensions: ["trig"]
    },
    "application/ttml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ttml"]
    },
    "application/tve-trigger": {
      source: "iana"
    },
    "application/tzif": {
      source: "iana"
    },
    "application/tzif-leap": {
      source: "iana"
    },
    "application/ubjson": {
      compressible: false,
      extensions: ["ubj"]
    },
    "application/ulpfec": {
      source: "iana"
    },
    "application/urc-grpsheet+xml": {
      source: "iana",
      compressible: true
    },
    "application/urc-ressheet+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rsheet"]
    },
    "application/urc-targetdesc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["td"]
    },
    "application/urc-uisocketdesc+xml": {
      source: "iana",
      compressible: true
    },
    "application/vcard+json": {
      source: "iana",
      compressible: true
    },
    "application/vcard+xml": {
      source: "iana",
      compressible: true
    },
    "application/vemmi": {
      source: "iana"
    },
    "application/vividence.scriptfile": {
      source: "apache"
    },
    "application/vnd.1000minds.decision-model+xml": {
      source: "iana",
      compressible: true,
      extensions: ["1km"]
    },
    "application/vnd.3gpp-prose+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp-prose-pc3ch+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp-v2x-local-service-information": {
      source: "iana"
    },
    "application/vnd.3gpp.5gnas": {
      source: "iana"
    },
    "application/vnd.3gpp.access-transfer-events+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.bsf+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.gmop+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.gtpc": {
      source: "iana"
    },
    "application/vnd.3gpp.interworking-data": {
      source: "iana"
    },
    "application/vnd.3gpp.lpp": {
      source: "iana"
    },
    "application/vnd.3gpp.mc-signalling-ear": {
      source: "iana"
    },
    "application/vnd.3gpp.mcdata-affiliation-command+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcdata-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcdata-payload": {
      source: "iana"
    },
    "application/vnd.3gpp.mcdata-service-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcdata-signalling": {
      source: "iana"
    },
    "application/vnd.3gpp.mcdata-ue-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcdata-user-profile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-affiliation-command+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-floor-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-location-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-service-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-signed+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-ue-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-ue-init-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-user-profile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-affiliation-command+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-affiliation-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-location-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-service-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-transmission-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-ue-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-user-profile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mid-call+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.ngap": {
      source: "iana"
    },
    "application/vnd.3gpp.pfcp": {
      source: "iana"
    },
    "application/vnd.3gpp.pic-bw-large": {
      source: "iana",
      extensions: ["plb"]
    },
    "application/vnd.3gpp.pic-bw-small": {
      source: "iana",
      extensions: ["psb"]
    },
    "application/vnd.3gpp.pic-bw-var": {
      source: "iana",
      extensions: ["pvb"]
    },
    "application/vnd.3gpp.s1ap": {
      source: "iana"
    },
    "application/vnd.3gpp.sms": {
      source: "iana"
    },
    "application/vnd.3gpp.sms+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.srvcc-ext+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.srvcc-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.state-and-event-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.ussd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp2.bcmcsinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp2.sms": {
      source: "iana"
    },
    "application/vnd.3gpp2.tcap": {
      source: "iana",
      extensions: ["tcap"]
    },
    "application/vnd.3lightssoftware.imagescal": {
      source: "iana"
    },
    "application/vnd.3m.post-it-notes": {
      source: "iana",
      extensions: ["pwn"]
    },
    "application/vnd.accpac.simply.aso": {
      source: "iana",
      extensions: ["aso"]
    },
    "application/vnd.accpac.simply.imp": {
      source: "iana",
      extensions: ["imp"]
    },
    "application/vnd.acucobol": {
      source: "iana",
      extensions: ["acu"]
    },
    "application/vnd.acucorp": {
      source: "iana",
      extensions: ["atc", "acutc"]
    },
    "application/vnd.adobe.air-application-installer-package+zip": {
      source: "apache",
      compressible: false,
      extensions: ["air"]
    },
    "application/vnd.adobe.flash.movie": {
      source: "iana"
    },
    "application/vnd.adobe.formscentral.fcdt": {
      source: "iana",
      extensions: ["fcdt"]
    },
    "application/vnd.adobe.fxp": {
      source: "iana",
      extensions: ["fxp", "fxpl"]
    },
    "application/vnd.adobe.partial-upload": {
      source: "iana"
    },
    "application/vnd.adobe.xdp+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xdp"]
    },
    "application/vnd.adobe.xfdf": {
      source: "iana",
      extensions: ["xfdf"]
    },
    "application/vnd.aether.imp": {
      source: "iana"
    },
    "application/vnd.afpc.afplinedata": {
      source: "iana"
    },
    "application/vnd.afpc.afplinedata-pagedef": {
      source: "iana"
    },
    "application/vnd.afpc.cmoca-cmresource": {
      source: "iana"
    },
    "application/vnd.afpc.foca-charset": {
      source: "iana"
    },
    "application/vnd.afpc.foca-codedfont": {
      source: "iana"
    },
    "application/vnd.afpc.foca-codepage": {
      source: "iana"
    },
    "application/vnd.afpc.modca": {
      source: "iana"
    },
    "application/vnd.afpc.modca-cmtable": {
      source: "iana"
    },
    "application/vnd.afpc.modca-formdef": {
      source: "iana"
    },
    "application/vnd.afpc.modca-mediummap": {
      source: "iana"
    },
    "application/vnd.afpc.modca-objectcontainer": {
      source: "iana"
    },
    "application/vnd.afpc.modca-overlay": {
      source: "iana"
    },
    "application/vnd.afpc.modca-pagesegment": {
      source: "iana"
    },
    "application/vnd.age": {
      source: "iana",
      extensions: ["age"]
    },
    "application/vnd.ah-barcode": {
      source: "iana"
    },
    "application/vnd.ahead.space": {
      source: "iana",
      extensions: ["ahead"]
    },
    "application/vnd.airzip.filesecure.azf": {
      source: "iana",
      extensions: ["azf"]
    },
    "application/vnd.airzip.filesecure.azs": {
      source: "iana",
      extensions: ["azs"]
    },
    "application/vnd.amadeus+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.amazon.ebook": {
      source: "apache",
      extensions: ["azw"]
    },
    "application/vnd.amazon.mobi8-ebook": {
      source: "iana"
    },
    "application/vnd.americandynamics.acc": {
      source: "iana",
      extensions: ["acc"]
    },
    "application/vnd.amiga.ami": {
      source: "iana",
      extensions: ["ami"]
    },
    "application/vnd.amundsen.maze+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.android.ota": {
      source: "iana"
    },
    "application/vnd.android.package-archive": {
      source: "apache",
      compressible: false,
      extensions: ["apk"]
    },
    "application/vnd.anki": {
      source: "iana"
    },
    "application/vnd.anser-web-certificate-issue-initiation": {
      source: "iana",
      extensions: ["cii"]
    },
    "application/vnd.anser-web-funds-transfer-initiation": {
      source: "apache",
      extensions: ["fti"]
    },
    "application/vnd.antix.game-component": {
      source: "iana",
      extensions: ["atx"]
    },
    "application/vnd.apache.arrow.file": {
      source: "iana"
    },
    "application/vnd.apache.arrow.stream": {
      source: "iana"
    },
    "application/vnd.apache.thrift.binary": {
      source: "iana"
    },
    "application/vnd.apache.thrift.compact": {
      source: "iana"
    },
    "application/vnd.apache.thrift.json": {
      source: "iana"
    },
    "application/vnd.api+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.aplextor.warrp+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.apothekende.reservation+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.apple.installer+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mpkg"]
    },
    "application/vnd.apple.keynote": {
      source: "iana",
      extensions: ["key"]
    },
    "application/vnd.apple.mpegurl": {
      source: "iana",
      extensions: ["m3u8"]
    },
    "application/vnd.apple.numbers": {
      source: "iana",
      extensions: ["numbers"]
    },
    "application/vnd.apple.pages": {
      source: "iana",
      extensions: ["pages"]
    },
    "application/vnd.apple.pkpass": {
      compressible: false,
      extensions: ["pkpass"]
    },
    "application/vnd.arastra.swi": {
      source: "iana"
    },
    "application/vnd.aristanetworks.swi": {
      source: "iana",
      extensions: ["swi"]
    },
    "application/vnd.artisan+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.artsquare": {
      source: "iana"
    },
    "application/vnd.astraea-software.iota": {
      source: "iana",
      extensions: ["iota"]
    },
    "application/vnd.audiograph": {
      source: "iana",
      extensions: ["aep"]
    },
    "application/vnd.autopackage": {
      source: "iana"
    },
    "application/vnd.avalon+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.avistar+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.balsamiq.bmml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["bmml"]
    },
    "application/vnd.balsamiq.bmpr": {
      source: "iana"
    },
    "application/vnd.banana-accounting": {
      source: "iana"
    },
    "application/vnd.bbf.usp.error": {
      source: "iana"
    },
    "application/vnd.bbf.usp.msg": {
      source: "iana"
    },
    "application/vnd.bbf.usp.msg+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.bekitzur-stech+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.bint.med-content": {
      source: "iana"
    },
    "application/vnd.biopax.rdf+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.blink-idb-value-wrapper": {
      source: "iana"
    },
    "application/vnd.blueice.multipass": {
      source: "iana",
      extensions: ["mpm"]
    },
    "application/vnd.bluetooth.ep.oob": {
      source: "iana"
    },
    "application/vnd.bluetooth.le.oob": {
      source: "iana"
    },
    "application/vnd.bmi": {
      source: "iana",
      extensions: ["bmi"]
    },
    "application/vnd.bpf": {
      source: "iana"
    },
    "application/vnd.bpf3": {
      source: "iana"
    },
    "application/vnd.businessobjects": {
      source: "iana",
      extensions: ["rep"]
    },
    "application/vnd.byu.uapi+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cab-jscript": {
      source: "iana"
    },
    "application/vnd.canon-cpdl": {
      source: "iana"
    },
    "application/vnd.canon-lips": {
      source: "iana"
    },
    "application/vnd.capasystems-pg+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cendio.thinlinc.clientconf": {
      source: "iana"
    },
    "application/vnd.century-systems.tcp_stream": {
      source: "iana"
    },
    "application/vnd.chemdraw+xml": {
      source: "iana",
      compressible: true,
      extensions: ["cdxml"]
    },
    "application/vnd.chess-pgn": {
      source: "iana"
    },
    "application/vnd.chipnuts.karaoke-mmd": {
      source: "iana",
      extensions: ["mmd"]
    },
    "application/vnd.ciedi": {
      source: "iana"
    },
    "application/vnd.cinderella": {
      source: "iana",
      extensions: ["cdy"]
    },
    "application/vnd.cirpack.isdn-ext": {
      source: "iana"
    },
    "application/vnd.citationstyles.style+xml": {
      source: "iana",
      compressible: true,
      extensions: ["csl"]
    },
    "application/vnd.claymore": {
      source: "iana",
      extensions: ["cla"]
    },
    "application/vnd.cloanto.rp9": {
      source: "iana",
      extensions: ["rp9"]
    },
    "application/vnd.clonk.c4group": {
      source: "iana",
      extensions: ["c4g", "c4d", "c4f", "c4p", "c4u"]
    },
    "application/vnd.cluetrust.cartomobile-config": {
      source: "iana",
      extensions: ["c11amc"]
    },
    "application/vnd.cluetrust.cartomobile-config-pkg": {
      source: "iana",
      extensions: ["c11amz"]
    },
    "application/vnd.coffeescript": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.document": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.document-template": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.presentation": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.presentation-template": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.spreadsheet": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.spreadsheet-template": {
      source: "iana"
    },
    "application/vnd.collection+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.collection.doc+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.collection.next+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.comicbook+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.comicbook-rar": {
      source: "iana"
    },
    "application/vnd.commerce-battelle": {
      source: "iana"
    },
    "application/vnd.commonspace": {
      source: "iana",
      extensions: ["csp"]
    },
    "application/vnd.contact.cmsg": {
      source: "iana",
      extensions: ["cdbcmsg"]
    },
    "application/vnd.coreos.ignition+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cosmocaller": {
      source: "iana",
      extensions: ["cmc"]
    },
    "application/vnd.crick.clicker": {
      source: "iana",
      extensions: ["clkx"]
    },
    "application/vnd.crick.clicker.keyboard": {
      source: "iana",
      extensions: ["clkk"]
    },
    "application/vnd.crick.clicker.palette": {
      source: "iana",
      extensions: ["clkp"]
    },
    "application/vnd.crick.clicker.template": {
      source: "iana",
      extensions: ["clkt"]
    },
    "application/vnd.crick.clicker.wordbank": {
      source: "iana",
      extensions: ["clkw"]
    },
    "application/vnd.criticaltools.wbs+xml": {
      source: "iana",
      compressible: true,
      extensions: ["wbs"]
    },
    "application/vnd.cryptii.pipe+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.crypto-shade-file": {
      source: "iana"
    },
    "application/vnd.cryptomator.encrypted": {
      source: "iana"
    },
    "application/vnd.cryptomator.vault": {
      source: "iana"
    },
    "application/vnd.ctc-posml": {
      source: "iana",
      extensions: ["pml"]
    },
    "application/vnd.ctct.ws+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cups-pdf": {
      source: "iana"
    },
    "application/vnd.cups-postscript": {
      source: "iana"
    },
    "application/vnd.cups-ppd": {
      source: "iana",
      extensions: ["ppd"]
    },
    "application/vnd.cups-raster": {
      source: "iana"
    },
    "application/vnd.cups-raw": {
      source: "iana"
    },
    "application/vnd.curl": {
      source: "iana"
    },
    "application/vnd.curl.car": {
      source: "apache",
      extensions: ["car"]
    },
    "application/vnd.curl.pcurl": {
      source: "apache",
      extensions: ["pcurl"]
    },
    "application/vnd.cyan.dean.root+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cybank": {
      source: "iana"
    },
    "application/vnd.cyclonedx+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cyclonedx+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.d2l.coursepackage1p0+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.d3m-dataset": {
      source: "iana"
    },
    "application/vnd.d3m-problem": {
      source: "iana"
    },
    "application/vnd.dart": {
      source: "iana",
      compressible: true,
      extensions: ["dart"]
    },
    "application/vnd.data-vision.rdz": {
      source: "iana",
      extensions: ["rdz"]
    },
    "application/vnd.datapackage+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dataresource+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dbf": {
      source: "iana",
      extensions: ["dbf"]
    },
    "application/vnd.debian.binary-package": {
      source: "iana"
    },
    "application/vnd.dece.data": {
      source: "iana",
      extensions: ["uvf", "uvvf", "uvd", "uvvd"]
    },
    "application/vnd.dece.ttml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["uvt", "uvvt"]
    },
    "application/vnd.dece.unspecified": {
      source: "iana",
      extensions: ["uvx", "uvvx"]
    },
    "application/vnd.dece.zip": {
      source: "iana",
      extensions: ["uvz", "uvvz"]
    },
    "application/vnd.denovo.fcselayout-link": {
      source: "iana",
      extensions: ["fe_launch"]
    },
    "application/vnd.desmume.movie": {
      source: "iana"
    },
    "application/vnd.dir-bi.plate-dl-nosuffix": {
      source: "iana"
    },
    "application/vnd.dm.delegation+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dna": {
      source: "iana",
      extensions: ["dna"]
    },
    "application/vnd.document+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dolby.mlp": {
      source: "apache",
      extensions: ["mlp"]
    },
    "application/vnd.dolby.mobile.1": {
      source: "iana"
    },
    "application/vnd.dolby.mobile.2": {
      source: "iana"
    },
    "application/vnd.doremir.scorecloud-binary-document": {
      source: "iana"
    },
    "application/vnd.dpgraph": {
      source: "iana",
      extensions: ["dpg"]
    },
    "application/vnd.dreamfactory": {
      source: "iana",
      extensions: ["dfac"]
    },
    "application/vnd.drive+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ds-keypoint": {
      source: "apache",
      extensions: ["kpxx"]
    },
    "application/vnd.dtg.local": {
      source: "iana"
    },
    "application/vnd.dtg.local.flash": {
      source: "iana"
    },
    "application/vnd.dtg.local.html": {
      source: "iana"
    },
    "application/vnd.dvb.ait": {
      source: "iana",
      extensions: ["ait"]
    },
    "application/vnd.dvb.dvbisl+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.dvbj": {
      source: "iana"
    },
    "application/vnd.dvb.esgcontainer": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcdftnotifaccess": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcesgaccess": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcesgaccess2": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcesgpdd": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcroaming": {
      source: "iana"
    },
    "application/vnd.dvb.iptv.alfec-base": {
      source: "iana"
    },
    "application/vnd.dvb.iptv.alfec-enhancement": {
      source: "iana"
    },
    "application/vnd.dvb.notif-aggregate-root+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-container+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-generic+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-ia-msglist+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-ia-registration-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-ia-registration-response+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-init+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.pfr": {
      source: "iana"
    },
    "application/vnd.dvb.service": {
      source: "iana",
      extensions: ["svc"]
    },
    "application/vnd.dxr": {
      source: "iana"
    },
    "application/vnd.dynageo": {
      source: "iana",
      extensions: ["geo"]
    },
    "application/vnd.dzr": {
      source: "iana"
    },
    "application/vnd.easykaraoke.cdgdownload": {
      source: "iana"
    },
    "application/vnd.ecdis-update": {
      source: "iana"
    },
    "application/vnd.ecip.rlp": {
      source: "iana"
    },
    "application/vnd.eclipse.ditto+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ecowin.chart": {
      source: "iana",
      extensions: ["mag"]
    },
    "application/vnd.ecowin.filerequest": {
      source: "iana"
    },
    "application/vnd.ecowin.fileupdate": {
      source: "iana"
    },
    "application/vnd.ecowin.series": {
      source: "iana"
    },
    "application/vnd.ecowin.seriesrequest": {
      source: "iana"
    },
    "application/vnd.ecowin.seriesupdate": {
      source: "iana"
    },
    "application/vnd.efi.img": {
      source: "iana"
    },
    "application/vnd.efi.iso": {
      source: "iana"
    },
    "application/vnd.emclient.accessrequest+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.enliven": {
      source: "iana",
      extensions: ["nml"]
    },
    "application/vnd.enphase.envoy": {
      source: "iana"
    },
    "application/vnd.eprints.data+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.epson.esf": {
      source: "iana",
      extensions: ["esf"]
    },
    "application/vnd.epson.msf": {
      source: "iana",
      extensions: ["msf"]
    },
    "application/vnd.epson.quickanime": {
      source: "iana",
      extensions: ["qam"]
    },
    "application/vnd.epson.salt": {
      source: "iana",
      extensions: ["slt"]
    },
    "application/vnd.epson.ssf": {
      source: "iana",
      extensions: ["ssf"]
    },
    "application/vnd.ericsson.quickcall": {
      source: "iana"
    },
    "application/vnd.espass-espass+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.eszigno3+xml": {
      source: "iana",
      compressible: true,
      extensions: ["es3", "et3"]
    },
    "application/vnd.etsi.aoc+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.asic-e+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.etsi.asic-s+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.etsi.cug+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvcommand+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvdiscovery+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvprofile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvsad-bc+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvsad-cod+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvsad-npvr+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvservice+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvsync+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvueprofile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.mcid+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.mheg5": {
      source: "iana"
    },
    "application/vnd.etsi.overload-control-policy-dataset+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.pstn+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.sci+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.simservs+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.timestamp-token": {
      source: "iana"
    },
    "application/vnd.etsi.tsl+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.tsl.der": {
      source: "iana"
    },
    "application/vnd.eu.kasparian.car+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.eudora.data": {
      source: "iana"
    },
    "application/vnd.evolv.ecig.profile": {
      source: "iana"
    },
    "application/vnd.evolv.ecig.settings": {
      source: "iana"
    },
    "application/vnd.evolv.ecig.theme": {
      source: "iana"
    },
    "application/vnd.exstream-empower+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.exstream-package": {
      source: "iana"
    },
    "application/vnd.ezpix-album": {
      source: "iana",
      extensions: ["ez2"]
    },
    "application/vnd.ezpix-package": {
      source: "iana",
      extensions: ["ez3"]
    },
    "application/vnd.f-secure.mobile": {
      source: "iana"
    },
    "application/vnd.familysearch.gedcom+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.fastcopy-disk-image": {
      source: "iana"
    },
    "application/vnd.fdf": {
      source: "iana",
      extensions: ["fdf"]
    },
    "application/vnd.fdsn.mseed": {
      source: "iana",
      extensions: ["mseed"]
    },
    "application/vnd.fdsn.seed": {
      source: "iana",
      extensions: ["seed", "dataless"]
    },
    "application/vnd.ffsns": {
      source: "iana"
    },
    "application/vnd.ficlab.flb+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.filmit.zfc": {
      source: "iana"
    },
    "application/vnd.fints": {
      source: "iana"
    },
    "application/vnd.firemonkeys.cloudcell": {
      source: "iana"
    },
    "application/vnd.flographit": {
      source: "iana",
      extensions: ["gph"]
    },
    "application/vnd.fluxtime.clip": {
      source: "iana",
      extensions: ["ftc"]
    },
    "application/vnd.font-fontforge-sfd": {
      source: "iana"
    },
    "application/vnd.framemaker": {
      source: "iana",
      extensions: ["fm", "frame", "maker", "book"]
    },
    "application/vnd.frogans.fnc": {
      source: "iana",
      extensions: ["fnc"]
    },
    "application/vnd.frogans.ltf": {
      source: "iana",
      extensions: ["ltf"]
    },
    "application/vnd.fsc.weblaunch": {
      source: "iana",
      extensions: ["fsc"]
    },
    "application/vnd.fujifilm.fb.docuworks": {
      source: "iana"
    },
    "application/vnd.fujifilm.fb.docuworks.binder": {
      source: "iana"
    },
    "application/vnd.fujifilm.fb.docuworks.container": {
      source: "iana"
    },
    "application/vnd.fujifilm.fb.jfi+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.fujitsu.oasys": {
      source: "iana",
      extensions: ["oas"]
    },
    "application/vnd.fujitsu.oasys2": {
      source: "iana",
      extensions: ["oa2"]
    },
    "application/vnd.fujitsu.oasys3": {
      source: "iana",
      extensions: ["oa3"]
    },
    "application/vnd.fujitsu.oasysgp": {
      source: "iana",
      extensions: ["fg5"]
    },
    "application/vnd.fujitsu.oasysprs": {
      source: "iana",
      extensions: ["bh2"]
    },
    "application/vnd.fujixerox.art-ex": {
      source: "iana"
    },
    "application/vnd.fujixerox.art4": {
      source: "iana"
    },
    "application/vnd.fujixerox.ddd": {
      source: "iana",
      extensions: ["ddd"]
    },
    "application/vnd.fujixerox.docuworks": {
      source: "iana",
      extensions: ["xdw"]
    },
    "application/vnd.fujixerox.docuworks.binder": {
      source: "iana",
      extensions: ["xbd"]
    },
    "application/vnd.fujixerox.docuworks.container": {
      source: "iana"
    },
    "application/vnd.fujixerox.hbpl": {
      source: "iana"
    },
    "application/vnd.fut-misnet": {
      source: "iana"
    },
    "application/vnd.futoin+cbor": {
      source: "iana"
    },
    "application/vnd.futoin+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.fuzzysheet": {
      source: "iana",
      extensions: ["fzs"]
    },
    "application/vnd.genomatix.tuxedo": {
      source: "iana",
      extensions: ["txd"]
    },
    "application/vnd.gentics.grd+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.geo+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.geocube+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.geogebra.file": {
      source: "iana",
      extensions: ["ggb"]
    },
    "application/vnd.geogebra.slides": {
      source: "iana"
    },
    "application/vnd.geogebra.tool": {
      source: "iana",
      extensions: ["ggt"]
    },
    "application/vnd.geometry-explorer": {
      source: "iana",
      extensions: ["gex", "gre"]
    },
    "application/vnd.geonext": {
      source: "iana",
      extensions: ["gxt"]
    },
    "application/vnd.geoplan": {
      source: "iana",
      extensions: ["g2w"]
    },
    "application/vnd.geospace": {
      source: "iana",
      extensions: ["g3w"]
    },
    "application/vnd.gerber": {
      source: "iana"
    },
    "application/vnd.globalplatform.card-content-mgt": {
      source: "iana"
    },
    "application/vnd.globalplatform.card-content-mgt-response": {
      source: "iana"
    },
    "application/vnd.gmx": {
      source: "iana",
      extensions: ["gmx"]
    },
    "application/vnd.google-apps.document": {
      compressible: false,
      extensions: ["gdoc"]
    },
    "application/vnd.google-apps.presentation": {
      compressible: false,
      extensions: ["gslides"]
    },
    "application/vnd.google-apps.spreadsheet": {
      compressible: false,
      extensions: ["gsheet"]
    },
    "application/vnd.google-earth.kml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["kml"]
    },
    "application/vnd.google-earth.kmz": {
      source: "iana",
      compressible: false,
      extensions: ["kmz"]
    },
    "application/vnd.gov.sk.e-form+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.gov.sk.e-form+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.gov.sk.xmldatacontainer+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.grafeq": {
      source: "iana",
      extensions: ["gqf", "gqs"]
    },
    "application/vnd.gridmp": {
      source: "iana"
    },
    "application/vnd.groove-account": {
      source: "iana",
      extensions: ["gac"]
    },
    "application/vnd.groove-help": {
      source: "iana",
      extensions: ["ghf"]
    },
    "application/vnd.groove-identity-message": {
      source: "iana",
      extensions: ["gim"]
    },
    "application/vnd.groove-injector": {
      source: "iana",
      extensions: ["grv"]
    },
    "application/vnd.groove-tool-message": {
      source: "iana",
      extensions: ["gtm"]
    },
    "application/vnd.groove-tool-template": {
      source: "iana",
      extensions: ["tpl"]
    },
    "application/vnd.groove-vcard": {
      source: "iana",
      extensions: ["vcg"]
    },
    "application/vnd.hal+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hal+xml": {
      source: "iana",
      compressible: true,
      extensions: ["hal"]
    },
    "application/vnd.handheld-entertainment+xml": {
      source: "iana",
      compressible: true,
      extensions: ["zmm"]
    },
    "application/vnd.hbci": {
      source: "iana",
      extensions: ["hbci"]
    },
    "application/vnd.hc+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hcl-bireports": {
      source: "iana"
    },
    "application/vnd.hdt": {
      source: "iana"
    },
    "application/vnd.heroku+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hhe.lesson-player": {
      source: "iana",
      extensions: ["les"]
    },
    "application/vnd.hl7cda+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.hl7v2+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.hp-hpgl": {
      source: "iana",
      extensions: ["hpgl"]
    },
    "application/vnd.hp-hpid": {
      source: "iana",
      extensions: ["hpid"]
    },
    "application/vnd.hp-hps": {
      source: "iana",
      extensions: ["hps"]
    },
    "application/vnd.hp-jlyt": {
      source: "iana",
      extensions: ["jlt"]
    },
    "application/vnd.hp-pcl": {
      source: "iana",
      extensions: ["pcl"]
    },
    "application/vnd.hp-pclxl": {
      source: "iana",
      extensions: ["pclxl"]
    },
    "application/vnd.httphone": {
      source: "iana"
    },
    "application/vnd.hydrostatix.sof-data": {
      source: "iana",
      extensions: ["sfd-hdstx"]
    },
    "application/vnd.hyper+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hyper-item+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hyperdrive+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hzn-3d-crossword": {
      source: "iana"
    },
    "application/vnd.ibm.afplinedata": {
      source: "iana"
    },
    "application/vnd.ibm.electronic-media": {
      source: "iana"
    },
    "application/vnd.ibm.minipay": {
      source: "iana",
      extensions: ["mpy"]
    },
    "application/vnd.ibm.modcap": {
      source: "iana",
      extensions: ["afp", "listafp", "list3820"]
    },
    "application/vnd.ibm.rights-management": {
      source: "iana",
      extensions: ["irm"]
    },
    "application/vnd.ibm.secure-container": {
      source: "iana",
      extensions: ["sc"]
    },
    "application/vnd.iccprofile": {
      source: "iana",
      extensions: ["icc", "icm"]
    },
    "application/vnd.ieee.1905": {
      source: "iana"
    },
    "application/vnd.igloader": {
      source: "iana",
      extensions: ["igl"]
    },
    "application/vnd.imagemeter.folder+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.imagemeter.image+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.immervision-ivp": {
      source: "iana",
      extensions: ["ivp"]
    },
    "application/vnd.immervision-ivu": {
      source: "iana",
      extensions: ["ivu"]
    },
    "application/vnd.ims.imsccv1p1": {
      source: "iana"
    },
    "application/vnd.ims.imsccv1p2": {
      source: "iana"
    },
    "application/vnd.ims.imsccv1p3": {
      source: "iana"
    },
    "application/vnd.ims.lis.v2.result+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolproxy+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolproxy.id+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolsettings+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolsettings.simple+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.informedcontrol.rms+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.informix-visionary": {
      source: "iana"
    },
    "application/vnd.infotech.project": {
      source: "iana"
    },
    "application/vnd.infotech.project+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.innopath.wamp.notification": {
      source: "iana"
    },
    "application/vnd.insors.igm": {
      source: "iana",
      extensions: ["igm"]
    },
    "application/vnd.intercon.formnet": {
      source: "iana",
      extensions: ["xpw", "xpx"]
    },
    "application/vnd.intergeo": {
      source: "iana",
      extensions: ["i2g"]
    },
    "application/vnd.intertrust.digibox": {
      source: "iana"
    },
    "application/vnd.intertrust.nncp": {
      source: "iana"
    },
    "application/vnd.intu.qbo": {
      source: "iana",
      extensions: ["qbo"]
    },
    "application/vnd.intu.qfx": {
      source: "iana",
      extensions: ["qfx"]
    },
    "application/vnd.iptc.g2.catalogitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.conceptitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.knowledgeitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.newsitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.newsmessage+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.packageitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.planningitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ipunplugged.rcprofile": {
      source: "iana",
      extensions: ["rcprofile"]
    },
    "application/vnd.irepository.package+xml": {
      source: "iana",
      compressible: true,
      extensions: ["irp"]
    },
    "application/vnd.is-xpr": {
      source: "iana",
      extensions: ["xpr"]
    },
    "application/vnd.isac.fcs": {
      source: "iana",
      extensions: ["fcs"]
    },
    "application/vnd.iso11783-10+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.jam": {
      source: "iana",
      extensions: ["jam"]
    },
    "application/vnd.japannet-directory-service": {
      source: "iana"
    },
    "application/vnd.japannet-jpnstore-wakeup": {
      source: "iana"
    },
    "application/vnd.japannet-payment-wakeup": {
      source: "iana"
    },
    "application/vnd.japannet-registration": {
      source: "iana"
    },
    "application/vnd.japannet-registration-wakeup": {
      source: "iana"
    },
    "application/vnd.japannet-setstore-wakeup": {
      source: "iana"
    },
    "application/vnd.japannet-verification": {
      source: "iana"
    },
    "application/vnd.japannet-verification-wakeup": {
      source: "iana"
    },
    "application/vnd.jcp.javame.midlet-rms": {
      source: "iana",
      extensions: ["rms"]
    },
    "application/vnd.jisp": {
      source: "iana",
      extensions: ["jisp"]
    },
    "application/vnd.joost.joda-archive": {
      source: "iana",
      extensions: ["joda"]
    },
    "application/vnd.jsk.isdn-ngn": {
      source: "iana"
    },
    "application/vnd.kahootz": {
      source: "iana",
      extensions: ["ktz", "ktr"]
    },
    "application/vnd.kde.karbon": {
      source: "iana",
      extensions: ["karbon"]
    },
    "application/vnd.kde.kchart": {
      source: "iana",
      extensions: ["chrt"]
    },
    "application/vnd.kde.kformula": {
      source: "iana",
      extensions: ["kfo"]
    },
    "application/vnd.kde.kivio": {
      source: "iana",
      extensions: ["flw"]
    },
    "application/vnd.kde.kontour": {
      source: "iana",
      extensions: ["kon"]
    },
    "application/vnd.kde.kpresenter": {
      source: "iana",
      extensions: ["kpr", "kpt"]
    },
    "application/vnd.kde.kspread": {
      source: "iana",
      extensions: ["ksp"]
    },
    "application/vnd.kde.kword": {
      source: "iana",
      extensions: ["kwd", "kwt"]
    },
    "application/vnd.kenameaapp": {
      source: "iana",
      extensions: ["htke"]
    },
    "application/vnd.kidspiration": {
      source: "iana",
      extensions: ["kia"]
    },
    "application/vnd.kinar": {
      source: "iana",
      extensions: ["kne", "knp"]
    },
    "application/vnd.koan": {
      source: "iana",
      extensions: ["skp", "skd", "skt", "skm"]
    },
    "application/vnd.kodak-descriptor": {
      source: "iana",
      extensions: ["sse"]
    },
    "application/vnd.las": {
      source: "iana"
    },
    "application/vnd.las.las+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.las.las+xml": {
      source: "iana",
      compressible: true,
      extensions: ["lasxml"]
    },
    "application/vnd.laszip": {
      source: "iana"
    },
    "application/vnd.leap+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.liberty-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.llamagraphics.life-balance.desktop": {
      source: "iana",
      extensions: ["lbd"]
    },
    "application/vnd.llamagraphics.life-balance.exchange+xml": {
      source: "iana",
      compressible: true,
      extensions: ["lbe"]
    },
    "application/vnd.logipipe.circuit+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.loom": {
      source: "iana"
    },
    "application/vnd.lotus-1-2-3": {
      source: "iana",
      extensions: ["123"]
    },
    "application/vnd.lotus-approach": {
      source: "iana",
      extensions: ["apr"]
    },
    "application/vnd.lotus-freelance": {
      source: "iana",
      extensions: ["pre"]
    },
    "application/vnd.lotus-notes": {
      source: "iana",
      extensions: ["nsf"]
    },
    "application/vnd.lotus-organizer": {
      source: "iana",
      extensions: ["org"]
    },
    "application/vnd.lotus-screencam": {
      source: "iana",
      extensions: ["scm"]
    },
    "application/vnd.lotus-wordpro": {
      source: "iana",
      extensions: ["lwp"]
    },
    "application/vnd.macports.portpkg": {
      source: "iana",
      extensions: ["portpkg"]
    },
    "application/vnd.mapbox-vector-tile": {
      source: "iana",
      extensions: ["mvt"]
    },
    "application/vnd.marlin.drm.actiontoken+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.marlin.drm.conftoken+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.marlin.drm.license+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.marlin.drm.mdcf": {
      source: "iana"
    },
    "application/vnd.mason+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.maxar.archive.3tz+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.maxmind.maxmind-db": {
      source: "iana"
    },
    "application/vnd.mcd": {
      source: "iana",
      extensions: ["mcd"]
    },
    "application/vnd.medcalcdata": {
      source: "iana",
      extensions: ["mc1"]
    },
    "application/vnd.mediastation.cdkey": {
      source: "iana",
      extensions: ["cdkey"]
    },
    "application/vnd.meridian-slingshot": {
      source: "iana"
    },
    "application/vnd.mfer": {
      source: "iana",
      extensions: ["mwf"]
    },
    "application/vnd.mfmp": {
      source: "iana",
      extensions: ["mfm"]
    },
    "application/vnd.micro+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.micrografx.flo": {
      source: "iana",
      extensions: ["flo"]
    },
    "application/vnd.micrografx.igx": {
      source: "iana",
      extensions: ["igx"]
    },
    "application/vnd.microsoft.portable-executable": {
      source: "iana"
    },
    "application/vnd.microsoft.windows.thumbnail-cache": {
      source: "iana"
    },
    "application/vnd.miele+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.mif": {
      source: "iana",
      extensions: ["mif"]
    },
    "application/vnd.minisoft-hp3000-save": {
      source: "iana"
    },
    "application/vnd.mitsubishi.misty-guard.trustweb": {
      source: "iana"
    },
    "application/vnd.mobius.daf": {
      source: "iana",
      extensions: ["daf"]
    },
    "application/vnd.mobius.dis": {
      source: "iana",
      extensions: ["dis"]
    },
    "application/vnd.mobius.mbk": {
      source: "iana",
      extensions: ["mbk"]
    },
    "application/vnd.mobius.mqy": {
      source: "iana",
      extensions: ["mqy"]
    },
    "application/vnd.mobius.msl": {
      source: "iana",
      extensions: ["msl"]
    },
    "application/vnd.mobius.plc": {
      source: "iana",
      extensions: ["plc"]
    },
    "application/vnd.mobius.txf": {
      source: "iana",
      extensions: ["txf"]
    },
    "application/vnd.mophun.application": {
      source: "iana",
      extensions: ["mpn"]
    },
    "application/vnd.mophun.certificate": {
      source: "iana",
      extensions: ["mpc"]
    },
    "application/vnd.motorola.flexsuite": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.adsi": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.fis": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.gotap": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.kmr": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.ttc": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.wem": {
      source: "iana"
    },
    "application/vnd.motorola.iprm": {
      source: "iana"
    },
    "application/vnd.mozilla.xul+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xul"]
    },
    "application/vnd.ms-3mfdocument": {
      source: "iana"
    },
    "application/vnd.ms-artgalry": {
      source: "iana",
      extensions: ["cil"]
    },
    "application/vnd.ms-asf": {
      source: "iana"
    },
    "application/vnd.ms-cab-compressed": {
      source: "iana",
      extensions: ["cab"]
    },
    "application/vnd.ms-color.iccprofile": {
      source: "apache"
    },
    "application/vnd.ms-excel": {
      source: "iana",
      compressible: false,
      extensions: ["xls", "xlm", "xla", "xlc", "xlt", "xlw"]
    },
    "application/vnd.ms-excel.addin.macroenabled.12": {
      source: "iana",
      extensions: ["xlam"]
    },
    "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
      source: "iana",
      extensions: ["xlsb"]
    },
    "application/vnd.ms-excel.sheet.macroenabled.12": {
      source: "iana",
      extensions: ["xlsm"]
    },
    "application/vnd.ms-excel.template.macroenabled.12": {
      source: "iana",
      extensions: ["xltm"]
    },
    "application/vnd.ms-fontobject": {
      source: "iana",
      compressible: true,
      extensions: ["eot"]
    },
    "application/vnd.ms-htmlhelp": {
      source: "iana",
      extensions: ["chm"]
    },
    "application/vnd.ms-ims": {
      source: "iana",
      extensions: ["ims"]
    },
    "application/vnd.ms-lrm": {
      source: "iana",
      extensions: ["lrm"]
    },
    "application/vnd.ms-office.activex+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ms-officetheme": {
      source: "iana",
      extensions: ["thmx"]
    },
    "application/vnd.ms-opentype": {
      source: "apache",
      compressible: true
    },
    "application/vnd.ms-outlook": {
      compressible: false,
      extensions: ["msg"]
    },
    "application/vnd.ms-package.obfuscated-opentype": {
      source: "apache"
    },
    "application/vnd.ms-pki.seccat": {
      source: "apache",
      extensions: ["cat"]
    },
    "application/vnd.ms-pki.stl": {
      source: "apache",
      extensions: ["stl"]
    },
    "application/vnd.ms-playready.initiator+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ms-powerpoint": {
      source: "iana",
      compressible: false,
      extensions: ["ppt", "pps", "pot"]
    },
    "application/vnd.ms-powerpoint.addin.macroenabled.12": {
      source: "iana",
      extensions: ["ppam"]
    },
    "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
      source: "iana",
      extensions: ["pptm"]
    },
    "application/vnd.ms-powerpoint.slide.macroenabled.12": {
      source: "iana",
      extensions: ["sldm"]
    },
    "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
      source: "iana",
      extensions: ["ppsm"]
    },
    "application/vnd.ms-powerpoint.template.macroenabled.12": {
      source: "iana",
      extensions: ["potm"]
    },
    "application/vnd.ms-printdevicecapabilities+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ms-printing.printticket+xml": {
      source: "apache",
      compressible: true
    },
    "application/vnd.ms-printschematicket+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ms-project": {
      source: "iana",
      extensions: ["mpp", "mpt"]
    },
    "application/vnd.ms-tnef": {
      source: "iana"
    },
    "application/vnd.ms-windows.devicepairing": {
      source: "iana"
    },
    "application/vnd.ms-windows.nwprinting.oob": {
      source: "iana"
    },
    "application/vnd.ms-windows.printerpairing": {
      source: "iana"
    },
    "application/vnd.ms-windows.wsd.oob": {
      source: "iana"
    },
    "application/vnd.ms-wmdrm.lic-chlg-req": {
      source: "iana"
    },
    "application/vnd.ms-wmdrm.lic-resp": {
      source: "iana"
    },
    "application/vnd.ms-wmdrm.meter-chlg-req": {
      source: "iana"
    },
    "application/vnd.ms-wmdrm.meter-resp": {
      source: "iana"
    },
    "application/vnd.ms-word.document.macroenabled.12": {
      source: "iana",
      extensions: ["docm"]
    },
    "application/vnd.ms-word.template.macroenabled.12": {
      source: "iana",
      extensions: ["dotm"]
    },
    "application/vnd.ms-works": {
      source: "iana",
      extensions: ["wps", "wks", "wcm", "wdb"]
    },
    "application/vnd.ms-wpl": {
      source: "iana",
      extensions: ["wpl"]
    },
    "application/vnd.ms-xpsdocument": {
      source: "iana",
      compressible: false,
      extensions: ["xps"]
    },
    "application/vnd.msa-disk-image": {
      source: "iana"
    },
    "application/vnd.mseq": {
      source: "iana",
      extensions: ["mseq"]
    },
    "application/vnd.msign": {
      source: "iana"
    },
    "application/vnd.multiad.creator": {
      source: "iana"
    },
    "application/vnd.multiad.creator.cif": {
      source: "iana"
    },
    "application/vnd.music-niff": {
      source: "iana"
    },
    "application/vnd.musician": {
      source: "iana",
      extensions: ["mus"]
    },
    "application/vnd.muvee.style": {
      source: "iana",
      extensions: ["msty"]
    },
    "application/vnd.mynfc": {
      source: "iana",
      extensions: ["taglet"]
    },
    "application/vnd.nacamar.ybrid+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ncd.control": {
      source: "iana"
    },
    "application/vnd.ncd.reference": {
      source: "iana"
    },
    "application/vnd.nearst.inv+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nebumind.line": {
      source: "iana"
    },
    "application/vnd.nervana": {
      source: "iana"
    },
    "application/vnd.netfpx": {
      source: "iana"
    },
    "application/vnd.neurolanguage.nlu": {
      source: "iana",
      extensions: ["nlu"]
    },
    "application/vnd.nimn": {
      source: "iana"
    },
    "application/vnd.nintendo.nitro.rom": {
      source: "iana"
    },
    "application/vnd.nintendo.snes.rom": {
      source: "iana"
    },
    "application/vnd.nitf": {
      source: "iana",
      extensions: ["ntf", "nitf"]
    },
    "application/vnd.noblenet-directory": {
      source: "iana",
      extensions: ["nnd"]
    },
    "application/vnd.noblenet-sealer": {
      source: "iana",
      extensions: ["nns"]
    },
    "application/vnd.noblenet-web": {
      source: "iana",
      extensions: ["nnw"]
    },
    "application/vnd.nokia.catalogs": {
      source: "iana"
    },
    "application/vnd.nokia.conml+wbxml": {
      source: "iana"
    },
    "application/vnd.nokia.conml+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.iptv.config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.isds-radio-presets": {
      source: "iana"
    },
    "application/vnd.nokia.landmark+wbxml": {
      source: "iana"
    },
    "application/vnd.nokia.landmark+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.landmarkcollection+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.n-gage.ac+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ac"]
    },
    "application/vnd.nokia.n-gage.data": {
      source: "iana",
      extensions: ["ngdat"]
    },
    "application/vnd.nokia.n-gage.symbian.install": {
      source: "iana",
      extensions: ["n-gage"]
    },
    "application/vnd.nokia.ncd": {
      source: "iana"
    },
    "application/vnd.nokia.pcd+wbxml": {
      source: "iana"
    },
    "application/vnd.nokia.pcd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.radio-preset": {
      source: "iana",
      extensions: ["rpst"]
    },
    "application/vnd.nokia.radio-presets": {
      source: "iana",
      extensions: ["rpss"]
    },
    "application/vnd.novadigm.edm": {
      source: "iana",
      extensions: ["edm"]
    },
    "application/vnd.novadigm.edx": {
      source: "iana",
      extensions: ["edx"]
    },
    "application/vnd.novadigm.ext": {
      source: "iana",
      extensions: ["ext"]
    },
    "application/vnd.ntt-local.content-share": {
      source: "iana"
    },
    "application/vnd.ntt-local.file-transfer": {
      source: "iana"
    },
    "application/vnd.ntt-local.ogw_remote-access": {
      source: "iana"
    },
    "application/vnd.ntt-local.sip-ta_remote": {
      source: "iana"
    },
    "application/vnd.ntt-local.sip-ta_tcp_stream": {
      source: "iana"
    },
    "application/vnd.oasis.opendocument.chart": {
      source: "iana",
      extensions: ["odc"]
    },
    "application/vnd.oasis.opendocument.chart-template": {
      source: "iana",
      extensions: ["otc"]
    },
    "application/vnd.oasis.opendocument.database": {
      source: "iana",
      extensions: ["odb"]
    },
    "application/vnd.oasis.opendocument.formula": {
      source: "iana",
      extensions: ["odf"]
    },
    "application/vnd.oasis.opendocument.formula-template": {
      source: "iana",
      extensions: ["odft"]
    },
    "application/vnd.oasis.opendocument.graphics": {
      source: "iana",
      compressible: false,
      extensions: ["odg"]
    },
    "application/vnd.oasis.opendocument.graphics-template": {
      source: "iana",
      extensions: ["otg"]
    },
    "application/vnd.oasis.opendocument.image": {
      source: "iana",
      extensions: ["odi"]
    },
    "application/vnd.oasis.opendocument.image-template": {
      source: "iana",
      extensions: ["oti"]
    },
    "application/vnd.oasis.opendocument.presentation": {
      source: "iana",
      compressible: false,
      extensions: ["odp"]
    },
    "application/vnd.oasis.opendocument.presentation-template": {
      source: "iana",
      extensions: ["otp"]
    },
    "application/vnd.oasis.opendocument.spreadsheet": {
      source: "iana",
      compressible: false,
      extensions: ["ods"]
    },
    "application/vnd.oasis.opendocument.spreadsheet-template": {
      source: "iana",
      extensions: ["ots"]
    },
    "application/vnd.oasis.opendocument.text": {
      source: "iana",
      compressible: false,
      extensions: ["odt"]
    },
    "application/vnd.oasis.opendocument.text-master": {
      source: "iana",
      extensions: ["odm"]
    },
    "application/vnd.oasis.opendocument.text-template": {
      source: "iana",
      extensions: ["ott"]
    },
    "application/vnd.oasis.opendocument.text-web": {
      source: "iana",
      extensions: ["oth"]
    },
    "application/vnd.obn": {
      source: "iana"
    },
    "application/vnd.ocf+cbor": {
      source: "iana"
    },
    "application/vnd.oci.image.manifest.v1+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oftn.l10n+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.contentaccessdownload+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.contentaccessstreaming+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.cspg-hexbinary": {
      source: "iana"
    },
    "application/vnd.oipf.dae.svg+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.dae.xhtml+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.mippvcontrolmessage+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.pae.gem": {
      source: "iana"
    },
    "application/vnd.oipf.spdiscovery+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.spdlist+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.ueprofile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.userprofile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.olpc-sugar": {
      source: "iana",
      extensions: ["xo"]
    },
    "application/vnd.oma-scws-config": {
      source: "iana"
    },
    "application/vnd.oma-scws-http-request": {
      source: "iana"
    },
    "application/vnd.oma-scws-http-response": {
      source: "iana"
    },
    "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.drm-trigger+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.imd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.ltkm": {
      source: "iana"
    },
    "application/vnd.oma.bcast.notification+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.provisioningtrigger": {
      source: "iana"
    },
    "application/vnd.oma.bcast.sgboot": {
      source: "iana"
    },
    "application/vnd.oma.bcast.sgdd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.sgdu": {
      source: "iana"
    },
    "application/vnd.oma.bcast.simple-symbol-container": {
      source: "iana"
    },
    "application/vnd.oma.bcast.smartcard-trigger+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.sprov+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.stkm": {
      source: "iana"
    },
    "application/vnd.oma.cab-address-book+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.cab-feature-handler+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.cab-pcc+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.cab-subs-invite+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.cab-user-prefs+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.dcd": {
      source: "iana"
    },
    "application/vnd.oma.dcdc": {
      source: "iana"
    },
    "application/vnd.oma.dd2+xml": {
      source: "iana",
      compressible: true,
      extensions: ["dd2"]
    },
    "application/vnd.oma.drm.risd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.group-usage-list+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.lwm2m+cbor": {
      source: "iana"
    },
    "application/vnd.oma.lwm2m+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.lwm2m+tlv": {
      source: "iana"
    },
    "application/vnd.oma.pal+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.detailed-progress-report+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.final-report+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.groups+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.invocation-descriptor+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.optimized-progress-report+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.push": {
      source: "iana"
    },
    "application/vnd.oma.scidm.messages+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.xcap-directory+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.omads-email+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.omads-file+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.omads-folder+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.omaloc-supl-init": {
      source: "iana"
    },
    "application/vnd.onepager": {
      source: "iana"
    },
    "application/vnd.onepagertamp": {
      source: "iana"
    },
    "application/vnd.onepagertamx": {
      source: "iana"
    },
    "application/vnd.onepagertat": {
      source: "iana"
    },
    "application/vnd.onepagertatp": {
      source: "iana"
    },
    "application/vnd.onepagertatx": {
      source: "iana"
    },
    "application/vnd.openblox.game+xml": {
      source: "iana",
      compressible: true,
      extensions: ["obgx"]
    },
    "application/vnd.openblox.game-binary": {
      source: "iana"
    },
    "application/vnd.openeye.oeb": {
      source: "iana"
    },
    "application/vnd.openofficeorg.extension": {
      source: "apache",
      extensions: ["oxt"]
    },
    "application/vnd.openstreetmap.data+xml": {
      source: "iana",
      compressible: true,
      extensions: ["osm"]
    },
    "application/vnd.opentimestamps.ots": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawing+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
      source: "iana",
      compressible: false,
      extensions: ["pptx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slide": {
      source: "iana",
      extensions: ["sldx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
      source: "iana",
      extensions: ["ppsx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.template": {
      source: "iana",
      extensions: ["potx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
      source: "iana",
      compressible: false,
      extensions: ["xlsx"]
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
      source: "iana",
      extensions: ["xltx"]
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.theme+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.vmldrawing": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
      source: "iana",
      compressible: false,
      extensions: ["docx"]
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
      source: "iana",
      extensions: ["dotx"]
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-package.core-properties+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-package.relationships+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oracle.resource+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.orange.indata": {
      source: "iana"
    },
    "application/vnd.osa.netdeploy": {
      source: "iana"
    },
    "application/vnd.osgeo.mapguide.package": {
      source: "iana",
      extensions: ["mgp"]
    },
    "application/vnd.osgi.bundle": {
      source: "iana"
    },
    "application/vnd.osgi.dp": {
      source: "iana",
      extensions: ["dp"]
    },
    "application/vnd.osgi.subsystem": {
      source: "iana",
      extensions: ["esa"]
    },
    "application/vnd.otps.ct-kip+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oxli.countgraph": {
      source: "iana"
    },
    "application/vnd.pagerduty+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.palm": {
      source: "iana",
      extensions: ["pdb", "pqa", "oprc"]
    },
    "application/vnd.panoply": {
      source: "iana"
    },
    "application/vnd.paos.xml": {
      source: "iana"
    },
    "application/vnd.patentdive": {
      source: "iana"
    },
    "application/vnd.patientecommsdoc": {
      source: "iana"
    },
    "application/vnd.pawaafile": {
      source: "iana",
      extensions: ["paw"]
    },
    "application/vnd.pcos": {
      source: "iana"
    },
    "application/vnd.pg.format": {
      source: "iana",
      extensions: ["str"]
    },
    "application/vnd.pg.osasli": {
      source: "iana",
      extensions: ["ei6"]
    },
    "application/vnd.piaccess.application-licence": {
      source: "iana"
    },
    "application/vnd.picsel": {
      source: "iana",
      extensions: ["efif"]
    },
    "application/vnd.pmi.widget": {
      source: "iana",
      extensions: ["wg"]
    },
    "application/vnd.poc.group-advertisement+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.pocketlearn": {
      source: "iana",
      extensions: ["plf"]
    },
    "application/vnd.powerbuilder6": {
      source: "iana",
      extensions: ["pbd"]
    },
    "application/vnd.powerbuilder6-s": {
      source: "iana"
    },
    "application/vnd.powerbuilder7": {
      source: "iana"
    },
    "application/vnd.powerbuilder7-s": {
      source: "iana"
    },
    "application/vnd.powerbuilder75": {
      source: "iana"
    },
    "application/vnd.powerbuilder75-s": {
      source: "iana"
    },
    "application/vnd.preminet": {
      source: "iana"
    },
    "application/vnd.previewsystems.box": {
      source: "iana",
      extensions: ["box"]
    },
    "application/vnd.proteus.magazine": {
      source: "iana",
      extensions: ["mgz"]
    },
    "application/vnd.psfs": {
      source: "iana"
    },
    "application/vnd.publishare-delta-tree": {
      source: "iana",
      extensions: ["qps"]
    },
    "application/vnd.pvi.ptid1": {
      source: "iana",
      extensions: ["ptid"]
    },
    "application/vnd.pwg-multiplexed": {
      source: "iana"
    },
    "application/vnd.pwg-xhtml-print+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.qualcomm.brew-app-res": {
      source: "iana"
    },
    "application/vnd.quarantainenet": {
      source: "iana"
    },
    "application/vnd.quark.quarkxpress": {
      source: "iana",
      extensions: ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"]
    },
    "application/vnd.quobject-quoxdocument": {
      source: "iana"
    },
    "application/vnd.radisys.moml+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit-conf+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit-conn+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit-dialog+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit-stream+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-conf+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-base+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-fax-detect+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-group+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-speech+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-transform+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.rainstor.data": {
      source: "iana"
    },
    "application/vnd.rapid": {
      source: "iana"
    },
    "application/vnd.rar": {
      source: "iana",
      extensions: ["rar"]
    },
    "application/vnd.realvnc.bed": {
      source: "iana",
      extensions: ["bed"]
    },
    "application/vnd.recordare.musicxml": {
      source: "iana",
      extensions: ["mxl"]
    },
    "application/vnd.recordare.musicxml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["musicxml"]
    },
    "application/vnd.renlearn.rlprint": {
      source: "iana"
    },
    "application/vnd.resilient.logic": {
      source: "iana"
    },
    "application/vnd.restful+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.rig.cryptonote": {
      source: "iana",
      extensions: ["cryptonote"]
    },
    "application/vnd.rim.cod": {
      source: "apache",
      extensions: ["cod"]
    },
    "application/vnd.rn-realmedia": {
      source: "apache",
      extensions: ["rm"]
    },
    "application/vnd.rn-realmedia-vbr": {
      source: "apache",
      extensions: ["rmvb"]
    },
    "application/vnd.route66.link66+xml": {
      source: "iana",
      compressible: true,
      extensions: ["link66"]
    },
    "application/vnd.rs-274x": {
      source: "iana"
    },
    "application/vnd.ruckus.download": {
      source: "iana"
    },
    "application/vnd.s3sms": {
      source: "iana"
    },
    "application/vnd.sailingtracker.track": {
      source: "iana",
      extensions: ["st"]
    },
    "application/vnd.sar": {
      source: "iana"
    },
    "application/vnd.sbm.cid": {
      source: "iana"
    },
    "application/vnd.sbm.mid2": {
      source: "iana"
    },
    "application/vnd.scribus": {
      source: "iana"
    },
    "application/vnd.sealed.3df": {
      source: "iana"
    },
    "application/vnd.sealed.csf": {
      source: "iana"
    },
    "application/vnd.sealed.doc": {
      source: "iana"
    },
    "application/vnd.sealed.eml": {
      source: "iana"
    },
    "application/vnd.sealed.mht": {
      source: "iana"
    },
    "application/vnd.sealed.net": {
      source: "iana"
    },
    "application/vnd.sealed.ppt": {
      source: "iana"
    },
    "application/vnd.sealed.tiff": {
      source: "iana"
    },
    "application/vnd.sealed.xls": {
      source: "iana"
    },
    "application/vnd.sealedmedia.softseal.html": {
      source: "iana"
    },
    "application/vnd.sealedmedia.softseal.pdf": {
      source: "iana"
    },
    "application/vnd.seemail": {
      source: "iana",
      extensions: ["see"]
    },
    "application/vnd.seis+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.sema": {
      source: "iana",
      extensions: ["sema"]
    },
    "application/vnd.semd": {
      source: "iana",
      extensions: ["semd"]
    },
    "application/vnd.semf": {
      source: "iana",
      extensions: ["semf"]
    },
    "application/vnd.shade-save-file": {
      source: "iana"
    },
    "application/vnd.shana.informed.formdata": {
      source: "iana",
      extensions: ["ifm"]
    },
    "application/vnd.shana.informed.formtemplate": {
      source: "iana",
      extensions: ["itp"]
    },
    "application/vnd.shana.informed.interchange": {
      source: "iana",
      extensions: ["iif"]
    },
    "application/vnd.shana.informed.package": {
      source: "iana",
      extensions: ["ipk"]
    },
    "application/vnd.shootproof+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.shopkick+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.shp": {
      source: "iana"
    },
    "application/vnd.shx": {
      source: "iana"
    },
    "application/vnd.sigrok.session": {
      source: "iana"
    },
    "application/vnd.simtech-mindmapper": {
      source: "iana",
      extensions: ["twd", "twds"]
    },
    "application/vnd.siren+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.smaf": {
      source: "iana",
      extensions: ["mmf"]
    },
    "application/vnd.smart.notebook": {
      source: "iana"
    },
    "application/vnd.smart.teacher": {
      source: "iana",
      extensions: ["teacher"]
    },
    "application/vnd.snesdev-page-table": {
      source: "iana"
    },
    "application/vnd.software602.filler.form+xml": {
      source: "iana",
      compressible: true,
      extensions: ["fo"]
    },
    "application/vnd.software602.filler.form-xml-zip": {
      source: "iana"
    },
    "application/vnd.solent.sdkm+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sdkm", "sdkd"]
    },
    "application/vnd.spotfire.dxp": {
      source: "iana",
      extensions: ["dxp"]
    },
    "application/vnd.spotfire.sfs": {
      source: "iana",
      extensions: ["sfs"]
    },
    "application/vnd.sqlite3": {
      source: "iana"
    },
    "application/vnd.sss-cod": {
      source: "iana"
    },
    "application/vnd.sss-dtf": {
      source: "iana"
    },
    "application/vnd.sss-ntf": {
      source: "iana"
    },
    "application/vnd.stardivision.calc": {
      source: "apache",
      extensions: ["sdc"]
    },
    "application/vnd.stardivision.draw": {
      source: "apache",
      extensions: ["sda"]
    },
    "application/vnd.stardivision.impress": {
      source: "apache",
      extensions: ["sdd"]
    },
    "application/vnd.stardivision.math": {
      source: "apache",
      extensions: ["smf"]
    },
    "application/vnd.stardivision.writer": {
      source: "apache",
      extensions: ["sdw", "vor"]
    },
    "application/vnd.stardivision.writer-global": {
      source: "apache",
      extensions: ["sgl"]
    },
    "application/vnd.stepmania.package": {
      source: "iana",
      extensions: ["smzip"]
    },
    "application/vnd.stepmania.stepchart": {
      source: "iana",
      extensions: ["sm"]
    },
    "application/vnd.street-stream": {
      source: "iana"
    },
    "application/vnd.sun.wadl+xml": {
      source: "iana",
      compressible: true,
      extensions: ["wadl"]
    },
    "application/vnd.sun.xml.calc": {
      source: "apache",
      extensions: ["sxc"]
    },
    "application/vnd.sun.xml.calc.template": {
      source: "apache",
      extensions: ["stc"]
    },
    "application/vnd.sun.xml.draw": {
      source: "apache",
      extensions: ["sxd"]
    },
    "application/vnd.sun.xml.draw.template": {
      source: "apache",
      extensions: ["std"]
    },
    "application/vnd.sun.xml.impress": {
      source: "apache",
      extensions: ["sxi"]
    },
    "application/vnd.sun.xml.impress.template": {
      source: "apache",
      extensions: ["sti"]
    },
    "application/vnd.sun.xml.math": {
      source: "apache",
      extensions: ["sxm"]
    },
    "application/vnd.sun.xml.writer": {
      source: "apache",
      extensions: ["sxw"]
    },
    "application/vnd.sun.xml.writer.global": {
      source: "apache",
      extensions: ["sxg"]
    },
    "application/vnd.sun.xml.writer.template": {
      source: "apache",
      extensions: ["stw"]
    },
    "application/vnd.sus-calendar": {
      source: "iana",
      extensions: ["sus", "susp"]
    },
    "application/vnd.svd": {
      source: "iana",
      extensions: ["svd"]
    },
    "application/vnd.swiftview-ics": {
      source: "iana"
    },
    "application/vnd.sycle+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.syft+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.symbian.install": {
      source: "apache",
      extensions: ["sis", "sisx"]
    },
    "application/vnd.syncml+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["xsm"]
    },
    "application/vnd.syncml.dm+wbxml": {
      source: "iana",
      charset: "UTF-8",
      extensions: ["bdm"]
    },
    "application/vnd.syncml.dm+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["xdm"]
    },
    "application/vnd.syncml.dm.notification": {
      source: "iana"
    },
    "application/vnd.syncml.dmddf+wbxml": {
      source: "iana"
    },
    "application/vnd.syncml.dmddf+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["ddf"]
    },
    "application/vnd.syncml.dmtnds+wbxml": {
      source: "iana"
    },
    "application/vnd.syncml.dmtnds+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.syncml.ds.notification": {
      source: "iana"
    },
    "application/vnd.tableschema+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.tao.intent-module-archive": {
      source: "iana",
      extensions: ["tao"]
    },
    "application/vnd.tcpdump.pcap": {
      source: "iana",
      extensions: ["pcap", "cap", "dmp"]
    },
    "application/vnd.think-cell.ppttc+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.tmd.mediaflex.api+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.tml": {
      source: "iana"
    },
    "application/vnd.tmobile-livetv": {
      source: "iana",
      extensions: ["tmo"]
    },
    "application/vnd.tri.onesource": {
      source: "iana"
    },
    "application/vnd.trid.tpt": {
      source: "iana",
      extensions: ["tpt"]
    },
    "application/vnd.triscape.mxs": {
      source: "iana",
      extensions: ["mxs"]
    },
    "application/vnd.trueapp": {
      source: "iana",
      extensions: ["tra"]
    },
    "application/vnd.truedoc": {
      source: "iana"
    },
    "application/vnd.ubisoft.webplayer": {
      source: "iana"
    },
    "application/vnd.ufdl": {
      source: "iana",
      extensions: ["ufd", "ufdl"]
    },
    "application/vnd.uiq.theme": {
      source: "iana",
      extensions: ["utz"]
    },
    "application/vnd.umajin": {
      source: "iana",
      extensions: ["umj"]
    },
    "application/vnd.unity": {
      source: "iana",
      extensions: ["unityweb"]
    },
    "application/vnd.uoml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["uoml"]
    },
    "application/vnd.uplanet.alert": {
      source: "iana"
    },
    "application/vnd.uplanet.alert-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.bearer-choice": {
      source: "iana"
    },
    "application/vnd.uplanet.bearer-choice-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.cacheop": {
      source: "iana"
    },
    "application/vnd.uplanet.cacheop-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.channel": {
      source: "iana"
    },
    "application/vnd.uplanet.channel-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.list": {
      source: "iana"
    },
    "application/vnd.uplanet.list-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.listcmd": {
      source: "iana"
    },
    "application/vnd.uplanet.listcmd-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.signal": {
      source: "iana"
    },
    "application/vnd.uri-map": {
      source: "iana"
    },
    "application/vnd.valve.source.material": {
      source: "iana"
    },
    "application/vnd.vcx": {
      source: "iana",
      extensions: ["vcx"]
    },
    "application/vnd.vd-study": {
      source: "iana"
    },
    "application/vnd.vectorworks": {
      source: "iana"
    },
    "application/vnd.vel+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.verimatrix.vcas": {
      source: "iana"
    },
    "application/vnd.veritone.aion+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.veryant.thin": {
      source: "iana"
    },
    "application/vnd.ves.encrypted": {
      source: "iana"
    },
    "application/vnd.vidsoft.vidconference": {
      source: "iana"
    },
    "application/vnd.visio": {
      source: "iana",
      extensions: ["vsd", "vst", "vss", "vsw"]
    },
    "application/vnd.visionary": {
      source: "iana",
      extensions: ["vis"]
    },
    "application/vnd.vividence.scriptfile": {
      source: "iana"
    },
    "application/vnd.vsf": {
      source: "iana",
      extensions: ["vsf"]
    },
    "application/vnd.wap.sic": {
      source: "iana"
    },
    "application/vnd.wap.slc": {
      source: "iana"
    },
    "application/vnd.wap.wbxml": {
      source: "iana",
      charset: "UTF-8",
      extensions: ["wbxml"]
    },
    "application/vnd.wap.wmlc": {
      source: "iana",
      extensions: ["wmlc"]
    },
    "application/vnd.wap.wmlscriptc": {
      source: "iana",
      extensions: ["wmlsc"]
    },
    "application/vnd.webturbo": {
      source: "iana",
      extensions: ["wtb"]
    },
    "application/vnd.wfa.dpp": {
      source: "iana"
    },
    "application/vnd.wfa.p2p": {
      source: "iana"
    },
    "application/vnd.wfa.wsc": {
      source: "iana"
    },
    "application/vnd.windows.devicepairing": {
      source: "iana"
    },
    "application/vnd.wmc": {
      source: "iana"
    },
    "application/vnd.wmf.bootstrap": {
      source: "iana"
    },
    "application/vnd.wolfram.mathematica": {
      source: "iana"
    },
    "application/vnd.wolfram.mathematica.package": {
      source: "iana"
    },
    "application/vnd.wolfram.player": {
      source: "iana",
      extensions: ["nbp"]
    },
    "application/vnd.wordperfect": {
      source: "iana",
      extensions: ["wpd"]
    },
    "application/vnd.wqd": {
      source: "iana",
      extensions: ["wqd"]
    },
    "application/vnd.wrq-hp3000-labelled": {
      source: "iana"
    },
    "application/vnd.wt.stf": {
      source: "iana",
      extensions: ["stf"]
    },
    "application/vnd.wv.csp+wbxml": {
      source: "iana"
    },
    "application/vnd.wv.csp+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.wv.ssp+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.xacml+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.xara": {
      source: "iana",
      extensions: ["xar"]
    },
    "application/vnd.xfdl": {
      source: "iana",
      extensions: ["xfdl"]
    },
    "application/vnd.xfdl.webform": {
      source: "iana"
    },
    "application/vnd.xmi+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.xmpie.cpkg": {
      source: "iana"
    },
    "application/vnd.xmpie.dpkg": {
      source: "iana"
    },
    "application/vnd.xmpie.plan": {
      source: "iana"
    },
    "application/vnd.xmpie.ppkg": {
      source: "iana"
    },
    "application/vnd.xmpie.xlim": {
      source: "iana"
    },
    "application/vnd.yamaha.hv-dic": {
      source: "iana",
      extensions: ["hvd"]
    },
    "application/vnd.yamaha.hv-script": {
      source: "iana",
      extensions: ["hvs"]
    },
    "application/vnd.yamaha.hv-voice": {
      source: "iana",
      extensions: ["hvp"]
    },
    "application/vnd.yamaha.openscoreformat": {
      source: "iana",
      extensions: ["osf"]
    },
    "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
      source: "iana",
      compressible: true,
      extensions: ["osfpvg"]
    },
    "application/vnd.yamaha.remote-setup": {
      source: "iana"
    },
    "application/vnd.yamaha.smaf-audio": {
      source: "iana",
      extensions: ["saf"]
    },
    "application/vnd.yamaha.smaf-phrase": {
      source: "iana",
      extensions: ["spf"]
    },
    "application/vnd.yamaha.through-ngn": {
      source: "iana"
    },
    "application/vnd.yamaha.tunnel-udpencap": {
      source: "iana"
    },
    "application/vnd.yaoweme": {
      source: "iana"
    },
    "application/vnd.yellowriver-custom-menu": {
      source: "iana",
      extensions: ["cmp"]
    },
    "application/vnd.youtube.yt": {
      source: "iana"
    },
    "application/vnd.zul": {
      source: "iana",
      extensions: ["zir", "zirz"]
    },
    "application/vnd.zzazz.deck+xml": {
      source: "iana",
      compressible: true,
      extensions: ["zaz"]
    },
    "application/voicexml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["vxml"]
    },
    "application/voucher-cms+json": {
      source: "iana",
      compressible: true
    },
    "application/vq-rtcpxr": {
      source: "iana"
    },
    "application/wasm": {
      source: "iana",
      compressible: true,
      extensions: ["wasm"]
    },
    "application/watcherinfo+xml": {
      source: "iana",
      compressible: true,
      extensions: ["wif"]
    },
    "application/webpush-options+json": {
      source: "iana",
      compressible: true
    },
    "application/whoispp-query": {
      source: "iana"
    },
    "application/whoispp-response": {
      source: "iana"
    },
    "application/widget": {
      source: "iana",
      extensions: ["wgt"]
    },
    "application/winhlp": {
      source: "apache",
      extensions: ["hlp"]
    },
    "application/wita": {
      source: "iana"
    },
    "application/wordperfect5.1": {
      source: "iana"
    },
    "application/wsdl+xml": {
      source: "iana",
      compressible: true,
      extensions: ["wsdl"]
    },
    "application/wspolicy+xml": {
      source: "iana",
      compressible: true,
      extensions: ["wspolicy"]
    },
    "application/x-7z-compressed": {
      source: "apache",
      compressible: false,
      extensions: ["7z"]
    },
    "application/x-abiword": {
      source: "apache",
      extensions: ["abw"]
    },
    "application/x-ace-compressed": {
      source: "apache",
      extensions: ["ace"]
    },
    "application/x-amf": {
      source: "apache"
    },
    "application/x-apple-diskimage": {
      source: "apache",
      extensions: ["dmg"]
    },
    "application/x-arj": {
      compressible: false,
      extensions: ["arj"]
    },
    "application/x-authorware-bin": {
      source: "apache",
      extensions: ["aab", "x32", "u32", "vox"]
    },
    "application/x-authorware-map": {
      source: "apache",
      extensions: ["aam"]
    },
    "application/x-authorware-seg": {
      source: "apache",
      extensions: ["aas"]
    },
    "application/x-bcpio": {
      source: "apache",
      extensions: ["bcpio"]
    },
    "application/x-bdoc": {
      compressible: false,
      extensions: ["bdoc"]
    },
    "application/x-bittorrent": {
      source: "apache",
      extensions: ["torrent"]
    },
    "application/x-blorb": {
      source: "apache",
      extensions: ["blb", "blorb"]
    },
    "application/x-bzip": {
      source: "apache",
      compressible: false,
      extensions: ["bz"]
    },
    "application/x-bzip2": {
      source: "apache",
      compressible: false,
      extensions: ["bz2", "boz"]
    },
    "application/x-cbr": {
      source: "apache",
      extensions: ["cbr", "cba", "cbt", "cbz", "cb7"]
    },
    "application/x-cdlink": {
      source: "apache",
      extensions: ["vcd"]
    },
    "application/x-cfs-compressed": {
      source: "apache",
      extensions: ["cfs"]
    },
    "application/x-chat": {
      source: "apache",
      extensions: ["chat"]
    },
    "application/x-chess-pgn": {
      source: "apache",
      extensions: ["pgn"]
    },
    "application/x-chrome-extension": {
      extensions: ["crx"]
    },
    "application/x-cocoa": {
      source: "nginx",
      extensions: ["cco"]
    },
    "application/x-compress": {
      source: "apache"
    },
    "application/x-conference": {
      source: "apache",
      extensions: ["nsc"]
    },
    "application/x-cpio": {
      source: "apache",
      extensions: ["cpio"]
    },
    "application/x-csh": {
      source: "apache",
      extensions: ["csh"]
    },
    "application/x-deb": {
      compressible: false
    },
    "application/x-debian-package": {
      source: "apache",
      extensions: ["deb", "udeb"]
    },
    "application/x-dgc-compressed": {
      source: "apache",
      extensions: ["dgc"]
    },
    "application/x-director": {
      source: "apache",
      extensions: ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"]
    },
    "application/x-doom": {
      source: "apache",
      extensions: ["wad"]
    },
    "application/x-dtbncx+xml": {
      source: "apache",
      compressible: true,
      extensions: ["ncx"]
    },
    "application/x-dtbook+xml": {
      source: "apache",
      compressible: true,
      extensions: ["dtb"]
    },
    "application/x-dtbresource+xml": {
      source: "apache",
      compressible: true,
      extensions: ["res"]
    },
    "application/x-dvi": {
      source: "apache",
      compressible: false,
      extensions: ["dvi"]
    },
    "application/x-envoy": {
      source: "apache",
      extensions: ["evy"]
    },
    "application/x-eva": {
      source: "apache",
      extensions: ["eva"]
    },
    "application/x-font-bdf": {
      source: "apache",
      extensions: ["bdf"]
    },
    "application/x-font-dos": {
      source: "apache"
    },
    "application/x-font-framemaker": {
      source: "apache"
    },
    "application/x-font-ghostscript": {
      source: "apache",
      extensions: ["gsf"]
    },
    "application/x-font-libgrx": {
      source: "apache"
    },
    "application/x-font-linux-psf": {
      source: "apache",
      extensions: ["psf"]
    },
    "application/x-font-pcf": {
      source: "apache",
      extensions: ["pcf"]
    },
    "application/x-font-snf": {
      source: "apache",
      extensions: ["snf"]
    },
    "application/x-font-speedo": {
      source: "apache"
    },
    "application/x-font-sunos-news": {
      source: "apache"
    },
    "application/x-font-type1": {
      source: "apache",
      extensions: ["pfa", "pfb", "pfm", "afm"]
    },
    "application/x-font-vfont": {
      source: "apache"
    },
    "application/x-freearc": {
      source: "apache",
      extensions: ["arc"]
    },
    "application/x-futuresplash": {
      source: "apache",
      extensions: ["spl"]
    },
    "application/x-gca-compressed": {
      source: "apache",
      extensions: ["gca"]
    },
    "application/x-glulx": {
      source: "apache",
      extensions: ["ulx"]
    },
    "application/x-gnumeric": {
      source: "apache",
      extensions: ["gnumeric"]
    },
    "application/x-gramps-xml": {
      source: "apache",
      extensions: ["gramps"]
    },
    "application/x-gtar": {
      source: "apache",
      extensions: ["gtar"]
    },
    "application/x-gzip": {
      source: "apache"
    },
    "application/x-hdf": {
      source: "apache",
      extensions: ["hdf"]
    },
    "application/x-httpd-php": {
      compressible: true,
      extensions: ["php"]
    },
    "application/x-install-instructions": {
      source: "apache",
      extensions: ["install"]
    },
    "application/x-iso9660-image": {
      source: "apache",
      extensions: ["iso"]
    },
    "application/x-iwork-keynote-sffkey": {
      extensions: ["key"]
    },
    "application/x-iwork-numbers-sffnumbers": {
      extensions: ["numbers"]
    },
    "application/x-iwork-pages-sffpages": {
      extensions: ["pages"]
    },
    "application/x-java-archive-diff": {
      source: "nginx",
      extensions: ["jardiff"]
    },
    "application/x-java-jnlp-file": {
      source: "apache",
      compressible: false,
      extensions: ["jnlp"]
    },
    "application/x-javascript": {
      compressible: true
    },
    "application/x-keepass2": {
      extensions: ["kdbx"]
    },
    "application/x-latex": {
      source: "apache",
      compressible: false,
      extensions: ["latex"]
    },
    "application/x-lua-bytecode": {
      extensions: ["luac"]
    },
    "application/x-lzh-compressed": {
      source: "apache",
      extensions: ["lzh", "lha"]
    },
    "application/x-makeself": {
      source: "nginx",
      extensions: ["run"]
    },
    "application/x-mie": {
      source: "apache",
      extensions: ["mie"]
    },
    "application/x-mobipocket-ebook": {
      source: "apache",
      extensions: ["prc", "mobi"]
    },
    "application/x-mpegurl": {
      compressible: false
    },
    "application/x-ms-application": {
      source: "apache",
      extensions: ["application"]
    },
    "application/x-ms-shortcut": {
      source: "apache",
      extensions: ["lnk"]
    },
    "application/x-ms-wmd": {
      source: "apache",
      extensions: ["wmd"]
    },
    "application/x-ms-wmz": {
      source: "apache",
      extensions: ["wmz"]
    },
    "application/x-ms-xbap": {
      source: "apache",
      extensions: ["xbap"]
    },
    "application/x-msaccess": {
      source: "apache",
      extensions: ["mdb"]
    },
    "application/x-msbinder": {
      source: "apache",
      extensions: ["obd"]
    },
    "application/x-mscardfile": {
      source: "apache",
      extensions: ["crd"]
    },
    "application/x-msclip": {
      source: "apache",
      extensions: ["clp"]
    },
    "application/x-msdos-program": {
      extensions: ["exe"]
    },
    "application/x-msdownload": {
      source: "apache",
      extensions: ["exe", "dll", "com", "bat", "msi"]
    },
    "application/x-msmediaview": {
      source: "apache",
      extensions: ["mvb", "m13", "m14"]
    },
    "application/x-msmetafile": {
      source: "apache",
      extensions: ["wmf", "wmz", "emf", "emz"]
    },
    "application/x-msmoney": {
      source: "apache",
      extensions: ["mny"]
    },
    "application/x-mspublisher": {
      source: "apache",
      extensions: ["pub"]
    },
    "application/x-msschedule": {
      source: "apache",
      extensions: ["scd"]
    },
    "application/x-msterminal": {
      source: "apache",
      extensions: ["trm"]
    },
    "application/x-mswrite": {
      source: "apache",
      extensions: ["wri"]
    },
    "application/x-netcdf": {
      source: "apache",
      extensions: ["nc", "cdf"]
    },
    "application/x-ns-proxy-autoconfig": {
      compressible: true,
      extensions: ["pac"]
    },
    "application/x-nzb": {
      source: "apache",
      extensions: ["nzb"]
    },
    "application/x-perl": {
      source: "nginx",
      extensions: ["pl", "pm"]
    },
    "application/x-pilot": {
      source: "nginx",
      extensions: ["prc", "pdb"]
    },
    "application/x-pkcs12": {
      source: "apache",
      compressible: false,
      extensions: ["p12", "pfx"]
    },
    "application/x-pkcs7-certificates": {
      source: "apache",
      extensions: ["p7b", "spc"]
    },
    "application/x-pkcs7-certreqresp": {
      source: "apache",
      extensions: ["p7r"]
    },
    "application/x-pki-message": {
      source: "iana"
    },
    "application/x-rar-compressed": {
      source: "apache",
      compressible: false,
      extensions: ["rar"]
    },
    "application/x-redhat-package-manager": {
      source: "nginx",
      extensions: ["rpm"]
    },
    "application/x-research-info-systems": {
      source: "apache",
      extensions: ["ris"]
    },
    "application/x-sea": {
      source: "nginx",
      extensions: ["sea"]
    },
    "application/x-sh": {
      source: "apache",
      compressible: true,
      extensions: ["sh"]
    },
    "application/x-shar": {
      source: "apache",
      extensions: ["shar"]
    },
    "application/x-shockwave-flash": {
      source: "apache",
      compressible: false,
      extensions: ["swf"]
    },
    "application/x-silverlight-app": {
      source: "apache",
      extensions: ["xap"]
    },
    "application/x-sql": {
      source: "apache",
      extensions: ["sql"]
    },
    "application/x-stuffit": {
      source: "apache",
      compressible: false,
      extensions: ["sit"]
    },
    "application/x-stuffitx": {
      source: "apache",
      extensions: ["sitx"]
    },
    "application/x-subrip": {
      source: "apache",
      extensions: ["srt"]
    },
    "application/x-sv4cpio": {
      source: "apache",
      extensions: ["sv4cpio"]
    },
    "application/x-sv4crc": {
      source: "apache",
      extensions: ["sv4crc"]
    },
    "application/x-t3vm-image": {
      source: "apache",
      extensions: ["t3"]
    },
    "application/x-tads": {
      source: "apache",
      extensions: ["gam"]
    },
    "application/x-tar": {
      source: "apache",
      compressible: true,
      extensions: ["tar"]
    },
    "application/x-tcl": {
      source: "apache",
      extensions: ["tcl", "tk"]
    },
    "application/x-tex": {
      source: "apache",
      extensions: ["tex"]
    },
    "application/x-tex-tfm": {
      source: "apache",
      extensions: ["tfm"]
    },
    "application/x-texinfo": {
      source: "apache",
      extensions: ["texinfo", "texi"]
    },
    "application/x-tgif": {
      source: "apache",
      extensions: ["obj"]
    },
    "application/x-ustar": {
      source: "apache",
      extensions: ["ustar"]
    },
    "application/x-virtualbox-hdd": {
      compressible: true,
      extensions: ["hdd"]
    },
    "application/x-virtualbox-ova": {
      compressible: true,
      extensions: ["ova"]
    },
    "application/x-virtualbox-ovf": {
      compressible: true,
      extensions: ["ovf"]
    },
    "application/x-virtualbox-vbox": {
      compressible: true,
      extensions: ["vbox"]
    },
    "application/x-virtualbox-vbox-extpack": {
      compressible: false,
      extensions: ["vbox-extpack"]
    },
    "application/x-virtualbox-vdi": {
      compressible: true,
      extensions: ["vdi"]
    },
    "application/x-virtualbox-vhd": {
      compressible: true,
      extensions: ["vhd"]
    },
    "application/x-virtualbox-vmdk": {
      compressible: true,
      extensions: ["vmdk"]
    },
    "application/x-wais-source": {
      source: "apache",
      extensions: ["src"]
    },
    "application/x-web-app-manifest+json": {
      compressible: true,
      extensions: ["webapp"]
    },
    "application/x-www-form-urlencoded": {
      source: "iana",
      compressible: true
    },
    "application/x-x509-ca-cert": {
      source: "iana",
      extensions: ["der", "crt", "pem"]
    },
    "application/x-x509-ca-ra-cert": {
      source: "iana"
    },
    "application/x-x509-next-ca-cert": {
      source: "iana"
    },
    "application/x-xfig": {
      source: "apache",
      extensions: ["fig"]
    },
    "application/x-xliff+xml": {
      source: "apache",
      compressible: true,
      extensions: ["xlf"]
    },
    "application/x-xpinstall": {
      source: "apache",
      compressible: false,
      extensions: ["xpi"]
    },
    "application/x-xz": {
      source: "apache",
      extensions: ["xz"]
    },
    "application/x-zmachine": {
      source: "apache",
      extensions: ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"]
    },
    "application/x400-bp": {
      source: "iana"
    },
    "application/xacml+xml": {
      source: "iana",
      compressible: true
    },
    "application/xaml+xml": {
      source: "apache",
      compressible: true,
      extensions: ["xaml"]
    },
    "application/xcap-att+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xav"]
    },
    "application/xcap-caps+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xca"]
    },
    "application/xcap-diff+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xdf"]
    },
    "application/xcap-el+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xel"]
    },
    "application/xcap-error+xml": {
      source: "iana",
      compressible: true
    },
    "application/xcap-ns+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xns"]
    },
    "application/xcon-conference-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/xcon-conference-info-diff+xml": {
      source: "iana",
      compressible: true
    },
    "application/xenc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xenc"]
    },
    "application/xhtml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xhtml", "xht"]
    },
    "application/xhtml-voice+xml": {
      source: "apache",
      compressible: true
    },
    "application/xliff+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xlf"]
    },
    "application/xml": {
      source: "iana",
      compressible: true,
      extensions: ["xml", "xsl", "xsd", "rng"]
    },
    "application/xml-dtd": {
      source: "iana",
      compressible: true,
      extensions: ["dtd"]
    },
    "application/xml-external-parsed-entity": {
      source: "iana"
    },
    "application/xml-patch+xml": {
      source: "iana",
      compressible: true
    },
    "application/xmpp+xml": {
      source: "iana",
      compressible: true
    },
    "application/xop+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xop"]
    },
    "application/xproc+xml": {
      source: "apache",
      compressible: true,
      extensions: ["xpl"]
    },
    "application/xslt+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xsl", "xslt"]
    },
    "application/xspf+xml": {
      source: "apache",
      compressible: true,
      extensions: ["xspf"]
    },
    "application/xv+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mxml", "xhvml", "xvml", "xvm"]
    },
    "application/yang": {
      source: "iana",
      extensions: ["yang"]
    },
    "application/yang-data+json": {
      source: "iana",
      compressible: true
    },
    "application/yang-data+xml": {
      source: "iana",
      compressible: true
    },
    "application/yang-patch+json": {
      source: "iana",
      compressible: true
    },
    "application/yang-patch+xml": {
      source: "iana",
      compressible: true
    },
    "application/yin+xml": {
      source: "iana",
      compressible: true,
      extensions: ["yin"]
    },
    "application/zip": {
      source: "iana",
      compressible: false,
      extensions: ["zip"]
    },
    "application/zlib": {
      source: "iana"
    },
    "application/zstd": {
      source: "iana"
    },
    "audio/1d-interleaved-parityfec": {
      source: "iana"
    },
    "audio/32kadpcm": {
      source: "iana"
    },
    "audio/3gpp": {
      source: "iana",
      compressible: false,
      extensions: ["3gpp"]
    },
    "audio/3gpp2": {
      source: "iana"
    },
    "audio/aac": {
      source: "iana"
    },
    "audio/ac3": {
      source: "iana"
    },
    "audio/adpcm": {
      source: "apache",
      extensions: ["adp"]
    },
    "audio/amr": {
      source: "iana",
      extensions: ["amr"]
    },
    "audio/amr-wb": {
      source: "iana"
    },
    "audio/amr-wb+": {
      source: "iana"
    },
    "audio/aptx": {
      source: "iana"
    },
    "audio/asc": {
      source: "iana"
    },
    "audio/atrac-advanced-lossless": {
      source: "iana"
    },
    "audio/atrac-x": {
      source: "iana"
    },
    "audio/atrac3": {
      source: "iana"
    },
    "audio/basic": {
      source: "iana",
      compressible: false,
      extensions: ["au", "snd"]
    },
    "audio/bv16": {
      source: "iana"
    },
    "audio/bv32": {
      source: "iana"
    },
    "audio/clearmode": {
      source: "iana"
    },
    "audio/cn": {
      source: "iana"
    },
    "audio/dat12": {
      source: "iana"
    },
    "audio/dls": {
      source: "iana"
    },
    "audio/dsr-es201108": {
      source: "iana"
    },
    "audio/dsr-es202050": {
      source: "iana"
    },
    "audio/dsr-es202211": {
      source: "iana"
    },
    "audio/dsr-es202212": {
      source: "iana"
    },
    "audio/dv": {
      source: "iana"
    },
    "audio/dvi4": {
      source: "iana"
    },
    "audio/eac3": {
      source: "iana"
    },
    "audio/encaprtp": {
      source: "iana"
    },
    "audio/evrc": {
      source: "iana"
    },
    "audio/evrc-qcp": {
      source: "iana"
    },
    "audio/evrc0": {
      source: "iana"
    },
    "audio/evrc1": {
      source: "iana"
    },
    "audio/evrcb": {
      source: "iana"
    },
    "audio/evrcb0": {
      source: "iana"
    },
    "audio/evrcb1": {
      source: "iana"
    },
    "audio/evrcnw": {
      source: "iana"
    },
    "audio/evrcnw0": {
      source: "iana"
    },
    "audio/evrcnw1": {
      source: "iana"
    },
    "audio/evrcwb": {
      source: "iana"
    },
    "audio/evrcwb0": {
      source: "iana"
    },
    "audio/evrcwb1": {
      source: "iana"
    },
    "audio/evs": {
      source: "iana"
    },
    "audio/flexfec": {
      source: "iana"
    },
    "audio/fwdred": {
      source: "iana"
    },
    "audio/g711-0": {
      source: "iana"
    },
    "audio/g719": {
      source: "iana"
    },
    "audio/g722": {
      source: "iana"
    },
    "audio/g7221": {
      source: "iana"
    },
    "audio/g723": {
      source: "iana"
    },
    "audio/g726-16": {
      source: "iana"
    },
    "audio/g726-24": {
      source: "iana"
    },
    "audio/g726-32": {
      source: "iana"
    },
    "audio/g726-40": {
      source: "iana"
    },
    "audio/g728": {
      source: "iana"
    },
    "audio/g729": {
      source: "iana"
    },
    "audio/g7291": {
      source: "iana"
    },
    "audio/g729d": {
      source: "iana"
    },
    "audio/g729e": {
      source: "iana"
    },
    "audio/gsm": {
      source: "iana"
    },
    "audio/gsm-efr": {
      source: "iana"
    },
    "audio/gsm-hr-08": {
      source: "iana"
    },
    "audio/ilbc": {
      source: "iana"
    },
    "audio/ip-mr_v2.5": {
      source: "iana"
    },
    "audio/isac": {
      source: "apache"
    },
    "audio/l16": {
      source: "iana"
    },
    "audio/l20": {
      source: "iana"
    },
    "audio/l24": {
      source: "iana",
      compressible: false
    },
    "audio/l8": {
      source: "iana"
    },
    "audio/lpc": {
      source: "iana"
    },
    "audio/melp": {
      source: "iana"
    },
    "audio/melp1200": {
      source: "iana"
    },
    "audio/melp2400": {
      source: "iana"
    },
    "audio/melp600": {
      source: "iana"
    },
    "audio/mhas": {
      source: "iana"
    },
    "audio/midi": {
      source: "apache",
      extensions: ["mid", "midi", "kar", "rmi"]
    },
    "audio/mobile-xmf": {
      source: "iana",
      extensions: ["mxmf"]
    },
    "audio/mp3": {
      compressible: false,
      extensions: ["mp3"]
    },
    "audio/mp4": {
      source: "iana",
      compressible: false,
      extensions: ["m4a", "mp4a"]
    },
    "audio/mp4a-latm": {
      source: "iana"
    },
    "audio/mpa": {
      source: "iana"
    },
    "audio/mpa-robust": {
      source: "iana"
    },
    "audio/mpeg": {
      source: "iana",
      compressible: false,
      extensions: ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"]
    },
    "audio/mpeg4-generic": {
      source: "iana"
    },
    "audio/musepack": {
      source: "apache"
    },
    "audio/ogg": {
      source: "iana",
      compressible: false,
      extensions: ["oga", "ogg", "spx", "opus"]
    },
    "audio/opus": {
      source: "iana"
    },
    "audio/parityfec": {
      source: "iana"
    },
    "audio/pcma": {
      source: "iana"
    },
    "audio/pcma-wb": {
      source: "iana"
    },
    "audio/pcmu": {
      source: "iana"
    },
    "audio/pcmu-wb": {
      source: "iana"
    },
    "audio/prs.sid": {
      source: "iana"
    },
    "audio/qcelp": {
      source: "iana"
    },
    "audio/raptorfec": {
      source: "iana"
    },
    "audio/red": {
      source: "iana"
    },
    "audio/rtp-enc-aescm128": {
      source: "iana"
    },
    "audio/rtp-midi": {
      source: "iana"
    },
    "audio/rtploopback": {
      source: "iana"
    },
    "audio/rtx": {
      source: "iana"
    },
    "audio/s3m": {
      source: "apache",
      extensions: ["s3m"]
    },
    "audio/scip": {
      source: "iana"
    },
    "audio/silk": {
      source: "apache",
      extensions: ["sil"]
    },
    "audio/smv": {
      source: "iana"
    },
    "audio/smv-qcp": {
      source: "iana"
    },
    "audio/smv0": {
      source: "iana"
    },
    "audio/sofa": {
      source: "iana"
    },
    "audio/sp-midi": {
      source: "iana"
    },
    "audio/speex": {
      source: "iana"
    },
    "audio/t140c": {
      source: "iana"
    },
    "audio/t38": {
      source: "iana"
    },
    "audio/telephone-event": {
      source: "iana"
    },
    "audio/tetra_acelp": {
      source: "iana"
    },
    "audio/tetra_acelp_bb": {
      source: "iana"
    },
    "audio/tone": {
      source: "iana"
    },
    "audio/tsvcis": {
      source: "iana"
    },
    "audio/uemclip": {
      source: "iana"
    },
    "audio/ulpfec": {
      source: "iana"
    },
    "audio/usac": {
      source: "iana"
    },
    "audio/vdvi": {
      source: "iana"
    },
    "audio/vmr-wb": {
      source: "iana"
    },
    "audio/vnd.3gpp.iufp": {
      source: "iana"
    },
    "audio/vnd.4sb": {
      source: "iana"
    },
    "audio/vnd.audiokoz": {
      source: "iana"
    },
    "audio/vnd.celp": {
      source: "iana"
    },
    "audio/vnd.cisco.nse": {
      source: "iana"
    },
    "audio/vnd.cmles.radio-events": {
      source: "iana"
    },
    "audio/vnd.cns.anp1": {
      source: "iana"
    },
    "audio/vnd.cns.inf1": {
      source: "iana"
    },
    "audio/vnd.dece.audio": {
      source: "iana",
      extensions: ["uva", "uvva"]
    },
    "audio/vnd.digital-winds": {
      source: "iana",
      extensions: ["eol"]
    },
    "audio/vnd.dlna.adts": {
      source: "iana"
    },
    "audio/vnd.dolby.heaac.1": {
      source: "iana"
    },
    "audio/vnd.dolby.heaac.2": {
      source: "iana"
    },
    "audio/vnd.dolby.mlp": {
      source: "iana"
    },
    "audio/vnd.dolby.mps": {
      source: "iana"
    },
    "audio/vnd.dolby.pl2": {
      source: "iana"
    },
    "audio/vnd.dolby.pl2x": {
      source: "iana"
    },
    "audio/vnd.dolby.pl2z": {
      source: "iana"
    },
    "audio/vnd.dolby.pulse.1": {
      source: "iana"
    },
    "audio/vnd.dra": {
      source: "iana",
      extensions: ["dra"]
    },
    "audio/vnd.dts": {
      source: "iana",
      extensions: ["dts"]
    },
    "audio/vnd.dts.hd": {
      source: "iana",
      extensions: ["dtshd"]
    },
    "audio/vnd.dts.uhd": {
      source: "iana"
    },
    "audio/vnd.dvb.file": {
      source: "iana"
    },
    "audio/vnd.everad.plj": {
      source: "iana"
    },
    "audio/vnd.hns.audio": {
      source: "iana"
    },
    "audio/vnd.lucent.voice": {
      source: "iana",
      extensions: ["lvp"]
    },
    "audio/vnd.ms-playready.media.pya": {
      source: "iana",
      extensions: ["pya"]
    },
    "audio/vnd.nokia.mobile-xmf": {
      source: "iana"
    },
    "audio/vnd.nortel.vbk": {
      source: "iana"
    },
    "audio/vnd.nuera.ecelp4800": {
      source: "iana",
      extensions: ["ecelp4800"]
    },
    "audio/vnd.nuera.ecelp7470": {
      source: "iana",
      extensions: ["ecelp7470"]
    },
    "audio/vnd.nuera.ecelp9600": {
      source: "iana",
      extensions: ["ecelp9600"]
    },
    "audio/vnd.octel.sbc": {
      source: "iana"
    },
    "audio/vnd.presonus.multitrack": {
      source: "iana"
    },
    "audio/vnd.qcelp": {
      source: "iana"
    },
    "audio/vnd.rhetorex.32kadpcm": {
      source: "iana"
    },
    "audio/vnd.rip": {
      source: "iana",
      extensions: ["rip"]
    },
    "audio/vnd.rn-realaudio": {
      compressible: false
    },
    "audio/vnd.sealedmedia.softseal.mpeg": {
      source: "iana"
    },
    "audio/vnd.vmx.cvsd": {
      source: "iana"
    },
    "audio/vnd.wave": {
      compressible: false
    },
    "audio/vorbis": {
      source: "iana",
      compressible: false
    },
    "audio/vorbis-config": {
      source: "iana"
    },
    "audio/wav": {
      compressible: false,
      extensions: ["wav"]
    },
    "audio/wave": {
      compressible: false,
      extensions: ["wav"]
    },
    "audio/webm": {
      source: "apache",
      compressible: false,
      extensions: ["weba"]
    },
    "audio/x-aac": {
      source: "apache",
      compressible: false,
      extensions: ["aac"]
    },
    "audio/x-aiff": {
      source: "apache",
      extensions: ["aif", "aiff", "aifc"]
    },
    "audio/x-caf": {
      source: "apache",
      compressible: false,
      extensions: ["caf"]
    },
    "audio/x-flac": {
      source: "apache",
      extensions: ["flac"]
    },
    "audio/x-m4a": {
      source: "nginx",
      extensions: ["m4a"]
    },
    "audio/x-matroska": {
      source: "apache",
      extensions: ["mka"]
    },
    "audio/x-mpegurl": {
      source: "apache",
      extensions: ["m3u"]
    },
    "audio/x-ms-wax": {
      source: "apache",
      extensions: ["wax"]
    },
    "audio/x-ms-wma": {
      source: "apache",
      extensions: ["wma"]
    },
    "audio/x-pn-realaudio": {
      source: "apache",
      extensions: ["ram", "ra"]
    },
    "audio/x-pn-realaudio-plugin": {
      source: "apache",
      extensions: ["rmp"]
    },
    "audio/x-realaudio": {
      source: "nginx",
      extensions: ["ra"]
    },
    "audio/x-tta": {
      source: "apache"
    },
    "audio/x-wav": {
      source: "apache",
      extensions: ["wav"]
    },
    "audio/xm": {
      source: "apache",
      extensions: ["xm"]
    },
    "chemical/x-cdx": {
      source: "apache",
      extensions: ["cdx"]
    },
    "chemical/x-cif": {
      source: "apache",
      extensions: ["cif"]
    },
    "chemical/x-cmdf": {
      source: "apache",
      extensions: ["cmdf"]
    },
    "chemical/x-cml": {
      source: "apache",
      extensions: ["cml"]
    },
    "chemical/x-csml": {
      source: "apache",
      extensions: ["csml"]
    },
    "chemical/x-pdb": {
      source: "apache"
    },
    "chemical/x-xyz": {
      source: "apache",
      extensions: ["xyz"]
    },
    "font/collection": {
      source: "iana",
      extensions: ["ttc"]
    },
    "font/otf": {
      source: "iana",
      compressible: true,
      extensions: ["otf"]
    },
    "font/sfnt": {
      source: "iana"
    },
    "font/ttf": {
      source: "iana",
      compressible: true,
      extensions: ["ttf"]
    },
    "font/woff": {
      source: "iana",
      extensions: ["woff"]
    },
    "font/woff2": {
      source: "iana",
      extensions: ["woff2"]
    },
    "image/aces": {
      source: "iana",
      extensions: ["exr"]
    },
    "image/apng": {
      compressible: false,
      extensions: ["apng"]
    },
    "image/avci": {
      source: "iana",
      extensions: ["avci"]
    },
    "image/avcs": {
      source: "iana",
      extensions: ["avcs"]
    },
    "image/avif": {
      source: "iana",
      compressible: false,
      extensions: ["avif"]
    },
    "image/bmp": {
      source: "iana",
      compressible: true,
      extensions: ["bmp"]
    },
    "image/cgm": {
      source: "iana",
      extensions: ["cgm"]
    },
    "image/dicom-rle": {
      source: "iana",
      extensions: ["drle"]
    },
    "image/emf": {
      source: "iana",
      extensions: ["emf"]
    },
    "image/fits": {
      source: "iana",
      extensions: ["fits"]
    },
    "image/g3fax": {
      source: "iana",
      extensions: ["g3"]
    },
    "image/gif": {
      source: "iana",
      compressible: false,
      extensions: ["gif"]
    },
    "image/heic": {
      source: "iana",
      extensions: ["heic"]
    },
    "image/heic-sequence": {
      source: "iana",
      extensions: ["heics"]
    },
    "image/heif": {
      source: "iana",
      extensions: ["heif"]
    },
    "image/heif-sequence": {
      source: "iana",
      extensions: ["heifs"]
    },
    "image/hej2k": {
      source: "iana",
      extensions: ["hej2"]
    },
    "image/hsj2": {
      source: "iana",
      extensions: ["hsj2"]
    },
    "image/ief": {
      source: "iana",
      extensions: ["ief"]
    },
    "image/jls": {
      source: "iana",
      extensions: ["jls"]
    },
    "image/jp2": {
      source: "iana",
      compressible: false,
      extensions: ["jp2", "jpg2"]
    },
    "image/jpeg": {
      source: "iana",
      compressible: false,
      extensions: ["jpeg", "jpg", "jpe"]
    },
    "image/jph": {
      source: "iana",
      extensions: ["jph"]
    },
    "image/jphc": {
      source: "iana",
      extensions: ["jhc"]
    },
    "image/jpm": {
      source: "iana",
      compressible: false,
      extensions: ["jpm"]
    },
    "image/jpx": {
      source: "iana",
      compressible: false,
      extensions: ["jpx", "jpf"]
    },
    "image/jxr": {
      source: "iana",
      extensions: ["jxr"]
    },
    "image/jxra": {
      source: "iana",
      extensions: ["jxra"]
    },
    "image/jxrs": {
      source: "iana",
      extensions: ["jxrs"]
    },
    "image/jxs": {
      source: "iana",
      extensions: ["jxs"]
    },
    "image/jxsc": {
      source: "iana",
      extensions: ["jxsc"]
    },
    "image/jxsi": {
      source: "iana",
      extensions: ["jxsi"]
    },
    "image/jxss": {
      source: "iana",
      extensions: ["jxss"]
    },
    "image/ktx": {
      source: "iana",
      extensions: ["ktx"]
    },
    "image/ktx2": {
      source: "iana",
      extensions: ["ktx2"]
    },
    "image/naplps": {
      source: "iana"
    },
    "image/pjpeg": {
      compressible: false
    },
    "image/png": {
      source: "iana",
      compressible: false,
      extensions: ["png"]
    },
    "image/prs.btif": {
      source: "iana",
      extensions: ["btif"]
    },
    "image/prs.pti": {
      source: "iana",
      extensions: ["pti"]
    },
    "image/pwg-raster": {
      source: "iana"
    },
    "image/sgi": {
      source: "apache",
      extensions: ["sgi"]
    },
    "image/svg+xml": {
      source: "iana",
      compressible: true,
      extensions: ["svg", "svgz"]
    },
    "image/t38": {
      source: "iana",
      extensions: ["t38"]
    },
    "image/tiff": {
      source: "iana",
      compressible: false,
      extensions: ["tif", "tiff"]
    },
    "image/tiff-fx": {
      source: "iana",
      extensions: ["tfx"]
    },
    "image/vnd.adobe.photoshop": {
      source: "iana",
      compressible: true,
      extensions: ["psd"]
    },
    "image/vnd.airzip.accelerator.azv": {
      source: "iana",
      extensions: ["azv"]
    },
    "image/vnd.cns.inf2": {
      source: "iana"
    },
    "image/vnd.dece.graphic": {
      source: "iana",
      extensions: ["uvi", "uvvi", "uvg", "uvvg"]
    },
    "image/vnd.djvu": {
      source: "iana",
      extensions: ["djvu", "djv"]
    },
    "image/vnd.dvb.subtitle": {
      source: "iana",
      extensions: ["sub"]
    },
    "image/vnd.dwg": {
      source: "iana",
      extensions: ["dwg"]
    },
    "image/vnd.dxf": {
      source: "iana",
      extensions: ["dxf"]
    },
    "image/vnd.fastbidsheet": {
      source: "iana",
      extensions: ["fbs"]
    },
    "image/vnd.fpx": {
      source: "iana",
      extensions: ["fpx"]
    },
    "image/vnd.fst": {
      source: "iana",
      extensions: ["fst"]
    },
    "image/vnd.fujixerox.edmics-mmr": {
      source: "iana",
      extensions: ["mmr"]
    },
    "image/vnd.fujixerox.edmics-rlc": {
      source: "iana",
      extensions: ["rlc"]
    },
    "image/vnd.globalgraphics.pgb": {
      source: "iana"
    },
    "image/vnd.microsoft.icon": {
      source: "iana",
      compressible: true,
      extensions: ["ico"]
    },
    "image/vnd.mix": {
      source: "iana"
    },
    "image/vnd.mozilla.apng": {
      source: "iana"
    },
    "image/vnd.ms-dds": {
      compressible: true,
      extensions: ["dds"]
    },
    "image/vnd.ms-modi": {
      source: "iana",
      extensions: ["mdi"]
    },
    "image/vnd.ms-photo": {
      source: "apache",
      extensions: ["wdp"]
    },
    "image/vnd.net-fpx": {
      source: "iana",
      extensions: ["npx"]
    },
    "image/vnd.pco.b16": {
      source: "iana",
      extensions: ["b16"]
    },
    "image/vnd.radiance": {
      source: "iana"
    },
    "image/vnd.sealed.png": {
      source: "iana"
    },
    "image/vnd.sealedmedia.softseal.gif": {
      source: "iana"
    },
    "image/vnd.sealedmedia.softseal.jpg": {
      source: "iana"
    },
    "image/vnd.svf": {
      source: "iana"
    },
    "image/vnd.tencent.tap": {
      source: "iana",
      extensions: ["tap"]
    },
    "image/vnd.valve.source.texture": {
      source: "iana",
      extensions: ["vtf"]
    },
    "image/vnd.wap.wbmp": {
      source: "iana",
      extensions: ["wbmp"]
    },
    "image/vnd.xiff": {
      source: "iana",
      extensions: ["xif"]
    },
    "image/vnd.zbrush.pcx": {
      source: "iana",
      extensions: ["pcx"]
    },
    "image/webp": {
      source: "apache",
      extensions: ["webp"]
    },
    "image/wmf": {
      source: "iana",
      extensions: ["wmf"]
    },
    "image/x-3ds": {
      source: "apache",
      extensions: ["3ds"]
    },
    "image/x-cmu-raster": {
      source: "apache",
      extensions: ["ras"]
    },
    "image/x-cmx": {
      source: "apache",
      extensions: ["cmx"]
    },
    "image/x-freehand": {
      source: "apache",
      extensions: ["fh", "fhc", "fh4", "fh5", "fh7"]
    },
    "image/x-icon": {
      source: "apache",
      compressible: true,
      extensions: ["ico"]
    },
    "image/x-jng": {
      source: "nginx",
      extensions: ["jng"]
    },
    "image/x-mrsid-image": {
      source: "apache",
      extensions: ["sid"]
    },
    "image/x-ms-bmp": {
      source: "nginx",
      compressible: true,
      extensions: ["bmp"]
    },
    "image/x-pcx": {
      source: "apache",
      extensions: ["pcx"]
    },
    "image/x-pict": {
      source: "apache",
      extensions: ["pic", "pct"]
    },
    "image/x-portable-anymap": {
      source: "apache",
      extensions: ["pnm"]
    },
    "image/x-portable-bitmap": {
      source: "apache",
      extensions: ["pbm"]
    },
    "image/x-portable-graymap": {
      source: "apache",
      extensions: ["pgm"]
    },
    "image/x-portable-pixmap": {
      source: "apache",
      extensions: ["ppm"]
    },
    "image/x-rgb": {
      source: "apache",
      extensions: ["rgb"]
    },
    "image/x-tga": {
      source: "apache",
      extensions: ["tga"]
    },
    "image/x-xbitmap": {
      source: "apache",
      extensions: ["xbm"]
    },
    "image/x-xcf": {
      compressible: false
    },
    "image/x-xpixmap": {
      source: "apache",
      extensions: ["xpm"]
    },
    "image/x-xwindowdump": {
      source: "apache",
      extensions: ["xwd"]
    },
    "message/cpim": {
      source: "iana"
    },
    "message/delivery-status": {
      source: "iana"
    },
    "message/disposition-notification": {
      source: "iana",
      extensions: [
        "disposition-notification"
      ]
    },
    "message/external-body": {
      source: "iana"
    },
    "message/feedback-report": {
      source: "iana"
    },
    "message/global": {
      source: "iana",
      extensions: ["u8msg"]
    },
    "message/global-delivery-status": {
      source: "iana",
      extensions: ["u8dsn"]
    },
    "message/global-disposition-notification": {
      source: "iana",
      extensions: ["u8mdn"]
    },
    "message/global-headers": {
      source: "iana",
      extensions: ["u8hdr"]
    },
    "message/http": {
      source: "iana",
      compressible: false
    },
    "message/imdn+xml": {
      source: "iana",
      compressible: true
    },
    "message/news": {
      source: "iana"
    },
    "message/partial": {
      source: "iana",
      compressible: false
    },
    "message/rfc822": {
      source: "iana",
      compressible: true,
      extensions: ["eml", "mime"]
    },
    "message/s-http": {
      source: "iana"
    },
    "message/sip": {
      source: "iana"
    },
    "message/sipfrag": {
      source: "iana"
    },
    "message/tracking-status": {
      source: "iana"
    },
    "message/vnd.si.simp": {
      source: "iana"
    },
    "message/vnd.wfa.wsc": {
      source: "iana",
      extensions: ["wsc"]
    },
    "model/3mf": {
      source: "iana",
      extensions: ["3mf"]
    },
    "model/e57": {
      source: "iana"
    },
    "model/gltf+json": {
      source: "iana",
      compressible: true,
      extensions: ["gltf"]
    },
    "model/gltf-binary": {
      source: "iana",
      compressible: true,
      extensions: ["glb"]
    },
    "model/iges": {
      source: "iana",
      compressible: false,
      extensions: ["igs", "iges"]
    },
    "model/mesh": {
      source: "iana",
      compressible: false,
      extensions: ["msh", "mesh", "silo"]
    },
    "model/mtl": {
      source: "iana",
      extensions: ["mtl"]
    },
    "model/obj": {
      source: "iana",
      extensions: ["obj"]
    },
    "model/step": {
      source: "iana"
    },
    "model/step+xml": {
      source: "iana",
      compressible: true,
      extensions: ["stpx"]
    },
    "model/step+zip": {
      source: "iana",
      compressible: false,
      extensions: ["stpz"]
    },
    "model/step-xml+zip": {
      source: "iana",
      compressible: false,
      extensions: ["stpxz"]
    },
    "model/stl": {
      source: "iana",
      extensions: ["stl"]
    },
    "model/vnd.collada+xml": {
      source: "iana",
      compressible: true,
      extensions: ["dae"]
    },
    "model/vnd.dwf": {
      source: "iana",
      extensions: ["dwf"]
    },
    "model/vnd.flatland.3dml": {
      source: "iana"
    },
    "model/vnd.gdl": {
      source: "iana",
      extensions: ["gdl"]
    },
    "model/vnd.gs-gdl": {
      source: "apache"
    },
    "model/vnd.gs.gdl": {
      source: "iana"
    },
    "model/vnd.gtw": {
      source: "iana",
      extensions: ["gtw"]
    },
    "model/vnd.moml+xml": {
      source: "iana",
      compressible: true
    },
    "model/vnd.mts": {
      source: "iana",
      extensions: ["mts"]
    },
    "model/vnd.opengex": {
      source: "iana",
      extensions: ["ogex"]
    },
    "model/vnd.parasolid.transmit.binary": {
      source: "iana",
      extensions: ["x_b"]
    },
    "model/vnd.parasolid.transmit.text": {
      source: "iana",
      extensions: ["x_t"]
    },
    "model/vnd.pytha.pyox": {
      source: "iana"
    },
    "model/vnd.rosette.annotated-data-model": {
      source: "iana"
    },
    "model/vnd.sap.vds": {
      source: "iana",
      extensions: ["vds"]
    },
    "model/vnd.usdz+zip": {
      source: "iana",
      compressible: false,
      extensions: ["usdz"]
    },
    "model/vnd.valve.source.compiled-map": {
      source: "iana",
      extensions: ["bsp"]
    },
    "model/vnd.vtu": {
      source: "iana",
      extensions: ["vtu"]
    },
    "model/vrml": {
      source: "iana",
      compressible: false,
      extensions: ["wrl", "vrml"]
    },
    "model/x3d+binary": {
      source: "apache",
      compressible: false,
      extensions: ["x3db", "x3dbz"]
    },
    "model/x3d+fastinfoset": {
      source: "iana",
      extensions: ["x3db"]
    },
    "model/x3d+vrml": {
      source: "apache",
      compressible: false,
      extensions: ["x3dv", "x3dvz"]
    },
    "model/x3d+xml": {
      source: "iana",
      compressible: true,
      extensions: ["x3d", "x3dz"]
    },
    "model/x3d-vrml": {
      source: "iana",
      extensions: ["x3dv"]
    },
    "multipart/alternative": {
      source: "iana",
      compressible: false
    },
    "multipart/appledouble": {
      source: "iana"
    },
    "multipart/byteranges": {
      source: "iana"
    },
    "multipart/digest": {
      source: "iana"
    },
    "multipart/encrypted": {
      source: "iana",
      compressible: false
    },
    "multipart/form-data": {
      source: "iana",
      compressible: false
    },
    "multipart/header-set": {
      source: "iana"
    },
    "multipart/mixed": {
      source: "iana"
    },
    "multipart/multilingual": {
      source: "iana"
    },
    "multipart/parallel": {
      source: "iana"
    },
    "multipart/related": {
      source: "iana",
      compressible: false
    },
    "multipart/report": {
      source: "iana"
    },
    "multipart/signed": {
      source: "iana",
      compressible: false
    },
    "multipart/vnd.bint.med-plus": {
      source: "iana"
    },
    "multipart/voice-message": {
      source: "iana"
    },
    "multipart/x-mixed-replace": {
      source: "iana"
    },
    "text/1d-interleaved-parityfec": {
      source: "iana"
    },
    "text/cache-manifest": {
      source: "iana",
      compressible: true,
      extensions: ["appcache", "manifest"]
    },
    "text/calendar": {
      source: "iana",
      extensions: ["ics", "ifb"]
    },
    "text/calender": {
      compressible: true
    },
    "text/cmd": {
      compressible: true
    },
    "text/coffeescript": {
      extensions: ["coffee", "litcoffee"]
    },
    "text/cql": {
      source: "iana"
    },
    "text/cql-expression": {
      source: "iana"
    },
    "text/cql-identifier": {
      source: "iana"
    },
    "text/css": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["css"]
    },
    "text/csv": {
      source: "iana",
      compressible: true,
      extensions: ["csv"]
    },
    "text/csv-schema": {
      source: "iana"
    },
    "text/directory": {
      source: "iana"
    },
    "text/dns": {
      source: "iana"
    },
    "text/ecmascript": {
      source: "iana"
    },
    "text/encaprtp": {
      source: "iana"
    },
    "text/enriched": {
      source: "iana"
    },
    "text/fhirpath": {
      source: "iana"
    },
    "text/flexfec": {
      source: "iana"
    },
    "text/fwdred": {
      source: "iana"
    },
    "text/gff3": {
      source: "iana"
    },
    "text/grammar-ref-list": {
      source: "iana"
    },
    "text/html": {
      source: "iana",
      compressible: true,
      extensions: ["html", "htm", "shtml"]
    },
    "text/jade": {
      extensions: ["jade"]
    },
    "text/javascript": {
      source: "iana",
      compressible: true
    },
    "text/jcr-cnd": {
      source: "iana"
    },
    "text/jsx": {
      compressible: true,
      extensions: ["jsx"]
    },
    "text/less": {
      compressible: true,
      extensions: ["less"]
    },
    "text/markdown": {
      source: "iana",
      compressible: true,
      extensions: ["markdown", "md"]
    },
    "text/mathml": {
      source: "nginx",
      extensions: ["mml"]
    },
    "text/mdx": {
      compressible: true,
      extensions: ["mdx"]
    },
    "text/mizar": {
      source: "iana"
    },
    "text/n3": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["n3"]
    },
    "text/parameters": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/parityfec": {
      source: "iana"
    },
    "text/plain": {
      source: "iana",
      compressible: true,
      extensions: ["txt", "text", "conf", "def", "list", "log", "in", "ini"]
    },
    "text/provenance-notation": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/prs.fallenstein.rst": {
      source: "iana"
    },
    "text/prs.lines.tag": {
      source: "iana",
      extensions: ["dsc"]
    },
    "text/prs.prop.logic": {
      source: "iana"
    },
    "text/raptorfec": {
      source: "iana"
    },
    "text/red": {
      source: "iana"
    },
    "text/rfc822-headers": {
      source: "iana"
    },
    "text/richtext": {
      source: "iana",
      compressible: true,
      extensions: ["rtx"]
    },
    "text/rtf": {
      source: "iana",
      compressible: true,
      extensions: ["rtf"]
    },
    "text/rtp-enc-aescm128": {
      source: "iana"
    },
    "text/rtploopback": {
      source: "iana"
    },
    "text/rtx": {
      source: "iana"
    },
    "text/sgml": {
      source: "iana",
      extensions: ["sgml", "sgm"]
    },
    "text/shaclc": {
      source: "iana"
    },
    "text/shex": {
      source: "iana",
      extensions: ["shex"]
    },
    "text/slim": {
      extensions: ["slim", "slm"]
    },
    "text/spdx": {
      source: "iana",
      extensions: ["spdx"]
    },
    "text/strings": {
      source: "iana"
    },
    "text/stylus": {
      extensions: ["stylus", "styl"]
    },
    "text/t140": {
      source: "iana"
    },
    "text/tab-separated-values": {
      source: "iana",
      compressible: true,
      extensions: ["tsv"]
    },
    "text/troff": {
      source: "iana",
      extensions: ["t", "tr", "roff", "man", "me", "ms"]
    },
    "text/turtle": {
      source: "iana",
      charset: "UTF-8",
      extensions: ["ttl"]
    },
    "text/ulpfec": {
      source: "iana"
    },
    "text/uri-list": {
      source: "iana",
      compressible: true,
      extensions: ["uri", "uris", "urls"]
    },
    "text/vcard": {
      source: "iana",
      compressible: true,
      extensions: ["vcard"]
    },
    "text/vnd.a": {
      source: "iana"
    },
    "text/vnd.abc": {
      source: "iana"
    },
    "text/vnd.ascii-art": {
      source: "iana"
    },
    "text/vnd.curl": {
      source: "iana",
      extensions: ["curl"]
    },
    "text/vnd.curl.dcurl": {
      source: "apache",
      extensions: ["dcurl"]
    },
    "text/vnd.curl.mcurl": {
      source: "apache",
      extensions: ["mcurl"]
    },
    "text/vnd.curl.scurl": {
      source: "apache",
      extensions: ["scurl"]
    },
    "text/vnd.debian.copyright": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/vnd.dmclientscript": {
      source: "iana"
    },
    "text/vnd.dvb.subtitle": {
      source: "iana",
      extensions: ["sub"]
    },
    "text/vnd.esmertec.theme-descriptor": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/vnd.familysearch.gedcom": {
      source: "iana",
      extensions: ["ged"]
    },
    "text/vnd.ficlab.flt": {
      source: "iana"
    },
    "text/vnd.fly": {
      source: "iana",
      extensions: ["fly"]
    },
    "text/vnd.fmi.flexstor": {
      source: "iana",
      extensions: ["flx"]
    },
    "text/vnd.gml": {
      source: "iana"
    },
    "text/vnd.graphviz": {
      source: "iana",
      extensions: ["gv"]
    },
    "text/vnd.hans": {
      source: "iana"
    },
    "text/vnd.hgl": {
      source: "iana"
    },
    "text/vnd.in3d.3dml": {
      source: "iana",
      extensions: ["3dml"]
    },
    "text/vnd.in3d.spot": {
      source: "iana",
      extensions: ["spot"]
    },
    "text/vnd.iptc.newsml": {
      source: "iana"
    },
    "text/vnd.iptc.nitf": {
      source: "iana"
    },
    "text/vnd.latex-z": {
      source: "iana"
    },
    "text/vnd.motorola.reflex": {
      source: "iana"
    },
    "text/vnd.ms-mediapackage": {
      source: "iana"
    },
    "text/vnd.net2phone.commcenter.command": {
      source: "iana"
    },
    "text/vnd.radisys.msml-basic-layout": {
      source: "iana"
    },
    "text/vnd.senx.warpscript": {
      source: "iana"
    },
    "text/vnd.si.uricatalogue": {
      source: "iana"
    },
    "text/vnd.sosi": {
      source: "iana"
    },
    "text/vnd.sun.j2me.app-descriptor": {
      source: "iana",
      charset: "UTF-8",
      extensions: ["jad"]
    },
    "text/vnd.trolltech.linguist": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/vnd.wap.si": {
      source: "iana"
    },
    "text/vnd.wap.sl": {
      source: "iana"
    },
    "text/vnd.wap.wml": {
      source: "iana",
      extensions: ["wml"]
    },
    "text/vnd.wap.wmlscript": {
      source: "iana",
      extensions: ["wmls"]
    },
    "text/vtt": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["vtt"]
    },
    "text/x-asm": {
      source: "apache",
      extensions: ["s", "asm"]
    },
    "text/x-c": {
      source: "apache",
      extensions: ["c", "cc", "cxx", "cpp", "h", "hh", "dic"]
    },
    "text/x-component": {
      source: "nginx",
      extensions: ["htc"]
    },
    "text/x-fortran": {
      source: "apache",
      extensions: ["f", "for", "f77", "f90"]
    },
    "text/x-gwt-rpc": {
      compressible: true
    },
    "text/x-handlebars-template": {
      extensions: ["hbs"]
    },
    "text/x-java-source": {
      source: "apache",
      extensions: ["java"]
    },
    "text/x-jquery-tmpl": {
      compressible: true
    },
    "text/x-lua": {
      extensions: ["lua"]
    },
    "text/x-markdown": {
      compressible: true,
      extensions: ["mkd"]
    },
    "text/x-nfo": {
      source: "apache",
      extensions: ["nfo"]
    },
    "text/x-opml": {
      source: "apache",
      extensions: ["opml"]
    },
    "text/x-org": {
      compressible: true,
      extensions: ["org"]
    },
    "text/x-pascal": {
      source: "apache",
      extensions: ["p", "pas"]
    },
    "text/x-processing": {
      compressible: true,
      extensions: ["pde"]
    },
    "text/x-sass": {
      extensions: ["sass"]
    },
    "text/x-scss": {
      extensions: ["scss"]
    },
    "text/x-setext": {
      source: "apache",
      extensions: ["etx"]
    },
    "text/x-sfv": {
      source: "apache",
      extensions: ["sfv"]
    },
    "text/x-suse-ymp": {
      compressible: true,
      extensions: ["ymp"]
    },
    "text/x-uuencode": {
      source: "apache",
      extensions: ["uu"]
    },
    "text/x-vcalendar": {
      source: "apache",
      extensions: ["vcs"]
    },
    "text/x-vcard": {
      source: "apache",
      extensions: ["vcf"]
    },
    "text/xml": {
      source: "iana",
      compressible: true,
      extensions: ["xml"]
    },
    "text/xml-external-parsed-entity": {
      source: "iana"
    },
    "text/yaml": {
      compressible: true,
      extensions: ["yaml", "yml"]
    },
    "video/1d-interleaved-parityfec": {
      source: "iana"
    },
    "video/3gpp": {
      source: "iana",
      extensions: ["3gp", "3gpp"]
    },
    "video/3gpp-tt": {
      source: "iana"
    },
    "video/3gpp2": {
      source: "iana",
      extensions: ["3g2"]
    },
    "video/av1": {
      source: "iana"
    },
    "video/bmpeg": {
      source: "iana"
    },
    "video/bt656": {
      source: "iana"
    },
    "video/celb": {
      source: "iana"
    },
    "video/dv": {
      source: "iana"
    },
    "video/encaprtp": {
      source: "iana"
    },
    "video/ffv1": {
      source: "iana"
    },
    "video/flexfec": {
      source: "iana"
    },
    "video/h261": {
      source: "iana",
      extensions: ["h261"]
    },
    "video/h263": {
      source: "iana",
      extensions: ["h263"]
    },
    "video/h263-1998": {
      source: "iana"
    },
    "video/h263-2000": {
      source: "iana"
    },
    "video/h264": {
      source: "iana",
      extensions: ["h264"]
    },
    "video/h264-rcdo": {
      source: "iana"
    },
    "video/h264-svc": {
      source: "iana"
    },
    "video/h265": {
      source: "iana"
    },
    "video/iso.segment": {
      source: "iana",
      extensions: ["m4s"]
    },
    "video/jpeg": {
      source: "iana",
      extensions: ["jpgv"]
    },
    "video/jpeg2000": {
      source: "iana"
    },
    "video/jpm": {
      source: "apache",
      extensions: ["jpm", "jpgm"]
    },
    "video/jxsv": {
      source: "iana"
    },
    "video/mj2": {
      source: "iana",
      extensions: ["mj2", "mjp2"]
    },
    "video/mp1s": {
      source: "iana"
    },
    "video/mp2p": {
      source: "iana"
    },
    "video/mp2t": {
      source: "iana",
      extensions: ["ts"]
    },
    "video/mp4": {
      source: "iana",
      compressible: false,
      extensions: ["mp4", "mp4v", "mpg4"]
    },
    "video/mp4v-es": {
      source: "iana"
    },
    "video/mpeg": {
      source: "iana",
      compressible: false,
      extensions: ["mpeg", "mpg", "mpe", "m1v", "m2v"]
    },
    "video/mpeg4-generic": {
      source: "iana"
    },
    "video/mpv": {
      source: "iana"
    },
    "video/nv": {
      source: "iana"
    },
    "video/ogg": {
      source: "iana",
      compressible: false,
      extensions: ["ogv"]
    },
    "video/parityfec": {
      source: "iana"
    },
    "video/pointer": {
      source: "iana"
    },
    "video/quicktime": {
      source: "iana",
      compressible: false,
      extensions: ["qt", "mov"]
    },
    "video/raptorfec": {
      source: "iana"
    },
    "video/raw": {
      source: "iana"
    },
    "video/rtp-enc-aescm128": {
      source: "iana"
    },
    "video/rtploopback": {
      source: "iana"
    },
    "video/rtx": {
      source: "iana"
    },
    "video/scip": {
      source: "iana"
    },
    "video/smpte291": {
      source: "iana"
    },
    "video/smpte292m": {
      source: "iana"
    },
    "video/ulpfec": {
      source: "iana"
    },
    "video/vc1": {
      source: "iana"
    },
    "video/vc2": {
      source: "iana"
    },
    "video/vnd.cctv": {
      source: "iana"
    },
    "video/vnd.dece.hd": {
      source: "iana",
      extensions: ["uvh", "uvvh"]
    },
    "video/vnd.dece.mobile": {
      source: "iana",
      extensions: ["uvm", "uvvm"]
    },
    "video/vnd.dece.mp4": {
      source: "iana"
    },
    "video/vnd.dece.pd": {
      source: "iana",
      extensions: ["uvp", "uvvp"]
    },
    "video/vnd.dece.sd": {
      source: "iana",
      extensions: ["uvs", "uvvs"]
    },
    "video/vnd.dece.video": {
      source: "iana",
      extensions: ["uvv", "uvvv"]
    },
    "video/vnd.directv.mpeg": {
      source: "iana"
    },
    "video/vnd.directv.mpeg-tts": {
      source: "iana"
    },
    "video/vnd.dlna.mpeg-tts": {
      source: "iana"
    },
    "video/vnd.dvb.file": {
      source: "iana",
      extensions: ["dvb"]
    },
    "video/vnd.fvt": {
      source: "iana",
      extensions: ["fvt"]
    },
    "video/vnd.hns.video": {
      source: "iana"
    },
    "video/vnd.iptvforum.1dparityfec-1010": {
      source: "iana"
    },
    "video/vnd.iptvforum.1dparityfec-2005": {
      source: "iana"
    },
    "video/vnd.iptvforum.2dparityfec-1010": {
      source: "iana"
    },
    "video/vnd.iptvforum.2dparityfec-2005": {
      source: "iana"
    },
    "video/vnd.iptvforum.ttsavc": {
      source: "iana"
    },
    "video/vnd.iptvforum.ttsmpeg2": {
      source: "iana"
    },
    "video/vnd.motorola.video": {
      source: "iana"
    },
    "video/vnd.motorola.videop": {
      source: "iana"
    },
    "video/vnd.mpegurl": {
      source: "iana",
      extensions: ["mxu", "m4u"]
    },
    "video/vnd.ms-playready.media.pyv": {
      source: "iana",
      extensions: ["pyv"]
    },
    "video/vnd.nokia.interleaved-multimedia": {
      source: "iana"
    },
    "video/vnd.nokia.mp4vr": {
      source: "iana"
    },
    "video/vnd.nokia.videovoip": {
      source: "iana"
    },
    "video/vnd.objectvideo": {
      source: "iana"
    },
    "video/vnd.radgamettools.bink": {
      source: "iana"
    },
    "video/vnd.radgamettools.smacker": {
      source: "iana"
    },
    "video/vnd.sealed.mpeg1": {
      source: "iana"
    },
    "video/vnd.sealed.mpeg4": {
      source: "iana"
    },
    "video/vnd.sealed.swf": {
      source: "iana"
    },
    "video/vnd.sealedmedia.softseal.mov": {
      source: "iana"
    },
    "video/vnd.uvvu.mp4": {
      source: "iana",
      extensions: ["uvu", "uvvu"]
    },
    "video/vnd.vivo": {
      source: "iana",
      extensions: ["viv"]
    },
    "video/vnd.youtube.yt": {
      source: "iana"
    },
    "video/vp8": {
      source: "iana"
    },
    "video/vp9": {
      source: "iana"
    },
    "video/webm": {
      source: "apache",
      compressible: false,
      extensions: ["webm"]
    },
    "video/x-f4v": {
      source: "apache",
      extensions: ["f4v"]
    },
    "video/x-fli": {
      source: "apache",
      extensions: ["fli"]
    },
    "video/x-flv": {
      source: "apache",
      compressible: false,
      extensions: ["flv"]
    },
    "video/x-m4v": {
      source: "apache",
      extensions: ["m4v"]
    },
    "video/x-matroska": {
      source: "apache",
      compressible: false,
      extensions: ["mkv", "mk3d", "mks"]
    },
    "video/x-mng": {
      source: "apache",
      extensions: ["mng"]
    },
    "video/x-ms-asf": {
      source: "apache",
      extensions: ["asf", "asx"]
    },
    "video/x-ms-vob": {
      source: "apache",
      extensions: ["vob"]
    },
    "video/x-ms-wm": {
      source: "apache",
      extensions: ["wm"]
    },
    "video/x-ms-wmv": {
      source: "apache",
      compressible: false,
      extensions: ["wmv"]
    },
    "video/x-ms-wmx": {
      source: "apache",
      extensions: ["wmx"]
    },
    "video/x-ms-wvx": {
      source: "apache",
      extensions: ["wvx"]
    },
    "video/x-msvideo": {
      source: "apache",
      extensions: ["avi"]
    },
    "video/x-sgi-movie": {
      source: "apache",
      extensions: ["movie"]
    },
    "video/x-smv": {
      source: "apache",
      extensions: ["smv"]
    },
    "x-conference/x-cooltalk": {
      source: "apache",
      extensions: ["ice"]
    },
    "x-shader/x-fragment": {
      compressible: true
    },
    "x-shader/x-vertex": {
      compressible: true
    }
  };
});

// node_modules/mime-db/index.js
var require_mime_db = __commonJS((exports, module) => {
  /*!
   * mime-db
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015-2022 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = require_db();
});

// node_modules/mime-types/index.js
var require_mime_types = __commonJS((exports) => {
  var charset = function(type) {
    if (!type || typeof type !== "string") {
      return false;
    }
    var match = EXTRACT_TYPE_REGEXP.exec(type);
    var mime2 = match && db[match[1].toLowerCase()];
    if (mime2 && mime2.charset) {
      return mime2.charset;
    }
    if (match && TEXT_TYPE_REGEXP.test(match[1])) {
      return "UTF-8";
    }
    return false;
  };
  var contentType = function(str) {
    if (!str || typeof str !== "string") {
      return false;
    }
    var mime2 = str.indexOf("/") === -1 ? exports.lookup(str) : str;
    if (!mime2) {
      return false;
    }
    if (mime2.indexOf("charset") === -1) {
      var charset2 = exports.charset(mime2);
      if (charset2)
        mime2 += "; charset=" + charset2.toLowerCase();
    }
    return mime2;
  };
  var extension = function(type) {
    if (!type || typeof type !== "string") {
      return false;
    }
    var match = EXTRACT_TYPE_REGEXP.exec(type);
    var exts = match && exports.extensions[match[1].toLowerCase()];
    if (!exts || !exts.length) {
      return false;
    }
    return exts[0];
  };
  var lookup = function(path) {
    if (!path || typeof path !== "string") {
      return false;
    }
    var extension2 = extname("x." + path).toLowerCase().substr(1);
    if (!extension2) {
      return false;
    }
    return exports.types[extension2] || false;
  };
  var populateMaps = function(extensions, types) {
    var preference = ["nginx", "apache", undefined, "iana"];
    Object.keys(db).forEach(function forEachMimeType(type) {
      var mime2 = db[type];
      var exts = mime2.extensions;
      if (!exts || !exts.length) {
        return;
      }
      extensions[type] = exts;
      for (var i = 0;i < exts.length; i++) {
        var extension2 = exts[i];
        if (types[extension2]) {
          var from = preference.indexOf(db[types[extension2]].source);
          var to = preference.indexOf(mime2.source);
          if (types[extension2] !== "application/octet-stream" && (from > to || from === to && types[extension2].substr(0, 12) === "application/")) {
            continue;
          }
        }
        types[extension2] = type;
      }
    });
  };
  /*!
   * mime-types
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var db = require_mime_db();
  var extname = import.meta.require("path").extname;
  var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
  var TEXT_TYPE_REGEXP = /^text\//i;
  exports.charset = charset;
  exports.charsets = { lookup: charset };
  exports.contentType = contentType;
  exports.extension = extension;
  exports.extensions = Object.create(null);
  exports.lookup = lookup;
  exports.types = Object.create(null);
  populateMaps(exports.extensions, exports.types);
});

// node_modules/asynckit/lib/defer.js
var require_defer = __commonJS((exports, module) => {
  var defer = function(fn) {
    var nextTick = typeof setImmediate == "function" ? setImmediate : typeof process == "object" && typeof process.nextTick == "function" ? process.nextTick : null;
    if (nextTick) {
      nextTick(fn);
    } else {
      setTimeout(fn, 0);
    }
  };
  module.exports = defer;
});

// node_modules/asynckit/lib/async.js
var require_async = __commonJS((exports, module) => {
  var async = function(callback) {
    var isAsync = false;
    defer(function() {
      isAsync = true;
    });
    return function async_callback(err, result) {
      if (isAsync) {
        callback(err, result);
      } else {
        defer(function nextTick_callback() {
          callback(err, result);
        });
      }
    };
  };
  var defer = require_defer();
  module.exports = async;
});

// node_modules/asynckit/lib/abort.js
var require_abort = __commonJS((exports, module) => {
  var abort = function(state) {
    Object.keys(state.jobs).forEach(clean.bind(state));
    state.jobs = {};
  };
  var clean = function(key) {
    if (typeof this.jobs[key] == "function") {
      this.jobs[key]();
    }
  };
  module.exports = abort;
});

// node_modules/asynckit/lib/iterate.js
var require_iterate = __commonJS((exports, module) => {
  var iterate = function(list, iterator, state, callback) {
    var key = state["keyedList"] ? state["keyedList"][state.index] : state.index;
    state.jobs[key] = runJob(iterator, key, list[key], function(error, output) {
      if (!(key in state.jobs)) {
        return;
      }
      delete state.jobs[key];
      if (error) {
        abort(state);
      } else {
        state.results[key] = output;
      }
      callback(error, state.results);
    });
  };
  var runJob = function(iterator, key, item, callback) {
    var aborter;
    if (iterator.length == 2) {
      aborter = iterator(item, async(callback));
    } else {
      aborter = iterator(item, key, async(callback));
    }
    return aborter;
  };
  var async = require_async();
  var abort = require_abort();
  module.exports = iterate;
});

// node_modules/asynckit/lib/state.js
var require_state = __commonJS((exports, module) => {
  var state = function(list, sortMethod) {
    var isNamedList = !Array.isArray(list), initState = {
      index: 0,
      keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
      jobs: {},
      results: isNamedList ? {} : [],
      size: isNamedList ? Object.keys(list).length : list.length
    };
    if (sortMethod) {
      initState.keyedList.sort(isNamedList ? sortMethod : function(a, b) {
        return sortMethod(list[a], list[b]);
      });
    }
    return initState;
  };
  module.exports = state;
});

// node_modules/asynckit/lib/terminator.js
var require_terminator = __commonJS((exports, module) => {
  var terminator = function(callback) {
    if (!Object.keys(this.jobs).length) {
      return;
    }
    this.index = this.size;
    abort(this);
    async(callback)(null, this.results);
  };
  var abort = require_abort();
  var async = require_async();
  module.exports = terminator;
});

// node_modules/asynckit/parallel.js
var require_parallel = __commonJS((exports, module) => {
  var parallel = function(list, iterator, callback) {
    var state = initState(list);
    while (state.index < (state["keyedList"] || list).length) {
      iterate(list, iterator, state, function(error, result) {
        if (error) {
          callback(error, result);
          return;
        }
        if (Object.keys(state.jobs).length === 0) {
          callback(null, state.results);
          return;
        }
      });
      state.index++;
    }
    return terminator.bind(state, callback);
  };
  var iterate = require_iterate();
  var initState = require_state();
  var terminator = require_terminator();
  module.exports = parallel;
});

// node_modules/asynckit/serialOrdered.js
var require_serialOrdered = __commonJS((exports, module) => {
  var serialOrdered = function(list, iterator, sortMethod, callback) {
    var state = initState(list, sortMethod);
    iterate(list, iterator, state, function iteratorHandler(error, result) {
      if (error) {
        callback(error, result);
        return;
      }
      state.index++;
      if (state.index < (state["keyedList"] || list).length) {
        iterate(list, iterator, state, iteratorHandler);
        return;
      }
      callback(null, state.results);
    });
    return terminator.bind(state, callback);
  };
  var ascending = function(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  };
  var descending = function(a, b) {
    return -1 * ascending(a, b);
  };
  var iterate = require_iterate();
  var initState = require_state();
  var terminator = require_terminator();
  module.exports = serialOrdered;
  module.exports.ascending = ascending;
  module.exports.descending = descending;
});

// node_modules/asynckit/serial.js
var require_serial = __commonJS((exports, module) => {
  var serial = function(list, iterator, callback) {
    return serialOrdered(list, iterator, null, callback);
  };
  var serialOrdered = require_serialOrdered();
  module.exports = serial;
});

// node_modules/asynckit/index.js
var require_asynckit = __commonJS((exports, module) => {
  module.exports = {
    parallel: require_parallel(),
    serial: require_serial(),
    serialOrdered: require_serialOrdered()
  };
});

// node_modules/form-data/lib/populate.js
var require_populate = __commonJS((exports, module) => {
  module.exports = function(dst, src) {
    Object.keys(src).forEach(function(prop) {
      dst[prop] = dst[prop] || src[prop];
    });
    return dst;
  };
});

// node_modules/form-data/lib/form_data.js
var require_form_data = __commonJS((exports, module) => {
  var FormData2 = function(options) {
    if (!(this instanceof FormData2)) {
      return new FormData2(options);
    }
    this._overheadLength = 0;
    this._valueLength = 0;
    this._valuesToMeasure = [];
    CombinedStream.call(this);
    options = options || {};
    for (var option in options) {
      this[option] = options[option];
    }
  };
  var CombinedStream = require_combined_stream();
  var util = import.meta.require("util");
  var path = import.meta.require("path");
  var http = import.meta.require("http");
  var https = import.meta.require("https");
  var parseUrl = import.meta.require("url").parse;
  var fs = import.meta.require("fs");
  var Stream = import.meta.require("stream").Stream;
  var mime2 = require_mime_types();
  var asynckit = require_asynckit();
  var populate = require_populate();
  module.exports = FormData2;
  util.inherits(FormData2, CombinedStream);
  FormData2.LINE_BREAK = "\r\n";
  FormData2.DEFAULT_CONTENT_TYPE = "application/octet-stream";
  FormData2.prototype.append = function(field, value, options) {
    options = options || {};
    if (typeof options == "string") {
      options = { filename: options };
    }
    var append = CombinedStream.prototype.append.bind(this);
    if (typeof value == "number") {
      value = "" + value;
    }
    if (util.isArray(value)) {
      this._error(new Error("Arrays are not supported."));
      return;
    }
    var header = this._multiPartHeader(field, value, options);
    var footer = this._multiPartFooter();
    append(header);
    append(value);
    append(footer);
    this._trackLength(header, value, options);
  };
  FormData2.prototype._trackLength = function(header, value, options) {
    var valueLength = 0;
    if (options.knownLength != null) {
      valueLength += +options.knownLength;
    } else if (Buffer.isBuffer(value)) {
      valueLength = value.length;
    } else if (typeof value === "string") {
      valueLength = Buffer.byteLength(value);
    }
    this._valueLength += valueLength;
    this._overheadLength += Buffer.byteLength(header) + FormData2.LINE_BREAK.length;
    if (!value || !value.path && !(value.readable && value.hasOwnProperty("httpVersion")) && !(value instanceof Stream)) {
      return;
    }
    if (!options.knownLength) {
      this._valuesToMeasure.push(value);
    }
  };
  FormData2.prototype._lengthRetriever = function(value, callback) {
    if (value.hasOwnProperty("fd")) {
      if (value.end != null && value.end != Infinity && value.start != null) {
        callback(null, value.end + 1 - (value.start ? value.start : 0));
      } else {
        fs.stat(value.path, function(err, stat) {
          var fileSize;
          if (err) {
            callback(err);
            return;
          }
          fileSize = stat.size - (value.start ? value.start : 0);
          callback(null, fileSize);
        });
      }
    } else if (value.hasOwnProperty("httpVersion")) {
      callback(null, +value.headers["content-length"]);
    } else if (value.hasOwnProperty("httpModule")) {
      value.on("response", function(response) {
        value.pause();
        callback(null, +response.headers["content-length"]);
      });
      value.resume();
    } else {
      callback("Unknown stream");
    }
  };
  FormData2.prototype._multiPartHeader = function(field, value, options) {
    if (typeof options.header == "string") {
      return options.header;
    }
    var contentDisposition = this._getContentDisposition(value, options);
    var contentType = this._getContentType(value, options);
    var contents = "";
    var headers = {
      "Content-Disposition": ["form-data", 'name="' + field + '"'].concat(contentDisposition || []),
      "Content-Type": [].concat(contentType || [])
    };
    if (typeof options.header == "object") {
      populate(headers, options.header);
    }
    var header;
    for (var prop in headers) {
      if (!headers.hasOwnProperty(prop))
        continue;
      header = headers[prop];
      if (header == null) {
        continue;
      }
      if (!Array.isArray(header)) {
        header = [header];
      }
      if (header.length) {
        contents += prop + ": " + header.join("; ") + FormData2.LINE_BREAK;
      }
    }
    return "--" + this.getBoundary() + FormData2.LINE_BREAK + contents + FormData2.LINE_BREAK;
  };
  FormData2.prototype._getContentDisposition = function(value, options) {
    var filename, contentDisposition;
    if (typeof options.filepath === "string") {
      filename = path.normalize(options.filepath).replace(/\\/g, "/");
    } else if (options.filename || value.name || value.path) {
      filename = path.basename(options.filename || value.name || value.path);
    } else if (value.readable && value.hasOwnProperty("httpVersion")) {
      filename = path.basename(value.client._httpMessage.path || "");
    }
    if (filename) {
      contentDisposition = 'filename="' + filename + '"';
    }
    return contentDisposition;
  };
  FormData2.prototype._getContentType = function(value, options) {
    var contentType = options.contentType;
    if (!contentType && value.name) {
      contentType = mime2.lookup(value.name);
    }
    if (!contentType && value.path) {
      contentType = mime2.lookup(value.path);
    }
    if (!contentType && value.readable && value.hasOwnProperty("httpVersion")) {
      contentType = value.headers["content-type"];
    }
    if (!contentType && (options.filepath || options.filename)) {
      contentType = mime2.lookup(options.filepath || options.filename);
    }
    if (!contentType && typeof value == "object") {
      contentType = FormData2.DEFAULT_CONTENT_TYPE;
    }
    return contentType;
  };
  FormData2.prototype._multiPartFooter = function() {
    return function(next) {
      var footer = FormData2.LINE_BREAK;
      var lastPart = this._streams.length === 0;
      if (lastPart) {
        footer += this._lastBoundary();
      }
      next(footer);
    }.bind(this);
  };
  FormData2.prototype._lastBoundary = function() {
    return "--" + this.getBoundary() + "--" + FormData2.LINE_BREAK;
  };
  FormData2.prototype.getHeaders = function(userHeaders) {
    var header;
    var formHeaders = {
      "content-type": "multipart/form-data; boundary=" + this.getBoundary()
    };
    for (header in userHeaders) {
      if (userHeaders.hasOwnProperty(header)) {
        formHeaders[header.toLowerCase()] = userHeaders[header];
      }
    }
    return formHeaders;
  };
  FormData2.prototype.setBoundary = function(boundary) {
    this._boundary = boundary;
  };
  FormData2.prototype.getBoundary = function() {
    if (!this._boundary) {
      this._generateBoundary();
    }
    return this._boundary;
  };
  FormData2.prototype.getBuffer = function() {
    var dataBuffer = new Buffer.alloc(0);
    var boundary = this.getBoundary();
    for (var i = 0, len = this._streams.length;i < len; i++) {
      if (typeof this._streams[i] !== "function") {
        if (Buffer.isBuffer(this._streams[i])) {
          dataBuffer = Buffer.concat([dataBuffer, this._streams[i]]);
        } else {
          dataBuffer = Buffer.concat([dataBuffer, Buffer.from(this._streams[i])]);
        }
        if (typeof this._streams[i] !== "string" || this._streams[i].substring(2, boundary.length + 2) !== boundary) {
          dataBuffer = Buffer.concat([dataBuffer, Buffer.from(FormData2.LINE_BREAK)]);
        }
      }
    }
    return Buffer.concat([dataBuffer, Buffer.from(this._lastBoundary())]);
  };
  FormData2.prototype._generateBoundary = function() {
    var boundary = "--------------------------";
    for (var i = 0;i < 24; i++) {
      boundary += Math.floor(Math.random() * 10).toString(16);
    }
    this._boundary = boundary;
  };
  FormData2.prototype.getLengthSync = function() {
    var knownLength = this._overheadLength + this._valueLength;
    if (this._streams.length) {
      knownLength += this._lastBoundary().length;
    }
    if (!this.hasKnownLength()) {
      this._error(new Error("Cannot calculate proper length in synchronous way."));
    }
    return knownLength;
  };
  FormData2.prototype.hasKnownLength = function() {
    var hasKnownLength = true;
    if (this._valuesToMeasure.length) {
      hasKnownLength = false;
    }
    return hasKnownLength;
  };
  FormData2.prototype.getLength = function(cb) {
    var knownLength = this._overheadLength + this._valueLength;
    if (this._streams.length) {
      knownLength += this._lastBoundary().length;
    }
    if (!this._valuesToMeasure.length) {
      process.nextTick(cb.bind(this, null, knownLength));
      return;
    }
    asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {
      if (err) {
        cb(err);
        return;
      }
      values.forEach(function(length) {
        knownLength += length;
      });
      cb(null, knownLength);
    });
  };
  FormData2.prototype.submit = function(params, cb) {
    var request, options, defaults = { method: "post" };
    if (typeof params == "string") {
      params = parseUrl(params);
      options = populate({
        port: params.port,
        path: params.pathname,
        host: params.hostname,
        protocol: params.protocol
      }, defaults);
    } else {
      options = populate(params, defaults);
      if (!options.port) {
        options.port = options.protocol == "https:" ? 443 : 80;
      }
    }
    options.headers = this.getHeaders(params.headers);
    if (options.protocol == "https:") {
      request = https.request(options);
    } else {
      request = http.request(options);
    }
    this.getLength(function(err, length) {
      if (err && err !== "Unknown stream") {
        this._error(err);
        return;
      }
      if (length) {
        request.setHeader("Content-Length", length);
      }
      this.pipe(request);
      if (cb) {
        var onResponse;
        var callback = function(error, responce) {
          request.removeListener("error", callback);
          request.removeListener("response", onResponse);
          return cb.call(this, error, responce);
        };
        onResponse = callback.bind(this, null);
        request.on("error", callback);
        request.on("response", onResponse);
      }
    }.bind(this));
    return request;
  };
  FormData2.prototype._error = function(err) {
    if (!this.error) {
      this.error = err;
      this.pause();
      this.emit("error", err);
    }
  };
  FormData2.prototype.toString = function() {
    return "[object FormData]";
  };
});

// node_modules/bytes/index.js
var require_bytes = __commonJS((exports, module) => {
  var bytes = function(value, options) {
    if (typeof value === "string") {
      return parse(value);
    }
    if (typeof value === "number") {
      return format(value, options);
    }
    return null;
  };
  var format = function(value, options) {
    if (!Number.isFinite(value)) {
      return null;
    }
    var mag = Math.abs(value);
    var thousandsSeparator = options && options.thousandsSeparator || "";
    var unitSeparator = options && options.unitSeparator || "";
    var decimalPlaces = options && options.decimalPlaces !== undefined ? options.decimalPlaces : 2;
    var fixedDecimals = Boolean(options && options.fixedDecimals);
    var unit = options && options.unit || "";
    if (!unit || !map[unit.toLowerCase()]) {
      if (mag >= map.pb) {
        unit = "PB";
      } else if (mag >= map.tb) {
        unit = "TB";
      } else if (mag >= map.gb) {
        unit = "GB";
      } else if (mag >= map.mb) {
        unit = "MB";
      } else if (mag >= map.kb) {
        unit = "KB";
      } else {
        unit = "B";
      }
    }
    var val = value / map[unit.toLowerCase()];
    var str = val.toFixed(decimalPlaces);
    if (!fixedDecimals) {
      str = str.replace(formatDecimalsRegExp, "$1");
    }
    if (thousandsSeparator) {
      str = str.split(".").map(function(s, i) {
        return i === 0 ? s.replace(formatThousandsRegExp, thousandsSeparator) : s;
      }).join(".");
    }
    return str + unitSeparator + unit;
  };
  var parse = function(val) {
    if (typeof val === "number" && !isNaN(val)) {
      return val;
    }
    if (typeof val !== "string") {
      return null;
    }
    var results = parseRegExp.exec(val);
    var floatValue;
    var unit = "b";
    if (!results) {
      floatValue = parseInt(val, 10);
      unit = "b";
    } else {
      floatValue = parseFloat(results[1]);
      unit = results[4].toLowerCase();
    }
    if (isNaN(floatValue)) {
      return null;
    }
    return Math.floor(map[unit] * floatValue);
  };
  /*!
   * bytes
   * Copyright(c) 2012-2014 TJ Holowaychuk
   * Copyright(c) 2015 Jed Watson
   * MIT Licensed
   */
  module.exports = bytes;
  module.exports.format = format;
  module.exports.parse = parse;
  var formatThousandsRegExp = /\B(?=(\d{3})+(?!\d))/g;
  var formatDecimalsRegExp = /(?:\.0*|(\.[^0]+)0+)$/;
  var map = {
    b: 1,
    kb: 1 << 10,
    mb: 1 << 20,
    gb: 1 << 30,
    tb: Math.pow(1024, 4),
    pb: Math.pow(1024, 5)
  };
  var parseRegExp = /^((-|\+)?(\d+(?:\.\d+)?)) *(kb|mb|gb|tb|pb)$/i;
});

// node_modules/content-type/index.js
var require_content_type = __commonJS((exports) => {
  var format = function(obj) {
    if (!obj || typeof obj !== "object") {
      throw new TypeError("argument obj is required");
    }
    var parameters = obj.parameters;
    var type = obj.type;
    if (!type || !TYPE_REGEXP.test(type)) {
      throw new TypeError("invalid type");
    }
    var string = type;
    if (parameters && typeof parameters === "object") {
      var param;
      var params = Object.keys(parameters).sort();
      for (var i = 0;i < params.length; i++) {
        param = params[i];
        if (!TOKEN_REGEXP.test(param)) {
          throw new TypeError("invalid parameter name");
        }
        string += "; " + param + "=" + qstring(parameters[param]);
      }
    }
    return string;
  };
  var parse = function(string) {
    if (!string) {
      throw new TypeError("argument string is required");
    }
    var header = typeof string === "object" ? getcontenttype(string) : string;
    if (typeof header !== "string") {
      throw new TypeError("argument string is required to be a string");
    }
    var index = header.indexOf(";");
    var type = index !== -1 ? header.slice(0, index).trim() : header.trim();
    if (!TYPE_REGEXP.test(type)) {
      throw new TypeError("invalid media type");
    }
    var obj = new ContentType(type.toLowerCase());
    if (index !== -1) {
      var key;
      var match;
      var value;
      PARAM_REGEXP.lastIndex = index;
      while (match = PARAM_REGEXP.exec(header)) {
        if (match.index !== index) {
          throw new TypeError("invalid parameter format");
        }
        index += match[0].length;
        key = match[1].toLowerCase();
        value = match[2];
        if (value.charCodeAt(0) === 34) {
          value = value.slice(1, -1);
          if (value.indexOf("\\") !== -1) {
            value = value.replace(QESC_REGEXP, "$1");
          }
        }
        obj.parameters[key] = value;
      }
      if (index !== header.length) {
        throw new TypeError("invalid parameter format");
      }
    }
    return obj;
  };
  var getcontenttype = function(obj) {
    var header;
    if (typeof obj.getHeader === "function") {
      header = obj.getHeader("content-type");
    } else if (typeof obj.headers === "object") {
      header = obj.headers && obj.headers["content-type"];
    }
    if (typeof header !== "string") {
      throw new TypeError("content-type header is missing from object");
    }
    return header;
  };
  var qstring = function(val) {
    var str = String(val);
    if (TOKEN_REGEXP.test(str)) {
      return str;
    }
    if (str.length > 0 && !TEXT_REGEXP.test(str)) {
      throw new TypeError("invalid parameter value");
    }
    return '"' + str.replace(QUOTE_REGEXP, "\\$1") + '"';
  };
  var ContentType = function(type) {
    this.parameters = Object.create(null);
    this.type = type;
  };
  /*!
   * content-type
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var PARAM_REGEXP = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *("(?:[\u000b\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u000b\u0020-\u00ff])*"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g;
  var TEXT_REGEXP = /^[\u000b\u0020-\u007e\u0080-\u00ff]+$/;
  var TOKEN_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;
  var QESC_REGEXP = /\\([\u000b\u0020-\u00ff])/g;
  var QUOTE_REGEXP = /([\\"])/g;
  var TYPE_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;
  exports.format = format;
  exports.parse = parse;
});

// node_modules/depd/index.js
var require_depd = __commonJS((exports, module) => {
  var containsNamespace = function(str, namespace) {
    var vals = str.split(/[ ,]+/);
    var ns = String(namespace).toLowerCase();
    for (var i = 0;i < vals.length; i++) {
      var val = vals[i];
      if (val && (val === "*" || val.toLowerCase() === ns)) {
        return true;
      }
    }
    return false;
  };
  var convertDataDescriptorToAccessor = function(obj, prop, message) {
    var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
    var value = descriptor.value;
    descriptor.get = function getter() {
      return value;
    };
    if (descriptor.writable) {
      descriptor.set = function setter(val) {
        return value = val;
      };
    }
    delete descriptor.value;
    delete descriptor.writable;
    Object.defineProperty(obj, prop, descriptor);
    return descriptor;
  };
  var createArgumentsString = function(arity) {
    var str = "";
    for (var i = 0;i < arity; i++) {
      str += ", arg" + i;
    }
    return str.substr(2);
  };
  var createStackString = function(stack) {
    var str = this.name + ": " + this.namespace;
    if (this.message) {
      str += " deprecated " + this.message;
    }
    for (var i = 0;i < stack.length; i++) {
      str += "\n    at " + stack[i].toString();
    }
    return str;
  };
  var depd = function(namespace) {
    if (!namespace) {
      throw new TypeError("argument namespace is required");
    }
    var stack = getStack();
    var site = callSiteLocation(stack[1]);
    var file = site[0];
    function deprecate(message) {
      log.call(deprecate, message);
    }
    deprecate._file = file;
    deprecate._ignored = isignored(namespace);
    deprecate._namespace = namespace;
    deprecate._traced = istraced(namespace);
    deprecate._warned = Object.create(null);
    deprecate.function = wrapfunction;
    deprecate.property = wrapproperty;
    return deprecate;
  };
  var eehaslisteners = function(emitter, type) {
    var count = typeof emitter.listenerCount !== "function" ? emitter.listeners(type).length : emitter.listenerCount(type);
    return count > 0;
  };
  var isignored = function(namespace) {
    if (process.noDeprecation) {
      return true;
    }
    var str = process.env.NO_DEPRECATION || "";
    return containsNamespace(str, namespace);
  };
  var istraced = function(namespace) {
    if (process.traceDeprecation) {
      return true;
    }
    var str = process.env.TRACE_DEPRECATION || "";
    return containsNamespace(str, namespace);
  };
  var log = function(message, site) {
    var haslisteners = eehaslisteners(process, "deprecation");
    if (!haslisteners && this._ignored) {
      return;
    }
    var caller;
    var callFile;
    var callSite;
    var depSite;
    var i = 0;
    var seen = false;
    var stack = getStack();
    var file = this._file;
    if (site) {
      depSite = site;
      callSite = callSiteLocation(stack[1]);
      callSite.name = depSite.name;
      file = callSite[0];
    } else {
      i = 2;
      depSite = callSiteLocation(stack[i]);
      callSite = depSite;
    }
    for (;i < stack.length; i++) {
      caller = callSiteLocation(stack[i]);
      callFile = caller[0];
      if (callFile === file) {
        seen = true;
      } else if (callFile === this._file) {
        file = this._file;
      } else if (seen) {
        break;
      }
    }
    var key = caller ? depSite.join(":") + "__" + caller.join(":") : undefined;
    if (key !== undefined && key in this._warned) {
      return;
    }
    this._warned[key] = true;
    var msg = message;
    if (!msg) {
      msg = callSite === depSite || !callSite.name ? defaultMessage(depSite) : defaultMessage(callSite);
    }
    if (haslisteners) {
      var err = DeprecationError(this._namespace, msg, stack.slice(i));
      process.emit("deprecation", err);
      return;
    }
    var format = process.stderr.isTTY ? formatColor : formatPlain;
    var output = format.call(this, msg, caller, stack.slice(i));
    process.stderr.write(output + "\n", "utf8");
  };
  var callSiteLocation = function(callSite) {
    var file = callSite.getFileName() || "<anonymous>";
    var line = callSite.getLineNumber();
    var colm = callSite.getColumnNumber();
    if (callSite.isEval()) {
      file = callSite.getEvalOrigin() + ", " + file;
    }
    var site = [file, line, colm];
    site.callSite = callSite;
    site.name = callSite.getFunctionName();
    return site;
  };
  var defaultMessage = function(site) {
    var callSite = site.callSite;
    var funcName = site.name;
    if (!funcName) {
      funcName = "<anonymous@" + formatLocation(site) + ">";
    }
    var context = callSite.getThis();
    var typeName = context && callSite.getTypeName();
    if (typeName === "Object") {
      typeName = undefined;
    }
    if (typeName === "Function") {
      typeName = context.name || typeName;
    }
    return typeName && callSite.getMethodName() ? typeName + "." + funcName : funcName;
  };
  var formatPlain = function(msg, caller, stack) {
    var timestamp = new Date().toUTCString();
    var formatted = timestamp + " " + this._namespace + " deprecated " + msg;
    if (this._traced) {
      for (var i = 0;i < stack.length; i++) {
        formatted += "\n    at " + stack[i].toString();
      }
      return formatted;
    }
    if (caller) {
      formatted += " at " + formatLocation(caller);
    }
    return formatted;
  };
  var formatColor = function(msg, caller, stack) {
    var formatted = "\x1B[36;1m" + this._namespace + "\x1B[22;39m" + " \x1B[33;1mdeprecated\x1B[22;39m" + " \x1B[0m" + msg + "\x1B[39m";
    if (this._traced) {
      for (var i = 0;i < stack.length; i++) {
        formatted += `
    \x1B[36mat ` + stack[i].toString() + "\x1B[39m";
      }
      return formatted;
    }
    if (caller) {
      formatted += " \x1B[36m" + formatLocation(caller) + "\x1B[39m";
    }
    return formatted;
  };
  var formatLocation = function(callSite) {
    return relative(basePath, callSite[0]) + ":" + callSite[1] + ":" + callSite[2];
  };
  var getStack = function() {
    var limit = Error.stackTraceLimit;
    var obj = {};
    var prep = Error.prepareStackTrace;
    Error.prepareStackTrace = prepareObjectStackTrace;
    Error.stackTraceLimit = Math.max(10, limit);
    Error.captureStackTrace(obj);
    var stack = obj.stack.slice(1);
    Error.prepareStackTrace = prep;
    Error.stackTraceLimit = limit;
    return stack;
  };
  var prepareObjectStackTrace = function(obj, stack) {
    return stack;
  };
  var wrapfunction = function(fn, message) {
    if (typeof fn !== "function") {
      throw new TypeError("argument fn must be a function");
    }
    var args = createArgumentsString(fn.length);
    var stack = getStack();
    var site = callSiteLocation(stack[1]);
    site.name = fn.name;
    var deprecatedfn = new Function("fn", "log", "deprecate", "message", "site", '"use strict"\nreturn function (' + args + ") {log.call(deprecate, message, site)\nreturn fn.apply(this, arguments)\n}")(fn, log, this, message, site);
    return deprecatedfn;
  };
  var wrapproperty = function(obj, prop, message) {
    if (!obj || typeof obj !== "object" && typeof obj !== "function") {
      throw new TypeError("argument obj must be object");
    }
    var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
    if (!descriptor) {
      throw new TypeError("must call property on owner object");
    }
    if (!descriptor.configurable) {
      throw new TypeError("property must be configurable");
    }
    var deprecate = this;
    var stack = getStack();
    var site = callSiteLocation(stack[1]);
    site.name = prop;
    if ("value" in descriptor) {
      descriptor = convertDataDescriptorToAccessor(obj, prop, message);
    }
    var get = descriptor.get;
    var set = descriptor.set;
    if (typeof get === "function") {
      descriptor.get = function getter() {
        log.call(deprecate, message, site);
        return get.apply(this, arguments);
      };
    }
    if (typeof set === "function") {
      descriptor.set = function setter() {
        log.call(deprecate, message, site);
        return set.apply(this, arguments);
      };
    }
    Object.defineProperty(obj, prop, descriptor);
  };
  var DeprecationError = function(namespace, message, stack) {
    var error = new Error;
    var stackString;
    Object.defineProperty(error, "constructor", {
      value: DeprecationError
    });
    Object.defineProperty(error, "message", {
      configurable: true,
      enumerable: false,
      value: message,
      writable: true
    });
    Object.defineProperty(error, "name", {
      enumerable: false,
      configurable: true,
      value: "DeprecationError",
      writable: true
    });
    Object.defineProperty(error, "namespace", {
      configurable: true,
      enumerable: false,
      value: namespace,
      writable: true
    });
    Object.defineProperty(error, "stack", {
      configurable: true,
      enumerable: false,
      get: function() {
        if (stackString !== undefined) {
          return stackString;
        }
        return stackString = createStackString.call(this, stack);
      },
      set: function setter(val) {
        stackString = val;
      }
    });
    return error;
  };
  /*!
   * depd
   * Copyright(c) 2014-2018 Douglas Christopher Wilson
   * MIT Licensed
   */
  var relative = import.meta.require("path").relative;
  module.exports = depd;
  var basePath = process.cwd();
});

// node_modules/setprototypeof/index.js
var require_setprototypeof = __commonJS((exports, module) => {
  var setProtoOf = function(obj, proto) {
    obj.__proto__ = proto;
    return obj;
  };
  var mixinProperties = function(obj, proto) {
    for (var prop in proto) {
      if (!Object.prototype.hasOwnProperty.call(obj, prop)) {
        obj[prop] = proto[prop];
      }
    }
    return obj;
  };
  module.exports = Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties);
});

// node_modules/statuses/codes.json
var require_codes = __commonJS((exports, module) => {
  module.exports = {
    "100": "Continue",
    "101": "Switching Protocols",
    "102": "Processing",
    "103": "Early Hints",
    "200": "OK",
    "201": "Created",
    "202": "Accepted",
    "203": "Non-Authoritative Information",
    "204": "No Content",
    "205": "Reset Content",
    "206": "Partial Content",
    "207": "Multi-Status",
    "208": "Already Reported",
    "226": "IM Used",
    "300": "Multiple Choices",
    "301": "Moved Permanently",
    "302": "Found",
    "303": "See Other",
    "304": "Not Modified",
    "305": "Use Proxy",
    "307": "Temporary Redirect",
    "308": "Permanent Redirect",
    "400": "Bad Request",
    "401": "Unauthorized",
    "402": "Payment Required",
    "403": "Forbidden",
    "404": "Not Found",
    "405": "Method Not Allowed",
    "406": "Not Acceptable",
    "407": "Proxy Authentication Required",
    "408": "Request Timeout",
    "409": "Conflict",
    "410": "Gone",
    "411": "Length Required",
    "412": "Precondition Failed",
    "413": "Payload Too Large",
    "414": "URI Too Long",
    "415": "Unsupported Media Type",
    "416": "Range Not Satisfiable",
    "417": "Expectation Failed",
    "418": "I'm a Teapot",
    "421": "Misdirected Request",
    "422": "Unprocessable Entity",
    "423": "Locked",
    "424": "Failed Dependency",
    "425": "Too Early",
    "426": "Upgrade Required",
    "428": "Precondition Required",
    "429": "Too Many Requests",
    "431": "Request Header Fields Too Large",
    "451": "Unavailable For Legal Reasons",
    "500": "Internal Server Error",
    "501": "Not Implemented",
    "502": "Bad Gateway",
    "503": "Service Unavailable",
    "504": "Gateway Timeout",
    "505": "HTTP Version Not Supported",
    "506": "Variant Also Negotiates",
    "507": "Insufficient Storage",
    "508": "Loop Detected",
    "509": "Bandwidth Limit Exceeded",
    "510": "Not Extended",
    "511": "Network Authentication Required"
  };
});

// node_modules/statuses/index.js
var require_statuses = __commonJS((exports, module) => {
  var createMessageToStatusCodeMap = function(codes2) {
    var map = {};
    Object.keys(codes2).forEach(function forEachCode(code) {
      var message = codes2[code];
      var status2 = Number(code);
      map[message.toLowerCase()] = status2;
    });
    return map;
  };
  var createStatusCodeList = function(codes2) {
    return Object.keys(codes2).map(function mapCode(code) {
      return Number(code);
    });
  };
  var getStatusCode = function(message) {
    var msg = message.toLowerCase();
    if (!Object.prototype.hasOwnProperty.call(status.code, msg)) {
      throw new Error('invalid status message: "' + message + '"');
    }
    return status.code[msg];
  };
  var getStatusMessage = function(code) {
    if (!Object.prototype.hasOwnProperty.call(status.message, code)) {
      throw new Error("invalid status code: " + code);
    }
    return status.message[code];
  };
  var status = function(code) {
    if (typeof code === "number") {
      return getStatusMessage(code);
    }
    if (typeof code !== "string") {
      throw new TypeError("code must be a number or string");
    }
    var n = parseInt(code, 10);
    if (!isNaN(n)) {
      return getStatusMessage(n);
    }
    return getStatusCode(code);
  };
  /*!
   * statuses
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  var codes = require_codes();
  module.exports = status;
  status.message = codes;
  status.code = createMessageToStatusCodeMap(codes);
  status.codes = createStatusCodeList(codes);
  status.redirect = {
    300: true,
    301: true,
    302: true,
    303: true,
    305: true,
    307: true,
    308: true
  };
  status.empty = {
    204: true,
    205: true,
    304: true
  };
  status.retry = {
    502: true,
    503: true,
    504: true
  };
});

// node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS((exports, module) => {
  if (typeof Object.create === "function") {
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor;
        ctor.prototype.constructor = ctor;
      }
    };
  }
});

// node_modules/inherits/inherits.js
var require_inherits = __commonJS((exports, module) => {
  try {
    util = import.meta.require("util");
    if (typeof util.inherits !== "function")
      throw "";
    module.exports = util.inherits;
  } catch (e) {
    module.exports = require_inherits_browser();
  }
  var util;
});

// node_modules/toidentifier/index.js
var require_toidentifier = __commonJS((exports, module) => {
  var toIdentifier = function(str) {
    return str.split(" ").map(function(token) {
      return token.slice(0, 1).toUpperCase() + token.slice(1);
    }).join("").replace(/[^ _0-9a-z]/gi, "");
  };
  /*!
   * toidentifier
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = toIdentifier;
});

// node_modules/http-errors/index.js
var require_http_errors = __commonJS((exports, module) => {
  var codeClass = function(status) {
    return Number(String(status).charAt(0) + "00");
  };
  var createError = function() {
    var err;
    var msg;
    var status = 500;
    var props = {};
    for (var i = 0;i < arguments.length; i++) {
      var arg = arguments[i];
      var type = typeof arg;
      if (type === "object" && arg instanceof Error) {
        err = arg;
        status = err.status || err.statusCode || status;
      } else if (type === "number" && i === 0) {
        status = arg;
      } else if (type === "string") {
        msg = arg;
      } else if (type === "object") {
        props = arg;
      } else {
        throw new TypeError("argument #" + (i + 1) + " unsupported type " + type);
      }
    }
    if (typeof status === "number" && (status < 400 || status >= 600)) {
      deprecate("non-error status code; use only 4xx or 5xx status codes");
    }
    if (typeof status !== "number" || !statuses.message[status] && (status < 400 || status >= 600)) {
      status = 500;
    }
    var HttpError = createError[status] || createError[codeClass(status)];
    if (!err) {
      err = HttpError ? new HttpError(msg) : new Error(msg || statuses.message[status]);
      Error.captureStackTrace(err, createError);
    }
    if (!HttpError || !(err instanceof HttpError) || err.status !== status) {
      err.expose = status < 500;
      err.status = err.statusCode = status;
    }
    for (var key in props) {
      if (key !== "status" && key !== "statusCode") {
        err[key] = props[key];
      }
    }
    return err;
  };
  var createHttpErrorConstructor = function() {
    function HttpError() {
      throw new TypeError("cannot construct abstract class");
    }
    inherits(HttpError, Error);
    return HttpError;
  };
  var createClientErrorConstructor = function(HttpError, name, code) {
    var className = toClassName(name);
    function ClientError(message) {
      var msg = message != null ? message : statuses.message[code];
      var err = new Error(msg);
      Error.captureStackTrace(err, ClientError);
      setPrototypeOf(err, ClientError.prototype);
      Object.defineProperty(err, "message", {
        enumerable: true,
        configurable: true,
        value: msg,
        writable: true
      });
      Object.defineProperty(err, "name", {
        enumerable: false,
        configurable: true,
        value: className,
        writable: true
      });
      return err;
    }
    inherits(ClientError, HttpError);
    nameFunc(ClientError, className);
    ClientError.prototype.status = code;
    ClientError.prototype.statusCode = code;
    ClientError.prototype.expose = true;
    return ClientError;
  };
  var createIsHttpErrorFunction = function(HttpError) {
    return function isHttpError(val) {
      if (!val || typeof val !== "object") {
        return false;
      }
      if (val instanceof HttpError) {
        return true;
      }
      return val instanceof Error && typeof val.expose === "boolean" && typeof val.statusCode === "number" && val.status === val.statusCode;
    };
  };
  var createServerErrorConstructor = function(HttpError, name, code) {
    var className = toClassName(name);
    function ServerError(message) {
      var msg = message != null ? message : statuses.message[code];
      var err = new Error(msg);
      Error.captureStackTrace(err, ServerError);
      setPrototypeOf(err, ServerError.prototype);
      Object.defineProperty(err, "message", {
        enumerable: true,
        configurable: true,
        value: msg,
        writable: true
      });
      Object.defineProperty(err, "name", {
        enumerable: false,
        configurable: true,
        value: className,
        writable: true
      });
      return err;
    }
    inherits(ServerError, HttpError);
    nameFunc(ServerError, className);
    ServerError.prototype.status = code;
    ServerError.prototype.statusCode = code;
    ServerError.prototype.expose = false;
    return ServerError;
  };
  var nameFunc = function(func, name) {
    var desc = Object.getOwnPropertyDescriptor(func, "name");
    if (desc && desc.configurable) {
      desc.value = name;
      Object.defineProperty(func, "name", desc);
    }
  };
  var populateConstructorExports = function(exports2, codes, HttpError) {
    codes.forEach(function forEachCode(code) {
      var CodeError;
      var name = toIdentifier(statuses.message[code]);
      switch (codeClass(code)) {
        case 400:
          CodeError = createClientErrorConstructor(HttpError, name, code);
          break;
        case 500:
          CodeError = createServerErrorConstructor(HttpError, name, code);
          break;
      }
      if (CodeError) {
        exports2[code] = CodeError;
        exports2[name] = CodeError;
      }
    });
  };
  var toClassName = function(name) {
    return name.substr(-5) !== "Error" ? name + "Error" : name;
  };
  /*!
   * http-errors
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  var deprecate = require_depd()("http-errors");
  var setPrototypeOf = require_setprototypeof();
  var statuses = require_statuses();
  var inherits = require_inherits();
  var toIdentifier = require_toidentifier();
  module.exports = createError;
  module.exports.HttpError = createHttpErrorConstructor();
  module.exports.isHttpError = createIsHttpErrorFunction(module.exports.HttpError);
  populateConstructorExports(module.exports, statuses.codes, module.exports.HttpError);
});

// node_modules/body-parser/node_modules/debug/node_modules/ms/index.js
var require_ms = __commonJS((exports, module) => {
  var parse = function(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch (type) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return n * y;
      case "days":
      case "day":
      case "d":
        return n * d;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return n * h;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return n * m;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return n * s;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return n;
      default:
        return;
    }
  };
  var fmtShort = function(ms) {
    if (ms >= d) {
      return Math.round(ms / d) + "d";
    }
    if (ms >= h) {
      return Math.round(ms / h) + "h";
    }
    if (ms >= m) {
      return Math.round(ms / m) + "m";
    }
    if (ms >= s) {
      return Math.round(ms / s) + "s";
    }
    return ms + "ms";
  };
  var fmtLong = function(ms) {
    return plural(ms, d, "day") || plural(ms, h, "hour") || plural(ms, m, "minute") || plural(ms, s, "second") || ms + " ms";
  };
  var plural = function(ms, n, name) {
    if (ms < n) {
      return;
    }
    if (ms < n * 1.5) {
      return Math.floor(ms / n) + " " + name;
    }
    return Math.ceil(ms / n) + " " + name + "s";
  };
  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var y = d * 365.25;
  module.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
      return parse(val);
    } else if (type === "number" && isNaN(val) === false) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
  };
});

// node_modules/body-parser/node_modules/debug/src/debug.js
var require_debug = __commonJS((exports, module) => {
  var selectColor = function(namespace) {
    var hash = 0, i;
    for (i in namespace) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0;
    }
    return exports.colors[Math.abs(hash) % exports.colors.length];
  };
  var createDebug = function(namespace) {
    function debug2() {
      if (!debug2.enabled)
        return;
      var self2 = debug2;
      var curr = +new Date;
      var ms = curr - (prevTime || curr);
      self2.diff = ms;
      self2.prev = prevTime;
      self2.curr = curr;
      prevTime = curr;
      var args = new Array(arguments.length);
      for (var i = 0;i < args.length; i++) {
        args[i] = arguments[i];
      }
      args[0] = exports.coerce(args[0]);
      if (typeof args[0] !== "string") {
        args.unshift("%O");
      }
      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
        if (match === "%%")
          return match;
        index++;
        var formatter = exports.formatters[format];
        if (typeof formatter === "function") {
          var val = args[index];
          match = formatter.call(self2, val);
          args.splice(index, 1);
          index--;
        }
        return match;
      });
      exports.formatArgs.call(self2, args);
      var logFn = debug2.log || exports.log || console.log.bind(console);
      logFn.apply(self2, args);
    }
    debug2.namespace = namespace;
    debug2.enabled = exports.enabled(namespace);
    debug2.useColors = exports.useColors();
    debug2.color = selectColor(namespace);
    if (typeof exports.init === "function") {
      exports.init(debug2);
    }
    return debug2;
  };
  var enable = function(namespaces) {
    exports.save(namespaces);
    exports.names = [];
    exports.skips = [];
    var split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
    var len = split.length;
    for (var i = 0;i < len; i++) {
      if (!split[i])
        continue;
      namespaces = split[i].replace(/\*/g, ".*?");
      if (namespaces[0] === "-") {
        exports.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
      } else {
        exports.names.push(new RegExp("^" + namespaces + "$"));
      }
    }
  };
  var disable = function() {
    exports.enable("");
  };
  var enabled = function(name) {
    var i, len;
    for (i = 0, len = exports.skips.length;i < len; i++) {
      if (exports.skips[i].test(name)) {
        return false;
      }
    }
    for (i = 0, len = exports.names.length;i < len; i++) {
      if (exports.names[i].test(name)) {
        return true;
      }
    }
    return false;
  };
  var coerce = function(val) {
    if (val instanceof Error)
      return val.stack || val.message;
    return val;
  };
  exports = module.exports = createDebug.debug = createDebug["default"] = createDebug;
  exports.coerce = coerce;
  exports.disable = disable;
  exports.enable = enable;
  exports.enabled = enabled;
  exports.humanize = require_ms();
  exports.names = [];
  exports.skips = [];
  exports.formatters = {};
  var prevTime;
});

// node_modules/body-parser/node_modules/debug/src/browser.js
var require_browser = __commonJS((exports, module) => {
  var useColors = function() {
    if (typeof window !== "undefined" && window.process && window.process.type === "renderer") {
      return true;
    }
    return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  };
  var formatArgs = function(args) {
    var useColors2 = this.useColors;
    args[0] = (useColors2 ? "%c" : "") + this.namespace + (useColors2 ? " %c" : " ") + args[0] + (useColors2 ? "%c " : " ") + "+" + exports.humanize(this.diff);
    if (!useColors2)
      return;
    var c = "color: " + this.color;
    args.splice(1, 0, c, "color: inherit");
    var index = 0;
    var lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, function(match) {
      if (match === "%%")
        return;
      index++;
      if (match === "%c") {
        lastC = index;
      }
    });
    args.splice(lastC, 0, c);
  };
  var log = function() {
    return typeof console === "object" && console.log && Function.prototype.apply.call(console.log, console, arguments);
  };
  var save = function(namespaces) {
    try {
      if (namespaces == null) {
        exports.storage.removeItem("debug");
      } else {
        exports.storage.debug = namespaces;
      }
    } catch (e) {
    }
  };
  var load = function() {
    var r;
    try {
      r = exports.storage.debug;
    } catch (e) {
    }
    if (!r && typeof process !== "undefined" && "env" in process) {
      r = process.env.DEBUG;
    }
    return r;
  };
  var localstorage = function() {
    try {
      return window.localStorage;
    } catch (e) {
    }
  };
  exports = module.exports = require_debug();
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = typeof chrome != "undefined" && typeof chrome.storage != "undefined" ? chrome.storage.local : localstorage();
  exports.colors = [
    "lightseagreen",
    "forestgreen",
    "goldenrod",
    "dodgerblue",
    "darkorchid",
    "crimson"
  ];
  exports.formatters.j = function(v) {
    try {
      return JSON.stringify(v);
    } catch (err) {
      return "[UnexpectedJSONParseError]: " + err.message;
    }
  };
  exports.enable(load());
});

// node_modules/body-parser/node_modules/debug/src/node.js
var require_node = __commonJS((exports, module) => {
  var useColors = function() {
    return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(fd);
  };
  var formatArgs = function(args) {
    var name = this.namespace;
    var useColors2 = this.useColors;
    if (useColors2) {
      var c = this.color;
      var prefix = "  \x1B[3" + c + ";1m" + name + " " + "\x1B[0m";
      args[0] = prefix + args[0].split("\n").join("\n" + prefix);
      args.push("\x1B[3" + c + "m+" + exports.humanize(this.diff) + "\x1B[0m");
    } else {
      args[0] = new Date().toUTCString() + " " + name + " " + args[0];
    }
  };
  var log = function() {
    return stream.write(util.format.apply(util, arguments) + "\n");
  };
  var save = function(namespaces) {
    if (namespaces == null) {
      delete process.env.DEBUG;
    } else {
      process.env.DEBUG = namespaces;
    }
  };
  var load = function() {
    return process.env.DEBUG;
  };
  var createWritableStdioStream = function(fd2) {
    var stream2;
    var tty_wrap = process.binding("tty_wrap");
    switch (tty_wrap.guessHandleType(fd2)) {
      case "TTY":
        stream2 = new tty.WriteStream(fd2);
        stream2._type = "tty";
        if (stream2._handle && stream2._handle.unref) {
          stream2._handle.unref();
        }
        break;
      case "FILE":
        var fs = import.meta.require("fs");
        stream2 = new fs.SyncWriteStream(fd2, { autoClose: false });
        stream2._type = "fs";
        break;
      case "PIPE":
      case "TCP":
        var net = import.meta.require("net");
        stream2 = new net.Socket({
          fd: fd2,
          readable: false,
          writable: true
        });
        stream2.readable = false;
        stream2.read = null;
        stream2._type = "pipe";
        if (stream2._handle && stream2._handle.unref) {
          stream2._handle.unref();
        }
        break;
      default:
        throw new Error("Implement me. Unknown stream file type!");
    }
    stream2.fd = fd2;
    stream2._isStdio = true;
    return stream2;
  };
  var init = function(debug2) {
    debug2.inspectOpts = {};
    var keys = Object.keys(exports.inspectOpts);
    for (var i = 0;i < keys.length; i++) {
      debug2.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
  };
  var tty = import.meta.require("tty");
  var util = import.meta.require("util");
  exports = module.exports = require_debug();
  exports.init = init;
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.colors = [6, 2, 3, 4, 5, 1];
  exports.inspectOpts = Object.keys(process.env).filter(function(key) {
    return /^debug_/i.test(key);
  }).reduce(function(obj, key) {
    var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function(_, k) {
      return k.toUpperCase();
    });
    var val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val))
      val = true;
    else if (/^(no|off|false|disabled)$/i.test(val))
      val = false;
    else if (val === "null")
      val = null;
    else
      val = Number(val);
    obj[prop] = val;
    return obj;
  }, {});
  var fd = parseInt(process.env.DEBUG_FD, 10) || 2;
  if (fd !== 1 && fd !== 2) {
    util.deprecate(function() {
    }, "except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)")();
  }
  var stream = fd === 1 ? process.stdout : fd === 2 ? process.stderr : createWritableStdioStream(fd);
  exports.formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts).split("\n").map(function(str) {
      return str.trim();
    }).join(" ");
  };
  exports.formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts);
  };
  exports.enable(load());
});

// node_modules/body-parser/node_modules/debug/src/index.js
var require_src = __commonJS((exports, module) => {
  if (typeof process !== "undefined" && process.type === "renderer") {
    module.exports = require_browser();
  } else {
    module.exports = require_node();
  }
});

// node_modules/destroy/index.js
var require_destroy = __commonJS((exports, module) => {
  var destroy = function(stream, suppress) {
    if (isFsReadStream(stream)) {
      destroyReadStream(stream);
    } else if (isZlibStream(stream)) {
      destroyZlibStream(stream);
    } else if (hasDestroy(stream)) {
      stream.destroy();
    }
    if (isEventEmitter(stream) && suppress) {
      stream.removeAllListeners("error");
      stream.addListener("error", noop);
    }
    return stream;
  };
  var destroyReadStream = function(stream) {
    stream.destroy();
    if (typeof stream.close === "function") {
      stream.on("open", onOpenClose);
    }
  };
  var closeZlibStream = function(stream) {
    if (stream._hadError === true) {
      var prop = stream._binding === null ? "_binding" : "_handle";
      stream[prop] = {
        close: function() {
          this[prop] = null;
        }
      };
    }
    stream.close();
  };
  var destroyZlibStream = function(stream) {
    if (typeof stream.destroy === "function") {
      if (stream._binding) {
        stream.destroy();
        if (stream._processing) {
          stream._needDrain = true;
          stream.once("drain", onDrainClearBinding);
        } else {
          stream._binding.clear();
        }
      } else if (stream._destroy && stream._destroy !== Stream.Transform.prototype._destroy) {
        stream.destroy();
      } else if (stream._destroy && typeof stream.close === "function") {
        stream.destroyed = true;
        stream.close();
      } else {
        stream.destroy();
      }
    } else if (typeof stream.close === "function") {
      closeZlibStream(stream);
    }
  };
  var hasDestroy = function(stream) {
    return stream instanceof Stream && typeof stream.destroy === "function";
  };
  var isEventEmitter = function(val) {
    return val instanceof EventEmitter;
  };
  var isFsReadStream = function(stream) {
    return stream instanceof ReadStream;
  };
  var isZlibStream = function(stream) {
    return stream instanceof Zlib.Gzip || stream instanceof Zlib.Gunzip || stream instanceof Zlib.Deflate || stream instanceof Zlib.DeflateRaw || stream instanceof Zlib.Inflate || stream instanceof Zlib.InflateRaw || stream instanceof Zlib.Unzip;
  };
  var noop = function() {
  };
  var onDrainClearBinding = function() {
    this._binding.clear();
  };
  var onOpenClose = function() {
    if (typeof this.fd === "number") {
      this.close();
    }
  };
  /*!
   * destroy
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015-2022 Douglas Christopher Wilson
   * MIT Licensed
   */
  var EventEmitter = import.meta.require("events").EventEmitter;
  var ReadStream = import.meta.require("fs").ReadStream;
  var Stream = import.meta.require("stream");
  var Zlib = import.meta.require("zlib");
  module.exports = destroy;
});

// node_modules/safer-buffer/safer.js
var require_safer = __commonJS((exports, module) => {
  var buffer = import.meta.require("buffer");
  var Buffer2 = buffer.Buffer;
  var safer = {};
  var key;
  for (key in buffer) {
    if (!buffer.hasOwnProperty(key))
      continue;
    if (key === "SlowBuffer" || key === "Buffer")
      continue;
    safer[key] = buffer[key];
  }
  var Safer = safer.Buffer = {};
  for (key in Buffer2) {
    if (!Buffer2.hasOwnProperty(key))
      continue;
    if (key === "allocUnsafe" || key === "allocUnsafeSlow")
      continue;
    Safer[key] = Buffer2[key];
  }
  safer.Buffer.prototype = Buffer2.prototype;
  if (!Safer.from || Safer.from === Uint8Array.from) {
    Safer.from = function(value, encodingOrOffset, length) {
      if (typeof value === "number") {
        throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value);
      }
      if (value && typeof value.length === "undefined") {
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
      }
      return Buffer2(value, encodingOrOffset, length);
    };
  }
  if (!Safer.alloc) {
    Safer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size);
      }
      if (size < 0 || size >= 2 * (1 << 30)) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"');
      }
      var buf = Buffer2(size);
      if (!fill || fill.length === 0) {
        buf.fill(0);
      } else if (typeof encoding === "string") {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
      return buf;
    };
  }
  if (!safer.kStringMaxLength) {
    try {
      safer.kStringMaxLength = process.binding("buffer").kStringMaxLength;
    } catch (e) {
    }
  }
  if (!safer.constants) {
    safer.constants = {
      MAX_LENGTH: safer.kMaxLength
    };
    if (safer.kStringMaxLength) {
      safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
    }
  }
  module.exports = safer;
});

// node_modules/iconv-lite/lib/bom-handling.js
var require_bom_handling = __commonJS((exports) => {
  var PrependBOMWrapper = function(encoder, options) {
    this.encoder = encoder;
    this.addBOM = true;
  };
  var StripBOMWrapper = function(decoder, options) {
    this.decoder = decoder;
    this.pass = false;
    this.options = options || {};
  };
  var BOMChar = "\uFEFF";
  exports.PrependBOM = PrependBOMWrapper;
  PrependBOMWrapper.prototype.write = function(str) {
    if (this.addBOM) {
      str = BOMChar + str;
      this.addBOM = false;
    }
    return this.encoder.write(str);
  };
  PrependBOMWrapper.prototype.end = function() {
    return this.encoder.end();
  };
  exports.StripBOM = StripBOMWrapper;
  StripBOMWrapper.prototype.write = function(buf) {
    var res = this.decoder.write(buf);
    if (this.pass || !res)
      return res;
    if (res[0] === BOMChar) {
      res = res.slice(1);
      if (typeof this.options.stripBOM === "function")
        this.options.stripBOM();
    }
    this.pass = true;
    return res;
  };
  StripBOMWrapper.prototype.end = function() {
    return this.decoder.end();
  };
});

// node_modules/iconv-lite/encodings/internal.js
var require_internal = __commonJS((exports, module) => {
  var InternalCodec = function(codecOptions, iconv) {
    this.enc = codecOptions.encodingName;
    this.bomAware = codecOptions.bomAware;
    if (this.enc === "base64")
      this.encoder = InternalEncoderBase64;
    else if (this.enc === "cesu8") {
      this.enc = "utf8";
      this.encoder = InternalEncoderCesu8;
      if (Buffer2.from("eda0bdedb2a9", "hex").toString() !== "\uD83D\uDCA9") {
        this.decoder = InternalDecoderCesu8;
        this.defaultCharUnicode = iconv.defaultCharUnicode;
      }
    }
  };
  var InternalDecoder = function(options, codec) {
    StringDecoder.call(this, codec.enc);
  };
  var InternalEncoder = function(options, codec) {
    this.enc = codec.enc;
  };
  var InternalEncoderBase64 = function(options, codec) {
    this.prevStr = "";
  };
  var InternalEncoderCesu8 = function(options, codec) {
  };
  var InternalDecoderCesu8 = function(options, codec) {
    this.acc = 0;
    this.contBytes = 0;
    this.accBytes = 0;
    this.defaultCharUnicode = codec.defaultCharUnicode;
  };
  var Buffer2 = require_safer().Buffer;
  module.exports = {
    utf8: { type: "_internal", bomAware: true },
    cesu8: { type: "_internal", bomAware: true },
    unicode11utf8: "utf8",
    ucs2: { type: "_internal", bomAware: true },
    utf16le: "ucs2",
    binary: { type: "_internal" },
    base64: { type: "_internal" },
    hex: { type: "_internal" },
    _internal: InternalCodec
  };
  InternalCodec.prototype.encoder = InternalEncoder;
  InternalCodec.prototype.decoder = InternalDecoder;
  var StringDecoder = import.meta.require("string_decoder").StringDecoder;
  if (!StringDecoder.prototype.end)
    StringDecoder.prototype.end = function() {
    };
  InternalDecoder.prototype = StringDecoder.prototype;
  InternalEncoder.prototype.write = function(str) {
    return Buffer2.from(str, this.enc);
  };
  InternalEncoder.prototype.end = function() {
  };
  InternalEncoderBase64.prototype.write = function(str) {
    str = this.prevStr + str;
    var completeQuads = str.length - str.length % 4;
    this.prevStr = str.slice(completeQuads);
    str = str.slice(0, completeQuads);
    return Buffer2.from(str, "base64");
  };
  InternalEncoderBase64.prototype.end = function() {
    return Buffer2.from(this.prevStr, "base64");
  };
  InternalEncoderCesu8.prototype.write = function(str) {
    var buf = Buffer2.alloc(str.length * 3), bufIdx = 0;
    for (var i = 0;i < str.length; i++) {
      var charCode = str.charCodeAt(i);
      if (charCode < 128)
        buf[bufIdx++] = charCode;
      else if (charCode < 2048) {
        buf[bufIdx++] = 192 + (charCode >>> 6);
        buf[bufIdx++] = 128 + (charCode & 63);
      } else {
        buf[bufIdx++] = 224 + (charCode >>> 12);
        buf[bufIdx++] = 128 + (charCode >>> 6 & 63);
        buf[bufIdx++] = 128 + (charCode & 63);
      }
    }
    return buf.slice(0, bufIdx);
  };
  InternalEncoderCesu8.prototype.end = function() {
  };
  InternalDecoderCesu8.prototype.write = function(buf) {
    var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes, res = "";
    for (var i = 0;i < buf.length; i++) {
      var curByte = buf[i];
      if ((curByte & 192) !== 128) {
        if (contBytes > 0) {
          res += this.defaultCharUnicode;
          contBytes = 0;
        }
        if (curByte < 128) {
          res += String.fromCharCode(curByte);
        } else if (curByte < 224) {
          acc = curByte & 31;
          contBytes = 1;
          accBytes = 1;
        } else if (curByte < 240) {
          acc = curByte & 15;
          contBytes = 2;
          accBytes = 1;
        } else {
          res += this.defaultCharUnicode;
        }
      } else {
        if (contBytes > 0) {
          acc = acc << 6 | curByte & 63;
          contBytes--;
          accBytes++;
          if (contBytes === 0) {
            if (accBytes === 2 && acc < 128 && acc > 0)
              res += this.defaultCharUnicode;
            else if (accBytes === 3 && acc < 2048)
              res += this.defaultCharUnicode;
            else
              res += String.fromCharCode(acc);
          }
        } else {
          res += this.defaultCharUnicode;
        }
      }
    }
    this.acc = acc;
    this.contBytes = contBytes;
    this.accBytes = accBytes;
    return res;
  };
  InternalDecoderCesu8.prototype.end = function() {
    var res = 0;
    if (this.contBytes > 0)
      res += this.defaultCharUnicode;
    return res;
  };
});

// node_modules/iconv-lite/encodings/utf16.js
var require_utf16 = __commonJS((exports) => {
  var Utf16BECodec = function() {
  };
  var Utf16BEEncoder = function() {
  };
  var Utf16BEDecoder = function() {
    this.overflowByte = -1;
  };
  var Utf16Codec = function(codecOptions, iconv) {
    this.iconv = iconv;
  };
  var Utf16Encoder = function(options, codec) {
    options = options || {};
    if (options.addBOM === undefined)
      options.addBOM = true;
    this.encoder = codec.iconv.getEncoder("utf-16le", options);
  };
  var Utf16Decoder = function(options, codec) {
    this.decoder = null;
    this.initialBytes = [];
    this.initialBytesLen = 0;
    this.options = options || {};
    this.iconv = codec.iconv;
  };
  var detectEncoding = function(buf, defaultEncoding) {
    var enc = defaultEncoding || "utf-16le";
    if (buf.length >= 2) {
      if (buf[0] == 254 && buf[1] == 255)
        enc = "utf-16be";
      else if (buf[0] == 255 && buf[1] == 254)
        enc = "utf-16le";
      else {
        var asciiCharsLE = 0, asciiCharsBE = 0, _len = Math.min(buf.length - buf.length % 2, 64);
        for (var i = 0;i < _len; i += 2) {
          if (buf[i] === 0 && buf[i + 1] !== 0)
            asciiCharsBE++;
          if (buf[i] !== 0 && buf[i + 1] === 0)
            asciiCharsLE++;
        }
        if (asciiCharsBE > asciiCharsLE)
          enc = "utf-16be";
        else if (asciiCharsBE < asciiCharsLE)
          enc = "utf-16le";
      }
    }
    return enc;
  };
  var Buffer2 = require_safer().Buffer;
  exports.utf16be = Utf16BECodec;
  Utf16BECodec.prototype.encoder = Utf16BEEncoder;
  Utf16BECodec.prototype.decoder = Utf16BEDecoder;
  Utf16BECodec.prototype.bomAware = true;
  Utf16BEEncoder.prototype.write = function(str) {
    var buf = Buffer2.from(str, "ucs2");
    for (var i = 0;i < buf.length; i += 2) {
      var tmp = buf[i];
      buf[i] = buf[i + 1];
      buf[i + 1] = tmp;
    }
    return buf;
  };
  Utf16BEEncoder.prototype.end = function() {
  };
  Utf16BEDecoder.prototype.write = function(buf) {
    if (buf.length == 0)
      return "";
    var buf2 = Buffer2.alloc(buf.length + 1), i = 0, j = 0;
    if (this.overflowByte !== -1) {
      buf2[0] = buf[0];
      buf2[1] = this.overflowByte;
      i = 1;
      j = 2;
    }
    for (;i < buf.length - 1; i += 2, j += 2) {
      buf2[j] = buf[i + 1];
      buf2[j + 1] = buf[i];
    }
    this.overflowByte = i == buf.length - 1 ? buf[buf.length - 1] : -1;
    return buf2.slice(0, j).toString("ucs2");
  };
  Utf16BEDecoder.prototype.end = function() {
  };
  exports.utf16 = Utf16Codec;
  Utf16Codec.prototype.encoder = Utf16Encoder;
  Utf16Codec.prototype.decoder = Utf16Decoder;
  Utf16Encoder.prototype.write = function(str) {
    return this.encoder.write(str);
  };
  Utf16Encoder.prototype.end = function() {
    return this.encoder.end();
  };
  Utf16Decoder.prototype.write = function(buf) {
    if (!this.decoder) {
      this.initialBytes.push(buf);
      this.initialBytesLen += buf.length;
      if (this.initialBytesLen < 16)
        return "";
      var buf = Buffer2.concat(this.initialBytes), encoding = detectEncoding(buf, this.options.defaultEncoding);
      this.decoder = this.iconv.getDecoder(encoding, this.options);
      this.initialBytes.length = this.initialBytesLen = 0;
    }
    return this.decoder.write(buf);
  };
  Utf16Decoder.prototype.end = function() {
    if (!this.decoder) {
      var buf = Buffer2.concat(this.initialBytes), encoding = detectEncoding(buf, this.options.defaultEncoding);
      this.decoder = this.iconv.getDecoder(encoding, this.options);
      var res = this.decoder.write(buf), trail = this.decoder.end();
      return trail ? res + trail : res;
    }
    return this.decoder.end();
  };
});

// node_modules/iconv-lite/encodings/utf7.js
var require_utf7 = __commonJS((exports) => {
  var Utf7Codec = function(codecOptions, iconv) {
    this.iconv = iconv;
  };
  var Utf7Encoder = function(options, codec) {
    this.iconv = codec.iconv;
  };
  var Utf7Decoder = function(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = "";
  };
  var Utf7IMAPCodec = function(codecOptions, iconv) {
    this.iconv = iconv;
  };
  var Utf7IMAPEncoder = function(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = Buffer2.alloc(6);
    this.base64AccumIdx = 0;
  };
  var Utf7IMAPDecoder = function(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = "";
  };
  var Buffer2 = require_safer().Buffer;
  exports.utf7 = Utf7Codec;
  exports.unicode11utf7 = "utf7";
  Utf7Codec.prototype.encoder = Utf7Encoder;
  Utf7Codec.prototype.decoder = Utf7Decoder;
  Utf7Codec.prototype.bomAware = true;
  var nonDirectChars = /[^A-Za-z0-9'\(\),-\.\/:\? \n\r\t]+/g;
  Utf7Encoder.prototype.write = function(str) {
    return Buffer2.from(str.replace(nonDirectChars, function(chunk) {
      return "+" + (chunk === "+" ? "" : this.iconv.encode(chunk, "utf16-be").toString("base64").replace(/=+$/, "")) + "-";
    }.bind(this)));
  };
  Utf7Encoder.prototype.end = function() {
  };
  var base64Regex = /[A-Za-z0-9\/+]/;
  var base64Chars = [];
  for (i = 0;i < 256; i++)
    base64Chars[i] = base64Regex.test(String.fromCharCode(i));
  var i;
  var plusChar = "+".charCodeAt(0);
  var minusChar = "-".charCodeAt(0);
  var andChar = "&".charCodeAt(0);
  Utf7Decoder.prototype.write = function(buf) {
    var res = "", lastI = 0, inBase64 = this.inBase64, base64Accum = this.base64Accum;
    for (var i2 = 0;i2 < buf.length; i2++) {
      if (!inBase64) {
        if (buf[i2] == plusChar) {
          res += this.iconv.decode(buf.slice(lastI, i2), "ascii");
          lastI = i2 + 1;
          inBase64 = true;
        }
      } else {
        if (!base64Chars[buf[i2]]) {
          if (i2 == lastI && buf[i2] == minusChar) {
            res += "+";
          } else {
            var b64str = base64Accum + buf.slice(lastI, i2).toString();
            res += this.iconv.decode(Buffer2.from(b64str, "base64"), "utf16-be");
          }
          if (buf[i2] != minusChar)
            i2--;
          lastI = i2 + 1;
          inBase64 = false;
          base64Accum = "";
        }
      }
    }
    if (!inBase64) {
      res += this.iconv.decode(buf.slice(lastI), "ascii");
    } else {
      var b64str = base64Accum + buf.slice(lastI).toString();
      var canBeDecoded = b64str.length - b64str.length % 8;
      base64Accum = b64str.slice(canBeDecoded);
      b64str = b64str.slice(0, canBeDecoded);
      res += this.iconv.decode(Buffer2.from(b64str, "base64"), "utf16-be");
    }
    this.inBase64 = inBase64;
    this.base64Accum = base64Accum;
    return res;
  };
  Utf7Decoder.prototype.end = function() {
    var res = "";
    if (this.inBase64 && this.base64Accum.length > 0)
      res = this.iconv.decode(Buffer2.from(this.base64Accum, "base64"), "utf16-be");
    this.inBase64 = false;
    this.base64Accum = "";
    return res;
  };
  exports.utf7imap = Utf7IMAPCodec;
  Utf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;
  Utf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;
  Utf7IMAPCodec.prototype.bomAware = true;
  Utf7IMAPEncoder.prototype.write = function(str) {
    var inBase64 = this.inBase64, base64Accum = this.base64Accum, base64AccumIdx = this.base64AccumIdx, buf = Buffer2.alloc(str.length * 5 + 10), bufIdx = 0;
    for (var i2 = 0;i2 < str.length; i2++) {
      var uChar = str.charCodeAt(i2);
      if (32 <= uChar && uChar <= 126) {
        if (inBase64) {
          if (base64AccumIdx > 0) {
            bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString("base64").replace(/\//g, ",").replace(/=+$/, ""), bufIdx);
            base64AccumIdx = 0;
          }
          buf[bufIdx++] = minusChar;
          inBase64 = false;
        }
        if (!inBase64) {
          buf[bufIdx++] = uChar;
          if (uChar === andChar)
            buf[bufIdx++] = minusChar;
        }
      } else {
        if (!inBase64) {
          buf[bufIdx++] = andChar;
          inBase64 = true;
        }
        if (inBase64) {
          base64Accum[base64AccumIdx++] = uChar >> 8;
          base64Accum[base64AccumIdx++] = uChar & 255;
          if (base64AccumIdx == base64Accum.length) {
            bufIdx += buf.write(base64Accum.toString("base64").replace(/\//g, ","), bufIdx);
            base64AccumIdx = 0;
          }
        }
      }
    }
    this.inBase64 = inBase64;
    this.base64AccumIdx = base64AccumIdx;
    return buf.slice(0, bufIdx);
  };
  Utf7IMAPEncoder.prototype.end = function() {
    var buf = Buffer2.alloc(10), bufIdx = 0;
    if (this.inBase64) {
      if (this.base64AccumIdx > 0) {
        bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString("base64").replace(/\//g, ",").replace(/=+$/, ""), bufIdx);
        this.base64AccumIdx = 0;
      }
      buf[bufIdx++] = minusChar;
      this.inBase64 = false;
    }
    return buf.slice(0, bufIdx);
  };
  var base64IMAPChars = base64Chars.slice();
  base64IMAPChars[",".charCodeAt(0)] = true;
  Utf7IMAPDecoder.prototype.write = function(buf) {
    var res = "", lastI = 0, inBase64 = this.inBase64, base64Accum = this.base64Accum;
    for (var i2 = 0;i2 < buf.length; i2++) {
      if (!inBase64) {
        if (buf[i2] == andChar) {
          res += this.iconv.decode(buf.slice(lastI, i2), "ascii");
          lastI = i2 + 1;
          inBase64 = true;
        }
      } else {
        if (!base64IMAPChars[buf[i2]]) {
          if (i2 == lastI && buf[i2] == minusChar) {
            res += "&";
          } else {
            var b64str = base64Accum + buf.slice(lastI, i2).toString().replace(/,/g, "/");
            res += this.iconv.decode(Buffer2.from(b64str, "base64"), "utf16-be");
          }
          if (buf[i2] != minusChar)
            i2--;
          lastI = i2 + 1;
          inBase64 = false;
          base64Accum = "";
        }
      }
    }
    if (!inBase64) {
      res += this.iconv.decode(buf.slice(lastI), "ascii");
    } else {
      var b64str = base64Accum + buf.slice(lastI).toString().replace(/,/g, "/");
      var canBeDecoded = b64str.length - b64str.length % 8;
      base64Accum = b64str.slice(canBeDecoded);
      b64str = b64str.slice(0, canBeDecoded);
      res += this.iconv.decode(Buffer2.from(b64str, "base64"), "utf16-be");
    }
    this.inBase64 = inBase64;
    this.base64Accum = base64Accum;
    return res;
  };
  Utf7IMAPDecoder.prototype.end = function() {
    var res = "";
    if (this.inBase64 && this.base64Accum.length > 0)
      res = this.iconv.decode(Buffer2.from(this.base64Accum, "base64"), "utf16-be");
    this.inBase64 = false;
    this.base64Accum = "";
    return res;
  };
});

// node_modules/iconv-lite/encodings/sbcs-codec.js
var require_sbcs_codec = __commonJS((exports) => {
  var SBCSCodec = function(codecOptions, iconv) {
    if (!codecOptions)
      throw new Error("SBCS codec is called without the data.");
    if (!codecOptions.chars || codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256)
      throw new Error("Encoding '" + codecOptions.type + "' has incorrect 'chars' (must be of len 128 or 256)");
    if (codecOptions.chars.length === 128) {
      var asciiString = "";
      for (var i = 0;i < 128; i++)
        asciiString += String.fromCharCode(i);
      codecOptions.chars = asciiString + codecOptions.chars;
    }
    this.decodeBuf = Buffer2.from(codecOptions.chars, "ucs2");
    var encodeBuf = Buffer2.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));
    for (var i = 0;i < codecOptions.chars.length; i++)
      encodeBuf[codecOptions.chars.charCodeAt(i)] = i;
    this.encodeBuf = encodeBuf;
  };
  var SBCSEncoder = function(options, codec) {
    this.encodeBuf = codec.encodeBuf;
  };
  var SBCSDecoder = function(options, codec) {
    this.decodeBuf = codec.decodeBuf;
  };
  var Buffer2 = require_safer().Buffer;
  exports._sbcs = SBCSCodec;
  SBCSCodec.prototype.encoder = SBCSEncoder;
  SBCSCodec.prototype.decoder = SBCSDecoder;
  SBCSEncoder.prototype.write = function(str) {
    var buf = Buffer2.alloc(str.length);
    for (var i = 0;i < str.length; i++)
      buf[i] = this.encodeBuf[str.charCodeAt(i)];
    return buf;
  };
  SBCSEncoder.prototype.end = function() {
  };
  SBCSDecoder.prototype.write = function(buf) {
    var decodeBuf = this.decodeBuf;
    var newBuf = Buffer2.alloc(buf.length * 2);
    var idx1 = 0, idx2 = 0;
    for (var i = 0;i < buf.length; i++) {
      idx1 = buf[i] * 2;
      idx2 = i * 2;
      newBuf[idx2] = decodeBuf[idx1];
      newBuf[idx2 + 1] = decodeBuf[idx1 + 1];
    }
    return newBuf.toString("ucs2");
  };
  SBCSDecoder.prototype.end = function() {
  };
});

// node_modules/iconv-lite/encodings/sbcs-data.js
var require_sbcs_data = __commonJS((exports, module) => {
  module.exports = {
    "10029": "maccenteuro",
    maccenteuro: {
      type: "_sbcs",
      chars: "\xC4\u0100\u0101\xC9\u0104\xD6\xDC\xE1\u0105\u010C\xE4\u010D\u0106\u0107\xE9\u0179\u017A\u010E\xED\u010F\u0112\u0113\u0116\xF3\u0117\xF4\xF6\xF5\xFA\u011A\u011B\xFC\u2020\xB0\u0118\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\u0119\xA8\u2260\u0123\u012E\u012F\u012A\u2264\u2265\u012B\u0136\u2202\u2211\u0142\u013B\u013C\u013D\u013E\u0139\u013A\u0145\u0146\u0143\xAC\u221A\u0144\u0147\u2206\xAB\xBB\u2026\xA0\u0148\u0150\xD5\u0151\u014C\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\u014D\u0154\u0155\u0158\u2039\u203A\u0159\u0156\u0157\u0160\u201A\u201E\u0161\u015A\u015B\xC1\u0164\u0165\xCD\u017D\u017E\u016A\xD3\xD4\u016B\u016E\xDA\u016F\u0170\u0171\u0172\u0173\xDD\xFD\u0137\u017B\u0141\u017C\u0122\u02C7"
    },
    "808": "cp808",
    ibm808: "cp808",
    cp808: {
      type: "_sbcs",
      chars: "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u0401\u0451\u0404\u0454\u0407\u0457\u040E\u045E\xB0\u2219\xB7\u221A\u2116\u20AC\u25A0\xA0"
    },
    mik: {
      type: "_sbcs",
      chars: "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u2514\u2534\u252C\u251C\u2500\u253C\u2563\u2551\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2510\u2591\u2592\u2593\u2502\u2524\u2116\xA7\u2557\u255D\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
    },
    ascii8bit: "ascii",
    usascii: "ascii",
    ansix34: "ascii",
    ansix341968: "ascii",
    ansix341986: "ascii",
    csascii: "ascii",
    cp367: "ascii",
    ibm367: "ascii",
    isoir6: "ascii",
    iso646us: "ascii",
    iso646irv: "ascii",
    us: "ascii",
    latin1: "iso88591",
    latin2: "iso88592",
    latin3: "iso88593",
    latin4: "iso88594",
    latin5: "iso88599",
    latin6: "iso885910",
    latin7: "iso885913",
    latin8: "iso885914",
    latin9: "iso885915",
    latin10: "iso885916",
    csisolatin1: "iso88591",
    csisolatin2: "iso88592",
    csisolatin3: "iso88593",
    csisolatin4: "iso88594",
    csisolatincyrillic: "iso88595",
    csisolatinarabic: "iso88596",
    csisolatingreek: "iso88597",
    csisolatinhebrew: "iso88598",
    csisolatin5: "iso88599",
    csisolatin6: "iso885910",
    l1: "iso88591",
    l2: "iso88592",
    l3: "iso88593",
    l4: "iso88594",
    l5: "iso88599",
    l6: "iso885910",
    l7: "iso885913",
    l8: "iso885914",
    l9: "iso885915",
    l10: "iso885916",
    isoir14: "iso646jp",
    isoir57: "iso646cn",
    isoir100: "iso88591",
    isoir101: "iso88592",
    isoir109: "iso88593",
    isoir110: "iso88594",
    isoir144: "iso88595",
    isoir127: "iso88596",
    isoir126: "iso88597",
    isoir138: "iso88598",
    isoir148: "iso88599",
    isoir157: "iso885910",
    isoir166: "tis620",
    isoir179: "iso885913",
    isoir199: "iso885914",
    isoir203: "iso885915",
    isoir226: "iso885916",
    cp819: "iso88591",
    ibm819: "iso88591",
    cyrillic: "iso88595",
    arabic: "iso88596",
    arabic8: "iso88596",
    ecma114: "iso88596",
    asmo708: "iso88596",
    greek: "iso88597",
    greek8: "iso88597",
    ecma118: "iso88597",
    elot928: "iso88597",
    hebrew: "iso88598",
    hebrew8: "iso88598",
    turkish: "iso88599",
    turkish8: "iso88599",
    thai: "iso885911",
    thai8: "iso885911",
    celtic: "iso885914",
    celtic8: "iso885914",
    isoceltic: "iso885914",
    tis6200: "tis620",
    tis62025291: "tis620",
    tis62025330: "tis620",
    "10000": "macroman",
    "10006": "macgreek",
    "10007": "maccyrillic",
    "10079": "maciceland",
    "10081": "macturkish",
    cspc8codepage437: "cp437",
    cspc775baltic: "cp775",
    cspc850multilingual: "cp850",
    cspcp852: "cp852",
    cspc862latinhebrew: "cp862",
    cpgr: "cp869",
    msee: "cp1250",
    mscyrl: "cp1251",
    msansi: "cp1252",
    msgreek: "cp1253",
    msturk: "cp1254",
    mshebr: "cp1255",
    msarab: "cp1256",
    winbaltrim: "cp1257",
    cp20866: "koi8r",
    "20866": "koi8r",
    ibm878: "koi8r",
    cskoi8r: "koi8r",
    cp21866: "koi8u",
    "21866": "koi8u",
    ibm1168: "koi8u",
    strk10482002: "rk1048",
    tcvn5712: "tcvn",
    tcvn57121: "tcvn",
    gb198880: "iso646cn",
    cn: "iso646cn",
    csiso14jisc6220ro: "iso646jp",
    jisc62201969ro: "iso646jp",
    jp: "iso646jp",
    cshproman8: "hproman8",
    r8: "hproman8",
    roman8: "hproman8",
    xroman8: "hproman8",
    ibm1051: "hproman8",
    mac: "macintosh",
    csmacintosh: "macintosh"
  };
});

// node_modules/iconv-lite/encodings/sbcs-data-generated.js
var require_sbcs_data_generated = __commonJS((exports, module) => {
  module.exports = {
    "437": "cp437",
    "737": "cp737",
    "775": "cp775",
    "850": "cp850",
    "852": "cp852",
    "855": "cp855",
    "856": "cp856",
    "857": "cp857",
    "858": "cp858",
    "860": "cp860",
    "861": "cp861",
    "862": "cp862",
    "863": "cp863",
    "864": "cp864",
    "865": "cp865",
    "866": "cp866",
    "869": "cp869",
    "874": "windows874",
    "922": "cp922",
    "1046": "cp1046",
    "1124": "cp1124",
    "1125": "cp1125",
    "1129": "cp1129",
    "1133": "cp1133",
    "1161": "cp1161",
    "1162": "cp1162",
    "1163": "cp1163",
    "1250": "windows1250",
    "1251": "windows1251",
    "1252": "windows1252",
    "1253": "windows1253",
    "1254": "windows1254",
    "1255": "windows1255",
    "1256": "windows1256",
    "1257": "windows1257",
    "1258": "windows1258",
    "28591": "iso88591",
    "28592": "iso88592",
    "28593": "iso88593",
    "28594": "iso88594",
    "28595": "iso88595",
    "28596": "iso88596",
    "28597": "iso88597",
    "28598": "iso88598",
    "28599": "iso88599",
    "28600": "iso885910",
    "28601": "iso885911",
    "28603": "iso885913",
    "28604": "iso885914",
    "28605": "iso885915",
    "28606": "iso885916",
    windows874: {
      type: "_sbcs",
      chars: "\u20AC\uFFFD\uFFFD\uFFFD\uFFFD\u2026\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\xA0\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFFFD\uFFFD\uFFFD\uFFFD\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\uFFFD\uFFFD\uFFFD\uFFFD"
    },
    win874: "windows874",
    cp874: "windows874",
    windows1250: {
      type: "_sbcs",
      chars: "\u20AC\uFFFD\u201A\uFFFD\u201E\u2026\u2020\u2021\uFFFD\u2030\u0160\u2039\u015A\u0164\u017D\u0179\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\u0161\u203A\u015B\u0165\u017E\u017A\xA0\u02C7\u02D8\u0141\xA4\u0104\xA6\xA7\xA8\xA9\u015E\xAB\xAC\xAD\xAE\u017B\xB0\xB1\u02DB\u0142\xB4\xB5\xB6\xB7\xB8\u0105\u015F\xBB\u013D\u02DD\u013E\u017C\u0154\xC1\xC2\u0102\xC4\u0139\u0106\xC7\u010C\xC9\u0118\xCB\u011A\xCD\xCE\u010E\u0110\u0143\u0147\xD3\xD4\u0150\xD6\xD7\u0158\u016E\xDA\u0170\xDC\xDD\u0162\xDF\u0155\xE1\xE2\u0103\xE4\u013A\u0107\xE7\u010D\xE9\u0119\xEB\u011B\xED\xEE\u010F\u0111\u0144\u0148\xF3\xF4\u0151\xF6\xF7\u0159\u016F\xFA\u0171\xFC\xFD\u0163\u02D9"
    },
    win1250: "windows1250",
    cp1250: "windows1250",
    windows1251: {
      type: "_sbcs",
      chars: "\u0402\u0403\u201A\u0453\u201E\u2026\u2020\u2021\u20AC\u2030\u0409\u2039\u040A\u040C\u040B\u040F\u0452\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\u0459\u203A\u045A\u045C\u045B\u045F\xA0\u040E\u045E\u0408\xA4\u0490\xA6\xA7\u0401\xA9\u0404\xAB\xAC\xAD\xAE\u0407\xB0\xB1\u0406\u0456\u0491\xB5\xB6\xB7\u0451\u2116\u0454\xBB\u0458\u0405\u0455\u0457\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F"
    },
    win1251: "windows1251",
    cp1251: "windows1251",
    windows1252: {
      type: "_sbcs",
      chars: "\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0160\u2039\u0152\uFFFD\u017D\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\u0161\u203A\u0153\uFFFD\u017E\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
    },
    win1252: "windows1252",
    cp1252: "windows1252",
    windows1253: {
      type: "_sbcs",
      chars: "\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\uFFFD\u2030\uFFFD\u2039\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\uFFFD\u203A\uFFFD\uFFFD\uFFFD\uFFFD\xA0\u0385\u0386\xA3\xA4\xA5\xA6\xA7\xA8\xA9\uFFFD\xAB\xAC\xAD\xAE\u2015\xB0\xB1\xB2\xB3\u0384\xB5\xB6\xB7\u0388\u0389\u038A\xBB\u038C\xBD\u038E\u038F\u0390\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\uFFFD\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03AA\u03AB\u03AC\u03AD\u03AE\u03AF\u03B0\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C2\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\u03CA\u03CB\u03CC\u03CD\u03CE\uFFFD"
    },
    win1253: "windows1253",
    cp1253: "windows1253",
    windows1254: {
      type: "_sbcs",
      chars: "\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0160\u2039\u0152\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\u0161\u203A\u0153\uFFFD\uFFFD\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u011E\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u0130\u015E\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u011F\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u0131\u015F\xFF"
    },
    win1254: "windows1254",
    cp1254: "windows1254",
    windows1255: {
      type: "_sbcs",
      chars: "\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\uFFFD\u2039\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\uFFFD\u203A\uFFFD\uFFFD\uFFFD\uFFFD\xA0\xA1\xA2\xA3\u20AA\xA5\xA6\xA7\xA8\xA9\xD7\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xF7\xBB\xBC\xBD\xBE\xBF\u05B0\u05B1\u05B2\u05B3\u05B4\u05B5\u05B6\u05B7\u05B8\u05B9\u05BA\u05BB\u05BC\u05BD\u05BE\u05BF\u05C0\u05C1\u05C2\u05C3\u05F0\u05F1\u05F2\u05F3\u05F4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u05D0\u05D1\u05D2\u05D3\u05D4\u05D5\u05D6\u05D7\u05D8\u05D9\u05DA\u05DB\u05DC\u05DD\u05DE\u05DF\u05E0\u05E1\u05E2\u05E3\u05E4\u05E5\u05E6\u05E7\u05E8\u05E9\u05EA\uFFFD\uFFFD\u200E\u200F\uFFFD"
    },
    win1255: "windows1255",
    cp1255: "windows1255",
    windows1256: {
      type: "_sbcs",
      chars: "\u20AC\u067E\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0679\u2039\u0152\u0686\u0698\u0688\u06AF\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u06A9\u2122\u0691\u203A\u0153\u200C\u200D\u06BA\xA0\u060C\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\u06BE\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\u061B\xBB\xBC\xBD\xBE\u061F\u06C1\u0621\u0622\u0623\u0624\u0625\u0626\u0627\u0628\u0629\u062A\u062B\u062C\u062D\u062E\u062F\u0630\u0631\u0632\u0633\u0634\u0635\u0636\xD7\u0637\u0638\u0639\u063A\u0640\u0641\u0642\u0643\xE0\u0644\xE2\u0645\u0646\u0647\u0648\xE7\xE8\xE9\xEA\xEB\u0649\u064A\xEE\xEF\u064B\u064C\u064D\u064E\xF4\u064F\u0650\xF7\u0651\xF9\u0652\xFB\xFC\u200E\u200F\u06D2"
    },
    win1256: "windows1256",
    cp1256: "windows1256",
    windows1257: {
      type: "_sbcs",
      chars: "\u20AC\uFFFD\u201A\uFFFD\u201E\u2026\u2020\u2021\uFFFD\u2030\uFFFD\u2039\uFFFD\xA8\u02C7\xB8\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\uFFFD\u203A\uFFFD\xAF\u02DB\uFFFD\xA0\uFFFD\xA2\xA3\xA4\uFFFD\xA6\xA7\xD8\xA9\u0156\xAB\xAC\xAD\xAE\xC6\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xF8\xB9\u0157\xBB\xBC\xBD\xBE\xE6\u0104\u012E\u0100\u0106\xC4\xC5\u0118\u0112\u010C\xC9\u0179\u0116\u0122\u0136\u012A\u013B\u0160\u0143\u0145\xD3\u014C\xD5\xD6\xD7\u0172\u0141\u015A\u016A\xDC\u017B\u017D\xDF\u0105\u012F\u0101\u0107\xE4\xE5\u0119\u0113\u010D\xE9\u017A\u0117\u0123\u0137\u012B\u013C\u0161\u0144\u0146\xF3\u014D\xF5\xF6\xF7\u0173\u0142\u015B\u016B\xFC\u017C\u017E\u02D9"
    },
    win1257: "windows1257",
    cp1257: "windows1257",
    windows1258: {
      type: "_sbcs",
      chars: "\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\uFFFD\u2039\u0152\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\uFFFD\u203A\u0153\uFFFD\uFFFD\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\u0102\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\u0300\xCD\xCE\xCF\u0110\xD1\u0309\xD3\xD4\u01A0\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u01AF\u0303\xDF\xE0\xE1\xE2\u0103\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\u0301\xED\xEE\xEF\u0111\xF1\u0323\xF3\xF4\u01A1\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u01B0\u20AB\xFF"
    },
    win1258: "windows1258",
    cp1258: "windows1258",
    iso88591: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
    },
    cp28591: "iso88591",
    iso88592: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0104\u02D8\u0141\xA4\u013D\u015A\xA7\xA8\u0160\u015E\u0164\u0179\xAD\u017D\u017B\xB0\u0105\u02DB\u0142\xB4\u013E\u015B\u02C7\xB8\u0161\u015F\u0165\u017A\u02DD\u017E\u017C\u0154\xC1\xC2\u0102\xC4\u0139\u0106\xC7\u010C\xC9\u0118\xCB\u011A\xCD\xCE\u010E\u0110\u0143\u0147\xD3\xD4\u0150\xD6\xD7\u0158\u016E\xDA\u0170\xDC\xDD\u0162\xDF\u0155\xE1\xE2\u0103\xE4\u013A\u0107\xE7\u010D\xE9\u0119\xEB\u011B\xED\xEE\u010F\u0111\u0144\u0148\xF3\xF4\u0151\xF6\xF7\u0159\u016F\xFA\u0171\xFC\xFD\u0163\u02D9"
    },
    cp28592: "iso88592",
    iso88593: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0126\u02D8\xA3\xA4\uFFFD\u0124\xA7\xA8\u0130\u015E\u011E\u0134\xAD\uFFFD\u017B\xB0\u0127\xB2\xB3\xB4\xB5\u0125\xB7\xB8\u0131\u015F\u011F\u0135\xBD\uFFFD\u017C\xC0\xC1\xC2\uFFFD\xC4\u010A\u0108\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\uFFFD\xD1\xD2\xD3\xD4\u0120\xD6\xD7\u011C\xD9\xDA\xDB\xDC\u016C\u015C\xDF\xE0\xE1\xE2\uFFFD\xE4\u010B\u0109\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\uFFFD\xF1\xF2\xF3\xF4\u0121\xF6\xF7\u011D\xF9\xFA\xFB\xFC\u016D\u015D\u02D9"
    },
    cp28593: "iso88593",
    iso88594: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0104\u0138\u0156\xA4\u0128\u013B\xA7\xA8\u0160\u0112\u0122\u0166\xAD\u017D\xAF\xB0\u0105\u02DB\u0157\xB4\u0129\u013C\u02C7\xB8\u0161\u0113\u0123\u0167\u014A\u017E\u014B\u0100\xC1\xC2\xC3\xC4\xC5\xC6\u012E\u010C\xC9\u0118\xCB\u0116\xCD\xCE\u012A\u0110\u0145\u014C\u0136\xD4\xD5\xD6\xD7\xD8\u0172\xDA\xDB\xDC\u0168\u016A\xDF\u0101\xE1\xE2\xE3\xE4\xE5\xE6\u012F\u010D\xE9\u0119\xEB\u0117\xED\xEE\u012B\u0111\u0146\u014D\u0137\xF4\xF5\xF6\xF7\xF8\u0173\xFA\xFB\xFC\u0169\u016B\u02D9"
    },
    cp28594: "iso88594",
    iso88595: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0401\u0402\u0403\u0404\u0405\u0406\u0407\u0408\u0409\u040A\u040B\u040C\xAD\u040E\u040F\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u2116\u0451\u0452\u0453\u0454\u0455\u0456\u0457\u0458\u0459\u045A\u045B\u045C\xA7\u045E\u045F"
    },
    cp28595: "iso88595",
    iso88596: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\uFFFD\uFFFD\uFFFD\xA4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u060C\xAD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u061B\uFFFD\uFFFD\uFFFD\u061F\uFFFD\u0621\u0622\u0623\u0624\u0625\u0626\u0627\u0628\u0629\u062A\u062B\u062C\u062D\u062E\u062F\u0630\u0631\u0632\u0633\u0634\u0635\u0636\u0637\u0638\u0639\u063A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0640\u0641\u0642\u0643\u0644\u0645\u0646\u0647\u0648\u0649\u064A\u064B\u064C\u064D\u064E\u064F\u0650\u0651\u0652\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"
    },
    cp28596: "iso88596",
    iso88597: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u2018\u2019\xA3\u20AC\u20AF\xA6\xA7\xA8\xA9\u037A\xAB\xAC\xAD\uFFFD\u2015\xB0\xB1\xB2\xB3\u0384\u0385\u0386\xB7\u0388\u0389\u038A\xBB\u038C\xBD\u038E\u038F\u0390\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\uFFFD\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03AA\u03AB\u03AC\u03AD\u03AE\u03AF\u03B0\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C2\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\u03CA\u03CB\u03CC\u03CD\u03CE\uFFFD"
    },
    cp28597: "iso88597",
    iso88598: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\uFFFD\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xD7\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xF7\xBB\xBC\xBD\xBE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2017\u05D0\u05D1\u05D2\u05D3\u05D4\u05D5\u05D6\u05D7\u05D8\u05D9\u05DA\u05DB\u05DC\u05DD\u05DE\u05DF\u05E0\u05E1\u05E2\u05E3\u05E4\u05E5\u05E6\u05E7\u05E8\u05E9\u05EA\uFFFD\uFFFD\u200E\u200F\uFFFD"
    },
    cp28598: "iso88598",
    iso88599: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u011E\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u0130\u015E\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u011F\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u0131\u015F\xFF"
    },
    cp28599: "iso88599",
    iso885910: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0104\u0112\u0122\u012A\u0128\u0136\xA7\u013B\u0110\u0160\u0166\u017D\xAD\u016A\u014A\xB0\u0105\u0113\u0123\u012B\u0129\u0137\xB7\u013C\u0111\u0161\u0167\u017E\u2015\u016B\u014B\u0100\xC1\xC2\xC3\xC4\xC5\xC6\u012E\u010C\xC9\u0118\xCB\u0116\xCD\xCE\xCF\xD0\u0145\u014C\xD3\xD4\xD5\xD6\u0168\xD8\u0172\xDA\xDB\xDC\xDD\xDE\xDF\u0101\xE1\xE2\xE3\xE4\xE5\xE6\u012F\u010D\xE9\u0119\xEB\u0117\xED\xEE\xEF\xF0\u0146\u014D\xF3\xF4\xF5\xF6\u0169\xF8\u0173\xFA\xFB\xFC\xFD\xFE\u0138"
    },
    cp28600: "iso885910",
    iso885911: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFFFD\uFFFD\uFFFD\uFFFD\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\uFFFD\uFFFD\uFFFD\uFFFD"
    },
    cp28601: "iso885911",
    iso885913: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u201D\xA2\xA3\xA4\u201E\xA6\xA7\xD8\xA9\u0156\xAB\xAC\xAD\xAE\xC6\xB0\xB1\xB2\xB3\u201C\xB5\xB6\xB7\xF8\xB9\u0157\xBB\xBC\xBD\xBE\xE6\u0104\u012E\u0100\u0106\xC4\xC5\u0118\u0112\u010C\xC9\u0179\u0116\u0122\u0136\u012A\u013B\u0160\u0143\u0145\xD3\u014C\xD5\xD6\xD7\u0172\u0141\u015A\u016A\xDC\u017B\u017D\xDF\u0105\u012F\u0101\u0107\xE4\xE5\u0119\u0113\u010D\xE9\u017A\u0117\u0123\u0137\u012B\u013C\u0161\u0144\u0146\xF3\u014D\xF5\xF6\xF7\u0173\u0142\u015B\u016B\xFC\u017C\u017E\u2019"
    },
    cp28603: "iso885913",
    iso885914: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u1E02\u1E03\xA3\u010A\u010B\u1E0A\xA7\u1E80\xA9\u1E82\u1E0B\u1EF2\xAD\xAE\u0178\u1E1E\u1E1F\u0120\u0121\u1E40\u1E41\xB6\u1E56\u1E81\u1E57\u1E83\u1E60\u1EF3\u1E84\u1E85\u1E61\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u0174\xD1\xD2\xD3\xD4\xD5\xD6\u1E6A\xD8\xD9\xDA\xDB\xDC\xDD\u0176\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u0175\xF1\xF2\xF3\xF4\xF5\xF6\u1E6B\xF8\xF9\xFA\xFB\xFC\xFD\u0177\xFF"
    },
    cp28604: "iso885914",
    iso885915: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\u20AC\xA5\u0160\xA7\u0161\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\u017D\xB5\xB6\xB7\u017E\xB9\xBA\xBB\u0152\u0153\u0178\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
    },
    cp28605: "iso885915",
    iso885916: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0104\u0105\u0141\u20AC\u201E\u0160\xA7\u0161\xA9\u0218\xAB\u0179\xAD\u017A\u017B\xB0\xB1\u010C\u0142\u017D\u201D\xB6\xB7\u017E\u010D\u0219\xBB\u0152\u0153\u0178\u017C\xC0\xC1\xC2\u0102\xC4\u0106\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u0110\u0143\xD2\xD3\xD4\u0150\xD6\u015A\u0170\xD9\xDA\xDB\xDC\u0118\u021A\xDF\xE0\xE1\xE2\u0103\xE4\u0107\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u0111\u0144\xF2\xF3\xF4\u0151\xF6\u015B\u0171\xF9\xFA\xFB\xFC\u0119\u021B\xFF"
    },
    cp28606: "iso885916",
    cp437: {
      type: "_sbcs",
      chars: "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xA2\xA3\xA5\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
    },
    ibm437: "cp437",
    csibm437: "cp437",
    cp737: {
      type: "_sbcs",
      chars: "\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C2\u03C4\u03C5\u03C6\u03C7\u03C8\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03C9\u03AC\u03AD\u03AE\u03CA\u03AF\u03CC\u03CD\u03CB\u03CE\u0386\u0388\u0389\u038A\u038C\u038E\u038F\xB1\u2265\u2264\u03AA\u03AB\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
    },
    ibm737: "cp737",
    csibm737: "cp737",
    cp775: {
      type: "_sbcs",
      chars: "\u0106\xFC\xE9\u0101\xE4\u0123\xE5\u0107\u0142\u0113\u0156\u0157\u012B\u0179\xC4\xC5\xC9\xE6\xC6\u014D\xF6\u0122\xA2\u015A\u015B\xD6\xDC\xF8\xA3\xD8\xD7\xA4\u0100\u012A\xF3\u017B\u017C\u017A\u201D\xA6\xA9\xAE\xAC\xBD\xBC\u0141\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u0104\u010C\u0118\u0116\u2563\u2551\u2557\u255D\u012E\u0160\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u0172\u016A\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u017D\u0105\u010D\u0119\u0117\u012F\u0161\u0173\u016B\u017E\u2518\u250C\u2588\u2584\u258C\u2590\u2580\xD3\xDF\u014C\u0143\xF5\xD5\xB5\u0144\u0136\u0137\u013B\u013C\u0146\u0112\u0145\u2019\xAD\xB1\u201C\xBE\xB6\xA7\xF7\u201E\xB0\u2219\xB7\xB9\xB3\xB2\u25A0\xA0"
    },
    ibm775: "cp775",
    csibm775: "cp775",
    cp850: {
      type: "_sbcs",
      chars: "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xF8\xA3\xD8\xD7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\xAE\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\xC0\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\xE3\xC3\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\xF0\xD0\xCA\xCB\xC8\u0131\xCD\xCE\xCF\u2518\u250C\u2588\u2584\xA6\xCC\u2580\xD3\xDF\xD4\xD2\xF5\xD5\xB5\xFE\xDE\xDA\xDB\xD9\xFD\xDD\xAF\xB4\xAD\xB1\u2017\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0"
    },
    ibm850: "cp850",
    csibm850: "cp850",
    cp852: {
      type: "_sbcs",
      chars: "\xC7\xFC\xE9\xE2\xE4\u016F\u0107\xE7\u0142\xEB\u0150\u0151\xEE\u0179\xC4\u0106\xC9\u0139\u013A\xF4\xF6\u013D\u013E\u015A\u015B\xD6\xDC\u0164\u0165\u0141\xD7\u010D\xE1\xED\xF3\xFA\u0104\u0105\u017D\u017E\u0118\u0119\xAC\u017A\u010C\u015F\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\u011A\u015E\u2563\u2551\u2557\u255D\u017B\u017C\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u0102\u0103\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\u0111\u0110\u010E\xCB\u010F\u0147\xCD\xCE\u011B\u2518\u250C\u2588\u2584\u0162\u016E\u2580\xD3\xDF\xD4\u0143\u0144\u0148\u0160\u0161\u0154\xDA\u0155\u0170\xFD\xDD\u0163\xB4\xAD\u02DD\u02DB\u02C7\u02D8\xA7\xF7\xB8\xB0\xA8\u02D9\u0171\u0158\u0159\u25A0\xA0"
    },
    ibm852: "cp852",
    csibm852: "cp852",
    cp855: {
      type: "_sbcs",
      chars: "\u0452\u0402\u0453\u0403\u0451\u0401\u0454\u0404\u0455\u0405\u0456\u0406\u0457\u0407\u0458\u0408\u0459\u0409\u045A\u040A\u045B\u040B\u045C\u040C\u045E\u040E\u045F\u040F\u044E\u042E\u044A\u042A\u0430\u0410\u0431\u0411\u0446\u0426\u0434\u0414\u0435\u0415\u0444\u0424\u0433\u0413\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u0445\u0425\u0438\u0418\u2563\u2551\u2557\u255D\u0439\u0419\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u043A\u041A\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\u043B\u041B\u043C\u041C\u043D\u041D\u043E\u041E\u043F\u2518\u250C\u2588\u2584\u041F\u044F\u2580\u042F\u0440\u0420\u0441\u0421\u0442\u0422\u0443\u0423\u0436\u0416\u0432\u0412\u044C\u042C\u2116\xAD\u044B\u042B\u0437\u0417\u0448\u0428\u044D\u042D\u0449\u0429\u0447\u0427\xA7\u25A0\xA0"
    },
    ibm855: "cp855",
    csibm855: "cp855",
    cp856: {
      type: "_sbcs",
      chars: "\u05D0\u05D1\u05D2\u05D3\u05D4\u05D5\u05D6\u05D7\u05D8\u05D9\u05DA\u05DB\u05DC\u05DD\u05DE\u05DF\u05E0\u05E1\u05E2\u05E3\u05E4\u05E5\u05E6\u05E7\u05E8\u05E9\u05EA\uFFFD\xA3\uFFFD\xD7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\xAE\xAC\xBD\xBC\uFFFD\xAB\xBB\u2591\u2592\u2593\u2502\u2524\uFFFD\uFFFD\uFFFD\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\uFFFD\uFFFD\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2518\u250C\u2588\u2584\xA6\uFFFD\u2580\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\xB5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\xAF\xB4\xAD\xB1\u2017\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0"
    },
    ibm856: "cp856",
    csibm856: "cp856",
    cp857: {
      type: "_sbcs",
      chars: "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\u0131\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\u0130\xD6\xDC\xF8\xA3\xD8\u015E\u015F\xE1\xED\xF3\xFA\xF1\xD1\u011E\u011F\xBF\xAE\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\xC0\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\xE3\xC3\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\xBA\xAA\xCA\xCB\xC8\uFFFD\xCD\xCE\xCF\u2518\u250C\u2588\u2584\xA6\xCC\u2580\xD3\xDF\xD4\xD2\xF5\xD5\xB5\uFFFD\xD7\xDA\xDB\xD9\xEC\xFF\xAF\xB4\xAD\xB1\uFFFD\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0"
    },
    ibm857: "cp857",
    csibm857: "cp857",
    cp858: {
      type: "_sbcs",
      chars: "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xF8\xA3\xD8\xD7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\xAE\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\xC0\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\xE3\xC3\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\xF0\xD0\xCA\xCB\xC8\u20AC\xCD\xCE\xCF\u2518\u250C\u2588\u2584\xA6\xCC\u2580\xD3\xDF\xD4\xD2\xF5\xD5\xB5\xFE\xDE\xDA\xDB\xD9\xFD\xDD\xAF\xB4\xAD\xB1\u2017\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0"
    },
    ibm858: "cp858",
    csibm858: "cp858",
    cp860: {
      type: "_sbcs",
      chars: "\xC7\xFC\xE9\xE2\xE3\xE0\xC1\xE7\xEA\xCA\xE8\xCD\xD4\xEC\xC3\xC2\xC9\xC0\xC8\xF4\xF5\xF2\xDA\xF9\xCC\xD5\xDC\xA2\xA3\xD9\u20A7\xD3\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\xD2\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
    },
    ibm860: "cp860",
    csibm860: "cp860",
    cp861: {
      type: "_sbcs",
      chars: "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xD0\xF0\xDE\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xFE\xFB\xDD\xFD\xD6\xDC\xF8\xA3\xD8\u20A7\u0192\xE1\xED\xF3\xFA\xC1\xCD\xD3\xDA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
    },
    ibm861: "cp861",
    csibm861: "cp861",
    cp862: {
      type: "_sbcs",
      chars: "\u05D0\u05D1\u05D2\u05D3\u05D4\u05D5\u05D6\u05D7\u05D8\u05D9\u05DA\u05DB\u05DC\u05DD\u05DE\u05DF\u05E0\u05E1\u05E2\u05E3\u05E4\u05E5\u05E6\u05E7\u05E8\u05E9\u05EA\xA2\xA3\xA5\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
    },
    ibm862: "cp862",
    csibm862: "cp862",
    cp863: {
      type: "_sbcs",
      chars: "\xC7\xFC\xE9\xE2\xC2\xE0\xB6\xE7\xEA\xEB\xE8\xEF\xEE\u2017\xC0\xA7\xC9\xC8\xCA\xF4\xCB\xCF\xFB\xF9\xA4\xD4\xDC\xA2\xA3\xD9\xDB\u0192\xA6\xB4\xF3\xFA\xA8\xB8\xB3\xAF\xCE\u2310\xAC\xBD\xBC\xBE\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
    },
    ibm863: "cp863",
    csibm863: "cp863",
    cp864: {
      type: "_sbcs",
      chars: `\0\x01\x02\x03\x04\x05\x06\x07	
\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !"#$\u066A&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xB0\xB7\u2219\u221A\u2592\u2500\u2502\u253C\u2524\u252C\u251C\u2534\u2510\u250C\u2514\u2518\u03B2\u221E\u03C6\xB1\xBD\xBC\u2248\xAB\xBB\uFEF7\uFEF8\uFFFD\uFFFD\uFEFB\uFEFC\uFFFD\xA0\xAD\uFE82\xA3\xA4\uFE84\uFFFD\uFFFD\uFE8E\uFE8F\uFE95\uFE99\u060C\uFE9D\uFEA1\uFEA5\u0660\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\uFED1\u061B\uFEB1\uFEB5\uFEB9\u061F\xA2\uFE80\uFE81\uFE83\uFE85\uFECA\uFE8B\uFE8D\uFE91\uFE93\uFE97\uFE9B\uFE9F\uFEA3\uFEA7\uFEA9\uFEAB\uFEAD\uFEAF\uFEB3\uFEB7\uFEBB\uFEBF\uFEC1\uFEC5\uFECB\uFECF\xA6\xAC\xF7\xD7\uFEC9\u0640\uFED3\uFED7\uFEDB\uFEDF\uFEE3\uFEE7\uFEEB\uFEED\uFEEF\uFEF3\uFEBD\uFECC\uFECE\uFECD\uFEE1\uFE7D\u0651\uFEE5\uFEE9\uFEEC\uFEF0\uFEF2\uFED0\uFED5\uFEF5\uFEF6\uFEDD\uFED9\uFEF1\u25A0\uFFFD`
    },
    ibm864: "cp864",
    csibm864: "cp864",
    cp865: {
      type: "_sbcs",
      chars: "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xF8\xA3\xD8\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xA4\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
    },
    ibm865: "cp865",
    csibm865: "cp865",
    cp866: {
      type: "_sbcs",
      chars: "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u0401\u0451\u0404\u0454\u0407\u0457\u040E\u045E\xB0\u2219\xB7\u221A\u2116\xA4\u25A0\xA0"
    },
    ibm866: "cp866",
    csibm866: "cp866",
    cp869: {
      type: "_sbcs",
      chars: "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0386\uFFFD\xB7\xAC\xA6\u2018\u2019\u0388\u2015\u0389\u038A\u03AA\u038C\uFFFD\uFFFD\u038E\u03AB\xA9\u038F\xB2\xB3\u03AC\xA3\u03AD\u03AE\u03AF\u03CA\u0390\u03CC\u03CD\u0391\u0392\u0393\u0394\u0395\u0396\u0397\xBD\u0398\u0399\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u039A\u039B\u039C\u039D\u2563\u2551\u2557\u255D\u039E\u039F\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u03A0\u03A1\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03B1\u03B2\u03B3\u2518\u250C\u2588\u2584\u03B4\u03B5\u2580\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C2\u03C4\u0384\xAD\xB1\u03C5\u03C6\u03C7\xA7\u03C8\u0385\xB0\xA8\u03C9\u03CB\u03B0\u03CE\u25A0\xA0"
    },
    ibm869: "cp869",
    csibm869: "cp869",
    cp922: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\u203E\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u0160\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\u017D\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u0161\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\u017E\xFF"
    },
    ibm922: "cp922",
    csibm922: "cp922",
    cp1046: {
      type: "_sbcs",
      chars: "\uFE88\xD7\xF7\uF8F6\uF8F5\uF8F4\uF8F7\uFE71\x88\u25A0\u2502\u2500\u2510\u250C\u2514\u2518\uFE79\uFE7B\uFE7D\uFE7F\uFE77\uFE8A\uFEF0\uFEF3\uFEF2\uFECE\uFECF\uFED0\uFEF6\uFEF8\uFEFA\uFEFC\xA0\uF8FA\uF8F9\uF8F8\xA4\uF8FB\uFE8B\uFE91\uFE97\uFE9B\uFE9F\uFEA3\u060C\xAD\uFEA7\uFEB3\u0660\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\uFEB7\u061B\uFEBB\uFEBF\uFECA\u061F\uFECB\u0621\u0622\u0623\u0624\u0625\u0626\u0627\u0628\u0629\u062A\u062B\u062C\u062D\u062E\u062F\u0630\u0631\u0632\u0633\u0634\u0635\u0636\u0637\uFEC7\u0639\u063A\uFECC\uFE82\uFE84\uFE8E\uFED3\u0640\u0641\u0642\u0643\u0644\u0645\u0646\u0647\u0648\u0649\u064A\u064B\u064C\u064D\u064E\u064F\u0650\u0651\u0652\uFED7\uFEDB\uFEDF\uF8FC\uFEF5\uFEF7\uFEF9\uFEFB\uFEE3\uFEE7\uFEEC\uFEE9\uFFFD"
    },
    ibm1046: "cp1046",
    csibm1046: "cp1046",
    cp1124: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0401\u0402\u0490\u0404\u0405\u0406\u0407\u0408\u0409\u040A\u040B\u040C\xAD\u040E\u040F\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u2116\u0451\u0452\u0491\u0454\u0455\u0456\u0457\u0458\u0459\u045A\u045B\u045C\xA7\u045E\u045F"
    },
    ibm1124: "cp1124",
    csibm1124: "cp1124",
    cp1125: {
      type: "_sbcs",
      chars: "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u0401\u0451\u0490\u0491\u0404\u0454\u0406\u0456\u0407\u0457\xB7\u221A\u2116\xA4\u25A0\xA0"
    },
    ibm1125: "cp1125",
    csibm1125: "cp1125",
    cp1129: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\u0153\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\u0178\xB5\xB6\xB7\u0152\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\u0102\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\u0300\xCD\xCE\xCF\u0110\xD1\u0309\xD3\xD4\u01A0\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u01AF\u0303\xDF\xE0\xE1\xE2\u0103\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\u0301\xED\xEE\xEF\u0111\xF1\u0323\xF3\xF4\u01A1\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u01B0\u20AB\xFF"
    },
    ibm1129: "cp1129",
    csibm1129: "cp1129",
    cp1133: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0E81\u0E82\u0E84\u0E87\u0E88\u0EAA\u0E8A\u0E8D\u0E94\u0E95\u0E96\u0E97\u0E99\u0E9A\u0E9B\u0E9C\u0E9D\u0E9E\u0E9F\u0EA1\u0EA2\u0EA3\u0EA5\u0EA7\u0EAB\u0EAD\u0EAE\uFFFD\uFFFD\uFFFD\u0EAF\u0EB0\u0EB2\u0EB3\u0EB4\u0EB5\u0EB6\u0EB7\u0EB8\u0EB9\u0EBC\u0EB1\u0EBB\u0EBD\uFFFD\uFFFD\uFFFD\u0EC0\u0EC1\u0EC2\u0EC3\u0EC4\u0EC8\u0EC9\u0ECA\u0ECB\u0ECC\u0ECD\u0EC6\uFFFD\u0EDC\u0EDD\u20AD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0ED0\u0ED1\u0ED2\u0ED3\u0ED4\u0ED5\u0ED6\u0ED7\u0ED8\u0ED9\uFFFD\uFFFD\xA2\xAC\xA6\uFFFD"
    },
    ibm1133: "cp1133",
    csibm1133: "cp1133",
    cp1161: {
      type: "_sbcs",
      chars: "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0E48\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\u0E49\u0E4A\u0E4B\u20AC\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\xA2\xAC\xA6\xA0"
    },
    ibm1161: "cp1161",
    csibm1161: "cp1161",
    cp1162: {
      type: "_sbcs",
      chars: "\u20AC\x81\x82\x83\x84\u2026\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\u2018\u2019\u201C\u201D\u2022\u2013\u2014\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFFFD\uFFFD\uFFFD\uFFFD\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\uFFFD\uFFFD\uFFFD\uFFFD"
    },
    ibm1162: "cp1162",
    csibm1162: "cp1162",
    cp1163: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\u20AC\xA5\xA6\xA7\u0153\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\u0178\xB5\xB6\xB7\u0152\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\u0102\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\u0300\xCD\xCE\xCF\u0110\xD1\u0309\xD3\xD4\u01A0\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u01AF\u0303\xDF\xE0\xE1\xE2\u0103\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\u0301\xED\xEE\xEF\u0111\xF1\u0323\xF3\xF4\u01A1\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u01B0\u20AB\xFF"
    },
    ibm1163: "cp1163",
    csibm1163: "cp1163",
    maccroatian: {
      type: "_sbcs",
      chars: "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\u0160\u2122\xB4\xA8\u2260\u017D\xD8\u221E\xB1\u2264\u2265\u2206\xB5\u2202\u2211\u220F\u0161\u222B\xAA\xBA\u2126\u017E\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u0106\xAB\u010C\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u0110\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\uFFFD\xA9\u2044\xA4\u2039\u203A\xC6\xBB\u2013\xB7\u201A\u201E\u2030\xC2\u0107\xC1\u010D\xC8\xCD\xCE\xCF\xCC\xD3\xD4\u0111\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u03C0\xCB\u02DA\xB8\xCA\xE6\u02C7"
    },
    maccyrillic: {
      type: "_sbcs",
      chars: "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u2020\xB0\xA2\xA3\xA7\u2022\xB6\u0406\xAE\xA9\u2122\u0402\u0452\u2260\u0403\u0453\u221E\xB1\u2264\u2265\u0456\xB5\u2202\u0408\u0404\u0454\u0407\u0457\u0409\u0459\u040A\u045A\u0458\u0405\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\u040B\u045B\u040C\u045C\u0455\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u201E\u040E\u045E\u040F\u045F\u2116\u0401\u0451\u044F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\xA4"
    },
    macgreek: {
      type: "_sbcs",
      chars: "\xC4\xB9\xB2\xC9\xB3\xD6\xDC\u0385\xE0\xE2\xE4\u0384\xA8\xE7\xE9\xE8\xEA\xEB\xA3\u2122\xEE\xEF\u2022\xBD\u2030\xF4\xF6\xA6\xAD\xF9\xFB\xFC\u2020\u0393\u0394\u0398\u039B\u039E\u03A0\xDF\xAE\xA9\u03A3\u03AA\xA7\u2260\xB0\u0387\u0391\xB1\u2264\u2265\xA5\u0392\u0395\u0396\u0397\u0399\u039A\u039C\u03A6\u03AB\u03A8\u03A9\u03AC\u039D\xAC\u039F\u03A1\u2248\u03A4\xAB\xBB\u2026\xA0\u03A5\u03A7\u0386\u0388\u0153\u2013\u2015\u201C\u201D\u2018\u2019\xF7\u0389\u038A\u038C\u038E\u03AD\u03AE\u03AF\u03CC\u038F\u03CD\u03B1\u03B2\u03C8\u03B4\u03B5\u03C6\u03B3\u03B7\u03B9\u03BE\u03BA\u03BB\u03BC\u03BD\u03BF\u03C0\u03CE\u03C1\u03C3\u03C4\u03B8\u03C9\u03C2\u03C7\u03C5\u03B6\u03CA\u03CB\u0390\u03B0\uFFFD"
    },
    maciceland: {
      type: "_sbcs",
      chars: "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\xDD\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\xA4\xD0\xF0\xDE\xFE\xFD\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7"
    },
    macroman: {
      type: "_sbcs",
      chars: "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\xA4\u2039\u203A\uFB01\uFB02\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7"
    },
    macromania: {
      type: "_sbcs",
      chars: "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\u0102\u015E\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\u0103\u015F\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\xA4\u2039\u203A\u0162\u0163\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7"
    },
    macthai: {
      type: "_sbcs",
      chars: "\xAB\xBB\u2026\uF88C\uF88F\uF892\uF895\uF898\uF88B\uF88E\uF891\uF894\uF897\u201C\u201D\uF899\uFFFD\u2022\uF884\uF889\uF885\uF886\uF887\uF888\uF88A\uF88D\uF890\uF893\uF896\u2018\u2019\uFFFD\xA0\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFEFF\u200B\u2013\u2014\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u2122\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\xAE\xA9\uFFFD\uFFFD\uFFFD\uFFFD"
    },
    macturkish: {
      type: "_sbcs",
      chars: "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u011E\u011F\u0130\u0131\u015E\u015F\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\uFFFD\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7"
    },
    macukraine: {
      type: "_sbcs",
      chars: "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u2020\xB0\u0490\xA3\xA7\u2022\xB6\u0406\xAE\xA9\u2122\u0402\u0452\u2260\u0403\u0453\u221E\xB1\u2264\u2265\u0456\xB5\u0491\u0408\u0404\u0454\u0407\u0457\u0409\u0459\u040A\u045A\u0458\u0405\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\u040B\u045B\u040C\u045C\u0455\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u201E\u040E\u045E\u040F\u045F\u2116\u0401\u0451\u044F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\xA4"
    },
    koi8r: {
      type: "_sbcs",
      chars: "\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2580\u2584\u2588\u258C\u2590\u2591\u2592\u2593\u2320\u25A0\u2219\u221A\u2248\u2264\u2265\xA0\u2321\xB0\xB2\xB7\xF7\u2550\u2551\u2552\u0451\u2553\u2554\u2555\u2556\u2557\u2558\u2559\u255A\u255B\u255C\u255D\u255E\u255F\u2560\u2561\u0401\u2562\u2563\u2564\u2565\u2566\u2567\u2568\u2569\u256A\u256B\u256C\xA9\u044E\u0430\u0431\u0446\u0434\u0435\u0444\u0433\u0445\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u044F\u0440\u0441\u0442\u0443\u0436\u0432\u044C\u044B\u0437\u0448\u044D\u0449\u0447\u044A\u042E\u0410\u0411\u0426\u0414\u0415\u0424\u0413\u0425\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u042F\u0420\u0421\u0422\u0423\u0416\u0412\u042C\u042B\u0417\u0428\u042D\u0429\u0427\u042A"
    },
    koi8u: {
      type: "_sbcs",
      chars: "\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2580\u2584\u2588\u258C\u2590\u2591\u2592\u2593\u2320\u25A0\u2219\u221A\u2248\u2264\u2265\xA0\u2321\xB0\xB2\xB7\xF7\u2550\u2551\u2552\u0451\u0454\u2554\u0456\u0457\u2557\u2558\u2559\u255A\u255B\u0491\u255D\u255E\u255F\u2560\u2561\u0401\u0404\u2563\u0406\u0407\u2566\u2567\u2568\u2569\u256A\u0490\u256C\xA9\u044E\u0430\u0431\u0446\u0434\u0435\u0444\u0433\u0445\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u044F\u0440\u0441\u0442\u0443\u0436\u0432\u044C\u044B\u0437\u0448\u044D\u0449\u0447\u044A\u042E\u0410\u0411\u0426\u0414\u0415\u0424\u0413\u0425\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u042F\u0420\u0421\u0422\u0423\u0416\u0412\u042C\u042B\u0417\u0428\u042D\u0429\u0427\u042A"
    },
    koi8ru: {
      type: "_sbcs",
      chars: "\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2580\u2584\u2588\u258C\u2590\u2591\u2592\u2593\u2320\u25A0\u2219\u221A\u2248\u2264\u2265\xA0\u2321\xB0\xB2\xB7\xF7\u2550\u2551\u2552\u0451\u0454\u2554\u0456\u0457\u2557\u2558\u2559\u255A\u255B\u0491\u045E\u255E\u255F\u2560\u2561\u0401\u0404\u2563\u0406\u0407\u2566\u2567\u2568\u2569\u256A\u0490\u040E\xA9\u044E\u0430\u0431\u0446\u0434\u0435\u0444\u0433\u0445\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u044F\u0440\u0441\u0442\u0443\u0436\u0432\u044C\u044B\u0437\u0448\u044D\u0449\u0447\u044A\u042E\u0410\u0411\u0426\u0414\u0415\u0424\u0413\u0425\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u042F\u0420\u0421\u0422\u0423\u0416\u0412\u042C\u042B\u0417\u0428\u042D\u0429\u0427\u042A"
    },
    koi8t: {
      type: "_sbcs",
      chars: "\u049B\u0493\u201A\u0492\u201E\u2026\u2020\u2021\uFFFD\u2030\u04B3\u2039\u04B2\u04B7\u04B6\uFFFD\u049A\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\uFFFD\u203A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u04EF\u04EE\u0451\xA4\u04E3\xA6\xA7\uFFFD\uFFFD\uFFFD\xAB\xAC\xAD\xAE\uFFFD\xB0\xB1\xB2\u0401\uFFFD\u04E2\xB6\xB7\uFFFD\u2116\uFFFD\xBB\uFFFD\uFFFD\uFFFD\xA9\u044E\u0430\u0431\u0446\u0434\u0435\u0444\u0433\u0445\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u044F\u0440\u0441\u0442\u0443\u0436\u0432\u044C\u044B\u0437\u0448\u044D\u0449\u0447\u044A\u042E\u0410\u0411\u0426\u0414\u0415\u0424\u0413\u0425\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u042F\u0420\u0421\u0422\u0423\u0416\u0412\u042C\u042B\u0417\u0428\u042D\u0429\u0427\u042A"
    },
    armscii8: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\uFFFD\u0587\u0589)(\xBB\xAB\u2014.\u055D,-\u058A\u2026\u055C\u055B\u055E\u0531\u0561\u0532\u0562\u0533\u0563\u0534\u0564\u0535\u0565\u0536\u0566\u0537\u0567\u0538\u0568\u0539\u0569\u053A\u056A\u053B\u056B\u053C\u056C\u053D\u056D\u053E\u056E\u053F\u056F\u0540\u0570\u0541\u0571\u0542\u0572\u0543\u0573\u0544\u0574\u0545\u0575\u0546\u0576\u0547\u0577\u0548\u0578\u0549\u0579\u054A\u057A\u054B\u057B\u054C\u057C\u054D\u057D\u054E\u057E\u054F\u057F\u0550\u0580\u0551\u0581\u0552\u0582\u0553\u0583\u0554\u0584\u0555\u0585\u0556\u0586\u055A\uFFFD"
    },
    rk1048: {
      type: "_sbcs",
      chars: "\u0402\u0403\u201A\u0453\u201E\u2026\u2020\u2021\u20AC\u2030\u0409\u2039\u040A\u049A\u04BA\u040F\u0452\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\u0459\u203A\u045A\u049B\u04BB\u045F\xA0\u04B0\u04B1\u04D8\xA4\u04E8\xA6\xA7\u0401\xA9\u0492\xAB\xAC\xAD\xAE\u04AE\xB0\xB1\u0406\u0456\u04E9\xB5\xB6\xB7\u0451\u2116\u0493\xBB\u04D9\u04A2\u04A3\u04AF\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F"
    },
    tcvn: {
      type: "_sbcs",
      chars: `\0\xDA\u1EE4\x03\u1EEA\u1EEC\u1EEE\x07	
\r\x0E\x0F\x10\u1EE8\u1EF0\u1EF2\u1EF6\u1EF8\xDD\u1EF4\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC0\u1EA2\xC3\xC1\u1EA0\u1EB6\u1EAC\xC8\u1EBA\u1EBC\xC9\u1EB8\u1EC6\xCC\u1EC8\u0128\xCD\u1ECA\xD2\u1ECE\xD5\xD3\u1ECC\u1ED8\u1EDC\u1EDE\u1EE0\u1EDA\u1EE2\xD9\u1EE6\u0168\xA0\u0102\xC2\xCA\xD4\u01A0\u01AF\u0110\u0103\xE2\xEA\xF4\u01A1\u01B0\u0111\u1EB0\u0300\u0309\u0303\u0301\u0323\xE0\u1EA3\xE3\xE1\u1EA1\u1EB2\u1EB1\u1EB3\u1EB5\u1EAF\u1EB4\u1EAE\u1EA6\u1EA8\u1EAA\u1EA4\u1EC0\u1EB7\u1EA7\u1EA9\u1EAB\u1EA5\u1EAD\xE8\u1EC2\u1EBB\u1EBD\xE9\u1EB9\u1EC1\u1EC3\u1EC5\u1EBF\u1EC7\xEC\u1EC9\u1EC4\u1EBE\u1ED2\u0129\xED\u1ECB\xF2\u1ED4\u1ECF\xF5\xF3\u1ECD\u1ED3\u1ED5\u1ED7\u1ED1\u1ED9\u1EDD\u1EDF\u1EE1\u1EDB\u1EE3\xF9\u1ED6\u1EE7\u0169\xFA\u1EE5\u1EEB\u1EED\u1EEF\u1EE9\u1EF1\u1EF3\u1EF7\u1EF9\xFD\u1EF5\u1ED0`
    },
    georgianacademy: {
      type: "_sbcs",
      chars: "\x80\x81\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0160\u2039\u0152\x8D\x8E\x8F\x90\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\u0161\u203A\u0153\x9D\x9E\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\u10D0\u10D1\u10D2\u10D3\u10D4\u10D5\u10D6\u10D7\u10D8\u10D9\u10DA\u10DB\u10DC\u10DD\u10DE\u10DF\u10E0\u10E1\u10E2\u10E3\u10E4\u10E5\u10E6\u10E7\u10E8\u10E9\u10EA\u10EB\u10EC\u10ED\u10EE\u10EF\u10F0\u10F1\u10F2\u10F3\u10F4\u10F5\u10F6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
    },
    georgianps: {
      type: "_sbcs",
      chars: "\x80\x81\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0160\u2039\u0152\x8D\x8E\x8F\x90\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\u0161\u203A\u0153\x9D\x9E\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\u10D0\u10D1\u10D2\u10D3\u10D4\u10D5\u10D6\u10F1\u10D7\u10D8\u10D9\u10DA\u10DB\u10DC\u10F2\u10DD\u10DE\u10DF\u10E0\u10E1\u10E2\u10F3\u10E3\u10E4\u10E5\u10E6\u10E7\u10E8\u10E9\u10EA\u10EB\u10EC\u10ED\u10EE\u10F4\u10EF\u10F0\u10F5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
    },
    pt154: {
      type: "_sbcs",
      chars: "\u0496\u0492\u04EE\u0493\u201E\u2026\u04B6\u04AE\u04B2\u04AF\u04A0\u04E2\u04A2\u049A\u04BA\u04B8\u0497\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u04B3\u04B7\u04A1\u04E3\u04A3\u049B\u04BB\u04B9\xA0\u040E\u045E\u0408\u04E8\u0498\u04B0\xA7\u0401\xA9\u04D8\xAB\xAC\u04EF\xAE\u049C\xB0\u04B1\u0406\u0456\u0499\u04E9\xB6\xB7\u0451\u2116\u04D9\xBB\u0458\u04AA\u04AB\u049D\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F"
    },
    viscii: {
      type: "_sbcs",
      chars: `\0\x01\u1EB2\x03\x04\u1EB4\u1EAA\x07	
\r\x0E\x0F\x10\x11\x12\x13\u1EF6\x15\x16\x17\x18\u1EF8\x1A\x1B\x1C\x1D\u1EF4\x1F !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u1EA0\u1EAE\u1EB0\u1EB6\u1EA4\u1EA6\u1EA8\u1EAC\u1EBC\u1EB8\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EE2\u1EDA\u1EDC\u1EDE\u1ECA\u1ECE\u1ECC\u1EC8\u1EE6\u0168\u1EE4\u1EF2\xD5\u1EAF\u1EB1\u1EB7\u1EA5\u1EA7\u1EA9\u1EAD\u1EBD\u1EB9\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1ED1\u1ED3\u1ED5\u1ED7\u1EE0\u01A0\u1ED9\u1EDD\u1EDF\u1ECB\u1EF0\u1EE8\u1EEA\u1EEC\u01A1\u1EDB\u01AF\xC0\xC1\xC2\xC3\u1EA2\u0102\u1EB3\u1EB5\xC8\xC9\xCA\u1EBA\xCC\xCD\u0128\u1EF3\u0110\u1EE9\xD2\xD3\xD4\u1EA1\u1EF7\u1EEB\u1EED\xD9\xDA\u1EF9\u1EF5\xDD\u1EE1\u01B0\xE0\xE1\xE2\xE3\u1EA3\u0103\u1EEF\u1EAB\xE8\xE9\xEA\u1EBB\xEC\xED\u0129\u1EC9\u0111\u1EF1\xF2\xF3\xF4\xF5\u1ECF\u1ECD\u1EE5\xF9\xFA\u0169\u1EE7\xFD\u1EE3\u1EEE`
    },
    iso646cn: {
      type: "_sbcs",
      chars: `\0\x01\x02\x03\x04\x05\x06\x07	
\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !"#\xA5%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\`abcdefghijklmnopqrstuvwxyz{|}\u203E\x7F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD`
    },
    iso646jp: {
      type: "_sbcs",
      chars: `\0\x01\x02\x03\x04\x05\x06\x07	
\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\xA5]^_\`abcdefghijklmnopqrstuvwxyz{|}\u203E\x7F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD`
    },
    hproman8: {
      type: "_sbcs",
      chars: "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xC0\xC2\xC8\xCA\xCB\xCE\xCF\xB4\u02CB\u02C6\xA8\u02DC\xD9\xDB\u20A4\xAF\xDD\xFD\xB0\xC7\xE7\xD1\xF1\xA1\xBF\xA4\xA3\xA5\xA7\u0192\xA2\xE2\xEA\xF4\xFB\xE1\xE9\xF3\xFA\xE0\xE8\xF2\xF9\xE4\xEB\xF6\xFC\xC5\xEE\xD8\xC6\xE5\xED\xF8\xE6\xC4\xEC\xD6\xDC\xC9\xEF\xDF\xD4\xC1\xC3\xE3\xD0\xF0\xCD\xCC\xD3\xD2\xD5\xF5\u0160\u0161\xDA\u0178\xFF\xDE\xFE\xB7\xB5\xB6\xBE\u2014\xBC\xBD\xAA\xBA\xAB\u25A0\xBB\xB1\uFFFD"
    },
    macintosh: {
      type: "_sbcs",
      chars: "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\xA4\u2039\u203A\uFB01\uFB02\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7"
    },
    ascii: {
      type: "_sbcs",
      chars: "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"
    },
    tis620: {
      type: "_sbcs",
      chars: "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFFFD\uFFFD\uFFFD\uFFFD\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\uFFFD\uFFFD\uFFFD\uFFFD"
    }
  };
});

// node_modules/iconv-lite/encodings/dbcs-codec.js
var require_dbcs_codec = __commonJS((exports) => {
  var DBCSCodec = function(codecOptions, iconv) {
    this.encodingName = codecOptions.encodingName;
    if (!codecOptions)
      throw new Error("DBCS codec is called without the data.");
    if (!codecOptions.table)
      throw new Error("Encoding '" + this.encodingName + "' has no data.");
    var mappingTable = codecOptions.table();
    this.decodeTables = [];
    this.decodeTables[0] = UNASSIGNED_NODE.slice(0);
    this.decodeTableSeq = [];
    for (var i2 = 0;i2 < mappingTable.length; i2++)
      this._addDecodeChunk(mappingTable[i2]);
    this.defaultCharUnicode = iconv.defaultCharUnicode;
    this.encodeTable = [];
    this.encodeTableSeq = [];
    var skipEncodeChars = {};
    if (codecOptions.encodeSkipVals)
      for (var i2 = 0;i2 < codecOptions.encodeSkipVals.length; i2++) {
        var val = codecOptions.encodeSkipVals[i2];
        if (typeof val === "number")
          skipEncodeChars[val] = true;
        else
          for (var j = val.from;j <= val.to; j++)
            skipEncodeChars[j] = true;
      }
    this._fillEncodeTable(0, 0, skipEncodeChars);
    if (codecOptions.encodeAdd) {
      for (var uChar in codecOptions.encodeAdd)
        if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))
          this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);
    }
    this.defCharSB = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];
    if (this.defCharSB === UNASSIGNED)
      this.defCharSB = this.encodeTable[0]["?"];
    if (this.defCharSB === UNASSIGNED)
      this.defCharSB = "?".charCodeAt(0);
    if (typeof codecOptions.gb18030 === "function") {
      this.gb18030 = codecOptions.gb18030();
      var thirdByteNodeIdx = this.decodeTables.length;
      var thirdByteNode = this.decodeTables[thirdByteNodeIdx] = UNASSIGNED_NODE.slice(0);
      var fourthByteNodeIdx = this.decodeTables.length;
      var fourthByteNode = this.decodeTables[fourthByteNodeIdx] = UNASSIGNED_NODE.slice(0);
      for (var i2 = 129;i2 <= 254; i2++) {
        var secondByteNodeIdx = NODE_START - this.decodeTables[0][i2];
        var secondByteNode = this.decodeTables[secondByteNodeIdx];
        for (var j = 48;j <= 57; j++)
          secondByteNode[j] = NODE_START - thirdByteNodeIdx;
      }
      for (var i2 = 129;i2 <= 254; i2++)
        thirdByteNode[i2] = NODE_START - fourthByteNodeIdx;
      for (var i2 = 48;i2 <= 57; i2++)
        fourthByteNode[i2] = GB18030_CODE;
    }
  };
  var DBCSEncoder = function(options, codec) {
    this.leadSurrogate = -1;
    this.seqObj = undefined;
    this.encodeTable = codec.encodeTable;
    this.encodeTableSeq = codec.encodeTableSeq;
    this.defaultCharSingleByte = codec.defCharSB;
    this.gb18030 = codec.gb18030;
  };
  var DBCSDecoder = function(options, codec) {
    this.nodeIdx = 0;
    this.prevBuf = Buffer2.alloc(0);
    this.decodeTables = codec.decodeTables;
    this.decodeTableSeq = codec.decodeTableSeq;
    this.defaultCharUnicode = codec.defaultCharUnicode;
    this.gb18030 = codec.gb18030;
  };
  var findIdx = function(table, val) {
    if (table[0] > val)
      return -1;
    var l = 0, r = table.length;
    while (l < r - 1) {
      var mid = l + Math.floor((r - l + 1) / 2);
      if (table[mid] <= val)
        l = mid;
      else
        r = mid;
    }
    return l;
  };
  var Buffer2 = require_safer().Buffer;
  exports._dbcs = DBCSCodec;
  var UNASSIGNED = -1;
  var GB18030_CODE = -2;
  var SEQ_START = -10;
  var NODE_START = -1000;
  var UNASSIGNED_NODE = new Array(256);
  var DEF_CHAR = -1;
  for (i = 0;i < 256; i++)
    UNASSIGNED_NODE[i] = UNASSIGNED;
  var i;
  DBCSCodec.prototype.encoder = DBCSEncoder;
  DBCSCodec.prototype.decoder = DBCSDecoder;
  DBCSCodec.prototype._getDecodeTrieNode = function(addr) {
    var bytes = [];
    for (;addr > 0; addr >>= 8)
      bytes.push(addr & 255);
    if (bytes.length == 0)
      bytes.push(0);
    var node = this.decodeTables[0];
    for (var i2 = bytes.length - 1;i2 > 0; i2--) {
      var val = node[bytes[i2]];
      if (val == UNASSIGNED) {
        node[bytes[i2]] = NODE_START - this.decodeTables.length;
        this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));
      } else if (val <= NODE_START) {
        node = this.decodeTables[NODE_START - val];
      } else
        throw new Error("Overwrite byte in " + this.encodingName + ", addr: " + addr.toString(16));
    }
    return node;
  };
  DBCSCodec.prototype._addDecodeChunk = function(chunk) {
    var curAddr = parseInt(chunk[0], 16);
    var writeTable = this._getDecodeTrieNode(curAddr);
    curAddr = curAddr & 255;
    for (var k = 1;k < chunk.length; k++) {
      var part = chunk[k];
      if (typeof part === "string") {
        for (var l = 0;l < part.length; ) {
          var code = part.charCodeAt(l++);
          if (55296 <= code && code < 56320) {
            var codeTrail = part.charCodeAt(l++);
            if (56320 <= codeTrail && codeTrail < 57344)
              writeTable[curAddr++] = 65536 + (code - 55296) * 1024 + (codeTrail - 56320);
            else
              throw new Error("Incorrect surrogate pair in " + this.encodingName + " at chunk " + chunk[0]);
          } else if (4080 < code && code <= 4095) {
            var len = 4095 - code + 2;
            var seq = [];
            for (var m = 0;m < len; m++)
              seq.push(part.charCodeAt(l++));
            writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;
            this.decodeTableSeq.push(seq);
          } else
            writeTable[curAddr++] = code;
        }
      } else if (typeof part === "number") {
        var charCode = writeTable[curAddr - 1] + 1;
        for (var l = 0;l < part; l++)
          writeTable[curAddr++] = charCode++;
      } else
        throw new Error("Incorrect type '" + typeof part + "' given in " + this.encodingName + " at chunk " + chunk[0]);
    }
    if (curAddr > 255)
      throw new Error("Incorrect chunk in " + this.encodingName + " at addr " + chunk[0] + ": too long" + curAddr);
  };
  DBCSCodec.prototype._getEncodeBucket = function(uCode) {
    var high = uCode >> 8;
    if (this.encodeTable[high] === undefined)
      this.encodeTable[high] = UNASSIGNED_NODE.slice(0);
    return this.encodeTable[high];
  };
  DBCSCodec.prototype._setEncodeChar = function(uCode, dbcsCode) {
    var bucket = this._getEncodeBucket(uCode);
    var low = uCode & 255;
    if (bucket[low] <= SEQ_START)
      this.encodeTableSeq[SEQ_START - bucket[low]][DEF_CHAR] = dbcsCode;
    else if (bucket[low] == UNASSIGNED)
      bucket[low] = dbcsCode;
  };
  DBCSCodec.prototype._setEncodeSequence = function(seq, dbcsCode) {
    var uCode = seq[0];
    var bucket = this._getEncodeBucket(uCode);
    var low = uCode & 255;
    var node;
    if (bucket[low] <= SEQ_START) {
      node = this.encodeTableSeq[SEQ_START - bucket[low]];
    } else {
      node = {};
      if (bucket[low] !== UNASSIGNED)
        node[DEF_CHAR] = bucket[low];
      bucket[low] = SEQ_START - this.encodeTableSeq.length;
      this.encodeTableSeq.push(node);
    }
    for (var j = 1;j < seq.length - 1; j++) {
      var oldVal = node[uCode];
      if (typeof oldVal === "object")
        node = oldVal;
      else {
        node = node[uCode] = {};
        if (oldVal !== undefined)
          node[DEF_CHAR] = oldVal;
      }
    }
    uCode = seq[seq.length - 1];
    node[uCode] = dbcsCode;
  };
  DBCSCodec.prototype._fillEncodeTable = function(nodeIdx, prefix, skipEncodeChars) {
    var node = this.decodeTables[nodeIdx];
    for (var i2 = 0;i2 < 256; i2++) {
      var uCode = node[i2];
      var mbCode = prefix + i2;
      if (skipEncodeChars[mbCode])
        continue;
      if (uCode >= 0)
        this._setEncodeChar(uCode, mbCode);
      else if (uCode <= NODE_START)
        this._fillEncodeTable(NODE_START - uCode, mbCode << 8, skipEncodeChars);
      else if (uCode <= SEQ_START)
        this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);
    }
  };
  DBCSEncoder.prototype.write = function(str) {
    var newBuf = Buffer2.alloc(str.length * (this.gb18030 ? 4 : 3)), leadSurrogate = this.leadSurrogate, seqObj = this.seqObj, nextChar = -1, i2 = 0, j = 0;
    while (true) {
      if (nextChar === -1) {
        if (i2 == str.length)
          break;
        var uCode = str.charCodeAt(i2++);
      } else {
        var uCode = nextChar;
        nextChar = -1;
      }
      if (55296 <= uCode && uCode < 57344) {
        if (uCode < 56320) {
          if (leadSurrogate === -1) {
            leadSurrogate = uCode;
            continue;
          } else {
            leadSurrogate = uCode;
            uCode = UNASSIGNED;
          }
        } else {
          if (leadSurrogate !== -1) {
            uCode = 65536 + (leadSurrogate - 55296) * 1024 + (uCode - 56320);
            leadSurrogate = -1;
          } else {
            uCode = UNASSIGNED;
          }
        }
      } else if (leadSurrogate !== -1) {
        nextChar = uCode;
        uCode = UNASSIGNED;
        leadSurrogate = -1;
      }
      var dbcsCode = UNASSIGNED;
      if (seqObj !== undefined && uCode != UNASSIGNED) {
        var resCode = seqObj[uCode];
        if (typeof resCode === "object") {
          seqObj = resCode;
          continue;
        } else if (typeof resCode == "number") {
          dbcsCode = resCode;
        } else if (resCode == undefined) {
          resCode = seqObj[DEF_CHAR];
          if (resCode !== undefined) {
            dbcsCode = resCode;
            nextChar = uCode;
          } else {
          }
        }
        seqObj = undefined;
      } else if (uCode >= 0) {
        var subtable = this.encodeTable[uCode >> 8];
        if (subtable !== undefined)
          dbcsCode = subtable[uCode & 255];
        if (dbcsCode <= SEQ_START) {
          seqObj = this.encodeTableSeq[SEQ_START - dbcsCode];
          continue;
        }
        if (dbcsCode == UNASSIGNED && this.gb18030) {
          var idx = findIdx(this.gb18030.uChars, uCode);
          if (idx != -1) {
            var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);
            newBuf[j++] = 129 + Math.floor(dbcsCode / 12600);
            dbcsCode = dbcsCode % 12600;
            newBuf[j++] = 48 + Math.floor(dbcsCode / 1260);
            dbcsCode = dbcsCode % 1260;
            newBuf[j++] = 129 + Math.floor(dbcsCode / 10);
            dbcsCode = dbcsCode % 10;
            newBuf[j++] = 48 + dbcsCode;
            continue;
          }
        }
      }
      if (dbcsCode === UNASSIGNED)
        dbcsCode = this.defaultCharSingleByte;
      if (dbcsCode < 256) {
        newBuf[j++] = dbcsCode;
      } else if (dbcsCode < 65536) {
        newBuf[j++] = dbcsCode >> 8;
        newBuf[j++] = dbcsCode & 255;
      } else {
        newBuf[j++] = dbcsCode >> 16;
        newBuf[j++] = dbcsCode >> 8 & 255;
        newBuf[j++] = dbcsCode & 255;
      }
    }
    this.seqObj = seqObj;
    this.leadSurrogate = leadSurrogate;
    return newBuf.slice(0, j);
  };
  DBCSEncoder.prototype.end = function() {
    if (this.leadSurrogate === -1 && this.seqObj === undefined)
      return;
    var newBuf = Buffer2.alloc(10), j = 0;
    if (this.seqObj) {
      var dbcsCode = this.seqObj[DEF_CHAR];
      if (dbcsCode !== undefined) {
        if (dbcsCode < 256) {
          newBuf[j++] = dbcsCode;
        } else {
          newBuf[j++] = dbcsCode >> 8;
          newBuf[j++] = dbcsCode & 255;
        }
      } else {
      }
      this.seqObj = undefined;
    }
    if (this.leadSurrogate !== -1) {
      newBuf[j++] = this.defaultCharSingleByte;
      this.leadSurrogate = -1;
    }
    return newBuf.slice(0, j);
  };
  DBCSEncoder.prototype.findIdx = findIdx;
  DBCSDecoder.prototype.write = function(buf) {
    var newBuf = Buffer2.alloc(buf.length * 2), nodeIdx = this.nodeIdx, prevBuf = this.prevBuf, prevBufOffset = this.prevBuf.length, seqStart = -this.prevBuf.length, uCode;
    if (prevBufOffset > 0)
      prevBuf = Buffer2.concat([prevBuf, buf.slice(0, 10)]);
    for (var i2 = 0, j = 0;i2 < buf.length; i2++) {
      var curByte = i2 >= 0 ? buf[i2] : prevBuf[i2 + prevBufOffset];
      var uCode = this.decodeTables[nodeIdx][curByte];
      if (uCode >= 0) {
      } else if (uCode === UNASSIGNED) {
        i2 = seqStart;
        uCode = this.defaultCharUnicode.charCodeAt(0);
      } else if (uCode === GB18030_CODE) {
        var curSeq = seqStart >= 0 ? buf.slice(seqStart, i2 + 1) : prevBuf.slice(seqStart + prevBufOffset, i2 + 1 + prevBufOffset);
        var ptr = (curSeq[0] - 129) * 12600 + (curSeq[1] - 48) * 1260 + (curSeq[2] - 129) * 10 + (curSeq[3] - 48);
        var idx = findIdx(this.gb18030.gbChars, ptr);
        uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];
      } else if (uCode <= NODE_START) {
        nodeIdx = NODE_START - uCode;
        continue;
      } else if (uCode <= SEQ_START) {
        var seq = this.decodeTableSeq[SEQ_START - uCode];
        for (var k = 0;k < seq.length - 1; k++) {
          uCode = seq[k];
          newBuf[j++] = uCode & 255;
          newBuf[j++] = uCode >> 8;
        }
        uCode = seq[seq.length - 1];
      } else
        throw new Error("iconv-lite internal error: invalid decoding table value " + uCode + " at " + nodeIdx + "/" + curByte);
      if (uCode > 65535) {
        uCode -= 65536;
        var uCodeLead = 55296 + Math.floor(uCode / 1024);
        newBuf[j++] = uCodeLead & 255;
        newBuf[j++] = uCodeLead >> 8;
        uCode = 56320 + uCode % 1024;
      }
      newBuf[j++] = uCode & 255;
      newBuf[j++] = uCode >> 8;
      nodeIdx = 0;
      seqStart = i2 + 1;
    }
    this.nodeIdx = nodeIdx;
    this.prevBuf = seqStart >= 0 ? buf.slice(seqStart) : prevBuf.slice(seqStart + prevBufOffset);
    return newBuf.slice(0, j).toString("ucs2");
  };
  DBCSDecoder.prototype.end = function() {
    var ret = "";
    while (this.prevBuf.length > 0) {
      ret += this.defaultCharUnicode;
      var buf = this.prevBuf.slice(1);
      this.prevBuf = Buffer2.alloc(0);
      this.nodeIdx = 0;
      if (buf.length > 0)
        ret += this.write(buf);
    }
    this.nodeIdx = 0;
    return ret;
  };
});

// node_modules/iconv-lite/encodings/tables/shiftjis.json
var require_shiftjis = __commonJS((exports, module) => {
  module.exports = [
    ["0", " ", 128],
    ["a1", "｡", 62],
    ["8140", "　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈", 9, "＋－±×"],
    ["8180", "÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇◆□■△▲▽▼※〒→←↑↓〓"],
    ["81b8", "∈∋⊆⊇⊂⊃∪∩"],
    ["81c8", "∧∨￢⇒⇔∀∃"],
    ["81da", "∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"],
    ["81f0", "Å‰♯♭♪†‡¶"],
    ["81fc", "◯"],
    ["824f", "０", 9],
    ["8260", "Ａ", 25],
    ["8281", "ａ", 25],
    ["829f", "ぁ", 82],
    ["8340", "ァ", 62],
    ["8380", "ム", 22],
    ["839f", "Α", 16, "Σ", 6],
    ["83bf", "α", 16, "σ", 6],
    ["8440", "А", 5, "ЁЖ", 25],
    ["8470", "а", 5, "ёж", 7],
    ["8480", "о", 17],
    ["849f", "─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"],
    ["8740", "①", 19, "Ⅰ", 9],
    ["875f", "㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"],
    ["877e", "㍻"],
    ["8780", "〝〟№㏍℡㊤", 4, "㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"],
    ["889f", "亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"],
    ["8940", "院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円"],
    ["8980", "園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"],
    ["8a40", "魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫"],
    ["8a80", "橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"],
    ["8b40", "機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救"],
    ["8b80", "朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"],
    ["8c40", "掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨"],
    ["8c80", "劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"],
    ["8d40", "后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降"],
    ["8d80", "項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"],
    ["8e40", "察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止"],
    ["8e80", "死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"],
    ["8f40", "宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳"],
    ["8f80", "準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"],
    ["9040", "拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨"],
    ["9080", "逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"],
    ["9140", "繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻"],
    ["9180", "操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"],
    ["9240", "叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄"],
    ["9280", "逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"],
    ["9340", "邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬"],
    ["9380", "凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"],
    ["9440", "如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅"],
    ["9480", "楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"],
    ["9540", "鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷"],
    ["9580", "斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"],
    ["9640", "法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆"],
    ["9680", "摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"],
    ["9740", "諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲"],
    ["9780", "沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"],
    ["9840", "蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"],
    ["989f", "弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"],
    ["9940", "僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭"],
    ["9980", "凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"],
    ["9a40", "咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸"],
    ["9a80", "噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"],
    ["9b40", "奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀"],
    ["9b80", "它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"],
    ["9c40", "廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠"],
    ["9c80", "怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"],
    ["9d40", "戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫"],
    ["9d80", "捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"],
    ["9e40", "曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎"],
    ["9e80", "梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"],
    ["9f40", "檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯"],
    ["9f80", "麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"],
    ["e040", "漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝"],
    ["e080", "烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"],
    ["e140", "瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿"],
    ["e180", "痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"],
    ["e240", "磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰"],
    ["e280", "窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"],
    ["e340", "紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷"],
    ["e380", "縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"],
    ["e440", "隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤"],
    ["e480", "艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"],
    ["e540", "蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬"],
    ["e580", "蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"],
    ["e640", "襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧"],
    ["e680", "諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"],
    ["e740", "蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜"],
    ["e780", "轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"],
    ["e840", "錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙"],
    ["e880", "閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"],
    ["e940", "顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃"],
    ["e980", "騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"],
    ["ea40", "鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯"],
    ["ea80", "黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠堯槇遙瑤凜熙"],
    ["ed40", "纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏"],
    ["ed80", "塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"],
    ["ee40", "犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙"],
    ["ee80", "蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"],
    ["eeef", "ⅰ", 9, "￢￤＇＂"],
    ["f040", "", 62],
    ["f080", "", 124],
    ["f140", "", 62],
    ["f180", "", 124],
    ["f240", "", 62],
    ["f280", "", 124],
    ["f340", "", 62],
    ["f380", "", 124],
    ["f440", "", 62],
    ["f480", "", 124],
    ["f540", "", 62],
    ["f580", "", 124],
    ["f640", "", 62],
    ["f680", "", 124],
    ["f740", "", 62],
    ["f780", "", 124],
    ["f840", "", 62],
    ["f880", "", 124],
    ["f940", ""],
    ["fa40", "ⅰ", 9, "Ⅰ", 9, "￢￤＇＂㈱№℡∵纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊"],
    ["fa80", "兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯"],
    ["fb40", "涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神"],
    ["fb80", "祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙"],
    ["fc40", "髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"]
  ];
});

// node_modules/iconv-lite/encodings/tables/eucjp.json
var require_eucjp = __commonJS((exports, module) => {
  module.exports = [
    ["0", " ", 127],
    ["8ea1", "｡", 62],
    ["a1a1", "　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈", 9, "＋－±×÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇"],
    ["a2a1", "◆□■△▲▽▼※〒→←↑↓〓"],
    ["a2ba", "∈∋⊆⊇⊂⊃∪∩"],
    ["a2ca", "∧∨￢⇒⇔∀∃"],
    ["a2dc", "∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"],
    ["a2f2", "Å‰♯♭♪†‡¶"],
    ["a2fe", "◯"],
    ["a3b0", "０", 9],
    ["a3c1", "Ａ", 25],
    ["a3e1", "ａ", 25],
    ["a4a1", "ぁ", 82],
    ["a5a1", "ァ", 85],
    ["a6a1", "Α", 16, "Σ", 6],
    ["a6c1", "α", 16, "σ", 6],
    ["a7a1", "А", 5, "ЁЖ", 25],
    ["a7d1", "а", 5, "ёж", 25],
    ["a8a1", "─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"],
    ["ada1", "①", 19, "Ⅰ", 9],
    ["adc0", "㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"],
    ["addf", "㍻〝〟№㏍℡㊤", 4, "㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"],
    ["b0a1", "亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"],
    ["b1a1", "院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応"],
    ["b2a1", "押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"],
    ["b3a1", "魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱"],
    ["b4a1", "粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"],
    ["b5a1", "機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京"],
    ["b6a1", "供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"],
    ["b7a1", "掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲"],
    ["b8a1", "検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"],
    ["b9a1", "后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込"],
    ["baa1", "此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"],
    ["bba1", "察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時"],
    ["bca1", "次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"],
    ["bda1", "宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償"],
    ["bea1", "勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"],
    ["bfa1", "拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾"],
    ["c0a1", "澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"],
    ["c1a1", "繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎"],
    ["c2a1", "臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"],
    ["c3a1", "叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵"],
    ["c4a1", "帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"],
    ["c5a1", "邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到"],
    ["c6a1", "董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"],
    ["c7a1", "如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦"],
    ["c8a1", "函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"],
    ["c9a1", "鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服"],
    ["caa1", "福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"],
    ["cba1", "法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満"],
    ["cca1", "漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"],
    ["cda1", "諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃"],
    ["cea1", "痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"],
    ["cfa1", "蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"],
    ["d0a1", "弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"],
    ["d1a1", "僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨"],
    ["d2a1", "辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"],
    ["d3a1", "咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉"],
    ["d4a1", "圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"],
    ["d5a1", "奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓"],
    ["d6a1", "屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"],
    ["d7a1", "廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚"],
    ["d8a1", "悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"],
    ["d9a1", "戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼"],
    ["daa1", "據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"],
    ["dba1", "曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍"],
    ["dca1", "棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"],
    ["dda1", "檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾"],
    ["dea1", "沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"],
    ["dfa1", "漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼"],
    ["e0a1", "燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"],
    ["e1a1", "瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰"],
    ["e2a1", "癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"],
    ["e3a1", "磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐"],
    ["e4a1", "筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"],
    ["e5a1", "紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺"],
    ["e6a1", "罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"],
    ["e7a1", "隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙"],
    ["e8a1", "茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"],
    ["e9a1", "蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙"],
    ["eaa1", "蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"],
    ["eba1", "襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫"],
    ["eca1", "譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"],
    ["eda1", "蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸"],
    ["eea1", "遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"],
    ["efa1", "錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞"],
    ["f0a1", "陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"],
    ["f1a1", "顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷"],
    ["f2a1", "髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"],
    ["f3a1", "鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠"],
    ["f4a1", "堯槇遙瑤凜熙"],
    ["f9a1", "纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德"],
    ["faa1", "忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"],
    ["fba1", "犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚"],
    ["fca1", "釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"],
    ["fcf1", "ⅰ", 9, "￢￤＇＂"],
    ["8fa2af", "˘ˇ¸˙˝¯˛˚～΄΅"],
    ["8fa2c2", "¡¦¿"],
    ["8fa2eb", "ºª©®™¤№"],
    ["8fa6e1", "ΆΈΉΊΪ"],
    ["8fa6e7", "Ό"],
    ["8fa6e9", "ΎΫ"],
    ["8fa6ec", "Ώ"],
    ["8fa6f1", "άέήίϊΐόςύϋΰώ"],
    ["8fa7c2", "Ђ", 10, "ЎЏ"],
    ["8fa7f2", "ђ", 10, "ўџ"],
    ["8fa9a1", "ÆĐ"],
    ["8fa9a4", "Ħ"],
    ["8fa9a6", "Ĳ"],
    ["8fa9a8", "ŁĿ"],
    ["8fa9ab", "ŊØŒ"],
    ["8fa9af", "ŦÞ"],
    ["8fa9c1", "æđðħıĳĸłŀŉŋøœßŧþ"],
    ["8faaa1", "ÁÀÄÂĂǍĀĄÅÃĆĈČÇĊĎÉÈËÊĚĖĒĘ"],
    ["8faaba", "ĜĞĢĠĤÍÌÏÎǏİĪĮĨĴĶĹĽĻŃŇŅÑÓÒÖÔǑŐŌÕŔŘŖŚŜŠŞŤŢÚÙÜÛŬǓŰŪŲŮŨǗǛǙǕŴÝŸŶŹŽŻ"],
    ["8faba1", "áàäâăǎāąåãćĉčçċďéèëêěėēęǵĝğ"],
    ["8fabbd", "ġĥíìïîǐ"],
    ["8fabc5", "īįĩĵķĺľļńňņñóòöôǒőōõŕřŗśŝšşťţúùüûŭǔűūųůũǘǜǚǖŵýÿŷźžż"],
    ["8fb0a1", "丂丄丅丌丒丟丣两丨丫丮丯丰丵乀乁乄乇乑乚乜乣乨乩乴乵乹乿亍亖亗亝亯亹仃仐仚仛仠仡仢仨仯仱仳仵份仾仿伀伂伃伈伋伌伒伕伖众伙伮伱你伳伵伷伹伻伾佀佂佈佉佋佌佒佔佖佘佟佣佪佬佮佱佷佸佹佺佽佾侁侂侄"],
    ["8fb1a1", "侅侉侊侌侎侐侒侓侔侗侙侚侞侟侲侷侹侻侼侽侾俀俁俅俆俈俉俋俌俍俏俒俜俠俢俰俲俼俽俿倀倁倄倇倊倌倎倐倓倗倘倛倜倝倞倢倧倮倰倲倳倵偀偁偂偅偆偊偌偎偑偒偓偗偙偟偠偢偣偦偧偪偭偰偱倻傁傃傄傆傊傎傏傐"],
    ["8fb2a1", "傒傓傔傖傛傜傞", 4, "傪傯傰傹傺傽僀僃僄僇僌僎僐僓僔僘僜僝僟僢僤僦僨僩僯僱僶僺僾儃儆儇儈儋儌儍儎僲儐儗儙儛儜儝儞儣儧儨儬儭儯儱儳儴儵儸儹兂兊兏兓兕兗兘兟兤兦兾冃冄冋冎冘冝冡冣冭冸冺冼冾冿凂"],
    ["8fb3a1", "凈减凑凒凓凕凘凞凢凥凮凲凳凴凷刁刂刅划刓刕刖刘刢刨刱刲刵刼剅剉剕剗剘剚剜剟剠剡剦剮剷剸剹劀劂劅劊劌劓劕劖劗劘劚劜劤劥劦劧劯劰劶劷劸劺劻劽勀勄勆勈勌勏勑勔勖勛勜勡勥勨勩勪勬勰勱勴勶勷匀匃匊匋"],
    ["8fb4a1", "匌匑匓匘匛匜匞匟匥匧匨匩匫匬匭匰匲匵匼匽匾卂卌卋卙卛卡卣卥卬卭卲卹卾厃厇厈厎厓厔厙厝厡厤厪厫厯厲厴厵厷厸厺厽叀叅叏叒叓叕叚叝叞叠另叧叵吂吓吚吡吧吨吪启吱吴吵呃呄呇呍呏呞呢呤呦呧呩呫呭呮呴呿"],
    ["8fb5a1", "咁咃咅咈咉咍咑咕咖咜咟咡咦咧咩咪咭咮咱咷咹咺咻咿哆哊响哎哠哪哬哯哶哼哾哿唀唁唅唈唉唌唍唎唕唪唫唲唵唶唻唼唽啁啇啉啊啍啐啑啘啚啛啞啠啡啤啦啿喁喂喆喈喎喏喑喒喓喔喗喣喤喭喲喿嗁嗃嗆嗉嗋嗌嗎嗑嗒"],
    ["8fb6a1", "嗓嗗嗘嗛嗞嗢嗩嗶嗿嘅嘈嘊嘍", 5, "嘙嘬嘰嘳嘵嘷嘹嘻嘼嘽嘿噀噁噃噄噆噉噋噍噏噔噞噠噡噢噣噦噩噭噯噱噲噵嚄嚅嚈嚋嚌嚕嚙嚚嚝嚞嚟嚦嚧嚨嚩嚫嚬嚭嚱嚳嚷嚾囅囉囊囋囏囐囌囍囙囜囝囟囡囤", 4, "囱囫园"],
    ["8fb7a1", "囶囷圁圂圇圊圌圑圕圚圛圝圠圢圣圤圥圩圪圬圮圯圳圴圽圾圿坅坆坌坍坒坢坥坧坨坫坭", 4, "坳坴坵坷坹坺坻坼坾垁垃垌垔垗垙垚垜垝垞垟垡垕垧垨垩垬垸垽埇埈埌埏埕埝埞埤埦埧埩埭埰埵埶埸埽埾埿堃堄堈堉埡"],
    ["8fb8a1", "堌堍堛堞堟堠堦堧堭堲堹堿塉塌塍塏塐塕塟塡塤塧塨塸塼塿墀墁墇墈墉墊墌墍墏墐墔墖墝墠墡墢墦墩墱墲壄墼壂壈壍壎壐壒壔壖壚壝壡壢壩壳夅夆夋夌夒夓夔虁夝夡夣夤夨夯夰夳夵夶夿奃奆奒奓奙奛奝奞奟奡奣奫奭"],
    ["8fb9a1", "奯奲奵奶她奻奼妋妌妎妒妕妗妟妤妧妭妮妯妰妳妷妺妼姁姃姄姈姊姍姒姝姞姟姣姤姧姮姯姱姲姴姷娀娄娌娍娎娒娓娞娣娤娧娨娪娭娰婄婅婇婈婌婐婕婞婣婥婧婭婷婺婻婾媋媐媓媖媙媜媞媟媠媢媧媬媱媲媳媵媸媺媻媿"],
    ["8fbaa1", "嫄嫆嫈嫏嫚嫜嫠嫥嫪嫮嫵嫶嫽嬀嬁嬈嬗嬴嬙嬛嬝嬡嬥嬭嬸孁孋孌孒孖孞孨孮孯孼孽孾孿宁宄宆宊宎宐宑宓宔宖宨宩宬宭宯宱宲宷宺宼寀寁寍寏寖", 4, "寠寯寱寴寽尌尗尞尟尣尦尩尫尬尮尰尲尵尶屙屚屜屢屣屧屨屩"],
    ["8fbba1", "屭屰屴屵屺屻屼屽岇岈岊岏岒岝岟岠岢岣岦岪岲岴岵岺峉峋峒峝峗峮峱峲峴崁崆崍崒崫崣崤崦崧崱崴崹崽崿嵂嵃嵆嵈嵕嵑嵙嵊嵟嵠嵡嵢嵤嵪嵭嵰嵹嵺嵾嵿嶁嶃嶈嶊嶒嶓嶔嶕嶙嶛嶟嶠嶧嶫嶰嶴嶸嶹巃巇巋巐巎巘巙巠巤"],
    ["8fbca1", "巩巸巹帀帇帍帒帔帕帘帟帠帮帨帲帵帾幋幐幉幑幖幘幛幜幞幨幪", 4, "幰庀庋庎庢庤庥庨庪庬庱庳庽庾庿廆廌廋廎廑廒廔廕廜廞廥廫异弆弇弈弎弙弜弝弡弢弣弤弨弫弬弮弰弴弶弻弽弿彀彄彅彇彍彐彔彘彛彠彣彤彧"],
    ["8fbda1", "彯彲彴彵彸彺彽彾徉徍徏徖徜徝徢徧徫徤徬徯徰徱徸忄忇忈忉忋忐", 4, "忞忡忢忨忩忪忬忭忮忯忲忳忶忺忼怇怊怍怓怔怗怘怚怟怤怭怳怵恀恇恈恉恌恑恔恖恗恝恡恧恱恾恿悂悆悈悊悎悑悓悕悘悝悞悢悤悥您悰悱悷"],
    ["8fbea1", "悻悾惂惄惈惉惊惋惎惏惔惕惙惛惝惞惢惥惲惵惸惼惽愂愇愊愌愐", 4, "愖愗愙愜愞愢愪愫愰愱愵愶愷愹慁慅慆慉慞慠慬慲慸慻慼慿憀憁憃憄憋憍憒憓憗憘憜憝憟憠憥憨憪憭憸憹憼懀懁懂懎懏懕懜懝懞懟懡懢懧懩懥"],
    ["8fbfa1", "懬懭懯戁戃戄戇戓戕戜戠戢戣戧戩戫戹戽扂扃扄扆扌扐扑扒扔扖扚扜扤扭扯扳扺扽抍抎抏抐抦抨抳抶抷抺抾抿拄拎拕拖拚拪拲拴拼拽挃挄挊挋挍挐挓挖挘挩挪挭挵挶挹挼捁捂捃捄捆捊捋捎捒捓捔捘捛捥捦捬捭捱捴捵"],
    ["8fc0a1", "捸捼捽捿掂掄掇掊掐掔掕掙掚掞掤掦掭掮掯掽揁揅揈揎揑揓揔揕揜揠揥揪揬揲揳揵揸揹搉搊搐搒搔搘搞搠搢搤搥搩搪搯搰搵搽搿摋摏摑摒摓摔摚摛摜摝摟摠摡摣摭摳摴摻摽撅撇撏撐撑撘撙撛撝撟撡撣撦撨撬撳撽撾撿"],
    ["8fc1a1", "擄擉擊擋擌擎擐擑擕擗擤擥擩擪擭擰擵擷擻擿攁攄攈攉攊攏攓攔攖攙攛攞攟攢攦攩攮攱攺攼攽敃敇敉敐敒敔敟敠敧敫敺敽斁斅斊斒斕斘斝斠斣斦斮斲斳斴斿旂旈旉旎旐旔旖旘旟旰旲旴旵旹旾旿昀昄昈昉昍昑昒昕昖昝"],
    ["8fc2a1", "昞昡昢昣昤昦昩昪昫昬昮昰昱昳昹昷晀晅晆晊晌晑晎晗晘晙晛晜晠晡曻晪晫晬晾晳晵晿晷晸晹晻暀晼暋暌暍暐暒暙暚暛暜暟暠暤暭暱暲暵暻暿曀曂曃曈曌曎曏曔曛曟曨曫曬曮曺朅朇朎朓朙朜朠朢朳朾杅杇杈杌杔杕杝"],
    ["8fc3a1", "杦杬杮杴杶杻极构枎枏枑枓枖枘枙枛枰枱枲枵枻枼枽柹柀柂柃柅柈柉柒柗柙柜柡柦柰柲柶柷桒栔栙栝栟栨栧栬栭栯栰栱栳栻栿桄桅桊桌桕桗桘桛桫桮", 4, "桵桹桺桻桼梂梄梆梈梖梘梚梜梡梣梥梩梪梮梲梻棅棈棌棏"],
    ["8fc4a1", "棐棑棓棖棙棜棝棥棨棪棫棬棭棰棱棵棶棻棼棽椆椉椊椐椑椓椖椗椱椳椵椸椻楂楅楉楎楗楛楣楤楥楦楨楩楬楰楱楲楺楻楿榀榍榒榖榘榡榥榦榨榫榭榯榷榸榺榼槅槈槑槖槗槢槥槮槯槱槳槵槾樀樁樃樏樑樕樚樝樠樤樨樰樲"],
    ["8fc5a1", "樴樷樻樾樿橅橆橉橊橎橐橑橒橕橖橛橤橧橪橱橳橾檁檃檆檇檉檋檑檛檝檞檟檥檫檯檰檱檴檽檾檿櫆櫉櫈櫌櫐櫔櫕櫖櫜櫝櫤櫧櫬櫰櫱櫲櫼櫽欂欃欆欇欉欏欐欑欗欛欞欤欨欫欬欯欵欶欻欿歆歊歍歒歖歘歝歠歧歫歮歰歵歽"],
    ["8fc6a1", "歾殂殅殗殛殟殠殢殣殨殩殬殭殮殰殸殹殽殾毃毄毉毌毖毚毡毣毦毧毮毱毷毹毿氂氄氅氉氍氎氐氒氙氟氦氧氨氬氮氳氵氶氺氻氿汊汋汍汏汒汔汙汛汜汫汭汯汴汶汸汹汻沅沆沇沉沔沕沗沘沜沟沰沲沴泂泆泍泏泐泑泒泔泖"],
    ["8fc7a1", "泚泜泠泧泩泫泬泮泲泴洄洇洊洎洏洑洓洚洦洧洨汧洮洯洱洹洼洿浗浞浟浡浥浧浯浰浼涂涇涑涒涔涖涗涘涪涬涴涷涹涽涿淄淈淊淎淏淖淛淝淟淠淢淥淩淯淰淴淶淼渀渄渞渢渧渲渶渹渻渼湄湅湈湉湋湏湑湒湓湔湗湜湝湞"],
    ["8fc8a1", "湢湣湨湳湻湽溍溓溙溠溧溭溮溱溳溻溿滀滁滃滇滈滊滍滎滏滫滭滮滹滻滽漄漈漊漌漍漖漘漚漛漦漩漪漯漰漳漶漻漼漭潏潑潒潓潗潙潚潝潞潡潢潨潬潽潾澃澇澈澋澌澍澐澒澓澔澖澚澟澠澥澦澧澨澮澯澰澵澶澼濅濇濈濊"],
    ["8fc9a1", "濚濞濨濩濰濵濹濼濽瀀瀅瀆瀇瀍瀗瀠瀣瀯瀴瀷瀹瀼灃灄灈灉灊灋灔灕灝灞灎灤灥灬灮灵灶灾炁炅炆炔", 4, "炛炤炫炰炱炴炷烊烑烓烔烕烖烘烜烤烺焃", 4, "焋焌焏焞焠焫焭焯焰焱焸煁煅煆煇煊煋煐煒煗煚煜煞煠"],
    ["8fcaa1", "煨煹熀熅熇熌熒熚熛熠熢熯熰熲熳熺熿燀燁燄燋燌燓燖燙燚燜燸燾爀爇爈爉爓爗爚爝爟爤爫爯爴爸爹牁牂牃牅牎牏牐牓牕牖牚牜牞牠牣牨牫牮牯牱牷牸牻牼牿犄犉犍犎犓犛犨犭犮犱犴犾狁狇狉狌狕狖狘狟狥狳狴狺狻"],
    ["8fcba1", "狾猂猄猅猇猋猍猒猓猘猙猞猢猤猧猨猬猱猲猵猺猻猽獃獍獐獒獖獘獝獞獟獠獦獧獩獫獬獮獯獱獷獹獼玀玁玃玅玆玎玐玓玕玗玘玜玞玟玠玢玥玦玪玫玭玵玷玹玼玽玿珅珆珉珋珌珏珒珓珖珙珝珡珣珦珧珩珴珵珷珹珺珻珽"],
    ["8fcca1", "珿琀琁琄琇琊琑琚琛琤琦琨", 9, "琹瑀瑃瑄瑆瑇瑋瑍瑑瑒瑗瑝瑢瑦瑧瑨瑫瑭瑮瑱瑲璀璁璅璆璇璉璏璐璑璒璘璙璚璜璟璠璡璣璦璨璩璪璫璮璯璱璲璵璹璻璿瓈瓉瓌瓐瓓瓘瓚瓛瓞瓟瓤瓨瓪瓫瓯瓴瓺瓻瓼瓿甆"],
    ["8fcda1", "甒甖甗甠甡甤甧甩甪甯甶甹甽甾甿畀畃畇畈畎畐畒畗畞畟畡畯畱畹", 5, "疁疅疐疒疓疕疙疜疢疤疴疺疿痀痁痄痆痌痎痏痗痜痟痠痡痤痧痬痮痯痱痹瘀瘂瘃瘄瘇瘈瘊瘌瘏瘒瘓瘕瘖瘙瘛瘜瘝瘞瘣瘥瘦瘩瘭瘲瘳瘵瘸瘹"],
    ["8fcea1", "瘺瘼癊癀癁癃癄癅癉癋癕癙癟癤癥癭癮癯癱癴皁皅皌皍皕皛皜皝皟皠皢", 6, "皪皭皽盁盅盉盋盌盎盔盙盠盦盨盬盰盱盶盹盼眀眆眊眎眒眔眕眗眙眚眜眢眨眭眮眯眴眵眶眹眽眾睂睅睆睊睍睎睏睒睖睗睜睞睟睠睢"],
    ["8fcfa1", "睤睧睪睬睰睲睳睴睺睽瞀瞄瞌瞍瞔瞕瞖瞚瞟瞢瞧瞪瞮瞯瞱瞵瞾矃矉矑矒矕矙矞矟矠矤矦矪矬矰矱矴矸矻砅砆砉砍砎砑砝砡砢砣砭砮砰砵砷硃硄硇硈硌硎硒硜硞硠硡硣硤硨硪确硺硾碊碏碔碘碡碝碞碟碤碨碬碭碰碱碲碳"],
    ["8fd0a1", "碻碽碿磇磈磉磌磎磒磓磕磖磤磛磟磠磡磦磪磲磳礀磶磷磺磻磿礆礌礐礚礜礞礟礠礥礧礩礭礱礴礵礻礽礿祄祅祆祊祋祏祑祔祘祛祜祧祩祫祲祹祻祼祾禋禌禑禓禔禕禖禘禛禜禡禨禩禫禯禱禴禸离秂秄秇秈秊秏秔秖秚秝秞"],
    ["8fd1a1", "秠秢秥秪秫秭秱秸秼稂稃稇稉稊稌稑稕稛稞稡稧稫稭稯稰稴稵稸稹稺穄穅穇穈穌穕穖穙穜穝穟穠穥穧穪穭穵穸穾窀窂窅窆窊窋窐窑窔窞窠窣窬窳窵窹窻窼竆竉竌竎竑竛竨竩竫竬竱竴竻竽竾笇笔笟笣笧笩笪笫笭笮笯笰"],
    ["8fd2a1", "笱笴笽笿筀筁筇筎筕筠筤筦筩筪筭筯筲筳筷箄箉箎箐箑箖箛箞箠箥箬箯箰箲箵箶箺箻箼箽篂篅篈篊篔篖篗篙篚篛篨篪篲篴篵篸篹篺篼篾簁簂簃簄簆簉簋簌簎簏簙簛簠簥簦簨簬簱簳簴簶簹簺籆籊籕籑籒籓籙", 5],
    ["8fd3a1", "籡籣籧籩籭籮籰籲籹籼籽粆粇粏粔粞粠粦粰粶粷粺粻粼粿糄糇糈糉糍糏糓糔糕糗糙糚糝糦糩糫糵紃紇紈紉紏紑紒紓紖紝紞紣紦紪紭紱紼紽紾絀絁絇絈絍絑絓絗絙絚絜絝絥絧絪絰絸絺絻絿綁綂綃綅綆綈綋綌綍綑綖綗綝"],
    ["8fd4a1", "綞綦綧綪綳綶綷綹緂", 4, "緌緍緎緗緙縀緢緥緦緪緫緭緱緵緶緹緺縈縐縑縕縗縜縝縠縧縨縬縭縯縳縶縿繄繅繇繎繐繒繘繟繡繢繥繫繮繯繳繸繾纁纆纇纊纍纑纕纘纚纝纞缼缻缽缾缿罃罄罇罏罒罓罛罜罝罡罣罤罥罦罭"],
    ["8fd5a1", "罱罽罾罿羀羋羍羏羐羑羖羗羜羡羢羦羪羭羴羼羿翀翃翈翎翏翛翟翣翥翨翬翮翯翲翺翽翾翿耇耈耊耍耎耏耑耓耔耖耝耞耟耠耤耦耬耮耰耴耵耷耹耺耼耾聀聄聠聤聦聭聱聵肁肈肎肜肞肦肧肫肸肹胈胍胏胒胔胕胗胘胠胭胮"],
    ["8fd6a1", "胰胲胳胶胹胺胾脃脋脖脗脘脜脞脠脤脧脬脰脵脺脼腅腇腊腌腒腗腠腡腧腨腩腭腯腷膁膐膄膅膆膋膎膖膘膛膞膢膮膲膴膻臋臃臅臊臎臏臕臗臛臝臞臡臤臫臬臰臱臲臵臶臸臹臽臿舀舃舏舓舔舙舚舝舡舢舨舲舴舺艃艄艅艆"],
    ["8fd7a1", "艋艎艏艑艖艜艠艣艧艭艴艻艽艿芀芁芃芄芇芉芊芎芑芔芖芘芚芛芠芡芣芤芧芨芩芪芮芰芲芴芷芺芼芾芿苆苐苕苚苠苢苤苨苪苭苯苶苷苽苾茀茁茇茈茊茋荔茛茝茞茟茡茢茬茭茮茰茳茷茺茼茽荂荃荄荇荍荎荑荕荖荗荰荸"],
    ["8fd8a1", "荽荿莀莂莄莆莍莒莔莕莘莙莛莜莝莦莧莩莬莾莿菀菇菉菏菐菑菔菝荓菨菪菶菸菹菼萁萆萊萏萑萕萙莭萯萹葅葇葈葊葍葏葑葒葖葘葙葚葜葠葤葥葧葪葰葳葴葶葸葼葽蒁蒅蒒蒓蒕蒞蒦蒨蒩蒪蒯蒱蒴蒺蒽蒾蓀蓂蓇蓈蓌蓏蓓"],
    ["8fd9a1", "蓜蓧蓪蓯蓰蓱蓲蓷蔲蓺蓻蓽蔂蔃蔇蔌蔎蔐蔜蔞蔢蔣蔤蔥蔧蔪蔫蔯蔳蔴蔶蔿蕆蕏", 4, "蕖蕙蕜", 6, "蕤蕫蕯蕹蕺蕻蕽蕿薁薅薆薉薋薌薏薓薘薝薟薠薢薥薧薴薶薷薸薼薽薾薿藂藇藊藋藎薭藘藚藟藠藦藨藭藳藶藼"],
    ["8fdaa1", "藿蘀蘄蘅蘍蘎蘐蘑蘒蘘蘙蘛蘞蘡蘧蘩蘶蘸蘺蘼蘽虀虂虆虒虓虖虗虘虙虝虠", 4, "虩虬虯虵虶虷虺蚍蚑蚖蚘蚚蚜蚡蚦蚧蚨蚭蚱蚳蚴蚵蚷蚸蚹蚿蛀蛁蛃蛅蛑蛒蛕蛗蛚蛜蛠蛣蛥蛧蚈蛺蛼蛽蜄蜅蜇蜋蜎蜏蜐蜓蜔蜙蜞蜟蜡蜣"],
    ["8fdba1", "蜨蜮蜯蜱蜲蜹蜺蜼蜽蜾蝀蝃蝅蝍蝘蝝蝡蝤蝥蝯蝱蝲蝻螃", 6, "螋螌螐螓螕螗螘螙螞螠螣螧螬螭螮螱螵螾螿蟁蟈蟉蟊蟎蟕蟖蟙蟚蟜蟟蟢蟣蟤蟪蟫蟭蟱蟳蟸蟺蟿蠁蠃蠆蠉蠊蠋蠐蠙蠒蠓蠔蠘蠚蠛蠜蠞蠟蠨蠭蠮蠰蠲蠵"],
    ["8fdca1", "蠺蠼衁衃衅衈衉衊衋衎衑衕衖衘衚衜衟衠衤衩衱衹衻袀袘袚袛袜袟袠袨袪袺袽袾裀裊", 4, "裑裒裓裛裞裧裯裰裱裵裷褁褆褍褎褏褕褖褘褙褚褜褠褦褧褨褰褱褲褵褹褺褾襀襂襅襆襉襏襒襗襚襛襜襡襢襣襫襮襰襳襵襺"],
    ["8fdda1", "襻襼襽覉覍覐覔覕覛覜覟覠覥覰覴覵覶覷覼觔", 4, "觥觩觫觭觱觳觶觹觽觿訄訅訇訏訑訒訔訕訞訠訢訤訦訫訬訯訵訷訽訾詀詃詅詇詉詍詎詓詖詗詘詜詝詡詥詧詵詶詷詹詺詻詾詿誀誃誆誋誏誐誒誖誗誙誟誧誩誮誯誳"],
    ["8fdea1", "誶誷誻誾諃諆諈諉諊諑諓諔諕諗諝諟諬諰諴諵諶諼諿謅謆謋謑謜謞謟謊謭謰謷謼譂", 4, "譈譒譓譔譙譍譞譣譭譶譸譹譼譾讁讄讅讋讍讏讔讕讜讞讟谸谹谽谾豅豇豉豋豏豑豓豔豗豘豛豝豙豣豤豦豨豩豭豳豵豶豻豾貆"],
    ["8fdfa1", "貇貋貐貒貓貙貛貜貤貹貺賅賆賉賋賏賖賕賙賝賡賨賬賯賰賲賵賷賸賾賿贁贃贉贒贗贛赥赩赬赮赿趂趄趈趍趐趑趕趞趟趠趦趫趬趯趲趵趷趹趻跀跅跆跇跈跊跎跑跔跕跗跙跤跥跧跬跰趼跱跲跴跽踁踄踅踆踋踑踔踖踠踡踢"],
    ["8fe0a1", "踣踦踧踱踳踶踷踸踹踽蹀蹁蹋蹍蹎蹏蹔蹛蹜蹝蹞蹡蹢蹩蹬蹭蹯蹰蹱蹹蹺蹻躂躃躉躐躒躕躚躛躝躞躢躧躩躭躮躳躵躺躻軀軁軃軄軇軏軑軔軜軨軮軰軱軷軹軺軭輀輂輇輈輏輐輖輗輘輞輠輡輣輥輧輨輬輭輮輴輵輶輷輺轀轁"],
    ["8fe1a1", "轃轇轏轑", 4, "轘轝轞轥辝辠辡辤辥辦辵辶辸达迀迁迆迊迋迍运迒迓迕迠迣迤迨迮迱迵迶迻迾适逄逈逌逘逛逨逩逯逪逬逭逳逴逷逿遃遄遌遛遝遢遦遧遬遰遴遹邅邈邋邌邎邐邕邗邘邙邛邠邡邢邥邰邲邳邴邶邽郌邾郃"],
    ["8fe2a1", "郄郅郇郈郕郗郘郙郜郝郟郥郒郶郫郯郰郴郾郿鄀鄄鄅鄆鄈鄍鄐鄔鄖鄗鄘鄚鄜鄞鄠鄥鄢鄣鄧鄩鄮鄯鄱鄴鄶鄷鄹鄺鄼鄽酃酇酈酏酓酗酙酚酛酡酤酧酭酴酹酺酻醁醃醅醆醊醎醑醓醔醕醘醞醡醦醨醬醭醮醰醱醲醳醶醻醼醽醿"],
    ["8fe3a1", "釂釃釅釓釔釗釙釚釞釤釥釩釪釬", 5, "釷釹釻釽鈀鈁鈄鈅鈆鈇鈉鈊鈌鈐鈒鈓鈖鈘鈜鈝鈣鈤鈥鈦鈨鈮鈯鈰鈳鈵鈶鈸鈹鈺鈼鈾鉀鉂鉃鉆鉇鉊鉍鉎鉏鉑鉘鉙鉜鉝鉠鉡鉥鉧鉨鉩鉮鉯鉰鉵", 4, "鉻鉼鉽鉿銈銉銊銍銎銒銗"],
    ["8fe4a1", "銙銟銠銤銥銧銨銫銯銲銶銸銺銻銼銽銿", 4, "鋅鋆鋇鋈鋋鋌鋍鋎鋐鋓鋕鋗鋘鋙鋜鋝鋟鋠鋡鋣鋥鋧鋨鋬鋮鋰鋹鋻鋿錀錂錈錍錑錔錕錜錝錞錟錡錤錥錧錩錪錳錴錶錷鍇鍈鍉鍐鍑鍒鍕鍗鍘鍚鍞鍤鍥鍧鍩鍪鍭鍯鍰鍱鍳鍴鍶"],
    ["8fe5a1", "鍺鍽鍿鎀鎁鎂鎈鎊鎋鎍鎏鎒鎕鎘鎛鎞鎡鎣鎤鎦鎨鎫鎴鎵鎶鎺鎩鏁鏄鏅鏆鏇鏉", 4, "鏓鏙鏜鏞鏟鏢鏦鏧鏹鏷鏸鏺鏻鏽鐁鐂鐄鐈鐉鐍鐎鐏鐕鐖鐗鐟鐮鐯鐱鐲鐳鐴鐻鐿鐽鑃鑅鑈鑊鑌鑕鑙鑜鑟鑡鑣鑨鑫鑭鑮鑯鑱鑲钄钃镸镹"],
    ["8fe6a1", "镾閄閈閌閍閎閝閞閟閡閦閩閫閬閴閶閺閽閿闆闈闉闋闐闑闒闓闙闚闝闞闟闠闤闦阝阞阢阤阥阦阬阱阳阷阸阹阺阼阽陁陒陔陖陗陘陡陮陴陻陼陾陿隁隂隃隄隉隑隖隚隝隟隤隥隦隩隮隯隳隺雊雒嶲雘雚雝雞雟雩雯雱雺霂"],
    ["8fe7a1", "霃霅霉霚霛霝霡霢霣霨霱霳靁靃靊靎靏靕靗靘靚靛靣靧靪靮靳靶靷靸靻靽靿鞀鞉鞕鞖鞗鞙鞚鞞鞟鞢鞬鞮鞱鞲鞵鞶鞸鞹鞺鞼鞾鞿韁韄韅韇韉韊韌韍韎韐韑韔韗韘韙韝韞韠韛韡韤韯韱韴韷韸韺頇頊頙頍頎頔頖頜頞頠頣頦"],
    ["8fe8a1", "頫頮頯頰頲頳頵頥頾顄顇顊顑顒顓顖顗顙顚顢顣顥顦顪顬颫颭颮颰颴颷颸颺颻颿飂飅飈飌飡飣飥飦飧飪飳飶餂餇餈餑餕餖餗餚餛餜餟餢餦餧餫餱", 4, "餹餺餻餼饀饁饆饇饈饍饎饔饘饙饛饜饞饟饠馛馝馟馦馰馱馲馵"],
    ["8fe9a1", "馹馺馽馿駃駉駓駔駙駚駜駞駧駪駫駬駰駴駵駹駽駾騂騃騄騋騌騐騑騖騞騠騢騣騤騧騭騮騳騵騶騸驇驁驄驊驋驌驎驑驔驖驝骪骬骮骯骲骴骵骶骹骻骾骿髁髃髆髈髎髐髒髕髖髗髛髜髠髤髥髧髩髬髲髳髵髹髺髽髿", 4],
    ["8feaa1", "鬄鬅鬈鬉鬋鬌鬍鬎鬐鬒鬖鬙鬛鬜鬠鬦鬫鬭鬳鬴鬵鬷鬹鬺鬽魈魋魌魕魖魗魛魞魡魣魥魦魨魪", 4, "魳魵魷魸魹魿鮀鮄鮅鮆鮇鮉鮊鮋鮍鮏鮐鮔鮚鮝鮞鮦鮧鮩鮬鮰鮱鮲鮷鮸鮻鮼鮾鮿鯁鯇鯈鯎鯐鯗鯘鯝鯟鯥鯧鯪鯫鯯鯳鯷鯸"],
    ["8feba1", "鯹鯺鯽鯿鰀鰂鰋鰏鰑鰖鰘鰙鰚鰜鰞鰢鰣鰦", 4, "鰱鰵鰶鰷鰽鱁鱃鱄鱅鱉鱊鱎鱏鱐鱓鱔鱖鱘鱛鱝鱞鱟鱣鱩鱪鱜鱫鱨鱮鱰鱲鱵鱷鱻鳦鳲鳷鳹鴋鴂鴑鴗鴘鴜鴝鴞鴯鴰鴲鴳鴴鴺鴼鵅鴽鵂鵃鵇鵊鵓鵔鵟鵣鵢鵥鵩鵪鵫鵰鵶鵷鵻"],
    ["8feca1", "鵼鵾鶃鶄鶆鶊鶍鶎鶒鶓鶕鶖鶗鶘鶡鶪鶬鶮鶱鶵鶹鶼鶿鷃鷇鷉鷊鷔鷕鷖鷗鷚鷞鷟鷠鷥鷧鷩鷫鷮鷰鷳鷴鷾鸊鸂鸇鸎鸐鸑鸒鸕鸖鸙鸜鸝鹺鹻鹼麀麂麃麄麅麇麎麏麖麘麛麞麤麨麬麮麯麰麳麴麵黆黈黋黕黟黤黧黬黭黮黰黱黲黵"],
    ["8feda1", "黸黿鼂鼃鼉鼏鼐鼑鼒鼔鼖鼗鼙鼚鼛鼟鼢鼦鼪鼫鼯鼱鼲鼴鼷鼹鼺鼼鼽鼿齁齃", 4, "齓齕齖齗齘齚齝齞齨齩齭", 4, "齳齵齺齽龏龐龑龒龔龖龗龞龡龢龣龥"]
  ];
});

// node_modules/iconv-lite/encodings/tables/cp936.json
var require_cp936 = __commonJS((exports, module) => {
  module.exports = [
    ["0", " ", 127, "€"],
    ["8140", "丂丄丅丆丏丒丗丟丠両丣並丩丮丯丱丳丵丷丼乀乁乂乄乆乊乑乕乗乚乛乢乣乤乥乧乨乪", 5, "乲乴", 9, "乿", 6, "亇亊"],
    ["8180", "亐亖亗亙亜亝亞亣亪亯亰亱亴亶亷亸亹亼亽亾仈仌仏仐仒仚仛仜仠仢仦仧仩仭仮仯仱仴仸仹仺仼仾伀伂", 6, "伋伌伒", 4, "伜伝伡伣伨伩伬伭伮伱伳伵伷伹伻伾", 4, "佄佅佇", 5, "佒佔佖佡佢佦佨佪佫佭佮佱佲併佷佸佹佺佽侀侁侂侅來侇侊侌侎侐侒侓侕侖侘侙侚侜侞侟価侢"],
    ["8240", "侤侫侭侰", 4, "侶", 8, "俀俁係俆俇俈俉俋俌俍俒", 4, "俙俛俠俢俤俥俧俫俬俰俲俴俵俶俷俹俻俼俽俿", 11],
    ["8280", "個倎倐們倓倕倖倗倛倝倞倠倢倣値倧倫倯", 10, "倻倽倿偀偁偂偄偅偆偉偊偋偍偐", 4, "偖偗偘偙偛偝", 7, "偦", 5, "偭", 8, "偸偹偺偼偽傁傂傃傄傆傇傉傊傋傌傎", 20, "傤傦傪傫傭", 4, "傳", 6, "傼"],
    ["8340", "傽", 17, "僐", 5, "僗僘僙僛", 10, "僨僩僪僫僯僰僱僲僴僶", 4, "僼", 9, "儈"],
    ["8380", "儉儊儌", 5, "儓", 13, "儢", 28, "兂兇兊兌兎兏児兒兓兗兘兙兛兝", 4, "兣兤兦內兩兪兯兲兺兾兿冃冄円冇冊冋冎冏冐冑冓冔冘冚冝冞冟冡冣冦", 4, "冭冮冴冸冹冺冾冿凁凂凃凅凈凊凍凎凐凒", 5],
    ["8440", "凘凙凚凜凞凟凢凣凥", 5, "凬凮凱凲凴凷凾刄刅刉刋刌刏刐刓刔刕刜刞刟刡刢刣別刦刧刪刬刯刱刲刴刵刼刾剄", 5, "剋剎剏剒剓剕剗剘"],
    ["8480", "剙剚剛剝剟剠剢剣剤剦剨剫剬剭剮剰剱剳", 9, "剾劀劃", 4, "劉", 6, "劑劒劔", 6, "劜劤劥劦劧劮劯劰労", 9, "勀勁勂勄勅勆勈勊勌勍勎勏勑勓勔動勗務", 5, "勠勡勢勣勥", 10, "勱", 7, "勻勼勽匁匂匃匄匇匉匊匋匌匎"],
    ["8540", "匑匒匓匔匘匛匜匞匟匢匤匥匧匨匩匫匬匭匯", 9, "匼匽區卂卄卆卋卌卍卐協単卙卛卝卥卨卪卬卭卲卶卹卻卼卽卾厀厁厃厇厈厊厎厏"],
    ["8580", "厐", 4, "厖厗厙厛厜厞厠厡厤厧厪厫厬厭厯", 6, "厷厸厹厺厼厽厾叀參", 4, "収叏叐叒叓叕叚叜叝叞叡叢叧叴叺叾叿吀吂吅吇吋吔吘吙吚吜吢吤吥吪吰吳吶吷吺吽吿呁呂呄呅呇呉呌呍呎呏呑呚呝", 4, "呣呥呧呩", 7, "呴呹呺呾呿咁咃咅咇咈咉咊咍咑咓咗咘咜咞咟咠咡"],
    ["8640", "咢咥咮咰咲咵咶咷咹咺咼咾哃哅哊哋哖哘哛哠", 4, "哫哬哯哰哱哴", 5, "哻哾唀唂唃唄唅唈唊", 4, "唒唓唕", 5, "唜唝唞唟唡唥唦"],
    ["8680", "唨唩唫唭唲唴唵唶唸唹唺唻唽啀啂啅啇啈啋", 4, "啑啒啓啔啗", 4, "啝啞啟啠啢啣啨啩啫啯", 5, "啹啺啽啿喅喆喌喍喎喐喒喓喕喖喗喚喛喞喠", 6, "喨", 8, "喲喴営喸喺喼喿", 4, "嗆嗇嗈嗊嗋嗎嗏嗐嗕嗗", 4, "嗞嗠嗢嗧嗩嗭嗮嗰嗱嗴嗶嗸", 4, "嗿嘂嘃嘄嘅"],
    ["8740", "嘆嘇嘊嘋嘍嘐", 7, "嘙嘚嘜嘝嘠嘡嘢嘥嘦嘨嘩嘪嘫嘮嘯嘰嘳嘵嘷嘸嘺嘼嘽嘾噀", 11, "噏", 4, "噕噖噚噛噝", 4],
    ["8780", "噣噥噦噧噭噮噯噰噲噳噴噵噷噸噹噺噽", 7, "嚇", 6, "嚐嚑嚒嚔", 14, "嚤", 10, "嚰", 6, "嚸嚹嚺嚻嚽", 12, "囋", 8, "囕囖囘囙囜団囥", 5, "囬囮囯囲図囶囷囸囻囼圀圁圂圅圇國", 6],
    ["8840", "園", 9, "圝圞圠圡圢圤圥圦圧圫圱圲圴", 4, "圼圽圿坁坃坄坅坆坈坉坋坒", 4, "坘坙坢坣坥坧坬坮坰坱坲坴坵坸坹坺坽坾坿垀"],
    ["8880", "垁垇垈垉垊垍", 4, "垔", 6, "垜垝垞垟垥垨垪垬垯垰垱垳垵垶垷垹", 8, "埄", 6, "埌埍埐埑埓埖埗埛埜埞埡埢埣埥", 7, "埮埰埱埲埳埵埶執埻埼埾埿堁堃堄堅堈堉堊堌堎堏堐堒堓堔堖堗堘堚堛堜堝堟堢堣堥", 4, "堫", 4, "報堲堳場堶", 7],
    ["8940", "堾", 5, "塅", 6, "塎塏塐塒塓塕塖塗塙", 4, "塟", 5, "塦", 4, "塭", 16, "塿墂墄墆墇墈墊墋墌"],
    ["8980", "墍", 4, "墔", 4, "墛墜墝墠", 7, "墪", 17, "墽墾墿壀壂壃壄壆", 10, "壒壓壔壖", 13, "壥", 5, "壭壯壱売壴壵壷壸壺", 7, "夃夅夆夈", 4, "夎夐夑夒夓夗夘夛夝夞夠夡夢夣夦夨夬夰夲夳夵夶夻"],
    ["8a40", "夽夾夿奀奃奅奆奊奌奍奐奒奓奙奛", 4, "奡奣奤奦", 12, "奵奷奺奻奼奾奿妀妅妉妋妌妎妏妐妑妔妕妘妚妛妜妝妟妠妡妢妦"],
    ["8a80", "妧妬妭妰妱妳", 5, "妺妼妽妿", 6, "姇姈姉姌姍姎姏姕姖姙姛姞", 4, "姤姦姧姩姪姫姭", 11, "姺姼姽姾娀娂娊娋娍娎娏娐娒娔娕娖娗娙娚娛娝娞娡娢娤娦娧娨娪", 6, "娳娵娷", 4, "娽娾娿婁", 4, "婇婈婋", 9, "婖婗婘婙婛", 5],
    ["8b40", "婡婣婤婥婦婨婩婫", 8, "婸婹婻婼婽婾媀", 17, "媓", 6, "媜", 13, "媫媬"],
    ["8b80", "媭", 4, "媴媶媷媹", 4, "媿嫀嫃", 5, "嫊嫋嫍", 4, "嫓嫕嫗嫙嫚嫛嫝嫞嫟嫢嫤嫥嫧嫨嫪嫬", 4, "嫲", 22, "嬊", 11, "嬘", 25, "嬳嬵嬶嬸", 7, "孁", 6],
    ["8c40", "孈", 7, "孒孖孞孠孡孧孨孫孭孮孯孲孴孶孷學孹孻孼孾孿宂宆宊宍宎宐宑宒宔宖実宧宨宩宬宭宮宯宱宲宷宺宻宼寀寁寃寈寉寊寋寍寎寏"],
    ["8c80", "寑寔", 8, "寠寢寣實寧審", 4, "寯寱", 6, "寽対尀専尃尅將專尋尌對導尐尒尓尗尙尛尞尟尠尡尣尦尨尩尪尫尭尮尯尰尲尳尵尶尷屃屄屆屇屌屍屒屓屔屖屗屘屚屛屜屝屟屢層屧", 6, "屰屲", 6, "屻屼屽屾岀岃", 4, "岉岊岋岎岏岒岓岕岝", 4, "岤", 4],
    ["8d40", "岪岮岯岰岲岴岶岹岺岻岼岾峀峂峃峅", 5, "峌", 5, "峓", 5, "峚", 6, "峢峣峧峩峫峬峮峯峱", 9, "峼", 4],
    ["8d80", "崁崄崅崈", 5, "崏", 4, "崕崗崘崙崚崜崝崟", 4, "崥崨崪崫崬崯", 4, "崵", 7, "崿", 7, "嵈嵉嵍", 10, "嵙嵚嵜嵞", 10, "嵪嵭嵮嵰嵱嵲嵳嵵", 12, "嶃", 21, "嶚嶛嶜嶞嶟嶠"],
    ["8e40", "嶡", 21, "嶸", 12, "巆", 6, "巎", 12, "巜巟巠巣巤巪巬巭"],
    ["8e80", "巰巵巶巸", 4, "巿帀帄帇帉帊帋帍帎帒帓帗帞", 7, "帨", 4, "帯帰帲", 4, "帹帺帾帿幀幁幃幆", 5, "幍", 6, "幖", 4, "幜幝幟幠幣", 14, "幵幷幹幾庁庂広庅庈庉庌庍庎庒庘庛庝庡庢庣庤庨", 4, "庮", 4, "庴庺庻庼庽庿", 6],
    ["8f40", "廆廇廈廋", 5, "廔廕廗廘廙廚廜", 11, "廩廫", 8, "廵廸廹廻廼廽弅弆弇弉弌弍弎弐弒弔弖弙弚弜弝弞弡弢弣弤"],
    ["8f80", "弨弫弬弮弰弲", 6, "弻弽弾弿彁", 14, "彑彔彙彚彛彜彞彟彠彣彥彧彨彫彮彯彲彴彵彶彸彺彽彾彿徃徆徍徎徏徑従徔徖徚徛徝從徟徠徢", 5, "復徫徬徯", 5, "徶徸徹徺徻徾", 4, "忇忈忊忋忎忓忔忕忚忛応忞忟忢忣忥忦忨忩忬忯忰忲忳忴忶忷忹忺忼怇"],
    ["9040", "怈怉怋怌怐怑怓怗怘怚怞怟怢怣怤怬怭怮怰", 4, "怶", 4, "怽怾恀恄", 6, "恌恎恏恑恓恔恖恗恘恛恜恞恟恠恡恥恦恮恱恲恴恵恷恾悀"],
    ["9080", "悁悂悅悆悇悈悊悋悎悏悐悑悓悕悗悘悙悜悞悡悢悤悥悧悩悪悮悰悳悵悶悷悹悺悽", 7, "惇惈惉惌", 4, "惒惓惔惖惗惙惛惞惡", 4, "惪惱惲惵惷惸惻", 4, "愂愃愄愅愇愊愋愌愐", 4, "愖愗愘愙愛愜愝愞愡愢愥愨愩愪愬", 18, "慀", 6],
    ["9140", "慇慉態慍慏慐慒慓慔慖", 6, "慞慟慠慡慣慤慥慦慩", 6, "慱慲慳慴慶慸", 18, "憌憍憏", 4, "憕"],
    ["9180", "憖", 6, "憞", 8, "憪憫憭", 9, "憸", 5, "憿懀懁懃", 4, "應懌", 4, "懓懕", 16, "懧", 13, "懶", 8, "戀", 5, "戇戉戓戔戙戜戝戞戠戣戦戧戨戩戫戭戯戰戱戲戵戶戸", 4, "扂扄扅扆扊"],
    ["9240", "扏扐払扖扗扙扚扜", 6, "扤扥扨扱扲扴扵扷扸扺扻扽抁抂抃抅抆抇抈抋", 5, "抔抙抜抝択抣抦抧抩抪抭抮抯抰抲抳抴抶抷抸抺抾拀拁"],
    ["9280", "拃拋拏拑拕拝拞拠拡拤拪拫拰拲拵拸拹拺拻挀挃挄挅挆挊挋挌挍挏挐挒挓挔挕挗挘挙挜挦挧挩挬挭挮挰挱挳", 5, "挻挼挾挿捀捁捄捇捈捊捑捒捓捔捖", 7, "捠捤捥捦捨捪捫捬捯捰捲捳捴捵捸捹捼捽捾捿掁掃掄掅掆掋掍掑掓掔掕掗掙", 6, "採掤掦掫掯掱掲掵掶掹掻掽掿揀"],
    ["9340", "揁揂揃揅揇揈揊揋揌揑揓揔揕揗", 6, "揟揢揤", 4, "揫揬揮揯揰揱揳揵揷揹揺揻揼揾搃搄搆", 4, "損搎搑搒搕", 5, "搝搟搢搣搤"],
    ["9380", "搥搧搨搩搫搮", 5, "搵", 4, "搻搼搾摀摂摃摉摋", 6, "摓摕摖摗摙", 4, "摟", 7, "摨摪摫摬摮", 9, "摻", 6, "撃撆撈", 8, "撓撔撗撘撚撛撜撝撟", 4, "撥撦撧撨撪撫撯撱撲撳撴撶撹撻撽撾撿擁擃擄擆", 6, "擏擑擓擔擕擖擙據"],
    ["9440", "擛擜擝擟擠擡擣擥擧", 24, "攁", 7, "攊", 7, "攓", 4, "攙", 8],
    ["9480", "攢攣攤攦", 4, "攬攭攰攱攲攳攷攺攼攽敀", 4, "敆敇敊敋敍敎敐敒敓敔敗敘敚敜敟敠敡敤敥敧敨敩敪敭敮敯敱敳敵敶數", 14, "斈斉斊斍斎斏斒斔斕斖斘斚斝斞斠斢斣斦斨斪斬斮斱", 7, "斺斻斾斿旀旂旇旈旉旊旍旐旑旓旔旕旘", 7, "旡旣旤旪旫"],
    ["9540", "旲旳旴旵旸旹旻", 4, "昁昄昅昇昈昉昋昍昐昑昒昖昗昘昚昛昜昞昡昢昣昤昦昩昪昫昬昮昰昲昳昷", 4, "昽昿晀時晄", 6, "晍晎晐晑晘"],
    ["9580", "晙晛晜晝晞晠晢晣晥晧晩", 4, "晱晲晳晵晸晹晻晼晽晿暀暁暃暅暆暈暉暊暋暍暎暏暐暒暓暔暕暘", 4, "暞", 8, "暩", 4, "暯", 4, "暵暶暷暸暺暻暼暽暿", 25, "曚曞", 7, "曧曨曪", 5, "曱曵曶書曺曻曽朁朂會"],
    ["9640", "朄朅朆朇朌朎朏朑朒朓朖朘朙朚朜朞朠", 5, "朧朩朮朰朲朳朶朷朸朹朻朼朾朿杁杄杅杇杊杋杍杒杔杕杗", 4, "杝杢杣杤杦杧杫杬杮東杴杶"],
    ["9680", "杸杹杺杻杽枀枂枃枅枆枈枊枌枍枎枏枑枒枓枔枖枙枛枟枠枡枤枦枩枬枮枱枲枴枹", 7, "柂柅", 9, "柕柖柗柛柟柡柣柤柦柧柨柪柫柭柮柲柵", 7, "柾栁栂栃栄栆栍栐栒栔栕栘", 4, "栞栟栠栢", 6, "栫", 6, "栴栵栶栺栻栿桇桋桍桏桒桖", 5],
    ["9740", "桜桝桞桟桪桬", 7, "桵桸", 8, "梂梄梇", 7, "梐梑梒梔梕梖梘", 9, "梣梤梥梩梪梫梬梮梱梲梴梶梷梸"],
    ["9780", "梹", 6, "棁棃", 5, "棊棌棎棏棐棑棓棔棖棗棙棛", 4, "棡棢棤", 9, "棯棲棳棴棶棷棸棻棽棾棿椀椂椃椄椆", 4, "椌椏椑椓", 11, "椡椢椣椥", 7, "椮椯椱椲椳椵椶椷椸椺椻椼椾楀楁楃", 16, "楕楖楘楙楛楜楟"],
    ["9840", "楡楢楤楥楧楨楩楪楬業楯楰楲", 4, "楺楻楽楾楿榁榃榅榊榋榌榎", 5, "榖榗榙榚榝", 9, "榩榪榬榮榯榰榲榳榵榶榸榹榺榼榽"],
    ["9880", "榾榿槀槂", 7, "構槍槏槑槒槓槕", 5, "槜槝槞槡", 11, "槮槯槰槱槳", 9, "槾樀", 9, "樋", 11, "標", 5, "樠樢", 5, "権樫樬樭樮樰樲樳樴樶", 6, "樿", 4, "橅橆橈", 7, "橑", 6, "橚"],
    ["9940", "橜", 4, "橢橣橤橦", 10, "橲", 6, "橺橻橽橾橿檁檂檃檅", 8, "檏檒", 4, "檘", 7, "檡", 5],
    ["9980", "檧檨檪檭", 114, "欥欦欨", 6],
    ["9a40", "欯欰欱欳欴欵欶欸欻欼欽欿歀歁歂歄歅歈歊歋歍", 11, "歚", 7, "歨歩歫", 13, "歺歽歾歿殀殅殈"],
    ["9a80", "殌殎殏殐殑殔殕殗殘殙殜", 4, "殢", 7, "殫", 7, "殶殸", 6, "毀毃毄毆", 4, "毌毎毐毑毘毚毜", 4, "毢", 7, "毬毭毮毰毱毲毴毶毷毸毺毻毼毾", 6, "氈", 4, "氎氒気氜氝氞氠氣氥氫氬氭氱氳氶氷氹氺氻氼氾氿汃汄汅汈汋", 4, "汑汒汓汖汘"],
    ["9b40", "汙汚汢汣汥汦汧汫", 4, "汱汳汵汷汸決汻汼汿沀沄沇沊沋沍沎沑沒沕沖沗沘沚沜沝沞沠沢沨沬沯沰沴沵沶沷沺泀況泂泃泆泇泈泋泍泎泏泑泒泘"],
    ["9b80", "泙泚泜泝泟泤泦泧泩泬泭泲泴泹泿洀洂洃洅洆洈洉洊洍洏洐洑洓洔洕洖洘洜洝洟", 5, "洦洨洩洬洭洯洰洴洶洷洸洺洿浀浂浄浉浌浐浕浖浗浘浛浝浟浡浢浤浥浧浨浫浬浭浰浱浲浳浵浶浹浺浻浽", 4, "涃涄涆涇涊涋涍涏涐涒涖", 4, "涜涢涥涬涭涰涱涳涴涶涷涹", 5, "淁淂淃淈淉淊"],
    ["9c40", "淍淎淏淐淒淓淔淕淗淚淛淜淟淢淣淥淧淨淩淪淭淯淰淲淴淵淶淸淺淽", 7, "渆渇済渉渋渏渒渓渕渘渙減渜渞渟渢渦渧渨渪測渮渰渱渳渵"],
    ["9c80", "渶渷渹渻", 7, "湅", 7, "湏湐湑湒湕湗湙湚湜湝湞湠", 10, "湬湭湯", 14, "満溁溂溄溇溈溊", 4, "溑", 6, "溙溚溛溝溞溠溡溣溤溦溨溩溫溬溭溮溰溳溵溸溹溼溾溿滀滃滄滅滆滈滉滊滌滍滎滐滒滖滘滙滛滜滝滣滧滪", 5],
    ["9d40", "滰滱滲滳滵滶滷滸滺", 7, "漃漄漅漇漈漊", 4, "漐漑漒漖", 9, "漡漢漣漥漦漧漨漬漮漰漲漴漵漷", 6, "漿潀潁潂"],
    ["9d80", "潃潄潅潈潉潊潌潎", 9, "潙潚潛潝潟潠潡潣潤潥潧", 5, "潯潰潱潳潵潶潷潹潻潽", 6, "澅澆澇澊澋澏", 12, "澝澞澟澠澢", 4, "澨", 10, "澴澵澷澸澺", 5, "濁濃", 5, "濊", 6, "濓", 10, "濟濢濣濤濥"],
    ["9e40", "濦", 7, "濰", 32, "瀒", 7, "瀜", 6, "瀤", 6],
    ["9e80", "瀫", 9, "瀶瀷瀸瀺", 17, "灍灎灐", 13, "灟", 11, "灮灱灲灳灴灷灹灺灻災炁炂炃炄炆炇炈炋炌炍炏炐炑炓炗炘炚炛炞", 12, "炰炲炴炵炶為炾炿烄烅烆烇烉烋", 12, "烚"],
    ["9f40", "烜烝烞烠烡烢烣烥烪烮烰", 6, "烸烺烻烼烾", 10, "焋", 4, "焑焒焔焗焛", 10, "焧", 7, "焲焳焴"],
    ["9f80", "焵焷", 13, "煆煇煈煉煋煍煏", 12, "煝煟", 4, "煥煩", 4, "煯煰煱煴煵煶煷煹煻煼煾", 5, "熅", 4, "熋熌熍熎熐熑熒熓熕熖熗熚", 4, "熡", 6, "熩熪熫熭", 5, "熴熶熷熸熺", 8, "燄", 9, "燏", 4],
    ["a040", "燖", 9, "燡燢燣燤燦燨", 5, "燯", 9, "燺", 11, "爇", 19],
    ["a080", "爛爜爞", 9, "爩爫爭爮爯爲爳爴爺爼爾牀", 6, "牉牊牋牎牏牐牑牓牔牕牗牘牚牜牞牠牣牤牥牨牪牫牬牭牰牱牳牴牶牷牸牻牼牽犂犃犅", 4, "犌犎犐犑犓", 11, "犠", 11, "犮犱犲犳犵犺", 6, "狅狆狇狉狊狋狌狏狑狓狔狕狖狘狚狛"],
    ["a1a1", "　、。·ˉˇ¨〃々—～‖…‘’“”〔〕〈", 7, "〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓"],
    ["a2a1", "ⅰ", 9],
    ["a2b1", "⒈", 19, "⑴", 19, "①", 9],
    ["a2e5", "㈠", 9],
    ["a2f1", "Ⅰ", 11],
    ["a3a1", "！＂＃￥％", 88, "￣"],
    ["a4a1", "ぁ", 82],
    ["a5a1", "ァ", 85],
    ["a6a1", "Α", 16, "Σ", 6],
    ["a6c1", "α", 16, "σ", 6],
    ["a6e0", "︵︶︹︺︿﹀︽︾﹁﹂﹃﹄"],
    ["a6ee", "︻︼︷︸︱"],
    ["a6f4", "︳︴"],
    ["a7a1", "А", 5, "ЁЖ", 25],
    ["a7d1", "а", 5, "ёж", 25],
    ["a840", "ˊˋ˙–―‥‵℅℉↖↗↘↙∕∟∣≒≦≧⊿═", 35, "▁", 6],
    ["a880", "█", 7, "▓▔▕▼▽◢◣◤◥☉⊕〒〝〞"],
    ["a8a1", "āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüêɑ"],
    ["a8bd", "ńň"],
    ["a8c0", "ɡ"],
    ["a8c5", "ㄅ", 36],
    ["a940", "〡", 8, "㊣㎎㎏㎜㎝㎞㎡㏄㏎㏑㏒㏕︰￢￤"],
    ["a959", "℡㈱"],
    ["a95c", "‐"],
    ["a960", "ー゛゜ヽヾ〆ゝゞ﹉", 9, "﹔﹕﹖﹗﹙", 8],
    ["a980", "﹢", 4, "﹨﹩﹪﹫"],
    ["a996", "〇"],
    ["a9a4", "─", 75],
    ["aa40", "狜狝狟狢", 5, "狪狫狵狶狹狽狾狿猀猂猄", 5, "猋猌猍猏猐猑猒猔猘猙猚猟猠猣猤猦猧猨猭猯猰猲猳猵猶猺猻猼猽獀", 8],
    ["aa80", "獉獊獋獌獎獏獑獓獔獕獖獘", 7, "獡", 10, "獮獰獱"],
    ["ab40", "獲", 11, "獿", 4, "玅玆玈玊玌玍玏玐玒玓玔玕玗玘玙玚玜玝玞玠玡玣", 5, "玪玬玭玱玴玵玶玸玹玼玽玾玿珁珃", 4],
    ["ab80", "珋珌珎珒", 6, "珚珛珜珝珟珡珢珣珤珦珨珪珫珬珮珯珰珱珳", 4],
    ["ac40", "珸", 10, "琄琇琈琋琌琍琎琑", 8, "琜", 5, "琣琤琧琩琫琭琯琱琲琷", 4, "琽琾琿瑀瑂", 11],
    ["ac80", "瑎", 6, "瑖瑘瑝瑠", 12, "瑮瑯瑱", 4, "瑸瑹瑺"],
    ["ad40", "瑻瑼瑽瑿璂璄璅璆璈璉璊璌璍璏璑", 10, "璝璟", 7, "璪", 15, "璻", 12],
    ["ad80", "瓈", 9, "瓓", 8, "瓝瓟瓡瓥瓧", 6, "瓰瓱瓲"],
    ["ae40", "瓳瓵瓸", 6, "甀甁甂甃甅", 7, "甎甐甒甔甕甖甗甛甝甞甠", 4, "甦甧甪甮甴甶甹甼甽甿畁畂畃畄畆畇畉畊畍畐畑畒畓畕畖畗畘"],
    ["ae80", "畝", 7, "畧畨畩畫", 6, "畳畵當畷畺", 4, "疀疁疂疄疅疇"],
    ["af40", "疈疉疊疌疍疎疐疓疕疘疛疜疞疢疦", 4, "疭疶疷疺疻疿痀痁痆痋痌痎痏痐痑痓痗痙痚痜痝痟痠痡痥痩痬痭痮痯痲痳痵痶痷痸痺痻痽痾瘂瘄瘆瘇"],
    ["af80", "瘈瘉瘋瘍瘎瘏瘑瘒瘓瘔瘖瘚瘜瘝瘞瘡瘣瘧瘨瘬瘮瘯瘱瘲瘶瘷瘹瘺瘻瘽癁療癄"],
    ["b040", "癅", 6, "癎", 5, "癕癗", 4, "癝癟癠癡癢癤", 6, "癬癭癮癰", 7, "癹発發癿皀皁皃皅皉皊皌皍皏皐皒皔皕皗皘皚皛"],
    ["b080", "皜", 7, "皥", 8, "皯皰皳皵", 9, "盀盁盃啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥"],
    ["b140", "盄盇盉盋盌盓盕盙盚盜盝盞盠", 4, "盦", 7, "盰盳盵盶盷盺盻盽盿眀眂眃眅眆眊県眎", 10, "眛眜眝眞眡眣眤眥眧眪眫"],
    ["b180", "眬眮眰", 4, "眹眻眽眾眿睂睄睅睆睈", 7, "睒", 7, "睜薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳"],
    ["b240", "睝睞睟睠睤睧睩睪睭", 11, "睺睻睼瞁瞂瞃瞆", 5, "瞏瞐瞓", 11, "瞡瞣瞤瞦瞨瞫瞭瞮瞯瞱瞲瞴瞶", 4],
    ["b280", "瞼瞾矀", 12, "矎", 8, "矘矙矚矝", 4, "矤病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖"],
    ["b340", "矦矨矪矯矰矱矲矴矵矷矹矺矻矼砃", 5, "砊砋砎砏砐砓砕砙砛砞砠砡砢砤砨砪砫砮砯砱砲砳砵砶砽砿硁硂硃硄硆硈硉硊硋硍硏硑硓硔硘硙硚"],
    ["b380", "硛硜硞", 11, "硯", 7, "硸硹硺硻硽", 6, "场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚"],
    ["b440", "碄碅碆碈碊碋碏碐碒碔碕碖碙碝碞碠碢碤碦碨", 7, "碵碶碷碸確碻碼碽碿磀磂磃磄磆磇磈磌磍磎磏磑磒磓磖磗磘磚", 9],
    ["b480", "磤磥磦磧磩磪磫磭", 4, "磳磵磶磸磹磻", 5, "礂礃礄礆", 6, "础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮"],
    ["b540", "礍", 5, "礔", 9, "礟", 4, "礥", 14, "礵", 4, "礽礿祂祃祄祅祇祊", 8, "祔祕祘祙祡祣"],
    ["b580", "祤祦祩祪祫祬祮祰", 6, "祹祻", 4, "禂禃禆禇禈禉禋禌禍禎禐禑禒怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠"],
    ["b640", "禓", 6, "禛", 11, "禨", 10, "禴", 4, "禼禿秂秄秅秇秈秊秌秎秏秐秓秔秖秗秙", 5, "秠秡秢秥秨秪"],
    ["b680", "秬秮秱", 6, "秹秺秼秾秿稁稄稅稇稈稉稊稌稏", 4, "稕稖稘稙稛稜丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二"],
    ["b740", "稝稟稡稢稤", 14, "稴稵稶稸稺稾穀", 5, "穇", 9, "穒", 4, "穘", 16],
    ["b780", "穩", 6, "穱穲穳穵穻穼穽穾窂窅窇窉窊窋窌窎窏窐窓窔窙窚窛窞窡窢贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服"],
    ["b840", "窣窤窧窩窪窫窮", 4, "窴", 10, "竀", 10, "竌", 9, "竗竘竚竛竜竝竡竢竤竧", 5, "竮竰竱竲竳"],
    ["b880", "竴", 4, "竻竼竾笀笁笂笅笇笉笌笍笎笐笒笓笖笗笘笚笜笝笟笡笢笣笧笩笭浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹"],
    ["b940", "笯笰笲笴笵笶笷笹笻笽笿", 5, "筆筈筊筍筎筓筕筗筙筜筞筟筡筣", 10, "筯筰筳筴筶筸筺筼筽筿箁箂箃箄箆", 6, "箎箏"],
    ["b980", "箑箒箓箖箘箙箚箛箞箟箠箣箤箥箮箯箰箲箳箵箶箷箹", 7, "篂篃範埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈"],
    ["ba40", "篅篈築篊篋篍篎篏篐篒篔", 4, "篛篜篞篟篠篢篣篤篧篨篩篫篬篭篯篰篲", 4, "篸篹篺篻篽篿", 7, "簈簉簊簍簎簐", 5, "簗簘簙"],
    ["ba80", "簚", 4, "簠", 5, "簨簩簫", 12, "簹", 5, "籂骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖"],
    ["bb40", "籃", 9, "籎", 36, "籵", 5, "籾", 9],
    ["bb80", "粈粊", 6, "粓粔粖粙粚粛粠粡粣粦粧粨粩粫粬粭粯粰粴", 4, "粺粻弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕"],
    ["bc40", "粿糀糂糃糄糆糉糋糎", 6, "糘糚糛糝糞糡", 6, "糩", 5, "糰", 7, "糹糺糼", 13, "紋", 5],
    ["bc80", "紑", 14, "紡紣紤紥紦紨紩紪紬紭紮細", 6, "肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件"],
    ["bd40", "紷", 54, "絯", 7],
    ["bd80", "絸", 32, "健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸"],
    ["be40", "継", 12, "綧", 6, "綯", 42],
    ["be80", "線", 32, "尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻"],
    ["bf40", "緻", 62],
    ["bf80", "縺縼", 4, "繂", 4, "繈", 21, "俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀"],
    ["c040", "繞", 35, "纃", 23, "纜纝纞"],
    ["c080", "纮纴纻纼绖绤绬绹缊缐缞缷缹缻", 6, "罃罆", 9, "罒罓馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐"],
    ["c140", "罖罙罛罜罝罞罠罣", 4, "罫罬罭罯罰罳罵罶罷罸罺罻罼罽罿羀羂", 7, "羋羍羏", 4, "羕", 4, "羛羜羠羢羣羥羦羨", 6, "羱"],
    ["c180", "羳", 4, "羺羻羾翀翂翃翄翆翇翈翉翋翍翏", 4, "翖翗翙", 5, "翢翣痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿"],
    ["c240", "翤翧翨翪翫翬翭翯翲翴", 6, "翽翾翿耂耇耈耉耊耎耏耑耓耚耛耝耞耟耡耣耤耫", 5, "耲耴耹耺耼耾聀聁聄聅聇聈聉聎聏聐聑聓聕聖聗"],
    ["c280", "聙聛", 13, "聫", 5, "聲", 11, "隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫"],
    ["c340", "聾肁肂肅肈肊肍", 5, "肔肕肗肙肞肣肦肧肨肬肰肳肵肶肸肹肻胅胇", 4, "胏", 6, "胘胟胠胢胣胦胮胵胷胹胻胾胿脀脁脃脄脅脇脈脋"],
    ["c380", "脌脕脗脙脛脜脝脟", 12, "脭脮脰脳脴脵脷脹", 4, "脿谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸"],
    ["c440", "腀", 5, "腇腉腍腎腏腒腖腗腘腛", 4, "腡腢腣腤腦腨腪腫腬腯腲腳腵腶腷腸膁膃", 4, "膉膋膌膍膎膐膒", 5, "膙膚膞", 4, "膤膥"],
    ["c480", "膧膩膫", 7, "膴", 5, "膼膽膾膿臄臅臇臈臉臋臍", 6, "摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁"],
    ["c540", "臔", 14, "臤臥臦臨臩臫臮", 4, "臵", 5, "臽臿舃與", 4, "舎舏舑舓舕", 5, "舝舠舤舥舦舧舩舮舲舺舼舽舿"],
    ["c580", "艀艁艂艃艅艆艈艊艌艍艎艐", 7, "艙艛艜艝艞艠", 7, "艩拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗"],
    ["c640", "艪艫艬艭艱艵艶艷艸艻艼芀芁芃芅芆芇芉芌芐芓芔芕芖芚芛芞芠芢芣芧芲芵芶芺芻芼芿苀苂苃苅苆苉苐苖苙苚苝苢苧苨苩苪苬苭苮苰苲苳苵苶苸"],
    ["c680", "苺苼", 4, "茊茋茍茐茒茓茖茘茙茝", 9, "茩茪茮茰茲茷茻茽啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐"],
    ["c740", "茾茿荁荂荄荅荈荊", 4, "荓荕", 4, "荝荢荰", 6, "荹荺荾", 6, "莇莈莊莋莌莍莏莐莑莔莕莖莗莙莚莝莟莡", 6, "莬莭莮"],
    ["c780", "莯莵莻莾莿菂菃菄菆菈菉菋菍菎菐菑菒菓菕菗菙菚菛菞菢菣菤菦菧菨菫菬菭恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠"],
    ["c840", "菮華菳", 4, "菺菻菼菾菿萀萂萅萇萈萉萊萐萒", 5, "萙萚萛萞", 5, "萩", 7, "萲", 5, "萹萺萻萾", 7, "葇葈葉"],
    ["c880", "葊", 6, "葒", 4, "葘葝葞葟葠葢葤", 4, "葪葮葯葰葲葴葷葹葻葼取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁"],
    ["c940", "葽", 4, "蒃蒄蒅蒆蒊蒍蒏", 7, "蒘蒚蒛蒝蒞蒟蒠蒢", 12, "蒰蒱蒳蒵蒶蒷蒻蒼蒾蓀蓂蓃蓅蓆蓇蓈蓋蓌蓎蓏蓒蓔蓕蓗"],
    ["c980", "蓘", 4, "蓞蓡蓢蓤蓧", 4, "蓭蓮蓯蓱", 10, "蓽蓾蔀蔁蔂伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳"],
    ["ca40", "蔃", 8, "蔍蔎蔏蔐蔒蔔蔕蔖蔘蔙蔛蔜蔝蔞蔠蔢", 8, "蔭", 9, "蔾", 4, "蕄蕅蕆蕇蕋", 10],
    ["ca80", "蕗蕘蕚蕛蕜蕝蕟", 4, "蕥蕦蕧蕩", 8, "蕳蕵蕶蕷蕸蕼蕽蕿薀薁省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱"],
    ["cb40", "薂薃薆薈", 6, "薐", 10, "薝", 6, "薥薦薧薩薫薬薭薱", 5, "薸薺", 6, "藂", 6, "藊", 4, "藑藒"],
    ["cb80", "藔藖", 5, "藝", 6, "藥藦藧藨藪", 14, "恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔"],
    ["cc40", "藹藺藼藽藾蘀", 4, "蘆", 10, "蘒蘓蘔蘕蘗", 15, "蘨蘪", 13, "蘹蘺蘻蘽蘾蘿虀"],
    ["cc80", "虁", 11, "虒虓處", 4, "虛虜虝號虠虡虣", 7, "獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃"],
    ["cd40", "虭虯虰虲", 6, "蚃", 6, "蚎", 4, "蚔蚖", 5, "蚞", 4, "蚥蚦蚫蚭蚮蚲蚳蚷蚸蚹蚻", 4, "蛁蛂蛃蛅蛈蛌蛍蛒蛓蛕蛖蛗蛚蛜"],
    ["cd80", "蛝蛠蛡蛢蛣蛥蛦蛧蛨蛪蛫蛬蛯蛵蛶蛷蛺蛻蛼蛽蛿蜁蜄蜅蜆蜋蜌蜎蜏蜐蜑蜔蜖汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威"],
    ["ce40", "蜙蜛蜝蜟蜠蜤蜦蜧蜨蜪蜫蜬蜭蜯蜰蜲蜳蜵蜶蜸蜹蜺蜼蜽蝀", 6, "蝊蝋蝍蝏蝐蝑蝒蝔蝕蝖蝘蝚", 5, "蝡蝢蝦", 7, "蝯蝱蝲蝳蝵"],
    ["ce80", "蝷蝸蝹蝺蝿螀螁螄螆螇螉螊螌螎", 4, "螔螕螖螘", 6, "螠", 4, "巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺"],
    ["cf40", "螥螦螧螩螪螮螰螱螲螴螶螷螸螹螻螼螾螿蟁", 4, "蟇蟈蟉蟌", 4, "蟔", 6, "蟜蟝蟞蟟蟡蟢蟣蟤蟦蟧蟨蟩蟫蟬蟭蟯", 9],
    ["cf80", "蟺蟻蟼蟽蟿蠀蠁蠂蠄", 5, "蠋", 7, "蠔蠗蠘蠙蠚蠜", 4, "蠣稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓"],
    ["d040", "蠤", 13, "蠳", 5, "蠺蠻蠽蠾蠿衁衂衃衆", 5, "衎", 5, "衕衖衘衚", 6, "衦衧衪衭衯衱衳衴衵衶衸衹衺"],
    ["d080", "衻衼袀袃袆袇袉袊袌袎袏袐袑袓袔袕袗", 4, "袝", 4, "袣袥", 5, "小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄"],
    ["d140", "袬袮袯袰袲", 4, "袸袹袺袻袽袾袿裀裃裄裇裈裊裋裌裍裏裐裑裓裖裗裚", 4, "裠裡裦裧裩", 6, "裲裵裶裷裺裻製裿褀褁褃", 5],
    ["d180", "褉褋", 4, "褑褔", 4, "褜", 4, "褢褣褤褦褧褨褩褬褭褮褯褱褲褳褵褷选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶"],
    ["d240", "褸", 8, "襂襃襅", 24, "襠", 5, "襧", 19, "襼"],
    ["d280", "襽襾覀覂覄覅覇", 26, "摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐"],
    ["d340", "覢", 30, "觃觍觓觔觕觗觘觙觛觝觟觠觡觢觤觧觨觩觪觬觭觮觰觱觲觴", 6],
    ["d380", "觻", 4, "訁", 5, "計", 21, "印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉"],
    ["d440", "訞", 31, "訿", 8, "詉", 21],
    ["d480", "詟", 25, "詺", 6, "浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧"],
    ["d540", "誁", 7, "誋", 7, "誔", 46],
    ["d580", "諃", 32, "铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政"],
    ["d640", "諤", 34, "謈", 27],
    ["d680", "謤謥謧", 30, "帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑"],
    ["d740", "譆", 31, "譧", 4, "譭", 25],
    ["d780", "讇", 24, "讬讱讻诇诐诪谉谞住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座"],
    ["d840", "谸", 8, "豂豃豄豅豈豊豋豍", 7, "豖豗豘豙豛", 5, "豣", 6, "豬", 6, "豴豵豶豷豻", 6, "貃貄貆貇"],
    ["d880", "貈貋貍", 6, "貕貖貗貙", 20, "亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝"],
    ["d940", "貮", 62],
    ["d980", "賭", 32, "佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼"],
    ["da40", "贎", 14, "贠赑赒赗赟赥赨赩赪赬赮赯赱赲赸", 8, "趂趃趆趇趈趉趌", 4, "趒趓趕", 9, "趠趡"],
    ["da80", "趢趤", 12, "趲趶趷趹趻趽跀跁跂跅跇跈跉跊跍跐跒跓跔凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺"],
    ["db40", "跕跘跙跜跠跡跢跥跦跧跩跭跮跰跱跲跴跶跼跾", 6, "踆踇踈踋踍踎踐踑踒踓踕", 7, "踠踡踤", 4, "踫踭踰踲踳踴踶踷踸踻踼踾"],
    ["db80", "踿蹃蹅蹆蹌", 4, "蹓", 5, "蹚", 11, "蹧蹨蹪蹫蹮蹱邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝"],
    ["dc40", "蹳蹵蹷", 4, "蹽蹾躀躂躃躄躆躈", 6, "躑躒躓躕", 6, "躝躟", 11, "躭躮躰躱躳", 6, "躻", 7],
    ["dc80", "軃", 10, "軏", 21, "堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥"],
    ["dd40", "軥", 62],
    ["dd80", "輤", 32, "荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺"],
    ["de40", "轅", 32, "轪辀辌辒辝辠辡辢辤辥辦辧辪辬辭辮辯農辳辴辵辷辸辺辻込辿迀迃迆"],
    ["de80", "迉", 4, "迏迒迖迗迚迠迡迣迧迬迯迱迲迴迵迶迺迻迼迾迿逇逈逌逎逓逕逘蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖"],
    ["df40", "這逜連逤逥逧", 5, "逰", 4, "逷逹逺逽逿遀遃遅遆遈", 4, "過達違遖遙遚遜", 5, "遤遦遧適遪遫遬遯", 4, "遶", 6, "遾邁"],
    ["df80", "還邅邆邇邉邊邌", 4, "邒邔邖邘邚邜邞邟邠邤邥邧邨邩邫邭邲邷邼邽邿郀摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼"],
    ["e040", "郂郃郆郈郉郋郌郍郒郔郕郖郘郙郚郞郟郠郣郤郥郩郪郬郮郰郱郲郳郵郶郷郹郺郻郼郿鄀鄁鄃鄅", 19, "鄚鄛鄜"],
    ["e080", "鄝鄟鄠鄡鄤", 10, "鄰鄲", 6, "鄺", 8, "酄唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼"],
    ["e140", "酅酇酈酑酓酔酕酖酘酙酛酜酟酠酦酧酨酫酭酳酺酻酼醀", 4, "醆醈醊醎醏醓", 6, "醜", 5, "醤", 5, "醫醬醰醱醲醳醶醷醸醹醻"],
    ["e180", "醼", 10, "釈釋釐釒", 9, "針", 8, "帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺"],
    ["e240", "釦", 62],
    ["e280", "鈥", 32, "狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧", 5, "饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂"],
    ["e340", "鉆", 45, "鉵", 16],
    ["e380", "銆", 7, "銏", 24, "恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾"],
    ["e440", "銨", 5, "銯", 24, "鋉", 31],
    ["e480", "鋩", 32, "洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑"],
    ["e540", "錊", 51, "錿", 10],
    ["e580", "鍊", 31, "鍫濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣"],
    ["e640", "鍬", 34, "鎐", 27],
    ["e680", "鎬", 29, "鏋鏌鏍妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩"],
    ["e740", "鏎", 7, "鏗", 54],
    ["e780", "鐎", 32, "纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡", 6, "缪缫缬缭缯", 4, "缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬"],
    ["e840", "鐯", 14, "鐿", 43, "鑬鑭鑮鑯"],
    ["e880", "鑰", 20, "钑钖钘铇铏铓铔铚铦铻锜锠琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹"],
    ["e940", "锧锳锽镃镈镋镕镚镠镮镴镵長", 7, "門", 42],
    ["e980", "閫", 32, "椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋"],
    ["ea40", "闌", 27, "闬闿阇阓阘阛阞阠阣", 6, "阫阬阭阯阰阷阸阹阺阾陁陃陊陎陏陑陒陓陖陗"],
    ["ea80", "陘陙陚陜陝陞陠陣陥陦陫陭", 4, "陳陸", 12, "隇隉隊辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰"],
    ["eb40", "隌階隑隒隓隕隖隚際隝", 9, "隨", 7, "隱隲隴隵隷隸隺隻隿雂雃雈雊雋雐雑雓雔雖", 9, "雡", 6, "雫"],
    ["eb80", "雬雭雮雰雱雲雴雵雸雺電雼雽雿霂霃霅霊霋霌霐霑霒霔霕霗", 4, "霝霟霠搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻"],
    ["ec40", "霡", 8, "霫霬霮霯霱霳", 4, "霺霻霼霽霿", 18, "靔靕靗靘靚靜靝靟靣靤靦靧靨靪", 7],
    ["ec80", "靲靵靷", 4, "靽", 7, "鞆", 4, "鞌鞎鞏鞐鞓鞕鞖鞗鞙", 4, "臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐"],
    ["ed40", "鞞鞟鞡鞢鞤", 6, "鞬鞮鞰鞱鞳鞵", 46],
    ["ed80", "韤韥韨韮", 4, "韴韷", 23, "怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨"],
    ["ee40", "頏", 62],
    ["ee80", "顎", 32, "睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶", 4, "钼钽钿铄铈", 6, "铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪"],
    ["ef40", "顯", 5, "颋颎颒颕颙颣風", 37, "飏飐飔飖飗飛飜飝飠", 4],
    ["ef80", "飥飦飩", 30, "铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒", 4, "锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤", 8, "镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔"],
    ["f040", "餈", 4, "餎餏餑", 28, "餯", 26],
    ["f080", "饊", 9, "饖", 12, "饤饦饳饸饹饻饾馂馃馉稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨", 4, "鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦", 6, "鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙"],
    ["f140", "馌馎馚", 10, "馦馧馩", 47],
    ["f180", "駙", 32, "瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃"],
    ["f240", "駺", 62],
    ["f280", "騹", 32, "颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒"],
    ["f340", "驚", 17, "驲骃骉骍骎骔骕骙骦骩", 6, "骲骳骴骵骹骻骽骾骿髃髄髆", 4, "髍髎髏髐髒體髕髖髗髙髚髛髜"],
    ["f380", "髝髞髠髢髣髤髥髧髨髩髪髬髮髰", 8, "髺髼", 6, "鬄鬅鬆蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋"],
    ["f440", "鬇鬉", 5, "鬐鬑鬒鬔", 10, "鬠鬡鬢鬤", 10, "鬰鬱鬳", 7, "鬽鬾鬿魀魆魊魋魌魎魐魒魓魕", 5],
    ["f480", "魛", 32, "簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤"],
    ["f540", "魼", 62],
    ["f580", "鮻", 32, "酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜"],
    ["f640", "鯜", 62],
    ["f680", "鰛", 32, "觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅", 5, "龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞", 5, "鲥", 4, "鲫鲭鲮鲰", 7, "鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋"],
    ["f740", "鰼", 62],
    ["f780", "鱻鱽鱾鲀鲃鲄鲉鲊鲌鲏鲓鲖鲗鲘鲙鲝鲪鲬鲯鲹鲾", 4, "鳈鳉鳑鳒鳚鳛鳠鳡鳌", 4, "鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄"],
    ["f840", "鳣", 62],
    ["f880", "鴢", 32],
    ["f940", "鵃", 62],
    ["f980", "鶂", 32],
    ["fa40", "鶣", 62],
    ["fa80", "鷢", 32],
    ["fb40", "鸃", 27, "鸤鸧鸮鸰鸴鸻鸼鹀鹍鹐鹒鹓鹔鹖鹙鹝鹟鹠鹡鹢鹥鹮鹯鹲鹴", 9, "麀"],
    ["fb80", "麁麃麄麅麆麉麊麌", 5, "麔", 8, "麞麠", 5, "麧麨麩麪"],
    ["fc40", "麫", 8, "麵麶麷麹麺麼麿", 4, "黅黆黇黈黊黋黌黐黒黓黕黖黗黙黚點黡黣黤黦黨黫黬黭黮黰", 8, "黺黽黿", 6],
    ["fc80", "鼆", 4, "鼌鼏鼑鼒鼔鼕鼖鼘鼚", 5, "鼡鼣", 8, "鼭鼮鼰鼱"],
    ["fd40", "鼲", 4, "鼸鼺鼼鼿", 4, "齅", 10, "齒", 38],
    ["fd80", "齹", 5, "龁龂龍", 11, "龜龝龞龡", 4, "郎凉秊裏隣"],
    ["fe40", "兀嗀﨎﨏﨑﨓﨔礼﨟蘒﨡﨣﨤﨧﨨﨩"]
  ];
});

// node_modules/iconv-lite/encodings/tables/gbk-added.json
var require_gbk_added = __commonJS((exports, module) => {
  module.exports = [
    ["a140", "", 62],
    ["a180", "", 32],
    ["a240", "", 62],
    ["a280", "", 32],
    ["a2ab", "", 5],
    ["a2e3", "€"],
    ["a2ef", ""],
    ["a2fd", ""],
    ["a340", "", 62],
    ["a380", "", 31, "　"],
    ["a440", "", 62],
    ["a480", "", 32],
    ["a4f4", "", 10],
    ["a540", "", 62],
    ["a580", "", 32],
    ["a5f7", "", 7],
    ["a640", "", 62],
    ["a680", "", 32],
    ["a6b9", "", 7],
    ["a6d9", "", 6],
    ["a6ec", ""],
    ["a6f3", ""],
    ["a6f6", "", 8],
    ["a740", "", 62],
    ["a780", "", 32],
    ["a7c2", "", 14],
    ["a7f2", "", 12],
    ["a896", "", 10],
    ["a8bc", ""],
    ["a8bf", "ǹ"],
    ["a8c1", ""],
    ["a8ea", "", 20],
    ["a958", ""],
    ["a95b", ""],
    ["a95d", ""],
    ["a989", "〾⿰", 11],
    ["a997", "", 12],
    ["a9f0", "", 14],
    ["aaa1", "", 93],
    ["aba1", "", 93],
    ["aca1", "", 93],
    ["ada1", "", 93],
    ["aea1", "", 93],
    ["afa1", "", 93],
    ["d7fa", "", 4],
    ["f8a1", "", 93],
    ["f9a1", "", 93],
    ["faa1", "", 93],
    ["fba1", "", 93],
    ["fca1", "", 93],
    ["fda1", "", 93],
    ["fe50", "⺁⺄㑳㑇⺈⺋㖞㘚㘎⺌⺗㥮㤘㧏㧟㩳㧐㭎㱮㳠⺧⺪䁖䅟⺮䌷⺳⺶⺷䎱䎬⺻䏝䓖䙡䙌"],
    ["fe80", "䜣䜩䝼䞍⻊䥇䥺䥽䦂䦃䦅䦆䦟䦛䦷䦶䲣䲟䲠䲡䱷䲢䴓", 6, "䶮", 93]
  ];
});

// node_modules/iconv-lite/encodings/tables/gb18030-ranges.json
var require_gb18030_ranges = __commonJS((exports, module) => {
  module.exports = { uChars: [128, 165, 169, 178, 184, 216, 226, 235, 238, 244, 248, 251, 253, 258, 276, 284, 300, 325, 329, 334, 364, 463, 465, 467, 469, 471, 473, 475, 477, 506, 594, 610, 712, 716, 730, 930, 938, 962, 970, 1026, 1104, 1106, 8209, 8215, 8218, 8222, 8231, 8241, 8244, 8246, 8252, 8365, 8452, 8454, 8458, 8471, 8482, 8556, 8570, 8596, 8602, 8713, 8720, 8722, 8726, 8731, 8737, 8740, 8742, 8748, 8751, 8760, 8766, 8777, 8781, 8787, 8802, 8808, 8816, 8854, 8858, 8870, 8896, 8979, 9322, 9372, 9548, 9588, 9616, 9622, 9634, 9652, 9662, 9672, 9676, 9680, 9702, 9735, 9738, 9793, 9795, 11906, 11909, 11913, 11917, 11928, 11944, 11947, 11951, 11956, 11960, 11964, 11979, 12284, 12292, 12312, 12319, 12330, 12351, 12436, 12447, 12535, 12543, 12586, 12842, 12850, 12964, 13200, 13215, 13218, 13253, 13263, 13267, 13270, 13384, 13428, 13727, 13839, 13851, 14617, 14703, 14801, 14816, 14964, 15183, 15471, 15585, 16471, 16736, 17208, 17325, 17330, 17374, 17623, 17997, 18018, 18212, 18218, 18301, 18318, 18760, 18811, 18814, 18820, 18823, 18844, 18848, 18872, 19576, 19620, 19738, 19887, 40870, 59244, 59336, 59367, 59413, 59417, 59423, 59431, 59437, 59443, 59452, 59460, 59478, 59493, 63789, 63866, 63894, 63976, 63986, 64016, 64018, 64021, 64025, 64034, 64037, 64042, 65074, 65093, 65107, 65112, 65127, 65132, 65375, 65510, 65536], gbChars: [0, 36, 38, 45, 50, 81, 89, 95, 96, 100, 103, 104, 105, 109, 126, 133, 148, 172, 175, 179, 208, 306, 307, 308, 309, 310, 311, 312, 313, 341, 428, 443, 544, 545, 558, 741, 742, 749, 750, 805, 819, 820, 7922, 7924, 7925, 7927, 7934, 7943, 7944, 7945, 7950, 8062, 8148, 8149, 8152, 8164, 8174, 8236, 8240, 8262, 8264, 8374, 8380, 8381, 8384, 8388, 8390, 8392, 8393, 8394, 8396, 8401, 8406, 8416, 8419, 8424, 8437, 8439, 8445, 8482, 8485, 8496, 8521, 8603, 8936, 8946, 9046, 9050, 9063, 9066, 9076, 9092, 9100, 9108, 9111, 9113, 9131, 9162, 9164, 9218, 9219, 11329, 11331, 11334, 11336, 11346, 11361, 11363, 11366, 11370, 11372, 11375, 11389, 11682, 11686, 11687, 11692, 11694, 11714, 11716, 11723, 11725, 11730, 11736, 11982, 11989, 12102, 12336, 12348, 12350, 12384, 12393, 12395, 12397, 12510, 12553, 12851, 12962, 12973, 13738, 13823, 13919, 13933, 14080, 14298, 14585, 14698, 15583, 15847, 16318, 16434, 16438, 16481, 16729, 17102, 17122, 17315, 17320, 17402, 17418, 17859, 17909, 17911, 17915, 17916, 17936, 17939, 17961, 18664, 18703, 18814, 18962, 19043, 33469, 33470, 33471, 33484, 33485, 33490, 33497, 33501, 33505, 33513, 33520, 33536, 33550, 37845, 37921, 37948, 38029, 38038, 38064, 38065, 38066, 38069, 38075, 38076, 38078, 39108, 39109, 39113, 39114, 39115, 39116, 39265, 39394, 189000] };
});

// node_modules/iconv-lite/encodings/tables/cp949.json
var require_cp949 = __commonJS((exports, module) => {
  module.exports = [
    ["0", " ", 127],
    ["8141", "갂갃갅갆갋", 4, "갘갞갟갡갢갣갥", 6, "갮갲갳갴"],
    ["8161", "갵갶갷갺갻갽갾갿걁", 9, "걌걎", 5, "걕"],
    ["8181", "걖걗걙걚걛걝", 18, "걲걳걵걶걹걻", 4, "겂겇겈겍겎겏겑겒겓겕", 6, "겞겢", 5, "겫겭겮겱", 6, "겺겾겿곀곂곃곅곆곇곉곊곋곍", 7, "곖곘", 7, "곢곣곥곦곩곫곭곮곲곴곷", 4, "곾곿괁괂괃괅괇", 4, "괎괐괒괓"],
    ["8241", "괔괕괖괗괙괚괛괝괞괟괡", 7, "괪괫괮", 5],
    ["8261", "괶괷괹괺괻괽", 6, "굆굈굊", 5, "굑굒굓굕굖굗"],
    ["8281", "굙", 7, "굢굤", 7, "굮굯굱굲굷굸굹굺굾궀궃", 4, "궊궋궍궎궏궑", 10, "궞", 5, "궥", 17, "궸", 7, "귂귃귅귆귇귉", 6, "귒귔", 7, "귝귞귟귡귢귣귥", 18],
    ["8341", "귺귻귽귾긂", 5, "긊긌긎", 5, "긕", 7],
    ["8361", "긝", 18, "긲긳긵긶긹긻긼"],
    ["8381", "긽긾긿깂깄깇깈깉깋깏깑깒깓깕깗", 4, "깞깢깣깤깦깧깪깫깭깮깯깱", 6, "깺깾", 5, "꺆", 5, "꺍", 46, "꺿껁껂껃껅", 6, "껎껒", 5, "껚껛껝", 8],
    ["8441", "껦껧껩껪껬껮", 5, "껵껶껷껹껺껻껽", 8],
    ["8461", "꼆꼉꼊꼋꼌꼎꼏꼑", 18],
    ["8481", "꼤", 7, "꼮꼯꼱꼳꼵", 6, "꼾꽀꽄꽅꽆꽇꽊", 5, "꽑", 10, "꽞", 5, "꽦", 18, "꽺", 5, "꾁꾂꾃꾅꾆꾇꾉", 6, "꾒꾓꾔꾖", 5, "꾝", 26, "꾺꾻꾽꾾"],
    ["8541", "꾿꿁", 5, "꿊꿌꿏", 4, "꿕", 6, "꿝", 4],
    ["8561", "꿢", 5, "꿪", 5, "꿲꿳꿵꿶꿷꿹", 6, "뀂뀃"],
    ["8581", "뀅", 6, "뀍뀎뀏뀑뀒뀓뀕", 6, "뀞", 9, "뀩", 26, "끆끇끉끋끍끏끐끑끒끖끘끚끛끜끞", 29, "끾끿낁낂낃낅", 6, "낎낐낒", 5, "낛낝낞낣낤"],
    ["8641", "낥낦낧낪낰낲낶낷낹낺낻낽", 6, "냆냊", 5, "냒"],
    ["8661", "냓냕냖냗냙", 6, "냡냢냣냤냦", 10],
    ["8681", "냱", 22, "넊넍넎넏넑넔넕넖넗넚넞", 4, "넦넧넩넪넫넭", 6, "넶넺", 5, "녂녃녅녆녇녉", 6, "녒녓녖녗녙녚녛녝녞녟녡", 22, "녺녻녽녾녿놁놃", 4, "놊놌놎놏놐놑놕놖놗놙놚놛놝"],
    ["8741", "놞", 9, "놩", 15],
    ["8761", "놹", 18, "뇍뇎뇏뇑뇒뇓뇕"],
    ["8781", "뇖", 5, "뇞뇠", 7, "뇪뇫뇭뇮뇯뇱", 7, "뇺뇼뇾", 5, "눆눇눉눊눍", 6, "눖눘눚", 5, "눡", 18, "눵", 6, "눽", 26, "뉙뉚뉛뉝뉞뉟뉡", 6, "뉪", 4],
    ["8841", "뉯", 4, "뉶", 5, "뉽", 6, "늆늇늈늊", 4],
    ["8861", "늏늒늓늕늖늗늛", 4, "늢늤늧늨늩늫늭늮늯늱늲늳늵늶늷"],
    ["8881", "늸", 15, "닊닋닍닎닏닑닓", 4, "닚닜닞닟닠닡닣닧닩닪닰닱닲닶닼닽닾댂댃댅댆댇댉", 6, "댒댖", 5, "댝", 54, "덗덙덚덝덠덡덢덣"],
    ["8941", "덦덨덪덬덭덯덲덳덵덶덷덹", 6, "뎂뎆", 5, "뎍"],
    ["8961", "뎎뎏뎑뎒뎓뎕", 10, "뎢", 5, "뎩뎪뎫뎭"],
    ["8981", "뎮", 21, "돆돇돉돊돍돏돑돒돓돖돘돚돜돞돟돡돢돣돥돦돧돩", 18, "돽", 18, "됑", 6, "됙됚됛됝됞됟됡", 6, "됪됬", 7, "됵", 15],
    ["8a41", "둅", 10, "둒둓둕둖둗둙", 6, "둢둤둦"],
    ["8a61", "둧", 4, "둭", 18, "뒁뒂"],
    ["8a81", "뒃", 4, "뒉", 19, "뒞", 5, "뒥뒦뒧뒩뒪뒫뒭", 7, "뒶뒸뒺", 5, "듁듂듃듅듆듇듉", 6, "듑듒듓듔듖", 5, "듞듟듡듢듥듧", 4, "듮듰듲", 5, "듹", 26, "딖딗딙딚딝"],
    ["8b41", "딞", 5, "딦딫", 4, "딲딳딵딶딷딹", 6, "땂땆"],
    ["8b61", "땇땈땉땊땎땏땑땒땓땕", 6, "땞땢", 8],
    ["8b81", "땫", 52, "떢떣떥떦떧떩떬떭떮떯떲떶", 4, "떾떿뗁뗂뗃뗅", 6, "뗎뗒", 5, "뗙", 18, "뗭", 18],
    ["8c41", "똀", 15, "똒똓똕똖똗똙", 4],
    ["8c61", "똞", 6, "똦", 5, "똭", 6, "똵", 5],
    ["8c81", "똻", 12, "뙉", 26, "뙥뙦뙧뙩", 50, "뚞뚟뚡뚢뚣뚥", 5, "뚭뚮뚯뚰뚲", 16],
    ["8d41", "뛃", 16, "뛕", 8],
    ["8d61", "뛞", 17, "뛱뛲뛳뛵뛶뛷뛹뛺"],
    ["8d81", "뛻", 4, "뜂뜃뜄뜆", 33, "뜪뜫뜭뜮뜱", 6, "뜺뜼", 7, "띅띆띇띉띊띋띍", 6, "띖", 9, "띡띢띣띥띦띧띩", 6, "띲띴띶", 5, "띾띿랁랂랃랅", 6, "랎랓랔랕랚랛랝랞"],
    ["8e41", "랟랡", 6, "랪랮", 5, "랶랷랹", 8],
    ["8e61", "럂", 4, "럈럊", 19],
    ["8e81", "럞", 13, "럮럯럱럲럳럵", 6, "럾렂", 4, "렊렋렍렎렏렑", 6, "렚렜렞", 5, "렦렧렩렪렫렭", 6, "렶렺", 5, "롁롂롃롅", 11, "롒롔", 7, "롞롟롡롢롣롥", 6, "롮롰롲", 5, "롹롺롻롽", 7],
    ["8f41", "뢅", 7, "뢎", 17],
    ["8f61", "뢠", 7, "뢩", 6, "뢱뢲뢳뢵뢶뢷뢹", 4],
    ["8f81", "뢾뢿룂룄룆", 5, "룍룎룏룑룒룓룕", 7, "룞룠룢", 5, "룪룫룭룮룯룱", 6, "룺룼룾", 5, "뤅", 18, "뤙", 6, "뤡", 26, "뤾뤿륁륂륃륅", 6, "륍륎륐륒", 5],
    ["9041", "륚륛륝륞륟륡", 6, "륪륬륮", 5, "륶륷륹륺륻륽"],
    ["9061", "륾", 5, "릆릈릋릌릏", 15],
    ["9081", "릟", 12, "릮릯릱릲릳릵", 6, "릾맀맂", 5, "맊맋맍맓", 4, "맚맜맟맠맢맦맧맩맪맫맭", 6, "맶맻", 4, "먂", 5, "먉", 11, "먖", 33, "먺먻먽먾먿멁멃멄멅멆"],
    ["9141", "멇멊멌멏멐멑멒멖멗멙멚멛멝", 6, "멦멪", 5],
    ["9161", "멲멳멵멶멷멹", 9, "몆몈몉몊몋몍", 5],
    ["9181", "몓", 20, "몪몭몮몯몱몳", 4, "몺몼몾", 5, "뫅뫆뫇뫉", 14, "뫚", 33, "뫽뫾뫿묁묂묃묅", 7, "묎묐묒", 5, "묙묚묛묝묞묟묡", 6],
    ["9241", "묨묪묬", 7, "묷묹묺묿", 4, "뭆뭈뭊뭋뭌뭎뭑뭒"],
    ["9261", "뭓뭕뭖뭗뭙", 7, "뭢뭤", 7, "뭭", 4],
    ["9281", "뭲", 21, "뮉뮊뮋뮍뮎뮏뮑", 18, "뮥뮦뮧뮩뮪뮫뮭", 6, "뮵뮶뮸", 7, "믁믂믃믅믆믇믉", 6, "믑믒믔", 35, "믺믻믽믾밁"],
    ["9341", "밃", 4, "밊밎밐밒밓밙밚밠밡밢밣밦밨밪밫밬밮밯밲밳밵"],
    ["9361", "밶밷밹", 6, "뱂뱆뱇뱈뱊뱋뱎뱏뱑", 8],
    ["9381", "뱚뱛뱜뱞", 37, "벆벇벉벊벍벏", 4, "벖벘벛", 4, "벢벣벥벦벩", 6, "벲벶", 5, "벾벿볁볂볃볅", 7, "볎볒볓볔볖볗볙볚볛볝", 22, "볷볹볺볻볽"],
    ["9441", "볾", 5, "봆봈봊", 5, "봑봒봓봕", 8],
    ["9461", "봞", 5, "봥", 6, "봭", 12],
    ["9481", "봺", 5, "뵁", 6, "뵊뵋뵍뵎뵏뵑", 6, "뵚", 9, "뵥뵦뵧뵩", 22, "붂붃붅붆붋", 4, "붒붔붖붗붘붛붝", 6, "붥", 10, "붱", 6, "붹", 24],
    ["9541", "뷒뷓뷖뷗뷙뷚뷛뷝", 11, "뷪", 5, "뷱"],
    ["9561", "뷲뷳뷵뷶뷷뷹", 6, "븁븂븄븆", 5, "븎븏븑븒븓"],
    ["9581", "븕", 6, "븞븠", 35, "빆빇빉빊빋빍빏", 4, "빖빘빜빝빞빟빢빣빥빦빧빩빫", 4, "빲빶", 4, "빾빿뺁뺂뺃뺅", 6, "뺎뺒", 5, "뺚", 13, "뺩", 14],
    ["9641", "뺸", 23, "뻒뻓"],
    ["9661", "뻕뻖뻙", 6, "뻡뻢뻦", 5, "뻭", 8],
    ["9681", "뻶", 10, "뼂", 5, "뼊", 13, "뼚뼞", 33, "뽂뽃뽅뽆뽇뽉", 6, "뽒뽓뽔뽖", 44],
    ["9741", "뾃", 16, "뾕", 8],
    ["9761", "뾞", 17, "뾱", 7],
    ["9781", "뾹", 11, "뿆", 5, "뿎뿏뿑뿒뿓뿕", 6, "뿝뿞뿠뿢", 89, "쀽쀾쀿"],
    ["9841", "쁀", 16, "쁒", 5, "쁙쁚쁛"],
    ["9861", "쁝쁞쁟쁡", 6, "쁪", 15],
    ["9881", "쁺", 21, "삒삓삕삖삗삙", 6, "삢삤삦", 5, "삮삱삲삷", 4, "삾샂샃샄샆샇샊샋샍샎샏샑", 6, "샚샞", 5, "샦샧샩샪샫샭", 6, "샶샸샺", 5, "섁섂섃섅섆섇섉", 6, "섑섒섓섔섖", 5, "섡섢섥섨섩섪섫섮"],
    ["9941", "섲섳섴섵섷섺섻섽섾섿셁", 6, "셊셎", 5, "셖셗"],
    ["9961", "셙셚셛셝", 6, "셦셪", 5, "셱셲셳셵셶셷셹셺셻"],
    ["9981", "셼", 8, "솆", 5, "솏솑솒솓솕솗", 4, "솞솠솢솣솤솦솧솪솫솭솮솯솱", 11, "솾", 5, "쇅쇆쇇쇉쇊쇋쇍", 6, "쇕쇖쇙", 6, "쇡쇢쇣쇥쇦쇧쇩", 6, "쇲쇴", 7, "쇾쇿숁숂숃숅", 6, "숎숐숒", 5, "숚숛숝숞숡숢숣"],
    ["9a41", "숤숥숦숧숪숬숮숰숳숵", 16],
    ["9a61", "쉆쉇쉉", 6, "쉒쉓쉕쉖쉗쉙", 6, "쉡쉢쉣쉤쉦"],
    ["9a81", "쉧", 4, "쉮쉯쉱쉲쉳쉵", 6, "쉾슀슂", 5, "슊", 5, "슑", 6, "슙슚슜슞", 5, "슦슧슩슪슫슮", 5, "슶슸슺", 33, "싞싟싡싢싥", 5, "싮싰싲싳싴싵싷싺싽싾싿쌁", 6, "쌊쌋쌎쌏"],
    ["9b41", "쌐쌑쌒쌖쌗쌙쌚쌛쌝", 6, "쌦쌧쌪", 8],
    ["9b61", "쌳", 17, "썆", 7],
    ["9b81", "썎", 25, "썪썫썭썮썯썱썳", 4, "썺썻썾", 5, "쎅쎆쎇쎉쎊쎋쎍", 50, "쏁", 22, "쏚"],
    ["9c41", "쏛쏝쏞쏡쏣", 4, "쏪쏫쏬쏮", 5, "쏶쏷쏹", 5],
    ["9c61", "쏿", 8, "쐉", 6, "쐑", 9],
    ["9c81", "쐛", 8, "쐥", 6, "쐭쐮쐯쐱쐲쐳쐵", 6, "쐾", 9, "쑉", 26, "쑦쑧쑩쑪쑫쑭", 6, "쑶쑷쑸쑺", 5, "쒁", 18, "쒕", 6, "쒝", 12],
    ["9d41", "쒪", 13, "쒹쒺쒻쒽", 8],
    ["9d61", "쓆", 25],
    ["9d81", "쓠", 8, "쓪", 5, "쓲쓳쓵쓶쓷쓹쓻쓼쓽쓾씂", 9, "씍씎씏씑씒씓씕", 6, "씝", 10, "씪씫씭씮씯씱", 6, "씺씼씾", 5, "앆앇앋앏앐앑앒앖앚앛앜앟앢앣앥앦앧앩", 6, "앲앶", 5, "앾앿얁얂얃얅얆얈얉얊얋얎얐얒얓얔"],
    ["9e41", "얖얙얚얛얝얞얟얡", 7, "얪", 9, "얶"],
    ["9e61", "얷얺얿", 4, "엋엍엏엒엓엕엖엗엙", 6, "엢엤엦엧"],
    ["9e81", "엨엩엪엫엯엱엲엳엵엸엹엺엻옂옃옄옉옊옋옍옎옏옑", 6, "옚옝", 6, "옦옧옩옪옫옯옱옲옶옸옺옼옽옾옿왂왃왅왆왇왉", 6, "왒왖", 5, "왞왟왡", 10, "왭왮왰왲", 5, "왺왻왽왾왿욁", 6, "욊욌욎", 5, "욖욗욙욚욛욝", 6, "욦"],
    ["9f41", "욨욪", 5, "욲욳욵욶욷욻", 4, "웂웄웆", 5, "웎"],
    ["9f61", "웏웑웒웓웕", 6, "웞웟웢", 5, "웪웫웭웮웯웱웲"],
    ["9f81", "웳", 4, "웺웻웼웾", 5, "윆윇윉윊윋윍", 6, "윖윘윚", 5, "윢윣윥윦윧윩", 6, "윲윴윶윸윹윺윻윾윿읁읂읃읅", 4, "읋읎읐읙읚읛읝읞읟읡", 6, "읩읪읬", 7, "읶읷읹읺읻읿잀잁잂잆잋잌잍잏잒잓잕잙잛", 4, "잢잧", 4, "잮잯잱잲잳잵잶잷"],
    ["a041", "잸잹잺잻잾쟂", 5, "쟊쟋쟍쟏쟑", 6, "쟙쟚쟛쟜"],
    ["a061", "쟞", 5, "쟥쟦쟧쟩쟪쟫쟭", 13],
    ["a081", "쟻", 4, "젂젃젅젆젇젉젋", 4, "젒젔젗", 4, "젞젟젡젢젣젥", 6, "젮젰젲", 5, "젹젺젻젽젾젿졁", 6, "졊졋졎", 5, "졕", 26, "졲졳졵졶졷졹졻", 4, "좂좄좈좉좊좎", 5, "좕", 7, "좞좠좢좣좤"],
    ["a141", "좥좦좧좩", 18, "좾좿죀죁"],
    ["a161", "죂죃죅죆죇죉죊죋죍", 6, "죖죘죚", 5, "죢죣죥"],
    ["a181", "죦", 14, "죶", 5, "죾죿줁줂줃줇", 4, "줎　、。·‥…¨〃­―∥＼∼‘’“”〔〕〈", 9, "±×÷≠≤≥∞∴°′″℃Å￠￡￥♂♀∠⊥⌒∂∇≡≒§※☆★○●◎◇◆□■△▲▽▼→←↑↓↔〓≪≫√∽∝∵∫∬∈∋⊆⊇⊂⊃∪∩∧∨￢"],
    ["a241", "줐줒", 5, "줙", 18],
    ["a261", "줭", 6, "줵", 18],
    ["a281", "쥈", 7, "쥒쥓쥕쥖쥗쥙", 6, "쥢쥤", 7, "쥭쥮쥯⇒⇔∀∃´～ˇ˘˝˚˙¸˛¡¿ː∮∑∏¤℉‰◁◀▷▶♤♠♡♥♧♣⊙◈▣◐◑▒▤▥▨▧▦▩♨☏☎☜☞¶†‡↕↗↙↖↘♭♩♪♬㉿㈜№㏇™㏂㏘℡€®"],
    ["a341", "쥱쥲쥳쥵", 6, "쥽", 10, "즊즋즍즎즏"],
    ["a361", "즑", 6, "즚즜즞", 16],
    ["a381", "즯", 16, "짂짃짅짆짉짋", 4, "짒짔짗짘짛！", 58, "￦］", 32, "￣"],
    ["a441", "짞짟짡짣짥짦짨짩짪짫짮짲", 5, "짺짻짽짾짿쨁쨂쨃쨄"],
    ["a461", "쨅쨆쨇쨊쨎", 5, "쨕쨖쨗쨙", 12],
    ["a481", "쨦쨧쨨쨪", 28, "ㄱ", 93],
    ["a541", "쩇", 4, "쩎쩏쩑쩒쩓쩕", 6, "쩞쩢", 5, "쩩쩪"],
    ["a561", "쩫", 17, "쩾", 5, "쪅쪆"],
    ["a581", "쪇", 16, "쪙", 14, "ⅰ", 9],
    ["a5b0", "Ⅰ", 9],
    ["a5c1", "Α", 16, "Σ", 6],
    ["a5e1", "α", 16, "σ", 6],
    ["a641", "쪨", 19, "쪾쪿쫁쫂쫃쫅"],
    ["a661", "쫆", 5, "쫎쫐쫒쫔쫕쫖쫗쫚", 5, "쫡", 6],
    ["a681", "쫨쫩쫪쫫쫭", 6, "쫵", 18, "쬉쬊─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂┒┑┚┙┖┕┎┍┞┟┡┢┦┧┩┪┭┮┱┲┵┶┹┺┽┾╀╁╃", 7],
    ["a741", "쬋", 4, "쬑쬒쬓쬕쬖쬗쬙", 6, "쬢", 7],
    ["a761", "쬪", 22, "쭂쭃쭄"],
    ["a781", "쭅쭆쭇쭊쭋쭍쭎쭏쭑", 6, "쭚쭛쭜쭞", 5, "쭥", 7, "㎕㎖㎗ℓ㎘㏄㎣㎤㎥㎦㎙", 9, "㏊㎍㎎㎏㏏㎈㎉㏈㎧㎨㎰", 9, "㎀", 4, "㎺", 5, "㎐", 4, "Ω㏀㏁㎊㎋㎌㏖㏅㎭㎮㎯㏛㎩㎪㎫㎬㏝㏐㏓㏃㏉㏜㏆"],
    ["a841", "쭭", 10, "쭺", 14],
    ["a861", "쮉", 18, "쮝", 6],
    ["a881", "쮤", 19, "쮹", 11, "ÆÐªĦ"],
    ["a8a6", "Ĳ"],
    ["a8a8", "ĿŁØŒºÞŦŊ"],
    ["a8b1", "㉠", 27, "ⓐ", 25, "①", 14, "½⅓⅔¼¾⅛⅜⅝⅞"],
    ["a941", "쯅", 14, "쯕", 10],
    ["a961", "쯠쯡쯢쯣쯥쯦쯨쯪", 18],
    ["a981", "쯽", 14, "찎찏찑찒찓찕", 6, "찞찟찠찣찤æđðħıĳĸŀłøœßþŧŋŉ㈀", 27, "⒜", 25, "⑴", 14, "¹²³⁴ⁿ₁₂₃₄"],
    ["aa41", "찥찦찪찫찭찯찱", 6, "찺찿", 4, "챆챇챉챊챋챍챎"],
    ["aa61", "챏", 4, "챖챚", 5, "챡챢챣챥챧챩", 6, "챱챲"],
    ["aa81", "챳챴챶", 29, "ぁ", 82],
    ["ab41", "첔첕첖첗첚첛첝첞첟첡", 6, "첪첮", 5, "첶첷첹"],
    ["ab61", "첺첻첽", 6, "쳆쳈쳊", 5, "쳑쳒쳓쳕", 5],
    ["ab81", "쳛", 8, "쳥", 6, "쳭쳮쳯쳱", 12, "ァ", 85],
    ["ac41", "쳾쳿촀촂", 5, "촊촋촍촎촏촑", 6, "촚촜촞촟촠"],
    ["ac61", "촡촢촣촥촦촧촩촪촫촭", 11, "촺", 4],
    ["ac81", "촿", 28, "쵝쵞쵟А", 5, "ЁЖ", 25],
    ["acd1", "а", 5, "ёж", 25],
    ["ad41", "쵡쵢쵣쵥", 6, "쵮쵰쵲", 5, "쵹", 7],
    ["ad61", "춁", 6, "춉", 10, "춖춗춙춚춛춝춞춟"],
    ["ad81", "춠춡춢춣춦춨춪", 5, "춱", 18, "췅"],
    ["ae41", "췆", 5, "췍췎췏췑", 16],
    ["ae61", "췢", 5, "췩췪췫췭췮췯췱", 6, "췺췼췾", 4],
    ["ae81", "츃츅츆츇츉츊츋츍", 6, "츕츖츗츘츚", 5, "츢츣츥츦츧츩츪츫"],
    ["af41", "츬츭츮츯츲츴츶", 19],
    ["af61", "칊", 13, "칚칛칝칞칢", 5, "칪칬"],
    ["af81", "칮", 5, "칶칷칹칺칻칽", 6, "캆캈캊", 5, "캒캓캕캖캗캙"],
    ["b041", "캚", 5, "캢캦", 5, "캮", 12],
    ["b061", "캻", 5, "컂", 19],
    ["b081", "컖", 13, "컦컧컩컪컭", 6, "컶컺", 5, "가각간갇갈갉갊감", 7, "같", 4, "갠갤갬갭갯갰갱갸갹갼걀걋걍걔걘걜거걱건걷걸걺검겁것겄겅겆겉겊겋게겐겔겜겝겟겠겡겨격겪견겯결겸겹겻겼경곁계곈곌곕곗고곡곤곧골곪곬곯곰곱곳공곶과곽관괄괆"],
    ["b141", "켂켃켅켆켇켉", 6, "켒켔켖", 5, "켝켞켟켡켢켣"],
    ["b161", "켥", 6, "켮켲", 5, "켹", 11],
    ["b181", "콅", 14, "콖콗콙콚콛콝", 6, "콦콨콪콫콬괌괍괏광괘괜괠괩괬괭괴괵괸괼굄굅굇굉교굔굘굡굣구국군굳굴굵굶굻굼굽굿궁궂궈궉권궐궜궝궤궷귀귁귄귈귐귑귓규균귤그극근귿글긁금급긋긍긔기긱긴긷길긺김깁깃깅깆깊까깍깎깐깔깖깜깝깟깠깡깥깨깩깬깰깸"],
    ["b241", "콭콮콯콲콳콵콶콷콹", 6, "쾁쾂쾃쾄쾆", 5, "쾍"],
    ["b261", "쾎", 18, "쾢", 5, "쾩"],
    ["b281", "쾪", 5, "쾱", 18, "쿅", 6, "깹깻깼깽꺄꺅꺌꺼꺽꺾껀껄껌껍껏껐껑께껙껜껨껫껭껴껸껼꼇꼈꼍꼐꼬꼭꼰꼲꼴꼼꼽꼿꽁꽂꽃꽈꽉꽐꽜꽝꽤꽥꽹꾀꾄꾈꾐꾑꾕꾜꾸꾹꾼꿀꿇꿈꿉꿋꿍꿎꿔꿜꿨꿩꿰꿱꿴꿸뀀뀁뀄뀌뀐뀔뀜뀝뀨끄끅끈끊끌끎끓끔끕끗끙"],
    ["b341", "쿌", 19, "쿢쿣쿥쿦쿧쿩"],
    ["b361", "쿪", 5, "쿲쿴쿶", 5, "쿽쿾쿿퀁퀂퀃퀅", 5],
    ["b381", "퀋", 5, "퀒", 5, "퀙", 19, "끝끼끽낀낄낌낍낏낑나낙낚난낟날낡낢남납낫", 4, "낱낳내낵낸낼냄냅냇냈냉냐냑냔냘냠냥너넉넋넌널넒넓넘넙넛넜넝넣네넥넨넬넴넵넷넸넹녀녁년녈념녑녔녕녘녜녠노녹논놀놂놈놉놋농높놓놔놘놜놨뇌뇐뇔뇜뇝"],
    ["b441", "퀮", 5, "퀶퀷퀹퀺퀻퀽", 6, "큆큈큊", 5],
    ["b461", "큑큒큓큕큖큗큙", 6, "큡", 10, "큮큯"],
    ["b481", "큱큲큳큵", 6, "큾큿킀킂", 18, "뇟뇨뇩뇬뇰뇹뇻뇽누눅눈눋눌눔눕눗눙눠눴눼뉘뉜뉠뉨뉩뉴뉵뉼늄늅늉느늑는늘늙늚늠늡늣능늦늪늬늰늴니닉닌닐닒님닙닛닝닢다닥닦단닫", 4, "닳담답닷", 4, "닿대댁댄댈댐댑댓댔댕댜더덕덖던덛덜덞덟덤덥"],
    ["b541", "킕", 14, "킦킧킩킪킫킭", 5],
    ["b561", "킳킶킸킺", 5, "탂탃탅탆탇탊", 5, "탒탖", 4],
    ["b581", "탛탞탟탡탢탣탥", 6, "탮탲", 5, "탹", 11, "덧덩덫덮데덱덴델뎀뎁뎃뎄뎅뎌뎐뎔뎠뎡뎨뎬도독돈돋돌돎돐돔돕돗동돛돝돠돤돨돼됐되된될됨됩됫됴두둑둔둘둠둡둣둥둬뒀뒈뒝뒤뒨뒬뒵뒷뒹듀듄듈듐듕드득든듣들듦듬듭듯등듸디딕딘딛딜딤딥딧딨딩딪따딱딴딸"],
    ["b641", "턅", 7, "턎", 17],
    ["b661", "턠", 15, "턲턳턵턶턷턹턻턼턽턾"],
    ["b681", "턿텂텆", 5, "텎텏텑텒텓텕", 6, "텞텠텢", 5, "텩텪텫텭땀땁땃땄땅땋때땍땐땔땜땝땟땠땡떠떡떤떨떪떫떰떱떳떴떵떻떼떽뗀뗄뗌뗍뗏뗐뗑뗘뗬또똑똔똘똥똬똴뙈뙤뙨뚜뚝뚠뚤뚫뚬뚱뛔뛰뛴뛸뜀뜁뜅뜨뜩뜬뜯뜰뜸뜹뜻띄띈띌띔띕띠띤띨띰띱띳띵라락란랄람랍랏랐랑랒랖랗"],
    ["b741", "텮", 13, "텽", 6, "톅톆톇톉톊"],
    ["b761", "톋", 20, "톢톣톥톦톧"],
    ["b781", "톩", 6, "톲톴톶톷톸톹톻톽톾톿퇁", 14, "래랙랜랠램랩랫랬랭랴략랸럇량러럭런럴럼럽럿렀렁렇레렉렌렐렘렙렛렝려력련렬렴렵렷렸령례롄롑롓로록론롤롬롭롯롱롸롼뢍뢨뢰뢴뢸룀룁룃룅료룐룔룝룟룡루룩룬룰룸룹룻룽뤄뤘뤠뤼뤽륀륄륌륏륑류륙륜률륨륩"],
    ["b841", "퇐", 7, "퇙", 17],
    ["b861", "퇫", 8, "퇵퇶퇷퇹", 13],
    ["b881", "툈툊", 5, "툑", 24, "륫륭르륵른를름릅릇릉릊릍릎리릭린릴림립릿링마막만많", 4, "맘맙맛망맞맡맣매맥맨맬맴맵맷맸맹맺먀먁먈먕머먹먼멀멂멈멉멋멍멎멓메멕멘멜멤멥멧멨멩며멱면멸몃몄명몇몌모목몫몬몰몲몸몹못몽뫄뫈뫘뫙뫼"],
    ["b941", "툪툫툮툯툱툲툳툵", 6, "툾퉀퉂", 5, "퉉퉊퉋퉌"],
    ["b961", "퉍", 14, "퉝", 6, "퉥퉦퉧퉨"],
    ["b981", "퉩", 22, "튂튃튅튆튇튉튊튋튌묀묄묍묏묑묘묜묠묩묫무묵묶문묻물묽묾뭄뭅뭇뭉뭍뭏뭐뭔뭘뭡뭣뭬뮈뮌뮐뮤뮨뮬뮴뮷므믄믈믐믓미믹민믿밀밂밈밉밋밌밍및밑바", 4, "받", 4, "밤밥밧방밭배백밴밸뱀뱁뱃뱄뱅뱉뱌뱍뱐뱝버벅번벋벌벎범법벗"],
    ["ba41", "튍튎튏튒튓튔튖", 5, "튝튞튟튡튢튣튥", 6, "튭"],
    ["ba61", "튮튯튰튲", 5, "튺튻튽튾틁틃", 4, "틊틌", 5],
    ["ba81", "틒틓틕틖틗틙틚틛틝", 6, "틦", 9, "틲틳틵틶틷틹틺벙벚베벡벤벧벨벰벱벳벴벵벼벽변별볍볏볐병볕볘볜보복볶본볼봄봅봇봉봐봔봤봬뵀뵈뵉뵌뵐뵘뵙뵤뵨부북분붇불붉붊붐붑붓붕붙붚붜붤붰붸뷔뷕뷘뷜뷩뷰뷴뷸븀븃븅브븍븐블븜븝븟비빅빈빌빎빔빕빗빙빚빛빠빡빤"],
    ["bb41", "틻", 4, "팂팄팆", 5, "팏팑팒팓팕팗", 4, "팞팢팣"],
    ["bb61", "팤팦팧팪팫팭팮팯팱", 6, "팺팾", 5, "퍆퍇퍈퍉"],
    ["bb81", "퍊", 31, "빨빪빰빱빳빴빵빻빼빽뺀뺄뺌뺍뺏뺐뺑뺘뺙뺨뻐뻑뻔뻗뻘뻠뻣뻤뻥뻬뼁뼈뼉뼘뼙뼛뼜뼝뽀뽁뽄뽈뽐뽑뽕뾔뾰뿅뿌뿍뿐뿔뿜뿟뿡쀼쁑쁘쁜쁠쁨쁩삐삑삔삘삠삡삣삥사삭삯산삳살삵삶삼삽삿샀상샅새색샌샐샘샙샛샜생샤"],
    ["bc41", "퍪", 17, "퍾퍿펁펂펃펅펆펇"],
    ["bc61", "펈펉펊펋펎펒", 5, "펚펛펝펞펟펡", 6, "펪펬펮"],
    ["bc81", "펯", 4, "펵펶펷펹펺펻펽", 6, "폆폇폊", 5, "폑", 5, "샥샨샬샴샵샷샹섀섄섈섐섕서", 4, "섣설섦섧섬섭섯섰성섶세섹센셀셈셉셋셌셍셔셕션셜셤셥셧셨셩셰셴셸솅소속솎손솔솖솜솝솟송솥솨솩솬솰솽쇄쇈쇌쇔쇗쇘쇠쇤쇨쇰쇱쇳쇼쇽숀숄숌숍숏숑수숙순숟술숨숩숫숭"],
    ["bd41", "폗폙", 7, "폢폤", 7, "폮폯폱폲폳폵폶폷"],
    ["bd61", "폸폹폺폻폾퐀퐂", 5, "퐉", 13],
    ["bd81", "퐗", 5, "퐞", 25, "숯숱숲숴쉈쉐쉑쉔쉘쉠쉥쉬쉭쉰쉴쉼쉽쉿슁슈슉슐슘슛슝스슥슨슬슭슴습슷승시식신싣실싫심십싯싱싶싸싹싻싼쌀쌈쌉쌌쌍쌓쌔쌕쌘쌜쌤쌥쌨쌩썅써썩썬썰썲썸썹썼썽쎄쎈쎌쏀쏘쏙쏜쏟쏠쏢쏨쏩쏭쏴쏵쏸쐈쐐쐤쐬쐰"],
    ["be41", "퐸", 7, "푁푂푃푅", 14],
    ["be61", "푔", 7, "푝푞푟푡푢푣푥", 7, "푮푰푱푲"],
    ["be81", "푳", 4, "푺푻푽푾풁풃", 4, "풊풌풎", 5, "풕", 8, "쐴쐼쐽쑈쑤쑥쑨쑬쑴쑵쑹쒀쒔쒜쒸쒼쓩쓰쓱쓴쓸쓺쓿씀씁씌씐씔씜씨씩씬씰씸씹씻씽아악안앉않알앍앎앓암압앗았앙앝앞애액앤앨앰앱앳앴앵야약얀얄얇얌얍얏양얕얗얘얜얠얩어억언얹얻얼얽얾엄", 6, "엌엎"],
    ["bf41", "풞", 10, "풪", 14],
    ["bf61", "풹", 18, "퓍퓎퓏퓑퓒퓓퓕"],
    ["bf81", "퓖", 5, "퓝퓞퓠", 7, "퓩퓪퓫퓭퓮퓯퓱", 6, "퓹퓺퓼에엑엔엘엠엡엣엥여역엮연열엶엷염", 5, "옅옆옇예옌옐옘옙옛옜오옥온올옭옮옰옳옴옵옷옹옻와왁완왈왐왑왓왔왕왜왝왠왬왯왱외왹왼욀욈욉욋욍요욕욘욜욤욥욧용우욱운울욹욺움웁웃웅워웍원월웜웝웠웡웨"],
    ["c041", "퓾", 5, "픅픆픇픉픊픋픍", 6, "픖픘", 5],
    ["c061", "픞", 25],
    ["c081", "픸픹픺픻픾픿핁핂핃핅", 6, "핎핐핒", 5, "핚핛핝핞핟핡핢핣웩웬웰웸웹웽위윅윈윌윔윕윗윙유육윤율윰윱윳융윷으윽은을읊음읍읏응", 7, "읜읠읨읫이익인일읽읾잃임입잇있잉잊잎자작잔잖잗잘잚잠잡잣잤장잦재잭잰잴잼잽잿쟀쟁쟈쟉쟌쟎쟐쟘쟝쟤쟨쟬저적전절젊"],
    ["c141", "핤핦핧핪핬핮", 5, "핶핷핹핺핻핽", 6, "햆햊햋"],
    ["c161", "햌햍햎햏햑", 19, "햦햧"],
    ["c181", "햨", 31, "점접젓정젖제젝젠젤젬젭젯젱져젼졀졈졉졌졍졔조족존졸졺좀좁좃종좆좇좋좌좍좔좝좟좡좨좼좽죄죈죌죔죕죗죙죠죡죤죵주죽준줄줅줆줌줍줏중줘줬줴쥐쥑쥔쥘쥠쥡쥣쥬쥰쥴쥼즈즉즌즐즘즙즛증지직진짇질짊짐집짓"],
    ["c241", "헊헋헍헎헏헑헓", 4, "헚헜헞", 5, "헦헧헩헪헫헭헮"],
    ["c261", "헯", 4, "헶헸헺", 5, "혂혃혅혆혇혉", 6, "혒"],
    ["c281", "혖", 5, "혝혞혟혡혢혣혥", 7, "혮", 9, "혺혻징짖짙짚짜짝짠짢짤짧짬짭짯짰짱째짹짼쨀쨈쨉쨋쨌쨍쨔쨘쨩쩌쩍쩐쩔쩜쩝쩟쩠쩡쩨쩽쪄쪘쪼쪽쫀쫄쫌쫍쫏쫑쫓쫘쫙쫠쫬쫴쬈쬐쬔쬘쬠쬡쭁쭈쭉쭌쭐쭘쭙쭝쭤쭸쭹쮜쮸쯔쯤쯧쯩찌찍찐찔찜찝찡찢찧차착찬찮찰참찹찻"],
    ["c341", "혽혾혿홁홂홃홄홆홇홊홌홎홏홐홒홓홖홗홙홚홛홝", 4],
    ["c361", "홢", 4, "홨홪", 5, "홲홳홵", 11],
    ["c381", "횁횂횄횆", 5, "횎횏횑횒횓횕", 7, "횞횠횢", 5, "횩횪찼창찾채책챈챌챔챕챗챘챙챠챤챦챨챰챵처척천철첨첩첫첬청체첵첸첼쳄쳅쳇쳉쳐쳔쳤쳬쳰촁초촉촌촐촘촙촛총촤촨촬촹최쵠쵤쵬쵭쵯쵱쵸춈추축춘출춤춥춧충춰췄췌췐취췬췰췸췹췻췽츄츈츌츔츙츠측츤츨츰츱츳층"],
    ["c441", "횫횭횮횯횱", 7, "횺횼", 7, "훆훇훉훊훋"],
    ["c461", "훍훎훏훐훒훓훕훖훘훚", 5, "훡훢훣훥훦훧훩", 4],
    ["c481", "훮훯훱훲훳훴훶", 5, "훾훿휁휂휃휅", 11, "휒휓휔치칙친칟칠칡침칩칫칭카칵칸칼캄캅캇캉캐캑캔캘캠캡캣캤캥캬캭컁커컥컨컫컬컴컵컷컸컹케켁켄켈켐켑켓켕켜켠켤켬켭켯켰켱켸코콕콘콜콤콥콧콩콰콱콴콸쾀쾅쾌쾡쾨쾰쿄쿠쿡쿤쿨쿰쿱쿳쿵쿼퀀퀄퀑퀘퀭퀴퀵퀸퀼"],
    ["c541", "휕휖휗휚휛휝휞휟휡", 6, "휪휬휮", 5, "휶휷휹"],
    ["c561", "휺휻휽", 6, "흅흆흈흊", 5, "흒흓흕흚", 4],
    ["c581", "흟흢흤흦흧흨흪흫흭흮흯흱흲흳흵", 6, "흾흿힀힂", 5, "힊힋큄큅큇큉큐큔큘큠크큭큰클큼큽킁키킥킨킬킴킵킷킹타탁탄탈탉탐탑탓탔탕태택탠탤탬탭탯탰탱탸턍터턱턴털턺텀텁텃텄텅테텍텐텔템텝텟텡텨텬텼톄톈토톡톤톨톰톱톳통톺톼퇀퇘퇴퇸툇툉툐투툭툰툴툼툽툿퉁퉈퉜"],
    ["c641", "힍힎힏힑", 6, "힚힜힞", 5],
    ["c6a1", "퉤튀튁튄튈튐튑튕튜튠튤튬튱트특튼튿틀틂틈틉틋틔틘틜틤틥티틱틴틸팀팁팃팅파팍팎판팔팖팜팝팟팠팡팥패팩팬팰팸팹팻팼팽퍄퍅퍼퍽펀펄펌펍펏펐펑페펙펜펠펨펩펫펭펴편펼폄폅폈평폐폘폡폣포폭폰폴폼폽폿퐁"],
    ["c7a1", "퐈퐝푀푄표푠푤푭푯푸푹푼푿풀풂품풉풋풍풔풩퓌퓐퓔퓜퓟퓨퓬퓰퓸퓻퓽프픈플픔픕픗피픽핀필핌핍핏핑하학한할핥함합핫항해핵핸핼햄햅햇했행햐향허헉헌헐헒험헙헛헝헤헥헨헬헴헵헷헹혀혁현혈혐협혓혔형혜혠"],
    ["c8a1", "혤혭호혹혼홀홅홈홉홋홍홑화확환활홧황홰홱홴횃횅회획횐횔횝횟횡효횬횰횹횻후훅훈훌훑훔훗훙훠훤훨훰훵훼훽휀휄휑휘휙휜휠휨휩휫휭휴휵휸휼흄흇흉흐흑흔흖흗흘흙흠흡흣흥흩희흰흴흼흽힁히힉힌힐힘힙힛힝"],
    ["caa1", "伽佳假價加可呵哥嘉嫁家暇架枷柯歌珂痂稼苛茄街袈訶賈跏軻迦駕刻却各恪慤殼珏脚覺角閣侃刊墾奸姦干幹懇揀杆柬桿澗癎看磵稈竿簡肝艮艱諫間乫喝曷渴碣竭葛褐蝎鞨勘坎堪嵌感憾戡敢柑橄減甘疳監瞰紺邯鑑鑒龕"],
    ["cba1", "匣岬甲胛鉀閘剛堈姜岡崗康强彊慷江畺疆糠絳綱羌腔舡薑襁講鋼降鱇介价個凱塏愷愾慨改槪漑疥皆盖箇芥蓋豈鎧開喀客坑更粳羹醵倨去居巨拒据據擧渠炬祛距踞車遽鉅鋸乾件健巾建愆楗腱虔蹇鍵騫乞傑杰桀儉劍劒檢"],
    ["cca1", "瞼鈐黔劫怯迲偈憩揭擊格檄激膈覡隔堅牽犬甄絹繭肩見譴遣鵑抉決潔結缺訣兼慊箝謙鉗鎌京俓倞傾儆勁勍卿坰境庚徑慶憬擎敬景暻更梗涇炅烱璟璥瓊痙硬磬竟競絅經耕耿脛莖警輕逕鏡頃頸驚鯨係啓堺契季屆悸戒桂械"],
    ["cda1", "棨溪界癸磎稽系繫繼計誡谿階鷄古叩告呱固姑孤尻庫拷攷故敲暠枯槁沽痼皐睾稿羔考股膏苦苽菰藁蠱袴誥賈辜錮雇顧高鼓哭斛曲梏穀谷鵠困坤崑昆梱棍滾琨袞鯤汨滑骨供公共功孔工恐恭拱控攻珙空蚣貢鞏串寡戈果瓜"],
    ["cea1", "科菓誇課跨過鍋顆廓槨藿郭串冠官寬慣棺款灌琯瓘管罐菅觀貫關館刮恝括适侊光匡壙廣曠洸炚狂珖筐胱鑛卦掛罫乖傀塊壞怪愧拐槐魁宏紘肱轟交僑咬喬嬌嶠巧攪敎校橋狡皎矯絞翹膠蕎蛟較轎郊餃驕鮫丘久九仇俱具勾"],
    ["cfa1", "區口句咎嘔坵垢寇嶇廐懼拘救枸柩構歐毆毬求溝灸狗玖球瞿矩究絿耉臼舅舊苟衢謳購軀逑邱鉤銶駒驅鳩鷗龜國局菊鞠鞫麴君窘群裙軍郡堀屈掘窟宮弓穹窮芎躬倦券勸卷圈拳捲權淃眷厥獗蕨蹶闕机櫃潰詭軌饋句晷歸貴"],
    ["d0a1", "鬼龜叫圭奎揆槻珪硅窺竅糾葵規赳逵閨勻均畇筠菌鈞龜橘克剋劇戟棘極隙僅劤勤懃斤根槿瑾筋芹菫覲謹近饉契今妗擒昑檎琴禁禽芩衾衿襟金錦伋及急扱汲級給亘兢矜肯企伎其冀嗜器圻基埼夔奇妓寄岐崎己幾忌技旗旣"],
    ["d1a1", "朞期杞棋棄機欺氣汽沂淇玘琦琪璂璣畸畿碁磯祁祇祈祺箕紀綺羈耆耭肌記譏豈起錡錤飢饑騎騏驥麒緊佶吉拮桔金喫儺喇奈娜懦懶拏拿癩", 5, "那樂", 4, "諾酪駱亂卵暖欄煖爛蘭難鸞捏捺南嵐枏楠湳濫男藍襤拉"],
    ["d2a1", "納臘蠟衲囊娘廊", 4, "乃來內奈柰耐冷女年撚秊念恬拈捻寧寗努勞奴弩怒擄櫓爐瑙盧", 5, "駑魯", 10, "濃籠聾膿農惱牢磊腦賂雷尿壘", 7, "嫩訥杻紐勒", 5, "能菱陵尼泥匿溺多茶"],
    ["d3a1", "丹亶但單團壇彖斷旦檀段湍短端簞緞蛋袒鄲鍛撻澾獺疸達啖坍憺擔曇淡湛潭澹痰聃膽蕁覃談譚錟沓畓答踏遝唐堂塘幢戇撞棠當糖螳黨代垈坮大對岱帶待戴擡玳臺袋貸隊黛宅德悳倒刀到圖堵塗導屠島嶋度徒悼挑掉搗桃"],
    ["d4a1", "棹櫂淘渡滔濤燾盜睹禱稻萄覩賭跳蹈逃途道都鍍陶韜毒瀆牘犢獨督禿篤纛讀墩惇敦旽暾沌焞燉豚頓乭突仝冬凍動同憧東桐棟洞潼疼瞳童胴董銅兜斗杜枓痘竇荳讀豆逗頭屯臀芚遁遯鈍得嶝橙燈登等藤謄鄧騰喇懶拏癩羅"],
    ["d5a1", "蘿螺裸邏樂洛烙珞絡落諾酪駱丹亂卵欄欒瀾爛蘭鸞剌辣嵐擥攬欖濫籃纜藍襤覽拉臘蠟廊朗浪狼琅瑯螂郞來崍徠萊冷掠略亮倆兩凉梁樑粮粱糧良諒輛量侶儷勵呂廬慮戾旅櫚濾礪藜蠣閭驢驪麗黎力曆歷瀝礫轢靂憐戀攣漣"],
    ["d6a1", "煉璉練聯蓮輦連鍊冽列劣洌烈裂廉斂殮濂簾獵令伶囹寧岺嶺怜玲笭羚翎聆逞鈴零靈領齡例澧禮醴隷勞怒撈擄櫓潞瀘爐盧老蘆虜路輅露魯鷺鹵碌祿綠菉錄鹿麓論壟弄朧瀧瓏籠聾儡瀨牢磊賂賚賴雷了僚寮廖料燎療瞭聊蓼"],
    ["d7a1", "遼鬧龍壘婁屢樓淚漏瘻累縷蔞褸鏤陋劉旒柳榴流溜瀏琉瑠留瘤硫謬類六戮陸侖倫崙淪綸輪律慄栗率隆勒肋凜凌楞稜綾菱陵俚利厘吏唎履悧李梨浬犁狸理璃異痢籬罹羸莉裏裡里釐離鯉吝潾燐璘藺躪隣鱗麟林淋琳臨霖砬"],
    ["d8a1", "立笠粒摩瑪痲碼磨馬魔麻寞幕漠膜莫邈万卍娩巒彎慢挽晩曼滿漫灣瞞萬蔓蠻輓饅鰻唜抹末沫茉襪靺亡妄忘忙望網罔芒茫莽輞邙埋妹媒寐昧枚梅每煤罵買賣邁魅脈貊陌驀麥孟氓猛盲盟萌冪覓免冕勉棉沔眄眠綿緬面麵滅"],
    ["d9a1", "蔑冥名命明暝椧溟皿瞑茗蓂螟酩銘鳴袂侮冒募姆帽慕摸摹暮某模母毛牟牡瑁眸矛耗芼茅謀謨貌木沐牧目睦穆鶩歿沒夢朦蒙卯墓妙廟描昴杳渺猫竗苗錨務巫憮懋戊拇撫无楙武毋無珷畝繆舞茂蕪誣貿霧鵡墨默們刎吻問文"],
    ["daa1", "汶紊紋聞蚊門雯勿沕物味媚尾嵋彌微未梶楣渼湄眉米美薇謎迷靡黴岷悶愍憫敏旻旼民泯玟珉緡閔密蜜謐剝博拍搏撲朴樸泊珀璞箔粕縛膊舶薄迫雹駁伴半反叛拌搬攀斑槃泮潘班畔瘢盤盼磐磻礬絆般蟠返頒飯勃拔撥渤潑"],
    ["dba1", "發跋醱鉢髮魃倣傍坊妨尨幇彷房放方旁昉枋榜滂磅紡肪膀舫芳蒡蚌訪謗邦防龐倍俳北培徘拜排杯湃焙盃背胚裴裵褙賠輩配陪伯佰帛柏栢白百魄幡樊煩燔番磻繁蕃藩飜伐筏罰閥凡帆梵氾汎泛犯範范法琺僻劈壁擘檗璧癖"],
    ["dca1", "碧蘗闢霹便卞弁變辨辯邊別瞥鱉鼈丙倂兵屛幷昞昺柄棅炳甁病秉竝輧餠騈保堡報寶普步洑湺潽珤甫菩補褓譜輔伏僕匐卜宓復服福腹茯蔔複覆輹輻馥鰒本乶俸奉封峯峰捧棒烽熢琫縫蓬蜂逢鋒鳳不付俯傅剖副否咐埠夫婦"],
    ["dda1", "孚孵富府復扶敷斧浮溥父符簿缶腐腑膚艀芙莩訃負賦賻赴趺部釜阜附駙鳧北分吩噴墳奔奮忿憤扮昐汾焚盆粉糞紛芬賁雰不佛弗彿拂崩朋棚硼繃鵬丕備匕匪卑妃婢庇悲憊扉批斐枇榧比毖毗毘沸泌琵痺砒碑秕秘粃緋翡肥"],
    ["dea1", "脾臂菲蜚裨誹譬費鄙非飛鼻嚬嬪彬斌檳殯浜濱瀕牝玭貧賓頻憑氷聘騁乍事些仕伺似使俟僿史司唆嗣四士奢娑寫寺射巳師徙思捨斜斯柶査梭死沙泗渣瀉獅砂社祀祠私篩紗絲肆舍莎蓑蛇裟詐詞謝賜赦辭邪飼駟麝削數朔索"],
    ["dfa1", "傘刪山散汕珊産疝算蒜酸霰乷撒殺煞薩三參杉森渗芟蔘衫揷澁鈒颯上傷像償商喪嘗孀尙峠常床庠廂想桑橡湘爽牀狀相祥箱翔裳觴詳象賞霜塞璽賽嗇塞穡索色牲生甥省笙墅壻嶼序庶徐恕抒捿敍暑曙書栖棲犀瑞筮絮緖署"],
    ["e0a1", "胥舒薯西誓逝鋤黍鼠夕奭席惜昔晳析汐淅潟石碩蓆釋錫仙僊先善嬋宣扇敾旋渲煽琁瑄璇璿癬禪線繕羨腺膳船蘚蟬詵跣選銑鐥饍鮮卨屑楔泄洩渫舌薛褻設說雪齧剡暹殲纖蟾贍閃陝攝涉燮葉城姓宬性惺成星晟猩珹盛省筬"],
    ["e1a1", "聖聲腥誠醒世勢歲洗稅笹細說貰召嘯塑宵小少巢所掃搔昭梳沼消溯瀟炤燒甦疏疎瘙笑篠簫素紹蔬蕭蘇訴逍遡邵銷韶騷俗屬束涑粟續謖贖速孫巽損蓀遜飡率宋悚松淞訟誦送頌刷殺灑碎鎖衰釗修受嗽囚垂壽嫂守岫峀帥愁"],
    ["e2a1", "戍手授搜收數樹殊水洙漱燧狩獸琇璲瘦睡秀穗竪粹綏綬繡羞脩茱蒐蓚藪袖誰讐輸遂邃酬銖銹隋隧隨雖需須首髓鬚叔塾夙孰宿淑潚熟琡璹肅菽巡徇循恂旬栒楯橓殉洵淳珣盾瞬筍純脣舜荀蓴蕣詢諄醇錞順馴戌術述鉥崇崧"],
    ["e3a1", "嵩瑟膝蝨濕拾習褶襲丞乘僧勝升承昇繩蠅陞侍匙嘶始媤尸屎屍市弑恃施是時枾柴猜矢示翅蒔蓍視試詩諡豕豺埴寔式息拭植殖湜熄篒蝕識軾食飾伸侁信呻娠宸愼新晨燼申神紳腎臣莘薪藎蜃訊身辛辰迅失室實悉審尋心沁"],
    ["e4a1", "沈深瀋甚芯諶什十拾雙氏亞俄兒啞娥峨我牙芽莪蛾衙訝阿雅餓鴉鵝堊岳嶽幄惡愕握樂渥鄂鍔顎鰐齷安岸按晏案眼雁鞍顔鮟斡謁軋閼唵岩巖庵暗癌菴闇壓押狎鴨仰央怏昻殃秧鴦厓哀埃崖愛曖涯碍艾隘靄厄扼掖液縊腋額"],
    ["e5a1", "櫻罌鶯鸚也倻冶夜惹揶椰爺耶若野弱掠略約若葯蒻藥躍亮佯兩凉壤孃恙揚攘敭暘梁楊樣洋瀁煬痒瘍禳穰糧羊良襄諒讓釀陽量養圄御於漁瘀禦語馭魚齬億憶抑檍臆偃堰彦焉言諺孼蘖俺儼嚴奄掩淹嶪業円予余勵呂女如廬"],
    ["e6a1", "旅歟汝濾璵礖礪與艅茹輿轝閭餘驪麗黎亦力域役易曆歷疫繹譯轢逆驛嚥堧姸娟宴年延憐戀捐挻撚椽沇沿涎涓淵演漣烟然煙煉燃燕璉硏硯秊筵緣練縯聯衍軟輦蓮連鉛鍊鳶列劣咽悅涅烈熱裂說閱厭廉念捻染殮炎焰琰艶苒"],
    ["e7a1", "簾閻髥鹽曄獵燁葉令囹塋寧嶺嶸影怜映暎楹榮永泳渶潁濚瀛瀯煐營獰玲瑛瑩瓔盈穎纓羚聆英詠迎鈴鍈零霙靈領乂倪例刈叡曳汭濊猊睿穢芮藝蘂禮裔詣譽豫醴銳隸霓預五伍俉傲午吾吳嗚塢墺奧娛寤悟惡懊敖旿晤梧汚澳"],
    ["e8a1", "烏熬獒筽蜈誤鰲鼇屋沃獄玉鈺溫瑥瘟穩縕蘊兀壅擁瓮甕癰翁邕雍饔渦瓦窩窪臥蛙蝸訛婉完宛梡椀浣玩琓琬碗緩翫脘腕莞豌阮頑曰往旺枉汪王倭娃歪矮外嵬巍猥畏了僚僥凹堯夭妖姚寥寮尿嶢拗搖撓擾料曜樂橈燎燿瑤療"],
    ["e9a1", "窈窯繇繞耀腰蓼蟯要謠遙遼邀饒慾欲浴縟褥辱俑傭冗勇埇墉容庸慂榕涌湧溶熔瑢用甬聳茸蓉踊鎔鏞龍于佑偶優又友右宇寓尤愚憂旴牛玗瑀盂祐禑禹紆羽芋藕虞迂遇郵釪隅雨雩勖彧旭昱栯煜稶郁頊云暈橒殞澐熉耘芸蕓"],
    ["eaa1", "運隕雲韻蔚鬱亐熊雄元原員圓園垣媛嫄寃怨愿援沅洹湲源爰猿瑗苑袁轅遠阮院願鴛月越鉞位偉僞危圍委威尉慰暐渭爲瑋緯胃萎葦蔿蝟衛褘謂違韋魏乳侑儒兪劉唯喩孺宥幼幽庾悠惟愈愉揄攸有杻柔柚柳楡楢油洧流游溜"],
    ["eba1", "濡猶猷琉瑜由留癒硫紐維臾萸裕誘諛諭踰蹂遊逾遺酉釉鍮類六堉戮毓肉育陸倫允奫尹崙淪潤玧胤贇輪鈗閏律慄栗率聿戎瀜絨融隆垠恩慇殷誾銀隱乙吟淫蔭陰音飮揖泣邑凝應膺鷹依倚儀宜意懿擬椅毅疑矣義艤薏蟻衣誼"],
    ["eca1", "議醫二以伊利吏夷姨履已弛彛怡易李梨泥爾珥理異痍痢移罹而耳肄苡荑裏裡貽貳邇里離飴餌匿溺瀷益翊翌翼謚人仁刃印吝咽因姻寅引忍湮燐璘絪茵藺蚓認隣靭靷鱗麟一佚佾壹日溢逸鎰馹任壬妊姙恁林淋稔臨荏賃入卄"],
    ["eda1", "立笠粒仍剩孕芿仔刺咨姉姿子字孜恣慈滋炙煮玆瓷疵磁紫者自茨蔗藉諮資雌作勺嚼斫昨灼炸爵綽芍酌雀鵲孱棧殘潺盞岑暫潛箴簪蠶雜丈仗匠場墻壯奬將帳庄張掌暲杖樟檣欌漿牆狀獐璋章粧腸臟臧莊葬蔣薔藏裝贓醬長"],
    ["eea1", "障再哉在宰才材栽梓渽滓災縡裁財載齋齎爭箏諍錚佇低儲咀姐底抵杵楮樗沮渚狙猪疽箸紵苧菹著藷詛貯躇這邸雎齟勣吊嫡寂摘敵滴狄炙的積笛籍績翟荻謫賊赤跡蹟迪迹適鏑佃佺傳全典前剪塡塼奠專展廛悛戰栓殿氈澱"],
    ["efa1", "煎琠田甸畑癲筌箋箭篆纏詮輾轉鈿銓錢鐫電顚顫餞切截折浙癤竊節絶占岾店漸点粘霑鮎點接摺蝶丁井亭停偵呈姃定幀庭廷征情挺政整旌晶晸柾楨檉正汀淀淨渟湞瀞炡玎珽町睛碇禎程穽精綎艇訂諪貞鄭酊釘鉦鋌錠霆靖"],
    ["f0a1", "靜頂鼎制劑啼堤帝弟悌提梯濟祭第臍薺製諸蹄醍除際霽題齊俎兆凋助嘲弔彫措操早晁曺曹朝條棗槽漕潮照燥爪璪眺祖祚租稠窕粗糟組繰肇藻蚤詔調趙躁造遭釣阻雕鳥族簇足鏃存尊卒拙猝倧宗從悰慫棕淙琮種終綜縱腫"],
    ["f1a1", "踪踵鍾鐘佐坐左座挫罪主住侏做姝胄呪周嗾奏宙州廚晝朱柱株注洲湊澍炷珠疇籌紂紬綢舟蛛註誅走躊輳週酎酒鑄駐竹粥俊儁准埈寯峻晙樽浚準濬焌畯竣蠢逡遵雋駿茁中仲衆重卽櫛楫汁葺增憎曾拯烝甑症繒蒸證贈之只"],
    ["f2a1", "咫地址志持指摯支旨智枝枳止池沚漬知砥祉祗紙肢脂至芝芷蜘誌識贄趾遲直稙稷織職唇嗔塵振搢晉晋桭榛殄津溱珍瑨璡畛疹盡眞瞋秦縉縝臻蔯袗診賑軫辰進鎭陣陳震侄叱姪嫉帙桎瓆疾秩窒膣蛭質跌迭斟朕什執潗緝輯"],
    ["f3a1", "鏶集徵懲澄且侘借叉嗟嵯差次此磋箚茶蹉車遮捉搾着窄錯鑿齪撰澯燦璨瓚竄簒纂粲纘讚贊鑽餐饌刹察擦札紮僭參塹慘慙懺斬站讒讖倉倡創唱娼廠彰愴敞昌昶暢槍滄漲猖瘡窓脹艙菖蒼債埰寀寨彩採砦綵菜蔡采釵冊柵策"],
    ["f4a1", "責凄妻悽處倜刺剔尺慽戚拓擲斥滌瘠脊蹠陟隻仟千喘天川擅泉淺玔穿舛薦賤踐遷釧闡阡韆凸哲喆徹撤澈綴輟轍鐵僉尖沾添甛瞻簽籤詹諂堞妾帖捷牒疊睫諜貼輒廳晴淸聽菁請靑鯖切剃替涕滯締諦逮遞體初剿哨憔抄招梢"],
    ["f5a1", "椒楚樵炒焦硝礁礎秒稍肖艸苕草蕉貂超酢醋醮促囑燭矗蜀觸寸忖村邨叢塚寵悤憁摠總聰蔥銃撮催崔最墜抽推椎楸樞湫皺秋芻萩諏趨追鄒酋醜錐錘鎚雛騶鰍丑畜祝竺筑築縮蓄蹙蹴軸逐春椿瑃出朮黜充忠沖蟲衝衷悴膵萃"],
    ["f6a1", "贅取吹嘴娶就炊翠聚脆臭趣醉驟鷲側仄厠惻測層侈値嗤峙幟恥梔治淄熾痔痴癡稚穉緇緻置致蚩輜雉馳齒則勅飭親七柒漆侵寢枕沈浸琛砧針鍼蟄秤稱快他咤唾墮妥惰打拖朶楕舵陀馱駝倬卓啄坼度托拓擢晫柝濁濯琢琸託"],
    ["f7a1", "鐸呑嘆坦彈憚歎灘炭綻誕奪脫探眈耽貪塔搭榻宕帑湯糖蕩兌台太怠態殆汰泰笞胎苔跆邰颱宅擇澤撑攄兎吐土討慟桶洞痛筒統通堆槌腿褪退頹偸套妬投透鬪慝特闖坡婆巴把播擺杷波派爬琶破罷芭跛頗判坂板版瓣販辦鈑"],
    ["f8a1", "阪八叭捌佩唄悖敗沛浿牌狽稗覇貝彭澎烹膨愎便偏扁片篇編翩遍鞭騙貶坪平枰萍評吠嬖幣廢弊斃肺蔽閉陛佈包匍匏咆哺圃布怖抛抱捕暴泡浦疱砲胞脯苞葡蒲袍褒逋鋪飽鮑幅暴曝瀑爆輻俵剽彪慓杓標漂瓢票表豹飇飄驃"],
    ["f9a1", "品稟楓諷豊風馮彼披疲皮被避陂匹弼必泌珌畢疋筆苾馝乏逼下何厦夏廈昰河瑕荷蝦賀遐霞鰕壑學虐謔鶴寒恨悍旱汗漢澣瀚罕翰閑閒限韓割轄函含咸啣喊檻涵緘艦銜陷鹹合哈盒蛤閤闔陜亢伉姮嫦巷恒抗杭桁沆港缸肛航"],
    ["faa1", "行降項亥偕咳垓奚孩害懈楷海瀣蟹解該諧邂駭骸劾核倖幸杏荇行享向嚮珦鄕響餉饗香噓墟虛許憲櫶獻軒歇險驗奕爀赫革俔峴弦懸晛泫炫玄玹現眩睍絃絢縣舷衒見賢鉉顯孑穴血頁嫌俠協夾峽挾浹狹脅脇莢鋏頰亨兄刑型"],
    ["fba1", "形泂滎瀅灐炯熒珩瑩荊螢衡逈邢鎣馨兮彗惠慧暳蕙蹊醯鞋乎互呼壕壺好岵弧戶扈昊晧毫浩淏湖滸澔濠濩灝狐琥瑚瓠皓祜糊縞胡芦葫蒿虎號蝴護豪鎬頀顥惑或酷婚昏混渾琿魂忽惚笏哄弘汞泓洪烘紅虹訌鴻化和嬅樺火畵"],
    ["fca1", "禍禾花華話譁貨靴廓擴攫確碻穫丸喚奐宦幻患換歡晥桓渙煥環紈還驩鰥活滑猾豁闊凰幌徨恍惶愰慌晃晄榥況湟滉潢煌璜皇篁簧荒蝗遑隍黃匯回廻徊恢悔懷晦會檜淮澮灰獪繪膾茴蛔誨賄劃獲宖橫鐄哮嚆孝效斅曉梟涍淆"],
    ["fda1", "爻肴酵驍侯候厚后吼喉嗅帿後朽煦珝逅勛勳塤壎焄熏燻薰訓暈薨喧暄煊萱卉喙毁彙徽揮暉煇諱輝麾休携烋畦虧恤譎鷸兇凶匈洶胸黑昕欣炘痕吃屹紇訖欠欽歆吸恰洽翕興僖凞喜噫囍姬嬉希憙憘戱晞曦熙熹熺犧禧稀羲詰"]
  ];
});

// node_modules/iconv-lite/encodings/tables/cp950.json
var require_cp950 = __commonJS((exports, module) => {
  module.exports = [
    ["0", " ", 127],
    ["a140", "　，、。．‧；：？！︰…‥﹐﹑﹒·﹔﹕﹖﹗｜–︱—︳╴︴﹏（）︵︶｛｝︷︸〔〕︹︺【】︻︼《》︽︾〈〉︿﹀「」﹁﹂『』﹃﹄﹙﹚"],
    ["a1a1", "﹛﹜﹝﹞‘’“”〝〞‵′＃＆＊※§〃○●△▲◎☆★◇◆□■▽▼㊣℅¯￣＿ˍ﹉﹊﹍﹎﹋﹌﹟﹠﹡＋－×÷±√＜＞＝≦≧≠∞≒≡﹢", 4, "～∩∪⊥∠∟⊿㏒㏑∫∮∵∴♀♂⊕⊙↑↓←→↖↗↙↘∥∣／"],
    ["a240", "＼∕﹨＄￥〒￠￡％＠℃℉﹩﹪﹫㏕㎜㎝㎞㏎㎡㎎㎏㏄°兙兛兞兝兡兣嗧瓩糎▁", 7, "▏▎▍▌▋▊▉┼┴┬┤├▔─│▕┌┐└┘╭"],
    ["a2a1", "╮╰╯═╞╪╡◢◣◥◤╱╲╳０", 9, "Ⅰ", 9, "〡", 8, "十卄卅Ａ", 25, "ａ", 21],
    ["a340", "ｗｘｙｚΑ", 16, "Σ", 6, "α", 16, "σ", 6, "ㄅ", 10],
    ["a3a1", "ㄐ", 25, "˙ˉˊˇˋ"],
    ["a3e1", "€"],
    ["a440", "一乙丁七乃九了二人儿入八几刀刁力匕十卜又三下丈上丫丸凡久么也乞于亡兀刃勺千叉口土士夕大女子孑孓寸小尢尸山川工己已巳巾干廾弋弓才"],
    ["a4a1", "丑丐不中丰丹之尹予云井互五亢仁什仃仆仇仍今介仄元允內六兮公冗凶分切刈勻勾勿化匹午升卅卞厄友及反壬天夫太夭孔少尤尺屯巴幻廿弔引心戈戶手扎支文斗斤方日曰月木欠止歹毋比毛氏水火爪父爻片牙牛犬王丙"],
    ["a540", "世丕且丘主乍乏乎以付仔仕他仗代令仙仞充兄冉冊冬凹出凸刊加功包匆北匝仟半卉卡占卯卮去可古右召叮叩叨叼司叵叫另只史叱台句叭叻四囚外"],
    ["a5a1", "央失奴奶孕它尼巨巧左市布平幼弁弘弗必戊打扔扒扑斥旦朮本未末札正母民氐永汁汀氾犯玄玉瓜瓦甘生用甩田由甲申疋白皮皿目矛矢石示禾穴立丞丟乒乓乩亙交亦亥仿伉伙伊伕伍伐休伏仲件任仰仳份企伋光兇兆先全"],
    ["a640", "共再冰列刑划刎刖劣匈匡匠印危吉吏同吊吐吁吋各向名合吃后吆吒因回囝圳地在圭圬圯圩夙多夷夸妄奸妃好她如妁字存宇守宅安寺尖屹州帆并年"],
    ["a6a1", "式弛忙忖戎戌戍成扣扛托收早旨旬旭曲曳有朽朴朱朵次此死氖汝汗汙江池汐汕污汛汍汎灰牟牝百竹米糸缶羊羽老考而耒耳聿肉肋肌臣自至臼舌舛舟艮色艾虫血行衣西阡串亨位住佇佗佞伴佛何估佐佑伽伺伸佃佔似但佣"],
    ["a740", "作你伯低伶余佝佈佚兌克免兵冶冷別判利刪刨劫助努劬匣即卵吝吭吞吾否呎吧呆呃吳呈呂君吩告吹吻吸吮吵吶吠吼呀吱含吟听囪困囤囫坊坑址坍"],
    ["a7a1", "均坎圾坐坏圻壯夾妝妒妨妞妣妙妖妍妤妓妊妥孝孜孚孛完宋宏尬局屁尿尾岐岑岔岌巫希序庇床廷弄弟彤形彷役忘忌志忍忱快忸忪戒我抄抗抖技扶抉扭把扼找批扳抒扯折扮投抓抑抆改攻攸旱更束李杏材村杜杖杞杉杆杠"],
    ["a840", "杓杗步每求汞沙沁沈沉沅沛汪決沐汰沌汨沖沒汽沃汲汾汴沆汶沍沔沘沂灶灼災灸牢牡牠狄狂玖甬甫男甸皂盯矣私秀禿究系罕肖肓肝肘肛肚育良芒"],
    ["a8a1", "芋芍見角言谷豆豕貝赤走足身車辛辰迂迆迅迄巡邑邢邪邦那酉釆里防阮阱阪阬並乖乳事些亞享京佯依侍佳使佬供例來侃佰併侈佩佻侖佾侏侑佺兔兒兕兩具其典冽函刻券刷刺到刮制剁劾劻卒協卓卑卦卷卸卹取叔受味呵"],
    ["a940", "咖呸咕咀呻呷咄咒咆呼咐呱呶和咚呢周咋命咎固垃坷坪坩坡坦坤坼夜奉奇奈奄奔妾妻委妹妮姑姆姐姍始姓姊妯妳姒姅孟孤季宗定官宜宙宛尚屈居"],
    ["a9a1", "屆岷岡岸岩岫岱岳帘帚帖帕帛帑幸庚店府底庖延弦弧弩往征彿彼忝忠忽念忿怏怔怯怵怖怪怕怡性怩怫怛或戕房戾所承拉拌拄抿拂抹拒招披拓拔拋拈抨抽押拐拙拇拍抵拚抱拘拖拗拆抬拎放斧於旺昔易昌昆昂明昀昏昕昊"],
    ["aa40", "昇服朋杭枋枕東果杳杷枇枝林杯杰板枉松析杵枚枓杼杪杲欣武歧歿氓氛泣注泳沱泌泥河沽沾沼波沫法泓沸泄油況沮泗泅泱沿治泡泛泊沬泯泜泖泠"],
    ["aaa1", "炕炎炒炊炙爬爭爸版牧物狀狎狙狗狐玩玨玟玫玥甽疝疙疚的盂盲直知矽社祀祁秉秈空穹竺糾罔羌羋者肺肥肢肱股肫肩肴肪肯臥臾舍芳芝芙芭芽芟芹花芬芥芯芸芣芰芾芷虎虱初表軋迎返近邵邸邱邶采金長門阜陀阿阻附"],
    ["ab40", "陂隹雨青非亟亭亮信侵侯便俠俑俏保促侶俘俟俊俗侮俐俄係俚俎俞侷兗冒冑冠剎剃削前剌剋則勇勉勃勁匍南卻厚叛咬哀咨哎哉咸咦咳哇哂咽咪品"],
    ["aba1", "哄哈咯咫咱咻咩咧咿囿垂型垠垣垢城垮垓奕契奏奎奐姜姘姿姣姨娃姥姪姚姦威姻孩宣宦室客宥封屎屏屍屋峙峒巷帝帥帟幽庠度建弈弭彥很待徊律徇後徉怒思怠急怎怨恍恰恨恢恆恃恬恫恪恤扁拜挖按拼拭持拮拽指拱拷"],
    ["ac40", "拯括拾拴挑挂政故斫施既春昭映昧是星昨昱昤曷柿染柱柔某柬架枯柵柩柯柄柑枴柚查枸柏柞柳枰柙柢柝柒歪殃殆段毒毗氟泉洋洲洪流津洌洱洞洗"],
    ["aca1", "活洽派洶洛泵洹洧洸洩洮洵洎洫炫為炳炬炯炭炸炮炤爰牲牯牴狩狠狡玷珊玻玲珍珀玳甚甭畏界畎畋疫疤疥疢疣癸皆皇皈盈盆盃盅省盹相眉看盾盼眇矜砂研砌砍祆祉祈祇禹禺科秒秋穿突竿竽籽紂紅紀紉紇約紆缸美羿耄"],
    ["ad40", "耐耍耑耶胖胥胚胃胄背胡胛胎胞胤胝致舢苧范茅苣苛苦茄若茂茉苒苗英茁苜苔苑苞苓苟苯茆虐虹虻虺衍衫要觔計訂訃貞負赴赳趴軍軌述迦迢迪迥"],
    ["ada1", "迭迫迤迨郊郎郁郃酋酊重閂限陋陌降面革韋韭音頁風飛食首香乘亳倌倍倣俯倦倥俸倩倖倆值借倚倒們俺倀倔倨俱倡個候倘俳修倭倪俾倫倉兼冤冥冢凍凌准凋剖剜剔剛剝匪卿原厝叟哨唐唁唷哼哥哲唆哺唔哩哭員唉哮哪"],
    ["ae40", "哦唧唇哽唏圃圄埂埔埋埃堉夏套奘奚娑娘娜娟娛娓姬娠娣娩娥娌娉孫屘宰害家宴宮宵容宸射屑展屐峭峽峻峪峨峰島崁峴差席師庫庭座弱徒徑徐恙"],
    ["aea1", "恣恥恐恕恭恩息悄悟悚悍悔悌悅悖扇拳挈拿捎挾振捕捂捆捏捉挺捐挽挪挫挨捍捌效敉料旁旅時晉晏晃晒晌晅晁書朔朕朗校核案框桓根桂桔栩梳栗桌桑栽柴桐桀格桃株桅栓栘桁殊殉殷氣氧氨氦氤泰浪涕消涇浦浸海浙涓"],
    ["af40", "浬涉浮浚浴浩涌涊浹涅浥涔烊烘烤烙烈烏爹特狼狹狽狸狷玆班琉珮珠珪珞畔畝畜畚留疾病症疲疳疽疼疹痂疸皋皰益盍盎眩真眠眨矩砰砧砸砝破砷"],
    ["afa1", "砥砭砠砟砲祕祐祠祟祖神祝祗祚秤秣秧租秦秩秘窄窈站笆笑粉紡紗紋紊素索純紐紕級紜納紙紛缺罟羔翅翁耆耘耕耙耗耽耿胱脂胰脅胭胴脆胸胳脈能脊胼胯臭臬舀舐航舫舨般芻茫荒荔荊茸荐草茵茴荏茲茹茶茗荀茱茨荃"],
    ["b040", "虔蚊蚪蚓蚤蚩蚌蚣蚜衰衷袁袂衽衹記訐討訌訕訊託訓訖訏訑豈豺豹財貢起躬軒軔軏辱送逆迷退迺迴逃追逅迸邕郡郝郢酒配酌釘針釗釜釙閃院陣陡"],
    ["b0a1", "陛陝除陘陞隻飢馬骨高鬥鬲鬼乾偺偽停假偃偌做偉健偶偎偕偵側偷偏倏偯偭兜冕凰剪副勒務勘動匐匏匙匿區匾參曼商啪啦啄啞啡啃啊唱啖問啕唯啤唸售啜唬啣唳啁啗圈國圉域堅堊堆埠埤基堂堵執培夠奢娶婁婉婦婪婀"],
    ["b140", "娼婢婚婆婊孰寇寅寄寂宿密尉專將屠屜屝崇崆崎崛崖崢崑崩崔崙崤崧崗巢常帶帳帷康庸庶庵庾張強彗彬彩彫得徙從徘御徠徜恿患悉悠您惋悴惦悽"],
    ["b1a1", "情悻悵惜悼惘惕惆惟悸惚惇戚戛扈掠控捲掖探接捷捧掘措捱掩掉掃掛捫推掄授掙採掬排掏掀捻捩捨捺敝敖救教敗啟敏敘敕敔斜斛斬族旋旌旎晝晚晤晨晦晞曹勗望梁梯梢梓梵桿桶梱梧梗械梃棄梭梆梅梔條梨梟梡梂欲殺"],
    ["b240", "毫毬氫涎涼淳淙液淡淌淤添淺清淇淋涯淑涮淞淹涸混淵淅淒渚涵淚淫淘淪深淮淨淆淄涪淬涿淦烹焉焊烽烯爽牽犁猜猛猖猓猙率琅琊球理現琍瓠瓶"],
    ["b2a1", "瓷甜產略畦畢異疏痔痕疵痊痍皎盔盒盛眷眾眼眶眸眺硫硃硎祥票祭移窒窕笠笨笛第符笙笞笮粒粗粕絆絃統紮紹紼絀細紳組累終紲紱缽羞羚翌翎習耜聊聆脯脖脣脫脩脰脤舂舵舷舶船莎莞莘荸莢莖莽莫莒莊莓莉莠荷荻荼"],
    ["b340", "莆莧處彪蛇蛀蚶蛄蚵蛆蛋蚱蚯蛉術袞袈被袒袖袍袋覓規訪訝訣訥許設訟訛訢豉豚販責貫貨貪貧赧赦趾趺軛軟這逍通逗連速逝逐逕逞造透逢逖逛途"],
    ["b3a1", "部郭都酗野釵釦釣釧釭釩閉陪陵陳陸陰陴陶陷陬雀雪雩章竟頂頃魚鳥鹵鹿麥麻傢傍傅備傑傀傖傘傚最凱割剴創剩勞勝勛博厥啻喀喧啼喊喝喘喂喜喪喔喇喋喃喳單喟唾喲喚喻喬喱啾喉喫喙圍堯堪場堤堰報堡堝堠壹壺奠"],
    ["b440", "婷媚婿媒媛媧孳孱寒富寓寐尊尋就嵌嵐崴嵇巽幅帽幀幃幾廊廁廂廄弼彭復循徨惑惡悲悶惠愜愣惺愕惰惻惴慨惱愎惶愉愀愒戟扉掣掌描揀揩揉揆揍"],
    ["b4a1", "插揣提握揖揭揮捶援揪換摒揚揹敞敦敢散斑斐斯普晰晴晶景暑智晾晷曾替期朝棺棕棠棘棗椅棟棵森棧棹棒棲棣棋棍植椒椎棉棚楮棻款欺欽殘殖殼毯氮氯氬港游湔渡渲湧湊渠渥渣減湛湘渤湖湮渭渦湯渴湍渺測湃渝渾滋"],
    ["b540", "溉渙湎湣湄湲湩湟焙焚焦焰無然煮焜牌犄犀猶猥猴猩琺琪琳琢琥琵琶琴琯琛琦琨甥甦畫番痢痛痣痙痘痞痠登發皖皓皴盜睏短硝硬硯稍稈程稅稀窘"],
    ["b5a1", "窗窖童竣等策筆筐筒答筍筋筏筑粟粥絞結絨絕紫絮絲絡給絢絰絳善翔翕耋聒肅腕腔腋腑腎脹腆脾腌腓腴舒舜菩萃菸萍菠菅萋菁華菱菴著萊菰萌菌菽菲菊萸萎萄菜萇菔菟虛蛟蛙蛭蛔蛛蛤蛐蛞街裁裂袱覃視註詠評詞証詁"],
    ["b640", "詔詛詐詆訴診訶詖象貂貯貼貳貽賁費賀貴買貶貿貸越超趁跎距跋跚跑跌跛跆軻軸軼辜逮逵週逸進逶鄂郵鄉郾酣酥量鈔鈕鈣鈉鈞鈍鈐鈇鈑閔閏開閑"],
    ["b6a1", "間閒閎隊階隋陽隅隆隍陲隄雁雅雄集雇雯雲韌項順須飧飪飯飩飲飭馮馭黃黍黑亂傭債傲傳僅傾催傷傻傯僇剿剷剽募勦勤勢勣匯嗟嗨嗓嗦嗎嗜嗇嗑嗣嗤嗯嗚嗡嗅嗆嗥嗉園圓塞塑塘塗塚塔填塌塭塊塢塒塋奧嫁嫉嫌媾媽媼"],
    ["b740", "媳嫂媲嵩嵯幌幹廉廈弒彙徬微愚意慈感想愛惹愁愈慎慌慄慍愾愴愧愍愆愷戡戢搓搾搞搪搭搽搬搏搜搔損搶搖搗搆敬斟新暗暉暇暈暖暄暘暍會榔業"],
    ["b7a1", "楚楷楠楔極椰概楊楨楫楞楓楹榆楝楣楛歇歲毀殿毓毽溢溯滓溶滂源溝滇滅溥溘溼溺溫滑準溜滄滔溪溧溴煎煙煩煤煉照煜煬煦煌煥煞煆煨煖爺牒猷獅猿猾瑯瑚瑕瑟瑞瑁琿瑙瑛瑜當畸瘀痰瘁痲痱痺痿痴痳盞盟睛睫睦睞督"],
    ["b840", "睹睪睬睜睥睨睢矮碎碰碗碘碌碉硼碑碓硿祺祿禁萬禽稜稚稠稔稟稞窟窠筷節筠筮筧粱粳粵經絹綑綁綏絛置罩罪署義羨群聖聘肆肄腱腰腸腥腮腳腫"],
    ["b8a1", "腹腺腦舅艇蒂葷落萱葵葦葫葉葬葛萼萵葡董葩葭葆虞虜號蛹蜓蜈蜇蜀蛾蛻蜂蜃蜆蜊衙裟裔裙補裘裝裡裊裕裒覜解詫該詳試詩詰誇詼詣誠話誅詭詢詮詬詹詻訾詨豢貊貉賊資賈賄貲賃賂賅跡跟跨路跳跺跪跤跦躲較載軾輊"],
    ["b940", "辟農運遊道遂達逼違遐遇遏過遍遑逾遁鄒鄗酬酪酩釉鈷鉗鈸鈽鉀鈾鉛鉋鉤鉑鈴鉉鉍鉅鈹鈿鉚閘隘隔隕雍雋雉雊雷電雹零靖靴靶預頑頓頊頒頌飼飴"],
    ["b9a1", "飽飾馳馱馴髡鳩麂鼎鼓鼠僧僮僥僖僭僚僕像僑僱僎僩兢凳劃劂匱厭嗾嘀嘛嘗嗽嘔嘆嘉嘍嘎嗷嘖嘟嘈嘐嗶團圖塵塾境墓墊塹墅塽壽夥夢夤奪奩嫡嫦嫩嫗嫖嫘嫣孵寞寧寡寥實寨寢寤察對屢嶄嶇幛幣幕幗幔廓廖弊彆彰徹慇"],
    ["ba40", "愿態慷慢慣慟慚慘慵截撇摘摔撤摸摟摺摑摧搴摭摻敲斡旗旖暢暨暝榜榨榕槁榮槓構榛榷榻榫榴槐槍榭槌榦槃榣歉歌氳漳演滾漓滴漩漾漠漬漏漂漢"],
    ["baa1", "滿滯漆漱漸漲漣漕漫漯澈漪滬漁滲滌滷熔熙煽熊熄熒爾犒犖獄獐瑤瑣瑪瑰瑭甄疑瘧瘍瘋瘉瘓盡監瞄睽睿睡磁碟碧碳碩碣禎福禍種稱窪窩竭端管箕箋筵算箝箔箏箸箇箄粹粽精綻綰綜綽綾綠緊綴網綱綺綢綿綵綸維緒緇綬"],
    ["bb40", "罰翠翡翟聞聚肇腐膀膏膈膊腿膂臧臺與舔舞艋蓉蒿蓆蓄蒙蒞蒲蒜蓋蒸蓀蓓蒐蒼蓑蓊蜿蜜蜻蜢蜥蜴蜘蝕蜷蜩裳褂裴裹裸製裨褚裯誦誌語誣認誡誓誤"],
    ["bba1", "說誥誨誘誑誚誧豪貍貌賓賑賒赫趙趕跼輔輒輕輓辣遠遘遜遣遙遞遢遝遛鄙鄘鄞酵酸酷酴鉸銀銅銘銖鉻銓銜銨鉼銑閡閨閩閣閥閤隙障際雌雒需靼鞅韶頗領颯颱餃餅餌餉駁骯骰髦魁魂鳴鳶鳳麼鼻齊億儀僻僵價儂儈儉儅凜"],
    ["bc40", "劇劈劉劍劊勰厲嘮嘻嘹嘲嘿嘴嘩噓噎噗噴嘶嘯嘰墀墟增墳墜墮墩墦奭嬉嫻嬋嫵嬌嬈寮寬審寫層履嶝嶔幢幟幡廢廚廟廝廣廠彈影德徵慶慧慮慝慕憂"],
    ["bca1", "慼慰慫慾憧憐憫憎憬憚憤憔憮戮摩摯摹撞撲撈撐撰撥撓撕撩撒撮播撫撚撬撙撢撳敵敷數暮暫暴暱樣樟槨樁樞標槽模樓樊槳樂樅槭樑歐歎殤毅毆漿潼澄潑潦潔澆潭潛潸潮澎潺潰潤澗潘滕潯潠潟熟熬熱熨牖犛獎獗瑩璋璃"],
    ["bd40", "瑾璀畿瘠瘩瘟瘤瘦瘡瘢皚皺盤瞎瞇瞌瞑瞋磋磅確磊碾磕碼磐稿稼穀稽稷稻窯窮箭箱範箴篆篇篁箠篌糊締練緯緻緘緬緝編緣線緞緩綞緙緲緹罵罷羯"],
    ["bda1", "翩耦膛膜膝膠膚膘蔗蔽蔚蓮蔬蔭蔓蔑蔣蔡蔔蓬蔥蓿蔆螂蝴蝶蝠蝦蝸蝨蝙蝗蝌蝓衛衝褐複褒褓褕褊誼諒談諄誕請諸課諉諂調誰論諍誶誹諛豌豎豬賠賞賦賤賬賭賢賣賜質賡赭趟趣踫踐踝踢踏踩踟踡踞躺輝輛輟輩輦輪輜輞"],
    ["be40", "輥適遮遨遭遷鄰鄭鄧鄱醇醉醋醃鋅銻銷鋪銬鋤鋁銳銼鋒鋇鋰銲閭閱霄霆震霉靠鞍鞋鞏頡頫頜颳養餓餒餘駝駐駟駛駑駕駒駙骷髮髯鬧魅魄魷魯鴆鴉"],
    ["bea1", "鴃麩麾黎墨齒儒儘儔儐儕冀冪凝劑劓勳噙噫噹噩噤噸噪器噥噱噯噬噢噶壁墾壇壅奮嬝嬴學寰導彊憲憑憩憊懍憶憾懊懈戰擅擁擋撻撼據擄擇擂操撿擒擔撾整曆曉暹曄曇暸樽樸樺橙橫橘樹橄橢橡橋橇樵機橈歙歷氅濂澱澡"],
    ["bf40", "濃澤濁澧澳激澹澶澦澠澴熾燉燐燒燈燕熹燎燙燜燃燄獨璜璣璘璟璞瓢甌甍瘴瘸瘺盧盥瞠瞞瞟瞥磨磚磬磧禦積穎穆穌穋窺篙簑築篤篛篡篩篦糕糖縊"],
    ["bfa1", "縑縈縛縣縞縝縉縐罹羲翰翱翮耨膳膩膨臻興艘艙蕊蕙蕈蕨蕩蕃蕉蕭蕪蕞螃螟螞螢融衡褪褲褥褫褡親覦諦諺諫諱謀諜諧諮諾謁謂諷諭諳諶諼豫豭貓賴蹄踱踴蹂踹踵輻輯輸輳辨辦遵遴選遲遼遺鄴醒錠錶鋸錳錯錢鋼錫錄錚"],
    ["c040", "錐錦錡錕錮錙閻隧隨險雕霎霑霖霍霓霏靛靜靦鞘頰頸頻頷頭頹頤餐館餞餛餡餚駭駢駱骸骼髻髭鬨鮑鴕鴣鴦鴨鴒鴛默黔龍龜優償儡儲勵嚎嚀嚐嚅嚇"],
    ["c0a1", "嚏壕壓壑壎嬰嬪嬤孺尷屨嶼嶺嶽嶸幫彌徽應懂懇懦懋戲戴擎擊擘擠擰擦擬擱擢擭斂斃曙曖檀檔檄檢檜櫛檣橾檗檐檠歜殮毚氈濘濱濟濠濛濤濫濯澀濬濡濩濕濮濰燧營燮燦燥燭燬燴燠爵牆獰獲璩環璦璨癆療癌盪瞳瞪瞰瞬"],
    ["c140", "瞧瞭矯磷磺磴磯礁禧禪穗窿簇簍篾篷簌篠糠糜糞糢糟糙糝縮績繆縷縲繃縫總縱繅繁縴縹繈縵縿縯罄翳翼聱聲聰聯聳臆臃膺臂臀膿膽臉膾臨舉艱薪"],
    ["c1a1", "薄蕾薜薑薔薯薛薇薨薊虧蟀蟑螳蟒蟆螫螻螺蟈蟋褻褶襄褸褽覬謎謗謙講謊謠謝謄謐豁谿豳賺賽購賸賻趨蹉蹋蹈蹊轄輾轂轅輿避遽還邁邂邀鄹醣醞醜鍍鎂錨鍵鍊鍥鍋錘鍾鍬鍛鍰鍚鍔闊闋闌闈闆隱隸雖霜霞鞠韓顆颶餵騁"],
    ["c240", "駿鮮鮫鮪鮭鴻鴿麋黏點黜黝黛鼾齋叢嚕嚮壙壘嬸彝懣戳擴擲擾攆擺擻擷斷曜朦檳檬櫃檻檸櫂檮檯歟歸殯瀉瀋濾瀆濺瀑瀏燻燼燾燸獷獵璧璿甕癖癘"],
    ["c2a1", "癒瞽瞿瞻瞼礎禮穡穢穠竄竅簫簧簪簞簣簡糧織繕繞繚繡繒繙罈翹翻職聶臍臏舊藏薩藍藐藉薰薺薹薦蟯蟬蟲蟠覆覲觴謨謹謬謫豐贅蹙蹣蹦蹤蹟蹕軀轉轍邇邃邈醫醬釐鎔鎊鎖鎢鎳鎮鎬鎰鎘鎚鎗闔闖闐闕離雜雙雛雞霤鞣鞦"],
    ["c340", "鞭韹額顏題顎顓颺餾餿餽餮馥騎髁鬃鬆魏魎魍鯊鯉鯽鯈鯀鵑鵝鵠黠鼕鼬儳嚥壞壟壢寵龐廬懲懷懶懵攀攏曠曝櫥櫝櫚櫓瀛瀟瀨瀚瀝瀕瀘爆爍牘犢獸"],
    ["c3a1", "獺璽瓊瓣疇疆癟癡矇礙禱穫穩簾簿簸簽簷籀繫繭繹繩繪羅繳羶羹羸臘藩藝藪藕藤藥藷蟻蠅蠍蟹蟾襠襟襖襞譁譜識證譚譎譏譆譙贈贊蹼蹲躇蹶蹬蹺蹴轔轎辭邊邋醱醮鏡鏑鏟鏃鏈鏜鏝鏖鏢鏍鏘鏤鏗鏨關隴難霪霧靡韜韻類"],
    ["c440", "願顛颼饅饉騖騙鬍鯨鯧鯖鯛鶉鵡鵲鵪鵬麒麗麓麴勸嚨嚷嚶嚴嚼壤孀孃孽寶巉懸懺攘攔攙曦朧櫬瀾瀰瀲爐獻瓏癢癥礦礪礬礫竇競籌籃籍糯糰辮繽繼"],
    ["c4a1", "纂罌耀臚艦藻藹蘑藺蘆蘋蘇蘊蠔蠕襤覺觸議譬警譯譟譫贏贍躉躁躅躂醴釋鐘鐃鏽闡霰飄饒饑馨騫騰騷騵鰓鰍鹹麵黨鼯齟齣齡儷儸囁囀囂夔屬巍懼懾攝攜斕曩櫻欄櫺殲灌爛犧瓖瓔癩矓籐纏續羼蘗蘭蘚蠣蠢蠡蠟襪襬覽譴"],
    ["c540", "護譽贓躊躍躋轟辯醺鐮鐳鐵鐺鐸鐲鐫闢霸霹露響顧顥饗驅驃驀騾髏魔魑鰭鰥鶯鶴鷂鶸麝黯鼙齜齦齧儼儻囈囊囉孿巔巒彎懿攤權歡灑灘玀瓤疊癮癬"],
    ["c5a1", "禳籠籟聾聽臟襲襯觼讀贖贗躑躓轡酈鑄鑑鑒霽霾韃韁顫饕驕驍髒鬚鱉鰱鰾鰻鷓鷗鼴齬齪龔囌巖戀攣攫攪曬欐瓚竊籤籣籥纓纖纔臢蘸蘿蠱變邐邏鑣鑠鑤靨顯饜驚驛驗髓體髑鱔鱗鱖鷥麟黴囑壩攬灞癱癲矗罐羈蠶蠹衢讓讒"],
    ["c640", "讖艷贛釀鑪靂靈靄韆顰驟鬢魘鱟鷹鷺鹼鹽鼇齷齲廳欖灣籬籮蠻觀躡釁鑲鑰顱饞髖鬣黌灤矚讚鑷韉驢驥纜讜躪釅鑽鑾鑼鱷鱸黷豔鑿鸚爨驪鬱鸛鸞籲"],
    ["c940", "乂乜凵匚厂万丌乇亍囗兀屮彳丏冇与丮亓仂仉仈冘勼卬厹圠夃夬尐巿旡殳毌气爿丱丼仨仜仩仡仝仚刌匜卌圢圣夗夯宁宄尒尻屴屳帄庀庂忉戉扐氕"],
    ["c9a1", "氶汃氿氻犮犰玊禸肊阞伎优伬仵伔仱伀价伈伝伂伅伢伓伄仴伒冱刓刉刐劦匢匟卍厊吇囡囟圮圪圴夼妀奼妅奻奾奷奿孖尕尥屼屺屻屾巟幵庄异弚彴忕忔忏扜扞扤扡扦扢扙扠扚扥旯旮朾朹朸朻机朿朼朳氘汆汒汜汏汊汔汋"],
    ["ca40", "汌灱牞犴犵玎甪癿穵网艸艼芀艽艿虍襾邙邗邘邛邔阢阤阠阣佖伻佢佉体佤伾佧佒佟佁佘伭伳伿佡冏冹刜刞刡劭劮匉卣卲厎厏吰吷吪呔呅吙吜吥吘"],
    ["caa1", "吽呏呁吨吤呇囮囧囥坁坅坌坉坋坒夆奀妦妘妠妗妎妢妐妏妧妡宎宒尨尪岍岏岈岋岉岒岊岆岓岕巠帊帎庋庉庌庈庍弅弝彸彶忒忑忐忭忨忮忳忡忤忣忺忯忷忻怀忴戺抃抌抎抏抔抇扱扻扺扰抁抈扷扽扲扴攷旰旴旳旲旵杅杇"],
    ["cb40", "杙杕杌杈杝杍杚杋毐氙氚汸汧汫沄沋沏汱汯汩沚汭沇沕沜汦汳汥汻沎灴灺牣犿犽狃狆狁犺狅玕玗玓玔玒町甹疔疕皁礽耴肕肙肐肒肜芐芏芅芎芑芓"],
    ["cba1", "芊芃芄豸迉辿邟邡邥邞邧邠阰阨阯阭丳侘佼侅佽侀侇佶佴侉侄佷佌侗佪侚佹侁佸侐侜侔侞侒侂侕佫佮冞冼冾刵刲刳剆刱劼匊匋匼厒厔咇呿咁咑咂咈呫呺呾呥呬呴呦咍呯呡呠咘呣呧呤囷囹坯坲坭坫坱坰坶垀坵坻坳坴坢"],
    ["cc40", "坨坽夌奅妵妺姏姎妲姌姁妶妼姃姖妱妽姀姈妴姇孢孥宓宕屄屇岮岤岠岵岯岨岬岟岣岭岢岪岧岝岥岶岰岦帗帔帙弨弢弣弤彔徂彾彽忞忥怭怦怙怲怋"],
    ["cca1", "怴怊怗怳怚怞怬怢怍怐怮怓怑怌怉怜戔戽抭抴拑抾抪抶拊抮抳抯抻抩抰抸攽斨斻昉旼昄昒昈旻昃昋昍昅旽昑昐曶朊枅杬枎枒杶杻枘枆构杴枍枌杺枟枑枙枃杽极杸杹枔欥殀歾毞氝沓泬泫泮泙沶泔沭泧沷泐泂沺泃泆泭泲"],
    ["cd40", "泒泝沴沊沝沀泞泀洰泍泇沰泹泏泩泑炔炘炅炓炆炄炑炖炂炚炃牪狖狋狘狉狜狒狔狚狌狑玤玡玭玦玢玠玬玝瓝瓨甿畀甾疌疘皯盳盱盰盵矸矼矹矻矺"],
    ["cda1", "矷祂礿秅穸穻竻籵糽耵肏肮肣肸肵肭舠芠苀芫芚芘芛芵芧芮芼芞芺芴芨芡芩苂芤苃芶芢虰虯虭虮豖迒迋迓迍迖迕迗邲邴邯邳邰阹阽阼阺陃俍俅俓侲俉俋俁俔俜俙侻侳俛俇俖侺俀侹俬剄剉勀勂匽卼厗厖厙厘咺咡咭咥哏"],
    ["ce40", "哃茍咷咮哖咶哅哆咠呰咼咢咾呲哞咰垵垞垟垤垌垗垝垛垔垘垏垙垥垚垕壴复奓姡姞姮娀姱姝姺姽姼姶姤姲姷姛姩姳姵姠姾姴姭宨屌峐峘峌峗峋峛"],
    ["cea1", "峞峚峉峇峊峖峓峔峏峈峆峎峟峸巹帡帢帣帠帤庰庤庢庛庣庥弇弮彖徆怷怹恔恲恞恅恓恇恉恛恌恀恂恟怤恄恘恦恮扂扃拏挍挋拵挎挃拫拹挏挌拸拶挀挓挔拺挕拻拰敁敃斪斿昶昡昲昵昜昦昢昳昫昺昝昴昹昮朏朐柁柲柈枺"],
    ["cf40", "柜枻柸柘柀枷柅柫柤柟枵柍枳柷柶柮柣柂枹柎柧柰枲柼柆柭柌枮柦柛柺柉柊柃柪柋欨殂殄殶毖毘毠氠氡洨洴洭洟洼洿洒洊泚洳洄洙洺洚洑洀洝浂"],
    ["cfa1", "洁洘洷洃洏浀洇洠洬洈洢洉洐炷炟炾炱炰炡炴炵炩牁牉牊牬牰牳牮狊狤狨狫狟狪狦狣玅珌珂珈珅玹玶玵玴珫玿珇玾珃珆玸珋瓬瓮甮畇畈疧疪癹盄眈眃眄眅眊盷盻盺矧矨砆砑砒砅砐砏砎砉砃砓祊祌祋祅祄秕种秏秖秎窀"],
    ["d040", "穾竑笀笁籺籸籹籿粀粁紃紈紁罘羑羍羾耇耎耏耔耷胘胇胠胑胈胂胐胅胣胙胜胊胕胉胏胗胦胍臿舡芔苙苾苹茇苨茀苕茺苫苖苴苬苡苲苵茌苻苶苰苪"],
    ["d0a1", "苤苠苺苳苭虷虴虼虳衁衎衧衪衩觓訄訇赲迣迡迮迠郱邽邿郕郅邾郇郋郈釔釓陔陏陑陓陊陎倞倅倇倓倢倰倛俵俴倳倷倬俶俷倗倜倠倧倵倯倱倎党冔冓凊凄凅凈凎剡剚剒剞剟剕剢勍匎厞唦哢唗唒哧哳哤唚哿唄唈哫唑唅哱"],
    ["d140", "唊哻哷哸哠唎唃唋圁圂埌堲埕埒垺埆垽垼垸垶垿埇埐垹埁夎奊娙娖娭娮娕娏娗娊娞娳孬宧宭宬尃屖屔峬峿峮峱峷崀峹帩帨庨庮庪庬弳弰彧恝恚恧"],
    ["d1a1", "恁悢悈悀悒悁悝悃悕悛悗悇悜悎戙扆拲挐捖挬捄捅挶捃揤挹捋捊挼挩捁挴捘捔捙挭捇挳捚捑挸捗捀捈敊敆旆旃旄旂晊晟晇晑朒朓栟栚桉栲栳栻桋桏栖栱栜栵栫栭栯桎桄栴栝栒栔栦栨栮桍栺栥栠欬欯欭欱欴歭肂殈毦毤"],
    ["d240", "毨毣毢毧氥浺浣浤浶洍浡涒浘浢浭浯涑涍淯浿涆浞浧浠涗浰浼浟涂涘洯浨涋浾涀涄洖涃浻浽浵涐烜烓烑烝烋缹烢烗烒烞烠烔烍烅烆烇烚烎烡牂牸"],
    ["d2a1", "牷牶猀狺狴狾狶狳狻猁珓珙珥珖玼珧珣珩珜珒珛珔珝珚珗珘珨瓞瓟瓴瓵甡畛畟疰痁疻痄痀疿疶疺皊盉眝眛眐眓眒眣眑眕眙眚眢眧砣砬砢砵砯砨砮砫砡砩砳砪砱祔祛祏祜祓祒祑秫秬秠秮秭秪秜秞秝窆窉窅窋窌窊窇竘笐"],
    ["d340", "笄笓笅笏笈笊笎笉笒粄粑粊粌粈粍粅紞紝紑紎紘紖紓紟紒紏紌罜罡罞罠罝罛羖羒翃翂翀耖耾耹胺胲胹胵脁胻脀舁舯舥茳茭荄茙荑茥荖茿荁茦茜茢"],
    ["d3a1", "荂荎茛茪茈茼荍茖茤茠茷茯茩荇荅荌荓茞茬荋茧荈虓虒蚢蚨蚖蚍蚑蚞蚇蚗蚆蚋蚚蚅蚥蚙蚡蚧蚕蚘蚎蚝蚐蚔衃衄衭衵衶衲袀衱衿衯袃衾衴衼訒豇豗豻貤貣赶赸趵趷趶軑軓迾迵适迿迻逄迼迶郖郠郙郚郣郟郥郘郛郗郜郤酐"],
    ["d440", "酎酏釕釢釚陜陟隼飣髟鬯乿偰偪偡偞偠偓偋偝偲偈偍偁偛偊偢倕偅偟偩偫偣偤偆偀偮偳偗偑凐剫剭剬剮勖勓匭厜啵啶唼啍啐唴唪啑啢唶唵唰啒啅"],
    ["d4a1", "唌唲啥啎唹啈唭唻啀啋圊圇埻堔埢埶埜埴堀埭埽堈埸堋埳埏堇埮埣埲埥埬埡堎埼堐埧堁堌埱埩埰堍堄奜婠婘婕婧婞娸娵婭婐婟婥婬婓婤婗婃婝婒婄婛婈媎娾婍娹婌婰婩婇婑婖婂婜孲孮寁寀屙崞崋崝崚崠崌崨崍崦崥崏"],
    ["d540", "崰崒崣崟崮帾帴庱庴庹庲庳弶弸徛徖徟悊悐悆悾悰悺惓惔惏惤惙惝惈悱惛悷惊悿惃惍惀挲捥掊掂捽掽掞掭掝掗掫掎捯掇掐据掯捵掜捭掮捼掤挻掟"],
    ["d5a1", "捸掅掁掑掍捰敓旍晥晡晛晙晜晢朘桹梇梐梜桭桮梮梫楖桯梣梬梩桵桴梲梏桷梒桼桫桲梪梀桱桾梛梖梋梠梉梤桸桻梑梌梊桽欶欳欷欸殑殏殍殎殌氪淀涫涴涳湴涬淩淢涷淶淔渀淈淠淟淖涾淥淜淝淛淴淊涽淭淰涺淕淂淏淉"],
    ["d640", "淐淲淓淽淗淍淣涻烺焍烷焗烴焌烰焄烳焐烼烿焆焓焀烸烶焋焂焎牾牻牼牿猝猗猇猑猘猊猈狿猏猞玈珶珸珵琄琁珽琇琀珺珼珿琌琋珴琈畤畣痎痒痏"],
    ["d6a1", "痋痌痑痐皏皉盓眹眯眭眱眲眴眳眽眥眻眵硈硒硉硍硊硌砦硅硐祤祧祩祪祣祫祡离秺秸秶秷窏窔窐笵筇笴笥笰笢笤笳笘笪笝笱笫笭笯笲笸笚笣粔粘粖粣紵紽紸紶紺絅紬紩絁絇紾紿絊紻紨罣羕羜羝羛翊翋翍翐翑翇翏翉耟"],
    ["d740", "耞耛聇聃聈脘脥脙脛脭脟脬脞脡脕脧脝脢舑舸舳舺舴舲艴莐莣莨莍荺荳莤荴莏莁莕莙荵莔莩荽莃莌莝莛莪莋荾莥莯莈莗莰荿莦莇莮荶莚虙虖蚿蚷"],
    ["d7a1", "蛂蛁蛅蚺蚰蛈蚹蚳蚸蛌蚴蚻蚼蛃蚽蚾衒袉袕袨袢袪袚袑袡袟袘袧袙袛袗袤袬袌袓袎覂觖觙觕訰訧訬訞谹谻豜豝豽貥赽赻赹趼跂趹趿跁軘軞軝軜軗軠軡逤逋逑逜逌逡郯郪郰郴郲郳郔郫郬郩酖酘酚酓酕釬釴釱釳釸釤釹釪"],
    ["d840", "釫釷釨釮镺閆閈陼陭陫陱陯隿靪頄飥馗傛傕傔傞傋傣傃傌傎傝偨傜傒傂傇兟凔匒匑厤厧喑喨喥喭啷噅喢喓喈喏喵喁喣喒喤啽喌喦啿喕喡喎圌堩堷"],
    ["d8a1", "堙堞堧堣堨埵塈堥堜堛堳堿堶堮堹堸堭堬堻奡媯媔媟婺媢媞婸媦婼媥媬媕媮娷媄媊媗媃媋媩婻婽媌媜媏媓媝寪寍寋寔寑寊寎尌尰崷嵃嵫嵁嵋崿崵嵑嵎嵕崳崺嵒崽崱嵙嵂崹嵉崸崼崲崶嵀嵅幄幁彘徦徥徫惉悹惌惢惎惄愔"],
    ["d940", "惲愊愖愅惵愓惸惼惾惁愃愘愝愐惿愄愋扊掔掱掰揎揥揨揯揃撝揳揊揠揶揕揲揵摡揟掾揝揜揄揘揓揂揇揌揋揈揰揗揙攲敧敪敤敜敨敥斌斝斞斮旐旒"],
    ["d9a1", "晼晬晻暀晱晹晪晲朁椌棓椄棜椪棬棪棱椏棖棷棫棤棶椓椐棳棡椇棌椈楰梴椑棯棆椔棸棐棽棼棨椋椊椗棎棈棝棞棦棴棑椆棔棩椕椥棇欹欻欿欼殔殗殙殕殽毰毲毳氰淼湆湇渟湉溈渼渽湅湢渫渿湁湝湳渜渳湋湀湑渻渃渮湞"],
    ["da40", "湨湜湡渱渨湠湱湫渹渢渰湓湥渧湸湤湷湕湹湒湦渵渶湚焠焞焯烻焮焱焣焥焢焲焟焨焺焛牋牚犈犉犆犅犋猒猋猰猢猱猳猧猲猭猦猣猵猌琮琬琰琫琖"],
    ["daa1", "琚琡琭琱琤琣琝琩琠琲瓻甯畯畬痧痚痡痦痝痟痤痗皕皒盚睆睇睄睍睅睊睎睋睌矞矬硠硤硥硜硭硱硪确硰硩硨硞硢祴祳祲祰稂稊稃稌稄窙竦竤筊笻筄筈筌筎筀筘筅粢粞粨粡絘絯絣絓絖絧絪絏絭絜絫絒絔絩絑絟絎缾缿罥"],
    ["db40", "罦羢羠羡翗聑聏聐胾胔腃腊腒腏腇脽腍脺臦臮臷臸臹舄舼舽舿艵茻菏菹萣菀菨萒菧菤菼菶萐菆菈菫菣莿萁菝菥菘菿菡菋菎菖菵菉萉萏菞萑萆菂菳"],
    ["dba1", "菕菺菇菑菪萓菃菬菮菄菻菗菢萛菛菾蛘蛢蛦蛓蛣蛚蛪蛝蛫蛜蛬蛩蛗蛨蛑衈衖衕袺裗袹袸裀袾袶袼袷袽袲褁裉覕覘覗觝觚觛詎詍訹詙詀詗詘詄詅詒詈詑詊詌詏豟貁貀貺貾貰貹貵趄趀趉跘跓跍跇跖跜跏跕跙跈跗跅軯軷軺"],
    ["dc40", "軹軦軮軥軵軧軨軶軫軱軬軴軩逭逴逯鄆鄬鄄郿郼鄈郹郻鄁鄀鄇鄅鄃酡酤酟酢酠鈁鈊鈥鈃鈚鈦鈏鈌鈀鈒釿釽鈆鈄鈧鈂鈜鈤鈙鈗鈅鈖镻閍閌閐隇陾隈"],
    ["dca1", "隉隃隀雂雈雃雱雰靬靰靮頇颩飫鳦黹亃亄亶傽傿僆傮僄僊傴僈僂傰僁傺傱僋僉傶傸凗剺剸剻剼嗃嗛嗌嗐嗋嗊嗝嗀嗔嗄嗩喿嗒喍嗏嗕嗢嗖嗈嗲嗍嗙嗂圔塓塨塤塏塍塉塯塕塎塝塙塥塛堽塣塱壼嫇嫄嫋媺媸媱媵媰媿嫈媻嫆"],
    ["dd40", "媷嫀嫊媴媶嫍媹媐寖寘寙尟尳嵱嵣嵊嵥嵲嵬嵞嵨嵧嵢巰幏幎幊幍幋廅廌廆廋廇彀徯徭惷慉慊愫慅愶愲愮慆愯慏愩慀戠酨戣戥戤揅揱揫搐搒搉搠搤"],
    ["dda1", "搳摃搟搕搘搹搷搢搣搌搦搰搨摁搵搯搊搚摀搥搧搋揧搛搮搡搎敯斒旓暆暌暕暐暋暊暙暔晸朠楦楟椸楎楢楱椿楅楪椹楂楗楙楺楈楉椵楬椳椽楥棰楸椴楩楀楯楄楶楘楁楴楌椻楋椷楜楏楑椲楒椯楻椼歆歅歃歂歈歁殛嗀毻毼"],
    ["de40", "毹毷毸溛滖滈溏滀溟溓溔溠溱溹滆滒溽滁溞滉溷溰滍溦滏溲溾滃滜滘溙溒溎溍溤溡溿溳滐滊溗溮溣煇煔煒煣煠煁煝煢煲煸煪煡煂煘煃煋煰煟煐煓"],
    ["dea1", "煄煍煚牏犍犌犑犐犎猼獂猻猺獀獊獉瑄瑊瑋瑒瑑瑗瑀瑏瑐瑎瑂瑆瑍瑔瓡瓿瓾瓽甝畹畷榃痯瘏瘃痷痾痼痹痸瘐痻痶痭痵痽皙皵盝睕睟睠睒睖睚睩睧睔睙睭矠碇碚碔碏碄碕碅碆碡碃硹碙碀碖硻祼禂祽祹稑稘稙稒稗稕稢稓"],
    ["df40", "稛稐窣窢窞竫筦筤筭筴筩筲筥筳筱筰筡筸筶筣粲粴粯綈綆綀綍絿綅絺綎絻綃絼綌綔綄絽綒罭罫罧罨罬羦羥羧翛翜耡腤腠腷腜腩腛腢腲朡腞腶腧腯"],
    ["dfa1", "腄腡舝艉艄艀艂艅蓱萿葖葶葹蒏蒍葥葑葀蒆葧萰葍葽葚葙葴葳葝蔇葞萷萺萴葺葃葸萲葅萩菙葋萯葂萭葟葰萹葎葌葒葯蓅蒎萻葇萶萳葨葾葄萫葠葔葮葐蜋蜄蛷蜌蛺蛖蛵蝍蛸蜎蜉蜁蛶蜍蜅裖裋裍裎裞裛裚裌裐覅覛觟觥觤"],
    ["e040", "觡觠觢觜触詶誆詿詡訿詷誂誄詵誃誁詴詺谼豋豊豥豤豦貆貄貅賌赨赩趑趌趎趏趍趓趔趐趒跰跠跬跱跮跐跩跣跢跧跲跫跴輆軿輁輀輅輇輈輂輋遒逿"],
    ["e0a1", "遄遉逽鄐鄍鄏鄑鄖鄔鄋鄎酮酯鉈鉒鈰鈺鉦鈳鉥鉞銃鈮鉊鉆鉭鉬鉏鉠鉧鉯鈶鉡鉰鈱鉔鉣鉐鉲鉎鉓鉌鉖鈲閟閜閞閛隒隓隑隗雎雺雽雸雵靳靷靸靲頏頍頎颬飶飹馯馲馰馵骭骫魛鳪鳭鳧麀黽僦僔僗僨僳僛僪僝僤僓僬僰僯僣僠"],
    ["e140", "凘劀劁勩勫匰厬嘧嘕嘌嘒嗼嘏嘜嘁嘓嘂嗺嘝嘄嗿嗹墉塼墐墘墆墁塿塴墋塺墇墑墎塶墂墈塻墔墏壾奫嫜嫮嫥嫕嫪嫚嫭嫫嫳嫢嫠嫛嫬嫞嫝嫙嫨嫟孷寠"],
    ["e1a1", "寣屣嶂嶀嵽嶆嵺嶁嵷嶊嶉嶈嵾嵼嶍嵹嵿幘幙幓廘廑廗廎廜廕廙廒廔彄彃彯徶愬愨慁慞慱慳慒慓慲慬憀慴慔慺慛慥愻慪慡慖戩戧戫搫摍摛摝摴摶摲摳摽摵摦撦摎撂摞摜摋摓摠摐摿搿摬摫摙摥摷敳斠暡暠暟朅朄朢榱榶槉"],
    ["e240", "榠槎榖榰榬榼榑榙榎榧榍榩榾榯榿槄榽榤槔榹槊榚槏榳榓榪榡榞槙榗榐槂榵榥槆歊歍歋殞殟殠毃毄毾滎滵滱漃漥滸漷滻漮漉潎漙漚漧漘漻漒滭漊"],
    ["e2a1", "漶潳滹滮漭潀漰漼漵滫漇漎潃漅滽滶漹漜滼漺漟漍漞漈漡熇熐熉熀熅熂熏煻熆熁熗牄牓犗犕犓獃獍獑獌瑢瑳瑱瑵瑲瑧瑮甀甂甃畽疐瘖瘈瘌瘕瘑瘊瘔皸瞁睼瞅瞂睮瞀睯睾瞃碲碪碴碭碨硾碫碞碥碠碬碢碤禘禊禋禖禕禔禓"],
    ["e340", "禗禈禒禐稫穊稰稯稨稦窨窫窬竮箈箜箊箑箐箖箍箌箛箎箅箘劄箙箤箂粻粿粼粺綧綷緂綣綪緁緀緅綝緎緄緆緋緌綯綹綖綼綟綦綮綩綡緉罳翢翣翥翞"],
    ["e3a1", "耤聝聜膉膆膃膇膍膌膋舕蒗蒤蒡蒟蒺蓎蓂蒬蒮蒫蒹蒴蓁蓍蒪蒚蒱蓐蒝蒧蒻蒢蒔蓇蓌蒛蒩蒯蒨蓖蒘蒶蓏蒠蓗蓔蓒蓛蒰蒑虡蜳蜣蜨蝫蝀蜮蜞蜡蜙蜛蝃蜬蝁蜾蝆蜠蜲蜪蜭蜼蜒蜺蜱蜵蝂蜦蜧蜸蜤蜚蜰蜑裷裧裱裲裺裾裮裼裶裻"],
    ["e440", "裰裬裫覝覡覟覞觩觫觨誫誙誋誒誏誖谽豨豩賕賏賗趖踉踂跿踍跽踊踃踇踆踅跾踀踄輐輑輎輍鄣鄜鄠鄢鄟鄝鄚鄤鄡鄛酺酲酹酳銥銤鉶銛鉺銠銔銪銍"],
    ["e4a1", "銦銚銫鉹銗鉿銣鋮銎銂銕銢鉽銈銡銊銆銌銙銧鉾銇銩銝銋鈭隞隡雿靘靽靺靾鞃鞀鞂靻鞄鞁靿韎韍頖颭颮餂餀餇馝馜駃馹馻馺駂馽駇骱髣髧鬾鬿魠魡魟鳱鳲鳵麧僿儃儰僸儆儇僶僾儋儌僽儊劋劌勱勯噈噂噌嘵噁噊噉噆噘"],
    ["e540", "噚噀嘳嘽嘬嘾嘸嘪嘺圚墫墝墱墠墣墯墬墥墡壿嫿嫴嫽嫷嫶嬃嫸嬂嫹嬁嬇嬅嬏屧嶙嶗嶟嶒嶢嶓嶕嶠嶜嶡嶚嶞幩幝幠幜緳廛廞廡彉徲憋憃慹憱憰憢憉"],
    ["e5a1", "憛憓憯憭憟憒憪憡憍慦憳戭摮摰撖撠撅撗撜撏撋撊撌撣撟摨撱撘敶敺敹敻斲斳暵暰暩暲暷暪暯樀樆樗槥槸樕槱槤樠槿槬槢樛樝槾樧槲槮樔槷槧橀樈槦槻樍槼槫樉樄樘樥樏槶樦樇槴樖歑殥殣殢殦氁氀毿氂潁漦潾澇濆澒"],
    ["e640", "澍澉澌潢潏澅潚澖潶潬澂潕潲潒潐潗澔澓潝漀潡潫潽潧澐潓澋潩潿澕潣潷潪潻熲熯熛熰熠熚熩熵熝熥熞熤熡熪熜熧熳犘犚獘獒獞獟獠獝獛獡獚獙"],
    ["e6a1", "獢璇璉璊璆璁瑽璅璈瑼瑹甈甇畾瘥瘞瘙瘝瘜瘣瘚瘨瘛皜皝皞皛瞍瞏瞉瞈磍碻磏磌磑磎磔磈磃磄磉禚禡禠禜禢禛歶稹窲窴窳箷篋箾箬篎箯箹篊箵糅糈糌糋緷緛緪緧緗緡縃緺緦緶緱緰緮緟罶羬羰羭翭翫翪翬翦翨聤聧膣膟"],
    ["e740", "膞膕膢膙膗舖艏艓艒艐艎艑蔤蔻蔏蔀蔩蔎蔉蔍蔟蔊蔧蔜蓻蔫蓺蔈蔌蓴蔪蓲蔕蓷蓫蓳蓼蔒蓪蓩蔖蓾蔨蔝蔮蔂蓽蔞蓶蔱蔦蓧蓨蓰蓯蓹蔘蔠蔰蔋蔙蔯虢"],
    ["e7a1", "蝖蝣蝤蝷蟡蝳蝘蝔蝛蝒蝡蝚蝑蝞蝭蝪蝐蝎蝟蝝蝯蝬蝺蝮蝜蝥蝏蝻蝵蝢蝧蝩衚褅褌褔褋褗褘褙褆褖褑褎褉覢覤覣觭觰觬諏諆誸諓諑諔諕誻諗誾諀諅諘諃誺誽諙谾豍貏賥賟賙賨賚賝賧趠趜趡趛踠踣踥踤踮踕踛踖踑踙踦踧"],
    ["e840", "踔踒踘踓踜踗踚輬輤輘輚輠輣輖輗遳遰遯遧遫鄯鄫鄩鄪鄲鄦鄮醅醆醊醁醂醄醀鋐鋃鋄鋀鋙銶鋏鋱鋟鋘鋩鋗鋝鋌鋯鋂鋨鋊鋈鋎鋦鋍鋕鋉鋠鋞鋧鋑鋓"],
    ["e8a1", "銵鋡鋆銴镼閬閫閮閰隤隢雓霅霈霂靚鞊鞎鞈韐韏頞頝頦頩頨頠頛頧颲餈飺餑餔餖餗餕駜駍駏駓駔駎駉駖駘駋駗駌骳髬髫髳髲髱魆魃魧魴魱魦魶魵魰魨魤魬鳼鳺鳽鳿鳷鴇鴀鳹鳻鴈鴅鴄麃黓鼏鼐儜儓儗儚儑凞匴叡噰噠噮"],
    ["e940", "噳噦噣噭噲噞噷圜圛壈墽壉墿墺壂墼壆嬗嬙嬛嬡嬔嬓嬐嬖嬨嬚嬠嬞寯嶬嶱嶩嶧嶵嶰嶮嶪嶨嶲嶭嶯嶴幧幨幦幯廩廧廦廨廥彋徼憝憨憖懅憴懆懁懌憺"],
    ["e9a1", "憿憸憌擗擖擐擏擉撽撉擃擛擳擙攳敿敼斢曈暾曀曊曋曏暽暻暺曌朣樴橦橉橧樲橨樾橝橭橶橛橑樨橚樻樿橁橪橤橐橏橔橯橩橠樼橞橖橕橍橎橆歕歔歖殧殪殫毈毇氄氃氆澭濋澣濇澼濎濈潞濄澽澞濊澨瀄澥澮澺澬澪濏澿澸"],
    ["ea40", "澢濉澫濍澯澲澰燅燂熿熸燖燀燁燋燔燊燇燏熽燘熼燆燚燛犝犞獩獦獧獬獥獫獪瑿璚璠璔璒璕璡甋疀瘯瘭瘱瘽瘳瘼瘵瘲瘰皻盦瞚瞝瞡瞜瞛瞢瞣瞕瞙"],
    ["eaa1", "瞗磝磩磥磪磞磣磛磡磢磭磟磠禤穄穈穇窶窸窵窱窷篞篣篧篝篕篥篚篨篹篔篪篢篜篫篘篟糒糔糗糐糑縒縡縗縌縟縠縓縎縜縕縚縢縋縏縖縍縔縥縤罃罻罼罺羱翯耪耩聬膱膦膮膹膵膫膰膬膴膲膷膧臲艕艖艗蕖蕅蕫蕍蕓蕡蕘"],
    ["eb40", "蕀蕆蕤蕁蕢蕄蕑蕇蕣蔾蕛蕱蕎蕮蕵蕕蕧蕠薌蕦蕝蕔蕥蕬虣虥虤螛螏螗螓螒螈螁螖螘蝹螇螣螅螐螑螝螄螔螜螚螉褞褦褰褭褮褧褱褢褩褣褯褬褟觱諠"],
    ["eba1", "諢諲諴諵諝謔諤諟諰諈諞諡諨諿諯諻貑貒貐賵賮賱賰賳赬赮趥趧踳踾踸蹀蹅踶踼踽蹁踰踿躽輶輮輵輲輹輷輴遶遹遻邆郺鄳鄵鄶醓醐醑醍醏錧錞錈錟錆錏鍺錸錼錛錣錒錁鍆錭錎錍鋋錝鋺錥錓鋹鋷錴錂錤鋿錩錹錵錪錔錌"],
    ["ec40", "錋鋾錉錀鋻錖閼闍閾閹閺閶閿閵閽隩雔霋霒霐鞙鞗鞔韰韸頵頯頲餤餟餧餩馞駮駬駥駤駰駣駪駩駧骹骿骴骻髶髺髹髷鬳鮀鮅鮇魼魾魻鮂鮓鮒鮐魺鮕"],
    ["eca1", "魽鮈鴥鴗鴠鴞鴔鴩鴝鴘鴢鴐鴙鴟麈麆麇麮麭黕黖黺鼒鼽儦儥儢儤儠儩勴嚓嚌嚍嚆嚄嚃噾嚂噿嚁壖壔壏壒嬭嬥嬲嬣嬬嬧嬦嬯嬮孻寱寲嶷幬幪徾徻懃憵憼懧懠懥懤懨懞擯擩擣擫擤擨斁斀斶旚曒檍檖檁檥檉檟檛檡檞檇檓檎"],
    ["ed40", "檕檃檨檤檑橿檦檚檅檌檒歛殭氉濌澩濴濔濣濜濭濧濦濞濲濝濢濨燡燱燨燲燤燰燢獳獮獯璗璲璫璐璪璭璱璥璯甐甑甒甏疄癃癈癉癇皤盩瞵瞫瞲瞷瞶"],
    ["eda1", "瞴瞱瞨矰磳磽礂磻磼磲礅磹磾礄禫禨穜穛穖穘穔穚窾竀竁簅簏篲簀篿篻簎篴簋篳簂簉簃簁篸篽簆篰篱簐簊糨縭縼繂縳顈縸縪繉繀繇縩繌縰縻縶繄縺罅罿罾罽翴翲耬膻臄臌臊臅臇膼臩艛艚艜薃薀薏薧薕薠薋薣蕻薤薚薞"],
    ["ee40", "蕷蕼薉薡蕺蕸蕗薎薖薆薍薙薝薁薢薂薈薅蕹蕶薘薐薟虨螾螪螭蟅螰螬螹螵螼螮蟉蟃蟂蟌螷螯蟄蟊螴螶螿螸螽蟞螲褵褳褼褾襁襒褷襂覭覯覮觲觳謞"],
    ["eea1", "謘謖謑謅謋謢謏謒謕謇謍謈謆謜謓謚豏豰豲豱豯貕貔賹赯蹎蹍蹓蹐蹌蹇轃轀邅遾鄸醚醢醛醙醟醡醝醠鎡鎃鎯鍤鍖鍇鍼鍘鍜鍶鍉鍐鍑鍠鍭鎏鍌鍪鍹鍗鍕鍒鍏鍱鍷鍻鍡鍞鍣鍧鎀鍎鍙闇闀闉闃闅閷隮隰隬霠霟霘霝霙鞚鞡鞜"],
    ["ef40", "鞞鞝韕韔韱顁顄顊顉顅顃餥餫餬餪餳餲餯餭餱餰馘馣馡騂駺駴駷駹駸駶駻駽駾駼騃骾髾髽鬁髼魈鮚鮨鮞鮛鮦鮡鮥鮤鮆鮢鮠鮯鴳鵁鵧鴶鴮鴯鴱鴸鴰"],
    ["efa1", "鵅鵂鵃鴾鴷鵀鴽翵鴭麊麉麍麰黈黚黻黿鼤鼣鼢齔龠儱儭儮嚘嚜嚗嚚嚝嚙奰嬼屩屪巀幭幮懘懟懭懮懱懪懰懫懖懩擿攄擽擸攁攃擼斔旛曚曛曘櫅檹檽櫡櫆檺檶檷櫇檴檭歞毉氋瀇瀌瀍瀁瀅瀔瀎濿瀀濻瀦濼濷瀊爁燿燹爃燽獶"],
    ["f040", "璸瓀璵瓁璾璶璻瓂甔甓癜癤癙癐癓癗癚皦皽盬矂瞺磿礌礓礔礉礐礒礑禭禬穟簜簩簙簠簟簭簝簦簨簢簥簰繜繐繖繣繘繢繟繑繠繗繓羵羳翷翸聵臑臒"],
    ["f0a1", "臐艟艞薴藆藀藃藂薳薵薽藇藄薿藋藎藈藅薱薶藒蘤薸薷薾虩蟧蟦蟢蟛蟫蟪蟥蟟蟳蟤蟔蟜蟓蟭蟘蟣螤蟗蟙蠁蟴蟨蟝襓襋襏襌襆襐襑襉謪謧謣謳謰謵譇謯謼謾謱謥謷謦謶謮謤謻謽謺豂豵貙貘貗賾贄贂贀蹜蹢蹠蹗蹖蹞蹥蹧"],
    ["f140", "蹛蹚蹡蹝蹩蹔轆轇轈轋鄨鄺鄻鄾醨醥醧醯醪鎵鎌鎒鎷鎛鎝鎉鎧鎎鎪鎞鎦鎕鎈鎙鎟鎍鎱鎑鎲鎤鎨鎴鎣鎥闒闓闑隳雗雚巂雟雘雝霣霢霥鞬鞮鞨鞫鞤鞪"],
    ["f1a1", "鞢鞥韗韙韖韘韺顐顑顒颸饁餼餺騏騋騉騍騄騑騊騅騇騆髀髜鬈鬄鬅鬩鬵魊魌魋鯇鯆鯃鮿鯁鮵鮸鯓鮶鯄鮹鮽鵜鵓鵏鵊鵛鵋鵙鵖鵌鵗鵒鵔鵟鵘鵚麎麌黟鼁鼀鼖鼥鼫鼪鼩鼨齌齕儴儵劖勷厴嚫嚭嚦嚧嚪嚬壚壝壛夒嬽嬾嬿巃幰"],
    ["f240", "徿懻攇攐攍攉攌攎斄旞旝曞櫧櫠櫌櫑櫙櫋櫟櫜櫐櫫櫏櫍櫞歠殰氌瀙瀧瀠瀖瀫瀡瀢瀣瀩瀗瀤瀜瀪爌爊爇爂爅犥犦犤犣犡瓋瓅璷瓃甖癠矉矊矄矱礝礛"],
    ["f2a1", "礡礜礗礞禰穧穨簳簼簹簬簻糬糪繶繵繸繰繷繯繺繲繴繨罋罊羃羆羷翽翾聸臗臕艤艡艣藫藱藭藙藡藨藚藗藬藲藸藘藟藣藜藑藰藦藯藞藢蠀蟺蠃蟶蟷蠉蠌蠋蠆蟼蠈蟿蠊蠂襢襚襛襗襡襜襘襝襙覈覷覶觶譐譈譊譀譓譖譔譋譕"],
    ["f340", "譑譂譒譗豃豷豶貚贆贇贉趬趪趭趫蹭蹸蹳蹪蹯蹻軂轒轑轏轐轓辴酀鄿醰醭鏞鏇鏏鏂鏚鏐鏹鏬鏌鏙鎩鏦鏊鏔鏮鏣鏕鏄鏎鏀鏒鏧镽闚闛雡霩霫霬霨霦"],
    ["f3a1", "鞳鞷鞶韝韞韟顜顙顝顗颿颽颻颾饈饇饃馦馧騚騕騥騝騤騛騢騠騧騣騞騜騔髂鬋鬊鬎鬌鬷鯪鯫鯠鯞鯤鯦鯢鯰鯔鯗鯬鯜鯙鯥鯕鯡鯚鵷鶁鶊鶄鶈鵱鶀鵸鶆鶋鶌鵽鵫鵴鵵鵰鵩鶅鵳鵻鶂鵯鵹鵿鶇鵨麔麑黀黼鼭齀齁齍齖齗齘匷嚲"],
    ["f440", "嚵嚳壣孅巆巇廮廯忀忁懹攗攖攕攓旟曨曣曤櫳櫰櫪櫨櫹櫱櫮櫯瀼瀵瀯瀷瀴瀱灂瀸瀿瀺瀹灀瀻瀳灁爓爔犨獽獼璺皫皪皾盭矌矎矏矍矲礥礣礧礨礤礩"],
    ["f4a1", "禲穮穬穭竷籉籈籊籇籅糮繻繾纁纀羺翿聹臛臙舋艨艩蘢藿蘁藾蘛蘀藶蘄蘉蘅蘌藽蠙蠐蠑蠗蠓蠖襣襦覹觷譠譪譝譨譣譥譧譭趮躆躈躄轙轖轗轕轘轚邍酃酁醷醵醲醳鐋鐓鏻鐠鐏鐔鏾鐕鐐鐨鐙鐍鏵鐀鏷鐇鐎鐖鐒鏺鐉鏸鐊鏿"],
    ["f540", "鏼鐌鏶鐑鐆闞闠闟霮霯鞹鞻韽韾顠顢顣顟飁飂饐饎饙饌饋饓騲騴騱騬騪騶騩騮騸騭髇髊髆鬐鬒鬑鰋鰈鯷鰅鰒鯸鱀鰇鰎鰆鰗鰔鰉鶟鶙鶤鶝鶒鶘鶐鶛"],
    ["f5a1", "鶠鶔鶜鶪鶗鶡鶚鶢鶨鶞鶣鶿鶩鶖鶦鶧麙麛麚黥黤黧黦鼰鼮齛齠齞齝齙龑儺儹劘劗囃嚽嚾孈孇巋巏廱懽攛欂櫼欃櫸欀灃灄灊灈灉灅灆爝爚爙獾甗癪矐礭礱礯籔籓糲纊纇纈纋纆纍罍羻耰臝蘘蘪蘦蘟蘣蘜蘙蘧蘮蘡蘠蘩蘞蘥"],
    ["f640", "蠩蠝蠛蠠蠤蠜蠫衊襭襩襮襫觺譹譸譅譺譻贐贔趯躎躌轞轛轝酆酄酅醹鐿鐻鐶鐩鐽鐼鐰鐹鐪鐷鐬鑀鐱闥闤闣霵霺鞿韡顤飉飆飀饘饖騹騽驆驄驂驁騺"],
    ["f6a1", "騿髍鬕鬗鬘鬖鬺魒鰫鰝鰜鰬鰣鰨鰩鰤鰡鶷鶶鶼鷁鷇鷊鷏鶾鷅鷃鶻鶵鷎鶹鶺鶬鷈鶱鶭鷌鶳鷍鶲鹺麜黫黮黭鼛鼘鼚鼱齎齥齤龒亹囆囅囋奱孋孌巕巑廲攡攠攦攢欋欈欉氍灕灖灗灒爞爟犩獿瓘瓕瓙瓗癭皭礵禴穰穱籗籜籙籛籚"],
    ["f740", "糴糱纑罏羇臞艫蘴蘵蘳蘬蘲蘶蠬蠨蠦蠪蠥襱覿覾觻譾讄讂讆讅譿贕躕躔躚躒躐躖躗轠轢酇鑌鑐鑊鑋鑏鑇鑅鑈鑉鑆霿韣顪顩飋饔饛驎驓驔驌驏驈驊"],
    ["f7a1", "驉驒驐髐鬙鬫鬻魖魕鱆鱈鰿鱄鰹鰳鱁鰼鰷鰴鰲鰽鰶鷛鷒鷞鷚鷋鷐鷜鷑鷟鷩鷙鷘鷖鷵鷕鷝麶黰鼵鼳鼲齂齫龕龢儽劙壨壧奲孍巘蠯彏戁戃戄攩攥斖曫欑欒欏毊灛灚爢玂玁玃癰矔籧籦纕艬蘺虀蘹蘼蘱蘻蘾蠰蠲蠮蠳襶襴襳觾"],
    ["f840", "讌讎讋讈豅贙躘轤轣醼鑢鑕鑝鑗鑞韄韅頀驖驙鬞鬟鬠鱒鱘鱐鱊鱍鱋鱕鱙鱌鱎鷻鷷鷯鷣鷫鷸鷤鷶鷡鷮鷦鷲鷰鷢鷬鷴鷳鷨鷭黂黐黲黳鼆鼜鼸鼷鼶齃齏"],
    ["f8a1", "齱齰齮齯囓囍孎屭攭曭曮欓灟灡灝灠爣瓛瓥矕礸禷禶籪纗羉艭虃蠸蠷蠵衋讔讕躞躟躠躝醾醽釂鑫鑨鑩雥靆靃靇韇韥驞髕魙鱣鱧鱦鱢鱞鱠鸂鷾鸇鸃鸆鸅鸀鸁鸉鷿鷽鸄麠鼞齆齴齵齶囔攮斸欘欙欗欚灢爦犪矘矙礹籩籫糶纚"],
    ["f940", "纘纛纙臠臡虆虇虈襹襺襼襻觿讘讙躥躤躣鑮鑭鑯鑱鑳靉顲饟鱨鱮鱭鸋鸍鸐鸏鸒鸑麡黵鼉齇齸齻齺齹圞灦籯蠼趲躦釃鑴鑸鑶鑵驠鱴鱳鱱鱵鸔鸓黶鼊"],
    ["f9a1", "龤灨灥糷虪蠾蠽蠿讞貜躩軉靋顳顴飌饡馫驤驦驧鬤鸕鸗齈戇欞爧虌躨钂钀钁驩驨鬮鸙爩虋讟钃鱹麷癵驫鱺鸝灩灪麤齾齉龘碁銹裏墻恒粧嫺╔╦╗╠╬╣╚╩╝╒╤╕╞╪╡╘╧╛╓╥╖╟╫╢╙╨╜║═╭╮╰╯▓"]
  ];
});

// node_modules/iconv-lite/encodings/tables/big5-added.json
var require_big5_added = __commonJS((exports, module) => {
  module.exports = [
    ["8740", "䏰䰲䘃䖦䕸𧉧䵷䖳𧲱䳢𧳅㮕䜶䝄䱇䱀𤊿𣘗𧍒𦺋𧃒䱗𪍑䝏䗚䲅𧱬䴇䪤䚡𦬣爥𥩔𡩣𣸆𣽡晍囻"],
    ["8767", "綕夝𨮹㷴霴𧯯寛𡵞媤㘥𩺰嫑宷峼杮薓𩥅瑡璝㡵𡵓𣚞𦀡㻬"],
    ["87a1", "𥣞㫵竼龗𤅡𨤍𣇪𠪊𣉞䌊蒄龖鐯䤰蘓墖靊鈘秐稲晠権袝瑌篅枂稬剏遆㓦珄𥶹瓆鿇垳䤯呌䄱𣚎堘穲𧭥讏䚮𦺈䆁𥶙箮𢒼鿈𢓁𢓉𢓌鿉蔄𣖻䂴鿊䓡𪷿拁灮鿋"],
    ["8840", "㇀", 4, "𠄌㇅𠃑𠃍㇆㇇𠃋𡿨㇈𠃊㇉㇊㇋㇌𠄎㇍㇎ĀÁǍÀĒÉĚÈŌÓǑÒ࿿Ê̄Ế࿿Ê̌ỀÊāáǎàɑēéěèīíǐìōóǒòūúǔùǖǘǚ"],
    ["88a1", "ǜü࿿ê̄ế࿿ê̌ềêɡ⏚⏛"],
    ["8940", "𪎩𡅅"],
    ["8943", "攊"],
    ["8946", "丽滝鵎釟"],
    ["894c", "𧜵撑会伨侨兖兴农凤务动医华发变团声处备夲头学实実岚庆总斉柾栄桥济炼电纤纬纺织经统缆缷艺苏药视设询车轧轮"],
    ["89a1", "琑糼緍楆竉刧"],
    ["89ab", "醌碸酞肼"],
    ["89b0", "贋胶𠧧"],
    ["89b5", "肟黇䳍鷉鸌䰾𩷶𧀎鸊𪄳㗁"],
    ["89c1", "溚舾甙"],
    ["89c5", "䤑马骏龙禇𨑬𡷊𠗐𢫦两亁亀亇亿仫伷㑌侽㹈倃傈㑽㒓㒥円夅凛凼刅争剹劐匧㗇厩㕑厰㕓参吣㕭㕲㚁咓咣咴咹哐哯唘唣唨㖘唿㖥㖿嗗㗅"],
    ["8a40", "𧶄唥"],
    ["8a43", "𠱂𠴕𥄫喐𢳆㧬𠍁蹆𤶸𩓥䁓𨂾睺𢰸㨴䟕𨅝𦧲𤷪擝𠵼𠾴𠳕𡃴撍蹾𠺖𠰋𠽤𢲩𨉖𤓓"],
    ["8a64", "𠵆𩩍𨃩䟴𤺧𢳂骲㩧𩗴㿭㔆𥋇𩟔𧣈𢵄鵮頕"],
    ["8a76", "䏙𦂥撴哣𢵌𢯊𡁷㧻𡁯"],
    ["8aa1", "𦛚𦜖𧦠擪𥁒𠱃蹨𢆡𨭌𠜱"],
    ["8aac", "䠋𠆩㿺塳𢶍"],
    ["8ab2", "𤗈𠓼𦂗𠽌𠶖啹䂻䎺"],
    ["8abb", "䪴𢩦𡂝膪飵𠶜捹㧾𢝵跀嚡摼㹃"],
    ["8ac9", "𪘁𠸉𢫏𢳉"],
    ["8ace", "𡃈𣧂㦒㨆𨊛㕸𥹉𢃇噒𠼱𢲲𩜠㒼氽𤸻"],
    ["8adf", "𧕴𢺋𢈈𪙛𨳍𠹺𠰴𦠜羓𡃏𢠃𢤹㗻𥇣𠺌𠾍𠺪㾓𠼰𠵇𡅏𠹌"],
    ["8af6", "𠺫𠮩𠵈𡃀𡄽㿹𢚖搲𠾭"],
    ["8b40", "𣏴𧘹𢯎𠵾𠵿𢱑𢱕㨘𠺘𡃇𠼮𪘲𦭐𨳒𨶙𨳊閪哌苄喹"],
    ["8b55", "𩻃鰦骶𧝞𢷮煀腭胬尜𦕲脴㞗卟𨂽醶𠻺𠸏𠹷𠻻㗝𤷫㘉𠳖嚯𢞵𡃉𠸐𠹸𡁸𡅈𨈇𡑕𠹹𤹐𢶤婔𡀝𡀞𡃵𡃶垜𠸑"],
    ["8ba1", "𧚔𨋍𠾵𠹻𥅾㜃𠾶𡆀𥋘𪊽𤧚𡠺𤅷𨉼墙剨㘚𥜽箲孨䠀䬬鼧䧧鰟鮍𥭴𣄽嗻㗲嚉丨夂𡯁屮靑𠂆乛亻㔾尣彑忄㣺扌攵歺氵氺灬爫丬犭𤣩罒礻糹罓𦉪㓁"],
    ["8bde", "𦍋耂肀𦘒𦥑卝衤见𧢲讠贝钅镸长门𨸏韦页风飞饣𩠐鱼鸟黄歯龜丷𠂇阝户钢"],
    ["8c40", "倻淾𩱳龦㷉袏𤅎灷峵䬠𥇍㕙𥴰愢𨨲辧釶熑朙玺𣊁𪄇㲋𡦀䬐磤琂冮𨜏䀉橣𪊺䈣蘏𠩯稪𩥇𨫪靕灍匤𢁾鏴盙𨧣龧矝亣俰傼丯众龨吴綋墒壐𡶶庒庙忂𢜒斋"],
    ["8ca1", "𣏹椙橃𣱣泿"],
    ["8ca7", "爀𤔅玌㻛𤨓嬕璹讃𥲤𥚕窓篬糃繬苸薗龩袐龪躹龫迏蕟駠鈡龬𨶹𡐿䁱䊢娚"],
    ["8cc9", "顨杫䉶圽"],
    ["8cce", "藖𤥻芿𧄍䲁𦵴嵻𦬕𦾾龭龮宖龯曧繛湗秊㶈䓃𣉖𢞖䎚䔶"],
    ["8ce6", "峕𣬚諹屸㴒𣕑嵸龲煗䕘𤃬𡸣䱷㥸㑊𠆤𦱁諌侴𠈹妿腬顖𩣺弻"],
    ["8d40", "𠮟"],
    ["8d42", "𢇁𨥭䄂䚻𩁹㼇龳𪆵䃸㟖䛷𦱆䅼𨚲𧏿䕭㣔𥒚䕡䔛䶉䱻䵶䗪㿈𤬏㙡䓞䒽䇭崾嵈嵖㷼㠏嶤嶹㠠㠸幂庽弥徃㤈㤔㤿㥍惗愽峥㦉憷憹懏㦸戬抐拥挘㧸嚱"],
    ["8da1", "㨃揢揻搇摚㩋擀崕嘡龟㪗斆㪽旿晓㫲暒㬢朖㭂枤栀㭘桊梄㭲㭱㭻椉楃牜楤榟榅㮼槖㯝橥橴橱檂㯬檙㯲檫檵櫔櫶殁毁毪汵沪㳋洂洆洦涁㳯涤涱渕渘温溆𨧀溻滢滚齿滨滩漤漴㵆𣽁澁澾㵪㵵熷岙㶊瀬㶑灐灔灯灿炉𠌥䏁㗱𠻘"],
    ["8e40", "𣻗垾𦻓焾𥟠㙎榢𨯩孴穉𥣡𩓙穥穽𥦬窻窰竂竃燑𦒍䇊竚竝竪䇯咲𥰁笋筕笩𥌎𥳾箢筯莜𥮴𦱿篐萡箒箸𥴠㶭𥱥蒒篺簆簵𥳁籄粃𤢂粦晽𤕸糉糇糦籴糳糵糎"],
    ["8ea1", "繧䔝𦹄絝𦻖璍綉綫焵綳緒𤁗𦀩緤㴓緵𡟹緥𨍭縝𦄡𦅚繮纒䌫鑬縧罀罁罇礶𦋐駡羗𦍑羣𡙡𠁨䕜𣝦䔃𨌺翺𦒉者耈耝耨耯𪂇𦳃耻耼聡𢜔䦉𦘦𣷣𦛨朥肧𨩈脇脚墰𢛶汿𦒘𤾸擧𡒊舘𡡞橓𤩥𤪕䑺舩𠬍𦩒𣵾俹𡓽蓢荢𦬊𤦧𣔰𡝳𣷸芪椛芳䇛"],
    ["8f40", "蕋苐茚𠸖𡞴㛁𣅽𣕚艻苢茘𣺋𦶣𦬅𦮗𣗎㶿茝嗬莅䔋𦶥莬菁菓㑾𦻔橗蕚㒖𦹂𢻯葘𥯤葱㷓䓤檧葊𣲵祘蒨𦮖𦹷𦹃蓞萏莑䒠蒓蓤𥲑䉀𥳀䕃蔴嫲𦺙䔧蕳䔖枿蘖"],
    ["8fa1", "𨘥𨘻藁𧂈蘂𡖂𧃍䕫䕪蘨㙈𡢢号𧎚虾蝱𪃸蟮𢰧螱蟚蠏噡虬桖䘏衅衆𧗠𣶹𧗤衞袜䙛袴袵揁装睷𧜏覇覊覦覩覧覼𨨥觧𧤤𧪽誜瞓釾誐𧩙竩𧬺𣾏䜓𧬸煼謌謟𥐰𥕥謿譌譍誩𤩺讐讛誯𡛟䘕衏貛𧵔𧶏貫㜥𧵓賖𧶘𧶽贒贃𡤐賛灜贑𤳉㻐起"],
    ["9040", "趩𨀂𡀔𤦊㭼𨆼𧄌竧躭躶軃鋔輙輭𨍥𨐒辥錃𪊟𠩐辳䤪𨧞𨔽𣶻廸𣉢迹𪀔𨚼𨔁𢌥㦀𦻗逷𨔼𧪾遡𨕬𨘋邨𨜓郄𨛦邮都酧㫰醩釄粬𨤳𡺉鈎沟鉁鉢𥖹銹𨫆𣲛𨬌𥗛"],
    ["90a1", "𠴱錬鍫𨫡𨯫炏嫃𨫢𨫥䥥鉄𨯬𨰹𨯿鍳鑛躼閅閦鐦閠濶䊹𢙺𨛘𡉼𣸮䧟氜陻隖䅬隣𦻕懚隶磵𨫠隽双䦡𦲸𠉴𦐐𩂯𩃥𤫑𡤕𣌊霱虂霶䨏䔽䖅𤫩灵孁霛靜𩇕靗孊𩇫靟鐥僐𣂷𣂼鞉鞟鞱鞾韀韒韠𥑬韮琜𩐳響韵𩐝𧥺䫑頴頳顋顦㬎𧅵㵑𠘰𤅜"],
    ["9140", "𥜆飊颷飈飇䫿𦴧𡛓喰飡飦飬鍸餹𤨩䭲𩡗𩤅駵騌騻騐驘𥜥㛄𩂱𩯕髠髢𩬅髴䰎鬔鬭𨘀倴鬴𦦨㣃𣁽魐魀𩴾婅𡡣鮎𤉋鰂鯿鰌𩹨鷔𩾷𪆒𪆫𪃡𪄣𪇟鵾鶃𪄴鸎梈"],
    ["91a1", "鷄𢅛𪆓𪈠𡤻𪈳鴹𪂹𪊴麐麕麞麢䴴麪麯𤍤黁㭠㧥㴝伲㞾𨰫鼂鼈䮖鐤𦶢鼗鼖鼹嚟嚊齅馸𩂋韲葿齢齩竜龎爖䮾𤥵𤦻煷𤧸𤍈𤩑玞𨯚𡣺禟𨥾𨸶鍩鏳𨩄鋬鎁鏋𨥬𤒹爗㻫睲穃烐𤑳𤏸煾𡟯炣𡢾𣖙㻇𡢅𥐯𡟸㜢𡛻𡠹㛡𡝴𡣑𥽋㜣𡛀坛𤨥𡏾𡊨"],
    ["9240", "𡏆𡒶蔃𣚦蔃葕𤦔𧅥𣸱𥕜𣻻𧁒䓴𣛮𩦝𦼦柹㜳㰕㷧塬𡤢栐䁗𣜿𤃡𤂋𤄏𦰡哋嚞𦚱嚒𠿟𠮨𠸍鏆𨬓鎜仸儫㠙𤐶亼𠑥𠍿佋侊𥙑婨𠆫𠏋㦙𠌊𠐔㐵伩𠋀𨺳𠉵諚𠈌亘"],
    ["92a1", "働儍侢伃𤨎𣺊佂倮偬傁俌俥偘僼兙兛兝兞湶𣖕𣸹𣺿浲𡢄𣺉冨凃𠗠䓝𠒣𠒒𠒑赺𨪜𠜎剙劤𠡳勡鍮䙺熌𤎌𠰠𤦬𡃤槑𠸝瑹㻞璙琔瑖玘䮎𤪼𤂍叐㖄爏𤃉喴𠍅响𠯆圝鉝雴鍦埝垍坿㘾壋媙𨩆𡛺𡝯𡜐娬妸銏婾嫏娒𥥆𡧳𡡡𤊕㛵洅瑃娡𥺃"],
    ["9340", "媁𨯗𠐓鏠璌𡌃焅䥲鐈𨧻鎽㞠尞岞幞幈𡦖𡥼𣫮廍孏𡤃𡤄㜁𡢠㛝𡛾㛓脪𨩇𡶺𣑲𨦨弌弎𡤧𡞫婫𡜻孄蘔𧗽衠恾𢡠𢘫忛㺸𢖯𢖾𩂈𦽳懀𠀾𠁆𢘛憙憘恵𢲛𢴇𤛔𩅍"],
    ["93a1", "摱𤙥𢭪㨩𢬢𣑐𩣪𢹸挷𪑛撶挱揑𤧣𢵧护𢲡搻敫楲㯴𣂎𣊭𤦉𣊫唍𣋠𡣙𩐿曎𣊉𣆳㫠䆐𥖄𨬢𥖏𡛼𥕛𥐥磮𣄃𡠪𣈴㑤𣈏𣆂𤋉暎𦴤晫䮓昰𧡰𡷫晣𣋒𣋡昞𥡲㣑𣠺𣞼㮙𣞢𣏾瓐㮖枏𤘪梶栞㯄檾㡣𣟕𤒇樳橒櫉欅𡤒攑梘橌㯗橺歗𣿀𣲚鎠鋲𨯪𨫋"],
    ["9440", "銉𨀞𨧜鑧涥漋𤧬浧𣽿㶏渄𤀼娽渊塇洤硂焻𤌚𤉶烱牐犇犔𤞏𤜥兹𤪤𠗫瑺𣻸𣙟𤩊𤤗𥿡㼆㺱𤫟𨰣𣼵悧㻳瓌琼鎇琷䒟𦷪䕑疃㽣𤳙𤴆㽘畕癳𪗆㬙瑨𨫌𤦫𤦎㫻"],
    ["94a1", "㷍𤩎㻿𤧅𤣳釺圲鍂𨫣𡡤僟𥈡𥇧睸𣈲眎眏睻𤚗𣞁㩞𤣰琸璛㺿𤪺𤫇䃈𤪖𦆮錇𥖁砞碍碈磒珐祙𧝁𥛣䄎禛蒖禥樭𣻺稺秴䅮𡛦䄲鈵秱𠵌𤦌𠊙𣶺𡝮㖗啫㕰㚪𠇔𠰍竢婙𢛵𥪯𥪜娍𠉛磰娪𥯆竾䇹籝籭䈑𥮳𥺼𥺦糍𤧹𡞰粎籼粮檲緜縇緓罎𦉡"],
    ["9540", "𦅜𧭈綗𥺂䉪𦭵𠤖柖𠁎𣗏埄𦐒𦏸𤥢翝笧𠠬𥫩𥵃笌𥸎駦虅驣樜𣐿㧢𤧷𦖭騟𦖠蒀𧄧𦳑䓪脷䐂胆脉腂𦞴飃𦩂艢艥𦩑葓𦶧蘐𧈛媆䅿𡡀嬫𡢡嫤𡣘蚠蜨𣶏蠭𧐢娂"],
    ["95a1", "衮佅袇袿裦襥襍𥚃襔𧞅𧞄𨯵𨯙𨮜𨧹㺭蒣䛵䛏㟲訽訜𩑈彍鈫𤊄旔焩烄𡡅鵭貟賩𧷜妚矃姰䍮㛔踪躧𤰉輰轊䋴汘澻𢌡䢛潹溋𡟚鯩㚵𤤯邻邗啱䤆醻鐄𨩋䁢𨫼鐧𨰝𨰻蓥訫閙閧閗閖𨴴瑅㻂𤣿𤩂𤏪㻧𣈥随𨻧𨹦𨹥㻌𤧭𤩸𣿮琒瑫㻼靁𩂰"],
    ["9640", "桇䨝𩂓𥟟靝鍨𨦉𨰦𨬯𦎾銺嬑譩䤼珹𤈛鞛靱餸𠼦巁𨯅𤪲頟𩓚鋶𩗗釥䓀𨭐𤩧𨭤飜𨩅㼀鈪䤥萔餻饍𧬆㷽馛䭯馪驜𨭥𥣈檏騡嫾騯𩣱䮐𩥈馼䮽䮗鍽塲𡌂堢𤦸"],
    ["96a1", "𡓨硄𢜟𣶸棅㵽鑘㤧慐𢞁𢥫愇鱏鱓鱻鰵鰐魿鯏𩸭鮟𪇵𪃾鴡䲮𤄄鸘䲰鴌𪆴𪃭𪃳𩤯鶥蒽𦸒𦿟𦮂藼䔳𦶤𦺄𦷰萠藮𦸀𣟗𦁤秢𣖜𣙀䤭𤧞㵢鏛銾鍈𠊿碹鉷鑍俤㑀遤𥕝砽硔碶硋𡝗𣇉𤥁㚚佲濚濙瀞瀞吔𤆵垻壳垊鴖埗焴㒯𤆬燫𦱀𤾗嬨𡞵𨩉"],
    ["9740", "愌嫎娋䊼𤒈㜬䭻𨧼鎻鎸𡣖𠼝葲𦳀𡐓𤋺𢰦𤏁妔𣶷𦝁綨𦅛𦂤𤦹𤦋𨧺鋥珢㻩璴𨭣𡢟㻡𤪳櫘珳珻㻖𤨾𤪔𡟙𤩦𠎧𡐤𤧥瑈𤤖炥𤥶銄珦鍟𠓾錱𨫎𨨖鎆𨯧𥗕䤵𨪂煫"],
    ["97a1", "𤥃𠳿嚤𠘚𠯫𠲸唂秄𡟺緾𡛂𤩐𡡒䔮鐁㜊𨫀𤦭妰𡢿𡢃𧒄媡㛢𣵛㚰鉟婹𨪁𡡢鍴㳍𠪴䪖㦊僴㵩㵌𡎜煵䋻𨈘渏𩃤䓫浗𧹏灧沯㳖𣿭𣸭渂漌㵯𠏵畑㚼㓈䚀㻚䡱姄鉮䤾轁𨰜𦯀堒埈㛖𡑒烾𤍢𤩱𢿣𡊰𢎽梹楧𡎘𣓥𧯴𣛟𨪃𣟖𣏺𤲟樚𣚭𦲷萾䓟䓎"],
    ["9840", "𦴦𦵑𦲂𦿞漗𧄉茽𡜺菭𦲀𧁓𡟛妉媂𡞳婡婱𡤅𤇼㜭姯𡜼㛇熎鎐暚𤊥婮娫𤊓樫𣻹𧜶𤑛𤋊焝𤉙𨧡侰𦴨峂𤓎𧹍𤎽樌𤉖𡌄炦焳𤏩㶥泟勇𤩏繥姫崯㷳彜𤩝𡟟綤萦"],
    ["98a1", "咅𣫺𣌀𠈔坾𠣕𠘙㿥𡾞𪊶瀃𩅛嵰玏糓𨩙𩐠俈翧狍猐𧫴猸猹𥛶獁獈㺩𧬘遬燵𤣲珡臶㻊県㻑沢国琙琞琟㻢㻰㻴㻺瓓㼎㽓畂畭畲疍㽼痈痜㿀癍㿗癴㿜発𤽜熈嘣覀塩䀝睃䀹条䁅㗛瞘䁪䁯属瞾矋売砘点砜䂨砹硇硑硦葈𥔵礳栃礲䄃"],
    ["9940", "䄉禑禙辻稆込䅧窑䆲窼艹䇄竏竛䇏両筢筬筻簒簛䉠䉺类粜䊌粸䊔糭输烀𠳏総緔緐緽羮羴犟䎗耠耥笹耮耱联㷌垴炠肷胩䏭脌猪脎脒畠脔䐁㬹腖腙腚"],
    ["99a1", "䐓堺腼膄䐥膓䐭膥埯臁臤艔䒏芦艶苊苘苿䒰荗险榊萅烵葤惣蒈䔄蒾蓡蓸蔐蔸蕒䔻蕯蕰藠䕷虲蚒蚲蛯际螋䘆䘗袮裿褤襇覑𧥧訩訸誔誴豑賔賲贜䞘塟跃䟭仮踺嗘坔蹱嗵躰䠷軎転軤軭軲辷迁迊迌逳駄䢭飠鈓䤞鈨鉘鉫銱銮銿"],
    ["9a40", "鋣鋫鋳鋴鋽鍃鎄鎭䥅䥑麿鐗匁鐝鐭鐾䥪鑔鑹锭関䦧间阳䧥枠䨤靀䨵鞲韂噔䫤惨颹䬙飱塄餎餙冴餜餷饂饝饢䭰駅䮝騼鬏窃魩鮁鯝鯱鯴䱭鰠㝯𡯂鵉鰺"],
    ["9aa1", "黾噐鶓鶽鷀鷼银辶鹻麬麱麽黆铜黢黱黸竈齄𠂔𠊷𠎠椚铃妬𠓗塀铁㞹𠗕𠘕𠙶𡚺块煳𠫂𠫍𠮿呪吆𠯋咞𠯻𠰻𠱓𠱥𠱼惧𠲍噺𠲵𠳝𠳭𠵯𠶲𠷈楕鰯螥𠸄𠸎𠻗𠾐𠼭𠹳尠𠾼帋𡁜𡁏𡁶朞𡁻𡂈𡂖㙇𡂿𡃓𡄯𡄻卤蒭𡋣𡍵𡌶讁𡕷𡘙𡟃𡟇乸炻𡠭𡥪"],
    ["9b40", "𡨭𡩅𡰪𡱰𡲬𡻈拃𡻕𡼕熘桕𢁅槩㛈𢉼𢏗𢏺𢜪𢡱𢥏苽𢥧𢦓𢫕覥𢫨辠𢬎鞸𢬿顇骽𢱌"],
    ["9b62", "𢲈𢲷𥯨𢴈𢴒𢶷𢶕𢹂𢽴𢿌𣀳𣁦𣌟𣏞徱晈暿𧩹𣕧𣗳爁𤦺矗𣘚𣜖纇𠍆墵朎"],
    ["9ba1", "椘𣪧𧙗𥿢𣸑𣺹𧗾𢂚䣐䪸𤄙𨪚𤋮𤌍𤀻𤌴𤎖𤩅𠗊凒𠘑妟𡺨㮾𣳿𤐄𤓖垈𤙴㦛𤜯𨗨𩧉㝢𢇃譞𨭎駖𤠒𤣻𤨕爉𤫀𠱸奥𤺥𤾆𠝹軚𥀬劏圿煱𥊙𥐙𣽊𤪧喼𥑆𥑮𦭒釔㑳𥔿𧘲𥕞䜘𥕢𥕦𥟇𤤿𥡝偦㓻𣏌惞𥤃䝼𨥈𥪮𥮉𥰆𡶐垡煑澶𦄂𧰒遖𦆲𤾚譢𦐂𦑊"],
    ["9c40", "嵛𦯷輶𦒄𡤜諪𤧶𦒈𣿯𦔒䯀𦖿𦚵𢜛鑥𥟡憕娧晉侻嚹𤔡𦛼乪𤤴陖涏𦲽㘘襷𦞙𦡮𦐑𦡞營𦣇筂𩃀𠨑𦤦鄄𦤹穅鷰𦧺騦𦨭㙟𦑩𠀡禃𦨴𦭛崬𣔙菏𦮝䛐𦲤画补𦶮墶"],
    ["9ca1", "㜜𢖍𧁋𧇍㱔𧊀𧊅銁𢅺𧊋錰𧋦𤧐氹钟𧑐𠻸蠧裵𢤦𨑳𡞱溸𤨪𡠠㦤㚹尐秣䔿暶𩲭𩢤襃𧟌𧡘囖䃟𡘊㦡𣜯𨃨𡏅熭荦𧧝𩆨婧䲷𧂯𨦫𧧽𧨊𧬋𧵦𤅺筃祾𨀉澵𪋟樃𨌘厢𦸇鎿栶靝𨅯𨀣𦦵𡏭𣈯𨁈嶅𨰰𨂃圕頣𨥉嶫𤦈斾槕叒𤪥𣾁㰑朶𨂐𨃴𨄮𡾡𨅏"],
    ["9d40", "𨆉𨆯𨈚𨌆𨌯𨎊㗊𨑨𨚪䣺揦𨥖砈鉕𨦸䏲𨧧䏟𨧨𨭆𨯔姸𨰉輋𨿅𩃬筑𩄐𩄼㷷𩅞𤫊运犏嚋𩓧𩗩𩖰𩖸𩜲𩣑𩥉𩥪𩧃𩨨𩬎𩵚𩶛纟𩻸𩼣䲤镇𪊓熢𪋿䶑递𪗋䶜𠲜达嗁"],
    ["9da1", "辺𢒰边𤪓䔉繿潖檱仪㓤𨬬𧢝㜺躀𡟵𨀤𨭬𨮙𧨾𦚯㷫𧙕𣲷𥘵𥥖亚𥺁𦉘嚿𠹭踎孭𣺈𤲞揞拐𡟶𡡻攰嘭𥱊吚𥌑㷆𩶘䱽嘢嘞罉𥻘奵𣵀蝰东𠿪𠵉𣚺脗鵞贘瘻鱅癎瞹鍅吲腈苷嘥脲萘肽嗪祢噃吖𠺝㗎嘅嗱曱𨋢㘭甴嗰喺咗啲𠱁𠲖廐𥅈𠹶𢱢"],
    ["9e40", "𠺢麫絚嗞𡁵抝靭咔賍燶酶揼掹揾啩𢭃鱲𢺳冚㓟𠶧冧呍唞唓癦踭𦢊疱肶蠄螆裇膶萜𡃁䓬猄𤜆宐茋𦢓噻𢛴𧴯𤆣𧵳𦻐𧊶酰𡇙鈈𣳼𪚩𠺬𠻹牦𡲢䝎𤿂𧿹𠿫䃺"],
    ["9ea1", "鱝攟𢶠䣳𤟠𩵼𠿬𠸊恢𧖣𠿭"],
    ["9ead", "𦁈𡆇熣纎鵐业丄㕷嬍沲卧㚬㧜卽㚥𤘘墚𤭮舭呋垪𥪕𠥹"],
    ["9ec5", "㩒𢑥獴𩺬䴉鯭𣳾𩼰䱛𤾩𩖞𩿞葜𣶶𧊲𦞳𣜠挮紥𣻷𣸬㨪逈勌㹴㙺䗩𠒎癀嫰𠺶硺𧼮墧䂿噼鮋嵴癔𪐴麅䳡痹㟻愙𣃚𤏲"],
    ["9ef5", "噝𡊩垧𤥣𩸆刴𧂮㖭汊鵼"],
    ["9f40", "籖鬹埞𡝬屓擓𩓐𦌵𧅤蚭𠴨𦴢𤫢𠵱"],
    ["9f4f", "凾𡼏嶎霃𡷑麁遌笟鬂峑箣扨挵髿篏鬪籾鬮籂粆鰕篼鬉鼗鰛𤤾齚啳寃俽麘俲剠㸆勑坧偖妷帒韈鶫轜呩鞴饀鞺匬愰"],
    ["9fa1", "椬叚鰊鴂䰻陁榀傦畆𡝭駚剳"],
    ["9fae", "酙隁酜"],
    ["9fb2", "酑𨺗捿𦴣櫊嘑醎畺抅𠏼獏籰𥰡𣳽"],
    ["9fc1", "𤤙盖鮝个𠳔莾衂"],
    ["9fc9", "届槀僭坺刟巵从氱𠇲伹咜哚劚趂㗾弌㗳"],
    ["9fdb", "歒酼龥鮗頮颴骺麨麄煺笔"],
    ["9fe7", "毺蠘罸"],
    ["9feb", "嘠𪙊蹷齓"],
    ["9ff0", "跔蹏鸜踁抂𨍽踨蹵竓𤩷稾磘泪詧瘇"],
    ["a040", "𨩚鼦泎蟖痃𪊲硓咢贌狢獱謭猂瓱賫𤪻蘯徺袠䒷"],
    ["a055", "𡠻𦸅"],
    ["a058", "詾𢔛"],
    ["a05b", "惽癧髗鵄鍮鮏蟵"],
    ["a063", "蠏賷猬霡鮰㗖犲䰇籑饊𦅙慙䰄麖慽"],
    ["a073", "坟慯抦戹拎㩜懢厪𣏵捤栂㗒"],
    ["a0a1", "嵗𨯂迚𨸹"],
    ["a0a6", "僙𡵆礆匲阸𠼻䁥"],
    ["a0ae", "矾"],
    ["a0b0", "糂𥼚糚稭聦聣絍甅瓲覔舚朌聢𧒆聛瓰脃眤覉𦟌畓𦻑螩蟎臈螌詉貭譃眫瓸蓚㘵榲趦"],
    ["a0d4", "覩瑨涹蟁𤀑瓧㷛煶悤憜㳑煢恷"],
    ["a0e2", "罱𨬭牐惩䭾删㰘𣳇𥻗𧙖𥔱𡥄𡋾𩤃𦷜𧂭峁𦆭𨨏𣙷𠃮𦡆𤼎䕢嬟𦍌齐麦𦉫"],
    ["a3c0", "␀", 31, "␡"],
    ["c6a1", "①", 9, "⑴", 9, "ⅰ", 9, "丶丿亅亠冂冖冫勹匸卩厶夊宀巛⼳广廴彐彡攴无疒癶辵隶¨ˆヽヾゝゞ〃仝々〆〇ー［］✽ぁ", 23],
    ["c740", "す", 58, "ァアィイ"],
    ["c7a1", "ゥ", 81, "А", 5, "ЁЖ", 4],
    ["c840", "Л", 26, "ёж", 25, "⇧↸↹㇏𠃌乚𠂊刂䒑"],
    ["c8a1", "龰冈龱𧘇"],
    ["c8cd", "￢￤＇＂㈱№℡゛゜⺀⺄⺆⺇⺈⺊⺌⺍⺕⺜⺝⺥⺧⺪⺬⺮⺶⺼⺾⻆⻊⻌⻍⻏⻖⻗⻞⻣"],
    ["c8f5", "ʃɐɛɔɵœøŋʊɪ"],
    ["f9fe", "￭"],
    ["fa40", "𠕇鋛𠗟𣿅蕌䊵珯况㙉𤥂𨧤鍄𡧛苮𣳈砼杄拟𤤳𨦪𠊠𦮳𡌅侫𢓭倈𦴩𧪄𣘀𤪱𢔓倩𠍾徤𠎀𠍇滛𠐟偽儁㑺儎顬㝃萖𤦤𠒇兠𣎴兪𠯿𢃼𠋥𢔰𠖎𣈳𡦃宂蝽𠖳𣲙冲冸"],
    ["faa1", "鴴凉减凑㳜凓𤪦决凢卂凭菍椾𣜭彻刋刦刼劵剗劔効勅簕蕂勠蘍𦬓包𨫞啉滙𣾀𠥔𣿬匳卄𠯢泋𡜦栛珕恊㺪㣌𡛨燝䒢卭却𨚫卾卿𡖖𡘓矦厓𨪛厠厫厮玧𥝲㽙玜叁叅汉义埾叙㪫𠮏叠𣿫𢶣叶𠱷吓灹唫晗浛呭𦭓𠵴啝咏咤䞦𡜍𠻝㶴𠵍"],
    ["fb40", "𨦼𢚘啇䳭启琗喆喩嘅𡣗𤀺䕒𤐵暳𡂴嘷曍𣊊暤暭噍噏磱囱鞇叾圀囯园𨭦㘣𡉏坆𤆥汮炋坂㚱𦱾埦𡐖堃𡑔𤍣堦𤯵塜墪㕡壠壜𡈼壻寿坃𪅐𤉸鏓㖡够梦㛃湙"],
    ["fba1", "𡘾娤啓𡚒蔅姉𠵎𦲁𦴪𡟜姙𡟻𡞲𦶦浱𡠨𡛕姹𦹅媫婣㛦𤦩婷㜈媖瑥嫓𦾡𢕔㶅𡤑㜲𡚸広勐孶斈孼𧨎䀄䡝𠈄寕慠𡨴𥧌𠖥寳宝䴐尅𡭄尓珎尔𡲥𦬨屉䣝岅峩峯嶋𡷹𡸷崐崘嵆𡺤岺巗苼㠭𤤁𢁉𢅳芇㠶㯂帮檊幵幺𤒼𠳓厦亷廐厨𡝱帉廴𨒂"],
    ["fc40", "廹廻㢠廼栾鐛弍𠇁弢㫞䢮𡌺强𦢈𢏐彘𢑱彣鞽𦹮彲鍀𨨶徧嶶㵟𥉐𡽪𧃸𢙨釖𠊞𨨩怱暅𡡷㥣㷇㘹垐𢞴祱㹀悞悤悳𤦂𤦏𧩓璤僡媠慤萤慂慈𦻒憁凴𠙖憇宪𣾷"],
    ["fca1", "𢡟懓𨮝𩥝懐㤲𢦀𢣁怣慜攞掋𠄘担𡝰拕𢸍捬𤧟㨗搸揸𡎎𡟼撐澊𢸶頔𤂌𥜝擡擥鑻㩦携㩗敍漖𤨨𤨣斅敭敟𣁾斵𤥀䬷旑䃘𡠩无旣忟𣐀昘𣇷𣇸晄𣆤𣆥晋𠹵晧𥇦晳晴𡸽𣈱𨗴𣇈𥌓矅𢣷馤朂𤎜𤨡㬫槺𣟂杞杧杢𤇍𩃭柗䓩栢湐鈼栁𣏦𦶠桝"],
    ["fd40", "𣑯槡樋𨫟楳棃𣗍椁椀㴲㨁𣘼㮀枬楡𨩊䋼椶榘㮡𠏉荣傐槹𣙙𢄪橅𣜃檝㯳枱櫈𩆜㰍欝𠤣惞欵歴𢟍溵𣫛𠎵𡥘㝀吡𣭚毡𣻼毜氷𢒋𤣱𦭑汚舦汹𣶼䓅𣶽𤆤𤤌𤤀"],
    ["fda1", "𣳉㛥㳫𠴲鮃𣇹𢒑羏样𦴥𦶡𦷫涖浜湼漄𤥿𤂅𦹲蔳𦽴凇沜渝萮𨬡港𣸯瑓𣾂秌湏媑𣁋濸㜍澝𣸰滺𡒗𤀽䕕鏰潄潜㵎潴𩅰㴻澟𤅄濓𤂑𤅕𤀹𣿰𣾴𤄿凟𤅖𤅗𤅀𦇝灋灾炧炁烌烕烖烟䄄㷨熴熖𤉷焫煅媈煊煮岜𤍥煏鍢𤋁焬𤑚𤨧𤨢熺𨯨炽爎"],
    ["fe40", "鑂爕夑鑃爤鍁𥘅爮牀𤥴梽牕牗㹕𣁄栍漽犂猪猫𤠣𨠫䣭𨠄猨献珏玪𠰺𦨮珉瑉𤇢𡛧𤨤昣㛅𤦷𤦍𤧻珷琕椃𤨦琹𠗃㻗瑜𢢭瑠𨺲瑇珤瑶莹瑬㜰瑴鏱樬璂䥓𤪌"],
    ["fea1", "𤅟𤩹𨮏孆𨰃𡢞瓈𡦈甎瓩甞𨻙𡩋寗𨺬鎅畍畊畧畮𤾂㼄𤴓疎瑝疞疴瘂瘬癑癏癯癶𦏵皐臯㟸𦤑𦤎皡皥皷盌𦾟葢𥂝𥅽𡸜眞眦着撯𥈠睘𣊬瞯𨥤𨥨𡛁矴砉𡍶𤨒棊碯磇磓隥礮𥗠磗礴碱𧘌辸袄𨬫𦂃𢘜禆褀椂禀𥡗禝𧬹礼禩渪𧄦㺨秆𩄍秔"]
  ];
});

// node_modules/iconv-lite/encodings/dbcs-data.js
var require_dbcs_data = __commonJS((exports, module) => {
  module.exports = {
    shiftjis: {
      type: "_dbcs",
      table: function() {
        return require_shiftjis();
      },
      encodeAdd: { "\xA5": 92, "\u203E": 126 },
      encodeSkipVals: [{ from: 60736, to: 63808 }]
    },
    csshiftjis: "shiftjis",
    mskanji: "shiftjis",
    sjis: "shiftjis",
    windows31j: "shiftjis",
    ms31j: "shiftjis",
    xsjis: "shiftjis",
    windows932: "shiftjis",
    ms932: "shiftjis",
    "932": "shiftjis",
    cp932: "shiftjis",
    eucjp: {
      type: "_dbcs",
      table: function() {
        return require_eucjp();
      },
      encodeAdd: { "\xA5": 92, "\u203E": 126 }
    },
    gb2312: "cp936",
    gb231280: "cp936",
    gb23121980: "cp936",
    csgb2312: "cp936",
    csiso58gb231280: "cp936",
    euccn: "cp936",
    windows936: "cp936",
    ms936: "cp936",
    "936": "cp936",
    cp936: {
      type: "_dbcs",
      table: function() {
        return require_cp936();
      }
    },
    gbk: {
      type: "_dbcs",
      table: function() {
        return require_cp936().concat(require_gbk_added());
      }
    },
    xgbk: "gbk",
    isoir58: "gbk",
    gb18030: {
      type: "_dbcs",
      table: function() {
        return require_cp936().concat(require_gbk_added());
      },
      gb18030: function() {
        return require_gb18030_ranges();
      },
      encodeSkipVals: [128],
      encodeAdd: { "\u20AC": 41699 }
    },
    chinese: "gb18030",
    windows949: "cp949",
    ms949: "cp949",
    "949": "cp949",
    cp949: {
      type: "_dbcs",
      table: function() {
        return require_cp949();
      }
    },
    cseuckr: "cp949",
    csksc56011987: "cp949",
    euckr: "cp949",
    isoir149: "cp949",
    korean: "cp949",
    ksc56011987: "cp949",
    ksc56011989: "cp949",
    ksc5601: "cp949",
    windows950: "cp950",
    ms950: "cp950",
    "950": "cp950",
    cp950: {
      type: "_dbcs",
      table: function() {
        return require_cp950();
      }
    },
    big5: "big5hkscs",
    big5hkscs: {
      type: "_dbcs",
      table: function() {
        return require_cp950().concat(require_big5_added());
      },
      encodeSkipVals: [41676]
    },
    cnbig5: "big5hkscs",
    csbig5: "big5hkscs",
    xxbig5: "big5hkscs"
  };
});

// node_modules/iconv-lite/encodings/index.js
var require_encodings = __commonJS((exports, module) => {
  var modules = [
    require_internal(),
    require_utf16(),
    require_utf7(),
    require_sbcs_codec(),
    require_sbcs_data(),
    require_sbcs_data_generated(),
    require_dbcs_codec(),
    require_dbcs_data()
  ];
  for (i = 0;i < modules.length; i++) {
    module = modules[i];
    for (enc in module)
      if (Object.prototype.hasOwnProperty.call(module, enc))
        exports[enc] = module[enc];
  }
  var module;
  var enc;
  var i;
});

// node_modules/iconv-lite/lib/streams.js
var require_streams = __commonJS((exports, module) => {
  var IconvLiteEncoderStream = function(conv, options) {
    this.conv = conv;
    options = options || {};
    options.decodeStrings = false;
    Transform.call(this, options);
  };
  var IconvLiteDecoderStream = function(conv, options) {
    this.conv = conv;
    options = options || {};
    options.encoding = this.encoding = "utf8";
    Transform.call(this, options);
  };
  var Buffer2 = import.meta.require("buffer").Buffer;
  var Transform = import.meta.require("stream").Transform;
  module.exports = function(iconv) {
    iconv.encodeStream = function encodeStream(encoding, options) {
      return new IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);
    };
    iconv.decodeStream = function decodeStream(encoding, options) {
      return new IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);
    };
    iconv.supportsStreams = true;
    iconv.IconvLiteEncoderStream = IconvLiteEncoderStream;
    iconv.IconvLiteDecoderStream = IconvLiteDecoderStream;
    iconv._collect = IconvLiteDecoderStream.prototype.collect;
  };
  IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {
    constructor: { value: IconvLiteEncoderStream }
  });
  IconvLiteEncoderStream.prototype._transform = function(chunk, encoding, done) {
    if (typeof chunk != "string")
      return done(new Error("Iconv encoding stream needs strings as its input."));
    try {
      var res = this.conv.write(chunk);
      if (res && res.length)
        this.push(res);
      done();
    } catch (e) {
      done(e);
    }
  };
  IconvLiteEncoderStream.prototype._flush = function(done) {
    try {
      var res = this.conv.end();
      if (res && res.length)
        this.push(res);
      done();
    } catch (e) {
      done(e);
    }
  };
  IconvLiteEncoderStream.prototype.collect = function(cb) {
    var chunks = [];
    this.on("error", cb);
    this.on("data", function(chunk) {
      chunks.push(chunk);
    });
    this.on("end", function() {
      cb(null, Buffer2.concat(chunks));
    });
    return this;
  };
  IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {
    constructor: { value: IconvLiteDecoderStream }
  });
  IconvLiteDecoderStream.prototype._transform = function(chunk, encoding, done) {
    if (!Buffer2.isBuffer(chunk))
      return done(new Error("Iconv decoding stream needs buffers as its input."));
    try {
      var res = this.conv.write(chunk);
      if (res && res.length)
        this.push(res, this.encoding);
      done();
    } catch (e) {
      done(e);
    }
  };
  IconvLiteDecoderStream.prototype._flush = function(done) {
    try {
      var res = this.conv.end();
      if (res && res.length)
        this.push(res, this.encoding);
      done();
    } catch (e) {
      done(e);
    }
  };
  IconvLiteDecoderStream.prototype.collect = function(cb) {
    var res = "";
    this.on("error", cb);
    this.on("data", function(chunk) {
      res += chunk;
    });
    this.on("end", function() {
      cb(null, res);
    });
    return this;
  };
});

// node_modules/iconv-lite/lib/extend-node.js
var require_extend_node = __commonJS((exports, module) => {
  var Buffer2 = import.meta.require("buffer").Buffer;
  module.exports = function(iconv) {
    var original = undefined;
    iconv.supportsNodeEncodingsExtension = !(Buffer2.from || new Buffer2(0) instanceof Uint8Array);
    iconv.extendNodeEncodings = function extendNodeEncodings() {
      if (original)
        return;
      original = {};
      if (!iconv.supportsNodeEncodingsExtension) {
        console.error("ACTION NEEDED: require('iconv-lite').extendNodeEncodings() is not supported in your version of Node");
        console.error("See more info at https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility");
        return;
      }
      var nodeNativeEncodings = {
        hex: true,
        utf8: true,
        "utf-8": true,
        ascii: true,
        binary: true,
        base64: true,
        ucs2: true,
        "ucs-2": true,
        utf16le: true,
        "utf-16le": true
      };
      Buffer2.isNativeEncoding = function(enc) {
        return enc && nodeNativeEncodings[enc.toLowerCase()];
      };
      var SlowBuffer = import.meta.require("buffer").SlowBuffer;
      original.SlowBufferToString = SlowBuffer.prototype.toString;
      SlowBuffer.prototype.toString = function(encoding, start, end) {
        encoding = String(encoding || "utf8").toLowerCase();
        if (Buffer2.isNativeEncoding(encoding))
          return original.SlowBufferToString.call(this, encoding, start, end);
        if (typeof start == "undefined")
          start = 0;
        if (typeof end == "undefined")
          end = this.length;
        return iconv.decode(this.slice(start, end), encoding);
      };
      original.SlowBufferWrite = SlowBuffer.prototype.write;
      SlowBuffer.prototype.write = function(string, offset, length, encoding) {
        if (isFinite(offset)) {
          if (!isFinite(length)) {
            encoding = length;
            length = undefined;
          }
        } else {
          var swap = encoding;
          encoding = offset;
          offset = length;
          length = swap;
        }
        offset = +offset || 0;
        var remaining = this.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = +length;
          if (length > remaining) {
            length = remaining;
          }
        }
        encoding = String(encoding || "utf8").toLowerCase();
        if (Buffer2.isNativeEncoding(encoding))
          return original.SlowBufferWrite.call(this, string, offset, length, encoding);
        if (string.length > 0 && (length < 0 || offset < 0))
          throw new RangeError("attempt to write beyond buffer bounds");
        var buf = iconv.encode(string, encoding);
        if (buf.length < length)
          length = buf.length;
        buf.copy(this, offset, 0, length);
        return length;
      };
      original.BufferIsEncoding = Buffer2.isEncoding;
      Buffer2.isEncoding = function(encoding) {
        return Buffer2.isNativeEncoding(encoding) || iconv.encodingExists(encoding);
      };
      original.BufferByteLength = Buffer2.byteLength;
      Buffer2.byteLength = SlowBuffer.byteLength = function(str, encoding) {
        encoding = String(encoding || "utf8").toLowerCase();
        if (Buffer2.isNativeEncoding(encoding))
          return original.BufferByteLength.call(this, str, encoding);
        return iconv.encode(str, encoding).length;
      };
      original.BufferToString = Buffer2.prototype.toString;
      Buffer2.prototype.toString = function(encoding, start, end) {
        encoding = String(encoding || "utf8").toLowerCase();
        if (Buffer2.isNativeEncoding(encoding))
          return original.BufferToString.call(this, encoding, start, end);
        if (typeof start == "undefined")
          start = 0;
        if (typeof end == "undefined")
          end = this.length;
        return iconv.decode(this.slice(start, end), encoding);
      };
      original.BufferWrite = Buffer2.prototype.write;
      Buffer2.prototype.write = function(string, offset, length, encoding) {
        var _offset = offset, _length = length, _encoding = encoding;
        if (isFinite(offset)) {
          if (!isFinite(length)) {
            encoding = length;
            length = undefined;
          }
        } else {
          var swap = encoding;
          encoding = offset;
          offset = length;
          length = swap;
        }
        encoding = String(encoding || "utf8").toLowerCase();
        if (Buffer2.isNativeEncoding(encoding))
          return original.BufferWrite.call(this, string, _offset, _length, _encoding);
        offset = +offset || 0;
        var remaining = this.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = +length;
          if (length > remaining) {
            length = remaining;
          }
        }
        if (string.length > 0 && (length < 0 || offset < 0))
          throw new RangeError("attempt to write beyond buffer bounds");
        var buf = iconv.encode(string, encoding);
        if (buf.length < length)
          length = buf.length;
        buf.copy(this, offset, 0, length);
        return length;
      };
      if (iconv.supportsStreams) {
        var Readable = import.meta.require("stream").Readable;
        original.ReadableSetEncoding = Readable.prototype.setEncoding;
        Readable.prototype.setEncoding = function setEncoding(enc, options) {
          this._readableState.decoder = iconv.getDecoder(enc, options);
          this._readableState.encoding = enc;
        };
        Readable.prototype.collect = iconv._collect;
      }
    };
    iconv.undoExtendNodeEncodings = function undoExtendNodeEncodings() {
      if (!iconv.supportsNodeEncodingsExtension)
        return;
      if (!original)
        throw new Error("require('iconv-lite').undoExtendNodeEncodings(): Nothing to undo; extendNodeEncodings() is not called.");
      delete Buffer2.isNativeEncoding;
      var SlowBuffer = import.meta.require("buffer").SlowBuffer;
      SlowBuffer.prototype.toString = original.SlowBufferToString;
      SlowBuffer.prototype.write = original.SlowBufferWrite;
      Buffer2.isEncoding = original.BufferIsEncoding;
      Buffer2.byteLength = original.BufferByteLength;
      Buffer2.prototype.toString = original.BufferToString;
      Buffer2.prototype.write = original.BufferWrite;
      if (iconv.supportsStreams) {
        var Readable = import.meta.require("stream").Readable;
        Readable.prototype.setEncoding = original.ReadableSetEncoding;
        delete Readable.prototype.collect;
      }
      original = undefined;
    };
  };
});

// node_modules/iconv-lite/lib/index.js
var require_lib = __commonJS((exports, module) => {
  var Buffer2 = require_safer().Buffer;
  var bomHandling = require_bom_handling();
  var iconv = exports;
  iconv.encodings = null;
  iconv.defaultCharUnicode = "\uFFFD";
  iconv.defaultCharSingleByte = "?";
  iconv.encode = function encode(str, encoding, options) {
    str = "" + (str || "");
    var encoder = iconv.getEncoder(encoding, options);
    var res = encoder.write(str);
    var trail = encoder.end();
    return trail && trail.length > 0 ? Buffer2.concat([res, trail]) : res;
  };
  iconv.decode = function decode(buf, encoding, options) {
    if (typeof buf === "string") {
      if (!iconv.skipDecodeWarning) {
        console.error("Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding");
        iconv.skipDecodeWarning = true;
      }
      buf = Buffer2.from("" + (buf || ""), "binary");
    }
    var decoder = iconv.getDecoder(encoding, options);
    var res = decoder.write(buf);
    var trail = decoder.end();
    return trail ? res + trail : res;
  };
  iconv.encodingExists = function encodingExists(enc) {
    try {
      iconv.getCodec(enc);
      return true;
    } catch (e) {
      return false;
    }
  };
  iconv.toEncoding = iconv.encode;
  iconv.fromEncoding = iconv.decode;
  iconv._codecDataCache = {};
  iconv.getCodec = function getCodec(encoding) {
    if (!iconv.encodings)
      iconv.encodings = require_encodings();
    var enc = iconv._canonicalizeEncoding(encoding);
    var codecOptions = {};
    while (true) {
      var codec = iconv._codecDataCache[enc];
      if (codec)
        return codec;
      var codecDef = iconv.encodings[enc];
      switch (typeof codecDef) {
        case "string":
          enc = codecDef;
          break;
        case "object":
          for (var key in codecDef)
            codecOptions[key] = codecDef[key];
          if (!codecOptions.encodingName)
            codecOptions.encodingName = enc;
          enc = codecDef.type;
          break;
        case "function":
          if (!codecOptions.encodingName)
            codecOptions.encodingName = enc;
          codec = new codecDef(codecOptions, iconv);
          iconv._codecDataCache[codecOptions.encodingName] = codec;
          return codec;
        default:
          throw new Error("Encoding not recognized: '" + encoding + "' (searched as: '" + enc + "')");
      }
    }
  };
  iconv._canonicalizeEncoding = function(encoding) {
    return ("" + encoding).toLowerCase().replace(/:\d{4}$|[^0-9a-z]/g, "");
  };
  iconv.getEncoder = function getEncoder(encoding, options) {
    var codec = iconv.getCodec(encoding), encoder = new codec.encoder(options, codec);
    if (codec.bomAware && options && options.addBOM)
      encoder = new bomHandling.PrependBOM(encoder, options);
    return encoder;
  };
  iconv.getDecoder = function getDecoder(encoding, options) {
    var codec = iconv.getCodec(encoding), decoder = new codec.decoder(options, codec);
    if (codec.bomAware && !(options && options.stripBOM === false))
      decoder = new bomHandling.StripBOM(decoder, options);
    return decoder;
  };
  var nodeVer = typeof process !== "undefined" && process.versions && process.versions.node;
  if (nodeVer) {
    nodeVerArr = nodeVer.split(".").map(Number);
    if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {
      require_streams()(iconv);
    }
    require_extend_node()(iconv);
  }
  var nodeVerArr;
  if (false) {
  }
});

// node_modules/unpipe/index.js
var require_unpipe = __commonJS((exports, module) => {
  var hasPipeDataListeners = function(stream) {
    var listeners = stream.listeners("data");
    for (var i = 0;i < listeners.length; i++) {
      if (listeners[i].name === "ondata") {
        return true;
      }
    }
    return false;
  };
  var unpipe = function(stream) {
    if (!stream) {
      throw new TypeError("argument stream is required");
    }
    if (typeof stream.unpipe === "function") {
      stream.unpipe();
      return;
    }
    if (!hasPipeDataListeners(stream)) {
      return;
    }
    var listener;
    var listeners = stream.listeners("close");
    for (var i = 0;i < listeners.length; i++) {
      listener = listeners[i];
      if (listener.name !== "cleanup" && listener.name !== "onclose") {
        continue;
      }
      listener.call(stream);
    }
  };
  /*!
   * unpipe
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = unpipe;
});

// node_modules/raw-body/index.js
var require_raw_body = __commonJS((exports, module) => {
  var getDecoder = function(encoding) {
    if (!encoding)
      return null;
    try {
      return iconv.getDecoder(encoding);
    } catch (e) {
      if (!ICONV_ENCODING_MESSAGE_REGEXP.test(e.message))
        throw e;
      throw createError(415, "specified encoding unsupported", {
        encoding,
        type: "encoding.unsupported"
      });
    }
  };
  var getRawBody = function(stream, options, callback) {
    var done = callback;
    var opts = options || {};
    if (stream === undefined) {
      throw new TypeError("argument stream is required");
    } else if (typeof stream !== "object" || stream === null || typeof stream.on !== "function") {
      throw new TypeError("argument stream must be a stream");
    }
    if (options === true || typeof options === "string") {
      opts = {
        encoding: options
      };
    }
    if (typeof options === "function") {
      done = options;
      opts = {};
    }
    if (done !== undefined && typeof done !== "function") {
      throw new TypeError("argument callback must be a function");
    }
    if (!done && !global.Promise) {
      throw new TypeError("argument callback is required");
    }
    var encoding = opts.encoding !== true ? opts.encoding : "utf-8";
    var limit = bytes.parse(opts.limit);
    var length = opts.length != null && !isNaN(opts.length) ? parseInt(opts.length, 10) : null;
    if (done) {
      return readStream(stream, encoding, length, limit, wrap(done));
    }
    return new Promise(function executor(resolve, reject) {
      readStream(stream, encoding, length, limit, function onRead(err, buf) {
        if (err)
          return reject(err);
        resolve(buf);
      });
    });
  };
  var halt = function(stream) {
    unpipe(stream);
    if (typeof stream.pause === "function") {
      stream.pause();
    }
  };
  var readStream = function(stream, encoding, length, limit, callback) {
    var complete = false;
    var sync = true;
    if (limit !== null && length !== null && length > limit) {
      return done(createError(413, "request entity too large", {
        expected: length,
        length,
        limit,
        type: "entity.too.large"
      }));
    }
    var state = stream._readableState;
    if (stream._decoder || state && (state.encoding || state.decoder)) {
      return done(createError(500, "stream encoding should not be set", {
        type: "stream.encoding.set"
      }));
    }
    if (typeof stream.readable !== "undefined" && !stream.readable) {
      return done(createError(500, "stream is not readable", {
        type: "stream.not.readable"
      }));
    }
    var received = 0;
    var decoder;
    try {
      decoder = getDecoder(encoding);
    } catch (err) {
      return done(err);
    }
    var buffer = decoder ? "" : [];
    stream.on("aborted", onAborted);
    stream.on("close", cleanup);
    stream.on("data", onData);
    stream.on("end", onEnd);
    stream.on("error", onEnd);
    sync = false;
    function done() {
      var args = new Array(arguments.length);
      for (var i = 0;i < args.length; i++) {
        args[i] = arguments[i];
      }
      complete = true;
      if (sync) {
        process.nextTick(invokeCallback);
      } else {
        invokeCallback();
      }
      function invokeCallback() {
        cleanup();
        if (args[0]) {
          halt(stream);
        }
        callback.apply(null, args);
      }
    }
    function onAborted() {
      if (complete)
        return;
      done(createError(400, "request aborted", {
        code: "ECONNABORTED",
        expected: length,
        length,
        received,
        type: "request.aborted"
      }));
    }
    function onData(chunk) {
      if (complete)
        return;
      received += chunk.length;
      if (limit !== null && received > limit) {
        done(createError(413, "request entity too large", {
          limit,
          received,
          type: "entity.too.large"
        }));
      } else if (decoder) {
        buffer += decoder.write(chunk);
      } else {
        buffer.push(chunk);
      }
    }
    function onEnd(err) {
      if (complete)
        return;
      if (err)
        return done(err);
      if (length !== null && received !== length) {
        done(createError(400, "request size did not match content length", {
          expected: length,
          length,
          received,
          type: "request.size.invalid"
        }));
      } else {
        var string = decoder ? buffer + (decoder.end() || "") : Buffer.concat(buffer);
        done(null, string);
      }
    }
    function cleanup() {
      buffer = null;
      stream.removeListener("aborted", onAborted);
      stream.removeListener("data", onData);
      stream.removeListener("end", onEnd);
      stream.removeListener("error", onEnd);
      stream.removeListener("close", cleanup);
    }
  };
  var tryRequireAsyncHooks = function() {
    try {
      return import.meta.require("async_hooks");
    } catch (e) {
      return {};
    }
  };
  var wrap = function(fn) {
    var res;
    if (asyncHooks.AsyncResource) {
      res = new asyncHooks.AsyncResource(fn.name || "bound-anonymous-fn");
    }
    if (!res || !res.runInAsyncScope) {
      return fn;
    }
    return res.runInAsyncScope.bind(res, fn, null);
  };
  /*!
   * raw-body
   * Copyright(c) 2013-2014 Jonathan Ong
   * Copyright(c) 2014-2022 Douglas Christopher Wilson
   * MIT Licensed
   */
  var asyncHooks = tryRequireAsyncHooks();
  var bytes = require_bytes();
  var createError = require_http_errors();
  var iconv = require_lib();
  var unpipe = require_unpipe();
  module.exports = getRawBody;
  var ICONV_ENCODING_MESSAGE_REGEXP = /^Encoding not recognized: /;
});

// node_modules/ee-first/index.js
var require_ee_first = __commonJS((exports, module) => {
  var first = function(stuff, done) {
    if (!Array.isArray(stuff))
      throw new TypeError("arg must be an array of [ee, events...] arrays");
    var cleanups = [];
    for (var i = 0;i < stuff.length; i++) {
      var arr = stuff[i];
      if (!Array.isArray(arr) || arr.length < 2)
        throw new TypeError("each array member must be [ee, events...]");
      var ee = arr[0];
      for (var j = 1;j < arr.length; j++) {
        var event = arr[j];
        var fn = listener(event, callback);
        ee.on(event, fn);
        cleanups.push({
          ee,
          event,
          fn
        });
      }
    }
    function callback() {
      cleanup();
      done.apply(null, arguments);
    }
    function cleanup() {
      var x;
      for (var i2 = 0;i2 < cleanups.length; i2++) {
        x = cleanups[i2];
        x.ee.removeListener(x.event, x.fn);
      }
    }
    function thunk(fn2) {
      done = fn2;
    }
    thunk.cancel = cleanup;
    return thunk;
  };
  var listener = function(event, done) {
    return function onevent(arg1) {
      var args = new Array(arguments.length);
      var ee = this;
      var err = event === "error" ? arg1 : null;
      for (var i = 0;i < args.length; i++) {
        args[i] = arguments[i];
      }
      done(err, ee, event, args);
    };
  };
  /*!
   * ee-first
   * Copyright(c) 2014 Jonathan Ong
   * MIT Licensed
   */
  module.exports = first;
});

// node_modules/on-finished/index.js
var require_on_finished = __commonJS((exports, module) => {
  var onFinished = function(msg, listener) {
    if (isFinished(msg) !== false) {
      defer(listener, null, msg);
      return msg;
    }
    attachListener(msg, wrap(listener));
    return msg;
  };
  var isFinished = function(msg) {
    var socket = msg.socket;
    if (typeof msg.finished === "boolean") {
      return Boolean(msg.finished || socket && !socket.writable);
    }
    if (typeof msg.complete === "boolean") {
      return Boolean(msg.upgrade || !socket || !socket.readable || msg.complete && !msg.readable);
    }
    return;
  };
  var attachFinishedListener = function(msg, callback) {
    var eeMsg;
    var eeSocket;
    var finished = false;
    function onFinish(error) {
      eeMsg.cancel();
      eeSocket.cancel();
      finished = true;
      callback(error);
    }
    eeMsg = eeSocket = first([[msg, "end", "finish"]], onFinish);
    function onSocket(socket) {
      msg.removeListener("socket", onSocket);
      if (finished)
        return;
      if (eeMsg !== eeSocket)
        return;
      eeSocket = first([[socket, "error", "close"]], onFinish);
    }
    if (msg.socket) {
      onSocket(msg.socket);
      return;
    }
    msg.on("socket", onSocket);
    if (msg.socket === undefined) {
      patchAssignSocket(msg, onSocket);
    }
  };
  var attachListener = function(msg, listener) {
    var attached = msg.__onFinished;
    if (!attached || !attached.queue) {
      attached = msg.__onFinished = createListener(msg);
      attachFinishedListener(msg, attached);
    }
    attached.queue.push(listener);
  };
  var createListener = function(msg) {
    function listener(err) {
      if (msg.__onFinished === listener)
        msg.__onFinished = null;
      if (!listener.queue)
        return;
      var queue = listener.queue;
      listener.queue = null;
      for (var i = 0;i < queue.length; i++) {
        queue[i](err, msg);
      }
    }
    listener.queue = [];
    return listener;
  };
  var patchAssignSocket = function(res, callback) {
    var assignSocket = res.assignSocket;
    if (typeof assignSocket !== "function")
      return;
    res.assignSocket = function _assignSocket(socket) {
      assignSocket.call(this, socket);
      callback(socket);
    };
  };
  var tryRequireAsyncHooks = function() {
    try {
      return import.meta.require("async_hooks");
    } catch (e) {
      return {};
    }
  };
  var wrap = function(fn) {
    var res;
    if (asyncHooks.AsyncResource) {
      res = new asyncHooks.AsyncResource(fn.name || "bound-anonymous-fn");
    }
    if (!res || !res.runInAsyncScope) {
      return fn;
    }
    return res.runInAsyncScope.bind(res, fn, null);
  };
  /*!
   * on-finished
   * Copyright(c) 2013 Jonathan Ong
   * Copyright(c) 2014 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = onFinished;
  module.exports.isFinished = isFinished;
  var asyncHooks = tryRequireAsyncHooks();
  var first = require_ee_first();
  var defer = typeof setImmediate === "function" ? setImmediate : function(fn) {
    process.nextTick(fn.bind.apply(fn, arguments));
  };
});

// node_modules/body-parser/lib/read.js
var require_read = __commonJS((exports, module) => {
  var read = function(req, res, next, parse, debug2, options) {
    var length;
    var opts = options;
    var stream;
    req._body = true;
    var encoding = opts.encoding !== null ? opts.encoding : null;
    var verify = opts.verify;
    try {
      stream = contentstream(req, debug2, opts.inflate);
      length = stream.length;
      stream.length = undefined;
    } catch (err) {
      return next(err);
    }
    opts.length = length;
    opts.encoding = verify ? null : encoding;
    if (opts.encoding === null && encoding !== null && !iconv.encodingExists(encoding)) {
      return next(createError(415, 'unsupported charset "' + encoding.toUpperCase() + '"', {
        charset: encoding.toLowerCase(),
        type: "charset.unsupported"
      }));
    }
    debug2("read body");
    getBody(stream, opts, function(error, body) {
      if (error) {
        var _error;
        if (error.type === "encoding.unsupported") {
          _error = createError(415, 'unsupported charset "' + encoding.toUpperCase() + '"', {
            charset: encoding.toLowerCase(),
            type: "charset.unsupported"
          });
        } else {
          _error = createError(400, error);
        }
        if (stream !== req) {
          unpipe(req);
          destroy(stream, true);
        }
        dump(req, function onfinished() {
          next(createError(400, _error));
        });
        return;
      }
      if (verify) {
        try {
          debug2("verify body");
          verify(req, res, body, encoding);
        } catch (err) {
          next(createError(403, err, {
            body,
            type: err.type || "entity.verify.failed"
          }));
          return;
        }
      }
      var str = body;
      try {
        debug2("parse body");
        str = typeof body !== "string" && encoding !== null ? iconv.decode(body, encoding) : body;
        req.body = parse(str);
      } catch (err) {
        next(createError(400, err, {
          body: str,
          type: err.type || "entity.parse.failed"
        }));
        return;
      }
      next();
    });
  };
  var contentstream = function(req, debug2, inflate) {
    var encoding = (req.headers["content-encoding"] || "identity").toLowerCase();
    var length = req.headers["content-length"];
    var stream;
    debug2('content-encoding "%s"', encoding);
    if (inflate === false && encoding !== "identity") {
      throw createError(415, "content encoding unsupported", {
        encoding,
        type: "encoding.unsupported"
      });
    }
    switch (encoding) {
      case "deflate":
        stream = zlib.createInflate();
        debug2("inflate body");
        req.pipe(stream);
        break;
      case "gzip":
        stream = zlib.createGunzip();
        debug2("gunzip body");
        req.pipe(stream);
        break;
      case "identity":
        stream = req;
        stream.length = length;
        break;
      default:
        throw createError(415, 'unsupported content encoding "' + encoding + '"', {
          encoding,
          type: "encoding.unsupported"
        });
    }
    return stream;
  };
  var dump = function(req, callback) {
    if (onFinished.isFinished(req)) {
      callback(null);
    } else {
      onFinished(req, callback);
      req.resume();
    }
  };
  /*!
   * body-parser
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var createError = require_http_errors();
  var destroy = require_destroy();
  var getBody = require_raw_body();
  var iconv = require_lib();
  var onFinished = require_on_finished();
  var unpipe = require_unpipe();
  var zlib = import.meta.require("zlib");
  module.exports = read;
});

// node_modules/media-typer/index.js
var require_media_typer = __commonJS((exports) => {
  var format = function(obj) {
    if (!obj || typeof obj !== "object") {
      throw new TypeError("argument obj is required");
    }
    var parameters = obj.parameters;
    var subtype = obj.subtype;
    var suffix = obj.suffix;
    var type = obj.type;
    if (!type || !typeNameRegExp.test(type)) {
      throw new TypeError("invalid type");
    }
    if (!subtype || !subtypeNameRegExp.test(subtype)) {
      throw new TypeError("invalid subtype");
    }
    var string = type + "/" + subtype;
    if (suffix) {
      if (!typeNameRegExp.test(suffix)) {
        throw new TypeError("invalid suffix");
      }
      string += "+" + suffix;
    }
    if (parameters && typeof parameters === "object") {
      var param;
      var params = Object.keys(parameters).sort();
      for (var i = 0;i < params.length; i++) {
        param = params[i];
        if (!tokenRegExp.test(param)) {
          throw new TypeError("invalid parameter name");
        }
        string += "; " + param + "=" + qstring(parameters[param]);
      }
    }
    return string;
  };
  var parse = function(string) {
    if (!string) {
      throw new TypeError("argument string is required");
    }
    if (typeof string === "object") {
      string = getcontenttype(string);
    }
    if (typeof string !== "string") {
      throw new TypeError("argument string is required to be a string");
    }
    var index = string.indexOf(";");
    var type = index !== -1 ? string.substr(0, index) : string;
    var key;
    var match;
    var obj = splitType(type);
    var params = {};
    var value;
    paramRegExp.lastIndex = index;
    while (match = paramRegExp.exec(string)) {
      if (match.index !== index) {
        throw new TypeError("invalid parameter format");
      }
      index += match[0].length;
      key = match[1].toLowerCase();
      value = match[2];
      if (value[0] === '"') {
        value = value.substr(1, value.length - 2).replace(qescRegExp, "$1");
      }
      params[key] = value;
    }
    if (index !== -1 && index !== string.length) {
      throw new TypeError("invalid parameter format");
    }
    obj.parameters = params;
    return obj;
  };
  var getcontenttype = function(obj) {
    if (typeof obj.getHeader === "function") {
      return obj.getHeader("content-type");
    }
    if (typeof obj.headers === "object") {
      return obj.headers && obj.headers["content-type"];
    }
  };
  var qstring = function(val) {
    var str = String(val);
    if (tokenRegExp.test(str)) {
      return str;
    }
    if (str.length > 0 && !textRegExp.test(str)) {
      throw new TypeError("invalid parameter value");
    }
    return '"' + str.replace(quoteRegExp, "\\$1") + '"';
  };
  var splitType = function(string) {
    var match = typeRegExp.exec(string.toLowerCase());
    if (!match) {
      throw new TypeError("invalid media type");
    }
    var type = match[1];
    var subtype = match[2];
    var suffix;
    var index = subtype.lastIndexOf("+");
    if (index !== -1) {
      suffix = subtype.substr(index + 1);
      subtype = subtype.substr(0, index);
    }
    var obj = {
      type,
      subtype,
      suffix
    };
    return obj;
  };
  /*!
   * media-typer
   * Copyright(c) 2014 Douglas Christopher Wilson
   * MIT Licensed
   */
  var paramRegExp = /; *([!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) *= *("(?:[ !\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u0020-\u007e])*"|[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) */g;
  var textRegExp = /^[\u0020-\u007e\u0080-\u00ff]+$/;
  var tokenRegExp = /^[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+$/;
  var qescRegExp = /\\([\u0000-\u007f])/g;
  var quoteRegExp = /([\\"])/g;
  var subtypeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/;
  var typeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/;
  var typeRegExp = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/;
  exports.format = format;
  exports.parse = parse;
});

// node_modules/type-is/index.js
var require_type_is = __commonJS((exports, module) => {
  var typeis = function(value, types_) {
    var i;
    var types = types_;
    var val = tryNormalizeType(value);
    if (!val) {
      return false;
    }
    if (types && !Array.isArray(types)) {
      types = new Array(arguments.length - 1);
      for (i = 0;i < types.length; i++) {
        types[i] = arguments[i + 1];
      }
    }
    if (!types || !types.length) {
      return val;
    }
    var type;
    for (i = 0;i < types.length; i++) {
      if (mimeMatch(normalize(type = types[i]), val)) {
        return type[0] === "+" || type.indexOf("*") !== -1 ? val : type;
      }
    }
    return false;
  };
  var hasbody = function(req) {
    return req.headers["transfer-encoding"] !== undefined || !isNaN(req.headers["content-length"]);
  };
  var typeofrequest = function(req, types_) {
    var types = types_;
    if (!hasbody(req)) {
      return null;
    }
    if (arguments.length > 2) {
      types = new Array(arguments.length - 1);
      for (var i = 0;i < types.length; i++) {
        types[i] = arguments[i + 1];
      }
    }
    var value = req.headers["content-type"];
    return typeis(value, types);
  };
  var normalize = function(type) {
    if (typeof type !== "string") {
      return false;
    }
    switch (type) {
      case "urlencoded":
        return "application/x-www-form-urlencoded";
      case "multipart":
        return "multipart/*";
    }
    if (type[0] === "+") {
      return "*/*" + type;
    }
    return type.indexOf("/") === -1 ? mime2.lookup(type) : type;
  };
  var mimeMatch = function(expected, actual) {
    if (expected === false) {
      return false;
    }
    var actualParts = actual.split("/");
    var expectedParts = expected.split("/");
    if (actualParts.length !== 2 || expectedParts.length !== 2) {
      return false;
    }
    if (expectedParts[0] !== "*" && expectedParts[0] !== actualParts[0]) {
      return false;
    }
    if (expectedParts[1].substr(0, 2) === "*+") {
      return expectedParts[1].length <= actualParts[1].length + 1 && expectedParts[1].substr(1) === actualParts[1].substr(1 - expectedParts[1].length);
    }
    if (expectedParts[1] !== "*" && expectedParts[1] !== actualParts[1]) {
      return false;
    }
    return true;
  };
  var normalizeType = function(value) {
    var type = typer.parse(value);
    type.parameters = undefined;
    return typer.format(type);
  };
  var tryNormalizeType = function(value) {
    if (!value) {
      return null;
    }
    try {
      return normalizeType(value);
    } catch (err) {
      return null;
    }
  };
  /*!
   * type-is
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var typer = require_media_typer();
  var mime2 = require_mime_types();
  module.exports = typeofrequest;
  module.exports.is = typeis;
  module.exports.hasBody = hasbody;
  module.exports.normalize = normalize;
  module.exports.match = mimeMatch;
});

// node_modules/body-parser/lib/types/json.js
var require_json = __commonJS((exports, module) => {
  var json = function(options) {
    var opts = options || {};
    var limit = typeof opts.limit !== "number" ? bytes.parse(opts.limit || "100kb") : opts.limit;
    var inflate = opts.inflate !== false;
    var reviver = opts.reviver;
    var strict = opts.strict !== false;
    var type = opts.type || "application/json";
    var verify = opts.verify || false;
    if (verify !== false && typeof verify !== "function") {
      throw new TypeError("option verify must be function");
    }
    var shouldParse = typeof type !== "function" ? typeChecker(type) : type;
    function parse(body) {
      if (body.length === 0) {
        return {};
      }
      if (strict) {
        var first = firstchar(body);
        if (first !== "{" && first !== "[") {
          debug2("strict violation");
          throw createStrictSyntaxError(body, first);
        }
      }
      try {
        debug2("parse json");
        return JSON.parse(body, reviver);
      } catch (e) {
        throw normalizeJsonSyntaxError(e, {
          message: e.message,
          stack: e.stack
        });
      }
    }
    return function jsonParser(req, res, next) {
      if (req._body) {
        debug2("body already parsed");
        next();
        return;
      }
      req.body = req.body || {};
      if (!typeis.hasBody(req)) {
        debug2("skip empty body");
        next();
        return;
      }
      debug2("content-type %j", req.headers["content-type"]);
      if (!shouldParse(req)) {
        debug2("skip parsing");
        next();
        return;
      }
      var charset = getCharset(req) || "utf-8";
      if (charset.slice(0, 4) !== "utf-") {
        debug2("invalid charset");
        next(createError(415, 'unsupported charset "' + charset.toUpperCase() + '"', {
          charset,
          type: "charset.unsupported"
        }));
        return;
      }
      read(req, res, next, parse, debug2, {
        encoding: charset,
        inflate,
        limit,
        verify
      });
    };
  };
  var createStrictSyntaxError = function(str, char) {
    var index = str.indexOf(char);
    var partial = "";
    if (index !== -1) {
      partial = str.substring(0, index) + JSON_SYNTAX_CHAR;
      for (var i = index + 1;i < str.length; i++) {
        partial += JSON_SYNTAX_CHAR;
      }
    }
    try {
      JSON.parse(partial);
      throw new SyntaxError("strict violation");
    } catch (e) {
      return normalizeJsonSyntaxError(e, {
        message: e.message.replace(JSON_SYNTAX_REGEXP, function(placeholder) {
          return str.substring(index, index + placeholder.length);
        }),
        stack: e.stack
      });
    }
  };
  var firstchar = function(str) {
    var match = FIRST_CHAR_REGEXP.exec(str);
    return match ? match[1] : undefined;
  };
  var getCharset = function(req) {
    try {
      return (contentType.parse(req).parameters.charset || "").toLowerCase();
    } catch (e) {
      return;
    }
  };
  var normalizeJsonSyntaxError = function(error, obj) {
    var keys = Object.getOwnPropertyNames(error);
    for (var i = 0;i < keys.length; i++) {
      var key = keys[i];
      if (key !== "stack" && key !== "message") {
        delete error[key];
      }
    }
    error.stack = obj.stack.replace(error.message, obj.message);
    error.message = obj.message;
    return error;
  };
  var typeChecker = function(type) {
    return function checkType(req) {
      return Boolean(typeis(req, type));
    };
  };
  /*!
   * body-parser
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var bytes = require_bytes();
  var contentType = require_content_type();
  var createError = require_http_errors();
  var debug2 = require_src()("body-parser:json");
  var read = require_read();
  var typeis = require_type_is();
  module.exports = json;
  var FIRST_CHAR_REGEXP = /^[\x20\x09\x0a\x0d]*([^\x20\x09\x0a\x0d])/;
  var JSON_SYNTAX_CHAR = "#";
  var JSON_SYNTAX_REGEXP = /#+/g;
});

// node_modules/body-parser/lib/types/raw.js
var require_raw = __commonJS((exports, module) => {
  var raw = function(options) {
    var opts = options || {};
    var inflate = opts.inflate !== false;
    var limit = typeof opts.limit !== "number" ? bytes.parse(opts.limit || "100kb") : opts.limit;
    var type = opts.type || "application/octet-stream";
    var verify = opts.verify || false;
    if (verify !== false && typeof verify !== "function") {
      throw new TypeError("option verify must be function");
    }
    var shouldParse = typeof type !== "function" ? typeChecker(type) : type;
    function parse(buf) {
      return buf;
    }
    return function rawParser(req, res, next) {
      if (req._body) {
        debug2("body already parsed");
        next();
        return;
      }
      req.body = req.body || {};
      if (!typeis.hasBody(req)) {
        debug2("skip empty body");
        next();
        return;
      }
      debug2("content-type %j", req.headers["content-type"]);
      if (!shouldParse(req)) {
        debug2("skip parsing");
        next();
        return;
      }
      read(req, res, next, parse, debug2, {
        encoding: null,
        inflate,
        limit,
        verify
      });
    };
  };
  var typeChecker = function(type) {
    return function checkType(req) {
      return Boolean(typeis(req, type));
    };
  };
  /*!
   * body-parser
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var bytes = require_bytes();
  var debug2 = require_src()("body-parser:raw");
  var read = require_read();
  var typeis = require_type_is();
  module.exports = raw;
});

// node_modules/body-parser/lib/types/text.js
var require_text = __commonJS((exports, module) => {
  var text = function(options) {
    var opts = options || {};
    var defaultCharset = opts.defaultCharset || "utf-8";
    var inflate = opts.inflate !== false;
    var limit = typeof opts.limit !== "number" ? bytes.parse(opts.limit || "100kb") : opts.limit;
    var type = opts.type || "text/plain";
    var verify = opts.verify || false;
    if (verify !== false && typeof verify !== "function") {
      throw new TypeError("option verify must be function");
    }
    var shouldParse = typeof type !== "function" ? typeChecker(type) : type;
    function parse(buf) {
      return buf;
    }
    return function textParser(req, res, next) {
      if (req._body) {
        debug2("body already parsed");
        next();
        return;
      }
      req.body = req.body || {};
      if (!typeis.hasBody(req)) {
        debug2("skip empty body");
        next();
        return;
      }
      debug2("content-type %j", req.headers["content-type"]);
      if (!shouldParse(req)) {
        debug2("skip parsing");
        next();
        return;
      }
      var charset = getCharset(req) || defaultCharset;
      read(req, res, next, parse, debug2, {
        encoding: charset,
        inflate,
        limit,
        verify
      });
    };
  };
  var getCharset = function(req) {
    try {
      return (contentType.parse(req).parameters.charset || "").toLowerCase();
    } catch (e) {
      return;
    }
  };
  var typeChecker = function(type) {
    return function checkType(req) {
      return Boolean(typeis(req, type));
    };
  };
  /*!
   * body-parser
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var bytes = require_bytes();
  var contentType = require_content_type();
  var debug2 = require_src()("body-parser:text");
  var read = require_read();
  var typeis = require_type_is();
  module.exports = text;
});

// node_modules/es-errors/index.js
var require_es_errors = __commonJS((exports, module) => {
  module.exports = Error;
});

// node_modules/es-errors/eval.js
var require_eval = __commonJS((exports, module) => {
  module.exports = EvalError;
});

// node_modules/es-errors/range.js
var require_range = __commonJS((exports, module) => {
  module.exports = RangeError;
});

// node_modules/es-errors/ref.js
var require_ref = __commonJS((exports, module) => {
  module.exports = ReferenceError;
});

// node_modules/es-errors/syntax.js
var require_syntax = __commonJS((exports, module) => {
  module.exports = SyntaxError;
});

// node_modules/es-errors/type.js
var require_type = __commonJS((exports, module) => {
  module.exports = TypeError;
});

// node_modules/es-errors/uri.js
var require_uri = __commonJS((exports, module) => {
  module.exports = URIError;
});

// node_modules/has-symbols/shams.js
var require_shams = __commonJS((exports, module) => {
  module.exports = function hasSymbols() {
    if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
      return false;
    }
    if (typeof Symbol.iterator === "symbol") {
      return true;
    }
    var obj = {};
    var sym = Symbol("test");
    var symObj = Object(sym);
    if (typeof sym === "string") {
      return false;
    }
    if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
      return false;
    }
    if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
      return false;
    }
    var symVal = 42;
    obj[sym] = symVal;
    for (sym in obj) {
      return false;
    }
    if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
      return false;
    }
    if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
      return false;
    }
    var syms = Object.getOwnPropertySymbols(obj);
    if (syms.length !== 1 || syms[0] !== sym) {
      return false;
    }
    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
      return false;
    }
    if (typeof Object.getOwnPropertyDescriptor === "function") {
      var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
      if (descriptor.value !== symVal || descriptor.enumerable !== true) {
        return false;
      }
    }
    return true;
  };
});

// node_modules/has-symbols/index.js
var require_has_symbols = __commonJS((exports, module) => {
  var origSymbol = typeof Symbol !== "undefined" && Symbol;
  var hasSymbolSham = require_shams();
  module.exports = function hasNativeSymbols() {
    if (typeof origSymbol !== "function") {
      return false;
    }
    if (typeof Symbol !== "function") {
      return false;
    }
    if (typeof origSymbol("foo") !== "symbol") {
      return false;
    }
    if (typeof Symbol("bar") !== "symbol") {
      return false;
    }
    return hasSymbolSham();
  };
});

// node_modules/has-proto/index.js
var require_has_proto = __commonJS((exports, module) => {
  var test = {
    __proto__: null,
    foo: {}
  };
  var $Object = Object;
  module.exports = function hasProto() {
    return { __proto__: test }.foo === test.foo && !(test instanceof $Object);
  };
});

// node_modules/function-bind/implementation.js
var require_implementation = __commonJS((exports, module) => {
  var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
  var toStr = Object.prototype.toString;
  var max = Math.max;
  var funcType = "[object Function]";
  var concatty = function concatty(a, b) {
    var arr = [];
    for (var i = 0;i < a.length; i += 1) {
      arr[i] = a[i];
    }
    for (var j = 0;j < b.length; j += 1) {
      arr[j + a.length] = b[j];
    }
    return arr;
  };
  var slicy = function slicy(arrLike, offset) {
    var arr = [];
    for (var i = offset || 0, j = 0;i < arrLike.length; i += 1, j += 1) {
      arr[j] = arrLike[i];
    }
    return arr;
  };
  var joiny = function(arr, joiner) {
    var str = "";
    for (var i = 0;i < arr.length; i += 1) {
      str += arr[i];
      if (i + 1 < arr.length) {
        str += joiner;
      }
    }
    return str;
  };
  module.exports = function bind(that) {
    var target = this;
    if (typeof target !== "function" || toStr.apply(target) !== funcType) {
      throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);
    var bound;
    var binder = function() {
      if (this instanceof bound) {
        var result = target.apply(this, concatty(args, arguments));
        if (Object(result) === result) {
          return result;
        }
        return this;
      }
      return target.apply(that, concatty(args, arguments));
    };
    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0;i < boundLength; i++) {
      boundArgs[i] = "$" + i;
    }
    bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
    if (target.prototype) {
      var Empty = function Empty() {
      };
      Empty.prototype = target.prototype;
      bound.prototype = new Empty;
      Empty.prototype = null;
    }
    return bound;
  };
});

// node_modules/function-bind/index.js
var require_function_bind = __commonJS((exports, module) => {
  var implementation = require_implementation();
  module.exports = Function.prototype.bind || implementation;
});

// node_modules/hasown/index.js
var require_hasown = __commonJS((exports, module) => {
  var call = Function.prototype.call;
  var $hasOwn = Object.prototype.hasOwnProperty;
  var bind = require_function_bind();
  module.exports = bind.call(call, $hasOwn);
});

// node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS((exports, module) => {
  var undefined2;
  var $Error = require_es_errors();
  var $EvalError = require_eval();
  var $RangeError = require_range();
  var $ReferenceError = require_ref();
  var $SyntaxError = require_syntax();
  var $TypeError = require_type();
  var $URIError = require_uri();
  var $Function = Function;
  var getEvalledConstructor = function(expressionSyntax) {
    try {
      return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
    } catch (e) {
    }
  };
  var $gOPD = Object.getOwnPropertyDescriptor;
  if ($gOPD) {
    try {
      $gOPD({}, "");
    } catch (e) {
      $gOPD = null;
    }
  }
  var throwTypeError = function() {
    throw new $TypeError;
  };
  var ThrowTypeError = $gOPD ? function() {
    try {
      arguments.callee;
      return throwTypeError;
    } catch (calleeThrows) {
      try {
        return $gOPD(arguments, "callee").get;
      } catch (gOPDthrows) {
        return throwTypeError;
      }
    }
  }() : throwTypeError;
  var hasSymbols = require_has_symbols()();
  var hasProto = require_has_proto()();
  var getProto = Object.getPrototypeOf || (hasProto ? function(x) {
    return x.__proto__;
  } : null);
  var needsEval = {};
  var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined2 : getProto(Uint8Array);
  var INTRINSICS = {
    __proto__: null,
    "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
    "%Array%": Array,
    "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
    "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,
    "%AsyncFromSyncIteratorPrototype%": undefined2,
    "%AsyncFunction%": needsEval,
    "%AsyncGenerator%": needsEval,
    "%AsyncGeneratorFunction%": needsEval,
    "%AsyncIteratorPrototype%": needsEval,
    "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
    "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
    "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined2 : BigInt64Array,
    "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined2 : BigUint64Array,
    "%Boolean%": Boolean,
    "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
    "%Date%": Date,
    "%decodeURI%": decodeURI,
    "%decodeURIComponent%": decodeURIComponent,
    "%encodeURI%": encodeURI,
    "%encodeURIComponent%": encodeURIComponent,
    "%Error%": $Error,
    "%eval%": eval,
    "%EvalError%": $EvalError,
    "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
    "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
    "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
    "%Function%": $Function,
    "%GeneratorFunction%": needsEval,
    "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
    "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
    "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
    "%isFinite%": isFinite,
    "%isNaN%": isNaN,
    "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,
    "%JSON%": typeof JSON === "object" ? JSON : undefined2,
    "%Map%": typeof Map === "undefined" ? undefined2 : Map,
    "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto(new Map()[Symbol.iterator]()),
    "%Math%": Math,
    "%Number%": Number,
    "%Object%": Object,
    "%parseFloat%": parseFloat,
    "%parseInt%": parseInt,
    "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
    "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
    "%RangeError%": $RangeError,
    "%ReferenceError%": $ReferenceError,
    "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
    "%RegExp%": RegExp,
    "%Set%": typeof Set === "undefined" ? undefined2 : Set,
    "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto(new Set()[Symbol.iterator]()),
    "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
    "%String%": String,
    "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2,
    "%Symbol%": hasSymbols ? Symbol : undefined2,
    "%SyntaxError%": $SyntaxError,
    "%ThrowTypeError%": ThrowTypeError,
    "%TypedArray%": TypedArray,
    "%TypeError%": $TypeError,
    "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
    "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
    "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
    "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
    "%URIError%": $URIError,
    "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
    "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
    "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
  };
  if (getProto) {
    try {
      null.error;
    } catch (e) {
      errorProto = getProto(getProto(e));
      INTRINSICS["%Error.prototype%"] = errorProto;
    }
  }
  var errorProto;
  var doEval = function doEval(name) {
    var value;
    if (name === "%AsyncFunction%") {
      value = getEvalledConstructor("async function () {}");
    } else if (name === "%GeneratorFunction%") {
      value = getEvalledConstructor("function* () {}");
    } else if (name === "%AsyncGeneratorFunction%") {
      value = getEvalledConstructor("async function* () {}");
    } else if (name === "%AsyncGenerator%") {
      var fn = doEval("%AsyncGeneratorFunction%");
      if (fn) {
        value = fn.prototype;
      }
    } else if (name === "%AsyncIteratorPrototype%") {
      var gen = doEval("%AsyncGenerator%");
      if (gen && getProto) {
        value = getProto(gen.prototype);
      }
    }
    INTRINSICS[name] = value;
    return value;
  };
  var LEGACY_ALIASES = {
    __proto__: null,
    "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
    "%ArrayPrototype%": ["Array", "prototype"],
    "%ArrayProto_entries%": ["Array", "prototype", "entries"],
    "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
    "%ArrayProto_keys%": ["Array", "prototype", "keys"],
    "%ArrayProto_values%": ["Array", "prototype", "values"],
    "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
    "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
    "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
    "%BooleanPrototype%": ["Boolean", "prototype"],
    "%DataViewPrototype%": ["DataView", "prototype"],
    "%DatePrototype%": ["Date", "prototype"],
    "%ErrorPrototype%": ["Error", "prototype"],
    "%EvalErrorPrototype%": ["EvalError", "prototype"],
    "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
    "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
    "%FunctionPrototype%": ["Function", "prototype"],
    "%Generator%": ["GeneratorFunction", "prototype"],
    "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
    "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
    "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
    "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
    "%JSONParse%": ["JSON", "parse"],
    "%JSONStringify%": ["JSON", "stringify"],
    "%MapPrototype%": ["Map", "prototype"],
    "%NumberPrototype%": ["Number", "prototype"],
    "%ObjectPrototype%": ["Object", "prototype"],
    "%ObjProto_toString%": ["Object", "prototype", "toString"],
    "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
    "%PromisePrototype%": ["Promise", "prototype"],
    "%PromiseProto_then%": ["Promise", "prototype", "then"],
    "%Promise_all%": ["Promise", "all"],
    "%Promise_reject%": ["Promise", "reject"],
    "%Promise_resolve%": ["Promise", "resolve"],
    "%RangeErrorPrototype%": ["RangeError", "prototype"],
    "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
    "%RegExpPrototype%": ["RegExp", "prototype"],
    "%SetPrototype%": ["Set", "prototype"],
    "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
    "%StringPrototype%": ["String", "prototype"],
    "%SymbolPrototype%": ["Symbol", "prototype"],
    "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
    "%TypedArrayPrototype%": ["TypedArray", "prototype"],
    "%TypeErrorPrototype%": ["TypeError", "prototype"],
    "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
    "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
    "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
    "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
    "%URIErrorPrototype%": ["URIError", "prototype"],
    "%WeakMapPrototype%": ["WeakMap", "prototype"],
    "%WeakSetPrototype%": ["WeakSet", "prototype"]
  };
  var bind = require_function_bind();
  var hasOwn = require_hasown();
  var $concat = bind.call(Function.call, Array.prototype.concat);
  var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
  var $replace = bind.call(Function.call, String.prototype.replace);
  var $strSlice = bind.call(Function.call, String.prototype.slice);
  var $exec = bind.call(Function.call, RegExp.prototype.exec);
  var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath = function stringToPath(string) {
    var first = $strSlice(string, 0, 1);
    var last = $strSlice(string, -1);
    if (first === "%" && last !== "%") {
      throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
    } else if (last === "%" && first !== "%") {
      throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
    }
    var result = [];
    $replace(string, rePropName, function(match, number, quote, subString) {
      result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
    });
    return result;
  };
  var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
    var intrinsicName = name;
    var alias;
    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
      alias = LEGACY_ALIASES[intrinsicName];
      intrinsicName = "%" + alias[0] + "%";
    }
    if (hasOwn(INTRINSICS, intrinsicName)) {
      var value = INTRINSICS[intrinsicName];
      if (value === needsEval) {
        value = doEval(intrinsicName);
      }
      if (typeof value === "undefined" && !allowMissing) {
        throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
      }
      return {
        alias,
        name: intrinsicName,
        value
      };
    }
    throw new $SyntaxError("intrinsic " + name + " does not exist!");
  };
  module.exports = function GetIntrinsic(name, allowMissing) {
    if (typeof name !== "string" || name.length === 0) {
      throw new $TypeError("intrinsic name must be a non-empty string");
    }
    if (arguments.length > 1 && typeof allowMissing !== "boolean") {
      throw new $TypeError('"allowMissing" argument must be a boolean');
    }
    if ($exec(/^%?[^%]*%?$/, name) === null) {
      throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    }
    var parts = stringToPath(name);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
    var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;
    if (alias) {
      intrinsicBaseName = alias[0];
      $spliceApply(parts, $concat([0, 1], alias));
    }
    for (var i = 1, isOwn = true;i < parts.length; i += 1) {
      var part = parts[i];
      var first = $strSlice(part, 0, 1);
      var last = $strSlice(part, -1);
      if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
        throw new $SyntaxError("property names with quotes must have matching quotes");
      }
      if (part === "constructor" || !isOwn) {
        skipFurtherCaching = true;
      }
      intrinsicBaseName += "." + part;
      intrinsicRealName = "%" + intrinsicBaseName + "%";
      if (hasOwn(INTRINSICS, intrinsicRealName)) {
        value = INTRINSICS[intrinsicRealName];
      } else if (value != null) {
        if (!(part in value)) {
          if (!allowMissing) {
            throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
          }
          return;
        }
        if ($gOPD && i + 1 >= parts.length) {
          var desc = $gOPD(value, part);
          isOwn = !!desc;
          if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
            value = desc.get;
          } else {
            value = value[part];
          }
        } else {
          isOwn = hasOwn(value, part);
          value = value[part];
        }
        if (isOwn && !skipFurtherCaching) {
          INTRINSICS[intrinsicRealName] = value;
        }
      }
    }
    return value;
  };
});

// node_modules/es-define-property/index.js
var require_es_define_property = __commonJS((exports, module) => {
  var GetIntrinsic = require_get_intrinsic();
  var $defineProperty = GetIntrinsic("%Object.defineProperty%", true) || false;
  if ($defineProperty) {
    try {
      $defineProperty({}, "a", { value: 1 });
    } catch (e) {
      $defineProperty = false;
    }
  }
  module.exports = $defineProperty;
});

// node_modules/gopd/index.js
var require_gopd = __commonJS((exports, module) => {
  var GetIntrinsic = require_get_intrinsic();
  var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
  if ($gOPD) {
    try {
      $gOPD([], "length");
    } catch (e) {
      $gOPD = null;
    }
  }
  module.exports = $gOPD;
});

// node_modules/define-data-property/index.js
var require_define_data_property = __commonJS((exports, module) => {
  var $defineProperty = require_es_define_property();
  var $SyntaxError = require_syntax();
  var $TypeError = require_type();
  var gopd = require_gopd();
  module.exports = function defineDataProperty(obj, property, value) {
    if (!obj || typeof obj !== "object" && typeof obj !== "function") {
      throw new $TypeError("`obj` must be an object or a function`");
    }
    if (typeof property !== "string" && typeof property !== "symbol") {
      throw new $TypeError("`property` must be a string or a symbol`");
    }
    if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) {
      throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");
    }
    if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) {
      throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");
    }
    if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) {
      throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");
    }
    if (arguments.length > 6 && typeof arguments[6] !== "boolean") {
      throw new $TypeError("`loose`, if provided, must be a boolean");
    }
    var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
    var nonWritable = arguments.length > 4 ? arguments[4] : null;
    var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
    var loose = arguments.length > 6 ? arguments[6] : false;
    var desc = !!gopd && gopd(obj, property);
    if ($defineProperty) {
      $defineProperty(obj, property, {
        configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
        enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
        value,
        writable: nonWritable === null && desc ? desc.writable : !nonWritable
      });
    } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
      obj[property] = value;
    } else {
      throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
    }
  };
});

// node_modules/has-property-descriptors/index.js
var require_has_property_descriptors = __commonJS((exports, module) => {
  var $defineProperty = require_es_define_property();
  var hasPropertyDescriptors = function hasPropertyDescriptors() {
    return !!$defineProperty;
  };
  hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
    if (!$defineProperty) {
      return null;
    }
    try {
      return $defineProperty([], "length", { value: 1 }).length !== 1;
    } catch (e) {
      return true;
    }
  };
  module.exports = hasPropertyDescriptors;
});

// node_modules/set-function-length/index.js
var require_set_function_length = __commonJS((exports, module) => {
  var GetIntrinsic = require_get_intrinsic();
  var define2 = require_define_data_property();
  var hasDescriptors = require_has_property_descriptors()();
  var gOPD = require_gopd();
  var $TypeError = require_type();
  var $floor = GetIntrinsic("%Math.floor%");
  module.exports = function setFunctionLength(fn, length) {
    if (typeof fn !== "function") {
      throw new $TypeError("`fn` is not a function");
    }
    if (typeof length !== "number" || length < 0 || length > 4294967295 || $floor(length) !== length) {
      throw new $TypeError("`length` must be a positive 32-bit integer");
    }
    var loose = arguments.length > 2 && !!arguments[2];
    var functionLengthIsConfigurable = true;
    var functionLengthIsWritable = true;
    if ("length" in fn && gOPD) {
      var desc = gOPD(fn, "length");
      if (desc && !desc.configurable) {
        functionLengthIsConfigurable = false;
      }
      if (desc && !desc.writable) {
        functionLengthIsWritable = false;
      }
    }
    if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
      if (hasDescriptors) {
        define2(fn, "length", length, true, true);
      } else {
        define2(fn, "length", length);
      }
    }
    return fn;
  };
});

// node_modules/call-bind/index.js
var require_call_bind = __commonJS((exports, module) => {
  var bind = require_function_bind();
  var GetIntrinsic = require_get_intrinsic();
  var setFunctionLength = require_set_function_length();
  var $TypeError = require_type();
  var $apply = GetIntrinsic("%Function.prototype.apply%");
  var $call = GetIntrinsic("%Function.prototype.call%");
  var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
  var $defineProperty = require_es_define_property();
  var $max = GetIntrinsic("%Math.max%");
  module.exports = function callBind(originalFunction) {
    if (typeof originalFunction !== "function") {
      throw new $TypeError("a function is required");
    }
    var func = $reflectApply(bind, $call, arguments);
    return setFunctionLength(func, 1 + $max(0, originalFunction.length - (arguments.length - 1)), true);
  };
  var applyBind = function applyBind() {
    return $reflectApply(bind, $apply, arguments);
  };
  if ($defineProperty) {
    $defineProperty(module.exports, "apply", { value: applyBind });
  } else {
    module.exports.apply = applyBind;
  }
});

// node_modules/call-bind/callBound.js
var require_callBound = __commonJS((exports, module) => {
  var GetIntrinsic = require_get_intrinsic();
  var callBind = require_call_bind();
  var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
  module.exports = function callBoundIntrinsic(name, allowMissing) {
    var intrinsic = GetIntrinsic(name, !!allowMissing);
    if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
      return callBind(intrinsic);
    }
    return intrinsic;
  };
});

// node_modules/object-inspect/util.inspect.js
var require_util_inspect = __commonJS((exports, module) => {
  module.exports = import.meta.require("util").inspect;
});

// node_modules/object-inspect/index.js
var require_object_inspect = __commonJS((exports, module) => {
  var addNumericSeparator = function(num, str) {
    if (num === Infinity || num === (-Infinity) || num !== num || num && num > -1000 && num < 1000 || $test.call(/e/, str)) {
      return str;
    }
    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
    if (typeof num === "number") {
      var int = num < 0 ? -$floor(-num) : $floor(num);
      if (int !== num) {
        var intStr = String(int);
        var dec = $slice.call(str, intStr.length + 1);
        return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
      }
    }
    return $replace.call(str, sepRegex, "$&_");
  };
  var wrapQuotes = function(s, defaultStyle, opts) {
    var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
    return quoteChar + s + quoteChar;
  };
  var quote = function(s) {
    return $replace.call(String(s), /"/g, "&quot;");
  };
  var isArray = function(obj) {
    return toStr(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && (toStringTag in obj)));
  };
  var isDate = function(obj) {
    return toStr(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && (toStringTag in obj)));
  };
  var isRegExp = function(obj) {
    return toStr(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && (toStringTag in obj)));
  };
  var isError = function(obj) {
    return toStr(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && (toStringTag in obj)));
  };
  var isString = function(obj) {
    return toStr(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && (toStringTag in obj)));
  };
  var isNumber = function(obj) {
    return toStr(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && (toStringTag in obj)));
  };
  var isBoolean = function(obj) {
    return toStr(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && (toStringTag in obj)));
  };
  var isSymbol = function(obj) {
    if (hasShammedSymbols) {
      return obj && typeof obj === "object" && obj instanceof Symbol;
    }
    if (typeof obj === "symbol") {
      return true;
    }
    if (!obj || typeof obj !== "object" || !symToString) {
      return false;
    }
    try {
      symToString.call(obj);
      return true;
    } catch (e) {
    }
    return false;
  };
  var isBigInt = function(obj) {
    if (!obj || typeof obj !== "object" || !bigIntValueOf) {
      return false;
    }
    try {
      bigIntValueOf.call(obj);
      return true;
    } catch (e) {
    }
    return false;
  };
  var has = function(obj, key) {
    return hasOwn.call(obj, key);
  };
  var toStr = function(obj) {
    return objectToString.call(obj);
  };
  var nameOf = function(f) {
    if (f.name) {
      return f.name;
    }
    var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
    if (m) {
      return m[1];
    }
    return null;
  };
  var indexOf = function(xs, x) {
    if (xs.indexOf) {
      return xs.indexOf(x);
    }
    for (var i = 0, l = xs.length;i < l; i++) {
      if (xs[i] === x) {
        return i;
      }
    }
    return -1;
  };
  var isMap = function(x) {
    if (!mapSize || !x || typeof x !== "object") {
      return false;
    }
    try {
      mapSize.call(x);
      try {
        setSize.call(x);
      } catch (s) {
        return true;
      }
      return x instanceof Map;
    } catch (e) {
    }
    return false;
  };
  var isWeakMap = function(x) {
    if (!weakMapHas || !x || typeof x !== "object") {
      return false;
    }
    try {
      weakMapHas.call(x, weakMapHas);
      try {
        weakSetHas.call(x, weakSetHas);
      } catch (s) {
        return true;
      }
      return x instanceof WeakMap;
    } catch (e) {
    }
    return false;
  };
  var isWeakRef = function(x) {
    if (!weakRefDeref || !x || typeof x !== "object") {
      return false;
    }
    try {
      weakRefDeref.call(x);
      return true;
    } catch (e) {
    }
    return false;
  };
  var isSet = function(x) {
    if (!setSize || !x || typeof x !== "object") {
      return false;
    }
    try {
      setSize.call(x);
      try {
        mapSize.call(x);
      } catch (m) {
        return true;
      }
      return x instanceof Set;
    } catch (e) {
    }
    return false;
  };
  var isWeakSet = function(x) {
    if (!weakSetHas || !x || typeof x !== "object") {
      return false;
    }
    try {
      weakSetHas.call(x, weakSetHas);
      try {
        weakMapHas.call(x, weakMapHas);
      } catch (s) {
        return true;
      }
      return x instanceof WeakSet;
    } catch (e) {
    }
    return false;
  };
  var isElement = function(x) {
    if (!x || typeof x !== "object") {
      return false;
    }
    if (typeof HTMLElement !== "undefined" && x instanceof HTMLElement) {
      return true;
    }
    return typeof x.nodeName === "string" && typeof x.getAttribute === "function";
  };
  var inspectString = function(str, opts) {
    if (str.length > opts.maxStringLength) {
      var remaining = str.length - opts.maxStringLength;
      var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
      return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
    }
    var s = $replace.call($replace.call(str, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, lowbyte);
    return wrapQuotes(s, "single", opts);
  };
  var lowbyte = function(c) {
    var n = c.charCodeAt(0);
    var x = {
      8: "b",
      9: "t",
      10: "n",
      12: "f",
      13: "r"
    }[n];
    if (x) {
      return "\\" + x;
    }
    return "\\x" + (n < 16 ? "0" : "") + $toUpperCase.call(n.toString(16));
  };
  var markBoxed = function(str) {
    return "Object(" + str + ")";
  };
  var weakCollectionOf = function(type) {
    return type + " { ? }";
  };
  var collectionOf = function(type, size, entries, indent) {
    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
    return type + " (" + size + ") {" + joinedEntries + "}";
  };
  var singleLineValues = function(xs) {
    for (var i = 0;i < xs.length; i++) {
      if (indexOf(xs[i], "\n") >= 0) {
        return false;
      }
    }
    return true;
  };
  var getIndent = function(opts, depth) {
    var baseIndent;
    if (opts.indent === "\t") {
      baseIndent = "\t";
    } else if (typeof opts.indent === "number" && opts.indent > 0) {
      baseIndent = $join.call(Array(opts.indent + 1), " ");
    } else {
      return null;
    }
    return {
      base: baseIndent,
      prev: $join.call(Array(depth + 1), baseIndent)
    };
  };
  var indentedJoin = function(xs, indent) {
    if (xs.length === 0) {
      return "";
    }
    var lineJoiner = "\n" + indent.prev + indent.base;
    return lineJoiner + $join.call(xs, "," + lineJoiner) + "\n" + indent.prev;
  };
  var arrObjKeys = function(obj, inspect) {
    var isArr = isArray(obj);
    var xs = [];
    if (isArr) {
      xs.length = obj.length;
      for (var i = 0;i < obj.length; i++) {
        xs[i] = has(obj, i) ? inspect(obj[i], obj) : "";
      }
    }
    var syms = typeof gOPS === "function" ? gOPS(obj) : [];
    var symMap;
    if (hasShammedSymbols) {
      symMap = {};
      for (var k = 0;k < syms.length; k++) {
        symMap["$" + syms[k]] = syms[k];
      }
    }
    for (var key in obj) {
      if (!has(obj, key)) {
        continue;
      }
      if (isArr && String(Number(key)) === key && key < obj.length) {
        continue;
      }
      if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) {
        continue;
      } else if ($test.call(/[^\w$]/, key)) {
        xs.push(inspect(key, obj) + ": " + inspect(obj[key], obj));
      } else {
        xs.push(key + ": " + inspect(obj[key], obj));
      }
    }
    if (typeof gOPS === "function") {
      for (var j = 0;j < syms.length; j++) {
        if (isEnumerable.call(obj, syms[j])) {
          xs.push("[" + inspect(syms[j]) + "]: " + inspect(obj[syms[j]], obj));
        }
      }
    }
    return xs;
  };
  var hasMap = typeof Map === "function" && Map.prototype;
  var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
  var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
  var mapForEach = hasMap && Map.prototype.forEach;
  var hasSet = typeof Set === "function" && Set.prototype;
  var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
  var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
  var setForEach = hasSet && Set.prototype.forEach;
  var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
  var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
  var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
  var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
  var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
  var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
  var booleanValueOf = Boolean.prototype.valueOf;
  var objectToString = Object.prototype.toString;
  var functionToString = Function.prototype.toString;
  var $match = String.prototype.match;
  var $slice = String.prototype.slice;
  var $replace = String.prototype.replace;
  var $toUpperCase = String.prototype.toUpperCase;
  var $toLowerCase = String.prototype.toLowerCase;
  var $test = RegExp.prototype.test;
  var $concat = Array.prototype.concat;
  var $join = Array.prototype.join;
  var $arrSlice = Array.prototype.slice;
  var $floor = Math.floor;
  var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
  var gOPS = Object.getOwnPropertySymbols;
  var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
  var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
  var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
  var isEnumerable = Object.prototype.propertyIsEnumerable;
  var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O) {
    return O.__proto__;
  } : null);
  var utilInspect = require_util_inspect();
  var inspectCustom = utilInspect.custom;
  var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;
  module.exports = function inspect_(obj, options, depth, seen) {
    var opts = options || {};
    if (has(opts, "quoteStyle") && (opts.quoteStyle !== "single" && opts.quoteStyle !== "double")) {
      throw new TypeError('option "quoteStyle" must be "single" or "double"');
    }
    if (has(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
      throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
    }
    var customInspect = has(opts, "customInspect") ? opts.customInspect : true;
    if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
      throw new TypeError('option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`');
    }
    if (has(opts, "indent") && opts.indent !== null && opts.indent !== "\t" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
      throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
    }
    if (has(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
      throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
    }
    var numericSeparator = opts.numericSeparator;
    if (typeof obj === "undefined") {
      return "undefined";
    }
    if (obj === null) {
      return "null";
    }
    if (typeof obj === "boolean") {
      return obj ? "true" : "false";
    }
    if (typeof obj === "string") {
      return inspectString(obj, opts);
    }
    if (typeof obj === "number") {
      if (obj === 0) {
        return Infinity / obj > 0 ? "0" : "-0";
      }
      var str = String(obj);
      return numericSeparator ? addNumericSeparator(obj, str) : str;
    }
    if (typeof obj === "bigint") {
      var bigIntStr = String(obj) + "n";
      return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
    }
    var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
    if (typeof depth === "undefined") {
      depth = 0;
    }
    if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
      return isArray(obj) ? "[Array]" : "[Object]";
    }
    var indent = getIndent(opts, depth);
    if (typeof seen === "undefined") {
      seen = [];
    } else if (indexOf(seen, obj) >= 0) {
      return "[Circular]";
    }
    function inspect(value, from, noIndent) {
      if (from) {
        seen = $arrSlice.call(seen);
        seen.push(from);
      }
      if (noIndent) {
        var newOpts = {
          depth: opts.depth
        };
        if (has(opts, "quoteStyle")) {
          newOpts.quoteStyle = opts.quoteStyle;
        }
        return inspect_(value, newOpts, depth + 1, seen);
      }
      return inspect_(value, opts, depth + 1, seen);
    }
    if (typeof obj === "function" && !isRegExp(obj)) {
      var name = nameOf(obj);
      var keys = arrObjKeys(obj, inspect);
      return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys.length > 0 ? " { " + $join.call(keys, ", ") + " }" : "");
    }
    if (isSymbol(obj)) {
      var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
      return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
    }
    if (isElement(obj)) {
      var s = "<" + $toLowerCase.call(String(obj.nodeName));
      var attrs = obj.attributes || [];
      for (var i = 0;i < attrs.length; i++) {
        s += " " + attrs[i].name + "=" + wrapQuotes(quote(attrs[i].value), "double", opts);
      }
      s += ">";
      if (obj.childNodes && obj.childNodes.length) {
        s += "...";
      }
      s += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
      return s;
    }
    if (isArray(obj)) {
      if (obj.length === 0) {
        return "[]";
      }
      var xs = arrObjKeys(obj, inspect);
      if (indent && !singleLineValues(xs)) {
        return "[" + indentedJoin(xs, indent) + "]";
      }
      return "[ " + $join.call(xs, ", ") + " ]";
    }
    if (isError(obj)) {
      var parts = arrObjKeys(obj, inspect);
      if (!("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause")) {
        return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect(obj.cause), parts), ", ") + " }";
      }
      if (parts.length === 0) {
        return "[" + String(obj) + "]";
      }
      return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
    }
    if (typeof obj === "object" && customInspect) {
      if (inspectSymbol && typeof obj[inspectSymbol] === "function" && utilInspect) {
        return utilInspect(obj, { depth: maxDepth - depth });
      } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
        return obj.inspect();
      }
    }
    if (isMap(obj)) {
      var mapParts = [];
      if (mapForEach) {
        mapForEach.call(obj, function(value, key) {
          mapParts.push(inspect(key, obj, true) + " => " + inspect(value, obj));
        });
      }
      return collectionOf("Map", mapSize.call(obj), mapParts, indent);
    }
    if (isSet(obj)) {
      var setParts = [];
      if (setForEach) {
        setForEach.call(obj, function(value) {
          setParts.push(inspect(value, obj));
        });
      }
      return collectionOf("Set", setSize.call(obj), setParts, indent);
    }
    if (isWeakMap(obj)) {
      return weakCollectionOf("WeakMap");
    }
    if (isWeakSet(obj)) {
      return weakCollectionOf("WeakSet");
    }
    if (isWeakRef(obj)) {
      return weakCollectionOf("WeakRef");
    }
    if (isNumber(obj)) {
      return markBoxed(inspect(Number(obj)));
    }
    if (isBigInt(obj)) {
      return markBoxed(inspect(bigIntValueOf.call(obj)));
    }
    if (isBoolean(obj)) {
      return markBoxed(booleanValueOf.call(obj));
    }
    if (isString(obj)) {
      return markBoxed(inspect(String(obj)));
    }
    if (typeof window !== "undefined" && obj === window) {
      return "{ [object Window] }";
    }
    if (obj === global) {
      return "{ [object globalThis] }";
    }
    if (!isDate(obj) && !isRegExp(obj)) {
      var ys = arrObjKeys(obj, inspect);
      var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
      var protoTag = obj instanceof Object ? "" : "null prototype";
      var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
      var constructorTag = isPlainObject || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
      var tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
      if (ys.length === 0) {
        return tag + "{}";
      }
      if (indent) {
        return tag + "{" + indentedJoin(ys, indent) + "}";
      }
      return tag + "{ " + $join.call(ys, ", ") + " }";
    }
    return String(obj);
  };
  var hasOwn = Object.prototype.hasOwnProperty || function(key) {
    return key in this;
  };
});

// node_modules/side-channel/index.js
var require_side_channel = __commonJS((exports, module) => {
  var GetIntrinsic = require_get_intrinsic();
  var callBound = require_callBound();
  var inspect = require_object_inspect();
  var $TypeError = require_type();
  var $WeakMap = GetIntrinsic("%WeakMap%", true);
  var $Map = GetIntrinsic("%Map%", true);
  var $weakMapGet = callBound("WeakMap.prototype.get", true);
  var $weakMapSet = callBound("WeakMap.prototype.set", true);
  var $weakMapHas = callBound("WeakMap.prototype.has", true);
  var $mapGet = callBound("Map.prototype.get", true);
  var $mapSet = callBound("Map.prototype.set", true);
  var $mapHas = callBound("Map.prototype.has", true);
  var listGetNode = function(list, key) {
    var prev = list;
    var curr;
    for (;(curr = prev.next) !== null; prev = curr) {
      if (curr.key === key) {
        prev.next = curr.next;
        curr.next = list.next;
        list.next = curr;
        return curr;
      }
    }
  };
  var listGet = function(objects, key) {
    var node = listGetNode(objects, key);
    return node && node.value;
  };
  var listSet = function(objects, key, value) {
    var node = listGetNode(objects, key);
    if (node) {
      node.value = value;
    } else {
      objects.next = {
        key,
        next: objects.next,
        value
      };
    }
  };
  var listHas = function(objects, key) {
    return !!listGetNode(objects, key);
  };
  module.exports = function getSideChannel() {
    var $wm;
    var $m;
    var $o;
    var channel = {
      assert: function(key) {
        if (!channel.has(key)) {
          throw new $TypeError("Side channel does not contain " + inspect(key));
        }
      },
      get: function(key) {
        if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
          if ($wm) {
            return $weakMapGet($wm, key);
          }
        } else if ($Map) {
          if ($m) {
            return $mapGet($m, key);
          }
        } else {
          if ($o) {
            return listGet($o, key);
          }
        }
      },
      has: function(key) {
        if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
          if ($wm) {
            return $weakMapHas($wm, key);
          }
        } else if ($Map) {
          if ($m) {
            return $mapHas($m, key);
          }
        } else {
          if ($o) {
            return listHas($o, key);
          }
        }
        return false;
      },
      set: function(key, value) {
        if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
          if (!$wm) {
            $wm = new $WeakMap;
          }
          $weakMapSet($wm, key, value);
        } else if ($Map) {
          if (!$m) {
            $m = new $Map;
          }
          $mapSet($m, key, value);
        } else {
          if (!$o) {
            $o = { key: {}, next: null };
          }
          listSet($o, key, value);
        }
      }
    };
    return channel;
  };
});

// node_modules/qs/lib/formats.js
var require_formats = __commonJS((exports, module) => {
  var replace = String.prototype.replace;
  var percentTwenties = /%20/g;
  var Format = {
    RFC1738: "RFC1738",
    RFC3986: "RFC3986"
  };
  module.exports = {
    default: Format.RFC3986,
    formatters: {
      RFC1738: function(value) {
        return replace.call(value, percentTwenties, "+");
      },
      RFC3986: function(value) {
        return String(value);
      }
    },
    RFC1738: Format.RFC1738,
    RFC3986: Format.RFC3986
  };
});

// node_modules/qs/lib/utils.js
var require_utils = __commonJS((exports, module) => {
  var formats = require_formats();
  var has = Object.prototype.hasOwnProperty;
  var isArray = Array.isArray;
  var hexTable = function() {
    var array = [];
    for (var i = 0;i < 256; ++i) {
      array.push("%" + ((i < 16 ? "0" : "") + i.toString(16)).toUpperCase());
    }
    return array;
  }();
  var compactQueue = function compactQueue(queue) {
    while (queue.length > 1) {
      var item = queue.pop();
      var obj = item.obj[item.prop];
      if (isArray(obj)) {
        var compacted = [];
        for (var j = 0;j < obj.length; ++j) {
          if (typeof obj[j] !== "undefined") {
            compacted.push(obj[j]);
          }
        }
        item.obj[item.prop] = compacted;
      }
    }
  };
  var arrayToObject = function arrayToObject(source, options) {
    var obj = options && options.plainObjects ? Object.create(null) : {};
    for (var i = 0;i < source.length; ++i) {
      if (typeof source[i] !== "undefined") {
        obj[i] = source[i];
      }
    }
    return obj;
  };
  var merge = function merge(target, source, options) {
    if (!source) {
      return target;
    }
    if (typeof source !== "object") {
      if (isArray(target)) {
        target.push(source);
      } else if (target && typeof target === "object") {
        if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
          target[source] = true;
        }
      } else {
        return [target, source];
      }
      return target;
    }
    if (!target || typeof target !== "object") {
      return [target].concat(source);
    }
    var mergeTarget = target;
    if (isArray(target) && !isArray(source)) {
      mergeTarget = arrayToObject(target, options);
    }
    if (isArray(target) && isArray(source)) {
      source.forEach(function(item, i) {
        if (has.call(target, i)) {
          var targetItem = target[i];
          if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
            target[i] = merge(targetItem, item, options);
          } else {
            target.push(item);
          }
        } else {
          target[i] = item;
        }
      });
      return target;
    }
    return Object.keys(source).reduce(function(acc, key) {
      var value = source[key];
      if (has.call(acc, key)) {
        acc[key] = merge(acc[key], value, options);
      } else {
        acc[key] = value;
      }
      return acc;
    }, mergeTarget);
  };
  var assign = function assignSingleSource(target, source) {
    return Object.keys(source).reduce(function(acc, key) {
      acc[key] = source[key];
      return acc;
    }, target);
  };
  var decode = function(str, decoder, charset) {
    var strWithoutPlus = str.replace(/\+/g, " ");
    if (charset === "iso-8859-1") {
      return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
    }
    try {
      return decodeURIComponent(strWithoutPlus);
    } catch (e) {
      return strWithoutPlus;
    }
  };
  var encode2 = function encode(str, defaultEncoder, charset, kind, format) {
    if (str.length === 0) {
      return str;
    }
    var string = str;
    if (typeof str === "symbol") {
      string = Symbol.prototype.toString.call(str);
    } else if (typeof str !== "string") {
      string = String(str);
    }
    if (charset === "iso-8859-1") {
      return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
        return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
      });
    }
    var out = "";
    for (var i = 0;i < string.length; ++i) {
      var c = string.charCodeAt(i);
      if (c === 45 || c === 46 || c === 95 || c === 126 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122 || format === formats.RFC1738 && (c === 40 || c === 41)) {
        out += string.charAt(i);
        continue;
      }
      if (c < 128) {
        out = out + hexTable[c];
        continue;
      }
      if (c < 2048) {
        out = out + (hexTable[192 | c >> 6] + hexTable[128 | c & 63]);
        continue;
      }
      if (c < 55296 || c >= 57344) {
        out = out + (hexTable[224 | c >> 12] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63]);
        continue;
      }
      i += 1;
      c = 65536 + ((c & 1023) << 10 | string.charCodeAt(i) & 1023);
      out += hexTable[240 | c >> 18] + hexTable[128 | c >> 12 & 63] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
    }
    return out;
  };
  var compact = function compact(value) {
    var queue = [{ obj: { o: value }, prop: "o" }];
    var refs = [];
    for (var i = 0;i < queue.length; ++i) {
      var item = queue[i];
      var obj = item.obj[item.prop];
      var keys = Object.keys(obj);
      for (var j = 0;j < keys.length; ++j) {
        var key = keys[j];
        var val = obj[key];
        if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
          queue.push({ obj, prop: key });
          refs.push(val);
        }
      }
    }
    compactQueue(queue);
    return value;
  };
  var isRegExp = function isRegExp(obj) {
    return Object.prototype.toString.call(obj) === "[object RegExp]";
  };
  var isBuffer = function isBuffer(obj) {
    if (!obj || typeof obj !== "object") {
      return false;
    }
    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
  };
  var combine = function combine(a, b) {
    return [].concat(a, b);
  };
  var maybeMap = function maybeMap(val, fn) {
    if (isArray(val)) {
      var mapped = [];
      for (var i = 0;i < val.length; i += 1) {
        mapped.push(fn(val[i]));
      }
      return mapped;
    }
    return fn(val);
  };
  module.exports = {
    arrayToObject,
    assign,
    combine,
    compact,
    decode,
    encode: encode2,
    isBuffer,
    isRegExp,
    maybeMap,
    merge
  };
});

// node_modules/qs/lib/stringify.js
var require_stringify = __commonJS((exports, module) => {
  var getSideChannel = require_side_channel();
  var utils = require_utils();
  var formats = require_formats();
  var has = Object.prototype.hasOwnProperty;
  var arrayPrefixGenerators = {
    brackets: function brackets(prefix) {
      return prefix + "[]";
    },
    comma: "comma",
    indices: function indices(prefix, key) {
      return prefix + "[" + key + "]";
    },
    repeat: function repeat(prefix) {
      return prefix;
    }
  };
  var isArray = Array.isArray;
  var split = String.prototype.split;
  var push = Array.prototype.push;
  var pushToArray = function(arr, valueOrArray) {
    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
  };
  var toISO = Date.prototype.toISOString;
  var defaultFormat = formats["default"];
  var defaults = {
    addQueryPrefix: false,
    allowDots: false,
    charset: "utf-8",
    charsetSentinel: false,
    delimiter: "&",
    encode: true,
    encoder: utils.encode,
    encodeValuesOnly: false,
    format: defaultFormat,
    formatter: formats.formatters[defaultFormat],
    indices: false,
    serializeDate: function serializeDate(date) {
      return toISO.call(date);
    },
    skipNulls: false,
    strictNullHandling: false
  };
  var isNonNullishPrimitive = function isNonNullishPrimitive(v) {
    return typeof v === "string" || typeof v === "number" || typeof v === "boolean" || typeof v === "symbol" || typeof v === "bigint";
  };
  var sentinel = {};
  var stringify = function stringify(object, prefix, generateArrayPrefix, commaRoundTrip, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
    var obj = object;
    var tmpSc = sideChannel;
    var step = 0;
    var findFlag = false;
    while ((tmpSc = tmpSc.get(sentinel)) !== undefined && !findFlag) {
      var pos = tmpSc.get(object);
      step += 1;
      if (typeof pos !== "undefined") {
        if (pos === step) {
          throw new RangeError("Cyclic object value");
        } else {
          findFlag = true;
        }
      }
      if (typeof tmpSc.get(sentinel) === "undefined") {
        step = 0;
      }
    }
    if (typeof filter === "function") {
      obj = filter(prefix, obj);
    } else if (obj instanceof Date) {
      obj = serializeDate(obj);
    } else if (generateArrayPrefix === "comma" && isArray(obj)) {
      obj = utils.maybeMap(obj, function(value2) {
        if (value2 instanceof Date) {
          return serializeDate(value2);
        }
        return value2;
      });
    }
    if (obj === null) {
      if (strictNullHandling) {
        return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, "key", format) : prefix;
      }
      obj = "";
    }
    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
      if (encoder) {
        var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, "key", format);
        if (generateArrayPrefix === "comma" && encodeValuesOnly) {
          var valuesArray = split.call(String(obj), ",");
          var valuesJoined = "";
          for (var i = 0;i < valuesArray.length; ++i) {
            valuesJoined += (i === 0 ? "" : ",") + formatter(encoder(valuesArray[i], defaults.encoder, charset, "value", format));
          }
          return [formatter(keyValue) + (commaRoundTrip && isArray(obj) && valuesArray.length === 1 ? "[]" : "") + "=" + valuesJoined];
        }
        return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults.encoder, charset, "value", format))];
      }
      return [formatter(prefix) + "=" + formatter(String(obj))];
    }
    var values = [];
    if (typeof obj === "undefined") {
      return values;
    }
    var objKeys;
    if (generateArrayPrefix === "comma" && isArray(obj)) {
      objKeys = [{ value: obj.length > 0 ? obj.join(",") || null : undefined }];
    } else if (isArray(filter)) {
      objKeys = filter;
    } else {
      var keys = Object.keys(obj);
      objKeys = sort ? keys.sort(sort) : keys;
    }
    var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? prefix + "[]" : prefix;
    for (var j = 0;j < objKeys.length; ++j) {
      var key = objKeys[j];
      var value = typeof key === "object" && typeof key.value !== "undefined" ? key.value : obj[key];
      if (skipNulls && value === null) {
        continue;
      }
      var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(adjustedPrefix, key) : adjustedPrefix : adjustedPrefix + (allowDots ? "." + key : "[" + key + "]");
      sideChannel.set(object, step);
      var valueSideChannel = getSideChannel();
      valueSideChannel.set(sentinel, sideChannel);
      pushToArray(values, stringify(value, keyPrefix, generateArrayPrefix, commaRoundTrip, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, valueSideChannel));
    }
    return values;
  };
  var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
    if (!opts) {
      return defaults;
    }
    if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
      throw new TypeError("Encoder has to be a function.");
    }
    var charset = opts.charset || defaults.charset;
    if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
      throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
    }
    var format = formats["default"];
    if (typeof opts.format !== "undefined") {
      if (!has.call(formats.formatters, opts.format)) {
        throw new TypeError("Unknown format option provided.");
      }
      format = opts.format;
    }
    var formatter = formats.formatters[format];
    var filter = defaults.filter;
    if (typeof opts.filter === "function" || isArray(opts.filter)) {
      filter = opts.filter;
    }
    return {
      addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults.addQueryPrefix,
      allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
      charset,
      charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
      delimiter: typeof opts.delimiter === "undefined" ? defaults.delimiter : opts.delimiter,
      encode: typeof opts.encode === "boolean" ? opts.encode : defaults.encode,
      encoder: typeof opts.encoder === "function" ? opts.encoder : defaults.encoder,
      encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
      filter,
      format,
      formatter,
      serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults.serializeDate,
      skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults.skipNulls,
      sort: typeof opts.sort === "function" ? opts.sort : null,
      strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
    };
  };
  module.exports = function(object, opts) {
    var obj = object;
    var options = normalizeStringifyOptions(opts);
    var objKeys;
    var filter;
    if (typeof options.filter === "function") {
      filter = options.filter;
      obj = filter("", obj);
    } else if (isArray(options.filter)) {
      filter = options.filter;
      objKeys = filter;
    }
    var keys = [];
    if (typeof obj !== "object" || obj === null) {
      return "";
    }
    var arrayFormat;
    if (opts && opts.arrayFormat in arrayPrefixGenerators) {
      arrayFormat = opts.arrayFormat;
    } else if (opts && "indices" in opts) {
      arrayFormat = opts.indices ? "indices" : "repeat";
    } else {
      arrayFormat = "indices";
    }
    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
    if (opts && "commaRoundTrip" in opts && typeof opts.commaRoundTrip !== "boolean") {
      throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
    }
    var commaRoundTrip = generateArrayPrefix === "comma" && opts && opts.commaRoundTrip;
    if (!objKeys) {
      objKeys = Object.keys(obj);
    }
    if (options.sort) {
      objKeys.sort(options.sort);
    }
    var sideChannel = getSideChannel();
    for (var i = 0;i < objKeys.length; ++i) {
      var key = objKeys[i];
      if (options.skipNulls && obj[key] === null) {
        continue;
      }
      pushToArray(keys, stringify(obj[key], key, generateArrayPrefix, commaRoundTrip, options.strictNullHandling, options.skipNulls, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.format, options.formatter, options.encodeValuesOnly, options.charset, sideChannel));
    }
    var joined = keys.join(options.delimiter);
    var prefix = options.addQueryPrefix === true ? "?" : "";
    if (options.charsetSentinel) {
      if (options.charset === "iso-8859-1") {
        prefix += "utf8=%26%2310003%3B&";
      } else {
        prefix += "utf8=%E2%9C%93&";
      }
    }
    return joined.length > 0 ? prefix + joined : "";
  };
});

// node_modules/qs/lib/parse.js
var require_parse = __commonJS((exports, module) => {
  var utils = require_utils();
  var has = Object.prototype.hasOwnProperty;
  var isArray = Array.isArray;
  var defaults = {
    allowDots: false,
    allowPrototypes: false,
    allowSparse: false,
    arrayLimit: 20,
    charset: "utf-8",
    charsetSentinel: false,
    comma: false,
    decoder: utils.decode,
    delimiter: "&",
    depth: 5,
    ignoreQueryPrefix: false,
    interpretNumericEntities: false,
    parameterLimit: 1000,
    parseArrays: true,
    plainObjects: false,
    strictNullHandling: false
  };
  var interpretNumericEntities = function(str) {
    return str.replace(/&#(\d+);/g, function($0, numberStr) {
      return String.fromCharCode(parseInt(numberStr, 10));
    });
  };
  var parseArrayValue = function(val, options) {
    if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) {
      return val.split(",");
    }
    return val;
  };
  var isoSentinel = "utf8=%26%2310003%3B";
  var charsetSentinel = "utf8=%E2%9C%93";
  var parseValues = function parseQueryStringValues(str, options) {
    var obj = {};
    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
    var parts = cleanStr.split(options.delimiter, limit);
    var skipIndex = -1;
    var i;
    var charset = options.charset;
    if (options.charsetSentinel) {
      for (i = 0;i < parts.length; ++i) {
        if (parts[i].indexOf("utf8=") === 0) {
          if (parts[i] === charsetSentinel) {
            charset = "utf-8";
          } else if (parts[i] === isoSentinel) {
            charset = "iso-8859-1";
          }
          skipIndex = i;
          i = parts.length;
        }
      }
    }
    for (i = 0;i < parts.length; ++i) {
      if (i === skipIndex) {
        continue;
      }
      var part = parts[i];
      var bracketEqualsPos = part.indexOf("]=");
      var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
      var key, val;
      if (pos === -1) {
        key = options.decoder(part, defaults.decoder, charset, "key");
        val = options.strictNullHandling ? null : "";
      } else {
        key = options.decoder(part.slice(0, pos), defaults.decoder, charset, "key");
        val = utils.maybeMap(parseArrayValue(part.slice(pos + 1), options), function(encodedVal) {
          return options.decoder(encodedVal, defaults.decoder, charset, "value");
        });
      }
      if (val && options.interpretNumericEntities && charset === "iso-8859-1") {
        val = interpretNumericEntities(val);
      }
      if (part.indexOf("[]=") > -1) {
        val = isArray(val) ? [val] : val;
      }
      if (has.call(obj, key)) {
        obj[key] = utils.combine(obj[key], val);
      } else {
        obj[key] = val;
      }
    }
    return obj;
  };
  var parseObject = function(chain, val, options, valuesParsed) {
    var leaf = valuesParsed ? val : parseArrayValue(val, options);
    for (var i = chain.length - 1;i >= 0; --i) {
      var obj;
      var root = chain[i];
      if (root === "[]" && options.parseArrays) {
        obj = [].concat(leaf);
      } else {
        obj = options.plainObjects ? Object.create(null) : {};
        var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
        var index = parseInt(cleanRoot, 10);
        if (!options.parseArrays && cleanRoot === "") {
          obj = { 0: leaf };
        } else if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && (options.parseArrays && index <= options.arrayLimit)) {
          obj = [];
          obj[index] = leaf;
        } else if (cleanRoot !== "__proto__") {
          obj[cleanRoot] = leaf;
        }
      }
      leaf = obj;
    }
    return leaf;
  };
  var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
    if (!givenKey) {
      return;
    }
    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
    var brackets = /(\[[^[\]]*])/;
    var child = /(\[[^[\]]*])/g;
    var segment = options.depth > 0 && brackets.exec(key);
    var parent = segment ? key.slice(0, segment.index) : key;
    var keys = [];
    if (parent) {
      if (!options.plainObjects && has.call(Object.prototype, parent)) {
        if (!options.allowPrototypes) {
          return;
        }
      }
      keys.push(parent);
    }
    var i = 0;
    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
      i += 1;
      if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
        if (!options.allowPrototypes) {
          return;
        }
      }
      keys.push(segment[1]);
    }
    if (segment) {
      keys.push("[" + key.slice(segment.index) + "]");
    }
    return parseObject(keys, val, options, valuesParsed);
  };
  var normalizeParseOptions = function normalizeParseOptions(opts) {
    if (!opts) {
      return defaults;
    }
    if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== "function") {
      throw new TypeError("Decoder has to be a function.");
    }
    if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
      throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
    }
    var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
    return {
      allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
      allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
      allowSparse: typeof opts.allowSparse === "boolean" ? opts.allowSparse : defaults.allowSparse,
      arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
      charset,
      charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
      comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
      decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
      delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
      depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults.depth,
      ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
      interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
      parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
      parseArrays: opts.parseArrays !== false,
      plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
      strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
    };
  };
  module.exports = function(str, opts) {
    var options = normalizeParseOptions(opts);
    if (str === "" || str === null || typeof str === "undefined") {
      return options.plainObjects ? Object.create(null) : {};
    }
    var tempObj = typeof str === "string" ? parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : {};
    var keys = Object.keys(tempObj);
    for (var i = 0;i < keys.length; ++i) {
      var key = keys[i];
      var newObj = parseKeys(key, tempObj[key], options, typeof str === "string");
      obj = utils.merge(obj, newObj, options);
    }
    if (options.allowSparse === true) {
      return obj;
    }
    return utils.compact(obj);
  };
});

// node_modules/qs/lib/index.js
var require_lib2 = __commonJS((exports, module) => {
  var stringify = require_stringify();
  var parse = require_parse();
  var formats = require_formats();
  module.exports = {
    formats,
    parse,
    stringify
  };
});

// node_modules/body-parser/lib/types/urlencoded.js
var require_urlencoded = __commonJS((exports, module) => {
  var urlencoded = function(options) {
    var opts = options || {};
    if (opts.extended === undefined) {
      deprecate("undefined extended: provide extended option");
    }
    var extended = opts.extended !== false;
    var inflate = opts.inflate !== false;
    var limit = typeof opts.limit !== "number" ? bytes.parse(opts.limit || "100kb") : opts.limit;
    var type = opts.type || "application/x-www-form-urlencoded";
    var verify = opts.verify || false;
    if (verify !== false && typeof verify !== "function") {
      throw new TypeError("option verify must be function");
    }
    var queryparse = extended ? extendedparser(opts) : simpleparser(opts);
    var shouldParse = typeof type !== "function" ? typeChecker(type) : type;
    function parse(body) {
      return body.length ? queryparse(body) : {};
    }
    return function urlencodedParser(req, res, next) {
      if (req._body) {
        debug2("body already parsed");
        next();
        return;
      }
      req.body = req.body || {};
      if (!typeis.hasBody(req)) {
        debug2("skip empty body");
        next();
        return;
      }
      debug2("content-type %j", req.headers["content-type"]);
      if (!shouldParse(req)) {
        debug2("skip parsing");
        next();
        return;
      }
      var charset = getCharset(req) || "utf-8";
      if (charset !== "utf-8") {
        debug2("invalid charset");
        next(createError(415, 'unsupported charset "' + charset.toUpperCase() + '"', {
          charset,
          type: "charset.unsupported"
        }));
        return;
      }
      read(req, res, next, parse, debug2, {
        debug: debug2,
        encoding: charset,
        inflate,
        limit,
        verify
      });
    };
  };
  var extendedparser = function(options) {
    var parameterLimit = options.parameterLimit !== undefined ? options.parameterLimit : 1000;
    var parse = parser("qs");
    if (isNaN(parameterLimit) || parameterLimit < 1) {
      throw new TypeError("option parameterLimit must be a positive number");
    }
    if (isFinite(parameterLimit)) {
      parameterLimit = parameterLimit | 0;
    }
    return function queryparse(body) {
      var paramCount = parameterCount(body, parameterLimit);
      if (paramCount === undefined) {
        debug2("too many parameters");
        throw createError(413, "too many parameters", {
          type: "parameters.too.many"
        });
      }
      var arrayLimit = Math.max(100, paramCount);
      debug2("parse extended urlencoding");
      return parse(body, {
        allowPrototypes: true,
        arrayLimit,
        depth: Infinity,
        parameterLimit
      });
    };
  };
  var getCharset = function(req) {
    try {
      return (contentType.parse(req).parameters.charset || "").toLowerCase();
    } catch (e) {
      return;
    }
  };
  var parameterCount = function(body, limit) {
    var count = 0;
    var index = 0;
    while ((index = body.indexOf("&", index)) !== -1) {
      count++;
      index++;
      if (count === limit) {
        return;
      }
    }
    return count;
  };
  var parser = function(name) {
    var mod = parsers[name];
    if (mod !== undefined) {
      return mod.parse;
    }
    switch (name) {
      case "qs":
        mod = require_lib2();
        break;
      case "querystring":
        mod = import.meta.require("querystring");
        break;
    }
    parsers[name] = mod;
    return mod.parse;
  };
  var simpleparser = function(options) {
    var parameterLimit = options.parameterLimit !== undefined ? options.parameterLimit : 1000;
    var parse = parser("querystring");
    if (isNaN(parameterLimit) || parameterLimit < 1) {
      throw new TypeError("option parameterLimit must be a positive number");
    }
    if (isFinite(parameterLimit)) {
      parameterLimit = parameterLimit | 0;
    }
    return function queryparse(body) {
      var paramCount = parameterCount(body, parameterLimit);
      if (paramCount === undefined) {
        debug2("too many parameters");
        throw createError(413, "too many parameters", {
          type: "parameters.too.many"
        });
      }
      debug2("parse urlencoding");
      return parse(body, undefined, undefined, { maxKeys: parameterLimit });
    };
  };
  var typeChecker = function(type) {
    return function checkType(req) {
      return Boolean(typeis(req, type));
    };
  };
  /*!
   * body-parser
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var bytes = require_bytes();
  var contentType = require_content_type();
  var createError = require_http_errors();
  var debug2 = require_src()("body-parser:urlencoded");
  var deprecate = require_depd()("body-parser");
  var read = require_read();
  var typeis = require_type_is();
  module.exports = urlencoded;
  var parsers = Object.create(null);
});

// node_modules/body-parser/index.js
var require_body_parser = __commonJS((exports, module) => {
  var bodyParser = function(options) {
    var opts = Object.create(options || null, {
      type: {
        configurable: true,
        enumerable: true,
        value: undefined,
        writable: true
      }
    });
    var _urlencoded = exports.urlencoded(opts);
    var _json = exports.json(opts);
    return function bodyParser(req, res, next) {
      _json(req, res, function(err) {
        if (err)
          return next(err);
        _urlencoded(req, res, next);
      });
    };
  };
  var createParserGetter = function(name) {
    return function get() {
      return loadParser(name);
    };
  };
  var loadParser = function(parserName) {
    var parser = parsers[parserName];
    if (parser !== undefined) {
      return parser;
    }
    switch (parserName) {
      case "json":
        parser = require_json();
        break;
      case "raw":
        parser = require_raw();
        break;
      case "text":
        parser = require_text();
        break;
      case "urlencoded":
        parser = require_urlencoded();
        break;
    }
    return parsers[parserName] = parser;
  };
  /*!
   * body-parser
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var deprecate = require_depd()("body-parser");
  var parsers = Object.create(null);
  exports = module.exports = deprecate.function(bodyParser, "bodyParser: use individual json/urlencoded middlewares");
  Object.defineProperty(exports, "json", {
    configurable: true,
    enumerable: true,
    get: createParserGetter("json")
  });
  Object.defineProperty(exports, "raw", {
    configurable: true,
    enumerable: true,
    get: createParserGetter("raw")
  });
  Object.defineProperty(exports, "text", {
    configurable: true,
    enumerable: true,
    get: createParserGetter("text")
  });
  Object.defineProperty(exports, "urlencoded", {
    configurable: true,
    enumerable: true,
    get: createParserGetter("urlencoded")
  });
});

// node_modules/merge-descriptors/index.js
var require_merge_descriptors = __commonJS((exports, module) => {
  var merge = function(dest, src, redefine) {
    if (!dest) {
      throw new TypeError("argument dest is required");
    }
    if (!src) {
      throw new TypeError("argument src is required");
    }
    if (redefine === undefined) {
      redefine = true;
    }
    Object.getOwnPropertyNames(src).forEach(function forEachOwnPropertyName(name) {
      if (!redefine && hasOwnProperty.call(dest, name)) {
        return;
      }
      var descriptor = Object.getOwnPropertyDescriptor(src, name);
      Object.defineProperty(dest, name, descriptor);
    });
    return dest;
  };
  /*!
   * merge-descriptors
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = merge;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
});

// node_modules/finalhandler/node_modules/debug/node_modules/ms/index.js
var require_ms2 = __commonJS((exports, module) => {
  var parse = function(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch (type) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return n * y;
      case "days":
      case "day":
      case "d":
        return n * d;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return n * h;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return n * m;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return n * s;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return n;
      default:
        return;
    }
  };
  var fmtShort = function(ms) {
    if (ms >= d) {
      return Math.round(ms / d) + "d";
    }
    if (ms >= h) {
      return Math.round(ms / h) + "h";
    }
    if (ms >= m) {
      return Math.round(ms / m) + "m";
    }
    if (ms >= s) {
      return Math.round(ms / s) + "s";
    }
    return ms + "ms";
  };
  var fmtLong = function(ms) {
    return plural(ms, d, "day") || plural(ms, h, "hour") || plural(ms, m, "minute") || plural(ms, s, "second") || ms + " ms";
  };
  var plural = function(ms, n, name) {
    if (ms < n) {
      return;
    }
    if (ms < n * 1.5) {
      return Math.floor(ms / n) + " " + name;
    }
    return Math.ceil(ms / n) + " " + name + "s";
  };
  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var y = d * 365.25;
  module.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
      return parse(val);
    } else if (type === "number" && isNaN(val) === false) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
  };
});

// node_modules/finalhandler/node_modules/debug/src/debug.js
var require_debug2 = __commonJS((exports, module) => {
  var selectColor = function(namespace) {
    var hash = 0, i;
    for (i in namespace) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0;
    }
    return exports.colors[Math.abs(hash) % exports.colors.length];
  };
  var createDebug = function(namespace) {
    function debug2() {
      if (!debug2.enabled)
        return;
      var self2 = debug2;
      var curr = +new Date;
      var ms = curr - (prevTime || curr);
      self2.diff = ms;
      self2.prev = prevTime;
      self2.curr = curr;
      prevTime = curr;
      var args = new Array(arguments.length);
      for (var i = 0;i < args.length; i++) {
        args[i] = arguments[i];
      }
      args[0] = exports.coerce(args[0]);
      if (typeof args[0] !== "string") {
        args.unshift("%O");
      }
      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
        if (match === "%%")
          return match;
        index++;
        var formatter = exports.formatters[format];
        if (typeof formatter === "function") {
          var val = args[index];
          match = formatter.call(self2, val);
          args.splice(index, 1);
          index--;
        }
        return match;
      });
      exports.formatArgs.call(self2, args);
      var logFn = debug2.log || exports.log || console.log.bind(console);
      logFn.apply(self2, args);
    }
    debug2.namespace = namespace;
    debug2.enabled = exports.enabled(namespace);
    debug2.useColors = exports.useColors();
    debug2.color = selectColor(namespace);
    if (typeof exports.init === "function") {
      exports.init(debug2);
    }
    return debug2;
  };
  var enable = function(namespaces) {
    exports.save(namespaces);
    exports.names = [];
    exports.skips = [];
    var split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
    var len = split.length;
    for (var i = 0;i < len; i++) {
      if (!split[i])
        continue;
      namespaces = split[i].replace(/\*/g, ".*?");
      if (namespaces[0] === "-") {
        exports.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
      } else {
        exports.names.push(new RegExp("^" + namespaces + "$"));
      }
    }
  };
  var disable = function() {
    exports.enable("");
  };
  var enabled = function(name) {
    var i, len;
    for (i = 0, len = exports.skips.length;i < len; i++) {
      if (exports.skips[i].test(name)) {
        return false;
      }
    }
    for (i = 0, len = exports.names.length;i < len; i++) {
      if (exports.names[i].test(name)) {
        return true;
      }
    }
    return false;
  };
  var coerce = function(val) {
    if (val instanceof Error)
      return val.stack || val.message;
    return val;
  };
  exports = module.exports = createDebug.debug = createDebug["default"] = createDebug;
  exports.coerce = coerce;
  exports.disable = disable;
  exports.enable = enable;
  exports.enabled = enabled;
  exports.humanize = require_ms2();
  exports.names = [];
  exports.skips = [];
  exports.formatters = {};
  var prevTime;
});

// node_modules/finalhandler/node_modules/debug/src/browser.js
var require_browser2 = __commonJS((exports, module) => {
  var useColors = function() {
    if (typeof window !== "undefined" && window.process && window.process.type === "renderer") {
      return true;
    }
    return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  };
  var formatArgs = function(args) {
    var useColors2 = this.useColors;
    args[0] = (useColors2 ? "%c" : "") + this.namespace + (useColors2 ? " %c" : " ") + args[0] + (useColors2 ? "%c " : " ") + "+" + exports.humanize(this.diff);
    if (!useColors2)
      return;
    var c = "color: " + this.color;
    args.splice(1, 0, c, "color: inherit");
    var index = 0;
    var lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, function(match) {
      if (match === "%%")
        return;
      index++;
      if (match === "%c") {
        lastC = index;
      }
    });
    args.splice(lastC, 0, c);
  };
  var log = function() {
    return typeof console === "object" && console.log && Function.prototype.apply.call(console.log, console, arguments);
  };
  var save = function(namespaces) {
    try {
      if (namespaces == null) {
        exports.storage.removeItem("debug");
      } else {
        exports.storage.debug = namespaces;
      }
    } catch (e) {
    }
  };
  var load = function() {
    var r;
    try {
      r = exports.storage.debug;
    } catch (e) {
    }
    if (!r && typeof process !== "undefined" && "env" in process) {
      r = process.env.DEBUG;
    }
    return r;
  };
  var localstorage = function() {
    try {
      return window.localStorage;
    } catch (e) {
    }
  };
  exports = module.exports = require_debug2();
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = typeof chrome != "undefined" && typeof chrome.storage != "undefined" ? chrome.storage.local : localstorage();
  exports.colors = [
    "lightseagreen",
    "forestgreen",
    "goldenrod",
    "dodgerblue",
    "darkorchid",
    "crimson"
  ];
  exports.formatters.j = function(v) {
    try {
      return JSON.stringify(v);
    } catch (err) {
      return "[UnexpectedJSONParseError]: " + err.message;
    }
  };
  exports.enable(load());
});

// node_modules/finalhandler/node_modules/debug/src/node.js
var require_node2 = __commonJS((exports, module) => {
  var useColors = function() {
    return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(fd);
  };
  var formatArgs = function(args) {
    var name = this.namespace;
    var useColors2 = this.useColors;
    if (useColors2) {
      var c = this.color;
      var prefix = "  \x1B[3" + c + ";1m" + name + " " + "\x1B[0m";
      args[0] = prefix + args[0].split("\n").join("\n" + prefix);
      args.push("\x1B[3" + c + "m+" + exports.humanize(this.diff) + "\x1B[0m");
    } else {
      args[0] = new Date().toUTCString() + " " + name + " " + args[0];
    }
  };
  var log = function() {
    return stream.write(util.format.apply(util, arguments) + "\n");
  };
  var save = function(namespaces) {
    if (namespaces == null) {
      delete process.env.DEBUG;
    } else {
      process.env.DEBUG = namespaces;
    }
  };
  var load = function() {
    return process.env.DEBUG;
  };
  var createWritableStdioStream = function(fd2) {
    var stream2;
    var tty_wrap = process.binding("tty_wrap");
    switch (tty_wrap.guessHandleType(fd2)) {
      case "TTY":
        stream2 = new tty.WriteStream(fd2);
        stream2._type = "tty";
        if (stream2._handle && stream2._handle.unref) {
          stream2._handle.unref();
        }
        break;
      case "FILE":
        var fs = import.meta.require("fs");
        stream2 = new fs.SyncWriteStream(fd2, { autoClose: false });
        stream2._type = "fs";
        break;
      case "PIPE":
      case "TCP":
        var net = import.meta.require("net");
        stream2 = new net.Socket({
          fd: fd2,
          readable: false,
          writable: true
        });
        stream2.readable = false;
        stream2.read = null;
        stream2._type = "pipe";
        if (stream2._handle && stream2._handle.unref) {
          stream2._handle.unref();
        }
        break;
      default:
        throw new Error("Implement me. Unknown stream file type!");
    }
    stream2.fd = fd2;
    stream2._isStdio = true;
    return stream2;
  };
  var init = function(debug2) {
    debug2.inspectOpts = {};
    var keys = Object.keys(exports.inspectOpts);
    for (var i = 0;i < keys.length; i++) {
      debug2.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
  };
  var tty = import.meta.require("tty");
  var util = import.meta.require("util");
  exports = module.exports = require_debug2();
  exports.init = init;
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.colors = [6, 2, 3, 4, 5, 1];
  exports.inspectOpts = Object.keys(process.env).filter(function(key) {
    return /^debug_/i.test(key);
  }).reduce(function(obj, key) {
    var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function(_, k) {
      return k.toUpperCase();
    });
    var val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val))
      val = true;
    else if (/^(no|off|false|disabled)$/i.test(val))
      val = false;
    else if (val === "null")
      val = null;
    else
      val = Number(val);
    obj[prop] = val;
    return obj;
  }, {});
  var fd = parseInt(process.env.DEBUG_FD, 10) || 2;
  if (fd !== 1 && fd !== 2) {
    util.deprecate(function() {
    }, "except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)")();
  }
  var stream = fd === 1 ? process.stdout : fd === 2 ? process.stderr : createWritableStdioStream(fd);
  exports.formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts).split("\n").map(function(str) {
      return str.trim();
    }).join(" ");
  };
  exports.formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts);
  };
  exports.enable(load());
});

// node_modules/finalhandler/node_modules/debug/src/index.js
var require_src2 = __commonJS((exports, module) => {
  if (typeof process !== "undefined" && process.type === "renderer") {
    module.exports = require_browser2();
  } else {
    module.exports = require_node2();
  }
});

// node_modules/encodeurl/index.js
var require_encodeurl = __commonJS((exports, module) => {
  var encodeUrl = function(url) {
    return String(url).replace(UNMATCHED_SURROGATE_PAIR_REGEXP, UNMATCHED_SURROGATE_PAIR_REPLACE).replace(ENCODE_CHARS_REGEXP, encodeURI);
  };
  /*!
   * encodeurl
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = encodeUrl;
  var ENCODE_CHARS_REGEXP = /(?:[^\x21\x25\x26-\x3B\x3D\x3F-\x5B\x5D\x5F\x61-\x7A\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g;
  var UNMATCHED_SURROGATE_PAIR_REGEXP = /(^|[^\uD800-\uDBFF])[\uDC00-\uDFFF]|[\uD800-\uDBFF]([^\uDC00-\uDFFF]|$)/g;
  var UNMATCHED_SURROGATE_PAIR_REPLACE = "$1\uFFFD$2";
});

// node_modules/escape-html/index.js
var require_escape_html = __commonJS((exports, module) => {
  var escapeHtml = function(string) {
    var str = "" + string;
    var match = matchHtmlRegExp.exec(str);
    if (!match) {
      return str;
    }
    var escape2;
    var html = "";
    var index = 0;
    var lastIndex = 0;
    for (index = match.index;index < str.length; index++) {
      switch (str.charCodeAt(index)) {
        case 34:
          escape2 = "&quot;";
          break;
        case 38:
          escape2 = "&amp;";
          break;
        case 39:
          escape2 = "&#39;";
          break;
        case 60:
          escape2 = "&lt;";
          break;
        case 62:
          escape2 = "&gt;";
          break;
        default:
          continue;
      }
      if (lastIndex !== index) {
        html += str.substring(lastIndex, index);
      }
      lastIndex = index + 1;
      html += escape2;
    }
    return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
  };
  /*!
   * escape-html
   * Copyright(c) 2012-2013 TJ Holowaychuk
   * Copyright(c) 2015 Andreas Lubbe
   * Copyright(c) 2015 Tiancheng "Timothy" Gu
   * MIT Licensed
   */
  var matchHtmlRegExp = /["'&<>]/;
  module.exports = escapeHtml;
});

// node_modules/parseurl/index.js
var require_parseurl = __commonJS((exports, module) => {
  var parseurl = function(req) {
    var url2 = req.url;
    if (url2 === undefined) {
      return;
    }
    var parsed = req._parsedUrl;
    if (fresh(url2, parsed)) {
      return parsed;
    }
    parsed = fastparse(url2);
    parsed._raw = url2;
    return req._parsedUrl = parsed;
  };
  var originalurl = function(req) {
    var url2 = req.originalUrl;
    if (typeof url2 !== "string") {
      return parseurl(req);
    }
    var parsed = req._parsedOriginalUrl;
    if (fresh(url2, parsed)) {
      return parsed;
    }
    parsed = fastparse(url2);
    parsed._raw = url2;
    return req._parsedOriginalUrl = parsed;
  };
  var fastparse = function(str) {
    if (typeof str !== "string" || str.charCodeAt(0) !== 47) {
      return parse(str);
    }
    var pathname = str;
    var query = null;
    var search = null;
    for (var i = 1;i < str.length; i++) {
      switch (str.charCodeAt(i)) {
        case 63:
          if (search === null) {
            pathname = str.substring(0, i);
            query = str.substring(i + 1);
            search = str.substring(i);
          }
          break;
        case 9:
        case 10:
        case 12:
        case 13:
        case 32:
        case 35:
        case 160:
        case 65279:
          return parse(str);
      }
    }
    var url2 = Url !== undefined ? new Url : {};
    url2.path = str;
    url2.href = str;
    url2.pathname = pathname;
    if (search !== null) {
      url2.query = query;
      url2.search = search;
    }
    return url2;
  };
  var fresh = function(url2, parsedUrl) {
    return typeof parsedUrl === "object" && parsedUrl !== null && (Url === undefined || parsedUrl instanceof Url) && parsedUrl._raw === url2;
  };
  /*!
   * parseurl
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2014-2017 Douglas Christopher Wilson
   * MIT Licensed
   */
  var url = import.meta.require("url");
  var parse = url.parse;
  var Url = url.Url;
  module.exports = parseurl;
  module.exports.original = originalurl;
});

// node_modules/finalhandler/index.js
var require_finalhandler = __commonJS((exports, module) => {
  var createHtmlDocument = function(message) {
    var body = escapeHtml(message).replace(NEWLINE_REGEXP, "<br>").replace(DOUBLE_SPACE_REGEXP, " &nbsp;");
    return '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>' + body + "</pre>\n</body>\n</html>\n";
  };
  var finalhandler = function(req, res, options) {
    var opts = options || {};
    var env = opts.env || "development";
    var onerror = opts.onerror;
    return function(err) {
      var headers;
      var msg;
      var status;
      if (!err && headersSent(res)) {
        debug2("cannot 404 after headers sent");
        return;
      }
      if (err) {
        status = getErrorStatusCode(err);
        if (status === undefined) {
          status = getResponseStatusCode(res);
        } else {
          headers = getErrorHeaders(err);
        }
        msg = getErrorMessage(err, status, env);
      } else {
        status = 404;
        msg = "Cannot " + req.method + " " + encodeUrl(getResourceName(req));
      }
      debug2("default %s", status);
      if (err && onerror) {
        defer(onerror, err, req, res);
      }
      if (headersSent(res)) {
        debug2("cannot %d after headers sent", status);
        req.socket.destroy();
        return;
      }
      send(req, res, status, headers, msg);
    };
  };
  var getErrorHeaders = function(err) {
    if (!err.headers || typeof err.headers !== "object") {
      return;
    }
    var headers = Object.create(null);
    var keys = Object.keys(err.headers);
    for (var i = 0;i < keys.length; i++) {
      var key = keys[i];
      headers[key] = err.headers[key];
    }
    return headers;
  };
  var getErrorMessage = function(err, status, env) {
    var msg;
    if (env !== "production") {
      msg = err.stack;
      if (!msg && typeof err.toString === "function") {
        msg = err.toString();
      }
    }
    return msg || statuses.message[status];
  };
  var getErrorStatusCode = function(err) {
    if (typeof err.status === "number" && err.status >= 400 && err.status < 600) {
      return err.status;
    }
    if (typeof err.statusCode === "number" && err.statusCode >= 400 && err.statusCode < 600) {
      return err.statusCode;
    }
    return;
  };
  var getResourceName = function(req) {
    try {
      return parseUrl.original(req).pathname;
    } catch (e) {
      return "resource";
    }
  };
  var getResponseStatusCode = function(res) {
    var status = res.statusCode;
    if (typeof status !== "number" || status < 400 || status > 599) {
      status = 500;
    }
    return status;
  };
  var headersSent = function(res) {
    return typeof res.headersSent !== "boolean" ? Boolean(res._header) : res.headersSent;
  };
  var send = function(req, res, status, headers, message) {
    function write() {
      var body = createHtmlDocument(message);
      res.statusCode = status;
      res.statusMessage = statuses.message[status];
      res.removeHeader("Content-Encoding");
      res.removeHeader("Content-Language");
      res.removeHeader("Content-Range");
      setHeaders(res, headers);
      res.setHeader("Content-Security-Policy", "default-src 'none'");
      res.setHeader("X-Content-Type-Options", "nosniff");
      res.setHeader("Content-Type", "text/html; charset=utf-8");
      res.setHeader("Content-Length", Buffer.byteLength(body, "utf8"));
      if (req.method === "HEAD") {
        res.end();
        return;
      }
      res.end(body, "utf8");
    }
    if (isFinished(req)) {
      write();
      return;
    }
    unpipe(req);
    onFinished(req, write);
    req.resume();
  };
  var setHeaders = function(res, headers) {
    if (!headers) {
      return;
    }
    var keys = Object.keys(headers);
    for (var i = 0;i < keys.length; i++) {
      var key = keys[i];
      res.setHeader(key, headers[key]);
    }
  };
  /*!
   * finalhandler
   * Copyright(c) 2014-2022 Douglas Christopher Wilson
   * MIT Licensed
   */
  var debug2 = require_src2()("finalhandler");
  var encodeUrl = require_encodeurl();
  var escapeHtml = require_escape_html();
  var onFinished = require_on_finished();
  var parseUrl = require_parseurl();
  var statuses = require_statuses();
  var unpipe = require_unpipe();
  var DOUBLE_SPACE_REGEXP = /\x20{2}/g;
  var NEWLINE_REGEXP = /\n/g;
  var defer = typeof setImmediate === "function" ? setImmediate : function(fn) {
    process.nextTick(fn.bind.apply(fn, arguments));
  };
  var isFinished = onFinished.isFinished;
  module.exports = finalhandler;
});

// node_modules/express/node_modules/debug/node_modules/ms/index.js
var require_ms3 = __commonJS((exports, module) => {
  var parse = function(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch (type) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return n * y;
      case "days":
      case "day":
      case "d":
        return n * d;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return n * h;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return n * m;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return n * s;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return n;
      default:
        return;
    }
  };
  var fmtShort = function(ms) {
    if (ms >= d) {
      return Math.round(ms / d) + "d";
    }
    if (ms >= h) {
      return Math.round(ms / h) + "h";
    }
    if (ms >= m) {
      return Math.round(ms / m) + "m";
    }
    if (ms >= s) {
      return Math.round(ms / s) + "s";
    }
    return ms + "ms";
  };
  var fmtLong = function(ms) {
    return plural(ms, d, "day") || plural(ms, h, "hour") || plural(ms, m, "minute") || plural(ms, s, "second") || ms + " ms";
  };
  var plural = function(ms, n, name) {
    if (ms < n) {
      return;
    }
    if (ms < n * 1.5) {
      return Math.floor(ms / n) + " " + name;
    }
    return Math.ceil(ms / n) + " " + name + "s";
  };
  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var y = d * 365.25;
  module.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
      return parse(val);
    } else if (type === "number" && isNaN(val) === false) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
  };
});

// node_modules/express/node_modules/debug/src/debug.js
var require_debug3 = __commonJS((exports, module) => {
  var selectColor = function(namespace) {
    var hash = 0, i;
    for (i in namespace) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0;
    }
    return exports.colors[Math.abs(hash) % exports.colors.length];
  };
  var createDebug = function(namespace) {
    function debug2() {
      if (!debug2.enabled)
        return;
      var self2 = debug2;
      var curr = +new Date;
      var ms = curr - (prevTime || curr);
      self2.diff = ms;
      self2.prev = prevTime;
      self2.curr = curr;
      prevTime = curr;
      var args = new Array(arguments.length);
      for (var i = 0;i < args.length; i++) {
        args[i] = arguments[i];
      }
      args[0] = exports.coerce(args[0]);
      if (typeof args[0] !== "string") {
        args.unshift("%O");
      }
      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
        if (match === "%%")
          return match;
        index++;
        var formatter = exports.formatters[format];
        if (typeof formatter === "function") {
          var val = args[index];
          match = formatter.call(self2, val);
          args.splice(index, 1);
          index--;
        }
        return match;
      });
      exports.formatArgs.call(self2, args);
      var logFn = debug2.log || exports.log || console.log.bind(console);
      logFn.apply(self2, args);
    }
    debug2.namespace = namespace;
    debug2.enabled = exports.enabled(namespace);
    debug2.useColors = exports.useColors();
    debug2.color = selectColor(namespace);
    if (typeof exports.init === "function") {
      exports.init(debug2);
    }
    return debug2;
  };
  var enable = function(namespaces) {
    exports.save(namespaces);
    exports.names = [];
    exports.skips = [];
    var split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
    var len = split.length;
    for (var i = 0;i < len; i++) {
      if (!split[i])
        continue;
      namespaces = split[i].replace(/\*/g, ".*?");
      if (namespaces[0] === "-") {
        exports.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
      } else {
        exports.names.push(new RegExp("^" + namespaces + "$"));
      }
    }
  };
  var disable = function() {
    exports.enable("");
  };
  var enabled = function(name) {
    var i, len;
    for (i = 0, len = exports.skips.length;i < len; i++) {
      if (exports.skips[i].test(name)) {
        return false;
      }
    }
    for (i = 0, len = exports.names.length;i < len; i++) {
      if (exports.names[i].test(name)) {
        return true;
      }
    }
    return false;
  };
  var coerce = function(val) {
    if (val instanceof Error)
      return val.stack || val.message;
    return val;
  };
  exports = module.exports = createDebug.debug = createDebug["default"] = createDebug;
  exports.coerce = coerce;
  exports.disable = disable;
  exports.enable = enable;
  exports.enabled = enabled;
  exports.humanize = require_ms3();
  exports.names = [];
  exports.skips = [];
  exports.formatters = {};
  var prevTime;
});

// node_modules/express/node_modules/debug/src/browser.js
var require_browser3 = __commonJS((exports, module) => {
  var useColors = function() {
    if (typeof window !== "undefined" && window.process && window.process.type === "renderer") {
      return true;
    }
    return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  };
  var formatArgs = function(args) {
    var useColors2 = this.useColors;
    args[0] = (useColors2 ? "%c" : "") + this.namespace + (useColors2 ? " %c" : " ") + args[0] + (useColors2 ? "%c " : " ") + "+" + exports.humanize(this.diff);
    if (!useColors2)
      return;
    var c = "color: " + this.color;
    args.splice(1, 0, c, "color: inherit");
    var index = 0;
    var lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, function(match) {
      if (match === "%%")
        return;
      index++;
      if (match === "%c") {
        lastC = index;
      }
    });
    args.splice(lastC, 0, c);
  };
  var log = function() {
    return typeof console === "object" && console.log && Function.prototype.apply.call(console.log, console, arguments);
  };
  var save = function(namespaces) {
    try {
      if (namespaces == null) {
        exports.storage.removeItem("debug");
      } else {
        exports.storage.debug = namespaces;
      }
    } catch (e) {
    }
  };
  var load = function() {
    var r;
    try {
      r = exports.storage.debug;
    } catch (e) {
    }
    if (!r && typeof process !== "undefined" && "env" in process) {
      r = process.env.DEBUG;
    }
    return r;
  };
  var localstorage = function() {
    try {
      return window.localStorage;
    } catch (e) {
    }
  };
  exports = module.exports = require_debug3();
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = typeof chrome != "undefined" && typeof chrome.storage != "undefined" ? chrome.storage.local : localstorage();
  exports.colors = [
    "lightseagreen",
    "forestgreen",
    "goldenrod",
    "dodgerblue",
    "darkorchid",
    "crimson"
  ];
  exports.formatters.j = function(v) {
    try {
      return JSON.stringify(v);
    } catch (err) {
      return "[UnexpectedJSONParseError]: " + err.message;
    }
  };
  exports.enable(load());
});

// node_modules/express/node_modules/debug/src/node.js
var require_node3 = __commonJS((exports, module) => {
  var useColors = function() {
    return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(fd);
  };
  var formatArgs = function(args) {
    var name = this.namespace;
    var useColors2 = this.useColors;
    if (useColors2) {
      var c = this.color;
      var prefix = "  \x1B[3" + c + ";1m" + name + " " + "\x1B[0m";
      args[0] = prefix + args[0].split("\n").join("\n" + prefix);
      args.push("\x1B[3" + c + "m+" + exports.humanize(this.diff) + "\x1B[0m");
    } else {
      args[0] = new Date().toUTCString() + " " + name + " " + args[0];
    }
  };
  var log = function() {
    return stream.write(util.format.apply(util, arguments) + "\n");
  };
  var save = function(namespaces) {
    if (namespaces == null) {
      delete process.env.DEBUG;
    } else {
      process.env.DEBUG = namespaces;
    }
  };
  var load = function() {
    return process.env.DEBUG;
  };
  var createWritableStdioStream = function(fd2) {
    var stream2;
    var tty_wrap = process.binding("tty_wrap");
    switch (tty_wrap.guessHandleType(fd2)) {
      case "TTY":
        stream2 = new tty.WriteStream(fd2);
        stream2._type = "tty";
        if (stream2._handle && stream2._handle.unref) {
          stream2._handle.unref();
        }
        break;
      case "FILE":
        var fs = import.meta.require("fs");
        stream2 = new fs.SyncWriteStream(fd2, { autoClose: false });
        stream2._type = "fs";
        break;
      case "PIPE":
      case "TCP":
        var net = import.meta.require("net");
        stream2 = new net.Socket({
          fd: fd2,
          readable: false,
          writable: true
        });
        stream2.readable = false;
        stream2.read = null;
        stream2._type = "pipe";
        if (stream2._handle && stream2._handle.unref) {
          stream2._handle.unref();
        }
        break;
      default:
        throw new Error("Implement me. Unknown stream file type!");
    }
    stream2.fd = fd2;
    stream2._isStdio = true;
    return stream2;
  };
  var init = function(debug2) {
    debug2.inspectOpts = {};
    var keys = Object.keys(exports.inspectOpts);
    for (var i = 0;i < keys.length; i++) {
      debug2.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
  };
  var tty = import.meta.require("tty");
  var util = import.meta.require("util");
  exports = module.exports = require_debug3();
  exports.init = init;
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.colors = [6, 2, 3, 4, 5, 1];
  exports.inspectOpts = Object.keys(process.env).filter(function(key) {
    return /^debug_/i.test(key);
  }).reduce(function(obj, key) {
    var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function(_, k) {
      return k.toUpperCase();
    });
    var val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val))
      val = true;
    else if (/^(no|off|false|disabled)$/i.test(val))
      val = false;
    else if (val === "null")
      val = null;
    else
      val = Number(val);
    obj[prop] = val;
    return obj;
  }, {});
  var fd = parseInt(process.env.DEBUG_FD, 10) || 2;
  if (fd !== 1 && fd !== 2) {
    util.deprecate(function() {
    }, "except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)")();
  }
  var stream = fd === 1 ? process.stdout : fd === 2 ? process.stderr : createWritableStdioStream(fd);
  exports.formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts).split("\n").map(function(str) {
      return str.trim();
    }).join(" ");
  };
  exports.formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts);
  };
  exports.enable(load());
});

// node_modules/express/node_modules/debug/src/index.js
var require_src3 = __commonJS((exports, module) => {
  if (typeof process !== "undefined" && process.type === "renderer") {
    module.exports = require_browser3();
  } else {
    module.exports = require_node3();
  }
});

// node_modules/array-flatten/array-flatten.js
var require_array_flatten = __commonJS((exports, module) => {
  var flattenWithDepth = function(array, result, depth) {
    for (var i = 0;i < array.length; i++) {
      var value = array[i];
      if (depth > 0 && Array.isArray(value)) {
        flattenWithDepth(value, result, depth - 1);
      } else {
        result.push(value);
      }
    }
    return result;
  };
  var flattenForever = function(array, result) {
    for (var i = 0;i < array.length; i++) {
      var value = array[i];
      if (Array.isArray(value)) {
        flattenForever(value, result);
      } else {
        result.push(value);
      }
    }
    return result;
  };
  var arrayFlatten = function(array, depth) {
    if (depth == null) {
      return flattenForever(array, []);
    }
    return flattenWithDepth(array, [], depth);
  };
  module.exports = arrayFlatten;
});

// node_modules/path-to-regexp/index.js
var require_path_to_regexp = __commonJS((exports, module) => {
  var pathtoRegexp = function(path, keys, options) {
    options = options || {};
    keys = keys || [];
    var strict = options.strict;
    var end = options.end !== false;
    var flags = options.sensitive ? "" : "i";
    var extraOffset = 0;
    var keysOffset = keys.length;
    var i = 0;
    var name = 0;
    var m;
    if (path instanceof RegExp) {
      while (m = MATCHING_GROUP_REGEXP.exec(path.source)) {
        keys.push({
          name: name++,
          optional: false,
          offset: m.index
        });
      }
      return path;
    }
    if (Array.isArray(path)) {
      path = path.map(function(value) {
        return pathtoRegexp(value, keys, options).source;
      });
      return new RegExp("(?:" + path.join("|") + ")", flags);
    }
    path = ("^" + path + (strict ? "" : path[path.length - 1] === "/" ? "?" : "/?")).replace(/\/\(/g, "/(?:").replace(/([\/\.])/g, "\\$1").replace(/(\\\/)?(\\\.)?:(\w+)(\(.*?\))?(\*)?(\?)?/g, function(match, slash, format, key, capture, star, optional, offset) {
      slash = slash || "";
      format = format || "";
      capture = capture || "([^\\/" + format + "]+?)";
      optional = optional || "";
      keys.push({
        name: key,
        optional: !!optional,
        offset: offset + extraOffset
      });
      var result = "" + (optional ? "" : slash) + "(?:" + format + (optional ? slash : "") + capture + (star ? "((?:[\\/" + format + "].+?)?)" : "") + ")" + optional;
      extraOffset += result.length - match.length;
      return result;
    }).replace(/\*/g, function(star, index2) {
      var len = keys.length;
      while (len-- > keysOffset && keys[len].offset > index2) {
        keys[len].offset += 3;
      }
      return "(.*)";
    });
    while (m = MATCHING_GROUP_REGEXP.exec(path)) {
      var escapeCount = 0;
      var index = m.index;
      while (path.charAt(--index) === "\\") {
        escapeCount++;
      }
      if (escapeCount % 2 === 1) {
        continue;
      }
      if (keysOffset + i === keys.length || keys[keysOffset + i].offset > m.index) {
        keys.splice(keysOffset + i, 0, {
          name: name++,
          optional: false,
          offset: m.index
        });
      }
      i++;
    }
    path += end ? "$" : path[path.length - 1] === "/" ? "" : "(?=\\/|$)";
    return new RegExp(path, flags);
  };
  module.exports = pathtoRegexp;
  var MATCHING_GROUP_REGEXP = /\((?!\?)/g;
});

// node_modules/express/lib/router/layer.js
var require_layer = __commonJS((exports, module) => {
  var Layer = function(path, options, fn) {
    if (!(this instanceof Layer)) {
      return new Layer(path, options, fn);
    }
    debug2("new %o", path);
    var opts = options || {};
    this.handle = fn;
    this.name = fn.name || "<anonymous>";
    this.params = undefined;
    this.path = undefined;
    this.regexp = pathRegexp(path, this.keys = [], opts);
    this.regexp.fast_star = path === "*";
    this.regexp.fast_slash = path === "/" && opts.end === false;
  };
  var decode_param = function(val) {
    if (typeof val !== "string" || val.length === 0) {
      return val;
    }
    try {
      return decodeURIComponent(val);
    } catch (err) {
      if (err instanceof URIError) {
        err.message = "Failed to decode param \'" + val + "\'";
        err.status = err.statusCode = 400;
      }
      throw err;
    }
  };
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var pathRegexp = require_path_to_regexp();
  var debug2 = require_src3()("express:router:layer");
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  module.exports = Layer;
  Layer.prototype.handle_error = function handle_error(error, req, res, next) {
    var fn = this.handle;
    if (fn.length !== 4) {
      return next(error);
    }
    try {
      fn(error, req, res, next);
    } catch (err) {
      next(err);
    }
  };
  Layer.prototype.handle_request = function handle(req, res, next) {
    var fn = this.handle;
    if (fn.length > 3) {
      return next();
    }
    try {
      fn(req, res, next);
    } catch (err) {
      next(err);
    }
  };
  Layer.prototype.match = function match(path) {
    var match;
    if (path != null) {
      if (this.regexp.fast_slash) {
        this.params = {};
        this.path = "";
        return true;
      }
      if (this.regexp.fast_star) {
        this.params = { "0": decode_param(path) };
        this.path = path;
        return true;
      }
      match = this.regexp.exec(path);
    }
    if (!match) {
      this.params = undefined;
      this.path = undefined;
      return false;
    }
    this.params = {};
    this.path = match[0];
    var keys = this.keys;
    var params = this.params;
    for (var i = 1;i < match.length; i++) {
      var key = keys[i - 1];
      var prop = key.name;
      var val = decode_param(match[i]);
      if (val !== undefined || !hasOwnProperty.call(params, prop)) {
        params[prop] = val;
      }
    }
    return true;
  };
});

// node_modules/methods/index.js
var require_methods = __commonJS((exports, module) => {
  var getCurrentNodeMethods = function() {
    return http.METHODS && http.METHODS.map(function lowerCaseMethod(method) {
      return method.toLowerCase();
    });
  };
  var getBasicNodeMethods = function() {
    return [
      "get",
      "post",
      "put",
      "head",
      "delete",
      "options",
      "trace",
      "copy",
      "lock",
      "mkcol",
      "move",
      "purge",
      "propfind",
      "proppatch",
      "unlock",
      "report",
      "mkactivity",
      "checkout",
      "merge",
      "m-search",
      "notify",
      "subscribe",
      "unsubscribe",
      "patch",
      "search",
      "connect"
    ];
  };
  /*!
   * methods
   * Copyright(c) 2013-2014 TJ Holowaychuk
   * Copyright(c) 2015-2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  var http = import.meta.require("http");
  module.exports = getCurrentNodeMethods() || getBasicNodeMethods();
});

// node_modules/express/lib/router/route.js
var require_route = __commonJS((exports, module) => {
  var Route = function(path) {
    this.path = path;
    this.stack = [];
    debug2("new %o", path);
    this.methods = {};
  };
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var debug2 = require_src3()("express:router:route");
  var flatten = require_array_flatten();
  var Layer = require_layer();
  var methods = require_methods();
  var slice = Array.prototype.slice;
  var toString = Object.prototype.toString;
  module.exports = Route;
  Route.prototype._handles_method = function _handles_method(method) {
    if (this.methods._all) {
      return true;
    }
    var name = typeof method === "string" ? method.toLowerCase() : method;
    if (name === "head" && !this.methods["head"]) {
      name = "get";
    }
    return Boolean(this.methods[name]);
  };
  Route.prototype._options = function _options() {
    var methods2 = Object.keys(this.methods);
    if (this.methods.get && !this.methods.head) {
      methods2.push("head");
    }
    for (var i = 0;i < methods2.length; i++) {
      methods2[i] = methods2[i].toUpperCase();
    }
    return methods2;
  };
  Route.prototype.dispatch = function dispatch(req, res, done) {
    var idx = 0;
    var stack = this.stack;
    var sync = 0;
    if (stack.length === 0) {
      return done();
    }
    var method = typeof req.method === "string" ? req.method.toLowerCase() : req.method;
    if (method === "head" && !this.methods["head"]) {
      method = "get";
    }
    req.route = this;
    next();
    function next(err) {
      if (err && err === "route") {
        return done();
      }
      if (err && err === "router") {
        return done(err);
      }
      if (++sync > 100) {
        return setImmediate(next, err);
      }
      var layer = stack[idx++];
      if (!layer) {
        return done(err);
      }
      if (layer.method && layer.method !== method) {
        next(err);
      } else if (err) {
        layer.handle_error(err, req, res, next);
      } else {
        layer.handle_request(req, res, next);
      }
      sync = 0;
    }
  };
  Route.prototype.all = function all() {
    var handles = flatten(slice.call(arguments));
    for (var i = 0;i < handles.length; i++) {
      var handle = handles[i];
      if (typeof handle !== "function") {
        var type = toString.call(handle);
        var msg = "Route.all() requires a callback function but got a " + type;
        throw new TypeError(msg);
      }
      var layer = Layer("/", {}, handle);
      layer.method = undefined;
      this.methods._all = true;
      this.stack.push(layer);
    }
    return this;
  };
  methods.forEach(function(method) {
    Route.prototype[method] = function() {
      var handles = flatten(slice.call(arguments));
      for (var i = 0;i < handles.length; i++) {
        var handle = handles[i];
        if (typeof handle !== "function") {
          var type = toString.call(handle);
          var msg = "Route." + method + "() requires a callback function but got a " + type;
          throw new Error(msg);
        }
        debug2("%s %o", method, this.path);
        var layer = Layer("/", {}, handle);
        layer.method = method;
        this.methods[method] = true;
        this.stack.push(layer);
      }
      return this;
    };
  });
});

// node_modules/utils-merge/index.js
var require_utils_merge = __commonJS((exports, module) => {
  exports = module.exports = function(a, b) {
    if (a && b) {
      for (var key in b) {
        a[key] = b[key];
      }
    }
    return a;
  };
});

// node_modules/express/lib/router/index.js
var require_router = __commonJS((exports, module) => {
  var appendMethods = function(list, addition) {
    for (var i = 0;i < addition.length; i++) {
      var method = addition[i];
      if (list.indexOf(method) === -1) {
        list.push(method);
      }
    }
  };
  var getPathname = function(req) {
    try {
      return parseUrl(req).pathname;
    } catch (err) {
      return;
    }
  };
  var getProtohost = function(url) {
    if (typeof url !== "string" || url.length === 0 || url[0] === "/") {
      return;
    }
    var searchIndex = url.indexOf("?");
    var pathLength = searchIndex !== -1 ? searchIndex : url.length;
    var fqdnIndex = url.slice(0, pathLength).indexOf("://");
    return fqdnIndex !== -1 ? url.substring(0, url.indexOf("/", 3 + fqdnIndex)) : undefined;
  };
  var gettype = function(obj) {
    var type = typeof obj;
    if (type !== "object") {
      return type;
    }
    return toString.call(obj).replace(objectRegExp, "$1");
  };
  var matchLayer = function(layer, path) {
    try {
      return layer.match(path);
    } catch (err) {
      return err;
    }
  };
  var mergeParams = function(params, parent) {
    if (typeof parent !== "object" || !parent) {
      return params;
    }
    var obj = mixin({}, parent);
    if (!(0 in params) || !(0 in parent)) {
      return mixin(obj, params);
    }
    var i = 0;
    var o = 0;
    while (i in params) {
      i++;
    }
    while (o in parent) {
      o++;
    }
    for (i--;i >= 0; i--) {
      params[i + o] = params[i];
      if (i < o) {
        delete params[i];
      }
    }
    return mixin(obj, params);
  };
  var restore = function(fn, obj) {
    var props = new Array(arguments.length - 2);
    var vals = new Array(arguments.length - 2);
    for (var i = 0;i < props.length; i++) {
      props[i] = arguments[i + 2];
      vals[i] = obj[props[i]];
    }
    return function() {
      for (var i2 = 0;i2 < props.length; i2++) {
        obj[props[i2]] = vals[i2];
      }
      return fn.apply(this, arguments);
    };
  };
  var sendOptionsResponse = function(res, options, next) {
    try {
      var body = options.join(",");
      res.set("Allow", body);
      res.send(body);
    } catch (err) {
      next(err);
    }
  };
  var wrap = function(old, fn) {
    return function proxy() {
      var args = new Array(arguments.length + 1);
      args[0] = old;
      for (var i = 0, len = arguments.length;i < len; i++) {
        args[i + 1] = arguments[i];
      }
      fn.apply(this, args);
    };
  };
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var Route = require_route();
  var Layer = require_layer();
  var methods = require_methods();
  var mixin = require_utils_merge();
  var debug2 = require_src3()("express:router");
  var deprecate = require_depd()("express");
  var flatten = require_array_flatten();
  var parseUrl = require_parseurl();
  var setPrototypeOf = require_setprototypeof();
  var objectRegExp = /^\[object (\S+)\]$/;
  var slice = Array.prototype.slice;
  var toString = Object.prototype.toString;
  var proto = module.exports = function(options) {
    var opts = options || {};
    function router(req, res, next) {
      router.handle(req, res, next);
    }
    setPrototypeOf(router, proto);
    router.params = {};
    router._params = [];
    router.caseSensitive = opts.caseSensitive;
    router.mergeParams = opts.mergeParams;
    router.strict = opts.strict;
    router.stack = [];
    return router;
  };
  proto.param = function param(name, fn) {
    if (typeof name === "function") {
      deprecate("router.param(fn): Refactor to use path params");
      this._params.push(name);
      return;
    }
    var params = this._params;
    var len = params.length;
    var ret;
    if (name[0] === ":") {
      deprecate("router.param(" + JSON.stringify(name) + ", fn): Use router.param(" + JSON.stringify(name.slice(1)) + ", fn) instead");
      name = name.slice(1);
    }
    for (var i = 0;i < len; ++i) {
      if (ret = params[i](name, fn)) {
        fn = ret;
      }
    }
    if (typeof fn !== "function") {
      throw new Error("invalid param() call for " + name + ", got " + fn);
    }
    (this.params[name] = this.params[name] || []).push(fn);
    return this;
  };
  proto.handle = function handle(req, res, out) {
    var self2 = this;
    debug2("dispatching %s %s", req.method, req.url);
    var idx = 0;
    var protohost = getProtohost(req.url) || "";
    var removed = "";
    var slashAdded = false;
    var sync = 0;
    var paramcalled = {};
    var options = [];
    var stack = self2.stack;
    var parentParams = req.params;
    var parentUrl = req.baseUrl || "";
    var done = restore(out, req, "baseUrl", "next", "params");
    req.next = next;
    if (req.method === "OPTIONS") {
      done = wrap(done, function(old, err) {
        if (err || options.length === 0)
          return old(err);
        sendOptionsResponse(res, options, old);
      });
    }
    req.baseUrl = parentUrl;
    req.originalUrl = req.originalUrl || req.url;
    next();
    function next(err) {
      var layerError = err === "route" ? null : err;
      if (slashAdded) {
        req.url = req.url.slice(1);
        slashAdded = false;
      }
      if (removed.length !== 0) {
        req.baseUrl = parentUrl;
        req.url = protohost + removed + req.url.slice(protohost.length);
        removed = "";
      }
      if (layerError === "router") {
        setImmediate(done, null);
        return;
      }
      if (idx >= stack.length) {
        setImmediate(done, layerError);
        return;
      }
      if (++sync > 100) {
        return setImmediate(next, err);
      }
      var path = getPathname(req);
      if (path == null) {
        return done(layerError);
      }
      var layer;
      var match;
      var route;
      while (match !== true && idx < stack.length) {
        layer = stack[idx++];
        match = matchLayer(layer, path);
        route = layer.route;
        if (typeof match !== "boolean") {
          layerError = layerError || match;
        }
        if (match !== true) {
          continue;
        }
        if (!route) {
          continue;
        }
        if (layerError) {
          match = false;
          continue;
        }
        var method = req.method;
        var has_method = route._handles_method(method);
        if (!has_method && method === "OPTIONS") {
          appendMethods(options, route._options());
        }
        if (!has_method && method !== "HEAD") {
          match = false;
        }
      }
      if (match !== true) {
        return done(layerError);
      }
      if (route) {
        req.route = route;
      }
      req.params = self2.mergeParams ? mergeParams(layer.params, parentParams) : layer.params;
      var layerPath = layer.path;
      self2.process_params(layer, paramcalled, req, res, function(err2) {
        if (err2) {
          next(layerError || err2);
        } else if (route) {
          layer.handle_request(req, res, next);
        } else {
          trim_prefix(layer, layerError, layerPath, path);
        }
        sync = 0;
      });
    }
    function trim_prefix(layer, layerError, layerPath, path) {
      if (layerPath.length !== 0) {
        if (layerPath !== path.slice(0, layerPath.length)) {
          next(layerError);
          return;
        }
        var c = path[layerPath.length];
        if (c && c !== "/" && c !== ".")
          return next(layerError);
        debug2("trim prefix (%s) from url %s", layerPath, req.url);
        removed = layerPath;
        req.url = protohost + req.url.slice(protohost.length + removed.length);
        if (!protohost && req.url[0] !== "/") {
          req.url = "/" + req.url;
          slashAdded = true;
        }
        req.baseUrl = parentUrl + (removed[removed.length - 1] === "/" ? removed.substring(0, removed.length - 1) : removed);
      }
      debug2("%s %s : %s", layer.name, layerPath, req.originalUrl);
      if (layerError) {
        layer.handle_error(layerError, req, res, next);
      } else {
        layer.handle_request(req, res, next);
      }
    }
  };
  proto.process_params = function process_params(layer, called, req, res, done) {
    var params = this.params;
    var keys = layer.keys;
    if (!keys || keys.length === 0) {
      return done();
    }
    var i = 0;
    var name;
    var paramIndex = 0;
    var key;
    var paramVal;
    var paramCallbacks;
    var paramCalled;
    function param(err) {
      if (err) {
        return done(err);
      }
      if (i >= keys.length) {
        return done();
      }
      paramIndex = 0;
      key = keys[i++];
      name = key.name;
      paramVal = req.params[name];
      paramCallbacks = params[name];
      paramCalled = called[name];
      if (paramVal === undefined || !paramCallbacks) {
        return param();
      }
      if (paramCalled && (paramCalled.match === paramVal || paramCalled.error && paramCalled.error !== "route")) {
        req.params[name] = paramCalled.value;
        return param(paramCalled.error);
      }
      called[name] = paramCalled = {
        error: null,
        match: paramVal,
        value: paramVal
      };
      paramCallback();
    }
    function paramCallback(err) {
      var fn = paramCallbacks[paramIndex++];
      paramCalled.value = req.params[key.name];
      if (err) {
        paramCalled.error = err;
        param(err);
        return;
      }
      if (!fn)
        return param();
      try {
        fn(req, res, paramCallback, paramVal, key.name);
      } catch (e) {
        paramCallback(e);
      }
    }
    param();
  };
  proto.use = function use(fn) {
    var offset = 0;
    var path = "/";
    if (typeof fn !== "function") {
      var arg = fn;
      while (Array.isArray(arg) && arg.length !== 0) {
        arg = arg[0];
      }
      if (typeof arg !== "function") {
        offset = 1;
        path = fn;
      }
    }
    var callbacks = flatten(slice.call(arguments, offset));
    if (callbacks.length === 0) {
      throw new TypeError("Router.use() requires a middleware function");
    }
    for (var i = 0;i < callbacks.length; i++) {
      var fn = callbacks[i];
      if (typeof fn !== "function") {
        throw new TypeError("Router.use() requires a middleware function but got a " + gettype(fn));
      }
      debug2("use %o %s", path, fn.name || "<anonymous>");
      var layer = new Layer(path, {
        sensitive: this.caseSensitive,
        strict: false,
        end: false
      }, fn);
      layer.route = undefined;
      this.stack.push(layer);
    }
    return this;
  };
  proto.route = function route(path) {
    var route = new Route(path);
    var layer = new Layer(path, {
      sensitive: this.caseSensitive,
      strict: this.strict,
      end: true
    }, route.dispatch.bind(route));
    layer.route = route;
    this.stack.push(layer);
    return route;
  };
  methods.concat("all").forEach(function(method) {
    proto[method] = function(path) {
      var route = this.route(path);
      route[method].apply(route, slice.call(arguments, 1));
      return this;
    };
  });
});

// node_modules/express/lib/middleware/init.js
var require_init = __commonJS((exports) => {
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var setPrototypeOf = require_setprototypeof();
  exports.init = function(app) {
    return function expressInit(req, res, next) {
      if (app.enabled("x-powered-by"))
        res.setHeader("X-Powered-By", "Express");
      req.res = res;
      res.req = req;
      req.next = next;
      setPrototypeOf(req, app.request);
      setPrototypeOf(res, app.response);
      res.locals = res.locals || Object.create(null);
      next();
    };
  };
});

// node_modules/express/lib/middleware/query.js
var require_query = __commonJS((exports, module) => {
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var merge = require_utils_merge();
  var parseUrl = require_parseurl();
  var qs = require_lib2();
  module.exports = function query(options) {
    var opts = merge({}, options);
    var queryparse = qs.parse;
    if (typeof options === "function") {
      queryparse = options;
      opts = undefined;
    }
    if (opts !== undefined && opts.allowPrototypes === undefined) {
      opts.allowPrototypes = true;
    }
    return function query(req, res, next) {
      if (!req.query) {
        var val = parseUrl(req).query;
        req.query = queryparse(val, opts);
      }
      next();
    };
  };
});

// node_modules/express/lib/view.js
var require_view = __commonJS((exports, module) => {
  var View = function(name, options) {
    var opts = options || {};
    this.defaultEngine = opts.defaultEngine;
    this.ext = extname(name);
    this.name = name;
    this.root = opts.root;
    if (!this.ext && !this.defaultEngine) {
      throw new Error("No default engine was specified and no extension was provided.");
    }
    var fileName = name;
    if (!this.ext) {
      this.ext = this.defaultEngine[0] !== "." ? "." + this.defaultEngine : this.defaultEngine;
      fileName += this.ext;
    }
    if (!opts.engines[this.ext]) {
      var mod = this.ext.slice(1);
      debug2('require "%s"', mod);
      var fn = import.meta.require(mod).__express;
      if (typeof fn !== "function") {
        throw new Error('Module "' + mod + '" does not provide a view engine.');
      }
      opts.engines[this.ext] = fn;
    }
    this.engine = opts.engines[this.ext];
    this.path = this.lookup(fileName);
  };
  var tryStat = function(path2) {
    debug2('stat "%s"', path2);
    try {
      return fs.statSync(path2);
    } catch (e) {
      return;
    }
  };
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var debug2 = require_src3()("express:view");
  var path = import.meta.require("path");
  var fs = import.meta.require("fs");
  var dirname = path.dirname;
  var basename = path.basename;
  var extname = path.extname;
  var join = path.join;
  var resolve = path.resolve;
  module.exports = View;
  View.prototype.lookup = function lookup(name) {
    var path2;
    var roots = [].concat(this.root);
    debug2('lookup "%s"', name);
    for (var i = 0;i < roots.length && !path2; i++) {
      var root = roots[i];
      var loc = resolve(root, name);
      var dir = dirname(loc);
      var file = basename(loc);
      path2 = this.resolve(dir, file);
    }
    return path2;
  };
  View.prototype.render = function render(options, callback) {
    debug2('render "%s"', this.path);
    this.engine(this.path, options, callback);
  };
  View.prototype.resolve = function resolve(dir, file) {
    var ext = this.ext;
    var path2 = join(dir, file);
    var stat = tryStat(path2);
    if (stat && stat.isFile()) {
      return path2;
    }
    path2 = join(dir, basename(file, ext), "index" + ext);
    stat = tryStat(path2);
    if (stat && stat.isFile()) {
      return path2;
    }
  };
});

// node_modules/safe-buffer/index.js
var require_safe_buffer = __commonJS((exports, module) => {
  var copyProps = function(src, dst) {
    for (var key in src) {
      dst[key] = src[key];
    }
  };
  var SafeBuffer = function(arg, encodingOrOffset, length) {
    return Buffer2(arg, encodingOrOffset, length);
  };
  /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
  var buffer = import.meta.require("buffer");
  var Buffer2 = buffer.Buffer;
  if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
    module.exports = buffer;
  } else {
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
  }
  SafeBuffer.prototype = Object.create(Buffer2.prototype);
  copyProps(Buffer2, SafeBuffer);
  SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") {
      throw new TypeError("Argument must not be a number");
    }
    return Buffer2(arg, encodingOrOffset, length);
  };
  SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    var buf = Buffer2(size);
    if (fill !== undefined) {
      if (typeof encoding === "string") {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }
    return buf;
  };
  SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    return Buffer2(size);
  };
  SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    return buffer.SlowBuffer(size);
  };
});

// node_modules/content-disposition/index.js
var require_content_disposition = __commonJS((exports, module) => {
  var contentDisposition = function(filename, options) {
    var opts = options || {};
    var type = opts.type || "attachment";
    var params = createparams(filename, opts.fallback);
    return format(new ContentDisposition(type, params));
  };
  var createparams = function(filename, fallback) {
    if (filename === undefined) {
      return;
    }
    var params = {};
    if (typeof filename !== "string") {
      throw new TypeError("filename must be a string");
    }
    if (fallback === undefined) {
      fallback = true;
    }
    if (typeof fallback !== "string" && typeof fallback !== "boolean") {
      throw new TypeError("fallback must be a string or boolean");
    }
    if (typeof fallback === "string" && NON_LATIN1_REGEXP.test(fallback)) {
      throw new TypeError("fallback must be ISO-8859-1 string");
    }
    var name = basename(filename);
    var isQuotedString = TEXT_REGEXP.test(name);
    var fallbackName = typeof fallback !== "string" ? fallback && getlatin1(name) : basename(fallback);
    var hasFallback = typeof fallbackName === "string" && fallbackName !== name;
    if (hasFallback || !isQuotedString || HEX_ESCAPE_REGEXP.test(name)) {
      params["filename*"] = name;
    }
    if (isQuotedString || hasFallback) {
      params.filename = hasFallback ? fallbackName : name;
    }
    return params;
  };
  var format = function(obj) {
    var parameters = obj.parameters;
    var type = obj.type;
    if (!type || typeof type !== "string" || !TOKEN_REGEXP.test(type)) {
      throw new TypeError("invalid type");
    }
    var string = String(type).toLowerCase();
    if (parameters && typeof parameters === "object") {
      var param;
      var params = Object.keys(parameters).sort();
      for (var i = 0;i < params.length; i++) {
        param = params[i];
        var val = param.substr(-1) === "*" ? ustring(parameters[param]) : qstring(parameters[param]);
        string += "; " + param + "=" + val;
      }
    }
    return string;
  };
  var decodefield = function(str) {
    var match = EXT_VALUE_REGEXP.exec(str);
    if (!match) {
      throw new TypeError("invalid extended field value");
    }
    var charset = match[1].toLowerCase();
    var encoded = match[2];
    var value;
    var binary = encoded.replace(HEX_ESCAPE_REPLACE_REGEXP, pdecode);
    switch (charset) {
      case "iso-8859-1":
        value = getlatin1(binary);
        break;
      case "utf-8":
        value = Buffer2.from(binary, "binary").toString("utf8");
        break;
      default:
        throw new TypeError("unsupported charset in extended field");
    }
    return value;
  };
  var getlatin1 = function(val) {
    return String(val).replace(NON_LATIN1_REGEXP, "?");
  };
  var parse = function(string) {
    if (!string || typeof string !== "string") {
      throw new TypeError("argument string is required");
    }
    var match = DISPOSITION_TYPE_REGEXP.exec(string);
    if (!match) {
      throw new TypeError("invalid type format");
    }
    var index = match[0].length;
    var type = match[1].toLowerCase();
    var key;
    var names = [];
    var params = {};
    var value;
    index = PARAM_REGEXP.lastIndex = match[0].substr(-1) === ";" ? index - 1 : index;
    while (match = PARAM_REGEXP.exec(string)) {
      if (match.index !== index) {
        throw new TypeError("invalid parameter format");
      }
      index += match[0].length;
      key = match[1].toLowerCase();
      value = match[2];
      if (names.indexOf(key) !== -1) {
        throw new TypeError("invalid duplicate parameter");
      }
      names.push(key);
      if (key.indexOf("*") + 1 === key.length) {
        key = key.slice(0, -1);
        value = decodefield(value);
        params[key] = value;
        continue;
      }
      if (typeof params[key] === "string") {
        continue;
      }
      if (value[0] === '"') {
        value = value.substr(1, value.length - 2).replace(QESC_REGEXP, "$1");
      }
      params[key] = value;
    }
    if (index !== -1 && index !== string.length) {
      throw new TypeError("invalid parameter format");
    }
    return new ContentDisposition(type, params);
  };
  var pdecode = function(str, hex) {
    return String.fromCharCode(parseInt(hex, 16));
  };
  var pencode = function(char) {
    return "%" + String(char).charCodeAt(0).toString(16).toUpperCase();
  };
  var qstring = function(val) {
    var str = String(val);
    return '"' + str.replace(QUOTE_REGEXP, "\\$1") + '"';
  };
  var ustring = function(val) {
    var str = String(val);
    var encoded = encodeURIComponent(str).replace(ENCODE_URL_ATTR_CHAR_REGEXP, pencode);
    return "UTF-8\'\'" + encoded;
  };
  var ContentDisposition = function(type, parameters) {
    this.type = type;
    this.parameters = parameters;
  };
  /*!
   * content-disposition
   * Copyright(c) 2014-2017 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = contentDisposition;
  module.exports.parse = parse;
  var basename = import.meta.require("path").basename;
  var Buffer2 = require_safe_buffer().Buffer;
  var ENCODE_URL_ATTR_CHAR_REGEXP = /[\x00-\x20"'()*,/:;<=>?@[\\\]{}\x7f]/g;
  var HEX_ESCAPE_REGEXP = /%[0-9A-Fa-f]{2}/;
  var HEX_ESCAPE_REPLACE_REGEXP = /%([0-9A-Fa-f]{2})/g;
  var NON_LATIN1_REGEXP = /[^\x20-\x7e\xa0-\xff]/g;
  var QESC_REGEXP = /\\([\u0000-\u007f])/g;
  var QUOTE_REGEXP = /([\\"])/g;
  var PARAM_REGEXP = /;[\x09\x20]*([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*=[\x09\x20]*("(?:[\x20!\x23-\x5b\x5d-\x7e\x80-\xff]|\\[\x20-\x7e])*"|[!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*/g;
  var TEXT_REGEXP = /^[\x20-\x7e\x80-\xff]+$/;
  var TOKEN_REGEXP = /^[!#$%&'*+.0-9A-Z^_`a-z|~-]+$/;
  var EXT_VALUE_REGEXP = /^([A-Za-z0-9!#$%&+\-^_`{}~]+)'(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}|[A-Za-z]{4,8}|)'((?:%[0-9A-Fa-f]{2}|[A-Za-z0-9!#$&+.^_`|~-])+)$/;
  var DISPOSITION_TYPE_REGEXP = /^([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*(?:$|;)/;
});

// node_modules/send/node_modules/debug/node_modules/ms/index.js
var require_ms4 = __commonJS((exports, module) => {
  var parse = function(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch (type) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return n * y;
      case "days":
      case "day":
      case "d":
        return n * d;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return n * h;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return n * m;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return n * s;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return n;
      default:
        return;
    }
  };
  var fmtShort = function(ms) {
    if (ms >= d) {
      return Math.round(ms / d) + "d";
    }
    if (ms >= h) {
      return Math.round(ms / h) + "h";
    }
    if (ms >= m) {
      return Math.round(ms / m) + "m";
    }
    if (ms >= s) {
      return Math.round(ms / s) + "s";
    }
    return ms + "ms";
  };
  var fmtLong = function(ms) {
    return plural(ms, d, "day") || plural(ms, h, "hour") || plural(ms, m, "minute") || plural(ms, s, "second") || ms + " ms";
  };
  var plural = function(ms, n, name) {
    if (ms < n) {
      return;
    }
    if (ms < n * 1.5) {
      return Math.floor(ms / n) + " " + name;
    }
    return Math.ceil(ms / n) + " " + name + "s";
  };
  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var y = d * 365.25;
  module.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
      return parse(val);
    } else if (type === "number" && isNaN(val) === false) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
  };
});

// node_modules/send/node_modules/debug/src/debug.js
var require_debug4 = __commonJS((exports, module) => {
  var selectColor = function(namespace) {
    var hash = 0, i;
    for (i in namespace) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0;
    }
    return exports.colors[Math.abs(hash) % exports.colors.length];
  };
  var createDebug = function(namespace) {
    function debug2() {
      if (!debug2.enabled)
        return;
      var self2 = debug2;
      var curr = +new Date;
      var ms = curr - (prevTime || curr);
      self2.diff = ms;
      self2.prev = prevTime;
      self2.curr = curr;
      prevTime = curr;
      var args = new Array(arguments.length);
      for (var i = 0;i < args.length; i++) {
        args[i] = arguments[i];
      }
      args[0] = exports.coerce(args[0]);
      if (typeof args[0] !== "string") {
        args.unshift("%O");
      }
      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
        if (match === "%%")
          return match;
        index++;
        var formatter = exports.formatters[format];
        if (typeof formatter === "function") {
          var val = args[index];
          match = formatter.call(self2, val);
          args.splice(index, 1);
          index--;
        }
        return match;
      });
      exports.formatArgs.call(self2, args);
      var logFn = debug2.log || exports.log || console.log.bind(console);
      logFn.apply(self2, args);
    }
    debug2.namespace = namespace;
    debug2.enabled = exports.enabled(namespace);
    debug2.useColors = exports.useColors();
    debug2.color = selectColor(namespace);
    if (typeof exports.init === "function") {
      exports.init(debug2);
    }
    return debug2;
  };
  var enable = function(namespaces) {
    exports.save(namespaces);
    exports.names = [];
    exports.skips = [];
    var split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
    var len = split.length;
    for (var i = 0;i < len; i++) {
      if (!split[i])
        continue;
      namespaces = split[i].replace(/\*/g, ".*?");
      if (namespaces[0] === "-") {
        exports.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
      } else {
        exports.names.push(new RegExp("^" + namespaces + "$"));
      }
    }
  };
  var disable = function() {
    exports.enable("");
  };
  var enabled = function(name) {
    var i, len;
    for (i = 0, len = exports.skips.length;i < len; i++) {
      if (exports.skips[i].test(name)) {
        return false;
      }
    }
    for (i = 0, len = exports.names.length;i < len; i++) {
      if (exports.names[i].test(name)) {
        return true;
      }
    }
    return false;
  };
  var coerce = function(val) {
    if (val instanceof Error)
      return val.stack || val.message;
    return val;
  };
  exports = module.exports = createDebug.debug = createDebug["default"] = createDebug;
  exports.coerce = coerce;
  exports.disable = disable;
  exports.enable = enable;
  exports.enabled = enabled;
  exports.humanize = require_ms4();
  exports.names = [];
  exports.skips = [];
  exports.formatters = {};
  var prevTime;
});

// node_modules/send/node_modules/debug/src/browser.js
var require_browser4 = __commonJS((exports, module) => {
  var useColors = function() {
    if (typeof window !== "undefined" && window.process && window.process.type === "renderer") {
      return true;
    }
    return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  };
  var formatArgs = function(args) {
    var useColors2 = this.useColors;
    args[0] = (useColors2 ? "%c" : "") + this.namespace + (useColors2 ? " %c" : " ") + args[0] + (useColors2 ? "%c " : " ") + "+" + exports.humanize(this.diff);
    if (!useColors2)
      return;
    var c = "color: " + this.color;
    args.splice(1, 0, c, "color: inherit");
    var index = 0;
    var lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, function(match) {
      if (match === "%%")
        return;
      index++;
      if (match === "%c") {
        lastC = index;
      }
    });
    args.splice(lastC, 0, c);
  };
  var log = function() {
    return typeof console === "object" && console.log && Function.prototype.apply.call(console.log, console, arguments);
  };
  var save = function(namespaces) {
    try {
      if (namespaces == null) {
        exports.storage.removeItem("debug");
      } else {
        exports.storage.debug = namespaces;
      }
    } catch (e) {
    }
  };
  var load = function() {
    var r;
    try {
      r = exports.storage.debug;
    } catch (e) {
    }
    if (!r && typeof process !== "undefined" && "env" in process) {
      r = process.env.DEBUG;
    }
    return r;
  };
  var localstorage = function() {
    try {
      return window.localStorage;
    } catch (e) {
    }
  };
  exports = module.exports = require_debug4();
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = typeof chrome != "undefined" && typeof chrome.storage != "undefined" ? chrome.storage.local : localstorage();
  exports.colors = [
    "lightseagreen",
    "forestgreen",
    "goldenrod",
    "dodgerblue",
    "darkorchid",
    "crimson"
  ];
  exports.formatters.j = function(v) {
    try {
      return JSON.stringify(v);
    } catch (err) {
      return "[UnexpectedJSONParseError]: " + err.message;
    }
  };
  exports.enable(load());
});

// node_modules/send/node_modules/debug/src/node.js
var require_node4 = __commonJS((exports, module) => {
  var useColors = function() {
    return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(fd);
  };
  var formatArgs = function(args) {
    var name = this.namespace;
    var useColors2 = this.useColors;
    if (useColors2) {
      var c = this.color;
      var prefix = "  \x1B[3" + c + ";1m" + name + " " + "\x1B[0m";
      args[0] = prefix + args[0].split("\n").join("\n" + prefix);
      args.push("\x1B[3" + c + "m+" + exports.humanize(this.diff) + "\x1B[0m");
    } else {
      args[0] = new Date().toUTCString() + " " + name + " " + args[0];
    }
  };
  var log = function() {
    return stream.write(util.format.apply(util, arguments) + "\n");
  };
  var save = function(namespaces) {
    if (namespaces == null) {
      delete process.env.DEBUG;
    } else {
      process.env.DEBUG = namespaces;
    }
  };
  var load = function() {
    return process.env.DEBUG;
  };
  var createWritableStdioStream = function(fd2) {
    var stream2;
    var tty_wrap = process.binding("tty_wrap");
    switch (tty_wrap.guessHandleType(fd2)) {
      case "TTY":
        stream2 = new tty.WriteStream(fd2);
        stream2._type = "tty";
        if (stream2._handle && stream2._handle.unref) {
          stream2._handle.unref();
        }
        break;
      case "FILE":
        var fs = import.meta.require("fs");
        stream2 = new fs.SyncWriteStream(fd2, { autoClose: false });
        stream2._type = "fs";
        break;
      case "PIPE":
      case "TCP":
        var net = import.meta.require("net");
        stream2 = new net.Socket({
          fd: fd2,
          readable: false,
          writable: true
        });
        stream2.readable = false;
        stream2.read = null;
        stream2._type = "pipe";
        if (stream2._handle && stream2._handle.unref) {
          stream2._handle.unref();
        }
        break;
      default:
        throw new Error("Implement me. Unknown stream file type!");
    }
    stream2.fd = fd2;
    stream2._isStdio = true;
    return stream2;
  };
  var init = function(debug2) {
    debug2.inspectOpts = {};
    var keys = Object.keys(exports.inspectOpts);
    for (var i = 0;i < keys.length; i++) {
      debug2.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
  };
  var tty = import.meta.require("tty");
  var util = import.meta.require("util");
  exports = module.exports = require_debug4();
  exports.init = init;
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.colors = [6, 2, 3, 4, 5, 1];
  exports.inspectOpts = Object.keys(process.env).filter(function(key) {
    return /^debug_/i.test(key);
  }).reduce(function(obj, key) {
    var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function(_, k) {
      return k.toUpperCase();
    });
    var val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val))
      val = true;
    else if (/^(no|off|false|disabled)$/i.test(val))
      val = false;
    else if (val === "null")
      val = null;
    else
      val = Number(val);
    obj[prop] = val;
    return obj;
  }, {});
  var fd = parseInt(process.env.DEBUG_FD, 10) || 2;
  if (fd !== 1 && fd !== 2) {
    util.deprecate(function() {
    }, "except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)")();
  }
  var stream = fd === 1 ? process.stdout : fd === 2 ? process.stderr : createWritableStdioStream(fd);
  exports.formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts).split("\n").map(function(str) {
      return str.trim();
    }).join(" ");
  };
  exports.formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts);
  };
  exports.enable(load());
});

// node_modules/send/node_modules/debug/src/index.js
var require_src4 = __commonJS((exports, module) => {
  if (typeof process !== "undefined" && process.type === "renderer") {
    module.exports = require_browser4();
  } else {
    module.exports = require_node4();
  }
});

// node_modules/etag/index.js
var require_etag = __commonJS((exports, module) => {
  var entitytag = function(entity) {
    if (entity.length === 0) {
      return '"0-2jmj7l5rSw0yVb/vlWAYkK/YBwk"';
    }
    var hash = crypto.createHash("sha1").update(entity, "utf8").digest("base64").substring(0, 27);
    var len = typeof entity === "string" ? Buffer.byteLength(entity, "utf8") : entity.length;
    return '"' + len.toString(16) + "-" + hash + '"';
  };
  var etag = function(entity, options) {
    if (entity == null) {
      throw new TypeError("argument entity is required");
    }
    var isStats = isstats(entity);
    var weak = options && typeof options.weak === "boolean" ? options.weak : isStats;
    if (!isStats && typeof entity !== "string" && !Buffer.isBuffer(entity)) {
      throw new TypeError("argument entity must be string, Buffer, or fs.Stats");
    }
    var tag = isStats ? stattag(entity) : entitytag(entity);
    return weak ? "W/" + tag : tag;
  };
  var isstats = function(obj) {
    if (typeof Stats === "function" && obj instanceof Stats) {
      return true;
    }
    return obj && typeof obj === "object" && "ctime" in obj && toString.call(obj.ctime) === "[object Date]" && "mtime" in obj && toString.call(obj.mtime) === "[object Date]" && "ino" in obj && typeof obj.ino === "number" && "size" in obj && typeof obj.size === "number";
  };
  var stattag = function(stat) {
    var mtime = stat.mtime.getTime().toString(16);
    var size = stat.size.toString(16);
    return '"' + size + "-" + mtime + '"';
  };
  /*!
   * etag
   * Copyright(c) 2014-2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = etag;
  var crypto = import.meta.require("crypto");
  var Stats = import.meta.require("fs").Stats;
  var toString = Object.prototype.toString;
});

// node_modules/fresh/index.js
var require_fresh = __commonJS((exports, module) => {
  var fresh = function(reqHeaders, resHeaders) {
    var modifiedSince = reqHeaders["if-modified-since"];
    var noneMatch = reqHeaders["if-none-match"];
    if (!modifiedSince && !noneMatch) {
      return false;
    }
    var cacheControl = reqHeaders["cache-control"];
    if (cacheControl && CACHE_CONTROL_NO_CACHE_REGEXP.test(cacheControl)) {
      return false;
    }
    if (noneMatch && noneMatch !== "*") {
      var etag = resHeaders["etag"];
      if (!etag) {
        return false;
      }
      var etagStale = true;
      var matches = parseTokenList(noneMatch);
      for (var i = 0;i < matches.length; i++) {
        var match = matches[i];
        if (match === etag || match === "W/" + etag || "W/" + match === etag) {
          etagStale = false;
          break;
        }
      }
      if (etagStale) {
        return false;
      }
    }
    if (modifiedSince) {
      var lastModified = resHeaders["last-modified"];
      var modifiedStale = !lastModified || !(parseHttpDate(lastModified) <= parseHttpDate(modifiedSince));
      if (modifiedStale) {
        return false;
      }
    }
    return true;
  };
  var parseHttpDate = function(date) {
    var timestamp = date && Date.parse(date);
    return typeof timestamp === "number" ? timestamp : NaN;
  };
  var parseTokenList = function(str) {
    var end = 0;
    var list = [];
    var start = 0;
    for (var i = 0, len = str.length;i < len; i++) {
      switch (str.charCodeAt(i)) {
        case 32:
          if (start === end) {
            start = end = i + 1;
          }
          break;
        case 44:
          list.push(str.substring(start, end));
          start = end = i + 1;
          break;
        default:
          end = i + 1;
          break;
      }
    }
    list.push(str.substring(start, end));
    return list;
  };
  /*!
   * fresh
   * Copyright(c) 2012 TJ Holowaychuk
   * Copyright(c) 2016-2017 Douglas Christopher Wilson
   * MIT Licensed
   */
  var CACHE_CONTROL_NO_CACHE_REGEXP = /(?:^|,)\s*?no-cache\s*?(?:,|$)/;
  module.exports = fresh;
});

// node_modules/mime/types.json
var require_types = __commonJS((exports, module) => {
  module.exports = { "application/andrew-inset": ["ez"], "application/applixware": ["aw"], "application/atom+xml": ["atom"], "application/atomcat+xml": ["atomcat"], "application/atomsvc+xml": ["atomsvc"], "application/bdoc": ["bdoc"], "application/ccxml+xml": ["ccxml"], "application/cdmi-capability": ["cdmia"], "application/cdmi-container": ["cdmic"], "application/cdmi-domain": ["cdmid"], "application/cdmi-object": ["cdmio"], "application/cdmi-queue": ["cdmiq"], "application/cu-seeme": ["cu"], "application/dash+xml": ["mpd"], "application/davmount+xml": ["davmount"], "application/docbook+xml": ["dbk"], "application/dssc+der": ["dssc"], "application/dssc+xml": ["xdssc"], "application/ecmascript": ["ecma"], "application/emma+xml": ["emma"], "application/epub+zip": ["epub"], "application/exi": ["exi"], "application/font-tdpfr": ["pfr"], "application/font-woff": [], "application/font-woff2": [], "application/geo+json": ["geojson"], "application/gml+xml": ["gml"], "application/gpx+xml": ["gpx"], "application/gxf": ["gxf"], "application/gzip": ["gz"], "application/hyperstudio": ["stk"], "application/inkml+xml": ["ink", "inkml"], "application/ipfix": ["ipfix"], "application/java-archive": ["jar", "war", "ear"], "application/java-serialized-object": ["ser"], "application/java-vm": ["class"], "application/javascript": ["js", "mjs"], "application/json": ["json", "map"], "application/json5": ["json5"], "application/jsonml+json": ["jsonml"], "application/ld+json": ["jsonld"], "application/lost+xml": ["lostxml"], "application/mac-binhex40": ["hqx"], "application/mac-compactpro": ["cpt"], "application/mads+xml": ["mads"], "application/manifest+json": ["webmanifest"], "application/marc": ["mrc"], "application/marcxml+xml": ["mrcx"], "application/mathematica": ["ma", "nb", "mb"], "application/mathml+xml": ["mathml"], "application/mbox": ["mbox"], "application/mediaservercontrol+xml": ["mscml"], "application/metalink+xml": ["metalink"], "application/metalink4+xml": ["meta4"], "application/mets+xml": ["mets"], "application/mods+xml": ["mods"], "application/mp21": ["m21", "mp21"], "application/mp4": ["mp4s", "m4p"], "application/msword": ["doc", "dot"], "application/mxf": ["mxf"], "application/octet-stream": ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"], "application/oda": ["oda"], "application/oebps-package+xml": ["opf"], "application/ogg": ["ogx"], "application/omdoc+xml": ["omdoc"], "application/onenote": ["onetoc", "onetoc2", "onetmp", "onepkg"], "application/oxps": ["oxps"], "application/patch-ops-error+xml": ["xer"], "application/pdf": ["pdf"], "application/pgp-encrypted": ["pgp"], "application/pgp-signature": ["asc", "sig"], "application/pics-rules": ["prf"], "application/pkcs10": ["p10"], "application/pkcs7-mime": ["p7m", "p7c"], "application/pkcs7-signature": ["p7s"], "application/pkcs8": ["p8"], "application/pkix-attr-cert": ["ac"], "application/pkix-cert": ["cer"], "application/pkix-crl": ["crl"], "application/pkix-pkipath": ["pkipath"], "application/pkixcmp": ["pki"], "application/pls+xml": ["pls"], "application/postscript": ["ai", "eps", "ps"], "application/prs.cww": ["cww"], "application/pskc+xml": ["pskcxml"], "application/raml+yaml": ["raml"], "application/rdf+xml": ["rdf"], "application/reginfo+xml": ["rif"], "application/relax-ng-compact-syntax": ["rnc"], "application/resource-lists+xml": ["rl"], "application/resource-lists-diff+xml": ["rld"], "application/rls-services+xml": ["rs"], "application/rpki-ghostbusters": ["gbr"], "application/rpki-manifest": ["mft"], "application/rpki-roa": ["roa"], "application/rsd+xml": ["rsd"], "application/rss+xml": ["rss"], "application/rtf": ["rtf"], "application/sbml+xml": ["sbml"], "application/scvp-cv-request": ["scq"], "application/scvp-cv-response": ["scs"], "application/scvp-vp-request": ["spq"], "application/scvp-vp-response": ["spp"], "application/sdp": ["sdp"], "application/set-payment-initiation": ["setpay"], "application/set-registration-initiation": ["setreg"], "application/shf+xml": ["shf"], "application/smil+xml": ["smi", "smil"], "application/sparql-query": ["rq"], "application/sparql-results+xml": ["srx"], "application/srgs": ["gram"], "application/srgs+xml": ["grxml"], "application/sru+xml": ["sru"], "application/ssdl+xml": ["ssdl"], "application/ssml+xml": ["ssml"], "application/tei+xml": ["tei", "teicorpus"], "application/thraud+xml": ["tfi"], "application/timestamped-data": ["tsd"], "application/vnd.3gpp.pic-bw-large": ["plb"], "application/vnd.3gpp.pic-bw-small": ["psb"], "application/vnd.3gpp.pic-bw-var": ["pvb"], "application/vnd.3gpp2.tcap": ["tcap"], "application/vnd.3m.post-it-notes": ["pwn"], "application/vnd.accpac.simply.aso": ["aso"], "application/vnd.accpac.simply.imp": ["imp"], "application/vnd.acucobol": ["acu"], "application/vnd.acucorp": ["atc", "acutc"], "application/vnd.adobe.air-application-installer-package+zip": ["air"], "application/vnd.adobe.formscentral.fcdt": ["fcdt"], "application/vnd.adobe.fxp": ["fxp", "fxpl"], "application/vnd.adobe.xdp+xml": ["xdp"], "application/vnd.adobe.xfdf": ["xfdf"], "application/vnd.ahead.space": ["ahead"], "application/vnd.airzip.filesecure.azf": ["azf"], "application/vnd.airzip.filesecure.azs": ["azs"], "application/vnd.amazon.ebook": ["azw"], "application/vnd.americandynamics.acc": ["acc"], "application/vnd.amiga.ami": ["ami"], "application/vnd.android.package-archive": ["apk"], "application/vnd.anser-web-certificate-issue-initiation": ["cii"], "application/vnd.anser-web-funds-transfer-initiation": ["fti"], "application/vnd.antix.game-component": ["atx"], "application/vnd.apple.installer+xml": ["mpkg"], "application/vnd.apple.mpegurl": ["m3u8"], "application/vnd.apple.pkpass": ["pkpass"], "application/vnd.aristanetworks.swi": ["swi"], "application/vnd.astraea-software.iota": ["iota"], "application/vnd.audiograph": ["aep"], "application/vnd.blueice.multipass": ["mpm"], "application/vnd.bmi": ["bmi"], "application/vnd.businessobjects": ["rep"], "application/vnd.chemdraw+xml": ["cdxml"], "application/vnd.chipnuts.karaoke-mmd": ["mmd"], "application/vnd.cinderella": ["cdy"], "application/vnd.claymore": ["cla"], "application/vnd.cloanto.rp9": ["rp9"], "application/vnd.clonk.c4group": ["c4g", "c4d", "c4f", "c4p", "c4u"], "application/vnd.cluetrust.cartomobile-config": ["c11amc"], "application/vnd.cluetrust.cartomobile-config-pkg": ["c11amz"], "application/vnd.commonspace": ["csp"], "application/vnd.contact.cmsg": ["cdbcmsg"], "application/vnd.cosmocaller": ["cmc"], "application/vnd.crick.clicker": ["clkx"], "application/vnd.crick.clicker.keyboard": ["clkk"], "application/vnd.crick.clicker.palette": ["clkp"], "application/vnd.crick.clicker.template": ["clkt"], "application/vnd.crick.clicker.wordbank": ["clkw"], "application/vnd.criticaltools.wbs+xml": ["wbs"], "application/vnd.ctc-posml": ["pml"], "application/vnd.cups-ppd": ["ppd"], "application/vnd.curl.car": ["car"], "application/vnd.curl.pcurl": ["pcurl"], "application/vnd.dart": ["dart"], "application/vnd.data-vision.rdz": ["rdz"], "application/vnd.dece.data": ["uvf", "uvvf", "uvd", "uvvd"], "application/vnd.dece.ttml+xml": ["uvt", "uvvt"], "application/vnd.dece.unspecified": ["uvx", "uvvx"], "application/vnd.dece.zip": ["uvz", "uvvz"], "application/vnd.denovo.fcselayout-link": ["fe_launch"], "application/vnd.dna": ["dna"], "application/vnd.dolby.mlp": ["mlp"], "application/vnd.dpgraph": ["dpg"], "application/vnd.dreamfactory": ["dfac"], "application/vnd.ds-keypoint": ["kpxx"], "application/vnd.dvb.ait": ["ait"], "application/vnd.dvb.service": ["svc"], "application/vnd.dynageo": ["geo"], "application/vnd.ecowin.chart": ["mag"], "application/vnd.enliven": ["nml"], "application/vnd.epson.esf": ["esf"], "application/vnd.epson.msf": ["msf"], "application/vnd.epson.quickanime": ["qam"], "application/vnd.epson.salt": ["slt"], "application/vnd.epson.ssf": ["ssf"], "application/vnd.eszigno3+xml": ["es3", "et3"], "application/vnd.ezpix-album": ["ez2"], "application/vnd.ezpix-package": ["ez3"], "application/vnd.fdf": ["fdf"], "application/vnd.fdsn.mseed": ["mseed"], "application/vnd.fdsn.seed": ["seed", "dataless"], "application/vnd.flographit": ["gph"], "application/vnd.fluxtime.clip": ["ftc"], "application/vnd.framemaker": ["fm", "frame", "maker", "book"], "application/vnd.frogans.fnc": ["fnc"], "application/vnd.frogans.ltf": ["ltf"], "application/vnd.fsc.weblaunch": ["fsc"], "application/vnd.fujitsu.oasys": ["oas"], "application/vnd.fujitsu.oasys2": ["oa2"], "application/vnd.fujitsu.oasys3": ["oa3"], "application/vnd.fujitsu.oasysgp": ["fg5"], "application/vnd.fujitsu.oasysprs": ["bh2"], "application/vnd.fujixerox.ddd": ["ddd"], "application/vnd.fujixerox.docuworks": ["xdw"], "application/vnd.fujixerox.docuworks.binder": ["xbd"], "application/vnd.fuzzysheet": ["fzs"], "application/vnd.genomatix.tuxedo": ["txd"], "application/vnd.geogebra.file": ["ggb"], "application/vnd.geogebra.tool": ["ggt"], "application/vnd.geometry-explorer": ["gex", "gre"], "application/vnd.geonext": ["gxt"], "application/vnd.geoplan": ["g2w"], "application/vnd.geospace": ["g3w"], "application/vnd.gmx": ["gmx"], "application/vnd.google-apps.document": ["gdoc"], "application/vnd.google-apps.presentation": ["gslides"], "application/vnd.google-apps.spreadsheet": ["gsheet"], "application/vnd.google-earth.kml+xml": ["kml"], "application/vnd.google-earth.kmz": ["kmz"], "application/vnd.grafeq": ["gqf", "gqs"], "application/vnd.groove-account": ["gac"], "application/vnd.groove-help": ["ghf"], "application/vnd.groove-identity-message": ["gim"], "application/vnd.groove-injector": ["grv"], "application/vnd.groove-tool-message": ["gtm"], "application/vnd.groove-tool-template": ["tpl"], "application/vnd.groove-vcard": ["vcg"], "application/vnd.hal+xml": ["hal"], "application/vnd.handheld-entertainment+xml": ["zmm"], "application/vnd.hbci": ["hbci"], "application/vnd.hhe.lesson-player": ["les"], "application/vnd.hp-hpgl": ["hpgl"], "application/vnd.hp-hpid": ["hpid"], "application/vnd.hp-hps": ["hps"], "application/vnd.hp-jlyt": ["jlt"], "application/vnd.hp-pcl": ["pcl"], "application/vnd.hp-pclxl": ["pclxl"], "application/vnd.hydrostatix.sof-data": ["sfd-hdstx"], "application/vnd.ibm.minipay": ["mpy"], "application/vnd.ibm.modcap": ["afp", "listafp", "list3820"], "application/vnd.ibm.rights-management": ["irm"], "application/vnd.ibm.secure-container": ["sc"], "application/vnd.iccprofile": ["icc", "icm"], "application/vnd.igloader": ["igl"], "application/vnd.immervision-ivp": ["ivp"], "application/vnd.immervision-ivu": ["ivu"], "application/vnd.insors.igm": ["igm"], "application/vnd.intercon.formnet": ["xpw", "xpx"], "application/vnd.intergeo": ["i2g"], "application/vnd.intu.qbo": ["qbo"], "application/vnd.intu.qfx": ["qfx"], "application/vnd.ipunplugged.rcprofile": ["rcprofile"], "application/vnd.irepository.package+xml": ["irp"], "application/vnd.is-xpr": ["xpr"], "application/vnd.isac.fcs": ["fcs"], "application/vnd.jam": ["jam"], "application/vnd.jcp.javame.midlet-rms": ["rms"], "application/vnd.jisp": ["jisp"], "application/vnd.joost.joda-archive": ["joda"], "application/vnd.kahootz": ["ktz", "ktr"], "application/vnd.kde.karbon": ["karbon"], "application/vnd.kde.kchart": ["chrt"], "application/vnd.kde.kformula": ["kfo"], "application/vnd.kde.kivio": ["flw"], "application/vnd.kde.kontour": ["kon"], "application/vnd.kde.kpresenter": ["kpr", "kpt"], "application/vnd.kde.kspread": ["ksp"], "application/vnd.kde.kword": ["kwd", "kwt"], "application/vnd.kenameaapp": ["htke"], "application/vnd.kidspiration": ["kia"], "application/vnd.kinar": ["kne", "knp"], "application/vnd.koan": ["skp", "skd", "skt", "skm"], "application/vnd.kodak-descriptor": ["sse"], "application/vnd.las.las+xml": ["lasxml"], "application/vnd.llamagraphics.life-balance.desktop": ["lbd"], "application/vnd.llamagraphics.life-balance.exchange+xml": ["lbe"], "application/vnd.lotus-1-2-3": ["123"], "application/vnd.lotus-approach": ["apr"], "application/vnd.lotus-freelance": ["pre"], "application/vnd.lotus-notes": ["nsf"], "application/vnd.lotus-organizer": ["org"], "application/vnd.lotus-screencam": ["scm"], "application/vnd.lotus-wordpro": ["lwp"], "application/vnd.macports.portpkg": ["portpkg"], "application/vnd.mcd": ["mcd"], "application/vnd.medcalcdata": ["mc1"], "application/vnd.mediastation.cdkey": ["cdkey"], "application/vnd.mfer": ["mwf"], "application/vnd.mfmp": ["mfm"], "application/vnd.micrografx.flo": ["flo"], "application/vnd.micrografx.igx": ["igx"], "application/vnd.mif": ["mif"], "application/vnd.mobius.daf": ["daf"], "application/vnd.mobius.dis": ["dis"], "application/vnd.mobius.mbk": ["mbk"], "application/vnd.mobius.mqy": ["mqy"], "application/vnd.mobius.msl": ["msl"], "application/vnd.mobius.plc": ["plc"], "application/vnd.mobius.txf": ["txf"], "application/vnd.mophun.application": ["mpn"], "application/vnd.mophun.certificate": ["mpc"], "application/vnd.mozilla.xul+xml": ["xul"], "application/vnd.ms-artgalry": ["cil"], "application/vnd.ms-cab-compressed": ["cab"], "application/vnd.ms-excel": ["xls", "xlm", "xla", "xlc", "xlt", "xlw"], "application/vnd.ms-excel.addin.macroenabled.12": ["xlam"], "application/vnd.ms-excel.sheet.binary.macroenabled.12": ["xlsb"], "application/vnd.ms-excel.sheet.macroenabled.12": ["xlsm"], "application/vnd.ms-excel.template.macroenabled.12": ["xltm"], "application/vnd.ms-fontobject": ["eot"], "application/vnd.ms-htmlhelp": ["chm"], "application/vnd.ms-ims": ["ims"], "application/vnd.ms-lrm": ["lrm"], "application/vnd.ms-officetheme": ["thmx"], "application/vnd.ms-outlook": ["msg"], "application/vnd.ms-pki.seccat": ["cat"], "application/vnd.ms-pki.stl": ["stl"], "application/vnd.ms-powerpoint": ["ppt", "pps", "pot"], "application/vnd.ms-powerpoint.addin.macroenabled.12": ["ppam"], "application/vnd.ms-powerpoint.presentation.macroenabled.12": ["pptm"], "application/vnd.ms-powerpoint.slide.macroenabled.12": ["sldm"], "application/vnd.ms-powerpoint.slideshow.macroenabled.12": ["ppsm"], "application/vnd.ms-powerpoint.template.macroenabled.12": ["potm"], "application/vnd.ms-project": ["mpp", "mpt"], "application/vnd.ms-word.document.macroenabled.12": ["docm"], "application/vnd.ms-word.template.macroenabled.12": ["dotm"], "application/vnd.ms-works": ["wps", "wks", "wcm", "wdb"], "application/vnd.ms-wpl": ["wpl"], "application/vnd.ms-xpsdocument": ["xps"], "application/vnd.mseq": ["mseq"], "application/vnd.musician": ["mus"], "application/vnd.muvee.style": ["msty"], "application/vnd.mynfc": ["taglet"], "application/vnd.neurolanguage.nlu": ["nlu"], "application/vnd.nitf": ["ntf", "nitf"], "application/vnd.noblenet-directory": ["nnd"], "application/vnd.noblenet-sealer": ["nns"], "application/vnd.noblenet-web": ["nnw"], "application/vnd.nokia.n-gage.data": ["ngdat"], "application/vnd.nokia.n-gage.symbian.install": ["n-gage"], "application/vnd.nokia.radio-preset": ["rpst"], "application/vnd.nokia.radio-presets": ["rpss"], "application/vnd.novadigm.edm": ["edm"], "application/vnd.novadigm.edx": ["edx"], "application/vnd.novadigm.ext": ["ext"], "application/vnd.oasis.opendocument.chart": ["odc"], "application/vnd.oasis.opendocument.chart-template": ["otc"], "application/vnd.oasis.opendocument.database": ["odb"], "application/vnd.oasis.opendocument.formula": ["odf"], "application/vnd.oasis.opendocument.formula-template": ["odft"], "application/vnd.oasis.opendocument.graphics": ["odg"], "application/vnd.oasis.opendocument.graphics-template": ["otg"], "application/vnd.oasis.opendocument.image": ["odi"], "application/vnd.oasis.opendocument.image-template": ["oti"], "application/vnd.oasis.opendocument.presentation": ["odp"], "application/vnd.oasis.opendocument.presentation-template": ["otp"], "application/vnd.oasis.opendocument.spreadsheet": ["ods"], "application/vnd.oasis.opendocument.spreadsheet-template": ["ots"], "application/vnd.oasis.opendocument.text": ["odt"], "application/vnd.oasis.opendocument.text-master": ["odm"], "application/vnd.oasis.opendocument.text-template": ["ott"], "application/vnd.oasis.opendocument.text-web": ["oth"], "application/vnd.olpc-sugar": ["xo"], "application/vnd.oma.dd2+xml": ["dd2"], "application/vnd.openofficeorg.extension": ["oxt"], "application/vnd.openxmlformats-officedocument.presentationml.presentation": ["pptx"], "application/vnd.openxmlformats-officedocument.presentationml.slide": ["sldx"], "application/vnd.openxmlformats-officedocument.presentationml.slideshow": ["ppsx"], "application/vnd.openxmlformats-officedocument.presentationml.template": ["potx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": ["xlsx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.template": ["xltx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.document": ["docx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.template": ["dotx"], "application/vnd.osgeo.mapguide.package": ["mgp"], "application/vnd.osgi.dp": ["dp"], "application/vnd.osgi.subsystem": ["esa"], "application/vnd.palm": ["pdb", "pqa", "oprc"], "application/vnd.pawaafile": ["paw"], "application/vnd.pg.format": ["str"], "application/vnd.pg.osasli": ["ei6"], "application/vnd.picsel": ["efif"], "application/vnd.pmi.widget": ["wg"], "application/vnd.pocketlearn": ["plf"], "application/vnd.powerbuilder6": ["pbd"], "application/vnd.previewsystems.box": ["box"], "application/vnd.proteus.magazine": ["mgz"], "application/vnd.publishare-delta-tree": ["qps"], "application/vnd.pvi.ptid1": ["ptid"], "application/vnd.quark.quarkxpress": ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"], "application/vnd.realvnc.bed": ["bed"], "application/vnd.recordare.musicxml": ["mxl"], "application/vnd.recordare.musicxml+xml": ["musicxml"], "application/vnd.rig.cryptonote": ["cryptonote"], "application/vnd.rim.cod": ["cod"], "application/vnd.rn-realmedia": ["rm"], "application/vnd.rn-realmedia-vbr": ["rmvb"], "application/vnd.route66.link66+xml": ["link66"], "application/vnd.sailingtracker.track": ["st"], "application/vnd.seemail": ["see"], "application/vnd.sema": ["sema"], "application/vnd.semd": ["semd"], "application/vnd.semf": ["semf"], "application/vnd.shana.informed.formdata": ["ifm"], "application/vnd.shana.informed.formtemplate": ["itp"], "application/vnd.shana.informed.interchange": ["iif"], "application/vnd.shana.informed.package": ["ipk"], "application/vnd.simtech-mindmapper": ["twd", "twds"], "application/vnd.smaf": ["mmf"], "application/vnd.smart.teacher": ["teacher"], "application/vnd.solent.sdkm+xml": ["sdkm", "sdkd"], "application/vnd.spotfire.dxp": ["dxp"], "application/vnd.spotfire.sfs": ["sfs"], "application/vnd.stardivision.calc": ["sdc"], "application/vnd.stardivision.draw": ["sda"], "application/vnd.stardivision.impress": ["sdd"], "application/vnd.stardivision.math": ["smf"], "application/vnd.stardivision.writer": ["sdw", "vor"], "application/vnd.stardivision.writer-global": ["sgl"], "application/vnd.stepmania.package": ["smzip"], "application/vnd.stepmania.stepchart": ["sm"], "application/vnd.sun.wadl+xml": ["wadl"], "application/vnd.sun.xml.calc": ["sxc"], "application/vnd.sun.xml.calc.template": ["stc"], "application/vnd.sun.xml.draw": ["sxd"], "application/vnd.sun.xml.draw.template": ["std"], "application/vnd.sun.xml.impress": ["sxi"], "application/vnd.sun.xml.impress.template": ["sti"], "application/vnd.sun.xml.math": ["sxm"], "application/vnd.sun.xml.writer": ["sxw"], "application/vnd.sun.xml.writer.global": ["sxg"], "application/vnd.sun.xml.writer.template": ["stw"], "application/vnd.sus-calendar": ["sus", "susp"], "application/vnd.svd": ["svd"], "application/vnd.symbian.install": ["sis", "sisx"], "application/vnd.syncml+xml": ["xsm"], "application/vnd.syncml.dm+wbxml": ["bdm"], "application/vnd.syncml.dm+xml": ["xdm"], "application/vnd.tao.intent-module-archive": ["tao"], "application/vnd.tcpdump.pcap": ["pcap", "cap", "dmp"], "application/vnd.tmobile-livetv": ["tmo"], "application/vnd.trid.tpt": ["tpt"], "application/vnd.triscape.mxs": ["mxs"], "application/vnd.trueapp": ["tra"], "application/vnd.ufdl": ["ufd", "ufdl"], "application/vnd.uiq.theme": ["utz"], "application/vnd.umajin": ["umj"], "application/vnd.unity": ["unityweb"], "application/vnd.uoml+xml": ["uoml"], "application/vnd.vcx": ["vcx"], "application/vnd.visio": ["vsd", "vst", "vss", "vsw"], "application/vnd.visionary": ["vis"], "application/vnd.vsf": ["vsf"], "application/vnd.wap.wbxml": ["wbxml"], "application/vnd.wap.wmlc": ["wmlc"], "application/vnd.wap.wmlscriptc": ["wmlsc"], "application/vnd.webturbo": ["wtb"], "application/vnd.wolfram.player": ["nbp"], "application/vnd.wordperfect": ["wpd"], "application/vnd.wqd": ["wqd"], "application/vnd.wt.stf": ["stf"], "application/vnd.xara": ["xar"], "application/vnd.xfdl": ["xfdl"], "application/vnd.yamaha.hv-dic": ["hvd"], "application/vnd.yamaha.hv-script": ["hvs"], "application/vnd.yamaha.hv-voice": ["hvp"], "application/vnd.yamaha.openscoreformat": ["osf"], "application/vnd.yamaha.openscoreformat.osfpvg+xml": ["osfpvg"], "application/vnd.yamaha.smaf-audio": ["saf"], "application/vnd.yamaha.smaf-phrase": ["spf"], "application/vnd.yellowriver-custom-menu": ["cmp"], "application/vnd.zul": ["zir", "zirz"], "application/vnd.zzazz.deck+xml": ["zaz"], "application/voicexml+xml": ["vxml"], "application/wasm": ["wasm"], "application/widget": ["wgt"], "application/winhlp": ["hlp"], "application/wsdl+xml": ["wsdl"], "application/wspolicy+xml": ["wspolicy"], "application/x-7z-compressed": ["7z"], "application/x-abiword": ["abw"], "application/x-ace-compressed": ["ace"], "application/x-apple-diskimage": [], "application/x-arj": ["arj"], "application/x-authorware-bin": ["aab", "x32", "u32", "vox"], "application/x-authorware-map": ["aam"], "application/x-authorware-seg": ["aas"], "application/x-bcpio": ["bcpio"], "application/x-bdoc": [], "application/x-bittorrent": ["torrent"], "application/x-blorb": ["blb", "blorb"], "application/x-bzip": ["bz"], "application/x-bzip2": ["bz2", "boz"], "application/x-cbr": ["cbr", "cba", "cbt", "cbz", "cb7"], "application/x-cdlink": ["vcd"], "application/x-cfs-compressed": ["cfs"], "application/x-chat": ["chat"], "application/x-chess-pgn": ["pgn"], "application/x-chrome-extension": ["crx"], "application/x-cocoa": ["cco"], "application/x-conference": ["nsc"], "application/x-cpio": ["cpio"], "application/x-csh": ["csh"], "application/x-debian-package": ["udeb"], "application/x-dgc-compressed": ["dgc"], "application/x-director": ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"], "application/x-doom": ["wad"], "application/x-dtbncx+xml": ["ncx"], "application/x-dtbook+xml": ["dtb"], "application/x-dtbresource+xml": ["res"], "application/x-dvi": ["dvi"], "application/x-envoy": ["evy"], "application/x-eva": ["eva"], "application/x-font-bdf": ["bdf"], "application/x-font-ghostscript": ["gsf"], "application/x-font-linux-psf": ["psf"], "application/x-font-pcf": ["pcf"], "application/x-font-snf": ["snf"], "application/x-font-type1": ["pfa", "pfb", "pfm", "afm"], "application/x-freearc": ["arc"], "application/x-futuresplash": ["spl"], "application/x-gca-compressed": ["gca"], "application/x-glulx": ["ulx"], "application/x-gnumeric": ["gnumeric"], "application/x-gramps-xml": ["gramps"], "application/x-gtar": ["gtar"], "application/x-hdf": ["hdf"], "application/x-httpd-php": ["php"], "application/x-install-instructions": ["install"], "application/x-iso9660-image": [], "application/x-java-archive-diff": ["jardiff"], "application/x-java-jnlp-file": ["jnlp"], "application/x-latex": ["latex"], "application/x-lua-bytecode": ["luac"], "application/x-lzh-compressed": ["lzh", "lha"], "application/x-makeself": ["run"], "application/x-mie": ["mie"], "application/x-mobipocket-ebook": ["prc", "mobi"], "application/x-ms-application": ["application"], "application/x-ms-shortcut": ["lnk"], "application/x-ms-wmd": ["wmd"], "application/x-ms-wmz": ["wmz"], "application/x-ms-xbap": ["xbap"], "application/x-msaccess": ["mdb"], "application/x-msbinder": ["obd"], "application/x-mscardfile": ["crd"], "application/x-msclip": ["clp"], "application/x-msdos-program": [], "application/x-msdownload": ["com", "bat"], "application/x-msmediaview": ["mvb", "m13", "m14"], "application/x-msmetafile": ["wmf", "emf", "emz"], "application/x-msmoney": ["mny"], "application/x-mspublisher": ["pub"], "application/x-msschedule": ["scd"], "application/x-msterminal": ["trm"], "application/x-mswrite": ["wri"], "application/x-netcdf": ["nc", "cdf"], "application/x-ns-proxy-autoconfig": ["pac"], "application/x-nzb": ["nzb"], "application/x-perl": ["pl", "pm"], "application/x-pilot": [], "application/x-pkcs12": ["p12", "pfx"], "application/x-pkcs7-certificates": ["p7b", "spc"], "application/x-pkcs7-certreqresp": ["p7r"], "application/x-rar-compressed": ["rar"], "application/x-redhat-package-manager": ["rpm"], "application/x-research-info-systems": ["ris"], "application/x-sea": ["sea"], "application/x-sh": ["sh"], "application/x-shar": ["shar"], "application/x-shockwave-flash": ["swf"], "application/x-silverlight-app": ["xap"], "application/x-sql": ["sql"], "application/x-stuffit": ["sit"], "application/x-stuffitx": ["sitx"], "application/x-subrip": ["srt"], "application/x-sv4cpio": ["sv4cpio"], "application/x-sv4crc": ["sv4crc"], "application/x-t3vm-image": ["t3"], "application/x-tads": ["gam"], "application/x-tar": ["tar"], "application/x-tcl": ["tcl", "tk"], "application/x-tex": ["tex"], "application/x-tex-tfm": ["tfm"], "application/x-texinfo": ["texinfo", "texi"], "application/x-tgif": ["obj"], "application/x-ustar": ["ustar"], "application/x-virtualbox-hdd": ["hdd"], "application/x-virtualbox-ova": ["ova"], "application/x-virtualbox-ovf": ["ovf"], "application/x-virtualbox-vbox": ["vbox"], "application/x-virtualbox-vbox-extpack": ["vbox-extpack"], "application/x-virtualbox-vdi": ["vdi"], "application/x-virtualbox-vhd": ["vhd"], "application/x-virtualbox-vmdk": ["vmdk"], "application/x-wais-source": ["src"], "application/x-web-app-manifest+json": ["webapp"], "application/x-x509-ca-cert": ["der", "crt", "pem"], "application/x-xfig": ["fig"], "application/x-xliff+xml": ["xlf"], "application/x-xpinstall": ["xpi"], "application/x-xz": ["xz"], "application/x-zmachine": ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"], "application/xaml+xml": ["xaml"], "application/xcap-diff+xml": ["xdf"], "application/xenc+xml": ["xenc"], "application/xhtml+xml": ["xhtml", "xht"], "application/xml": ["xml", "xsl", "xsd", "rng"], "application/xml-dtd": ["dtd"], "application/xop+xml": ["xop"], "application/xproc+xml": ["xpl"], "application/xslt+xml": ["xslt"], "application/xspf+xml": ["xspf"], "application/xv+xml": ["mxml", "xhvml", "xvml", "xvm"], "application/yang": ["yang"], "application/yin+xml": ["yin"], "application/zip": ["zip"], "audio/3gpp": [], "audio/adpcm": ["adp"], "audio/basic": ["au", "snd"], "audio/midi": ["mid", "midi", "kar", "rmi"], "audio/mp3": [], "audio/mp4": ["m4a", "mp4a"], "audio/mpeg": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"], "audio/ogg": ["oga", "ogg", "spx"], "audio/s3m": ["s3m"], "audio/silk": ["sil"], "audio/vnd.dece.audio": ["uva", "uvva"], "audio/vnd.digital-winds": ["eol"], "audio/vnd.dra": ["dra"], "audio/vnd.dts": ["dts"], "audio/vnd.dts.hd": ["dtshd"], "audio/vnd.lucent.voice": ["lvp"], "audio/vnd.ms-playready.media.pya": ["pya"], "audio/vnd.nuera.ecelp4800": ["ecelp4800"], "audio/vnd.nuera.ecelp7470": ["ecelp7470"], "audio/vnd.nuera.ecelp9600": ["ecelp9600"], "audio/vnd.rip": ["rip"], "audio/wav": ["wav"], "audio/wave": [], "audio/webm": ["weba"], "audio/x-aac": ["aac"], "audio/x-aiff": ["aif", "aiff", "aifc"], "audio/x-caf": ["caf"], "audio/x-flac": ["flac"], "audio/x-m4a": [], "audio/x-matroska": ["mka"], "audio/x-mpegurl": ["m3u"], "audio/x-ms-wax": ["wax"], "audio/x-ms-wma": ["wma"], "audio/x-pn-realaudio": ["ram", "ra"], "audio/x-pn-realaudio-plugin": ["rmp"], "audio/x-realaudio": [], "audio/x-wav": [], "audio/xm": ["xm"], "chemical/x-cdx": ["cdx"], "chemical/x-cif": ["cif"], "chemical/x-cmdf": ["cmdf"], "chemical/x-cml": ["cml"], "chemical/x-csml": ["csml"], "chemical/x-xyz": ["xyz"], "font/collection": ["ttc"], "font/otf": ["otf"], "font/ttf": ["ttf"], "font/woff": ["woff"], "font/woff2": ["woff2"], "image/apng": ["apng"], "image/bmp": ["bmp"], "image/cgm": ["cgm"], "image/g3fax": ["g3"], "image/gif": ["gif"], "image/ief": ["ief"], "image/jp2": ["jp2", "jpg2"], "image/jpeg": ["jpeg", "jpg", "jpe"], "image/jpm": ["jpm"], "image/jpx": ["jpx", "jpf"], "image/ktx": ["ktx"], "image/png": ["png"], "image/prs.btif": ["btif"], "image/sgi": ["sgi"], "image/svg+xml": ["svg", "svgz"], "image/tiff": ["tiff", "tif"], "image/vnd.adobe.photoshop": ["psd"], "image/vnd.dece.graphic": ["uvi", "uvvi", "uvg", "uvvg"], "image/vnd.djvu": ["djvu", "djv"], "image/vnd.dvb.subtitle": [], "image/vnd.dwg": ["dwg"], "image/vnd.dxf": ["dxf"], "image/vnd.fastbidsheet": ["fbs"], "image/vnd.fpx": ["fpx"], "image/vnd.fst": ["fst"], "image/vnd.fujixerox.edmics-mmr": ["mmr"], "image/vnd.fujixerox.edmics-rlc": ["rlc"], "image/vnd.ms-modi": ["mdi"], "image/vnd.ms-photo": ["wdp"], "image/vnd.net-fpx": ["npx"], "image/vnd.wap.wbmp": ["wbmp"], "image/vnd.xiff": ["xif"], "image/webp": ["webp"], "image/x-3ds": ["3ds"], "image/x-cmu-raster": ["ras"], "image/x-cmx": ["cmx"], "image/x-freehand": ["fh", "fhc", "fh4", "fh5", "fh7"], "image/x-icon": ["ico"], "image/x-jng": ["jng"], "image/x-mrsid-image": ["sid"], "image/x-ms-bmp": [], "image/x-pcx": ["pcx"], "image/x-pict": ["pic", "pct"], "image/x-portable-anymap": ["pnm"], "image/x-portable-bitmap": ["pbm"], "image/x-portable-graymap": ["pgm"], "image/x-portable-pixmap": ["ppm"], "image/x-rgb": ["rgb"], "image/x-tga": ["tga"], "image/x-xbitmap": ["xbm"], "image/x-xpixmap": ["xpm"], "image/x-xwindowdump": ["xwd"], "message/rfc822": ["eml", "mime"], "model/gltf+json": ["gltf"], "model/gltf-binary": ["glb"], "model/iges": ["igs", "iges"], "model/mesh": ["msh", "mesh", "silo"], "model/vnd.collada+xml": ["dae"], "model/vnd.dwf": ["dwf"], "model/vnd.gdl": ["gdl"], "model/vnd.gtw": ["gtw"], "model/vnd.mts": ["mts"], "model/vnd.vtu": ["vtu"], "model/vrml": ["wrl", "vrml"], "model/x3d+binary": ["x3db", "x3dbz"], "model/x3d+vrml": ["x3dv", "x3dvz"], "model/x3d+xml": ["x3d", "x3dz"], "text/cache-manifest": ["appcache", "manifest"], "text/calendar": ["ics", "ifb"], "text/coffeescript": ["coffee", "litcoffee"], "text/css": ["css"], "text/csv": ["csv"], "text/hjson": ["hjson"], "text/html": ["html", "htm", "shtml"], "text/jade": ["jade"], "text/jsx": ["jsx"], "text/less": ["less"], "text/markdown": ["markdown", "md"], "text/mathml": ["mml"], "text/n3": ["n3"], "text/plain": ["txt", "text", "conf", "def", "list", "log", "in", "ini"], "text/prs.lines.tag": ["dsc"], "text/richtext": ["rtx"], "text/rtf": [], "text/sgml": ["sgml", "sgm"], "text/slim": ["slim", "slm"], "text/stylus": ["stylus", "styl"], "text/tab-separated-values": ["tsv"], "text/troff": ["t", "tr", "roff", "man", "me", "ms"], "text/turtle": ["ttl"], "text/uri-list": ["uri", "uris", "urls"], "text/vcard": ["vcard"], "text/vnd.curl": ["curl"], "text/vnd.curl.dcurl": ["dcurl"], "text/vnd.curl.mcurl": ["mcurl"], "text/vnd.curl.scurl": ["scurl"], "text/vnd.dvb.subtitle": ["sub"], "text/vnd.fly": ["fly"], "text/vnd.fmi.flexstor": ["flx"], "text/vnd.graphviz": ["gv"], "text/vnd.in3d.3dml": ["3dml"], "text/vnd.in3d.spot": ["spot"], "text/vnd.sun.j2me.app-descriptor": ["jad"], "text/vnd.wap.wml": ["wml"], "text/vnd.wap.wmlscript": ["wmls"], "text/vtt": ["vtt"], "text/x-asm": ["s", "asm"], "text/x-c": ["c", "cc", "cxx", "cpp", "h", "hh", "dic"], "text/x-component": ["htc"], "text/x-fortran": ["f", "for", "f77", "f90"], "text/x-handlebars-template": ["hbs"], "text/x-java-source": ["java"], "text/x-lua": ["lua"], "text/x-markdown": ["mkd"], "text/x-nfo": ["nfo"], "text/x-opml": ["opml"], "text/x-org": [], "text/x-pascal": ["p", "pas"], "text/x-processing": ["pde"], "text/x-sass": ["sass"], "text/x-scss": ["scss"], "text/x-setext": ["etx"], "text/x-sfv": ["sfv"], "text/x-suse-ymp": ["ymp"], "text/x-uuencode": ["uu"], "text/x-vcalendar": ["vcs"], "text/x-vcard": ["vcf"], "text/xml": [], "text/yaml": ["yaml", "yml"], "video/3gpp": ["3gp", "3gpp"], "video/3gpp2": ["3g2"], "video/h261": ["h261"], "video/h263": ["h263"], "video/h264": ["h264"], "video/jpeg": ["jpgv"], "video/jpm": ["jpgm"], "video/mj2": ["mj2", "mjp2"], "video/mp2t": ["ts"], "video/mp4": ["mp4", "mp4v", "mpg4"], "video/mpeg": ["mpeg", "mpg", "mpe", "m1v", "m2v"], "video/ogg": ["ogv"], "video/quicktime": ["qt", "mov"], "video/vnd.dece.hd": ["uvh", "uvvh"], "video/vnd.dece.mobile": ["uvm", "uvvm"], "video/vnd.dece.pd": ["uvp", "uvvp"], "video/vnd.dece.sd": ["uvs", "uvvs"], "video/vnd.dece.video": ["uvv", "uvvv"], "video/vnd.dvb.file": ["dvb"], "video/vnd.fvt": ["fvt"], "video/vnd.mpegurl": ["mxu", "m4u"], "video/vnd.ms-playready.media.pyv": ["pyv"], "video/vnd.uvvu.mp4": ["uvu", "uvvu"], "video/vnd.vivo": ["viv"], "video/webm": ["webm"], "video/x-f4v": ["f4v"], "video/x-fli": ["fli"], "video/x-flv": ["flv"], "video/x-m4v": ["m4v"], "video/x-matroska": ["mkv", "mk3d", "mks"], "video/x-mng": ["mng"], "video/x-ms-asf": ["asf", "asx"], "video/x-ms-vob": ["vob"], "video/x-ms-wm": ["wm"], "video/x-ms-wmv": ["wmv"], "video/x-ms-wmx": ["wmx"], "video/x-ms-wvx": ["wvx"], "video/x-msvideo": ["avi"], "video/x-sgi-movie": ["movie"], "video/x-smv": ["smv"], "x-conference/x-cooltalk": ["ice"] };
});

// node_modules/mime/mime.js
var require_mime = __commonJS((exports, module) => {
  var Mime = function() {
    this.types = Object.create(null);
    this.extensions = Object.create(null);
  };
  var path = import.meta.require("path");
  var fs = import.meta.require("fs");
  Mime.prototype.define = function(map) {
    for (var type in map) {
      var exts = map[type];
      for (var i = 0;i < exts.length; i++) {
        if (process.env.DEBUG_MIME && this.types[exts[i]]) {
          console.warn((this._loading || "define()").replace(/.*\//, ""), 'changes "' + exts[i] + '" extension type from ' + this.types[exts[i]] + " to " + type);
        }
        this.types[exts[i]] = type;
      }
      if (!this.extensions[type]) {
        this.extensions[type] = exts[0];
      }
    }
  };
  Mime.prototype.load = function(file) {
    this._loading = file;
    var map = {}, content = fs.readFileSync(file, "ascii"), lines = content.split(/[\r\n]+/);
    lines.forEach(function(line) {
      var fields = line.replace(/\s*#.*|^\s*|\s*$/g, "").split(/\s+/);
      map[fields.shift()] = fields;
    });
    this.define(map);
    this._loading = null;
  };
  Mime.prototype.lookup = function(path2, fallback) {
    var ext = path2.replace(/^.*[\.\/\\]/, "").toLowerCase();
    return this.types[ext] || fallback || this.default_type;
  };
  Mime.prototype.extension = function(mimeType) {
    var type = mimeType.match(/^\s*([^;\s]*)(?:;|\s|$)/)[1].toLowerCase();
    return this.extensions[type];
  };
  var mime2 = new Mime;
  mime2.define(require_types());
  mime2.default_type = mime2.lookup("bin");
  mime2.Mime = Mime;
  mime2.charsets = {
    lookup: function(mimeType, fallback) {
      return /^text\/|^application\/(javascript|json)/.test(mimeType) ? "UTF-8" : fallback;
    }
  };
  module.exports = mime2;
});

// node_modules/send/node_modules/ms/index.js
var require_ms5 = __commonJS((exports, module) => {
  var parse = function(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch (type) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return n * y;
      case "weeks":
      case "week":
      case "w":
        return n * w;
      case "days":
      case "day":
      case "d":
        return n * d;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return n * h;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return n * m;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return n * s;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return n;
      default:
        return;
    }
  };
  var fmtShort = function(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return Math.round(ms / d) + "d";
    }
    if (msAbs >= h) {
      return Math.round(ms / h) + "h";
    }
    if (msAbs >= m) {
      return Math.round(ms / m) + "m";
    }
    if (msAbs >= s) {
      return Math.round(ms / s) + "s";
    }
    return ms + "ms";
  };
  var fmtLong = function(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return plural(ms, msAbs, d, "day");
    }
    if (msAbs >= h) {
      return plural(ms, msAbs, h, "hour");
    }
    if (msAbs >= m) {
      return plural(ms, msAbs, m, "minute");
    }
    if (msAbs >= s) {
      return plural(ms, msAbs, s, "second");
    }
    return ms + " ms";
  };
  var plural = function(ms, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
  };
  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var w = d * 7;
  var y = d * 365.25;
  module.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
      return parse(val);
    } else if (type === "number" && isFinite(val)) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
  };
});

// node_modules/range-parser/index.js
var require_range_parser = __commonJS((exports, module) => {
  var rangeParser = function(size, str, options) {
    if (typeof str !== "string") {
      throw new TypeError("argument str must be a string");
    }
    var index = str.indexOf("=");
    if (index === -1) {
      return -2;
    }
    var arr = str.slice(index + 1).split(",");
    var ranges = [];
    ranges.type = str.slice(0, index);
    for (var i = 0;i < arr.length; i++) {
      var range = arr[i].split("-");
      var start = parseInt(range[0], 10);
      var end = parseInt(range[1], 10);
      if (isNaN(start)) {
        start = size - end;
        end = size - 1;
      } else if (isNaN(end)) {
        end = size - 1;
      }
      if (end > size - 1) {
        end = size - 1;
      }
      if (isNaN(start) || isNaN(end) || start > end || start < 0) {
        continue;
      }
      ranges.push({
        start,
        end
      });
    }
    if (ranges.length < 1) {
      return -1;
    }
    return options && options.combine ? combineRanges(ranges) : ranges;
  };
  var combineRanges = function(ranges) {
    var ordered = ranges.map(mapWithIndex).sort(sortByRangeStart);
    for (var j = 0, i = 1;i < ordered.length; i++) {
      var range = ordered[i];
      var current = ordered[j];
      if (range.start > current.end + 1) {
        ordered[++j] = range;
      } else if (range.end > current.end) {
        current.end = range.end;
        current.index = Math.min(current.index, range.index);
      }
    }
    ordered.length = j + 1;
    var combined = ordered.sort(sortByRangeIndex).map(mapWithoutIndex);
    combined.type = ranges.type;
    return combined;
  };
  var mapWithIndex = function(range, index) {
    return {
      start: range.start,
      end: range.end,
      index
    };
  };
  var mapWithoutIndex = function(range) {
    return {
      start: range.start,
      end: range.end
    };
  };
  var sortByRangeIndex = function(a, b) {
    return a.index - b.index;
  };
  var sortByRangeStart = function(a, b) {
    return a.start - b.start;
  };
  /*!
   * range-parser
   * Copyright(c) 2012-2014 TJ Holowaychuk
   * Copyright(c) 2015-2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = rangeParser;
});

// node_modules/send/index.js
var require_send = __commonJS((exports, module) => {
  var send = function(req, path2, options) {
    return new SendStream(req, path2, options);
  };
  var SendStream = function(req, path2, options) {
    Stream.call(this);
    var opts = options || {};
    this.options = opts;
    this.path = path2;
    this.req = req;
    this._acceptRanges = opts.acceptRanges !== undefined ? Boolean(opts.acceptRanges) : true;
    this._cacheControl = opts.cacheControl !== undefined ? Boolean(opts.cacheControl) : true;
    this._etag = opts.etag !== undefined ? Boolean(opts.etag) : true;
    this._dotfiles = opts.dotfiles !== undefined ? opts.dotfiles : "ignore";
    if (this._dotfiles !== "ignore" && this._dotfiles !== "allow" && this._dotfiles !== "deny") {
      throw new TypeError('dotfiles option must be "allow", "deny", or "ignore"');
    }
    this._hidden = Boolean(opts.hidden);
    if (opts.hidden !== undefined) {
      deprecate("hidden: use dotfiles: \'" + (this._hidden ? "allow" : "ignore") + "\' instead");
    }
    if (opts.dotfiles === undefined) {
      this._dotfiles = undefined;
    }
    this._extensions = opts.extensions !== undefined ? normalizeList(opts.extensions, "extensions option") : [];
    this._immutable = opts.immutable !== undefined ? Boolean(opts.immutable) : false;
    this._index = opts.index !== undefined ? normalizeList(opts.index, "index option") : ["index.html"];
    this._lastModified = opts.lastModified !== undefined ? Boolean(opts.lastModified) : true;
    this._maxage = opts.maxAge || opts.maxage;
    this._maxage = typeof this._maxage === "string" ? ms(this._maxage) : Number(this._maxage);
    this._maxage = !isNaN(this._maxage) ? Math.min(Math.max(0, this._maxage), MAX_MAXAGE) : 0;
    this._root = opts.root ? resolve(opts.root) : null;
    if (!this._root && opts.from) {
      this.from(opts.from);
    }
  };
  var clearHeaders = function(res) {
    var headers = getHeaderNames(res);
    for (var i = 0;i < headers.length; i++) {
      res.removeHeader(headers[i]);
    }
  };
  var collapseLeadingSlashes = function(str) {
    for (var i = 0;i < str.length; i++) {
      if (str[i] !== "/") {
        break;
      }
    }
    return i > 1 ? "/" + str.substr(i) : str;
  };
  var containsDotFile = function(parts) {
    for (var i = 0;i < parts.length; i++) {
      var part = parts[i];
      if (part.length > 1 && part[0] === ".") {
        return true;
      }
    }
    return false;
  };
  var contentRange = function(type, size, range) {
    return type + " " + (range ? range.start + "-" + range.end : "*") + "/" + size;
  };
  var createHtmlDocument = function(title, body) {
    return '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>' + title + "</title>\n</head>\n<body>\n<pre>" + body + "</pre>\n</body>\n</html>\n";
  };
  var createHttpError = function(status, err) {
    if (!err) {
      return createError(status);
    }
    return err instanceof Error ? createError(status, err, { expose: false }) : createError(status, err);
  };
  var decode = function(path2) {
    try {
      return decodeURIComponent(path2);
    } catch (err) {
      return -1;
    }
  };
  var getHeaderNames = function(res) {
    return typeof res.getHeaderNames !== "function" ? Object.keys(res._headers || {}) : res.getHeaderNames();
  };
  var hasListeners = function(emitter, type) {
    var count = typeof emitter.listenerCount !== "function" ? emitter.listeners(type).length : emitter.listenerCount(type);
    return count > 0;
  };
  var headersSent = function(res) {
    return typeof res.headersSent !== "boolean" ? Boolean(res._header) : res.headersSent;
  };
  var normalizeList = function(val, name) {
    var list = [].concat(val || []);
    for (var i = 0;i < list.length; i++) {
      if (typeof list[i] !== "string") {
        throw new TypeError(name + " must be array of strings or false");
      }
    }
    return list;
  };
  var parseHttpDate = function(date) {
    var timestamp = date && Date.parse(date);
    return typeof timestamp === "number" ? timestamp : NaN;
  };
  var parseTokenList = function(str) {
    var end = 0;
    var list = [];
    var start = 0;
    for (var i = 0, len = str.length;i < len; i++) {
      switch (str.charCodeAt(i)) {
        case 32:
          if (start === end) {
            start = end = i + 1;
          }
          break;
        case 44:
          if (start !== end) {
            list.push(str.substring(start, end));
          }
          start = end = i + 1;
          break;
        default:
          end = i + 1;
          break;
      }
    }
    if (start !== end) {
      list.push(str.substring(start, end));
    }
    return list;
  };
  var setHeaders = function(res, headers) {
    var keys = Object.keys(headers);
    for (var i = 0;i < keys.length; i++) {
      var key = keys[i];
      res.setHeader(key, headers[key]);
    }
  };
  /*!
   * send
   * Copyright(c) 2012 TJ Holowaychuk
   * Copyright(c) 2014-2022 Douglas Christopher Wilson
   * MIT Licensed
   */
  var createError = require_http_errors();
  var debug2 = require_src4()("send");
  var deprecate = require_depd()("send");
  var destroy = require_destroy();
  var encodeUrl = require_encodeurl();
  var escapeHtml = require_escape_html();
  var etag = require_etag();
  var fresh = require_fresh();
  var fs = import.meta.require("fs");
  var mime2 = require_mime();
  var ms = require_ms5();
  var onFinished = require_on_finished();
  var parseRange = require_range_parser();
  var path = import.meta.require("path");
  var statuses = require_statuses();
  var Stream = import.meta.require("stream");
  var util = import.meta.require("util");
  var extname = path.extname;
  var join = path.join;
  var normalize = path.normalize;
  var resolve = path.resolve;
  var sep = path.sep;
  var BYTES_RANGE_REGEXP = /^ *bytes=/;
  var MAX_MAXAGE = 60 * 60 * 24 * 365 * 1000;
  var UP_PATH_REGEXP = /(?:^|[\\/])\.\.(?:[\\/]|$)/;
  module.exports = send;
  module.exports.mime = mime2;
  util.inherits(SendStream, Stream);
  SendStream.prototype.etag = deprecate.function(function etag(val) {
    this._etag = Boolean(val);
    debug2("etag %s", this._etag);
    return this;
  }, "send.etag: pass etag as option");
  SendStream.prototype.hidden = deprecate.function(function hidden(val) {
    this._hidden = Boolean(val);
    this._dotfiles = undefined;
    debug2("hidden %s", this._hidden);
    return this;
  }, "send.hidden: use dotfiles option");
  SendStream.prototype.index = deprecate.function(function index(paths) {
    var index = !paths ? [] : normalizeList(paths, "paths argument");
    debug2("index %o", paths);
    this._index = index;
    return this;
  }, "send.index: pass index as option");
  SendStream.prototype.root = function root(path2) {
    this._root = resolve(String(path2));
    debug2("root %s", this._root);
    return this;
  };
  SendStream.prototype.from = deprecate.function(SendStream.prototype.root, "send.from: pass root as option");
  SendStream.prototype.root = deprecate.function(SendStream.prototype.root, "send.root: pass root as option");
  SendStream.prototype.maxage = deprecate.function(function maxage(maxAge) {
    this._maxage = typeof maxAge === "string" ? ms(maxAge) : Number(maxAge);
    this._maxage = !isNaN(this._maxage) ? Math.min(Math.max(0, this._maxage), MAX_MAXAGE) : 0;
    debug2("max-age %d", this._maxage);
    return this;
  }, "send.maxage: pass maxAge as option");
  SendStream.prototype.error = function error(status, err) {
    if (hasListeners(this, "error")) {
      return this.emit("error", createHttpError(status, err));
    }
    var res = this.res;
    var msg = statuses.message[status] || String(status);
    var doc = createHtmlDocument("Error", escapeHtml(msg));
    clearHeaders(res);
    if (err && err.headers) {
      setHeaders(res, err.headers);
    }
    res.statusCode = status;
    res.setHeader("Content-Type", "text/html; charset=UTF-8");
    res.setHeader("Content-Length", Buffer.byteLength(doc));
    res.setHeader("Content-Security-Policy", "default-src 'none'");
    res.setHeader("X-Content-Type-Options", "nosniff");
    res.end(doc);
  };
  SendStream.prototype.hasTrailingSlash = function hasTrailingSlash() {
    return this.path[this.path.length - 1] === "/";
  };
  SendStream.prototype.isConditionalGET = function isConditionalGET() {
    return this.req.headers["if-match"] || this.req.headers["if-unmodified-since"] || this.req.headers["if-none-match"] || this.req.headers["if-modified-since"];
  };
  SendStream.prototype.isPreconditionFailure = function isPreconditionFailure() {
    var req = this.req;
    var res = this.res;
    var match = req.headers["if-match"];
    if (match) {
      var etag2 = res.getHeader("ETag");
      return !etag2 || match !== "*" && parseTokenList(match).every(function(match2) {
        return match2 !== etag2 && match2 !== "W/" + etag2 && "W/" + match2 !== etag2;
      });
    }
    var unmodifiedSince = parseHttpDate(req.headers["if-unmodified-since"]);
    if (!isNaN(unmodifiedSince)) {
      var lastModified = parseHttpDate(res.getHeader("Last-Modified"));
      return isNaN(lastModified) || lastModified > unmodifiedSince;
    }
    return false;
  };
  SendStream.prototype.removeContentHeaderFields = function removeContentHeaderFields() {
    var res = this.res;
    res.removeHeader("Content-Encoding");
    res.removeHeader("Content-Language");
    res.removeHeader("Content-Length");
    res.removeHeader("Content-Range");
    res.removeHeader("Content-Type");
  };
  SendStream.prototype.notModified = function notModified() {
    var res = this.res;
    debug2("not modified");
    this.removeContentHeaderFields();
    res.statusCode = 304;
    res.end();
  };
  SendStream.prototype.headersAlreadySent = function headersAlreadySent() {
    var err = new Error("Can\'t set headers after they are sent.");
    debug2("headers already sent");
    this.error(500, err);
  };
  SendStream.prototype.isCachable = function isCachable() {
    var statusCode = this.res.statusCode;
    return statusCode >= 200 && statusCode < 300 || statusCode === 304;
  };
  SendStream.prototype.onStatError = function onStatError(error) {
    switch (error.code) {
      case "ENAMETOOLONG":
      case "ENOENT":
      case "ENOTDIR":
        this.error(404, error);
        break;
      default:
        this.error(500, error);
        break;
    }
  };
  SendStream.prototype.isFresh = function isFresh() {
    return fresh(this.req.headers, {
      etag: this.res.getHeader("ETag"),
      "last-modified": this.res.getHeader("Last-Modified")
    });
  };
  SendStream.prototype.isRangeFresh = function isRangeFresh() {
    var ifRange = this.req.headers["if-range"];
    if (!ifRange) {
      return true;
    }
    if (ifRange.indexOf('"') !== -1) {
      var etag2 = this.res.getHeader("ETag");
      return Boolean(etag2 && ifRange.indexOf(etag2) !== -1);
    }
    var lastModified = this.res.getHeader("Last-Modified");
    return parseHttpDate(lastModified) <= parseHttpDate(ifRange);
  };
  SendStream.prototype.redirect = function redirect(path2) {
    var res = this.res;
    if (hasListeners(this, "directory")) {
      this.emit("directory", res, path2);
      return;
    }
    if (this.hasTrailingSlash()) {
      this.error(403);
      return;
    }
    var loc = encodeUrl(collapseLeadingSlashes(this.path + "/"));
    var doc = createHtmlDocument("Redirecting", 'Redirecting to <a href="' + escapeHtml(loc) + '">' + escapeHtml(loc) + "</a>");
    res.statusCode = 301;
    res.setHeader("Content-Type", "text/html; charset=UTF-8");
    res.setHeader("Content-Length", Buffer.byteLength(doc));
    res.setHeader("Content-Security-Policy", "default-src 'none'");
    res.setHeader("X-Content-Type-Options", "nosniff");
    res.setHeader("Location", loc);
    res.end(doc);
  };
  SendStream.prototype.pipe = function pipe(res) {
    var root = this._root;
    this.res = res;
    var path2 = decode(this.path);
    if (path2 === -1) {
      this.error(400);
      return res;
    }
    if (~path2.indexOf("\0")) {
      this.error(400);
      return res;
    }
    var parts;
    if (root !== null) {
      if (path2) {
        path2 = normalize("." + sep + path2);
      }
      if (UP_PATH_REGEXP.test(path2)) {
        debug2('malicious path "%s"', path2);
        this.error(403);
        return res;
      }
      parts = path2.split(sep);
      path2 = normalize(join(root, path2));
    } else {
      if (UP_PATH_REGEXP.test(path2)) {
        debug2('malicious path "%s"', path2);
        this.error(403);
        return res;
      }
      parts = normalize(path2).split(sep);
      path2 = resolve(path2);
    }
    if (containsDotFile(parts)) {
      var access = this._dotfiles;
      if (access === undefined) {
        access = parts[parts.length - 1][0] === "." ? this._hidden ? "allow" : "ignore" : "allow";
      }
      debug2('%s dotfile "%s"', access, path2);
      switch (access) {
        case "allow":
          break;
        case "deny":
          this.error(403);
          return res;
        case "ignore":
        default:
          this.error(404);
          return res;
      }
    }
    if (this._index.length && this.hasTrailingSlash()) {
      this.sendIndex(path2);
      return res;
    }
    this.sendFile(path2);
    return res;
  };
  SendStream.prototype.send = function send(path2, stat) {
    var len = stat.size;
    var options = this.options;
    var opts = {};
    var res = this.res;
    var req = this.req;
    var ranges = req.headers.range;
    var offset = options.start || 0;
    if (headersSent(res)) {
      this.headersAlreadySent();
      return;
    }
    debug2('pipe "%s"', path2);
    this.setHeader(path2, stat);
    this.type(path2);
    if (this.isConditionalGET()) {
      if (this.isPreconditionFailure()) {
        this.error(412);
        return;
      }
      if (this.isCachable() && this.isFresh()) {
        this.notModified();
        return;
      }
    }
    len = Math.max(0, len - offset);
    if (options.end !== undefined) {
      var bytes = options.end - offset + 1;
      if (len > bytes)
        len = bytes;
    }
    if (this._acceptRanges && BYTES_RANGE_REGEXP.test(ranges)) {
      ranges = parseRange(len, ranges, {
        combine: true
      });
      if (!this.isRangeFresh()) {
        debug2("range stale");
        ranges = -2;
      }
      if (ranges === -1) {
        debug2("range unsatisfiable");
        res.setHeader("Content-Range", contentRange("bytes", len));
        return this.error(416, {
          headers: { "Content-Range": res.getHeader("Content-Range") }
        });
      }
      if (ranges !== -2 && ranges.length === 1) {
        debug2("range %j", ranges);
        res.statusCode = 206;
        res.setHeader("Content-Range", contentRange("bytes", len, ranges[0]));
        offset += ranges[0].start;
        len = ranges[0].end - ranges[0].start + 1;
      }
    }
    for (var prop in options) {
      opts[prop] = options[prop];
    }
    opts.start = offset;
    opts.end = Math.max(offset, offset + len - 1);
    res.setHeader("Content-Length", len);
    if (req.method === "HEAD") {
      res.end();
      return;
    }
    this.stream(path2, opts);
  };
  SendStream.prototype.sendFile = function sendFile(path2) {
    var i = 0;
    var self2 = this;
    debug2('stat "%s"', path2);
    fs.stat(path2, function onstat(err, stat) {
      if (err && err.code === "ENOENT" && !extname(path2) && path2[path2.length - 1] !== sep) {
        return next(err);
      }
      if (err)
        return self2.onStatError(err);
      if (stat.isDirectory())
        return self2.redirect(path2);
      self2.emit("file", path2, stat);
      self2.send(path2, stat);
    });
    function next(err) {
      if (self2._extensions.length <= i) {
        return err ? self2.onStatError(err) : self2.error(404);
      }
      var p = path2 + "." + self2._extensions[i++];
      debug2('stat "%s"', p);
      fs.stat(p, function(err2, stat) {
        if (err2)
          return next(err2);
        if (stat.isDirectory())
          return next();
        self2.emit("file", p, stat);
        self2.send(p, stat);
      });
    }
  };
  SendStream.prototype.sendIndex = function sendIndex(path2) {
    var i = -1;
    var self2 = this;
    function next(err) {
      if (++i >= self2._index.length) {
        if (err)
          return self2.onStatError(err);
        return self2.error(404);
      }
      var p = join(path2, self2._index[i]);
      debug2('stat "%s"', p);
      fs.stat(p, function(err2, stat) {
        if (err2)
          return next(err2);
        if (stat.isDirectory())
          return next();
        self2.emit("file", p, stat);
        self2.send(p, stat);
      });
    }
    next();
  };
  SendStream.prototype.stream = function stream(path2, options) {
    var self2 = this;
    var res = this.res;
    var stream = fs.createReadStream(path2, options);
    this.emit("stream", stream);
    stream.pipe(res);
    function cleanup() {
      destroy(stream, true);
    }
    onFinished(res, cleanup);
    stream.on("error", function onerror(err) {
      cleanup();
      self2.onStatError(err);
    });
    stream.on("end", function onend() {
      self2.emit("end");
    });
  };
  SendStream.prototype.type = function type(path2) {
    var res = this.res;
    if (res.getHeader("Content-Type"))
      return;
    var type = mime2.lookup(path2);
    if (!type) {
      debug2("no content-type");
      return;
    }
    var charset = mime2.charsets.lookup(type);
    debug2("content-type %s", type);
    res.setHeader("Content-Type", type + (charset ? "; charset=" + charset : ""));
  };
  SendStream.prototype.setHeader = function setHeader(path2, stat) {
    var res = this.res;
    this.emit("headers", res, path2, stat);
    if (this._acceptRanges && !res.getHeader("Accept-Ranges")) {
      debug2("accept ranges");
      res.setHeader("Accept-Ranges", "bytes");
    }
    if (this._cacheControl && !res.getHeader("Cache-Control")) {
      var cacheControl = "public, max-age=" + Math.floor(this._maxage / 1000);
      if (this._immutable) {
        cacheControl += ", immutable";
      }
      debug2("cache-control %s", cacheControl);
      res.setHeader("Cache-Control", cacheControl);
    }
    if (this._lastModified && !res.getHeader("Last-Modified")) {
      var modified = stat.mtime.toUTCString();
      debug2("modified %s", modified);
      res.setHeader("Last-Modified", modified);
    }
    if (this._etag && !res.getHeader("ETag")) {
      var val = etag(stat);
      debug2("etag %s", val);
      res.setHeader("ETag", val);
    }
  };
});

// node_modules/forwarded/index.js
var require_forwarded = __commonJS((exports, module) => {
  var forwarded = function(req) {
    if (!req) {
      throw new TypeError("argument req is required");
    }
    var proxyAddrs = parse(req.headers["x-forwarded-for"] || "");
    var socketAddr = getSocketAddr(req);
    var addrs = [socketAddr].concat(proxyAddrs);
    return addrs;
  };
  var getSocketAddr = function(req) {
    return req.socket ? req.socket.remoteAddress : req.connection.remoteAddress;
  };
  var parse = function(header) {
    var end = header.length;
    var list = [];
    var start = header.length;
    for (var i = header.length - 1;i >= 0; i--) {
      switch (header.charCodeAt(i)) {
        case 32:
          if (start === end) {
            start = end = i;
          }
          break;
        case 44:
          if (start !== end) {
            list.push(header.substring(start, end));
          }
          start = end = i;
          break;
        default:
          start = i;
          break;
      }
    }
    if (start !== end) {
      list.push(header.substring(start, end));
    }
    return list;
  };
  /*!
   * forwarded
   * Copyright(c) 2014-2017 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = forwarded;
});

// node_modules/ipaddr.js/lib/ipaddr.js
var require_ipaddr = __commonJS((exports, module) => {
  (function() {
    var expandIPv6, ipaddr, ipv4Part, ipv4Regexes, ipv6Part, ipv6Regexes, matchCIDR, root, zoneIndex;
    ipaddr = {};
    root = this;
    if (typeof module !== "undefined" && module !== null && exports) {
      module.exports = ipaddr;
    } else {
      root["ipaddr"] = ipaddr;
    }
    matchCIDR = function(first, second, partSize, cidrBits) {
      var part, shift;
      if (first.length !== second.length) {
        throw new Error("ipaddr: cannot match CIDR for objects with different lengths");
      }
      part = 0;
      while (cidrBits > 0) {
        shift = partSize - cidrBits;
        if (shift < 0) {
          shift = 0;
        }
        if (first[part] >> shift !== second[part] >> shift) {
          return false;
        }
        cidrBits -= partSize;
        part += 1;
      }
      return true;
    };
    ipaddr.subnetMatch = function(address, rangeList, defaultName) {
      var k, len, rangeName, rangeSubnets, subnet;
      if (defaultName == null) {
        defaultName = "unicast";
      }
      for (rangeName in rangeList) {
        rangeSubnets = rangeList[rangeName];
        if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {
          rangeSubnets = [rangeSubnets];
        }
        for (k = 0, len = rangeSubnets.length;k < len; k++) {
          subnet = rangeSubnets[k];
          if (address.kind() === subnet[0].kind()) {
            if (address.match.apply(address, subnet)) {
              return rangeName;
            }
          }
        }
      }
      return defaultName;
    };
    ipaddr.IPv4 = function() {
      function IPv4(octets) {
        var k, len, octet;
        if (octets.length !== 4) {
          throw new Error("ipaddr: ipv4 octet count should be 4");
        }
        for (k = 0, len = octets.length;k < len; k++) {
          octet = octets[k];
          if (!(0 <= octet && octet <= 255)) {
            throw new Error("ipaddr: ipv4 octet should fit in 8 bits");
          }
        }
        this.octets = octets;
      }
      IPv4.prototype.kind = function() {
        return "ipv4";
      };
      IPv4.prototype.toString = function() {
        return this.octets.join(".");
      };
      IPv4.prototype.toNormalizedString = function() {
        return this.toString();
      };
      IPv4.prototype.toByteArray = function() {
        return this.octets.slice(0);
      };
      IPv4.prototype.match = function(other, cidrRange) {
        var ref;
        if (cidrRange === undefined) {
          ref = other, other = ref[0], cidrRange = ref[1];
        }
        if (other.kind() !== "ipv4") {
          throw new Error("ipaddr: cannot match ipv4 address with non-ipv4 one");
        }
        return matchCIDR(this.octets, other.octets, 8, cidrRange);
      };
      IPv4.prototype.SpecialRanges = {
        unspecified: [[new IPv4([0, 0, 0, 0]), 8]],
        broadcast: [[new IPv4([255, 255, 255, 255]), 32]],
        multicast: [[new IPv4([224, 0, 0, 0]), 4]],
        linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],
        loopback: [[new IPv4([127, 0, 0, 0]), 8]],
        carrierGradeNat: [[new IPv4([100, 64, 0, 0]), 10]],
        private: [[new IPv4([10, 0, 0, 0]), 8], [new IPv4([172, 16, 0, 0]), 12], [new IPv4([192, 168, 0, 0]), 16]],
        reserved: [[new IPv4([192, 0, 0, 0]), 24], [new IPv4([192, 0, 2, 0]), 24], [new IPv4([192, 88, 99, 0]), 24], [new IPv4([198, 51, 100, 0]), 24], [new IPv4([203, 0, 113, 0]), 24], [new IPv4([240, 0, 0, 0]), 4]]
      };
      IPv4.prototype.range = function() {
        return ipaddr.subnetMatch(this, this.SpecialRanges);
      };
      IPv4.prototype.toIPv4MappedAddress = function() {
        return ipaddr.IPv6.parse("::ffff:" + this.toString());
      };
      IPv4.prototype.prefixLengthFromSubnetMask = function() {
        var cidr, i, k, octet, stop, zeros, zerotable;
        zerotable = {
          0: 8,
          128: 7,
          192: 6,
          224: 5,
          240: 4,
          248: 3,
          252: 2,
          254: 1,
          255: 0
        };
        cidr = 0;
        stop = false;
        for (i = k = 3;k >= 0; i = k += -1) {
          octet = this.octets[i];
          if (octet in zerotable) {
            zeros = zerotable[octet];
            if (stop && zeros !== 0) {
              return null;
            }
            if (zeros !== 8) {
              stop = true;
            }
            cidr += zeros;
          } else {
            return null;
          }
        }
        return 32 - cidr;
      };
      return IPv4;
    }();
    ipv4Part = "(0?\\d+|0x[a-f0-9]+)";
    ipv4Regexes = {
      fourOctet: new RegExp("^" + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "$", "i"),
      longValue: new RegExp("^" + ipv4Part + "$", "i")
    };
    ipaddr.IPv4.parser = function(string) {
      var match, parseIntAuto, part, shift, value;
      parseIntAuto = function(string2) {
        if (string2[0] === "0" && string2[1] !== "x") {
          return parseInt(string2, 8);
        } else {
          return parseInt(string2);
        }
      };
      if (match = string.match(ipv4Regexes.fourOctet)) {
        return function() {
          var k, len, ref, results;
          ref = match.slice(1, 6);
          results = [];
          for (k = 0, len = ref.length;k < len; k++) {
            part = ref[k];
            results.push(parseIntAuto(part));
          }
          return results;
        }();
      } else if (match = string.match(ipv4Regexes.longValue)) {
        value = parseIntAuto(match[1]);
        if (value > 4294967295 || value < 0) {
          throw new Error("ipaddr: address outside defined range");
        }
        return function() {
          var k, results;
          results = [];
          for (shift = k = 0;k <= 24; shift = k += 8) {
            results.push(value >> shift & 255);
          }
          return results;
        }().reverse();
      } else {
        return null;
      }
    };
    ipaddr.IPv6 = function() {
      function IPv6(parts, zoneId) {
        var i, k, l, len, part, ref;
        if (parts.length === 16) {
          this.parts = [];
          for (i = k = 0;k <= 14; i = k += 2) {
            this.parts.push(parts[i] << 8 | parts[i + 1]);
          }
        } else if (parts.length === 8) {
          this.parts = parts;
        } else {
          throw new Error("ipaddr: ipv6 part count should be 8 or 16");
        }
        ref = this.parts;
        for (l = 0, len = ref.length;l < len; l++) {
          part = ref[l];
          if (!(0 <= part && part <= 65535)) {
            throw new Error("ipaddr: ipv6 part should fit in 16 bits");
          }
        }
        if (zoneId) {
          this.zoneId = zoneId;
        }
      }
      IPv6.prototype.kind = function() {
        return "ipv6";
      };
      IPv6.prototype.toString = function() {
        return this.toNormalizedString().replace(/((^|:)(0(:|$))+)/, "::");
      };
      IPv6.prototype.toRFC5952String = function() {
        var bestMatchIndex, bestMatchLength, match, regex, string;
        regex = /((^|:)(0(:|$)){2,})/g;
        string = this.toNormalizedString();
        bestMatchIndex = 0;
        bestMatchLength = -1;
        while (match = regex.exec(string)) {
          if (match[0].length > bestMatchLength) {
            bestMatchIndex = match.index;
            bestMatchLength = match[0].length;
          }
        }
        if (bestMatchLength < 0) {
          return string;
        }
        return string.substring(0, bestMatchIndex) + "::" + string.substring(bestMatchIndex + bestMatchLength);
      };
      IPv6.prototype.toByteArray = function() {
        var bytes, k, len, part, ref;
        bytes = [];
        ref = this.parts;
        for (k = 0, len = ref.length;k < len; k++) {
          part = ref[k];
          bytes.push(part >> 8);
          bytes.push(part & 255);
        }
        return bytes;
      };
      IPv6.prototype.toNormalizedString = function() {
        var addr, part, suffix;
        addr = function() {
          var k, len, ref, results;
          ref = this.parts;
          results = [];
          for (k = 0, len = ref.length;k < len; k++) {
            part = ref[k];
            results.push(part.toString(16));
          }
          return results;
        }.call(this).join(":");
        suffix = "";
        if (this.zoneId) {
          suffix = "%" + this.zoneId;
        }
        return addr + suffix;
      };
      IPv6.prototype.toFixedLengthString = function() {
        var addr, part, suffix;
        addr = function() {
          var k, len, ref, results;
          ref = this.parts;
          results = [];
          for (k = 0, len = ref.length;k < len; k++) {
            part = ref[k];
            results.push(part.toString(16).padStart(4, "0"));
          }
          return results;
        }.call(this).join(":");
        suffix = "";
        if (this.zoneId) {
          suffix = "%" + this.zoneId;
        }
        return addr + suffix;
      };
      IPv6.prototype.match = function(other, cidrRange) {
        var ref;
        if (cidrRange === undefined) {
          ref = other, other = ref[0], cidrRange = ref[1];
        }
        if (other.kind() !== "ipv6") {
          throw new Error("ipaddr: cannot match ipv6 address with non-ipv6 one");
        }
        return matchCIDR(this.parts, other.parts, 16, cidrRange);
      };
      IPv6.prototype.SpecialRanges = {
        unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],
        linkLocal: [new IPv6([65152, 0, 0, 0, 0, 0, 0, 0]), 10],
        multicast: [new IPv6([65280, 0, 0, 0, 0, 0, 0, 0]), 8],
        loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],
        uniqueLocal: [new IPv6([64512, 0, 0, 0, 0, 0, 0, 0]), 7],
        ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 65535, 0, 0]), 96],
        rfc6145: [new IPv6([0, 0, 0, 0, 65535, 0, 0, 0]), 96],
        rfc6052: [new IPv6([100, 65435, 0, 0, 0, 0, 0, 0]), 96],
        "6to4": [new IPv6([8194, 0, 0, 0, 0, 0, 0, 0]), 16],
        teredo: [new IPv6([8193, 0, 0, 0, 0, 0, 0, 0]), 32],
        reserved: [[new IPv6([8193, 3512, 0, 0, 0, 0, 0, 0]), 32]]
      };
      IPv6.prototype.range = function() {
        return ipaddr.subnetMatch(this, this.SpecialRanges);
      };
      IPv6.prototype.isIPv4MappedAddress = function() {
        return this.range() === "ipv4Mapped";
      };
      IPv6.prototype.toIPv4Address = function() {
        var high, low, ref;
        if (!this.isIPv4MappedAddress()) {
          throw new Error("ipaddr: trying to convert a generic ipv6 address to ipv4");
        }
        ref = this.parts.slice(-2), high = ref[0], low = ref[1];
        return new ipaddr.IPv4([high >> 8, high & 255, low >> 8, low & 255]);
      };
      IPv6.prototype.prefixLengthFromSubnetMask = function() {
        var cidr, i, k, part, stop, zeros, zerotable;
        zerotable = {
          0: 16,
          32768: 15,
          49152: 14,
          57344: 13,
          61440: 12,
          63488: 11,
          64512: 10,
          65024: 9,
          65280: 8,
          65408: 7,
          65472: 6,
          65504: 5,
          65520: 4,
          65528: 3,
          65532: 2,
          65534: 1,
          65535: 0
        };
        cidr = 0;
        stop = false;
        for (i = k = 7;k >= 0; i = k += -1) {
          part = this.parts[i];
          if (part in zerotable) {
            zeros = zerotable[part];
            if (stop && zeros !== 0) {
              return null;
            }
            if (zeros !== 16) {
              stop = true;
            }
            cidr += zeros;
          } else {
            return null;
          }
        }
        return 128 - cidr;
      };
      return IPv6;
    }();
    ipv6Part = "(?:[0-9a-f]+::?)+";
    zoneIndex = "%[0-9a-z]{1,}";
    ipv6Regexes = {
      zoneIndex: new RegExp(zoneIndex, "i"),
      native: new RegExp("^(::)?(" + ipv6Part + ")?([0-9a-f]+)?(::)?(" + zoneIndex + ")?$", "i"),
      transitional: new RegExp("^((?:" + ipv6Part + ")|(?:::)(?:" + ipv6Part + ")?)" + (ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part) + ("(" + zoneIndex + ")?$"), "i")
    };
    expandIPv6 = function(string, parts) {
      var colonCount, lastColon, part, replacement, replacementCount, zoneId;
      if (string.indexOf("::") !== string.lastIndexOf("::")) {
        return null;
      }
      zoneId = (string.match(ipv6Regexes["zoneIndex"]) || [])[0];
      if (zoneId) {
        zoneId = zoneId.substring(1);
        string = string.replace(/%.+$/, "");
      }
      colonCount = 0;
      lastColon = -1;
      while ((lastColon = string.indexOf(":", lastColon + 1)) >= 0) {
        colonCount++;
      }
      if (string.substr(0, 2) === "::") {
        colonCount--;
      }
      if (string.substr(-2, 2) === "::") {
        colonCount--;
      }
      if (colonCount > parts) {
        return null;
      }
      replacementCount = parts - colonCount;
      replacement = ":";
      while (replacementCount--) {
        replacement += "0:";
      }
      string = string.replace("::", replacement);
      if (string[0] === ":") {
        string = string.slice(1);
      }
      if (string[string.length - 1] === ":") {
        string = string.slice(0, -1);
      }
      parts = function() {
        var k, len, ref, results;
        ref = string.split(":");
        results = [];
        for (k = 0, len = ref.length;k < len; k++) {
          part = ref[k];
          results.push(parseInt(part, 16));
        }
        return results;
      }();
      return {
        parts,
        zoneId
      };
    };
    ipaddr.IPv6.parser = function(string) {
      var addr, k, len, match, octet, octets, zoneId;
      if (ipv6Regexes["native"].test(string)) {
        return expandIPv6(string, 8);
      } else if (match = string.match(ipv6Regexes["transitional"])) {
        zoneId = match[6] || "";
        addr = expandIPv6(match[1].slice(0, -1) + zoneId, 6);
        if (addr.parts) {
          octets = [parseInt(match[2]), parseInt(match[3]), parseInt(match[4]), parseInt(match[5])];
          for (k = 0, len = octets.length;k < len; k++) {
            octet = octets[k];
            if (!(0 <= octet && octet <= 255)) {
              return null;
            }
          }
          addr.parts.push(octets[0] << 8 | octets[1]);
          addr.parts.push(octets[2] << 8 | octets[3]);
          return {
            parts: addr.parts,
            zoneId: addr.zoneId
          };
        }
      }
      return null;
    };
    ipaddr.IPv4.isIPv4 = ipaddr.IPv6.isIPv6 = function(string) {
      return this.parser(string) !== null;
    };
    ipaddr.IPv4.isValid = function(string) {
      var e;
      try {
        new this(this.parser(string));
        return true;
      } catch (error1) {
        e = error1;
        return false;
      }
    };
    ipaddr.IPv4.isValidFourPartDecimal = function(string) {
      if (ipaddr.IPv4.isValid(string) && string.match(/^(0|[1-9]\d*)(\.(0|[1-9]\d*)){3}$/)) {
        return true;
      } else {
        return false;
      }
    };
    ipaddr.IPv6.isValid = function(string) {
      var addr, e;
      if (typeof string === "string" && string.indexOf(":") === -1) {
        return false;
      }
      try {
        addr = this.parser(string);
        new this(addr.parts, addr.zoneId);
        return true;
      } catch (error1) {
        e = error1;
        return false;
      }
    };
    ipaddr.IPv4.parse = function(string) {
      var parts;
      parts = this.parser(string);
      if (parts === null) {
        throw new Error("ipaddr: string is not formatted like ip address");
      }
      return new this(parts);
    };
    ipaddr.IPv6.parse = function(string) {
      var addr;
      addr = this.parser(string);
      if (addr.parts === null) {
        throw new Error("ipaddr: string is not formatted like ip address");
      }
      return new this(addr.parts, addr.zoneId);
    };
    ipaddr.IPv4.parseCIDR = function(string) {
      var maskLength, match, parsed;
      if (match = string.match(/^(.+)\/(\d+)$/)) {
        maskLength = parseInt(match[2]);
        if (maskLength >= 0 && maskLength <= 32) {
          parsed = [this.parse(match[1]), maskLength];
          Object.defineProperty(parsed, "toString", {
            value: function() {
              return this.join("/");
            }
          });
          return parsed;
        }
      }
      throw new Error("ipaddr: string is not formatted like an IPv4 CIDR range");
    };
    ipaddr.IPv4.subnetMaskFromPrefixLength = function(prefix) {
      var filledOctetCount, j, octets;
      prefix = parseInt(prefix);
      if (prefix < 0 || prefix > 32) {
        throw new Error("ipaddr: invalid IPv4 prefix length");
      }
      octets = [0, 0, 0, 0];
      j = 0;
      filledOctetCount = Math.floor(prefix / 8);
      while (j < filledOctetCount) {
        octets[j] = 255;
        j++;
      }
      if (filledOctetCount < 4) {
        octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - prefix % 8;
      }
      return new this(octets);
    };
    ipaddr.IPv4.broadcastAddressFromCIDR = function(string) {
      var cidr, error, i, ipInterfaceOctets, octets, subnetMaskOctets;
      try {
        cidr = this.parseCIDR(string);
        ipInterfaceOctets = cidr[0].toByteArray();
        subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
        octets = [];
        i = 0;
        while (i < 4) {
          octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);
          i++;
        }
        return new this(octets);
      } catch (error1) {
        error = error1;
        throw new Error("ipaddr: the address does not have IPv4 CIDR format");
      }
    };
    ipaddr.IPv4.networkAddressFromCIDR = function(string) {
      var cidr, error, i, ipInterfaceOctets, octets, subnetMaskOctets;
      try {
        cidr = this.parseCIDR(string);
        ipInterfaceOctets = cidr[0].toByteArray();
        subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
        octets = [];
        i = 0;
        while (i < 4) {
          octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));
          i++;
        }
        return new this(octets);
      } catch (error1) {
        error = error1;
        throw new Error("ipaddr: the address does not have IPv4 CIDR format");
      }
    };
    ipaddr.IPv6.parseCIDR = function(string) {
      var maskLength, match, parsed;
      if (match = string.match(/^(.+)\/(\d+)$/)) {
        maskLength = parseInt(match[2]);
        if (maskLength >= 0 && maskLength <= 128) {
          parsed = [this.parse(match[1]), maskLength];
          Object.defineProperty(parsed, "toString", {
            value: function() {
              return this.join("/");
            }
          });
          return parsed;
        }
      }
      throw new Error("ipaddr: string is not formatted like an IPv6 CIDR range");
    };
    ipaddr.isValid = function(string) {
      return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);
    };
    ipaddr.parse = function(string) {
      if (ipaddr.IPv6.isValid(string)) {
        return ipaddr.IPv6.parse(string);
      } else if (ipaddr.IPv4.isValid(string)) {
        return ipaddr.IPv4.parse(string);
      } else {
        throw new Error("ipaddr: the address has neither IPv6 nor IPv4 format");
      }
    };
    ipaddr.parseCIDR = function(string) {
      var e;
      try {
        return ipaddr.IPv6.parseCIDR(string);
      } catch (error1) {
        e = error1;
        try {
          return ipaddr.IPv4.parseCIDR(string);
        } catch (error12) {
          e = error12;
          throw new Error("ipaddr: the address has neither IPv6 nor IPv4 CIDR format");
        }
      }
    };
    ipaddr.fromByteArray = function(bytes) {
      var length;
      length = bytes.length;
      if (length === 4) {
        return new ipaddr.IPv4(bytes);
      } else if (length === 16) {
        return new ipaddr.IPv6(bytes);
      } else {
        throw new Error("ipaddr: the binary input is neither an IPv6 nor IPv4 address");
      }
    };
    ipaddr.process = function(string) {
      var addr;
      addr = this.parse(string);
      if (addr.kind() === "ipv6" && addr.isIPv4MappedAddress()) {
        return addr.toIPv4Address();
      } else {
        return addr;
      }
    };
  }).call(exports);
});

// node_modules/proxy-addr/index.js
var require_proxy_addr = __commonJS((exports, module) => {
  var alladdrs = function(req, trust) {
    var addrs = forwarded(req);
    if (!trust) {
      return addrs;
    }
    if (typeof trust !== "function") {
      trust = compile(trust);
    }
    for (var i = 0;i < addrs.length - 1; i++) {
      if (trust(addrs[i], i))
        continue;
      addrs.length = i + 1;
    }
    return addrs;
  };
  var compile = function(val) {
    if (!val) {
      throw new TypeError("argument is required");
    }
    var trust;
    if (typeof val === "string") {
      trust = [val];
    } else if (Array.isArray(val)) {
      trust = val.slice();
    } else {
      throw new TypeError("unsupported trust argument");
    }
    for (var i = 0;i < trust.length; i++) {
      val = trust[i];
      if (!Object.prototype.hasOwnProperty.call(IP_RANGES, val)) {
        continue;
      }
      val = IP_RANGES[val];
      trust.splice.apply(trust, [i, 1].concat(val));
      i += val.length - 1;
    }
    return compileTrust(compileRangeSubnets(trust));
  };
  var compileRangeSubnets = function(arr) {
    var rangeSubnets = new Array(arr.length);
    for (var i = 0;i < arr.length; i++) {
      rangeSubnets[i] = parseipNotation(arr[i]);
    }
    return rangeSubnets;
  };
  var compileTrust = function(rangeSubnets) {
    var len = rangeSubnets.length;
    return len === 0 ? trustNone : len === 1 ? trustSingle(rangeSubnets[0]) : trustMulti(rangeSubnets);
  };
  var parseipNotation = function(note) {
    var pos = note.lastIndexOf("/");
    var str = pos !== -1 ? note.substring(0, pos) : note;
    if (!isip(str)) {
      throw new TypeError("invalid IP address: " + str);
    }
    var ip = parseip(str);
    if (pos === -1 && ip.kind() === "ipv6" && ip.isIPv4MappedAddress()) {
      ip = ip.toIPv4Address();
    }
    var max = ip.kind() === "ipv6" ? 128 : 32;
    var range = pos !== -1 ? note.substring(pos + 1, note.length) : null;
    if (range === null) {
      range = max;
    } else if (DIGIT_REGEXP.test(range)) {
      range = parseInt(range, 10);
    } else if (ip.kind() === "ipv4" && isip(range)) {
      range = parseNetmask(range);
    } else {
      range = null;
    }
    if (range <= 0 || range > max) {
      throw new TypeError("invalid range on address: " + note);
    }
    return [ip, range];
  };
  var parseNetmask = function(netmask) {
    var ip = parseip(netmask);
    var kind = ip.kind();
    return kind === "ipv4" ? ip.prefixLengthFromSubnetMask() : null;
  };
  var proxyaddr = function(req, trust) {
    if (!req) {
      throw new TypeError("req argument is required");
    }
    if (!trust) {
      throw new TypeError("trust argument is required");
    }
    var addrs = alladdrs(req, trust);
    var addr = addrs[addrs.length - 1];
    return addr;
  };
  var trustNone = function() {
    return false;
  };
  var trustMulti = function(subnets) {
    return function trust(addr) {
      if (!isip(addr))
        return false;
      var ip = parseip(addr);
      var ipconv;
      var kind = ip.kind();
      for (var i = 0;i < subnets.length; i++) {
        var subnet = subnets[i];
        var subnetip = subnet[0];
        var subnetkind = subnetip.kind();
        var subnetrange = subnet[1];
        var trusted = ip;
        if (kind !== subnetkind) {
          if (subnetkind === "ipv4" && !ip.isIPv4MappedAddress()) {
            continue;
          }
          if (!ipconv) {
            ipconv = subnetkind === "ipv4" ? ip.toIPv4Address() : ip.toIPv4MappedAddress();
          }
          trusted = ipconv;
        }
        if (trusted.match(subnetip, subnetrange)) {
          return true;
        }
      }
      return false;
    };
  };
  var trustSingle = function(subnet) {
    var subnetip = subnet[0];
    var subnetkind = subnetip.kind();
    var subnetisipv4 = subnetkind === "ipv4";
    var subnetrange = subnet[1];
    return function trust(addr) {
      if (!isip(addr))
        return false;
      var ip = parseip(addr);
      var kind = ip.kind();
      if (kind !== subnetkind) {
        if (subnetisipv4 && !ip.isIPv4MappedAddress()) {
          return false;
        }
        ip = subnetisipv4 ? ip.toIPv4Address() : ip.toIPv4MappedAddress();
      }
      return ip.match(subnetip, subnetrange);
    };
  };
  /*!
   * proxy-addr
   * Copyright(c) 2014-2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = proxyaddr;
  module.exports.all = alladdrs;
  module.exports.compile = compile;
  var forwarded = require_forwarded();
  var ipaddr = require_ipaddr();
  var DIGIT_REGEXP = /^[0-9]+$/;
  var isip = ipaddr.isValid;
  var parseip = ipaddr.parse;
  var IP_RANGES = {
    linklocal: ["169.254.0.0/16", "fe80::/10"],
    loopback: ["127.0.0.1/8", "::1/128"],
    uniquelocal: ["10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7"]
  };
});

// node_modules/express/lib/utils.js
var require_utils2 = __commonJS((exports) => {
  var acceptParams = function(str) {
    var parts = str.split(/ *; */);
    var ret = { value: parts[0], quality: 1, params: {} };
    for (var i = 1;i < parts.length; ++i) {
      var pms = parts[i].split(/ *= */);
      if (pms[0] === "q") {
        ret.quality = parseFloat(pms[1]);
      } else {
        ret.params[pms[0]] = pms[1];
      }
    }
    return ret;
  };
  var createETagGenerator = function(options) {
    return function generateETag(body, encoding) {
      var buf = !Buffer2.isBuffer(body) ? Buffer2.from(body, encoding) : body;
      return etag(buf, options);
    };
  };
  var parseExtendedQueryString = function(str) {
    return qs.parse(str, {
      allowPrototypes: true
    });
  };
  var newObject = function() {
    return {};
  };
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var Buffer2 = require_safe_buffer().Buffer;
  var contentDisposition = require_content_disposition();
  var contentType = require_content_type();
  var deprecate = require_depd()("express");
  var flatten = require_array_flatten();
  var mime2 = require_send().mime;
  var etag = require_etag();
  var proxyaddr = require_proxy_addr();
  var qs = require_lib2();
  var querystring = import.meta.require("querystring");
  exports.etag = createETagGenerator({ weak: false });
  exports.wetag = createETagGenerator({ weak: true });
  exports.isAbsolute = function(path) {
    if (path[0] === "/")
      return true;
    if (path[1] === ":" && (path[2] === "\\" || path[2] === "/"))
      return true;
    if (path.substring(0, 2) === "\\\\")
      return true;
  };
  exports.flatten = deprecate.function(flatten, "utils.flatten: use array-flatten npm module instead");
  exports.normalizeType = function(type) {
    return ~type.indexOf("/") ? acceptParams(type) : { value: mime2.lookup(type), params: {} };
  };
  exports.normalizeTypes = function(types) {
    var ret = [];
    for (var i = 0;i < types.length; ++i) {
      ret.push(exports.normalizeType(types[i]));
    }
    return ret;
  };
  exports.contentDisposition = deprecate.function(contentDisposition, "utils.contentDisposition: use content-disposition npm module instead");
  exports.compileETag = function(val) {
    var fn;
    if (typeof val === "function") {
      return val;
    }
    switch (val) {
      case true:
      case "weak":
        fn = exports.wetag;
        break;
      case false:
        break;
      case "strong":
        fn = exports.etag;
        break;
      default:
        throw new TypeError("unknown value for etag function: " + val);
    }
    return fn;
  };
  exports.compileQueryParser = function compileQueryParser(val) {
    var fn;
    if (typeof val === "function") {
      return val;
    }
    switch (val) {
      case true:
      case "simple":
        fn = querystring.parse;
        break;
      case false:
        fn = newObject;
        break;
      case "extended":
        fn = parseExtendedQueryString;
        break;
      default:
        throw new TypeError("unknown value for query parser function: " + val);
    }
    return fn;
  };
  exports.compileTrust = function(val) {
    if (typeof val === "function")
      return val;
    if (val === true) {
      return function() {
        return true;
      };
    }
    if (typeof val === "number") {
      return function(a, i) {
        return i < val;
      };
    }
    if (typeof val === "string") {
      val = val.split(",").map(function(v) {
        return v.trim();
      });
    }
    return proxyaddr.compile(val || []);
  };
  exports.setCharset = function setCharset(type, charset) {
    if (!type || !charset) {
      return type;
    }
    var parsed = contentType.parse(type);
    parsed.parameters.charset = charset;
    return contentType.format(parsed);
  };
});

// node_modules/express/lib/application.js
var require_application = __commonJS((exports, module) => {
  var logerror = function(err) {
    if (this.get("env") !== "test")
      console.error(err.stack || err.toString());
  };
  var tryRender = function(view, options, callback) {
    try {
      view.render(options, callback);
    } catch (err) {
      callback(err);
    }
  };
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var finalhandler = require_finalhandler();
  var Router = require_router();
  var methods = require_methods();
  var middleware = require_init();
  var query = require_query();
  var debug2 = require_src3()("express:application");
  var View = require_view();
  var http = import.meta.require("http");
  var compileETag = require_utils2().compileETag;
  var compileQueryParser = require_utils2().compileQueryParser;
  var compileTrust = require_utils2().compileTrust;
  var deprecate = require_depd()("express");
  var flatten = require_array_flatten();
  var merge = require_utils_merge();
  var resolve = import.meta.require("path").resolve;
  var setPrototypeOf = require_setprototypeof();
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var slice = Array.prototype.slice;
  var app = exports = module.exports = {};
  var trustProxyDefaultSymbol = "@@symbol:trust_proxy_default";
  app.init = function init() {
    this.cache = {};
    this.engines = {};
    this.settings = {};
    this.defaultConfiguration();
  };
  app.defaultConfiguration = function defaultConfiguration() {
    var env = "development";
    this.enable("x-powered-by");
    this.set("etag", "weak");
    this.set("env", env);
    this.set("query parser", "extended");
    this.set("subdomain offset", 2);
    this.set("trust proxy", false);
    Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
      configurable: true,
      value: true
    });
    debug2("booting in %s mode", env);
    this.on("mount", function onmount(parent) {
      if (this.settings[trustProxyDefaultSymbol] === true && typeof parent.settings["trust proxy fn"] === "function") {
        delete this.settings["trust proxy"];
        delete this.settings["trust proxy fn"];
      }
      setPrototypeOf(this.request, parent.request);
      setPrototypeOf(this.response, parent.response);
      setPrototypeOf(this.engines, parent.engines);
      setPrototypeOf(this.settings, parent.settings);
    });
    this.locals = Object.create(null);
    this.mountpath = "/";
    this.locals.settings = this.settings;
    this.set("view", View);
    this.set("views", resolve("views"));
    this.set("jsonp callback name", "callback");
    if (env === "production") {
      this.enable("view cache");
    }
    Object.defineProperty(this, "router", {
      get: function() {
        throw new Error("\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.");
      }
    });
  };
  app.lazyrouter = function lazyrouter() {
    if (!this._router) {
      this._router = new Router({
        caseSensitive: this.enabled("case sensitive routing"),
        strict: this.enabled("strict routing")
      });
      this._router.use(query(this.get("query parser fn")));
      this._router.use(middleware.init(this));
    }
  };
  app.handle = function handle(req, res, callback) {
    var router = this._router;
    var done = callback || finalhandler(req, res, {
      env: this.get("env"),
      onerror: logerror.bind(this)
    });
    if (!router) {
      debug2("no routes defined on app");
      done();
      return;
    }
    router.handle(req, res, done);
  };
  app.use = function use(fn) {
    var offset = 0;
    var path = "/";
    if (typeof fn !== "function") {
      var arg = fn;
      while (Array.isArray(arg) && arg.length !== 0) {
        arg = arg[0];
      }
      if (typeof arg !== "function") {
        offset = 1;
        path = fn;
      }
    }
    var fns = flatten(slice.call(arguments, offset));
    if (fns.length === 0) {
      throw new TypeError("app.use() requires a middleware function");
    }
    this.lazyrouter();
    var router = this._router;
    fns.forEach(function(fn2) {
      if (!fn2 || !fn2.handle || !fn2.set) {
        return router.use(path, fn2);
      }
      debug2(".use app under %s", path);
      fn2.mountpath = path;
      fn2.parent = this;
      router.use(path, function mounted_app(req, res, next) {
        var orig = req.app;
        fn2.handle(req, res, function(err) {
          setPrototypeOf(req, orig.request);
          setPrototypeOf(res, orig.response);
          next(err);
        });
      });
      fn2.emit("mount", this);
    }, this);
    return this;
  };
  app.route = function route(path) {
    this.lazyrouter();
    return this._router.route(path);
  };
  app.engine = function engine(ext, fn) {
    if (typeof fn !== "function") {
      throw new Error("callback function required");
    }
    var extension = ext[0] !== "." ? "." + ext : ext;
    this.engines[extension] = fn;
    return this;
  };
  app.param = function param(name, fn) {
    this.lazyrouter();
    if (Array.isArray(name)) {
      for (var i = 0;i < name.length; i++) {
        this.param(name[i], fn);
      }
      return this;
    }
    this._router.param(name, fn);
    return this;
  };
  app.set = function set(setting, val) {
    if (arguments.length === 1) {
      var settings = this.settings;
      while (settings && settings !== Object.prototype) {
        if (hasOwnProperty.call(settings, setting)) {
          return settings[setting];
        }
        settings = Object.getPrototypeOf(settings);
      }
      return;
    }
    debug2('set "%s" to %o', setting, val);
    this.settings[setting] = val;
    switch (setting) {
      case "etag":
        this.set("etag fn", compileETag(val));
        break;
      case "query parser":
        this.set("query parser fn", compileQueryParser(val));
        break;
      case "trust proxy":
        this.set("trust proxy fn", compileTrust(val));
        Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
          configurable: true,
          value: false
        });
        break;
    }
    return this;
  };
  app.path = function path() {
    return this.parent ? this.parent.path() + this.mountpath : "";
  };
  app.enabled = function enabled(setting) {
    return Boolean(this.set(setting));
  };
  app.disabled = function disabled(setting) {
    return !this.set(setting);
  };
  app.enable = function enable(setting) {
    return this.set(setting, true);
  };
  app.disable = function disable(setting) {
    return this.set(setting, false);
  };
  methods.forEach(function(method) {
    app[method] = function(path) {
      if (method === "get" && arguments.length === 1) {
        return this.set(path);
      }
      this.lazyrouter();
      var route = this._router.route(path);
      route[method].apply(route, slice.call(arguments, 1));
      return this;
    };
  });
  app.all = function all(path) {
    this.lazyrouter();
    var route = this._router.route(path);
    var args = slice.call(arguments, 1);
    for (var i = 0;i < methods.length; i++) {
      route[methods[i]].apply(route, args);
    }
    return this;
  };
  app.del = deprecate.function(app.delete, "app.del: Use app.delete instead");
  app.render = function render(name, options, callback) {
    var cache = this.cache;
    var done = callback;
    var engines = this.engines;
    var opts = options;
    var renderOptions = {};
    var view;
    if (typeof options === "function") {
      done = options;
      opts = {};
    }
    merge(renderOptions, this.locals);
    if (opts._locals) {
      merge(renderOptions, opts._locals);
    }
    merge(renderOptions, opts);
    if (renderOptions.cache == null) {
      renderOptions.cache = this.enabled("view cache");
    }
    if (renderOptions.cache) {
      view = cache[name];
    }
    if (!view) {
      var View2 = this.get("view");
      view = new View2(name, {
        defaultEngine: this.get("view engine"),
        root: this.get("views"),
        engines
      });
      if (!view.path) {
        var dirs = Array.isArray(view.root) && view.root.length > 1 ? 'directories "' + view.root.slice(0, -1).join('", "') + '" or "' + view.root[view.root.length - 1] + '"' : 'directory "' + view.root + '"';
        var err = new Error('Failed to lookup view "' + name + '" in views ' + dirs);
        err.view = view;
        return done(err);
      }
      if (renderOptions.cache) {
        cache[name] = view;
      }
    }
    tryRender(view, renderOptions, done);
  };
  app.listen = function listen() {
    var server = http.createServer(this);
    return server.listen.apply(server, arguments);
  };
});

// node_modules/negotiator/lib/charset.js
var require_charset = __commonJS((exports, module) => {
  var parseAcceptCharset = function(accept) {
    var accepts = accept.split(",");
    for (var i = 0, j = 0;i < accepts.length; i++) {
      var charset = parseCharset(accepts[i].trim(), i);
      if (charset) {
        accepts[j++] = charset;
      }
    }
    accepts.length = j;
    return accepts;
  };
  var parseCharset = function(str, i) {
    var match = simpleCharsetRegExp.exec(str);
    if (!match)
      return null;
    var charset = match[1];
    var q = 1;
    if (match[2]) {
      var params = match[2].split(";");
      for (var j = 0;j < params.length; j++) {
        var p = params[j].trim().split("=");
        if (p[0] === "q") {
          q = parseFloat(p[1]);
          break;
        }
      }
    }
    return {
      charset,
      q,
      i
    };
  };
  var getCharsetPriority = function(charset, accepted, index) {
    var priority = { o: -1, q: 0, s: 0 };
    for (var i = 0;i < accepted.length; i++) {
      var spec = specify(charset, accepted[i], index);
      if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
        priority = spec;
      }
    }
    return priority;
  };
  var specify = function(charset, spec, index) {
    var s = 0;
    if (spec.charset.toLowerCase() === charset.toLowerCase()) {
      s |= 1;
    } else if (spec.charset !== "*") {
      return null;
    }
    return {
      i: index,
      o: spec.i,
      q: spec.q,
      s
    };
  };
  var preferredCharsets = function(accept, provided) {
    var accepts = parseAcceptCharset(accept === undefined ? "*" : accept || "");
    if (!provided) {
      return accepts.filter(isQuality).sort(compareSpecs).map(getFullCharset);
    }
    var priorities = provided.map(function getPriority(type, index) {
      return getCharsetPriority(type, accepts, index);
    });
    return priorities.filter(isQuality).sort(compareSpecs).map(function getCharset(priority) {
      return provided[priorities.indexOf(priority)];
    });
  };
  var compareSpecs = function(a, b) {
    return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;
  };
  var getFullCharset = function(spec) {
    return spec.charset;
  };
  var isQuality = function(spec) {
    return spec.q > 0;
  };
  module.exports = preferredCharsets;
  module.exports.preferredCharsets = preferredCharsets;
  var simpleCharsetRegExp = /^\s*([^\s;]+)\s*(?:;(.*))?$/;
});

// node_modules/negotiator/lib/encoding.js
var require_encoding = __commonJS((exports, module) => {
  var parseAcceptEncoding = function(accept) {
    var accepts = accept.split(",");
    var hasIdentity = false;
    var minQuality = 1;
    for (var i = 0, j = 0;i < accepts.length; i++) {
      var encoding = parseEncoding(accepts[i].trim(), i);
      if (encoding) {
        accepts[j++] = encoding;
        hasIdentity = hasIdentity || specify("identity", encoding);
        minQuality = Math.min(minQuality, encoding.q || 1);
      }
    }
    if (!hasIdentity) {
      accepts[j++] = {
        encoding: "identity",
        q: minQuality,
        i
      };
    }
    accepts.length = j;
    return accepts;
  };
  var parseEncoding = function(str, i) {
    var match = simpleEncodingRegExp.exec(str);
    if (!match)
      return null;
    var encoding = match[1];
    var q = 1;
    if (match[2]) {
      var params = match[2].split(";");
      for (var j = 0;j < params.length; j++) {
        var p = params[j].trim().split("=");
        if (p[0] === "q") {
          q = parseFloat(p[1]);
          break;
        }
      }
    }
    return {
      encoding,
      q,
      i
    };
  };
  var getEncodingPriority = function(encoding, accepted, index) {
    var priority = { o: -1, q: 0, s: 0 };
    for (var i = 0;i < accepted.length; i++) {
      var spec = specify(encoding, accepted[i], index);
      if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
        priority = spec;
      }
    }
    return priority;
  };
  var specify = function(encoding, spec, index) {
    var s = 0;
    if (spec.encoding.toLowerCase() === encoding.toLowerCase()) {
      s |= 1;
    } else if (spec.encoding !== "*") {
      return null;
    }
    return {
      i: index,
      o: spec.i,
      q: spec.q,
      s
    };
  };
  var preferredEncodings = function(accept, provided) {
    var accepts = parseAcceptEncoding(accept || "");
    if (!provided) {
      return accepts.filter(isQuality).sort(compareSpecs).map(getFullEncoding);
    }
    var priorities = provided.map(function getPriority(type, index) {
      return getEncodingPriority(type, accepts, index);
    });
    return priorities.filter(isQuality).sort(compareSpecs).map(function getEncoding(priority) {
      return provided[priorities.indexOf(priority)];
    });
  };
  var compareSpecs = function(a, b) {
    return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;
  };
  var getFullEncoding = function(spec) {
    return spec.encoding;
  };
  var isQuality = function(spec) {
    return spec.q > 0;
  };
  module.exports = preferredEncodings;
  module.exports.preferredEncodings = preferredEncodings;
  var simpleEncodingRegExp = /^\s*([^\s;]+)\s*(?:;(.*))?$/;
});

// node_modules/negotiator/lib/language.js
var require_language = __commonJS((exports, module) => {
  var parseAcceptLanguage = function(accept) {
    var accepts = accept.split(",");
    for (var i = 0, j = 0;i < accepts.length; i++) {
      var language = parseLanguage(accepts[i].trim(), i);
      if (language) {
        accepts[j++] = language;
      }
    }
    accepts.length = j;
    return accepts;
  };
  var parseLanguage = function(str, i) {
    var match = simpleLanguageRegExp.exec(str);
    if (!match)
      return null;
    var prefix = match[1];
    var suffix = match[2];
    var full = prefix;
    if (suffix)
      full += "-" + suffix;
    var q = 1;
    if (match[3]) {
      var params = match[3].split(";");
      for (var j = 0;j < params.length; j++) {
        var p = params[j].split("=");
        if (p[0] === "q")
          q = parseFloat(p[1]);
      }
    }
    return {
      prefix,
      suffix,
      q,
      i,
      full
    };
  };
  var getLanguagePriority = function(language, accepted, index) {
    var priority = { o: -1, q: 0, s: 0 };
    for (var i = 0;i < accepted.length; i++) {
      var spec = specify(language, accepted[i], index);
      if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
        priority = spec;
      }
    }
    return priority;
  };
  var specify = function(language, spec, index) {
    var p = parseLanguage(language);
    if (!p)
      return null;
    var s = 0;
    if (spec.full.toLowerCase() === p.full.toLowerCase()) {
      s |= 4;
    } else if (spec.prefix.toLowerCase() === p.full.toLowerCase()) {
      s |= 2;
    } else if (spec.full.toLowerCase() === p.prefix.toLowerCase()) {
      s |= 1;
    } else if (spec.full !== "*") {
      return null;
    }
    return {
      i: index,
      o: spec.i,
      q: spec.q,
      s
    };
  };
  var preferredLanguages = function(accept, provided) {
    var accepts = parseAcceptLanguage(accept === undefined ? "*" : accept || "");
    if (!provided) {
      return accepts.filter(isQuality).sort(compareSpecs).map(getFullLanguage);
    }
    var priorities = provided.map(function getPriority(type, index) {
      return getLanguagePriority(type, accepts, index);
    });
    return priorities.filter(isQuality).sort(compareSpecs).map(function getLanguage(priority) {
      return provided[priorities.indexOf(priority)];
    });
  };
  var compareSpecs = function(a, b) {
    return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;
  };
  var getFullLanguage = function(spec) {
    return spec.full;
  };
  var isQuality = function(spec) {
    return spec.q > 0;
  };
  module.exports = preferredLanguages;
  module.exports.preferredLanguages = preferredLanguages;
  var simpleLanguageRegExp = /^\s*([^\s\-;]+)(?:-([^\s;]+))?\s*(?:;(.*))?$/;
});

// node_modules/negotiator/lib/mediaType.js
var require_mediaType = __commonJS((exports, module) => {
  var parseAccept = function(accept) {
    var accepts = splitMediaTypes(accept);
    for (var i = 0, j = 0;i < accepts.length; i++) {
      var mediaType = parseMediaType(accepts[i].trim(), i);
      if (mediaType) {
        accepts[j++] = mediaType;
      }
    }
    accepts.length = j;
    return accepts;
  };
  var parseMediaType = function(str, i) {
    var match = simpleMediaTypeRegExp.exec(str);
    if (!match)
      return null;
    var params = Object.create(null);
    var q = 1;
    var subtype = match[2];
    var type = match[1];
    if (match[3]) {
      var kvps = splitParameters(match[3]).map(splitKeyValuePair);
      for (var j = 0;j < kvps.length; j++) {
        var pair = kvps[j];
        var key = pair[0].toLowerCase();
        var val = pair[1];
        var value = val && val[0] === '"' && val[val.length - 1] === '"' ? val.substr(1, val.length - 2) : val;
        if (key === "q") {
          q = parseFloat(value);
          break;
        }
        params[key] = value;
      }
    }
    return {
      type,
      subtype,
      params,
      q,
      i
    };
  };
  var getMediaTypePriority = function(type, accepted, index) {
    var priority = { o: -1, q: 0, s: 0 };
    for (var i = 0;i < accepted.length; i++) {
      var spec = specify(type, accepted[i], index);
      if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
        priority = spec;
      }
    }
    return priority;
  };
  var specify = function(type, spec, index) {
    var p = parseMediaType(type);
    var s = 0;
    if (!p) {
      return null;
    }
    if (spec.type.toLowerCase() == p.type.toLowerCase()) {
      s |= 4;
    } else if (spec.type != "*") {
      return null;
    }
    if (spec.subtype.toLowerCase() == p.subtype.toLowerCase()) {
      s |= 2;
    } else if (spec.subtype != "*") {
      return null;
    }
    var keys = Object.keys(spec.params);
    if (keys.length > 0) {
      if (keys.every(function(k) {
        return spec.params[k] == "*" || (spec.params[k] || "").toLowerCase() == (p.params[k] || "").toLowerCase();
      })) {
        s |= 1;
      } else {
        return null;
      }
    }
    return {
      i: index,
      o: spec.i,
      q: spec.q,
      s
    };
  };
  var preferredMediaTypes = function(accept, provided) {
    var accepts = parseAccept(accept === undefined ? "*/*" : accept || "");
    if (!provided) {
      return accepts.filter(isQuality).sort(compareSpecs).map(getFullType);
    }
    var priorities = provided.map(function getPriority(type, index) {
      return getMediaTypePriority(type, accepts, index);
    });
    return priorities.filter(isQuality).sort(compareSpecs).map(function getType(priority) {
      return provided[priorities.indexOf(priority)];
    });
  };
  var compareSpecs = function(a, b) {
    return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;
  };
  var getFullType = function(spec) {
    return spec.type + "/" + spec.subtype;
  };
  var isQuality = function(spec) {
    return spec.q > 0;
  };
  var quoteCount = function(string) {
    var count = 0;
    var index = 0;
    while ((index = string.indexOf('"', index)) !== -1) {
      count++;
      index++;
    }
    return count;
  };
  var splitKeyValuePair = function(str) {
    var index = str.indexOf("=");
    var key;
    var val;
    if (index === -1) {
      key = str;
    } else {
      key = str.substr(0, index);
      val = str.substr(index + 1);
    }
    return [key, val];
  };
  var splitMediaTypes = function(accept) {
    var accepts = accept.split(",");
    for (var i = 1, j = 0;i < accepts.length; i++) {
      if (quoteCount(accepts[j]) % 2 == 0) {
        accepts[++j] = accepts[i];
      } else {
        accepts[j] += "," + accepts[i];
      }
    }
    accepts.length = j + 1;
    return accepts;
  };
  var splitParameters = function(str) {
    var parameters = str.split(";");
    for (var i = 1, j = 0;i < parameters.length; i++) {
      if (quoteCount(parameters[j]) % 2 == 0) {
        parameters[++j] = parameters[i];
      } else {
        parameters[j] += ";" + parameters[i];
      }
    }
    parameters.length = j + 1;
    for (var i = 0;i < parameters.length; i++) {
      parameters[i] = parameters[i].trim();
    }
    return parameters;
  };
  module.exports = preferredMediaTypes;
  module.exports.preferredMediaTypes = preferredMediaTypes;
  var simpleMediaTypeRegExp = /^\s*([^\s\/;]+)\/([^;\s]+)\s*(?:;(.*))?$/;
});

// node_modules/negotiator/index.js
var require_negotiator = __commonJS((exports, module) => {
  var Negotiator = function(request) {
    if (!(this instanceof Negotiator)) {
      return new Negotiator(request);
    }
    this.request = request;
  };
  /*!
   * negotiator
   * Copyright(c) 2012 Federico Romero
   * Copyright(c) 2012-2014 Isaac Z. Schlueter
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var preferredCharsets = require_charset();
  var preferredEncodings = require_encoding();
  var preferredLanguages = require_language();
  var preferredMediaTypes = require_mediaType();
  module.exports = Negotiator;
  module.exports.Negotiator = Negotiator;
  Negotiator.prototype.charset = function charset(available) {
    var set = this.charsets(available);
    return set && set[0];
  };
  Negotiator.prototype.charsets = function charsets(available) {
    return preferredCharsets(this.request.headers["accept-charset"], available);
  };
  Negotiator.prototype.encoding = function encoding(available) {
    var set = this.encodings(available);
    return set && set[0];
  };
  Negotiator.prototype.encodings = function encodings(available) {
    return preferredEncodings(this.request.headers["accept-encoding"], available);
  };
  Negotiator.prototype.language = function language(available) {
    var set = this.languages(available);
    return set && set[0];
  };
  Negotiator.prototype.languages = function languages(available) {
    return preferredLanguages(this.request.headers["accept-language"], available);
  };
  Negotiator.prototype.mediaType = function mediaType(available) {
    var set = this.mediaTypes(available);
    return set && set[0];
  };
  Negotiator.prototype.mediaTypes = function mediaTypes(available) {
    return preferredMediaTypes(this.request.headers.accept, available);
  };
  Negotiator.prototype.preferredCharset = Negotiator.prototype.charset;
  Negotiator.prototype.preferredCharsets = Negotiator.prototype.charsets;
  Negotiator.prototype.preferredEncoding = Negotiator.prototype.encoding;
  Negotiator.prototype.preferredEncodings = Negotiator.prototype.encodings;
  Negotiator.prototype.preferredLanguage = Negotiator.prototype.language;
  Negotiator.prototype.preferredLanguages = Negotiator.prototype.languages;
  Negotiator.prototype.preferredMediaType = Negotiator.prototype.mediaType;
  Negotiator.prototype.preferredMediaTypes = Negotiator.prototype.mediaTypes;
});

// node_modules/accepts/index.js
var require_accepts = __commonJS((exports, module) => {
  var Accepts = function(req) {
    if (!(this instanceof Accepts)) {
      return new Accepts(req);
    }
    this.headers = req.headers;
    this.negotiator = new Negotiator(req);
  };
  var extToMime = function(type) {
    return type.indexOf("/") === -1 ? mime2.lookup(type) : type;
  };
  var validMime = function(type) {
    return typeof type === "string";
  };
  /*!
   * accepts
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var Negotiator = require_negotiator();
  var mime2 = require_mime_types();
  module.exports = Accepts;
  Accepts.prototype.type = Accepts.prototype.types = function(types_) {
    var types = types_;
    if (types && !Array.isArray(types)) {
      types = new Array(arguments.length);
      for (var i = 0;i < types.length; i++) {
        types[i] = arguments[i];
      }
    }
    if (!types || types.length === 0) {
      return this.negotiator.mediaTypes();
    }
    if (!this.headers.accept) {
      return types[0];
    }
    var mimes = types.map(extToMime);
    var accepts = this.negotiator.mediaTypes(mimes.filter(validMime));
    var first = accepts[0];
    return first ? types[mimes.indexOf(first)] : false;
  };
  Accepts.prototype.encoding = Accepts.prototype.encodings = function(encodings_) {
    var encodings = encodings_;
    if (encodings && !Array.isArray(encodings)) {
      encodings = new Array(arguments.length);
      for (var i = 0;i < encodings.length; i++) {
        encodings[i] = arguments[i];
      }
    }
    if (!encodings || encodings.length === 0) {
      return this.negotiator.encodings();
    }
    return this.negotiator.encodings(encodings)[0] || false;
  };
  Accepts.prototype.charset = Accepts.prototype.charsets = function(charsets_) {
    var charsets = charsets_;
    if (charsets && !Array.isArray(charsets)) {
      charsets = new Array(arguments.length);
      for (var i = 0;i < charsets.length; i++) {
        charsets[i] = arguments[i];
      }
    }
    if (!charsets || charsets.length === 0) {
      return this.negotiator.charsets();
    }
    return this.negotiator.charsets(charsets)[0] || false;
  };
  Accepts.prototype.lang = Accepts.prototype.langs = Accepts.prototype.language = Accepts.prototype.languages = function(languages_) {
    var languages = languages_;
    if (languages && !Array.isArray(languages)) {
      languages = new Array(arguments.length);
      for (var i = 0;i < languages.length; i++) {
        languages[i] = arguments[i];
      }
    }
    if (!languages || languages.length === 0) {
      return this.negotiator.languages();
    }
    return this.negotiator.languages(languages)[0] || false;
  };
});

// node_modules/express/lib/request.js
var require_request = __commonJS((exports, module) => {
  var defineGetter = function(obj, name, getter) {
    Object.defineProperty(obj, name, {
      configurable: true,
      enumerable: true,
      get: getter
    });
  };
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var accepts = require_accepts();
  var deprecate = require_depd()("express");
  var isIP = import.meta.require("net").isIP;
  var typeis = require_type_is();
  var http = import.meta.require("http");
  var fresh = require_fresh();
  var parseRange = require_range_parser();
  var parse = require_parseurl();
  var proxyaddr = require_proxy_addr();
  var req = Object.create(http.IncomingMessage.prototype);
  module.exports = req;
  req.get = req.header = function header(name) {
    if (!name) {
      throw new TypeError("name argument is required to req.get");
    }
    if (typeof name !== "string") {
      throw new TypeError("name must be a string to req.get");
    }
    var lc = name.toLowerCase();
    switch (lc) {
      case "referer":
      case "referrer":
        return this.headers.referrer || this.headers.referer;
      default:
        return this.headers[lc];
    }
  };
  req.accepts = function() {
    var accept = accepts(this);
    return accept.types.apply(accept, arguments);
  };
  req.acceptsEncodings = function() {
    var accept = accepts(this);
    return accept.encodings.apply(accept, arguments);
  };
  req.acceptsEncoding = deprecate.function(req.acceptsEncodings, "req.acceptsEncoding: Use acceptsEncodings instead");
  req.acceptsCharsets = function() {
    var accept = accepts(this);
    return accept.charsets.apply(accept, arguments);
  };
  req.acceptsCharset = deprecate.function(req.acceptsCharsets, "req.acceptsCharset: Use acceptsCharsets instead");
  req.acceptsLanguages = function() {
    var accept = accepts(this);
    return accept.languages.apply(accept, arguments);
  };
  req.acceptsLanguage = deprecate.function(req.acceptsLanguages, "req.acceptsLanguage: Use acceptsLanguages instead");
  req.range = function range(size, options) {
    var range = this.get("Range");
    if (!range)
      return;
    return parseRange(size, range, options);
  };
  req.param = function param(name, defaultValue) {
    var params = this.params || {};
    var body = this.body || {};
    var query = this.query || {};
    var args = arguments.length === 1 ? "name" : "name, default";
    deprecate("req.param(" + args + "): Use req.params, req.body, or req.query instead");
    if (params[name] != null && params.hasOwnProperty(name))
      return params[name];
    if (body[name] != null)
      return body[name];
    if (query[name] != null)
      return query[name];
    return defaultValue;
  };
  req.is = function is(types) {
    var arr = types;
    if (!Array.isArray(types)) {
      arr = new Array(arguments.length);
      for (var i = 0;i < arr.length; i++) {
        arr[i] = arguments[i];
      }
    }
    return typeis(this, arr);
  };
  defineGetter(req, "protocol", function protocol() {
    var proto = this.connection.encrypted ? "https" : "http";
    var trust = this.app.get("trust proxy fn");
    if (!trust(this.connection.remoteAddress, 0)) {
      return proto;
    }
    var header = this.get("X-Forwarded-Proto") || proto;
    var index = header.indexOf(",");
    return index !== -1 ? header.substring(0, index).trim() : header.trim();
  });
  defineGetter(req, "secure", function secure() {
    return this.protocol === "https";
  });
  defineGetter(req, "ip", function ip() {
    var trust = this.app.get("trust proxy fn");
    return proxyaddr(this, trust);
  });
  defineGetter(req, "ips", function ips() {
    var trust = this.app.get("trust proxy fn");
    var addrs = proxyaddr.all(this, trust);
    addrs.reverse().pop();
    return addrs;
  });
  defineGetter(req, "subdomains", function subdomains() {
    var hostname = this.hostname;
    if (!hostname)
      return [];
    var offset = this.app.get("subdomain offset");
    var subdomains = !isIP(hostname) ? hostname.split(".").reverse() : [hostname];
    return subdomains.slice(offset);
  });
  defineGetter(req, "path", function path() {
    return parse(this).pathname;
  });
  defineGetter(req, "hostname", function hostname() {
    var trust = this.app.get("trust proxy fn");
    var host = this.get("X-Forwarded-Host");
    if (!host || !trust(this.connection.remoteAddress, 0)) {
      host = this.get("Host");
    } else if (host.indexOf(",") !== -1) {
      host = host.substring(0, host.indexOf(",")).trimRight();
    }
    if (!host)
      return;
    var offset = host[0] === "[" ? host.indexOf("]") + 1 : 0;
    var index = host.indexOf(":", offset);
    return index !== -1 ? host.substring(0, index) : host;
  });
  defineGetter(req, "host", deprecate.function(function host() {
    return this.hostname;
  }, "req.host: Use req.hostname instead"));
  defineGetter(req, "fresh", function() {
    var method = this.method;
    var res = this.res;
    var status = res.statusCode;
    if (method !== "GET" && method !== "HEAD")
      return false;
    if (status >= 200 && status < 300 || status === 304) {
      return fresh(this.headers, {
        etag: res.get("ETag"),
        "last-modified": res.get("Last-Modified")
      });
    }
    return false;
  });
  defineGetter(req, "stale", function stale() {
    return !this.fresh;
  });
  defineGetter(req, "xhr", function xhr() {
    var val = this.get("X-Requested-With") || "";
    return val.toLowerCase() === "xmlhttprequest";
  });
});

// node_modules/cookie-signature/index.js
var require_cookie_signature = __commonJS((exports) => {
  var sha1 = function(str) {
    return crypto.createHash("sha1").update(str).digest("hex");
  };
  var crypto = import.meta.require("crypto");
  exports.sign = function(val, secret) {
    if (typeof val != "string")
      throw new TypeError("Cookie value must be provided as a string.");
    if (typeof secret != "string")
      throw new TypeError("Secret string must be provided.");
    return val + "." + crypto.createHmac("sha256", secret).update(val).digest("base64").replace(/\=+$/, "");
  };
  exports.unsign = function(val, secret) {
    if (typeof val != "string")
      throw new TypeError("Signed cookie string must be provided.");
    if (typeof secret != "string")
      throw new TypeError("Secret string must be provided.");
    var str = val.slice(0, val.lastIndexOf(".")), mac = exports.sign(str, secret);
    return sha1(mac) == sha1(val) ? str : false;
  };
});

// node_modules/cookie/index.js
var require_cookie = __commonJS((exports) => {
  var parse = function(str, options) {
    if (typeof str !== "string") {
      throw new TypeError("argument str must be a string");
    }
    var obj = {};
    var opt = options || {};
    var dec = opt.decode || decode;
    var index = 0;
    while (index < str.length) {
      var eqIdx = str.indexOf("=", index);
      if (eqIdx === -1) {
        break;
      }
      var endIdx = str.indexOf(";", index);
      if (endIdx === -1) {
        endIdx = str.length;
      } else if (endIdx < eqIdx) {
        index = str.lastIndexOf(";", eqIdx - 1) + 1;
        continue;
      }
      var key = str.slice(index, eqIdx).trim();
      if (obj[key] === undefined) {
        var val = str.slice(eqIdx + 1, endIdx).trim();
        if (val.charCodeAt(0) === 34) {
          val = val.slice(1, -1);
        }
        obj[key] = tryDecode(val, dec);
      }
      index = endIdx + 1;
    }
    return obj;
  };
  var serialize = function(name, val, options) {
    var opt = options || {};
    var enc = opt.encode || encode2;
    if (typeof enc !== "function") {
      throw new TypeError("option encode is invalid");
    }
    if (!fieldContentRegExp.test(name)) {
      throw new TypeError("argument name is invalid");
    }
    var value = enc(val);
    if (value && !fieldContentRegExp.test(value)) {
      throw new TypeError("argument val is invalid");
    }
    var str = name + "=" + value;
    if (opt.maxAge != null) {
      var maxAge = opt.maxAge - 0;
      if (isNaN(maxAge) || !isFinite(maxAge)) {
        throw new TypeError("option maxAge is invalid");
      }
      str += "; Max-Age=" + Math.floor(maxAge);
    }
    if (opt.domain) {
      if (!fieldContentRegExp.test(opt.domain)) {
        throw new TypeError("option domain is invalid");
      }
      str += "; Domain=" + opt.domain;
    }
    if (opt.path) {
      if (!fieldContentRegExp.test(opt.path)) {
        throw new TypeError("option path is invalid");
      }
      str += "; Path=" + opt.path;
    }
    if (opt.expires) {
      var expires = opt.expires;
      if (!isDate(expires) || isNaN(expires.valueOf())) {
        throw new TypeError("option expires is invalid");
      }
      str += "; Expires=" + expires.toUTCString();
    }
    if (opt.httpOnly) {
      str += "; HttpOnly";
    }
    if (opt.secure) {
      str += "; Secure";
    }
    if (opt.partitioned) {
      str += "; Partitioned";
    }
    if (opt.priority) {
      var priority = typeof opt.priority === "string" ? opt.priority.toLowerCase() : opt.priority;
      switch (priority) {
        case "low":
          str += "; Priority=Low";
          break;
        case "medium":
          str += "; Priority=Medium";
          break;
        case "high":
          str += "; Priority=High";
          break;
        default:
          throw new TypeError("option priority is invalid");
      }
    }
    if (opt.sameSite) {
      var sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
      switch (sameSite) {
        case true:
          str += "; SameSite=Strict";
          break;
        case "lax":
          str += "; SameSite=Lax";
          break;
        case "strict":
          str += "; SameSite=Strict";
          break;
        case "none":
          str += "; SameSite=None";
          break;
        default:
          throw new TypeError("option sameSite is invalid");
      }
    }
    return str;
  };
  var decode = function(str) {
    return str.indexOf("%") !== -1 ? decodeURIComponent(str) : str;
  };
  var encode2 = function(val) {
    return encodeURIComponent(val);
  };
  var isDate = function(val) {
    return __toString.call(val) === "[object Date]" || val instanceof Date;
  };
  var tryDecode = function(str, decode2) {
    try {
      return decode2(str);
    } catch (e) {
      return str;
    }
  };
  /*!
   * cookie
   * Copyright(c) 2012-2014 Roman Shtylman
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  exports.parse = parse;
  exports.serialize = serialize;
  var __toString = Object.prototype.toString;
  var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
});

// node_modules/vary/index.js
var require_vary = __commonJS((exports, module) => {
  var append = function(header, field) {
    if (typeof header !== "string") {
      throw new TypeError("header argument is required");
    }
    if (!field) {
      throw new TypeError("field argument is required");
    }
    var fields = !Array.isArray(field) ? parse(String(field)) : field;
    for (var j = 0;j < fields.length; j++) {
      if (!FIELD_NAME_REGEXP.test(fields[j])) {
        throw new TypeError("field argument contains an invalid header name");
      }
    }
    if (header === "*") {
      return header;
    }
    var val = header;
    var vals = parse(header.toLowerCase());
    if (fields.indexOf("*") !== -1 || vals.indexOf("*") !== -1) {
      return "*";
    }
    for (var i = 0;i < fields.length; i++) {
      var fld = fields[i].toLowerCase();
      if (vals.indexOf(fld) === -1) {
        vals.push(fld);
        val = val ? val + ", " + fields[i] : fields[i];
      }
    }
    return val;
  };
  var parse = function(header) {
    var end = 0;
    var list = [];
    var start = 0;
    for (var i = 0, len = header.length;i < len; i++) {
      switch (header.charCodeAt(i)) {
        case 32:
          if (start === end) {
            start = end = i + 1;
          }
          break;
        case 44:
          list.push(header.substring(start, end));
          start = end = i + 1;
          break;
        default:
          end = i + 1;
          break;
      }
    }
    list.push(header.substring(start, end));
    return list;
  };
  var vary = function(res, field) {
    if (!res || !res.getHeader || !res.setHeader) {
      throw new TypeError("res argument is required");
    }
    var val = res.getHeader("Vary") || "";
    var header = Array.isArray(val) ? val.join(", ") : String(val);
    if (val = append(header, field)) {
      res.setHeader("Vary", val);
    }
  };
  /*!
   * vary
   * Copyright(c) 2014-2017 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = vary;
  module.exports.append = append;
  var FIELD_NAME_REGEXP = /^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;
});

// node_modules/express/lib/response.js
var require_response = __commonJS((exports, module) => {
  var sendfile = function(res2, file, options, callback) {
    var done = false;
    var streaming;
    function onaborted() {
      if (done)
        return;
      done = true;
      var err = new Error("Request aborted");
      err.code = "ECONNABORTED";
      callback(err);
    }
    function ondirectory() {
      if (done)
        return;
      done = true;
      var err = new Error("EISDIR, read");
      err.code = "EISDIR";
      callback(err);
    }
    function onerror(err) {
      if (done)
        return;
      done = true;
      callback(err);
    }
    function onend() {
      if (done)
        return;
      done = true;
      callback();
    }
    function onfile() {
      streaming = false;
    }
    function onfinish(err) {
      if (err && err.code === "ECONNRESET")
        return onaborted();
      if (err)
        return onerror(err);
      if (done)
        return;
      setImmediate(function() {
        if (streaming !== false && !done) {
          onaborted();
          return;
        }
        if (done)
          return;
        done = true;
        callback();
      });
    }
    function onstream() {
      streaming = true;
    }
    file.on("directory", ondirectory);
    file.on("end", onend);
    file.on("error", onerror);
    file.on("file", onfile);
    file.on("stream", onstream);
    onFinished(res2, onfinish);
    if (options.headers) {
      file.on("headers", function headers(res3) {
        var obj = options.headers;
        var keys = Object.keys(obj);
        for (var i = 0;i < keys.length; i++) {
          var k = keys[i];
          res3.setHeader(k, obj[k]);
        }
      });
    }
    file.pipe(res2);
  };
  var stringify = function(value, replacer, spaces, escape2) {
    var json = replacer || spaces ? JSON.stringify(value, replacer, spaces) : JSON.stringify(value);
    if (escape2 && typeof json === "string") {
      json = json.replace(/[<>&]/g, function(c) {
        switch (c.charCodeAt(0)) {
          case 60:
            return "\\u003c";
          case 62:
            return "\\u003e";
          case 38:
            return "\\u0026";
          default:
            return c;
        }
      });
    }
    return json;
  };
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var Buffer2 = require_safe_buffer().Buffer;
  var contentDisposition = require_content_disposition();
  var createError = require_http_errors();
  var deprecate = require_depd()("express");
  var encodeUrl = require_encodeurl();
  var escapeHtml = require_escape_html();
  var http = import.meta.require("http");
  var isAbsolute = require_utils2().isAbsolute;
  var onFinished = require_on_finished();
  var path = import.meta.require("path");
  var statuses = require_statuses();
  var merge = require_utils_merge();
  var sign = require_cookie_signature().sign;
  var normalizeType = require_utils2().normalizeType;
  var normalizeTypes = require_utils2().normalizeTypes;
  var setCharset = require_utils2().setCharset;
  var cookie = require_cookie();
  var send = require_send();
  var extname = path.extname;
  var mime2 = send.mime;
  var resolve = path.resolve;
  var vary = require_vary();
  var res = Object.create(http.ServerResponse.prototype);
  module.exports = res;
  var charsetRegExp = /;\s*charset\s*=/;
  var schemaAndHostRegExp = /^(?:[a-zA-Z][a-zA-Z0-9+.-]*:)?\/\/[^\\\/\?]+/;
  res.status = function status(code) {
    if ((typeof code === "string" || Math.floor(code) !== code) && code > 99 && code < 1000) {
      deprecate("res.status(" + JSON.stringify(code) + "): use res.status(" + Math.floor(code) + ") instead");
    }
    this.statusCode = code;
    return this;
  };
  res.links = function(links) {
    var link = this.get("Link") || "";
    if (link)
      link += ", ";
    return this.set("Link", link + Object.keys(links).map(function(rel) {
      return "<" + links[rel] + '>; rel="' + rel + '"';
    }).join(", "));
  };
  res.send = function send(body) {
    var chunk = body;
    var encoding;
    var req = this.req;
    var type;
    var app = this.app;
    if (arguments.length === 2) {
      if (typeof arguments[0] !== "number" && typeof arguments[1] === "number") {
        deprecate("res.send(body, status): Use res.status(status).send(body) instead");
        this.statusCode = arguments[1];
      } else {
        deprecate("res.send(status, body): Use res.status(status).send(body) instead");
        this.statusCode = arguments[0];
        chunk = arguments[1];
      }
    }
    if (typeof chunk === "number" && arguments.length === 1) {
      if (!this.get("Content-Type")) {
        this.type("txt");
      }
      deprecate("res.send(status): Use res.sendStatus(status) instead");
      this.statusCode = chunk;
      chunk = statuses.message[chunk];
    }
    switch (typeof chunk) {
      case "string":
        if (!this.get("Content-Type")) {
          this.type("html");
        }
        break;
      case "boolean":
      case "number":
      case "object":
        if (chunk === null) {
          chunk = "";
        } else if (Buffer2.isBuffer(chunk)) {
          if (!this.get("Content-Type")) {
            this.type("bin");
          }
        } else {
          return this.json(chunk);
        }
        break;
    }
    if (typeof chunk === "string") {
      encoding = "utf8";
      type = this.get("Content-Type");
      if (typeof type === "string") {
        this.set("Content-Type", setCharset(type, "utf-8"));
      }
    }
    var etagFn = app.get("etag fn");
    var generateETag = !this.get("ETag") && typeof etagFn === "function";
    var len;
    if (chunk !== undefined) {
      if (Buffer2.isBuffer(chunk)) {
        len = chunk.length;
      } else if (!generateETag && chunk.length < 1000) {
        len = Buffer2.byteLength(chunk, encoding);
      } else {
        chunk = Buffer2.from(chunk, encoding);
        encoding = undefined;
        len = chunk.length;
      }
      this.set("Content-Length", len);
    }
    var etag;
    if (generateETag && len !== undefined) {
      if (etag = etagFn(chunk, encoding)) {
        this.set("ETag", etag);
      }
    }
    if (req.fresh)
      this.statusCode = 304;
    if (this.statusCode === 204 || this.statusCode === 304) {
      this.removeHeader("Content-Type");
      this.removeHeader("Content-Length");
      this.removeHeader("Transfer-Encoding");
      chunk = "";
    }
    if (this.statusCode === 205) {
      this.set("Content-Length", "0");
      this.removeHeader("Transfer-Encoding");
      chunk = "";
    }
    if (req.method === "HEAD") {
      this.end();
    } else {
      this.end(chunk, encoding);
    }
    return this;
  };
  res.json = function json(obj) {
    var val = obj;
    if (arguments.length === 2) {
      if (typeof arguments[1] === "number") {
        deprecate("res.json(obj, status): Use res.status(status).json(obj) instead");
        this.statusCode = arguments[1];
      } else {
        deprecate("res.json(status, obj): Use res.status(status).json(obj) instead");
        this.statusCode = arguments[0];
        val = arguments[1];
      }
    }
    var app = this.app;
    var escape2 = app.get("json escape");
    var replacer = app.get("json replacer");
    var spaces = app.get("json spaces");
    var body = stringify(val, replacer, spaces, escape2);
    if (!this.get("Content-Type")) {
      this.set("Content-Type", "application/json");
    }
    return this.send(body);
  };
  res.jsonp = function jsonp(obj) {
    var val = obj;
    if (arguments.length === 2) {
      if (typeof arguments[1] === "number") {
        deprecate("res.jsonp(obj, status): Use res.status(status).jsonp(obj) instead");
        this.statusCode = arguments[1];
      } else {
        deprecate("res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead");
        this.statusCode = arguments[0];
        val = arguments[1];
      }
    }
    var app = this.app;
    var escape2 = app.get("json escape");
    var replacer = app.get("json replacer");
    var spaces = app.get("json spaces");
    var body = stringify(val, replacer, spaces, escape2);
    var callback = this.req.query[app.get("jsonp callback name")];
    if (!this.get("Content-Type")) {
      this.set("X-Content-Type-Options", "nosniff");
      this.set("Content-Type", "application/json");
    }
    if (Array.isArray(callback)) {
      callback = callback[0];
    }
    if (typeof callback === "string" && callback.length !== 0) {
      this.set("X-Content-Type-Options", "nosniff");
      this.set("Content-Type", "text/javascript");
      callback = callback.replace(/[^\[\]\w$.]/g, "");
      if (body === undefined) {
        body = "";
      } else if (typeof body === "string") {
        body = body.replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
      }
      body = "/**/ typeof " + callback + " === \'function\' && " + callback + "(" + body + ");";
    }
    return this.send(body);
  };
  res.sendStatus = function sendStatus(statusCode) {
    var body = statuses.message[statusCode] || String(statusCode);
    this.statusCode = statusCode;
    this.type("txt");
    return this.send(body);
  };
  res.sendFile = function sendFile(path2, options, callback) {
    var done = callback;
    var req = this.req;
    var res2 = this;
    var next = req.next;
    var opts = options || {};
    if (!path2) {
      throw new TypeError("path argument is required to res.sendFile");
    }
    if (typeof path2 !== "string") {
      throw new TypeError("path must be a string to res.sendFile");
    }
    if (typeof options === "function") {
      done = options;
      opts = {};
    }
    if (!opts.root && !isAbsolute(path2)) {
      throw new TypeError("path must be absolute or specify root to res.sendFile");
    }
    var pathname = encodeURI(path2);
    var file = send(req, pathname, opts);
    sendfile(res2, file, opts, function(err) {
      if (done)
        return done(err);
      if (err && err.code === "EISDIR")
        return next();
      if (err && err.code !== "ECONNABORTED" && err.syscall !== "write") {
        next(err);
      }
    });
  };
  res.sendfile = function(path2, options, callback) {
    var done = callback;
    var req = this.req;
    var res2 = this;
    var next = req.next;
    var opts = options || {};
    if (typeof options === "function") {
      done = options;
      opts = {};
    }
    var file = send(req, path2, opts);
    sendfile(res2, file, opts, function(err) {
      if (done)
        return done(err);
      if (err && err.code === "EISDIR")
        return next();
      if (err && err.code !== "ECONNABORTED" && err.syscall !== "write") {
        next(err);
      }
    });
  };
  res.sendfile = deprecate.function(res.sendfile, "res.sendfile: Use res.sendFile instead");
  res.download = function download(path2, filename, options, callback) {
    var done = callback;
    var name = filename;
    var opts = options || null;
    if (typeof filename === "function") {
      done = filename;
      name = null;
      opts = null;
    } else if (typeof options === "function") {
      done = options;
      opts = null;
    }
    if (typeof filename === "object" && (typeof options === "function" || options === undefined)) {
      name = null;
      opts = filename;
    }
    var headers = {
      "Content-Disposition": contentDisposition(name || path2)
    };
    if (opts && opts.headers) {
      var keys = Object.keys(opts.headers);
      for (var i = 0;i < keys.length; i++) {
        var key = keys[i];
        if (key.toLowerCase() !== "content-disposition") {
          headers[key] = opts.headers[key];
        }
      }
    }
    opts = Object.create(opts);
    opts.headers = headers;
    var fullPath = !opts.root ? resolve(path2) : path2;
    return this.sendFile(fullPath, opts, done);
  };
  res.contentType = res.type = function contentType(type) {
    var ct = type.indexOf("/") === -1 ? mime2.lookup(type) : type;
    return this.set("Content-Type", ct);
  };
  res.format = function(obj) {
    var req = this.req;
    var next = req.next;
    var keys = Object.keys(obj).filter(function(v) {
      return v !== "default";
    });
    var key = keys.length > 0 ? req.accepts(keys) : false;
    this.vary("Accept");
    if (key) {
      this.set("Content-Type", normalizeType(key).value);
      obj[key](req, this, next);
    } else if (obj.default) {
      obj.default(req, this, next);
    } else {
      next(createError(406, {
        types: normalizeTypes(keys).map(function(o) {
          return o.value;
        })
      }));
    }
    return this;
  };
  res.attachment = function attachment(filename) {
    if (filename) {
      this.type(extname(filename));
    }
    this.set("Content-Disposition", contentDisposition(filename));
    return this;
  };
  res.append = function append(field, val) {
    var prev = this.get(field);
    var value = val;
    if (prev) {
      value = Array.isArray(prev) ? prev.concat(val) : Array.isArray(val) ? [prev].concat(val) : [prev, val];
    }
    return this.set(field, value);
  };
  res.set = res.header = function header(field, val) {
    if (arguments.length === 2) {
      var value = Array.isArray(val) ? val.map(String) : String(val);
      if (field.toLowerCase() === "content-type") {
        if (Array.isArray(value)) {
          throw new TypeError("Content-Type cannot be set to an Array");
        }
        if (!charsetRegExp.test(value)) {
          var charset = mime2.charsets.lookup(value.split(";")[0]);
          if (charset)
            value += "; charset=" + charset.toLowerCase();
        }
      }
      this.setHeader(field, value);
    } else {
      for (var key in field) {
        this.set(key, field[key]);
      }
    }
    return this;
  };
  res.get = function(field) {
    return this.getHeader(field);
  };
  res.clearCookie = function clearCookie(name, options) {
    var opts = merge({ expires: new Date(1), path: "/" }, options);
    return this.cookie(name, "", opts);
  };
  res.cookie = function(name, value, options) {
    var opts = merge({}, options);
    var secret = this.req.secret;
    var signed = opts.signed;
    if (signed && !secret) {
      throw new Error('cookieParser("secret") required for signed cookies');
    }
    var val = typeof value === "object" ? "j:" + JSON.stringify(value) : String(value);
    if (signed) {
      val = "s:" + sign(val, secret);
    }
    if (opts.maxAge != null) {
      var maxAge = opts.maxAge - 0;
      if (!isNaN(maxAge)) {
        opts.expires = new Date(Date.now() + maxAge);
        opts.maxAge = Math.floor(maxAge / 1000);
      }
    }
    if (opts.path == null) {
      opts.path = "/";
    }
    this.append("Set-Cookie", cookie.serialize(name, String(val), opts));
    return this;
  };
  res.location = function location(url) {
    var loc;
    if (url === "back") {
      loc = this.req.get("Referrer") || "/";
    } else {
      loc = String(url);
    }
    var m = schemaAndHostRegExp.exec(loc);
    var pos = m ? m[0].length + 1 : 0;
    loc = loc.slice(0, pos) + encodeUrl(loc.slice(pos));
    return this.set("Location", loc);
  };
  res.redirect = function redirect(url) {
    var address = url;
    var body;
    var status = 302;
    if (arguments.length === 2) {
      if (typeof arguments[0] === "number") {
        status = arguments[0];
        address = arguments[1];
      } else {
        deprecate("res.redirect(url, status): Use res.redirect(status, url) instead");
        status = arguments[1];
      }
    }
    address = this.location(address).get("Location");
    this.format({
      text: function() {
        body = statuses.message[status] + ". Redirecting to " + address;
      },
      html: function() {
        var u = escapeHtml(address);
        body = "<p>" + statuses.message[status] + '. Redirecting to <a href="' + u + '">' + u + "</a></p>";
      },
      default: function() {
        body = "";
      }
    });
    this.statusCode = status;
    this.set("Content-Length", Buffer2.byteLength(body));
    if (this.req.method === "HEAD") {
      this.end();
    } else {
      this.end(body);
    }
  };
  res.vary = function(field) {
    if (!field || Array.isArray(field) && !field.length) {
      deprecate("res.vary(): Provide a field name");
      return this;
    }
    vary(this, field);
    return this;
  };
  res.render = function render(view, options, callback) {
    var app = this.req.app;
    var done = callback;
    var opts = options || {};
    var req = this.req;
    var self2 = this;
    if (typeof options === "function") {
      done = options;
      opts = {};
    }
    opts._locals = self2.locals;
    done = done || function(err, str) {
      if (err)
        return req.next(err);
      self2.send(str);
    };
    app.render(view, opts, done);
  };
});

// node_modules/serve-static/index.js
var require_serve_static = __commonJS((exports, module) => {
  var serveStatic = function(root, options) {
    if (!root) {
      throw new TypeError("root path required");
    }
    if (typeof root !== "string") {
      throw new TypeError("root path must be a string");
    }
    var opts = Object.create(options || null);
    var fallthrough = opts.fallthrough !== false;
    var redirect = opts.redirect !== false;
    var setHeaders = opts.setHeaders;
    if (setHeaders && typeof setHeaders !== "function") {
      throw new TypeError("option setHeaders must be function");
    }
    opts.maxage = opts.maxage || opts.maxAge || 0;
    opts.root = resolve(root);
    var onDirectory = redirect ? createRedirectDirectoryListener() : createNotFoundDirectoryListener();
    return function serveStatic(req, res, next) {
      if (req.method !== "GET" && req.method !== "HEAD") {
        if (fallthrough) {
          return next();
        }
        res.statusCode = 405;
        res.setHeader("Allow", "GET, HEAD");
        res.setHeader("Content-Length", "0");
        res.end();
        return;
      }
      var forwardError = !fallthrough;
      var originalUrl = parseUrl.original(req);
      var path = parseUrl(req).pathname;
      if (path === "/" && originalUrl.pathname.substr(-1) !== "/") {
        path = "";
      }
      var stream = send(req, path, opts);
      stream.on("directory", onDirectory);
      if (setHeaders) {
        stream.on("headers", setHeaders);
      }
      if (fallthrough) {
        stream.on("file", function onFile() {
          forwardError = true;
        });
      }
      stream.on("error", function error(err) {
        if (forwardError || !(err.statusCode < 500)) {
          next(err);
          return;
        }
        next();
      });
      stream.pipe(res);
    };
  };
  var collapseLeadingSlashes = function(str) {
    for (var i = 0;i < str.length; i++) {
      if (str.charCodeAt(i) !== 47) {
        break;
      }
    }
    return i > 1 ? "/" + str.substr(i) : str;
  };
  var createHtmlDocument = function(title, body) {
    return '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>' + title + "</title>\n</head>\n<body>\n<pre>" + body + "</pre>\n</body>\n</html>\n";
  };
  var createNotFoundDirectoryListener = function() {
    return function notFound() {
      this.error(404);
    };
  };
  var createRedirectDirectoryListener = function() {
    return function redirect(res) {
      if (this.hasTrailingSlash()) {
        this.error(404);
        return;
      }
      var originalUrl = parseUrl.original(this.req);
      originalUrl.path = null;
      originalUrl.pathname = collapseLeadingSlashes(originalUrl.pathname + "/");
      var loc = encodeUrl(url.format(originalUrl));
      var doc = createHtmlDocument("Redirecting", 'Redirecting to <a href="' + escapeHtml(loc) + '">' + escapeHtml(loc) + "</a>");
      res.statusCode = 301;
      res.setHeader("Content-Type", "text/html; charset=UTF-8");
      res.setHeader("Content-Length", Buffer.byteLength(doc));
      res.setHeader("Content-Security-Policy", "default-src 'none'");
      res.setHeader("X-Content-Type-Options", "nosniff");
      res.setHeader("Location", loc);
      res.end(doc);
    };
  };
  /*!
   * serve-static
   * Copyright(c) 2010 Sencha Inc.
   * Copyright(c) 2011 TJ Holowaychuk
   * Copyright(c) 2014-2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  var encodeUrl = require_encodeurl();
  var escapeHtml = require_escape_html();
  var parseUrl = require_parseurl();
  var resolve = import.meta.require("path").resolve;
  var send = require_send();
  var url = import.meta.require("url");
  module.exports = serveStatic;
  module.exports.mime = send.mime;
});

// node_modules/express/lib/express.js
var require_express = __commonJS((exports, module) => {
  var createApplication = function() {
    var app = function(req2, res2, next) {
      app.handle(req2, res2, next);
    };
    mixin(app, EventEmitter.prototype, false);
    mixin(app, proto, false);
    app.request = Object.create(req, {
      app: { configurable: true, enumerable: true, writable: true, value: app }
    });
    app.response = Object.create(res, {
      app: { configurable: true, enumerable: true, writable: true, value: app }
    });
    app.init();
    return app;
  };
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var bodyParser = require_body_parser();
  var EventEmitter = import.meta.require("events").EventEmitter;
  var mixin = require_merge_descriptors();
  var proto = require_application();
  var Route = require_route();
  var Router = require_router();
  var req = require_request();
  var res = require_response();
  exports = module.exports = createApplication;
  exports.application = proto;
  exports.request = req;
  exports.response = res;
  exports.Route = Route;
  exports.Router = Router;
  exports.json = bodyParser.json;
  exports.query = require_query();
  exports.raw = bodyParser.raw;
  exports.static = require_serve_static();
  exports.text = bodyParser.text;
  exports.urlencoded = bodyParser.urlencoded;
  var removedMiddlewares = [
    "bodyParser",
    "compress",
    "cookieSession",
    "session",
    "logger",
    "cookieParser",
    "favicon",
    "responseTime",
    "errorHandler",
    "timeout",
    "methodOverride",
    "vhost",
    "csrf",
    "directory",
    "limit",
    "multipart",
    "staticCache"
  ];
  removedMiddlewares.forEach(function(name) {
    Object.defineProperty(exports, name, {
      get: function() {
        throw new Error("Most middleware (like " + name + ") is no longer bundled with Express and must be installed separately. Please see https://github.com/senchalabs/connect#middleware.");
      },
      configurable: true
    });
  });
});

// node_modules/express/index.js
var require_express2 = __commonJS((exports, module) => {
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = require_express();
});

// node_modules/playwright-core/lib/utilsBundleImpl/index.js
var require_utilsBundleImpl = __commonJS((exports, module) => {
  var __dirname = "/Users/hottin/project/jwave_playlist/node_modules/playwright-core/lib/utilsBundleImpl";
  var cf = Object.create;
  var Ui = Object.defineProperty;
  var uf = Object.getOwnPropertyDescriptor;
  var ff = Object.getOwnPropertyNames;
  var hf = Object.getPrototypeOf;
  var pf = Object.prototype.hasOwnProperty;
  var y = (t, e) => () => (e || t((e = { exports: {} }).exports, e), e.exports);
  var df = (t, e) => {
    for (var i in e)
      Ui(t, i, { get: e[i], enumerable: true });
  };
  var Fs = (t, e, i, r) => {
    if (e && typeof e == "object" || typeof e == "function")
      for (let n of ff(e))
        !pf.call(t, n) && n !== i && Ui(t, n, { get: () => e[n], enumerable: !(r = uf(e, n)) || r.enumerable });
    return t;
  };
  var Te = (t, e, i) => (i = t != null ? cf(hf(t)) : {}, Fs(e || !t || !t.__esModule ? Ui(i, "default", { value: t, enumerable: true }) : i, t));
  var mf = (t) => Fs(Ui({}, "__esModule", { value: true }), t);
  var Ds = y((X0, Us) => {
    var Ms = {};
    Us.exports = Ms;
    var Ns = { reset: [0, 0], bold: [1, 22], dim: [2, 22], italic: [3, 23], underline: [4, 24], inverse: [7, 27], hidden: [8, 28], strikethrough: [9, 29], black: [30, 39], red: [31, 39], green: [32, 39], yellow: [33, 39], blue: [34, 39], magenta: [35, 39], cyan: [36, 39], white: [37, 39], gray: [90, 39], grey: [90, 39], brightRed: [91, 39], brightGreen: [92, 39], brightYellow: [93, 39], brightBlue: [94, 39], brightMagenta: [95, 39], brightCyan: [96, 39], brightWhite: [97, 39], bgBlack: [40, 49], bgRed: [41, 49], bgGreen: [42, 49], bgYellow: [43, 49], bgBlue: [44, 49], bgMagenta: [45, 49], bgCyan: [46, 49], bgWhite: [47, 49], bgGray: [100, 49], bgGrey: [100, 49], bgBrightRed: [101, 49], bgBrightGreen: [102, 49], bgBrightYellow: [103, 49], bgBrightBlue: [104, 49], bgBrightMagenta: [105, 49], bgBrightCyan: [106, 49], bgBrightWhite: [107, 49], blackBG: [40, 49], redBG: [41, 49], greenBG: [42, 49], yellowBG: [43, 49], blueBG: [44, 49], magentaBG: [45, 49], cyanBG: [46, 49], whiteBG: [47, 49] };
    Object.keys(Ns).forEach(function(t) {
      var e = Ns[t], i = Ms[t] = [];
      i.open = "\x1B[" + e[0] + "m", i.close = "\x1B[" + e[1] + "m";
    });
  });
  var qs = y((J0, js) => {
    js.exports = function(t, e) {
      e = e || process.argv;
      var i = e.indexOf("--"), r = /^-{1,2}/.test(t) ? "" : "--", n = e.indexOf(r + t);
      return n !== -1 && (i === -1 ? true : n < i);
    };
  });
  var Vs = y((Q0, Hs) => {
    var gf = import.meta.require("os"), Qe = qs(), je = process.env, Mt = undefined;
    Qe("no-color") || Qe("no-colors") || Qe("color=false") ? Mt = false : (Qe("color") || Qe("colors") || Qe("color=true") || Qe("color=always")) && (Mt = true);
    "FORCE_COLOR" in je && (Mt = je.FORCE_COLOR.length === 0 || parseInt(je.FORCE_COLOR, 10) !== 0);
    function vf(t) {
      return t === 0 ? false : { level: t, hasBasic: true, has256: t >= 2, has16m: t >= 3 };
    }
    function xf(t) {
      if (Mt === false)
        return 0;
      if (Qe("color=16m") || Qe("color=full") || Qe("color=truecolor"))
        return 3;
      if (Qe("color=256"))
        return 2;
      if (t && !t.isTTY && Mt !== true)
        return 0;
      var e = Mt ? 1 : 0;
      if (process.platform === "win32") {
        var i = gf.release().split(".");
        return Number(process.versions.node.split(".")[0]) >= 8 && Number(i[0]) >= 10 && Number(i[2]) >= 10586 ? Number(i[2]) >= 14931 ? 3 : 2 : 1;
      }
      if ("CI" in je)
        return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some(function(n) {
          return n in je;
        }) || je.CI_NAME === "codeship" ? 1 : e;
      if ("TEAMCITY_VERSION" in je)
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(je.TEAMCITY_VERSION) ? 1 : 0;
      if ("TERM_PROGRAM" in je) {
        var r = parseInt((je.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (je.TERM_PROGRAM) {
          case "iTerm.app":
            return r >= 3 ? 3 : 2;
          case "Hyper":
            return 3;
          case "Apple_Terminal":
            return 2;
        }
      }
      return /-256(color)?$/i.test(je.TERM) ? 2 : /^screen|^xterm|^vt100|^rxvt|color|ansi|cygwin|linux/i.test(je.TERM) || ("COLORTERM" in je) ? 1 : (je.TERM === "dumb", e);
    }
    function br(t) {
      var e = xf(t);
      return vf(e);
    }
    Hs.exports = { supportsColor: br, stdout: br(process.stdout), stderr: br(process.stderr) };
  });
  var Gs = y((eg, $s) => {
    $s.exports = function(e, i) {
      var r = "";
      e = e || "Run the trap, drop the bass", e = e.split("");
      var n = { a: ["@", "\u0104", "\u023A", "\u0245", "\u0394", "\u039B", "\u0414"], b: ["\xDF", "\u0181", "\u0243", "\u026E", "\u03B2", "\u0E3F"], c: ["\xA9", "\u023B", "\u03FE"], d: ["\xD0", "\u018A", "\u0500", "\u0501", "\u0502", "\u0503"], e: ["\xCB", "\u0115", "\u018E", "\u0258", "\u03A3", "\u03BE", "\u04BC", "\u0A6C"], f: ["\u04FA"], g: ["\u0262"], h: ["\u0126", "\u0195", "\u04A2", "\u04BA", "\u04C7", "\u050A"], i: ["\u0F0F"], j: ["\u0134"], k: ["\u0138", "\u04A0", "\u04C3", "\u051E"], l: ["\u0139"], m: ["\u028D", "\u04CD", "\u04CE", "\u0520", "\u0521", "\u0D69"], n: ["\xD1", "\u014B", "\u019D", "\u0376", "\u03A0", "\u048A"], o: ["\xD8", "\xF5", "\xF8", "\u01FE", "\u0298", "\u047A", "\u05DD", "\u06DD", "\u0E4F"], p: ["\u01F7", "\u048E"], q: ["\u09CD"], r: ["\xAE", "\u01A6", "\u0210", "\u024C", "\u0280", "\u042F"], s: ["\xA7", "\u03DE", "\u03DF", "\u03E8"], t: ["\u0141", "\u0166", "\u0373"], u: ["\u01B1", "\u054D"], v: ["\u05D8"], w: ["\u0428", "\u0460", "\u047C", "\u0D70"], x: ["\u04B2", "\u04FE", "\u04FC", "\u04FD"], y: ["\xA5", "\u04B0", "\u04CB"], z: ["\u01B5", "\u0240"] };
      return e.forEach(function(s) {
        s = s.toLowerCase();
        var o = n[s] || [" "], l = Math.floor(Math.random() * o.length);
        typeof n[s] != "undefined" ? r += n[s][l] : r += s;
      }), r;
    };
  });
  var Ws = y((tg, zs) => {
    zs.exports = function(e, i) {
      e = e || "   he is here   ";
      var r = { up: ["\u030D", "\u030E", "\u0304", "\u0305", "\u033F", "\u0311", "\u0306", "\u0310", "\u0352", "\u0357", "\u0351", "\u0307", "\u0308", "\u030A", "\u0342", "\u0313", "\u0308", "\u034A", "\u034B", "\u034C", "\u0303", "\u0302", "\u030C", "\u0350", "\u0300", "\u0301", "\u030B", "\u030F", "\u0312", "\u0313", "\u0314", "\u033D", "\u0309", "\u0363", "\u0364", "\u0365", "\u0366", "\u0367", "\u0368", "\u0369", "\u036A", "\u036B", "\u036C", "\u036D", "\u036E", "\u036F", "\u033E", "\u035B", "\u0346", "\u031A"], down: ["\u0316", "\u0317", "\u0318", "\u0319", "\u031C", "\u031D", "\u031E", "\u031F", "\u0320", "\u0324", "\u0325", "\u0326", "\u0329", "\u032A", "\u032B", "\u032C", "\u032D", "\u032E", "\u032F", "\u0330", "\u0331", "\u0332", "\u0333", "\u0339", "\u033A", "\u033B", "\u033C", "\u0345", "\u0347", "\u0348", "\u0349", "\u034D", "\u034E", "\u0353", "\u0354", "\u0355", "\u0356", "\u0359", "\u035A", "\u0323"], mid: ["\u0315", "\u031B", "\u0300", "\u0301", "\u0358", "\u0321", "\u0322", "\u0327", "\u0328", "\u0334", "\u0335", "\u0336", "\u035C", "\u035D", "\u035E", "\u035F", "\u0360", "\u0362", "\u0338", "\u0337", "\u0361", " \u0489"] }, n = [].concat(r.up, r.down, r.mid);
      function s(a) {
        var c = Math.floor(Math.random() * a);
        return c;
      }
      function o(a) {
        var c = false;
        return n.filter(function(u) {
          c = u === a;
        }), c;
      }
      function l(a, c) {
        var u = "", f, h;
        c = c || {}, c.up = typeof c.up != "undefined" ? c.up : true, c.mid = typeof c.mid != "undefined" ? c.mid : true, c.down = typeof c.down != "undefined" ? c.down : true, c.size = typeof c.size != "undefined" ? c.size : "maxi", a = a.split("");
        for (h in a)
          if (!o(h)) {
            switch (u = u + a[h], f = { up: 0, down: 0, mid: 0 }, c.size) {
              case "mini":
                f.up = s(8), f.mid = s(2), f.down = s(8);
                break;
              case "maxi":
                f.up = s(16) + 3, f.mid = s(4) + 1, f.down = s(64) + 3;
                break;
              default:
                f.up = s(8) + 1, f.mid = s(6) / 2, f.down = s(8) + 1;
                break;
            }
            var p = ["up", "mid", "down"];
            for (var d in p)
              for (var m = p[d], v = 0;v <= f[m]; v++)
                c[m] && (u = u + r[m][s(r[m].length)]);
          }
        return u;
      }
      return l(e, i);
    };
  });
  var Ks = y((ig, Ys) => {
    Ys.exports = function(t) {
      return function(e, i, r) {
        if (e === " ")
          return e;
        switch (i % 3) {
          case 0:
            return t.red(e);
          case 1:
            return t.white(e);
          case 2:
            return t.blue(e);
        }
      };
    };
  });
  var Xs = y((rg, Zs) => {
    Zs.exports = function(t) {
      return function(e, i, r) {
        return i % 2 === 0 ? e : t.inverse(e);
      };
    };
  });
  var Qs = y((ng, Js) => {
    Js.exports = function(t) {
      var e = ["red", "yellow", "green", "blue", "magenta"];
      return function(i, r, n) {
        return i === " " ? i : t[e[r++ % e.length]](i);
      };
    };
  });
  var to = y((sg, eo) => {
    eo.exports = function(t) {
      var e = ["underline", "inverse", "grey", "yellow", "red", "green", "blue", "white", "cyan", "magenta", "brightYellow", "brightRed", "brightGreen", "brightBlue", "brightWhite", "brightCyan", "brightMagenta"];
      return function(i, r, n) {
        return i === " " ? i : t[e[Math.round(Math.random() * (e.length - 2))]](i);
      };
    };
  });
  var ao = y((ag, oo) => {
    var oe = {};
    oo.exports = oe;
    oe.themes = {};
    var _f = import.meta.require("util"), bt = oe.styles = Ds(), ro = Object.defineProperties, yf = new RegExp(/[\r\n]+/g);
    oe.supportsColor = Vs().supportsColor;
    typeof oe.enabled == "undefined" && (oe.enabled = oe.supportsColor() !== false);
    oe.enable = function() {
      oe.enabled = true;
    };
    oe.disable = function() {
      oe.enabled = false;
    };
    oe.stripColors = oe.strip = function(t) {
      return ("" + t).replace(/\x1B\[\d+m/g, "");
    };
    var og = oe.stylize = function(e, i) {
      if (!oe.enabled)
        return e + "";
      var r = bt[i];
      return !r && i in oe ? oe[i](e) : r.open + e + r.close;
    }, bf = /[|\\{}()[\]^$+*?.]/g, wf = function(t) {
      if (typeof t != "string")
        throw new TypeError("Expected a string");
      return t.replace(bf, "\\$&");
    };
    function no(t) {
      var e = function i() {
        return Sf.apply(i, arguments);
      };
      return e._styles = t, e.__proto__ = Ef, e;
    }
    var so = function() {
      var t = {};
      return bt.grey = bt.gray, Object.keys(bt).forEach(function(e) {
        bt[e].closeRe = new RegExp(wf(bt[e].close), "g"), t[e] = { get: function() {
          return no(this._styles.concat(e));
        } };
      }), t;
    }(), Ef = ro(function() {
    }, so);
    function Sf() {
      var t = Array.prototype.slice.call(arguments), e = t.map(function(o) {
        return o != null && o.constructor === String ? o : _f.inspect(o);
      }).join(" ");
      if (!oe.enabled || !e)
        return e;
      for (var i = e.indexOf(`
`) != -1, r = this._styles, n = r.length;n--; ) {
        var s = bt[r[n]];
        e = s.open + e.replace(s.closeRe, s.open) + s.close, i && (e = e.replace(yf, function(o) {
          return s.close + o + s.open;
        }));
      }
      return e;
    }
    oe.setTheme = function(t) {
      if (typeof t == "string") {
        console.log("colors.setTheme now only accepts an object, not a string.  If you are trying to set a theme from a file, it is now your (the caller's) responsibility to require the file.  The old syntax looked like colors.setTheme(__dirname + '/../themes/generic-logging.js'); The new syntax looks like colors.setTheme(require(__dirname + '/../themes/generic-logging.js'));");
        return;
      }
      for (var e in t)
        (function(i) {
          oe[i] = function(r) {
            if (typeof t[i] == "object") {
              var n = r;
              for (var s in t[i])
                n = oe[t[i][s]](n);
              return n;
            }
            return oe[t[i]](r);
          };
        })(e);
    };
    function kf() {
      var t = {};
      return Object.keys(so).forEach(function(e) {
        t[e] = { get: function() {
          return no([e]);
        } };
      }), t;
    }
    var Cf = function(e, i) {
      var r = i.split("");
      return r = r.map(e), r.join("");
    };
    oe.trap = Gs();
    oe.zalgo = Ws();
    oe.maps = {};
    oe.maps.america = Ks()(oe);
    oe.maps.zebra = Xs()(oe);
    oe.maps.rainbow = Qs()(oe);
    oe.maps.random = to()(oe);
    for (io in oe.maps)
      (function(t) {
        oe[t] = function(e) {
          return Cf(oe.maps[t], e);
        };
      })(io);
    var io;
    ro(oe, kf());
  });
  var co = y((lg, lo) => {
    var Of = ao();
    lo.exports = Of;
  });
  var fo = y((cg, uo) => {
    var Ut = 1000, Dt = Ut * 60, jt = Dt * 60, wt = jt * 24, If = wt * 7, Tf = wt * 365.25;
    uo.exports = function(t, e) {
      e = e || {};
      var i = typeof t;
      if (i === "string" && t.length > 0)
        return Af(t);
      if (i === "number" && isFinite(t))
        return e.long ? Bf(t) : Rf(t);
      throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(t));
    };
    function Af(t) {
      if (t = String(t), !(t.length > 100)) {
        var e = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);
        if (e) {
          var i = parseFloat(e[1]), r = (e[2] || "ms").toLowerCase();
          switch (r) {
            case "years":
            case "year":
            case "yrs":
            case "yr":
            case "y":
              return i * Tf;
            case "weeks":
            case "week":
            case "w":
              return i * If;
            case "days":
            case "day":
            case "d":
              return i * wt;
            case "hours":
            case "hour":
            case "hrs":
            case "hr":
            case "h":
              return i * jt;
            case "minutes":
            case "minute":
            case "mins":
            case "min":
            case "m":
              return i * Dt;
            case "seconds":
            case "second":
            case "secs":
            case "sec":
            case "s":
              return i * Ut;
            case "milliseconds":
            case "millisecond":
            case "msecs":
            case "msec":
            case "ms":
              return i;
            default:
              return;
          }
        }
      }
    }
    function Rf(t) {
      var e = Math.abs(t);
      return e >= wt ? Math.round(t / wt) + "d" : e >= jt ? Math.round(t / jt) + "h" : e >= Dt ? Math.round(t / Dt) + "m" : e >= Ut ? Math.round(t / Ut) + "s" : t + "ms";
    }
    function Bf(t) {
      var e = Math.abs(t);
      return e >= wt ? Di(t, e, wt, "day") : e >= jt ? Di(t, e, jt, "hour") : e >= Dt ? Di(t, e, Dt, "minute") : e >= Ut ? Di(t, e, Ut, "second") : t + " ms";
    }
    function Di(t, e, i, r) {
      var n = e >= i * 1.5;
      return Math.round(t / i) + " " + r + (n ? "s" : "");
    }
  });
  var wr = y((ug, ho) => {
    function Lf(t) {
      i.debug = i, i.default = i, i.coerce = a, i.disable = s, i.enable = n, i.enabled = o, i.humanize = fo(), i.destroy = c, Object.keys(t).forEach((u) => {
        i[u] = t[u];
      }), i.names = [], i.skips = [], i.formatters = {};
      function e(u) {
        let f = 0;
        for (let h = 0;h < u.length; h++)
          f = (f << 5) - f + u.charCodeAt(h), f |= 0;
        return i.colors[Math.abs(f) % i.colors.length];
      }
      i.selectColor = e;
      function i(u) {
        let f, h = null, p, d;
        function m(...v) {
          if (!m.enabled)
            return;
          let E = m, I = Number(new Date), w = I - (f || I);
          E.diff = w, E.prev = f, E.curr = I, f = I, v[0] = i.coerce(v[0]), typeof v[0] != "string" && v.unshift("%O");
          let C = 0;
          v[0] = v[0].replace(/%([a-zA-Z%])/g, ($, k) => {
            if ($ === "%%")
              return "%";
            C++;
            let U = i.formatters[k];
            if (typeof U == "function") {
              let b = v[C];
              $ = U.call(E, b), v.splice(C, 1), C--;
            }
            return $;
          }), i.formatArgs.call(E, v), (E.log || i.log).apply(E, v);
        }
        return m.namespace = u, m.useColors = i.useColors(), m.color = i.selectColor(u), m.extend = r, m.destroy = i.destroy, Object.defineProperty(m, "enabled", { enumerable: true, configurable: false, get: () => h !== null ? h : (p !== i.namespaces && (p = i.namespaces, d = i.enabled(u)), d), set: (v) => {
          h = v;
        } }), typeof i.init == "function" && i.init(m), m;
      }
      function r(u, f) {
        let h = i(this.namespace + (typeof f == "undefined" ? ":" : f) + u);
        return h.log = this.log, h;
      }
      function n(u) {
        i.save(u), i.namespaces = u, i.names = [], i.skips = [];
        let f, h = (typeof u == "string" ? u : "").split(/[\s,]+/), p = h.length;
        for (f = 0;f < p; f++)
          h[f] && (u = h[f].replace(/\*/g, ".*?"), u[0] === "-" ? i.skips.push(new RegExp("^" + u.slice(1) + "$")) : i.names.push(new RegExp("^" + u + "$")));
      }
      function s() {
        let u = [...i.names.map(l), ...i.skips.map(l).map((f) => "-" + f)].join(",");
        return i.enable(""), u;
      }
      function o(u) {
        if (u[u.length - 1] === "*")
          return true;
        let f, h;
        for (f = 0, h = i.skips.length;f < h; f++)
          if (i.skips[f].test(u))
            return false;
        for (f = 0, h = i.names.length;f < h; f++)
          if (i.names[f].test(u))
            return true;
        return false;
      }
      function l(u) {
        return u.toString().substring(2, u.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function a(u) {
        return u instanceof Error ? u.stack || u.message : u;
      }
      function c() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      return i.enable(i.load()), i;
    }
    ho.exports = Lf;
  });
  var po = y(($e, ji) => {
    $e.formatArgs = Ff;
    $e.save = Nf;
    $e.load = Mf;
    $e.useColors = Pf;
    $e.storage = Uf();
    $e.destroy = (() => {
      let t = false;
      return () => {
        t || (t = true, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
      };
    })();
    $e.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"];
    function Pf() {
      return typeof window != "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs) ? true : typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/) ? false : typeof document != "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window != "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function Ff(t) {
      if (t[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + t[0] + (this.useColors ? "%c " : " ") + "+" + ji.exports.humanize(this.diff), !this.useColors)
        return;
      let e = "color: " + this.color;
      t.splice(1, 0, e, "color: inherit");
      let i = 0, r = 0;
      t[0].replace(/%[a-zA-Z%]/g, (n) => {
        n !== "%%" && (i++, n === "%c" && (r = i));
      }), t.splice(r, 0, e);
    }
    $e.log = console.debug || console.log || (() => {
    });
    function Nf(t) {
      try {
        t ? $e.storage.setItem("debug", t) : $e.storage.removeItem("debug");
      } catch {
      }
    }
    function Mf() {
      let t;
      try {
        t = $e.storage.getItem("debug");
      } catch {
      }
      return !t && typeof process != "undefined" && "env" in process && (t = process.env.DEBUG), t;
    }
    function Uf() {
      try {
        return localStorage;
      } catch {
      }
    }
    ji.exports = wr()($e);
    var { formatters: Df } = ji.exports;
    Df.j = function(t) {
      try {
        return JSON.stringify(t);
      } catch (e) {
        return "[UnexpectedJSONParseError]: " + e.message;
      }
    };
  });
  var go = y((fg, mo) => {
    mo.exports = (t, e) => {
      e = e || process.argv;
      let i = t.startsWith("-") ? "" : t.length === 1 ? "-" : "--", r = e.indexOf(i + t), n = e.indexOf("--");
      return r !== -1 && (n === -1 ? true : r < n);
    };
  });
  var xo = y((hg, vo) => {
    var jf = import.meta.require("os"), et = go(), Me = process.env, qt;
    et("no-color") || et("no-colors") || et("color=false") ? qt = false : (et("color") || et("colors") || et("color=true") || et("color=always")) && (qt = true);
    "FORCE_COLOR" in Me && (qt = Me.FORCE_COLOR.length === 0 || parseInt(Me.FORCE_COLOR, 10) !== 0);
    function qf(t) {
      return t === 0 ? false : { level: t, hasBasic: true, has256: t >= 2, has16m: t >= 3 };
    }
    function Hf(t) {
      if (qt === false)
        return 0;
      if (et("color=16m") || et("color=full") || et("color=truecolor"))
        return 3;
      if (et("color=256"))
        return 2;
      if (t && !t.isTTY && qt !== true)
        return 0;
      let e = qt ? 1 : 0;
      if (process.platform === "win32") {
        let i = jf.release().split(".");
        return Number(process.versions.node.split(".")[0]) >= 8 && Number(i[0]) >= 10 && Number(i[2]) >= 10586 ? Number(i[2]) >= 14931 ? 3 : 2 : 1;
      }
      if ("CI" in Me)
        return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some((i) => (i in Me)) || Me.CI_NAME === "codeship" ? 1 : e;
      if ("TEAMCITY_VERSION" in Me)
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(Me.TEAMCITY_VERSION) ? 1 : 0;
      if (Me.COLORTERM === "truecolor")
        return 3;
      if ("TERM_PROGRAM" in Me) {
        let i = parseInt((Me.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (Me.TERM_PROGRAM) {
          case "iTerm.app":
            return i >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      return /-256(color)?$/i.test(Me.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(Me.TERM) || ("COLORTERM" in Me) ? 1 : (Me.TERM === "dumb", e);
    }
    function Er(t) {
      let e = Hf(t);
      return qf(e);
    }
    vo.exports = { supportsColor: Er, stdout: Er(process.stdout), stderr: Er(process.stderr) };
  });
  var yo = y((Pe, Hi) => {
    var Vf = import.meta.require("tty"), qi = import.meta.require("util");
    Pe.init = Zf;
    Pe.log = Wf;
    Pe.formatArgs = Gf;
    Pe.save = Yf;
    Pe.load = Kf;
    Pe.useColors = $f;
    Pe.destroy = qi.deprecate(() => {
    }, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    Pe.colors = [6, 2, 3, 4, 5, 1];
    try {
      let t = xo();
      t && (t.stderr || t).level >= 2 && (Pe.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221]);
    } catch {
    }
    Pe.inspectOpts = Object.keys(process.env).filter((t) => /^debug_/i.test(t)).reduce((t, e) => {
      let i = e.substring(6).toLowerCase().replace(/_([a-z])/g, (n, s) => s.toUpperCase()), r = process.env[e];
      return /^(yes|on|true|enabled)$/i.test(r) ? r = true : /^(no|off|false|disabled)$/i.test(r) ? r = false : r === "null" ? r = null : r = Number(r), t[i] = r, t;
    }, {});
    function $f() {
      return "colors" in Pe.inspectOpts ? !!Pe.inspectOpts.colors : Vf.isatty(process.stderr.fd);
    }
    function Gf(t) {
      let { namespace: e, useColors: i } = this;
      if (i) {
        let r = this.color, n = "\x1B[3" + (r < 8 ? r : "8;5;" + r), s = `  ${n};1m${e} \x1B[0m`;
        t[0] = s + t[0].split(`
`).join(`
` + s), t.push(n + "m+" + Hi.exports.humanize(this.diff) + "\x1B[0m");
      } else
        t[0] = zf() + e + " " + t[0];
    }
    function zf() {
      return Pe.inspectOpts.hideDate ? "" : new Date().toISOString() + " ";
    }
    function Wf(...t) {
      return process.stderr.write(qi.format(...t) + `
`);
    }
    function Yf(t) {
      t ? process.env.DEBUG = t : delete process.env.DEBUG;
    }
    function Kf() {
      return process.env.DEBUG;
    }
    function Zf(t) {
      t.inspectOpts = {};
      let e = Object.keys(Pe.inspectOpts);
      for (let i = 0;i < e.length; i++)
        t.inspectOpts[e[i]] = Pe.inspectOpts[e[i]];
    }
    Hi.exports = wr()(Pe);
    var { formatters: _o } = Hi.exports;
    _o.o = function(t) {
      return this.inspectOpts.colors = this.useColors, qi.inspect(t, this.inspectOpts).split(`
`).map((e) => e.trim()).join(" ");
    };
    _o.O = function(t) {
      return this.inspectOpts.colors = this.useColors, qi.inspect(t, this.inspectOpts);
    };
  });
  var Ht = y((pg, Sr) => {
    typeof process == "undefined" || process.type === "renderer" || false || process.__nwjs ? Sr.exports = po() : Sr.exports = yo();
  });
  var wo = y((bo) => {
    var Xf = import.meta.require("url").parse, Jf = { ftp: 21, gopher: 70, http: 80, https: 443, ws: 80, wss: 443 }, Qf = String.prototype.endsWith || function(t) {
      return t.length <= this.length && this.indexOf(t, this.length - t.length) !== -1;
    };
    function eh(t) {
      var e = typeof t == "string" ? Xf(t) : t || {}, i = e.protocol, r = e.host, n = e.port;
      if (typeof r != "string" || !r || typeof i != "string" || (i = i.split(":", 1)[0], r = r.replace(/:\d*$/, ""), n = parseInt(n) || Jf[i] || 0, !th(r, n)))
        return "";
      var s = Vt("npm_config_" + i + "_proxy") || Vt(i + "_proxy") || Vt("npm_config_proxy") || Vt("all_proxy");
      return s && s.indexOf("://") === -1 && (s = i + "://" + s), s;
    }
    function th(t, e) {
      var i = (Vt("npm_config_no_proxy") || Vt("no_proxy")).toLowerCase();
      return i ? i === "*" ? false : i.split(/[,\s]/).every(function(r) {
        if (!r)
          return true;
        var n = r.match(/^(.+):(\d+)$/), s = n ? n[1] : r, o = n ? parseInt(n[2]) : 0;
        return o && o !== e ? true : /^[.*]/.test(s) ? (s.charAt(0) === "*" && (s = s.slice(1)), !Qf.call(t, s)) : t !== s;
      }) : true;
    }
    function Vt(t) {
      return process.env[t.toLowerCase()] || process.env[t.toUpperCase()] || "";
    }
    bo.getProxyForUrl = eh;
  });
  var Eo = y((kr) => {
    Object.defineProperty(kr, "__esModule", { value: true });
    function ih(t) {
      return function(e, i) {
        return new Promise((r, n) => {
          t.call(this, e, i, (s, o) => {
            s ? n(s) : r(o);
          });
        });
      };
    }
    kr.default = ih;
  });
  var Ir = y((Or, ko) => {
    var So = Or && Or.__importDefault || function(t) {
      return t && t.__esModule ? t : { default: t };
    }, rh = import.meta.require("events"), nh = So(Ht()), sh = So(Eo()), gi = nh.default("agent-base");
    function oh(t) {
      return !!t && typeof t.addRequest == "function";
    }
    function Cr() {
      let { stack: t } = new Error;
      return typeof t != "string" ? false : t.split(`
`).some((e) => e.indexOf("(https.js:") !== -1 || e.indexOf("node:https:") !== -1);
    }
    function Vi(t, e) {
      return new Vi.Agent(t, e);
    }
    (function(t) {

      class e extends rh.EventEmitter {
        constructor(r, n) {
          super();
          let s = n;
          typeof r == "function" ? this.callback = r : r && (s = r), this.timeout = null, s && typeof s.timeout == "number" && (this.timeout = s.timeout), this.maxFreeSockets = 1, this.maxSockets = 1, this.maxTotalSockets = 1 / 0, this.sockets = {}, this.freeSockets = {}, this.requests = {}, this.options = {};
        }
        get defaultPort() {
          return typeof this.explicitDefaultPort == "number" ? this.explicitDefaultPort : Cr() ? 443 : 80;
        }
        set defaultPort(r) {
          this.explicitDefaultPort = r;
        }
        get protocol() {
          return typeof this.explicitProtocol == "string" ? this.explicitProtocol : Cr() ? "https:" : "http:";
        }
        set protocol(r) {
          this.explicitProtocol = r;
        }
        callback(r, n, s) {
          throw new Error('"agent-base" has no default implementation, you must subclass and override `callback()`');
        }
        addRequest(r, n) {
          let s = Object.assign({}, n);
          typeof s.secureEndpoint != "boolean" && (s.secureEndpoint = Cr()), s.host == null && (s.host = "localhost"), s.port == null && (s.port = s.secureEndpoint ? 443 : 80), s.protocol == null && (s.protocol = s.secureEndpoint ? "https:" : "http:"), s.host && s.path && delete s.path, delete s.agent, delete s.hostname, delete s._defaultAgent, delete s.defaultPort, delete s.createConnection, r._last = true, r.shouldKeepAlive = false;
          let o = false, l = null, a = s.timeout || this.timeout, c = (p) => {
            r._hadError || (r.emit("error", p), r._hadError = true);
          }, u = () => {
            l = null, o = true;
            let p = new Error(`A "socket" was not created for HTTP request before ${a}ms`);
            p.code = "ETIMEOUT", c(p);
          }, f = (p) => {
            o || (l !== null && (clearTimeout(l), l = null), c(p));
          }, h = (p) => {
            if (o)
              return;
            if (l != null && (clearTimeout(l), l = null), oh(p)) {
              gi("Callback returned another Agent instance %o", p.constructor.name), p.addRequest(r, s);
              return;
            }
            if (p) {
              p.once("free", () => {
                this.freeSocket(p, s);
              }), r.onSocket(p);
              return;
            }
            let d = new Error(`no Duplex stream was returned to agent-base for \`${r.method} ${r.path}\``);
            c(d);
          };
          if (typeof this.callback != "function") {
            c(new Error("`callback` is not defined"));
            return;
          }
          this.promisifiedCallback || (this.callback.length >= 3 ? (gi("Converting legacy callback function to promise"), this.promisifiedCallback = sh.default(this.callback)) : this.promisifiedCallback = this.callback), typeof a == "number" && a > 0 && (l = setTimeout(u, a)), "port" in s && typeof s.port != "number" && (s.port = Number(s.port));
          try {
            gi("Resolving socket for %o request: %o", s.protocol, `${r.method} ${r.path}`), Promise.resolve(this.promisifiedCallback(r, s)).then(h, f);
          } catch (p) {
            Promise.reject(p).catch(f);
          }
        }
        freeSocket(r, n) {
          gi("Freeing socket %o %o", r.constructor.name, n), r.destroy();
        }
        destroy() {
          gi("Destroying agent %o", this.constructor.name);
        }
      }
      t.Agent = e, t.prototype = t.Agent.prototype;
    })(Vi || (Vi = {}));
    ko.exports = Vi;
  });
  var Co = y((xi) => {
    var ah = xi && xi.__importDefault || function(t) {
      return t && t.__esModule ? t : { default: t };
    };
    Object.defineProperty(xi, "__esModule", { value: true });
    var lh = ah(Ht()), vi = lh.default("https-proxy-agent:parse-proxy-response");
    function ch(t) {
      return new Promise((e, i) => {
        let r = 0, n = [];
        function s() {
          let f = t.read();
          f ? u(f) : t.once("readable", s);
        }
        function o() {
          t.removeListener("end", a), t.removeListener("error", c), t.removeListener("close", l), t.removeListener("readable", s);
        }
        function l(f) {
          vi("onclose had error %o", f);
        }
        function a() {
          vi("onend");
        }
        function c(f) {
          o(), vi("onerror %o", f), i(f);
        }
        function u(f) {
          n.push(f), r += f.length;
          let h = Buffer.concat(n, r);
          if (h.indexOf(`\r
\r
`) === -1) {
            vi("have not received end of HTTP headers yet..."), s();
            return;
          }
          let d = h.toString("ascii", 0, h.indexOf(`\r
`)), m = +d.split(" ")[1];
          vi("got proxy server response: %o", d), e({ statusCode: m, buffered: h });
        }
        t.on("error", c), t.on("close", l), t.on("end", a), s();
      });
    }
    xi.default = ch;
  });
  var To = y((Et) => {
    var uh = Et && Et.__awaiter || function(t, e, i, r) {
      function n(s) {
        return s instanceof i ? s : new i(function(o) {
          o(s);
        });
      }
      return new (i || (i = Promise))(function(s, o) {
        function l(u) {
          try {
            c(r.next(u));
          } catch (f) {
            o(f);
          }
        }
        function a(u) {
          try {
            c(r.throw(u));
          } catch (f) {
            o(f);
          }
        }
        function c(u) {
          u.done ? s(u.value) : n(u.value).then(l, a);
        }
        c((r = r.apply(t, e || [])).next());
      });
    }, $t = Et && Et.__importDefault || function(t) {
      return t && t.__esModule ? t : { default: t };
    };
    Object.defineProperty(Et, "__esModule", { value: true });
    var Oo = $t(import.meta.require("net")), Io = $t(import.meta.require("tls")), fh = $t(import.meta.require("url")), hh = $t(import.meta.require("assert")), ph = $t(Ht()), dh = Ir(), mh = $t(Co()), _i = ph.default("https-proxy-agent:agent"), Tr = class extends dh.Agent {
      constructor(e) {
        let i;
        if (typeof e == "string" ? i = fh.default.parse(e) : i = e, !i)
          throw new Error("an HTTP(S) proxy server `host` and `port` must be specified!");
        _i("creating new HttpsProxyAgent instance: %o", i), super(i);
        let r = Object.assign({}, i);
        this.secureProxy = i.secureProxy || xh(r.protocol), r.host = r.hostname || r.host, typeof r.port == "string" && (r.port = parseInt(r.port, 10)), !r.port && r.host && (r.port = this.secureProxy ? 443 : 80), this.secureProxy && !("ALPNProtocols" in r) && (r.ALPNProtocols = ["http 1.1"]), r.host && r.path && (delete r.path, delete r.pathname), this.proxy = r;
      }
      callback(e, i) {
        return uh(this, undefined, undefined, function* () {
          let { proxy: r, secureProxy: n } = this, s;
          n ? (_i("Creating `tls.Socket`: %o", r), s = Io.default.connect(r)) : (_i("Creating `net.Socket`: %o", r), s = Oo.default.connect(r));
          let o = Object.assign({}, r.headers), a = `CONNECT ${`${i.host}:${i.port}`} HTTP/1.1\r
`;
          r.auth && (o["Proxy-Authorization"] = `Basic ${Buffer.from(r.auth).toString("base64")}`);
          let { host: c, port: u, secureEndpoint: f } = i;
          vh(u, f) || (c += `:${u}`), o.Host = c, o.Connection = "close";
          for (let v of Object.keys(o))
            a += `${v}: ${o[v]}\r
`;
          let h = mh.default(s);
          s.write(`${a}\r
`);
          let { statusCode: p, buffered: d } = yield h;
          if (p === 200) {
            if (e.once("socket", gh), i.secureEndpoint) {
              let v = i.servername || i.host;
              if (!v)
                throw new Error('Could not determine "servername"');
              return _i("Upgrading socket connection to TLS"), Io.default.connect(Object.assign(Object.assign({}, _h(i, "host", "hostname", "path", "port")), { socket: s, servername: v }));
            }
            return s;
          }
          s.destroy();
          let m = new Oo.default.Socket;
          return m.readable = true, e.once("socket", (v) => {
            _i("replaying proxy buffer for failed request"), hh.default(v.listenerCount("data") > 0), v.push(d), v.push(null);
          }), m;
        });
      }
    };
    Et.default = Tr;
    function gh(t) {
      t.resume();
    }
    function vh(t, e) {
      return !!(!e && t === 80 || e && t === 443);
    }
    function xh(t) {
      return typeof t == "string" ? /^https:?$/i.test(t) : false;
    }
    function _h(t, ...e) {
      let i = {}, r;
      for (r in t)
        e.includes(r) || (i[r] = t[r]);
      return i;
    }
  });
  var Ro = y((Br, Ao) => {
    var yh = Br && Br.__importDefault || function(t) {
      return t && t.__esModule ? t : { default: t };
    }, Ar = yh(To());
    function Rr(t) {
      return new Ar.default(t);
    }
    (function(t) {
      t.HttpsProxyAgent = Ar.default, t.prototype = Ar.default.prototype;
    })(Rr || (Rr = {}));
    Ao.exports = Rr;
  });
  var Po = y((xg, $i) => {
    var Lo = Lo || function(t) {
      return Buffer.from(t).toString("base64");
    };
    function bh(t) {
      var e = this, i = Math.round, r = Math.floor, n = new Array(64), s = new Array(64), o = new Array(64), l = new Array(64), a, c, u, f, h = new Array(65535), p = new Array(65535), d = new Array(64), m = new Array(64), v = [], E = 0, I = 7, w = new Array(64), C = new Array(64), _ = new Array(64), $ = new Array(256), k = new Array(2048), U, b = [0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63], T = [0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], B = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], G = [0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125], L = [1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113, 20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240, 36, 51, 98, 114, 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250], X = [0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], R = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], N = [0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119], q = [0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34, 50, 129, 8, 20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21, 98, 114, 209, 10, 22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250];
      function z(g) {
        for (var j = [16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13, 16, 24, 40, 57, 69, 56, 14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103, 121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99], W = 0;W < 64; W++) {
          var V = r((j[W] * g + 50) / 100);
          V < 1 ? V = 1 : V > 255 && (V = 255), n[b[W]] = V;
        }
        for (var J = [17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26, 56, 99, 99, 99, 99, 99, 47, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99], Q = 0;Q < 64; Q++) {
          var fe = r((J[Q] * g + 50) / 100);
          fe < 1 ? fe = 1 : fe > 255 && (fe = 255), s[b[Q]] = fe;
        }
        for (var he = [1, 1.387039845, 1.306562965, 1.175875602, 1, 0.785694958, 0.5411961, 0.275899379], Se = 0, xe = 0;xe < 8; xe++)
          for (var O = 0;O < 8; O++)
            o[Se] = 1 / (n[b[Se]] * he[xe] * he[O] * 8), l[Se] = 1 / (s[b[Se]] * he[xe] * he[O] * 8), Se++;
      }
      function P(g, j) {
        for (var W = 0, V = 0, J = new Array, Q = 1;Q <= 16; Q++) {
          for (var fe = 1;fe <= g[Q]; fe++)
            J[j[V]] = [], J[j[V]][0] = W, J[j[V]][1] = Q, V++, W++;
          W *= 2;
        }
        return J;
      }
      function be() {
        a = P(T, B), c = P(X, R), u = P(G, L), f = P(N, q);
      }
      function le() {
        for (var g = 1, j = 2, W = 1;W <= 15; W++) {
          for (var V = g;V < j; V++)
            p[32767 + V] = W, h[32767 + V] = [], h[32767 + V][1] = W, h[32767 + V][0] = V;
          for (var J = -(j - 1);J <= -g; J++)
            p[32767 + J] = W, h[32767 + J] = [], h[32767 + J][1] = W, h[32767 + J][0] = j - 1 + J;
          g <<= 1, j <<= 1;
        }
      }
      function ie() {
        for (var g = 0;g < 256; g++)
          k[g] = 19595 * g, k[g + 256 >> 0] = 38470 * g, k[g + 512 >> 0] = 7471 * g + 32768, k[g + 768 >> 0] = -11059 * g, k[g + 1024 >> 0] = -21709 * g, k[g + 1280 >> 0] = 32768 * g + 8421375, k[g + 1536 >> 0] = -27439 * g, k[g + 1792 >> 0] = -5329 * g;
      }
      function re(g) {
        for (var j = g[0], W = g[1] - 1;W >= 0; )
          j & 1 << W && (E |= 1 << I), W--, I--, I < 0 && (E == 255 ? (x(255), x(0)) : x(E), I = 7, E = 0);
      }
      function x(g) {
        v.push(g);
      }
      function H(g) {
        x(g >> 8 & 255), x(g & 255);
      }
      function de(g, j) {
        var W, V, J, Q, fe, he, Se, xe, O = 0, M, Z = 8, we = 64;
        for (M = 0;M < Z; ++M) {
          W = g[O], V = g[O + 1], J = g[O + 2], Q = g[O + 3], fe = g[O + 4], he = g[O + 5], Se = g[O + 6], xe = g[O + 7];
          var ee = W + xe, ae = W - xe, ge = V + Se, Y = V - Se, pe = J + he, Le = J - he, ye = Q + fe, Ye = Q - fe, nt = ee + ye, yt = ee - ye, Ft = ge + pe, Nt = ge - pe;
          g[O] = nt + Ft, g[O + 4] = nt - Ft;
          var ci = (Nt + yt) * 0.707106781;
          g[O + 2] = yt + ci, g[O + 6] = yt - ci, nt = Ye + Le, Ft = Le + Y, Nt = Y + ae;
          var ui = (nt - Nt) * 0.382683433, Pi = 0.5411961 * nt + ui, fi = 1.306562965 * Nt + ui, hi = Ft * 0.707106781, pi = ae + hi, di = ae - hi;
          g[O + 5] = di + Pi, g[O + 3] = di - Pi, g[O + 1] = pi + fi, g[O + 7] = pi - fi, O += 8;
        }
        for (O = 0, M = 0;M < Z; ++M) {
          W = g[O], V = g[O + 8], J = g[O + 16], Q = g[O + 24], fe = g[O + 32], he = g[O + 40], Se = g[O + 48], xe = g[O + 56];
          var ws2 = W + xe, _r = W - xe, Es = V + Se, Ss = V - Se, ks = J + he, Cs = J - he, Os = Q + fe, lf = Q - fe, mi = ws2 + Os, yr = ws2 - Os, Fi = Es + ks, Ni = Es - ks;
          g[O] = mi + Fi, g[O + 32] = mi - Fi;
          var Is = (Ni + yr) * 0.707106781;
          g[O + 16] = yr + Is, g[O + 48] = yr - Is, mi = lf + Cs, Fi = Cs + Ss, Ni = Ss + _r;
          var Ts = (mi - Ni) * 0.382683433, As = 0.5411961 * mi + Ts, Rs = 1.306562965 * Ni + Ts, Bs = Fi * 0.707106781, Ls = _r + Bs, Ps = _r - Bs;
          g[O + 40] = Ps + As, g[O + 24] = Ps - As, g[O + 8] = Ls + Rs, g[O + 56] = Ls - Rs, O++;
        }
        var Mi;
        for (M = 0;M < we; ++M)
          Mi = g[M] * j[M], d[M] = Mi > 0 ? Mi + 0.5 | 0 : Mi - 0.5 | 0;
        return d;
      }
      function me() {
        H(65504), H(16), x(74), x(70), x(73), x(70), x(0), x(1), x(1), x(0), H(1), H(1), x(0), x(0);
      }
      function ce(g) {
        if (g) {
          H(65505), g[0] === 69 && g[1] === 120 && g[2] === 105 && g[3] === 102 ? H(g.length + 2) : (H(g.length + 5 + 2), x(69), x(120), x(105), x(102), x(0));
          for (var j = 0;j < g.length; j++)
            x(g[j]);
        }
      }
      function ue(g, j) {
        H(65472), H(17), x(8), H(j), H(g), x(3), x(1), x(17), x(0), x(2), x(17), x(1), x(3), x(17), x(1);
      }
      function ne() {
        H(65499), H(132), x(0);
        for (var g = 0;g < 64; g++)
          x(n[g]);
        x(1);
        for (var j = 0;j < 64; j++)
          x(s[j]);
      }
      function F() {
        H(65476), H(418), x(0);
        for (var g = 0;g < 16; g++)
          x(T[g + 1]);
        for (var j = 0;j <= 11; j++)
          x(B[j]);
        x(16);
        for (var W = 0;W < 16; W++)
          x(G[W + 1]);
        for (var V = 0;V <= 161; V++)
          x(L[V]);
        x(1);
        for (var J = 0;J < 16; J++)
          x(X[J + 1]);
        for (var Q = 0;Q <= 11; Q++)
          x(R[Q]);
        x(17);
        for (var fe = 0;fe < 16; fe++)
          x(N[fe + 1]);
        for (var he = 0;he <= 161; he++)
          x(q[he]);
      }
      function A(g) {
        typeof g == "undefined" || g.constructor !== Array || g.forEach((j) => {
          if (typeof j == "string") {
            H(65534);
            var W = j.length;
            H(W + 2);
            var V;
            for (V = 0;V < W; V++)
              x(j.charCodeAt(V));
          }
        });
      }
      function ve() {
        H(65498), H(12), x(3), x(1), x(0), x(2), x(17), x(3), x(17), x(0), x(63), x(0);
      }
      function K(g, j, W, V, J) {
        for (var Q = J[0], fe = J[240], he, Se = 16, xe = 63, O = 64, M = de(g, j), Z = 0;Z < O; ++Z)
          m[b[Z]] = M[Z];
        var we = m[0] - W;
        W = m[0], we == 0 ? re(V[0]) : (he = 32767 + we, re(V[p[he]]), re(h[he]));
        for (var ee = 63;ee > 0 && m[ee] == 0; ee--)
          ;
        if (ee == 0)
          return re(Q), W;
        for (var ae = 1, ge;ae <= ee; ) {
          for (var Y = ae;m[ae] == 0 && ae <= ee; ++ae)
            ;
          var pe = ae - Y;
          if (pe >= Se) {
            ge = pe >> 4;
            for (var Le = 1;Le <= ge; ++Le)
              re(fe);
            pe = pe & 15;
          }
          he = 32767 + m[ae], re(J[(pe << 4) + p[he]]), re(h[he]), ae++;
        }
        return ee != xe && re(Q), W;
      }
      function se() {
        for (var g = String.fromCharCode, j = 0;j < 256; j++)
          $[j] = g(j);
      }
      this.encode = function(g, j) {
        var W = new Date().getTime();
        j && We(j), v = new Array, E = 0, I = 7, H(65496), me(), A(g.comments), ce(g.exifBuffer), ne(), ue(g.width, g.height), F(), ve();
        var V = 0, J = 0, Q = 0;
        E = 0, I = 7, this.encode.displayName = "_encode_";
        for (var { data: fe, width: he, height: Se } = g, xe = he * 4, O = he * 3, M, Z = 0, we, ee, ae, ge, Y, pe, Le, ye;Z < Se; ) {
          for (M = 0;M < xe; ) {
            for (ge = xe * Z + M, Y = ge, pe = -1, Le = 0, ye = 0;ye < 64; ye++)
              Le = ye >> 3, pe = (ye & 7) * 4, Y = ge + Le * xe + pe, Z + Le >= Se && (Y -= xe * (Z + 1 + Le - Se)), M + pe >= xe && (Y -= M + pe - xe + 4), we = fe[Y++], ee = fe[Y++], ae = fe[Y++], w[ye] = (k[we] + k[ee + 256 >> 0] + k[ae + 512 >> 0] >> 16) - 128, C[ye] = (k[we + 768 >> 0] + k[ee + 1024 >> 0] + k[ae + 1280 >> 0] >> 16) - 128, _[ye] = (k[we + 1280 >> 0] + k[ee + 1536 >> 0] + k[ae + 1792 >> 0] >> 16) - 128;
            V = K(w, o, V, a, u), J = K(C, l, J, c, f), Q = K(_, l, Q, c, f), M += 32;
          }
          Z += 8;
        }
        if (I >= 0) {
          var Ye = [];
          Ye[1] = I + 1, Ye[0] = (1 << I + 1) - 1, re(Ye);
        }
        if (H(65497), typeof $i == "undefined")
          return new Uint8Array(v);
        return Buffer.from(v);
        var nt, yt;
      };
      function We(g) {
        if (g <= 0 && (g = 1), g > 100 && (g = 100), U != g) {
          var j = 0;
          g < 50 ? j = Math.floor(5000 / g) : j = Math.floor(200 - g * 2), z(j), U = g;
        }
      }
      function Je() {
        var g = new Date().getTime();
        t || (t = 50), se(), be(), le(), ie(), We(t);
        var j = new Date().getTime() - g;
      }
      Je();
    }
    typeof $i != "undefined" ? $i.exports = Bo : typeof window != "undefined" && (window["jpeg-js"] = window["jpeg-js"] || {}, window["jpeg-js"].encode = Bo);
    function Bo(t, e) {
      typeof e == "undefined" && (e = 50);
      var i = new bh(e), r = i.encode(t, e);
      return { data: r, width: t.width, height: t.height };
    }
  });
  var No = y((_g, Pr) => {
    var Lr = function() {
      var e = new Int32Array([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63]), i = 4017, r = 799, n = 3406, s = 2276, o = 1567, l = 3784, a = 5793, c = 2896;
      function u() {
      }
      function f(I, w) {
        for (var C = 0, _ = [], $, k, U = 16;U > 0 && !I[U - 1]; )
          U--;
        _.push({ children: [], index: 0 });
        var b = _[0], T;
        for ($ = 0;$ < U; $++) {
          for (k = 0;k < I[$]; k++) {
            for (b = _.pop(), b.children[b.index] = w[C];b.index > 0; ) {
              if (_.length === 0)
                throw new Error("Could not recreate Huffman Table");
              b = _.pop();
            }
            for (b.index++, _.push(b);_.length <= $; )
              _.push(T = { children: [], index: 0 }), b.children[b.index] = T.children, b = T;
            C++;
          }
          $ + 1 < U && (_.push(T = { children: [], index: 0 }), b.children[b.index] = T.children, b = T);
        }
        return _[0].children;
      }
      function h(I, w, C, _, $, k, U, b, T, B) {
        var { precision: G, samplesPerLine: L, scanLines: X, mcusPerLine: R, progressive: N, maxH: q, maxV: z } = C, P = w, be = 0, le = 0;
        function ie() {
          if (le > 0)
            return le--, be >> le & 1;
          if (be = I[w++], be == 255) {
            var O = I[w++];
            if (O)
              throw new Error("unexpected marker: " + (be << 8 | O).toString(16));
          }
          return le = 7, be >>> 7;
        }
        function re(O) {
          for (var M = O, Z;(Z = ie()) !== null; ) {
            if (M = M[Z], typeof M == "number")
              return M;
            if (typeof M != "object")
              throw new Error("invalid huffman sequence");
          }
          return null;
        }
        function x(O) {
          for (var M = 0;O > 0; ) {
            var Z = ie();
            if (Z === null)
              return;
            M = M << 1 | Z, O--;
          }
          return M;
        }
        function H(O) {
          var M = x(O);
          return M >= 1 << O - 1 ? M : M + (-1 << O) + 1;
        }
        function de(O, M) {
          var Z = re(O.huffmanTableDC), we = Z === 0 ? 0 : H(Z);
          M[0] = O.pred += we;
          for (var ee = 1;ee < 64; ) {
            var ae = re(O.huffmanTableAC), ge = ae & 15, Y = ae >> 4;
            if (ge === 0) {
              if (Y < 15)
                break;
              ee += 16;
              continue;
            }
            ee += Y;
            var pe = e[ee];
            M[pe] = H(ge), ee++;
          }
        }
        function me(O, M) {
          var Z = re(O.huffmanTableDC), we = Z === 0 ? 0 : H(Z) << T;
          M[0] = O.pred += we;
        }
        function ce(O, M) {
          M[0] |= ie() << T;
        }
        var ue = 0;
        function ne(O, M) {
          if (ue > 0) {
            ue--;
            return;
          }
          for (var Z = k, we = U;Z <= we; ) {
            var ee = re(O.huffmanTableAC), ae = ee & 15, ge = ee >> 4;
            if (ae === 0) {
              if (ge < 15) {
                ue = x(ge) + (1 << ge) - 1;
                break;
              }
              Z += 16;
              continue;
            }
            Z += ge;
            var Y = e[Z];
            M[Y] = H(ae) * (1 << T), Z++;
          }
        }
        var F = 0, A;
        function ve(O, M) {
          for (var Z = k, we = U, ee = 0;Z <= we; ) {
            var ae = e[Z], ge = M[ae] < 0 ? -1 : 1;
            switch (F) {
              case 0:
                var Y = re(O.huffmanTableAC), pe = Y & 15, ee = Y >> 4;
                if (pe === 0)
                  ee < 15 ? (ue = x(ee) + (1 << ee), F = 4) : (ee = 16, F = 1);
                else {
                  if (pe !== 1)
                    throw new Error("invalid ACn encoding");
                  A = H(pe), F = ee ? 2 : 3;
                }
                continue;
              case 1:
              case 2:
                M[ae] ? M[ae] += (ie() << T) * ge : (ee--, ee === 0 && (F = F == 2 ? 3 : 0));
                break;
              case 3:
                M[ae] ? M[ae] += (ie() << T) * ge : (M[ae] = A << T, F = 0);
                break;
              case 4:
                M[ae] && (M[ae] += (ie() << T) * ge);
                break;
            }
            Z++;
          }
          F === 4 && (ue--, ue === 0 && (F = 0));
        }
        function K(O, M, Z, we, ee) {
          var ae = Z / R | 0, ge = Z % R, Y = ae * O.v + we, pe = ge * O.h + ee;
          O.blocks[Y] === undefined && B.tolerantDecoding || M(O, O.blocks[Y][pe]);
        }
        function se(O, M, Z) {
          var we = Z / O.blocksPerLine | 0, ee = Z % O.blocksPerLine;
          O.blocks[we] === undefined && B.tolerantDecoding || M(O, O.blocks[we][ee]);
        }
        var We = _.length, Je, g, j, W, V, J;
        N ? k === 0 ? J = b === 0 ? me : ce : J = b === 0 ? ne : ve : J = de;
        var Q = 0, fe, he;
        We == 1 ? he = _[0].blocksPerLine * _[0].blocksPerColumn : he = R * C.mcusPerColumn, $ || ($ = he);
        for (var Se, xe;Q < he; ) {
          for (g = 0;g < We; g++)
            _[g].pred = 0;
          if (ue = 0, We == 1)
            for (Je = _[0], V = 0;V < $; V++)
              se(Je, J, Q), Q++;
          else
            for (V = 0;V < $; V++) {
              for (g = 0;g < We; g++)
                for (Je = _[g], Se = Je.h, xe = Je.v, j = 0;j < xe; j++)
                  for (W = 0;W < Se; W++)
                    K(Je, J, Q, j, W);
              if (Q++, Q === he)
                break;
            }
          if (Q === he)
            do {
              if (I[w] === 255 && I[w + 1] !== 0)
                break;
              w += 1;
            } while (w < I.length - 2);
          if (le = 0, fe = I[w] << 8 | I[w + 1], fe < 65280)
            throw new Error("marker was not found");
          if (fe >= 65488 && fe <= 65495)
            w += 2;
          else
            break;
        }
        return w - P;
      }
      function p(I, w) {
        var C = [], _ = w.blocksPerLine, $ = w.blocksPerColumn, k = _ << 3, U = new Int32Array(64), b = new Uint8Array(64);
        function T(P, be, le) {
          var ie = w.quantizationTable, re, x, H, de, me, ce, ue, ne, F, A = le, ve;
          for (ve = 0;ve < 64; ve++)
            A[ve] = P[ve] * ie[ve];
          for (ve = 0;ve < 8; ++ve) {
            var K = 8 * ve;
            if (A[1 + K] == 0 && A[2 + K] == 0 && A[3 + K] == 0 && A[4 + K] == 0 && A[5 + K] == 0 && A[6 + K] == 0 && A[7 + K] == 0) {
              F = a * A[0 + K] + 512 >> 10, A[0 + K] = F, A[1 + K] = F, A[2 + K] = F, A[3 + K] = F, A[4 + K] = F, A[5 + K] = F, A[6 + K] = F, A[7 + K] = F;
              continue;
            }
            re = a * A[0 + K] + 128 >> 8, x = a * A[4 + K] + 128 >> 8, H = A[2 + K], de = A[6 + K], me = c * (A[1 + K] - A[7 + K]) + 128 >> 8, ne = c * (A[1 + K] + A[7 + K]) + 128 >> 8, ce = A[3 + K] << 4, ue = A[5 + K] << 4, F = re - x + 1 >> 1, re = re + x + 1 >> 1, x = F, F = H * l + de * o + 128 >> 8, H = H * o - de * l + 128 >> 8, de = F, F = me - ue + 1 >> 1, me = me + ue + 1 >> 1, ue = F, F = ne + ce + 1 >> 1, ce = ne - ce + 1 >> 1, ne = F, F = re - de + 1 >> 1, re = re + de + 1 >> 1, de = F, F = x - H + 1 >> 1, x = x + H + 1 >> 1, H = F, F = me * s + ne * n + 2048 >> 12, me = me * n - ne * s + 2048 >> 12, ne = F, F = ce * r + ue * i + 2048 >> 12, ce = ce * i - ue * r + 2048 >> 12, ue = F, A[0 + K] = re + ne, A[7 + K] = re - ne, A[1 + K] = x + ue, A[6 + K] = x - ue, A[2 + K] = H + ce, A[5 + K] = H - ce, A[3 + K] = de + me, A[4 + K] = de - me;
          }
          for (ve = 0;ve < 8; ++ve) {
            var se = ve;
            if (A[8 + se] == 0 && A[16 + se] == 0 && A[24 + se] == 0 && A[32 + se] == 0 && A[40 + se] == 0 && A[48 + se] == 0 && A[56 + se] == 0) {
              F = a * le[ve + 0] + 8192 >> 14, A[0 + se] = F, A[8 + se] = F, A[16 + se] = F, A[24 + se] = F, A[32 + se] = F, A[40 + se] = F, A[48 + se] = F, A[56 + se] = F;
              continue;
            }
            re = a * A[0 + se] + 2048 >> 12, x = a * A[32 + se] + 2048 >> 12, H = A[16 + se], de = A[48 + se], me = c * (A[8 + se] - A[56 + se]) + 2048 >> 12, ne = c * (A[8 + se] + A[56 + se]) + 2048 >> 12, ce = A[24 + se], ue = A[40 + se], F = re - x + 1 >> 1, re = re + x + 1 >> 1, x = F, F = H * l + de * o + 2048 >> 12, H = H * o - de * l + 2048 >> 12, de = F, F = me - ue + 1 >> 1, me = me + ue + 1 >> 1, ue = F, F = ne + ce + 1 >> 1, ce = ne - ce + 1 >> 1, ne = F, F = re - de + 1 >> 1, re = re + de + 1 >> 1, de = F, F = x - H + 1 >> 1, x = x + H + 1 >> 1, H = F, F = me * s + ne * n + 2048 >> 12, me = me * n - ne * s + 2048 >> 12, ne = F, F = ce * r + ue * i + 2048 >> 12, ce = ce * i - ue * r + 2048 >> 12, ue = F, A[0 + se] = re + ne, A[56 + se] = re - ne, A[8 + se] = x + ue, A[48 + se] = x - ue, A[16 + se] = H + ce, A[40 + se] = H - ce, A[24 + se] = de + me, A[32 + se] = de - me;
          }
          for (ve = 0;ve < 64; ++ve) {
            var We = 128 + (A[ve] + 8 >> 4);
            be[ve] = We < 0 ? 0 : We > 255 ? 255 : We;
          }
        }
        E(k * $ * 8);
        for (var B, G, L = 0;L < $; L++) {
          var X = L << 3;
          for (B = 0;B < 8; B++)
            C.push(new Uint8Array(k));
          for (var R = 0;R < _; R++) {
            T(w.blocks[L][R], b, U);
            var N = 0, q = R << 3;
            for (G = 0;G < 8; G++) {
              var z = C[X + G];
              for (B = 0;B < 8; B++)
                z[q + B] = b[N++];
            }
          }
        }
        return C;
      }
      function d(I) {
        return I < 0 ? 0 : I > 255 ? 255 : I;
      }
      u.prototype = { load: function(w) {
        var C = new XMLHttpRequest;
        C.open("GET", w, true), C.responseType = "arraybuffer", C.onload = function() {
          var _ = new Uint8Array(C.response || C.mozResponseArrayBuffer);
          this.parse(_), this.onload && this.onload();
        }.bind(this), C.send(null);
      }, parse: function(w) {
        var C = this.opts.maxResolutionInMP * 1000 * 1000, _ = 0, $ = w.length;
        function k() {
          var Y = w[_] << 8 | w[_ + 1];
          return _ += 2, Y;
        }
        function U() {
          var Y = k(), pe = w.subarray(_, _ + Y - 2);
          return _ += pe.length, pe;
        }
        function b(Y) {
          var pe = 1, Le = 1, ye, Ye;
          for (Ye in Y.components)
            Y.components.hasOwnProperty(Ye) && (ye = Y.components[Ye], pe < ye.h && (pe = ye.h), Le < ye.v && (Le = ye.v));
          var nt = Math.ceil(Y.samplesPerLine / 8 / pe), yt = Math.ceil(Y.scanLines / 8 / Le);
          for (Ye in Y.components)
            if (Y.components.hasOwnProperty(Ye)) {
              ye = Y.components[Ye];
              var Ft = Math.ceil(Math.ceil(Y.samplesPerLine / 8) * ye.h / pe), Nt = Math.ceil(Math.ceil(Y.scanLines / 8) * ye.v / Le), ci = nt * ye.h, ui = yt * ye.v, Pi = ui * ci, fi = [];
              E(Pi * 256);
              for (var hi = 0;hi < ui; hi++) {
                for (var pi = [], di = 0;di < ci; di++)
                  pi.push(new Int32Array(64));
                fi.push(pi);
              }
              ye.blocksPerLine = Ft, ye.blocksPerColumn = Nt, ye.blocks = fi;
            }
          Y.maxH = pe, Y.maxV = Le, Y.mcusPerLine = nt, Y.mcusPerColumn = yt;
        }
        var T = null, B = null, G = null, L, X, R = [], N = [], q = [], z = [], P = k(), be = -1;
        if (this.comments = [], P != 65496)
          throw new Error("SOI not found");
        for (P = k();P != 65497; ) {
          var le, ie, re;
          switch (P) {
            case 65280:
              break;
            case 65504:
            case 65505:
            case 65506:
            case 65507:
            case 65508:
            case 65509:
            case 65510:
            case 65511:
            case 65512:
            case 65513:
            case 65514:
            case 65515:
            case 65516:
            case 65517:
            case 65518:
            case 65519:
            case 65534:
              var x = U();
              if (P === 65534) {
                var H = String.fromCharCode.apply(null, x);
                this.comments.push(H);
              }
              P === 65504 && x[0] === 74 && x[1] === 70 && x[2] === 73 && x[3] === 70 && x[4] === 0 && (T = { version: { major: x[5], minor: x[6] }, densityUnits: x[7], xDensity: x[8] << 8 | x[9], yDensity: x[10] << 8 | x[11], thumbWidth: x[12], thumbHeight: x[13], thumbData: x.subarray(14, 14 + 3 * x[12] * x[13]) }), P === 65505 && x[0] === 69 && x[1] === 120 && x[2] === 105 && x[3] === 102 && x[4] === 0 && (this.exifBuffer = x.subarray(5, x.length)), P === 65518 && x[0] === 65 && x[1] === 100 && x[2] === 111 && x[3] === 98 && x[4] === 101 && x[5] === 0 && (B = { version: x[6], flags0: x[7] << 8 | x[8], flags1: x[9] << 8 | x[10], transformCode: x[11] });
              break;
            case 65499:
              for (var de = k(), me = de + _ - 2;_ < me; ) {
                var ce = w[_++];
                E(256);
                var ue = new Int32Array(64);
                if (ce >> 4)
                  if (ce >> 4 === 1)
                    for (ie = 0;ie < 64; ie++) {
                      var ne = e[ie];
                      ue[ne] = k();
                    }
                  else
                    throw new Error("DQT: invalid table spec");
                else
                  for (ie = 0;ie < 64; ie++) {
                    var ne = e[ie];
                    ue[ne] = w[_++];
                  }
                R[ce & 15] = ue;
              }
              break;
            case 65472:
            case 65473:
            case 65474:
              k(), L = {}, L.extended = P === 65473, L.progressive = P === 65474, L.precision = w[_++], L.scanLines = k(), L.samplesPerLine = k(), L.components = {}, L.componentsOrder = [];
              var F = L.scanLines * L.samplesPerLine;
              if (F > C) {
                var A = Math.ceil((F - C) / 1e6);
                throw new Error(`maxResolutionInMP limit exceeded by ${A}MP`);
              }
              var ve = w[_++], K, se = 0, We = 0;
              for (le = 0;le < ve; le++) {
                K = w[_];
                var Je = w[_ + 1] >> 4, g = w[_ + 1] & 15, j = w[_ + 2];
                if (Je <= 0 || g <= 0)
                  throw new Error("Invalid sampling factor, expected values above 0");
                L.componentsOrder.push(K), L.components[K] = { h: Je, v: g, quantizationIdx: j }, _ += 3;
              }
              b(L), N.push(L);
              break;
            case 65476:
              var W = k();
              for (le = 2;le < W; ) {
                var V = w[_++], J = new Uint8Array(16), Q = 0;
                for (ie = 0;ie < 16; ie++, _++)
                  Q += J[ie] = w[_];
                E(16 + Q);
                var fe = new Uint8Array(Q);
                for (ie = 0;ie < Q; ie++, _++)
                  fe[ie] = w[_];
                le += 17 + Q, (V >> 4 ? q : z)[V & 15] = f(J, fe);
              }
              break;
            case 65501:
              k(), X = k();
              break;
            case 65500:
              k(), k();
              break;
            case 65498:
              var he = k(), Se = w[_++], xe = [], O;
              for (le = 0;le < Se; le++) {
                O = L.components[w[_++]];
                var M = w[_++];
                O.huffmanTableDC = z[M >> 4], O.huffmanTableAC = q[M & 15], xe.push(O);
              }
              var Z = w[_++], we = w[_++], ee = w[_++], ae = h(w, _, L, xe, X, Z, we, ee >> 4, ee & 15, this.opts);
              _ += ae;
              break;
            case 65535:
              w[_] !== 255 && _--;
              break;
            default:
              if (w[_ - 3] == 255 && w[_ - 2] >= 192 && w[_ - 2] <= 254) {
                _ -= 3;
                break;
              } else if (P === 224 || P == 225) {
                if (be !== -1)
                  throw new Error(`first unknown JPEG marker at offset ${be.toString(16)}, second unknown JPEG marker ${P.toString(16)} at offset ${(_ - 1).toString(16)}`);
                be = _ - 1;
                let Y = k();
                if (w[_ + Y - 2] === 255) {
                  _ += Y - 2;
                  break;
                }
              }
              throw new Error("unknown JPEG marker " + P.toString(16));
          }
          P = k();
        }
        if (N.length != 1)
          throw new Error("only single frame JPEGs supported");
        for (var le = 0;le < N.length; le++) {
          var ge = N[le].components;
          for (var ie in ge)
            ge[ie].quantizationTable = R[ge[ie].quantizationIdx], delete ge[ie].quantizationIdx;
        }
        this.width = L.samplesPerLine, this.height = L.scanLines, this.jfif = T, this.adobe = B, this.components = [];
        for (var le = 0;le < L.componentsOrder.length; le++) {
          var O = L.components[L.componentsOrder[le]];
          this.components.push({ lines: p(L, O), scaleX: O.h / L.maxH, scaleY: O.v / L.maxV });
        }
      }, getData: function(w, C) {
        var _ = this.width / w, $ = this.height / C, k, U, b, T, B, G, L, X, R, N, q = 0, z, P, be, le, ie, re, x, H, de, me, ce, ue = w * C * this.components.length;
        E(ue);
        var ne = new Uint8Array(ue);
        switch (this.components.length) {
          case 1:
            for (k = this.components[0], N = 0;N < C; N++)
              for (B = k.lines[0 | N * k.scaleY * $], R = 0;R < w; R++)
                z = B[0 | R * k.scaleX * _], ne[q++] = z;
            break;
          case 2:
            for (k = this.components[0], U = this.components[1], N = 0;N < C; N++)
              for (B = k.lines[0 | N * k.scaleY * $], G = U.lines[0 | N * U.scaleY * $], R = 0;R < w; R++)
                z = B[0 | R * k.scaleX * _], ne[q++] = z, z = G[0 | R * U.scaleX * _], ne[q++] = z;
            break;
          case 3:
            for (ce = true, this.adobe && this.adobe.transformCode ? ce = true : typeof this.opts.colorTransform != "undefined" && (ce = !!this.opts.colorTransform), k = this.components[0], U = this.components[1], b = this.components[2], N = 0;N < C; N++)
              for (B = k.lines[0 | N * k.scaleY * $], G = U.lines[0 | N * U.scaleY * $], L = b.lines[0 | N * b.scaleY * $], R = 0;R < w; R++)
                ce ? (z = B[0 | R * k.scaleX * _], P = G[0 | R * U.scaleX * _], be = L[0 | R * b.scaleX * _], H = d(z + 1.402 * (be - 128)), de = d(z - 0.3441363 * (P - 128) - 0.71413636 * (be - 128)), me = d(z + 1.772 * (P - 128))) : (H = B[0 | R * k.scaleX * _], de = G[0 | R * U.scaleX * _], me = L[0 | R * b.scaleX * _]), ne[q++] = H, ne[q++] = de, ne[q++] = me;
            break;
          case 4:
            if (!this.adobe)
              throw new Error("Unsupported color mode (4 components)");
            for (ce = false, this.adobe && this.adobe.transformCode ? ce = true : typeof this.opts.colorTransform != "undefined" && (ce = !!this.opts.colorTransform), k = this.components[0], U = this.components[1], b = this.components[2], T = this.components[3], N = 0;N < C; N++)
              for (B = k.lines[0 | N * k.scaleY * $], G = U.lines[0 | N * U.scaleY * $], L = b.lines[0 | N * b.scaleY * $], X = T.lines[0 | N * T.scaleY * $], R = 0;R < w; R++)
                ce ? (z = B[0 | R * k.scaleX * _], P = G[0 | R * U.scaleX * _], be = L[0 | R * b.scaleX * _], le = X[0 | R * T.scaleX * _], ie = 255 - d(z + 1.402 * (be - 128)), re = 255 - d(z - 0.3441363 * (P - 128) - 0.71413636 * (be - 128)), x = 255 - d(z + 1.772 * (P - 128))) : (ie = B[0 | R * k.scaleX * _], re = G[0 | R * U.scaleX * _], x = L[0 | R * b.scaleX * _], le = X[0 | R * T.scaleX * _]), ne[q++] = 255 - ie, ne[q++] = 255 - re, ne[q++] = 255 - x, ne[q++] = 255 - le;
            break;
          default:
            throw new Error("Unsupported color mode");
        }
        return ne;
      }, copyToImageData: function(w, C) {
        var { width: _, height: $, data: k } = w, U = this.getData(_, $), b = 0, T = 0, B, G, L, X, R, N, q, z, P;
        switch (this.components.length) {
          case 1:
            for (G = 0;G < $; G++)
              for (B = 0;B < _; B++)
                L = U[b++], k[T++] = L, k[T++] = L, k[T++] = L, C && (k[T++] = 255);
            break;
          case 3:
            for (G = 0;G < $; G++)
              for (B = 0;B < _; B++)
                q = U[b++], z = U[b++], P = U[b++], k[T++] = q, k[T++] = z, k[T++] = P, C && (k[T++] = 255);
            break;
          case 4:
            for (G = 0;G < $; G++)
              for (B = 0;B < _; B++)
                R = U[b++], N = U[b++], L = U[b++], X = U[b++], q = 255 - d(R * (1 - X / 255) + X), z = 255 - d(N * (1 - X / 255) + X), P = 255 - d(L * (1 - X / 255) + X), k[T++] = q, k[T++] = z, k[T++] = P, C && (k[T++] = 255);
            break;
          default:
            throw new Error("Unsupported color mode");
        }
      } };
      var m = 0, v = 0;
      function E(I = 0) {
        var w = m + I;
        if (w > v) {
          var C = Math.ceil((w - v) / 1024 / 1024);
          throw new Error(`maxMemoryUsageInMB limit exceeded by at least ${C}MB`);
        }
        m = w;
      }
      return u.resetMaxMemoryUsage = function(I) {
        m = 0, v = I;
      }, u.getBytesAllocated = function() {
        return m;
      }, u.requestMemoryAllocation = E, u;
    }();
    typeof Pr != "undefined" ? Pr.exports = Fo : typeof window != "undefined" && (window["jpeg-js"] = window["jpeg-js"] || {}, window["jpeg-js"].decode = Fo);
    function Fo(t, e = {}) {
      var i = { colorTransform: undefined, useTArray: false, formatAsRGBA: true, tolerantDecoding: true, maxResolutionInMP: 100, maxMemoryUsageInMB: 512 }, r = { ...i, ...e }, n = new Uint8Array(t), s = new Lr;
      s.opts = r, Lr.resetMaxMemoryUsage(r.maxMemoryUsageInMB * 1024 * 1024), s.parse(n);
      var o = r.formatAsRGBA ? 4 : 3, l = s.width * s.height * o;
      try {
        Lr.requestMemoryAllocation(l);
        var a = { width: s.width, height: s.height, exifBuffer: s.exifBuffer, data: r.useTArray ? new Uint8Array(l) : Buffer.alloc(l) };
        s.comments.length > 0 && (a.comments = s.comments);
      } catch (c) {
        throw c instanceof RangeError ? new Error("Could not allocate enough memory for the image. Required: " + l) : c instanceof ReferenceError && c.message === "Buffer is not defined" ? new Error("Buffer is not globally defined in this environment. Consider setting useTArray to true") : c;
      }
      return s.copyToImageData(a, r.formatAsRGBA), a;
    }
  });
  var Uo = y((yg, Mo) => {
    var wh = Po(), Eh = No();
    Mo.exports = { encode: wh, decode: Eh };
  });
  var jo = y((bg, Do) => {
    function Gi() {
      this._types = Object.create(null), this._extensions = Object.create(null);
      for (let t = 0;t < arguments.length; t++)
        this.define(arguments[t]);
      this.define = this.define.bind(this), this.getType = this.getType.bind(this), this.getExtension = this.getExtension.bind(this);
    }
    Gi.prototype.define = function(t, e) {
      for (let i in t) {
        let r = t[i].map(function(n) {
          return n.toLowerCase();
        });
        i = i.toLowerCase();
        for (let n = 0;n < r.length; n++) {
          let s = r[n];
          if (s[0] !== "*") {
            if (!e && s in this._types)
              throw new Error('Attempt to change mapping for "' + s + '" extension from "' + this._types[s] + '" to "' + i + '". Pass `force=true` to allow this, otherwise remove "' + s + '" from the list of extensions for "' + i + '".');
            this._types[s] = i;
          }
        }
        if (e || !this._extensions[i]) {
          let n = r[0];
          this._extensions[i] = n[0] !== "*" ? n : n.substr(1);
        }
      }
    };
    Gi.prototype.getType = function(t) {
      t = String(t);
      let e = t.replace(/^.*[/\\]/, "").toLowerCase(), i = e.replace(/^.*\./, "").toLowerCase(), r = e.length < t.length;
      return (i.length < e.length - 1 || !r) && this._types[i] || null;
    };
    Gi.prototype.getExtension = function(t) {
      return t = /^\s*([^;\s]*)/.test(t) && RegExp.$1, t && this._extensions[t.toLowerCase()] || null;
    };
    Do.exports = Gi;
  });
  var Ho = y((wg, qo) => {
    qo.exports = { "application/andrew-inset": ["ez"], "application/applixware": ["aw"], "application/atom+xml": ["atom"], "application/atomcat+xml": ["atomcat"], "application/atomdeleted+xml": ["atomdeleted"], "application/atomsvc+xml": ["atomsvc"], "application/atsc-dwd+xml": ["dwd"], "application/atsc-held+xml": ["held"], "application/atsc-rsat+xml": ["rsat"], "application/bdoc": ["bdoc"], "application/calendar+xml": ["xcs"], "application/ccxml+xml": ["ccxml"], "application/cdfx+xml": ["cdfx"], "application/cdmi-capability": ["cdmia"], "application/cdmi-container": ["cdmic"], "application/cdmi-domain": ["cdmid"], "application/cdmi-object": ["cdmio"], "application/cdmi-queue": ["cdmiq"], "application/cu-seeme": ["cu"], "application/dash+xml": ["mpd"], "application/davmount+xml": ["davmount"], "application/docbook+xml": ["dbk"], "application/dssc+der": ["dssc"], "application/dssc+xml": ["xdssc"], "application/ecmascript": ["es", "ecma"], "application/emma+xml": ["emma"], "application/emotionml+xml": ["emotionml"], "application/epub+zip": ["epub"], "application/exi": ["exi"], "application/express": ["exp"], "application/fdt+xml": ["fdt"], "application/font-tdpfr": ["pfr"], "application/geo+json": ["geojson"], "application/gml+xml": ["gml"], "application/gpx+xml": ["gpx"], "application/gxf": ["gxf"], "application/gzip": ["gz"], "application/hjson": ["hjson"], "application/hyperstudio": ["stk"], "application/inkml+xml": ["ink", "inkml"], "application/ipfix": ["ipfix"], "application/its+xml": ["its"], "application/java-archive": ["jar", "war", "ear"], "application/java-serialized-object": ["ser"], "application/java-vm": ["class"], "application/javascript": ["js", "mjs"], "application/json": ["json", "map"], "application/json5": ["json5"], "application/jsonml+json": ["jsonml"], "application/ld+json": ["jsonld"], "application/lgr+xml": ["lgr"], "application/lost+xml": ["lostxml"], "application/mac-binhex40": ["hqx"], "application/mac-compactpro": ["cpt"], "application/mads+xml": ["mads"], "application/manifest+json": ["webmanifest"], "application/marc": ["mrc"], "application/marcxml+xml": ["mrcx"], "application/mathematica": ["ma", "nb", "mb"], "application/mathml+xml": ["mathml"], "application/mbox": ["mbox"], "application/mediaservercontrol+xml": ["mscml"], "application/metalink+xml": ["metalink"], "application/metalink4+xml": ["meta4"], "application/mets+xml": ["mets"], "application/mmt-aei+xml": ["maei"], "application/mmt-usd+xml": ["musd"], "application/mods+xml": ["mods"], "application/mp21": ["m21", "mp21"], "application/mp4": ["mp4s", "m4p"], "application/msword": ["doc", "dot"], "application/mxf": ["mxf"], "application/n-quads": ["nq"], "application/n-triples": ["nt"], "application/node": ["cjs"], "application/octet-stream": ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"], "application/oda": ["oda"], "application/oebps-package+xml": ["opf"], "application/ogg": ["ogx"], "application/omdoc+xml": ["omdoc"], "application/onenote": ["onetoc", "onetoc2", "onetmp", "onepkg"], "application/oxps": ["oxps"], "application/p2p-overlay+xml": ["relo"], "application/patch-ops-error+xml": ["xer"], "application/pdf": ["pdf"], "application/pgp-encrypted": ["pgp"], "application/pgp-signature": ["asc", "sig"], "application/pics-rules": ["prf"], "application/pkcs10": ["p10"], "application/pkcs7-mime": ["p7m", "p7c"], "application/pkcs7-signature": ["p7s"], "application/pkcs8": ["p8"], "application/pkix-attr-cert": ["ac"], "application/pkix-cert": ["cer"], "application/pkix-crl": ["crl"], "application/pkix-pkipath": ["pkipath"], "application/pkixcmp": ["pki"], "application/pls+xml": ["pls"], "application/postscript": ["ai", "eps", "ps"], "application/provenance+xml": ["provx"], "application/pskc+xml": ["pskcxml"], "application/raml+yaml": ["raml"], "application/rdf+xml": ["rdf", "owl"], "application/reginfo+xml": ["rif"], "application/relax-ng-compact-syntax": ["rnc"], "application/resource-lists+xml": ["rl"], "application/resource-lists-diff+xml": ["rld"], "application/rls-services+xml": ["rs"], "application/route-apd+xml": ["rapd"], "application/route-s-tsid+xml": ["sls"], "application/route-usd+xml": ["rusd"], "application/rpki-ghostbusters": ["gbr"], "application/rpki-manifest": ["mft"], "application/rpki-roa": ["roa"], "application/rsd+xml": ["rsd"], "application/rss+xml": ["rss"], "application/rtf": ["rtf"], "application/sbml+xml": ["sbml"], "application/scvp-cv-request": ["scq"], "application/scvp-cv-response": ["scs"], "application/scvp-vp-request": ["spq"], "application/scvp-vp-response": ["spp"], "application/sdp": ["sdp"], "application/senml+xml": ["senmlx"], "application/sensml+xml": ["sensmlx"], "application/set-payment-initiation": ["setpay"], "application/set-registration-initiation": ["setreg"], "application/shf+xml": ["shf"], "application/sieve": ["siv", "sieve"], "application/smil+xml": ["smi", "smil"], "application/sparql-query": ["rq"], "application/sparql-results+xml": ["srx"], "application/srgs": ["gram"], "application/srgs+xml": ["grxml"], "application/sru+xml": ["sru"], "application/ssdl+xml": ["ssdl"], "application/ssml+xml": ["ssml"], "application/swid+xml": ["swidtag"], "application/tei+xml": ["tei", "teicorpus"], "application/thraud+xml": ["tfi"], "application/timestamped-data": ["tsd"], "application/toml": ["toml"], "application/trig": ["trig"], "application/ttml+xml": ["ttml"], "application/ubjson": ["ubj"], "application/urc-ressheet+xml": ["rsheet"], "application/urc-targetdesc+xml": ["td"], "application/voicexml+xml": ["vxml"], "application/wasm": ["wasm"], "application/widget": ["wgt"], "application/winhlp": ["hlp"], "application/wsdl+xml": ["wsdl"], "application/wspolicy+xml": ["wspolicy"], "application/xaml+xml": ["xaml"], "application/xcap-att+xml": ["xav"], "application/xcap-caps+xml": ["xca"], "application/xcap-diff+xml": ["xdf"], "application/xcap-el+xml": ["xel"], "application/xcap-ns+xml": ["xns"], "application/xenc+xml": ["xenc"], "application/xhtml+xml": ["xhtml", "xht"], "application/xliff+xml": ["xlf"], "application/xml": ["xml", "xsl", "xsd", "rng"], "application/xml-dtd": ["dtd"], "application/xop+xml": ["xop"], "application/xproc+xml": ["xpl"], "application/xslt+xml": ["*xsl", "xslt"], "application/xspf+xml": ["xspf"], "application/xv+xml": ["mxml", "xhvml", "xvml", "xvm"], "application/yang": ["yang"], "application/yin+xml": ["yin"], "application/zip": ["zip"], "audio/3gpp": ["*3gpp"], "audio/adpcm": ["adp"], "audio/amr": ["amr"], "audio/basic": ["au", "snd"], "audio/midi": ["mid", "midi", "kar", "rmi"], "audio/mobile-xmf": ["mxmf"], "audio/mp3": ["*mp3"], "audio/mp4": ["m4a", "mp4a"], "audio/mpeg": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"], "audio/ogg": ["oga", "ogg", "spx", "opus"], "audio/s3m": ["s3m"], "audio/silk": ["sil"], "audio/wav": ["wav"], "audio/wave": ["*wav"], "audio/webm": ["weba"], "audio/xm": ["xm"], "font/collection": ["ttc"], "font/otf": ["otf"], "font/ttf": ["ttf"], "font/woff": ["woff"], "font/woff2": ["woff2"], "image/aces": ["exr"], "image/apng": ["apng"], "image/avif": ["avif"], "image/bmp": ["bmp"], "image/cgm": ["cgm"], "image/dicom-rle": ["drle"], "image/emf": ["emf"], "image/fits": ["fits"], "image/g3fax": ["g3"], "image/gif": ["gif"], "image/heic": ["heic"], "image/heic-sequence": ["heics"], "image/heif": ["heif"], "image/heif-sequence": ["heifs"], "image/hej2k": ["hej2"], "image/hsj2": ["hsj2"], "image/ief": ["ief"], "image/jls": ["jls"], "image/jp2": ["jp2", "jpg2"], "image/jpeg": ["jpeg", "jpg", "jpe"], "image/jph": ["jph"], "image/jphc": ["jhc"], "image/jpm": ["jpm"], "image/jpx": ["jpx", "jpf"], "image/jxr": ["jxr"], "image/jxra": ["jxra"], "image/jxrs": ["jxrs"], "image/jxs": ["jxs"], "image/jxsc": ["jxsc"], "image/jxsi": ["jxsi"], "image/jxss": ["jxss"], "image/ktx": ["ktx"], "image/ktx2": ["ktx2"], "image/png": ["png"], "image/sgi": ["sgi"], "image/svg+xml": ["svg", "svgz"], "image/t38": ["t38"], "image/tiff": ["tif", "tiff"], "image/tiff-fx": ["tfx"], "image/webp": ["webp"], "image/wmf": ["wmf"], "message/disposition-notification": ["disposition-notification"], "message/global": ["u8msg"], "message/global-delivery-status": ["u8dsn"], "message/global-disposition-notification": ["u8mdn"], "message/global-headers": ["u8hdr"], "message/rfc822": ["eml", "mime"], "model/3mf": ["3mf"], "model/gltf+json": ["gltf"], "model/gltf-binary": ["glb"], "model/iges": ["igs", "iges"], "model/mesh": ["msh", "mesh", "silo"], "model/mtl": ["mtl"], "model/obj": ["obj"], "model/step+xml": ["stpx"], "model/step+zip": ["stpz"], "model/step-xml+zip": ["stpxz"], "model/stl": ["stl"], "model/vrml": ["wrl", "vrml"], "model/x3d+binary": ["*x3db", "x3dbz"], "model/x3d+fastinfoset": ["x3db"], "model/x3d+vrml": ["*x3dv", "x3dvz"], "model/x3d+xml": ["x3d", "x3dz"], "model/x3d-vrml": ["x3dv"], "text/cache-manifest": ["appcache", "manifest"], "text/calendar": ["ics", "ifb"], "text/coffeescript": ["coffee", "litcoffee"], "text/css": ["css"], "text/csv": ["csv"], "text/html": ["html", "htm", "shtml"], "text/jade": ["jade"], "text/jsx": ["jsx"], "text/less": ["less"], "text/markdown": ["markdown", "md"], "text/mathml": ["mml"], "text/mdx": ["mdx"], "text/n3": ["n3"], "text/plain": ["txt", "text", "conf", "def", "list", "log", "in", "ini"], "text/richtext": ["rtx"], "text/rtf": ["*rtf"], "text/sgml": ["sgml", "sgm"], "text/shex": ["shex"], "text/slim": ["slim", "slm"], "text/spdx": ["spdx"], "text/stylus": ["stylus", "styl"], "text/tab-separated-values": ["tsv"], "text/troff": ["t", "tr", "roff", "man", "me", "ms"], "text/turtle": ["ttl"], "text/uri-list": ["uri", "uris", "urls"], "text/vcard": ["vcard"], "text/vtt": ["vtt"], "text/xml": ["*xml"], "text/yaml": ["yaml", "yml"], "video/3gpp": ["3gp", "3gpp"], "video/3gpp2": ["3g2"], "video/h261": ["h261"], "video/h263": ["h263"], "video/h264": ["h264"], "video/iso.segment": ["m4s"], "video/jpeg": ["jpgv"], "video/jpm": ["*jpm", "jpgm"], "video/mj2": ["mj2", "mjp2"], "video/mp2t": ["ts"], "video/mp4": ["mp4", "mp4v", "mpg4"], "video/mpeg": ["mpeg", "mpg", "mpe", "m1v", "m2v"], "video/ogg": ["ogv"], "video/quicktime": ["qt", "mov"], "video/webm": ["webm"] };
  });
  var $o = y((Eg, Vo) => {
    Vo.exports = { "application/prs.cww": ["cww"], "application/vnd.1000minds.decision-model+xml": ["1km"], "application/vnd.3gpp.pic-bw-large": ["plb"], "application/vnd.3gpp.pic-bw-small": ["psb"], "application/vnd.3gpp.pic-bw-var": ["pvb"], "application/vnd.3gpp2.tcap": ["tcap"], "application/vnd.3m.post-it-notes": ["pwn"], "application/vnd.accpac.simply.aso": ["aso"], "application/vnd.accpac.simply.imp": ["imp"], "application/vnd.acucobol": ["acu"], "application/vnd.acucorp": ["atc", "acutc"], "application/vnd.adobe.air-application-installer-package+zip": ["air"], "application/vnd.adobe.formscentral.fcdt": ["fcdt"], "application/vnd.adobe.fxp": ["fxp", "fxpl"], "application/vnd.adobe.xdp+xml": ["xdp"], "application/vnd.adobe.xfdf": ["xfdf"], "application/vnd.ahead.space": ["ahead"], "application/vnd.airzip.filesecure.azf": ["azf"], "application/vnd.airzip.filesecure.azs": ["azs"], "application/vnd.amazon.ebook": ["azw"], "application/vnd.americandynamics.acc": ["acc"], "application/vnd.amiga.ami": ["ami"], "application/vnd.android.package-archive": ["apk"], "application/vnd.anser-web-certificate-issue-initiation": ["cii"], "application/vnd.anser-web-funds-transfer-initiation": ["fti"], "application/vnd.antix.game-component": ["atx"], "application/vnd.apple.installer+xml": ["mpkg"], "application/vnd.apple.keynote": ["key"], "application/vnd.apple.mpegurl": ["m3u8"], "application/vnd.apple.numbers": ["numbers"], "application/vnd.apple.pages": ["pages"], "application/vnd.apple.pkpass": ["pkpass"], "application/vnd.aristanetworks.swi": ["swi"], "application/vnd.astraea-software.iota": ["iota"], "application/vnd.audiograph": ["aep"], "application/vnd.balsamiq.bmml+xml": ["bmml"], "application/vnd.blueice.multipass": ["mpm"], "application/vnd.bmi": ["bmi"], "application/vnd.businessobjects": ["rep"], "application/vnd.chemdraw+xml": ["cdxml"], "application/vnd.chipnuts.karaoke-mmd": ["mmd"], "application/vnd.cinderella": ["cdy"], "application/vnd.citationstyles.style+xml": ["csl"], "application/vnd.claymore": ["cla"], "application/vnd.cloanto.rp9": ["rp9"], "application/vnd.clonk.c4group": ["c4g", "c4d", "c4f", "c4p", "c4u"], "application/vnd.cluetrust.cartomobile-config": ["c11amc"], "application/vnd.cluetrust.cartomobile-config-pkg": ["c11amz"], "application/vnd.commonspace": ["csp"], "application/vnd.contact.cmsg": ["cdbcmsg"], "application/vnd.cosmocaller": ["cmc"], "application/vnd.crick.clicker": ["clkx"], "application/vnd.crick.clicker.keyboard": ["clkk"], "application/vnd.crick.clicker.palette": ["clkp"], "application/vnd.crick.clicker.template": ["clkt"], "application/vnd.crick.clicker.wordbank": ["clkw"], "application/vnd.criticaltools.wbs+xml": ["wbs"], "application/vnd.ctc-posml": ["pml"], "application/vnd.cups-ppd": ["ppd"], "application/vnd.curl.car": ["car"], "application/vnd.curl.pcurl": ["pcurl"], "application/vnd.dart": ["dart"], "application/vnd.data-vision.rdz": ["rdz"], "application/vnd.dbf": ["dbf"], "application/vnd.dece.data": ["uvf", "uvvf", "uvd", "uvvd"], "application/vnd.dece.ttml+xml": ["uvt", "uvvt"], "application/vnd.dece.unspecified": ["uvx", "uvvx"], "application/vnd.dece.zip": ["uvz", "uvvz"], "application/vnd.denovo.fcselayout-link": ["fe_launch"], "application/vnd.dna": ["dna"], "application/vnd.dolby.mlp": ["mlp"], "application/vnd.dpgraph": ["dpg"], "application/vnd.dreamfactory": ["dfac"], "application/vnd.ds-keypoint": ["kpxx"], "application/vnd.dvb.ait": ["ait"], "application/vnd.dvb.service": ["svc"], "application/vnd.dynageo": ["geo"], "application/vnd.ecowin.chart": ["mag"], "application/vnd.enliven": ["nml"], "application/vnd.epson.esf": ["esf"], "application/vnd.epson.msf": ["msf"], "application/vnd.epson.quickanime": ["qam"], "application/vnd.epson.salt": ["slt"], "application/vnd.epson.ssf": ["ssf"], "application/vnd.eszigno3+xml": ["es3", "et3"], "application/vnd.ezpix-album": ["ez2"], "application/vnd.ezpix-package": ["ez3"], "application/vnd.fdf": ["fdf"], "application/vnd.fdsn.mseed": ["mseed"], "application/vnd.fdsn.seed": ["seed", "dataless"], "application/vnd.flographit": ["gph"], "application/vnd.fluxtime.clip": ["ftc"], "application/vnd.framemaker": ["fm", "frame", "maker", "book"], "application/vnd.frogans.fnc": ["fnc"], "application/vnd.frogans.ltf": ["ltf"], "application/vnd.fsc.weblaunch": ["fsc"], "application/vnd.fujitsu.oasys": ["oas"], "application/vnd.fujitsu.oasys2": ["oa2"], "application/vnd.fujitsu.oasys3": ["oa3"], "application/vnd.fujitsu.oasysgp": ["fg5"], "application/vnd.fujitsu.oasysprs": ["bh2"], "application/vnd.fujixerox.ddd": ["ddd"], "application/vnd.fujixerox.docuworks": ["xdw"], "application/vnd.fujixerox.docuworks.binder": ["xbd"], "application/vnd.fuzzysheet": ["fzs"], "application/vnd.genomatix.tuxedo": ["txd"], "application/vnd.geogebra.file": ["ggb"], "application/vnd.geogebra.tool": ["ggt"], "application/vnd.geometry-explorer": ["gex", "gre"], "application/vnd.geonext": ["gxt"], "application/vnd.geoplan": ["g2w"], "application/vnd.geospace": ["g3w"], "application/vnd.gmx": ["gmx"], "application/vnd.google-apps.document": ["gdoc"], "application/vnd.google-apps.presentation": ["gslides"], "application/vnd.google-apps.spreadsheet": ["gsheet"], "application/vnd.google-earth.kml+xml": ["kml"], "application/vnd.google-earth.kmz": ["kmz"], "application/vnd.grafeq": ["gqf", "gqs"], "application/vnd.groove-account": ["gac"], "application/vnd.groove-help": ["ghf"], "application/vnd.groove-identity-message": ["gim"], "application/vnd.groove-injector": ["grv"], "application/vnd.groove-tool-message": ["gtm"], "application/vnd.groove-tool-template": ["tpl"], "application/vnd.groove-vcard": ["vcg"], "application/vnd.hal+xml": ["hal"], "application/vnd.handheld-entertainment+xml": ["zmm"], "application/vnd.hbci": ["hbci"], "application/vnd.hhe.lesson-player": ["les"], "application/vnd.hp-hpgl": ["hpgl"], "application/vnd.hp-hpid": ["hpid"], "application/vnd.hp-hps": ["hps"], "application/vnd.hp-jlyt": ["jlt"], "application/vnd.hp-pcl": ["pcl"], "application/vnd.hp-pclxl": ["pclxl"], "application/vnd.hydrostatix.sof-data": ["sfd-hdstx"], "application/vnd.ibm.minipay": ["mpy"], "application/vnd.ibm.modcap": ["afp", "listafp", "list3820"], "application/vnd.ibm.rights-management": ["irm"], "application/vnd.ibm.secure-container": ["sc"], "application/vnd.iccprofile": ["icc", "icm"], "application/vnd.igloader": ["igl"], "application/vnd.immervision-ivp": ["ivp"], "application/vnd.immervision-ivu": ["ivu"], "application/vnd.insors.igm": ["igm"], "application/vnd.intercon.formnet": ["xpw", "xpx"], "application/vnd.intergeo": ["i2g"], "application/vnd.intu.qbo": ["qbo"], "application/vnd.intu.qfx": ["qfx"], "application/vnd.ipunplugged.rcprofile": ["rcprofile"], "application/vnd.irepository.package+xml": ["irp"], "application/vnd.is-xpr": ["xpr"], "application/vnd.isac.fcs": ["fcs"], "application/vnd.jam": ["jam"], "application/vnd.jcp.javame.midlet-rms": ["rms"], "application/vnd.jisp": ["jisp"], "application/vnd.joost.joda-archive": ["joda"], "application/vnd.kahootz": ["ktz", "ktr"], "application/vnd.kde.karbon": ["karbon"], "application/vnd.kde.kchart": ["chrt"], "application/vnd.kde.kformula": ["kfo"], "application/vnd.kde.kivio": ["flw"], "application/vnd.kde.kontour": ["kon"], "application/vnd.kde.kpresenter": ["kpr", "kpt"], "application/vnd.kde.kspread": ["ksp"], "application/vnd.kde.kword": ["kwd", "kwt"], "application/vnd.kenameaapp": ["htke"], "application/vnd.kidspiration": ["kia"], "application/vnd.kinar": ["kne", "knp"], "application/vnd.koan": ["skp", "skd", "skt", "skm"], "application/vnd.kodak-descriptor": ["sse"], "application/vnd.las.las+xml": ["lasxml"], "application/vnd.llamagraphics.life-balance.desktop": ["lbd"], "application/vnd.llamagraphics.life-balance.exchange+xml": ["lbe"], "application/vnd.lotus-1-2-3": ["123"], "application/vnd.lotus-approach": ["apr"], "application/vnd.lotus-freelance": ["pre"], "application/vnd.lotus-notes": ["nsf"], "application/vnd.lotus-organizer": ["org"], "application/vnd.lotus-screencam": ["scm"], "application/vnd.lotus-wordpro": ["lwp"], "application/vnd.macports.portpkg": ["portpkg"], "application/vnd.mapbox-vector-tile": ["mvt"], "application/vnd.mcd": ["mcd"], "application/vnd.medcalcdata": ["mc1"], "application/vnd.mediastation.cdkey": ["cdkey"], "application/vnd.mfer": ["mwf"], "application/vnd.mfmp": ["mfm"], "application/vnd.micrografx.flo": ["flo"], "application/vnd.micrografx.igx": ["igx"], "application/vnd.mif": ["mif"], "application/vnd.mobius.daf": ["daf"], "application/vnd.mobius.dis": ["dis"], "application/vnd.mobius.mbk": ["mbk"], "application/vnd.mobius.mqy": ["mqy"], "application/vnd.mobius.msl": ["msl"], "application/vnd.mobius.plc": ["plc"], "application/vnd.mobius.txf": ["txf"], "application/vnd.mophun.application": ["mpn"], "application/vnd.mophun.certificate": ["mpc"], "application/vnd.mozilla.xul+xml": ["xul"], "application/vnd.ms-artgalry": ["cil"], "application/vnd.ms-cab-compressed": ["cab"], "application/vnd.ms-excel": ["xls", "xlm", "xla", "xlc", "xlt", "xlw"], "application/vnd.ms-excel.addin.macroenabled.12": ["xlam"], "application/vnd.ms-excel.sheet.binary.macroenabled.12": ["xlsb"], "application/vnd.ms-excel.sheet.macroenabled.12": ["xlsm"], "application/vnd.ms-excel.template.macroenabled.12": ["xltm"], "application/vnd.ms-fontobject": ["eot"], "application/vnd.ms-htmlhelp": ["chm"], "application/vnd.ms-ims": ["ims"], "application/vnd.ms-lrm": ["lrm"], "application/vnd.ms-officetheme": ["thmx"], "application/vnd.ms-outlook": ["msg"], "application/vnd.ms-pki.seccat": ["cat"], "application/vnd.ms-pki.stl": ["*stl"], "application/vnd.ms-powerpoint": ["ppt", "pps", "pot"], "application/vnd.ms-powerpoint.addin.macroenabled.12": ["ppam"], "application/vnd.ms-powerpoint.presentation.macroenabled.12": ["pptm"], "application/vnd.ms-powerpoint.slide.macroenabled.12": ["sldm"], "application/vnd.ms-powerpoint.slideshow.macroenabled.12": ["ppsm"], "application/vnd.ms-powerpoint.template.macroenabled.12": ["potm"], "application/vnd.ms-project": ["mpp", "mpt"], "application/vnd.ms-word.document.macroenabled.12": ["docm"], "application/vnd.ms-word.template.macroenabled.12": ["dotm"], "application/vnd.ms-works": ["wps", "wks", "wcm", "wdb"], "application/vnd.ms-wpl": ["wpl"], "application/vnd.ms-xpsdocument": ["xps"], "application/vnd.mseq": ["mseq"], "application/vnd.musician": ["mus"], "application/vnd.muvee.style": ["msty"], "application/vnd.mynfc": ["taglet"], "application/vnd.neurolanguage.nlu": ["nlu"], "application/vnd.nitf": ["ntf", "nitf"], "application/vnd.noblenet-directory": ["nnd"], "application/vnd.noblenet-sealer": ["nns"], "application/vnd.noblenet-web": ["nnw"], "application/vnd.nokia.n-gage.ac+xml": ["*ac"], "application/vnd.nokia.n-gage.data": ["ngdat"], "application/vnd.nokia.n-gage.symbian.install": ["n-gage"], "application/vnd.nokia.radio-preset": ["rpst"], "application/vnd.nokia.radio-presets": ["rpss"], "application/vnd.novadigm.edm": ["edm"], "application/vnd.novadigm.edx": ["edx"], "application/vnd.novadigm.ext": ["ext"], "application/vnd.oasis.opendocument.chart": ["odc"], "application/vnd.oasis.opendocument.chart-template": ["otc"], "application/vnd.oasis.opendocument.database": ["odb"], "application/vnd.oasis.opendocument.formula": ["odf"], "application/vnd.oasis.opendocument.formula-template": ["odft"], "application/vnd.oasis.opendocument.graphics": ["odg"], "application/vnd.oasis.opendocument.graphics-template": ["otg"], "application/vnd.oasis.opendocument.image": ["odi"], "application/vnd.oasis.opendocument.image-template": ["oti"], "application/vnd.oasis.opendocument.presentation": ["odp"], "application/vnd.oasis.opendocument.presentation-template": ["otp"], "application/vnd.oasis.opendocument.spreadsheet": ["ods"], "application/vnd.oasis.opendocument.spreadsheet-template": ["ots"], "application/vnd.oasis.opendocument.text": ["odt"], "application/vnd.oasis.opendocument.text-master": ["odm"], "application/vnd.oasis.opendocument.text-template": ["ott"], "application/vnd.oasis.opendocument.text-web": ["oth"], "application/vnd.olpc-sugar": ["xo"], "application/vnd.oma.dd2+xml": ["dd2"], "application/vnd.openblox.game+xml": ["obgx"], "application/vnd.openofficeorg.extension": ["oxt"], "application/vnd.openstreetmap.data+xml": ["osm"], "application/vnd.openxmlformats-officedocument.presentationml.presentation": ["pptx"], "application/vnd.openxmlformats-officedocument.presentationml.slide": ["sldx"], "application/vnd.openxmlformats-officedocument.presentationml.slideshow": ["ppsx"], "application/vnd.openxmlformats-officedocument.presentationml.template": ["potx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": ["xlsx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.template": ["xltx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.document": ["docx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.template": ["dotx"], "application/vnd.osgeo.mapguide.package": ["mgp"], "application/vnd.osgi.dp": ["dp"], "application/vnd.osgi.subsystem": ["esa"], "application/vnd.palm": ["pdb", "pqa", "oprc"], "application/vnd.pawaafile": ["paw"], "application/vnd.pg.format": ["str"], "application/vnd.pg.osasli": ["ei6"], "application/vnd.picsel": ["efif"], "application/vnd.pmi.widget": ["wg"], "application/vnd.pocketlearn": ["plf"], "application/vnd.powerbuilder6": ["pbd"], "application/vnd.previewsystems.box": ["box"], "application/vnd.proteus.magazine": ["mgz"], "application/vnd.publishare-delta-tree": ["qps"], "application/vnd.pvi.ptid1": ["ptid"], "application/vnd.quark.quarkxpress": ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"], "application/vnd.rar": ["rar"], "application/vnd.realvnc.bed": ["bed"], "application/vnd.recordare.musicxml": ["mxl"], "application/vnd.recordare.musicxml+xml": ["musicxml"], "application/vnd.rig.cryptonote": ["cryptonote"], "application/vnd.rim.cod": ["cod"], "application/vnd.rn-realmedia": ["rm"], "application/vnd.rn-realmedia-vbr": ["rmvb"], "application/vnd.route66.link66+xml": ["link66"], "application/vnd.sailingtracker.track": ["st"], "application/vnd.seemail": ["see"], "application/vnd.sema": ["sema"], "application/vnd.semd": ["semd"], "application/vnd.semf": ["semf"], "application/vnd.shana.informed.formdata": ["ifm"], "application/vnd.shana.informed.formtemplate": ["itp"], "application/vnd.shana.informed.interchange": ["iif"], "application/vnd.shana.informed.package": ["ipk"], "application/vnd.simtech-mindmapper": ["twd", "twds"], "application/vnd.smaf": ["mmf"], "application/vnd.smart.teacher": ["teacher"], "application/vnd.software602.filler.form+xml": ["fo"], "application/vnd.solent.sdkm+xml": ["sdkm", "sdkd"], "application/vnd.spotfire.dxp": ["dxp"], "application/vnd.spotfire.sfs": ["sfs"], "application/vnd.stardivision.calc": ["sdc"], "application/vnd.stardivision.draw": ["sda"], "application/vnd.stardivision.impress": ["sdd"], "application/vnd.stardivision.math": ["smf"], "application/vnd.stardivision.writer": ["sdw", "vor"], "application/vnd.stardivision.writer-global": ["sgl"], "application/vnd.stepmania.package": ["smzip"], "application/vnd.stepmania.stepchart": ["sm"], "application/vnd.sun.wadl+xml": ["wadl"], "application/vnd.sun.xml.calc": ["sxc"], "application/vnd.sun.xml.calc.template": ["stc"], "application/vnd.sun.xml.draw": ["sxd"], "application/vnd.sun.xml.draw.template": ["std"], "application/vnd.sun.xml.impress": ["sxi"], "application/vnd.sun.xml.impress.template": ["sti"], "application/vnd.sun.xml.math": ["sxm"], "application/vnd.sun.xml.writer": ["sxw"], "application/vnd.sun.xml.writer.global": ["sxg"], "application/vnd.sun.xml.writer.template": ["stw"], "application/vnd.sus-calendar": ["sus", "susp"], "application/vnd.svd": ["svd"], "application/vnd.symbian.install": ["sis", "sisx"], "application/vnd.syncml+xml": ["xsm"], "application/vnd.syncml.dm+wbxml": ["bdm"], "application/vnd.syncml.dm+xml": ["xdm"], "application/vnd.syncml.dmddf+xml": ["ddf"], "application/vnd.tao.intent-module-archive": ["tao"], "application/vnd.tcpdump.pcap": ["pcap", "cap", "dmp"], "application/vnd.tmobile-livetv": ["tmo"], "application/vnd.trid.tpt": ["tpt"], "application/vnd.triscape.mxs": ["mxs"], "application/vnd.trueapp": ["tra"], "application/vnd.ufdl": ["ufd", "ufdl"], "application/vnd.uiq.theme": ["utz"], "application/vnd.umajin": ["umj"], "application/vnd.unity": ["unityweb"], "application/vnd.uoml+xml": ["uoml"], "application/vnd.vcx": ["vcx"], "application/vnd.visio": ["vsd", "vst", "vss", "vsw"], "application/vnd.visionary": ["vis"], "application/vnd.vsf": ["vsf"], "application/vnd.wap.wbxml": ["wbxml"], "application/vnd.wap.wmlc": ["wmlc"], "application/vnd.wap.wmlscriptc": ["wmlsc"], "application/vnd.webturbo": ["wtb"], "application/vnd.wolfram.player": ["nbp"], "application/vnd.wordperfect": ["wpd"], "application/vnd.wqd": ["wqd"], "application/vnd.wt.stf": ["stf"], "application/vnd.xara": ["xar"], "application/vnd.xfdl": ["xfdl"], "application/vnd.yamaha.hv-dic": ["hvd"], "application/vnd.yamaha.hv-script": ["hvs"], "application/vnd.yamaha.hv-voice": ["hvp"], "application/vnd.yamaha.openscoreformat": ["osf"], "application/vnd.yamaha.openscoreformat.osfpvg+xml": ["osfpvg"], "application/vnd.yamaha.smaf-audio": ["saf"], "application/vnd.yamaha.smaf-phrase": ["spf"], "application/vnd.yellowriver-custom-menu": ["cmp"], "application/vnd.zul": ["zir", "zirz"], "application/vnd.zzazz.deck+xml": ["zaz"], "application/x-7z-compressed": ["7z"], "application/x-abiword": ["abw"], "application/x-ace-compressed": ["ace"], "application/x-apple-diskimage": ["*dmg"], "application/x-arj": ["arj"], "application/x-authorware-bin": ["aab", "x32", "u32", "vox"], "application/x-authorware-map": ["aam"], "application/x-authorware-seg": ["aas"], "application/x-bcpio": ["bcpio"], "application/x-bdoc": ["*bdoc"], "application/x-bittorrent": ["torrent"], "application/x-blorb": ["blb", "blorb"], "application/x-bzip": ["bz"], "application/x-bzip2": ["bz2", "boz"], "application/x-cbr": ["cbr", "cba", "cbt", "cbz", "cb7"], "application/x-cdlink": ["vcd"], "application/x-cfs-compressed": ["cfs"], "application/x-chat": ["chat"], "application/x-chess-pgn": ["pgn"], "application/x-chrome-extension": ["crx"], "application/x-cocoa": ["cco"], "application/x-conference": ["nsc"], "application/x-cpio": ["cpio"], "application/x-csh": ["csh"], "application/x-debian-package": ["*deb", "udeb"], "application/x-dgc-compressed": ["dgc"], "application/x-director": ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"], "application/x-doom": ["wad"], "application/x-dtbncx+xml": ["ncx"], "application/x-dtbook+xml": ["dtb"], "application/x-dtbresource+xml": ["res"], "application/x-dvi": ["dvi"], "application/x-envoy": ["evy"], "application/x-eva": ["eva"], "application/x-font-bdf": ["bdf"], "application/x-font-ghostscript": ["gsf"], "application/x-font-linux-psf": ["psf"], "application/x-font-pcf": ["pcf"], "application/x-font-snf": ["snf"], "application/x-font-type1": ["pfa", "pfb", "pfm", "afm"], "application/x-freearc": ["arc"], "application/x-futuresplash": ["spl"], "application/x-gca-compressed": ["gca"], "application/x-glulx": ["ulx"], "application/x-gnumeric": ["gnumeric"], "application/x-gramps-xml": ["gramps"], "application/x-gtar": ["gtar"], "application/x-hdf": ["hdf"], "application/x-httpd-php": ["php"], "application/x-install-instructions": ["install"], "application/x-iso9660-image": ["*iso"], "application/x-iwork-keynote-sffkey": ["*key"], "application/x-iwork-numbers-sffnumbers": ["*numbers"], "application/x-iwork-pages-sffpages": ["*pages"], "application/x-java-archive-diff": ["jardiff"], "application/x-java-jnlp-file": ["jnlp"], "application/x-keepass2": ["kdbx"], "application/x-latex": ["latex"], "application/x-lua-bytecode": ["luac"], "application/x-lzh-compressed": ["lzh", "lha"], "application/x-makeself": ["run"], "application/x-mie": ["mie"], "application/x-mobipocket-ebook": ["prc", "mobi"], "application/x-ms-application": ["application"], "application/x-ms-shortcut": ["lnk"], "application/x-ms-wmd": ["wmd"], "application/x-ms-wmz": ["wmz"], "application/x-ms-xbap": ["xbap"], "application/x-msaccess": ["mdb"], "application/x-msbinder": ["obd"], "application/x-mscardfile": ["crd"], "application/x-msclip": ["clp"], "application/x-msdos-program": ["*exe"], "application/x-msdownload": ["*exe", "*dll", "com", "bat", "*msi"], "application/x-msmediaview": ["mvb", "m13", "m14"], "application/x-msmetafile": ["*wmf", "*wmz", "*emf", "emz"], "application/x-msmoney": ["mny"], "application/x-mspublisher": ["pub"], "application/x-msschedule": ["scd"], "application/x-msterminal": ["trm"], "application/x-mswrite": ["wri"], "application/x-netcdf": ["nc", "cdf"], "application/x-ns-proxy-autoconfig": ["pac"], "application/x-nzb": ["nzb"], "application/x-perl": ["pl", "pm"], "application/x-pilot": ["*prc", "*pdb"], "application/x-pkcs12": ["p12", "pfx"], "application/x-pkcs7-certificates": ["p7b", "spc"], "application/x-pkcs7-certreqresp": ["p7r"], "application/x-rar-compressed": ["*rar"], "application/x-redhat-package-manager": ["rpm"], "application/x-research-info-systems": ["ris"], "application/x-sea": ["sea"], "application/x-sh": ["sh"], "application/x-shar": ["shar"], "application/x-shockwave-flash": ["swf"], "application/x-silverlight-app": ["xap"], "application/x-sql": ["sql"], "application/x-stuffit": ["sit"], "application/x-stuffitx": ["sitx"], "application/x-subrip": ["srt"], "application/x-sv4cpio": ["sv4cpio"], "application/x-sv4crc": ["sv4crc"], "application/x-t3vm-image": ["t3"], "application/x-tads": ["gam"], "application/x-tar": ["tar"], "application/x-tcl": ["tcl", "tk"], "application/x-tex": ["tex"], "application/x-tex-tfm": ["tfm"], "application/x-texinfo": ["texinfo", "texi"], "application/x-tgif": ["*obj"], "application/x-ustar": ["ustar"], "application/x-virtualbox-hdd": ["hdd"], "application/x-virtualbox-ova": ["ova"], "application/x-virtualbox-ovf": ["ovf"], "application/x-virtualbox-vbox": ["vbox"], "application/x-virtualbox-vbox-extpack": ["vbox-extpack"], "application/x-virtualbox-vdi": ["vdi"], "application/x-virtualbox-vhd": ["vhd"], "application/x-virtualbox-vmdk": ["vmdk"], "application/x-wais-source": ["src"], "application/x-web-app-manifest+json": ["webapp"], "application/x-x509-ca-cert": ["der", "crt", "pem"], "application/x-xfig": ["fig"], "application/x-xliff+xml": ["*xlf"], "application/x-xpinstall": ["xpi"], "application/x-xz": ["xz"], "application/x-zmachine": ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"], "audio/vnd.dece.audio": ["uva", "uvva"], "audio/vnd.digital-winds": ["eol"], "audio/vnd.dra": ["dra"], "audio/vnd.dts": ["dts"], "audio/vnd.dts.hd": ["dtshd"], "audio/vnd.lucent.voice": ["lvp"], "audio/vnd.ms-playready.media.pya": ["pya"], "audio/vnd.nuera.ecelp4800": ["ecelp4800"], "audio/vnd.nuera.ecelp7470": ["ecelp7470"], "audio/vnd.nuera.ecelp9600": ["ecelp9600"], "audio/vnd.rip": ["rip"], "audio/x-aac": ["aac"], "audio/x-aiff": ["aif", "aiff", "aifc"], "audio/x-caf": ["caf"], "audio/x-flac": ["flac"], "audio/x-m4a": ["*m4a"], "audio/x-matroska": ["mka"], "audio/x-mpegurl": ["m3u"], "audio/x-ms-wax": ["wax"], "audio/x-ms-wma": ["wma"], "audio/x-pn-realaudio": ["ram", "ra"], "audio/x-pn-realaudio-plugin": ["rmp"], "audio/x-realaudio": ["*ra"], "audio/x-wav": ["*wav"], "chemical/x-cdx": ["cdx"], "chemical/x-cif": ["cif"], "chemical/x-cmdf": ["cmdf"], "chemical/x-cml": ["cml"], "chemical/x-csml": ["csml"], "chemical/x-xyz": ["xyz"], "image/prs.btif": ["btif"], "image/prs.pti": ["pti"], "image/vnd.adobe.photoshop": ["psd"], "image/vnd.airzip.accelerator.azv": ["azv"], "image/vnd.dece.graphic": ["uvi", "uvvi", "uvg", "uvvg"], "image/vnd.djvu": ["djvu", "djv"], "image/vnd.dvb.subtitle": ["*sub"], "image/vnd.dwg": ["dwg"], "image/vnd.dxf": ["dxf"], "image/vnd.fastbidsheet": ["fbs"], "image/vnd.fpx": ["fpx"], "image/vnd.fst": ["fst"], "image/vnd.fujixerox.edmics-mmr": ["mmr"], "image/vnd.fujixerox.edmics-rlc": ["rlc"], "image/vnd.microsoft.icon": ["ico"], "image/vnd.ms-dds": ["dds"], "image/vnd.ms-modi": ["mdi"], "image/vnd.ms-photo": ["wdp"], "image/vnd.net-fpx": ["npx"], "image/vnd.pco.b16": ["b16"], "image/vnd.tencent.tap": ["tap"], "image/vnd.valve.source.texture": ["vtf"], "image/vnd.wap.wbmp": ["wbmp"], "image/vnd.xiff": ["xif"], "image/vnd.zbrush.pcx": ["pcx"], "image/x-3ds": ["3ds"], "image/x-cmu-raster": ["ras"], "image/x-cmx": ["cmx"], "image/x-freehand": ["fh", "fhc", "fh4", "fh5", "fh7"], "image/x-icon": ["*ico"], "image/x-jng": ["jng"], "image/x-mrsid-image": ["sid"], "image/x-ms-bmp": ["*bmp"], "image/x-pcx": ["*pcx"], "image/x-pict": ["pic", "pct"], "image/x-portable-anymap": ["pnm"], "image/x-portable-bitmap": ["pbm"], "image/x-portable-graymap": ["pgm"], "image/x-portable-pixmap": ["ppm"], "image/x-rgb": ["rgb"], "image/x-tga": ["tga"], "image/x-xbitmap": ["xbm"], "image/x-xpixmap": ["xpm"], "image/x-xwindowdump": ["xwd"], "message/vnd.wfa.wsc": ["wsc"], "model/vnd.collada+xml": ["dae"], "model/vnd.dwf": ["dwf"], "model/vnd.gdl": ["gdl"], "model/vnd.gtw": ["gtw"], "model/vnd.mts": ["mts"], "model/vnd.opengex": ["ogex"], "model/vnd.parasolid.transmit.binary": ["x_b"], "model/vnd.parasolid.transmit.text": ["x_t"], "model/vnd.sap.vds": ["vds"], "model/vnd.usdz+zip": ["usdz"], "model/vnd.valve.source.compiled-map": ["bsp"], "model/vnd.vtu": ["vtu"], "text/prs.lines.tag": ["dsc"], "text/vnd.curl": ["curl"], "text/vnd.curl.dcurl": ["dcurl"], "text/vnd.curl.mcurl": ["mcurl"], "text/vnd.curl.scurl": ["scurl"], "text/vnd.dvb.subtitle": ["sub"], "text/vnd.fly": ["fly"], "text/vnd.fmi.flexstor": ["flx"], "text/vnd.graphviz": ["gv"], "text/vnd.in3d.3dml": ["3dml"], "text/vnd.in3d.spot": ["spot"], "text/vnd.sun.j2me.app-descriptor": ["jad"], "text/vnd.wap.wml": ["wml"], "text/vnd.wap.wmlscript": ["wmls"], "text/x-asm": ["s", "asm"], "text/x-c": ["c", "cc", "cxx", "cpp", "h", "hh", "dic"], "text/x-component": ["htc"], "text/x-fortran": ["f", "for", "f77", "f90"], "text/x-handlebars-template": ["hbs"], "text/x-java-source": ["java"], "text/x-lua": ["lua"], "text/x-markdown": ["mkd"], "text/x-nfo": ["nfo"], "text/x-opml": ["opml"], "text/x-org": ["*org"], "text/x-pascal": ["p", "pas"], "text/x-processing": ["pde"], "text/x-sass": ["sass"], "text/x-scss": ["scss"], "text/x-setext": ["etx"], "text/x-sfv": ["sfv"], "text/x-suse-ymp": ["ymp"], "text/x-uuencode": ["uu"], "text/x-vcalendar": ["vcs"], "text/x-vcard": ["vcf"], "video/vnd.dece.hd": ["uvh", "uvvh"], "video/vnd.dece.mobile": ["uvm", "uvvm"], "video/vnd.dece.pd": ["uvp", "uvvp"], "video/vnd.dece.sd": ["uvs", "uvvs"], "video/vnd.dece.video": ["uvv", "uvvv"], "video/vnd.dvb.file": ["dvb"], "video/vnd.fvt": ["fvt"], "video/vnd.mpegurl": ["mxu", "m4u"], "video/vnd.ms-playready.media.pyv": ["pyv"], "video/vnd.uvvu.mp4": ["uvu", "uvvu"], "video/vnd.vivo": ["viv"], "video/x-f4v": ["f4v"], "video/x-fli": ["fli"], "video/x-flv": ["flv"], "video/x-m4v": ["m4v"], "video/x-matroska": ["mkv", "mk3d", "mks"], "video/x-mng": ["mng"], "video/x-ms-asf": ["asf", "asx"], "video/x-ms-vob": ["vob"], "video/x-ms-wm": ["wm"], "video/x-ms-wmv": ["wmv"], "video/x-ms-wmx": ["wmx"], "video/x-ms-wvx": ["wvx"], "video/x-msvideo": ["avi"], "video/x-sgi-movie": ["movie"], "video/x-smv": ["smv"], "x-conference/x-cooltalk": ["ice"] };
  });
  var zo = y((Sg, Go) => {
    var Sh = jo();
    Go.exports = new Sh(Ho(), $o());
  });
  var Yo = y((kg, Wo) => {
    Wo.exports = function(t, e) {
      for (var i = [], r = 0;r < t.length; r++) {
        var n = e(t[r], r);
        kh(n) ? i.push.apply(i, n) : i.push(n);
      }
      return i;
    };
    var kh = Array.isArray || function(t) {
      return Object.prototype.toString.call(t) === "[object Array]";
    };
  });
  var Qo = y((Cg, Jo) => {
    Jo.exports = Zo;
    function Zo(t, e, i) {
      t instanceof RegExp && (t = Ko(t, i)), e instanceof RegExp && (e = Ko(e, i));
      var r = Xo(t, e, i);
      return r && { start: r[0], end: r[1], pre: i.slice(0, r[0]), body: i.slice(r[0] + t.length, r[1]), post: i.slice(r[1] + e.length) };
    }
    function Ko(t, e) {
      var i = e.match(t);
      return i ? i[0] : null;
    }
    Zo.range = Xo;
    function Xo(t, e, i) {
      var r, n, s, o, l, a = i.indexOf(t), c = i.indexOf(e, a + 1), u = a;
      if (a >= 0 && c > 0) {
        if (t === e)
          return [a, c];
        for (r = [], s = i.length;u >= 0 && !l; )
          u == a ? (r.push(u), a = i.indexOf(t, u + 1)) : r.length == 1 ? l = [r.pop(), c] : (n = r.pop(), n < s && (s = n, o = c), c = i.indexOf(e, u + 1)), u = a < c && a >= 0 ? a : c;
        r.length && (l = [s, o]);
      }
      return l;
    }
  });
  var aa = y((Og, oa) => {
    var Ch = Yo(), ea = Qo();
    oa.exports = Th;
    var ta = "\0SLASH" + Math.random() + "\0", ia = "\0OPEN" + Math.random() + "\0", Nr = "\0CLOSE" + Math.random() + "\0", ra = "\0COMMA" + Math.random() + "\0", na = "\0PERIOD" + Math.random() + "\0";
    function Fr(t) {
      return parseInt(t, 10) == t ? parseInt(t, 10) : t.charCodeAt(0);
    }
    function Oh(t) {
      return t.split("\\\\").join(ta).split("\\{").join(ia).split("\\}").join(Nr).split("\\,").join(ra).split("\\.").join(na);
    }
    function Ih(t) {
      return t.split(ta).join("\\").split(ia).join("{").split(Nr).join("}").split(ra).join(",").split(na).join(".");
    }
    function sa(t) {
      if (!t)
        return [""];
      var e = [], i = ea("{", "}", t);
      if (!i)
        return t.split(",");
      var { pre: r, body: n, post: s } = i, o = r.split(",");
      o[o.length - 1] += "{" + n + "}";
      var l = sa(s);
      return s.length && (o[o.length - 1] += l.shift(), o.push.apply(o, l)), e.push.apply(e, o), e;
    }
    function Th(t) {
      return t ? (t.substr(0, 2) === "{}" && (t = "\\{\\}" + t.substr(2)), Gt(Oh(t), true).map(Ih)) : [];
    }
    function Ah(t) {
      return "{" + t + "}";
    }
    function Rh(t) {
      return /^-?0\d/.test(t);
    }
    function Bh(t, e) {
      return t <= e;
    }
    function Lh(t, e) {
      return t >= e;
    }
    function Gt(t, e) {
      var i = [], r = ea("{", "}", t);
      if (!r || /\$$/.test(r.pre))
        return [t];
      var n = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(r.body), s = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(r.body), o = n || s, l = r.body.indexOf(",") >= 0;
      if (!o && !l)
        return r.post.match(/,.*\}/) ? (t = r.pre + "{" + r.body + Nr + r.post, Gt(t)) : [t];
      var a;
      if (o)
        a = r.body.split(/\.\./);
      else if (a = sa(r.body), a.length === 1 && (a = Gt(a[0], false).map(Ah), a.length === 1)) {
        var u = r.post.length ? Gt(r.post, false) : [""];
        return u.map(function(B) {
          return r.pre + a[0] + B;
        });
      }
      var c = r.pre, u = r.post.length ? Gt(r.post, false) : [""], f;
      if (o) {
        var h = Fr(a[0]), p = Fr(a[1]), d = Math.max(a[0].length, a[1].length), m = a.length == 3 ? Math.abs(Fr(a[2])) : 1, v = Bh, E = p < h;
        E && (m *= -1, v = Lh);
        var I = a.some(Rh);
        f = [];
        for (var w = h;v(w, p); w += m) {
          var C;
          if (s)
            C = String.fromCharCode(w), C === "\\" && (C = "");
          else if (C = String(w), I) {
            var _ = d - C.length;
            if (_ > 0) {
              var $ = new Array(_ + 1).join("0");
              w < 0 ? C = "-" + $ + C.slice(1) : C = $ + C;
            }
          }
          f.push(C);
        }
      } else
        f = Ch(a, function(T) {
          return Gt(T, false);
        });
      for (var k = 0;k < f.length; k++)
        for (var U = 0;U < u.length; U++) {
          var b = c + f[k] + u[U];
          (!e || o || b) && i.push(b);
        }
      return i;
    }
  });
  var pa = y((Ig, ha) => {
    ha.exports = Ge;
    Ge.Minimatch = Fe;
    var yi = function() {
      try {
        return import.meta.require("path");
      } catch {
      }
    }() || { sep: "/" };
    Ge.sep = yi.sep;
    var Dr = Ge.GLOBSTAR = Fe.GLOBSTAR = {}, Ph = aa(), la = { "!": { open: "(?:(?!(?:", close: "))[^/]*?)" }, "?": { open: "(?:", close: ")?" }, "+": { open: "(?:", close: ")+" }, "*": { open: "(?:", close: ")*" }, "@": { open: "(?:", close: ")" } }, Mr = "[^/]", Ur = Mr + "*?", Fh = "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?", Nh = "(?:(?!(?:\\/|^)\\.).)*?", ca = Mh("().*{}+?[]^$\\!");
    function Mh(t) {
      return t.split("").reduce(function(e, i) {
        return e[i] = true, e;
      }, {});
    }
    var ua = /\/+/;
    Ge.filter = Uh;
    function Uh(t, e) {
      return e = e || {}, function(i, r, n) {
        return Ge(i, t, e);
      };
    }
    function ft(t, e) {
      e = e || {};
      var i = {};
      return Object.keys(t).forEach(function(r) {
        i[r] = t[r];
      }), Object.keys(e).forEach(function(r) {
        i[r] = e[r];
      }), i;
    }
    Ge.defaults = function(t) {
      if (!t || typeof t != "object" || !Object.keys(t).length)
        return Ge;
      var e = Ge, i = function(n, s, o) {
        return e(n, s, ft(t, o));
      };
      return i.Minimatch = function(n, s) {
        return new e.Minimatch(n, ft(t, s));
      }, i.Minimatch.defaults = function(n) {
        return e.defaults(ft(t, n)).Minimatch;
      }, i.filter = function(n, s) {
        return e.filter(n, ft(t, s));
      }, i.defaults = function(n) {
        return e.defaults(ft(t, n));
      }, i.makeRe = function(n, s) {
        return e.makeRe(n, ft(t, s));
      }, i.braceExpand = function(n, s) {
        return e.braceExpand(n, ft(t, s));
      }, i.match = function(r, n, s) {
        return e.match(r, n, ft(t, s));
      }, i;
    };
    Fe.defaults = function(t) {
      return Ge.defaults(t).Minimatch;
    };
    function Ge(t, e, i) {
      return Wi(e), i || (i = {}), !i.nocomment && e.charAt(0) === "#" ? false : new Fe(e, i).match(t);
    }
    function Fe(t, e) {
      if (!(this instanceof Fe))
        return new Fe(t, e);
      Wi(t), e || (e = {}), t = t.trim(), !e.allowWindowsEscape && yi.sep !== "/" && (t = t.split(yi.sep).join("/")), this.options = e, this.set = [], this.pattern = t, this.regexp = null, this.negate = false, this.comment = false, this.empty = false, this.partial = !!e.partial, this.make();
    }
    Fe.prototype.debug = function() {
    };
    Fe.prototype.make = Dh;
    function Dh() {
      var t = this.pattern, e = this.options;
      if (!e.nocomment && t.charAt(0) === "#") {
        this.comment = true;
        return;
      }
      if (!t) {
        this.empty = true;
        return;
      }
      this.parseNegate();
      var i = this.globSet = this.braceExpand();
      e.debug && (this.debug = function() {
        console.error.apply(console, arguments);
      }), this.debug(this.pattern, i), i = this.globParts = i.map(function(r) {
        return r.split(ua);
      }), this.debug(this.pattern, i), i = i.map(function(r, n, s) {
        return r.map(this.parse, this);
      }, this), this.debug(this.pattern, i), i = i.filter(function(r) {
        return r.indexOf(false) === -1;
      }), this.debug(this.pattern, i), this.set = i;
    }
    Fe.prototype.parseNegate = jh;
    function jh() {
      var t = this.pattern, e = false, i = this.options, r = 0;
      if (!i.nonegate) {
        for (var n = 0, s = t.length;n < s && t.charAt(n) === "!"; n++)
          e = !e, r++;
        r && (this.pattern = t.substr(r)), this.negate = e;
      }
    }
    Ge.braceExpand = function(t, e) {
      return fa(t, e);
    };
    Fe.prototype.braceExpand = fa;
    function fa(t, e) {
      return e || (this instanceof Fe ? e = this.options : e = {}), t = typeof t == "undefined" ? this.pattern : t, Wi(t), e.nobrace || !/\{(?:(?!\{).)*\}/.test(t) ? [t] : Ph(t);
    }
    var qh = 1024 * 64, Wi = function(t) {
      if (typeof t != "string")
        throw new TypeError("invalid pattern");
      if (t.length > qh)
        throw new TypeError("pattern is too long");
    };
    Fe.prototype.parse = Hh;
    var zi = {};
    function Hh(t, e) {
      Wi(t);
      var i = this.options;
      if (t === "**")
        if (i.noglobstar)
          t = "*";
        else
          return Dr;
      if (t === "")
        return "";
      var r = "", n = !!i.nocase, s = false, o = [], l = [], a, c = false, u = -1, f = -1, h = t.charAt(0) === "." ? "" : i.dot ? "(?!(?:^|\\/)\\.{1,2}(?:$|\\/))" : "(?!\\.)", p = this;
      function d() {
        if (a) {
          switch (a) {
            case "*":
              r += Ur, n = true;
              break;
            case "?":
              r += Mr, n = true;
              break;
            default:
              r += "\\" + a;
              break;
          }
          p.debug("clearStateChar %j %j", a, r), a = false;
        }
      }
      for (var m = 0, v = t.length, E;m < v && (E = t.charAt(m)); m++) {
        if (this.debug("%s	%s %s %j", t, m, r, E), s && ca[E]) {
          r += "\\" + E, s = false;
          continue;
        }
        switch (E) {
          case "/":
            return false;
          case "\\":
            d(), s = true;
            continue;
          case "?":
          case "*":
          case "+":
          case "@":
          case "!":
            if (this.debug("%s	%s %s %j <-- stateChar", t, m, r, E), c) {
              this.debug("  in class"), E === "!" && m === f + 1 && (E = "^"), r += E;
              continue;
            }
            p.debug("call clearStateChar %j", a), d(), a = E, i.noext && d();
            continue;
          case "(":
            if (c) {
              r += "(";
              continue;
            }
            if (!a) {
              r += "\\(";
              continue;
            }
            o.push({ type: a, start: m - 1, reStart: r.length, open: la[a].open, close: la[a].close }), r += a === "!" ? "(?:(?!(?:" : "(?:", this.debug("plType %j %j", a, r), a = false;
            continue;
          case ")":
            if (c || !o.length) {
              r += "\\)";
              continue;
            }
            d(), n = true;
            var I = o.pop();
            r += I.close, I.type === "!" && l.push(I), I.reEnd = r.length;
            continue;
          case "|":
            if (c || !o.length || s) {
              r += "\\|", s = false;
              continue;
            }
            d(), r += "|";
            continue;
          case "[":
            if (d(), c) {
              r += "\\" + E;
              continue;
            }
            c = true, f = m, u = r.length, r += E;
            continue;
          case "]":
            if (m === f + 1 || !c) {
              r += "\\" + E, s = false;
              continue;
            }
            var w = t.substring(f + 1, m);
            try {
              RegExp("[" + w + "]");
            } catch {
              var C = this.parse(w, zi);
              r = r.substr(0, u) + "\\[" + C[0] + "\\]", n = n || C[1], c = false;
              continue;
            }
            n = true, c = false, r += E;
            continue;
          default:
            d(), s ? s = false : ca[E] && !(E === "^" && c) && (r += "\\"), r += E;
        }
      }
      for (c && (w = t.substr(f + 1), C = this.parse(w, zi), r = r.substr(0, u) + "\\[" + C[0], n = n || C[1]), I = o.pop();I; I = o.pop()) {
        var _ = r.slice(I.reStart + I.open.length);
        this.debug("setting tail", r, I), _ = _.replace(/((?:\\{2}){0,64})(\\?)\|/g, function(be, le, ie) {
          return ie || (ie = "\\"), le + le + ie + "|";
        }), this.debug(`tail=%j
   %s`, _, _, I, r);
        var $ = I.type === "*" ? Ur : I.type === "?" ? Mr : "\\" + I.type;
        n = true, r = r.slice(0, I.reStart) + $ + "\\(" + _;
      }
      d(), s && (r += "\\\\");
      var k = false;
      switch (r.charAt(0)) {
        case "[":
        case ".":
        case "(":
          k = true;
      }
      for (var U = l.length - 1;U > -1; U--) {
        var b = l[U], T = r.slice(0, b.reStart), B = r.slice(b.reStart, b.reEnd - 8), G = r.slice(b.reEnd - 8, b.reEnd), L = r.slice(b.reEnd);
        G += L;
        var X = T.split("(").length - 1, R = L;
        for (m = 0;m < X; m++)
          R = R.replace(/\)[+*?]?/, "");
        L = R;
        var N = "";
        L === "" && e !== zi && (N = "$");
        var q = T + B + L + N + G;
        r = q;
      }
      if (r !== "" && n && (r = "(?=.)" + r), k && (r = h + r), e === zi)
        return [r, n];
      if (!n)
        return $h(t);
      var z = i.nocase ? "i" : "";
      try {
        var P = new RegExp("^" + r + "$", z);
      } catch {
        return new RegExp("$.");
      }
      return P._glob = t, P._src = r, P;
    }
    Ge.makeRe = function(t, e) {
      return new Fe(t, e || {}).makeRe();
    };
    Fe.prototype.makeRe = Vh;
    function Vh() {
      if (this.regexp || this.regexp === false)
        return this.regexp;
      var t = this.set;
      if (!t.length)
        return this.regexp = false, this.regexp;
      var e = this.options, i = e.noglobstar ? Ur : e.dot ? Fh : Nh, r = e.nocase ? "i" : "", n = t.map(function(s) {
        return s.map(function(o) {
          return o === Dr ? i : typeof o == "string" ? Gh(o) : o._src;
        }).join("\\/");
      }).join("|");
      n = "^(?:" + n + ")$", this.negate && (n = "^(?!" + n + ").*$");
      try {
        this.regexp = new RegExp(n, r);
      } catch {
        this.regexp = false;
      }
      return this.regexp;
    }
    Ge.match = function(t, e, i) {
      i = i || {};
      var r = new Fe(e, i);
      return t = t.filter(function(n) {
        return r.match(n);
      }), r.options.nonull && !t.length && t.push(e), t;
    };
    Fe.prototype.match = function(e, i) {
      if (typeof i == "undefined" && (i = this.partial), this.debug("match", e, this.pattern), this.comment)
        return false;
      if (this.empty)
        return e === "";
      if (e === "/" && i)
        return true;
      var r = this.options;
      yi.sep !== "/" && (e = e.split(yi.sep).join("/")), e = e.split(ua), this.debug(this.pattern, "split", e);
      var n = this.set;
      this.debug(this.pattern, "set", n);
      var s, o;
      for (o = e.length - 1;o >= 0 && (s = e[o], !s); o--)
        ;
      for (o = 0;o < n.length; o++) {
        var l = n[o], a = e;
        r.matchBase && l.length === 1 && (a = [s]);
        var c = this.matchOne(a, l, i);
        if (c)
          return r.flipNegate ? true : !this.negate;
      }
      return r.flipNegate ? false : this.negate;
    };
    Fe.prototype.matchOne = function(t, e, i) {
      var r = this.options;
      this.debug("matchOne", { this: this, file: t, pattern: e }), this.debug("matchOne", t.length, e.length);
      for (var n = 0, s = 0, o = t.length, l = e.length;n < o && s < l; n++, s++) {
        this.debug("matchOne loop");
        var a = e[s], c = t[n];
        if (this.debug(e, a, c), a === false)
          return false;
        if (a === Dr) {
          this.debug("GLOBSTAR", [e, a, c]);
          var u = n, f = s + 1;
          if (f === l) {
            for (this.debug("** at the end");n < o; n++)
              if (t[n] === "." || t[n] === ".." || !r.dot && t[n].charAt(0) === ".")
                return false;
            return true;
          }
          for (;u < o; ) {
            var h = t[u];
            if (this.debug(`
globstar while`, t, u, e, f, h), this.matchOne(t.slice(u), e.slice(f), i))
              return this.debug("globstar found match!", u, o, h), true;
            if (h === "." || h === ".." || !r.dot && h.charAt(0) === ".") {
              this.debug("dot detected!", t, u, e, f);
              break;
            }
            this.debug("globstar swallow a segment, and continue"), u++;
          }
          return !!(i && (this.debug(`
>>> no match, partial?`, t, u, e, f), u === o));
        }
        var p;
        if (typeof a == "string" ? (p = c === a, this.debug("string match", a, c, p)) : (p = c.match(a), this.debug("pattern match", a, c, p)), !p)
          return false;
      }
      if (n === o && s === l)
        return true;
      if (n === o)
        return i;
      if (s === l)
        return n === o - 1 && t[n] === "";
      throw new Error("wtf?");
    };
    function $h(t) {
      return t.replace(/\\(.)/g, "$1");
    }
    function Gh(t) {
      return t.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    }
  });
  var qr = y((Tg, ma) => {
    var da = import.meta.require("fs"), jr;
    function zh() {
      try {
        return da.statSync("/.dockerenv"), true;
      } catch {
        return false;
      }
    }
    function Wh() {
      try {
        return da.readFileSync("/proc/self/cgroup", "utf8").includes("docker");
      } catch {
        return false;
      }
    }
    ma.exports = () => (jr === undefined && (jr = zh() || Wh()), jr);
  });
  var xa = y((Ag, Hr) => {
    var Yh = import.meta.require("os"), Kh = import.meta.require("fs"), ga = qr(), va = () => {
      if (process.platform !== "linux")
        return false;
      if (Yh.release().toLowerCase().includes("microsoft"))
        return !ga();
      try {
        return Kh.readFileSync("/proc/version", "utf8").toLowerCase().includes("microsoft") ? !ga() : false;
      } catch {
        return false;
      }
    };
    process.env.__IS_WSL_TEST__ ? Hr.exports = va : Hr.exports = va();
  });
  var ya = y((Rg, _a) => {
    _a.exports = (t, e, i) => {
      let r = (n) => Object.defineProperty(t, e, { value: n, enumerable: true, writable: true });
      return Object.defineProperty(t, e, { configurable: true, enumerable: true, get() {
        let n = i();
        return r(n), n;
      }, set(n) {
        r(n);
      } }), t;
    };
  });
  var Oa = y((Bg, Ca) => {
    var Zh = import.meta.require("path"), Xh = import.meta.require("child_process"), { promises: Vr, constants: ka } = import.meta.require("fs"), Yi = xa(), Jh = qr(), $r = ya(), ba = Zh.join(__dirname, "xdg-open"), { platform: zt, arch: wa } = process, Qh = (() => {
      let t = "/mnt/", e;
      return async function() {
        if (e)
          return e;
        let i = "/etc/wsl.conf", r = false;
        try {
          await Vr.access(i, ka.F_OK), r = true;
        } catch {
        }
        if (!r)
          return t;
        let n = await Vr.readFile(i, { encoding: "utf8" }), s = /(?<!#.*)root\s*=\s*(?<mountPoint>.*)/g.exec(n);
        return s ? (e = s.groups.mountPoint.trim(), e = e.endsWith("/") ? e : `${e}/`, e) : t;
      };
    })(), Ea = async (t, e) => {
      let i;
      for (let r of t)
        try {
          return await e(r);
        } catch (n) {
          i = n;
        }
      throw i;
    }, Ki = async (t) => {
      if (t = { wait: false, background: false, newInstance: false, allowNonzeroExitCode: false, ...t }, Array.isArray(t.app))
        return Ea(t.app, (l) => Ki({ ...t, app: l }));
      let { name: e, arguments: i = [] } = t.app || {};
      if (i = [...i], Array.isArray(e))
        return Ea(e, (l) => Ki({ ...t, app: { name: l, arguments: i } }));
      let r, n = [], s = {};
      if (zt === "darwin")
        r = "open", t.wait && n.push("--wait-apps"), t.background && n.push("--background"), t.newInstance && n.push("--new"), e && n.push("-a", e);
      else if (zt === "win32" || Yi && !Jh()) {
        let l = await Qh();
        r = Yi ? `${l}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe` : `${process.env.SYSTEMROOT}\\System32\\WindowsPowerShell\\v1.0\\powershell`, n.push("-NoProfile", "-NonInteractive", "\u2013ExecutionPolicy", "Bypass", "-EncodedCommand"), Yi || (s.windowsVerbatimArguments = true);
        let a = ["Start"];
        t.wait && a.push("-Wait"), e ? (a.push(`"\`"${e}\`""`, "-ArgumentList"), t.target && i.unshift(t.target)) : t.target && a.push(`"${t.target}"`), i.length > 0 && (i = i.map((c) => `"\`"${c}\`""`), a.push(i.join(","))), t.target = Buffer.from(a.join(" "), "utf16le").toString("base64");
      } else {
        if (e)
          r = e;
        else {
          let l = !__dirname || __dirname === "/", a = false;
          try {
            await Vr.access(ba, ka.X_OK), a = true;
          } catch {
          }
          r = process.versions.electron || zt === "android" || l || !a ? "xdg-open" : ba;
        }
        i.length > 0 && n.push(...i), t.wait || (s.stdio = "ignore", s.detached = true);
      }
      t.target && n.push(t.target), zt === "darwin" && i.length > 0 && n.push("--args", ...i);
      let o = Xh.spawn(r, n, s);
      return t.wait ? new Promise((l, a) => {
        o.once("error", a), o.once("close", (c) => {
          if (t.allowNonzeroExitCode && c > 0) {
            a(new Error(`Exited with code ${c}`));
            return;
          }
          l(o);
        });
      }) : (o.unref(), o);
    }, Gr = (t, e) => {
      if (typeof t != "string")
        throw new TypeError("Expected a `target`");
      return Ki({ ...e, target: t });
    }, ep = (t, e) => {
      if (typeof t != "string")
        throw new TypeError("Expected a `name`");
      let { arguments: i = [] } = e || {};
      if (i != null && !Array.isArray(i))
        throw new TypeError("Expected `appArguments` as Array type");
      return Ki({ ...e, app: { name: t, arguments: i } });
    };
    function Sa(t) {
      if (typeof t == "string" || Array.isArray(t))
        return t;
      let { [wa]: e } = t;
      if (!e)
        throw new Error(`${wa} is not supported`);
      return e;
    }
    function zr({ [zt]: t }, { wsl: e }) {
      if (e && Yi)
        return Sa(e);
      if (!t)
        throw new Error(`${zt} is not supported`);
      return Sa(t);
    }
    var Zi = {};
    $r(Zi, "chrome", () => zr({ darwin: "google chrome", win32: "chrome", linux: ["google-chrome", "google-chrome-stable", "chromium"] }, { wsl: { ia32: "/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe", x64: ["/mnt/c/Program Files/Google/Chrome/Application/chrome.exe", "/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe"] } }));
    $r(Zi, "firefox", () => zr({ darwin: "firefox", win32: "C:\\Program Files\\Mozilla Firefox\\firefox.exe", linux: "firefox" }, { wsl: "/mnt/c/Program Files/Mozilla Firefox/firefox.exe" }));
    $r(Zi, "edge", () => zr({ darwin: "microsoft edge", win32: "msedge", linux: ["microsoft-edge", "microsoft-edge-dev"] }, { wsl: "/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe" }));
    Gr.apps = Zi;
    Gr.openApp = ep;
    Ca.exports = Gr;
  });
  var Wr = y((Lg, Ta) => {
    var tp = import.meta.require("util"), Ia = import.meta.require("stream"), tt = Ta.exports = function() {
      Ia.call(this), this._buffers = [], this._buffered = 0, this._reads = [], this._paused = false, this._encoding = "utf8", this.writable = true;
    };
    tp.inherits(tt, Ia);
    tt.prototype.read = function(t, e) {
      this._reads.push({ length: Math.abs(t), allowLess: t < 0, func: e }), process.nextTick(function() {
        this._process(), this._paused && this._reads && this._reads.length > 0 && (this._paused = false, this.emit("drain"));
      }.bind(this));
    };
    tt.prototype.write = function(t, e) {
      if (!this.writable)
        return this.emit("error", new Error("Stream not writable")), false;
      let i;
      return Buffer.isBuffer(t) ? i = t : i = Buffer.from(t, e || this._encoding), this._buffers.push(i), this._buffered += i.length, this._process(), this._reads && this._reads.length === 0 && (this._paused = true), this.writable && !this._paused;
    };
    tt.prototype.end = function(t, e) {
      t && this.write(t, e), this.writable = false, this._buffers && (this._buffers.length === 0 ? this._end() : (this._buffers.push(null), this._process()));
    };
    tt.prototype.destroySoon = tt.prototype.end;
    tt.prototype._end = function() {
      this._reads.length > 0 && this.emit("error", new Error("Unexpected end of input")), this.destroy();
    };
    tt.prototype.destroy = function() {
      this._buffers && (this.writable = false, this._reads = null, this._buffers = null, this.emit("close"));
    };
    tt.prototype._processReadAllowingLess = function(t) {
      this._reads.shift();
      let e = this._buffers[0];
      e.length > t.length ? (this._buffered -= t.length, this._buffers[0] = e.slice(t.length), t.func.call(this, e.slice(0, t.length))) : (this._buffered -= e.length, this._buffers.shift(), t.func.call(this, e));
    };
    tt.prototype._processRead = function(t) {
      this._reads.shift();
      let e = 0, i = 0, r = Buffer.alloc(t.length);
      for (;e < t.length; ) {
        let n = this._buffers[i++], s = Math.min(n.length, t.length - e);
        n.copy(r, e, 0, s), e += s, s !== n.length && (this._buffers[--i] = n.slice(s));
      }
      i > 0 && this._buffers.splice(0, i), this._buffered -= t.length, t.func.call(this, r);
    };
    tt.prototype._process = function() {
      try {
        for (;this._buffered > 0 && this._reads && this._reads.length > 0; ) {
          let t = this._reads[0];
          if (t.allowLess)
            this._processReadAllowingLess(t);
          else if (this._buffered >= t.length)
            this._processRead(t);
          else
            break;
        }
        this._buffers && !this.writable && this._end();
      } catch (t) {
        this.emit("error", t);
      }
    };
  });
  var Kr = y((Yr) => {
    var ht = [{ x: [0], y: [0] }, { x: [4], y: [0] }, { x: [0, 4], y: [4] }, { x: [2, 6], y: [0, 4] }, { x: [0, 2, 4, 6], y: [2, 6] }, { x: [1, 3, 5, 7], y: [0, 2, 4, 6] }, { x: [0, 1, 2, 3, 4, 5, 6, 7], y: [1, 3, 5, 7] }];
    Yr.getImagePasses = function(t, e) {
      let i = [], r = t % 8, n = e % 8, s = (t - r) / 8, o = (e - n) / 8;
      for (let l = 0;l < ht.length; l++) {
        let a = ht[l], c = s * a.x.length, u = o * a.y.length;
        for (let f = 0;f < a.x.length && a.x[f] < r; f++)
          c++;
        for (let f = 0;f < a.y.length && a.y[f] < n; f++)
          u++;
        c > 0 && u > 0 && i.push({ width: c, height: u, index: l });
      }
      return i;
    };
    Yr.getInterlaceIterator = function(t) {
      return function(e, i, r) {
        let n = e % ht[r].x.length, s = (e - n) / ht[r].x.length * 8 + ht[r].x[n], o = i % ht[r].y.length, l = (i - o) / ht[r].y.length * 8 + ht[r].y[o];
        return s * 4 + l * t * 4;
      };
    };
  });
  var Zr = y((Fg, Aa) => {
    Aa.exports = function(e, i, r) {
      let n = e + i - r, s = Math.abs(n - e), o = Math.abs(n - i), l = Math.abs(n - r);
      return s <= o && s <= l ? e : o <= l ? i : r;
    };
  });
  var Xr = y((Ng, Ba) => {
    var ip = Kr(), rp = Zr();
    function Ra(t, e, i) {
      let r = t * e;
      return i !== 8 && (r = Math.ceil(r / (8 / i))), r;
    }
    var Wt = Ba.exports = function(t, e) {
      let { width: i, height: r, interlace: n, bpp: s, depth: o } = t;
      if (this.read = e.read, this.write = e.write, this.complete = e.complete, this._imageIndex = 0, this._images = [], n) {
        let l = ip.getImagePasses(i, r);
        for (let a = 0;a < l.length; a++)
          this._images.push({ byteWidth: Ra(l[a].width, s, o), height: l[a].height, lineIndex: 0 });
      } else
        this._images.push({ byteWidth: Ra(i, s, o), height: r, lineIndex: 0 });
      o === 8 ? this._xComparison = s : o === 16 ? this._xComparison = s * 2 : this._xComparison = 1;
    };
    Wt.prototype.start = function() {
      this.read(this._images[this._imageIndex].byteWidth + 1, this._reverseFilterLine.bind(this));
    };
    Wt.prototype._unFilterType1 = function(t, e, i) {
      let r = this._xComparison, n = r - 1;
      for (let s = 0;s < i; s++) {
        let o = t[1 + s], l = s > n ? e[s - r] : 0;
        e[s] = o + l;
      }
    };
    Wt.prototype._unFilterType2 = function(t, e, i) {
      let r = this._lastLine;
      for (let n = 0;n < i; n++) {
        let s = t[1 + n], o = r ? r[n] : 0;
        e[n] = s + o;
      }
    };
    Wt.prototype._unFilterType3 = function(t, e, i) {
      let r = this._xComparison, n = r - 1, s = this._lastLine;
      for (let o = 0;o < i; o++) {
        let l = t[1 + o], a = s ? s[o] : 0, c = o > n ? e[o - r] : 0, u = Math.floor((c + a) / 2);
        e[o] = l + u;
      }
    };
    Wt.prototype._unFilterType4 = function(t, e, i) {
      let r = this._xComparison, n = r - 1, s = this._lastLine;
      for (let o = 0;o < i; o++) {
        let l = t[1 + o], a = s ? s[o] : 0, c = o > n ? e[o - r] : 0, u = o > n && s ? s[o - r] : 0, f = rp(c, a, u);
        e[o] = l + f;
      }
    };
    Wt.prototype._reverseFilterLine = function(t) {
      let e = t[0], i, r = this._images[this._imageIndex], n = r.byteWidth;
      if (e === 0)
        i = t.slice(1, n + 1);
      else
        switch (i = Buffer.alloc(n), e) {
          case 1:
            this._unFilterType1(t, i, n);
            break;
          case 2:
            this._unFilterType2(t, i, n);
            break;
          case 3:
            this._unFilterType3(t, i, n);
            break;
          case 4:
            this._unFilterType4(t, i, n);
            break;
          default:
            throw new Error("Unrecognised filter type - " + e);
        }
      this.write(i), r.lineIndex++, r.lineIndex >= r.height ? (this._lastLine = null, this._imageIndex++, r = this._images[this._imageIndex]) : this._lastLine = i, r ? this.read(r.byteWidth + 1, this._reverseFilterLine.bind(this)) : (this._lastLine = null, this.complete());
    };
  });
  var Fa = y((Mg, Pa) => {
    var np = import.meta.require("util"), La = Wr(), sp = Xr(), op = Pa.exports = function(t) {
      La.call(this);
      let e = [], i = this;
      this._filter = new sp(t, { read: this.read.bind(this), write: function(r) {
        e.push(r);
      }, complete: function() {
        i.emit("complete", Buffer.concat(e));
      } }), this._filter.start();
    };
    np.inherits(op, La);
  });
  var Yt = y((Ug, Na) => {
    Na.exports = { PNG_SIGNATURE: [137, 80, 78, 71, 13, 10, 26, 10], TYPE_IHDR: 1229472850, TYPE_IEND: 1229278788, TYPE_IDAT: 1229209940, TYPE_PLTE: 1347179589, TYPE_tRNS: 1951551059, TYPE_gAMA: 1732332865, COLORTYPE_GRAYSCALE: 0, COLORTYPE_PALETTE: 1, COLORTYPE_COLOR: 2, COLORTYPE_ALPHA: 4, COLORTYPE_PALETTE_COLOR: 3, COLORTYPE_COLOR_ALPHA: 6, COLORTYPE_TO_BPP_MAP: { 0: 1, 2: 3, 3: 1, 4: 2, 6: 4 }, GAMMA_DIVISION: 1e5 };
  });
  var en = y((Dg, Ma) => {
    var Jr = [];
    (function() {
      for (let t = 0;t < 256; t++) {
        let e = t;
        for (let i = 0;i < 8; i++)
          e & 1 ? e = 3988292384 ^ e >>> 1 : e = e >>> 1;
        Jr[t] = e;
      }
    })();
    var Qr = Ma.exports = function() {
      this._crc = -1;
    };
    Qr.prototype.write = function(t) {
      for (let e = 0;e < t.length; e++)
        this._crc = Jr[(this._crc ^ t[e]) & 255] ^ this._crc >>> 8;
      return true;
    };
    Qr.prototype.crc32 = function() {
      return this._crc ^ -1;
    };
    Qr.crc32 = function(t) {
      let e = -1;
      for (let i = 0;i < t.length; i++)
        e = Jr[(e ^ t[i]) & 255] ^ e >>> 8;
      return e ^ -1;
    };
  });
  var tn = y((jg, Ua) => {
    var Oe = Yt(), ap = en(), Ae = Ua.exports = function(t, e) {
      this._options = t, t.checkCRC = t.checkCRC !== false, this._hasIHDR = false, this._hasIEND = false, this._emittedHeadersFinished = false, this._palette = [], this._colorType = 0, this._chunks = {}, this._chunks[Oe.TYPE_IHDR] = this._handleIHDR.bind(this), this._chunks[Oe.TYPE_IEND] = this._handleIEND.bind(this), this._chunks[Oe.TYPE_IDAT] = this._handleIDAT.bind(this), this._chunks[Oe.TYPE_PLTE] = this._handlePLTE.bind(this), this._chunks[Oe.TYPE_tRNS] = this._handleTRNS.bind(this), this._chunks[Oe.TYPE_gAMA] = this._handleGAMA.bind(this), this.read = e.read, this.error = e.error, this.metadata = e.metadata, this.gamma = e.gamma, this.transColor = e.transColor, this.palette = e.palette, this.parsed = e.parsed, this.inflateData = e.inflateData, this.finished = e.finished, this.simpleTransparency = e.simpleTransparency, this.headersFinished = e.headersFinished || function() {
      };
    };
    Ae.prototype.start = function() {
      this.read(Oe.PNG_SIGNATURE.length, this._parseSignature.bind(this));
    };
    Ae.prototype._parseSignature = function(t) {
      let e = Oe.PNG_SIGNATURE;
      for (let i = 0;i < e.length; i++)
        if (t[i] !== e[i]) {
          this.error(new Error("Invalid file signature"));
          return;
        }
      this.read(8, this._parseChunkBegin.bind(this));
    };
    Ae.prototype._parseChunkBegin = function(t) {
      let e = t.readUInt32BE(0), i = t.readUInt32BE(4), r = "";
      for (let s = 4;s < 8; s++)
        r += String.fromCharCode(t[s]);
      let n = !!(t[4] & 32);
      if (!this._hasIHDR && i !== Oe.TYPE_IHDR) {
        this.error(new Error("Expected IHDR on beggining"));
        return;
      }
      if (this._crc = new ap, this._crc.write(Buffer.from(r)), this._chunks[i])
        return this._chunks[i](e);
      if (!n) {
        this.error(new Error("Unsupported critical chunk type " + r));
        return;
      }
      this.read(e + 4, this._skipChunk.bind(this));
    };
    Ae.prototype._skipChunk = function() {
      this.read(8, this._parseChunkBegin.bind(this));
    };
    Ae.prototype._handleChunkEnd = function() {
      this.read(4, this._parseChunkEnd.bind(this));
    };
    Ae.prototype._parseChunkEnd = function(t) {
      let e = t.readInt32BE(0), i = this._crc.crc32();
      if (this._options.checkCRC && i !== e) {
        this.error(new Error("Crc error - " + e + " - " + i));
        return;
      }
      this._hasIEND || this.read(8, this._parseChunkBegin.bind(this));
    };
    Ae.prototype._handleIHDR = function(t) {
      this.read(t, this._parseIHDR.bind(this));
    };
    Ae.prototype._parseIHDR = function(t) {
      this._crc.write(t);
      let e = t.readUInt32BE(0), i = t.readUInt32BE(4), r = t[8], n = t[9], s = t[10], o = t[11], l = t[12];
      if (r !== 8 && r !== 4 && r !== 2 && r !== 1 && r !== 16) {
        this.error(new Error("Unsupported bit depth " + r));
        return;
      }
      if (!(n in Oe.COLORTYPE_TO_BPP_MAP)) {
        this.error(new Error("Unsupported color type"));
        return;
      }
      if (s !== 0) {
        this.error(new Error("Unsupported compression method"));
        return;
      }
      if (o !== 0) {
        this.error(new Error("Unsupported filter method"));
        return;
      }
      if (l !== 0 && l !== 1) {
        this.error(new Error("Unsupported interlace method"));
        return;
      }
      this._colorType = n;
      let a = Oe.COLORTYPE_TO_BPP_MAP[this._colorType];
      this._hasIHDR = true, this.metadata({ width: e, height: i, depth: r, interlace: !!l, palette: !!(n & Oe.COLORTYPE_PALETTE), color: !!(n & Oe.COLORTYPE_COLOR), alpha: !!(n & Oe.COLORTYPE_ALPHA), bpp: a, colorType: n }), this._handleChunkEnd();
    };
    Ae.prototype._handlePLTE = function(t) {
      this.read(t, this._parsePLTE.bind(this));
    };
    Ae.prototype._parsePLTE = function(t) {
      this._crc.write(t);
      let e = Math.floor(t.length / 3);
      for (let i = 0;i < e; i++)
        this._palette.push([t[i * 3], t[i * 3 + 1], t[i * 3 + 2], 255]);
      this.palette(this._palette), this._handleChunkEnd();
    };
    Ae.prototype._handleTRNS = function(t) {
      this.simpleTransparency(), this.read(t, this._parseTRNS.bind(this));
    };
    Ae.prototype._parseTRNS = function(t) {
      if (this._crc.write(t), this._colorType === Oe.COLORTYPE_PALETTE_COLOR) {
        if (this._palette.length === 0) {
          this.error(new Error("Transparency chunk must be after palette"));
          return;
        }
        if (t.length > this._palette.length) {
          this.error(new Error("More transparent colors than palette size"));
          return;
        }
        for (let e = 0;e < t.length; e++)
          this._palette[e][3] = t[e];
        this.palette(this._palette);
      }
      this._colorType === Oe.COLORTYPE_GRAYSCALE && this.transColor([t.readUInt16BE(0)]), this._colorType === Oe.COLORTYPE_COLOR && this.transColor([t.readUInt16BE(0), t.readUInt16BE(2), t.readUInt16BE(4)]), this._handleChunkEnd();
    };
    Ae.prototype._handleGAMA = function(t) {
      this.read(t, this._parseGAMA.bind(this));
    };
    Ae.prototype._parseGAMA = function(t) {
      this._crc.write(t), this.gamma(t.readUInt32BE(0) / Oe.GAMMA_DIVISION), this._handleChunkEnd();
    };
    Ae.prototype._handleIDAT = function(t) {
      this._emittedHeadersFinished || (this._emittedHeadersFinished = true, this.headersFinished()), this.read(-t, this._parseIDAT.bind(this, t));
    };
    Ae.prototype._parseIDAT = function(t, e) {
      if (this._crc.write(e), this._colorType === Oe.COLORTYPE_PALETTE_COLOR && this._palette.length === 0)
        throw new Error("Expected palette not found");
      this.inflateData(e);
      let i = t - e.length;
      i > 0 ? this._handleIDAT(i) : this._handleChunkEnd();
    };
    Ae.prototype._handleIEND = function(t) {
      this.read(t, this._parseIEND.bind(this));
    };
    Ae.prototype._parseIEND = function(t) {
      this._crc.write(t), this._hasIEND = true, this._handleChunkEnd(), this.finished && this.finished();
    };
  });
  var rn = y((ja) => {
    var Da = Kr(), lp = [function() {
    }, function(t, e, i, r) {
      if (r === e.length)
        throw new Error("Ran out of data");
      let n = e[r];
      t[i] = n, t[i + 1] = n, t[i + 2] = n, t[i + 3] = 255;
    }, function(t, e, i, r) {
      if (r + 1 >= e.length)
        throw new Error("Ran out of data");
      let n = e[r];
      t[i] = n, t[i + 1] = n, t[i + 2] = n, t[i + 3] = e[r + 1];
    }, function(t, e, i, r) {
      if (r + 2 >= e.length)
        throw new Error("Ran out of data");
      t[i] = e[r], t[i + 1] = e[r + 1], t[i + 2] = e[r + 2], t[i + 3] = 255;
    }, function(t, e, i, r) {
      if (r + 3 >= e.length)
        throw new Error("Ran out of data");
      t[i] = e[r], t[i + 1] = e[r + 1], t[i + 2] = e[r + 2], t[i + 3] = e[r + 3];
    }], cp = [function() {
    }, function(t, e, i, r) {
      let n = e[0];
      t[i] = n, t[i + 1] = n, t[i + 2] = n, t[i + 3] = r;
    }, function(t, e, i) {
      let r = e[0];
      t[i] = r, t[i + 1] = r, t[i + 2] = r, t[i + 3] = e[1];
    }, function(t, e, i, r) {
      t[i] = e[0], t[i + 1] = e[1], t[i + 2] = e[2], t[i + 3] = r;
    }, function(t, e, i) {
      t[i] = e[0], t[i + 1] = e[1], t[i + 2] = e[2], t[i + 3] = e[3];
    }];
    function up(t, e) {
      let i = [], r = 0;
      function n() {
        if (r === t.length)
          throw new Error("Ran out of data");
        let s = t[r];
        r++;
        let o, l, a, c, u, f, h, p;
        switch (e) {
          default:
            throw new Error("unrecognised depth");
          case 16:
            h = t[r], r++, i.push((s << 8) + h);
            break;
          case 4:
            h = s & 15, p = s >> 4, i.push(p, h);
            break;
          case 2:
            u = s & 3, f = s >> 2 & 3, h = s >> 4 & 3, p = s >> 6 & 3, i.push(p, h, f, u);
            break;
          case 1:
            o = s & 1, l = s >> 1 & 1, a = s >> 2 & 1, c = s >> 3 & 1, u = s >> 4 & 1, f = s >> 5 & 1, h = s >> 6 & 1, p = s >> 7 & 1, i.push(p, h, f, u, c, a, l, o);
            break;
        }
      }
      return { get: function(s) {
        for (;i.length < s; )
          n();
        let o = i.slice(0, s);
        return i = i.slice(s), o;
      }, resetAfterLine: function() {
        i.length = 0;
      }, end: function() {
        if (r !== t.length)
          throw new Error("extra data found");
      } };
    }
    function fp(t, e, i, r, n, s) {
      let { width: o, height: l, index: a } = t;
      for (let c = 0;c < l; c++)
        for (let u = 0;u < o; u++) {
          let f = i(u, c, a);
          lp[r](e, n, f, s), s += r;
        }
      return s;
    }
    function hp(t, e, i, r, n, s) {
      let { width: o, height: l, index: a } = t;
      for (let c = 0;c < l; c++) {
        for (let u = 0;u < o; u++) {
          let f = n.get(r), h = i(u, c, a);
          cp[r](e, f, h, s);
        }
        n.resetAfterLine();
      }
    }
    ja.dataToBitMap = function(t, e) {
      let { width: i, height: r, depth: n, bpp: s, interlace: o } = e, l;
      n !== 8 && (l = up(t, n));
      let a;
      n <= 8 ? a = Buffer.alloc(i * r * 4) : a = new Uint16Array(i * r * 4);
      let c = Math.pow(2, n) - 1, u = 0, f, h;
      if (o)
        f = Da.getImagePasses(i, r), h = Da.getInterlaceIterator(i, r);
      else {
        let p = 0;
        h = function() {
          let d = p;
          return p += 4, d;
        }, f = [{ width: i, height: r }];
      }
      for (let p = 0;p < f.length; p++)
        n === 8 ? u = fp(f[p], a, h, s, t, u) : hp(f[p], a, h, s, l, c);
      if (n === 8) {
        if (u !== t.length)
          throw new Error("extra data found");
      } else
        l.end();
      return a;
    };
  });
  var nn = y((Hg, qa) => {
    function pp(t, e, i, r, n) {
      let s = 0;
      for (let o = 0;o < r; o++)
        for (let l = 0;l < i; l++) {
          let a = n[t[s]];
          if (!a)
            throw new Error("index " + t[s] + " not in palette");
          for (let c = 0;c < 4; c++)
            e[s + c] = a[c];
          s += 4;
        }
    }
    function dp(t, e, i, r, n) {
      let s = 0;
      for (let o = 0;o < r; o++)
        for (let l = 0;l < i; l++) {
          let a = false;
          if (n.length === 1 ? n[0] === t[s] && (a = true) : n[0] === t[s] && n[1] === t[s + 1] && n[2] === t[s + 2] && (a = true), a)
            for (let c = 0;c < 4; c++)
              e[s + c] = 0;
          s += 4;
        }
    }
    function mp(t, e, i, r, n) {
      let s = 255, o = Math.pow(2, n) - 1, l = 0;
      for (let a = 0;a < r; a++)
        for (let c = 0;c < i; c++) {
          for (let u = 0;u < 4; u++)
            e[l + u] = Math.floor(t[l + u] * s / o + 0.5);
          l += 4;
        }
    }
    qa.exports = function(t, e, i = false) {
      let { depth: r, width: n, height: s, colorType: o, transColor: l, palette: a } = e, c = t;
      return o === 3 ? pp(t, c, n, s, a) : (l && dp(t, c, n, s, l), r !== 8 && !i && (r === 16 && (c = Buffer.alloc(n * s * 4)), mp(t, c, n, s, r))), c;
    };
  });
  var $a = y((Vg, Va) => {
    var gp = import.meta.require("util"), sn = import.meta.require("zlib"), Ha = Wr(), vp = Fa(), xp = tn(), _p = rn(), yp = nn(), st = Va.exports = function(t) {
      Ha.call(this), this._parser = new xp(t, { read: this.read.bind(this), error: this._handleError.bind(this), metadata: this._handleMetaData.bind(this), gamma: this.emit.bind(this, "gamma"), palette: this._handlePalette.bind(this), transColor: this._handleTransColor.bind(this), finished: this._finished.bind(this), inflateData: this._inflateData.bind(this), simpleTransparency: this._simpleTransparency.bind(this), headersFinished: this._headersFinished.bind(this) }), this._options = t, this.writable = true, this._parser.start();
    };
    gp.inherits(st, Ha);
    st.prototype._handleError = function(t) {
      this.emit("error", t), this.writable = false, this.destroy(), this._inflate && this._inflate.destroy && this._inflate.destroy(), this._filter && (this._filter.destroy(), this._filter.on("error", function() {
      })), this.errord = true;
    };
    st.prototype._inflateData = function(t) {
      if (!this._inflate)
        if (this._bitmapInfo.interlace)
          this._inflate = sn.createInflate(), this._inflate.on("error", this.emit.bind(this, "error")), this._filter.on("complete", this._complete.bind(this)), this._inflate.pipe(this._filter);
        else {
          let i = ((this._bitmapInfo.width * this._bitmapInfo.bpp * this._bitmapInfo.depth + 7 >> 3) + 1) * this._bitmapInfo.height, r = Math.max(i, sn.Z_MIN_CHUNK);
          this._inflate = sn.createInflate({ chunkSize: r });
          let n = i, s = this.emit.bind(this, "error");
          this._inflate.on("error", function(l) {
            n && s(l);
          }), this._filter.on("complete", this._complete.bind(this));
          let o = this._filter.write.bind(this._filter);
          this._inflate.on("data", function(l) {
            n && (l.length > n && (l = l.slice(0, n)), n -= l.length, o(l));
          }), this._inflate.on("end", this._filter.end.bind(this._filter));
        }
      this._inflate.write(t);
    };
    st.prototype._handleMetaData = function(t) {
      this._metaData = t, this._bitmapInfo = Object.create(t), this._filter = new vp(this._bitmapInfo);
    };
    st.prototype._handleTransColor = function(t) {
      this._bitmapInfo.transColor = t;
    };
    st.prototype._handlePalette = function(t) {
      this._bitmapInfo.palette = t;
    };
    st.prototype._simpleTransparency = function() {
      this._metaData.alpha = true;
    };
    st.prototype._headersFinished = function() {
      this.emit("metadata", this._metaData);
    };
    st.prototype._finished = function() {
      this.errord || (this._inflate ? this._inflate.end() : this.emit("error", "No Inflate block"));
    };
    st.prototype._complete = function(t) {
      if (this.errord)
        return;
      let e;
      try {
        let i = _p.dataToBitMap(t, this._bitmapInfo);
        e = yp(i, this._bitmapInfo, this._options.skipRescale), i = null;
      } catch (i) {
        this._handleError(i);
        return;
      }
      this.emit("parsed", e);
    };
  });
  var za = y(($g, Ga) => {
    var Ke = Yt();
    Ga.exports = function(t, e, i, r) {
      let n = [Ke.COLORTYPE_COLOR_ALPHA, Ke.COLORTYPE_ALPHA].indexOf(r.colorType) !== -1;
      if (r.colorType === r.inputColorType) {
        let d = function() {
          let m = new ArrayBuffer(2);
          return new DataView(m).setInt16(0, 256, true), new Int16Array(m)[0] !== 256;
        }();
        if (r.bitDepth === 8 || r.bitDepth === 16 && d)
          return t;
      }
      let s = r.bitDepth !== 16 ? t : new Uint16Array(t.buffer), o = 255, l = Ke.COLORTYPE_TO_BPP_MAP[r.inputColorType];
      l === 4 && !r.inputHasAlpha && (l = 3);
      let a = Ke.COLORTYPE_TO_BPP_MAP[r.colorType];
      r.bitDepth === 16 && (o = 65535, a *= 2);
      let c = Buffer.alloc(e * i * a), u = 0, f = 0, h = r.bgColor || {};
      h.red === undefined && (h.red = o), h.green === undefined && (h.green = o), h.blue === undefined && (h.blue = o);
      function p() {
        let d, m, v, E = o;
        switch (r.inputColorType) {
          case Ke.COLORTYPE_COLOR_ALPHA:
            E = s[u + 3], d = s[u], m = s[u + 1], v = s[u + 2];
            break;
          case Ke.COLORTYPE_COLOR:
            d = s[u], m = s[u + 1], v = s[u + 2];
            break;
          case Ke.COLORTYPE_ALPHA:
            E = s[u + 1], d = s[u], m = d, v = d;
            break;
          case Ke.COLORTYPE_GRAYSCALE:
            d = s[u], m = d, v = d;
            break;
          default:
            throw new Error("input color type:" + r.inputColorType + " is not supported at present");
        }
        return r.inputHasAlpha && (n || (E /= o, d = Math.min(Math.max(Math.round((1 - E) * h.red + E * d), 0), o), m = Math.min(Math.max(Math.round((1 - E) * h.green + E * m), 0), o), v = Math.min(Math.max(Math.round((1 - E) * h.blue + E * v), 0), o))), { red: d, green: m, blue: v, alpha: E };
      }
      for (let d = 0;d < i; d++)
        for (let m = 0;m < e; m++) {
          let v = p(s, u);
          switch (r.colorType) {
            case Ke.COLORTYPE_COLOR_ALPHA:
            case Ke.COLORTYPE_COLOR:
              r.bitDepth === 8 ? (c[f] = v.red, c[f + 1] = v.green, c[f + 2] = v.blue, n && (c[f + 3] = v.alpha)) : (c.writeUInt16BE(v.red, f), c.writeUInt16BE(v.green, f + 2), c.writeUInt16BE(v.blue, f + 4), n && c.writeUInt16BE(v.alpha, f + 6));
              break;
            case Ke.COLORTYPE_ALPHA:
            case Ke.COLORTYPE_GRAYSCALE: {
              let E = (v.red + v.green + v.blue) / 3;
              r.bitDepth === 8 ? (c[f] = E, n && (c[f + 1] = v.alpha)) : (c.writeUInt16BE(E, f), n && c.writeUInt16BE(v.alpha, f + 2));
              break;
            }
            default:
              throw new Error("unrecognised color Type " + r.colorType);
          }
          u += l, f += a;
        }
      return c;
    };
  });
  var Ka = y((Gg, Ya) => {
    var Wa = Zr();
    function bp(t, e, i, r, n) {
      for (let s = 0;s < i; s++)
        r[n + s] = t[e + s];
    }
    function wp(t, e, i) {
      let r = 0, n = e + i;
      for (let s = e;s < n; s++)
        r += Math.abs(t[s]);
      return r;
    }
    function Ep(t, e, i, r, n, s) {
      for (let o = 0;o < i; o++) {
        let l = o >= s ? t[e + o - s] : 0, a = t[e + o] - l;
        r[n + o] = a;
      }
    }
    function Sp(t, e, i, r) {
      let n = 0;
      for (let s = 0;s < i; s++) {
        let o = s >= r ? t[e + s - r] : 0, l = t[e + s] - o;
        n += Math.abs(l);
      }
      return n;
    }
    function kp(t, e, i, r, n) {
      for (let s = 0;s < i; s++) {
        let o = e > 0 ? t[e + s - i] : 0, l = t[e + s] - o;
        r[n + s] = l;
      }
    }
    function Cp(t, e, i) {
      let r = 0, n = e + i;
      for (let s = e;s < n; s++) {
        let o = e > 0 ? t[s - i] : 0, l = t[s] - o;
        r += Math.abs(l);
      }
      return r;
    }
    function Op(t, e, i, r, n, s) {
      for (let o = 0;o < i; o++) {
        let l = o >= s ? t[e + o - s] : 0, a = e > 0 ? t[e + o - i] : 0, c = t[e + o] - (l + a >> 1);
        r[n + o] = c;
      }
    }
    function Ip(t, e, i, r) {
      let n = 0;
      for (let s = 0;s < i; s++) {
        let o = s >= r ? t[e + s - r] : 0, l = e > 0 ? t[e + s - i] : 0, a = t[e + s] - (o + l >> 1);
        n += Math.abs(a);
      }
      return n;
    }
    function Tp(t, e, i, r, n, s) {
      for (let o = 0;o < i; o++) {
        let l = o >= s ? t[e + o - s] : 0, a = e > 0 ? t[e + o - i] : 0, c = e > 0 && o >= s ? t[e + o - (i + s)] : 0, u = t[e + o] - Wa(l, a, c);
        r[n + o] = u;
      }
    }
    function Ap(t, e, i, r) {
      let n = 0;
      for (let s = 0;s < i; s++) {
        let o = s >= r ? t[e + s - r] : 0, l = e > 0 ? t[e + s - i] : 0, a = e > 0 && s >= r ? t[e + s - (i + r)] : 0, c = t[e + s] - Wa(o, l, a);
        n += Math.abs(c);
      }
      return n;
    }
    var Rp = { 0: bp, 1: Ep, 2: kp, 3: Op, 4: Tp }, Bp = { 0: wp, 1: Sp, 2: Cp, 3: Ip, 4: Ap };
    Ya.exports = function(t, e, i, r, n) {
      let s;
      if (!("filterType" in r) || r.filterType === -1)
        s = [0, 1, 2, 3, 4];
      else if (typeof r.filterType == "number")
        s = [r.filterType];
      else
        throw new Error("unrecognised filter types");
      r.bitDepth === 16 && (n *= 2);
      let o = e * n, l = 0, a = 0, c = Buffer.alloc((o + 1) * i), u = s[0];
      for (let f = 0;f < i; f++) {
        if (s.length > 1) {
          let h = 1 / 0;
          for (let p = 0;p < s.length; p++) {
            let d = Bp[s[p]](t, a, o, n);
            d < h && (u = s[p], h = d);
          }
        }
        c[l] = u, l++, Rp[u](t, a, o, c, l, n), l += o, a += o;
      }
      return c;
    };
  });
  var on = y((zg, Za) => {
    var Ue = Yt(), Lp = en(), Pp = za(), Fp = Ka(), Np = import.meta.require("zlib"), pt = Za.exports = function(t) {
      if (this._options = t, t.deflateChunkSize = t.deflateChunkSize || 32 * 1024, t.deflateLevel = t.deflateLevel != null ? t.deflateLevel : 9, t.deflateStrategy = t.deflateStrategy != null ? t.deflateStrategy : 3, t.inputHasAlpha = t.inputHasAlpha != null ? t.inputHasAlpha : true, t.deflateFactory = t.deflateFactory || Np.createDeflate, t.bitDepth = t.bitDepth || 8, t.colorType = typeof t.colorType == "number" ? t.colorType : Ue.COLORTYPE_COLOR_ALPHA, t.inputColorType = typeof t.inputColorType == "number" ? t.inputColorType : Ue.COLORTYPE_COLOR_ALPHA, [Ue.COLORTYPE_GRAYSCALE, Ue.COLORTYPE_COLOR, Ue.COLORTYPE_COLOR_ALPHA, Ue.COLORTYPE_ALPHA].indexOf(t.colorType) === -1)
        throw new Error("option color type:" + t.colorType + " is not supported at present");
      if ([Ue.COLORTYPE_GRAYSCALE, Ue.COLORTYPE_COLOR, Ue.COLORTYPE_COLOR_ALPHA, Ue.COLORTYPE_ALPHA].indexOf(t.inputColorType) === -1)
        throw new Error("option input color type:" + t.inputColorType + " is not supported at present");
      if (t.bitDepth !== 8 && t.bitDepth !== 16)
        throw new Error("option bit depth:" + t.bitDepth + " is not supported at present");
    };
    pt.prototype.getDeflateOptions = function() {
      return { chunkSize: this._options.deflateChunkSize, level: this._options.deflateLevel, strategy: this._options.deflateStrategy };
    };
    pt.prototype.createDeflate = function() {
      return this._options.deflateFactory(this.getDeflateOptions());
    };
    pt.prototype.filterData = function(t, e, i) {
      let r = Pp(t, e, i, this._options), n = Ue.COLORTYPE_TO_BPP_MAP[this._options.colorType];
      return Fp(r, e, i, this._options, n);
    };
    pt.prototype._packChunk = function(t, e) {
      let i = e ? e.length : 0, r = Buffer.alloc(i + 12);
      return r.writeUInt32BE(i, 0), r.writeUInt32BE(t, 4), e && e.copy(r, 8), r.writeInt32BE(Lp.crc32(r.slice(4, r.length - 4)), r.length - 4), r;
    };
    pt.prototype.packGAMA = function(t) {
      let e = Buffer.alloc(4);
      return e.writeUInt32BE(Math.floor(t * Ue.GAMMA_DIVISION), 0), this._packChunk(Ue.TYPE_gAMA, e);
    };
    pt.prototype.packIHDR = function(t, e) {
      let i = Buffer.alloc(13);
      return i.writeUInt32BE(t, 0), i.writeUInt32BE(e, 4), i[8] = this._options.bitDepth, i[9] = this._options.colorType, i[10] = 0, i[11] = 0, i[12] = 0, this._packChunk(Ue.TYPE_IHDR, i);
    };
    pt.prototype.packIDAT = function(t) {
      return this._packChunk(Ue.TYPE_IDAT, t);
    };
    pt.prototype.packIEND = function() {
      return this._packChunk(Ue.TYPE_IEND, null);
    };
  });
  var el = y((Wg, Qa) => {
    var Mp = import.meta.require("util"), Xa = import.meta.require("stream"), Up = Yt(), Dp = on(), Ja = Qa.exports = function(t) {
      Xa.call(this);
      let e = t || {};
      this._packer = new Dp(e), this._deflate = this._packer.createDeflate(), this.readable = true;
    };
    Mp.inherits(Ja, Xa);
    Ja.prototype.pack = function(t, e, i, r) {
      this.emit("data", Buffer.from(Up.PNG_SIGNATURE)), this.emit("data", this._packer.packIHDR(e, i)), r && this.emit("data", this._packer.packGAMA(r));
      let n = this._packer.filterData(t, e, i);
      this._deflate.on("error", this.emit.bind(this, "error")), this._deflate.on("data", function(s) {
        this.emit("data", this._packer.packIDAT(s));
      }.bind(this)), this._deflate.on("end", function() {
        this.emit("data", this._packer.packIEND()), this.emit("end");
      }.bind(this)), this._deflate.end(n);
    };
  });
  var ol = y((bi, sl) => {
    var tl = import.meta.require("assert").ok, Kt = import.meta.require("zlib"), jp = import.meta.require("util"), il = import.meta.require("buffer").kMaxLength;
    function St(t) {
      if (!(this instanceof St))
        return new St(t);
      t && t.chunkSize < Kt.Z_MIN_CHUNK && (t.chunkSize = Kt.Z_MIN_CHUNK), Kt.Inflate.call(this, t), this._offset = this._offset === undefined ? this._outOffset : this._offset, this._buffer = this._buffer || this._outBuffer, t && t.maxLength != null && (this._maxLength = t.maxLength);
    }
    function qp(t) {
      return new St(t);
    }
    function rl(t, e) {
      e && process.nextTick(e), t._handle && (t._handle.close(), t._handle = null);
    }
    St.prototype._processChunk = function(t, e, i) {
      if (typeof i == "function")
        return Kt.Inflate._processChunk.call(this, t, e, i);
      let r = this, n = t && t.length, s = this._chunkSize - this._offset, o = this._maxLength, l = 0, a = [], c = 0, u;
      this.on("error", function(d) {
        u = d;
      });
      function f(d, m) {
        if (r._hadError)
          return;
        let v = s - m;
        if (tl(v >= 0, "have should not go down"), v > 0) {
          let E = r._buffer.slice(r._offset, r._offset + v);
          if (r._offset += v, E.length > o && (E = E.slice(0, o)), a.push(E), c += E.length, o -= E.length, o === 0)
            return false;
        }
        return (m === 0 || r._offset >= r._chunkSize) && (s = r._chunkSize, r._offset = 0, r._buffer = Buffer.allocUnsafe(r._chunkSize)), m === 0 ? (l += n - d, n = d, true) : false;
      }
      tl(this._handle, "zlib binding closed");
      let h;
      do
        h = this._handle.writeSync(e, t, l, n, this._buffer, this._offset, s), h = h || this._writeState;
      while (!this._hadError && f(h[0], h[1]));
      if (this._hadError)
        throw u;
      if (c >= il)
        throw rl(this), new RangeError("Cannot create final Buffer. It would be larger than 0x" + il.toString(16) + " bytes");
      let p = Buffer.concat(a, c);
      return rl(this), p;
    };
    jp.inherits(St, Kt.Inflate);
    function Hp(t, e) {
      if (typeof e == "string" && (e = Buffer.from(e)), !(e instanceof Buffer))
        throw new TypeError("Not a string or buffer");
      let i = t._finishFlushFlag;
      return i == null && (i = Kt.Z_FINISH), t._processChunk(e, i);
    }
    function nl(t, e) {
      return Hp(new St(e), t);
    }
    sl.exports = bi = nl;
    bi.Inflate = St;
    bi.createInflate = qp;
    bi.inflateSync = nl;
  });
  var an = y((Yg, ll) => {
    var al = ll.exports = function(t) {
      this._buffer = t, this._reads = [];
    };
    al.prototype.read = function(t, e) {
      this._reads.push({ length: Math.abs(t), allowLess: t < 0, func: e });
    };
    al.prototype.process = function() {
      for (;this._reads.length > 0 && this._buffer.length; ) {
        let t = this._reads[0];
        if (this._buffer.length && (this._buffer.length >= t.length || t.allowLess)) {
          this._reads.shift();
          let e = this._buffer;
          this._buffer = e.slice(t.length), t.func.call(this, e.slice(0, t.length));
        } else
          break;
      }
      if (this._reads.length > 0)
        throw new Error("There are some read requests waitng on finished stream");
      if (this._buffer.length > 0)
        throw new Error("unrecognised content at end of stream");
    };
  });
  var ul = y((cl) => {
    var Vp = an(), $p = Xr();
    cl.process = function(t, e) {
      let i = [], r = new Vp(t);
      return new $p(e, { read: r.read.bind(r), write: function(s) {
        i.push(s);
      }, complete: function() {
      } }).start(), r.process(), Buffer.concat(i);
    };
  });
  var dl = y((Zg, pl) => {
    var fl = true, hl = import.meta.require("zlib"), Gp = ol();
    hl.deflateSync || (fl = false);
    var zp = an(), Wp = ul(), Yp = tn(), Kp = rn(), Zp = nn();
    pl.exports = function(t, e) {
      if (!fl)
        throw new Error("To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0");
      let i;
      function r(C) {
        i = C;
      }
      let n;
      function s(C) {
        n = C;
      }
      function o(C) {
        n.transColor = C;
      }
      function l(C) {
        n.palette = C;
      }
      function a() {
        n.alpha = true;
      }
      let c;
      function u(C) {
        c = C;
      }
      let f = [];
      function h(C) {
        f.push(C);
      }
      let p = new zp(t);
      if (new Yp(e, { read: p.read.bind(p), error: r, metadata: s, gamma: u, palette: l, transColor: o, inflateData: h, simpleTransparency: a }).start(), p.process(), i)
        throw i;
      let m = Buffer.concat(f);
      f.length = 0;
      let v;
      if (n.interlace)
        v = hl.inflateSync(m);
      else {
        let _ = ((n.width * n.bpp * n.depth + 7 >> 3) + 1) * n.height;
        v = Gp(m, { chunkSize: _, maxLength: _ });
      }
      if (m = null, !v || !v.length)
        throw new Error("bad png - invalid inflate data response");
      let E = Wp.process(v, n);
      m = null;
      let I = Kp.dataToBitMap(E, n);
      E = null;
      let w = Zp(I, n, e.skipRescale);
      return n.data = w, n.gamma = c || 0, n;
    };
  });
  var xl = y((Xg, vl) => {
    var ml = true, gl = import.meta.require("zlib");
    gl.deflateSync || (ml = false);
    var Xp = Yt(), Jp = on();
    vl.exports = function(t, e) {
      if (!ml)
        throw new Error("To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0");
      let i = e || {}, r = new Jp(i), n = [];
      n.push(Buffer.from(Xp.PNG_SIGNATURE)), n.push(r.packIHDR(t.width, t.height)), t.gamma && n.push(r.packGAMA(t.gamma));
      let s = r.filterData(t.data, t.width, t.height), o = gl.deflateSync(s, r.getDeflateOptions());
      if (s = null, !o || !o.length)
        throw new Error("bad png - invalid compressed data response");
      return n.push(r.packIDAT(o)), n.push(r.packIEND()), Buffer.concat(n);
    };
  });
  var _l = y((ln) => {
    var Qp = dl(), ed = xl();
    ln.read = function(t, e) {
      return Qp(t, e || {});
    };
    ln.write = function(t, e) {
      return ed(t, e);
    };
  });
  var wl = y((bl) => {
    var td = import.meta.require("util"), yl = import.meta.require("stream"), id = $a(), rd = el(), nd = _l(), qe = bl.PNG = function(t) {
      yl.call(this), t = t || {}, this.width = t.width | 0, this.height = t.height | 0, this.data = this.width > 0 && this.height > 0 ? Buffer.alloc(4 * this.width * this.height) : null, t.fill && this.data && this.data.fill(0), this.gamma = 0, this.readable = this.writable = true, this._parser = new id(t), this._parser.on("error", this.emit.bind(this, "error")), this._parser.on("close", this._handleClose.bind(this)), this._parser.on("metadata", this._metadata.bind(this)), this._parser.on("gamma", this._gamma.bind(this)), this._parser.on("parsed", function(e) {
        this.data = e, this.emit("parsed", e);
      }.bind(this)), this._packer = new rd(t), this._packer.on("data", this.emit.bind(this, "data")), this._packer.on("end", this.emit.bind(this, "end")), this._parser.on("close", this._handleClose.bind(this)), this._packer.on("error", this.emit.bind(this, "error"));
    };
    td.inherits(qe, yl);
    qe.sync = nd;
    qe.prototype.pack = function() {
      return !this.data || !this.data.length ? (this.emit("error", "No data provided"), this) : (process.nextTick(function() {
        this._packer.pack(this.data, this.width, this.height, this.gamma);
      }.bind(this)), this);
    };
    qe.prototype.parse = function(t, e) {
      if (e) {
        let i, r;
        i = function(n) {
          this.removeListener("error", r), this.data = n, e(null, this);
        }.bind(this), r = function(n) {
          this.removeListener("parsed", i), e(n, null);
        }.bind(this), this.once("parsed", i), this.once("error", r);
      }
      return this.end(t), this;
    };
    qe.prototype.write = function(t) {
      return this._parser.write(t), true;
    };
    qe.prototype.end = function(t) {
      this._parser.end(t);
    };
    qe.prototype._metadata = function(t) {
      this.width = t.width, this.height = t.height, this.emit("metadata", t);
    };
    qe.prototype._gamma = function(t) {
      this.gamma = t;
    };
    qe.prototype._handleClose = function() {
      !this._parser.writable && !this._packer.readable && this.emit("close");
    };
    qe.bitblt = function(t, e, i, r, n, s, o, l) {
      if (i |= 0, r |= 0, n |= 0, s |= 0, o |= 0, l |= 0, i > t.width || r > t.height || i + n > t.width || r + s > t.height)
        throw new Error("bitblt reading outside image");
      if (o > e.width || l > e.height || o + n > e.width || l + s > e.height)
        throw new Error("bitblt writing outside image");
      for (let a = 0;a < s; a++)
        t.data.copy(e.data, (l + a) * e.width + o << 2, (r + a) * t.width + i << 2, (r + a) * t.width + i + n << 2);
    };
    qe.prototype.bitblt = function(t, e, i, r, n, s, o) {
      return qe.bitblt(this, t, e, i, r, n, s, o), this;
    };
    qe.adjustGamma = function(t) {
      if (t.gamma) {
        for (let e = 0;e < t.height; e++)
          for (let i = 0;i < t.width; i++) {
            let r = t.width * e + i << 2;
            for (let n = 0;n < 3; n++) {
              let s = t.data[r + n] / 255;
              s = Math.pow(s, 1 / 2.2 / t.gamma), t.data[r + n] = Math.round(s * 255);
            }
          }
        t.gamma = 0;
      }
    };
    qe.prototype.adjustGamma = function() {
      qe.adjustGamma(this);
    };
  });
  var wi = y((un) => {
    var Xi = class extends Error {
      constructor(e, i, r) {
        super(r), Error.captureStackTrace(this, this.constructor), this.name = this.constructor.name, this.code = i, this.exitCode = e, this.nestedError = undefined;
      }
    }, cn = class extends Xi {
      constructor(e) {
        super(1, "commander.invalidArgument", e), Error.captureStackTrace(this, this.constructor), this.name = this.constructor.name;
      }
    };
    un.CommanderError = Xi;
    un.InvalidArgumentError = cn;
  });
  var Ji = y((hn) => {
    var { InvalidArgumentError: sd } = wi(), fn = class {
      constructor(e, i) {
        switch (this.description = i || "", this.variadic = false, this.parseArg = undefined, this.defaultValue = undefined, this.defaultValueDescription = undefined, this.argChoices = undefined, e[0]) {
          case "<":
            this.required = true, this._name = e.slice(1, -1);
            break;
          case "[":
            this.required = false, this._name = e.slice(1, -1);
            break;
          default:
            this.required = true, this._name = e;
            break;
        }
        this._name.length > 3 && this._name.slice(-3) === "..." && (this.variadic = true, this._name = this._name.slice(0, -3));
      }
      name() {
        return this._name;
      }
      _concatValue(e, i) {
        return i === this.defaultValue || !Array.isArray(i) ? [e] : i.concat(e);
      }
      default(e, i) {
        return this.defaultValue = e, this.defaultValueDescription = i, this;
      }
      argParser(e) {
        return this.parseArg = e, this;
      }
      choices(e) {
        return this.argChoices = e, this.parseArg = (i, r) => {
          if (!e.includes(i))
            throw new sd(`Allowed choices are ${e.join(", ")}.`);
          return this.variadic ? this._concatValue(i, r) : i;
        }, this;
      }
      argRequired() {
        return this.required = true, this;
      }
      argOptional() {
        return this.required = false, this;
      }
    };
    function od(t) {
      let e = t.name() + (t.variadic === true ? "..." : "");
      return t.required ? "<" + e + ">" : "[" + e + "]";
    }
    hn.Argument = fn;
    hn.humanReadableArgName = od;
  });
  var dn = y((El) => {
    var { humanReadableArgName: ad } = Ji(), pn = class {
      constructor() {
        this.helpWidth = undefined, this.sortSubcommands = false, this.sortOptions = false;
      }
      visibleCommands(e) {
        let i = e.commands.filter((r) => !r._hidden);
        if (e._hasImplicitHelpCommand()) {
          let [, r, n] = e._helpCommandnameAndArgs.match(/([^ ]+) *(.*)/), s = e.createCommand(r).helpOption(false);
          s.description(e._helpCommandDescription), n && s.arguments(n), i.push(s);
        }
        return this.sortSubcommands && i.sort((r, n) => r.name().localeCompare(n.name())), i;
      }
      visibleOptions(e) {
        let i = e.options.filter((s) => !s.hidden), r = e._hasHelpOption && e._helpShortFlag && !e._findOption(e._helpShortFlag), n = e._hasHelpOption && !e._findOption(e._helpLongFlag);
        if (r || n) {
          let s;
          r ? n ? s = e.createOption(e._helpFlags, e._helpDescription) : s = e.createOption(e._helpShortFlag, e._helpDescription) : s = e.createOption(e._helpLongFlag, e._helpDescription), i.push(s);
        }
        if (this.sortOptions) {
          let s = (o) => o.short ? o.short.replace(/^-/, "") : o.long.replace(/^--/, "");
          i.sort((o, l) => s(o).localeCompare(s(l)));
        }
        return i;
      }
      visibleArguments(e) {
        return e._argsDescription && e._args.forEach((i) => {
          i.description = i.description || e._argsDescription[i.name()] || "";
        }), e._args.find((i) => i.description) ? e._args : [];
      }
      subcommandTerm(e) {
        let i = e._args.map((r) => ad(r)).join(" ");
        return e._name + (e._aliases[0] ? "|" + e._aliases[0] : "") + (e.options.length ? " [options]" : "") + (i ? " " + i : "");
      }
      optionTerm(e) {
        return e.flags;
      }
      argumentTerm(e) {
        return e.name();
      }
      longestSubcommandTermLength(e, i) {
        return i.visibleCommands(e).reduce((r, n) => Math.max(r, i.subcommandTerm(n).length), 0);
      }
      longestOptionTermLength(e, i) {
        return i.visibleOptions(e).reduce((r, n) => Math.max(r, i.optionTerm(n).length), 0);
      }
      longestArgumentTermLength(e, i) {
        return i.visibleArguments(e).reduce((r, n) => Math.max(r, i.argumentTerm(n).length), 0);
      }
      commandUsage(e) {
        let i = e._name;
        e._aliases[0] && (i = i + "|" + e._aliases[0]);
        let r = "";
        for (let n = e.parent;n; n = n.parent)
          r = n.name() + " " + r;
        return r + i + " " + e.usage();
      }
      commandDescription(e) {
        return e.description();
      }
      subcommandDescription(e) {
        return e.description();
      }
      optionDescription(e) {
        let i = [];
        return e.argChoices && !e.negate && i.push(`choices: ${e.argChoices.map((r) => JSON.stringify(r)).join(", ")}`), e.defaultValue !== undefined && !e.negate && i.push(`default: ${e.defaultValueDescription || JSON.stringify(e.defaultValue)}`), e.envVar !== undefined && i.push(`env: ${e.envVar}`), i.length > 0 ? `${e.description} (${i.join(", ")})` : e.description;
      }
      argumentDescription(e) {
        let i = [];
        if (e.argChoices && i.push(`choices: ${e.argChoices.map((r) => JSON.stringify(r)).join(", ")}`), e.defaultValue !== undefined && i.push(`default: ${e.defaultValueDescription || JSON.stringify(e.defaultValue)}`), i.length > 0) {
          let r = `(${i.join(", ")})`;
          return e.description ? `${e.description} ${r}` : r;
        }
        return e.description;
      }
      formatHelp(e, i) {
        let r = i.padWidth(e, i), n = i.helpWidth || 80, s = 2, o = 2;
        function l(d, m) {
          if (m) {
            let v = `${d.padEnd(r + o)}${m}`;
            return i.wrap(v, n - s, r + o);
          }
          return d;
        }
        function a(d) {
          return d.join(`
`).replace(/^/gm, " ".repeat(s));
        }
        let c = [`Usage: ${i.commandUsage(e)}`, ""], u = i.commandDescription(e);
        u.length > 0 && (c = c.concat([u, ""]));
        let f = i.visibleArguments(e).map((d) => l(i.argumentTerm(d), i.argumentDescription(d)));
        f.length > 0 && (c = c.concat(["Arguments:", a(f), ""]));
        let h = i.visibleOptions(e).map((d) => l(i.optionTerm(d), i.optionDescription(d)));
        h.length > 0 && (c = c.concat(["Options:", a(h), ""]));
        let p = i.visibleCommands(e).map((d) => l(i.subcommandTerm(d), i.subcommandDescription(d)));
        return p.length > 0 && (c = c.concat(["Commands:", a(p), ""])), c.join(`
`);
      }
      padWidth(e, i) {
        return Math.max(i.longestOptionTermLength(e, i), i.longestSubcommandTermLength(e, i), i.longestArgumentTermLength(e, i));
      }
      wrap(e, i, r, n = 40) {
        if (e.match(/[\n]\s+/))
          return e;
        let s = i - r;
        if (s < n)
          return e;
        let o = e.substr(0, r), l = e.substr(r), a = " ".repeat(r), c = new RegExp(".{1," + (s - 1) + "}([\\s\u200B]|$)|[^\\s\u200B]+?([\\s\u200B]|$)", "g"), u = l.match(c) || [];
        return o + u.map((f, h) => (f.slice(-1) === `
` && (f = f.slice(0, f.length - 1)), (h > 0 ? a : "") + f.trimRight())).join(`
`);
      }
    };
    El.Help = pn;
  });
  var vn = y((gn) => {
    var { InvalidArgumentError: ld } = wi(), mn = class {
      constructor(e, i) {
        this.flags = e, this.description = i || "", this.required = e.includes("<"), this.optional = e.includes("["), this.variadic = /\w\.\.\.[>\]]$/.test(e), this.mandatory = false;
        let r = Sl(e);
        this.short = r.shortFlag, this.long = r.longFlag, this.negate = false, this.long && (this.negate = this.long.startsWith("--no-")), this.defaultValue = undefined, this.defaultValueDescription = undefined, this.envVar = undefined, this.parseArg = undefined, this.hidden = false, this.argChoices = undefined;
      }
      default(e, i) {
        return this.defaultValue = e, this.defaultValueDescription = i, this;
      }
      env(e) {
        return this.envVar = e, this;
      }
      argParser(e) {
        return this.parseArg = e, this;
      }
      makeOptionMandatory(e = true) {
        return this.mandatory = !!e, this;
      }
      hideHelp(e = true) {
        return this.hidden = !!e, this;
      }
      _concatValue(e, i) {
        return i === this.defaultValue || !Array.isArray(i) ? [e] : i.concat(e);
      }
      choices(e) {
        return this.argChoices = e, this.parseArg = (i, r) => {
          if (!e.includes(i))
            throw new ld(`Allowed choices are ${e.join(", ")}.`);
          return this.variadic ? this._concatValue(i, r) : i;
        }, this;
      }
      name() {
        return this.long ? this.long.replace(/^--/, "") : this.short.replace(/^-/, "");
      }
      attributeName() {
        return cd(this.name().replace(/^no-/, ""));
      }
      is(e) {
        return this.short === e || this.long === e;
      }
    };
    function cd(t) {
      return t.split("-").reduce((e, i) => e + i[0].toUpperCase() + i.slice(1));
    }
    function Sl(t) {
      let e, i, r = t.split(/[ |,]+/);
      return r.length > 1 && !/^[[<]/.test(r[1]) && (e = r.shift()), i = r.shift(), !e && /^-[^-]$/.test(i) && (e = i, i = undefined), { shortFlag: e, longFlag: i };
    }
    gn.Option = mn;
    gn.splitOptionFlags = Sl;
  });
  var Cl = y((kl) => {
    function ud(t, e) {
      if (Math.abs(t.length - e.length) > 3)
        return Math.max(t.length, e.length);
      let i = [];
      for (let r = 0;r <= t.length; r++)
        i[r] = [r];
      for (let r = 0;r <= e.length; r++)
        i[0][r] = r;
      for (let r = 1;r <= e.length; r++)
        for (let n = 1;n <= t.length; n++) {
          let s = 1;
          t[n - 1] === e[r - 1] ? s = 0 : s = 1, i[n][r] = Math.min(i[n - 1][r] + 1, i[n][r - 1] + 1, i[n - 1][r - 1] + s), n > 1 && r > 1 && t[n - 1] === e[r - 2] && t[n - 2] === e[r - 1] && (i[n][r] = Math.min(i[n][r], i[n - 2][r - 2] + 1));
        }
      return i[t.length][e.length];
    }
    function fd(t, e) {
      if (!e || e.length === 0)
        return "";
      e = Array.from(new Set(e));
      let i = t.startsWith("--");
      i && (t = t.slice(2), e = e.map((o) => o.slice(2)));
      let r = [], n = 3, s = 0.4;
      return e.forEach((o) => {
        if (o.length <= 1)
          return;
        let l = ud(t, o), a = Math.max(t.length, o.length);
        (a - l) / a > s && (l < n ? (n = l, r = [o]) : l === n && r.push(o));
      }), r.sort((o, l) => o.localeCompare(l)), i && (r = r.map((o) => `--${o}`)), r.length > 1 ? `
(Did you mean one of ${r.join(", ")}?)` : r.length === 1 ? `
(Did you mean ${r[0]}?)` : "";
    }
    kl.suggestSimilar = fd;
  });
  var Rl = y((Al) => {
    var hd = import.meta.require("events").EventEmitter, xn = import.meta.require("child_process"), kt = import.meta.require("path"), _n = import.meta.require("fs"), { Argument: pd, humanReadableArgName: dd } = Ji(), { CommanderError: yn } = wi(), { Help: md } = dn(), { Option: gd, splitOptionFlags: vd } = vn(), { suggestSimilar: Ol } = Cl(), wn = class t extends hd {
      constructor(e) {
        super(), this.commands = [], this.options = [], this.parent = null, this._allowUnknownOption = false, this._allowExcessArguments = true, this._args = [], this.args = [], this.rawArgs = [], this.processedArgs = [], this._scriptPath = null, this._name = e || "", this._optionValues = {}, this._optionValueSources = {}, this._storeOptionsAsProperties = false, this._actionHandler = null, this._executableHandler = false, this._executableFile = null, this._defaultCommandName = null, this._exitCallback = null, this._aliases = [], this._combineFlagAndOptionalValue = true, this._description = "", this._argsDescription = undefined, this._enablePositionalOptions = false, this._passThroughOptions = false, this._lifeCycleHooks = {}, this._showHelpAfterError = false, this._showSuggestionAfterError = false, this._outputConfiguration = { writeOut: (i) => process.stdout.write(i), writeErr: (i) => process.stderr.write(i), getOutHelpWidth: () => process.stdout.isTTY ? process.stdout.columns : undefined, getErrHelpWidth: () => process.stderr.isTTY ? process.stderr.columns : undefined, outputError: (i, r) => r(i) }, this._hidden = false, this._hasHelpOption = true, this._helpFlags = "-h, --help", this._helpDescription = "display help for command", this._helpShortFlag = "-h", this._helpLongFlag = "--help", this._addImplicitHelpCommand = undefined, this._helpCommandName = "help", this._helpCommandnameAndArgs = "help [command]", this._helpCommandDescription = "display help for command", this._helpConfiguration = {};
      }
      copyInheritedSettings(e) {
        return this._outputConfiguration = e._outputConfiguration, this._hasHelpOption = e._hasHelpOption, this._helpFlags = e._helpFlags, this._helpDescription = e._helpDescription, this._helpShortFlag = e._helpShortFlag, this._helpLongFlag = e._helpLongFlag, this._helpCommandName = e._helpCommandName, this._helpCommandnameAndArgs = e._helpCommandnameAndArgs, this._helpCommandDescription = e._helpCommandDescription, this._helpConfiguration = e._helpConfiguration, this._exitCallback = e._exitCallback, this._storeOptionsAsProperties = e._storeOptionsAsProperties, this._combineFlagAndOptionalValue = e._combineFlagAndOptionalValue, this._allowExcessArguments = e._allowExcessArguments, this._enablePositionalOptions = e._enablePositionalOptions, this._showHelpAfterError = e._showHelpAfterError, this._showSuggestionAfterError = e._showSuggestionAfterError, this;
      }
      command(e, i, r) {
        let n = i, s = r;
        typeof n == "object" && n !== null && (s = n, n = null), s = s || {};
        let [, o, l] = e.match(/([^ ]+) *(.*)/), a = this.createCommand(o);
        return n && (a.description(n), a._executableHandler = true), s.isDefault && (this._defaultCommandName = a._name), a._hidden = !!(s.noHelp || s.hidden), a._executableFile = s.executableFile || null, l && a.arguments(l), this.commands.push(a), a.parent = this, a.copyInheritedSettings(this), n ? this : a;
      }
      createCommand(e) {
        return new t(e);
      }
      createHelp() {
        return Object.assign(new md, this.configureHelp());
      }
      configureHelp(e) {
        return e === undefined ? this._helpConfiguration : (this._helpConfiguration = e, this);
      }
      configureOutput(e) {
        return e === undefined ? this._outputConfiguration : (Object.assign(this._outputConfiguration, e), this);
      }
      showHelpAfterError(e = true) {
        return typeof e != "string" && (e = !!e), this._showHelpAfterError = e, this;
      }
      showSuggestionAfterError(e = true) {
        return this._showSuggestionAfterError = !!e, this;
      }
      addCommand(e, i) {
        if (!e._name)
          throw new Error("Command passed to .addCommand() must have a name");
        function r(n) {
          n.forEach((s) => {
            if (s._executableHandler && !s._executableFile)
              throw new Error(`Must specify executableFile for deeply nested executable: ${s.name()}`);
            r(s.commands);
          });
        }
        return r(e.commands), i = i || {}, i.isDefault && (this._defaultCommandName = e._name), (i.noHelp || i.hidden) && (e._hidden = true), this.commands.push(e), e.parent = this, this;
      }
      createArgument(e, i) {
        return new pd(e, i);
      }
      argument(e, i, r, n) {
        let s = this.createArgument(e, i);
        return typeof r == "function" ? s.default(n).argParser(r) : s.default(r), this.addArgument(s), this;
      }
      arguments(e) {
        return e.split(/ +/).forEach((i) => {
          this.argument(i);
        }), this;
      }
      addArgument(e) {
        let i = this._args.slice(-1)[0];
        if (i && i.variadic)
          throw new Error(`only the last argument can be variadic '${i.name()}'`);
        if (e.required && e.defaultValue !== undefined && e.parseArg === undefined)
          throw new Error(`a default value for a required argument is never used: '${e.name()}'`);
        return this._args.push(e), this;
      }
      addHelpCommand(e, i) {
        return e === false ? this._addImplicitHelpCommand = false : (this._addImplicitHelpCommand = true, typeof e == "string" && (this._helpCommandName = e.split(" ")[0], this._helpCommandnameAndArgs = e), this._helpCommandDescription = i || this._helpCommandDescription), this;
      }
      _hasImplicitHelpCommand() {
        return this._addImplicitHelpCommand === undefined ? this.commands.length && !this._actionHandler && !this._findCommand("help") : this._addImplicitHelpCommand;
      }
      hook(e, i) {
        let r = ["preAction", "postAction"];
        if (!r.includes(e))
          throw new Error(`Unexpected value for event passed to hook : '${e}'.
Expecting one of '${r.join("', '")}'`);
        return this._lifeCycleHooks[e] ? this._lifeCycleHooks[e].push(i) : this._lifeCycleHooks[e] = [i], this;
      }
      exitOverride(e) {
        return e ? this._exitCallback = e : this._exitCallback = (i) => {
          if (i.code !== "commander.executeSubCommandAsync")
            throw i;
        }, this;
      }
      _exit(e, i, r) {
        this._exitCallback && this._exitCallback(new yn(e, i, r)), process.exit(e);
      }
      action(e) {
        let i = (r) => {
          let n = this._args.length, s = r.slice(0, n);
          return this._storeOptionsAsProperties ? s[n] = this : s[n] = this.opts(), s.push(this), e.apply(this, s);
        };
        return this._actionHandler = i, this;
      }
      createOption(e, i) {
        return new gd(e, i);
      }
      addOption(e) {
        let i = e.name(), r = e.attributeName(), n = e.defaultValue;
        if (e.negate || e.optional || e.required || typeof n == "boolean") {
          if (e.negate) {
            let o = e.long.replace(/^--no-/, "--");
            n = this._findOption(o) ? this.getOptionValue(r) : true;
          }
          n !== undefined && this.setOptionValueWithSource(r, n, "default");
        }
        this.options.push(e);
        let s = (o, l, a) => {
          let c = this.getOptionValue(r);
          if (o !== null && e.parseArg)
            try {
              o = e.parseArg(o, c === undefined ? n : c);
            } catch (u) {
              if (u.code === "commander.invalidArgument") {
                let f = `${l} ${u.message}`;
                this._displayError(u.exitCode, u.code, f);
              }
              throw u;
            }
          else
            o !== null && e.variadic && (o = e._concatValue(o, c));
          typeof c == "boolean" || typeof c == "undefined" ? o == null ? this.setOptionValueWithSource(r, e.negate ? false : n || true, a) : this.setOptionValueWithSource(r, o, a) : o !== null && this.setOptionValueWithSource(r, e.negate ? false : o, a);
        };
        return this.on("option:" + i, (o) => {
          let l = `error: option '${e.flags}' argument '${o}' is invalid.`;
          s(o, l, "cli");
        }), e.envVar && this.on("optionEnv:" + i, (o) => {
          let l = `error: option '${e.flags}' value '${o}' from env '${e.envVar}' is invalid.`;
          s(o, l, "env");
        }), this;
      }
      _optionEx(e, i, r, n, s) {
        let o = this.createOption(i, r);
        if (o.makeOptionMandatory(!!e.mandatory), typeof n == "function")
          o.default(s).argParser(n);
        else if (n instanceof RegExp) {
          let l = n;
          n = (a, c) => {
            let u = l.exec(a);
            return u ? u[0] : c;
          }, o.default(s).argParser(n);
        } else
          o.default(n);
        return this.addOption(o);
      }
      option(e, i, r, n) {
        return this._optionEx({}, e, i, r, n);
      }
      requiredOption(e, i, r, n) {
        return this._optionEx({ mandatory: true }, e, i, r, n);
      }
      combineFlagAndOptionalValue(e = true) {
        return this._combineFlagAndOptionalValue = !!e, this;
      }
      allowUnknownOption(e = true) {
        return this._allowUnknownOption = !!e, this;
      }
      allowExcessArguments(e = true) {
        return this._allowExcessArguments = !!e, this;
      }
      enablePositionalOptions(e = true) {
        return this._enablePositionalOptions = !!e, this;
      }
      passThroughOptions(e = true) {
        if (this._passThroughOptions = !!e, this.parent && e && !this.parent._enablePositionalOptions)
          throw new Error("passThroughOptions can not be used without turning on enablePositionalOptions for parent command(s)");
        return this;
      }
      storeOptionsAsProperties(e = true) {
        if (this._storeOptionsAsProperties = !!e, this.options.length)
          throw new Error("call .storeOptionsAsProperties() before adding options");
        return this;
      }
      getOptionValue(e) {
        return this._storeOptionsAsProperties ? this[e] : this._optionValues[e];
      }
      setOptionValue(e, i) {
        return this._storeOptionsAsProperties ? this[e] = i : this._optionValues[e] = i, this;
      }
      setOptionValueWithSource(e, i, r) {
        return this.setOptionValue(e, i), this._optionValueSources[e] = r, this;
      }
      getOptionValueSource(e) {
        return this._optionValueSources[e];
      }
      _prepareUserArgs(e, i) {
        if (e !== undefined && !Array.isArray(e))
          throw new Error("first parameter to parse must be array or undefined");
        i = i || {}, e === undefined && (e = process.argv, process.versions && process.versions.electron && (i.from = "electron")), this.rawArgs = e.slice();
        let r;
        switch (i.from) {
          case undefined:
          case "node":
            this._scriptPath = e[1], r = e.slice(2);
            break;
          case "electron":
            process.defaultApp ? (this._scriptPath = e[1], r = e.slice(2)) : r = e.slice(1);
            break;
          case "user":
            r = e.slice(0);
            break;
          default:
            throw new Error(`unexpected parse option { from: '${i.from}' }`);
        }
        return !this._scriptPath && import.meta.require.main && (this._scriptPath = import.meta.require.main.filename), this._name = this._name || this._scriptPath && kt.basename(this._scriptPath, kt.extname(this._scriptPath)), r;
      }
      parse(e, i) {
        let r = this._prepareUserArgs(e, i);
        return this._parseCommand([], r), this;
      }
      async parseAsync(e, i) {
        let r = this._prepareUserArgs(e, i);
        return await this._parseCommand([], r), this;
      }
      _executeSubCommand(e, i) {
        i = i.slice();
        let r = false, n = [".js", ".ts", ".tsx", ".mjs", ".cjs"];
        this._checkForMissingMandatoryOptions();
        let s = this._scriptPath;
        !s && import.meta.require.main && (s = import.meta.require.main.filename);
        let o;
        try {
          let h = _n.realpathSync(s);
          o = kt.dirname(h);
        } catch {
          o = ".";
        }
        let l = kt.basename(s, kt.extname(s)) + "-" + e._name;
        e._executableFile && (l = e._executableFile);
        let a = kt.join(o, l);
        _n.existsSync(a) ? l = a : n.forEach((h) => {
          _n.existsSync(`${a}${h}`) && (l = `${a}${h}`);
        }), r = n.includes(kt.extname(l));
        let c;
        process.platform !== "win32" ? r ? (i.unshift(l), i = Tl(process.execArgv).concat(i), c = xn.spawn(process.argv[0], i, { stdio: "inherit" })) : c = xn.spawn(l, i, { stdio: "inherit" }) : (i.unshift(l), i = Tl(process.execArgv).concat(i), c = xn.spawn(process.execPath, i, { stdio: "inherit" })), ["SIGUSR1", "SIGUSR2", "SIGTERM", "SIGINT", "SIGHUP"].forEach((h) => {
          process.on(h, () => {
            c.killed === false && c.exitCode === null && c.kill(h);
          });
        });
        let f = this._exitCallback;
        f ? c.on("close", () => {
          f(new yn(process.exitCode || 0, "commander.executeSubCommandAsync", "(close)"));
        }) : c.on("close", process.exit.bind(process)), c.on("error", (h) => {
          if (h.code === "ENOENT") {
            let p = `'${l}' does not exist
 - if '${e._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead
 - if the default executable name is not suitable, use the executableFile option to supply a custom name`;
            throw new Error(p);
          } else if (h.code === "EACCES")
            throw new Error(`'${l}' not executable`);
          if (!f)
            process.exit(1);
          else {
            let p = new yn(1, "commander.executeSubCommandAsync", "(error)");
            p.nestedError = h, f(p);
          }
        }), this.runningCommand = c;
      }
      _dispatchSubcommand(e, i, r) {
        let n = this._findCommand(e);
        if (n || this.help({ error: true }), n._executableHandler)
          this._executeSubCommand(n, i.concat(r));
        else
          return n._parseCommand(i, r);
      }
      _checkNumberOfArguments() {
        this._args.forEach((e, i) => {
          e.required && this.args[i] == null && this.missingArgument(e.name());
        }), !(this._args.length > 0 && this._args[this._args.length - 1].variadic) && this.args.length > this._args.length && this._excessArguments(this.args);
      }
      _processArguments() {
        let e = (r, n, s) => {
          let o = n;
          if (n !== null && r.parseArg)
            try {
              o = r.parseArg(n, s);
            } catch (l) {
              if (l.code === "commander.invalidArgument") {
                let a = `error: command-argument value '${n}' is invalid for argument '${r.name()}'. ${l.message}`;
                this._displayError(l.exitCode, l.code, a);
              }
              throw l;
            }
          return o;
        };
        this._checkNumberOfArguments();
        let i = [];
        this._args.forEach((r, n) => {
          let s = r.defaultValue;
          r.variadic ? n < this.args.length ? (s = this.args.slice(n), r.parseArg && (s = s.reduce((o, l) => e(r, l, o), r.defaultValue))) : s === undefined && (s = []) : n < this.args.length && (s = this.args[n], r.parseArg && (s = e(r, s, r.defaultValue))), i[n] = s;
        }), this.processedArgs = i;
      }
      _chainOrCall(e, i) {
        return e && e.then && typeof e.then == "function" ? e.then(() => i()) : i();
      }
      _chainOrCallHooks(e, i) {
        let r = e, n = [];
        return bn(this).reverse().filter((s) => s._lifeCycleHooks[i] !== undefined).forEach((s) => {
          s._lifeCycleHooks[i].forEach((o) => {
            n.push({ hookedCommand: s, callback: o });
          });
        }), i === "postAction" && n.reverse(), n.forEach((s) => {
          r = this._chainOrCall(r, () => s.callback(s.hookedCommand, this));
        }), r;
      }
      _parseCommand(e, i) {
        let r = this.parseOptions(i);
        if (this._parseOptionsEnv(), e = e.concat(r.operands), i = r.unknown, this.args = e.concat(i), e && this._findCommand(e[0]))
          return this._dispatchSubcommand(e[0], e.slice(1), i);
        if (this._hasImplicitHelpCommand() && e[0] === this._helpCommandName)
          return e.length === 1 && this.help(), this._dispatchSubcommand(e[1], [], [this._helpLongFlag]);
        if (this._defaultCommandName)
          return Il(this, i), this._dispatchSubcommand(this._defaultCommandName, e, i);
        this.commands.length && this.args.length === 0 && !this._actionHandler && !this._defaultCommandName && this.help({ error: true }), Il(this, r.unknown), this._checkForMissingMandatoryOptions();
        let n = () => {
          r.unknown.length > 0 && this.unknownOption(r.unknown[0]);
        }, s = `command:${this.name()}`;
        if (this._actionHandler) {
          n(), this._processArguments();
          let o;
          return o = this._chainOrCallHooks(o, "preAction"), o = this._chainOrCall(o, () => this._actionHandler(this.processedArgs)), this.parent && this.parent.emit(s, e, i), o = this._chainOrCallHooks(o, "postAction"), o;
        }
        if (this.parent && this.parent.listenerCount(s))
          n(), this._processArguments(), this.parent.emit(s, e, i);
        else if (e.length) {
          if (this._findCommand("*"))
            return this._dispatchSubcommand("*", e, i);
          this.listenerCount("command:*") ? this.emit("command:*", e, i) : this.commands.length ? this.unknownCommand() : (n(), this._processArguments());
        } else
          this.commands.length ? (n(), this.help({ error: true })) : (n(), this._processArguments());
      }
      _findCommand(e) {
        if (e)
          return this.commands.find((i) => i._name === e || i._aliases.includes(e));
      }
      _findOption(e) {
        return this.options.find((i) => i.is(e));
      }
      _checkForMissingMandatoryOptions() {
        for (let e = this;e; e = e.parent)
          e.options.forEach((i) => {
            i.mandatory && e.getOptionValue(i.attributeName()) === undefined && e.missingMandatoryOptionValue(i);
          });
      }
      parseOptions(e) {
        let i = [], r = [], n = i, s = e.slice();
        function o(a) {
          return a.length > 1 && a[0] === "-";
        }
        let l = null;
        for (;s.length; ) {
          let a = s.shift();
          if (a === "--") {
            n === r && n.push(a), n.push(...s);
            break;
          }
          if (l && !o(a)) {
            this.emit(`option:${l.name()}`, a);
            continue;
          }
          if (l = null, o(a)) {
            let c = this._findOption(a);
            if (c) {
              if (c.required) {
                let u = s.shift();
                u === undefined && this.optionMissingArgument(c), this.emit(`option:${c.name()}`, u);
              } else if (c.optional) {
                let u = null;
                s.length > 0 && !o(s[0]) && (u = s.shift()), this.emit(`option:${c.name()}`, u);
              } else
                this.emit(`option:${c.name()}`);
              l = c.variadic ? c : null;
              continue;
            }
          }
          if (a.length > 2 && a[0] === "-" && a[1] !== "-") {
            let c = this._findOption(`-${a[1]}`);
            if (c) {
              c.required || c.optional && this._combineFlagAndOptionalValue ? this.emit(`option:${c.name()}`, a.slice(2)) : (this.emit(`option:${c.name()}`), s.unshift(`-${a.slice(2)}`));
              continue;
            }
          }
          if (/^--[^=]+=/.test(a)) {
            let c = a.indexOf("="), u = this._findOption(a.slice(0, c));
            if (u && (u.required || u.optional)) {
              this.emit(`option:${u.name()}`, a.slice(c + 1));
              continue;
            }
          }
          if (o(a) && (n = r), (this._enablePositionalOptions || this._passThroughOptions) && i.length === 0 && r.length === 0) {
            if (this._findCommand(a)) {
              i.push(a), s.length > 0 && r.push(...s);
              break;
            } else if (a === this._helpCommandName && this._hasImplicitHelpCommand()) {
              i.push(a), s.length > 0 && i.push(...s);
              break;
            } else if (this._defaultCommandName) {
              r.push(a), s.length > 0 && r.push(...s);
              break;
            }
          }
          if (this._passThroughOptions) {
            n.push(a), s.length > 0 && n.push(...s);
            break;
          }
          n.push(a);
        }
        return { operands: i, unknown: r };
      }
      opts() {
        if (this._storeOptionsAsProperties) {
          let e = {}, i = this.options.length;
          for (let r = 0;r < i; r++) {
            let n = this.options[r].attributeName();
            e[n] = n === this._versionOptionName ? this._version : this[n];
          }
          return e;
        }
        return this._optionValues;
      }
      _displayError(e, i, r) {
        this._outputConfiguration.outputError(`${r}
`, this._outputConfiguration.writeErr), typeof this._showHelpAfterError == "string" ? this._outputConfiguration.writeErr(`${this._showHelpAfterError}
`) : this._showHelpAfterError && (this._outputConfiguration.writeErr(`
`), this.outputHelp({ error: true })), this._exit(e, i, r);
      }
      _parseOptionsEnv() {
        this.options.forEach((e) => {
          if (e.envVar && e.envVar in process.env) {
            let i = e.attributeName();
            (this.getOptionValue(i) === undefined || ["default", "config", "env"].includes(this.getOptionValueSource(i))) && (e.required || e.optional ? this.emit(`optionEnv:${e.name()}`, process.env[e.envVar]) : this.emit(`optionEnv:${e.name()}`));
          }
        });
      }
      missingArgument(e) {
        let i = `error: missing required argument '${e}'`;
        this._displayError(1, "commander.missingArgument", i);
      }
      optionMissingArgument(e) {
        let i = `error: option '${e.flags}' argument missing`;
        this._displayError(1, "commander.optionMissingArgument", i);
      }
      missingMandatoryOptionValue(e) {
        let i = `error: required option '${e.flags}' not specified`;
        this._displayError(1, "commander.missingMandatoryOptionValue", i);
      }
      unknownOption(e) {
        if (this._allowUnknownOption)
          return;
        let i = "";
        if (e.startsWith("--") && this._showSuggestionAfterError) {
          let n = [], s = this;
          do {
            let o = s.createHelp().visibleOptions(s).filter((l) => l.long).map((l) => l.long);
            n = n.concat(o), s = s.parent;
          } while (s && !s._enablePositionalOptions);
          i = Ol(e, n);
        }
        let r = `error: unknown option '${e}'${i}`;
        this._displayError(1, "commander.unknownOption", r);
      }
      _excessArguments(e) {
        if (this._allowExcessArguments)
          return;
        let i = this._args.length, r = i === 1 ? "" : "s", s = `error: too many arguments${this.parent ? ` for '${this.name()}'` : ""}. Expected ${i} argument${r} but got ${e.length}.`;
        this._displayError(1, "commander.excessArguments", s);
      }
      unknownCommand() {
        let e = this.args[0], i = "";
        if (this._showSuggestionAfterError) {
          let n = [];
          this.createHelp().visibleCommands(this).forEach((s) => {
            n.push(s.name()), s.alias() && n.push(s.alias());
          }), i = Ol(e, n);
        }
        let r = `error: unknown command '${e}'${i}`;
        this._displayError(1, "commander.unknownCommand", r);
      }
      version(e, i, r) {
        if (e === undefined)
          return this._version;
        this._version = e, i = i || "-V, --version", r = r || "output the version number";
        let n = this.createOption(i, r);
        return this._versionOptionName = n.attributeName(), this.options.push(n), this.on("option:" + n.name(), () => {
          this._outputConfiguration.writeOut(`${e}
`), this._exit(0, "commander.version", e);
        }), this;
      }
      description(e, i) {
        return e === undefined && i === undefined ? this._description : (this._description = e, i && (this._argsDescription = i), this);
      }
      alias(e) {
        if (e === undefined)
          return this._aliases[0];
        let i = this;
        if (this.commands.length !== 0 && this.commands[this.commands.length - 1]._executableHandler && (i = this.commands[this.commands.length - 1]), e === i._name)
          throw new Error("Command alias can't be the same as its name");
        return i._aliases.push(e), this;
      }
      aliases(e) {
        return e === undefined ? this._aliases : (e.forEach((i) => this.alias(i)), this);
      }
      usage(e) {
        if (e === undefined) {
          if (this._usage)
            return this._usage;
          let i = this._args.map((r) => dd(r));
          return [].concat(this.options.length || this._hasHelpOption ? "[options]" : [], this.commands.length ? "[command]" : [], this._args.length ? i : []).join(" ");
        }
        return this._usage = e, this;
      }
      name(e) {
        return e === undefined ? this._name : (this._name = e, this);
      }
      helpInformation(e) {
        let i = this.createHelp();
        return i.helpWidth === undefined && (i.helpWidth = e && e.error ? this._outputConfiguration.getErrHelpWidth() : this._outputConfiguration.getOutHelpWidth()), i.formatHelp(this, i);
      }
      _getHelpContext(e) {
        e = e || {};
        let i = { error: !!e.error }, r;
        return i.error ? r = (n) => this._outputConfiguration.writeErr(n) : r = (n) => this._outputConfiguration.writeOut(n), i.write = e.write || r, i.command = this, i;
      }
      outputHelp(e) {
        let i;
        typeof e == "function" && (i = e, e = undefined);
        let r = this._getHelpContext(e);
        bn(this).reverse().forEach((s) => s.emit("beforeAllHelp", r)), this.emit("beforeHelp", r);
        let n = this.helpInformation(r);
        if (i && (n = i(n), typeof n != "string" && !Buffer.isBuffer(n)))
          throw new Error("outputHelp callback must return a string or a Buffer");
        r.write(n), this.emit(this._helpLongFlag), this.emit("afterHelp", r), bn(this).forEach((s) => s.emit("afterAllHelp", r));
      }
      helpOption(e, i) {
        if (typeof e == "boolean")
          return this._hasHelpOption = e, this;
        this._helpFlags = e || this._helpFlags, this._helpDescription = i || this._helpDescription;
        let r = vd(this._helpFlags);
        return this._helpShortFlag = r.shortFlag, this._helpLongFlag = r.longFlag, this;
      }
      help(e) {
        this.outputHelp(e);
        let i = process.exitCode || 0;
        i === 0 && e && typeof e != "function" && e.error && (i = 1), this._exit(i, "commander.help", "(outputHelp)");
      }
      addHelpText(e, i) {
        let r = ["beforeAll", "before", "after", "afterAll"];
        if (!r.includes(e))
          throw new Error(`Unexpected value for position to addHelpText.
Expecting one of '${r.join("', '")}'`);
        let n = `${e}Help`;
        return this.on(n, (s) => {
          let o;
          typeof i == "function" ? o = i({ error: s.error, command: s.command }) : o = i, o && s.write(`${o}
`);
        }), this;
      }
    };
    function Il(t, e) {
      t._hasHelpOption && e.find((r) => r === t._helpLongFlag || r === t._helpShortFlag) && (t.outputHelp(), t._exit(0, "commander.helpDisplayed", "(outputHelp)"));
    }
    function Tl(t) {
      return t.map((e) => {
        if (!e.startsWith("--inspect"))
          return e;
        let i, r = "127.0.0.1", n = "9229", s;
        return (s = e.match(/^(--inspect(-brk)?)$/)) !== null ? i = s[1] : (s = e.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null ? (i = s[1], /^\d+$/.test(s[3]) ? n = s[3] : r = s[3]) : (s = e.match(/^(--inspect(-brk|-port)?)=([^:]+):(\d+)$/)) !== null && (i = s[1], r = s[3], n = s[4]), i && n !== "0" ? `${i}=${r}:${parseInt(n) + 1}` : e;
      });
    }
    function bn(t) {
      let e = [];
      for (let i = t;i; i = i.parent)
        e.push(i);
      return e;
    }
    Al.Command = wn;
  });
  var Fl = y((it, Pl) => {
    var { Argument: xd } = Ji(), { Command: Bl } = Rl(), { CommanderError: _d, InvalidArgumentError: Ll } = wi(), { Help: yd } = dn(), { Option: bd } = vn();
    it = Pl.exports = new Bl;
    it.program = it;
    it.Argument = xd;
    it.Command = Bl;
    it.CommanderError = _d;
    it.Help = yd;
    it.InvalidArgumentError = Ll;
    it.InvalidOptionArgumentError = Ll;
    it.Option = bd;
  });
  var Ul = y((Nl, Ml) => {
    Nl = Ml.exports = Zt;
    function Zt(t, e) {
      if (this.stream = e.stream || process.stderr, typeof e == "number") {
        var i = e;
        e = {}, e.total = i;
      } else {
        if (e = e || {}, typeof t != "string")
          throw new Error("format required");
        if (typeof e.total != "number")
          throw new Error("total required");
      }
      this.fmt = t, this.curr = e.curr || 0, this.total = e.total, this.width = e.width || this.total, this.clear = e.clear, this.chars = { complete: e.complete || "=", incomplete: e.incomplete || "-", head: e.head || e.complete || "=" }, this.renderThrottle = e.renderThrottle !== 0 ? e.renderThrottle || 16 : 0, this.lastRender = -1 / 0, this.callback = e.callback || function() {
      }, this.tokens = {}, this.lastDraw = "";
    }
    Zt.prototype.tick = function(t, e) {
      if (t !== 0 && (t = t || 1), typeof t == "object" && (e = t, t = 1), e && (this.tokens = e), this.curr == 0 && (this.start = new Date), this.curr += t, this.render(), this.curr >= this.total) {
        this.render(undefined, true), this.complete = true, this.terminate(), this.callback(this);
        return;
      }
    };
    Zt.prototype.render = function(t, e) {
      if (e = e !== undefined ? e : false, t && (this.tokens = t), !!this.stream.isTTY) {
        var i = Date.now(), r = i - this.lastRender;
        if (!(!e && r < this.renderThrottle)) {
          this.lastRender = i;
          var n = this.curr / this.total;
          n = Math.min(Math.max(n, 0), 1);
          var s = Math.floor(n * 100), o, l, a, c = new Date - this.start, u = s == 100 ? 0 : c * (this.total / this.curr - 1), f = this.curr / (c / 1000), h = this.fmt.replace(":current", this.curr).replace(":total", this.total).replace(":elapsed", isNaN(c) ? "0.0" : (c / 1000).toFixed(1)).replace(":eta", isNaN(u) || !isFinite(u) ? "0.0" : (u / 1000).toFixed(1)).replace(":percent", s.toFixed(0) + "%").replace(":rate", Math.round(f)), p = Math.max(0, this.stream.columns - h.replace(":bar", "").length);
          p && process.platform === "win32" && (p = p - 1);
          var d = Math.min(this.width, p);
          if (a = Math.round(d * n), l = Array(Math.max(0, a + 1)).join(this.chars.complete), o = Array(Math.max(0, d - a + 1)).join(this.chars.incomplete), a > 0 && (l = l.slice(0, -1) + this.chars.head), h = h.replace(":bar", l + o), this.tokens)
            for (var m in this.tokens)
              h = h.replace(":" + m, this.tokens[m]);
          this.lastDraw !== h && (this.stream.cursorTo(0), this.stream.write(h), this.stream.clearLine(1), this.lastDraw = h);
        }
      }
    };
    Zt.prototype.update = function(t, e) {
      var i = Math.floor(t * this.total), r = i - this.curr;
      this.tick(r, e);
    };
    Zt.prototype.interrupt = function(t) {
      this.stream.clearLine(), this.stream.cursorTo(0), this.stream.write(t), this.stream.write(`
`), this.stream.write(this.lastDraw);
    };
    Zt.prototype.terminate = function() {
      this.clear ? this.stream.clearLine && (this.stream.clearLine(), this.stream.cursorTo(0)) : this.stream.write(`
`);
    };
  });
  var jl = y((ov, Dl) => {
    Dl.exports = Ul();
  });
  var Hl = y((ql) => {
    var D = ql, { Buffer: Qi } = import.meta.require("buffer"), wd = import.meta.require("os");
    D.toBuffer = function(t, e, i) {
      i = ~~i;
      let r;
      if (this.isV4Format(t))
        r = e || Qi.alloc(i + 4), t.split(/\./g).map((n) => {
          r[i++] = parseInt(n, 10) & 255;
        });
      else if (this.isV6Format(t)) {
        let n = t.split(":", 8), s;
        for (s = 0;s < n.length; s++) {
          let o = this.isV4Format(n[s]), l;
          o && (l = this.toBuffer(n[s]), n[s] = l.slice(0, 2).toString("hex")), l && ++s < 8 && n.splice(s, 0, l.slice(2, 4).toString("hex"));
        }
        if (n[0] === "")
          for (;n.length < 8; )
            n.unshift("0");
        else if (n[n.length - 1] === "")
          for (;n.length < 8; )
            n.push("0");
        else if (n.length < 8) {
          for (s = 0;s < n.length && n[s] !== ""; s++)
            ;
          let o = [s, 1];
          for (s = 9 - n.length;s > 0; s--)
            o.push("0");
          n.splice(...o);
        }
        for (r = e || Qi.alloc(i + 16), s = 0;s < n.length; s++) {
          let o = parseInt(n[s], 16);
          r[i++] = o >> 8 & 255, r[i++] = o & 255;
        }
      }
      if (!r)
        throw Error(`Invalid ip address: ${t}`);
      return r;
    };
    D.toString = function(t, e, i) {
      e = ~~e, i = i || t.length - e;
      let r = [];
      if (i === 4) {
        for (let n = 0;n < i; n++)
          r.push(t[e + n]);
        r = r.join(".");
      } else if (i === 16) {
        for (let n = 0;n < i; n += 2)
          r.push(t.readUInt16BE(e + n).toString(16));
        r = r.join(":"), r = r.replace(/(^|:)0(:0)*:0(:|$)/, "$1::$3"), r = r.replace(/:{3,4}/, "::");
      }
      return r;
    };
    var Ed = /^(\d{1,3}\.){3,3}\d{1,3}$/, Sd = /^(::)?(((\d{1,3}\.){3}(\d{1,3}){1})?([0-9a-f]){0,4}:{0,2}){1,8}(::)?$/i;
    D.isV4Format = function(t) {
      return Ed.test(t);
    };
    D.isV6Format = function(t) {
      return Sd.test(t);
    };
    function Ei(t) {
      return t === 4 ? "ipv4" : t === 6 ? "ipv6" : t ? t.toLowerCase() : "ipv4";
    }
    D.fromPrefixLen = function(t, e) {
      t > 32 ? e = "ipv6" : e = Ei(e);
      let i = 4;
      e === "ipv6" && (i = 16);
      let r = Qi.alloc(i);
      for (let n = 0, s = r.length;n < s; ++n) {
        let o = 8;
        t < 8 && (o = t), t -= o, r[n] = ~(255 >> o) & 255;
      }
      return D.toString(r);
    };
    D.mask = function(t, e) {
      t = D.toBuffer(t), e = D.toBuffer(e);
      let i = Qi.alloc(Math.max(t.length, e.length)), r;
      if (t.length === e.length)
        for (r = 0;r < t.length; r++)
          i[r] = t[r] & e[r];
      else if (e.length === 4)
        for (r = 0;r < e.length; r++)
          i[r] = t[t.length - 4 + r] & e[r];
      else {
        for (r = 0;r < i.length - 6; r++)
          i[r] = 0;
        for (i[10] = 255, i[11] = 255, r = 0;r < t.length; r++)
          i[r + 12] = t[r] & e[r + 12];
        r += 12;
      }
      for (;r < i.length; r++)
        i[r] = 0;
      return D.toString(i);
    };
    D.cidr = function(t) {
      let e = t.split("/"), i = e[0];
      if (e.length !== 2)
        throw new Error(`invalid CIDR subnet: ${i}`);
      let r = D.fromPrefixLen(parseInt(e[1], 10));
      return D.mask(i, r);
    };
    D.subnet = function(t, e) {
      let i = D.toLong(D.mask(t, e)), r = D.toBuffer(e), n = 0;
      for (let o = 0;o < r.length; o++)
        if (r[o] === 255)
          n += 8;
        else {
          let l = r[o] & 255;
          for (;l; )
            l = l << 1 & 255, n++;
        }
      let s = 2 ** (32 - n);
      return { networkAddress: D.fromLong(i), firstAddress: s <= 2 ? D.fromLong(i) : D.fromLong(i + 1), lastAddress: s <= 2 ? D.fromLong(i + s - 1) : D.fromLong(i + s - 2), broadcastAddress: D.fromLong(i + s - 1), subnetMask: e, subnetMaskLength: n, numHosts: s <= 2 ? s : s - 2, length: s, contains(o) {
        return i === D.toLong(D.mask(o, e));
      } };
    };
    D.cidrSubnet = function(t) {
      let e = t.split("/"), i = e[0];
      if (e.length !== 2)
        throw new Error(`invalid CIDR subnet: ${i}`);
      let r = D.fromPrefixLen(parseInt(e[1], 10));
      return D.subnet(i, r);
    };
    D.not = function(t) {
      let e = D.toBuffer(t);
      for (let i = 0;i < e.length; i++)
        e[i] = 255 ^ e[i];
      return D.toString(e);
    };
    D.or = function(t, e) {
      if (t = D.toBuffer(t), e = D.toBuffer(e), t.length === e.length) {
        for (let s = 0;s < t.length; ++s)
          t[s] |= e[s];
        return D.toString(t);
      }
      let i = t, r = e;
      e.length > t.length && (i = e, r = t);
      let n = i.length - r.length;
      for (let s = n;s < i.length; ++s)
        i[s] |= r[s - n];
      return D.toString(i);
    };
    D.isEqual = function(t, e) {
      if (t = D.toBuffer(t), e = D.toBuffer(e), t.length === e.length) {
        for (let r = 0;r < t.length; r++)
          if (t[r] !== e[r])
            return false;
        return true;
      }
      if (e.length === 4) {
        let r = e;
        e = t, t = r;
      }
      for (let r = 0;r < 10; r++)
        if (e[r] !== 0)
          return false;
      let i = e.readUInt16BE(10);
      if (i !== 0 && i !== 65535)
        return false;
      for (let r = 0;r < 4; r++)
        if (t[r] !== e[r + 12])
          return false;
      return true;
    };
    D.isPrivate = function(t) {
      if (D.isLoopback(t))
        return true;
      if (!D.isV6Format(t)) {
        let e = D.normalizeToLong(t);
        if (e < 0)
          throw new Error("invalid ipv4 address");
        t = D.fromLong(e);
      }
      return /^(::f{4}:)?10\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(t) || /^(::f{4}:)?192\.168\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(t) || /^(::f{4}:)?172\.(1[6-9]|2\d|30|31)\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(t) || /^(::f{4}:)?169\.254\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(t) || /^f[cd][0-9a-f]{2}:/i.test(t) || /^fe80:/i.test(t) || /^::1$/.test(t) || /^::$/.test(t);
    };
    D.isPublic = function(t) {
      return !D.isPrivate(t);
    };
    D.isLoopback = function(t) {
      return !/\./.test(t) && !/:/.test(t) && (t = D.fromLong(Number(t))), /^(::f{4}:)?127\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})/.test(t) || /^0177\./.test(t) || /^0x7f\./i.test(t) || /^fe80::1$/i.test(t) || /^::1$/.test(t) || /^::$/.test(t);
    };
    D.loopback = function(t) {
      if (t = Ei(t), t !== "ipv4" && t !== "ipv6")
        throw new Error("family must be ipv4 or ipv6");
      return t === "ipv4" ? "127.0.0.1" : "fe80::1";
    };
    D.address = function(t, e) {
      let i = wd.networkInterfaces();
      if (e = Ei(e), t && t !== "private" && t !== "public") {
        let n = i[t].filter((s) => Ei(s.family) === e);
        return n.length === 0 ? undefined : n[0].address;
      }
      let r = Object.keys(i).map((n) => {
        let s = i[n].filter((o) => (o.family = Ei(o.family), o.family !== e || D.isLoopback(o.address) ? false : t ? t === "public" ? D.isPrivate(o.address) : D.isPublic(o.address) : true));
        return s.length ? s[0].address : undefined;
      }).filter(Boolean);
      return r.length ? r[0] : D.loopback(e);
    };
    D.toLong = function(t) {
      let e = 0;
      return t.split(".").forEach((i) => {
        e <<= 8, e += parseInt(i);
      }), e >>> 0;
    };
    D.fromLong = function(t) {
      return `${t >>> 24}.${t >> 16 & 255}.${t >> 8 & 255}.${t & 255}`;
    };
    D.normalizeToLong = function(t) {
      let e = t.split(".").map((n) => n.startsWith("0x") || n.startsWith("0X") ? parseInt(n, 16) : n.startsWith("0") && n !== "0" && /^[0-7]+$/.test(n) ? parseInt(n, 8) : /^[1-9]\d*$/.test(n) || n === "0" ? parseInt(n, 10) : NaN);
      if (e.some(isNaN))
        return -1;
      let i = 0;
      switch (e.length) {
        case 1:
          i = e[0];
          break;
        case 2:
          if (e[0] > 255 || e[1] > 16777215)
            return -1;
          i = e[0] << 24 | e[1] & 16777215;
          break;
        case 3:
          if (e[0] > 255 || e[1] > 255 || e[2] > 65535)
            return -1;
          i = e[0] << 24 | e[1] << 16 | e[2] & 65535;
          break;
        case 4:
          if (e.some((n) => n > 255))
            return -1;
          i = e[0] << 24 | e[1] << 16 | e[2] << 8 | e[3];
          break;
        default:
          return -1;
      }
      return i >>> 0;
    };
  });
  var zl = y((at) => {
    Object.defineProperty(at, "__esModule", { value: true });
    var Vl = import.meta.require("buffer"), Ct = { INVALID_ENCODING: "Invalid encoding provided. Please specify a valid encoding the internal Node.js Buffer supports.", INVALID_SMARTBUFFER_SIZE: "Invalid size provided. Size must be a valid integer greater than zero.", INVALID_SMARTBUFFER_BUFFER: "Invalid Buffer provided in SmartBufferOptions.", INVALID_SMARTBUFFER_OBJECT: "Invalid SmartBufferOptions object supplied to SmartBuffer constructor or factory methods.", INVALID_OFFSET: "An invalid offset value was provided.", INVALID_OFFSET_NON_NUMBER: "An invalid offset value was provided. A numeric value is required.", INVALID_LENGTH: "An invalid length value was provided.", INVALID_LENGTH_NON_NUMBER: "An invalid length value was provived. A numeric value is required.", INVALID_TARGET_OFFSET: "Target offset is beyond the bounds of the internal SmartBuffer data.", INVALID_TARGET_LENGTH: "Specified length value moves cursor beyong the bounds of the internal SmartBuffer data.", INVALID_READ_BEYOND_BOUNDS: "Attempted to read beyond the bounds of the managed data.", INVALID_WRITE_BEYOND_BOUNDS: "Attempted to write beyond the bounds of the managed data." };
    at.ERRORS = Ct;
    function kd(t) {
      if (!Vl.Buffer.isEncoding(t))
        throw new Error(Ct.INVALID_ENCODING);
    }
    at.checkEncoding = kd;
    function $l(t) {
      return typeof t == "number" && isFinite(t) && Td(t);
    }
    at.isFiniteInteger = $l;
    function Gl(t, e) {
      if (typeof t == "number") {
        if (!$l(t) || t < 0)
          throw new Error(e ? Ct.INVALID_OFFSET : Ct.INVALID_LENGTH);
      } else
        throw new Error(e ? Ct.INVALID_OFFSET_NON_NUMBER : Ct.INVALID_LENGTH_NON_NUMBER);
    }
    function Cd(t) {
      Gl(t, false);
    }
    at.checkLengthValue = Cd;
    function Od(t) {
      Gl(t, true);
    }
    at.checkOffsetValue = Od;
    function Id(t, e) {
      if (t < 0 || t > e.length)
        throw new Error(Ct.INVALID_TARGET_OFFSET);
    }
    at.checkTargetOffset = Id;
    function Td(t) {
      return typeof t == "number" && isFinite(t) && Math.floor(t) === t;
    }
    function Ad(t) {
      if (typeof BigInt == "undefined")
        throw new Error("Platform does not support JS BigInt type.");
      if (typeof Vl.Buffer.prototype[t] == "undefined")
        throw new Error(`Platform does not support Buffer.prototype.${t}.`);
    }
    at.bigIntAndBufferInt64Check = Ad;
  });
  var Yl = y((Sn) => {
    Object.defineProperty(Sn, "__esModule", { value: true });
    var te = zl(), Wl = 4096, Rd = "utf8", En = class t {
      constructor(e) {
        if (this.length = 0, this._encoding = Rd, this._writeOffset = 0, this._readOffset = 0, t.isSmartBufferOptions(e))
          if (e.encoding && (te.checkEncoding(e.encoding), this._encoding = e.encoding), e.size)
            if (te.isFiniteInteger(e.size) && e.size > 0)
              this._buff = Buffer.allocUnsafe(e.size);
            else
              throw new Error(te.ERRORS.INVALID_SMARTBUFFER_SIZE);
          else if (e.buff)
            if (Buffer.isBuffer(e.buff))
              this._buff = e.buff, this.length = e.buff.length;
            else
              throw new Error(te.ERRORS.INVALID_SMARTBUFFER_BUFFER);
          else
            this._buff = Buffer.allocUnsafe(Wl);
        else {
          if (typeof e != "undefined")
            throw new Error(te.ERRORS.INVALID_SMARTBUFFER_OBJECT);
          this._buff = Buffer.allocUnsafe(Wl);
        }
      }
      static fromSize(e, i) {
        return new this({ size: e, encoding: i });
      }
      static fromBuffer(e, i) {
        return new this({ buff: e, encoding: i });
      }
      static fromOptions(e) {
        return new this(e);
      }
      static isSmartBufferOptions(e) {
        let i = e;
        return i && (i.encoding !== undefined || i.size !== undefined || i.buff !== undefined);
      }
      readInt8(e) {
        return this._readNumberValue(Buffer.prototype.readInt8, 1, e);
      }
      readInt16BE(e) {
        return this._readNumberValue(Buffer.prototype.readInt16BE, 2, e);
      }
      readInt16LE(e) {
        return this._readNumberValue(Buffer.prototype.readInt16LE, 2, e);
      }
      readInt32BE(e) {
        return this._readNumberValue(Buffer.prototype.readInt32BE, 4, e);
      }
      readInt32LE(e) {
        return this._readNumberValue(Buffer.prototype.readInt32LE, 4, e);
      }
      readBigInt64BE(e) {
        return te.bigIntAndBufferInt64Check("readBigInt64BE"), this._readNumberValue(Buffer.prototype.readBigInt64BE, 8, e);
      }
      readBigInt64LE(e) {
        return te.bigIntAndBufferInt64Check("readBigInt64LE"), this._readNumberValue(Buffer.prototype.readBigInt64LE, 8, e);
      }
      writeInt8(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeInt8, 1, e, i), this;
      }
      insertInt8(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeInt8, 1, e, i);
      }
      writeInt16BE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeInt16BE, 2, e, i);
      }
      insertInt16BE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeInt16BE, 2, e, i);
      }
      writeInt16LE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeInt16LE, 2, e, i);
      }
      insertInt16LE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeInt16LE, 2, e, i);
      }
      writeInt32BE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeInt32BE, 4, e, i);
      }
      insertInt32BE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeInt32BE, 4, e, i);
      }
      writeInt32LE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeInt32LE, 4, e, i);
      }
      insertInt32LE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeInt32LE, 4, e, i);
      }
      writeBigInt64BE(e, i) {
        return te.bigIntAndBufferInt64Check("writeBigInt64BE"), this._writeNumberValue(Buffer.prototype.writeBigInt64BE, 8, e, i);
      }
      insertBigInt64BE(e, i) {
        return te.bigIntAndBufferInt64Check("writeBigInt64BE"), this._insertNumberValue(Buffer.prototype.writeBigInt64BE, 8, e, i);
      }
      writeBigInt64LE(e, i) {
        return te.bigIntAndBufferInt64Check("writeBigInt64LE"), this._writeNumberValue(Buffer.prototype.writeBigInt64LE, 8, e, i);
      }
      insertBigInt64LE(e, i) {
        return te.bigIntAndBufferInt64Check("writeBigInt64LE"), this._insertNumberValue(Buffer.prototype.writeBigInt64LE, 8, e, i);
      }
      readUInt8(e) {
        return this._readNumberValue(Buffer.prototype.readUInt8, 1, e);
      }
      readUInt16BE(e) {
        return this._readNumberValue(Buffer.prototype.readUInt16BE, 2, e);
      }
      readUInt16LE(e) {
        return this._readNumberValue(Buffer.prototype.readUInt16LE, 2, e);
      }
      readUInt32BE(e) {
        return this._readNumberValue(Buffer.prototype.readUInt32BE, 4, e);
      }
      readUInt32LE(e) {
        return this._readNumberValue(Buffer.prototype.readUInt32LE, 4, e);
      }
      readBigUInt64BE(e) {
        return te.bigIntAndBufferInt64Check("readBigUInt64BE"), this._readNumberValue(Buffer.prototype.readBigUInt64BE, 8, e);
      }
      readBigUInt64LE(e) {
        return te.bigIntAndBufferInt64Check("readBigUInt64LE"), this._readNumberValue(Buffer.prototype.readBigUInt64LE, 8, e);
      }
      writeUInt8(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeUInt8, 1, e, i);
      }
      insertUInt8(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeUInt8, 1, e, i);
      }
      writeUInt16BE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeUInt16BE, 2, e, i);
      }
      insertUInt16BE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeUInt16BE, 2, e, i);
      }
      writeUInt16LE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeUInt16LE, 2, e, i);
      }
      insertUInt16LE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeUInt16LE, 2, e, i);
      }
      writeUInt32BE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeUInt32BE, 4, e, i);
      }
      insertUInt32BE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeUInt32BE, 4, e, i);
      }
      writeUInt32LE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeUInt32LE, 4, e, i);
      }
      insertUInt32LE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeUInt32LE, 4, e, i);
      }
      writeBigUInt64BE(e, i) {
        return te.bigIntAndBufferInt64Check("writeBigUInt64BE"), this._writeNumberValue(Buffer.prototype.writeBigUInt64BE, 8, e, i);
      }
      insertBigUInt64BE(e, i) {
        return te.bigIntAndBufferInt64Check("writeBigUInt64BE"), this._insertNumberValue(Buffer.prototype.writeBigUInt64BE, 8, e, i);
      }
      writeBigUInt64LE(e, i) {
        return te.bigIntAndBufferInt64Check("writeBigUInt64LE"), this._writeNumberValue(Buffer.prototype.writeBigUInt64LE, 8, e, i);
      }
      insertBigUInt64LE(e, i) {
        return te.bigIntAndBufferInt64Check("writeBigUInt64LE"), this._insertNumberValue(Buffer.prototype.writeBigUInt64LE, 8, e, i);
      }
      readFloatBE(e) {
        return this._readNumberValue(Buffer.prototype.readFloatBE, 4, e);
      }
      readFloatLE(e) {
        return this._readNumberValue(Buffer.prototype.readFloatLE, 4, e);
      }
      writeFloatBE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeFloatBE, 4, e, i);
      }
      insertFloatBE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeFloatBE, 4, e, i);
      }
      writeFloatLE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeFloatLE, 4, e, i);
      }
      insertFloatLE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeFloatLE, 4, e, i);
      }
      readDoubleBE(e) {
        return this._readNumberValue(Buffer.prototype.readDoubleBE, 8, e);
      }
      readDoubleLE(e) {
        return this._readNumberValue(Buffer.prototype.readDoubleLE, 8, e);
      }
      writeDoubleBE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeDoubleBE, 8, e, i);
      }
      insertDoubleBE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeDoubleBE, 8, e, i);
      }
      writeDoubleLE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeDoubleLE, 8, e, i);
      }
      insertDoubleLE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeDoubleLE, 8, e, i);
      }
      readString(e, i) {
        let r;
        typeof e == "number" ? (te.checkLengthValue(e), r = Math.min(e, this.length - this._readOffset)) : (i = e, r = this.length - this._readOffset), typeof i != "undefined" && te.checkEncoding(i);
        let n = this._buff.slice(this._readOffset, this._readOffset + r).toString(i || this._encoding);
        return this._readOffset += r, n;
      }
      insertString(e, i, r) {
        return te.checkOffsetValue(i), this._handleString(e, true, i, r);
      }
      writeString(e, i, r) {
        return this._handleString(e, false, i, r);
      }
      readStringNT(e) {
        typeof e != "undefined" && te.checkEncoding(e);
        let i = this.length;
        for (let n = this._readOffset;n < this.length; n++)
          if (this._buff[n] === 0) {
            i = n;
            break;
          }
        let r = this._buff.slice(this._readOffset, i);
        return this._readOffset = i + 1, r.toString(e || this._encoding);
      }
      insertStringNT(e, i, r) {
        return te.checkOffsetValue(i), this.insertString(e, i, r), this.insertUInt8(0, i + e.length), this;
      }
      writeStringNT(e, i, r) {
        return this.writeString(e, i, r), this.writeUInt8(0, typeof i == "number" ? i + e.length : this.writeOffset), this;
      }
      readBuffer(e) {
        typeof e != "undefined" && te.checkLengthValue(e);
        let i = typeof e == "number" ? e : this.length, r = Math.min(this.length, this._readOffset + i), n = this._buff.slice(this._readOffset, r);
        return this._readOffset = r, n;
      }
      insertBuffer(e, i) {
        return te.checkOffsetValue(i), this._handleBuffer(e, true, i);
      }
      writeBuffer(e, i) {
        return this._handleBuffer(e, false, i);
      }
      readBufferNT() {
        let e = this.length;
        for (let r = this._readOffset;r < this.length; r++)
          if (this._buff[r] === 0) {
            e = r;
            break;
          }
        let i = this._buff.slice(this._readOffset, e);
        return this._readOffset = e + 1, i;
      }
      insertBufferNT(e, i) {
        return te.checkOffsetValue(i), this.insertBuffer(e, i), this.insertUInt8(0, i + e.length), this;
      }
      writeBufferNT(e, i) {
        return typeof i != "undefined" && te.checkOffsetValue(i), this.writeBuffer(e, i), this.writeUInt8(0, typeof i == "number" ? i + e.length : this._writeOffset), this;
      }
      clear() {
        return this._writeOffset = 0, this._readOffset = 0, this.length = 0, this;
      }
      remaining() {
        return this.length - this._readOffset;
      }
      get readOffset() {
        return this._readOffset;
      }
      set readOffset(e) {
        te.checkOffsetValue(e), te.checkTargetOffset(e, this), this._readOffset = e;
      }
      get writeOffset() {
        return this._writeOffset;
      }
      set writeOffset(e) {
        te.checkOffsetValue(e), te.checkTargetOffset(e, this), this._writeOffset = e;
      }
      get encoding() {
        return this._encoding;
      }
      set encoding(e) {
        te.checkEncoding(e), this._encoding = e;
      }
      get internalBuffer() {
        return this._buff;
      }
      toBuffer() {
        return this._buff.slice(0, this.length);
      }
      toString(e) {
        let i = typeof e == "string" ? e : this._encoding;
        return te.checkEncoding(i), this._buff.toString(i, 0, this.length);
      }
      destroy() {
        return this.clear(), this;
      }
      _handleString(e, i, r, n) {
        let s = this._writeOffset, o = this._encoding;
        typeof r == "number" ? s = r : typeof r == "string" && (te.checkEncoding(r), o = r), typeof n == "string" && (te.checkEncoding(n), o = n);
        let l = Buffer.byteLength(e, o);
        return i ? this.ensureInsertable(l, s) : this._ensureWriteable(l, s), this._buff.write(e, s, l, o), i ? this._writeOffset += l : typeof r == "number" ? this._writeOffset = Math.max(this._writeOffset, s + l) : this._writeOffset += l, this;
      }
      _handleBuffer(e, i, r) {
        let n = typeof r == "number" ? r : this._writeOffset;
        return i ? this.ensureInsertable(e.length, n) : this._ensureWriteable(e.length, n), e.copy(this._buff, n), i ? this._writeOffset += e.length : typeof r == "number" ? this._writeOffset = Math.max(this._writeOffset, n + e.length) : this._writeOffset += e.length, this;
      }
      ensureReadable(e, i) {
        let r = this._readOffset;
        if (typeof i != "undefined" && (te.checkOffsetValue(i), r = i), r < 0 || r + e > this.length)
          throw new Error(te.ERRORS.INVALID_READ_BEYOND_BOUNDS);
      }
      ensureInsertable(e, i) {
        te.checkOffsetValue(i), this._ensureCapacity(this.length + e), i < this.length && this._buff.copy(this._buff, i + e, i, this._buff.length), i + e > this.length ? this.length = i + e : this.length += e;
      }
      _ensureWriteable(e, i) {
        let r = typeof i == "number" ? i : this._writeOffset;
        this._ensureCapacity(r + e), r + e > this.length && (this.length = r + e);
      }
      _ensureCapacity(e) {
        let i = this._buff.length;
        if (e > i) {
          let r = this._buff, n = i * 3 / 2 + 1;
          n < e && (n = e), this._buff = Buffer.allocUnsafe(n), r.copy(this._buff, 0, 0, i);
        }
      }
      _readNumberValue(e, i, r) {
        this.ensureReadable(i, r);
        let n = e.call(this._buff, typeof r == "number" ? r : this._readOffset);
        return typeof r == "undefined" && (this._readOffset += i), n;
      }
      _insertNumberValue(e, i, r, n) {
        return te.checkOffsetValue(n), this.ensureInsertable(i, n), e.call(this._buff, r, n), this._writeOffset += i, this;
      }
      _writeNumberValue(e, i, r, n) {
        if (typeof n == "number") {
          if (n < 0)
            throw new Error(te.ERRORS.INVALID_WRITE_BEYOND_BOUNDS);
          te.checkOffsetValue(n);
        }
        let s = typeof n == "number" ? n : this._writeOffset;
        return this._ensureWriteable(i, s), e.call(this._buff, r, s), typeof n == "number" ? this._writeOffset = Math.max(this._writeOffset, s + i) : this._writeOffset += i, this;
      }
    };
    Sn.SmartBuffer = En;
  });
  var Rn = y((_e) => {
    Object.defineProperty(_e, "__esModule", { value: true });
    _e.SOCKS5_NO_ACCEPTABLE_AUTH = _e.SOCKS5_CUSTOM_AUTH_END = _e.SOCKS5_CUSTOM_AUTH_START = _e.SOCKS_INCOMING_PACKET_SIZES = _e.SocksClientState = _e.Socks5Response = _e.Socks5HostType = _e.Socks5Auth = _e.Socks4Response = _e.SocksCommand = _e.ERRORS = _e.DEFAULT_TIMEOUT = undefined;
    var Bd = 30000;
    _e.DEFAULT_TIMEOUT = Bd;
    var Ld = { InvalidSocksCommand: "An invalid SOCKS command was provided. Valid options are connect, bind, and associate.", InvalidSocksCommandForOperation: "An invalid SOCKS command was provided. Only a subset of commands are supported for this operation.", InvalidSocksCommandChain: "An invalid SOCKS command was provided. Chaining currently only supports the connect command.", InvalidSocksClientOptionsDestination: "An invalid destination host was provided.", InvalidSocksClientOptionsExistingSocket: "An invalid existing socket was provided. This should be an instance of stream.Duplex.", InvalidSocksClientOptionsProxy: "Invalid SOCKS proxy details were provided.", InvalidSocksClientOptionsTimeout: "An invalid timeout value was provided. Please enter a value above 0 (in ms).", InvalidSocksClientOptionsProxiesLength: "At least two socks proxies must be provided for chaining.", InvalidSocksClientOptionsCustomAuthRange: "Custom auth must be a value between 0x80 and 0xFE.", InvalidSocksClientOptionsCustomAuthOptions: "When a custom_auth_method is provided, custom_auth_request_handler, custom_auth_response_size, and custom_auth_response_handler must also be provided and valid.", NegotiationError: "Negotiation error", SocketClosed: "Socket closed", ProxyConnectionTimedOut: "Proxy connection timed out", InternalError: "SocksClient internal error (this should not happen)", InvalidSocks4HandshakeResponse: "Received invalid Socks4 handshake response", Socks4ProxyRejectedConnection: "Socks4 Proxy rejected connection", InvalidSocks4IncomingConnectionResponse: "Socks4 invalid incoming connection response", Socks4ProxyRejectedIncomingBoundConnection: "Socks4 Proxy rejected incoming bound connection", InvalidSocks5InitialHandshakeResponse: "Received invalid Socks5 initial handshake response", InvalidSocks5IntiailHandshakeSocksVersion: "Received invalid Socks5 initial handshake (invalid socks version)", InvalidSocks5InitialHandshakeNoAcceptedAuthType: "Received invalid Socks5 initial handshake (no accepted authentication type)", InvalidSocks5InitialHandshakeUnknownAuthType: "Received invalid Socks5 initial handshake (unknown authentication type)", Socks5AuthenticationFailed: "Socks5 Authentication failed", InvalidSocks5FinalHandshake: "Received invalid Socks5 final handshake response", InvalidSocks5FinalHandshakeRejected: "Socks5 proxy rejected connection", InvalidSocks5IncomingConnectionResponse: "Received invalid Socks5 incoming connection response", Socks5ProxyRejectedIncomingBoundConnection: "Socks5 Proxy rejected incoming bound connection" };
    _e.ERRORS = Ld;
    var Pd = { Socks5InitialHandshakeResponse: 2, Socks5UserPassAuthenticationResponse: 2, Socks5ResponseHeader: 5, Socks5ResponseIPv4: 10, Socks5ResponseIPv6: 22, Socks5ResponseHostname: (t) => t + 7, Socks4Response: 8 };
    _e.SOCKS_INCOMING_PACKET_SIZES = Pd;
    var kn;
    (function(t) {
      t[t.connect = 1] = "connect", t[t.bind = 2] = "bind", t[t.associate = 3] = "associate";
    })(kn || (kn = {}));
    _e.SocksCommand = kn;
    var Cn;
    (function(t) {
      t[t.Granted = 90] = "Granted", t[t.Failed = 91] = "Failed", t[t.Rejected = 92] = "Rejected", t[t.RejectedIdent = 93] = "RejectedIdent";
    })(Cn || (Cn = {}));
    _e.Socks4Response = Cn;
    var On;
    (function(t) {
      t[t.NoAuth = 0] = "NoAuth", t[t.GSSApi = 1] = "GSSApi", t[t.UserPass = 2] = "UserPass";
    })(On || (On = {}));
    _e.Socks5Auth = On;
    var Fd = 128;
    _e.SOCKS5_CUSTOM_AUTH_START = Fd;
    var Nd = 254;
    _e.SOCKS5_CUSTOM_AUTH_END = Nd;
    var Md = 255;
    _e.SOCKS5_NO_ACCEPTABLE_AUTH = Md;
    var In;
    (function(t) {
      t[t.Granted = 0] = "Granted", t[t.Failure = 1] = "Failure", t[t.NotAllowed = 2] = "NotAllowed", t[t.NetworkUnreachable = 3] = "NetworkUnreachable", t[t.HostUnreachable = 4] = "HostUnreachable", t[t.ConnectionRefused = 5] = "ConnectionRefused", t[t.TTLExpired = 6] = "TTLExpired", t[t.CommandNotSupported = 7] = "CommandNotSupported", t[t.AddressNotSupported = 8] = "AddressNotSupported";
    })(In || (In = {}));
    _e.Socks5Response = In;
    var Tn;
    (function(t) {
      t[t.IPv4 = 1] = "IPv4", t[t.Hostname = 3] = "Hostname", t[t.IPv6 = 4] = "IPv6";
    })(Tn || (Tn = {}));
    _e.Socks5HostType = Tn;
    var An;
    (function(t) {
      t[t.Created = 0] = "Created", t[t.Connecting = 1] = "Connecting", t[t.Connected = 2] = "Connected", t[t.SentInitialHandshake = 3] = "SentInitialHandshake", t[t.ReceivedInitialHandshakeResponse = 4] = "ReceivedInitialHandshakeResponse", t[t.SentAuthentication = 5] = "SentAuthentication", t[t.ReceivedAuthenticationResponse = 6] = "ReceivedAuthenticationResponse", t[t.SentFinalHandshake = 7] = "SentFinalHandshake", t[t.ReceivedFinalResponse = 8] = "ReceivedFinalResponse", t[t.BoundWaitingForConnection = 9] = "BoundWaitingForConnection", t[t.Established = 10] = "Established", t[t.Disconnected = 11] = "Disconnected", t[t.Error = 99] = "Error";
    })(An || (An = {}));
    _e.SocksClientState = An;
  });
  var Ln = y((Xt) => {
    Object.defineProperty(Xt, "__esModule", { value: true });
    Xt.shuffleArray = Xt.SocksClientError = undefined;
    var Bn = class extends Error {
      constructor(e, i) {
        super(e), this.options = i;
      }
    };
    Xt.SocksClientError = Bn;
    function Ud(t) {
      for (let e = t.length - 1;e > 0; e--) {
        let i = Math.floor(Math.random() * (e + 1));
        [t[e], t[i]] = [t[i], t[e]];
      }
    }
    Xt.shuffleArray = Ud;
  });
  var Ql = y((Jt) => {
    Object.defineProperty(Jt, "__esModule", { value: true });
    Jt.validateSocksClientChainOptions = Jt.validateSocksClientOptions = undefined;
    var He = Ln(), Re = Rn(), Dd = import.meta.require("stream");
    function jd(t, e = ["connect", "bind", "associate"]) {
      if (!Re.SocksCommand[t.command])
        throw new He.SocksClientError(Re.ERRORS.InvalidSocksCommand, t);
      if (e.indexOf(t.command) === -1)
        throw new He.SocksClientError(Re.ERRORS.InvalidSocksCommandForOperation, t);
      if (!Zl(t.destination))
        throw new He.SocksClientError(Re.ERRORS.InvalidSocksClientOptionsDestination, t);
      if (!Xl(t.proxy))
        throw new He.SocksClientError(Re.ERRORS.InvalidSocksClientOptionsProxy, t);
      if (Kl(t.proxy, t), t.timeout && !Jl(t.timeout))
        throw new He.SocksClientError(Re.ERRORS.InvalidSocksClientOptionsTimeout, t);
      if (t.existing_socket && !(t.existing_socket instanceof Dd.Duplex))
        throw new He.SocksClientError(Re.ERRORS.InvalidSocksClientOptionsExistingSocket, t);
    }
    Jt.validateSocksClientOptions = jd;
    function qd(t) {
      if (t.command !== "connect")
        throw new He.SocksClientError(Re.ERRORS.InvalidSocksCommandChain, t);
      if (!Zl(t.destination))
        throw new He.SocksClientError(Re.ERRORS.InvalidSocksClientOptionsDestination, t);
      if (!(t.proxies && Array.isArray(t.proxies) && t.proxies.length >= 2))
        throw new He.SocksClientError(Re.ERRORS.InvalidSocksClientOptionsProxiesLength, t);
      if (t.proxies.forEach((e) => {
        if (!Xl(e))
          throw new He.SocksClientError(Re.ERRORS.InvalidSocksClientOptionsProxy, t);
        Kl(e, t);
      }), t.timeout && !Jl(t.timeout))
        throw new He.SocksClientError(Re.ERRORS.InvalidSocksClientOptionsTimeout, t);
    }
    Jt.validateSocksClientChainOptions = qd;
    function Kl(t, e) {
      if (t.custom_auth_method !== undefined) {
        if (t.custom_auth_method < Re.SOCKS5_CUSTOM_AUTH_START || t.custom_auth_method > Re.SOCKS5_CUSTOM_AUTH_END)
          throw new He.SocksClientError(Re.ERRORS.InvalidSocksClientOptionsCustomAuthRange, e);
        if (t.custom_auth_request_handler === undefined || typeof t.custom_auth_request_handler != "function")
          throw new He.SocksClientError(Re.ERRORS.InvalidSocksClientOptionsCustomAuthOptions, e);
        if (t.custom_auth_response_size === undefined)
          throw new He.SocksClientError(Re.ERRORS.InvalidSocksClientOptionsCustomAuthOptions, e);
        if (t.custom_auth_response_handler === undefined || typeof t.custom_auth_response_handler != "function")
          throw new He.SocksClientError(Re.ERRORS.InvalidSocksClientOptionsCustomAuthOptions, e);
      }
    }
    function Zl(t) {
      return t && typeof t.host == "string" && typeof t.port == "number" && t.port >= 0 && t.port <= 65535;
    }
    function Xl(t) {
      return t && (typeof t.host == "string" || typeof t.ipaddress == "string") && typeof t.port == "number" && t.port >= 0 && t.port <= 65535 && (t.type === 4 || t.type === 5);
    }
    function Jl(t) {
      return typeof t == "number" && t > 0;
    }
  });
  var ec = y((er) => {
    Object.defineProperty(er, "__esModule", { value: true });
    er.ReceiveBuffer = undefined;
    var Pn = class {
      constructor(e = 4096) {
        this.buffer = Buffer.allocUnsafe(e), this.offset = 0, this.originalSize = e;
      }
      get length() {
        return this.offset;
      }
      append(e) {
        if (!Buffer.isBuffer(e))
          throw new Error("Attempted to append a non-buffer instance to ReceiveBuffer.");
        if (this.offset + e.length >= this.buffer.length) {
          let i = this.buffer;
          this.buffer = Buffer.allocUnsafe(Math.max(this.buffer.length + this.originalSize, this.buffer.length + e.length)), i.copy(this.buffer);
        }
        return e.copy(this.buffer, this.offset), this.offset += e.length;
      }
      peek(e) {
        if (e > this.offset)
          throw new Error("Attempted to read beyond the bounds of the managed internal data.");
        return this.buffer.slice(0, e);
      }
      get(e) {
        if (e > this.offset)
          throw new Error("Attempted to read beyond the bounds of the managed internal data.");
        let i = Buffer.allocUnsafe(e);
        return this.buffer.slice(0, e).copy(i), this.buffer.copyWithin(0, e, e + this.offset - e), this.offset -= e, i;
      }
    };
    er.ReceiveBuffer = Pn;
  });
  var tc = y((dt) => {
    var Qt = dt && dt.__awaiter || function(t, e, i, r) {
      function n(s) {
        return s instanceof i ? s : new i(function(o) {
          o(s);
        });
      }
      return new (i || (i = Promise))(function(s, o) {
        function l(u) {
          try {
            c(r.next(u));
          } catch (f) {
            o(f);
          }
        }
        function a(u) {
          try {
            c(r.throw(u));
          } catch (f) {
            o(f);
          }
        }
        function c(u) {
          u.done ? s(u.value) : n(u.value).then(l, a);
        }
        c((r = r.apply(t, e || [])).next());
      });
    };
    Object.defineProperty(dt, "__esModule", { value: true });
    dt.SocksClientError = dt.SocksClient = undefined;
    var Hd = import.meta.require("events"), ei = import.meta.require("net"), ze = Hl(), Ve = Yl(), S = Rn(), Fn = Ql(), Vd = ec(), Nn = Ln();
    Object.defineProperty(dt, "SocksClientError", { enumerable: true, get: function() {
      return Nn.SocksClientError;
    } });
    var Mn = class t extends Hd.EventEmitter {
      constructor(e) {
        super(), this.options = Object.assign({}, e), (0, Fn.validateSocksClientOptions)(e), this.setState(S.SocksClientState.Created);
      }
      static createConnection(e, i) {
        return new Promise((r, n) => {
          try {
            (0, Fn.validateSocksClientOptions)(e, ["connect"]);
          } catch (o) {
            return typeof i == "function" ? (i(o), r(o)) : n(o);
          }
          let s = new t(e);
          s.connect(e.existing_socket), s.once("established", (o) => {
            s.removeAllListeners(), typeof i == "function" && i(null, o), r(o);
          }), s.once("error", (o) => {
            s.removeAllListeners(), typeof i == "function" ? (i(o), r(o)) : n(o);
          });
        });
      }
      static createConnectionChain(e, i) {
        return new Promise((r, n) => Qt(this, undefined, undefined, function* () {
          try {
            (0, Fn.validateSocksClientChainOptions)(e);
          } catch (o) {
            return typeof i == "function" ? (i(o), r(o)) : n(o);
          }
          let s;
          e.randomizeChain && (0, Nn.shuffleArray)(e.proxies);
          try {
            for (let o = 0;o < e.proxies.length; o++) {
              let l = e.proxies[o], a = o === e.proxies.length - 1 ? e.destination : { host: e.proxies[o + 1].host || e.proxies[o + 1].ipaddress, port: e.proxies[o + 1].port }, c = yield t.createConnection({ command: "connect", proxy: l, destination: a });
              s || (s = c.socket);
            }
            typeof i == "function" ? (i(null, { socket: s }), r({ socket: s })) : r({ socket: s });
          } catch (o) {
            typeof i == "function" ? (i(o), r(o)) : n(o);
          }
        }));
      }
      static createUDPFrame(e) {
        let i = new Ve.SmartBuffer;
        return i.writeUInt16BE(0), i.writeUInt8(e.frameNumber || 0), ei.isIPv4(e.remoteHost.host) ? (i.writeUInt8(S.Socks5HostType.IPv4), i.writeUInt32BE(ze.toLong(e.remoteHost.host))) : ei.isIPv6(e.remoteHost.host) ? (i.writeUInt8(S.Socks5HostType.IPv6), i.writeBuffer(ze.toBuffer(e.remoteHost.host))) : (i.writeUInt8(S.Socks5HostType.Hostname), i.writeUInt8(Buffer.byteLength(e.remoteHost.host)), i.writeString(e.remoteHost.host)), i.writeUInt16BE(e.remoteHost.port), i.writeBuffer(e.data), i.toBuffer();
      }
      static parseUDPFrame(e) {
        let i = Ve.SmartBuffer.fromBuffer(e);
        i.readOffset = 2;
        let r = i.readUInt8(), n = i.readUInt8(), s;
        n === S.Socks5HostType.IPv4 ? s = ze.fromLong(i.readUInt32BE()) : n === S.Socks5HostType.IPv6 ? s = ze.toString(i.readBuffer(16)) : s = i.readString(i.readUInt8());
        let o = i.readUInt16BE();
        return { frameNumber: r, remoteHost: { host: s, port: o }, data: i.readBuffer() };
      }
      setState(e) {
        this.state !== S.SocksClientState.Error && (this.state = e);
      }
      connect(e) {
        this.onDataReceived = (r) => this.onDataReceivedHandler(r), this.onClose = () => this.onCloseHandler(), this.onError = (r) => this.onErrorHandler(r), this.onConnect = () => this.onConnectHandler();
        let i = setTimeout(() => this.onEstablishedTimeout(), this.options.timeout || S.DEFAULT_TIMEOUT);
        i.unref && typeof i.unref == "function" && i.unref(), e ? this.socket = e : this.socket = new ei.Socket, this.socket.once("close", this.onClose), this.socket.once("error", this.onError), this.socket.once("connect", this.onConnect), this.socket.on("data", this.onDataReceived), this.setState(S.SocksClientState.Connecting), this.receiveBuffer = new Vd.ReceiveBuffer, e ? this.socket.emit("connect") : (this.socket.connect(this.getSocketOptions()), this.options.set_tcp_nodelay !== undefined && this.options.set_tcp_nodelay !== null && this.socket.setNoDelay(!!this.options.set_tcp_nodelay)), this.prependOnceListener("established", (r) => {
          setImmediate(() => {
            if (this.receiveBuffer.length > 0) {
              let n = this.receiveBuffer.get(this.receiveBuffer.length);
              r.socket.emit("data", n);
            }
            r.socket.resume();
          });
        });
      }
      getSocketOptions() {
        return Object.assign(Object.assign({}, this.options.socket_options), { host: this.options.proxy.host || this.options.proxy.ipaddress, port: this.options.proxy.port });
      }
      onEstablishedTimeout() {
        this.state !== S.SocksClientState.Established && this.state !== S.SocksClientState.BoundWaitingForConnection && this.closeSocket(S.ERRORS.ProxyConnectionTimedOut);
      }
      onConnectHandler() {
        this.setState(S.SocksClientState.Connected), this.options.proxy.type === 4 ? this.sendSocks4InitialHandshake() : this.sendSocks5InitialHandshake(), this.setState(S.SocksClientState.SentInitialHandshake);
      }
      onDataReceivedHandler(e) {
        this.receiveBuffer.append(e), this.processData();
      }
      processData() {
        for (;this.state !== S.SocksClientState.Established && this.state !== S.SocksClientState.Error && this.receiveBuffer.length >= this.nextRequiredPacketBufferSize; )
          if (this.state === S.SocksClientState.SentInitialHandshake)
            this.options.proxy.type === 4 ? this.handleSocks4FinalHandshakeResponse() : this.handleInitialSocks5HandshakeResponse();
          else if (this.state === S.SocksClientState.SentAuthentication)
            this.handleInitialSocks5AuthenticationHandshakeResponse();
          else if (this.state === S.SocksClientState.SentFinalHandshake)
            this.handleSocks5FinalHandshakeResponse();
          else if (this.state === S.SocksClientState.BoundWaitingForConnection)
            this.options.proxy.type === 4 ? this.handleSocks4IncomingConnectionResponse() : this.handleSocks5IncomingConnectionResponse();
          else {
            this.closeSocket(S.ERRORS.InternalError);
            break;
          }
      }
      onCloseHandler() {
        this.closeSocket(S.ERRORS.SocketClosed);
      }
      onErrorHandler(e) {
        this.closeSocket(e.message);
      }
      removeInternalSocketHandlers() {
        this.socket.pause(), this.socket.removeListener("data", this.onDataReceived), this.socket.removeListener("close", this.onClose), this.socket.removeListener("error", this.onError), this.socket.removeListener("connect", this.onConnect);
      }
      closeSocket(e) {
        this.state !== S.SocksClientState.Error && (this.setState(S.SocksClientState.Error), this.socket.destroy(), this.removeInternalSocketHandlers(), this.emit("error", new Nn.SocksClientError(e, this.options)));
      }
      sendSocks4InitialHandshake() {
        let e = this.options.proxy.userId || "", i = new Ve.SmartBuffer;
        i.writeUInt8(4), i.writeUInt8(S.SocksCommand[this.options.command]), i.writeUInt16BE(this.options.destination.port), ei.isIPv4(this.options.destination.host) ? (i.writeBuffer(ze.toBuffer(this.options.destination.host)), i.writeStringNT(e)) : (i.writeUInt8(0), i.writeUInt8(0), i.writeUInt8(0), i.writeUInt8(1), i.writeStringNT(e), i.writeStringNT(this.options.destination.host)), this.nextRequiredPacketBufferSize = S.SOCKS_INCOMING_PACKET_SIZES.Socks4Response, this.socket.write(i.toBuffer());
      }
      handleSocks4FinalHandshakeResponse() {
        let e = this.receiveBuffer.get(8);
        if (e[1] !== S.Socks4Response.Granted)
          this.closeSocket(`${S.ERRORS.Socks4ProxyRejectedConnection} - (${S.Socks4Response[e[1]]})`);
        else if (S.SocksCommand[this.options.command] === S.SocksCommand.bind) {
          let i = Ve.SmartBuffer.fromBuffer(e);
          i.readOffset = 2;
          let r = { port: i.readUInt16BE(), host: ze.fromLong(i.readUInt32BE()) };
          r.host === "0.0.0.0" && (r.host = this.options.proxy.ipaddress), this.setState(S.SocksClientState.BoundWaitingForConnection), this.emit("bound", { remoteHost: r, socket: this.socket });
        } else
          this.setState(S.SocksClientState.Established), this.removeInternalSocketHandlers(), this.emit("established", { socket: this.socket });
      }
      handleSocks4IncomingConnectionResponse() {
        let e = this.receiveBuffer.get(8);
        if (e[1] !== S.Socks4Response.Granted)
          this.closeSocket(`${S.ERRORS.Socks4ProxyRejectedIncomingBoundConnection} - (${S.Socks4Response[e[1]]})`);
        else {
          let i = Ve.SmartBuffer.fromBuffer(e);
          i.readOffset = 2;
          let r = { port: i.readUInt16BE(), host: ze.fromLong(i.readUInt32BE()) };
          this.setState(S.SocksClientState.Established), this.removeInternalSocketHandlers(), this.emit("established", { remoteHost: r, socket: this.socket });
        }
      }
      sendSocks5InitialHandshake() {
        let e = new Ve.SmartBuffer, i = [S.Socks5Auth.NoAuth];
        (this.options.proxy.userId || this.options.proxy.password) && i.push(S.Socks5Auth.UserPass), this.options.proxy.custom_auth_method !== undefined && i.push(this.options.proxy.custom_auth_method), e.writeUInt8(5), e.writeUInt8(i.length);
        for (let r of i)
          e.writeUInt8(r);
        this.nextRequiredPacketBufferSize = S.SOCKS_INCOMING_PACKET_SIZES.Socks5InitialHandshakeResponse, this.socket.write(e.toBuffer()), this.setState(S.SocksClientState.SentInitialHandshake);
      }
      handleInitialSocks5HandshakeResponse() {
        let e = this.receiveBuffer.get(2);
        e[0] !== 5 ? this.closeSocket(S.ERRORS.InvalidSocks5IntiailHandshakeSocksVersion) : e[1] === S.SOCKS5_NO_ACCEPTABLE_AUTH ? this.closeSocket(S.ERRORS.InvalidSocks5InitialHandshakeNoAcceptedAuthType) : e[1] === S.Socks5Auth.NoAuth ? (this.socks5ChosenAuthType = S.Socks5Auth.NoAuth, this.sendSocks5CommandRequest()) : e[1] === S.Socks5Auth.UserPass ? (this.socks5ChosenAuthType = S.Socks5Auth.UserPass, this.sendSocks5UserPassAuthentication()) : e[1] === this.options.proxy.custom_auth_method ? (this.socks5ChosenAuthType = this.options.proxy.custom_auth_method, this.sendSocks5CustomAuthentication()) : this.closeSocket(S.ERRORS.InvalidSocks5InitialHandshakeUnknownAuthType);
      }
      sendSocks5UserPassAuthentication() {
        let e = this.options.proxy.userId || "", i = this.options.proxy.password || "", r = new Ve.SmartBuffer;
        r.writeUInt8(1), r.writeUInt8(Buffer.byteLength(e)), r.writeString(e), r.writeUInt8(Buffer.byteLength(i)), r.writeString(i), this.nextRequiredPacketBufferSize = S.SOCKS_INCOMING_PACKET_SIZES.Socks5UserPassAuthenticationResponse, this.socket.write(r.toBuffer()), this.setState(S.SocksClientState.SentAuthentication);
      }
      sendSocks5CustomAuthentication() {
        return Qt(this, undefined, undefined, function* () {
          this.nextRequiredPacketBufferSize = this.options.proxy.custom_auth_response_size, this.socket.write(yield this.options.proxy.custom_auth_request_handler()), this.setState(S.SocksClientState.SentAuthentication);
        });
      }
      handleSocks5CustomAuthHandshakeResponse(e) {
        return Qt(this, undefined, undefined, function* () {
          return yield this.options.proxy.custom_auth_response_handler(e);
        });
      }
      handleSocks5AuthenticationNoAuthHandshakeResponse(e) {
        return Qt(this, undefined, undefined, function* () {
          return e[1] === 0;
        });
      }
      handleSocks5AuthenticationUserPassHandshakeResponse(e) {
        return Qt(this, undefined, undefined, function* () {
          return e[1] === 0;
        });
      }
      handleInitialSocks5AuthenticationHandshakeResponse() {
        return Qt(this, undefined, undefined, function* () {
          this.setState(S.SocksClientState.ReceivedAuthenticationResponse);
          let e = false;
          this.socks5ChosenAuthType === S.Socks5Auth.NoAuth ? e = yield this.handleSocks5AuthenticationNoAuthHandshakeResponse(this.receiveBuffer.get(2)) : this.socks5ChosenAuthType === S.Socks5Auth.UserPass ? e = yield this.handleSocks5AuthenticationUserPassHandshakeResponse(this.receiveBuffer.get(2)) : this.socks5ChosenAuthType === this.options.proxy.custom_auth_method && (e = yield this.handleSocks5CustomAuthHandshakeResponse(this.receiveBuffer.get(this.options.proxy.custom_auth_response_size))), e ? this.sendSocks5CommandRequest() : this.closeSocket(S.ERRORS.Socks5AuthenticationFailed);
        });
      }
      sendSocks5CommandRequest() {
        let e = new Ve.SmartBuffer;
        e.writeUInt8(5), e.writeUInt8(S.SocksCommand[this.options.command]), e.writeUInt8(0), ei.isIPv4(this.options.destination.host) ? (e.writeUInt8(S.Socks5HostType.IPv4), e.writeBuffer(ze.toBuffer(this.options.destination.host))) : ei.isIPv6(this.options.destination.host) ? (e.writeUInt8(S.Socks5HostType.IPv6), e.writeBuffer(ze.toBuffer(this.options.destination.host))) : (e.writeUInt8(S.Socks5HostType.Hostname), e.writeUInt8(this.options.destination.host.length), e.writeString(this.options.destination.host)), e.writeUInt16BE(this.options.destination.port), this.nextRequiredPacketBufferSize = S.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHeader, this.socket.write(e.toBuffer()), this.setState(S.SocksClientState.SentFinalHandshake);
      }
      handleSocks5FinalHandshakeResponse() {
        let e = this.receiveBuffer.peek(5);
        if (e[0] !== 5 || e[1] !== S.Socks5Response.Granted)
          this.closeSocket(`${S.ERRORS.InvalidSocks5FinalHandshakeRejected} - ${S.Socks5Response[e[1]]}`);
        else {
          let i = e[3], r, n;
          if (i === S.Socks5HostType.IPv4) {
            let s = S.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv4;
            if (this.receiveBuffer.length < s) {
              this.nextRequiredPacketBufferSize = s;
              return;
            }
            n = Ve.SmartBuffer.fromBuffer(this.receiveBuffer.get(s).slice(4)), r = { host: ze.fromLong(n.readUInt32BE()), port: n.readUInt16BE() }, r.host === "0.0.0.0" && (r.host = this.options.proxy.ipaddress);
          } else if (i === S.Socks5HostType.Hostname) {
            let s = e[4], o = S.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHostname(s);
            if (this.receiveBuffer.length < o) {
              this.nextRequiredPacketBufferSize = o;
              return;
            }
            n = Ve.SmartBuffer.fromBuffer(this.receiveBuffer.get(o).slice(5)), r = { host: n.readString(s), port: n.readUInt16BE() };
          } else if (i === S.Socks5HostType.IPv6) {
            let s = S.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv6;
            if (this.receiveBuffer.length < s) {
              this.nextRequiredPacketBufferSize = s;
              return;
            }
            n = Ve.SmartBuffer.fromBuffer(this.receiveBuffer.get(s).slice(4)), r = { host: ze.toString(n.readBuffer(16)), port: n.readUInt16BE() };
          }
          this.setState(S.SocksClientState.ReceivedFinalResponse), S.SocksCommand[this.options.command] === S.SocksCommand.connect ? (this.setState(S.SocksClientState.Established), this.removeInternalSocketHandlers(), this.emit("established", { remoteHost: r, socket: this.socket })) : S.SocksCommand[this.options.command] === S.SocksCommand.bind ? (this.setState(S.SocksClientState.BoundWaitingForConnection), this.nextRequiredPacketBufferSize = S.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHeader, this.emit("bound", { remoteHost: r, socket: this.socket })) : S.SocksCommand[this.options.command] === S.SocksCommand.associate && (this.setState(S.SocksClientState.Established), this.removeInternalSocketHandlers(), this.emit("established", { remoteHost: r, socket: this.socket }));
        }
      }
      handleSocks5IncomingConnectionResponse() {
        let e = this.receiveBuffer.peek(5);
        if (e[0] !== 5 || e[1] !== S.Socks5Response.Granted)
          this.closeSocket(`${S.ERRORS.Socks5ProxyRejectedIncomingBoundConnection} - ${S.Socks5Response[e[1]]}`);
        else {
          let i = e[3], r, n;
          if (i === S.Socks5HostType.IPv4) {
            let s = S.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv4;
            if (this.receiveBuffer.length < s) {
              this.nextRequiredPacketBufferSize = s;
              return;
            }
            n = Ve.SmartBuffer.fromBuffer(this.receiveBuffer.get(s).slice(4)), r = { host: ze.fromLong(n.readUInt32BE()), port: n.readUInt16BE() }, r.host === "0.0.0.0" && (r.host = this.options.proxy.ipaddress);
          } else if (i === S.Socks5HostType.Hostname) {
            let s = e[4], o = S.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHostname(s);
            if (this.receiveBuffer.length < o) {
              this.nextRequiredPacketBufferSize = o;
              return;
            }
            n = Ve.SmartBuffer.fromBuffer(this.receiveBuffer.get(o).slice(5)), r = { host: n.readString(s), port: n.readUInt16BE() };
          } else if (i === S.Socks5HostType.IPv6) {
            let s = S.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv6;
            if (this.receiveBuffer.length < s) {
              this.nextRequiredPacketBufferSize = s;
              return;
            }
            n = Ve.SmartBuffer.fromBuffer(this.receiveBuffer.get(s).slice(4)), r = { host: ze.toString(n.readBuffer(16)), port: n.readUInt16BE() };
          }
          this.setState(S.SocksClientState.Established), this.removeInternalSocketHandlers(), this.emit("established", { remoteHost: r, socket: this.socket });
        }
      }
      get socksClientOptions() {
        return Object.assign({}, this.options);
      }
    };
    dt.SocksClient = Mn;
  });
  var ic = y((Ot) => {
    var $d = Ot && Ot.__createBinding || (Object.create ? function(t, e, i, r) {
      r === undefined && (r = i);
      var n = Object.getOwnPropertyDescriptor(e, i);
      (!n || ("get" in n ? !e.__esModule : n.writable || n.configurable)) && (n = { enumerable: true, get: function() {
        return e[i];
      } }), Object.defineProperty(t, r, n);
    } : function(t, e, i, r) {
      r === undefined && (r = i), t[r] = e[i];
    }), Gd = Ot && Ot.__exportStar || function(t, e) {
      for (var i in t)
        i !== "default" && !Object.prototype.hasOwnProperty.call(e, i) && $d(e, t, i);
    };
    Object.defineProperty(Ot, "__esModule", { value: true });
    Gd(tc(), Ot);
  });
  var rc = y((It) => {
    var zd = It && It.__awaiter || function(t, e, i, r) {
      function n(s) {
        return s instanceof i ? s : new i(function(o) {
          o(s);
        });
      }
      return new (i || (i = Promise))(function(s, o) {
        function l(u) {
          try {
            c(r.next(u));
          } catch (f) {
            o(f);
          }
        }
        function a(u) {
          try {
            c(r.throw(u));
          } catch (f) {
            o(f);
          }
        }
        function c(u) {
          u.done ? s(u.value) : n(u.value).then(l, a);
        }
        c((r = r.apply(t, e || [])).next());
      });
    }, tr = It && It.__importDefault || function(t) {
      return t && t.__esModule ? t : { default: t };
    };
    Object.defineProperty(It, "__esModule", { value: true });
    var Wd = tr(import.meta.require("dns")), Yd = tr(import.meta.require("tls")), Kd = tr(import.meta.require("url")), Zd = tr(Ht()), Xd = Ir(), Jd = ic(), Un = Zd.default("socks-proxy-agent");
    function Qd(t) {
      return new Promise((e, i) => {
        Wd.default.lookup(t, (r, n) => {
          r ? i(r) : e(n);
        });
      });
    }
    function em(t) {
      let e = 0, i = false, r = 5, n = t.hostname || t.host;
      if (!n)
        throw new TypeError('No "host"');
      if (typeof t.port == "number" ? e = t.port : typeof t.port == "string" && (e = parseInt(t.port, 10)), e || (e = 1080), t.protocol)
        switch (t.protocol.replace(":", "")) {
          case "socks4":
            i = true;
          case "socks4a":
            r = 4;
            break;
          case "socks5":
            i = true;
          case "socks":
          case "socks5h":
            r = 5;
            break;
          default:
            throw new TypeError(`A "socks" protocol must be specified! Got: ${t.protocol}`);
        }
      if (typeof t.type != "undefined")
        if (t.type === 4 || t.type === 5)
          r = t.type;
        else
          throw new TypeError(`"type" must be 4 or 5, got: ${t.type}`);
      let s = { host: n, port: e, type: r }, o = t.userId || t.username, l = t.password;
      if (t.auth) {
        let a = t.auth.split(":");
        o = a[0], l = a[1];
      }
      return o && Object.defineProperty(s, "userId", { value: o, enumerable: false }), l && Object.defineProperty(s, "password", { value: l, enumerable: false }), { lookup: i, proxy: s };
    }
    var Dn = class extends Xd.Agent {
      constructor(e) {
        let i;
        if (typeof e == "string" ? i = Kd.default.parse(e) : i = e, !i)
          throw new TypeError("a SOCKS proxy server `host` and `port` must be specified!");
        super(i);
        let r = em(i);
        this.lookup = r.lookup, this.proxy = r.proxy, this.tlsConnectionOptions = i.tls || {};
      }
      callback(e, i) {
        return zd(this, undefined, undefined, function* () {
          let { lookup: r, proxy: n } = this, { host: s, port: o, timeout: l } = i;
          if (!s)
            throw new Error("No `host` defined!");
          r && (s = yield Qd(s));
          let a = { proxy: n, destination: { host: s, port: o }, command: "connect", timeout: l };
          Un("Creating socks proxy connection: %o", a);
          let { socket: c } = yield Jd.SocksClient.createConnection(a);
          if (Un("Successfully created socks proxy connection"), i.secureEndpoint) {
            Un("Upgrading socket connection to TLS");
            let u = i.servername || i.host;
            return Yd.default.connect(Object.assign(Object.assign(Object.assign({}, tm(i, "host", "hostname", "path", "port")), { socket: c, servername: u }), this.tlsConnectionOptions));
          }
          return c;
        });
      }
    };
    It.default = Dn;
    function tm(t, ...e) {
      let i = {}, r;
      for (r in t)
        e.includes(r) || (i[r] = t[r]);
      return i;
    }
  });
  var sc = y((Hn, nc) => {
    var im = Hn && Hn.__importDefault || function(t) {
      return t && t.__esModule ? t : { default: t };
    }, jn = im(rc());
    function qn(t) {
      return new jn.default(t);
    }
    (function(t) {
      t.SocksProxyAgent = jn.default, t.prototype = jn.default.prototype;
    })(qn || (qn = {}));
    nc.exports = qn;
  });
  var ac = y((vv, oc) => {
    var rm = /[|\\{}()[\]^$+*?.-]/g;
    oc.exports = (t) => {
      if (typeof t != "string")
        throw new TypeError("Expected a string");
      return t.replace(rm, "\\$&");
    };
  });
  var fc = y((xv, uc) => {
    var nm = ac(), sm = typeof process == "object" && process && typeof process.cwd == "function" ? process.cwd() : ".", cc = [].concat(import.meta.require("module").builtinModules, "bootstrap_node", "node").map((t) => new RegExp(`(?:\\((?:node:)?${t}(?:\\.js)?:\\d+:\\d+\\)\$|^\\s*at (?:node:)?${t}(?:\\.js)?:\\d+:\\d+\$)`));
    cc.push(/\((?:node:)?internal\/[^:]+:\d+:\d+\)$/, /\s*at (?:node:)?internal\/[^:]+:\d+:\d+$/, /\/\.node-spawn-wrap-\w+-\w+\/node:\d+:\d+\)?$/);
    var Vn = class t {
      constructor(e) {
        e = { ignoredPackages: [], ...e }, "internals" in e || (e.internals = t.nodeInternals()), "cwd" in e || (e.cwd = sm), this._cwd = e.cwd.replace(/\\/g, "/"), this._internals = [].concat(e.internals, om(e.ignoredPackages)), this._wrapCallSite = e.wrapCallSite || false;
      }
      static nodeInternals() {
        return [...cc];
      }
      clean(e, i = 0) {
        i = " ".repeat(i), Array.isArray(e) || (e = e.split(`
`)), !/^\s*at /.test(e[0]) && /^\s*at /.test(e[1]) && (e = e.slice(1));
        let r = false, n = null, s = [];
        return e.forEach((o) => {
          if (o = o.replace(/\\/g, "/"), this._internals.some((a) => a.test(o)))
            return;
          let l = /^\s*at /.test(o);
          r ? o = o.trimEnd().replace(/^(\s+)at /, "$1") : (o = o.trim(), l && (o = o.slice(3))), o = o.replace(`${this._cwd}/`, ""), o && (l ? (n && (s.push(n), n = null), s.push(o)) : (r = true, n = o));
        }), s.map((o) => `${i}${o}
`).join("");
      }
      captureString(e, i = this.captureString) {
        typeof e == "function" && (i = e, e = 1 / 0);
        let { stackTraceLimit: r } = Error;
        e && (Error.stackTraceLimit = e);
        let n = {};
        Error.captureStackTrace(n, i);
        let { stack: s } = n;
        return Error.stackTraceLimit = r, this.clean(s);
      }
      capture(e, i = this.capture) {
        typeof e == "function" && (i = e, e = 1 / 0);
        let { prepareStackTrace: r, stackTraceLimit: n } = Error;
        Error.prepareStackTrace = (l, a) => this._wrapCallSite ? a.map(this._wrapCallSite) : a, e && (Error.stackTraceLimit = e);
        let s = {};
        Error.captureStackTrace(s, i);
        let { stack: o } = s;
        return Object.assign(Error, { prepareStackTrace: r, stackTraceLimit: n }), o;
      }
      at(e = this.at) {
        let [i] = this.capture(1, e);
        if (!i)
          return {};
        let r = { line: i.getLineNumber(), column: i.getColumnNumber() };
        lc(r, i.getFileName(), this._cwd), i.isConstructor() && (r.constructor = true), i.isEval() && (r.evalOrigin = i.getEvalOrigin()), i.isNative() && (r.native = true);
        let n;
        try {
          n = i.getTypeName();
        } catch {
        }
        n && n !== "Object" && n !== "[object Object]" && (r.type = n);
        let s = i.getFunctionName();
        s && (r.function = s);
        let o = i.getMethodName();
        return o && s !== o && (r.method = o), r;
      }
      parseLine(e) {
        let i = e && e.match(am);
        if (!i)
          return null;
        let r = i[1] === "new", n = i[2], s = i[3], o = i[4], l = Number(i[5]), a = Number(i[6]), c = i[7], u = i[8], f = i[9], h = i[10] === "native", p = i[11] === ")", d, m = {};
        if (u && (m.line = Number(u)), f && (m.column = Number(f)), p && c) {
          let v = 0;
          for (let E = c.length - 1;E > 0; E--)
            if (c.charAt(E) === ")")
              v++;
            else if (c.charAt(E) === "(" && c.charAt(E - 1) === " " && (v--, v === -1 && c.charAt(E - 1) === " ")) {
              let I = c.slice(0, E - 1);
              c = c.slice(E + 1), n += ` (${I}`;
              break;
            }
        }
        if (n) {
          let v = n.match(lm);
          v && (n = v[1], d = v[2]);
        }
        return lc(m, c, this._cwd), r && (m.constructor = true), s && (m.evalOrigin = s, m.evalLine = l, m.evalColumn = a, m.evalFile = o && o.replace(/\\/g, "/")), h && (m.native = true), n && (m.function = n), d && n !== d && (m.method = d), m;
      }
    };
    function lc(t, e, i) {
      e && (e = e.replace(/\\/g, "/"), e.startsWith(`${i}/`) && (e = e.slice(i.length + 1)), t.file = e);
    }
    function om(t) {
      if (t.length === 0)
        return [];
      let e = t.map((i) => nm(i));
      return new RegExp(`[/\\\\]node_modules[/\\\\](?:${e.join("|")})[/\\\\][^:]+:\\d+:\\d+`);
    }
    var am = new RegExp("^(?:\\s*at )?(?:(new) )?(?:(.*?) \\()?(?:eval at ([^ ]+) \\((.+?):(\\d+):(\\d+)\\), )?(?:(.+?):(\\d+):(\\d+)|(native))(\\)?)$"), lm = /^(.*?) \[as (.*?)\]$/;
    uc.exports = Vn;
  });
  var mc = y((_v, dc) => {
    var { Duplex: cm } = import.meta.require("stream");
    function hc(t) {
      t.emit("close");
    }
    function um() {
      !this.destroyed && this._writableState.finished && this.destroy();
    }
    function pc(t) {
      this.removeListener("error", pc), this.destroy(), this.listenerCount("error") === 0 && this.emit("error", t);
    }
    function fm(t, e) {
      let i = true, r = new cm({ ...e, autoDestroy: false, emitClose: false, objectMode: false, writableObjectMode: false });
      return t.on("message", function(s, o) {
        let l = !o && r._readableState.objectMode ? s.toString() : s;
        r.push(l) || t.pause();
      }), t.once("error", function(s) {
        r.destroyed || (i = false, r.destroy(s));
      }), t.once("close", function() {
        r.destroyed || r.push(null);
      }), r._destroy = function(n, s) {
        if (t.readyState === t.CLOSED) {
          s(n), process.nextTick(hc, r);
          return;
        }
        let o = false;
        t.once("error", function(a) {
          o = true, s(a);
        }), t.once("close", function() {
          o || s(n), process.nextTick(hc, r);
        }), i && t.terminate();
      }, r._final = function(n) {
        if (t.readyState === t.CONNECTING) {
          t.once("open", function() {
            r._final(n);
          });
          return;
        }
        t._socket !== null && (t._socket._writableState.finished ? (n(), r._readableState.endEmitted && r.destroy()) : (t._socket.once("finish", function() {
          n();
        }), t.close()));
      }, r._read = function() {
        t.isPaused && t.resume();
      }, r._write = function(n, s, o) {
        if (t.readyState === t.CONNECTING) {
          t.once("open", function() {
            r._write(n, s, o);
          });
          return;
        }
        t.send(n, o);
      }, r.on("end", um), r.on("error", pc), r;
    }
    dc.exports = fm;
  });
  var mt = y((yv, gc) => {
    gc.exports = { BINARY_TYPES: ["nodebuffer", "arraybuffer", "fragments"], EMPTY_BUFFER: Buffer.alloc(0), GUID: "258EAFA5-E914-47DA-95CA-C5AB0DC85B11", kForOnEventAttribute: Symbol("kIsForOnEventAttribute"), kListener: Symbol("kListener"), kStatusCode: Symbol("status-code"), kWebSocket: Symbol("websocket"), NOOP: () => {
    } };
  });
  var Si = y((bv, $n) => {
    var { EMPTY_BUFFER: hm } = mt();
    function vc(t, e) {
      if (t.length === 0)
        return hm;
      if (t.length === 1)
        return t[0];
      let i = Buffer.allocUnsafe(e), r = 0;
      for (let n = 0;n < t.length; n++) {
        let s = t[n];
        i.set(s, r), r += s.length;
      }
      return r < e ? i.slice(0, r) : i;
    }
    function xc(t, e, i, r, n) {
      for (let s = 0;s < n; s++)
        i[r + s] = t[s] ^ e[s & 3];
    }
    function _c(t, e) {
      for (let i = 0;i < t.length; i++)
        t[i] ^= e[i & 3];
    }
    function yc(t) {
      return t.byteLength === t.buffer.byteLength ? t.buffer : t.buffer.slice(t.byteOffset, t.byteOffset + t.byteLength);
    }
    function ir(t) {
      if (ir.readOnly = true, Buffer.isBuffer(t))
        return t;
      let e;
      return t instanceof ArrayBuffer ? e = Buffer.from(t) : ArrayBuffer.isView(t) ? e = Buffer.from(t.buffer, t.byteOffset, t.byteLength) : (e = Buffer.from(t), ir.readOnly = false), e;
    }
    try {
      let t = (()=>{throw new Error(`Cannot require module "bufferutil"`);})();
      $n.exports = { concat: vc, mask(e, i, r, n, s) {
        s < 48 ? xc(e, i, r, n, s) : t.mask(e, i, r, n, s);
      }, toArrayBuffer: yc, toBuffer: ir, unmask(e, i) {
        e.length < 32 ? _c(e, i) : t.unmask(e, i);
      } };
    } catch {
      $n.exports = { concat: vc, mask: xc, toArrayBuffer: yc, toBuffer: ir, unmask: _c };
    }
  });
  var Ec = y((wv, wc) => {
    var bc = Symbol("kDone"), Gn = Symbol("kRun"), zn = class {
      constructor(e) {
        this[bc] = () => {
          this.pending--, this[Gn]();
        }, this.concurrency = e || 1 / 0, this.jobs = [], this.pending = 0;
      }
      add(e) {
        this.jobs.push(e), this[Gn]();
      }
      [Gn]() {
        if (this.pending !== this.concurrency && this.jobs.length) {
          let e = this.jobs.shift();
          this.pending++, e(this[bc]);
        }
      }
    };
    wc.exports = zn;
  });
  var Oi = y((Ev, Oc) => {
    var ki = import.meta.require("zlib"), Sc = Si(), pm = Ec(), { kStatusCode: kc } = mt(), dm = Buffer.from([0, 0, 255, 255]), sr = Symbol("permessage-deflate"), lt = Symbol("total-length"), Ci = Symbol("callback"), gt = Symbol("buffers"), nr = Symbol("error"), rr, Wn = class {
      constructor(e, i, r) {
        if (this._maxPayload = r | 0, this._options = e || {}, this._threshold = this._options.threshold !== undefined ? this._options.threshold : 1024, this._isServer = !!i, this._deflate = null, this._inflate = null, this.params = null, !rr) {
          let n = this._options.concurrencyLimit !== undefined ? this._options.concurrencyLimit : 10;
          rr = new pm(n);
        }
      }
      static get extensionName() {
        return "permessage-deflate";
      }
      offer() {
        let e = {};
        return this._options.serverNoContextTakeover && (e.server_no_context_takeover = true), this._options.clientNoContextTakeover && (e.client_no_context_takeover = true), this._options.serverMaxWindowBits && (e.server_max_window_bits = this._options.serverMaxWindowBits), this._options.clientMaxWindowBits ? e.client_max_window_bits = this._options.clientMaxWindowBits : this._options.clientMaxWindowBits == null && (e.client_max_window_bits = true), e;
      }
      accept(e) {
        return e = this.normalizeParams(e), this.params = this._isServer ? this.acceptAsServer(e) : this.acceptAsClient(e), this.params;
      }
      cleanup() {
        if (this._inflate && (this._inflate.close(), this._inflate = null), this._deflate) {
          let e = this._deflate[Ci];
          this._deflate.close(), this._deflate = null, e && e(new Error("The deflate stream was closed while data was being processed"));
        }
      }
      acceptAsServer(e) {
        let i = this._options, r = e.find((n) => !(i.serverNoContextTakeover === false && n.server_no_context_takeover || n.server_max_window_bits && (i.serverMaxWindowBits === false || typeof i.serverMaxWindowBits == "number" && i.serverMaxWindowBits > n.server_max_window_bits) || typeof i.clientMaxWindowBits == "number" && !n.client_max_window_bits));
        if (!r)
          throw new Error("None of the extension offers can be accepted");
        return i.serverNoContextTakeover && (r.server_no_context_takeover = true), i.clientNoContextTakeover && (r.client_no_context_takeover = true), typeof i.serverMaxWindowBits == "number" && (r.server_max_window_bits = i.serverMaxWindowBits), typeof i.clientMaxWindowBits == "number" ? r.client_max_window_bits = i.clientMaxWindowBits : (r.client_max_window_bits === true || i.clientMaxWindowBits === false) && delete r.client_max_window_bits, r;
      }
      acceptAsClient(e) {
        let i = e[0];
        if (this._options.clientNoContextTakeover === false && i.client_no_context_takeover)
          throw new Error('Unexpected parameter "client_no_context_takeover"');
        if (!i.client_max_window_bits)
          typeof this._options.clientMaxWindowBits == "number" && (i.client_max_window_bits = this._options.clientMaxWindowBits);
        else if (this._options.clientMaxWindowBits === false || typeof this._options.clientMaxWindowBits == "number" && i.client_max_window_bits > this._options.clientMaxWindowBits)
          throw new Error('Unexpected or invalid parameter "client_max_window_bits"');
        return i;
      }
      normalizeParams(e) {
        return e.forEach((i) => {
          Object.keys(i).forEach((r) => {
            let n = i[r];
            if (n.length > 1)
              throw new Error(`Parameter "${r}" must have only a single value`);
            if (n = n[0], r === "client_max_window_bits") {
              if (n !== true) {
                let s = +n;
                if (!Number.isInteger(s) || s < 8 || s > 15)
                  throw new TypeError(`Invalid value for parameter "${r}": ${n}`);
                n = s;
              } else if (!this._isServer)
                throw new TypeError(`Invalid value for parameter "${r}": ${n}`);
            } else if (r === "server_max_window_bits") {
              let s = +n;
              if (!Number.isInteger(s) || s < 8 || s > 15)
                throw new TypeError(`Invalid value for parameter "${r}": ${n}`);
              n = s;
            } else if (r === "client_no_context_takeover" || r === "server_no_context_takeover") {
              if (n !== true)
                throw new TypeError(`Invalid value for parameter "${r}": ${n}`);
            } else
              throw new Error(`Unknown parameter "${r}"`);
            i[r] = n;
          });
        }), e;
      }
      decompress(e, i, r) {
        rr.add((n) => {
          this._decompress(e, i, (s, o) => {
            n(), r(s, o);
          });
        });
      }
      compress(e, i, r) {
        rr.add((n) => {
          this._compress(e, i, (s, o) => {
            n(), r(s, o);
          });
        });
      }
      _decompress(e, i, r) {
        let n = this._isServer ? "client" : "server";
        if (!this._inflate) {
          let s = `${n}_max_window_bits`, o = typeof this.params[s] != "number" ? ki.Z_DEFAULT_WINDOWBITS : this.params[s];
          this._inflate = ki.createInflateRaw({ ...this._options.zlibInflateOptions, windowBits: o }), this._inflate[sr] = this, this._inflate[lt] = 0, this._inflate[gt] = [], this._inflate.on("error", gm), this._inflate.on("data", Cc);
        }
        this._inflate[Ci] = r, this._inflate.write(e), i && this._inflate.write(dm), this._inflate.flush(() => {
          let s = this._inflate[nr];
          if (s) {
            this._inflate.close(), this._inflate = null, r(s);
            return;
          }
          let o = Sc.concat(this._inflate[gt], this._inflate[lt]);
          this._inflate._readableState.endEmitted ? (this._inflate.close(), this._inflate = null) : (this._inflate[lt] = 0, this._inflate[gt] = [], i && this.params[`${n}_no_context_takeover`] && this._inflate.reset()), r(null, o);
        });
      }
      _compress(e, i, r) {
        let n = this._isServer ? "server" : "client";
        if (!this._deflate) {
          let s = `${n}_max_window_bits`, o = typeof this.params[s] != "number" ? ki.Z_DEFAULT_WINDOWBITS : this.params[s];
          this._deflate = ki.createDeflateRaw({ ...this._options.zlibDeflateOptions, windowBits: o }), this._deflate[lt] = 0, this._deflate[gt] = [], this._deflate.on("data", mm);
        }
        this._deflate[Ci] = r, this._deflate.write(e), this._deflate.flush(ki.Z_SYNC_FLUSH, () => {
          if (!this._deflate)
            return;
          let s = Sc.concat(this._deflate[gt], this._deflate[lt]);
          i && (s = s.slice(0, s.length - 4)), this._deflate[Ci] = null, this._deflate[lt] = 0, this._deflate[gt] = [], i && this.params[`${n}_no_context_takeover`] && this._deflate.reset(), r(null, s);
        });
      }
    };
    Oc.exports = Wn;
    function mm(t) {
      this[gt].push(t), this[lt] += t.length;
    }
    function Cc(t) {
      if (this[lt] += t.length, this[sr]._maxPayload < 1 || this[lt] <= this[sr]._maxPayload) {
        this[gt].push(t);
        return;
      }
      this[nr] = new RangeError("Max payload size exceeded"), this[nr].code = "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH", this[nr][kc] = 1009, this.removeListener("data", Cc), this.reset();
    }
    function gm(t) {
      this[sr]._inflate = null, t[kc] = 1007, this[Ci](t);
    }
  });
  var Ii = y((Sv, Yn) => {
    var Ic = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0];
    function Tc(t) {
      return t >= 1000 && t <= 1014 && t !== 1004 && t !== 1005 && t !== 1006 || t >= 3000 && t <= 4999;
    }
    function Ac(t) {
      let e = t.length, i = 0;
      for (;i < e; )
        if (!(t[i] & 128))
          i++;
        else if ((t[i] & 224) === 192) {
          if (i + 1 === e || (t[i + 1] & 192) !== 128 || (t[i] & 254) === 192)
            return false;
          i += 2;
        } else if ((t[i] & 240) === 224) {
          if (i + 2 >= e || (t[i + 1] & 192) !== 128 || (t[i + 2] & 192) !== 128 || t[i] === 224 && (t[i + 1] & 224) === 128 || t[i] === 237 && (t[i + 1] & 224) === 160)
            return false;
          i += 3;
        } else if ((t[i] & 248) === 240) {
          if (i + 3 >= e || (t[i + 1] & 192) !== 128 || (t[i + 2] & 192) !== 128 || (t[i + 3] & 192) !== 128 || t[i] === 240 && (t[i + 1] & 240) === 128 || t[i] === 244 && t[i + 1] > 143 || t[i] > 244)
            return false;
          i += 4;
        } else
          return false;
      return true;
    }
    try {
      let t = import.meta.require("utf-8-validate");
      Yn.exports = { isValidStatusCode: Tc, isValidUTF8(e) {
        return e.length < 150 ? Ac(e) : t(e);
      }, tokenChars: Ic };
    } catch {
      Yn.exports = { isValidStatusCode: Tc, isValidUTF8: Ac, tokenChars: Ic };
    }
  });
  var Jn = y((kv, Mc) => {
    var { Writable: vm } = import.meta.require("stream"), Rc = Oi(), { BINARY_TYPES: xm, EMPTY_BUFFER: Bc, kStatusCode: _m, kWebSocket: ym } = mt(), { concat: Kn, toArrayBuffer: bm, unmask: wm } = Si(), { isValidStatusCode: Em, isValidUTF8: Lc } = Ii(), Ti = 0, Pc = 1, Fc = 2, Nc = 3, Zn = 4, Sm = 5, Xn = class extends vm {
      constructor(e = {}) {
        super(), this._binaryType = e.binaryType || xm[0], this._extensions = e.extensions || {}, this._isServer = !!e.isServer, this._maxPayload = e.maxPayload | 0, this._skipUTF8Validation = !!e.skipUTF8Validation, this[ym] = undefined, this._bufferedBytes = 0, this._buffers = [], this._compressed = false, this._payloadLength = 0, this._mask = undefined, this._fragmented = 0, this._masked = false, this._fin = false, this._opcode = 0, this._totalPayloadLength = 0, this._messageLength = 0, this._fragments = [], this._state = Ti, this._loop = false;
      }
      _write(e, i, r) {
        if (this._opcode === 8 && this._state == Ti)
          return r();
        this._bufferedBytes += e.length, this._buffers.push(e), this.startLoop(r);
      }
      consume(e) {
        if (this._bufferedBytes -= e, e === this._buffers[0].length)
          return this._buffers.shift();
        if (e < this._buffers[0].length) {
          let r = this._buffers[0];
          return this._buffers[0] = r.slice(e), r.slice(0, e);
        }
        let i = Buffer.allocUnsafe(e);
        do {
          let r = this._buffers[0], n = i.length - e;
          e >= r.length ? i.set(this._buffers.shift(), n) : (i.set(new Uint8Array(r.buffer, r.byteOffset, e), n), this._buffers[0] = r.slice(e)), e -= r.length;
        } while (e > 0);
        return i;
      }
      startLoop(e) {
        let i;
        this._loop = true;
        do
          switch (this._state) {
            case Ti:
              i = this.getInfo();
              break;
            case Pc:
              i = this.getPayloadLength16();
              break;
            case Fc:
              i = this.getPayloadLength64();
              break;
            case Nc:
              this.getMask();
              break;
            case Zn:
              i = this.getData(e);
              break;
            default:
              this._loop = false;
              return;
          }
        while (this._loop);
        e(i);
      }
      getInfo() {
        if (this._bufferedBytes < 2) {
          this._loop = false;
          return;
        }
        let e = this.consume(2);
        if (e[0] & 48)
          return this._loop = false, Ie(RangeError, "RSV2 and RSV3 must be clear", true, 1002, "WS_ERR_UNEXPECTED_RSV_2_3");
        let i = (e[0] & 64) === 64;
        if (i && !this._extensions[Rc.extensionName])
          return this._loop = false, Ie(RangeError, "RSV1 must be clear", true, 1002, "WS_ERR_UNEXPECTED_RSV_1");
        if (this._fin = (e[0] & 128) === 128, this._opcode = e[0] & 15, this._payloadLength = e[1] & 127, this._opcode === 0) {
          if (i)
            return this._loop = false, Ie(RangeError, "RSV1 must be clear", true, 1002, "WS_ERR_UNEXPECTED_RSV_1");
          if (!this._fragmented)
            return this._loop = false, Ie(RangeError, "invalid opcode 0", true, 1002, "WS_ERR_INVALID_OPCODE");
          this._opcode = this._fragmented;
        } else if (this._opcode === 1 || this._opcode === 2) {
          if (this._fragmented)
            return this._loop = false, Ie(RangeError, `invalid opcode ${this._opcode}`, true, 1002, "WS_ERR_INVALID_OPCODE");
          this._compressed = i;
        } else if (this._opcode > 7 && this._opcode < 11) {
          if (!this._fin)
            return this._loop = false, Ie(RangeError, "FIN must be set", true, 1002, "WS_ERR_EXPECTED_FIN");
          if (i)
            return this._loop = false, Ie(RangeError, "RSV1 must be clear", true, 1002, "WS_ERR_UNEXPECTED_RSV_1");
          if (this._payloadLength > 125)
            return this._loop = false, Ie(RangeError, `invalid payload length ${this._payloadLength}`, true, 1002, "WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH");
        } else
          return this._loop = false, Ie(RangeError, `invalid opcode ${this._opcode}`, true, 1002, "WS_ERR_INVALID_OPCODE");
        if (!this._fin && !this._fragmented && (this._fragmented = this._opcode), this._masked = (e[1] & 128) === 128, this._isServer) {
          if (!this._masked)
            return this._loop = false, Ie(RangeError, "MASK must be set", true, 1002, "WS_ERR_EXPECTED_MASK");
        } else if (this._masked)
          return this._loop = false, Ie(RangeError, "MASK must be clear", true, 1002, "WS_ERR_UNEXPECTED_MASK");
        if (this._payloadLength === 126)
          this._state = Pc;
        else if (this._payloadLength === 127)
          this._state = Fc;
        else
          return this.haveLength();
      }
      getPayloadLength16() {
        if (this._bufferedBytes < 2) {
          this._loop = false;
          return;
        }
        return this._payloadLength = this.consume(2).readUInt16BE(0), this.haveLength();
      }
      getPayloadLength64() {
        if (this._bufferedBytes < 8) {
          this._loop = false;
          return;
        }
        let e = this.consume(8), i = e.readUInt32BE(0);
        return i > Math.pow(2, 53 - 32) - 1 ? (this._loop = false, Ie(RangeError, "Unsupported WebSocket frame: payload length > 2^53 - 1", false, 1009, "WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH")) : (this._payloadLength = i * Math.pow(2, 32) + e.readUInt32BE(4), this.haveLength());
      }
      haveLength() {
        if (this._payloadLength && this._opcode < 8 && (this._totalPayloadLength += this._payloadLength, this._totalPayloadLength > this._maxPayload && this._maxPayload > 0))
          return this._loop = false, Ie(RangeError, "Max payload size exceeded", false, 1009, "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH");
        this._masked ? this._state = Nc : this._state = Zn;
      }
      getMask() {
        if (this._bufferedBytes < 4) {
          this._loop = false;
          return;
        }
        this._mask = this.consume(4), this._state = Zn;
      }
      getData(e) {
        let i = Bc;
        if (this._payloadLength) {
          if (this._bufferedBytes < this._payloadLength) {
            this._loop = false;
            return;
          }
          i = this.consume(this._payloadLength), this._masked && this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3] && wm(i, this._mask);
        }
        if (this._opcode > 7)
          return this.controlMessage(i);
        if (this._compressed) {
          this._state = Sm, this.decompress(i, e);
          return;
        }
        return i.length && (this._messageLength = this._totalPayloadLength, this._fragments.push(i)), this.dataMessage();
      }
      decompress(e, i) {
        this._extensions[Rc.extensionName].decompress(e, this._fin, (n, s) => {
          if (n)
            return i(n);
          if (s.length) {
            if (this._messageLength += s.length, this._messageLength > this._maxPayload && this._maxPayload > 0)
              return i(Ie(RangeError, "Max payload size exceeded", false, 1009, "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH"));
            this._fragments.push(s);
          }
          let o = this.dataMessage();
          if (o)
            return i(o);
          this.startLoop(i);
        });
      }
      dataMessage() {
        if (this._fin) {
          let e = this._messageLength, i = this._fragments;
          if (this._totalPayloadLength = 0, this._messageLength = 0, this._fragmented = 0, this._fragments = [], this._opcode === 2) {
            let r;
            this._binaryType === "nodebuffer" ? r = Kn(i, e) : this._binaryType === "arraybuffer" ? r = bm(Kn(i, e)) : r = i, this.emit("message", r, true);
          } else {
            let r = Kn(i, e);
            if (!this._skipUTF8Validation && !Lc(r))
              return this._loop = false, Ie(Error, "invalid UTF-8 sequence", true, 1007, "WS_ERR_INVALID_UTF8");
            this.emit("message", r, false);
          }
        }
        this._state = Ti;
      }
      controlMessage(e) {
        if (this._opcode === 8)
          if (this._loop = false, e.length === 0)
            this.emit("conclude", 1005, Bc), this.end();
          else {
            if (e.length === 1)
              return Ie(RangeError, "invalid payload length 1", true, 1002, "WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH");
            {
              let i = e.readUInt16BE(0);
              if (!Em(i))
                return Ie(RangeError, `invalid status code ${i}`, true, 1002, "WS_ERR_INVALID_CLOSE_CODE");
              let r = e.slice(2);
              if (!this._skipUTF8Validation && !Lc(r))
                return Ie(Error, "invalid UTF-8 sequence", true, 1007, "WS_ERR_INVALID_UTF8");
              this.emit("conclude", i, r), this.end();
            }
          }
        else
          this._opcode === 9 ? this.emit("ping", e) : this.emit("pong", e);
        this._state = Ti;
      }
    };
    Mc.exports = Xn;
    function Ie(t, e, i, r, n) {
      let s = new t(i ? `Invalid WebSocket frame: ${e}` : e);
      return Error.captureStackTrace(s, Ie), s.code = n, s[_m] = r, s;
    }
  });
  var es = y((Iv, jc) => {
    var Cv = import.meta.require("net"), Ov = import.meta.require("tls"), { randomFillSync: km } = import.meta.require("crypto"), Uc = Oi(), { EMPTY_BUFFER: Cm } = mt(), { isValidStatusCode: Om } = Ii(), { mask: Dc, toBuffer: ti } = Si(), rt = Symbol("kByteLength"), Im = Buffer.alloc(4), Qn = class t {
      constructor(e, i, r) {
        this._extensions = i || {}, r && (this._generateMask = r, this._maskBuffer = Buffer.alloc(4)), this._socket = e, this._firstFragment = true, this._compress = false, this._bufferedBytes = 0, this._deflating = false, this._queue = [];
      }
      static frame(e, i) {
        let r, n = false, s = 2, o = false;
        i.mask && (r = i.maskBuffer || Im, i.generateMask ? i.generateMask(r) : km(r, 0, 4), o = (r[0] | r[1] | r[2] | r[3]) === 0, s = 6);
        let l;
        typeof e == "string" ? (!i.mask || o) && i[rt] !== undefined ? l = i[rt] : (e = Buffer.from(e), l = e.length) : (l = e.length, n = i.mask && i.readOnly && !o);
        let a = l;
        l >= 65536 ? (s += 8, a = 127) : l > 125 && (s += 2, a = 126);
        let c = Buffer.allocUnsafe(n ? l + s : s);
        return c[0] = i.fin ? i.opcode | 128 : i.opcode, i.rsv1 && (c[0] |= 64), c[1] = a, a === 126 ? c.writeUInt16BE(l, 2) : a === 127 && (c[2] = c[3] = 0, c.writeUIntBE(l, 4, 6)), i.mask ? (c[1] |= 128, c[s - 4] = r[0], c[s - 3] = r[1], c[s - 2] = r[2], c[s - 1] = r[3], o ? [c, e] : n ? (Dc(e, r, c, s, l), [c]) : (Dc(e, r, e, 0, l), [c, e])) : [c, e];
      }
      close(e, i, r, n) {
        let s;
        if (e === undefined)
          s = Cm;
        else {
          if (typeof e != "number" || !Om(e))
            throw new TypeError("First argument must be a valid error code number");
          if (i === undefined || !i.length)
            s = Buffer.allocUnsafe(2), s.writeUInt16BE(e, 0);
          else {
            let l = Buffer.byteLength(i);
            if (l > 123)
              throw new RangeError("The message must not be greater than 123 bytes");
            s = Buffer.allocUnsafe(2 + l), s.writeUInt16BE(e, 0), typeof i == "string" ? s.write(i, 2) : s.set(i, 2);
          }
        }
        let o = { [rt]: s.length, fin: true, generateMask: this._generateMask, mask: r, maskBuffer: this._maskBuffer, opcode: 8, readOnly: false, rsv1: false };
        this._deflating ? this.enqueue([this.dispatch, s, false, o, n]) : this.sendFrame(t.frame(s, o), n);
      }
      ping(e, i, r) {
        let n, s;
        if (typeof e == "string" ? (n = Buffer.byteLength(e), s = false) : (e = ti(e), n = e.length, s = ti.readOnly), n > 125)
          throw new RangeError("The data size must not be greater than 125 bytes");
        let o = { [rt]: n, fin: true, generateMask: this._generateMask, mask: i, maskBuffer: this._maskBuffer, opcode: 9, readOnly: s, rsv1: false };
        this._deflating ? this.enqueue([this.dispatch, e, false, o, r]) : this.sendFrame(t.frame(e, o), r);
      }
      pong(e, i, r) {
        let n, s;
        if (typeof e == "string" ? (n = Buffer.byteLength(e), s = false) : (e = ti(e), n = e.length, s = ti.readOnly), n > 125)
          throw new RangeError("The data size must not be greater than 125 bytes");
        let o = { [rt]: n, fin: true, generateMask: this._generateMask, mask: i, maskBuffer: this._maskBuffer, opcode: 10, readOnly: s, rsv1: false };
        this._deflating ? this.enqueue([this.dispatch, e, false, o, r]) : this.sendFrame(t.frame(e, o), r);
      }
      send(e, i, r) {
        let n = this._extensions[Uc.extensionName], s = i.binary ? 2 : 1, o = i.compress, l, a;
        if (typeof e == "string" ? (l = Buffer.byteLength(e), a = false) : (e = ti(e), l = e.length, a = ti.readOnly), this._firstFragment ? (this._firstFragment = false, o && n && n.params[n._isServer ? "server_no_context_takeover" : "client_no_context_takeover"] && (o = l >= n._threshold), this._compress = o) : (o = false, s = 0), i.fin && (this._firstFragment = true), n) {
          let c = { [rt]: l, fin: i.fin, generateMask: this._generateMask, mask: i.mask, maskBuffer: this._maskBuffer, opcode: s, readOnly: a, rsv1: o };
          this._deflating ? this.enqueue([this.dispatch, e, this._compress, c, r]) : this.dispatch(e, this._compress, c, r);
        } else
          this.sendFrame(t.frame(e, { [rt]: l, fin: i.fin, generateMask: this._generateMask, mask: i.mask, maskBuffer: this._maskBuffer, opcode: s, readOnly: a, rsv1: false }), r);
      }
      dispatch(e, i, r, n) {
        if (!i) {
          this.sendFrame(t.frame(e, r), n);
          return;
        }
        let s = this._extensions[Uc.extensionName];
        this._bufferedBytes += r[rt], this._deflating = true, s.compress(e, r.fin, (o, l) => {
          if (this._socket.destroyed) {
            let a = new Error("The socket was closed while data was being compressed");
            typeof n == "function" && n(a);
            for (let c = 0;c < this._queue.length; c++) {
              let u = this._queue[c], f = u[u.length - 1];
              typeof f == "function" && f(a);
            }
            return;
          }
          this._bufferedBytes -= r[rt], this._deflating = false, r.readOnly = false, this.sendFrame(t.frame(l, r), n), this.dequeue();
        });
      }
      dequeue() {
        for (;!this._deflating && this._queue.length; ) {
          let e = this._queue.shift();
          this._bufferedBytes -= e[3][rt], Reflect.apply(e[0], this, e.slice(1));
        }
      }
      enqueue(e) {
        this._bufferedBytes += e[3][rt], this._queue.push(e);
      }
      sendFrame(e, i) {
        e.length === 2 ? (this._socket.cork(), this._socket.write(e[0]), this._socket.write(e[1], i), this._socket.uncork()) : this._socket.write(e[0], i);
      }
    };
    jc.exports = Qn;
  });
  var Zc = y((Tv, Kc) => {
    var { kForOnEventAttribute: ts, kListener: qc } = mt(), Hc = Symbol("kCode"), Vc = Symbol("kData"), $c = Symbol("kError"), Gc = Symbol("kMessage"), zc = Symbol("kReason"), ii = Symbol("kTarget"), Wc = Symbol("kType"), Yc = Symbol("kWasClean"), ct = class {
      constructor(e) {
        this[ii] = null, this[Wc] = e;
      }
      get target() {
        return this[ii];
      }
      get type() {
        return this[Wc];
      }
    };
    Object.defineProperty(ct.prototype, "target", { enumerable: true });
    Object.defineProperty(ct.prototype, "type", { enumerable: true });
    var Tt = class extends ct {
      constructor(e, i = {}) {
        super(e), this[Hc] = i.code === undefined ? 0 : i.code, this[zc] = i.reason === undefined ? "" : i.reason, this[Yc] = i.wasClean === undefined ? false : i.wasClean;
      }
      get code() {
        return this[Hc];
      }
      get reason() {
        return this[zc];
      }
      get wasClean() {
        return this[Yc];
      }
    };
    Object.defineProperty(Tt.prototype, "code", { enumerable: true });
    Object.defineProperty(Tt.prototype, "reason", { enumerable: true });
    Object.defineProperty(Tt.prototype, "wasClean", { enumerable: true });
    var ri = class extends ct {
      constructor(e, i = {}) {
        super(e), this[$c] = i.error === undefined ? null : i.error, this[Gc] = i.message === undefined ? "" : i.message;
      }
      get error() {
        return this[$c];
      }
      get message() {
        return this[Gc];
      }
    };
    Object.defineProperty(ri.prototype, "error", { enumerable: true });
    Object.defineProperty(ri.prototype, "message", { enumerable: true });
    var Ai = class extends ct {
      constructor(e, i = {}) {
        super(e), this[Vc] = i.data === undefined ? null : i.data;
      }
      get data() {
        return this[Vc];
      }
    };
    Object.defineProperty(Ai.prototype, "data", { enumerable: true });
    var Tm = { addEventListener(t, e, i = {}) {
      let r;
      if (t === "message")
        r = function(s, o) {
          let l = new Ai("message", { data: o ? s : s.toString() });
          l[ii] = this, e.call(this, l);
        };
      else if (t === "close")
        r = function(s, o) {
          let l = new Tt("close", { code: s, reason: o.toString(), wasClean: this._closeFrameReceived && this._closeFrameSent });
          l[ii] = this, e.call(this, l);
        };
      else if (t === "error")
        r = function(s) {
          let o = new ri("error", { error: s, message: s.message });
          o[ii] = this, e.call(this, o);
        };
      else if (t === "open")
        r = function() {
          let s = new ct("open");
          s[ii] = this, e.call(this, s);
        };
      else
        return;
      r[ts] = !!i[ts], r[qc] = e, i.once ? this.once(t, r) : this.on(t, r);
    }, removeEventListener(t, e) {
      for (let i of this.listeners(t))
        if (i[qc] === e && !i[ts]) {
          this.removeListener(t, i);
          break;
        }
    } };
    Kc.exports = { CloseEvent: Tt, ErrorEvent: ri, Event: ct, EventTarget: Tm, MessageEvent: Ai };
  });
  var is = y((Av, Xc) => {
    var { tokenChars: Ri } = Ii();
    function ot(t, e, i) {
      t[e] === undefined ? t[e] = [i] : t[e].push(i);
    }
    function Am(t) {
      let e = Object.create(null), i = Object.create(null), r = false, n = false, s = false, o, l, a = -1, c = -1, u = -1, f = 0;
      for (;f < t.length; f++)
        if (c = t.charCodeAt(f), o === undefined)
          if (u === -1 && Ri[c] === 1)
            a === -1 && (a = f);
          else if (f !== 0 && (c === 32 || c === 9))
            u === -1 && a !== -1 && (u = f);
          else if (c === 59 || c === 44) {
            if (a === -1)
              throw new SyntaxError(`Unexpected character at index ${f}`);
            u === -1 && (u = f);
            let p = t.slice(a, u);
            c === 44 ? (ot(e, p, i), i = Object.create(null)) : o = p, a = u = -1;
          } else
            throw new SyntaxError(`Unexpected character at index ${f}`);
        else if (l === undefined)
          if (u === -1 && Ri[c] === 1)
            a === -1 && (a = f);
          else if (c === 32 || c === 9)
            u === -1 && a !== -1 && (u = f);
          else if (c === 59 || c === 44) {
            if (a === -1)
              throw new SyntaxError(`Unexpected character at index ${f}`);
            u === -1 && (u = f), ot(i, t.slice(a, u), true), c === 44 && (ot(e, o, i), i = Object.create(null), o = undefined), a = u = -1;
          } else if (c === 61 && a !== -1 && u === -1)
            l = t.slice(a, f), a = u = -1;
          else
            throw new SyntaxError(`Unexpected character at index ${f}`);
        else if (n) {
          if (Ri[c] !== 1)
            throw new SyntaxError(`Unexpected character at index ${f}`);
          a === -1 ? a = f : r || (r = true), n = false;
        } else if (s)
          if (Ri[c] === 1)
            a === -1 && (a = f);
          else if (c === 34 && a !== -1)
            s = false, u = f;
          else if (c === 92)
            n = true;
          else
            throw new SyntaxError(`Unexpected character at index ${f}`);
        else if (c === 34 && t.charCodeAt(f - 1) === 61)
          s = true;
        else if (u === -1 && Ri[c] === 1)
          a === -1 && (a = f);
        else if (a !== -1 && (c === 32 || c === 9))
          u === -1 && (u = f);
        else if (c === 59 || c === 44) {
          if (a === -1)
            throw new SyntaxError(`Unexpected character at index ${f}`);
          u === -1 && (u = f);
          let p = t.slice(a, u);
          r && (p = p.replace(/\\/g, ""), r = false), ot(i, l, p), c === 44 && (ot(e, o, i), i = Object.create(null), o = undefined), l = undefined, a = u = -1;
        } else
          throw new SyntaxError(`Unexpected character at index ${f}`);
      if (a === -1 || s || c === 32 || c === 9)
        throw new SyntaxError("Unexpected end of input");
      u === -1 && (u = f);
      let h = t.slice(a, u);
      return o === undefined ? ot(e, h, i) : (l === undefined ? ot(i, h, true) : r ? ot(i, l, h.replace(/\\/g, "")) : ot(i, l, h), ot(e, o, i)), e;
    }
    function Rm(t) {
      return Object.keys(t).map((e) => {
        let i = t[e];
        return Array.isArray(i) || (i = [i]), i.map((r) => [e].concat(Object.keys(r).map((n) => {
          let s = r[n];
          return Array.isArray(s) || (s = [s]), s.map((o) => o === true ? n : `${n}=${o}`).join("; ");
        })).join("; ")).join(", ");
      }).join(", ");
    }
    Xc.exports = { format: Rm, parse: Am };
  });
  var ls = y((Bv, au) => {
    var Bm = import.meta.require("events"), Lm = import.meta.require("https"), Pm = import.meta.require("http"), eu = import.meta.require("net"), Fm = import.meta.require("tls"), { randomBytes: Nm, createHash: Mm } = import.meta.require("crypto"), { Readable: Rv } = import.meta.require("stream"), { URL: rs } = import.meta.require("url"), vt = Oi(), Um = Jn(), Dm = es(), { BINARY_TYPES: Jc, EMPTY_BUFFER: or, GUID: jm, kForOnEventAttribute: ns, kListener: qm, kStatusCode: Hm, kWebSocket: De, NOOP: tu } = mt(), { EventTarget: { addEventListener: Vm, removeEventListener: $m } } = Zc(), { format: Gm, parse: zm } = is(), { toBuffer: Wm } = Si(), ut = ["CONNECTING", "OPEN", "CLOSING", "CLOSED"], Ym = /^[!#$%&'*+\-.0-9A-Z^_`|a-z~]+$/, ss = [8, 13], Km = 30 * 1000, Ce = class t extends Bm {
      constructor(e, i, r) {
        super(), this._binaryType = Jc[0], this._closeCode = 1006, this._closeFrameReceived = false, this._closeFrameSent = false, this._closeMessage = or, this._closeTimer = null, this._extensions = {}, this._paused = false, this._protocol = "", this._readyState = t.CONNECTING, this._receiver = null, this._sender = null, this._socket = null, e !== null ? (this._bufferedAmount = 0, this._isServer = false, this._redirects = 0, i === undefined ? i = [] : Array.isArray(i) || (typeof i == "object" && i !== null ? (r = i, i = []) : i = [i]), iu(this, e, i, r)) : this._isServer = true;
      }
      get binaryType() {
        return this._binaryType;
      }
      set binaryType(e) {
        Jc.includes(e) && (this._binaryType = e, this._receiver && (this._receiver._binaryType = e));
      }
      get bufferedAmount() {
        return this._socket ? this._socket._writableState.length + this._sender._bufferedBytes : this._bufferedAmount;
      }
      get extensions() {
        return Object.keys(this._extensions).join();
      }
      get isPaused() {
        return this._paused;
      }
      get onclose() {
        return null;
      }
      get onerror() {
        return null;
      }
      get onopen() {
        return null;
      }
      get onmessage() {
        return null;
      }
      get protocol() {
        return this._protocol;
      }
      get readyState() {
        return this._readyState;
      }
      get url() {
        return this._url;
      }
      setSocket(e, i, r) {
        let n = new Um({ binaryType: this.binaryType, extensions: this._extensions, isServer: this._isServer, maxPayload: r.maxPayload, skipUTF8Validation: r.skipUTF8Validation });
        this._sender = new Dm(e, this._extensions, r.generateMask), this._receiver = n, this._socket = e, n[De] = this, e[De] = this, n.on("conclude", Jm), n.on("drain", Qm), n.on("error", e0), n.on("message", t0), n.on("ping", i0), n.on("pong", r0), e.setTimeout(0), e.setNoDelay(), i.length > 0 && e.unshift(i), e.on("close", nu), e.on("data", ar), e.on("end", su), e.on("error", ou), this._readyState = t.OPEN, this.emit("open");
      }
      emitClose() {
        if (!this._socket) {
          this._readyState = t.CLOSED, this.emit("close", this._closeCode, this._closeMessage);
          return;
        }
        this._extensions[vt.extensionName] && this._extensions[vt.extensionName].cleanup(), this._receiver.removeAllListeners(), this._readyState = t.CLOSED, this.emit("close", this._closeCode, this._closeMessage);
      }
      close(e, i) {
        if (this.readyState !== t.CLOSED) {
          if (this.readyState === t.CONNECTING) {
            let r = "WebSocket was closed before the connection was established";
            return Ze(this, this._req, r);
          }
          if (this.readyState === t.CLOSING) {
            this._closeFrameSent && (this._closeFrameReceived || this._receiver._writableState.errorEmitted) && this._socket.end();
            return;
          }
          this._readyState = t.CLOSING, this._sender.close(e, i, !this._isServer, (r) => {
            r || (this._closeFrameSent = true, (this._closeFrameReceived || this._receiver._writableState.errorEmitted) && this._socket.end());
          }), this._closeTimer = setTimeout(this._socket.destroy.bind(this._socket), Km);
        }
      }
      pause() {
        this.readyState === t.CONNECTING || this.readyState === t.CLOSED || (this._paused = true, this._socket.pause());
      }
      ping(e, i, r) {
        if (this.readyState === t.CONNECTING)
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        if (typeof e == "function" ? (r = e, e = i = undefined) : typeof i == "function" && (r = i, i = undefined), typeof e == "number" && (e = e.toString()), this.readyState !== t.OPEN) {
          as(this, e, r);
          return;
        }
        i === undefined && (i = !this._isServer), this._sender.ping(e || or, i, r);
      }
      pong(e, i, r) {
        if (this.readyState === t.CONNECTING)
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        if (typeof e == "function" ? (r = e, e = i = undefined) : typeof i == "function" && (r = i, i = undefined), typeof e == "number" && (e = e.toString()), this.readyState !== t.OPEN) {
          as(this, e, r);
          return;
        }
        i === undefined && (i = !this._isServer), this._sender.pong(e || or, i, r);
      }
      resume() {
        this.readyState === t.CONNECTING || this.readyState === t.CLOSED || (this._paused = false, this._receiver._writableState.needDrain || this._socket.resume());
      }
      send(e, i, r) {
        if (this.readyState === t.CONNECTING)
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        if (typeof i == "function" && (r = i, i = {}), typeof e == "number" && (e = e.toString()), this.readyState !== t.OPEN) {
          as(this, e, r);
          return;
        }
        let n = { binary: typeof e != "string", mask: !this._isServer, compress: true, fin: true, ...i };
        this._extensions[vt.extensionName] || (n.compress = false), this._sender.send(e || or, n, r);
      }
      terminate() {
        if (this.readyState !== t.CLOSED) {
          if (this.readyState === t.CONNECTING) {
            let e = "WebSocket was closed before the connection was established";
            return Ze(this, this._req, e);
          }
          this._socket && (this._readyState = t.CLOSING, this._socket.destroy());
        }
      }
    };
    Object.defineProperty(Ce, "CONNECTING", { enumerable: true, value: ut.indexOf("CONNECTING") });
    Object.defineProperty(Ce.prototype, "CONNECTING", { enumerable: true, value: ut.indexOf("CONNECTING") });
    Object.defineProperty(Ce, "OPEN", { enumerable: true, value: ut.indexOf("OPEN") });
    Object.defineProperty(Ce.prototype, "OPEN", { enumerable: true, value: ut.indexOf("OPEN") });
    Object.defineProperty(Ce, "CLOSING", { enumerable: true, value: ut.indexOf("CLOSING") });
    Object.defineProperty(Ce.prototype, "CLOSING", { enumerable: true, value: ut.indexOf("CLOSING") });
    Object.defineProperty(Ce, "CLOSED", { enumerable: true, value: ut.indexOf("CLOSED") });
    Object.defineProperty(Ce.prototype, "CLOSED", { enumerable: true, value: ut.indexOf("CLOSED") });
    ["binaryType", "bufferedAmount", "extensions", "isPaused", "protocol", "readyState", "url"].forEach((t) => {
      Object.defineProperty(Ce.prototype, t, { enumerable: true });
    });
    ["open", "error", "close", "message"].forEach((t) => {
      Object.defineProperty(Ce.prototype, `on${t}`, { enumerable: true, get() {
        for (let e of this.listeners(t))
          if (e[ns])
            return e[qm];
        return null;
      }, set(e) {
        for (let i of this.listeners(t))
          if (i[ns]) {
            this.removeListener(t, i);
            break;
          }
        typeof e == "function" && this.addEventListener(t, e, { [ns]: true });
      } });
    });
    Ce.prototype.addEventListener = Vm;
    Ce.prototype.removeEventListener = $m;
    au.exports = Ce;
    function iu(t, e, i, r) {
      let n = { protocolVersion: ss[1], maxPayload: 104857600, skipUTF8Validation: false, perMessageDeflate: true, followRedirects: false, maxRedirects: 10, ...r, createConnection: undefined, socketPath: undefined, hostname: undefined, protocol: undefined, timeout: undefined, method: undefined, host: undefined, path: undefined, port: undefined };
      if (!ss.includes(n.protocolVersion))
        throw new RangeError(`Unsupported protocol version: ${n.protocolVersion} (supported versions: ${ss.join(", ")})`);
      let s;
      if (e instanceof rs)
        s = e, t._url = e.href;
      else {
        try {
          s = new rs(e);
        } catch {
          throw new SyntaxError(`Invalid URL: ${e}`);
        }
        t._url = e;
      }
      let o = s.protocol === "wss:", l = s.protocol === "ws+unix:", a;
      if (s.protocol !== "ws:" && !o && !l ? a = `The URL's protocol must be one of "ws:", "wss:", or "ws+unix:"` : l && !s.pathname ? a = "The URL's pathname is empty" : s.hash && (a = "The URL contains a fragment identifier"), a) {
        let m = new SyntaxError(a);
        if (t._redirects === 0)
          throw m;
        os(t, m);
        return;
      }
      let c = o ? 443 : 80, u = Nm(16).toString("base64"), f = o ? Lm.get : Pm.get, h = new Set, p;
      if (n.createConnection = o ? Xm : Zm, n.defaultPort = n.defaultPort || c, n.port = s.port || c, n.host = s.hostname.startsWith("[") ? s.hostname.slice(1, -1) : s.hostname, n.headers = { "Sec-WebSocket-Version": n.protocolVersion, "Sec-WebSocket-Key": u, Connection: "Upgrade", Upgrade: "websocket", ...n.headers }, n.path = s.pathname + s.search, n.timeout = n.handshakeTimeout, n.perMessageDeflate && (p = new vt(n.perMessageDeflate !== true ? n.perMessageDeflate : {}, false, n.maxPayload), n.headers["Sec-WebSocket-Extensions"] = Gm({ [vt.extensionName]: p.offer() })), i.length) {
        for (let m of i) {
          if (typeof m != "string" || !Ym.test(m) || h.has(m))
            throw new SyntaxError("An invalid or duplicated subprotocol was specified");
          h.add(m);
        }
        n.headers["Sec-WebSocket-Protocol"] = i.join(",");
      }
      if (n.origin && (n.protocolVersion < 13 ? n.headers["Sec-WebSocket-Origin"] = n.origin : n.headers.Origin = n.origin), (s.username || s.password) && (n.auth = `${s.username}:${s.password}`), l) {
        let m = n.path.split(":");
        n.socketPath = m[0], n.path = m[1];
      }
      let d = t._req = f(n);
      n.timeout && d.on("timeout", () => {
        Ze(t, d, "Opening handshake has timed out");
      }), d.on("error", (m) => {
        d === null || d.aborted || (d = t._req = null, os(t, m));
      }), d.on("response", (m) => {
        let v = m.headers.location, E = m.statusCode;
        if (v && n.followRedirects && E >= 300 && E < 400) {
          if (++t._redirects > n.maxRedirects) {
            Ze(t, d, "Maximum redirects exceeded");
            return;
          }
          d.abort();
          let I;
          try {
            I = new rs(v, e);
          } catch {
            let C = new SyntaxError(`Invalid URL: ${v}`);
            os(t, C);
            return;
          }
          iu(t, I, i, r);
        } else
          t.emit("unexpected-response", d, m) || Ze(t, d, `Unexpected server response: ${m.statusCode}`);
      }), d.on("upgrade", (m, v, E) => {
        if (t.emit("upgrade", m), t.readyState !== Ce.CONNECTING)
          return;
        d = t._req = null;
        let I = Mm("sha1").update(u + jm).digest("base64");
        if (m.headers["sec-websocket-accept"] !== I) {
          Ze(t, v, "Invalid Sec-WebSocket-Accept header");
          return;
        }
        let w = m.headers["sec-websocket-protocol"], C;
        if (w !== undefined ? h.size ? h.has(w) || (C = "Server sent an invalid subprotocol") : C = "Server sent a subprotocol but none was requested" : h.size && (C = "Server sent no subprotocol"), C) {
          Ze(t, v, C);
          return;
        }
        w && (t._protocol = w);
        let _ = m.headers["sec-websocket-extensions"];
        if (_ !== undefined) {
          if (!p) {
            Ze(t, v, "Server sent a Sec-WebSocket-Extensions header but no extension was requested");
            return;
          }
          let $;
          try {
            $ = zm(_);
          } catch {
            Ze(t, v, "Invalid Sec-WebSocket-Extensions header");
            return;
          }
          let k = Object.keys($);
          if (k.length !== 1 || k[0] !== vt.extensionName) {
            Ze(t, v, "Server indicated an extension that was not requested");
            return;
          }
          try {
            p.accept($[vt.extensionName]);
          } catch {
            Ze(t, v, "Invalid Sec-WebSocket-Extensions header");
            return;
          }
          t._extensions[vt.extensionName] = p;
        }
        t.setSocket(v, E, { generateMask: n.generateMask, maxPayload: n.maxPayload, skipUTF8Validation: n.skipUTF8Validation });
      });
    }
    function os(t, e) {
      t._readyState = Ce.CLOSING, t.emit("error", e), t.emitClose();
    }
    function Zm(t) {
      return t.path = t.socketPath, eu.connect(t);
    }
    function Xm(t) {
      return t.path = undefined, !t.servername && t.servername !== "" && (t.servername = eu.isIP(t.host) ? "" : t.host), Fm.connect(t);
    }
    function Ze(t, e, i) {
      t._readyState = Ce.CLOSING;
      let r = new Error(i);
      Error.captureStackTrace(r, Ze), e.setHeader ? (e.abort(), e.socket && !e.socket.destroyed && e.socket.destroy(), e.once("abort", t.emitClose.bind(t)), t.emit("error", r)) : (e.destroy(r), e.once("error", t.emit.bind(t, "error")), e.once("close", t.emitClose.bind(t)));
    }
    function as(t, e, i) {
      if (e) {
        let r = Wm(e).length;
        t._socket ? t._sender._bufferedBytes += r : t._bufferedAmount += r;
      }
      if (i) {
        let r = new Error(`WebSocket is not open: readyState ${t.readyState} (${ut[t.readyState]})`);
        i(r);
      }
    }
    function Jm(t, e) {
      let i = this[De];
      i._closeFrameReceived = true, i._closeMessage = e, i._closeCode = t, i._socket[De] !== undefined && (i._socket.removeListener("data", ar), process.nextTick(ru, i._socket), t === 1005 ? i.close() : i.close(t, e));
    }
    function Qm() {
      let t = this[De];
      t.isPaused || t._socket.resume();
    }
    function e0(t) {
      let e = this[De];
      e._socket[De] !== undefined && (e._socket.removeListener("data", ar), process.nextTick(ru, e._socket), e.close(t[Hm])), e.emit("error", t);
    }
    function Qc() {
      this[De].emitClose();
    }
    function t0(t, e) {
      this[De].emit("message", t, e);
    }
    function i0(t) {
      let e = this[De];
      e.pong(t, !e._isServer, tu), e.emit("ping", t);
    }
    function r0(t) {
      this[De].emit("pong", t);
    }
    function ru(t) {
      t.resume();
    }
    function nu() {
      let t = this[De];
      this.removeListener("close", nu), this.removeListener("data", ar), this.removeListener("end", su), t._readyState = Ce.CLOSING;
      let e;
      !this._readableState.endEmitted && !t._closeFrameReceived && !t._receiver._writableState.errorEmitted && (e = t._socket.read()) !== null && t._receiver.write(e), t._receiver.end(), this[De] = undefined, clearTimeout(t._closeTimer), t._receiver._writableState.finished || t._receiver._writableState.errorEmitted ? t.emitClose() : (t._receiver.on("error", Qc), t._receiver.on("finish", Qc));
    }
    function ar(t) {
      this[De]._receiver.write(t) || this.pause();
    }
    function su() {
      let t = this[De];
      t._readyState = Ce.CLOSING, t._receiver.end(), this.end();
    }
    function ou() {
      let t = this[De];
      this.removeListener("error", ou), this.on("error", tu), t && (t._readyState = Ce.CLOSING, this.destroy());
    }
  });
  var cu = y((Lv, lu) => {
    var { tokenChars: n0 } = Ii();
    function s0(t) {
      let e = new Set, i = -1, r = -1, n = 0;
      for (n;n < t.length; n++) {
        let o = t.charCodeAt(n);
        if (r === -1 && n0[o] === 1)
          i === -1 && (i = n);
        else if (n !== 0 && (o === 32 || o === 9))
          r === -1 && i !== -1 && (r = n);
        else if (o === 44) {
          if (i === -1)
            throw new SyntaxError(`Unexpected character at index ${n}`);
          r === -1 && (r = n);
          let l = t.slice(i, r);
          if (e.has(l))
            throw new SyntaxError(`The "${l}" subprotocol is duplicated`);
          e.add(l), i = r = -1;
        } else
          throw new SyntaxError(`Unexpected character at index ${n}`);
      }
      if (i === -1 || r !== -1)
        throw new SyntaxError("Unexpected end of input");
      let s = t.slice(i, n);
      if (e.has(s))
        throw new SyntaxError(`The "${s}" subprotocol is duplicated`);
      return e.add(s), e;
    }
    lu.exports = { parse: s0 };
  });
  var mu = y((Mv, du) => {
    var o0 = import.meta.require("events"), lr = import.meta.require("http"), Pv = import.meta.require("https"), Fv = import.meta.require("net"), Nv = import.meta.require("tls"), { createHash: a0 } = import.meta.require("crypto"), uu = is(), At = Oi(), l0 = cu(), c0 = ls(), { GUID: u0, kWebSocket: f0 } = mt(), h0 = /^[+/0-9A-Za-z]{22}==$/, fu = 0, hu = 1, pu = 2, cs = class extends o0 {
      constructor(e, i) {
        if (super(), e = { maxPayload: 100 * 1024 * 1024, skipUTF8Validation: false, perMessageDeflate: false, handleProtocols: null, clientTracking: true, verifyClient: null, noServer: false, backlog: null, server: null, host: null, path: null, port: null, ...e }, e.port == null && !e.server && !e.noServer || e.port != null && (e.server || e.noServer) || e.server && e.noServer)
          throw new TypeError('One and only one of the "port", "server", or "noServer" options must be specified');
        if (e.port != null ? (this._server = lr.createServer((r, n) => {
          let s = lr.STATUS_CODES[426];
          n.writeHead(426, { "Content-Length": s.length, "Content-Type": "text/plain" }), n.end(s);
        }), this._server.listen(e.port, e.host, e.backlog, i)) : e.server && (this._server = e.server), this._server) {
          let r = this.emit.bind(this, "connection");
          this._removeListeners = p0(this._server, { listening: this.emit.bind(this, "listening"), error: this.emit.bind(this, "error"), upgrade: (n, s, o) => {
            this.handleUpgrade(n, s, o, r);
          } });
        }
        e.perMessageDeflate === true && (e.perMessageDeflate = {}), e.clientTracking && (this.clients = new Set, this._shouldEmitClose = false), this.options = e, this._state = fu;
      }
      address() {
        if (this.options.noServer)
          throw new Error('The server is operating in "noServer" mode');
        return this._server ? this._server.address() : null;
      }
      close(e) {
        if (this._state === pu) {
          e && this.once("close", () => {
            e(new Error("The server is not running"));
          }), process.nextTick(Bi, this);
          return;
        }
        if (e && this.once("close", e), this._state !== hu)
          if (this._state = hu, this.options.noServer || this.options.server)
            this._server && (this._removeListeners(), this._removeListeners = this._server = null), this.clients ? this.clients.size ? this._shouldEmitClose = true : process.nextTick(Bi, this) : process.nextTick(Bi, this);
          else {
            let i = this._server;
            this._removeListeners(), this._removeListeners = this._server = null, i.close(() => {
              Bi(this);
            });
          }
      }
      shouldHandle(e) {
        if (this.options.path) {
          let i = e.url.indexOf("?");
          if ((i !== -1 ? e.url.slice(0, i) : e.url) !== this.options.path)
            return false;
        }
        return true;
      }
      handleUpgrade(e, i, r, n) {
        i.on("error", us);
        let s = e.headers["sec-websocket-key"] !== undefined ? e.headers["sec-websocket-key"] : false, o = +e.headers["sec-websocket-version"];
        if (e.method !== "GET" || e.headers.upgrade.toLowerCase() !== "websocket" || !s || !h0.test(s) || o !== 8 && o !== 13 || !this.shouldHandle(e))
          return ni(i, 400);
        let l = e.headers["sec-websocket-protocol"], a = new Set;
        if (l !== undefined)
          try {
            a = l0.parse(l);
          } catch {
            return ni(i, 400);
          }
        let c = e.headers["sec-websocket-extensions"], u = {};
        if (this.options.perMessageDeflate && c !== undefined) {
          let f = new At(this.options.perMessageDeflate, true, this.options.maxPayload);
          try {
            let h = uu.parse(c);
            h[At.extensionName] && (f.accept(h[At.extensionName]), u[At.extensionName] = f);
          } catch {
            return ni(i, 400);
          }
        }
        if (this.options.verifyClient) {
          let f = { origin: e.headers[`${o === 8 ? "sec-websocket-origin" : "origin"}`], secure: !!(e.socket.authorized || e.socket.encrypted), req: e };
          if (this.options.verifyClient.length === 2) {
            this.options.verifyClient(f, (h, p, d, m) => {
              if (!h)
                return ni(i, p || 401, d, m);
              this.completeUpgrade(u, s, a, e, i, r, n);
            });
            return;
          }
          if (!this.options.verifyClient(f))
            return ni(i, 401);
        }
        this.completeUpgrade(u, s, a, e, i, r, n);
      }
      completeUpgrade(e, i, r, n, s, o, l) {
        if (!s.readable || !s.writable)
          return s.destroy();
        if (s[f0])
          throw new Error("server.handleUpgrade() was called more than once with the same socket, possibly due to a misconfiguration");
        if (this._state > fu)
          return ni(s, 503);
        let c = ["HTTP/1.1 101 Switching Protocols", "Upgrade: websocket", "Connection: Upgrade", `Sec-WebSocket-Accept: ${a0("sha1").update(i + u0).digest("base64")}`], u = new c0(null);
        if (r.size) {
          let f = this.options.handleProtocols ? this.options.handleProtocols(r, n) : r.values().next().value;
          f && (c.push(`Sec-WebSocket-Protocol: ${f}`), u._protocol = f);
        }
        if (e[At.extensionName]) {
          let f = e[At.extensionName].params, h = uu.format({ [At.extensionName]: [f] });
          c.push(`Sec-WebSocket-Extensions: ${h}`), u._extensions = e;
        }
        this.emit("headers", c, n), s.write(c.concat(`\r
`).join(`\r
`)), s.removeListener("error", us), u.setSocket(s, o, { maxPayload: this.options.maxPayload, skipUTF8Validation: this.options.skipUTF8Validation }), this.clients && (this.clients.add(u), u.on("close", () => {
          this.clients.delete(u), this._shouldEmitClose && !this.clients.size && process.nextTick(Bi, this);
        })), l(u, n);
      }
    };
    du.exports = cs;
    function p0(t, e) {
      for (let i of Object.keys(e))
        t.on(i, e[i]);
      return function() {
        for (let r of Object.keys(e))
          t.removeListener(r, e[r]);
      };
    }
    function Bi(t) {
      t._state = pu, t.emit("close");
    }
    function us() {
      this.destroy();
    }
    function ni(t, e, i, r) {
      t.writable && (i = i || lr.STATUS_CODES[e], r = { Connection: "close", "Content-Type": "text/html", "Content-Length": Buffer.byteLength(i), ...r }, t.write(`HTTP/1.1 ${e} ${lr.STATUS_CODES[e]}\r
` + Object.keys(r).map((n) => `${n}: ${r[n]}`).join(`\r
`) + `\r
\r
` + i)), t.removeListener("error", us), t.destroy();
    }
  });
  var _u = y((Dv, xu) => {
    var xt = import.meta.require("constants"), m0 = process.cwd, cr = null, g0 = process.env.GRACEFUL_FS_PLATFORM || process.platform;
    process.cwd = function() {
      return cr || (cr = m0.call(process)), cr;
    };
    try {
      process.cwd();
    } catch {
    }
    typeof process.chdir == "function" && (ds = process.chdir, process.chdir = function(t) {
      cr = null, ds.call(process, t);
    }, Object.setPrototypeOf && Object.setPrototypeOf(process.chdir, ds));
    var ds;
    xu.exports = v0;
    function v0(t) {
      xt.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./) && e(t), t.lutimes || i(t), t.chown = s(t.chown), t.fchown = s(t.fchown), t.lchown = s(t.lchown), t.chmod = r(t.chmod), t.fchmod = r(t.fchmod), t.lchmod = r(t.lchmod), t.chownSync = o(t.chownSync), t.fchownSync = o(t.fchownSync), t.lchownSync = o(t.lchownSync), t.chmodSync = n(t.chmodSync), t.fchmodSync = n(t.fchmodSync), t.lchmodSync = n(t.lchmodSync), t.stat = l(t.stat), t.fstat = l(t.fstat), t.lstat = l(t.lstat), t.statSync = a(t.statSync), t.fstatSync = a(t.fstatSync), t.lstatSync = a(t.lstatSync), t.chmod && !t.lchmod && (t.lchmod = function(u, f, h) {
        h && process.nextTick(h);
      }, t.lchmodSync = function() {
      }), t.chown && !t.lchown && (t.lchown = function(u, f, h, p) {
        p && process.nextTick(p);
      }, t.lchownSync = function() {
      }), g0 === "win32" && (t.rename = typeof t.rename != "function" ? t.rename : function(u) {
        function f(h, p, d) {
          var m = Date.now(), v = 0;
          u(h, p, function E(I) {
            if (I && (I.code === "EACCES" || I.code === "EPERM") && Date.now() - m < 60000) {
              setTimeout(function() {
                t.stat(p, function(w, C) {
                  w && w.code === "ENOENT" ? u(h, p, E) : d(I);
                });
              }, v), v < 100 && (v += 10);
              return;
            }
            d && d(I);
          });
        }
        return Object.setPrototypeOf && Object.setPrototypeOf(f, u), f;
      }(t.rename)), t.read = typeof t.read != "function" ? t.read : function(u) {
        function f(h, p, d, m, v, E) {
          var I;
          if (E && typeof E == "function") {
            var w = 0;
            I = function(C, _, $) {
              if (C && C.code === "EAGAIN" && w < 10)
                return w++, u.call(t, h, p, d, m, v, I);
              E.apply(this, arguments);
            };
          }
          return u.call(t, h, p, d, m, v, I);
        }
        return Object.setPrototypeOf && Object.setPrototypeOf(f, u), f;
      }(t.read), t.readSync = typeof t.readSync != "function" ? t.readSync : function(u) {
        return function(f, h, p, d, m) {
          for (var v = 0;; )
            try {
              return u.call(t, f, h, p, d, m);
            } catch (E) {
              if (E.code === "EAGAIN" && v < 10) {
                v++;
                continue;
              }
              throw E;
            }
        };
      }(t.readSync);
      function e(u) {
        u.lchmod = function(f, h, p) {
          u.open(f, xt.O_WRONLY | xt.O_SYMLINK, h, function(d, m) {
            if (d) {
              p && p(d);
              return;
            }
            u.fchmod(m, h, function(v) {
              u.close(m, function(E) {
                p && p(v || E);
              });
            });
          });
        }, u.lchmodSync = function(f, h) {
          var p = u.openSync(f, xt.O_WRONLY | xt.O_SYMLINK, h), d = true, m;
          try {
            m = u.fchmodSync(p, h), d = false;
          } finally {
            if (d)
              try {
                u.closeSync(p);
              } catch {
              }
            else
              u.closeSync(p);
          }
          return m;
        };
      }
      function i(u) {
        xt.hasOwnProperty("O_SYMLINK") && u.futimes ? (u.lutimes = function(f, h, p, d) {
          u.open(f, xt.O_SYMLINK, function(m, v) {
            if (m) {
              d && d(m);
              return;
            }
            u.futimes(v, h, p, function(E) {
              u.close(v, function(I) {
                d && d(E || I);
              });
            });
          });
        }, u.lutimesSync = function(f, h, p) {
          var d = u.openSync(f, xt.O_SYMLINK), m, v = true;
          try {
            m = u.futimesSync(d, h, p), v = false;
          } finally {
            if (v)
              try {
                u.closeSync(d);
              } catch {
              }
            else
              u.closeSync(d);
          }
          return m;
        }) : u.futimes && (u.lutimes = function(f, h, p, d) {
          d && process.nextTick(d);
        }, u.lutimesSync = function() {
        });
      }
      function r(u) {
        return u && function(f, h, p) {
          return u.call(t, f, h, function(d) {
            c(d) && (d = null), p && p.apply(this, arguments);
          });
        };
      }
      function n(u) {
        return u && function(f, h) {
          try {
            return u.call(t, f, h);
          } catch (p) {
            if (!c(p))
              throw p;
          }
        };
      }
      function s(u) {
        return u && function(f, h, p, d) {
          return u.call(t, f, h, p, function(m) {
            c(m) && (m = null), d && d.apply(this, arguments);
          });
        };
      }
      function o(u) {
        return u && function(f, h, p) {
          try {
            return u.call(t, f, h, p);
          } catch (d) {
            if (!c(d))
              throw d;
          }
        };
      }
      function l(u) {
        return u && function(f, h, p) {
          typeof h == "function" && (p = h, h = null);
          function d(m, v) {
            v && (v.uid < 0 && (v.uid += 4294967296), v.gid < 0 && (v.gid += 4294967296)), p && p.apply(this, arguments);
          }
          return h ? u.call(t, f, h, d) : u.call(t, f, d);
        };
      }
      function a(u) {
        return u && function(f, h) {
          var p = h ? u.call(t, f, h) : u.call(t, f);
          return p && (p.uid < 0 && (p.uid += 4294967296), p.gid < 0 && (p.gid += 4294967296)), p;
        };
      }
      function c(u) {
        if (!u || u.code === "ENOSYS")
          return true;
        var f = !process.getuid || process.getuid() !== 0;
        return !!(f && (u.code === "EINVAL" || u.code === "EPERM"));
      }
    }
  });
  var wu = y((jv, bu) => {
    var yu = import.meta.require("stream").Stream;
    bu.exports = x0;
    function x0(t) {
      return { ReadStream: e, WriteStream: i };
      function e(r, n) {
        if (!(this instanceof e))
          return new e(r, n);
        yu.call(this);
        var s = this;
        this.path = r, this.fd = null, this.readable = true, this.paused = false, this.flags = "r", this.mode = 438, this.bufferSize = 64 * 1024, n = n || {};
        for (var o = Object.keys(n), l = 0, a = o.length;l < a; l++) {
          var c = o[l];
          this[c] = n[c];
        }
        if (this.encoding && this.setEncoding(this.encoding), this.start !== undefined) {
          if (typeof this.start != "number")
            throw TypeError("start must be a Number");
          if (this.end === undefined)
            this.end = 1 / 0;
          else if (typeof this.end != "number")
            throw TypeError("end must be a Number");
          if (this.start > this.end)
            throw new Error("start must be <= end");
          this.pos = this.start;
        }
        if (this.fd !== null) {
          process.nextTick(function() {
            s._read();
          });
          return;
        }
        t.open(this.path, this.flags, this.mode, function(u, f) {
          if (u) {
            s.emit("error", u), s.readable = false;
            return;
          }
          s.fd = f, s.emit("open", f), s._read();
        });
      }
      function i(r, n) {
        if (!(this instanceof i))
          return new i(r, n);
        yu.call(this), this.path = r, this.fd = null, this.writable = true, this.flags = "w", this.encoding = "binary", this.mode = 438, this.bytesWritten = 0, n = n || {};
        for (var s = Object.keys(n), o = 0, l = s.length;o < l; o++) {
          var a = s[o];
          this[a] = n[a];
        }
        if (this.start !== undefined) {
          if (typeof this.start != "number")
            throw TypeError("start must be a Number");
          if (this.start < 0)
            throw new Error("start must be >= zero");
          this.pos = this.start;
        }
        this.busy = false, this._queue = [], this.fd === null && (this._open = t.open, this._queue.push([this._open, this.path, this.flags, this.mode, undefined]), this.flush());
      }
    }
  });
  var Su = y((qv, Eu) => {
    Eu.exports = y0;
    var _0 = Object.getPrototypeOf || function(t) {
      return t.__proto__;
    };
    function y0(t) {
      if (t === null || typeof t != "object")
        return t;
      if (t instanceof Object)
        var e = { __proto__: _0(t) };
      else
        var e = Object.create(null);
      return Object.getOwnPropertyNames(t).forEach(function(i) {
        Object.defineProperty(e, i, Object.getOwnPropertyDescriptor(t, i));
      }), e;
    }
  });
  var Iu = y((Hv, vs) => {
    var ke = import.meta.require("fs"), b0 = _u(), w0 = wu(), E0 = Su(), ur = import.meta.require("util"), Ne, hr;
    typeof Symbol == "function" && typeof Symbol.for == "function" ? (Ne = Symbol.for("graceful-fs.queue"), hr = Symbol.for("graceful-fs.previous")) : (Ne = "___graceful-fs.queue", hr = "___graceful-fs.previous");
    function S0() {
    }
    function Ou(t, e) {
      Object.defineProperty(t, Ne, { get: function() {
        return e;
      } });
    }
    var Rt = S0;
    ur.debuglog ? Rt = ur.debuglog("gfs4") : /\bgfs4\b/i.test(process.env.NODE_DEBUG || "") && (Rt = function() {
      var t = ur.format.apply(ur, arguments);
      t = "GFS4: " + t.split(/\n/).join(`
GFS4: `), console.error(t);
    });
    ke[Ne] || (ku = global[Ne] || [], Ou(ke, ku), ke.close = function(t) {
      function e(i, r) {
        return t.call(ke, i, function(n) {
          n || Cu(), typeof r == "function" && r.apply(this, arguments);
        });
      }
      return Object.defineProperty(e, hr, { value: t }), e;
    }(ke.close), ke.closeSync = function(t) {
      function e(i) {
        t.apply(ke, arguments), Cu();
      }
      return Object.defineProperty(e, hr, { value: t }), e;
    }(ke.closeSync), /\bgfs4\b/i.test(process.env.NODE_DEBUG || "") && process.on("exit", function() {
      Rt(ke[Ne]), import.meta.require("assert").equal(ke[Ne].length, 0);
    }));
    var ku;
    global[Ne] || Ou(global, ke[Ne]);
    vs.exports = ms(E0(ke));
    process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !ke.__patched && (vs.exports = ms(ke), ke.__patched = true);
    function ms(t) {
      b0(t), t.gracefulify = ms, t.createReadStream = _, t.createWriteStream = $;
      var e = t.readFile;
      t.readFile = i;
      function i(b, T, B) {
        return typeof T == "function" && (B = T, T = null), G(b, T, B);
        function G(L, X, R, N) {
          return e(L, X, function(q) {
            q && (q.code === "EMFILE" || q.code === "ENFILE") ? si([G, [L, X, R], q, N || Date.now(), Date.now()]) : typeof R == "function" && R.apply(this, arguments);
          });
        }
      }
      var r = t.writeFile;
      t.writeFile = n;
      function n(b, T, B, G) {
        return typeof B == "function" && (G = B, B = null), L(b, T, B, G);
        function L(X, R, N, q, z) {
          return r(X, R, N, function(P) {
            P && (P.code === "EMFILE" || P.code === "ENFILE") ? si([L, [X, R, N, q], P, z || Date.now(), Date.now()]) : typeof q == "function" && q.apply(this, arguments);
          });
        }
      }
      var s = t.appendFile;
      s && (t.appendFile = o);
      function o(b, T, B, G) {
        return typeof B == "function" && (G = B, B = null), L(b, T, B, G);
        function L(X, R, N, q, z) {
          return s(X, R, N, function(P) {
            P && (P.code === "EMFILE" || P.code === "ENFILE") ? si([L, [X, R, N, q], P, z || Date.now(), Date.now()]) : typeof q == "function" && q.apply(this, arguments);
          });
        }
      }
      var l = t.copyFile;
      l && (t.copyFile = a);
      function a(b, T, B, G) {
        return typeof B == "function" && (G = B, B = 0), L(b, T, B, G);
        function L(X, R, N, q, z) {
          return l(X, R, N, function(P) {
            P && (P.code === "EMFILE" || P.code === "ENFILE") ? si([L, [X, R, N, q], P, z || Date.now(), Date.now()]) : typeof q == "function" && q.apply(this, arguments);
          });
        }
      }
      var c = t.readdir;
      t.readdir = f;
      var u = /^v[0-5]\./;
      function f(b, T, B) {
        typeof T == "function" && (B = T, T = null);
        var G = u.test(process.version) ? function(R, N, q, z) {
          return c(R, L(R, N, q, z));
        } : function(R, N, q, z) {
          return c(R, N, L(R, N, q, z));
        };
        return G(b, T, B);
        function L(X, R, N, q) {
          return function(z, P) {
            z && (z.code === "EMFILE" || z.code === "ENFILE") ? si([G, [X, R, N], z, q || Date.now(), Date.now()]) : (P && P.sort && P.sort(), typeof N == "function" && N.call(this, z, P));
          };
        }
      }
      if (process.version.substr(0, 4) === "v0.8") {
        var h = w0(t);
        E = h.ReadStream, w = h.WriteStream;
      }
      var p = t.ReadStream;
      p && (E.prototype = Object.create(p.prototype), E.prototype.open = I);
      var d = t.WriteStream;
      d && (w.prototype = Object.create(d.prototype), w.prototype.open = C), Object.defineProperty(t, "ReadStream", { get: function() {
        return E;
      }, set: function(b) {
        E = b;
      }, enumerable: true, configurable: true }), Object.defineProperty(t, "WriteStream", { get: function() {
        return w;
      }, set: function(b) {
        w = b;
      }, enumerable: true, configurable: true });
      var m = E;
      Object.defineProperty(t, "FileReadStream", { get: function() {
        return m;
      }, set: function(b) {
        m = b;
      }, enumerable: true, configurable: true });
      var v = w;
      Object.defineProperty(t, "FileWriteStream", { get: function() {
        return v;
      }, set: function(b) {
        v = b;
      }, enumerable: true, configurable: true });
      function E(b, T) {
        return this instanceof E ? (p.apply(this, arguments), this) : E.apply(Object.create(E.prototype), arguments);
      }
      function I() {
        var b = this;
        U(b.path, b.flags, b.mode, function(T, B) {
          T ? (b.autoClose && b.destroy(), b.emit("error", T)) : (b.fd = B, b.emit("open", B), b.read());
        });
      }
      function w(b, T) {
        return this instanceof w ? (d.apply(this, arguments), this) : w.apply(Object.create(w.prototype), arguments);
      }
      function C() {
        var b = this;
        U(b.path, b.flags, b.mode, function(T, B) {
          T ? (b.destroy(), b.emit("error", T)) : (b.fd = B, b.emit("open", B));
        });
      }
      function _(b, T) {
        return new t.ReadStream(b, T);
      }
      function $(b, T) {
        return new t.WriteStream(b, T);
      }
      var k = t.open;
      t.open = U;
      function U(b, T, B, G) {
        return typeof B == "function" && (G = B, B = null), L(b, T, B, G);
        function L(X, R, N, q, z) {
          return k(X, R, N, function(P, be) {
            P && (P.code === "EMFILE" || P.code === "ENFILE") ? si([L, [X, R, N, q], P, z || Date.now(), Date.now()]) : typeof q == "function" && q.apply(this, arguments);
          });
        }
      }
      return t;
    }
    function si(t) {
      Rt("ENQUEUE", t[0].name, t[1]), ke[Ne].push(t), gs();
    }
    var fr;
    function Cu() {
      for (var t = Date.now(), e = 0;e < ke[Ne].length; ++e)
        ke[Ne][e].length > 2 && (ke[Ne][e][3] = t, ke[Ne][e][4] = t);
      gs();
    }
    function gs() {
      if (clearTimeout(fr), fr = undefined, ke[Ne].length !== 0) {
        var t = ke[Ne].shift(), e = t[0], i = t[1], r = t[2], n = t[3], s = t[4];
        if (n === undefined)
          Rt("RETRY", e.name, i), e.apply(null, i);
        else if (Date.now() - n >= 60000) {
          Rt("TIMEOUT", e.name, i);
          var o = i.pop();
          typeof o == "function" && o.call(null, r);
        } else {
          var l = Date.now() - s, a = Math.max(s - n, 1), c = Math.min(a * 1.2, 100);
          l >= c ? (Rt("RETRY", e.name, i), e.apply(null, i.concat([n]))) : ke[Ne].push(t);
        }
        fr === undefined && (fr = setTimeout(gs, 0));
      }
    }
  });
  var Au = y((Vv, Tu) => {
    function Xe(t, e) {
      typeof e == "boolean" && (e = { forever: e }), this._originalTimeouts = JSON.parse(JSON.stringify(t)), this._timeouts = t, this._options = e || {}, this._maxRetryTime = e && e.maxRetryTime || 1 / 0, this._fn = null, this._errors = [], this._attempts = 1, this._operationTimeout = null, this._operationTimeoutCb = null, this._timeout = null, this._operationStart = null, this._options.forever && (this._cachedTimeouts = this._timeouts.slice(0));
    }
    Tu.exports = Xe;
    Xe.prototype.reset = function() {
      this._attempts = 1, this._timeouts = this._originalTimeouts;
    };
    Xe.prototype.stop = function() {
      this._timeout && clearTimeout(this._timeout), this._timeouts = [], this._cachedTimeouts = null;
    };
    Xe.prototype.retry = function(t) {
      if (this._timeout && clearTimeout(this._timeout), !t)
        return false;
      var e = new Date().getTime();
      if (t && e - this._operationStart >= this._maxRetryTime)
        return this._errors.unshift(new Error("RetryOperation timeout occurred")), false;
      this._errors.push(t);
      var i = this._timeouts.shift();
      if (i === undefined)
        if (this._cachedTimeouts)
          this._errors.splice(this._errors.length - 1, this._errors.length), this._timeouts = this._cachedTimeouts.slice(0), i = this._timeouts.shift();
        else
          return false;
      var r = this, n = setTimeout(function() {
        r._attempts++, r._operationTimeoutCb && (r._timeout = setTimeout(function() {
          r._operationTimeoutCb(r._attempts);
        }, r._operationTimeout), r._options.unref && r._timeout.unref()), r._fn(r._attempts);
      }, i);
      return this._options.unref && n.unref(), true;
    };
    Xe.prototype.attempt = function(t, e) {
      this._fn = t, e && (e.timeout && (this._operationTimeout = e.timeout), e.cb && (this._operationTimeoutCb = e.cb));
      var i = this;
      this._operationTimeoutCb && (this._timeout = setTimeout(function() {
        i._operationTimeoutCb();
      }, i._operationTimeout)), this._operationStart = new Date().getTime(), this._fn(this._attempts);
    };
    Xe.prototype.try = function(t) {
      console.log("Using RetryOperation.try() is deprecated"), this.attempt(t);
    };
    Xe.prototype.start = function(t) {
      console.log("Using RetryOperation.start() is deprecated"), this.attempt(t);
    };
    Xe.prototype.start = Xe.prototype.try;
    Xe.prototype.errors = function() {
      return this._errors;
    };
    Xe.prototype.attempts = function() {
      return this._attempts;
    };
    Xe.prototype.mainError = function() {
      if (this._errors.length === 0)
        return null;
      for (var t = {}, e = null, i = 0, r = 0;r < this._errors.length; r++) {
        var n = this._errors[r], s = n.message, o = (t[s] || 0) + 1;
        t[s] = o, o >= i && (e = n, i = o);
      }
      return e;
    };
  });
  var Ru = y((Bt) => {
    var k0 = Au();
    Bt.operation = function(t) {
      var e = Bt.timeouts(t);
      return new k0(e, { forever: t && t.forever, unref: t && t.unref, maxRetryTime: t && t.maxRetryTime });
    };
    Bt.timeouts = function(t) {
      if (t instanceof Array)
        return [].concat(t);
      var e = { retries: 10, factor: 2, minTimeout: 1 * 1000, maxTimeout: 1 / 0, randomize: false };
      for (var i in t)
        e[i] = t[i];
      if (e.minTimeout > e.maxTimeout)
        throw new Error("minTimeout is greater than maxTimeout");
      for (var r = [], n = 0;n < e.retries; n++)
        r.push(this.createTimeout(n, e));
      return t && t.forever && !r.length && r.push(this.createTimeout(n, e)), r.sort(function(s, o) {
        return s - o;
      }), r;
    };
    Bt.createTimeout = function(t, e) {
      var i = e.randomize ? Math.random() + 1 : 1, r = Math.round(i * e.minTimeout * Math.pow(e.factor, t));
      return r = Math.min(r, e.maxTimeout), r;
    };
    Bt.wrap = function(t, e, i) {
      if (e instanceof Array && (i = e, e = null), !i) {
        i = [];
        for (var r in t)
          typeof t[r] == "function" && i.push(r);
      }
      for (var n = 0;n < i.length; n++) {
        var s = i[n], o = t[s];
        t[s] = function(a) {
          var c = Bt.operation(e), u = Array.prototype.slice.call(arguments, 1), f = u.pop();
          u.push(function(h) {
            c.retry(h) || (h && (arguments[0] = c.mainError()), f.apply(this, arguments));
          }), c.attempt(function() {
            a.apply(t, u);
          });
        }.bind(t, o), t[s].options = e;
      }
    };
  });
  var Lu = y((Gv, Bu) => {
    Bu.exports = Ru();
  });
  var Pu = y((zv, pr) => {
    pr.exports = ["SIGABRT", "SIGALRM", "SIGHUP", "SIGINT", "SIGTERM"];
    process.platform !== "win32" && pr.exports.push("SIGVTALRM", "SIGXCPU", "SIGXFSZ", "SIGUSR2", "SIGTRAP", "SIGSYS", "SIGQUIT", "SIGIOT");
    process.platform === "linux" && pr.exports.push("SIGIO", "SIGPOLL", "SIGPWR", "SIGSTKFLT", "SIGUNUSED");
  });
  var Du = y((Wv, li) => {
    var Ee = global.process, Lt = function(t) {
      return t && typeof t == "object" && typeof t.removeListener == "function" && typeof t.emit == "function" && typeof t.reallyExit == "function" && typeof t.listeners == "function" && typeof t.kill == "function" && typeof t.pid == "number" && typeof t.on == "function";
    };
    Lt(Ee) ? (Fu = import.meta.require("assert"), oi = Pu(), Nu = /^win/i.test(Ee.platform), Li = import.meta.require("events"), typeof Li != "function" && (Li = Li.EventEmitter), Ee.__signal_exit_emitter__ ? Be = Ee.__signal_exit_emitter__ : (Be = Ee.__signal_exit_emitter__ = new Li, Be.count = 0, Be.emitted = {}), Be.infinite || (Be.setMaxListeners(1 / 0), Be.infinite = true), li.exports = function(t, e) {
      if (!Lt(global.process))
        return function() {
        };
      Fu.equal(typeof t, "function", "a callback must be provided for exit handler"), ai === false && xs();
      var i = "exit";
      e && e.alwaysLast && (i = "afterexit");
      var r = function() {
        Be.removeListener(i, t), Be.listeners("exit").length === 0 && Be.listeners("afterexit").length === 0 && dr();
      };
      return Be.on(i, t), r;
    }, dr = function() {
      !ai || !Lt(global.process) || (ai = false, oi.forEach(function(e) {
        try {
          Ee.removeListener(e, mr[e]);
        } catch {
        }
      }), Ee.emit = gr, Ee.reallyExit = _s, Be.count -= 1);
    }, li.exports.unload = dr, Pt = function(e, i, r) {
      Be.emitted[e] || (Be.emitted[e] = true, Be.emit(e, i, r));
    }, mr = {}, oi.forEach(function(t) {
      mr[t] = function() {
        if (Lt(global.process)) {
          var i = Ee.listeners(t);
          i.length === Be.count && (dr(), Pt("exit", null, t), Pt("afterexit", null, t), Nu && t === "SIGHUP" && (t = "SIGINT"), Ee.kill(Ee.pid, t));
        }
      };
    }), li.exports.signals = function() {
      return oi;
    }, ai = false, xs = function() {
      ai || !Lt(global.process) || (ai = true, Be.count += 1, oi = oi.filter(function(e) {
        try {
          return Ee.on(e, mr[e]), true;
        } catch {
          return false;
        }
      }), Ee.emit = Uu, Ee.reallyExit = Mu);
    }, li.exports.load = xs, _s = Ee.reallyExit, Mu = function(e) {
      Lt(global.process) && (Ee.exitCode = e || 0, Pt("exit", Ee.exitCode, null), Pt("afterexit", Ee.exitCode, null), _s.call(Ee, Ee.exitCode));
    }, gr = Ee.emit, Uu = function(e, i) {
      if (e === "exit" && Lt(global.process)) {
        i !== undefined && (Ee.exitCode = i);
        var r = gr.apply(this, arguments);
        return Pt("exit", Ee.exitCode, null), Pt("afterexit", Ee.exitCode, null), r;
      } else
        return gr.apply(this, arguments);
    }) : li.exports = function() {
      return function() {
      };
    };
    var Fu, oi, Nu, Li, Be, dr, Pt, mr, ai, xs, _s, Mu, gr, Uu;
  });
  var Wu = y((Yv, zu) => {
    var C0 = import.meta.require("path"), Vu = Iu(), O0 = Lu(), I0 = Du(), _t = {}, ju = Symbol();
    function T0(t, e, i) {
      let r = e[ju];
      if (r)
        return e.stat(t, (s, o) => {
          if (s)
            return i(s);
          i(null, o.mtime, r);
        });
      let n = new Date(Math.ceil(Date.now() / 1000) * 1000 + 5);
      e.utimes(t, n, n, (s) => {
        if (s)
          return i(s);
        e.stat(t, (o, l) => {
          if (o)
            return i(o);
          let a = l.mtime.getTime() % 1000 === 0 ? "s" : "ms";
          Object.defineProperty(e, ju, { value: a }), i(null, l.mtime, a);
        });
      });
    }
    function A0(t) {
      let e = Date.now();
      return t === "s" && (e = Math.ceil(e / 1000) * 1000), new Date(e);
    }
    function xr(t, e) {
      return e.lockfilePath || `${t}.lock`;
    }
    function $u(t, e, i) {
      if (!e.realpath)
        return i(null, C0.resolve(t));
      e.fs.realpath(t, i);
    }
    function bs(t, e, i) {
      let r = xr(t, e);
      e.fs.mkdir(r, (n) => {
        if (!n)
          return T0(r, e.fs, (s, o, l) => {
            if (s)
              return e.fs.rmdir(r, () => {
              }), i(s);
            i(null, o, l);
          });
        if (n.code !== "EEXIST")
          return i(n);
        if (e.stale <= 0)
          return i(Object.assign(new Error("Lock file is already being held"), { code: "ELOCKED", file: t }));
        e.fs.stat(r, (s, o) => {
          if (s)
            return s.code === "ENOENT" ? bs(t, { ...e, stale: 0 }, i) : i(s);
          if (!R0(o, e))
            return i(Object.assign(new Error("Lock file is already being held"), { code: "ELOCKED", file: t }));
          Gu(t, e, (l) => {
            if (l)
              return i(l);
            bs(t, { ...e, stale: 0 }, i);
          });
        });
      });
    }
    function R0(t, e) {
      return t.mtime.getTime() < Date.now() - e.stale;
    }
    function Gu(t, e, i) {
      e.fs.rmdir(xr(t, e), (r) => {
        if (r && r.code !== "ENOENT")
          return i(r);
        i();
      });
    }
    function vr(t, e) {
      let i = _t[t];
      i.updateTimeout || (i.updateDelay = i.updateDelay || e.update, i.updateTimeout = setTimeout(() => {
        i.updateTimeout = null, e.fs.stat(i.lockfilePath, (r, n) => {
          let s = i.lastUpdate + e.stale < Date.now();
          if (r)
            return r.code === "ENOENT" || s ? ys(t, i, Object.assign(r, { code: "ECOMPROMISED" })) : (i.updateDelay = 1000, vr(t, e));
          if (!(i.mtime.getTime() === n.mtime.getTime()))
            return ys(t, i, Object.assign(new Error("Unable to update lock within the stale threshold"), { code: "ECOMPROMISED" }));
          let l = A0(i.mtimePrecision);
          e.fs.utimes(i.lockfilePath, l, l, (a) => {
            let c = i.lastUpdate + e.stale < Date.now();
            if (!i.released) {
              if (a)
                return a.code === "ENOENT" || c ? ys(t, i, Object.assign(a, { code: "ECOMPROMISED" })) : (i.updateDelay = 1000, vr(t, e));
              i.mtime = l, i.lastUpdate = Date.now(), i.updateDelay = null, vr(t, e);
            }
          });
        });
      }, i.updateDelay), i.updateTimeout.unref && i.updateTimeout.unref());
    }
    function ys(t, e, i) {
      e.released = true, e.updateTimeout && clearTimeout(e.updateTimeout), _t[t] === e && delete _t[t], e.options.onCompromised(i);
    }
    function B0(t, e, i) {
      e = { stale: 1e4, update: null, realpath: true, retries: 0, fs: Vu, onCompromised: (r) => {
        throw r;
      }, ...e }, e.retries = e.retries || 0, e.retries = typeof e.retries == "number" ? { retries: e.retries } : e.retries, e.stale = Math.max(e.stale || 0, 2000), e.update = e.update == null ? e.stale / 2 : e.update || 0, e.update = Math.max(Math.min(e.update, e.stale / 2), 1000), $u(t, e, (r, n) => {
        if (r)
          return i(r);
        let s = O0.operation(e.retries);
        s.attempt(() => {
          bs(n, e, (o, l, a) => {
            if (s.retry(o))
              return;
            if (o)
              return i(s.mainError());
            let c = _t[n] = { lockfilePath: xr(n, e), mtime: l, mtimePrecision: a, options: e, lastUpdate: Date.now() };
            vr(n, e), i(null, (u) => {
              if (c.released)
                return u && u(Object.assign(new Error("Lock is already released"), { code: "ERELEASED" }));
              L0(n, { ...e, realpath: false }, u);
            });
          });
        });
      });
    }
    function L0(t, e, i) {
      e = { fs: Vu, realpath: true, ...e }, $u(t, e, (r, n) => {
        if (r)
          return i(r);
        let s = _t[n];
        if (!s)
          return i(Object.assign(new Error("Lock is not acquired/owned by you"), { code: "ENOTACQUIRED" }));
        s.updateTimeout && clearTimeout(s.updateTimeout), s.released = true, delete _t[n], Gu(n, e, i);
      });
    }
    function qu(t) {
      return (...e) => new Promise((i, r) => {
        e.push((n, s) => {
          n ? r(n) : i(s);
        }), t(...e);
      });
    }
    var Hu = false;
    function P0() {
      Hu || (Hu = true, I0(() => {
        for (let t in _t) {
          let e = _t[t].options;
          try {
            e.fs.rmdirSync(xr(t, e));
          } catch {
          }
        }
      }));
    }
    zu.exports.lock = async (t, e) => {
      P0();
      let i = await qu(B0)(t, e);
      return qu(i);
    };
  });
  var K0 = {};
  df(K0, { HttpsProxyAgent: () => nf.HttpsProxyAgent, PNG: () => sf.PNG, SocksProxyAgent: () => af.SocksProxyAgent, StackUtils: () => $0, colors: () => F0, debug: () => N0, getProxyForUrl: () => rf.getProxyForUrl, jpegjs: () => M0, lockfile: () => D0, mime: () => j0, minimatch: () => q0, open: () => H0, program: () => of.program, progress: () => V0, ws: () => G0, wsReceiver: () => W0, wsSender: () => Y0, wsServer: () => z0 });
  module.exports = mf(K0);
  var Yu = Te(co());
  var Ku = Te(Ht());
  var rf = Te(wo());
  var nf = Te(Ro());
  var Zu = Te(Uo());
  var Xu = Te(zo());
  var Ju = Te(pa());
  var Qu = Te(Oa());
  var sf = Te(wl());
  var of = Te(Fl());
  var ef = Te(jl());
  var af = Te(sc());
  var tf = Te(fc());
  var d0 = Te(mc(), 1);
  var fs = Te(Jn(), 1);
  var hs = Te(es(), 1);
  var gu = Te(ls(), 1);
  var ps = Te(mu(), 1);
  var vu = gu.default;
  var F0 = Yu.default;
  var N0 = Ku.default;
  var M0 = Zu.default;
  var U0 = Wu();
  var D0 = U0;
  var j0 = Xu.default;
  var q0 = Ju.default;
  var H0 = Qu.default;
  var V0 = ef.default;
  var $0 = tf.default;
  var G0 = vu;
  var z0 = ps.default;
  var W0 = fs.default;
  var Y0 = hs.default;
  /*! Bundled license information:
  
  progress/lib/node-progress.js:
    (*!
     * node-progress
     * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>
     * MIT Licensed
     *)
  */
});

// node_modules/playwright-core/lib/utilsBundle.js
var require_utilsBundle = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var parseStackTraceLine = function(line) {
    var _frame$file, _frame$file2;
    if (!process.env.PWDEBUGIMPL && nodeMajorVersion < 16 && nodeInternals.some((internal) => internal.test(line)))
      return null;
    const frame = stackUtils.parseLine(line);
    if (!frame)
      return null;
    if (!process.env.PWDEBUGIMPL && ((_frame$file = frame.file) !== null && _frame$file !== undefined && _frame$file.startsWith("internal") || (_frame$file2 = frame.file) !== null && _frame$file2 !== undefined && _frame$file2.startsWith("node:")))
      return null;
    if (!frame.file)
      return null;
    const file = frame.file.startsWith("file://") ? _url.default.fileURLToPath(frame.file) : _path.default.resolve(process.cwd(), frame.file);
    return {
      file,
      line: frame.line || 0,
      column: frame.column || 0,
      function: frame.function
    };
  };
  var ms = function(ms2) {
    if (!isFinite(ms2))
      return "-";
    if (ms2 === 0)
      return "0ms";
    if (ms2 < 1000)
      return ms2.toFixed(0) + "ms";
    const seconds = ms2 / 1000;
    if (seconds < 60)
      return seconds.toFixed(1) + "s";
    const minutes = seconds / 60;
    if (minutes < 60)
      return minutes.toFixed(1) + "m";
    const hours = minutes / 60;
    if (hours < 24)
      return hours.toFixed(1) + "h";
    const days = hours / 24;
    return days.toFixed(1) + "d";
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.minimatch = exports.mime = exports.lockfile = exports.jpegjs = exports.getProxyForUrl = exports.debug = exports.colors = exports.SocksProxyAgent = exports.PNG = exports.HttpsProxyAgent = undefined;
  exports.ms = ms;
  exports.open = undefined;
  exports.parseStackTraceLine = parseStackTraceLine;
  exports.wsServer = exports.wsSender = exports.wsReceiver = exports.ws = exports.progress = exports.program = undefined;
  var _url = _interopRequireDefault(import.meta.require("url"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var colors2 = exports.colors = require_utilsBundleImpl().colors;
  var debug2 = exports.debug = require_utilsBundleImpl().debug;
  var getProxyForUrl2 = exports.getProxyForUrl = require_utilsBundleImpl().getProxyForUrl;
  var HttpsProxyAgent2 = exports.HttpsProxyAgent = require_utilsBundleImpl().HttpsProxyAgent;
  var jpegjs2 = exports.jpegjs = require_utilsBundleImpl().jpegjs;
  var lockfile2 = exports.lockfile = require_utilsBundleImpl().lockfile;
  var mime2 = exports.mime = require_utilsBundleImpl().mime;
  var minimatch2 = exports.minimatch = require_utilsBundleImpl().minimatch;
  var open2 = exports.open = require_utilsBundleImpl().open;
  var PNG2 = exports.PNG = require_utilsBundleImpl().PNG;
  var program2 = exports.program = require_utilsBundleImpl().program;
  var progress2 = exports.progress = require_utilsBundleImpl().progress;
  var SocksProxyAgent2 = exports.SocksProxyAgent = require_utilsBundleImpl().SocksProxyAgent;
  var ws2 = exports.ws = require_utilsBundleImpl().ws;
  var wsServer2 = exports.wsServer = require_utilsBundleImpl().wsServer;
  var wsReceiver2 = exports.wsReceiver = require_utilsBundleImpl().wsReceiver;
  var wsSender2 = exports.wsSender = require_utilsBundleImpl().wsSender;
  var StackUtils2 = require_utilsBundleImpl().StackUtils;
  var stackUtils = new StackUtils2({
    internals: StackUtils2.nodeInternals()
  });
  var nodeInternals = StackUtils2.nodeInternals();
  var nodeMajorVersion = +process.versions.node.split(".")[0];
});

// node_modules/playwright-core/lib/utils/isomorphic/stringUtils.js
var require_stringUtils = __commonJS((exports) => {
  var escapeWithQuotes = function(text, char = "\'") {
    const stringified = JSON.stringify(text);
    const escapedText = stringified.substring(1, stringified.length - 1).replace(/\\"/g, '"');
    if (char === "\'")
      return char + escapedText.replace(/[']/g, "\\\'") + char;
    if (char === '"')
      return char + escapedText.replace(/["]/g, '\\"') + char;
    if (char === "`")
      return char + escapedText.replace(/[`]/g, "`") + char;
    throw new Error("Invalid escape char");
  };
  var isString = function(obj) {
    return typeof obj === "string" || obj instanceof String;
  };
  var toTitleCase = function(name) {
    return name.charAt(0).toUpperCase() + name.substring(1);
  };
  var toSnakeCase = function(name) {
    return name.replace(/([a-z0-9])([A-Z])/g, "$1_$2").replace(/([A-Z])([A-Z][a-z])/g, "$1_$2").toLowerCase();
  };
  var cssEscape = function(s) {
    let result = "";
    for (let i = 0;i < s.length; i++)
      result += cssEscapeOne(s, i);
    return result;
  };
  var quoteCSSAttributeValue = function(text) {
    return `"${cssEscape(text).replace(/\\ /g, " ")}"`;
  };
  var cssEscapeOne = function(s, i) {
    const c = s.charCodeAt(i);
    if (c === 0)
      return "\uFFFD";
    if (c >= 1 && c <= 31 || c >= 48 && c <= 57 && (i === 0 || i === 1 && s.charCodeAt(0) === 45))
      return "\\" + c.toString(16) + " ";
    if (i === 0 && c === 45 && s.length === 1)
      return "\\" + s.charAt(i);
    if (c >= 128 || c === 45 || c === 95 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122)
      return s.charAt(i);
    return "\\" + s.charAt(i);
  };
  var normalizeWhiteSpace = function(text) {
    return text.replace(/\u200b/g, "").trim().replace(/\s+/g, " ");
  };
  var normalizeEscapedRegexQuotes = function(source) {
    return source.replace(/(^|[^\\])(\\\\)*\\(['"`])/g, "$1$2$3");
  };
  var escapeRegexForSelector = function(re) {
    if (re.unicode || re.unicodeSets)
      return String(re);
    return String(re).replace(/(^|[^\\])(\\\\)*(["'`])/g, "$1$2\\$3").replace(/>>/g, "\\>\\>");
  };
  var escapeForTextSelector = function(text, exact) {
    if (typeof text !== "string")
      return escapeRegexForSelector(text);
    return `${JSON.stringify(text)}${exact ? "s" : "i"}`;
  };
  var escapeForAttributeSelector = function(value, exact) {
    if (typeof value !== "string")
      return escapeRegexForSelector(value);
    return `"${value.replace(/\\/g, "\\\\").replace(/["]/g, '\\"')}"${exact ? "s" : "i"}`;
  };
  var trimString = function(input, cap, suffix = "") {
    if (input.length <= cap)
      return input;
    const chars = [...input];
    if (chars.length > cap)
      return chars.slice(0, cap - suffix.length).join("") + suffix;
    return chars.join("");
  };
  var trimStringWithEllipsis = function(input, cap) {
    return trimString(input, cap, "\u2026");
  };
  var escapeRegExp = function(s) {
    return s.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.cssEscape = cssEscape;
  exports.escapeForAttributeSelector = escapeForAttributeSelector;
  exports.escapeForTextSelector = escapeForTextSelector;
  exports.escapeRegExp = escapeRegExp;
  exports.escapeWithQuotes = escapeWithQuotes;
  exports.isString = isString;
  exports.normalizeEscapedRegexQuotes = normalizeEscapedRegexQuotes;
  exports.normalizeWhiteSpace = normalizeWhiteSpace;
  exports.quoteCSSAttributeValue = quoteCSSAttributeValue;
  exports.toSnakeCase = toSnakeCase;
  exports.toTitleCase = toTitleCase;
  exports.trimString = trimString;
  exports.trimStringWithEllipsis = trimStringWithEllipsis;
});

// node_modules/playwright-core/lib/utils/rtti.js
var require_rtti = __commonJS((exports) => {
  var isRegExp = function(obj) {
    return obj instanceof RegExp || Object.prototype.toString.call(obj) === "[object RegExp]";
  };
  var isObject = function(obj) {
    return typeof obj === "object" && obj !== null;
  };
  var isError = function(obj) {
    var _Object$getPrototypeO;
    return obj instanceof Error || obj && ((_Object$getPrototypeO = Object.getPrototypeOf(obj)) === null || _Object$getPrototypeO === undefined ? undefined : _Object$getPrototypeO.name) === "Error";
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isError = isError;
  exports.isLikelyNpxGlobal = undefined;
  exports.isObject = isObject;
  exports.isRegExp = isRegExp;
  Object.defineProperty(exports, "isString", {
    enumerable: true,
    get: function() {
      return _stringUtils.isString;
    }
  });
  var _stringUtils = require_stringUtils();
  var isLikelyNpxGlobal = () => process.argv.length >= 2 && process.argv[1].includes("_npx");
  exports.isLikelyNpxGlobal = isLikelyNpxGlobal;
});

// node_modules/playwright-core/lib/utils/glob.js
var require_glob = __commonJS((exports) => {
  var globToRegex = function(glob) {
    const tokens = ["^"];
    let inGroup = false;
    for (let i = 0;i < glob.length; ++i) {
      const c = glob[i];
      if (c === "\\" && i + 1 < glob.length) {
        const char = glob[++i];
        tokens.push(escapedChars.has(char) ? "\\" + char : char);
        continue;
      }
      if (c === "*") {
        const beforeDeep = glob[i - 1];
        let starCount = 1;
        while (glob[i + 1] === "*") {
          starCount++;
          i++;
        }
        const afterDeep = glob[i + 1];
        const isDeep = starCount > 1 && (beforeDeep === "/" || beforeDeep === undefined) && (afterDeep === "/" || afterDeep === undefined);
        if (isDeep) {
          tokens.push("((?:[^/]*(?:/|$))*)");
          i++;
        } else {
          tokens.push("([^/]*)");
        }
        continue;
      }
      switch (c) {
        case "?":
          tokens.push(".");
          break;
        case "[":
          tokens.push("[");
          break;
        case "]":
          tokens.push("]");
          break;
        case "{":
          inGroup = true;
          tokens.push("(");
          break;
        case "}":
          inGroup = false;
          tokens.push(")");
          break;
        case ",":
          if (inGroup) {
            tokens.push("|");
            break;
          }
          tokens.push("\\" + c);
          break;
        default:
          tokens.push(escapedChars.has(c) ? "\\" + c : c);
      }
    }
    tokens.push("$");
    return new RegExp(tokens.join(""));
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.globToRegex = globToRegex;
  var escapedChars = new Set(["$", "^", "+", ".", "*", "(", ")", "|", "\\", "?", "{", "}", "[", "]"]);
});

// node_modules/playwright-core/lib/utils/ascii.js
var require_ascii = __commonJS((exports) => {
  var wrapInASCIIBox = function(text, padding = 0) {
    const lines = text.split("\n");
    const maxLength = Math.max(...lines.map((line) => line.length));
    return ["\u2554" + "\u2550".repeat(maxLength + padding * 2) + "\u2557", ...lines.map((line) => "\u2551" + " ".repeat(padding) + line + " ".repeat(maxLength - line.length + padding) + "\u2551"), "\u255A" + "\u2550".repeat(maxLength + padding * 2) + "\u255D"].join("\n");
  };
  var jsonStringifyForceASCII = function(object) {
    return JSON.stringify(object).replace(/[\u007f-\uffff]/g, (c) => "\\u" + ("0000" + c.charCodeAt(0).toString(16)).slice(-4));
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.jsonStringifyForceASCII = jsonStringifyForceASCII;
  exports.wrapInASCIIBox = wrapInASCIIBox;
});

// node_modules/playwright-core/lib/image_tools/colorUtils.js
var require_colorUtils = __commonJS((exports) => {
  var blendWithWhite = function(c, a) {
    return 255 + (c - 255) * a;
  };
  var rgb2gray = function(r, g, b) {
    return 77 * r + 150 * g + 29 * b + 128 >> 8;
  };
  var colorDeltaE94 = function(rgb1, rgb2) {
    const [l1, a1, b1] = xyz2lab(srgb2xyz(rgb1));
    const [l2, a2, b2] = xyz2lab(srgb2xyz(rgb2));
    const deltaL = l1 - l2;
    const deltaA = a1 - a2;
    const deltaB = b1 - b2;
    const c1 = Math.sqrt(a1 ** 2 + b1 ** 2);
    const c2 = Math.sqrt(a2 ** 2 + b2 ** 2);
    const deltaC = c1 - c2;
    let deltaH = deltaA ** 2 + deltaB ** 2 - deltaC ** 2;
    deltaH = deltaH < 0 ? 0 : Math.sqrt(deltaH);
    const k1 = 0.045;
    const k2 = 0.015;
    const kL = 1;
    const kC = 1;
    const kH = 1;
    const sC = 1 + k1 * c1;
    const sH = 1 + k2 * c1;
    const sL = 1;
    return Math.sqrt((deltaL / sL / kL) ** 2 + (deltaC / sC / kC) ** 2 + (deltaH / sH / kH) ** 2);
  };
  var srgb2xyz = function(rgb) {
    let r = rgb[0] / 255;
    let g = rgb[1] / 255;
    let b = rgb[2] / 255;
    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
    return [r * 0.4124 + g * 0.3576 + b * 0.1805, r * 0.2126 + g * 0.7152 + b * 0.0722, r * 0.0193 + g * 0.1192 + b * 0.9505];
  };
  var xyz2lab = function(xyz) {
    const x = xyz[0] / 0.950489;
    const y = xyz[1];
    const z = xyz[2] / 1.08884;
    const fx = x > sigma_pow3 ? x ** (1 / 3) : x / 3 / sigma_pow2 + 4 / 29;
    const fy = y > sigma_pow3 ? y ** (1 / 3) : y / 3 / sigma_pow2 + 4 / 29;
    const fz = z > sigma_pow3 ? z ** (1 / 3) : z / 3 / sigma_pow2 + 4 / 29;
    const l = 116 * fy - 16;
    const a = 500 * (fx - fy);
    const b = 200 * (fy - fz);
    return [l, a, b];
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.blendWithWhite = blendWithWhite;
  exports.colorDeltaE94 = colorDeltaE94;
  exports.rgb2gray = rgb2gray;
  exports.srgb2xyz = srgb2xyz;
  exports.xyz2lab = xyz2lab;
  var sigma_pow2 = 6 * 6 / 29 / 29;
  var sigma_pow3 = 6 * 6 * 6 / 29 / 29 / 29;
});

// node_modules/playwright-core/lib/image_tools/imageChannel.js
var require_imageChannel = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ImageChannel = undefined;
  var _colorUtils = require_colorUtils();

  class ImageChannel {
    static intoRGB(width, height, data, options = {}) {
      const {
        paddingSize = 0,
        paddingColorOdd = [255, 0, 255],
        paddingColorEven = [0, 255, 0]
      } = options;
      const newWidth = width + 2 * paddingSize;
      const newHeight = height + 2 * paddingSize;
      const r = new Uint8Array(newWidth * newHeight);
      const g = new Uint8Array(newWidth * newHeight);
      const b = new Uint8Array(newWidth * newHeight);
      for (let y = 0;y < newHeight; ++y) {
        for (let x = 0;x < newWidth; ++x) {
          const index = y * newWidth + x;
          if (y >= paddingSize && y < newHeight - paddingSize && x >= paddingSize && x < newWidth - paddingSize) {
            const offset = ((y - paddingSize) * width + (x - paddingSize)) * 4;
            const alpha = data[offset + 3] === 255 ? 1 : data[offset + 3] / 255;
            r[index] = (0, _colorUtils.blendWithWhite)(data[offset], alpha);
            g[index] = (0, _colorUtils.blendWithWhite)(data[offset + 1], alpha);
            b[index] = (0, _colorUtils.blendWithWhite)(data[offset + 2], alpha);
          } else {
            const color = (y + x) % 2 === 0 ? paddingColorEven : paddingColorOdd;
            r[index] = color[0];
            g[index] = color[1];
            b[index] = color[2];
          }
        }
      }
      return [new ImageChannel(newWidth, newHeight, r), new ImageChannel(newWidth, newHeight, g), new ImageChannel(newWidth, newHeight, b)];
    }
    constructor(width, height, data) {
      this.data = undefined;
      this.width = undefined;
      this.height = undefined;
      this.data = data;
      this.width = width;
      this.height = height;
    }
    get(x, y) {
      return this.data[y * this.width + x];
    }
    boundXY(x, y) {
      return [Math.min(Math.max(x, 0), this.width - 1), Math.min(Math.max(y, 0), this.height - 1)];
    }
  }
  exports.ImageChannel = ImageChannel;
});

// node_modules/playwright-core/lib/image_tools/stats.js
var require_stats = __commonJS((exports) => {
  var ssim = function(stats, x1, y1, x2, y2) {
    const mean1 = stats.meanC1(x1, y1, x2, y2);
    const mean2 = stats.meanC2(x1, y1, x2, y2);
    const var1 = stats.varianceC1(x1, y1, x2, y2);
    const var2 = stats.varianceC2(x1, y1, x2, y2);
    const cov = stats.covariance(x1, y1, x2, y2);
    const c1 = (0.01 * DYNAMIC_RANGE) ** 2;
    const c2 = (0.03 * DYNAMIC_RANGE) ** 2;
    return (2 * mean1 * mean2 + c1) * (2 * cov + c2) / (mean1 ** 2 + mean2 ** 2 + c1) / (var1 + var2 + c2);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FastStats = undefined;
  exports.ssim = ssim;
  var DYNAMIC_RANGE = 2 ** 8 - 1;

  class FastStats {
    constructor(c1, c2) {
      this.c1 = undefined;
      this.c2 = undefined;
      this._partialSumC1 = undefined;
      this._partialSumC2 = undefined;
      this._partialSumMult = undefined;
      this._partialSumSq1 = undefined;
      this._partialSumSq2 = undefined;
      this.c1 = c1;
      this.c2 = c2;
      const {
        width,
        height
      } = c1;
      this._partialSumC1 = new Array(width * height);
      this._partialSumC2 = new Array(width * height);
      this._partialSumSq1 = new Array(width * height);
      this._partialSumSq2 = new Array(width * height);
      this._partialSumMult = new Array(width * height);
      const recalc = (mx, idx, initial, x, y) => {
        mx[idx] = initial;
        if (y > 0)
          mx[idx] += mx[(y - 1) * width + x];
        if (x > 0)
          mx[idx] += mx[y * width + x - 1];
        if (x > 0 && y > 0)
          mx[idx] -= mx[(y - 1) * width + x - 1];
      };
      for (let y = 0;y < height; ++y) {
        for (let x = 0;x < width; ++x) {
          const idx = y * width + x;
          recalc(this._partialSumC1, idx, this.c1.data[idx], x, y);
          recalc(this._partialSumC2, idx, this.c2.data[idx], x, y);
          recalc(this._partialSumSq1, idx, this.c1.data[idx] * this.c1.data[idx], x, y);
          recalc(this._partialSumSq2, idx, this.c2.data[idx] * this.c2.data[idx], x, y);
          recalc(this._partialSumMult, idx, this.c1.data[idx] * this.c2.data[idx], x, y);
        }
      }
    }
    _sum(partialSum, x1, y1, x2, y2) {
      const width = this.c1.width;
      let result = partialSum[y2 * width + x2];
      if (y1 > 0)
        result -= partialSum[(y1 - 1) * width + x2];
      if (x1 > 0)
        result -= partialSum[y2 * width + x1 - 1];
      if (x1 > 0 && y1 > 0)
        result += partialSum[(y1 - 1) * width + x1 - 1];
      return result;
    }
    meanC1(x1, y1, x2, y2) {
      const N = (y2 - y1 + 1) * (x2 - x1 + 1);
      return this._sum(this._partialSumC1, x1, y1, x2, y2) / N;
    }
    meanC2(x1, y1, x2, y2) {
      const N = (y2 - y1 + 1) * (x2 - x1 + 1);
      return this._sum(this._partialSumC2, x1, y1, x2, y2) / N;
    }
    varianceC1(x1, y1, x2, y2) {
      const N = (y2 - y1 + 1) * (x2 - x1 + 1);
      return (this._sum(this._partialSumSq1, x1, y1, x2, y2) - this._sum(this._partialSumC1, x1, y1, x2, y2) ** 2 / N) / N;
    }
    varianceC2(x1, y1, x2, y2) {
      const N = (y2 - y1 + 1) * (x2 - x1 + 1);
      return (this._sum(this._partialSumSq2, x1, y1, x2, y2) - this._sum(this._partialSumC2, x1, y1, x2, y2) ** 2 / N) / N;
    }
    covariance(x1, y1, x2, y2) {
      const N = (y2 - y1 + 1) * (x2 - x1 + 1);
      return (this._sum(this._partialSumMult, x1, y1, x2, y2) - this._sum(this._partialSumC1, x1, y1, x2, y2) * this._sum(this._partialSumC2, x1, y1, x2, y2) / N) / N;
    }
  }
  exports.FastStats = FastStats;
});

// node_modules/playwright-core/lib/image_tools/compare.js
var require_compare = __commonJS((exports) => {
  var drawPixel = function(width, data, x, y, r, g, b) {
    const idx = (y * width + x) * 4;
    data[idx + 0] = r;
    data[idx + 1] = g;
    data[idx + 2] = b;
    data[idx + 3] = 255;
  };
  var compare = function(actual, expected, diff, width, height, options = {}) {
    const {
      maxColorDeltaE94 = 1
    } = options;
    const paddingSize = Math.max(VARIANCE_WINDOW_RADIUS, SSIM_WINDOW_RADIUS);
    const paddingColorEven = [255, 0, 255];
    const paddingColorOdd = [0, 255, 0];
    const [r1, g1, b1] = _imageChannel.ImageChannel.intoRGB(width, height, expected, {
      paddingSize,
      paddingColorEven,
      paddingColorOdd
    });
    const [r2, g2, b2] = _imageChannel.ImageChannel.intoRGB(width, height, actual, {
      paddingSize,
      paddingColorEven,
      paddingColorOdd
    });
    const noop = (x, y) => {
    };
    const drawRedPixel = diff ? (x, y) => drawPixel(width, diff, x - paddingSize, y - paddingSize, 255, 0, 0) : noop;
    const drawYellowPixel = diff ? (x, y) => drawPixel(width, diff, x - paddingSize, y - paddingSize, 255, 255, 0) : noop;
    const drawGrayPixel = diff ? (x, y) => {
      const gray = (0, _colorUtils.rgb2gray)(r1.get(x, y), g1.get(x, y), b1.get(x, y));
      const value = (0, _colorUtils.blendWithWhite)(gray, 0.1);
      drawPixel(width, diff, x - paddingSize, y - paddingSize, value, value, value);
    } : noop;
    let fastR, fastG, fastB;
    let diffCount = 0;
    for (let y = paddingSize;y < r1.height - paddingSize; ++y) {
      for (let x = paddingSize;x < r1.width - paddingSize; ++x) {
        if (r1.get(x, y) === r2.get(x, y) && g1.get(x, y) === g2.get(x, y) && b1.get(x, y) === b2.get(x, y)) {
          drawGrayPixel(x, y);
          continue;
        }
        const delta = (0, _colorUtils.colorDeltaE94)([r1.get(x, y), g1.get(x, y), b1.get(x, y)], [r2.get(x, y), g2.get(x, y), b2.get(x, y)]);
        if (delta <= maxColorDeltaE94) {
          drawGrayPixel(x, y);
          continue;
        }
        if (!fastR || !fastG || !fastB) {
          fastR = new _stats.FastStats(r1, r2);
          fastG = new _stats.FastStats(g1, g2);
          fastB = new _stats.FastStats(b1, b2);
        }
        const [varX1, varY1] = r1.boundXY(x - VARIANCE_WINDOW_RADIUS, y - VARIANCE_WINDOW_RADIUS);
        const [varX2, varY2] = r1.boundXY(x + VARIANCE_WINDOW_RADIUS, y + VARIANCE_WINDOW_RADIUS);
        const var1 = fastR.varianceC1(varX1, varY1, varX2, varY2) + fastG.varianceC1(varX1, varY1, varX2, varY2) + fastB.varianceC1(varX1, varY1, varX2, varY2);
        const var2 = fastR.varianceC2(varX1, varY1, varX2, varY2) + fastG.varianceC2(varX1, varY1, varX2, varY2) + fastB.varianceC2(varX1, varY1, varX2, varY2);
        if (var1 === 0 || var2 === 0) {
          drawRedPixel(x, y);
          ++diffCount;
          continue;
        }
        const [ssimX1, ssimY1] = r1.boundXY(x - SSIM_WINDOW_RADIUS, y - SSIM_WINDOW_RADIUS);
        const [ssimX2, ssimY2] = r1.boundXY(x + SSIM_WINDOW_RADIUS, y + SSIM_WINDOW_RADIUS);
        const ssimRGB = ((0, _stats.ssim)(fastR, ssimX1, ssimY1, ssimX2, ssimY2) + (0, _stats.ssim)(fastG, ssimX1, ssimY1, ssimX2, ssimY2) + (0, _stats.ssim)(fastB, ssimX1, ssimY1, ssimX2, ssimY2)) / 3;
        const isAntialiased = ssimRGB >= 0.99;
        if (isAntialiased) {
          drawYellowPixel(x, y);
        } else {
          drawRedPixel(x, y);
          ++diffCount;
        }
      }
    }
    return diffCount;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.compare = compare;
  var _colorUtils = require_colorUtils();
  var _imageChannel = require_imageChannel();
  var _stats = require_stats();
  var SSIM_WINDOW_RADIUS = 15;
  var VARIANCE_WINDOW_RADIUS = 1;
});

// node_modules/playwright-core/lib/third_party/pixelmatch.js
var require_pixelmatch = __commonJS((exports, module) => {
  var pixelmatch = function(img1, img2, output, width, height, options) {
    if (!isPixelData(img1) || !isPixelData(img2) || output && !isPixelData(output))
      throw new Error("Image data: Uint8Array, Uint8ClampedArray or Buffer expected.");
    if (img1.length !== img2.length || output && output.length !== img1.length)
      throw new Error("Image sizes do not match.");
    if (img1.length !== width * height * 4)
      throw new Error("Image data size does not match width/height.");
    options = Object.assign({}, defaultOptions, options);
    const len = width * height;
    const a32 = new Uint32Array(img1.buffer, img1.byteOffset, len);
    const b32 = new Uint32Array(img2.buffer, img2.byteOffset, len);
    let identical = true;
    for (let i = 0;i < len; i++) {
      if (a32[i] !== b32[i]) {
        identical = false;
        break;
      }
    }
    if (identical) {
      if (output && !options.diffMask) {
        for (let i = 0;i < len; i++)
          drawGrayPixel(img1, 4 * i, options.alpha, output);
      }
      return 0;
    }
    const maxDelta = 35215 * options.threshold * options.threshold;
    let diff = 0;
    for (let y = 0;y < height; y++) {
      for (let x = 0;x < width; x++) {
        const pos = (y * width + x) * 4;
        const delta = colorDelta(img1, img2, pos, pos);
        if (Math.abs(delta) > maxDelta) {
          if (!options.includeAA && (antialiased(img1, x, y, width, height, img2) || antialiased(img2, x, y, width, height, img1))) {
            if (output && !options.diffMask)
              drawPixel(output, pos, ...options.aaColor);
          } else {
            if (output) {
              drawPixel(output, pos, ...delta < 0 && options.diffColorAlt || options.diffColor);
            }
            diff++;
          }
        } else if (output) {
          if (!options.diffMask)
            drawGrayPixel(img1, pos, options.alpha, output);
        }
      }
    }
    return diff;
  };
  var isPixelData = function(arr) {
    return ArrayBuffer.isView(arr) && arr.constructor.BYTES_PER_ELEMENT === 1;
  };
  var antialiased = function(img, x1, y1, width, height, img2) {
    const x0 = Math.max(x1 - 1, 0);
    const y0 = Math.max(y1 - 1, 0);
    const x2 = Math.min(x1 + 1, width - 1);
    const y2 = Math.min(y1 + 1, height - 1);
    const pos = (y1 * width + x1) * 4;
    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;
    let min = 0;
    let max = 0;
    let minX, minY, maxX, maxY;
    for (let x = x0;x <= x2; x++) {
      for (let y = y0;y <= y2; y++) {
        if (x === x1 && y === y1)
          continue;
        const delta = colorDelta(img, img, pos, (y * width + x) * 4, true);
        if (delta === 0) {
          zeroes++;
          if (zeroes > 2)
            return false;
        } else if (delta < min) {
          min = delta;
          minX = x;
          minY = y;
        } else if (delta > max) {
          max = delta;
          maxX = x;
          maxY = y;
        }
      }
    }
    if (min === 0 || max === 0)
      return false;
    return hasManySiblings(img, minX, minY, width, height) && hasManySiblings(img2, minX, minY, width, height) || hasManySiblings(img, maxX, maxY, width, height) && hasManySiblings(img2, maxX, maxY, width, height);
  };
  var hasManySiblings = function(img, x1, y1, width, height) {
    const x0 = Math.max(x1 - 1, 0);
    const y0 = Math.max(y1 - 1, 0);
    const x2 = Math.min(x1 + 1, width - 1);
    const y2 = Math.min(y1 + 1, height - 1);
    const pos = (y1 * width + x1) * 4;
    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;
    for (let x = x0;x <= x2; x++) {
      for (let y = y0;y <= y2; y++) {
        if (x === x1 && y === y1)
          continue;
        const pos2 = (y * width + x) * 4;
        if (img[pos] === img[pos2] && img[pos + 1] === img[pos2 + 1] && img[pos + 2] === img[pos2 + 2] && img[pos + 3] === img[pos2 + 3])
          zeroes++;
        if (zeroes > 2)
          return true;
      }
    }
    return false;
  };
  var colorDelta = function(img1, img2, k, m, yOnly) {
    let r1 = img1[k + 0];
    let g1 = img1[k + 1];
    let b1 = img1[k + 2];
    let a1 = img1[k + 3];
    let r2 = img2[m + 0];
    let g2 = img2[m + 1];
    let b2 = img2[m + 2];
    let a2 = img2[m + 3];
    if (a1 === a2 && r1 === r2 && g1 === g2 && b1 === b2)
      return 0;
    if (a1 < 255) {
      a1 /= 255;
      r1 = blend(r1, a1);
      g1 = blend(g1, a1);
      b1 = blend(b1, a1);
    }
    if (a2 < 255) {
      a2 /= 255;
      r2 = blend(r2, a2);
      g2 = blend(g2, a2);
      b2 = blend(b2, a2);
    }
    const y1 = rgb2y(r1, g1, b1);
    const y2 = rgb2y(r2, g2, b2);
    const y = y1 - y2;
    if (yOnly)
      return y;
    const i = rgb2i(r1, g1, b1) - rgb2i(r2, g2, b2);
    const q = rgb2q(r1, g1, b1) - rgb2q(r2, g2, b2);
    const delta = 0.5053 * y * y + 0.299 * i * i + 0.1957 * q * q;
    return y1 > y2 ? -delta : delta;
  };
  var rgb2y = function(r, g, b) {
    return r * 0.29889531 + g * 0.58662247 + b * 0.11448223;
  };
  var rgb2i = function(r, g, b) {
    return r * 0.59597799 - g * 0.2741761 - b * 0.32180189;
  };
  var rgb2q = function(r, g, b) {
    return r * 0.21147017 - g * 0.52261711 + b * 0.31114694;
  };
  var blend = function(c, a) {
    return 255 + (c - 255) * a;
  };
  var drawPixel = function(output, pos, r, g, b) {
    output[pos + 0] = r;
    output[pos + 1] = g;
    output[pos + 2] = b;
    output[pos + 3] = 255;
  };
  var drawGrayPixel = function(img, i, alpha, output) {
    const r = img[i + 0];
    const g = img[i + 1];
    const b = img[i + 2];
    const val = blend(rgb2y(r, g, b), alpha * img[i + 3] / 255);
    drawPixel(output, i, val, val, val);
  };
  module.exports = pixelmatch;
  var defaultOptions = {
    threshold: 0.1,
    includeAA: false,
    alpha: 0.1,
    aaColor: [255, 255, 0],
    diffColor: [255, 0, 0],
    diffColorAlt: null,
    diffMask: false
  };
});

// node_modules/playwright-core/lib/third_party/diff_match_patch.js
var require_diff_match_patch = __commonJS((exports, module) => {
  var diff_match_patch = function() {
    this.Diff_Timeout = 1;
    this.Diff_EditCost = 4;
    this.Match_Threshold = 0.5;
    this.Match_Distance = 1000;
    this.Patch_DeleteThreshold = 0.5;
    this.Patch_Margin = 4;
    this.Match_MaxBits = 32;
  };
  var DIFF_DELETE = -1;
  var DIFF_INSERT = 1;
  var DIFF_EQUAL = 0;
  diff_match_patch.Diff = function(op, text) {
    this[0] = op;
    this[1] = text;
  };
  diff_match_patch.Diff.prototype.length = 2;
  diff_match_patch.Diff.prototype.toString = function() {
    return this[0] + "," + this[1];
  };
  diff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines, opt_deadline) {
    if (typeof opt_deadline == "undefined") {
      if (this.Diff_Timeout <= 0) {
        opt_deadline = Number.MAX_VALUE;
      } else {
        opt_deadline = new Date().getTime() + this.Diff_Timeout * 1000;
      }
    }
    var deadline = opt_deadline;
    if (text1 == null || text2 == null) {
      throw new Error("Null input. (diff_main)");
    }
    if (text1 == text2) {
      if (text1) {
        return [new diff_match_patch.Diff(DIFF_EQUAL, text1)];
      }
      return [];
    }
    if (typeof opt_checklines == "undefined") {
      opt_checklines = true;
    }
    var checklines = opt_checklines;
    var commonlength = this.diff_commonPrefix(text1, text2);
    var commonprefix = text1.substring(0, commonlength);
    text1 = text1.substring(commonlength);
    text2 = text2.substring(commonlength);
    commonlength = this.diff_commonSuffix(text1, text2);
    var commonsuffix = text1.substring(text1.length - commonlength);
    text1 = text1.substring(0, text1.length - commonlength);
    text2 = text2.substring(0, text2.length - commonlength);
    var diffs = this.diff_compute_(text1, text2, checklines, deadline);
    if (commonprefix) {
      diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, commonprefix));
    }
    if (commonsuffix) {
      diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, commonsuffix));
    }
    this.diff_cleanupMerge(diffs);
    return diffs;
  };
  diff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines, deadline) {
    var diffs;
    if (!text1) {
      return [new diff_match_patch.Diff(DIFF_INSERT, text2)];
    }
    if (!text2) {
      return [new diff_match_patch.Diff(DIFF_DELETE, text1)];
    }
    var longtext = text1.length > text2.length ? text1 : text2;
    var shorttext = text1.length > text2.length ? text2 : text1;
    var i = longtext.indexOf(shorttext);
    if (i != -1) {
      diffs = [
        new diff_match_patch.Diff(DIFF_INSERT, longtext.substring(0, i)),
        new diff_match_patch.Diff(DIFF_EQUAL, shorttext),
        new diff_match_patch.Diff(DIFF_INSERT, longtext.substring(i + shorttext.length))
      ];
      if (text1.length > text2.length) {
        diffs[0][0] = diffs[2][0] = DIFF_DELETE;
      }
      return diffs;
    }
    if (shorttext.length == 1) {
      return [
        new diff_match_patch.Diff(DIFF_DELETE, text1),
        new diff_match_patch.Diff(DIFF_INSERT, text2)
      ];
    }
    var hm = this.diff_halfMatch_(text1, text2);
    if (hm) {
      var text1_a = hm[0];
      var text1_b = hm[1];
      var text2_a = hm[2];
      var text2_b = hm[3];
      var mid_common = hm[4];
      var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);
      var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);
      return diffs_a.concat([new diff_match_patch.Diff(DIFF_EQUAL, mid_common)], diffs_b);
    }
    if (checklines && text1.length > 100 && text2.length > 100) {
      return this.diff_lineMode_(text1, text2, deadline);
    }
    return this.diff_bisect_(text1, text2, deadline);
  };
  diff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {
    var a = this.diff_linesToChars_(text1, text2);
    text1 = a.chars1;
    text2 = a.chars2;
    var linearray = a.lineArray;
    var diffs = this.diff_main(text1, text2, false, deadline);
    this.diff_charsToLines_(diffs, linearray);
    this.diff_cleanupSemantic(diffs);
    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ""));
    var pointer = 0;
    var count_delete = 0;
    var count_insert = 0;
    var text_delete = "";
    var text_insert = "";
    while (pointer < diffs.length) {
      switch (diffs[pointer][0]) {
        case DIFF_INSERT:
          count_insert++;
          text_insert += diffs[pointer][1];
          break;
        case DIFF_DELETE:
          count_delete++;
          text_delete += diffs[pointer][1];
          break;
        case DIFF_EQUAL:
          if (count_delete >= 1 && count_insert >= 1) {
            diffs.splice(pointer - count_delete - count_insert, count_delete + count_insert);
            pointer = pointer - count_delete - count_insert;
            var subDiff = this.diff_main(text_delete, text_insert, false, deadline);
            for (var j = subDiff.length - 1;j >= 0; j--) {
              diffs.splice(pointer, 0, subDiff[j]);
            }
            pointer = pointer + subDiff.length;
          }
          count_insert = 0;
          count_delete = 0;
          text_delete = "";
          text_insert = "";
          break;
      }
      pointer++;
    }
    diffs.pop();
    return diffs;
  };
  diff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {
    var text1_length = text1.length;
    var text2_length = text2.length;
    var max_d = Math.ceil((text1_length + text2_length) / 2);
    var v_offset = max_d;
    var v_length = 2 * max_d;
    var v1 = new Array(v_length);
    var v2 = new Array(v_length);
    for (var x = 0;x < v_length; x++) {
      v1[x] = -1;
      v2[x] = -1;
    }
    v1[v_offset + 1] = 0;
    v2[v_offset + 1] = 0;
    var delta = text1_length - text2_length;
    var front = delta % 2 != 0;
    var k1start = 0;
    var k1end = 0;
    var k2start = 0;
    var k2end = 0;
    for (var d = 0;d < max_d; d++) {
      if (new Date().getTime() > deadline) {
        break;
      }
      for (var k1 = -d + k1start;k1 <= d - k1end; k1 += 2) {
        var k1_offset = v_offset + k1;
        var x1;
        if (k1 == -d || k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1]) {
          x1 = v1[k1_offset + 1];
        } else {
          x1 = v1[k1_offset - 1] + 1;
        }
        var y1 = x1 - k1;
        while (x1 < text1_length && y1 < text2_length && text1.charAt(x1) == text2.charAt(y1)) {
          x1++;
          y1++;
        }
        v1[k1_offset] = x1;
        if (x1 > text1_length) {
          k1end += 2;
        } else if (y1 > text2_length) {
          k1start += 2;
        } else if (front) {
          var k2_offset = v_offset + delta - k1;
          if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {
            var x2 = text1_length - v2[k2_offset];
            if (x1 >= x2) {
              return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);
            }
          }
        }
      }
      for (var k2 = -d + k2start;k2 <= d - k2end; k2 += 2) {
        var k2_offset = v_offset + k2;
        var x2;
        if (k2 == -d || k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1]) {
          x2 = v2[k2_offset + 1];
        } else {
          x2 = v2[k2_offset - 1] + 1;
        }
        var y2 = x2 - k2;
        while (x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) == text2.charAt(text2_length - y2 - 1)) {
          x2++;
          y2++;
        }
        v2[k2_offset] = x2;
        if (x2 > text1_length) {
          k2end += 2;
        } else if (y2 > text2_length) {
          k2start += 2;
        } else if (!front) {
          var k1_offset = v_offset + delta - k2;
          if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {
            var x1 = v1[k1_offset];
            var y1 = v_offset + x1 - k1_offset;
            x2 = text1_length - x2;
            if (x1 >= x2) {
              return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);
            }
          }
        }
      }
    }
    return [
      new diff_match_patch.Diff(DIFF_DELETE, text1),
      new diff_match_patch.Diff(DIFF_INSERT, text2)
    ];
  };
  diff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y, deadline) {
    var text1a = text1.substring(0, x);
    var text2a = text2.substring(0, y);
    var text1b = text1.substring(x);
    var text2b = text2.substring(y);
    var diffs = this.diff_main(text1a, text2a, false, deadline);
    var diffsb = this.diff_main(text1b, text2b, false, deadline);
    return diffs.concat(diffsb);
  };
  diff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {
    var lineArray = [];
    var lineHash = {};
    lineArray[0] = "";
    function diff_linesToCharsMunge_(text) {
      var chars = "";
      var lineStart = 0;
      var lineEnd = -1;
      var lineArrayLength = lineArray.length;
      while (lineEnd < text.length - 1) {
        lineEnd = text.indexOf("\n", lineStart);
        if (lineEnd == -1) {
          lineEnd = text.length - 1;
        }
        var line = text.substring(lineStart, lineEnd + 1);
        if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== undefined) {
          chars += String.fromCharCode(lineHash[line]);
        } else {
          if (lineArrayLength == maxLines) {
            line = text.substring(lineStart);
            lineEnd = text.length;
          }
          chars += String.fromCharCode(lineArrayLength);
          lineHash[line] = lineArrayLength;
          lineArray[lineArrayLength++] = line;
        }
        lineStart = lineEnd + 1;
      }
      return chars;
    }
    var maxLines = 40000;
    var chars1 = diff_linesToCharsMunge_(text1);
    maxLines = 65535;
    var chars2 = diff_linesToCharsMunge_(text2);
    return { chars1, chars2, lineArray };
  };
  diff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {
    for (var i = 0;i < diffs.length; i++) {
      var chars = diffs[i][1];
      var text = [];
      for (var j = 0;j < chars.length; j++) {
        text[j] = lineArray[chars.charCodeAt(j)];
      }
      diffs[i][1] = text.join("");
    }
  };
  diff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {
    if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
      return 0;
    }
    var pointermin = 0;
    var pointermax = Math.min(text1.length, text2.length);
    var pointermid = pointermax;
    var pointerstart = 0;
    while (pointermin < pointermid) {
      if (text1.substring(pointerstart, pointermid) == text2.substring(pointerstart, pointermid)) {
        pointermin = pointermid;
        pointerstart = pointermin;
      } else {
        pointermax = pointermid;
      }
      pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
    }
    return pointermid;
  };
  diff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {
    if (!text1 || !text2 || text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {
      return 0;
    }
    var pointermin = 0;
    var pointermax = Math.min(text1.length, text2.length);
    var pointermid = pointermax;
    var pointerend = 0;
    while (pointermin < pointermid) {
      if (text1.substring(text1.length - pointermid, text1.length - pointerend) == text2.substring(text2.length - pointermid, text2.length - pointerend)) {
        pointermin = pointermid;
        pointerend = pointermin;
      } else {
        pointermax = pointermid;
      }
      pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
    }
    return pointermid;
  };
  diff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {
    var text1_length = text1.length;
    var text2_length = text2.length;
    if (text1_length == 0 || text2_length == 0) {
      return 0;
    }
    if (text1_length > text2_length) {
      text1 = text1.substring(text1_length - text2_length);
    } else if (text1_length < text2_length) {
      text2 = text2.substring(0, text1_length);
    }
    var text_length = Math.min(text1_length, text2_length);
    if (text1 == text2) {
      return text_length;
    }
    var best = 0;
    var length = 1;
    while (true) {
      var pattern = text1.substring(text_length - length);
      var found = text2.indexOf(pattern);
      if (found == -1) {
        return best;
      }
      length += found;
      if (found == 0 || text1.substring(text_length - length) == text2.substring(0, length)) {
        best = length;
        length++;
      }
    }
  };
  diff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {
    if (this.Diff_Timeout <= 0) {
      return null;
    }
    var longtext = text1.length > text2.length ? text1 : text2;
    var shorttext = text1.length > text2.length ? text2 : text1;
    if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
      return null;
    }
    var dmp = this;
    function diff_halfMatchI_(longtext2, shorttext2, i) {
      var seed = longtext2.substring(i, i + Math.floor(longtext2.length / 4));
      var j = -1;
      var best_common = "";
      var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;
      while ((j = shorttext2.indexOf(seed, j + 1)) != -1) {
        var prefixLength = dmp.diff_commonPrefix(longtext2.substring(i), shorttext2.substring(j));
        var suffixLength = dmp.diff_commonSuffix(longtext2.substring(0, i), shorttext2.substring(0, j));
        if (best_common.length < suffixLength + prefixLength) {
          best_common = shorttext2.substring(j - suffixLength, j) + shorttext2.substring(j, j + prefixLength);
          best_longtext_a = longtext2.substring(0, i - suffixLength);
          best_longtext_b = longtext2.substring(i + prefixLength);
          best_shorttext_a = shorttext2.substring(0, j - suffixLength);
          best_shorttext_b = shorttext2.substring(j + prefixLength);
        }
      }
      if (best_common.length * 2 >= longtext2.length) {
        return [
          best_longtext_a,
          best_longtext_b,
          best_shorttext_a,
          best_shorttext_b,
          best_common
        ];
      } else {
        return null;
      }
    }
    var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4));
    var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));
    var hm;
    if (!hm1 && !hm2) {
      return null;
    } else if (!hm2) {
      hm = hm1;
    } else if (!hm1) {
      hm = hm2;
    } else {
      hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
    }
    var text1_a, text1_b, text2_a, text2_b;
    if (text1.length > text2.length) {
      text1_a = hm[0];
      text1_b = hm[1];
      text2_a = hm[2];
      text2_b = hm[3];
    } else {
      text2_a = hm[0];
      text2_b = hm[1];
      text1_a = hm[2];
      text1_b = hm[3];
    }
    var mid_common = hm[4];
    return [text1_a, text1_b, text2_a, text2_b, mid_common];
  };
  diff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {
    var changes = false;
    var equalities = [];
    var equalitiesLength = 0;
    var lastEquality = null;
    var pointer = 0;
    var length_insertions1 = 0;
    var length_deletions1 = 0;
    var length_insertions2 = 0;
    var length_deletions2 = 0;
    while (pointer < diffs.length) {
      if (diffs[pointer][0] == DIFF_EQUAL) {
        equalities[equalitiesLength++] = pointer;
        length_insertions1 = length_insertions2;
        length_deletions1 = length_deletions2;
        length_insertions2 = 0;
        length_deletions2 = 0;
        lastEquality = diffs[pointer][1];
      } else {
        if (diffs[pointer][0] == DIFF_INSERT) {
          length_insertions2 += diffs[pointer][1].length;
        } else {
          length_deletions2 += diffs[pointer][1].length;
        }
        if (lastEquality && lastEquality.length <= Math.max(length_insertions1, length_deletions1) && lastEquality.length <= Math.max(length_insertions2, length_deletions2)) {
          diffs.splice(equalities[equalitiesLength - 1], 0, new diff_match_patch.Diff(DIFF_DELETE, lastEquality));
          diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;
          equalitiesLength--;
          equalitiesLength--;
          pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;
          length_insertions1 = 0;
          length_deletions1 = 0;
          length_insertions2 = 0;
          length_deletions2 = 0;
          lastEquality = null;
          changes = true;
        }
      }
      pointer++;
    }
    if (changes) {
      this.diff_cleanupMerge(diffs);
    }
    this.diff_cleanupSemanticLossless(diffs);
    pointer = 1;
    while (pointer < diffs.length) {
      if (diffs[pointer - 1][0] == DIFF_DELETE && diffs[pointer][0] == DIFF_INSERT) {
        var deletion = diffs[pointer - 1][1];
        var insertion = diffs[pointer][1];
        var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);
        var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);
        if (overlap_length1 >= overlap_length2) {
          if (overlap_length1 >= deletion.length / 2 || overlap_length1 >= insertion.length / 2) {
            diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL, insertion.substring(0, overlap_length1)));
            diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlap_length1);
            diffs[pointer + 1][1] = insertion.substring(overlap_length1);
            pointer++;
          }
        } else {
          if (overlap_length2 >= deletion.length / 2 || overlap_length2 >= insertion.length / 2) {
            diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL, deletion.substring(0, overlap_length2)));
            diffs[pointer - 1][0] = DIFF_INSERT;
            diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlap_length2);
            diffs[pointer + 1][0] = DIFF_DELETE;
            diffs[pointer + 1][1] = deletion.substring(overlap_length2);
            pointer++;
          }
        }
        pointer++;
      }
      pointer++;
    }
  };
  diff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {
    function diff_cleanupSemanticScore_(one, two) {
      if (!one || !two) {
        return 6;
      }
      var char1 = one.charAt(one.length - 1);
      var char2 = two.charAt(0);
      var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);
      var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);
      var whitespace1 = nonAlphaNumeric1 && char1.match(diff_match_patch.whitespaceRegex_);
      var whitespace2 = nonAlphaNumeric2 && char2.match(diff_match_patch.whitespaceRegex_);
      var lineBreak1 = whitespace1 && char1.match(diff_match_patch.linebreakRegex_);
      var lineBreak2 = whitespace2 && char2.match(diff_match_patch.linebreakRegex_);
      var blankLine1 = lineBreak1 && one.match(diff_match_patch.blanklineEndRegex_);
      var blankLine2 = lineBreak2 && two.match(diff_match_patch.blanklineStartRegex_);
      if (blankLine1 || blankLine2) {
        return 5;
      } else if (lineBreak1 || lineBreak2) {
        return 4;
      } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {
        return 3;
      } else if (whitespace1 || whitespace2) {
        return 2;
      } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {
        return 1;
      }
      return 0;
    }
    var pointer = 1;
    while (pointer < diffs.length - 1) {
      if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {
        var equality1 = diffs[pointer - 1][1];
        var edit = diffs[pointer][1];
        var equality2 = diffs[pointer + 1][1];
        var commonOffset = this.diff_commonSuffix(equality1, edit);
        if (commonOffset) {
          var commonString = edit.substring(edit.length - commonOffset);
          equality1 = equality1.substring(0, equality1.length - commonOffset);
          edit = commonString + edit.substring(0, edit.length - commonOffset);
          equality2 = commonString + equality2;
        }
        var bestEquality1 = equality1;
        var bestEdit = edit;
        var bestEquality2 = equality2;
        var bestScore = diff_cleanupSemanticScore_(equality1, edit) + diff_cleanupSemanticScore_(edit, equality2);
        while (edit.charAt(0) === equality2.charAt(0)) {
          equality1 += edit.charAt(0);
          edit = edit.substring(1) + equality2.charAt(0);
          equality2 = equality2.substring(1);
          var score = diff_cleanupSemanticScore_(equality1, edit) + diff_cleanupSemanticScore_(edit, equality2);
          if (score >= bestScore) {
            bestScore = score;
            bestEquality1 = equality1;
            bestEdit = edit;
            bestEquality2 = equality2;
          }
        }
        if (diffs[pointer - 1][1] != bestEquality1) {
          if (bestEquality1) {
            diffs[pointer - 1][1] = bestEquality1;
          } else {
            diffs.splice(pointer - 1, 1);
            pointer--;
          }
          diffs[pointer][1] = bestEdit;
          if (bestEquality2) {
            diffs[pointer + 1][1] = bestEquality2;
          } else {
            diffs.splice(pointer + 1, 1);
            pointer--;
          }
        }
      }
      pointer++;
    }
  };
  diff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;
  diff_match_patch.whitespaceRegex_ = /\s/;
  diff_match_patch.linebreakRegex_ = /[\r\n]/;
  diff_match_patch.blanklineEndRegex_ = /\n\r?\n$/;
  diff_match_patch.blanklineStartRegex_ = /^\r?\n\r?\n/;
  diff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {
    var changes = false;
    var equalities = [];
    var equalitiesLength = 0;
    var lastEquality = null;
    var pointer = 0;
    var pre_ins = false;
    var pre_del = false;
    var post_ins = false;
    var post_del = false;
    while (pointer < diffs.length) {
      if (diffs[pointer][0] == DIFF_EQUAL) {
        if (diffs[pointer][1].length < this.Diff_EditCost && (post_ins || post_del)) {
          equalities[equalitiesLength++] = pointer;
          pre_ins = post_ins;
          pre_del = post_del;
          lastEquality = diffs[pointer][1];
        } else {
          equalitiesLength = 0;
          lastEquality = null;
        }
        post_ins = post_del = false;
      } else {
        if (diffs[pointer][0] == DIFF_DELETE) {
          post_del = true;
        } else {
          post_ins = true;
        }
        if (lastEquality && (pre_ins && pre_del && post_ins && post_del || lastEquality.length < this.Diff_EditCost / 2 && pre_ins + pre_del + post_ins + post_del == 3)) {
          diffs.splice(equalities[equalitiesLength - 1], 0, new diff_match_patch.Diff(DIFF_DELETE, lastEquality));
          diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;
          equalitiesLength--;
          lastEquality = null;
          if (pre_ins && pre_del) {
            post_ins = post_del = true;
            equalitiesLength = 0;
          } else {
            equalitiesLength--;
            pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;
            post_ins = post_del = false;
          }
          changes = true;
        }
      }
      pointer++;
    }
    if (changes) {
      this.diff_cleanupMerge(diffs);
    }
  };
  diff_match_patch.prototype.diff_cleanupMerge = function(diffs) {
    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ""));
    var pointer = 0;
    var count_delete = 0;
    var count_insert = 0;
    var text_delete = "";
    var text_insert = "";
    var commonlength;
    while (pointer < diffs.length) {
      switch (diffs[pointer][0]) {
        case DIFF_INSERT:
          count_insert++;
          text_insert += diffs[pointer][1];
          pointer++;
          break;
        case DIFF_DELETE:
          count_delete++;
          text_delete += diffs[pointer][1];
          pointer++;
          break;
        case DIFF_EQUAL:
          if (count_delete + count_insert > 1) {
            if (count_delete !== 0 && count_insert !== 0) {
              commonlength = this.diff_commonPrefix(text_insert, text_delete);
              if (commonlength !== 0) {
                if (pointer - count_delete - count_insert > 0 && diffs[pointer - count_delete - count_insert - 1][0] == DIFF_EQUAL) {
                  diffs[pointer - count_delete - count_insert - 1][1] += text_insert.substring(0, commonlength);
                } else {
                  diffs.splice(0, 0, new diff_match_patch.Diff(DIFF_EQUAL, text_insert.substring(0, commonlength)));
                  pointer++;
                }
                text_insert = text_insert.substring(commonlength);
                text_delete = text_delete.substring(commonlength);
              }
              commonlength = this.diff_commonSuffix(text_insert, text_delete);
              if (commonlength !== 0) {
                diffs[pointer][1] = text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];
                text_insert = text_insert.substring(0, text_insert.length - commonlength);
                text_delete = text_delete.substring(0, text_delete.length - commonlength);
              }
            }
            pointer -= count_delete + count_insert;
            diffs.splice(pointer, count_delete + count_insert);
            if (text_delete.length) {
              diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_DELETE, text_delete));
              pointer++;
            }
            if (text_insert.length) {
              diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_INSERT, text_insert));
              pointer++;
            }
            pointer++;
          } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {
            diffs[pointer - 1][1] += diffs[pointer][1];
            diffs.splice(pointer, 1);
          } else {
            pointer++;
          }
          count_insert = 0;
          count_delete = 0;
          text_delete = "";
          text_insert = "";
          break;
      }
    }
    if (diffs[diffs.length - 1][1] === "") {
      diffs.pop();
    }
    var changes = false;
    pointer = 1;
    while (pointer < diffs.length - 1) {
      if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {
        if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {
          diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);
          diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
          diffs.splice(pointer - 1, 1);
          changes = true;
        } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) == diffs[pointer + 1][1]) {
          diffs[pointer - 1][1] += diffs[pointer + 1][1];
          diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];
          diffs.splice(pointer + 1, 1);
          changes = true;
        }
      }
      pointer++;
    }
    if (changes) {
      this.diff_cleanupMerge(diffs);
    }
  };
  diff_match_patch.prototype.diff_xIndex = function(diffs, loc) {
    var chars1 = 0;
    var chars2 = 0;
    var last_chars1 = 0;
    var last_chars2 = 0;
    var x;
    for (x = 0;x < diffs.length; x++) {
      if (diffs[x][0] !== DIFF_INSERT) {
        chars1 += diffs[x][1].length;
      }
      if (diffs[x][0] !== DIFF_DELETE) {
        chars2 += diffs[x][1].length;
      }
      if (chars1 > loc) {
        break;
      }
      last_chars1 = chars1;
      last_chars2 = chars2;
    }
    if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {
      return last_chars2;
    }
    return last_chars2 + (loc - last_chars1);
  };
  diff_match_patch.prototype.diff_prettyHtml = function(diffs) {
    var html = [];
    var pattern_amp = /&/g;
    var pattern_lt = /</g;
    var pattern_gt = />/g;
    var pattern_para = /\n/g;
    for (var x = 0;x < diffs.length; x++) {
      var op = diffs[x][0];
      var data = diffs[x][1];
      var text = data.replace(pattern_amp, "&amp;").replace(pattern_lt, "&lt;").replace(pattern_gt, "&gt;").replace(pattern_para, "&para;<br>");
      switch (op) {
        case DIFF_INSERT:
          html[x] = '<ins style="background:#e6ffe6;">' + text + "</ins>";
          break;
        case DIFF_DELETE:
          html[x] = '<del style="background:#ffe6e6;">' + text + "</del>";
          break;
        case DIFF_EQUAL:
          html[x] = "<span>" + text + "</span>";
          break;
      }
    }
    return html.join("");
  };
  diff_match_patch.prototype.diff_text1 = function(diffs) {
    var text = [];
    for (var x = 0;x < diffs.length; x++) {
      if (diffs[x][0] !== DIFF_INSERT) {
        text[x] = diffs[x][1];
      }
    }
    return text.join("");
  };
  diff_match_patch.prototype.diff_text2 = function(diffs) {
    var text = [];
    for (var x = 0;x < diffs.length; x++) {
      if (diffs[x][0] !== DIFF_DELETE) {
        text[x] = diffs[x][1];
      }
    }
    return text.join("");
  };
  diff_match_patch.prototype.diff_levenshtein = function(diffs) {
    var levenshtein = 0;
    var insertions = 0;
    var deletions = 0;
    for (var x = 0;x < diffs.length; x++) {
      var op = diffs[x][0];
      var data = diffs[x][1];
      switch (op) {
        case DIFF_INSERT:
          insertions += data.length;
          break;
        case DIFF_DELETE:
          deletions += data.length;
          break;
        case DIFF_EQUAL:
          levenshtein += Math.max(insertions, deletions);
          insertions = 0;
          deletions = 0;
          break;
      }
    }
    levenshtein += Math.max(insertions, deletions);
    return levenshtein;
  };
  diff_match_patch.prototype.diff_toDelta = function(diffs) {
    var text = [];
    for (var x = 0;x < diffs.length; x++) {
      switch (diffs[x][0]) {
        case DIFF_INSERT:
          text[x] = "+" + encodeURI(diffs[x][1]);
          break;
        case DIFF_DELETE:
          text[x] = "-" + diffs[x][1].length;
          break;
        case DIFF_EQUAL:
          text[x] = "=" + diffs[x][1].length;
          break;
      }
    }
    return text.join("\t").replace(/%20/g, " ");
  };
  diff_match_patch.prototype.diff_fromDelta = function(text1, delta) {
    var diffs = [];
    var diffsLength = 0;
    var pointer = 0;
    var tokens = delta.split(/\t/g);
    for (var x = 0;x < tokens.length; x++) {
      var param = tokens[x].substring(1);
      switch (tokens[x].charAt(0)) {
        case "+":
          try {
            diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_INSERT, decodeURI(param));
          } catch (ex) {
            throw new Error("Illegal escape in diff_fromDelta: " + param);
          }
          break;
        case "-":
        case "=":
          var n = parseInt(param, 10);
          if (isNaN(n) || n < 0) {
            throw new Error("Invalid number in diff_fromDelta: " + param);
          }
          var text = text1.substring(pointer, pointer += n);
          if (tokens[x].charAt(0) == "=") {
            diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_EQUAL, text);
          } else {
            diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_DELETE, text);
          }
          break;
        default:
          if (tokens[x]) {
            throw new Error("Invalid diff operation in diff_fromDelta: " + tokens[x]);
          }
      }
    }
    if (pointer != text1.length) {
      throw new Error("Delta length (" + pointer + ") does not equal source text length (" + text1.length + ").");
    }
    return diffs;
  };
  diff_match_patch.prototype.match_main = function(text, pattern, loc) {
    if (text == null || pattern == null || loc == null) {
      throw new Error("Null input. (match_main)");
    }
    loc = Math.max(0, Math.min(loc, text.length));
    if (text == pattern) {
      return 0;
    } else if (!text.length) {
      return -1;
    } else if (text.substring(loc, loc + pattern.length) == pattern) {
      return loc;
    } else {
      return this.match_bitap_(text, pattern, loc);
    }
  };
  diff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {
    if (pattern.length > this.Match_MaxBits) {
      throw new Error("Pattern too long for this browser.");
    }
    var s = this.match_alphabet_(pattern);
    var dmp = this;
    function match_bitapScore_(e, x) {
      var accuracy = e / pattern.length;
      var proximity = Math.abs(loc - x);
      if (!dmp.Match_Distance) {
        return proximity ? 1 : accuracy;
      }
      return accuracy + proximity / dmp.Match_Distance;
    }
    var score_threshold = this.Match_Threshold;
    var best_loc = text.indexOf(pattern, loc);
    if (best_loc != -1) {
      score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);
      best_loc = text.lastIndexOf(pattern, loc + pattern.length);
      if (best_loc != -1) {
        score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);
      }
    }
    var matchmask = 1 << pattern.length - 1;
    best_loc = -1;
    var bin_min, bin_mid;
    var bin_max = pattern.length + text.length;
    var last_rd;
    for (var d = 0;d < pattern.length; d++) {
      bin_min = 0;
      bin_mid = bin_max;
      while (bin_min < bin_mid) {
        if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {
          bin_min = bin_mid;
        } else {
          bin_max = bin_mid;
        }
        bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);
      }
      bin_max = bin_mid;
      var start = Math.max(1, loc - bin_mid + 1);
      var finish = Math.min(loc + bin_mid, text.length) + pattern.length;
      var rd = Array(finish + 2);
      rd[finish + 1] = (1 << d) - 1;
      for (var j = finish;j >= start; j--) {
        var charMatch = s[text.charAt(j - 1)];
        if (d === 0) {
          rd[j] = (rd[j + 1] << 1 | 1) & charMatch;
        } else {
          rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((last_rd[j + 1] | last_rd[j]) << 1 | 1) | last_rd[j + 1];
        }
        if (rd[j] & matchmask) {
          var score = match_bitapScore_(d, j - 1);
          if (score <= score_threshold) {
            score_threshold = score;
            best_loc = j - 1;
            if (best_loc > loc) {
              start = Math.max(1, 2 * loc - best_loc);
            } else {
              break;
            }
          }
        }
      }
      if (match_bitapScore_(d + 1, loc) > score_threshold) {
        break;
      }
      last_rd = rd;
    }
    return best_loc;
  };
  diff_match_patch.prototype.match_alphabet_ = function(pattern) {
    var s = {};
    for (var i = 0;i < pattern.length; i++) {
      s[pattern.charAt(i)] = 0;
    }
    for (var i = 0;i < pattern.length; i++) {
      s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;
    }
    return s;
  };
  diff_match_patch.prototype.patch_addContext_ = function(patch, text) {
    if (text.length == 0) {
      return;
    }
    if (patch.start2 === null) {
      throw Error("patch not initialized");
    }
    var pattern = text.substring(patch.start2, patch.start2 + patch.length1);
    var padding = 0;
    while (text.indexOf(pattern) != text.lastIndexOf(pattern) && pattern.length < this.Match_MaxBits - this.Patch_Margin - this.Patch_Margin) {
      padding += this.Patch_Margin;
      pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);
    }
    padding += this.Patch_Margin;
    var prefix = text.substring(patch.start2 - padding, patch.start2);
    if (prefix) {
      patch.diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, prefix));
    }
    var suffix = text.substring(patch.start2 + patch.length1, patch.start2 + patch.length1 + padding);
    if (suffix) {
      patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, suffix));
    }
    patch.start1 -= prefix.length;
    patch.start2 -= prefix.length;
    patch.length1 += prefix.length + suffix.length;
    patch.length2 += prefix.length + suffix.length;
  };
  diff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {
    var text1, diffs;
    if (typeof a == "string" && typeof opt_b == "string" && typeof opt_c == "undefined") {
      text1 = a;
      diffs = this.diff_main(text1, opt_b, true);
      if (diffs.length > 2) {
        this.diff_cleanupSemantic(diffs);
        this.diff_cleanupEfficiency(diffs);
      }
    } else if (a && typeof a == "object" && typeof opt_b == "undefined" && typeof opt_c == "undefined") {
      diffs = a;
      text1 = this.diff_text1(diffs);
    } else if (typeof a == "string" && opt_b && typeof opt_b == "object" && typeof opt_c == "undefined") {
      text1 = a;
      diffs = opt_b;
    } else if (typeof a == "string" && typeof opt_b == "string" && opt_c && typeof opt_c == "object") {
      text1 = a;
      diffs = opt_c;
    } else {
      throw new Error("Unknown call format to patch_make.");
    }
    if (diffs.length === 0) {
      return [];
    }
    var patches = [];
    var patch = new diff_match_patch.patch_obj;
    var patchDiffLength = 0;
    var char_count1 = 0;
    var char_count2 = 0;
    var prepatch_text = text1;
    var postpatch_text = text1;
    for (var x = 0;x < diffs.length; x++) {
      var diff_type = diffs[x][0];
      var diff_text = diffs[x][1];
      if (!patchDiffLength && diff_type !== DIFF_EQUAL) {
        patch.start1 = char_count1;
        patch.start2 = char_count2;
      }
      switch (diff_type) {
        case DIFF_INSERT:
          patch.diffs[patchDiffLength++] = diffs[x];
          patch.length2 += diff_text.length;
          postpatch_text = postpatch_text.substring(0, char_count2) + diff_text + postpatch_text.substring(char_count2);
          break;
        case DIFF_DELETE:
          patch.length1 += diff_text.length;
          patch.diffs[patchDiffLength++] = diffs[x];
          postpatch_text = postpatch_text.substring(0, char_count2) + postpatch_text.substring(char_count2 + diff_text.length);
          break;
        case DIFF_EQUAL:
          if (diff_text.length <= 2 * this.Patch_Margin && patchDiffLength && diffs.length != x + 1) {
            patch.diffs[patchDiffLength++] = diffs[x];
            patch.length1 += diff_text.length;
            patch.length2 += diff_text.length;
          } else if (diff_text.length >= 2 * this.Patch_Margin) {
            if (patchDiffLength) {
              this.patch_addContext_(patch, prepatch_text);
              patches.push(patch);
              patch = new diff_match_patch.patch_obj;
              patchDiffLength = 0;
              prepatch_text = postpatch_text;
              char_count1 = char_count2;
            }
          }
          break;
      }
      if (diff_type !== DIFF_INSERT) {
        char_count1 += diff_text.length;
      }
      if (diff_type !== DIFF_DELETE) {
        char_count2 += diff_text.length;
      }
    }
    if (patchDiffLength) {
      this.patch_addContext_(patch, prepatch_text);
      patches.push(patch);
    }
    return patches;
  };
  diff_match_patch.prototype.patch_deepCopy = function(patches) {
    var patchesCopy = [];
    for (var x = 0;x < patches.length; x++) {
      var patch = patches[x];
      var patchCopy = new diff_match_patch.patch_obj;
      patchCopy.diffs = [];
      for (var y = 0;y < patch.diffs.length; y++) {
        patchCopy.diffs[y] = new diff_match_patch.Diff(patch.diffs[y][0], patch.diffs[y][1]);
      }
      patchCopy.start1 = patch.start1;
      patchCopy.start2 = patch.start2;
      patchCopy.length1 = patch.length1;
      patchCopy.length2 = patch.length2;
      patchesCopy[x] = patchCopy;
    }
    return patchesCopy;
  };
  diff_match_patch.prototype.patch_apply = function(patches, text) {
    if (patches.length == 0) {
      return [text, []];
    }
    patches = this.patch_deepCopy(patches);
    var nullPadding = this.patch_addPadding(patches);
    text = nullPadding + text + nullPadding;
    this.patch_splitMax(patches);
    var delta = 0;
    var results = [];
    for (var x = 0;x < patches.length; x++) {
      var expected_loc = patches[x].start2 + delta;
      var text1 = this.diff_text1(patches[x].diffs);
      var start_loc;
      var end_loc = -1;
      if (text1.length > this.Match_MaxBits) {
        start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits), expected_loc);
        if (start_loc != -1) {
          end_loc = this.match_main(text, text1.substring(text1.length - this.Match_MaxBits), expected_loc + text1.length - this.Match_MaxBits);
          if (end_loc == -1 || start_loc >= end_loc) {
            start_loc = -1;
          }
        }
      } else {
        start_loc = this.match_main(text, text1, expected_loc);
      }
      if (start_loc == -1) {
        results[x] = false;
        delta -= patches[x].length2 - patches[x].length1;
      } else {
        results[x] = true;
        delta = start_loc - expected_loc;
        var text2;
        if (end_loc == -1) {
          text2 = text.substring(start_loc, start_loc + text1.length);
        } else {
          text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);
        }
        if (text1 == text2) {
          text = text.substring(0, start_loc) + this.diff_text2(patches[x].diffs) + text.substring(start_loc + text1.length);
        } else {
          var diffs = this.diff_main(text1, text2, false);
          if (text1.length > this.Match_MaxBits && this.diff_levenshtein(diffs) / text1.length > this.Patch_DeleteThreshold) {
            results[x] = false;
          } else {
            this.diff_cleanupSemanticLossless(diffs);
            var index1 = 0;
            var index2;
            for (var y = 0;y < patches[x].diffs.length; y++) {
              var mod = patches[x].diffs[y];
              if (mod[0] !== DIFF_EQUAL) {
                index2 = this.diff_xIndex(diffs, index1);
              }
              if (mod[0] === DIFF_INSERT) {
                text = text.substring(0, start_loc + index2) + mod[1] + text.substring(start_loc + index2);
              } else if (mod[0] === DIFF_DELETE) {
                text = text.substring(0, start_loc + index2) + text.substring(start_loc + this.diff_xIndex(diffs, index1 + mod[1].length));
              }
              if (mod[0] !== DIFF_DELETE) {
                index1 += mod[1].length;
              }
            }
          }
        }
      }
    }
    text = text.substring(nullPadding.length, text.length - nullPadding.length);
    return [text, results];
  };
  diff_match_patch.prototype.patch_addPadding = function(patches) {
    var paddingLength = this.Patch_Margin;
    var nullPadding = "";
    for (var x = 1;x <= paddingLength; x++) {
      nullPadding += String.fromCharCode(x);
    }
    for (var x = 0;x < patches.length; x++) {
      patches[x].start1 += paddingLength;
      patches[x].start2 += paddingLength;
    }
    var patch = patches[0];
    var diffs = patch.diffs;
    if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {
      diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));
      patch.start1 -= paddingLength;
      patch.start2 -= paddingLength;
      patch.length1 += paddingLength;
      patch.length2 += paddingLength;
    } else if (paddingLength > diffs[0][1].length) {
      var extraLength = paddingLength - diffs[0][1].length;
      diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];
      patch.start1 -= extraLength;
      patch.start2 -= extraLength;
      patch.length1 += extraLength;
      patch.length2 += extraLength;
    }
    patch = patches[patches.length - 1];
    diffs = patch.diffs;
    if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {
      diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));
      patch.length1 += paddingLength;
      patch.length2 += paddingLength;
    } else if (paddingLength > diffs[diffs.length - 1][1].length) {
      var extraLength = paddingLength - diffs[diffs.length - 1][1].length;
      diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);
      patch.length1 += extraLength;
      patch.length2 += extraLength;
    }
    return nullPadding;
  };
  diff_match_patch.prototype.patch_splitMax = function(patches) {
    var patch_size = this.Match_MaxBits;
    for (var x = 0;x < patches.length; x++) {
      if (patches[x].length1 <= patch_size) {
        continue;
      }
      var bigpatch = patches[x];
      patches.splice(x--, 1);
      var start1 = bigpatch.start1;
      var start2 = bigpatch.start2;
      var precontext = "";
      while (bigpatch.diffs.length !== 0) {
        var patch = new diff_match_patch.patch_obj;
        var empty = true;
        patch.start1 = start1 - precontext.length;
        patch.start2 = start2 - precontext.length;
        if (precontext !== "") {
          patch.length1 = patch.length2 = precontext.length;
          patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, precontext));
        }
        while (bigpatch.diffs.length !== 0 && patch.length1 < patch_size - this.Patch_Margin) {
          var diff_type = bigpatch.diffs[0][0];
          var diff_text = bigpatch.diffs[0][1];
          if (diff_type === DIFF_INSERT) {
            patch.length2 += diff_text.length;
            start2 += diff_text.length;
            patch.diffs.push(bigpatch.diffs.shift());
            empty = false;
          } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 && patch.diffs[0][0] == DIFF_EQUAL && diff_text.length > 2 * patch_size) {
            patch.length1 += diff_text.length;
            start1 += diff_text.length;
            empty = false;
            patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));
            bigpatch.diffs.shift();
          } else {
            diff_text = diff_text.substring(0, patch_size - patch.length1 - this.Patch_Margin);
            patch.length1 += diff_text.length;
            start1 += diff_text.length;
            if (diff_type === DIFF_EQUAL) {
              patch.length2 += diff_text.length;
              start2 += diff_text.length;
            } else {
              empty = false;
            }
            patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));
            if (diff_text == bigpatch.diffs[0][1]) {
              bigpatch.diffs.shift();
            } else {
              bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diff_text.length);
            }
          }
        }
        precontext = this.diff_text2(patch.diffs);
        precontext = precontext.substring(precontext.length - this.Patch_Margin);
        var postcontext = this.diff_text1(bigpatch.diffs).substring(0, this.Patch_Margin);
        if (postcontext !== "") {
          patch.length1 += postcontext.length;
          patch.length2 += postcontext.length;
          if (patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {
            patch.diffs[patch.diffs.length - 1][1] += postcontext;
          } else {
            patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, postcontext));
          }
        }
        if (!empty) {
          patches.splice(++x, 0, patch);
        }
      }
    }
  };
  diff_match_patch.prototype.patch_toText = function(patches) {
    var text = [];
    for (var x = 0;x < patches.length; x++) {
      text[x] = patches[x];
    }
    return text.join("");
  };
  diff_match_patch.prototype.patch_fromText = function(textline) {
    var patches = [];
    if (!textline) {
      return patches;
    }
    var text = textline.split("\n");
    var textPointer = 0;
    var patchHeader = /^@@ -(\d+),?(\d*) \+(\d+),?(\d*) @@$/;
    while (textPointer < text.length) {
      var m = text[textPointer].match(patchHeader);
      if (!m) {
        throw new Error("Invalid patch string: " + text[textPointer]);
      }
      var patch = new diff_match_patch.patch_obj;
      patches.push(patch);
      patch.start1 = parseInt(m[1], 10);
      if (m[2] === "") {
        patch.start1--;
        patch.length1 = 1;
      } else if (m[2] == "0") {
        patch.length1 = 0;
      } else {
        patch.start1--;
        patch.length1 = parseInt(m[2], 10);
      }
      patch.start2 = parseInt(m[3], 10);
      if (m[4] === "") {
        patch.start2--;
        patch.length2 = 1;
      } else if (m[4] == "0") {
        patch.length2 = 0;
      } else {
        patch.start2--;
        patch.length2 = parseInt(m[4], 10);
      }
      textPointer++;
      while (textPointer < text.length) {
        var sign = text[textPointer].charAt(0);
        try {
          var line = decodeURI(text[textPointer].substring(1));
        } catch (ex) {
          throw new Error("Illegal escape in patch_fromText: " + line);
        }
        if (sign == "-") {
          patch.diffs.push(new diff_match_patch.Diff(DIFF_DELETE, line));
        } else if (sign == "+") {
          patch.diffs.push(new diff_match_patch.Diff(DIFF_INSERT, line));
        } else if (sign == " ") {
          patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, line));
        } else if (sign == "@") {
          break;
        } else if (sign === "") {
        } else {
          throw new Error('Invalid patch mode "' + sign + '" in: ' + line);
        }
        textPointer++;
      }
    }
    return patches;
  };
  diff_match_patch.patch_obj = function() {
    this.diffs = [];
    this.start1 = null;
    this.start2 = null;
    this.length1 = 0;
    this.length2 = 0;
  };
  diff_match_patch.patch_obj.prototype.toString = function() {
    var coords1, coords2;
    if (this.length1 === 0) {
      coords1 = this.start1 + ",0";
    } else if (this.length1 == 1) {
      coords1 = this.start1 + 1;
    } else {
      coords1 = this.start1 + 1 + "," + this.length1;
    }
    if (this.length2 === 0) {
      coords2 = this.start2 + ",0";
    } else if (this.length2 == 1) {
      coords2 = this.start2 + 1;
    } else {
      coords2 = this.start2 + 1 + "," + this.length2;
    }
    var text = ["@@ -" + coords1 + " +" + coords2 + " @@\n"];
    var op;
    for (var x = 0;x < this.diffs.length; x++) {
      switch (this.diffs[x][0]) {
        case DIFF_INSERT:
          op = "+";
          break;
        case DIFF_DELETE:
          op = "-";
          break;
        case DIFF_EQUAL:
          op = " ";
          break;
      }
      text[x + 1] = op + encodeURI(this.diffs[x][1]) + "\n";
    }
    return text.join("").replace(/%20/g, " ");
  };
  module.exports = { diff_match_patch, DIFF_INSERT, DIFF_DELETE, DIFF_EQUAL };
});

// node_modules/playwright-core/lib/utils/comparators.js
var require_comparators = __commonJS((exports) => {
  var getComparator = function(mimeType) {
    if (mimeType === "image/png")
      return compareImages.bind(null, "image/png");
    if (mimeType === "image/jpeg")
      return compareImages.bind(null, "image/jpeg");
    if (mimeType === "text/plain")
      return compareText;
    return compareBuffersOrStrings;
  };
  var compareBuffersOrStrings = function(actualBuffer, expectedBuffer) {
    if (typeof actualBuffer === "string")
      return compareText(actualBuffer, expectedBuffer);
    if (!actualBuffer || !(actualBuffer instanceof Buffer))
      return {
        errorMessage: "Actual result should be a Buffer or a string."
      };
    if (Buffer.compare(actualBuffer, expectedBuffer))
      return {
        errorMessage: "Buffers differ"
      };
    return null;
  };
  var compareImages = function(mimeType, actualBuffer, expectedBuffer, options = {}) {
    var _options$comparator, _ref;
    if (!actualBuffer || !(actualBuffer instanceof Buffer))
      return {
        errorMessage: "Actual result should be a Buffer."
      };
    validateBuffer(expectedBuffer, mimeType);
    let actual = mimeType === "image/png" ? _utilsBundle.PNG.sync.read(actualBuffer) : _utilsBundle.jpegjs.decode(actualBuffer, {
      maxMemoryUsageInMB: JPEG_JS_MAX_BUFFER_SIZE_IN_MB
    });
    let expected = mimeType === "image/png" ? _utilsBundle.PNG.sync.read(expectedBuffer) : _utilsBundle.jpegjs.decode(expectedBuffer, {
      maxMemoryUsageInMB: JPEG_JS_MAX_BUFFER_SIZE_IN_MB
    });
    const size = {
      width: Math.max(expected.width, actual.width),
      height: Math.max(expected.height, actual.height)
    };
    let sizesMismatchError = "";
    if (expected.width !== actual.width || expected.height !== actual.height) {
      sizesMismatchError = `Expected an image ${expected.width}px by ${expected.height}px, received ${actual.width}px by ${actual.height}px. `;
      actual = resizeImage(actual, size);
      expected = resizeImage(expected, size);
    }
    const diff = new _utilsBundle.PNG({
      width: size.width,
      height: size.height
    });
    let count;
    if (options.comparator === "ssim-cie94") {
      count = (0, _compare.compare)(expected.data, actual.data, diff.data, size.width, size.height, {
        maxColorDeltaE94: 1
      });
    } else if (((_options$comparator = options.comparator) !== null && _options$comparator !== undefined ? _options$comparator : "pixelmatch") === "pixelmatch") {
      var _options$threshold;
      count = pixelmatch(expected.data, actual.data, diff.data, size.width, size.height, {
        threshold: (_options$threshold = options.threshold) !== null && _options$threshold !== undefined ? _options$threshold : 0.2
      });
    } else {
      throw new Error(`Configuration specifies unknown comparator "${options.comparator}"`);
    }
    const maxDiffPixels1 = options.maxDiffPixels;
    const maxDiffPixels2 = options.maxDiffPixelRatio !== undefined ? expected.width * expected.height * options.maxDiffPixelRatio : undefined;
    let maxDiffPixels;
    if (maxDiffPixels1 !== undefined && maxDiffPixels2 !== undefined)
      maxDiffPixels = Math.min(maxDiffPixels1, maxDiffPixels2);
    else
      maxDiffPixels = (_ref = maxDiffPixels1 !== null && maxDiffPixels1 !== undefined ? maxDiffPixels1 : maxDiffPixels2) !== null && _ref !== undefined ? _ref : 0;
    const ratio = Math.ceil(count / (expected.width * expected.height) * 100) / 100;
    const pixelsMismatchError = count > maxDiffPixels ? `${count} pixels (ratio ${ratio.toFixed(2)} of all image pixels) are different.` : "";
    if (pixelsMismatchError || sizesMismatchError)
      return {
        errorMessage: sizesMismatchError + pixelsMismatchError,
        diff: _utilsBundle.PNG.sync.write(diff)
      };
    return null;
  };
  var validateBuffer = function(buffer, mimeType) {
    if (mimeType === "image/png") {
      const pngMagicNumber = [137, 80, 78, 71, 13, 10, 26, 10];
      if (buffer.length < pngMagicNumber.length || !pngMagicNumber.every((byte, index) => buffer[index] === byte))
        throw new Error("could not decode image as PNG.");
    } else if (mimeType === "image/jpeg") {
      const jpegMagicNumber = [255, 216];
      if (buffer.length < jpegMagicNumber.length || !jpegMagicNumber.every((byte, index) => buffer[index] === byte))
        throw new Error("could not decode image as JPEG.");
    }
  };
  var compareText = function(actual, expectedBuffer) {
    if (typeof actual !== "string")
      return {
        errorMessage: "Actual result should be a string"
      };
    const expected = expectedBuffer.toString("utf-8");
    if (expected === actual)
      return null;
    const dmp = new diff_match_patch;
    const d = dmp.diff_main(expected, actual);
    dmp.diff_cleanupSemantic(d);
    return {
      errorMessage: diff_prettyTerminal(d)
    };
  };
  var diff_prettyTerminal = function(diffs) {
    const html = [];
    for (let x = 0;x < diffs.length; x++) {
      const op = diffs[x][0];
      const data = diffs[x][1];
      const text = data;
      switch (op) {
        case DIFF_INSERT:
          html[x] = _utilsBundle.colors.green(text);
          break;
        case DIFF_DELETE:
          html[x] = _utilsBundle.colors.reset(_utilsBundle.colors.strikethrough(_utilsBundle.colors.red(text)));
          break;
        case DIFF_EQUAL:
          html[x] = text;
          break;
      }
    }
    return html.join("");
  };
  var resizeImage = function(image, size) {
    if (image.width === size.width && image.height === size.height)
      return image;
    const buffer = new Uint8Array(size.width * size.height * 4);
    for (let y = 0;y < size.height; y++) {
      for (let x = 0;x < size.width; x++) {
        const to = (y * size.width + x) * 4;
        if (y < image.height && x < image.width) {
          const from = (y * image.width + x) * 4;
          buffer[to] = image.data[from];
          buffer[to + 1] = image.data[from + 1];
          buffer[to + 2] = image.data[from + 2];
          buffer[to + 3] = image.data[from + 3];
        } else {
          buffer[to] = 0;
          buffer[to + 1] = 0;
          buffer[to + 2] = 0;
          buffer[to + 3] = 0;
        }
      }
    }
    return {
      data: Buffer.from(buffer),
      width: size.width,
      height: size.height
    };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getComparator = getComparator;
  var _utilsBundle = require_utilsBundle();
  var _compare = require_compare();
  var pixelmatch = require_pixelmatch();
  var {
    diff_match_patch,
    DIFF_INSERT,
    DIFF_DELETE,
    DIFF_EQUAL
  } = require_diff_match_patch();
  var JPEG_JS_MAX_BUFFER_SIZE_IN_MB = 5 * 1024;
});

// node_modules/playwright-core/lib/utils/crypto.js
var require_crypto = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var createGuid = function() {
    return _crypto.default.randomBytes(16).toString("hex");
  };
  var calculateSha1 = function(buffer) {
    const hash = _crypto.default.createHash("sha1");
    hash.update(buffer);
    return hash.digest("hex");
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.calculateSha1 = calculateSha1;
  exports.createGuid = createGuid;
  var _crypto = _interopRequireDefault(import.meta.require("crypto"));
});

// node_modules/playwright-core/lib/utils/env.js
var require_env = __commonJS((exports) => {
  var getFromENV = function(name) {
    let value = process.env[name];
    value = value === undefined ? process.env[`npm_config_${name.toLowerCase()}`] : value;
    value = value === undefined ? process.env[`npm_package_config_${name.toLowerCase()}`] : value;
    return value;
  };
  var getAsBooleanFromENV = function(name) {
    const value = getFromENV(name);
    return !!value && value !== "false" && value !== "0";
  };
  var getPackageManager = function() {
    const env = "bun/1.1.10 npm/? node/v22.2.0 darwin arm64";
    if (env.includes("yarn"))
      return "yarn";
    if (env.includes("pnpm"))
      return "pnpm";
    return "npm";
  };
  var getPackageManagerExecCommand = function() {
    const packageManager = getPackageManager();
    if (packageManager === "yarn")
      return "yarn";
    if (packageManager === "pnpm")
      return "pnpm exec";
    return "npx";
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getAsBooleanFromENV = getAsBooleanFromENV;
  exports.getFromENV = getFromENV;
  exports.getPackageManager = getPackageManager;
  exports.getPackageManagerExecCommand = getPackageManagerExecCommand;
});

// node_modules/playwright-core/lib/utils/debug.js
var require_debug5 = __commonJS((exports) => {
  var assert = function(value, message) {
    if (!value)
      throw new Error(message || "Assertion error");
  };
  var debugAssert = function(value, message) {
    if (isUnderTest() && !value)
      throw new Error(message);
  };
  var debugMode = function() {
    if (debugEnv === "console")
      return "console";
    if (debugEnv === "0" || debugEnv === "false")
      return "";
    return debugEnv ? "inspector" : "";
  };
  var setUnderTest = function() {
    _isUnderTest = true;
  };
  var isUnderTest = function() {
    return _isUnderTest;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.assert = assert;
  exports.debugAssert = debugAssert;
  exports.debugMode = debugMode;
  exports.isUnderTest = isUnderTest;
  exports.setUnderTest = setUnderTest;
  var _env = require_env();
  var debugEnv = (0, _env.getFromENV)("PWDEBUG") || "";
  var _isUnderTest = !!process.env.PWTEST_UNDER_TEST;
});

// node_modules/playwright-core/lib/utils/eventsHelper.js
var require_eventsHelper = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.eventsHelper = undefined;

  class EventsHelper {
    static addEventListener(emitter, eventName, handler) {
      emitter.on(eventName, handler);
      return {
        emitter,
        eventName,
        handler
      };
    }
    static removeEventListeners(listeners) {
      for (const listener of listeners)
        listener.emitter.removeListener(listener.eventName, listener.handler);
      listeners.splice(0, listeners.length);
    }
  }
  var eventsHelper = exports.eventsHelper = EventsHelper;
});

// node_modules/playwright-core/lib/utils/fileUtils.js
var require_fileUtils = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  async function mkdirIfNeeded(filePath) {
    await _fs.default.promises.mkdir(_path.default.dirname(filePath), {
      recursive: true
    }).catch(() => {
    });
  }
  async function removeFolders(dirs) {
    return await Promise.all(dirs.map((dir) => _fs.default.promises.rm(dir, {
      recursive: true,
      force: true,
      maxRetries: 10
    }).catch((e) => e)));
  }
  var canAccessFile = function(file) {
    if (!file)
      return false;
    try {
      _fs.default.accessSync(file);
      return true;
    } catch (e) {
      return false;
    }
  };
  async function copyFileAndMakeWritable(from, to) {
    await _fs.default.promises.copyFile(from, to);
    await _fs.default.promises.chmod(to, 436);
  }
  var sanitizeForFilePath = function(s) {
    return s.replace(/[\x00-\x2C\x2E-\x2F\x3A-\x40\x5B-\x60\x7B-\x7F]+/g, "-");
  };
  var toPosixPath = function(aPath) {
    return aPath.split(_path.default.sep).join(_path.default.posix.sep);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.canAccessFile = canAccessFile;
  exports.copyFileAndMakeWritable = copyFileAndMakeWritable;
  exports.fileUploadSizeLimit = exports.existsAsync = undefined;
  exports.mkdirIfNeeded = mkdirIfNeeded;
  exports.removeFolders = removeFolders;
  exports.sanitizeForFilePath = sanitizeForFilePath;
  exports.toPosixPath = toPosixPath;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var fileUploadSizeLimit = exports.fileUploadSizeLimit = 50 * 1024 * 1024;
  var existsAsync = (path) => new Promise((resolve) => _fs.default.stat(path, (err) => resolve(!err)));
  exports.existsAsync = existsAsync;
});

// node_modules/playwright-core/lib/utils/headers.js
var require_headers = __commonJS((exports) => {
  var headersObjectToArray = function(headers, separator, setCookieSeparator) {
    if (!setCookieSeparator)
      setCookieSeparator = separator;
    const result = [];
    for (const name in headers) {
      const values = headers[name];
      if (values === undefined)
        continue;
      if (separator) {
        const sep = name.toLowerCase() === "set-cookie" ? setCookieSeparator : separator;
        for (const value of values.split(sep))
          result.push({
            name,
            value: value.trim()
          });
      } else {
        result.push({
          name,
          value: values
        });
      }
    }
    return result;
  };
  var headersArrayToObject = function(headers, lowerCase) {
    const result = {};
    for (const {
      name,
      value
    } of headers)
      result[lowerCase ? name.toLowerCase() : name] = value;
    return result;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.headersArrayToObject = headersArrayToObject;
  exports.headersObjectToArray = headersObjectToArray;
});

// node_modules/playwright-core/lib/utils/linuxUtils.js
var require_linuxUtils = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  async function getLinuxDistributionInfo() {
    if (process.platform !== "linux")
      return;
    if (!osRelease && !didFailToReadOSRelease) {
      try {
        var _fields$get, _fields$get2;
        const osReleaseText = await _fs.default.promises.readFile("/etc/os-release", "utf8");
        const fields = parseOSReleaseText(osReleaseText);
        osRelease = {
          id: (_fields$get = fields.get("id")) !== null && _fields$get !== undefined ? _fields$get : "",
          version: (_fields$get2 = fields.get("version_id")) !== null && _fields$get2 !== undefined ? _fields$get2 : ""
        };
      } catch (e) {
        didFailToReadOSRelease = true;
      }
    }
    return osRelease;
  }
  var getLinuxDistributionInfoSync = function() {
    if (process.platform !== "linux")
      return;
    if (!osRelease && !didFailToReadOSRelease) {
      try {
        var _fields$get3, _fields$get4;
        const osReleaseText = _fs.default.readFileSync("/etc/os-release", "utf8");
        const fields = parseOSReleaseText(osReleaseText);
        osRelease = {
          id: (_fields$get3 = fields.get("id")) !== null && _fields$get3 !== undefined ? _fields$get3 : "",
          version: (_fields$get4 = fields.get("version_id")) !== null && _fields$get4 !== undefined ? _fields$get4 : ""
        };
      } catch (e) {
        didFailToReadOSRelease = true;
      }
    }
    return osRelease;
  };
  var parseOSReleaseText = function(osReleaseText) {
    const fields = new Map;
    for (const line of osReleaseText.split("\n")) {
      const tokens = line.split("=");
      const name = tokens.shift();
      let value = tokens.join("=").trim();
      if (value.startsWith('"') && value.endsWith('"'))
        value = value.substring(1, value.length - 1);
      if (!name)
        continue;
      fields.set(name.toLowerCase(), value);
    }
    return fields;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getLinuxDistributionInfo = getLinuxDistributionInfo;
  exports.getLinuxDistributionInfoSync = getLinuxDistributionInfoSync;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var didFailToReadOSRelease = false;
  var osRelease;
});

// node_modules/playwright-core/lib/utils/hostPlatform.js
var require_hostPlatform = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var calculatePlatform = function() {
    const platform = _os.default.platform();
    if (platform === "darwin") {
      const ver = _os.default.release().split(".").map((a) => parseInt(a, 10));
      let macVersion = "";
      if (ver[0] < 18) {
        macVersion = "mac10.13";
      } else if (ver[0] === 18) {
        macVersion = "mac10.14";
      } else if (ver[0] === 19) {
        macVersion = "mac10.15";
      } else {
        const LAST_STABLE_MAC_MAJOR_VERSION = 14;
        macVersion = "mac" + Math.min(ver[0] - 9, LAST_STABLE_MAC_MAJOR_VERSION);
        if (_os.default.cpus().some((cpu) => cpu.model.includes("Apple")))
          macVersion += "-arm64";
      }
      return {
        hostPlatform: macVersion,
        isOfficiallySupportedPlatform: true
      };
    }
    if (platform === "linux") {
      if (!["x64", "arm64"].includes(_os.default.arch()))
        return {
          hostPlatform: "<unknown>",
          isOfficiallySupportedPlatform: false
        };
      const archSuffix = "-" + _os.default.arch();
      const distroInfo = (0, _linuxUtils.getLinuxDistributionInfoSync)();
      if ((distroInfo === null || distroInfo === undefined ? undefined : distroInfo.id) === "ubuntu" || (distroInfo === null || distroInfo === undefined ? undefined : distroInfo.id) === "pop" || (distroInfo === null || distroInfo === undefined ? undefined : distroInfo.id) === "neon" || (distroInfo === null || distroInfo === undefined ? undefined : distroInfo.id) === "tuxedo") {
        const isOfficiallySupportedPlatform2 = (distroInfo === null || distroInfo === undefined ? undefined : distroInfo.id) === "ubuntu";
        if (parseInt(distroInfo.version, 10) <= 19)
          return {
            hostPlatform: "ubuntu18.04" + archSuffix,
            isOfficiallySupportedPlatform: false
          };
        if (parseInt(distroInfo.version, 10) <= 21)
          return {
            hostPlatform: "ubuntu20.04" + archSuffix,
            isOfficiallySupportedPlatform: isOfficiallySupportedPlatform2
          };
        return {
          hostPlatform: "ubuntu22.04" + archSuffix,
          isOfficiallySupportedPlatform: isOfficiallySupportedPlatform2
        };
      }
      if ((distroInfo === null || distroInfo === undefined ? undefined : distroInfo.id) === "linuxmint") {
        if (parseInt(distroInfo.version, 10) <= 20)
          return {
            hostPlatform: "ubuntu20.04" + archSuffix,
            isOfficiallySupportedPlatform: false
          };
        return {
          hostPlatform: "ubuntu22.04" + archSuffix,
          isOfficiallySupportedPlatform: false
        };
      }
      if ((distroInfo === null || distroInfo === undefined ? undefined : distroInfo.id) === "debian" || (distroInfo === null || distroInfo === undefined ? undefined : distroInfo.id) === "raspbian") {
        const isOfficiallySupportedPlatform2 = (distroInfo === null || distroInfo === undefined ? undefined : distroInfo.id) === "debian";
        if ((distroInfo === null || distroInfo === undefined ? undefined : distroInfo.version) === "11")
          return {
            hostPlatform: "debian11" + archSuffix,
            isOfficiallySupportedPlatform: isOfficiallySupportedPlatform2
          };
        if ((distroInfo === null || distroInfo === undefined ? undefined : distroInfo.version) === "12")
          return {
            hostPlatform: "debian12" + archSuffix,
            isOfficiallySupportedPlatform: isOfficiallySupportedPlatform2
          };
        if ((distroInfo === null || distroInfo === undefined ? undefined : distroInfo.version) === "")
          return {
            hostPlatform: "debian12" + archSuffix,
            isOfficiallySupportedPlatform: isOfficiallySupportedPlatform2
          };
      }
      return {
        hostPlatform: "ubuntu20.04" + archSuffix,
        isOfficiallySupportedPlatform: false
      };
    }
    if (platform === "win32")
      return {
        hostPlatform: "win64",
        isOfficiallySupportedPlatform: true
      };
    return {
      hostPlatform: "<unknown>",
      isOfficiallySupportedPlatform: false
    };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isOfficiallySupportedPlatform = exports.hostPlatform = undefined;
  var _os = _interopRequireDefault(import.meta.require("os"));
  var _linuxUtils = require_linuxUtils();
  var {
    hostPlatform,
    isOfficiallySupportedPlatform
  } = calculatePlatform();
  exports.isOfficiallySupportedPlatform = isOfficiallySupportedPlatform;
  exports.hostPlatform = hostPlatform;
});

// node_modules/playwright-core/lib/utils/httpServer.js
var require_httpServer = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.HttpServer = undefined;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _utilsBundle = require_utilsBundle();
  var _debug = require_debug5();
  var _network = require_network();
  var _manualPromise = require_manualPromise();
  var _crypto = require_crypto();

  class HttpServer {
    constructor() {
      this._server = undefined;
      this._urlPrefixPrecise = "";
      this._urlPrefixHumanReadable = "";
      this._port = 0;
      this._started = false;
      this._routes = [];
      this._wsGuid = undefined;
      this._server = (0, _network.createHttpServer)(this._onRequest.bind(this));
    }
    server() {
      return this._server;
    }
    routePrefix(prefix, handler) {
      this._routes.push({
        prefix,
        handler
      });
    }
    routePath(path, handler) {
      this._routes.push({
        exact: path,
        handler
      });
    }
    port() {
      return this._port;
    }
    async _tryStart(port, host) {
      const errorPromise = new _manualPromise.ManualPromise;
      const errorListener = (error) => errorPromise.reject(error);
      this._server.on("error", errorListener);
      try {
        this._server.listen(port, host);
        await Promise.race([new Promise((cb) => this._server.once("listening", cb)), errorPromise]);
      } finally {
        this._server.removeListener("error", errorListener);
      }
    }
    createWebSocket(transport, guid) {
      (0, _debug.assert)(!this._wsGuid, "can only create one main websocket transport per server");
      this._wsGuid = guid || (0, _crypto.createGuid)();
      const wss = new _utilsBundle.wsServer({
        server: this._server,
        path: "/" + this._wsGuid
      });
      wss.on("connection", (ws2) => {
        transport.sendEvent = (method, params) => ws2.send(JSON.stringify({
          method,
          params
        }));
        transport.close = () => ws2.close();
        ws2.on("message", async (message) => {
          const {
            id,
            method,
            params
          } = JSON.parse(String(message));
          try {
            const result = await transport.dispatch(method, params);
            ws2.send(JSON.stringify({
              id,
              result
            }));
          } catch (e) {
            ws2.send(JSON.stringify({
              id,
              error: String(e)
            }));
          }
        });
        ws2.on("close", () => transport.onclose());
        ws2.on("error", () => transport.onclose());
      });
    }
    wsGuid() {
      return this._wsGuid;
    }
    async start(options = {}) {
      (0, _debug.assert)(!this._started, "server already started");
      this._started = true;
      const host = options.host || "localhost";
      if (options.preferredPort) {
        try {
          await this._tryStart(options.preferredPort, host);
        } catch (e) {
          if (!e || !e.message || !e.message.includes("EADDRINUSE"))
            throw e;
          await this._tryStart(undefined, host);
        }
      } else {
        await this._tryStart(options.port, host);
      }
      const address = this._server.address();
      (0, _debug.assert)(address, "Could not bind server socket");
      if (typeof address === "string") {
        this._urlPrefixPrecise = address;
        this._urlPrefixHumanReadable = address;
      } else {
        this._port = address.port;
        const resolvedHost = address.family === "IPv4" ? address.address : `[${address.address}]`;
        this._urlPrefixPrecise = `http://${resolvedHost}:${address.port}`;
        this._urlPrefixHumanReadable = `http://${host}:${address.port}`;
      }
    }
    async stop() {
      await new Promise((cb) => this._server.close(cb));
    }
    urlPrefix(purpose) {
      return purpose === "human-readable" ? this._urlPrefixHumanReadable : this._urlPrefixPrecise;
    }
    serveFile(request, response, absoluteFilePath, headers) {
      try {
        for (const [name, value] of Object.entries(headers || {}))
          response.setHeader(name, value);
        if (request.headers.range)
          this._serveRangeFile(request, response, absoluteFilePath);
        else
          this._serveFile(response, absoluteFilePath);
        return true;
      } catch (e) {
        return false;
      }
    }
    _serveFile(response, absoluteFilePath) {
      const content = _fs.default.readFileSync(absoluteFilePath);
      response.statusCode = 200;
      const contentType = _utilsBundle.mime.getType(_path.default.extname(absoluteFilePath)) || "application/octet-stream";
      response.setHeader("Content-Type", contentType);
      response.setHeader("Content-Length", content.byteLength);
      response.end(content);
    }
    _serveRangeFile(request, response, absoluteFilePath) {
      const range = request.headers.range;
      if (!range || !range.startsWith("bytes=") || range.includes(", ") || [...range].filter((char) => char === "-").length !== 1) {
        response.statusCode = 400;
        return response.end("Bad request");
      }
      const [startStr, endStr] = range.replace(/bytes=/, "").split("-");
      let start;
      let end;
      const size = _fs.default.statSync(absoluteFilePath).size;
      if (startStr !== "" && endStr === "") {
        start = +startStr;
        end = size - 1;
      } else if (startStr === "" && endStr !== "") {
        start = size - +endStr;
        end = size - 1;
      } else {
        start = +startStr;
        end = +endStr;
      }
      if (Number.isNaN(start) || Number.isNaN(end) || start >= size || end >= size || start > end) {
        response.writeHead(416, {
          "Content-Range": `bytes */${size}`
        });
        return response.end();
      }
      response.writeHead(206, {
        "Content-Range": `bytes ${start}-${end}/${size}`,
        "Accept-Ranges": "bytes",
        "Content-Length": end - start + 1,
        "Content-Type": _utilsBundle.mime.getType(_path.default.extname(absoluteFilePath))
      });
      const readable = _fs.default.createReadStream(absoluteFilePath, {
        start,
        end
      });
      readable.pipe(response);
    }
    _onRequest(request, response) {
      response.setHeader("Access-Control-Allow-Origin", "*");
      response.setHeader("Access-Control-Request-Method", "*");
      response.setHeader("Access-Control-Allow-Methods", "OPTIONS, GET");
      if (request.headers.origin)
        response.setHeader("Access-Control-Allow-Headers", request.headers.origin);
      if (request.method === "OPTIONS") {
        response.writeHead(200);
        response.end();
        return;
      }
      request.on("error", () => response.end());
      try {
        if (!request.url) {
          response.end();
          return;
        }
        const url = new URL("http://localhost" + request.url);
        for (const route of this._routes) {
          if (route.exact && url.pathname === route.exact && route.handler(request, response))
            return;
          if (route.prefix && url.pathname.startsWith(route.prefix) && route.handler(request, response))
            return;
        }
        response.statusCode = 404;
        response.end();
      } catch (e) {
        response.end();
      }
    }
  }
  exports.HttpServer = HttpServer;
});

// node_modules/playwright-core/lib/utils/mimeType.js
var require_mimeType = __commonJS((exports) => {
  var isJsonMimeType = function(mimeType) {
    return !!mimeType.match(/^(application\/json|application\/.*?\+json|text\/(x-)?json)(;\s*charset=.*)?$/);
  };
  var isTextualMimeType = function(mimeType) {
    return !!mimeType.match(/^(text\/.*?|application\/(json|(x-)?javascript|xml.*?|ecmascript|graphql|x-www-form-urlencoded)|image\/svg(\+xml)?|application\/.*?(\+json|\+xml))(;\s*charset=.*)?$/);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isJsonMimeType = isJsonMimeType;
  exports.isTextualMimeType = isTextualMimeType;
});

// node_modules/playwright-core/lib/utils/multimap.js
var require_multimap = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.MultiMap = undefined;
  var _Symbol$iterator;
  _Symbol$iterator = Symbol.iterator;

  class MultiMap {
    constructor() {
      this._map = undefined;
      this._map = new Map;
    }
    set(key, value) {
      let values = this._map.get(key);
      if (!values) {
        values = [];
        this._map.set(key, values);
      }
      values.push(value);
    }
    get(key) {
      return this._map.get(key) || [];
    }
    has(key) {
      return this._map.has(key);
    }
    delete(key, value) {
      const values = this._map.get(key);
      if (!values)
        return;
      if (values.includes(value))
        this._map.set(key, values.filter((v) => value !== v));
    }
    deleteAll(key) {
      this._map.delete(key);
    }
    hasValue(key, value) {
      const values = this._map.get(key);
      if (!values)
        return false;
      return values.includes(value);
    }
    get size() {
      return this._map.size;
    }
    [_Symbol$iterator]() {
      return this._map[Symbol.iterator]();
    }
    keys() {
      return this._map.keys();
    }
    values() {
      const result = [];
      for (const key of this.keys())
        result.push(...this.get(key));
      return result;
    }
    clear() {
      this._map.clear();
    }
  }
  exports.MultiMap = MultiMap;
});

// node_modules/playwright-core/lib/utils/processLauncher.js
var require_processLauncher = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  async function gracefullyCloseAll() {
    await Promise.all(Array.from(gracefullyCloseSet).map((gracefullyClose) => gracefullyClose().catch((e) => {
    })));
  }
  var gracefullyProcessExitDoNotHang = function(code) {
    setTimeout(() => process.exit(code), 30000);
    gracefullyCloseAll().then(() => {
      process.exit(code);
    });
  };
  var exitHandler = function() {
    for (const kill of killSet)
      kill();
  };
  var sigintHandler = function() {
    const exitWithCode130 = () => {
      if ((0, _.isUnderTest)()) {
        setTimeout(() => process.exit(130), 1000);
      } else {
        process.exit(130);
      }
    };
    if (sigintHandlerCalled) {
      process.off("SIGINT", sigintHandler);
      for (const kill of killSet)
        kill();
      exitWithCode130();
    } else {
      sigintHandlerCalled = true;
      gracefullyCloseAll().then(() => exitWithCode130());
    }
  };
  var sigtermHandler = function() {
    gracefullyCloseAll();
  };
  var sighupHandler = function() {
    gracefullyCloseAll();
  };
  var addProcessHandlerIfNeeded = function(name) {
    if (!installedHandlers.has(name)) {
      installedHandlers.add(name);
      process.on(name, processHandlers[name]);
    }
  };
  var removeProcessHandlersIfNeeded = function() {
    if (killSet.size)
      return;
    for (const handler of installedHandlers)
      process.off(handler, processHandlers[handler]);
    installedHandlers.clear();
  };
  async function launchProcess(options) {
    const stdio = options.stdio === "pipe" ? ["ignore", "pipe", "pipe", "pipe", "pipe"] : ["pipe", "pipe", "pipe"];
    options.log(`<launching> ${options.command} ${options.args ? options.args.join(" ") : ""}`);
    const spawnOptions = {
      detached: process.platform !== "win32",
      env: options.env,
      cwd: options.cwd,
      shell: options.shell,
      stdio
    };
    const spawnedProcess = childProcess.spawn(options.command, options.args || [], spawnOptions);
    const cleanup = async () => {
      options.log(`[pid=${spawnedProcess.pid || "N/A"}] starting temporary directories cleanup`);
      const errors = await (0, _fileUtils.removeFolders)(options.tempDirectories);
      for (let i = 0;i < options.tempDirectories.length; ++i) {
        if (errors[i])
          options.log(`[pid=${spawnedProcess.pid || "N/A"}] exception while removing ${options.tempDirectories[i]}: ${errors[i]}`);
      }
      options.log(`[pid=${spawnedProcess.pid || "N/A"}] finished temporary directories cleanup`);
    };
    spawnedProcess.on("error", () => {
    });
    if (!spawnedProcess.pid) {
      let failed;
      const failedPromise = new Promise((f, r) => failed = f);
      spawnedProcess.once("error", (error) => {
        failed(new Error("Failed to launch: " + error));
      });
      return cleanup().then(() => failedPromise).then((e) => Promise.reject(e));
    }
    options.log(`<launched> pid=${spawnedProcess.pid}`);
    const stdout = readline.createInterface({
      input: spawnedProcess.stdout
    });
    stdout.on("line", (data) => {
      options.log(`[pid=${spawnedProcess.pid}][out] ` + data);
    });
    const stderr = readline.createInterface({
      input: spawnedProcess.stderr
    });
    stderr.on("line", (data) => {
      options.log(`[pid=${spawnedProcess.pid}][err] ` + data);
    });
    let processClosed = false;
    let fulfillCleanup = () => {
    };
    const waitForCleanup = new Promise((f) => fulfillCleanup = f);
    spawnedProcess.once("exit", (exitCode, signal) => {
      options.log(`[pid=${spawnedProcess.pid}] <process did exit: exitCode=${exitCode}, signal=${signal}>`);
      processClosed = true;
      gracefullyCloseSet.delete(gracefullyClose);
      killSet.delete(killProcessAndCleanup);
      removeProcessHandlersIfNeeded();
      options.onExit(exitCode, signal);
      cleanup().then(fulfillCleanup);
    });
    addProcessHandlerIfNeeded("exit");
    if (options.handleSIGINT)
      addProcessHandlerIfNeeded("SIGINT");
    if (options.handleSIGTERM)
      addProcessHandlerIfNeeded("SIGTERM");
    if (options.handleSIGHUP)
      addProcessHandlerIfNeeded("SIGHUP");
    gracefullyCloseSet.add(gracefullyClose);
    killSet.add(killProcessAndCleanup);
    let gracefullyClosing = false;
    async function gracefullyClose() {
      if (gracefullyClosing) {
        options.log(`[pid=${spawnedProcess.pid}] <forcefully close>`);
        killProcess();
        await waitForCleanup;
        return;
      }
      gracefullyClosing = true;
      options.log(`[pid=${spawnedProcess.pid}] <gracefully close start>`);
      await options.attemptToGracefullyClose().catch(() => killProcess());
      await waitForCleanup;
      options.log(`[pid=${spawnedProcess.pid}] <gracefully close end>`);
    }
    function killProcess() {
      gracefullyCloseSet.delete(gracefullyClose);
      killSet.delete(killProcessAndCleanup);
      removeProcessHandlersIfNeeded();
      options.log(`[pid=${spawnedProcess.pid}] <kill>`);
      if (spawnedProcess.pid && !spawnedProcess.killed && !processClosed) {
        options.log(`[pid=${spawnedProcess.pid}] <will force kill>`);
        try {
          if (process.platform === "win32") {
            const taskkillProcess = childProcess.spawnSync(`taskkill /pid ${spawnedProcess.pid} /T /F`, {
              shell: true
            });
            const [stdout2, stderr2] = [taskkillProcess.stdout.toString(), taskkillProcess.stderr.toString()];
            if (stdout2)
              options.log(`[pid=${spawnedProcess.pid}] taskkill stdout: ${stdout2}`);
            if (stderr2)
              options.log(`[pid=${spawnedProcess.pid}] taskkill stderr: ${stderr2}`);
          } else {
            process.kill(-spawnedProcess.pid, "SIGKILL");
          }
        } catch (e) {
          options.log(`[pid=${spawnedProcess.pid}] exception while trying to kill process: ${e}`);
        }
      } else {
        options.log(`[pid=${spawnedProcess.pid}] <skipped force kill spawnedProcess.killed=${spawnedProcess.killed} processClosed=${processClosed}>`);
      }
    }
    function killProcessAndCleanup() {
      killProcess();
      options.log(`[pid=${spawnedProcess.pid || "N/A"}] starting temporary directories cleanup`);
      for (const dir of options.tempDirectories) {
        try {
          _fs.default.rmSync(dir, {
            force: true,
            recursive: true,
            maxRetries: 5
          });
        } catch (e) {
          options.log(`[pid=${spawnedProcess.pid || "N/A"}] exception while removing ${dir}: ${e}`);
        }
      }
      options.log(`[pid=${spawnedProcess.pid || "N/A"}] finished temporary directories cleanup`);
    }
    function killAndWait() {
      killProcess();
      return waitForCleanup;
    }
    return {
      launchedProcess: spawnedProcess,
      gracefullyClose,
      kill: killAndWait
    };
  }
  var envArrayToObject = function(env) {
    const result = {};
    for (const {
      name,
      value
    } of env)
      result[name] = value;
    return result;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.envArrayToObject = envArrayToObject;
  exports.gracefullyCloseAll = gracefullyCloseAll;
  exports.gracefullyCloseSet = undefined;
  exports.gracefullyProcessExitDoNotHang = gracefullyProcessExitDoNotHang;
  exports.launchProcess = launchProcess;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var childProcess = _interopRequireWildcard(import.meta.require("child_process"));
  var readline = _interopRequireWildcard(import.meta.require("readline"));
  var _ = require_utils3();
  var _fileUtils = require_fileUtils();
  var gracefullyCloseSet = exports.gracefullyCloseSet = new Set;
  var killSet = new Set;
  var sigintHandlerCalled = false;
  var installedHandlers = new Set;
  var processHandlers = {
    exit: exitHandler,
    SIGINT: sigintHandler,
    SIGTERM: sigtermHandler,
    SIGHUP: sighupHandler
  };
});

// node_modules/playwright-core/lib/utils/profiler.js
var require_profiler = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  async function startProfiling() {
    if (!profileDir)
      return;
    session = new (import.meta.require("inspector")).Session;
    session.connect();
    await new Promise((f) => {
      session.post("Profiler.enable", () => {
        session.post("Profiler.start", f);
      });
    });
  }
  async function stopProfiling(profileName) {
    if (!profileDir)
      return;
    await new Promise((f) => session.post("Profiler.stop", (err, {
      profile
    }) => {
      if (!err) {
        fs.mkdirSync(profileDir, {
          recursive: true
        });
        fs.writeFileSync(path.join(profileDir, profileName + ".json"), JSON.stringify(profile));
      }
      f();
    }));
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.startProfiling = startProfiling;
  exports.stopProfiling = stopProfiling;
  var fs = _interopRequireWildcard(import.meta.require("fs"));
  var path = _interopRequireWildcard(import.meta.require("path"));
  var profileDir = process.env.PWTEST_PROFILE_DIR || "";
  var session;
});

// node_modules/playwright-core/lib/utils/semaphore.js
var require_semaphore = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Semaphore = undefined;
  var _manualPromise = require_manualPromise();

  class Semaphore {
    constructor(max) {
      this._max = undefined;
      this._acquired = 0;
      this._queue = [];
      this._max = max;
    }
    setMax(max) {
      this._max = max;
    }
    acquire() {
      const lock = new _manualPromise.ManualPromise;
      this._queue.push(lock);
      this._flush();
      return lock;
    }
    release() {
      --this._acquired;
      this._flush();
    }
    _flush() {
      while (this._acquired < this._max && this._queue.length) {
        ++this._acquired;
        this._queue.shift().resolve();
      }
    }
  }
  exports.Semaphore = Semaphore;
});

// node_modules/playwright-core/lib/utils/spawnAsync.js
var require_spawnAsync = __commonJS((exports) => {
  var spawnAsync = function(cmd, args, options = {}) {
    const process2 = (0, _child_process.spawn)(cmd, args, Object.assign({
      windowsHide: true
    }, options));
    return new Promise((resolve) => {
      let stdout = "";
      let stderr = "";
      if (process2.stdout)
        process2.stdout.on("data", (data) => stdout += data.toString());
      if (process2.stderr)
        process2.stderr.on("data", (data) => stderr += data.toString());
      process2.on("close", (code) => resolve({
        stdout,
        stderr,
        code
      }));
      process2.on("error", (error) => resolve({
        stdout,
        stderr,
        code: 0,
        error
      }));
    });
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.spawnAsync = spawnAsync;
  var _child_process = import.meta.require("child_process");
});

// node_modules/playwright-core/lib/utils/task.js
var require_task = __commonJS((exports) => {
  var makeWaitForNextTask = function() {
    if (process.versions.electron)
      return (callback) => setTimeout(callback, 0);
    if (parseInt(process.versions.node, 10) >= 11)
      return setImmediate;
    let spinning = false;
    const callbacks = [];
    const loop = () => {
      const callback = callbacks.shift();
      if (!callback) {
        spinning = false;
        return;
      }
      setImmediate(loop);
      callback();
    };
    return (callback) => {
      callbacks.push(callback);
      if (!spinning) {
        spinning = true;
        setImmediate(loop);
      }
    };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.makeWaitForNextTask = makeWaitForNextTask;
});

// node_modules/playwright-core/lib/utils/time.js
var require_time = __commonJS((exports) => {
  var monotonicTime = function() {
    const [seconds, nanoseconds] = process.hrtime(initialTime);
    return seconds * 1000 + (nanoseconds / 1000 | 0) / 1000;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.monotonicTime = monotonicTime;
  var initialTime = process.hrtime();
});

// node_modules/playwright-core/lib/utils/timeoutRunner.js
var require_timeoutRunner = __commonJS((exports) => {
  async function raceAgainstDeadline(cb, deadline) {
    let timer;
    return Promise.race([cb().then((result) => {
      return {
        result,
        timedOut: false
      };
    }), new Promise((resolve) => {
      const kMaxDeadline = 2147483647;
      const timeout = (deadline || kMaxDeadline) - (0, _.monotonicTime)();
      timer = setTimeout(() => resolve({
        timedOut: true
      }), timeout);
    })]).finally(() => {
      clearTimeout(timer);
    });
  }
  async function pollAgainstDeadline(callback, deadline, pollIntervals = [100, 250, 500, 1000]) {
    var _pollIntervals$pop;
    const lastPollInterval = (_pollIntervals$pop = pollIntervals.pop()) !== null && _pollIntervals$pop !== undefined ? _pollIntervals$pop : 1000;
    let lastResult;
    const wrappedCallback = () => Promise.resolve().then(callback);
    while (true) {
      var _shift;
      const time = (0, _.monotonicTime)();
      if (deadline && time >= deadline)
        break;
      const received = await raceAgainstDeadline(wrappedCallback, deadline);
      if (received.timedOut)
        break;
      lastResult = received.result.result;
      if (!received.result.continuePolling)
        return {
          result: lastResult,
          timedOut: false
        };
      const interval = (_shift = pollIntervals.shift()) !== null && _shift !== undefined ? _shift : lastPollInterval;
      if (deadline && deadline <= (0, _.monotonicTime)() + interval)
        break;
      await new Promise((x) => setTimeout(x, interval));
    }
    return {
      timedOut: true,
      result: lastResult
    };
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.pollAgainstDeadline = pollAgainstDeadline;
  exports.raceAgainstDeadline = raceAgainstDeadline;
  var _ = require_utils3();
});

// node_modules/playwright-core/lib/utils/traceUtils.js
var require_traceUtils = __commonJS((exports) => {
  var serializeClientSideCallMetadata = function(metadatas) {
    const fileNames = new Map;
    const stacks = [];
    for (const m of metadatas) {
      if (!m.stack || !m.stack.length)
        continue;
      const stack = [];
      for (const frame of m.stack) {
        let ordinal = fileNames.get(frame.file);
        if (typeof ordinal !== "number") {
          ordinal = fileNames.size;
          fileNames.set(frame.file, ordinal);
        }
        const stackFrame = [ordinal, frame.line || 0, frame.column || 0, frame.function || ""];
        stack.push(stackFrame);
      }
      stacks.push([m.id, stack]);
    }
    return {
      files: [...fileNames.keys()],
      stacks
    };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.serializeClientSideCallMetadata = serializeClientSideCallMetadata;
});

// node_modules/playwright-core/package.json
var require_package = __commonJS((exports, module) => {
  module.exports = {
    name: "playwright-core",
    version: "1.44.1",
    description: "A high-level API to automate web browsers",
    repository: {
      type: "git",
      url: "git+https://github.com/microsoft/playwright.git"
    },
    homepage: "https://playwright.dev",
    engines: {
      node: ">=16"
    },
    author: {
      name: "Microsoft Corporation"
    },
    license: "Apache-2.0",
    exports: {
      ".": {
        types: "./index.d.ts",
        import: "./index.mjs",
        require: "./index.js",
        default: "./index.js"
      },
      "./package.json": "./package.json",
      "./lib/outofprocess": "./lib/outofprocess.js",
      "./lib/image_tools/stats": "./lib/image_tools/stats.js",
      "./lib/image_tools/compare": "./lib/image_tools/compare.js",
      "./lib/image_tools/imageChannel": "./lib/image_tools/imageChannel.js",
      "./lib/image_tools/colorUtils": "./lib/image_tools/colorUtils.js",
      "./lib/cli/program": "./lib/cli/program.js",
      "./lib/server/registry/index": "./lib/server/registry/index.js",
      "./lib/remote/playwrightServer": "./lib/remote/playwrightServer.js",
      "./lib/server": "./lib/server/index.js",
      "./lib/utils": "./lib/utils/index.js",
      "./lib/utilsBundle": "./lib/utilsBundle.js",
      "./lib/zipBundle": "./lib/zipBundle.js",
      "./types/protocol": "./types/protocol.d.ts",
      "./types/structs": "./types/structs.d.ts"
    },
    bin: {
      "playwright-core": "cli.js"
    },
    types: "types/types.d.ts"
  };
});

// node_modules/playwright-core/lib/utils/userAgent.js
var require_userAgent = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var getUserAgent = function() {
    if (cachedUserAgent)
      return cachedUserAgent;
    try {
      cachedUserAgent = determineUserAgent();
    } catch (e) {
      cachedUserAgent = "Playwright/unknown";
    }
    return cachedUserAgent;
  };
  var determineUserAgent = function() {
    let osIdentifier = "unknown";
    let osVersion = "unknown";
    if (process.platform === "win32") {
      const version = _os.default.release().split(".");
      osIdentifier = "windows";
      osVersion = `${version[0]}.${version[1]}`;
    } else if (process.platform === "darwin") {
      const version = (0, _child_process.execSync)("sw_vers -productVersion", {
        stdio: ["ignore", "pipe", "ignore"]
      }).toString().trim().split(".");
      osIdentifier = "macOS";
      osVersion = `${version[0]}.${version[1]}`;
    } else if (process.platform === "linux") {
      const distroInfo = (0, _linuxUtils.getLinuxDistributionInfoSync)();
      if (distroInfo) {
        osIdentifier = distroInfo.id || "linux";
        osVersion = distroInfo.version || "unknown";
      } else {
        osIdentifier = "linux";
      }
    }
    const additionalTokens = [];
    if (process.env.CI)
      additionalTokens.push("CI/1");
    const serializedTokens = additionalTokens.length ? " " + additionalTokens.join(" ") : "";
    const {
      embedderName,
      embedderVersion
    } = getEmbedderName();
    return `Playwright/${getPlaywrightVersion()} (${_os.default.arch()}; ${osIdentifier} ${osVersion}) ${embedderName}/${embedderVersion}${serializedTokens}`;
  };
  var getEmbedderName = function() {
    let embedderName = "unknown";
    let embedderVersion = "unknown";
    if (!process.env.PW_LANG_NAME) {
      embedderName = "node";
      embedderVersion = process.version.substring(1).split(".").slice(0, 2).join(".");
    } else if (["node", "python", "java", "csharp"].includes(process.env.PW_LANG_NAME)) {
      var _process$env$PW_LANG_;
      embedderName = process.env.PW_LANG_NAME;
      embedderVersion = (_process$env$PW_LANG_ = process.env.PW_LANG_NAME_VERSION) !== null && _process$env$PW_LANG_ !== undefined ? _process$env$PW_LANG_ : "unknown";
    }
    return {
      embedderName,
      embedderVersion
    };
  };
  var getPlaywrightVersion = function(majorMinorOnly = false) {
    const version = process.env.PW_VERSION_OVERRIDE || require_package().version;
    return majorMinorOnly ? version.split(".").slice(0, 2).join(".") : version;
  };
  var userAgentVersionMatchesErrorMessage = function(userAgent) {
    const match = userAgent.match(/^Playwright\/(\d+\.\d+\.\d+)/);
    if (!match) {
      return;
    }
    const received = match[1].split(".").slice(0, 2).join(".");
    const expected = getPlaywrightVersion(true);
    if (received !== expected) {
      return (0, _ascii.wrapInASCIIBox)([`Playwright version mismatch:`, `  - server version: v${expected}`, `  - client version: v${received}`, ``, `If you are using VSCode extension, restart VSCode.`, ``, `If you are connecting to a remote service,`, `keep your local Playwright version in sync`, `with the remote service version.`, ``, `<3 Playwright Team`].join("\n"), 1);
    }
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getEmbedderName = getEmbedderName;
  exports.getPlaywrightVersion = getPlaywrightVersion;
  exports.getUserAgent = getUserAgent;
  exports.userAgentVersionMatchesErrorMessage = userAgentVersionMatchesErrorMessage;
  var _child_process = import.meta.require("child_process");
  var _os = _interopRequireDefault(import.meta.require("os"));
  var _linuxUtils = require_linuxUtils();
  var _ascii = require_ascii();
  var cachedUserAgent;
});

// node_modules/playwright-core/lib/utils/debugLogger.js
var require_debugLogger = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.debugLogger = exports.RecentLogsCollector = undefined;
  var _utilsBundle = require_utilsBundle();
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var debugLoggerColorMap = {
    api: 45,
    protocol: 34,
    install: 34,
    download: 34,
    browser: 0,
    socks: 92,
    error: 160,
    channel: 33,
    server: 45,
    "server:channel": 34,
    "server:metadata": 33
  };

  class DebugLogger {
    constructor() {
      this._debuggers = new Map;
      if (process.env.DEBUG_FILE) {
        const ansiRegex = new RegExp(["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)", "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|"), "g");
        const stream = _fs.default.createWriteStream(process.env.DEBUG_FILE);
        _utilsBundle.debug.log = (data) => {
          stream.write(data.replace(ansiRegex, ""));
          stream.write("\n");
        };
      }
    }
    log(name, message) {
      let cachedDebugger = this._debuggers.get(name);
      if (!cachedDebugger) {
        cachedDebugger = (0, _utilsBundle.debug)(`pw:${name}`);
        this._debuggers.set(name, cachedDebugger);
        cachedDebugger.color = debugLoggerColorMap[name] || 0;
      }
      cachedDebugger(message);
    }
    isEnabled(name) {
      return _utilsBundle.debug.enabled(`pw:${name}`);
    }
  }
  var debugLogger = exports.debugLogger = new DebugLogger;
  var kLogCount = 150;

  class RecentLogsCollector {
    constructor() {
      this._logs = [];
    }
    log(message) {
      this._logs.push(message);
      if (this._logs.length === kLogCount * 2)
        this._logs.splice(0, kLogCount);
    }
    recentLogs() {
      if (this._logs.length > kLogCount)
        return this._logs.slice(-kLogCount);
      return this._logs;
    }
  }
  exports.RecentLogsCollector = RecentLogsCollector;
});

// node_modules/playwright-core/lib/utils/wsServer.js
var require_wsServer = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.perMessageDeflate = exports.WSServer = undefined;
  var _utils = require_utils3();
  var _utilsBundle = require_utilsBundle();
  var _debugLogger = require_debugLogger();
  var lastConnectionId = 0;
  var kConnectionSymbol = Symbol("kConnection");
  var perMessageDeflate = exports.perMessageDeflate = {
    zlibDeflateOptions: {
      level: 3
    },
    zlibInflateOptions: {
      chunkSize: 10 * 1024
    },
    threshold: 10 * 1024
  };

  class WSServer {
    constructor(delegate) {
      this._wsServer = undefined;
      this.server = undefined;
      this._delegate = undefined;
      this._delegate = delegate;
    }
    async listen(port = 0, hostname, path) {
      _debugLogger.debugLogger.log("server", `Server started at ${new Date}`);
      const server = (0, _utils.createHttpServer)((request, response) => {
        if (request.method === "GET" && request.url === "/json") {
          response.setHeader("Content-Type", "application/json");
          response.end(JSON.stringify({
            wsEndpointPath: path
          }));
          return;
        }
        response.end("Running");
      });
      server.on("error", (error) => _debugLogger.debugLogger.log("server", String(error)));
      this.server = server;
      const wsEndpoint = await new Promise((resolve, reject) => {
        server.listen(port, hostname, () => {
          const address = server.address();
          if (!address) {
            reject(new Error("Could not bind server socket"));
            return;
          }
          const wsEndpoint2 = typeof address === "string" ? `${address}${path}` : `ws://${hostname || "localhost"}:${address.port}${path}`;
          resolve(wsEndpoint2);
        }).on("error", reject);
      });
      _debugLogger.debugLogger.log("server", "Listening at " + wsEndpoint);
      this._wsServer = new _utilsBundle.wsServer({
        noServer: true,
        perMessageDeflate
      });
      if (this._delegate.onHeaders)
        this._wsServer.on("headers", (headers) => this._delegate.onHeaders(headers));
      server.on("upgrade", (request, socket, head) => {
        var _this$_delegate$onUpg, _this$_delegate, _this$_wsServer;
        const pathname = new URL("http://localhost" + request.url).pathname;
        if (pathname !== path) {
          socket.write(`HTTP/${request.httpVersion} 400 Bad Request\r\n\r\n`);
          socket.destroy();
          return;
        }
        const upgradeResult = (_this$_delegate$onUpg = (_this$_delegate = this._delegate).onUpgrade) === null || _this$_delegate$onUpg === undefined ? undefined : _this$_delegate$onUpg.call(_this$_delegate, request, socket);
        if (upgradeResult) {
          socket.write(upgradeResult.error);
          socket.destroy();
          return;
        }
        (_this$_wsServer = this._wsServer) === null || _this$_wsServer === undefined || _this$_wsServer.handleUpgrade(request, socket, head, (ws2) => {
          var _this$_wsServer2;
          return (_this$_wsServer2 = this._wsServer) === null || _this$_wsServer2 === undefined ? undefined : _this$_wsServer2.emit("connection", ws2, request);
        });
      });
      this._wsServer.on("connection", (ws2, request) => {
        _debugLogger.debugLogger.log("server", "Connected client ws.extension=" + ws2.extensions);
        const url = new URL("http://localhost" + (request.url || ""));
        const id = String(++lastConnectionId);
        _debugLogger.debugLogger.log("server", `[${id}] serving connection: ${request.url}`);
        const connection = this._delegate.onConnection(request, url, ws2, id);
        ws2[kConnectionSymbol] = connection;
      });
      return wsEndpoint;
    }
    async close() {
      var _this$_delegate$onClo, _this$_delegate2;
      const server = this._wsServer;
      if (!server)
        return;
      _debugLogger.debugLogger.log("server", "closing websocket server");
      const waitForClose = new Promise((f) => server.close(f));
      await Promise.all(Array.from(server.clients).map(async (ws2) => {
        const connection = ws2[kConnectionSymbol];
        if (connection)
          await connection.close();
        try {
          ws2.terminate();
        } catch (e) {
        }
      }));
      await waitForClose;
      _debugLogger.debugLogger.log("server", "closing http server");
      if (this.server)
        await new Promise((f) => this.server.close(f));
      this._wsServer = undefined;
      this.server = undefined;
      _debugLogger.debugLogger.log("server", "closed server");
      await ((_this$_delegate$onClo = (_this$_delegate2 = this._delegate).onClose) === null || _this$_delegate$onClo === undefined ? undefined : _this$_delegate$onClo.call(_this$_delegate2));
    }
  }
  exports.WSServer = WSServer;
});

// node_modules/playwright-core/lib/zipBundleImpl.js
var require_zipBundleImpl = __commonJS((exports, module) => {
  var ht = Object.create;
  var ae = Object.defineProperty;
  var pt = Object.getOwnPropertyDescriptor;
  var mt = Object.getOwnPropertyNames;
  var xt = Object.getPrototypeOf;
  var vt = Object.prototype.hasOwnProperty;
  var E = (e, r) => () => (r || e((r = { exports: {} }).exports, r), r.exports);
  var Et = (e, r) => {
    for (var t in r)
      ae(e, t, { get: r[t], enumerable: true });
  };
  var or = (e, r, t, n) => {
    if (r && typeof r == "object" || typeof r == "function")
      for (let i of mt(r))
        !vt.call(e, i) && i !== t && ae(e, i, { get: () => r[i], enumerable: !(n = pt(r, i)) || n.enumerable });
    return e;
  };
  var Ue = (e, r, t) => (t = e != null ? ht(xt(e)) : {}, or(r || !e || !e.__esModule ? ae(t, "default", { value: e, enumerable: true }) : t, e));
  var wt = (e) => or(ae({}, "__esModule", { value: true }), e);
  var Be = E((An, fr) => {
    var T = import.meta.require("buffer").Buffer, Te = [0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918000, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117];
    typeof Int32Array != "undefined" && (Te = new Int32Array(Te));
    function sr(e) {
      if (T.isBuffer(e))
        return e;
      var r = typeof T.alloc == "function" && typeof T.from == "function";
      if (typeof e == "number")
        return r ? T.alloc(e) : new T(e);
      if (typeof e == "string")
        return r ? T.from(e) : new T(e);
      throw new Error("input must be buffer, number, or string, received " + typeof e);
    }
    function gt(e) {
      var r = sr(4);
      return r.writeInt32BE(e, 0), r;
    }
    function Ne(e, r) {
      e = sr(e), T.isBuffer(r) && (r = r.readUInt32BE(0));
      for (var t = ~~r ^ -1, n = 0;n < e.length; n++)
        t = Te[(t ^ e[n]) & 255] ^ t >>> 8;
      return t ^ -1;
    }
    function Me() {
      return gt(Ne.apply(null, arguments));
    }
    Me.signed = function() {
      return Ne.apply(null, arguments);
    };
    Me.unsigned = function() {
      return Ne.apply(null, arguments) >>> 0;
    };
    fr.exports = Me;
  });
  var br = E((Ge) => {
    var ar = import.meta.require("fs"), he = import.meta.require("stream").Transform, ur = import.meta.require("stream").PassThrough, cr = import.meta.require("zlib"), We = import.meta.require("util"), yt = import.meta.require("events").EventEmitter, dr = Be();
    Ge.ZipFile = W;
    Ge.dateToDosDateTime = Cr;
    We.inherits(W, yt);
    function W() {
      this.outputStream = new ur, this.entries = [], this.outputStreamCursor = 0, this.ended = false, this.allDone = false, this.forceZip64Eocd = false;
    }
    W.prototype.addFile = function(e, r, t) {
      var n = this;
      r = pe(r, false), t == null && (t = {});
      var i = new m(r, false, t);
      n.entries.push(i), ar.stat(e, function(o, s) {
        if (o)
          return n.emit("error", o);
        if (!s.isFile())
          return n.emit("error", new Error("not a file: " + e));
        i.uncompressedSize = s.size, t.mtime == null && i.setLastModDate(s.mtime), t.mode == null && i.setFileAttributesMode(s.mode), i.setFileDataPumpFunction(function() {
          var f = ar.createReadStream(e);
          i.state = m.FILE_DATA_IN_PROGRESS, f.on("error", function(u) {
            n.emit("error", u);
          }), lr(n, i, f);
        }), M(n);
      });
    };
    W.prototype.addReadStream = function(e, r, t) {
      var n = this;
      r = pe(r, false), t == null && (t = {});
      var i = new m(r, false, t);
      n.entries.push(i), i.setFileDataPumpFunction(function() {
        i.state = m.FILE_DATA_IN_PROGRESS, lr(n, i, e);
      }), M(n);
    };
    W.prototype.addBuffer = function(e, r, t) {
      var n = this;
      if (r = pe(r, false), e.length > 1073741823)
        throw new Error("buffer too large: " + e.length + " > 1073741823");
      if (t == null && (t = {}), t.size != null)
        throw new Error("options.size not allowed");
      var i = new m(r, false, t);
      i.uncompressedSize = e.length, i.crc32 = dr.unsigned(e), i.crcAndFileSizeKnown = true, n.entries.push(i), i.compress ? cr.deflateRaw(e, function(s, f) {
        o(f);
      }) : o(e);
      function o(s) {
        i.compressedSize = s.length, i.setFileDataPumpFunction(function() {
          Z(n, s), Z(n, i.getDataDescriptor()), i.state = m.FILE_DATA_DONE, setImmediate(function() {
            M(n);
          });
        }), M(n);
      }
    };
    W.prototype.addEmptyDirectory = function(e, r) {
      var t = this;
      if (e = pe(e, true), r == null && (r = {}), r.size != null)
        throw new Error("options.size not allowed");
      if (r.compress != null)
        throw new Error("options.compress not allowed");
      var n = new m(e, true, r);
      t.entries.push(n), n.setFileDataPumpFunction(function() {
        Z(t, n.getDataDescriptor()), n.state = m.FILE_DATA_DONE, M(t);
      }), M(t);
    };
    var Ct = N([80, 75, 5, 6]);
    W.prototype.end = function(e, r) {
      if (typeof e == "function" && (r = e, e = null), e == null && (e = {}), !this.ended) {
        if (this.ended = true, this.finalSizeCallback = r, this.forceZip64Eocd = !!e.forceZip64Format, e.comment) {
          if (typeof e.comment == "string" ? this.comment = St(e.comment) : this.comment = e.comment, this.comment.length > 65535)
            throw new Error("comment is too large");
          if (te(this.comment, Ct))
            throw new Error("comment contains end of central directory record signature");
        } else
          this.comment = me;
        M(this);
      }
    };
    function Z(e, r) {
      e.outputStream.write(r), e.outputStreamCursor += r.length;
    }
    function lr(e, r, t) {
      var n = new He, i = new le, o = r.compress ? new cr.DeflateRaw : new ur, s = new le;
      t.pipe(n).pipe(i).pipe(o).pipe(s).pipe(e.outputStream, { end: false }), s.on("end", function() {
        if (r.crc32 = n.crc32, r.uncompressedSize == null)
          r.uncompressedSize = i.byteCount;
        else if (r.uncompressedSize !== i.byteCount)
          return e.emit("error", new Error("file data stream has unexpected number of bytes"));
        r.compressedSize = s.byteCount, e.outputStreamCursor += r.compressedSize, Z(e, r.getDataDescriptor()), r.state = m.FILE_DATA_DONE, M(e);
      });
    }
    function M(e) {
      if (e.allDone)
        return;
      if (e.ended && e.finalSizeCallback != null) {
        var r = bt(e);
        r != null && (e.finalSizeCallback(r), e.finalSizeCallback = null);
      }
      var t = n();
      function n() {
        for (var o = 0;o < e.entries.length; o++) {
          var s = e.entries[o];
          if (s.state < m.FILE_DATA_DONE)
            return s;
        }
        return null;
      }
      if (t != null) {
        if (t.state < m.READY_TO_PUMP_FILE_DATA || t.state === m.FILE_DATA_IN_PROGRESS)
          return;
        t.relativeOffsetOfLocalHeader = e.outputStreamCursor;
        var i = t.getLocalFileHeader();
        Z(e, i), t.doFileDataPump();
      } else
        e.ended && (e.offsetOfStartOfCentralDirectory = e.outputStreamCursor, e.entries.forEach(function(o) {
          var s = o.getCentralDirectoryRecord();
          Z(e, s);
        }), Z(e, Ft(e)), e.outputStream.end(), e.allDone = true);
    }
    function bt(e) {
      for (var r = 0, t = 0, n = 0;n < e.entries.length; n++) {
        var i = e.entries[n];
        if (i.compress)
          return -1;
        if (i.state >= m.READY_TO_PUMP_FILE_DATA) {
          if (i.uncompressedSize == null)
            return -1;
        } else if (i.uncompressedSize == null)
          return null;
        i.relativeOffsetOfLocalHeader = r;
        var o = i.useZip64Format();
        r += hr + i.utf8FileName.length, r += i.uncompressedSize, i.crcAndFileSizeKnown || (o ? r += gr : r += wr), t += yr + i.utf8FileName.length + i.fileComment.length, o && (t += Pe);
      }
      var s = 0;
      return (e.forceZip64Eocd || e.entries.length >= 65535 || t >= 65535 || r >= 4294967295) && (s += ce + qe), s += de + e.comment.length, r + t + s;
    }
    var ce = 56, qe = 20, de = 22;
    function Ft(e, r) {
      var t = false, n = e.entries.length;
      (e.forceZip64Eocd || e.entries.length >= 65535) && (n = 65535, t = true);
      var i = e.outputStreamCursor - e.offsetOfStartOfCentralDirectory, o = i;
      (e.forceZip64Eocd || i >= 4294967295) && (o = 4294967295, t = true);
      var s = e.offsetOfStartOfCentralDirectory;
      if ((e.forceZip64Eocd || e.offsetOfStartOfCentralDirectory >= 4294967295) && (s = 4294967295, t = true), r)
        return t ? ce + qe + de : de;
      var f = F(de + e.comment.length);
      if (f.writeUInt32LE(101010256, 0), f.writeUInt16LE(0, 4), f.writeUInt16LE(0, 6), f.writeUInt16LE(n, 8), f.writeUInt16LE(n, 10), f.writeUInt32LE(o, 12), f.writeUInt32LE(s, 16), f.writeUInt16LE(e.comment.length, 20), e.comment.copy(f, 22), !t)
        return f;
      var u = F(ce);
      u.writeUInt32LE(101075792, 0), I(u, ce - 12, 4), u.writeUInt16LE(xr, 12), u.writeUInt16LE(mr, 14), u.writeUInt32LE(0, 16), u.writeUInt32LE(0, 20), I(u, e.entries.length, 24), I(u, e.entries.length, 32), I(u, i, 40), I(u, e.offsetOfStartOfCentralDirectory, 48);
      var d = F(qe);
      return d.writeUInt32LE(117853008, 0), d.writeUInt32LE(0, 4), I(d, e.outputStreamCursor, 8), d.writeUInt32LE(1, 16), Buffer.concat([u, d, f]);
    }
    function pe(e, r) {
      if (e === "")
        throw new Error("empty metadataPath");
      if (e = e.replace(/\\/g, "/"), /^[a-zA-Z]:/.test(e) || /^\//.test(e))
        throw new Error("absolute path: " + e);
      if (e.split("/").indexOf("..") !== -1)
        throw new Error("invalid relative path: " + e);
      var t = /\/$/.test(e);
      if (r)
        t || (e += "/");
      else if (t)
        throw new Error("file path cannot end with '/': " + e);
      return e;
    }
    var me = F(0);
    function m(e, r, t) {
      if (this.utf8FileName = N(e), this.utf8FileName.length > 65535)
        throw new Error("utf8 file name too long. " + utf8FileName.length + " > 65535");
      if (this.isDirectory = r, this.state = m.WAITING_FOR_METADATA, this.setLastModDate(t.mtime != null ? t.mtime : new Date), t.mode != null ? this.setFileAttributesMode(t.mode) : this.setFileAttributesMode(r ? 16893 : 33204), r ? (this.crcAndFileSizeKnown = true, this.crc32 = 0, this.uncompressedSize = 0, this.compressedSize = 0) : (this.crcAndFileSizeKnown = false, this.crc32 = null, this.uncompressedSize = null, this.compressedSize = null, t.size != null && (this.uncompressedSize = t.size)), r ? this.compress = false : (this.compress = true, t.compress != null && (this.compress = !!t.compress)), this.forceZip64Format = !!t.forceZip64Format, t.fileComment) {
        if (typeof t.fileComment == "string" ? this.fileComment = N(t.fileComment, "utf-8") : this.fileComment = t.fileComment, this.fileComment.length > 65535)
          throw new Error("fileComment is too large");
      } else
        this.fileComment = me;
    }
    m.WAITING_FOR_METADATA = 0;
    m.READY_TO_PUMP_FILE_DATA = 1;
    m.FILE_DATA_IN_PROGRESS = 2;
    m.FILE_DATA_DONE = 3;
    m.prototype.setLastModDate = function(e) {
      var r = Cr(e);
      this.lastModFileTime = r.time, this.lastModFileDate = r.date;
    };
    m.prototype.setFileAttributesMode = function(e) {
      if ((e & 65535) !== e)
        throw new Error("invalid mode. expected: 0 <= " + e + " <= 65535");
      this.externalFileAttributes = e << 16 >>> 0;
    };
    m.prototype.setFileDataPumpFunction = function(e) {
      this.doFileDataPump = e, this.state = m.READY_TO_PUMP_FILE_DATA;
    };
    m.prototype.useZip64Format = function() {
      return this.forceZip64Format || this.uncompressedSize != null && this.uncompressedSize > 4294967294 || this.compressedSize != null && this.compressedSize > 4294967294 || this.relativeOffsetOfLocalHeader != null && this.relativeOffsetOfLocalHeader > 4294967294;
    };
    var hr = 30, pr = 20, mr = 45, xr = 831, vr = 2048, Er = 8;
    m.prototype.getLocalFileHeader = function() {
      var e = 0, r = 0, t = 0;
      this.crcAndFileSizeKnown && (e = this.crc32, r = this.compressedSize, t = this.uncompressedSize);
      var n = F(hr), i = vr;
      return this.crcAndFileSizeKnown || (i |= Er), n.writeUInt32LE(67324752, 0), n.writeUInt16LE(pr, 4), n.writeUInt16LE(i, 6), n.writeUInt16LE(this.getCompressionMethod(), 8), n.writeUInt16LE(this.lastModFileTime, 10), n.writeUInt16LE(this.lastModFileDate, 12), n.writeUInt32LE(e, 14), n.writeUInt32LE(r, 18), n.writeUInt32LE(t, 22), n.writeUInt16LE(this.utf8FileName.length, 26), n.writeUInt16LE(0, 28), Buffer.concat([n, this.utf8FileName]);
    };
    var wr = 16, gr = 24;
    m.prototype.getDataDescriptor = function() {
      if (this.crcAndFileSizeKnown)
        return me;
      if (this.useZip64Format()) {
        var e = F(gr);
        return e.writeUInt32LE(134695760, 0), e.writeUInt32LE(this.crc32, 4), I(e, this.compressedSize, 8), I(e, this.uncompressedSize, 16), e;
      } else {
        var e = F(wr);
        return e.writeUInt32LE(134695760, 0), e.writeUInt32LE(this.crc32, 4), e.writeUInt32LE(this.compressedSize, 8), e.writeUInt32LE(this.uncompressedSize, 12), e;
      }
    };
    var yr = 46, Pe = 28;
    m.prototype.getCentralDirectoryRecord = function() {
      var e = F(yr), r = vr;
      this.crcAndFileSizeKnown || (r |= Er);
      var t = this.compressedSize, n = this.uncompressedSize, i = this.relativeOffsetOfLocalHeader, o, s;
      return this.useZip64Format() ? (t = 4294967295, n = 4294967295, i = 4294967295, o = mr, s = F(Pe), s.writeUInt16LE(1, 0), s.writeUInt16LE(Pe - 4, 2), I(s, this.uncompressedSize, 4), I(s, this.compressedSize, 12), I(s, this.relativeOffsetOfLocalHeader, 20)) : (o = pr, s = me), e.writeUInt32LE(33639248, 0), e.writeUInt16LE(xr, 4), e.writeUInt16LE(o, 6), e.writeUInt16LE(r, 8), e.writeUInt16LE(this.getCompressionMethod(), 10), e.writeUInt16LE(this.lastModFileTime, 12), e.writeUInt16LE(this.lastModFileDate, 14), e.writeUInt32LE(this.crc32, 16), e.writeUInt32LE(t, 20), e.writeUInt32LE(n, 24), e.writeUInt16LE(this.utf8FileName.length, 28), e.writeUInt16LE(s.length, 30), e.writeUInt16LE(this.fileComment.length, 32), e.writeUInt16LE(0, 34), e.writeUInt16LE(0, 36), e.writeUInt32LE(this.externalFileAttributes, 38), e.writeUInt32LE(i, 42), Buffer.concat([e, this.utf8FileName, s, this.fileComment]);
    };
    m.prototype.getCompressionMethod = function() {
      var e = 0, r = 8;
      return this.compress ? r : e;
    };
    function Cr(e) {
      var r = 0;
      r |= e.getDate() & 31, r |= (e.getMonth() + 1 & 15) << 5, r |= (e.getFullYear() - 1980 & 127) << 9;
      var t = 0;
      return t |= Math.floor(e.getSeconds() / 2), t |= (e.getMinutes() & 63) << 5, t |= (e.getHours() & 31) << 11, { date: r, time: t };
    }
    function I(e, r, t) {
      var n = Math.floor(r / 4294967296), i = r % 4294967296;
      e.writeUInt32LE(i, t), e.writeUInt32LE(n, t + 4);
    }
    We.inherits(le, he);
    function le(e) {
      he.call(this, e), this.byteCount = 0;
    }
    le.prototype._transform = function(e, r, t) {
      this.byteCount += e.length, t(null, e);
    };
    We.inherits(He, he);
    function He(e) {
      he.call(this, e), this.crc32 = 0;
    }
    He.prototype._transform = function(e, r, t) {
      this.crc32 = dr.unsigned(e, this.crc32), t(null, e);
    };
    var Ze = "\0\u263A\u263B\u2665\u2666\u2663\u2660\u2022\u25D8\u25CB\u25D9\u2642\u2640\u266A\u266B\u263C\u25BA\u25C4\u2195\u203C\xB6\xA7\u25AC\u21A8\u2191\u2193\u2192\u2190\u221F\u2194\u25B2\u25BC !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u2302\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xA2\xA3\xA5\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0";
    if (Ze.length !== 256)
      throw new Error("assertion failure");
    var ue = null;
    function St(e) {
      if (/^[\x20-\x7e]*$/.test(e))
        return N(e, "utf-8");
      if (ue == null) {
        ue = {};
        for (var r = 0;r < Ze.length; r++)
          ue[Ze[r]] = r;
      }
      for (var t = F(e.length), r = 0;r < e.length; r++) {
        var n = ue[e[r]];
        if (n == null)
          throw new Error("character not encodable in CP437: " + JSON.stringify(e[r]));
        t[r] = n;
      }
      return t;
    }
    function F(e) {
      F = r;
      try {
        return F(e);
      } catch {
        return F = t, F(e);
      }
      function r(n) {
        return Buffer.allocUnsafe(n);
      }
      function t(n) {
        return new Buffer(n);
      }
    }
    function N(e, r) {
      N = t;
      try {
        return N(e, r);
      } catch {
        return N = n, N(e, r);
      }
      function t(i, o) {
        return Buffer.from(i, o);
      }
      function n(i, o) {
        return new Buffer(i, o);
      }
    }
    function te(e, r) {
      te = t;
      try {
        return te(e, r);
      } catch {
        return te = n, te(e, r);
      }
      function t(i, o) {
        return i.includes(o);
      }
      function n(i, o) {
        for (var s = 0;s <= i.length - o.length; s++)
          for (var f = 0;; f++) {
            if (f === o.length)
              return true;
            if (i[s + f] !== o[f])
              break;
          }
        return false;
      }
    }
  });
  var Lr = E((Dn, Ir) => {
    Ir.exports = xe;
    function xe() {
      this.pending = 0, this.max = 1 / 0, this.listeners = [], this.waiting = [], this.error = null;
    }
    xe.prototype.go = function(e) {
      this.pending < this.max ? Sr(this, e) : this.waiting.push(e);
    };
    xe.prototype.wait = function(e) {
      this.pending === 0 ? e(this.error) : this.listeners.push(e);
    };
    xe.prototype.hold = function() {
      return Fr(this);
    };
    function Fr(e) {
      e.pending += 1;
      var r = false;
      return t;
      function t(i) {
        if (r)
          throw new Error("callback called twice");
        if (r = true, e.error = e.error || i, e.pending -= 1, e.waiting.length > 0 && e.pending < e.max)
          Sr(e, e.waiting.shift());
        else if (e.pending === 0) {
          var o = e.listeners;
          e.listeners = [], o.forEach(n);
        }
      }
      function n(i) {
        i(e.error);
      }
    }
    function Sr(e, r) {
      r(Fr(e));
    }
  });
  var zr = E((ie) => {
    var ne = import.meta.require("fs"), ve = import.meta.require("util"), Ye = import.meta.require("stream"), Or = Ye.Readable, $e = Ye.Writable, It = Ye.PassThrough, Lt = Lr(), Ee = import.meta.require("events").EventEmitter;
    ie.createFromBuffer = Ot;
    ie.createFromFd = zt;
    ie.BufferSlicer = D;
    ie.FdSlicer = R;
    ve.inherits(R, Ee);
    function R(e, r) {
      r = r || {}, Ee.call(this), this.fd = e, this.pend = new Lt, this.pend.max = 1, this.refCount = 0, this.autoClose = !!r.autoClose;
    }
    R.prototype.read = function(e, r, t, n, i) {
      var o = this;
      o.pend.go(function(s) {
        ne.read(o.fd, e, r, t, n, function(f, u, d) {
          s(), i(f, u, d);
        });
      });
    };
    R.prototype.write = function(e, r, t, n, i) {
      var o = this;
      o.pend.go(function(s) {
        ne.write(o.fd, e, r, t, n, function(f, u, d) {
          s(), i(f, u, d);
        });
      });
    };
    R.prototype.createReadStream = function(e) {
      return new we(this, e);
    };
    R.prototype.createWriteStream = function(e) {
      return new ge(this, e);
    };
    R.prototype.ref = function() {
      this.refCount += 1;
    };
    R.prototype.unref = function() {
      var e = this;
      if (e.refCount -= 1, e.refCount > 0)
        return;
      if (e.refCount < 0)
        throw new Error("invalid unref");
      e.autoClose && ne.close(e.fd, r);
      function r(t) {
        t ? e.emit("error", t) : e.emit("close");
      }
    };
    ve.inherits(we, Or);
    function we(e, r) {
      r = r || {}, Or.call(this, r), this.context = e, this.context.ref(), this.start = r.start || 0, this.endOffset = r.end, this.pos = this.start, this.destroyed = false;
    }
    we.prototype._read = function(e) {
      var r = this;
      if (!r.destroyed) {
        var t = Math.min(r._readableState.highWaterMark, e);
        if (r.endOffset != null && (t = Math.min(t, r.endOffset - r.pos)), t <= 0) {
          r.destroyed = true, r.push(null), r.context.unref();
          return;
        }
        r.context.pend.go(function(n) {
          if (r.destroyed)
            return n();
          var i = Buffer.alloc(t);
          ne.read(r.context.fd, i, 0, t, r.pos, function(o, s) {
            o ? r.destroy(o) : s === 0 ? (r.destroyed = true, r.push(null), r.context.unref()) : (r.pos += s, r.push(i.slice(0, s))), n();
          });
        });
      }
    };
    we.prototype.destroy = function(e) {
      this.destroyed || (e = e || new Error("stream destroyed"), this.destroyed = true, this.emit("error", e), this.context.unref());
    };
    ve.inherits(ge, $e);
    function ge(e, r) {
      r = r || {}, $e.call(this, r), this.context = e, this.context.ref(), this.start = r.start || 0, this.endOffset = r.end == null ? 1 / 0 : +r.end, this.bytesWritten = 0, this.pos = this.start, this.destroyed = false, this.on("finish", this.destroy.bind(this));
    }
    ge.prototype._write = function(e, r, t) {
      var n = this;
      if (!n.destroyed) {
        if (n.pos + e.length > n.endOffset) {
          var i = new Error("maximum file length exceeded");
          i.code = "ETOOBIG", n.destroy(), t(i);
          return;
        }
        n.context.pend.go(function(o) {
          if (n.destroyed)
            return o();
          ne.write(n.context.fd, e, 0, e.length, n.pos, function(s, f) {
            s ? (n.destroy(), o(), t(s)) : (n.bytesWritten += f, n.pos += f, n.emit("progress"), o(), t());
          });
        });
      }
    };
    ge.prototype.destroy = function() {
      this.destroyed || (this.destroyed = true, this.context.unref());
    };
    ve.inherits(D, Ee);
    function D(e, r) {
      Ee.call(this), r = r || {}, this.refCount = 0, this.buffer = e, this.maxChunkSize = r.maxChunkSize || Number.MAX_SAFE_INTEGER;
    }
    D.prototype.read = function(e, r, t, n, i) {
      var o = n + t, s = o - this.buffer.length, f = s > 0 ? s : t;
      this.buffer.copy(e, r, n, o), setImmediate(function() {
        i(null, f);
      });
    };
    D.prototype.write = function(e, r, t, n, i) {
      e.copy(this.buffer, n, r, r + t), setImmediate(function() {
        i(null, t, e);
      });
    };
    D.prototype.createReadStream = function(e) {
      e = e || {};
      var r = new It(e);
      r.destroyed = false, r.start = e.start || 0, r.endOffset = e.end, r.pos = r.endOffset || this.buffer.length;
      for (var t = this.buffer.slice(r.start, r.pos), n = 0;; ) {
        var i = n + this.maxChunkSize;
        if (i >= t.length) {
          n < t.length && r.write(t.slice(n, t.length));
          break;
        }
        r.write(t.slice(n, i)), n = i;
      }
      return r.end(), r.destroy = function() {
        r.destroyed = true;
      }, r;
    };
    D.prototype.createWriteStream = function(e) {
      var r = this;
      e = e || {};
      var t = new $e(e);
      return t.start = e.start || 0, t.endOffset = e.end == null ? this.buffer.length : +e.end, t.bytesWritten = 0, t.pos = t.start, t.destroyed = false, t._write = function(n, i, o) {
        if (!t.destroyed) {
          var s = t.pos + n.length;
          if (s > t.endOffset) {
            var f = new Error("maximum file length exceeded");
            f.code = "ETOOBIG", t.destroyed = true, o(f);
            return;
          }
          n.copy(r.buffer, t.pos, 0, n.length), t.bytesWritten += n.length, t.pos = s, t.emit("progress"), o();
        }
      }, t.destroy = function() {
        t.destroyed = true;
      }, t;
    };
    D.prototype.ref = function() {
      this.refCount += 1;
    };
    D.prototype.unref = function() {
      if (this.refCount -= 1, this.refCount < 0)
        throw new Error("invalid unref");
    };
    function Ot(e, r) {
      return new D(e, r);
    }
    function zt(e, r) {
      return new R(e, r);
    }
  });
  var Xe = E((A) => {
    var je = import.meta.require("fs"), _t = import.meta.require("zlib"), _r = zr(), At = Be(), be = import.meta.require("util"), Fe = import.meta.require("events").EventEmitter, Ar = import.meta.require("stream").Transform, Ve = import.meta.require("stream").PassThrough, Rt = import.meta.require("stream").Writable;
    A.open = Dt;
    A.fromFd = Rr;
    A.fromBuffer = Ut;
    A.fromRandomAccessReader = Ke;
    A.dosDateTimeToDate = Ur;
    A.validateFileName = Tr;
    A.ZipFile = B;
    A.Entry = oe;
    A.RandomAccessReader = q;
    function Dt(e, r, t) {
      typeof r == "function" && (t = r, r = null), r == null && (r = {}), r.autoClose == null && (r.autoClose = true), r.lazyEntries == null && (r.lazyEntries = false), r.decodeStrings == null && (r.decodeStrings = true), r.validateEntrySizes == null && (r.validateEntrySizes = true), r.strictFileNames == null && (r.strictFileNames = false), t == null && (t = Ce), je.open(e, "r", function(n, i) {
        if (n)
          return t(n);
        Rr(i, r, function(o, s) {
          o && je.close(i, Ce), t(o, s);
        });
      });
    }
    function Rr(e, r, t) {
      typeof r == "function" && (t = r, r = null), r == null && (r = {}), r.autoClose == null && (r.autoClose = false), r.lazyEntries == null && (r.lazyEntries = false), r.decodeStrings == null && (r.decodeStrings = true), r.validateEntrySizes == null && (r.validateEntrySizes = true), r.strictFileNames == null && (r.strictFileNames = false), t == null && (t = Ce), je.fstat(e, function(n, i) {
        if (n)
          return t(n);
        var o = _r.createFromFd(e, { autoClose: true });
        Ke(o, i.size, r, t);
      });
    }
    function Ut(e, r, t) {
      typeof r == "function" && (t = r, r = null), r == null && (r = {}), r.autoClose = false, r.lazyEntries == null && (r.lazyEntries = false), r.decodeStrings == null && (r.decodeStrings = true), r.validateEntrySizes == null && (r.validateEntrySizes = true), r.strictFileNames == null && (r.strictFileNames = false);
      var n = _r.createFromBuffer(e, { maxChunkSize: 65536 });
      Ke(n, e.length, r, t);
    }
    function Ke(e, r, t, n) {
      typeof t == "function" && (n = t, t = null), t == null && (t = {}), t.autoClose == null && (t.autoClose = true), t.lazyEntries == null && (t.lazyEntries = false), t.decodeStrings == null && (t.decodeStrings = true);
      var i = !!t.decodeStrings;
      if (t.validateEntrySizes == null && (t.validateEntrySizes = true), t.strictFileNames == null && (t.strictFileNames = false), n == null && (n = Ce), typeof r != "number")
        throw new Error("expected totalSize parameter to be a number");
      if (r > Number.MAX_SAFE_INTEGER)
        throw new Error("zip file too large. only file sizes up to 2^52 are supported due to JavaScript's Number type being an IEEE 754 double.");
      e.ref();
      var o = 22, s = 65535, f = Math.min(o + s, r), u = _(f), d = r - u.length;
      $(e, u, 0, f, d, function(a) {
        if (a)
          return n(a);
        for (var c = f - o;c >= 0; c -= 1)
          if (u.readUInt32LE(c) === 101010256) {
            var l = u.slice(c), x = l.readUInt16LE(4);
            if (x !== 0)
              return n(new Error("multi-disk zip files are not supported: found disk number: " + x));
            var g = l.readUInt16LE(10), p = l.readUInt32LE(16), h = l.readUInt16LE(20), v = l.length - o;
            if (h !== v)
              return n(new Error("invalid comment length. expected: " + v + ". found: " + h));
            var w = i ? ye(l, 22, l.length, false) : l.slice(22);
            if (!(g === 65535 || p === 4294967295))
              return n(null, new B(e, p, r, g, w, t.autoClose, t.lazyEntries, i, t.validateEntrySizes, t.strictFileNames));
            var b = _(20), U = d + c - b.length;
            $(e, b, 0, b.length, U, function(Y) {
              if (Y)
                return n(Y);
              if (b.readUInt32LE(0) !== 117853008)
                return n(new Error("invalid zip64 end of central directory locator signature"));
              var ee = j(b, 8), P = _(56);
              $(e, P, 0, P.length, ee, function(re) {
                return re ? n(re) : P.readUInt32LE(0) !== 101075792 ? n(new Error("invalid zip64 end of central directory record signature")) : (g = j(P, 32), p = j(P, 48), n(null, new B(e, p, r, g, w, t.autoClose, t.lazyEntries, i, t.validateEntrySizes, t.strictFileNames)));
              });
            });
            return;
          }
        n(new Error("end of central directory record signature not found"));
      });
    }
    be.inherits(B, Fe);
    function B(e, r, t, n, i, o, s, f, u, d) {
      var a = this;
      Fe.call(a), a.reader = e, a.reader.on("error", function(c) {
        Dr(a, c);
      }), a.reader.once("close", function() {
        a.emit("close");
      }), a.readEntryCursor = r, a.fileSize = t, a.entryCount = n, a.comment = i, a.entriesRead = 0, a.autoClose = !!o, a.lazyEntries = !!s, a.decodeStrings = !!f, a.validateEntrySizes = !!u, a.strictFileNames = !!d, a.isOpen = true, a.emittedError = false, a.lazyEntries || a._readEntry();
    }
    B.prototype.close = function() {
      this.isOpen && (this.isOpen = false, this.reader.unref());
    };
    function L(e, r) {
      e.autoClose && e.close(), Dr(e, r);
    }
    function Dr(e, r) {
      e.emittedError || (e.emittedError = true, e.emit("error", r));
    }
    B.prototype.readEntry = function() {
      if (!this.lazyEntries)
        throw new Error("readEntry() called without lazyEntries:true");
      this._readEntry();
    };
    B.prototype._readEntry = function() {
      var e = this;
      if (e.entryCount === e.entriesRead) {
        setImmediate(function() {
          e.autoClose && e.close(), !e.emittedError && e.emit("end");
        });
        return;
      }
      if (!e.emittedError) {
        var r = _(46);
        $(e.reader, r, 0, r.length, e.readEntryCursor, function(t) {
          if (t)
            return L(e, t);
          if (!e.emittedError) {
            var n = new oe, i = r.readUInt32LE(0);
            if (i !== 33639248)
              return L(e, new Error("invalid central directory file header signature: 0x" + i.toString(16)));
            if (n.versionMadeBy = r.readUInt16LE(4), n.versionNeededToExtract = r.readUInt16LE(6), n.generalPurposeBitFlag = r.readUInt16LE(8), n.compressionMethod = r.readUInt16LE(10), n.lastModFileTime = r.readUInt16LE(12), n.lastModFileDate = r.readUInt16LE(14), n.crc32 = r.readUInt32LE(16), n.compressedSize = r.readUInt32LE(20), n.uncompressedSize = r.readUInt32LE(24), n.fileNameLength = r.readUInt16LE(28), n.extraFieldLength = r.readUInt16LE(30), n.fileCommentLength = r.readUInt16LE(32), n.internalFileAttributes = r.readUInt16LE(36), n.externalFileAttributes = r.readUInt32LE(38), n.relativeOffsetOfLocalHeader = r.readUInt32LE(42), n.generalPurposeBitFlag & 64)
              return L(e, new Error("strong encryption is not supported"));
            e.readEntryCursor += 46, r = _(n.fileNameLength + n.extraFieldLength + n.fileCommentLength), $(e.reader, r, 0, r.length, e.readEntryCursor, function(o) {
              if (o)
                return L(e, o);
              if (!e.emittedError) {
                var s = (n.generalPurposeBitFlag & 2048) !== 0;
                n.fileName = e.decodeStrings ? ye(r, 0, n.fileNameLength, s) : r.slice(0, n.fileNameLength);
                var f = n.fileNameLength + n.extraFieldLength, u = r.slice(n.fileNameLength, f);
                n.extraFields = [];
                for (var d = 0;d < u.length - 3; ) {
                  var a = u.readUInt16LE(d + 0), c = u.readUInt16LE(d + 2), l = d + 4, x = l + c;
                  if (x > u.length)
                    return L(e, new Error("extra field length exceeds extra field buffer size"));
                  var g = _(c);
                  u.copy(g, 0, l, x), n.extraFields.push({ id: a, data: g }), d = x;
                }
                if (n.fileComment = e.decodeStrings ? ye(r, f, f + n.fileCommentLength, s) : r.slice(f, f + n.fileCommentLength), n.comment = n.fileComment, e.readEntryCursor += r.length, e.entriesRead += 1, n.uncompressedSize === 4294967295 || n.compressedSize === 4294967295 || n.relativeOffsetOfLocalHeader === 4294967295) {
                  for (var p = null, d = 0;d < n.extraFields.length; d++) {
                    var h = n.extraFields[d];
                    if (h.id === 1) {
                      p = h.data;
                      break;
                    }
                  }
                  if (p == null)
                    return L(e, new Error("expected zip64 extended information extra field"));
                  var v = 0;
                  if (n.uncompressedSize === 4294967295) {
                    if (v + 8 > p.length)
                      return L(e, new Error("zip64 extended information extra field does not include uncompressed size"));
                    n.uncompressedSize = j(p, v), v += 8;
                  }
                  if (n.compressedSize === 4294967295) {
                    if (v + 8 > p.length)
                      return L(e, new Error("zip64 extended information extra field does not include compressed size"));
                    n.compressedSize = j(p, v), v += 8;
                  }
                  if (n.relativeOffsetOfLocalHeader === 4294967295) {
                    if (v + 8 > p.length)
                      return L(e, new Error("zip64 extended information extra field does not include relative header offset"));
                    n.relativeOffsetOfLocalHeader = j(p, v), v += 8;
                  }
                }
                if (e.decodeStrings)
                  for (var d = 0;d < n.extraFields.length; d++) {
                    var h = n.extraFields[d];
                    if (h.id === 28789) {
                      if (h.data.length < 6 || h.data.readUInt8(0) !== 1)
                        continue;
                      var w = h.data.readUInt32LE(1);
                      if (At.unsigned(r.slice(0, n.fileNameLength)) !== w)
                        continue;
                      n.fileName = ye(h.data, 5, h.data.length, true);
                      break;
                    }
                  }
                if (e.validateEntrySizes && n.compressionMethod === 0) {
                  var b = n.uncompressedSize;
                  if (n.isEncrypted() && (b += 12), n.compressedSize !== b) {
                    var U = "compressed/uncompressed size mismatch for stored file: " + n.compressedSize + " != " + n.uncompressedSize;
                    return L(e, new Error(U));
                  }
                }
                if (e.decodeStrings) {
                  e.strictFileNames || (n.fileName = n.fileName.replace(/\\/g, "/"));
                  var Y = Tr(n.fileName, e.validateFileNameOptions);
                  if (Y != null)
                    return L(e, new Error(Y));
                }
                e.emit("entry", n), e.lazyEntries || e._readEntry();
              }
            });
          }
        });
      }
    };
    B.prototype.openReadStream = function(e, r, t) {
      var n = this, i = 0, o = e.compressedSize;
      if (t == null)
        t = r, r = {};
      else {
        if (r.decrypt != null) {
          if (!e.isEncrypted())
            throw new Error("options.decrypt can only be specified for encrypted entries");
          if (r.decrypt !== false)
            throw new Error("invalid options.decrypt value: " + r.decrypt);
          if (e.isCompressed() && r.decompress !== false)
            throw new Error("entry is encrypted and compressed, and options.decompress !== false");
        }
        if (r.decompress != null) {
          if (!e.isCompressed())
            throw new Error("options.decompress can only be specified for compressed entries");
          if (!(r.decompress === false || r.decompress === true))
            throw new Error("invalid options.decompress value: " + r.decompress);
        }
        if (r.start != null || r.end != null) {
          if (e.isCompressed() && r.decompress !== false)
            throw new Error("start/end range not allowed for compressed entry without options.decompress === false");
          if (e.isEncrypted() && r.decrypt !== false)
            throw new Error("start/end range not allowed for encrypted entry without options.decrypt === false");
        }
        if (r.start != null) {
          if (i = r.start, i < 0)
            throw new Error("options.start < 0");
          if (i > e.compressedSize)
            throw new Error("options.start > entry.compressedSize");
        }
        if (r.end != null) {
          if (o = r.end, o < 0)
            throw new Error("options.end < 0");
          if (o > e.compressedSize)
            throw new Error("options.end > entry.compressedSize");
          if (o < i)
            throw new Error("options.end < options.start");
        }
      }
      if (!n.isOpen)
        return t(new Error("closed"));
      if (e.isEncrypted() && r.decrypt !== false)
        return t(new Error("entry is encrypted, and options.decrypt !== false"));
      n.reader.ref();
      var s = _(30);
      $(n.reader, s, 0, s.length, e.relativeOffsetOfLocalHeader, function(f) {
        try {
          if (f)
            return t(f);
          var u = s.readUInt32LE(0);
          if (u !== 67324752)
            return t(new Error("invalid local file header signature: 0x" + u.toString(16)));
          var d = s.readUInt16LE(26), a = s.readUInt16LE(28), c = e.relativeOffsetOfLocalHeader + s.length + d + a, l;
          if (e.compressionMethod === 0)
            l = false;
          else if (e.compressionMethod === 8)
            l = r.decompress != null ? r.decompress : true;
          else
            return t(new Error("unsupported compression method: " + e.compressionMethod));
          var x = c, g = x + e.compressedSize;
          if (e.compressedSize !== 0 && g > n.fileSize)
            return t(new Error("file data overflows file bounds: " + x + " + " + e.compressedSize + " > " + n.fileSize));
          var p = n.reader.createReadStream({ start: x + i, end: x + o }), h = p;
          if (l) {
            var v = false, w = _t.createInflateRaw();
            p.on("error", function(b) {
              setImmediate(function() {
                v || w.emit("error", b);
              });
            }), p.pipe(w), n.validateEntrySizes ? (h = new se(e.uncompressedSize), w.on("error", function(b) {
              setImmediate(function() {
                v || h.emit("error", b);
              });
            }), w.pipe(h)) : h = w, h.destroy = function() {
              v = true, w !== h && w.unpipe(h), p.unpipe(w), p.destroy();
            };
          }
          t(null, h);
        } finally {
          n.reader.unref();
        }
      });
    };
    function oe() {
    }
    oe.prototype.getLastModDate = function() {
      return Ur(this.lastModFileDate, this.lastModFileTime);
    };
    oe.prototype.isEncrypted = function() {
      return (this.generalPurposeBitFlag & 1) !== 0;
    };
    oe.prototype.isCompressed = function() {
      return this.compressionMethod === 8;
    };
    function Ur(e, r) {
      var t = e & 31, n = (e >> 5 & 15) - 1, i = (e >> 9 & 127) + 1980, o = 0, s = (r & 31) * 2, f = r >> 5 & 63, u = r >> 11 & 31;
      return new Date(i, n, t, u, f, s, o);
    }
    function Tr(e) {
      return e.indexOf("\\") !== -1 ? "invalid characters in fileName: " + e : /^[a-zA-Z]:/.test(e) || /^\//.test(e) ? "absolute path: " + e : e.split("/").indexOf("..") !== -1 ? "invalid relative path: " + e : null;
    }
    function $(e, r, t, n, i, o) {
      if (n === 0)
        return setImmediate(function() {
          o(null, _(0));
        });
      e.read(r, t, n, i, function(s, f) {
        if (s)
          return o(s);
        if (f < n)
          return o(new Error("unexpected EOF"));
        o();
      });
    }
    be.inherits(se, Ar);
    function se(e) {
      Ar.call(this), this.actualByteCount = 0, this.expectedByteCount = e;
    }
    se.prototype._transform = function(e, r, t) {
      if (this.actualByteCount += e.length, this.actualByteCount > this.expectedByteCount) {
        var n = "too many bytes in the stream. expected " + this.expectedByteCount + ". got at least " + this.actualByteCount;
        return t(new Error(n));
      }
      t(null, e);
    };
    se.prototype._flush = function(e) {
      if (this.actualByteCount < this.expectedByteCount) {
        var r = "not enough bytes in the stream. expected " + this.expectedByteCount + ". got only " + this.actualByteCount;
        return e(new Error(r));
      }
      e();
    };
    be.inherits(q, Fe);
    function q() {
      Fe.call(this), this.refCount = 0;
    }
    q.prototype.ref = function() {
      this.refCount += 1;
    };
    q.prototype.unref = function() {
      var e = this;
      if (e.refCount -= 1, e.refCount > 0)
        return;
      if (e.refCount < 0)
        throw new Error("invalid unref");
      e.close(r);
      function r(t) {
        if (t)
          return e.emit("error", t);
        e.emit("close");
      }
    };
    q.prototype.createReadStream = function(e) {
      var { start: r, end: t } = e;
      if (r === t) {
        var n = new Ve;
        return setImmediate(function() {
          n.end();
        }), n;
      }
      var i = this._readStreamForRange(r, t), o = false, s = new Se(this);
      i.on("error", function(u) {
        setImmediate(function() {
          o || s.emit("error", u);
        });
      }), s.destroy = function() {
        i.unpipe(s), s.unref(), i.destroy();
      };
      var f = new se(t - r);
      return s.on("error", function(u) {
        setImmediate(function() {
          o || f.emit("error", u);
        });
      }), f.destroy = function() {
        o = true, s.unpipe(f), s.destroy();
      }, i.pipe(s).pipe(f);
    };
    q.prototype._readStreamForRange = function(e, r) {
      throw new Error("not implemented");
    };
    q.prototype.read = function(e, r, t, n, i) {
      var o = this.createReadStream({ start: n, end: n + t }), s = new Rt, f = 0;
      s._write = function(u, d, a) {
        u.copy(e, r + f, 0, u.length), f += u.length, a();
      }, s.on("finish", i), o.on("error", function(u) {
        i(u);
      }), o.pipe(s);
    };
    q.prototype.close = function(e) {
      setImmediate(e);
    };
    be.inherits(Se, Ve);
    function Se(e) {
      Ve.call(this), this.context = e, this.context.ref(), this.unreffedYet = false;
    }
    Se.prototype._flush = function(e) {
      this.unref(), e();
    };
    Se.prototype.unref = function(e) {
      this.unreffedYet || (this.unreffedYet = true, this.context.unref());
    };
    var Tt = "\0\u263A\u263B\u2665\u2666\u2663\u2660\u2022\u25D8\u25CB\u25D9\u2642\u2640\u266A\u266B\u263C\u25BA\u25C4\u2195\u203C\xB6\xA7\u25AC\u21A8\u2191\u2193\u2192\u2190\u221F\u2194\u25B2\u25BC !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u2302\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xA2\xA3\xA5\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0";
    function ye(e, r, t, n) {
      if (n)
        return e.toString("utf8", r, t);
      for (var i = "", o = r;o < t; o++)
        i += Tt[e[o]];
      return i;
    }
    function j(e, r) {
      var t = e.readUInt32LE(r), n = e.readUInt32LE(r + 4);
      return n * 4294967296 + t;
    }
    var _;
    typeof Buffer.allocUnsafe == "function" ? _ = function(e) {
      return Buffer.allocUnsafe(e);
    } : _ = function(e) {
      return new Buffer(e);
    };
    function Ce(e) {
      if (e)
        throw e;
    }
  });
  var Mr = E((Nn, Nr) => {
    var V = 1000, K = V * 60, X = K * 60, H = X * 24, Nt = H * 7, Mt = H * 365.25;
    Nr.exports = function(e, r) {
      r = r || {};
      var t = typeof e;
      if (t === "string" && e.length > 0)
        return Bt(e);
      if (t === "number" && isFinite(e))
        return r.long ? Pt(e) : qt(e);
      throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(e));
    };
    function Bt(e) {
      if (e = String(e), !(e.length > 100)) {
        var r = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);
        if (r) {
          var t = parseFloat(r[1]), n = (r[2] || "ms").toLowerCase();
          switch (n) {
            case "years":
            case "year":
            case "yrs":
            case "yr":
            case "y":
              return t * Mt;
            case "weeks":
            case "week":
            case "w":
              return t * Nt;
            case "days":
            case "day":
            case "d":
              return t * H;
            case "hours":
            case "hour":
            case "hrs":
            case "hr":
            case "h":
              return t * X;
            case "minutes":
            case "minute":
            case "mins":
            case "min":
            case "m":
              return t * K;
            case "seconds":
            case "second":
            case "secs":
            case "sec":
            case "s":
              return t * V;
            case "milliseconds":
            case "millisecond":
            case "msecs":
            case "msec":
            case "ms":
              return t;
            default:
              return;
          }
        }
      }
    }
    function qt(e) {
      var r = Math.abs(e);
      return r >= H ? Math.round(e / H) + "d" : r >= X ? Math.round(e / X) + "h" : r >= K ? Math.round(e / K) + "m" : r >= V ? Math.round(e / V) + "s" : e + "ms";
    }
    function Pt(e) {
      var r = Math.abs(e);
      return r >= H ? Ie(e, r, H, "day") : r >= X ? Ie(e, r, X, "hour") : r >= K ? Ie(e, r, K, "minute") : r >= V ? Ie(e, r, V, "second") : e + " ms";
    }
    function Ie(e, r, t, n) {
      var i = r >= t * 1.5;
      return Math.round(e / t) + " " + n + (i ? "s" : "");
    }
  });
  var Je = E((Mn, Br) => {
    function Zt(e) {
      t.debug = t, t.default = t, t.coerce = u, t.disable = o, t.enable = i, t.enabled = s, t.humanize = Mr(), t.destroy = d, Object.keys(e).forEach((a) => {
        t[a] = e[a];
      }), t.names = [], t.skips = [], t.formatters = {};
      function r(a) {
        let c = 0;
        for (let l = 0;l < a.length; l++)
          c = (c << 5) - c + a.charCodeAt(l), c |= 0;
        return t.colors[Math.abs(c) % t.colors.length];
      }
      t.selectColor = r;
      function t(a) {
        let c, l = null, x, g;
        function p(...h) {
          if (!p.enabled)
            return;
          let v = p, w = Number(new Date), b = w - (c || w);
          v.diff = b, v.prev = c, v.curr = w, c = w, h[0] = t.coerce(h[0]), typeof h[0] != "string" && h.unshift("%O");
          let U = 0;
          h[0] = h[0].replace(/%([a-zA-Z%])/g, (ee, P) => {
            if (ee === "%%")
              return "%";
            U++;
            let re = t.formatters[P];
            if (typeof re == "function") {
              let lt = h[U];
              ee = re.call(v, lt), h.splice(U, 1), U--;
            }
            return ee;
          }), t.formatArgs.call(v, h), (v.log || t.log).apply(v, h);
        }
        return p.namespace = a, p.useColors = t.useColors(), p.color = t.selectColor(a), p.extend = n, p.destroy = t.destroy, Object.defineProperty(p, "enabled", { enumerable: true, configurable: false, get: () => l !== null ? l : (x !== t.namespaces && (x = t.namespaces, g = t.enabled(a)), g), set: (h) => {
          l = h;
        } }), typeof t.init == "function" && t.init(p), p;
      }
      function n(a, c) {
        let l = t(this.namespace + (typeof c == "undefined" ? ":" : c) + a);
        return l.log = this.log, l;
      }
      function i(a) {
        t.save(a), t.namespaces = a, t.names = [], t.skips = [];
        let c, l = (typeof a == "string" ? a : "").split(/[\s,]+/), x = l.length;
        for (c = 0;c < x; c++)
          l[c] && (a = l[c].replace(/\*/g, ".*?"), a[0] === "-" ? t.skips.push(new RegExp("^" + a.slice(1) + "$")) : t.names.push(new RegExp("^" + a + "$")));
      }
      function o() {
        let a = [...t.names.map(f), ...t.skips.map(f).map((c) => "-" + c)].join(",");
        return t.enable(""), a;
      }
      function s(a) {
        if (a[a.length - 1] === "*")
          return true;
        let c, l;
        for (c = 0, l = t.skips.length;c < l; c++)
          if (t.skips[c].test(a))
            return false;
        for (c = 0, l = t.names.length;c < l; c++)
          if (t.names[c].test(a))
            return true;
        return false;
      }
      function f(a) {
        return a.toString().substring(2, a.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function u(a) {
        return a instanceof Error ? a.stack || a.message : a;
      }
      function d() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      return t.enable(t.load()), t;
    }
    Br.exports = Zt;
  });
  var qr = E((S, Le) => {
    S.formatArgs = Ht;
    S.save = Gt;
    S.load = Yt;
    S.useColors = Wt;
    S.storage = $t();
    S.destroy = (() => {
      let e = false;
      return () => {
        e || (e = true, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
      };
    })();
    S.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"];
    function Wt() {
      return typeof window != "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs) ? true : typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/) ? false : typeof document != "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window != "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function Ht(e) {
      if (e[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + e[0] + (this.useColors ? "%c " : " ") + "+" + Le.exports.humanize(this.diff), !this.useColors)
        return;
      let r = "color: " + this.color;
      e.splice(1, 0, r, "color: inherit");
      let t = 0, n = 0;
      e[0].replace(/%[a-zA-Z%]/g, (i) => {
        i !== "%%" && (t++, i === "%c" && (n = t));
      }), e.splice(n, 0, r);
    }
    S.log = console.debug || console.log || (() => {
    });
    function Gt(e) {
      try {
        e ? S.storage.setItem("debug", e) : S.storage.removeItem("debug");
      } catch {
      }
    }
    function Yt() {
      let e;
      try {
        e = S.storage.getItem("debug");
      } catch {
      }
      return !e && typeof process != "undefined" && "env" in process && (e = process.env.DEBUG), e;
    }
    function $t() {
      try {
        return localStorage;
      } catch {
      }
    }
    Le.exports = Je()(S);
    var { formatters: jt } = Le.exports;
    jt.j = function(e) {
      try {
        return JSON.stringify(e);
      } catch (r) {
        return "[UnexpectedJSONParseError]: " + r.message;
      }
    };
  });
  var Zr = E((Bn, Pr) => {
    Pr.exports = (e, r) => {
      r = r || process.argv;
      let t = e.startsWith("-") ? "" : e.length === 1 ? "-" : "--", n = r.indexOf(t + e), i = r.indexOf("--");
      return n !== -1 && (i === -1 ? true : n < i);
    };
  });
  var Hr = E((qn, Wr) => {
    var Vt = import.meta.require("os"), O = Zr(), C = process.env, J;
    O("no-color") || O("no-colors") || O("color=false") ? J = false : (O("color") || O("colors") || O("color=true") || O("color=always")) && (J = true);
    "FORCE_COLOR" in C && (J = C.FORCE_COLOR.length === 0 || parseInt(C.FORCE_COLOR, 10) !== 0);
    function Kt(e) {
      return e === 0 ? false : { level: e, hasBasic: true, has256: e >= 2, has16m: e >= 3 };
    }
    function Xt(e) {
      if (J === false)
        return 0;
      if (O("color=16m") || O("color=full") || O("color=truecolor"))
        return 3;
      if (O("color=256"))
        return 2;
      if (e && !e.isTTY && J !== true)
        return 0;
      let r = J ? 1 : 0;
      if (process.platform === "win32") {
        let t = Vt.release().split(".");
        return Number(process.versions.node.split(".")[0]) >= 8 && Number(t[0]) >= 10 && Number(t[2]) >= 10586 ? Number(t[2]) >= 14931 ? 3 : 2 : 1;
      }
      if ("CI" in C)
        return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some((t) => (t in C)) || C.CI_NAME === "codeship" ? 1 : r;
      if ("TEAMCITY_VERSION" in C)
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(C.TEAMCITY_VERSION) ? 1 : 0;
      if (C.COLORTERM === "truecolor")
        return 3;
      if ("TERM_PROGRAM" in C) {
        let t = parseInt((C.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (C.TERM_PROGRAM) {
          case "iTerm.app":
            return t >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      return /-256(color)?$/i.test(C.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(C.TERM) || ("COLORTERM" in C) ? 1 : (C.TERM === "dumb", r);
    }
    function Qe(e) {
      let r = Xt(e);
      return Kt(r);
    }
    Wr.exports = { supportsColor: Qe, stdout: Qe(process.stdout), stderr: Qe(process.stderr) };
  });
  var Yr = E((y, ze) => {
    var Jt = import.meta.require("tty"), Oe = import.meta.require("util");
    y.init = on;
    y.log = rn;
    y.formatArgs = kt;
    y.save = tn;
    y.load = nn;
    y.useColors = Qt;
    y.destroy = Oe.deprecate(() => {
    }, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    y.colors = [6, 2, 3, 4, 5, 1];
    try {
      let e = Hr();
      e && (e.stderr || e).level >= 2 && (y.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221]);
    } catch {
    }
    y.inspectOpts = Object.keys(process.env).filter((e) => /^debug_/i.test(e)).reduce((e, r) => {
      let t = r.substring(6).toLowerCase().replace(/_([a-z])/g, (i, o) => o.toUpperCase()), n = process.env[r];
      return /^(yes|on|true|enabled)$/i.test(n) ? n = true : /^(no|off|false|disabled)$/i.test(n) ? n = false : n === "null" ? n = null : n = Number(n), e[t] = n, e;
    }, {});
    function Qt() {
      return "colors" in y.inspectOpts ? !!y.inspectOpts.colors : Jt.isatty(process.stderr.fd);
    }
    function kt(e) {
      let { namespace: r, useColors: t } = this;
      if (t) {
        let n = this.color, i = "\x1B[3" + (n < 8 ? n : "8;5;" + n), o = `  ${i};1m${r} \x1B[0m`;
        e[0] = o + e[0].split(`
`).join(`
` + o), e.push(i + "m+" + ze.exports.humanize(this.diff) + "\x1B[0m");
      } else
        e[0] = en() + r + " " + e[0];
    }
    function en() {
      return y.inspectOpts.hideDate ? "" : new Date().toISOString() + " ";
    }
    function rn(...e) {
      return process.stderr.write(Oe.format(...e) + `
`);
    }
    function tn(e) {
      e ? process.env.DEBUG = e : delete process.env.DEBUG;
    }
    function nn() {
      return process.env.DEBUG;
    }
    function on(e) {
      e.inspectOpts = {};
      let r = Object.keys(y.inspectOpts);
      for (let t = 0;t < r.length; t++)
        e.inspectOpts[r[t]] = y.inspectOpts[r[t]];
    }
    ze.exports = Je()(y);
    var { formatters: Gr } = ze.exports;
    Gr.o = function(e) {
      return this.inspectOpts.colors = this.useColors, Oe.inspect(e, this.inspectOpts).split(`
`).map((r) => r.trim()).join(" ");
    };
    Gr.O = function(e) {
      return this.inspectOpts.colors = this.useColors, Oe.inspect(e, this.inspectOpts);
    };
  });
  var $r = E((Pn, ke) => {
    typeof process == "undefined" || process.type === "renderer" || false || process.__nwjs ? ke.exports = qr() : ke.exports = Yr();
  });
  var Kr = E((Zn, Vr) => {
    Vr.exports = jr;
    function jr(e, r) {
      if (e && r)
        return jr(e)(r);
      if (typeof e != "function")
        throw new TypeError("need wrapper function");
      return Object.keys(e).forEach(function(n) {
        t[n] = e[n];
      }), t;
      function t() {
        for (var n = new Array(arguments.length), i = 0;i < n.length; i++)
          n[i] = arguments[i];
        var o = e.apply(this, n), s = n[n.length - 1];
        return typeof o == "function" && o !== s && Object.keys(s).forEach(function(f) {
          o[f] = s[f];
        }), o;
      }
    }
  });
  var rr = E((Wn, er) => {
    var Xr = Kr();
    er.exports = Xr(_e);
    er.exports.strict = Xr(Jr);
    _e.proto = _e(function() {
      Object.defineProperty(Function.prototype, "once", { value: function() {
        return _e(this);
      }, configurable: true }), Object.defineProperty(Function.prototype, "onceStrict", { value: function() {
        return Jr(this);
      }, configurable: true });
    });
    function _e(e) {
      var r = function() {
        return r.called ? r.value : (r.called = true, r.value = e.apply(this, arguments));
      };
      return r.called = false, r;
    }
    function Jr(e) {
      var r = function() {
        if (r.called)
          throw new Error(r.onceError);
        return r.called = true, r.value = e.apply(this, arguments);
      }, t = e.name || "Function wrapped with `once`";
      return r.onceError = t + " shouldn't be called more than once", r.called = false, r;
    }
  });
  var et = E((Hn, kr) => {
    var sn = rr(), fn = function() {
    }, an = function(e) {
      return e.setHeader && typeof e.abort == "function";
    }, un = function(e) {
      return e.stdio && Array.isArray(e.stdio) && e.stdio.length === 3;
    }, Qr = function(e, r, t) {
      if (typeof r == "function")
        return Qr(e, null, r);
      r || (r = {}), t = sn(t || fn);
      var { _writableState: n, _readableState: i } = e, o = r.readable || r.readable !== false && e.readable, s = r.writable || r.writable !== false && e.writable, f = false, u = function() {
        e.writable || d();
      }, d = function() {
        s = false, o || t.call(e);
      }, a = function() {
        o = false, s || t.call(e);
      }, c = function(h) {
        t.call(e, h ? new Error("exited with error code: " + h) : null);
      }, l = function(h) {
        t.call(e, h);
      }, x = function() {
        process.nextTick(g);
      }, g = function() {
        if (!f) {
          if (o && !(i && i.ended && !i.destroyed))
            return t.call(e, new Error("premature close"));
          if (s && !(n && n.ended && !n.destroyed))
            return t.call(e, new Error("premature close"));
        }
      }, p = function() {
        e.req.on("finish", d);
      };
      return an(e) ? (e.on("complete", d), e.on("abort", x), e.req ? p() : e.on("request", p)) : s && !n && (e.on("end", u), e.on("close", u)), un(e) && e.on("exit", c), e.on("end", a), e.on("finish", d), r.error !== false && e.on("error", l), e.on("close", x), function() {
        f = true, e.removeListener("complete", d), e.removeListener("abort", x), e.removeListener("request", p), e.req && e.req.removeListener("finish", d), e.removeListener("end", u), e.removeListener("close", u), e.removeListener("finish", d), e.removeListener("exit", c), e.removeListener("end", a), e.removeListener("error", l), e.removeListener("close", x);
      };
    };
    kr.exports = Qr;
  });
  var nt = E((Gn, tt) => {
    var cn = rr(), dn = et(), tr = import.meta.require("fs"), fe = function() {
    }, ln = /^v?\.0/.test(process.version), Ae = function(e) {
      return typeof e == "function";
    }, hn = function(e) {
      return !ln || !tr ? false : (e instanceof (tr.ReadStream || fe) || e instanceof (tr.WriteStream || fe)) && Ae(e.close);
    }, pn = function(e) {
      return e.setHeader && Ae(e.abort);
    }, mn = function(e, r, t, n) {
      n = cn(n);
      var i = false;
      e.on("close", function() {
        i = true;
      }), dn(e, { readable: r, writable: t }, function(s) {
        if (s)
          return n(s);
        i = true, n();
      });
      var o = false;
      return function(s) {
        if (!i && !o) {
          if (o = true, hn(e))
            return e.close(fe);
          if (pn(e))
            return e.abort();
          if (Ae(e.destroy))
            return e.destroy();
          n(s || new Error("stream was destroyed"));
        }
      };
    }, rt = function(e) {
      e();
    }, xn = function(e, r) {
      return e.pipe(r);
    }, vn = function() {
      var e = Array.prototype.slice.call(arguments), r = Ae(e[e.length - 1] || fe) && e.pop() || fe;
      if (Array.isArray(e[0]) && (e = e[0]), e.length < 2)
        throw new Error("pump requires two streams per minimum");
      var t, n = e.map(function(i, o) {
        var s = o < e.length - 1, f = o > 0;
        return mn(i, s, f, function(u) {
          t || (t = u), u && n.forEach(rt), !s && (n.forEach(rt), r(t));
        });
      });
      return e.reduce(xn);
    };
    tt.exports = vn;
  });
  var ot = E((Yn, it) => {
    var { PassThrough: En } = import.meta.require("stream");
    it.exports = (e) => {
      e = { ...e };
      let { array: r } = e, { encoding: t } = e, n = t === "buffer", i = false;
      r ? i = !(t || n) : t = t || "utf8", n && (t = null);
      let o = new En({ objectMode: i });
      t && o.setEncoding(t);
      let s = 0, f = [];
      return o.on("data", (u) => {
        f.push(u), i ? s = f.length : s += u.length;
      }), o.getBufferedValue = () => r ? f : n ? Buffer.concat(f, s) : f.join(""), o.getBufferedLength = () => s, o;
    };
  });
  var st = E(($n, Q) => {
    var { constants: wn } = import.meta.require("buffer"), gn = nt(), yn = ot(), Re = class extends Error {
      constructor() {
        super("maxBuffer exceeded"), this.name = "MaxBufferError";
      }
    };
    async function De(e, r) {
      if (!e)
        return Promise.reject(new Error("Expected a stream"));
      r = { maxBuffer: 1 / 0, ...r };
      let { maxBuffer: t } = r, n;
      return await new Promise((i, o) => {
        let s = (f) => {
          f && n.getBufferedLength() <= wn.MAX_LENGTH && (f.bufferedData = n.getBufferedValue()), o(f);
        };
        n = gn(e, yn(r), (f) => {
          if (f) {
            s(f);
            return;
          }
          i();
        }), n.on("data", () => {
          n.getBufferedLength() > t && s(new Re);
        });
      }), n.getBufferedValue();
    }
    Q.exports = De;
    Q.exports.default = De;
    Q.exports.buffer = (e, r) => De(e, { ...r, encoding: "buffer" });
    Q.exports.array = (e, r) => De(e, { ...r, array: true });
    Q.exports.MaxBufferError = Re;
  });
  var at = E((jn, ft) => {
    var z = $r()("extract-zip"), { createWriteStream: Cn, promises: k } = import.meta.require("fs"), bn = st(), G = import.meta.require("path"), { promisify: ir } = import.meta.require("util"), Fn = import.meta.require("stream"), Sn = Xe(), In = ir(Sn.open), Ln = ir(Fn.pipeline), nr = class {
      constructor(r, t) {
        this.zipPath = r, this.opts = t;
      }
      async extract() {
        return z("opening", this.zipPath, "with opts", this.opts), this.zipfile = await In(this.zipPath, { lazyEntries: true }), this.canceled = false, new Promise((r, t) => {
          this.zipfile.on("error", (n) => {
            this.canceled = true, t(n);
          }), this.zipfile.readEntry(), this.zipfile.on("close", () => {
            this.canceled || (z("zip extraction complete"), r());
          }), this.zipfile.on("entry", async (n) => {
            if (this.canceled) {
              z("skipping entry", n.fileName, { cancelled: this.canceled });
              return;
            }
            if (z("zipfile entry", n.fileName), n.fileName.startsWith("__MACOSX/")) {
              this.zipfile.readEntry();
              return;
            }
            let i = G.dirname(G.join(this.opts.dir, n.fileName));
            try {
              await k.mkdir(i, { recursive: true });
              let o = await k.realpath(i);
              if (G.relative(this.opts.dir, o).split(G.sep).includes(".."))
                throw new Error(`Out of bound path "${o}" found while processing file ${n.fileName}`);
              await this.extractEntry(n), z("finished processing", n.fileName), this.zipfile.readEntry();
            } catch (o) {
              this.canceled = true, this.zipfile.close(), t(o);
            }
          });
        });
      }
      async extractEntry(r) {
        if (this.canceled) {
          z("skipping entry extraction", r.fileName, { cancelled: this.canceled });
          return;
        }
        this.opts.onEntry && this.opts.onEntry(r, this.zipfile);
        let t = G.join(this.opts.dir, r.fileName), n = r.externalFileAttributes >> 16 & 65535, i = 61440, o = 16384, s = 40960, f = (n & i) === s, u = (n & i) === o;
        !u && r.fileName.endsWith("/") && (u = true);
        let d = r.versionMadeBy >> 8;
        u || (u = d === 0 && r.externalFileAttributes === 16), z("extracting entry", { filename: r.fileName, isDir: u, isSymlink: f });
        let a = this.getExtractedMode(n, u) & 511, c = u ? t : G.dirname(t), l = { recursive: true };
        if (u && (l.mode = a), z("mkdir", { dir: c, ...l }), await k.mkdir(c, l), u)
          return;
        z("opening read stream", t);
        let x = await ir(this.zipfile.openReadStream.bind(this.zipfile))(r);
        if (f) {
          let g = await bn(x);
          z("creating symlink", g, t), await k.symlink(g, t);
        } else
          await Ln(x, Cn(t, { mode: a }));
      }
      getExtractedMode(r, t) {
        let n = r;
        return n === 0 && (t ? (this.opts.defaultDirMode && (n = parseInt(this.opts.defaultDirMode, 10)), n || (n = 493)) : (this.opts.defaultFileMode && (n = parseInt(this.opts.defaultFileMode, 10)), n || (n = 420))), n;
      }
    };
    ft.exports = async function(e, r) {
      if (z("creating target directory", r.dir), !G.isAbsolute(r.dir))
        throw new Error("Target directory is expected to be absolute");
      return await k.mkdir(r.dir, { recursive: true }), r.dir = await k.realpath(r.dir), new nr(e, r).extract();
    };
  });
  var zn = {};
  Et(zn, { extract: () => On, yauzl: () => dt, yazl: () => ct });
  module.exports = wt(zn);
  var ct = Ue(br());
  var dt = Ue(Xe());
  var ut = Ue(at());
  var On = ut.default;
});

// node_modules/playwright-core/lib/zipBundle.js
var require_zipBundle = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.yazl = exports.yauzl = exports.extract = undefined;
  var yazl2 = exports.yazl = require_zipBundleImpl().yazl;
  var yauzl2 = exports.yauzl = require_zipBundleImpl().yauzl;
  var extract2 = exports.extract = require_zipBundleImpl().extract;
});

// node_modules/playwright-core/lib/utils/zipFile.js
var require_zipFile = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ZipFile = undefined;
  var _zipBundle = require_zipBundle();

  class ZipFile {
    constructor(fileName) {
      this._fileName = undefined;
      this._zipFile = undefined;
      this._entries = new Map;
      this._openedPromise = undefined;
      this._fileName = fileName;
      this._openedPromise = this._open();
    }
    async _open() {
      await new Promise((fulfill, reject) => {
        _zipBundle.yauzl.open(this._fileName, {
          autoClose: false
        }, (e, z) => {
          if (e) {
            reject(e);
            return;
          }
          this._zipFile = z;
          this._zipFile.on("entry", (entry) => {
            this._entries.set(entry.fileName, entry);
          });
          this._zipFile.on("end", fulfill);
        });
      });
    }
    async entries() {
      await this._openedPromise;
      return [...this._entries.keys()];
    }
    async read(entryPath) {
      await this._openedPromise;
      const entry = this._entries.get(entryPath);
      if (!entry)
        throw new Error(`${entryPath} not found in file ${this._fileName}`);
      return new Promise((resolve, reject) => {
        this._zipFile.openReadStream(entry, (error, readStream) => {
          if (error || !readStream) {
            reject(error || "Entry not found");
            return;
          }
          const buffers = [];
          readStream.on("data", (data) => buffers.push(data));
          readStream.on("end", () => resolve(Buffer.concat(buffers)));
        });
      });
    }
    close() {
      var _this$_zipFile;
      (_this$_zipFile = this._zipFile) === null || _this$_zipFile === undefined || _this$_zipFile.close();
    }
  }
  exports.ZipFile = ZipFile;
});

// node_modules/playwright-core/lib/utils/zones.js
var require_zones = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.zones = undefined;
  var _async_hooks = import.meta.require("async_hooks");

  class ZoneManager {
    constructor() {
      this._asyncLocalStorage = new _async_hooks.AsyncLocalStorage;
    }
    run(type, data, func) {
      const previous = this._asyncLocalStorage.getStore();
      const zone = new Zone(previous, type, data);
      return this._asyncLocalStorage.run(zone, func);
    }
    zoneData(type) {
      for (let zone = this._asyncLocalStorage.getStore();zone; zone = zone.previous) {
        if (zone.type === type)
          return zone.data;
      }
      return;
    }
    exitZones(func) {
      return this._asyncLocalStorage.run(undefined, func);
    }
    printZones() {
      const zones2 = [];
      for (let zone = this._asyncLocalStorage.getStore();zone; zone = zone.previous) {
        let str = zone.type;
        if (zone.type === "apiZone")
          str += `(${zone.data.apiName})`;
        zones2.push(str);
      }
      console.log("zones: ", zones2.join(" -> "));
    }
  }

  class Zone {
    constructor(previous, type, data) {
      this.type = undefined;
      this.data = undefined;
      this.previous = undefined;
      this.type = type;
      this.data = data;
      this.previous = previous;
    }
  }
  var zones = exports.zones = new ZoneManager;
});

// node_modules/playwright-core/lib/utils/isomorphic/cssTokenizer.js
var require_cssTokenizer = __commonJS((exports) => {
  var digit = function(code) {
    return between(code, 48, 57);
  };
  var hexdigit = function(code) {
    return digit(code) || between(code, 65, 70) || between(code, 97, 102);
  };
  var uppercaseletter = function(code) {
    return between(code, 65, 90);
  };
  var lowercaseletter = function(code) {
    return between(code, 97, 122);
  };
  var letter = function(code) {
    return uppercaseletter(code) || lowercaseletter(code);
  };
  var nonascii = function(code) {
    return code >= 128;
  };
  var namestartchar = function(code) {
    return letter(code) || nonascii(code) || code === 95;
  };
  var namechar = function(code) {
    return namestartchar(code) || digit(code) || code === 45;
  };
  var nonprintable = function(code) {
    return between(code, 0, 8) || code === 11 || between(code, 14, 31) || code === 127;
  };
  var newline = function(code) {
    return code === 10;
  };
  var whitespace = function(code) {
    return newline(code) || code === 9 || code === 32;
  };
  var preprocess = function(str) {
    const codepoints = [];
    for (let i = 0;i < str.length; i++) {
      let code = str.charCodeAt(i);
      if (code === 13 && str.charCodeAt(i + 1) === 10) {
        code = 10;
        i++;
      }
      if (code === 13 || code === 12)
        code = 10;
      if (code === 0)
        code = 65533;
      if (between(code, 55296, 56319) && between(str.charCodeAt(i + 1), 56320, 57343)) {
        const lead = code - 55296;
        const trail = str.charCodeAt(i + 1) - 56320;
        code = Math.pow(2, 16) + lead * Math.pow(2, 10) + trail;
        i++;
      }
      codepoints.push(code);
    }
    return codepoints;
  };
  var stringFromCode = function(code) {
    if (code <= 65535)
      return String.fromCharCode(code);
    code -= Math.pow(2, 16);
    const lead = Math.floor(code / Math.pow(2, 10)) + 55296;
    const trail = code % Math.pow(2, 10) + 56320;
    return String.fromCharCode(lead) + String.fromCharCode(trail);
  };
  var tokenize = function(str1) {
    const str = preprocess(str1);
    let i = -1;
    const tokens = [];
    let code;
    let line = 0;
    let column = 0;
    let lastLineLength = 0;
    const incrLineno = function() {
      line += 1;
      lastLineLength = column;
      column = 0;
    };
    const locStart = {
      line,
      column
    };
    const codepoint = function(i2) {
      if (i2 >= str.length)
        return -1;
      return str[i2];
    };
    const next = function(num) {
      if (num === undefined)
        num = 1;
      if (num > 3)
        throw "Spec Error: no more than three codepoints of lookahead.";
      return codepoint(i + num);
    };
    const consume = function(num) {
      if (num === undefined)
        num = 1;
      i += num;
      code = codepoint(i);
      if (newline(code))
        incrLineno();
      else
        column += num;
      return true;
    };
    const reconsume = function() {
      i -= 1;
      if (newline(code)) {
        line -= 1;
        column = lastLineLength;
      } else {
        column -= 1;
      }
      locStart.line = line;
      locStart.column = column;
      return true;
    };
    const eof = function(codepoint2) {
      if (codepoint2 === undefined)
        codepoint2 = code;
      return codepoint2 === -1;
    };
    const donothing = function() {
    };
    const parseerror = function() {
    };
    const consumeAToken = function() {
      consumeComments();
      consume();
      if (whitespace(code)) {
        while (whitespace(next()))
          consume();
        return new WhitespaceToken;
      } else if (code === 34) {
        return consumeAStringToken();
      } else if (code === 35) {
        if (namechar(next()) || areAValidEscape(next(1), next(2))) {
          const token = new HashToken("");
          if (wouldStartAnIdentifier(next(1), next(2), next(3)))
            token.type = "id";
          token.value = consumeAName();
          return token;
        } else {
          return new DelimToken(code);
        }
      } else if (code === 36) {
        if (next() === 61) {
          consume();
          return new SuffixMatchToken;
        } else {
          return new DelimToken(code);
        }
      } else if (code === 39) {
        return consumeAStringToken();
      } else if (code === 40) {
        return new OpenParenToken;
      } else if (code === 41) {
        return new CloseParenToken;
      } else if (code === 42) {
        if (next() === 61) {
          consume();
          return new SubstringMatchToken;
        } else {
          return new DelimToken(code);
        }
      } else if (code === 43) {
        if (startsWithANumber()) {
          reconsume();
          return consumeANumericToken();
        } else {
          return new DelimToken(code);
        }
      } else if (code === 44) {
        return new CommaToken;
      } else if (code === 45) {
        if (startsWithANumber()) {
          reconsume();
          return consumeANumericToken();
        } else if (next(1) === 45 && next(2) === 62) {
          consume(2);
          return new CDCToken;
        } else if (startsWithAnIdentifier()) {
          reconsume();
          return consumeAnIdentlikeToken();
        } else {
          return new DelimToken(code);
        }
      } else if (code === 46) {
        if (startsWithANumber()) {
          reconsume();
          return consumeANumericToken();
        } else {
          return new DelimToken(code);
        }
      } else if (code === 58) {
        return new ColonToken;
      } else if (code === 59) {
        return new SemicolonToken;
      } else if (code === 60) {
        if (next(1) === 33 && next(2) === 45 && next(3) === 45) {
          consume(3);
          return new CDOToken;
        } else {
          return new DelimToken(code);
        }
      } else if (code === 64) {
        if (wouldStartAnIdentifier(next(1), next(2), next(3)))
          return new AtKeywordToken(consumeAName());
        else
          return new DelimToken(code);
      } else if (code === 91) {
        return new OpenSquareToken;
      } else if (code === 92) {
        if (startsWithAValidEscape()) {
          reconsume();
          return consumeAnIdentlikeToken();
        } else {
          parseerror();
          return new DelimToken(code);
        }
      } else if (code === 93) {
        return new CloseSquareToken;
      } else if (code === 94) {
        if (next() === 61) {
          consume();
          return new PrefixMatchToken;
        } else {
          return new DelimToken(code);
        }
      } else if (code === 123) {
        return new OpenCurlyToken;
      } else if (code === 124) {
        if (next() === 61) {
          consume();
          return new DashMatchToken;
        } else if (next() === 124) {
          consume();
          return new ColumnToken;
        } else {
          return new DelimToken(code);
        }
      } else if (code === 125) {
        return new CloseCurlyToken;
      } else if (code === 126) {
        if (next() === 61) {
          consume();
          return new IncludeMatchToken;
        } else {
          return new DelimToken(code);
        }
      } else if (digit(code)) {
        reconsume();
        return consumeANumericToken();
      } else if (namestartchar(code)) {
        reconsume();
        return consumeAnIdentlikeToken();
      } else if (eof()) {
        return new EOFToken;
      } else {
        return new DelimToken(code);
      }
    };
    const consumeComments = function() {
      while (next(1) === 47 && next(2) === 42) {
        consume(2);
        while (true) {
          consume();
          if (code === 42 && next() === 47) {
            consume();
            break;
          } else if (eof()) {
            parseerror();
            return;
          }
        }
      }
    };
    const consumeANumericToken = function() {
      const num = consumeANumber();
      if (wouldStartAnIdentifier(next(1), next(2), next(3))) {
        const token = new DimensionToken;
        token.value = num.value;
        token.repr = num.repr;
        token.type = num.type;
        token.unit = consumeAName();
        return token;
      } else if (next() === 37) {
        consume();
        const token = new PercentageToken;
        token.value = num.value;
        token.repr = num.repr;
        return token;
      } else {
        const token = new NumberToken;
        token.value = num.value;
        token.repr = num.repr;
        token.type = num.type;
        return token;
      }
    };
    const consumeAnIdentlikeToken = function() {
      const str2 = consumeAName();
      if (str2.toLowerCase() === "url" && next() === 40) {
        consume();
        while (whitespace(next(1)) && whitespace(next(2)))
          consume();
        if (next() === 34 || next() === 39)
          return new FunctionToken(str2);
        else if (whitespace(next()) && (next(2) === 34 || next(2) === 39))
          return new FunctionToken(str2);
        else
          return consumeAURLToken();
      } else if (next() === 40) {
        consume();
        return new FunctionToken(str2);
      } else {
        return new IdentToken(str2);
      }
    };
    const consumeAStringToken = function(endingCodePoint) {
      if (endingCodePoint === undefined)
        endingCodePoint = code;
      let string = "";
      while (consume()) {
        if (code === endingCodePoint || eof()) {
          return new StringToken(string);
        } else if (newline(code)) {
          parseerror();
          reconsume();
          return new BadStringToken;
        } else if (code === 92) {
          if (eof(next()))
            donothing();
          else if (newline(next()))
            consume();
          else
            string += stringFromCode(consumeEscape());
        } else {
          string += stringFromCode(code);
        }
      }
      throw new Error("Internal error");
    };
    const consumeAURLToken = function() {
      const token = new URLToken("");
      while (whitespace(next()))
        consume();
      if (eof(next()))
        return token;
      while (consume()) {
        if (code === 41 || eof()) {
          return token;
        } else if (whitespace(code)) {
          while (whitespace(next()))
            consume();
          if (next() === 41 || eof(next())) {
            consume();
            return token;
          } else {
            consumeTheRemnantsOfABadURL();
            return new BadURLToken;
          }
        } else if (code === 34 || code === 39 || code === 40 || nonprintable(code)) {
          parseerror();
          consumeTheRemnantsOfABadURL();
          return new BadURLToken;
        } else if (code === 92) {
          if (startsWithAValidEscape()) {
            token.value += stringFromCode(consumeEscape());
          } else {
            parseerror();
            consumeTheRemnantsOfABadURL();
            return new BadURLToken;
          }
        } else {
          token.value += stringFromCode(code);
        }
      }
      throw new Error("Internal error");
    };
    const consumeEscape = function() {
      consume();
      if (hexdigit(code)) {
        const digits = [code];
        for (let total = 0;total < 5; total++) {
          if (hexdigit(next())) {
            consume();
            digits.push(code);
          } else {
            break;
          }
        }
        if (whitespace(next()))
          consume();
        let value = parseInt(digits.map(function(x) {
          return String.fromCharCode(x);
        }).join(""), 16);
        if (value > maximumallowedcodepoint)
          value = 65533;
        return value;
      } else if (eof()) {
        return 65533;
      } else {
        return code;
      }
    };
    const areAValidEscape = function(c1, c2) {
      if (c1 !== 92)
        return false;
      if (newline(c2))
        return false;
      return true;
    };
    const startsWithAValidEscape = function() {
      return areAValidEscape(code, next());
    };
    const wouldStartAnIdentifier = function(c1, c2, c3) {
      if (c1 === 45)
        return namestartchar(c2) || c2 === 45 || areAValidEscape(c2, c3);
      else if (namestartchar(c1))
        return true;
      else if (c1 === 92)
        return areAValidEscape(c1, c2);
      else
        return false;
    };
    const startsWithAnIdentifier = function() {
      return wouldStartAnIdentifier(code, next(1), next(2));
    };
    const wouldStartANumber = function(c1, c2, c3) {
      if (c1 === 43 || c1 === 45) {
        if (digit(c2))
          return true;
        if (c2 === 46 && digit(c3))
          return true;
        return false;
      } else if (c1 === 46) {
        if (digit(c2))
          return true;
        return false;
      } else if (digit(c1)) {
        return true;
      } else {
        return false;
      }
    };
    const startsWithANumber = function() {
      return wouldStartANumber(code, next(1), next(2));
    };
    const consumeAName = function() {
      let result = "";
      while (consume()) {
        if (namechar(code)) {
          result += stringFromCode(code);
        } else if (startsWithAValidEscape()) {
          result += stringFromCode(consumeEscape());
        } else {
          reconsume();
          return result;
        }
      }
      throw new Error("Internal parse error");
    };
    const consumeANumber = function() {
      let repr = "";
      let type = "integer";
      if (next() === 43 || next() === 45) {
        consume();
        repr += stringFromCode(code);
      }
      while (digit(next())) {
        consume();
        repr += stringFromCode(code);
      }
      if (next(1) === 46 && digit(next(2))) {
        consume();
        repr += stringFromCode(code);
        consume();
        repr += stringFromCode(code);
        type = "number";
        while (digit(next())) {
          consume();
          repr += stringFromCode(code);
        }
      }
      const c1 = next(1), c2 = next(2), c3 = next(3);
      if ((c1 === 69 || c1 === 101) && digit(c2)) {
        consume();
        repr += stringFromCode(code);
        consume();
        repr += stringFromCode(code);
        type = "number";
        while (digit(next())) {
          consume();
          repr += stringFromCode(code);
        }
      } else if ((c1 === 69 || c1 === 101) && (c2 === 43 || c2 === 45) && digit(c3)) {
        consume();
        repr += stringFromCode(code);
        consume();
        repr += stringFromCode(code);
        consume();
        repr += stringFromCode(code);
        type = "number";
        while (digit(next())) {
          consume();
          repr += stringFromCode(code);
        }
      }
      const value = convertAStringToANumber(repr);
      return {
        type,
        value,
        repr
      };
    };
    const convertAStringToANumber = function(string) {
      return +string;
    };
    const consumeTheRemnantsOfABadURL = function() {
      while (consume()) {
        if (code === 41 || eof()) {
          return;
        } else if (startsWithAValidEscape()) {
          consumeEscape();
          donothing();
        } else {
          donothing();
        }
      }
    };
    let iterationCount = 0;
    while (!eof(next())) {
      tokens.push(consumeAToken());
      iterationCount++;
      if (iterationCount > str.length * 2)
        throw new Error("I'm infinite-looping!");
    }
    return tokens;
  };
  var escapeIdent = function(string) {
    string = "" + string;
    let result = "";
    const firstcode = string.charCodeAt(0);
    for (let i = 0;i < string.length; i++) {
      const code = string.charCodeAt(i);
      if (code === 0)
        throw new InvalidCharacterError("Invalid character: the input contains U+0000.");
      if (between(code, 1, 31) || code === 127 || i === 0 && between(code, 48, 57) || i === 1 && between(code, 48, 57) && firstcode === 45)
        result += "\\" + code.toString(16) + " ";
      else if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))
        result += string[i];
      else
        result += "\\" + string[i];
    }
    return result;
  };
  var escapeHash = function(string) {
    string = "" + string;
    let result = "";
    for (let i = 0;i < string.length; i++) {
      const code = string.charCodeAt(i);
      if (code === 0)
        throw new InvalidCharacterError("Invalid character: the input contains U+0000.");
      if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))
        result += string[i];
      else
        result += "\\" + code.toString(16) + " ";
    }
    return result;
  };
  var escapeString = function(string) {
    string = "" + string;
    let result = "";
    for (let i = 0;i < string.length; i++) {
      const code = string.charCodeAt(i);
      if (code === 0)
        throw new InvalidCharacterError("Invalid character: the input contains U+0000.");
      if (between(code, 1, 31) || code === 127)
        result += "\\" + code.toString(16) + " ";
      else if (code === 34 || code === 92)
        result += "\\" + string[i];
      else
        result += string[i];
    }
    return result;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WhitespaceToken = exports.URLToken = exports.SuffixMatchToken = exports.SubstringMatchToken = exports.StringValuedToken = exports.StringToken = exports.SemicolonToken = exports.PrefixMatchToken = exports.PercentageToken = exports.OpenSquareToken = exports.OpenParenToken = exports.OpenCurlyToken = exports.NumberToken = exports.InvalidCharacterError = exports.IncludeMatchToken = exports.IdentToken = exports.HashToken = exports.GroupingToken = exports.FunctionToken = exports.EOFToken = exports.DimensionToken = exports.DelimToken = exports.DashMatchToken = exports.CommaToken = exports.ColumnToken = exports.ColonToken = exports.CloseSquareToken = exports.CloseParenToken = exports.CloseCurlyToken = exports.CSSParserToken = exports.CDOToken = exports.CDCToken = exports.BadURLToken = exports.BadStringToken = exports.AtKeywordToken = undefined;
  exports.tokenize = tokenize;
  var between = function(num, first, last) {
    return num >= first && num <= last;
  };
  var maximumallowedcodepoint = 1114111;

  class InvalidCharacterError extends Error {
    constructor(message) {
      super(message);
      this.name = "InvalidCharacterError";
    }
  }
  exports.InvalidCharacterError = InvalidCharacterError;

  class CSSParserToken {
    constructor() {
      this.tokenType = "";
      this.value = undefined;
    }
    toJSON() {
      return {
        token: this.tokenType
      };
    }
    toString() {
      return this.tokenType;
    }
    toSource() {
      return "" + this;
    }
  }
  exports.CSSParserToken = CSSParserToken;

  class BadStringToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "BADSTRING";
    }
  }
  exports.BadStringToken = BadStringToken;

  class BadURLToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "BADURL";
    }
  }
  exports.BadURLToken = BadURLToken;

  class WhitespaceToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "WHITESPACE";
    }
    toString() {
      return "WS";
    }
    toSource() {
      return " ";
    }
  }
  exports.WhitespaceToken = WhitespaceToken;

  class CDOToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "CDO";
    }
    toSource() {
      return "<!--";
    }
  }
  exports.CDOToken = CDOToken;

  class CDCToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "CDC";
    }
    toSource() {
      return "-->";
    }
  }
  exports.CDCToken = CDCToken;

  class ColonToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = ":";
    }
  }
  exports.ColonToken = ColonToken;

  class SemicolonToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = ";";
    }
  }
  exports.SemicolonToken = SemicolonToken;

  class CommaToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = ",";
    }
  }
  exports.CommaToken = CommaToken;

  class GroupingToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.value = "";
      this.mirror = "";
    }
  }
  exports.GroupingToken = GroupingToken;

  class OpenCurlyToken extends GroupingToken {
    constructor() {
      super();
      this.tokenType = "{";
      this.value = "{";
      this.mirror = "}";
    }
  }
  exports.OpenCurlyToken = OpenCurlyToken;

  class CloseCurlyToken extends GroupingToken {
    constructor() {
      super();
      this.tokenType = "}";
      this.value = "}";
      this.mirror = "{";
    }
  }
  exports.CloseCurlyToken = CloseCurlyToken;

  class OpenSquareToken extends GroupingToken {
    constructor() {
      super();
      this.tokenType = "[";
      this.value = "[";
      this.mirror = "]";
    }
  }
  exports.OpenSquareToken = OpenSquareToken;

  class CloseSquareToken extends GroupingToken {
    constructor() {
      super();
      this.tokenType = "]";
      this.value = "]";
      this.mirror = "[";
    }
  }
  exports.CloseSquareToken = CloseSquareToken;

  class OpenParenToken extends GroupingToken {
    constructor() {
      super();
      this.tokenType = "(";
      this.value = "(";
      this.mirror = ")";
    }
  }
  exports.OpenParenToken = OpenParenToken;

  class CloseParenToken extends GroupingToken {
    constructor() {
      super();
      this.tokenType = ")";
      this.value = ")";
      this.mirror = "(";
    }
  }
  exports.CloseParenToken = CloseParenToken;

  class IncludeMatchToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "~=";
    }
  }
  exports.IncludeMatchToken = IncludeMatchToken;

  class DashMatchToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "|=";
    }
  }
  exports.DashMatchToken = DashMatchToken;

  class PrefixMatchToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "^=";
    }
  }
  exports.PrefixMatchToken = PrefixMatchToken;

  class SuffixMatchToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "$=";
    }
  }
  exports.SuffixMatchToken = SuffixMatchToken;

  class SubstringMatchToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "*=";
    }
  }
  exports.SubstringMatchToken = SubstringMatchToken;

  class ColumnToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "||";
    }
  }
  exports.ColumnToken = ColumnToken;

  class EOFToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "EOF";
    }
    toSource() {
      return "";
    }
  }
  exports.EOFToken = EOFToken;

  class DelimToken extends CSSParserToken {
    constructor(code) {
      super();
      this.tokenType = "DELIM";
      this.value = "";
      this.value = stringFromCode(code);
    }
    toString() {
      return "DELIM(" + this.value + ")";
    }
    toJSON() {
      const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
      json.value = this.value;
      return json;
    }
    toSource() {
      if (this.value === "\\")
        return "\\\n";
      else
        return this.value;
    }
  }
  exports.DelimToken = DelimToken;

  class StringValuedToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.value = "";
    }
    ASCIIMatch(str) {
      return this.value.toLowerCase() === str.toLowerCase();
    }
    toJSON() {
      const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
      json.value = this.value;
      return json;
    }
  }
  exports.StringValuedToken = StringValuedToken;

  class IdentToken extends StringValuedToken {
    constructor(val) {
      super();
      this.tokenType = "IDENT";
      this.value = val;
    }
    toString() {
      return "IDENT(" + this.value + ")";
    }
    toSource() {
      return escapeIdent(this.value);
    }
  }
  exports.IdentToken = IdentToken;

  class FunctionToken extends StringValuedToken {
    constructor(val) {
      super();
      this.tokenType = "FUNCTION";
      this.mirror = undefined;
      this.value = val;
      this.mirror = ")";
    }
    toString() {
      return "FUNCTION(" + this.value + ")";
    }
    toSource() {
      return escapeIdent(this.value) + "(";
    }
  }
  exports.FunctionToken = FunctionToken;

  class AtKeywordToken extends StringValuedToken {
    constructor(val) {
      super();
      this.tokenType = "AT-KEYWORD";
      this.value = val;
    }
    toString() {
      return "AT(" + this.value + ")";
    }
    toSource() {
      return "@" + escapeIdent(this.value);
    }
  }
  exports.AtKeywordToken = AtKeywordToken;

  class HashToken extends StringValuedToken {
    constructor(val) {
      super();
      this.tokenType = "HASH";
      this.type = undefined;
      this.value = val;
      this.type = "unrestricted";
    }
    toString() {
      return "HASH(" + this.value + ")";
    }
    toJSON() {
      const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
      json.value = this.value;
      json.type = this.type;
      return json;
    }
    toSource() {
      if (this.type === "id")
        return "#" + escapeIdent(this.value);
      else
        return "#" + escapeHash(this.value);
    }
  }
  exports.HashToken = HashToken;

  class StringToken extends StringValuedToken {
    constructor(val) {
      super();
      this.tokenType = "STRING";
      this.value = val;
    }
    toString() {
      return '"' + escapeString(this.value) + '"';
    }
  }
  exports.StringToken = StringToken;

  class URLToken extends StringValuedToken {
    constructor(val) {
      super();
      this.tokenType = "URL";
      this.value = val;
    }
    toString() {
      return "URL(" + this.value + ")";
    }
    toSource() {
      return 'url("' + escapeString(this.value) + '")';
    }
  }
  exports.URLToken = URLToken;

  class NumberToken extends CSSParserToken {
    constructor() {
      super();
      this.tokenType = "NUMBER";
      this.type = undefined;
      this.repr = undefined;
      this.type = "integer";
      this.repr = "";
    }
    toString() {
      if (this.type === "integer")
        return "INT(" + this.value + ")";
      return "NUMBER(" + this.value + ")";
    }
    toJSON() {
      const json = super.toJSON();
      json.value = this.value;
      json.type = this.type;
      json.repr = this.repr;
      return json;
    }
    toSource() {
      return this.repr;
    }
  }
  exports.NumberToken = NumberToken;

  class PercentageToken extends CSSParserToken {
    constructor() {
      super();
      this.tokenType = "PERCENTAGE";
      this.repr = undefined;
      this.repr = "";
    }
    toString() {
      return "PERCENTAGE(" + this.value + ")";
    }
    toJSON() {
      const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
      json.value = this.value;
      json.repr = this.repr;
      return json;
    }
    toSource() {
      return this.repr + "%";
    }
  }
  exports.PercentageToken = PercentageToken;

  class DimensionToken extends CSSParserToken {
    constructor() {
      super();
      this.tokenType = "DIMENSION";
      this.type = undefined;
      this.repr = undefined;
      this.unit = undefined;
      this.type = "integer";
      this.repr = "";
      this.unit = "";
    }
    toString() {
      return "DIM(" + this.value + "," + this.unit + ")";
    }
    toJSON() {
      const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
      json.value = this.value;
      json.type = this.type;
      json.repr = this.repr;
      json.unit = this.unit;
      return json;
    }
    toSource() {
      const source = this.repr;
      let unit = escapeIdent(this.unit);
      if (unit[0].toLowerCase() === "e" && (unit[1] === "-" || between(unit.charCodeAt(1), 48, 57))) {
        unit = "\\65 " + unit.slice(1, unit.length);
      }
      return source + unit;
    }
  }
  exports.DimensionToken = DimensionToken;
});

// node_modules/playwright-core/lib/utils/isomorphic/cssParser.js
var require_cssParser = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var isInvalidSelectorError = function(error) {
    return error instanceof InvalidSelectorError;
  };
  var parseCSS = function(selector, customNames) {
    let tokens;
    try {
      tokens = css.tokenize(selector);
      if (!(tokens[tokens.length - 1] instanceof css.EOFToken))
        tokens.push(new css.EOFToken);
    } catch (e) {
      const newMessage = e.message + ` while parsing selector "${selector}"`;
      const index = (e.stack || "").indexOf(e.message);
      if (index !== -1)
        e.stack = e.stack.substring(0, index) + newMessage + e.stack.substring(index + e.message.length);
      e.message = newMessage;
      throw e;
    }
    const unsupportedToken = tokens.find((token) => {
      return token instanceof css.AtKeywordToken || token instanceof css.BadStringToken || token instanceof css.BadURLToken || token instanceof css.ColumnToken || token instanceof css.CDOToken || token instanceof css.CDCToken || token instanceof css.SemicolonToken || token instanceof css.OpenCurlyToken || token instanceof css.CloseCurlyToken || token instanceof css.URLToken || token instanceof css.PercentageToken;
    });
    if (unsupportedToken)
      throw new InvalidSelectorError(`Unsupported token "${unsupportedToken.toSource()}" while parsing selector "${selector}"`);
    let pos = 0;
    const names = new Set;
    function unexpected() {
      return new InvalidSelectorError(`Unexpected token "${tokens[pos].toSource()}" while parsing selector "${selector}"`);
    }
    function skipWhitespace() {
      while (tokens[pos] instanceof css.WhitespaceToken)
        pos++;
    }
    function isIdent(p = pos) {
      return tokens[p] instanceof css.IdentToken;
    }
    function isString(p = pos) {
      return tokens[p] instanceof css.StringToken;
    }
    function isNumber(p = pos) {
      return tokens[p] instanceof css.NumberToken;
    }
    function isComma(p = pos) {
      return tokens[p] instanceof css.CommaToken;
    }
    function isOpenParen(p = pos) {
      return tokens[p] instanceof css.OpenParenToken;
    }
    function isCloseParen(p = pos) {
      return tokens[p] instanceof css.CloseParenToken;
    }
    function isFunction(p = pos) {
      return tokens[p] instanceof css.FunctionToken;
    }
    function isStar(p = pos) {
      return tokens[p] instanceof css.DelimToken && tokens[p].value === "*";
    }
    function isEOF(p = pos) {
      return tokens[p] instanceof css.EOFToken;
    }
    function isClauseCombinator(p = pos) {
      return tokens[p] instanceof css.DelimToken && [">", "+", "~"].includes(tokens[p].value);
    }
    function isSelectorClauseEnd(p = pos) {
      return isComma(p) || isCloseParen(p) || isEOF(p) || isClauseCombinator(p) || tokens[p] instanceof css.WhitespaceToken;
    }
    function consumeFunctionArguments() {
      const result2 = [consumeArgument()];
      while (true) {
        skipWhitespace();
        if (!isComma())
          break;
        pos++;
        result2.push(consumeArgument());
      }
      return result2;
    }
    function consumeArgument() {
      skipWhitespace();
      if (isNumber())
        return tokens[pos++].value;
      if (isString())
        return tokens[pos++].value;
      return consumeComplexSelector();
    }
    function consumeComplexSelector() {
      const result2 = {
        simples: []
      };
      skipWhitespace();
      if (isClauseCombinator()) {
        result2.simples.push({
          selector: {
            functions: [{
              name: "scope",
              args: []
            }]
          },
          combinator: ""
        });
      } else {
        result2.simples.push({
          selector: consumeSimpleSelector(),
          combinator: ""
        });
      }
      while (true) {
        skipWhitespace();
        if (isClauseCombinator()) {
          result2.simples[result2.simples.length - 1].combinator = tokens[pos++].value;
          skipWhitespace();
        } else if (isSelectorClauseEnd()) {
          break;
        }
        result2.simples.push({
          combinator: "",
          selector: consumeSimpleSelector()
        });
      }
      return result2;
    }
    function consumeSimpleSelector() {
      let rawCSSString = "";
      const functions = [];
      while (!isSelectorClauseEnd()) {
        if (isIdent() || isStar()) {
          rawCSSString += tokens[pos++].toSource();
        } else if (tokens[pos] instanceof css.HashToken) {
          rawCSSString += tokens[pos++].toSource();
        } else if (tokens[pos] instanceof css.DelimToken && tokens[pos].value === ".") {
          pos++;
          if (isIdent())
            rawCSSString += "." + tokens[pos++].toSource();
          else
            throw unexpected();
        } else if (tokens[pos] instanceof css.ColonToken) {
          pos++;
          if (isIdent()) {
            if (!customNames.has(tokens[pos].value.toLowerCase())) {
              rawCSSString += ":" + tokens[pos++].toSource();
            } else {
              const name = tokens[pos++].value.toLowerCase();
              functions.push({
                name,
                args: []
              });
              names.add(name);
            }
          } else if (isFunction()) {
            const name = tokens[pos++].value.toLowerCase();
            if (!customNames.has(name)) {
              rawCSSString += `:${name}(${consumeBuiltinFunctionArguments()})`;
            } else {
              functions.push({
                name,
                args: consumeFunctionArguments()
              });
              names.add(name);
            }
            skipWhitespace();
            if (!isCloseParen())
              throw unexpected();
            pos++;
          } else {
            throw unexpected();
          }
        } else if (tokens[pos] instanceof css.OpenSquareToken) {
          rawCSSString += "[";
          pos++;
          while (!(tokens[pos] instanceof css.CloseSquareToken) && !isEOF())
            rawCSSString += tokens[pos++].toSource();
          if (!(tokens[pos] instanceof css.CloseSquareToken))
            throw unexpected();
          rawCSSString += "]";
          pos++;
        } else {
          throw unexpected();
        }
      }
      if (!rawCSSString && !functions.length)
        throw unexpected();
      return {
        css: rawCSSString || undefined,
        functions
      };
    }
    function consumeBuiltinFunctionArguments() {
      let s = "";
      let balance = 1;
      while (!isEOF()) {
        if (isOpenParen() || isFunction())
          balance++;
        if (isCloseParen())
          balance--;
        if (!balance)
          break;
        s += tokens[pos++].toSource();
      }
      return s;
    }
    const result = consumeFunctionArguments();
    if (!isEOF())
      throw unexpected();
    if (result.some((arg) => typeof arg !== "object" || !("simples" in arg)))
      throw new InvalidSelectorError(`Error while parsing selector "${selector}"`);
    return {
      selector: result,
      names: Array.from(names)
    };
  };
  var serializeSelector = function(args) {
    return args.map((arg) => {
      if (typeof arg === "string")
        return `"${arg}"`;
      if (typeof arg === "number")
        return String(arg);
      return arg.simples.map(({
        selector,
        combinator
      }) => {
        let s = selector.css || "";
        s = s + selector.functions.map((func) => `:${func.name}(${serializeSelector(func.args)})`).join("");
        if (combinator)
          s += " " + combinator;
        return s;
      }).join(" ");
    }).join(", ");
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.InvalidSelectorError = undefined;
  exports.isInvalidSelectorError = isInvalidSelectorError;
  exports.parseCSS = parseCSS;
  exports.serializeSelector = serializeSelector;
  var css = _interopRequireWildcard(require_cssTokenizer());

  class InvalidSelectorError extends Error {
  }
  exports.InvalidSelectorError = InvalidSelectorError;
});

// node_modules/playwright-core/lib/utils/isomorphic/selectorParser.js
var require_selectorParser = __commonJS((exports) => {
  var parseSelector = function(selector) {
    const parsedStrings = parseSelectorString(selector);
    const parts = [];
    for (const part of parsedStrings.parts) {
      if (part.name === "css" || part.name === "css:light") {
        if (part.name === "css:light")
          part.body = ":light(" + part.body + ")";
        const parsedCSS = (0, _cssParser.parseCSS)(part.body, customCSSNames);
        parts.push({
          name: "css",
          body: parsedCSS.selector,
          source: part.body
        });
        continue;
      }
      if (kNestedSelectorNames.has(part.name)) {
        let innerSelector;
        let distance;
        try {
          const unescaped = JSON.parse("[" + part.body + "]");
          if (!Array.isArray(unescaped) || unescaped.length < 1 || unescaped.length > 2 || typeof unescaped[0] !== "string")
            throw new _cssParser.InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);
          innerSelector = unescaped[0];
          if (unescaped.length === 2) {
            if (typeof unescaped[1] !== "number" || !kNestedSelectorNamesWithDistance.has(part.name))
              throw new _cssParser.InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);
            distance = unescaped[1];
          }
        } catch (e) {
          throw new _cssParser.InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);
        }
        const nested = {
          name: part.name,
          source: part.body,
          body: {
            parsed: parseSelector(innerSelector),
            distance
          }
        };
        const lastFrame = [...nested.body.parsed.parts].reverse().find((part2) => part2.name === "internal:control" && part2.body === "enter-frame");
        const lastFrameIndex = lastFrame ? nested.body.parsed.parts.indexOf(lastFrame) : -1;
        if (lastFrameIndex !== -1 && selectorPartsEqual(nested.body.parsed.parts.slice(0, lastFrameIndex + 1), parts.slice(0, lastFrameIndex + 1)))
          nested.body.parsed.parts.splice(0, lastFrameIndex + 1);
        parts.push(nested);
        continue;
      }
      parts.push({
        ...part,
        source: part.body
      });
    }
    if (kNestedSelectorNames.has(parts[0].name))
      throw new _cssParser.InvalidSelectorError(`"${parts[0].name}" selector cannot be first`);
    return {
      capture: parsedStrings.capture,
      parts
    };
  };
  var splitSelectorByFrame = function(selectorText) {
    const selector = parseSelector(selectorText);
    const result = [];
    let chunk = {
      parts: []
    };
    let chunkStartIndex = 0;
    for (let i = 0;i < selector.parts.length; ++i) {
      const part = selector.parts[i];
      if (part.name === "internal:control" && part.body === "enter-frame") {
        if (!chunk.parts.length)
          throw new _cssParser.InvalidSelectorError("Selector cannot start with entering frame, select the iframe first");
        result.push(chunk);
        chunk = {
          parts: []
        };
        chunkStartIndex = i + 1;
        continue;
      }
      if (selector.capture === i)
        chunk.capture = i - chunkStartIndex;
      chunk.parts.push(part);
    }
    if (!chunk.parts.length)
      throw new _cssParser.InvalidSelectorError(`Selector cannot end with entering frame, while parsing selector ${selectorText}`);
    result.push(chunk);
    if (typeof selector.capture === "number" && typeof result[result.length - 1].capture !== "number")
      throw new _cssParser.InvalidSelectorError(`Can not capture the selector before diving into the frame. Only use * after the last frame has been selected`);
    return result;
  };
  var selectorPartsEqual = function(list1, list2) {
    return stringifySelector({
      parts: list1
    }) === stringifySelector({
      parts: list2
    });
  };
  var stringifySelector = function(selector, forceEngineName) {
    if (typeof selector === "string")
      return selector;
    return selector.parts.map((p, i) => {
      let includeEngine = true;
      if (!forceEngineName && i !== selector.capture) {
        if (p.name === "css")
          includeEngine = false;
        else if (p.name === "xpath" && p.source.startsWith("//") || p.source.startsWith(".."))
          includeEngine = false;
      }
      const prefix = includeEngine ? p.name + "=" : "";
      return `${i === selector.capture ? "*" : ""}${prefix}${p.source}`;
    }).join(" >> ");
  };
  var visitAllSelectorParts = function(selector, visitor) {
    const visit = (selector2, nested) => {
      for (const part of selector2.parts) {
        visitor(part, nested);
        if (kNestedSelectorNames.has(part.name))
          visit(part.body.parsed, true);
      }
    };
    visit(selector, false);
  };
  var parseSelectorString = function(selector) {
    let index = 0;
    let quote;
    let start = 0;
    const result = {
      parts: []
    };
    const append = () => {
      const part = selector.substring(start, index).trim();
      const eqIndex = part.indexOf("=");
      let name;
      let body;
      if (eqIndex !== -1 && part.substring(0, eqIndex).trim().match(/^[a-zA-Z_0-9-+:*]+$/)) {
        name = part.substring(0, eqIndex).trim();
        body = part.substring(eqIndex + 1);
      } else if (part.length > 1 && part[0] === '"' && part[part.length - 1] === '"') {
        name = "text";
        body = part;
      } else if (part.length > 1 && part[0] === "'" && part[part.length - 1] === "'") {
        name = "text";
        body = part;
      } else if (/^\(*\/\//.test(part) || part.startsWith("..")) {
        name = "xpath";
        body = part;
      } else {
        name = "css";
        body = part;
      }
      let capture = false;
      if (name[0] === "*") {
        capture = true;
        name = name.substring(1);
      }
      result.parts.push({
        name,
        body
      });
      if (capture) {
        if (result.capture !== undefined)
          throw new _cssParser.InvalidSelectorError(`Only one of the selectors can capture using * modifier`);
        result.capture = result.parts.length - 1;
      }
    };
    if (!selector.includes(">>")) {
      index = selector.length;
      append();
      return result;
    }
    const shouldIgnoreTextSelectorQuote = () => {
      const prefix = selector.substring(start, index);
      const match = prefix.match(/^\s*text\s*=(.*)$/);
      return !!match && !!match[1];
    };
    while (index < selector.length) {
      const c = selector[index];
      if (c === "\\" && index + 1 < selector.length) {
        index += 2;
      } else if (c === quote) {
        quote = undefined;
        index++;
      } else if (!quote && (c === '"' || c === "\'" || c === "`") && !shouldIgnoreTextSelectorQuote()) {
        quote = c;
        index++;
      } else if (!quote && c === ">" && selector[index + 1] === ">") {
        append();
        index += 2;
        start = index;
      } else {
        index++;
      }
    }
    append();
    return result;
  };
  var parseAttributeSelector = function(selector, allowUnquotedStrings) {
    let wp = 0;
    let EOL = selector.length === 0;
    const next = () => selector[wp] || "";
    const eat1 = () => {
      const result2 = next();
      ++wp;
      EOL = wp >= selector.length;
      return result2;
    };
    const syntaxError = (stage) => {
      if (EOL)
        throw new _cssParser.InvalidSelectorError(`Unexpected end of selector while parsing selector \`${selector}\``);
      throw new _cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\` - unexpected symbol "${next()}" at position ${wp}` + (stage ? " during " + stage : ""));
    };
    function skipSpaces() {
      while (!EOL && /\s/.test(next()))
        eat1();
    }
    function isCSSNameChar(char) {
      return char >= "\x80" || char >= "0" && char <= "9" || char >= "A" && char <= "Z" || char >= "a" && char <= "z" || char >= "0" && char <= "9" || char === "_" || char === "-";
    }
    function readIdentifier() {
      let result2 = "";
      skipSpaces();
      while (!EOL && isCSSNameChar(next()))
        result2 += eat1();
      return result2;
    }
    function readQuotedString(quote) {
      let result2 = eat1();
      if (result2 !== quote)
        syntaxError("parsing quoted string");
      while (!EOL && next() !== quote) {
        if (next() === "\\")
          eat1();
        result2 += eat1();
      }
      if (next() !== quote)
        syntaxError("parsing quoted string");
      result2 += eat1();
      return result2;
    }
    function readRegularExpression() {
      if (eat1() !== "/")
        syntaxError("parsing regular expression");
      let source = "";
      let inClass = false;
      while (!EOL) {
        if (next() === "\\") {
          source += eat1();
          if (EOL)
            syntaxError("parsing regular expression");
        } else if (inClass && next() === "]") {
          inClass = false;
        } else if (!inClass && next() === "[") {
          inClass = true;
        } else if (!inClass && next() === "/") {
          break;
        }
        source += eat1();
      }
      if (eat1() !== "/")
        syntaxError("parsing regular expression");
      let flags = "";
      while (!EOL && next().match(/[dgimsuy]/))
        flags += eat1();
      try {
        return new RegExp(source, flags);
      } catch (e) {
        throw new _cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\`: ${e.message}`);
      }
    }
    function readAttributeToken() {
      let token = "";
      skipSpaces();
      if (next() === `'` || next() === `"`)
        token = readQuotedString(next()).slice(1, -1);
      else
        token = readIdentifier();
      if (!token)
        syntaxError("parsing property path");
      return token;
    }
    function readOperator() {
      skipSpaces();
      let op = "";
      if (!EOL)
        op += eat1();
      if (!EOL && op !== "=")
        op += eat1();
      if (!["=", "*=", "^=", "$=", "|=", "~="].includes(op))
        syntaxError("parsing operator");
      return op;
    }
    function readAttribute() {
      eat1();
      const jsonPath = [];
      jsonPath.push(readAttributeToken());
      skipSpaces();
      while (next() === ".") {
        eat1();
        jsonPath.push(readAttributeToken());
        skipSpaces();
      }
      if (next() === "]") {
        eat1();
        return {
          name: jsonPath.join("."),
          jsonPath,
          op: "<truthy>",
          value: null,
          caseSensitive: false
        };
      }
      const operator = readOperator();
      let value = undefined;
      let caseSensitive = true;
      skipSpaces();
      if (next() === "/") {
        if (operator !== "=")
          throw new _cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\` - cannot use ${operator} in attribute with regular expression`);
        value = readRegularExpression();
      } else if (next() === `'` || next() === `"`) {
        value = readQuotedString(next()).slice(1, -1);
        skipSpaces();
        if (next() === "i" || next() === "I") {
          caseSensitive = false;
          eat1();
        } else if (next() === "s" || next() === "S") {
          caseSensitive = true;
          eat1();
        }
      } else {
        value = "";
        while (!EOL && (isCSSNameChar(next()) || next() === "+" || next() === "."))
          value += eat1();
        if (value === "true") {
          value = true;
        } else if (value === "false") {
          value = false;
        } else {
          if (!allowUnquotedStrings) {
            value = +value;
            if (Number.isNaN(value))
              syntaxError("parsing attribute value");
          }
        }
      }
      skipSpaces();
      if (next() !== "]")
        syntaxError("parsing attribute value");
      eat1();
      if (operator !== "=" && typeof value !== "string")
        throw new _cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\` - cannot use ${operator} in attribute with non-string matching value - ${value}`);
      return {
        name: jsonPath.join("."),
        jsonPath,
        op: operator,
        value,
        caseSensitive
      };
    }
    const result = {
      name: "",
      attributes: []
    };
    result.name = readIdentifier();
    skipSpaces();
    while (next() === "[") {
      result.attributes.push(readAttribute());
      skipSpaces();
    }
    if (!EOL)
      syntaxError(undefined);
    if (!result.name && !result.attributes.length)
      throw new _cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\` - selector cannot be empty`);
    return result;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "InvalidSelectorError", {
    enumerable: true,
    get: function() {
      return _cssParser.InvalidSelectorError;
    }
  });
  exports.customCSSNames = undefined;
  Object.defineProperty(exports, "isInvalidSelectorError", {
    enumerable: true,
    get: function() {
      return _cssParser.isInvalidSelectorError;
    }
  });
  exports.parseAttributeSelector = parseAttributeSelector;
  exports.parseSelector = parseSelector;
  exports.splitSelectorByFrame = splitSelectorByFrame;
  exports.stringifySelector = stringifySelector;
  exports.visitAllSelectorParts = visitAllSelectorParts;
  var _cssParser = require_cssParser();
  var kNestedSelectorNames = new Set(["internal:has", "internal:has-not", "internal:and", "internal:or", "internal:chain", "left-of", "right-of", "above", "below", "near"]);
  var kNestedSelectorNamesWithDistance = new Set(["left-of", "right-of", "above", "below", "near"]);
  var customCSSNames = exports.customCSSNames = new Set(["not", "is", "where", "has", "scope", "light", "visible", "text", "text-matches", "text-is", "has-text", "above", "below", "right-of", "left-of", "near", "nth-match"]);
});

// node_modules/playwright-core/lib/utils/isomorphic/locatorGenerators.js
var require_locatorGenerators = __commonJS((exports) => {
  var asLocator = function(lang, selector, isFrameLocator = false) {
    return asLocators(lang, selector, isFrameLocator)[0];
  };
  var asLocators = function(lang, selector, isFrameLocator = false, maxOutputSize = 20, preferredQuote) {
    try {
      return innerAsLocators(new generators[lang](preferredQuote), (0, _selectorParser.parseSelector)(selector), isFrameLocator, maxOutputSize);
    } catch (e) {
      return [selector];
    }
  };
  var innerAsLocators = function(factory, parsed, isFrameLocator = false, maxOutputSize = 20) {
    const parts = [...parsed.parts];
    for (let index = 0;index < parts.length - 1; index++) {
      if (parts[index].name === "nth" && parts[index + 1].name === "internal:control" && parts[index + 1].body === "enter-frame") {
        const [nth] = parts.splice(index, 1);
        parts.splice(index + 1, 0, nth);
      }
    }
    const tokens = [];
    let nextBase = isFrameLocator ? "frame-locator" : "page";
    for (let index = 0;index < parts.length; index++) {
      const part = parts[index];
      const base = nextBase;
      nextBase = "locator";
      if (part.name === "nth") {
        if (part.body === "0")
          tokens.push([factory.generateLocator(base, "first", ""), factory.generateLocator(base, "nth", "0")]);
        else if (part.body === "-1")
          tokens.push([factory.generateLocator(base, "last", ""), factory.generateLocator(base, "nth", "-1")]);
        else
          tokens.push([factory.generateLocator(base, "nth", part.body)]);
        continue;
      }
      if (part.name === "internal:text") {
        const {
          exact,
          text
        } = detectExact(part.body);
        tokens.push([factory.generateLocator(base, "text", text, {
          exact
        })]);
        continue;
      }
      if (part.name === "internal:has-text") {
        const {
          exact,
          text
        } = detectExact(part.body);
        if (!exact) {
          tokens.push([factory.generateLocator(base, "has-text", text, {
            exact
          })]);
          continue;
        }
      }
      if (part.name === "internal:has-not-text") {
        const {
          exact,
          text
        } = detectExact(part.body);
        if (!exact) {
          tokens.push([factory.generateLocator(base, "has-not-text", text, {
            exact
          })]);
          continue;
        }
      }
      if (part.name === "internal:has") {
        const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
        tokens.push(inners.map((inner) => factory.generateLocator(base, "has", inner)));
        continue;
      }
      if (part.name === "internal:has-not") {
        const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
        tokens.push(inners.map((inner) => factory.generateLocator(base, "hasNot", inner)));
        continue;
      }
      if (part.name === "internal:and") {
        const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
        tokens.push(inners.map((inner) => factory.generateLocator(base, "and", inner)));
        continue;
      }
      if (part.name === "internal:or") {
        const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
        tokens.push(inners.map((inner) => factory.generateLocator(base, "or", inner)));
        continue;
      }
      if (part.name === "internal:chain") {
        const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
        tokens.push(inners.map((inner) => factory.generateLocator(base, "chain", inner)));
        continue;
      }
      if (part.name === "internal:label") {
        const {
          exact,
          text
        } = detectExact(part.body);
        tokens.push([factory.generateLocator(base, "label", text, {
          exact
        })]);
        continue;
      }
      if (part.name === "internal:role") {
        const attrSelector = (0, _selectorParser.parseAttributeSelector)(part.body, true);
        const options = {
          attrs: []
        };
        for (const attr of attrSelector.attributes) {
          if (attr.name === "name") {
            options.exact = attr.caseSensitive;
            options.name = attr.value;
          } else {
            if (attr.name === "level" && typeof attr.value === "string")
              attr.value = +attr.value;
            options.attrs.push({
              name: attr.name === "include-hidden" ? "includeHidden" : attr.name,
              value: attr.value
            });
          }
        }
        tokens.push([factory.generateLocator(base, "role", attrSelector.name, options)]);
        continue;
      }
      if (part.name === "internal:testid") {
        const attrSelector = (0, _selectorParser.parseAttributeSelector)(part.body, true);
        const {
          value
        } = attrSelector.attributes[0];
        tokens.push([factory.generateLocator(base, "test-id", value)]);
        continue;
      }
      if (part.name === "internal:attr") {
        const attrSelector = (0, _selectorParser.parseAttributeSelector)(part.body, true);
        const {
          name,
          value,
          caseSensitive
        } = attrSelector.attributes[0];
        const text = value;
        const exact = !!caseSensitive;
        if (name === "placeholder") {
          tokens.push([factory.generateLocator(base, "placeholder", text, {
            exact
          })]);
          continue;
        }
        if (name === "alt") {
          tokens.push([factory.generateLocator(base, "alt", text, {
            exact
          })]);
          continue;
        }
        if (name === "title") {
          tokens.push([factory.generateLocator(base, "title", text, {
            exact
          })]);
          continue;
        }
      }
      let locatorType = "default";
      const nextPart = parts[index + 1];
      if (nextPart && nextPart.name === "internal:control" && nextPart.body === "enter-frame") {
        locatorType = "frame";
        nextBase = "frame-locator";
        index++;
      }
      const selectorPart = (0, _selectorParser.stringifySelector)({
        parts: [part]
      });
      const locatorPart = factory.generateLocator(base, locatorType, selectorPart);
      if (locatorType === "default" && nextPart && ["internal:has-text", "internal:has-not-text"].includes(nextPart.name)) {
        const {
          exact,
          text
        } = detectExact(nextPart.body);
        if (!exact) {
          const nextLocatorPart = factory.generateLocator("locator", nextPart.name === "internal:has-text" ? "has-text" : "has-not-text", text, {
            exact
          });
          const options = {};
          if (nextPart.name === "internal:has-text")
            options.hasText = text;
          else
            options.hasNotText = text;
          const combinedPart = factory.generateLocator(base, "default", selectorPart, options);
          tokens.push([factory.chainLocators([locatorPart, nextLocatorPart]), combinedPart]);
          index++;
          continue;
        }
      }
      let locatorPartWithEngine;
      if (["xpath", "css"].includes(part.name)) {
        const selectorPart2 = (0, _selectorParser.stringifySelector)({
          parts: [part]
        }, true);
        locatorPartWithEngine = factory.generateLocator(base, locatorType, selectorPart2);
      }
      tokens.push([locatorPart, locatorPartWithEngine].filter(Boolean));
    }
    return combineTokens(factory, tokens, maxOutputSize);
  };
  var combineTokens = function(factory, tokens, maxOutputSize) {
    const currentTokens = tokens.map(() => "");
    const result = [];
    const visit = (index) => {
      if (index === tokens.length) {
        result.push(factory.chainLocators(currentTokens));
        return currentTokens.length < maxOutputSize;
      }
      for (const taken of tokens[index]) {
        currentTokens[index] = taken;
        if (!visit(index + 1))
          return false;
      }
      return true;
    };
    visit(0);
    return result;
  };
  var detectExact = function(text) {
    let exact = false;
    const match = text.match(/^\/(.*)\/([igm]*)$/);
    if (match)
      return {
        text: new RegExp(match[1], match[2])
      };
    if (text.endsWith('"')) {
      text = JSON.parse(text);
      exact = true;
    } else if (text.endsWith('"s')) {
      text = JSON.parse(text.substring(0, text.length - 1));
      exact = true;
    } else if (text.endsWith('"i')) {
      text = JSON.parse(text.substring(0, text.length - 1));
      exact = false;
    }
    return {
      exact,
      text
    };
  };
  var isRegExp = function(obj) {
    return obj instanceof RegExp;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PythonLocatorFactory = exports.JsonlLocatorFactory = exports.JavaScriptLocatorFactory = exports.JavaLocatorFactory = exports.CSharpLocatorFactory = undefined;
  exports.asLocator = asLocator;
  exports.asLocators = asLocators;
  var _stringUtils = require_stringUtils();
  var _selectorParser = require_selectorParser();

  class JavaScriptLocatorFactory {
    constructor(preferredQuote) {
      this.preferredQuote = preferredQuote;
    }
    generateLocator(base, kind, body, options = {}) {
      switch (kind) {
        case "default":
          if (options.hasText !== undefined)
            return `locator(${this.quote(body)}, { hasText: ${this.toHasText(options.hasText)} })`;
          if (options.hasNotText !== undefined)
            return `locator(${this.quote(body)}, { hasNotText: ${this.toHasText(options.hasNotText)} })`;
          return `locator(${this.quote(body)})`;
        case "frame":
          return `frameLocator(${this.quote(body)})`;
        case "nth":
          return `nth(${body})`;
        case "first":
          return `first()`;
        case "last":
          return `last()`;
        case "role":
          const attrs = [];
          if (isRegExp(options.name)) {
            attrs.push(`name: ${this.regexToSourceString(options.name)}`);
          } else if (typeof options.name === "string") {
            attrs.push(`name: ${this.quote(options.name)}`);
            if (options.exact)
              attrs.push(`exact: true`);
          }
          for (const {
            name,
            value
          } of options.attrs)
            attrs.push(`${name}: ${typeof value === "string" ? this.quote(value) : value}`);
          const attrString = attrs.length ? `, { ${attrs.join(", ")} }` : "";
          return `getByRole(${this.quote(body)}${attrString})`;
        case "has-text":
          return `filter({ hasText: ${this.toHasText(body)} })`;
        case "has-not-text":
          return `filter({ hasNotText: ${this.toHasText(body)} })`;
        case "has":
          return `filter({ has: ${body} })`;
        case "hasNot":
          return `filter({ hasNot: ${body} })`;
        case "and":
          return `and(${body})`;
        case "or":
          return `or(${body})`;
        case "chain":
          return `locator(${body})`;
        case "test-id":
          return `getByTestId(${this.toTestIdValue(body)})`;
        case "text":
          return this.toCallWithExact("getByText", body, !!options.exact);
        case "alt":
          return this.toCallWithExact("getByAltText", body, !!options.exact);
        case "placeholder":
          return this.toCallWithExact("getByPlaceholder", body, !!options.exact);
        case "label":
          return this.toCallWithExact("getByLabel", body, !!options.exact);
        case "title":
          return this.toCallWithExact("getByTitle", body, !!options.exact);
        default:
          throw new Error("Unknown selector kind " + kind);
      }
    }
    chainLocators(locators) {
      return locators.join(".");
    }
    regexToSourceString(re) {
      return (0, _stringUtils.normalizeEscapedRegexQuotes)(String(re));
    }
    toCallWithExact(method, body, exact) {
      if (isRegExp(body))
        return `${method}(${this.regexToSourceString(body)})`;
      return exact ? `${method}(${this.quote(body)}, { exact: true })` : `${method}(${this.quote(body)})`;
    }
    toHasText(body) {
      if (isRegExp(body))
        return this.regexToSourceString(body);
      return this.quote(body);
    }
    toTestIdValue(value) {
      if (isRegExp(value))
        return this.regexToSourceString(value);
      return this.quote(value);
    }
    quote(text) {
      var _this$preferredQuote;
      return (0, _stringUtils.escapeWithQuotes)(text, (_this$preferredQuote = this.preferredQuote) !== null && _this$preferredQuote !== undefined ? _this$preferredQuote : "\'");
    }
  }
  exports.JavaScriptLocatorFactory = JavaScriptLocatorFactory;

  class PythonLocatorFactory {
    generateLocator(base, kind, body, options = {}) {
      switch (kind) {
        case "default":
          if (options.hasText !== undefined)
            return `locator(${this.quote(body)}, has_text=${this.toHasText(options.hasText)})`;
          if (options.hasNotText !== undefined)
            return `locator(${this.quote(body)}, has_not_text=${this.toHasText(options.hasNotText)})`;
          return `locator(${this.quote(body)})`;
        case "frame":
          return `frame_locator(${this.quote(body)})`;
        case "nth":
          return `nth(${body})`;
        case "first":
          return `first`;
        case "last":
          return `last`;
        case "role":
          const attrs = [];
          if (isRegExp(options.name)) {
            attrs.push(`name=${this.regexToString(options.name)}`);
          } else if (typeof options.name === "string") {
            attrs.push(`name=${this.quote(options.name)}`);
            if (options.exact)
              attrs.push(`exact=True`);
          }
          for (const {
            name,
            value
          } of options.attrs) {
            let valueString = typeof value === "string" ? this.quote(value) : value;
            if (typeof value === "boolean")
              valueString = value ? "True" : "False";
            attrs.push(`${(0, _stringUtils.toSnakeCase)(name)}=${valueString}`);
          }
          const attrString = attrs.length ? `, ${attrs.join(", ")}` : "";
          return `get_by_role(${this.quote(body)}${attrString})`;
        case "has-text":
          return `filter(has_text=${this.toHasText(body)})`;
        case "has-not-text":
          return `filter(has_not_text=${this.toHasText(body)})`;
        case "has":
          return `filter(has=${body})`;
        case "hasNot":
          return `filter(has_not=${body})`;
        case "and":
          return `and_(${body})`;
        case "or":
          return `or_(${body})`;
        case "chain":
          return `locator(${body})`;
        case "test-id":
          return `get_by_test_id(${this.toTestIdValue(body)})`;
        case "text":
          return this.toCallWithExact("get_by_text", body, !!options.exact);
        case "alt":
          return this.toCallWithExact("get_by_alt_text", body, !!options.exact);
        case "placeholder":
          return this.toCallWithExact("get_by_placeholder", body, !!options.exact);
        case "label":
          return this.toCallWithExact("get_by_label", body, !!options.exact);
        case "title":
          return this.toCallWithExact("get_by_title", body, !!options.exact);
        default:
          throw new Error("Unknown selector kind " + kind);
      }
    }
    chainLocators(locators) {
      return locators.join(".");
    }
    regexToString(body) {
      const suffix = body.flags.includes("i") ? ", re.IGNORECASE" : "";
      return `re.compile(r"${(0, _stringUtils.normalizeEscapedRegexQuotes)(body.source).replace(/\\\//, "/").replace(/"/g, '\\"')}"${suffix})`;
    }
    toCallWithExact(method, body, exact) {
      if (isRegExp(body))
        return `${method}(${this.regexToString(body)})`;
      if (exact)
        return `${method}(${this.quote(body)}, exact=True)`;
      return `${method}(${this.quote(body)})`;
    }
    toHasText(body) {
      if (isRegExp(body))
        return this.regexToString(body);
      return `${this.quote(body)}`;
    }
    toTestIdValue(value) {
      if (isRegExp(value))
        return this.regexToString(value);
      return this.quote(value);
    }
    quote(text) {
      return (0, _stringUtils.escapeWithQuotes)(text, "\"");
    }
  }
  exports.PythonLocatorFactory = PythonLocatorFactory;

  class JavaLocatorFactory {
    generateLocator(base, kind, body, options = {}) {
      let clazz;
      switch (base) {
        case "page":
          clazz = "Page";
          break;
        case "frame-locator":
          clazz = "FrameLocator";
          break;
        case "locator":
          clazz = "Locator";
          break;
      }
      switch (kind) {
        case "default":
          if (options.hasText !== undefined)
            return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasText(${this.toHasText(options.hasText)}))`;
          if (options.hasNotText !== undefined)
            return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasNotText(${this.toHasText(options.hasNotText)}))`;
          return `locator(${this.quote(body)})`;
        case "frame":
          return `frameLocator(${this.quote(body)})`;
        case "nth":
          return `nth(${body})`;
        case "first":
          return `first()`;
        case "last":
          return `last()`;
        case "role":
          const attrs = [];
          if (isRegExp(options.name)) {
            attrs.push(`.setName(${this.regexToString(options.name)})`);
          } else if (typeof options.name === "string") {
            attrs.push(`.setName(${this.quote(options.name)})`);
            if (options.exact)
              attrs.push(`.setExact(true)`);
          }
          for (const {
            name,
            value
          } of options.attrs)
            attrs.push(`.set${(0, _stringUtils.toTitleCase)(name)}(${typeof value === "string" ? this.quote(value) : value})`);
          const attrString = attrs.length ? `, new ${clazz}.GetByRoleOptions()${attrs.join("")}` : "";
          return `getByRole(AriaRole.${(0, _stringUtils.toSnakeCase)(body).toUpperCase()}${attrString})`;
        case "has-text":
          return `filter(new ${clazz}.FilterOptions().setHasText(${this.toHasText(body)}))`;
        case "has-not-text":
          return `filter(new ${clazz}.FilterOptions().setHasNotText(${this.toHasText(body)}))`;
        case "has":
          return `filter(new ${clazz}.FilterOptions().setHas(${body}))`;
        case "hasNot":
          return `filter(new ${clazz}.FilterOptions().setHasNot(${body}))`;
        case "and":
          return `and(${body})`;
        case "or":
          return `or(${body})`;
        case "chain":
          return `locator(${body})`;
        case "test-id":
          return `getByTestId(${this.toTestIdValue(body)})`;
        case "text":
          return this.toCallWithExact(clazz, "getByText", body, !!options.exact);
        case "alt":
          return this.toCallWithExact(clazz, "getByAltText", body, !!options.exact);
        case "placeholder":
          return this.toCallWithExact(clazz, "getByPlaceholder", body, !!options.exact);
        case "label":
          return this.toCallWithExact(clazz, "getByLabel", body, !!options.exact);
        case "title":
          return this.toCallWithExact(clazz, "getByTitle", body, !!options.exact);
        default:
          throw new Error("Unknown selector kind " + kind);
      }
    }
    chainLocators(locators) {
      return locators.join(".");
    }
    regexToString(body) {
      const suffix = body.flags.includes("i") ? ", Pattern.CASE_INSENSITIVE" : "";
      return `Pattern.compile(${this.quote((0, _stringUtils.normalizeEscapedRegexQuotes)(body.source))}${suffix})`;
    }
    toCallWithExact(clazz, method, body, exact) {
      if (isRegExp(body))
        return `${method}(${this.regexToString(body)})`;
      if (exact)
        return `${method}(${this.quote(body)}, new ${clazz}.${(0, _stringUtils.toTitleCase)(method)}Options().setExact(true))`;
      return `${method}(${this.quote(body)})`;
    }
    toHasText(body) {
      if (isRegExp(body))
        return this.regexToString(body);
      return this.quote(body);
    }
    toTestIdValue(value) {
      if (isRegExp(value))
        return this.regexToString(value);
      return this.quote(value);
    }
    quote(text) {
      return (0, _stringUtils.escapeWithQuotes)(text, "\"");
    }
  }
  exports.JavaLocatorFactory = JavaLocatorFactory;

  class CSharpLocatorFactory {
    generateLocator(base, kind, body, options = {}) {
      switch (kind) {
        case "default":
          if (options.hasText !== undefined)
            return `Locator(${this.quote(body)}, new() { ${this.toHasText(options.hasText)} })`;
          if (options.hasNotText !== undefined)
            return `Locator(${this.quote(body)}, new() { ${this.toHasNotText(options.hasNotText)} })`;
          return `Locator(${this.quote(body)})`;
        case "frame":
          return `FrameLocator(${this.quote(body)})`;
        case "nth":
          return `Nth(${body})`;
        case "first":
          return `First`;
        case "last":
          return `Last`;
        case "role":
          const attrs = [];
          if (isRegExp(options.name)) {
            attrs.push(`NameRegex = ${this.regexToString(options.name)}`);
          } else if (typeof options.name === "string") {
            attrs.push(`Name = ${this.quote(options.name)}`);
            if (options.exact)
              attrs.push(`Exact = true`);
          }
          for (const {
            name,
            value
          } of options.attrs)
            attrs.push(`${(0, _stringUtils.toTitleCase)(name)} = ${typeof value === "string" ? this.quote(value) : value}`);
          const attrString = attrs.length ? `, new() { ${attrs.join(", ")} }` : "";
          return `GetByRole(AriaRole.${(0, _stringUtils.toTitleCase)(body)}${attrString})`;
        case "has-text":
          return `Filter(new() { ${this.toHasText(body)} })`;
        case "has-not-text":
          return `Filter(new() { ${this.toHasNotText(body)} })`;
        case "has":
          return `Filter(new() { Has = ${body} })`;
        case "hasNot":
          return `Filter(new() { HasNot = ${body} })`;
        case "and":
          return `And(${body})`;
        case "or":
          return `Or(${body})`;
        case "chain":
          return `Locator(${body})`;
        case "test-id":
          return `GetByTestId(${this.toTestIdValue(body)})`;
        case "text":
          return this.toCallWithExact("GetByText", body, !!options.exact);
        case "alt":
          return this.toCallWithExact("GetByAltText", body, !!options.exact);
        case "placeholder":
          return this.toCallWithExact("GetByPlaceholder", body, !!options.exact);
        case "label":
          return this.toCallWithExact("GetByLabel", body, !!options.exact);
        case "title":
          return this.toCallWithExact("GetByTitle", body, !!options.exact);
        default:
          throw new Error("Unknown selector kind " + kind);
      }
    }
    chainLocators(locators) {
      return locators.join(".");
    }
    regexToString(body) {
      const suffix = body.flags.includes("i") ? ", RegexOptions.IgnoreCase" : "";
      return `new Regex(${this.quote((0, _stringUtils.normalizeEscapedRegexQuotes)(body.source))}${suffix})`;
    }
    toCallWithExact(method, body, exact) {
      if (isRegExp(body))
        return `${method}(${this.regexToString(body)})`;
      if (exact)
        return `${method}(${this.quote(body)}, new() { Exact = true })`;
      return `${method}(${this.quote(body)})`;
    }
    toHasText(body) {
      if (isRegExp(body))
        return `HasTextRegex = ${this.regexToString(body)}`;
      return `HasText = ${this.quote(body)}`;
    }
    toTestIdValue(value) {
      if (isRegExp(value))
        return this.regexToString(value);
      return this.quote(value);
    }
    toHasNotText(body) {
      if (isRegExp(body))
        return `HasNotTextRegex = ${this.regexToString(body)}`;
      return `HasNotText = ${this.quote(body)}`;
    }
    quote(text) {
      return (0, _stringUtils.escapeWithQuotes)(text, "\"");
    }
  }
  exports.CSharpLocatorFactory = CSharpLocatorFactory;

  class JsonlLocatorFactory {
    generateLocator(base, kind, body, options = {}) {
      return JSON.stringify({
        kind,
        body,
        options
      });
    }
    chainLocators(locators) {
      const objects = locators.map((l) => JSON.parse(l));
      for (let i = 0;i < objects.length - 1; ++i)
        objects[i].next = objects[i + 1];
      return JSON.stringify(objects[0]);
    }
  }
  exports.JsonlLocatorFactory = JsonlLocatorFactory;
  var generators = {
    javascript: JavaScriptLocatorFactory,
    python: PythonLocatorFactory,
    java: JavaLocatorFactory,
    csharp: CSharpLocatorFactory,
    jsonl: JsonlLocatorFactory
  };
});

// node_modules/playwright-core/lib/utils/index.js
var require_utils3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _ascii = require_ascii();
  Object.keys(_ascii).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _ascii[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _ascii[key];
      }
    });
  });
  var _comparators = require_comparators();
  Object.keys(_comparators).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _comparators[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _comparators[key];
      }
    });
  });
  var _crypto = require_crypto();
  Object.keys(_crypto).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _crypto[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _crypto[key];
      }
    });
  });
  var _debug = require_debug5();
  Object.keys(_debug).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _debug[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _debug[key];
      }
    });
  });
  var _env = require_env();
  Object.keys(_env).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _env[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _env[key];
      }
    });
  });
  var _eventsHelper = require_eventsHelper();
  Object.keys(_eventsHelper).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _eventsHelper[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _eventsHelper[key];
      }
    });
  });
  var _fileUtils = require_fileUtils();
  Object.keys(_fileUtils).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _fileUtils[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _fileUtils[key];
      }
    });
  });
  var _glob = require_glob();
  Object.keys(_glob).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _glob[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _glob[key];
      }
    });
  });
  var _headers = require_headers();
  Object.keys(_headers).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _headers[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _headers[key];
      }
    });
  });
  var _hostPlatform = require_hostPlatform();
  Object.keys(_hostPlatform).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _hostPlatform[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _hostPlatform[key];
      }
    });
  });
  var _httpServer = require_httpServer();
  Object.keys(_httpServer).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _httpServer[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _httpServer[key];
      }
    });
  });
  var _manualPromise = require_manualPromise();
  Object.keys(_manualPromise).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _manualPromise[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _manualPromise[key];
      }
    });
  });
  var _mimeType = require_mimeType();
  Object.keys(_mimeType).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _mimeType[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _mimeType[key];
      }
    });
  });
  var _multimap = require_multimap();
  Object.keys(_multimap).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _multimap[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _multimap[key];
      }
    });
  });
  var _network = require_network();
  Object.keys(_network).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _network[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _network[key];
      }
    });
  });
  var _processLauncher = require_processLauncher();
  Object.keys(_processLauncher).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _processLauncher[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _processLauncher[key];
      }
    });
  });
  var _profiler = require_profiler();
  Object.keys(_profiler).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _profiler[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _profiler[key];
      }
    });
  });
  var _rtti = require_rtti();
  Object.keys(_rtti).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _rtti[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _rtti[key];
      }
    });
  });
  var _semaphore = require_semaphore();
  Object.keys(_semaphore).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _semaphore[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _semaphore[key];
      }
    });
  });
  var _spawnAsync = require_spawnAsync();
  Object.keys(_spawnAsync).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _spawnAsync[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _spawnAsync[key];
      }
    });
  });
  var _stackTrace = require_stackTrace();
  Object.keys(_stackTrace).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _stackTrace[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _stackTrace[key];
      }
    });
  });
  var _task = require_task();
  Object.keys(_task).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _task[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _task[key];
      }
    });
  });
  var _time = require_time();
  Object.keys(_time).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _time[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _time[key];
      }
    });
  });
  var _timeoutRunner = require_timeoutRunner();
  Object.keys(_timeoutRunner).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _timeoutRunner[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _timeoutRunner[key];
      }
    });
  });
  var _traceUtils = require_traceUtils();
  Object.keys(_traceUtils).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _traceUtils[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _traceUtils[key];
      }
    });
  });
  var _userAgent = require_userAgent();
  Object.keys(_userAgent).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _userAgent[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _userAgent[key];
      }
    });
  });
  var _wsServer = require_wsServer();
  Object.keys(_wsServer).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _wsServer[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _wsServer[key];
      }
    });
  });
  var _zipFile = require_zipFile();
  Object.keys(_zipFile).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _zipFile[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _zipFile[key];
      }
    });
  });
  var _zones = require_zones();
  Object.keys(_zones).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _zones[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _zones[key];
      }
    });
  });
  var _locatorGenerators = require_locatorGenerators();
  Object.keys(_locatorGenerators).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _locatorGenerators[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _locatorGenerators[key];
      }
    });
  });
  var _stringUtils = require_stringUtils();
  Object.keys(_stringUtils).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _stringUtils[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _stringUtils[key];
      }
    });
  });
});

// node_modules/playwright-core/lib/utils/stackTrace.js
var require_stackTrace = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var rewriteErrorMessage = function(e, newMessage) {
    var _e$stack;
    const lines = (((_e$stack = e.stack) === null || _e$stack === undefined ? undefined : _e$stack.split("\n")) || []).filter((l) => l.startsWith("    at "));
    e.message = newMessage;
    const errorTitle = `${e.name}: ${e.message}`;
    if (lines.length)
      e.stack = `${errorTitle}\n${lines.join("\n")}`;
    return e;
  };
  var captureRawStack = function() {
    const stackTraceLimit = Error.stackTraceLimit;
    Error.stackTraceLimit = 50;
    const error = new Error;
    const stack = error.stack || "";
    Error.stackTraceLimit = stackTraceLimit;
    return stack.split("\n");
  };
  var captureLibraryStackTrace = function() {
    const stack = captureRawStack();
    const isTesting = (0, _.isUnderTest)();
    let parsedFrames = stack.map((line) => {
      const frame = (0, _utilsBundle.parseStackTraceLine)(line);
      if (!frame || !frame.file)
        return null;
      const isPlaywrightLibrary = frame.file.startsWith(CORE_DIR);
      const parsed = {
        frame,
        frameText: line,
        isPlaywrightLibrary
      };
      return parsed;
    }).filter(Boolean);
    let apiName = "";
    for (let i = 0;i < parsedFrames.length - 1; i++) {
      const parsedFrame = parsedFrames[i];
      if (parsedFrame.isPlaywrightLibrary && !parsedFrames[i + 1].isPlaywrightLibrary) {
        apiName = apiName || normalizeAPIName(parsedFrame.frame.function);
        break;
      }
    }
    function normalizeAPIName(name) {
      if (!name)
        return "";
      const match = name.match(/(API|JS|CDP|[A-Z])(.*)/);
      if (!match)
        return name;
      return match[1].toLowerCase() + match[2];
    }
    parsedFrames = parsedFrames.filter((f) => {
      if (process.env.PWDEBUGIMPL)
        return true;
      if (internalStackPrefixes.some((prefix) => f.frame.file.startsWith(prefix)))
        return false;
      return true;
    });
    return {
      frames: parsedFrames.map((p) => p.frame),
      apiName
    };
  };
  var stringifyStackFrames = function(frames) {
    const stackLines = [];
    for (const frame of frames) {
      if (frame.function)
        stackLines.push(`    at ${frame.function} (${frame.file}:${frame.line}:${frame.column})`);
      else
        stackLines.push(`    at ${frame.file}:${frame.line}:${frame.column}`);
    }
    return stackLines;
  };
  var captureLibraryStackText = function() {
    const parsed = captureLibraryStackTrace();
    return stringifyStackFrames(parsed.frames).join("\n");
  };
  var splitErrorMessage = function(message) {
    const separationIdx = message.indexOf(":");
    return {
      name: separationIdx !== -1 ? message.slice(0, separationIdx) : "",
      message: separationIdx !== -1 && separationIdx + 2 <= message.length ? message.substring(separationIdx + 2) : message
    };
  };
  var formatCallLog = function(log) {
    if (!log || !log.some((l) => !!l))
      return "";
    return `
Call log:
  ${_utilsBundle.colors.dim("- " + (log || []).join("\n  - "))}
`;
  };
  var __dirname = "/Users/hottin/project/jwave_playlist/node_modules/playwright-core/lib/utils";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.addInternalStackPrefix = undefined;
  exports.captureLibraryStackText = captureLibraryStackText;
  exports.captureLibraryStackTrace = captureLibraryStackTrace;
  exports.captureRawStack = captureRawStack;
  exports.formatCallLog = formatCallLog;
  exports.rewriteErrorMessage = rewriteErrorMessage;
  exports.splitErrorMessage = splitErrorMessage;
  exports.stringifyStackFrames = stringifyStackFrames;
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _utilsBundle = require_utilsBundle();
  var _ = require_utils3();
  var CORE_DIR = _path.default.resolve(__dirname, "..", "..");
  var internalStackPrefixes = [CORE_DIR];
  var addInternalStackPrefix = (prefix) => internalStackPrefixes.push(prefix);
  exports.addInternalStackPrefix = addInternalStackPrefix;
});

// node_modules/playwright-core/lib/utils/manualPromise.js
var require_manualPromise = __commonJS((exports) => {
  var cloneError = function(error, frames) {
    const clone = new Error;
    clone.name = error.name;
    clone.message = error.message;
    clone.stack = [error.name + ":" + error.message, ...frames].join("\n");
    return clone;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ManualPromise = exports.LongStandingScope = undefined;
  var _stackTrace = require_stackTrace();
  var _Symbol$species;
  var _Symbol$toStringTag;
  _Symbol$species = Symbol.species;
  _Symbol$toStringTag = Symbol.toStringTag;

  class ManualPromise extends Promise {
    constructor() {
      let resolve;
      let reject;
      super((f, r) => {
        resolve = f;
        reject = r;
      });
      this._resolve = undefined;
      this._reject = undefined;
      this._isDone = undefined;
      this._isDone = false;
      this._resolve = resolve;
      this._reject = reject;
    }
    isDone() {
      return this._isDone;
    }
    resolve(t) {
      this._isDone = true;
      this._resolve(t);
    }
    reject(e) {
      this._isDone = true;
      this._reject(e);
    }
    static get [_Symbol$species]() {
      return Promise;
    }
    get [_Symbol$toStringTag]() {
      return "ManualPromise";
    }
  }
  exports.ManualPromise = ManualPromise;

  class LongStandingScope {
    constructor() {
      this._terminateError = undefined;
      this._closeError = undefined;
      this._terminatePromises = new Map;
      this._isClosed = false;
    }
    reject(error) {
      this._isClosed = true;
      this._terminateError = error;
      for (const p of this._terminatePromises.keys())
        p.resolve(error);
    }
    close(error) {
      this._isClosed = true;
      this._closeError = error;
      for (const [p, frames] of this._terminatePromises)
        p.resolve(cloneError(error, frames));
    }
    isClosed() {
      return this._isClosed;
    }
    static async raceMultiple(scopes, promise) {
      return Promise.race(scopes.map((s) => s.race(promise)));
    }
    async race(promise) {
      return this._race(Array.isArray(promise) ? promise : [promise], false);
    }
    async safeRace(promise, defaultValue) {
      return this._race([promise], true, defaultValue);
    }
    async _race(promises, safe, defaultValue) {
      const terminatePromise = new ManualPromise;
      const frames = (0, _stackTrace.captureRawStack)();
      if (this._terminateError)
        terminatePromise.resolve(this._terminateError);
      if (this._closeError)
        terminatePromise.resolve(cloneError(this._closeError, frames));
      this._terminatePromises.set(terminatePromise, frames);
      try {
        return await Promise.race([terminatePromise.then((e) => safe ? defaultValue : Promise.reject(e)), ...promises]);
      } finally {
        this._terminatePromises.delete(terminatePromise);
      }
    }
  }
  exports.LongStandingScope = LongStandingScope;
});

// node_modules/playwright-core/lib/utils/happy-eyeballs.js
var require_happy_eyeballs = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  async function createSocket(host, port) {
    return new Promise((resolve, reject) => {
      if (net.isIP(host)) {
        const socket = net.createConnection({
          host,
          port
        });
        socket.on("connect", () => resolve(socket));
        socket.on("error", (error) => reject(error));
      } else {
        createConnectionAsync({
          host,
          port
        }, (err, socket) => {
          if (err)
            reject(err);
          if (socket)
            resolve(socket);
        }, false).catch((err) => reject(err));
      }
    });
  }
  async function createConnectionAsync(options, oncreate, useTLS) {
    const lookup = options.__testHookLookup || lookupAddresses;
    const hostname = clientRequestArgsToHostName(options);
    const addresses = await lookup(hostname);
    const sockets = new Set;
    let firstError;
    let errorCount = 0;
    const handleError = (socket, err) => {
      var _firstError;
      if (!sockets.delete(socket))
        return;
      ++errorCount;
      (_firstError = firstError) !== null && _firstError !== undefined || (firstError = err);
      if (errorCount === addresses.length)
        oncreate === null || oncreate === undefined || oncreate(firstError);
    };
    const connected = new _manualPromise.ManualPromise;
    for (const {
      address
    } of addresses) {
      const socket = useTLS ? tls.connect({
        ...options,
        port: options.port,
        host: address,
        servername: hostname
      }) : net.createConnection({
        ...options,
        port: options.port,
        host: address
      });
      socket.on("connect", () => {
        connected.resolve();
        oncreate === null || oncreate === undefined || oncreate(null, socket);
        sockets.delete(socket);
        for (const s of sockets)
          s.destroy();
        sockets.clear();
      });
      socket.on("timeout", () => {
        socket.destroy();
        handleError(socket, new Error("Connection timeout"));
      });
      socket.on("error", (e) => handleError(socket, e));
      sockets.add(socket);
      await Promise.race([connected, new Promise((f) => setTimeout(f, connectionAttemptDelayMs))]);
      if (connected.isDone())
        break;
    }
  }
  async function lookupAddresses(hostname) {
    const addresses = await dns.promises.lookup(hostname, {
      all: true,
      family: 0,
      verbatim: true
    });
    let firstFamily = addresses.filter(({
      family
    }) => family === 6);
    let secondFamily = addresses.filter(({
      family
    }) => family === 4);
    if (firstFamily.length && firstFamily[0] !== addresses[0]) {
      const tmp = firstFamily;
      firstFamily = secondFamily;
      secondFamily = tmp;
    }
    const result = [];
    for (let i = 0;i < Math.max(firstFamily.length, secondFamily.length); i++) {
      if (firstFamily[i])
        result.push(firstFamily[i]);
      if (secondFamily[i])
        result.push(secondFamily[i]);
    }
    return result;
  }
  var clientRequestArgsToHostName = function(options) {
    if (options.hostname)
      return options.hostname;
    if (options.host)
      return options.host;
    throw new Error("Either options.hostname or options.host must be provided");
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createSocket = createSocket;
  exports.httpsHappyEyeballsAgent = exports.httpHappyEyeballsAgent = undefined;
  var dns = _interopRequireWildcard(import.meta.require("dns"));
  var http = _interopRequireWildcard(import.meta.require("http"));
  var https = _interopRequireWildcard(import.meta.require("https"));
  var net = _interopRequireWildcard(import.meta.require("net"));
  var tls = _interopRequireWildcard(import.meta.require("tls"));
  var _manualPromise = require_manualPromise();
  var connectionAttemptDelayMs = 300;

  class HttpHappyEyeballsAgent extends http.Agent {
    createConnection(options, oncreate) {
      if (net.isIP(clientRequestArgsToHostName(options)))
        return net.createConnection(options);
      createConnectionAsync(options, oncreate, false).catch((err) => oncreate === null || oncreate === undefined ? undefined : oncreate(err));
    }
  }

  class HttpsHappyEyeballsAgent extends https.Agent {
    createConnection(options, oncreate) {
      if (net.isIP(clientRequestArgsToHostName(options)))
        return tls.connect(options);
      createConnectionAsync(options, oncreate, true).catch((err) => oncreate === null || oncreate === undefined ? undefined : oncreate(err));
    }
  }
  var httpsHappyEyeballsAgent = exports.httpsHappyEyeballsAgent = new HttpsHappyEyeballsAgent;
  var httpHappyEyeballsAgent = exports.httpHappyEyeballsAgent = new HttpHappyEyeballsAgent;
});

// node_modules/playwright-core/lib/utils/network.js
var require_network = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var httpRequest = function(params, onResponse, onError) {
    var _params$timeout;
    const parsedUrl = _url.default.parse(params.url);
    let options = {
      ...parsedUrl,
      agent: parsedUrl.protocol === "https:" ? _happyEyeballs.httpsHappyEyeballsAgent : _happyEyeballs.httpHappyEyeballsAgent,
      method: params.method || "GET",
      headers: params.headers
    };
    if (params.rejectUnauthorized !== undefined)
      options.rejectUnauthorized = params.rejectUnauthorized;
    const timeout = (_params$timeout = params.timeout) !== null && _params$timeout !== undefined ? _params$timeout : NET_DEFAULT_TIMEOUT;
    const proxyURL = (0, _utilsBundle.getProxyForUrl)(params.url);
    if (proxyURL) {
      const parsedProxyURL = _url.default.parse(proxyURL);
      if (params.url.startsWith("http:")) {
        options = {
          path: parsedUrl.href,
          host: parsedProxyURL.hostname,
          port: parsedProxyURL.port,
          headers: options.headers,
          method: options.method
        };
      } else {
        parsedProxyURL.secureProxy = parsedProxyURL.protocol === "https:";
        options.agent = new _utilsBundle.HttpsProxyAgent(parsedProxyURL);
        options.rejectUnauthorized = false;
      }
    }
    const requestCallback = (res) => {
      const statusCode = res.statusCode || 0;
      if (statusCode >= 300 && statusCode < 400 && res.headers.location)
        httpRequest({
          ...params,
          url: new URL(res.headers.location, params.url).toString()
        }, onResponse, onError);
      else
        onResponse(res);
    };
    const request = options.protocol === "https:" ? _https.default.request(options, requestCallback) : _http.default.request(options, requestCallback);
    request.on("error", onError);
    if (timeout !== undefined) {
      const rejectOnTimeout = () => {
        onError(new Error(`Request to ${params.url} timed out after ${timeout}ms`));
        request.abort();
      };
      if (timeout <= 0) {
        rejectOnTimeout();
        return;
      }
      request.setTimeout(timeout, rejectOnTimeout);
    }
    request.end(params.data);
  };
  var fetchData = function(params, onError) {
    return new Promise((resolve, reject) => {
      httpRequest(params, async (response) => {
        if (response.statusCode !== 200) {
          const error = onError ? await onError(params, response) : new Error(`fetch failed: server returned code ${response.statusCode}. URL: ${params.url}`);
          reject(error);
          return;
        }
        let body = "";
        response.on("data", (chunk) => body += chunk);
        response.on("error", (error) => reject(error));
        response.on("end", () => resolve(body));
      }, reject);
    });
  };
  var urlMatchesEqual = function(match1, match2) {
    if ((0, _rtti.isRegExp)(match1) && (0, _rtti.isRegExp)(match2))
      return match1.source === match2.source && match1.flags === match2.flags;
    return match1 === match2;
  };
  var urlMatches = function(baseURL, urlString, match) {
    if (match === undefined || match === "")
      return true;
    if ((0, _rtti.isString)(match) && !match.startsWith("*"))
      match = constructURLBasedOnBaseURL(baseURL, match);
    if ((0, _rtti.isString)(match))
      match = (0, _glob.globToRegex)(match);
    if ((0, _rtti.isRegExp)(match))
      return match.test(urlString);
    if (typeof match === "string" && match === urlString)
      return true;
    const url = parsedURL(urlString);
    if (!url)
      return false;
    if (typeof match === "string")
      return url.pathname === match;
    if (typeof match !== "function")
      throw new Error("url parameter should be string, RegExp or function");
    return match(url);
  };
  var parsedURL = function(url) {
    try {
      return new URL(url);
    } catch (e) {
      return null;
    }
  };
  var constructURLBasedOnBaseURL = function(baseURL, givenURL) {
    try {
      return new URL(givenURL, baseURL).toString();
    } catch (e) {
      return givenURL;
    }
  };
  var createHttpServer = function(...args) {
    const server = _http.default.createServer(...args);
    decorateServer(server);
    return server;
  };
  var createHttpsServer = function(...args) {
    const server = _https.default.createServer(...args);
    decorateServer(server);
    return server;
  };
  async function isURLAvailable(url, ignoreHTTPSErrors, onLog, onStdErr) {
    let statusCode = await httpStatusCode(url, ignoreHTTPSErrors, onLog, onStdErr);
    if (statusCode === 404 && url.pathname === "/") {
      const indexUrl = new URL(url);
      indexUrl.pathname = "/index.html";
      statusCode = await httpStatusCode(indexUrl, ignoreHTTPSErrors, onLog, onStdErr);
    }
    return statusCode >= 200 && statusCode < 404;
  }
  async function httpStatusCode(url, ignoreHTTPSErrors, onLog, onStdErr) {
    return new Promise((resolve) => {
      onLog === null || onLog === undefined || onLog(`HTTP GET: ${url}`);
      httpRequest({
        url: url.toString(),
        headers: {
          Accept: "*/*"
        },
        rejectUnauthorized: !ignoreHTTPSErrors
      }, (res) => {
        var _res$statusCode;
        res.resume();
        const statusCode = (_res$statusCode = res.statusCode) !== null && _res$statusCode !== undefined ? _res$statusCode : 0;
        onLog === null || onLog === undefined || onLog(`HTTP Status: ${statusCode}`);
        resolve(statusCode);
      }, (error) => {
        if (error.code === "DEPTH_ZERO_SELF_SIGNED_CERT")
          onStdErr === null || onStdErr === undefined || onStdErr(`[WebServer] Self-signed certificate detected. Try adding ignoreHTTPSErrors: true to config.webServer.`);
        onLog === null || onLog === undefined || onLog(`Error while checking if ${url} is available: ${error.message}`);
        resolve(0);
      });
    });
  }
  var decorateServer = function(server) {
    const sockets = new Set;
    server.on("connection", (socket) => {
      sockets.add(socket);
      socket.once("close", () => sockets.delete(socket));
    });
    const close = server.close;
    server.close = (callback) => {
      for (const socket of sockets)
        socket.destroy();
      sockets.clear();
      return close.call(server, callback);
    };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NET_DEFAULT_TIMEOUT = undefined;
  exports.constructURLBasedOnBaseURL = constructURLBasedOnBaseURL;
  exports.createHttpServer = createHttpServer;
  exports.createHttpsServer = createHttpsServer;
  exports.fetchData = fetchData;
  exports.httpRequest = httpRequest;
  exports.isURLAvailable = isURLAvailable;
  exports.urlMatches = urlMatches;
  exports.urlMatchesEqual = urlMatchesEqual;
  var _http = _interopRequireDefault(import.meta.require("http"));
  var _https = _interopRequireDefault(import.meta.require("https"));
  var _utilsBundle = require_utilsBundle();
  var _url = _interopRequireDefault(import.meta.require("url"));
  var _rtti = require_rtti();
  var _glob = require_glob();
  var _happyEyeballs = require_happy_eyeballs();
  var NET_DEFAULT_TIMEOUT = exports.NET_DEFAULT_TIMEOUT = 30000;
});

// node_modules/playwright-core/lib/server/registry/nativeDeps.js
var require_nativeDeps = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.deps = undefined;
  var deps = exports.deps = {
    "ubuntu20.04-x64": {
      tools: ["xvfb", "fonts-noto-color-emoji", "ttf-unifont", "libfontconfig", "libfreetype6", "xfonts-cyrillic", "xfonts-scalable", "fonts-liberation", "fonts-ipafont-gothic", "fonts-wqy-zenhei", "fonts-tlwg-loma-otf", "ttf-ubuntu-font-family"],
      chromium: ["fonts-liberation", "libasound2", "libatk-bridge2.0-0", "libatk1.0-0", "libatspi2.0-0", "libcairo2", "libcups2", "libdbus-1-3", "libdrm2", "libegl1", "libgbm1", "libglib2.0-0", "libgtk-3-0", "libnspr4", "libnss3", "libpango-1.0-0", "libx11-6", "libx11-xcb1", "libxcb1", "libxcomposite1", "libxdamage1", "libxext6", "libxfixes3", "libxrandr2", "libxshmfence1"],
      firefox: ["ffmpeg", "libatk1.0-0", "libcairo-gobject2", "libcairo2", "libdbus-1-3", "libdbus-glib-1-2", "libfontconfig1", "libfreetype6", "libgdk-pixbuf2.0-0", "libglib2.0-0", "libgtk-3-0", "libpango-1.0-0", "libpangocairo-1.0-0", "libpangoft2-1.0-0", "libx11-6", "libx11-xcb1", "libxcb-shm0", "libxcb1", "libxcomposite1", "libxcursor1", "libxdamage1", "libxext6", "libxfixes3", "libxi6", "libxrender1", "libxt6", "libxtst6"],
      webkit: ["libenchant-2-2", "libflite1", "libx264-155", "libatk-bridge2.0-0", "libatk1.0-0", "libcairo2", "libegl1", "libenchant1c2a", "libepoxy0", "libevdev2", "libfontconfig1", "libfreetype6", "libgdk-pixbuf2.0-0", "libgl1", "libgles2", "libglib2.0-0", "libgtk-3-0", "libgudev-1.0-0", "libharfbuzz-icu0", "libharfbuzz0b", "libhyphen0", "libicu66", "libjpeg-turbo8", "libnghttp2-14", "libnotify4", "libopengl0", "libopenjp2-7", "libopus0", "libpango-1.0-0", "libpng16-16", "libsecret-1-0", "libvpx6", "libwayland-client0", "libwayland-egl1", "libwayland-server0", "libwebp6", "libwebpdemux2", "libwoff1", "libx11-6", "libxcomposite1", "libxdamage1", "libxkbcommon0", "libxml2", "libxslt1.1", "libatomic1", "libevent-2.1-7"],
      lib2package: {
        "libflite.so.1": "libflite1",
        "libflite_usenglish.so.1": "libflite1",
        "libflite_cmu_grapheme_lang.so.1": "libflite1",
        "libflite_cmu_grapheme_lex.so.1": "libflite1",
        "libflite_cmu_indic_lang.so.1": "libflite1",
        "libflite_cmu_indic_lex.so.1": "libflite1",
        "libflite_cmulex.so.1": "libflite1",
        "libflite_cmu_time_awb.so.1": "libflite1",
        "libflite_cmu_us_awb.so.1": "libflite1",
        "libflite_cmu_us_kal16.so.1": "libflite1",
        "libflite_cmu_us_kal.so.1": "libflite1",
        "libflite_cmu_us_rms.so.1": "libflite1",
        "libflite_cmu_us_slt.so.1": "libflite1",
        "libx264.so": "libx264-155",
        "libasound.so.2": "libasound2",
        "libatk-1.0.so.0": "libatk1.0-0",
        "libatk-bridge-2.0.so.0": "libatk-bridge2.0-0",
        "libatspi.so.0": "libatspi2.0-0",
        "libcairo-gobject.so.2": "libcairo-gobject2",
        "libcairo.so.2": "libcairo2",
        "libcups.so.2": "libcups2",
        "libdbus-1.so.3": "libdbus-1-3",
        "libdbus-glib-1.so.2": "libdbus-glib-1-2",
        "libdrm.so.2": "libdrm2",
        "libEGL.so.1": "libegl1",
        "libenchant.so.1": "libenchant1c2a",
        "libevdev.so.2": "libevdev2",
        "libepoxy.so.0": "libepoxy0",
        "libfontconfig.so.1": "libfontconfig1",
        "libfreetype.so.6": "libfreetype6",
        "libgbm.so.1": "libgbm1",
        "libgdk_pixbuf-2.0.so.0": "libgdk-pixbuf2.0-0",
        "libgdk-3.so.0": "libgtk-3-0",
        "libgdk-x11-2.0.so.0": "libgtk2.0-0",
        "libgio-2.0.so.0": "libglib2.0-0",
        "libGL.so.1": "libgl1",
        "libGLESv2.so.2": "libgles2",
        "libglib-2.0.so.0": "libglib2.0-0",
        "libgmodule-2.0.so.0": "libglib2.0-0",
        "libgobject-2.0.so.0": "libglib2.0-0",
        "libgthread-2.0.so.0": "libglib2.0-0",
        "libgtk-3.so.0": "libgtk-3-0",
        "libgtk-x11-2.0.so.0": "libgtk2.0-0",
        "libgudev-1.0.so.0": "libgudev-1.0-0",
        "libharfbuzz-icu.so.0": "libharfbuzz-icu0",
        "libharfbuzz.so.0": "libharfbuzz0b",
        "libhyphen.so.0": "libhyphen0",
        "libicui18n.so.66": "libicu66",
        "libicuuc.so.66": "libicu66",
        "libjpeg.so.8": "libjpeg-turbo8",
        "libnotify.so.4": "libnotify4",
        "libnspr4.so": "libnspr4",
        "libnss3.so": "libnss3",
        "libnssutil3.so": "libnss3",
        "libOpenGL.so.0": "libopengl0",
        "libopenjp2.so.7": "libopenjp2-7",
        "libopus.so.0": "libopus0",
        "libpango-1.0.so.0": "libpango-1.0-0",
        "libpangocairo-1.0.so.0": "libpangocairo-1.0-0",
        "libpangoft2-1.0.so.0": "libpangoft2-1.0-0",
        "libpng16.so.16": "libpng16-16",
        "libsecret-1.so.0": "libsecret-1-0",
        "libsmime3.so": "libnss3",
        "libvpx.so.6": "libvpx6",
        "libwayland-client.so.0": "libwayland-client0",
        "libwayland-egl.so.1": "libwayland-egl1",
        "libwayland-server.so.0": "libwayland-server0",
        "libwebp.so.6": "libwebp6",
        "libwebpdemux.so.2": "libwebpdemux2",
        "libwoff2dec.so.1.0.2": "libwoff1",
        "libX11-xcb.so.1": "libx11-xcb1",
        "libX11.so.6": "libx11-6",
        "libxcb-dri3.so.0": "libxcb-dri3-0",
        "libxcb-shm.so.0": "libxcb-shm0",
        "libxcb.so.1": "libxcb1",
        "libXcomposite.so.1": "libxcomposite1",
        "libXcursor.so.1": "libxcursor1",
        "libXdamage.so.1": "libxdamage1",
        "libXext.so.6": "libxext6",
        "libXfixes.so.3": "libxfixes3",
        "libXi.so.6": "libxi6",
        "libxkbcommon.so.0": "libxkbcommon0",
        "libxml2.so.2": "libxml2",
        "libXrandr.so.2": "libxrandr2",
        "libXrender.so.1": "libxrender1",
        "libxslt.so.1": "libxslt1.1",
        "libXt.so.6": "libxt6",
        "libXtst.so.6": "libxtst6",
        "libxshmfence.so.1": "libxshmfence1",
        "libatomic.so.1": "libatomic1",
        "libenchant-2.so.2": "libenchant-2-2",
        "libevent-2.1.so.7": "libevent-2.1-7"
      }
    },
    "ubuntu22.04-x64": {
      tools: ["xvfb", "fonts-noto-color-emoji", "fonts-unifont", "libfontconfig1", "libfreetype6", "xfonts-cyrillic", "xfonts-scalable", "fonts-liberation", "fonts-ipafont-gothic", "fonts-wqy-zenhei", "fonts-tlwg-loma-otf", "fonts-freefont-ttf"],
      chromium: ["libasound2", "libatk-bridge2.0-0", "libatk1.0-0", "libatspi2.0-0", "libcairo2", "libcups2", "libdbus-1-3", "libdrm2", "libgbm1", "libglib2.0-0", "libnspr4", "libnss3", "libpango-1.0-0", "libwayland-client0", "libx11-6", "libxcb1", "libxcomposite1", "libxdamage1", "libxext6", "libxfixes3", "libxkbcommon0", "libxrandr2"],
      firefox: ["ffmpeg", "libasound2", "libatk1.0-0", "libcairo-gobject2", "libcairo2", "libdbus-1-3", "libdbus-glib-1-2", "libfontconfig1", "libfreetype6", "libgdk-pixbuf-2.0-0", "libglib2.0-0", "libgtk-3-0", "libpango-1.0-0", "libpangocairo-1.0-0", "libx11-6", "libx11-xcb1", "libxcb-shm0", "libxcb1", "libxcomposite1", "libxcursor1", "libxdamage1", "libxext6", "libxfixes3", "libxi6", "libxrandr2", "libxrender1", "libxtst6"],
      webkit: ["libsoup-3.0-0", "libenchant-2-2", "gstreamer1.0-libav", "gstreamer1.0-plugins-bad", "gstreamer1.0-plugins-base", "gstreamer1.0-plugins-good", "libicu70", "libatk-bridge2.0-0", "libatk1.0-0", "libcairo2", "libdbus-1-3", "libdrm2", "libegl1", "libepoxy0", "libevdev2", "libffi7", "libfontconfig1", "libfreetype6", "libgbm1", "libgdk-pixbuf-2.0-0", "libgles2", "libglib2.0-0", "libglx0", "libgstreamer-gl1.0-0", "libgstreamer-plugins-base1.0-0", "libgstreamer1.0-0", "libgtk-3-0", "libgudev-1.0-0", "libharfbuzz-icu0", "libharfbuzz0b", "libhyphen0", "libjpeg-turbo8", "liblcms2-2", "libmanette-0.2-0", "libnotify4", "libopengl0", "libopenjp2-7", "libopus0", "libpango-1.0-0", "libpng16-16", "libproxy1v5", "libsecret-1-0", "libwayland-client0", "libwayland-egl1", "libwayland-server0", "libwebpdemux2", "libwoff1", "libx11-6", "libxcomposite1", "libxdamage1", "libxkbcommon0", "libxml2", "libxslt1.1", "libx264-163", "libatomic1", "libevent-2.1-7"],
      lib2package: {
        "libsoup-3.0.so.0": "libsoup-3.0-0",
        "libasound.so.2": "libasound2",
        "libatk-1.0.so.0": "libatk1.0-0",
        "libatk-bridge-2.0.so.0": "libatk-bridge2.0-0",
        "libatspi.so.0": "libatspi2.0-0",
        "libcairo-gobject.so.2": "libcairo-gobject2",
        "libcairo.so.2": "libcairo2",
        "libcups.so.2": "libcups2",
        "libdbus-1.so.3": "libdbus-1-3",
        "libdbus-glib-1.so.2": "libdbus-glib-1-2",
        "libdrm.so.2": "libdrm2",
        "libEGL.so.1": "libegl1",
        "libepoxy.so.0": "libepoxy0",
        "libevdev.so.2": "libevdev2",
        "libffi.so.7": "libffi7",
        "libfontconfig.so.1": "libfontconfig1",
        "libfreetype.so.6": "libfreetype6",
        "libgbm.so.1": "libgbm1",
        "libgdk_pixbuf-2.0.so.0": "libgdk-pixbuf-2.0-0",
        "libgdk-3.so.0": "libgtk-3-0",
        "libgio-2.0.so.0": "libglib2.0-0",
        "libGLESv2.so.2": "libgles2",
        "libglib-2.0.so.0": "libglib2.0-0",
        "libGLX.so.0": "libglx0",
        "libgmodule-2.0.so.0": "libglib2.0-0",
        "libgobject-2.0.so.0": "libglib2.0-0",
        "libgstallocators-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstapp-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstaudio-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstbase-1.0.so.0": "libgstreamer1.0-0",
        "libgstfft-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstgl-1.0.so.0": "libgstreamer-gl1.0-0",
        "libgstpbutils-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstreamer-1.0.so.0": "libgstreamer1.0-0",
        "libgsttag-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstvideo-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgtk-3.so.0": "libgtk-3-0",
        "libgudev-1.0.so.0": "libgudev-1.0-0",
        "libharfbuzz-icu.so.0": "libharfbuzz-icu0",
        "libharfbuzz.so.0": "libharfbuzz0b",
        "libhyphen.so.0": "libhyphen0",
        "libjpeg.so.8": "libjpeg-turbo8",
        "liblcms2.so.2": "liblcms2-2",
        "libmanette-0.2.so.0": "libmanette-0.2-0",
        "libnotify.so.4": "libnotify4",
        "libnspr4.so": "libnspr4",
        "libnss3.so": "libnss3",
        "libnssutil3.so": "libnss3",
        "libOpenGL.so.0": "libopengl0",
        "libopenjp2.so.7": "libopenjp2-7",
        "libopus.so.0": "libopus0",
        "libpango-1.0.so.0": "libpango-1.0-0",
        "libpangocairo-1.0.so.0": "libpangocairo-1.0-0",
        "libpng16.so.16": "libpng16-16",
        "libproxy.so.1": "libproxy1v5",
        "libsecret-1.so.0": "libsecret-1-0",
        "libsmime3.so": "libnss3",
        "libwayland-client.so.0": "libwayland-client0",
        "libwayland-egl.so.1": "libwayland-egl1",
        "libwayland-server.so.0": "libwayland-server0",
        "libwebpdemux.so.2": "libwebpdemux2",
        "libwoff2dec.so.1.0.2": "libwoff1",
        "libX11-xcb.so.1": "libx11-xcb1",
        "libX11.so.6": "libx11-6",
        "libxcb-shm.so.0": "libxcb-shm0",
        "libxcb.so.1": "libxcb1",
        "libXcomposite.so.1": "libxcomposite1",
        "libXcursor.so.1": "libxcursor1",
        "libXdamage.so.1": "libxdamage1",
        "libXext.so.6": "libxext6",
        "libXfixes.so.3": "libxfixes3",
        "libXi.so.6": "libxi6",
        "libxkbcommon.so.0": "libxkbcommon0",
        "libxml2.so.2": "libxml2",
        "libXrandr.so.2": "libxrandr2",
        "libXrender.so.1": "libxrender1",
        "libxslt.so.1": "libxslt1.1",
        "libXtst.so.6": "libxtst6",
        "libicui18n.so.60": "libicu70",
        "libicuuc.so.66": "libicu70",
        "libicui18n.so.66": "libicu70",
        "libwebp.so.6": "libwebp6",
        "libenchant-2.so.2": "libenchant-2-2",
        "libx264.so": "libx264-163",
        "libvpx.so.7": "libvpx7",
        "libatomic.so.1": "libatomic1",
        "libevent-2.1.so.7": "libevent-2.1-7"
      }
    },
    "debian11-x64": {
      tools: ["xvfb", "fonts-noto-color-emoji", "fonts-unifont", "libfontconfig1", "libfreetype6", "xfonts-cyrillic", "xfonts-scalable", "fonts-liberation", "fonts-ipafont-gothic", "fonts-wqy-zenhei", "fonts-tlwg-loma-otf", "fonts-freefont-ttf"],
      chromium: ["libasound2", "libatk-bridge2.0-0", "libatk1.0-0", "libatspi2.0-0", "libcairo2", "libcups2", "libdbus-1-3", "libdrm2", "libgbm1", "libglib2.0-0", "libnspr4", "libnss3", "libpango-1.0-0", "libwayland-client0", "libx11-6", "libxcb1", "libxcomposite1", "libxdamage1", "libxext6", "libxfixes3", "libxkbcommon0", "libxrandr2"],
      firefox: ["libasound2", "libatk1.0-0", "libcairo-gobject2", "libcairo2", "libdbus-1-3", "libdbus-glib-1-2", "libfontconfig1", "libfreetype6", "libgdk-pixbuf-2.0-0", "libglib2.0-0", "libgtk-3-0", "libharfbuzz0b", "libpango-1.0-0", "libpangocairo-1.0-0", "libx11-6", "libx11-xcb1", "libxcb-shm0", "libxcb1", "libxcomposite1", "libxcursor1", "libxdamage1", "libxext6", "libxfixes3", "libxi6", "libxrandr2", "libxrender1", "libxtst6"],
      webkit: ["gstreamer1.0-libav", "gstreamer1.0-plugins-bad", "gstreamer1.0-plugins-base", "gstreamer1.0-plugins-good", "libatk-bridge2.0-0", "libatk1.0-0", "libcairo2", "libdbus-1-3", "libdrm2", "libegl1", "libenchant-2-2", "libepoxy0", "libevdev2", "libfontconfig1", "libfreetype6", "libgbm1", "libgdk-pixbuf-2.0-0", "libgles2", "libglib2.0-0", "libglx0", "libgstreamer-gl1.0-0", "libgstreamer-plugins-base1.0-0", "libgstreamer1.0-0", "libgtk-3-0", "libgudev-1.0-0", "libharfbuzz-icu0", "libharfbuzz0b", "libhyphen0", "libicu67", "libjpeg62-turbo", "liblcms2-2", "libmanette-0.2-0", "libnghttp2-14", "libnotify4", "libopengl0", "libopenjp2-7", "libopus0", "libpango-1.0-0", "libpng16-16", "libproxy1v5", "libsecret-1-0", "libwayland-client0", "libwayland-egl1", "libwayland-server0", "libwebp6", "libwebpdemux2", "libwoff1", "libx11-6", "libxcomposite1", "libxdamage1", "libxkbcommon0", "libxml2", "libxslt1.1", "libatomic1", "libevent-2.1-7"],
      lib2package: {
        "libasound.so.2": "libasound2",
        "libatk-1.0.so.0": "libatk1.0-0",
        "libatk-bridge-2.0.so.0": "libatk-bridge2.0-0",
        "libatspi.so.0": "libatspi2.0-0",
        "libcairo-gobject.so.2": "libcairo-gobject2",
        "libcairo.so.2": "libcairo2",
        "libcups.so.2": "libcups2",
        "libdbus-1.so.3": "libdbus-1-3",
        "libdbus-glib-1.so.2": "libdbus-glib-1-2",
        "libdrm.so.2": "libdrm2",
        "libEGL.so.1": "libegl1",
        "libenchant-2.so.2": "libenchant-2-2",
        "libepoxy.so.0": "libepoxy0",
        "libevdev.so.2": "libevdev2",
        "libfontconfig.so.1": "libfontconfig1",
        "libfreetype.so.6": "libfreetype6",
        "libgbm.so.1": "libgbm1",
        "libgdk_pixbuf-2.0.so.0": "libgdk-pixbuf-2.0-0",
        "libgdk-3.so.0": "libgtk-3-0",
        "libgio-2.0.so.0": "libglib2.0-0",
        "libGLESv2.so.2": "libgles2",
        "libglib-2.0.so.0": "libglib2.0-0",
        "libGLX.so.0": "libglx0",
        "libgmodule-2.0.so.0": "libglib2.0-0",
        "libgobject-2.0.so.0": "libglib2.0-0",
        "libgstallocators-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstapp-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstaudio-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstbase-1.0.so.0": "libgstreamer1.0-0",
        "libgstfft-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstgl-1.0.so.0": "libgstreamer-gl1.0-0",
        "libgstpbutils-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstreamer-1.0.so.0": "libgstreamer1.0-0",
        "libgsttag-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstvideo-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgtk-3.so.0": "libgtk-3-0",
        "libgudev-1.0.so.0": "libgudev-1.0-0",
        "libharfbuzz-icu.so.0": "libharfbuzz-icu0",
        "libharfbuzz.so.0": "libharfbuzz0b",
        "libhyphen.so.0": "libhyphen0",
        "libicui18n.so.67": "libicu67",
        "libicuuc.so.67": "libicu67",
        "libjpeg.so.62": "libjpeg62-turbo",
        "liblcms2.so.2": "liblcms2-2",
        "libmanette-0.2.so.0": "libmanette-0.2-0",
        "libnotify.so.4": "libnotify4",
        "libnspr4.so": "libnspr4",
        "libnss3.so": "libnss3",
        "libnssutil3.so": "libnss3",
        "libOpenGL.so.0": "libopengl0",
        "libopenjp2.so.7": "libopenjp2-7",
        "libopus.so.0": "libopus0",
        "libpango-1.0.so.0": "libpango-1.0-0",
        "libpangocairo-1.0.so.0": "libpangocairo-1.0-0",
        "libpng16.so.16": "libpng16-16",
        "libproxy.so.1": "libproxy1v5",
        "libsecret-1.so.0": "libsecret-1-0",
        "libsmime3.so": "libnss3",
        "libwayland-client.so.0": "libwayland-client0",
        "libwayland-egl.so.1": "libwayland-egl1",
        "libwayland-server.so.0": "libwayland-server0",
        "libwebp.so.6": "libwebp6",
        "libwebpdemux.so.2": "libwebpdemux2",
        "libwoff2dec.so.1.0.2": "libwoff1",
        "libX11-xcb.so.1": "libx11-xcb1",
        "libX11.so.6": "libx11-6",
        "libxcb-shm.so.0": "libxcb-shm0",
        "libxcb.so.1": "libxcb1",
        "libXcomposite.so.1": "libxcomposite1",
        "libXcursor.so.1": "libxcursor1",
        "libXdamage.so.1": "libxdamage1",
        "libXext.so.6": "libxext6",
        "libXfixes.so.3": "libxfixes3",
        "libXi.so.6": "libxi6",
        "libxkbcommon.so.0": "libxkbcommon0",
        "libxml2.so.2": "libxml2",
        "libXrandr.so.2": "libxrandr2",
        "libXrender.so.1": "libxrender1",
        "libxslt.so.1": "libxslt1.1",
        "libXtst.so.6": "libxtst6",
        "libatomic.so.1": "libatomic1",
        "libevent-2.1.so.7": "libevent-2.1-7"
      }
    },
    "debian12-x64": {
      tools: ["xvfb", "fonts-noto-color-emoji", "fonts-unifont", "libfontconfig1", "libfreetype6", "xfonts-scalable", "fonts-liberation", "fonts-ipafont-gothic", "fonts-wqy-zenhei", "fonts-tlwg-loma-otf", "fonts-freefont-ttf"],
      chromium: ["libasound2", "libatk-bridge2.0-0", "libatk1.0-0", "libatspi2.0-0", "libcairo2", "libcups2", "libdbus-1-3", "libdrm2", "libgbm1", "libglib2.0-0", "libnspr4", "libnss3", "libpango-1.0-0", "libx11-6", "libxcb1", "libxcomposite1", "libxdamage1", "libxext6", "libxfixes3", "libxkbcommon0", "libxrandr2"],
      firefox: ["libasound2", "libatk1.0-0", "libcairo-gobject2", "libcairo2", "libdbus-1-3", "libdbus-glib-1-2", "libfontconfig1", "libfreetype6", "libgdk-pixbuf-2.0-0", "libglib2.0-0", "libgtk-3-0", "libharfbuzz0b", "libpango-1.0-0", "libpangocairo-1.0-0", "libx11-6", "libx11-xcb1", "libxcb-shm0", "libxcb1", "libxcomposite1", "libxcursor1", "libxdamage1", "libxext6", "libxfixes3", "libxi6", "libxrandr2", "libxrender1", "libxtst6"],
      webkit: ["libsoup-3.0-0", "gstreamer1.0-libav", "gstreamer1.0-plugins-bad", "gstreamer1.0-plugins-base", "gstreamer1.0-plugins-good", "libatk-bridge2.0-0", "libatk1.0-0", "libcairo2", "libdbus-1-3", "libdrm2", "libegl1", "libenchant-2-2", "libepoxy0", "libevdev2", "libfontconfig1", "libfreetype6", "libgbm1", "libgdk-pixbuf-2.0-0", "libgles2", "libglib2.0-0", "libglx0", "libgstreamer-gl1.0-0", "libgstreamer-plugins-base1.0-0", "libgstreamer1.0-0", "libgtk-3-0", "libgudev-1.0-0", "libharfbuzz-icu0", "libharfbuzz0b", "libhyphen0", "libicu72", "libjpeg62-turbo", "liblcms2-2", "libmanette-0.2-0", "libnotify4", "libopengl0", "libopenjp2-7", "libopus0", "libpango-1.0-0", "libpng16-16", "libproxy1v5", "libsecret-1-0", "libwayland-client0", "libwayland-egl1", "libwayland-server0", "libwebp7", "libwebpdemux2", "libwoff1", "libx11-6", "libxcomposite1", "libxdamage1", "libxkbcommon0", "libxml2", "libxslt1.1", "libatomic1", "libevent-2.1-7"],
      lib2package: {
        "libsoup-3.0.so.0": "libsoup-3.0-0",
        "libasound.so.2": "libasound2",
        "libatk-1.0.so.0": "libatk1.0-0",
        "libatk-bridge-2.0.so.0": "libatk-bridge2.0-0",
        "libatspi.so.0": "libatspi2.0-0",
        "libcairo.so.2": "libcairo2",
        "libcups.so.2": "libcups2",
        "libdbus-1.so.3": "libdbus-1-3",
        "libdrm.so.2": "libdrm2",
        "libgbm.so.1": "libgbm1",
        "libgio-2.0.so.0": "libglib2.0-0",
        "libglib-2.0.so.0": "libglib2.0-0",
        "libgobject-2.0.so.0": "libglib2.0-0",
        "libnspr4.so": "libnspr4",
        "libnss3.so": "libnss3",
        "libnssutil3.so": "libnss3",
        "libpango-1.0.so.0": "libpango-1.0-0",
        "libsmime3.so": "libnss3",
        "libX11.so.6": "libx11-6",
        "libxcb.so.1": "libxcb1",
        "libXcomposite.so.1": "libxcomposite1",
        "libXdamage.so.1": "libxdamage1",
        "libXext.so.6": "libxext6",
        "libXfixes.so.3": "libxfixes3",
        "libxkbcommon.so.0": "libxkbcommon0",
        "libXrandr.so.2": "libxrandr2"
      }
    }
  };
  deps["ubuntu20.04-arm64"] = {
    tools: [...deps["ubuntu20.04-x64"].tools],
    chromium: [...deps["ubuntu20.04-x64"].chromium],
    firefox: [...deps["ubuntu20.04-x64"].firefox],
    webkit: [...deps["ubuntu20.04-x64"].webkit],
    lib2package: {
      ...deps["ubuntu20.04-x64"].lib2package
    }
  };
  deps["ubuntu22.04-arm64"] = {
    tools: [...deps["ubuntu22.04-x64"].tools],
    chromium: [...deps["ubuntu22.04-x64"].chromium],
    firefox: [...deps["ubuntu22.04-x64"].firefox],
    webkit: [...deps["ubuntu22.04-x64"].webkit],
    lib2package: {
      ...deps["ubuntu22.04-x64"].lib2package
    }
  };
  deps["debian11-arm64"] = {
    tools: [...deps["debian11-x64"].tools],
    chromium: [...deps["debian11-x64"].chromium],
    firefox: [...deps["debian11-x64"].firefox],
    webkit: [...deps["debian11-x64"].webkit],
    lib2package: {
      ...deps["debian11-x64"].lib2package
    }
  };
  deps["debian12-arm64"] = {
    tools: [...deps["debian12-x64"].tools],
    chromium: [...deps["debian12-x64"].chromium],
    firefox: [...deps["debian12-x64"].firefox],
    webkit: [...deps["debian12-x64"].webkit],
    lib2package: {
      ...deps["debian12-x64"].lib2package
    }
  };
});

// node_modules/playwright-core/lib/server/registry/dependencies.js
var require_dependencies = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  async function writeDockerVersion(dockerImageNameTemplate) {
    await _fs.default.promises.mkdir(_path.default.dirname(dockerVersionFilePath), {
      recursive: true
    });
    await _fs.default.promises.writeFile(dockerVersionFilePath, JSON.stringify(dockerVersion(dockerImageNameTemplate), null, 2), "utf8");
    await _fs.default.promises.chmod(dockerVersionFilePath, 511);
  }
  var dockerVersion = function(dockerImageNameTemplate) {
    return {
      driverVersion: languageBindingVersion,
      dockerImageName: dockerImageNameTemplate.replace("%version%", languageBindingVersion)
    };
  };
  var readDockerVersionSync = function() {
    try {
      const data = JSON.parse(_fs.default.readFileSync(dockerVersionFilePath, "utf8"));
      return {
        ...data,
        dockerImageNameTemplate: data.dockerImageName.replace(data.driverVersion, "%version%")
      };
    } catch (e) {
      return null;
    }
  };
  var isSupportedWindowsVersion = function() {
    if (os.platform() !== "win32" || os.arch() !== "x64")
      return false;
    const [major, minor] = os.release().split(".").map((token) => parseInt(token, 10));
    return major > 6 || major === 6 && minor > 1;
  };
  async function installDependenciesWindows(targets, dryRun) {
    if (targets.has("chromium")) {
      const command = "powershell.exe";
      const args = ["-ExecutionPolicy", "Bypass", "-File", _path.default.join(BIN_DIRECTORY, "install_media_pack.ps1")];
      if (dryRun) {
        console.log(`${command} ${quoteProcessArgs(args).join(" ")}`);
        return;
      }
      const {
        code
      } = await (0, _spawnAsync.spawnAsync)(command, args, {
        cwd: BIN_DIRECTORY,
        stdio: "inherit"
      });
      if (code !== 0)
        throw new Error("Failed to install windows dependencies!");
    }
  }
  async function installDependenciesLinux(targets, dryRun) {
    const libraries = [];
    const platform = _hostPlatform.hostPlatform;
    if (!_hostPlatform.isOfficiallySupportedPlatform)
      console.warn(`BEWARE: your OS is not officially supported by Playwright; installing dependencies for ${platform} as a fallback.`);
    for (const target of targets) {
      const info = _nativeDeps.deps[platform];
      if (!info) {
        console.warn(`Cannot install dependencies for ${platform}!`);
        return;
      }
      libraries.push(...info[target]);
    }
    const uniqueLibraries = Array.from(new Set(libraries));
    if (!dryRun)
      console.log(`Installing dependencies...`);
    const commands = [];
    commands.push("apt-get update");
    commands.push(["apt-get", "install", "-y", "--no-install-recommends", ...uniqueLibraries].join(" "));
    const {
      command,
      args,
      elevatedPermissions
    } = await transformCommandsForRoot(commands);
    if (dryRun) {
      console.log(`${command} ${quoteProcessArgs(args).join(" ")}`);
      return;
    }
    if (elevatedPermissions)
      console.log("Switching to root user to install dependencies...");
    const child = _child_process.default.spawn(command, args, {
      stdio: "inherit"
    });
    await new Promise((resolve, reject) => {
      child.on("exit", (code) => code === 0 ? resolve() : reject(new Error(`Installation process exited with code: ${code}`)));
      child.on("error", reject);
    });
  }
  async function validateDependenciesWindows(windowsExeAndDllDirectories) {
    const directoryPaths = windowsExeAndDllDirectories;
    const lddPaths = [];
    for (const directoryPath of directoryPaths)
      lddPaths.push(...await executablesOrSharedLibraries(directoryPath));
    const allMissingDeps = await Promise.all(lddPaths.map((lddPath) => missingFileDependenciesWindows(lddPath)));
    const missingDeps = new Set;
    for (const deps of allMissingDeps) {
      for (const dep of deps)
        missingDeps.add(dep);
    }
    if (!missingDeps.size)
      return;
    let isCrtMissing = false;
    let isMediaFoundationMissing = false;
    for (const dep of missingDeps) {
      if (dep.startsWith("api-ms-win-crt") || dep === "vcruntime140.dll" || dep === "vcruntime140_1.dll" || dep === "msvcp140.dll")
        isCrtMissing = true;
      else if (dep === "mf.dll" || dep === "mfplat.dll" || dep === "msmpeg2vdec.dll" || dep === "evr.dll" || dep === "avrt.dll")
        isMediaFoundationMissing = true;
    }
    const details = [];
    if (isCrtMissing) {
      details.push(`Some of the Universal C Runtime files cannot be found on the system. You can fix`, `that by installing Microsoft Visual C++ Redistributable for Visual Studio from:`, `https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads`, ``);
    }
    if (isMediaFoundationMissing) {
      details.push(`Some of the Media Foundation files cannot be found on the system. If you are`, `on Windows Server try fixing this by running the following command in PowerShell`, `as Administrator:`, ``, `    Install-WindowsFeature Server-Media-Foundation`, ``, `For Windows N editions visit:`, `https://support.microsoft.com/en-us/help/3145500/media-feature-pack-list-for-windows-n-editions`, ``);
    }
    details.push(`Full list of missing libraries:`, `    ${[...missingDeps].join("\n    ")}`, ``);
    const message = `Host system is missing dependencies!\n\n${details.join("\n")}`;
    if (isSupportedWindowsVersion()) {
      throw new Error(message);
    } else {
      console.warn(`WARNING: running on unsupported windows version!`);
      console.warn(message);
    }
  }
  async function validateDependenciesLinux(sdkLanguage, linuxLddDirectories, dlOpenLibraries) {
    var _deps$hostPlatform, _process$getuid, _process;
    const directoryPaths = linuxLddDirectories;
    const lddPaths = [];
    for (const directoryPath of directoryPaths)
      lddPaths.push(...await executablesOrSharedLibraries(directoryPath));
    const missingDepsPerFile = await Promise.all(lddPaths.map((lddPath) => missingFileDependencies(lddPath, directoryPaths)));
    const missingDeps = new Set;
    for (const deps of missingDepsPerFile) {
      for (const dep of deps)
        missingDeps.add(dep);
    }
    for (const dep of await missingDLOPENLibraries(dlOpenLibraries))
      missingDeps.add(dep);
    if (!missingDeps.size)
      return;
    const allMissingDeps = new Set(missingDeps);
    const missingPackages = new Set;
    const libraryToPackageNameMapping = _nativeDeps.deps[_hostPlatform.hostPlatform] ? {
      ...((_deps$hostPlatform = _nativeDeps.deps[_hostPlatform.hostPlatform]) === null || _deps$hostPlatform === undefined ? undefined : _deps$hostPlatform.lib2package) || {},
      ...MANUAL_LIBRARY_TO_PACKAGE_NAME_UBUNTU
    } : {};
    for (const missingDep of missingDeps) {
      const packageName = libraryToPackageNameMapping[missingDep];
      if (packageName) {
        missingPackages.add(packageName);
        missingDeps.delete(missingDep);
      }
    }
    const maybeSudo = (_process$getuid = (_process = process).getuid) !== null && _process$getuid !== undefined && _process$getuid.call(_process) && os.platform() !== "win32" ? "sudo " : "";
    const dockerInfo = readDockerVersionSync();
    const errorLines = [`Host system is missing dependencies to run browsers.`];
    if (dockerInfo && !dockerInfo.driverVersion.startsWith((0, _userAgent.getPlaywrightVersion)(true) + ".")) {
      const pwVersion = (0, _userAgent.getPlaywrightVersion)();
      const requiredDockerImage = dockerInfo.dockerImageName.replace(dockerInfo.driverVersion, pwVersion);
      errorLines.push(...[`This is most likely due to Docker image version not matching Playwright version:`, `- Playwright  : ${pwVersion}`, `- Docker image: ${dockerInfo.driverVersion}`, ``, `Either:`, `- (recommended) use Docker image "${requiredDockerImage}"`, `- (alternative 1) run the following command inside Docker to install missing dependencies:`, ``, `    ${maybeSudo}${(0, _.buildPlaywrightCLICommand)(sdkLanguage, "install-deps")}`, ``, `- (alternative 2) use apt inside Docker:`, ``, `    ${maybeSudo}apt-get install ${[...missingPackages].join("\\\n        ")}`, ``, `<3 Playwright Team`]);
    } else if (missingPackages.size && !missingDeps.size) {
      errorLines.push(...[`Please install them with the following command:`, ``, `    ${maybeSudo}${(0, _.buildPlaywrightCLICommand)(sdkLanguage, "install-deps")}`, ``, `Alternatively, use apt:`, `    ${maybeSudo}apt-get install ${[...missingPackages].join("\\\n        ")}`, ``, `<3 Playwright Team`]);
    } else {
      errorLines.push(...[`Missing libraries:`, ...[...allMissingDeps].map((dep) => "    " + dep)]);
    }
    throw new Error("\n" + utils.wrapInASCIIBox(errorLines.join("\n"), 1));
  }
  var isSharedLib = function(basename) {
    switch (os.platform()) {
      case "linux":
        return basename.endsWith(".so") || basename.includes(".so.");
      case "win32":
        return basename.endsWith(".dll");
      default:
        return false;
    }
  };
  async function executablesOrSharedLibraries(directoryPath) {
    if (!_fs.default.existsSync(directoryPath))
      return [];
    const allPaths = (await _fs.default.promises.readdir(directoryPath)).map((file) => _path.default.resolve(directoryPath, file));
    const allStats = await Promise.all(allPaths.map((aPath) => _fs.default.promises.stat(aPath)));
    const filePaths = allPaths.filter((aPath, index) => allStats[index].isFile());
    const executablersOrLibraries = (await Promise.all(filePaths.map(async (filePath) => {
      const basename = _path.default.basename(filePath).toLowerCase();
      if (isSharedLib(basename))
        return filePath;
      if (await checkExecutable(filePath))
        return filePath;
      return false;
    }))).filter(Boolean);
    return executablersOrLibraries;
  }
  async function missingFileDependenciesWindows(filePath) {
    const executable = _path.default.join(__dirname, "..", "..", "..", "bin", "PrintDeps.exe");
    const dirname = _path.default.dirname(filePath);
    const {
      stdout,
      code
    } = await (0, _spawnAsync.spawnAsync)(executable, [filePath], {
      cwd: dirname,
      env: {
        ...process.env,
        LD_LIBRARY_PATH: process.env.LD_LIBRARY_PATH ? `${process.env.LD_LIBRARY_PATH}:${dirname}` : dirname
      }
    });
    if (code !== 0)
      return [];
    const missingDeps = stdout.split("\n").map((line) => line.trim()).filter((line) => line.endsWith("not found") && line.includes("=>")).map((line) => line.split("=>")[0].trim().toLowerCase());
    return missingDeps;
  }
  async function missingFileDependencies(filePath, extraLDPaths) {
    const dirname = _path.default.dirname(filePath);
    let LD_LIBRARY_PATH = extraLDPaths.join(":");
    if (process.env.LD_LIBRARY_PATH)
      LD_LIBRARY_PATH = `${process.env.LD_LIBRARY_PATH}:${LD_LIBRARY_PATH}`;
    const {
      stdout,
      code
    } = await (0, _spawnAsync.spawnAsync)("ldd", [filePath], {
      cwd: dirname,
      env: {
        ...process.env,
        LD_LIBRARY_PATH
      }
    });
    if (code !== 0)
      return [];
    const missingDeps = stdout.split("\n").map((line) => line.trim()).filter((line) => line.endsWith("not found") && line.includes("=>")).map((line) => line.split("=>")[0].trim());
    return missingDeps;
  }
  async function missingDLOPENLibraries(libraries) {
    if (!libraries.length)
      return [];
    const {
      stdout,
      code,
      error
    } = await (0, _spawnAsync.spawnAsync)("/sbin/ldconfig", ["-p"], {});
    if (code !== 0 || error)
      return [];
    const isLibraryAvailable = (library) => stdout.toLowerCase().includes(library.toLowerCase());
    return libraries.filter((library) => !isLibraryAvailable(library));
  }
  var quoteProcessArgs = function(args) {
    return args.map((arg) => {
      if (arg.includes(" "))
        return `"${arg}"`;
      return arg;
    });
  };
  async function transformCommandsForRoot(commands) {
    var _process$getuid2, _process2;
    const isRoot = ((_process$getuid2 = (_process2 = process).getuid) === null || _process$getuid2 === undefined ? undefined : _process$getuid2.call(_process2)) === 0;
    if (isRoot)
      return {
        command: "sh",
        args: ["-c", `${commands.join("&& ")}`],
        elevatedPermissions: false
      };
    const sudoExists = await (0, _spawnAsync.spawnAsync)("which", ["sudo"]);
    if (sudoExists.code === 0)
      return {
        command: "sudo",
        args: ["--", "sh", "-c", `${commands.join("&& ")}`],
        elevatedPermissions: true
      };
    return {
      command: "su",
      args: ["root", "-c", `${commands.join("&& ")}`],
      elevatedPermissions: true
    };
  }
  var __dirname = "/Users/hottin/project/jwave_playlist/node_modules/playwright-core/lib/server/registry";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.dockerVersion = dockerVersion;
  exports.installDependenciesLinux = installDependenciesLinux;
  exports.installDependenciesWindows = installDependenciesWindows;
  exports.readDockerVersionSync = readDockerVersionSync;
  exports.transformCommandsForRoot = transformCommandsForRoot;
  exports.validateDependenciesLinux = validateDependenciesLinux;
  exports.validateDependenciesWindows = validateDependenciesWindows;
  exports.writeDockerVersion = writeDockerVersion;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var os = _interopRequireWildcard(import.meta.require("os"));
  var _child_process = _interopRequireDefault(import.meta.require("child_process"));
  var utils = _interopRequireWildcard(require_utils3());
  var _spawnAsync = require_spawnAsync();
  var _hostPlatform = require_hostPlatform();
  var _ = require_registry();
  var _nativeDeps = require_nativeDeps();
  var _userAgent = require_userAgent();
  var BIN_DIRECTORY = _path.default.join(__dirname, "..", "..", "..", "bin");
  var languageBindingVersion = process.env.PW_CLI_DISPLAY_VERSION || require_package().version;
  var dockerVersionFilePath = "/ms-playwright/.docker-info";
  var checkExecutable = (filePath) => {
    if (process.platform === "win32")
      return filePath.endsWith(".exe");
    return _fs.default.promises.access(filePath, _fs.default.constants.X_OK).then(() => true).catch(() => false);
  };
  var MANUAL_LIBRARY_TO_PACKAGE_NAME_UBUNTU = {
    "libx264.so": "gstreamer1.0-libav"
  };
});

// node_modules/playwright-core/lib/server/registry/browserFetcher.js
var require_browserFetcher = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  async function downloadBrowserWithProgressBar(title, browserDirectory, executablePath, downloadURLs, downloadFileName, downloadConnectionTimeout) {
    if (await (0, _fileUtils.existsAsync)((0, _.browserDirectoryToMarkerFilePath)(browserDirectory))) {
      _debugLogger.debugLogger.log("install", `${title} is already downloaded.`);
      return false;
    }
    const zipPath = _path.default.join(_os.default.tmpdir(), downloadFileName);
    try {
      const retryCount = 3;
      for (let attempt = 1;attempt <= retryCount; ++attempt) {
        _debugLogger.debugLogger.log("install", `downloading ${title} - attempt #${attempt}`);
        const url = downloadURLs[(attempt - 1) % downloadURLs.length];
        logPolitely(`Downloading ${title}` + _utilsBundle.colors.dim(` from ${url}`));
        const {
          error
        } = await downloadBrowserWithProgressBarOutOfProcess(title, browserDirectory, url, zipPath, executablePath, downloadConnectionTimeout);
        if (!error) {
          _debugLogger.debugLogger.log("install", `SUCCESS installing ${title}`);
          break;
        }
        if (await (0, _fileUtils.existsAsync)(zipPath))
          await _fs.default.promises.unlink(zipPath);
        if (await (0, _fileUtils.existsAsync)(browserDirectory))
          await _fs.default.promises.rmdir(browserDirectory, {
            recursive: true
          });
        const errorMessage = (error === null || error === undefined ? undefined : error.message) || "";
        _debugLogger.debugLogger.log("install", `attempt #${attempt} - ERROR: ${errorMessage}`);
        if (attempt >= retryCount)
          throw error;
      }
    } catch (e) {
      _debugLogger.debugLogger.log("install", `FAILED installation ${title} with error: ${e}`);
      process.exitCode = 1;
      throw e;
    } finally {
      if (await (0, _fileUtils.existsAsync)(zipPath))
        await _fs.default.promises.unlink(zipPath);
    }
    logPolitely(`${title} downloaded to ${browserDirectory}`);
    return true;
  }
  var downloadBrowserWithProgressBarOutOfProcess = function(title, browserDirectory, url, zipPath, executablePath, connectionTimeout) {
    const cp = _child_process.default.fork(_path.default.join(__dirname, "oopDownloadBrowserMain.js"));
    const promise = new _manualPromise.ManualPromise;
    const progress2 = getDownloadProgress();
    cp.on("message", (message) => {
      if ((message === null || message === undefined ? undefined : message.method) === "log")
        _debugLogger.debugLogger.log("install", message.params.message);
      if ((message === null || message === undefined ? undefined : message.method) === "progress")
        progress2(message.params.done, message.params.total);
    });
    cp.on("exit", (code) => {
      if (code !== 0) {
        promise.resolve({
          error: new Error(`Download failure, code=${code}`)
        });
        return;
      }
      if (!_fs.default.existsSync((0, _.browserDirectoryToMarkerFilePath)(browserDirectory)))
        promise.resolve({
          error: new Error(`Download failure, ${(0, _.browserDirectoryToMarkerFilePath)(browserDirectory)} does not exist`)
        });
      else
        promise.resolve({
          error: null
        });
    });
    cp.on("error", (error) => {
      promise.resolve({
        error
      });
    });
    _debugLogger.debugLogger.log("install", `running download:`);
    _debugLogger.debugLogger.log("install", `-- from url: ${url}`);
    _debugLogger.debugLogger.log("install", `-- to location: ${zipPath}`);
    const downloadParams = {
      title,
      browserDirectory,
      url,
      zipPath,
      executablePath,
      connectionTimeout,
      userAgent: (0, _userAgent.getUserAgent)()
    };
    cp.send({
      method: "download",
      params: downloadParams
    });
    return promise;
  };
  var logPolitely = function(toBeLogged) {
    const logLevel = process.env.npm_config_loglevel;
    const logLevelDisplay = ["silent", "error", "warn"].indexOf(logLevel || "") > -1;
    if (!logLevelDisplay)
      console.log(toBeLogged);
  };
  var getDownloadProgress = function() {
    if (process.stdout.isTTY)
      return getAnimatedDownloadProgress();
    return getBasicDownloadProgress();
  };
  var getAnimatedDownloadProgress = function() {
    let progressBar;
    let lastDownloadedBytes = 0;
    return (downloadedBytes, totalBytes) => {
      if (!progressBar) {
        progressBar = new _utilsBundle.progress(`${toMegabytes(totalBytes)} [:bar] :percent :etas`, {
          complete: "=",
          incomplete: " ",
          width: 20,
          total: totalBytes
        });
      }
      const delta = downloadedBytes - lastDownloadedBytes;
      lastDownloadedBytes = downloadedBytes;
      progressBar.tick(delta);
    };
  };
  var getBasicDownloadProgress = function() {
    const totalRows = 10;
    const stepWidth = 8;
    let lastRow = -1;
    return (downloadedBytes, totalBytes) => {
      const percentage = downloadedBytes / totalBytes;
      const row = Math.floor(totalRows * percentage);
      if (row > lastRow) {
        lastRow = row;
        const percentageString = String(percentage * 100 | 0).padStart(3);
        console.log(`|${"\u25A0".repeat(row * stepWidth)}${" ".repeat((totalRows - row) * stepWidth)}| ${percentageString}% of ${toMegabytes(totalBytes)}`);
      }
    };
  };
  var toMegabytes = function(bytes) {
    const mb = bytes / 1024 / 1024;
    return `${Math.round(mb * 10) / 10} MiB`;
  };
  var __dirname = "/Users/hottin/project/jwave_playlist/node_modules/playwright-core/lib/server/registry";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.downloadBrowserWithProgressBar = downloadBrowserWithProgressBar;
  exports.logPolitely = logPolitely;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _os = _interopRequireDefault(import.meta.require("os"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _child_process = _interopRequireDefault(import.meta.require("child_process"));
  var _fileUtils = require_fileUtils();
  var _debugLogger = require_debugLogger();
  var _manualPromise = require_manualPromise();
  var _utilsBundle = require_utilsBundle();
  var _ = require_registry();
  var _userAgent = require_userAgent();
});

// node_modules/playwright-core/browsers.json
var require_browsers = __commonJS((exports, module) => {
  module.exports = {
    comment: "Do not edit this file, use utils/roll_browser.js",
    browsers: [
      {
        name: "chromium",
        revision: "1117",
        installByDefault: true,
        browserVersion: "125.0.6422.26"
      },
      {
        name: "chromium-tip-of-tree",
        revision: "1215",
        installByDefault: false,
        browserVersion: "126.0.6439.0"
      },
      {
        name: "firefox",
        revision: "1449",
        installByDefault: true,
        browserVersion: "125.0.1"
      },
      {
        name: "firefox-asan",
        revision: "1449",
        installByDefault: false,
        browserVersion: "125.0.1"
      },
      {
        name: "firefox-beta",
        revision: "1449",
        installByDefault: false,
        browserVersion: "126.0b1"
      },
      {
        name: "webkit",
        revision: "2003",
        installByDefault: true,
        revisionOverrides: {
          "mac10.14": "1446",
          "mac10.15": "1616",
          mac11: "1816",
          "mac11-arm64": "1816"
        },
        browserVersion: "17.4"
      },
      {
        name: "ffmpeg",
        revision: "1009",
        installByDefault: true
      },
      {
        name: "android",
        revision: "1000",
        installByDefault: false
      }
    ]
  };
});

// node_modules/playwright-core/lib/server/registry/index.js
var require_registry = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var isBrowserDirectory = function(browserDirectory) {
    const baseName = _path.default.basename(browserDirectory);
    for (const browserName of allDownloadable) {
      if (baseName.startsWith(browserName + "-"))
        return true;
    }
    return false;
  };
  var readDescriptors = function(browsersJSON) {
    return browsersJSON["browsers"].map((obj) => {
      const name = obj.name;
      const revisionOverride = (obj.revisionOverrides || {})[_hostPlatform.hostPlatform];
      const revision = revisionOverride || obj.revision;
      const browserDirectoryPrefix = revisionOverride ? `${name}_${_hostPlatform.hostPlatform}_special` : `${name}`;
      const descriptor = {
        name,
        revision,
        browserVersion: revisionOverride ? undefined : obj.browserVersion,
        installByDefault: !!obj.installByDefault,
        dir: _path.default.join(registryDirectory, browserDirectoryPrefix.replace(/-/g, "_") + "-" + revision)
      };
      return descriptor;
    });
  };
  var browserDirectoryToMarkerFilePath = function(browserDirectory) {
    return _path.default.join(browserDirectory, "INSTALLATION_COMPLETE");
  };
  var buildPlaywrightCLICommand = function(sdkLanguage, parameters) {
    switch (sdkLanguage) {
      case "python":
        return `playwright ${parameters}`;
      case "java":
        return `mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="${parameters}"`;
      case "csharp":
        return `pwsh bin/Debug/netX/playwright.ps1 ${parameters}`;
      default: {
        const packageManagerCommand = (0, _utils.getPackageManagerExecCommand)();
        return `${packageManagerCommand} playwright ${parameters}`;
      }
    }
  };
  async function installDefaultBrowsersForNpmInstall() {
    const defaultBrowserNames = registry.defaultExecutables().map((e) => e.name);
    return installBrowsersForNpmInstall(defaultBrowserNames);
  }
  async function installBrowsersForNpmInstall(browsers) {
    if ((0, _utils.getAsBooleanFromENV)("PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD")) {
      (0, _browserFetcher.logPolitely)("Skipping browsers download because `PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD` env variable is set");
      return false;
    }
    const executables = [];
    for (const browserName of browsers) {
      const executable = registry.findExecutable(browserName);
      if (!executable || executable.installType === "none")
        throw new Error(`Cannot install ${browserName}`);
      executables.push(executable);
    }
    await registry.install(executables, false);
  }
  var findChromiumChannel = function(sdkLanguage) {
    let channel = null;
    for (const name of ["chromium", "chrome", "msedge"]) {
      try {
        registry.findExecutable(name).executablePathOrDie(sdkLanguage);
        channel = name === "chromium" ? undefined : name;
        break;
      } catch (e) {
      }
    }
    if (channel === null) {
      const installCommand = buildPlaywrightCLICommand(sdkLanguage, `install chromium`);
      const prettyMessage = [`No chromium-based browser found on the system.`, `Please run the following command to download one:`, ``, `    ${installCommand}`, ``, `<3 Playwright Team`].join("\n");
      throw new Error("\n" + (0, _utils.wrapInASCIIBox)(prettyMessage, 1));
    }
    return channel;
  };
  var lowercaseAllKeys = function(json) {
    if (typeof json !== "object" || !json)
      return json;
    if (Array.isArray(json))
      return json.map(lowercaseAllKeys);
    const result = {};
    for (const [key, value] of Object.entries(json))
      result[key.toLowerCase()] = lowercaseAllKeys(value);
    return result;
  };
  var __dirname = "/Users/hottin/project/jwave_playlist/node_modules/playwright-core/lib/server/registry";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Registry = undefined;
  exports.browserDirectoryToMarkerFilePath = browserDirectoryToMarkerFilePath;
  exports.buildPlaywrightCLICommand = buildPlaywrightCLICommand;
  exports.findChromiumChannel = findChromiumChannel;
  exports.installBrowsersForNpmInstall = installBrowsersForNpmInstall;
  exports.installDefaultBrowsersForNpmInstall = installDefaultBrowsersForNpmInstall;
  exports.registryDirectory = exports.registry = undefined;
  Object.defineProperty(exports, "writeDockerVersion", {
    enumerable: true,
    get: function() {
      return _dependencies.writeDockerVersion;
    }
  });
  var os = _interopRequireWildcard(import.meta.require("os"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var util = _interopRequireWildcard(import.meta.require("util"));
  var fs = _interopRequireWildcard(import.meta.require("fs"));
  var _utilsBundle = require_utilsBundle();
  var _network = require_network();
  var _userAgent = require_userAgent();
  var _utils = require_utils3();
  var _fileUtils = require_fileUtils();
  var _hostPlatform = require_hostPlatform();
  var _spawnAsync = require_spawnAsync();
  var _dependencies = require_dependencies();
  var _browserFetcher = require_browserFetcher();
  var _debugLogger = require_debugLogger();
  var PACKAGE_PATH = _path.default.join(__dirname, "..", "..", "..");
  var BIN_PATH = _path.default.join(__dirname, "..", "..", "..", "bin");
  var PLAYWRIGHT_CDN_MIRRORS = ["https://playwright.azureedge.net", "https://playwright-akamai.azureedge.net", "https://playwright-verizon.azureedge.net"];
  if (process.env.PW_TEST_CDN_THAT_SHOULD_WORK) {
    for (let i = 0;i < PLAYWRIGHT_CDN_MIRRORS.length; i++) {
      const cdn = PLAYWRIGHT_CDN_MIRRORS[i];
      if (cdn !== process.env.PW_TEST_CDN_THAT_SHOULD_WORK)
        PLAYWRIGHT_CDN_MIRRORS[i] = cdn + ".does-not-resolve.playwright.dev";
    }
  }
  var EXECUTABLE_PATHS = {
    chromium: {
      linux: ["chrome-linux", "chrome"],
      mac: ["chrome-mac", "Chromium.app", "Contents", "MacOS", "Chromium"],
      win: ["chrome-win", "chrome.exe"]
    },
    firefox: {
      linux: ["firefox", "firefox"],
      mac: ["firefox", "Nightly.app", "Contents", "MacOS", "firefox"],
      win: ["firefox", "firefox.exe"]
    },
    webkit: {
      linux: ["pw_run.sh"],
      mac: ["pw_run.sh"],
      win: ["Playwright.exe"]
    },
    ffmpeg: {
      linux: ["ffmpeg-linux"],
      mac: ["ffmpeg-mac"],
      win: ["ffmpeg-win64.exe"]
    }
  };
  var DOWNLOAD_PATHS = {
    chromium: {
      "<unknown>": undefined,
      "ubuntu18.04-x64": undefined,
      "ubuntu20.04-x64": "builds/chromium/%s/chromium-linux.zip",
      "ubuntu22.04-x64": "builds/chromium/%s/chromium-linux.zip",
      "ubuntu18.04-arm64": undefined,
      "ubuntu20.04-arm64": "builds/chromium/%s/chromium-linux-arm64.zip",
      "ubuntu22.04-arm64": "builds/chromium/%s/chromium-linux-arm64.zip",
      "debian11-x64": "builds/chromium/%s/chromium-linux.zip",
      "debian11-arm64": "builds/chromium/%s/chromium-linux-arm64.zip",
      "debian12-x64": "builds/chromium/%s/chromium-linux.zip",
      "debian12-arm64": "builds/chromium/%s/chromium-linux-arm64.zip",
      "mac10.13": "builds/chromium/%s/chromium-mac.zip",
      "mac10.14": "builds/chromium/%s/chromium-mac.zip",
      "mac10.15": "builds/chromium/%s/chromium-mac.zip",
      mac11: "builds/chromium/%s/chromium-mac.zip",
      "mac11-arm64": "builds/chromium/%s/chromium-mac-arm64.zip",
      mac12: "builds/chromium/%s/chromium-mac.zip",
      "mac12-arm64": "builds/chromium/%s/chromium-mac-arm64.zip",
      mac13: "builds/chromium/%s/chromium-mac.zip",
      "mac13-arm64": "builds/chromium/%s/chromium-mac-arm64.zip",
      mac14: "builds/chromium/%s/chromium-mac.zip",
      "mac14-arm64": "builds/chromium/%s/chromium-mac-arm64.zip",
      win64: "builds/chromium/%s/chromium-win64.zip"
    },
    "chromium-tip-of-tree": {
      "<unknown>": undefined,
      "ubuntu18.04-x64": undefined,
      "ubuntu20.04-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux.zip",
      "ubuntu22.04-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux.zip",
      "ubuntu18.04-arm64": undefined,
      "ubuntu20.04-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux-arm64.zip",
      "ubuntu22.04-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux-arm64.zip",
      "debian11-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux.zip",
      "debian11-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux-arm64.zip",
      "debian12-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux.zip",
      "debian12-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux-arm64.zip",
      "mac10.13": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
      "mac10.14": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
      "mac10.15": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
      mac11: "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
      "mac11-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac-arm64.zip",
      mac12: "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
      "mac12-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac-arm64.zip",
      mac13: "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
      "mac13-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac-arm64.zip",
      mac14: "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
      "mac14-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac-arm64.zip",
      win64: "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-win64.zip"
    },
    firefox: {
      "<unknown>": undefined,
      "ubuntu18.04-x64": undefined,
      "ubuntu20.04-x64": "builds/firefox/%s/firefox-ubuntu-20.04.zip",
      "ubuntu22.04-x64": "builds/firefox/%s/firefox-ubuntu-22.04.zip",
      "ubuntu18.04-arm64": undefined,
      "ubuntu20.04-arm64": "builds/firefox/%s/firefox-ubuntu-20.04-arm64.zip",
      "ubuntu22.04-arm64": "builds/firefox/%s/firefox-ubuntu-22.04-arm64.zip",
      "debian11-x64": "builds/firefox/%s/firefox-debian-11.zip",
      "debian11-arm64": "builds/firefox/%s/firefox-debian-11-arm64.zip",
      "debian12-x64": "builds/firefox/%s/firefox-debian-12.zip",
      "debian12-arm64": "builds/firefox/%s/firefox-debian-12-arm64.zip",
      "mac10.13": "builds/firefox/%s/firefox-mac-13.zip",
      "mac10.14": "builds/firefox/%s/firefox-mac-13.zip",
      "mac10.15": "builds/firefox/%s/firefox-mac-13.zip",
      mac11: "builds/firefox/%s/firefox-mac-13.zip",
      "mac11-arm64": "builds/firefox/%s/firefox-mac-13-arm64.zip",
      mac12: "builds/firefox/%s/firefox-mac-13.zip",
      "mac12-arm64": "builds/firefox/%s/firefox-mac-13-arm64.zip",
      mac13: "builds/firefox/%s/firefox-mac-13.zip",
      "mac13-arm64": "builds/firefox/%s/firefox-mac-13-arm64.zip",
      mac14: "builds/firefox/%s/firefox-mac-13.zip",
      "mac14-arm64": "builds/firefox/%s/firefox-mac-13-arm64.zip",
      win64: "builds/firefox/%s/firefox-win64.zip"
    },
    "firefox-beta": {
      "<unknown>": undefined,
      "ubuntu18.04-x64": undefined,
      "ubuntu20.04-x64": "builds/firefox-beta/%s/firefox-beta-ubuntu-20.04.zip",
      "ubuntu22.04-x64": "builds/firefox-beta/%s/firefox-beta-ubuntu-22.04.zip",
      "ubuntu18.04-arm64": undefined,
      "ubuntu20.04-arm64": undefined,
      "ubuntu22.04-arm64": "builds/firefox-beta/%s/firefox-beta-ubuntu-22.04-arm64.zip",
      "debian11-x64": "builds/firefox-beta/%s/firefox-beta-debian-11.zip",
      "debian11-arm64": "builds/firefox-beta/%s/firefox-beta-debian-11-arm64.zip",
      "debian12-x64": "builds/firefox-beta/%s/firefox-beta-debian-12.zip",
      "debian12-arm64": "builds/firefox-beta/%s/firefox-beta-debian-12-arm64.zip",
      "mac10.13": "builds/firefox-beta/%s/firefox-beta-mac-13.zip",
      "mac10.14": "builds/firefox-beta/%s/firefox-beta-mac-13.zip",
      "mac10.15": "builds/firefox-beta/%s/firefox-beta-mac-13.zip",
      mac11: "builds/firefox-beta/%s/firefox-beta-mac-13.zip",
      "mac11-arm64": "builds/firefox-beta/%s/firefox-beta-mac-13-arm64.zip",
      mac12: "builds/firefox-beta/%s/firefox-beta-mac-13.zip",
      "mac12-arm64": "builds/firefox-beta/%s/firefox-beta-mac-13-arm64.zip",
      mac13: "builds/firefox-beta/%s/firefox-beta-mac-13.zip",
      "mac13-arm64": "builds/firefox-beta/%s/firefox-beta-mac-13-arm64.zip",
      mac14: "builds/firefox-beta/%s/firefox-beta-mac-13.zip",
      "mac14-arm64": "builds/firefox-beta/%s/firefox-beta-mac-13-arm64.zip",
      win64: "builds/firefox-beta/%s/firefox-beta-win64.zip"
    },
    "firefox-asan": {
      "<unknown>": undefined,
      "ubuntu18.04-x64": undefined,
      "ubuntu20.04-x64": undefined,
      "ubuntu22.04-x64": "builds/firefox/%s/firefox-asan-ubuntu-22.04.zip",
      "ubuntu18.04-arm64": undefined,
      "ubuntu20.04-arm64": undefined,
      "ubuntu22.04-arm64": undefined,
      "debian11-x64": undefined,
      "debian11-arm64": undefined,
      "debian12-x64": undefined,
      "debian12-arm64": undefined,
      "mac10.13": "builds/firefox/%s/firefox-asan-mac-13.zip",
      "mac10.14": "builds/firefox/%s/firefox-asan-mac-13.zip",
      "mac10.15": "builds/firefox/%s/firefox-asan-mac-13.zip",
      mac11: "builds/firefox/%s/firefox-asan-mac-13.zip",
      "mac11-arm64": undefined,
      mac12: "builds/firefox/%s/firefox-asan-mac-13.zip",
      "mac12-arm64": undefined,
      mac13: "builds/firefox/%s/firefox-asan-mac-13.zip",
      "mac13-arm64": undefined,
      mac14: "builds/firefox/%s/firefox-asan-mac-13.zip",
      "mac14-arm64": undefined,
      win64: undefined
    },
    webkit: {
      "<unknown>": undefined,
      "ubuntu18.04-x64": undefined,
      "ubuntu20.04-x64": "builds/webkit/%s/webkit-ubuntu-20.04.zip",
      "ubuntu22.04-x64": "builds/webkit/%s/webkit-ubuntu-22.04.zip",
      "ubuntu18.04-arm64": undefined,
      "ubuntu20.04-arm64": "builds/webkit/%s/webkit-ubuntu-20.04-arm64.zip",
      "ubuntu22.04-arm64": "builds/webkit/%s/webkit-ubuntu-22.04-arm64.zip",
      "debian11-x64": "builds/webkit/%s/webkit-debian-11.zip",
      "debian11-arm64": "builds/webkit/%s/webkit-debian-11-arm64.zip",
      "debian12-x64": "builds/webkit/%s/webkit-debian-12.zip",
      "debian12-arm64": "builds/webkit/%s/webkit-debian-12-arm64.zip",
      "mac10.13": undefined,
      "mac10.14": "builds/deprecated-webkit-mac-10.14/%s/deprecated-webkit-mac-10.14.zip",
      "mac10.15": "builds/deprecated-webkit-mac-10.15/%s/deprecated-webkit-mac-10.15.zip",
      mac11: "builds/webkit/%s/webkit-mac-11.zip",
      "mac11-arm64": "builds/webkit/%s/webkit-mac-11-arm64.zip",
      mac12: "builds/webkit/%s/webkit-mac-12.zip",
      "mac12-arm64": "builds/webkit/%s/webkit-mac-12-arm64.zip",
      mac13: "builds/webkit/%s/webkit-mac-13.zip",
      "mac13-arm64": "builds/webkit/%s/webkit-mac-13-arm64.zip",
      mac14: "builds/webkit/%s/webkit-mac-14.zip",
      "mac14-arm64": "builds/webkit/%s/webkit-mac-14-arm64.zip",
      win64: "builds/webkit/%s/webkit-win64.zip"
    },
    ffmpeg: {
      "<unknown>": undefined,
      "ubuntu18.04-x64": undefined,
      "ubuntu20.04-x64": "builds/ffmpeg/%s/ffmpeg-linux.zip",
      "ubuntu22.04-x64": "builds/ffmpeg/%s/ffmpeg-linux.zip",
      "ubuntu18.04-arm64": undefined,
      "ubuntu20.04-arm64": "builds/ffmpeg/%s/ffmpeg-linux-arm64.zip",
      "ubuntu22.04-arm64": "builds/ffmpeg/%s/ffmpeg-linux-arm64.zip",
      "debian11-x64": "builds/ffmpeg/%s/ffmpeg-linux.zip",
      "debian11-arm64": "builds/ffmpeg/%s/ffmpeg-linux-arm64.zip",
      "debian12-x64": "builds/ffmpeg/%s/ffmpeg-linux.zip",
      "debian12-arm64": "builds/ffmpeg/%s/ffmpeg-linux-arm64.zip",
      "mac10.13": "builds/ffmpeg/%s/ffmpeg-mac.zip",
      "mac10.14": "builds/ffmpeg/%s/ffmpeg-mac.zip",
      "mac10.15": "builds/ffmpeg/%s/ffmpeg-mac.zip",
      mac11: "builds/ffmpeg/%s/ffmpeg-mac.zip",
      "mac11-arm64": "builds/ffmpeg/%s/ffmpeg-mac-arm64.zip",
      mac12: "builds/ffmpeg/%s/ffmpeg-mac.zip",
      "mac12-arm64": "builds/ffmpeg/%s/ffmpeg-mac-arm64.zip",
      mac13: "builds/ffmpeg/%s/ffmpeg-mac.zip",
      "mac13-arm64": "builds/ffmpeg/%s/ffmpeg-mac-arm64.zip",
      mac14: "builds/ffmpeg/%s/ffmpeg-mac.zip",
      "mac14-arm64": "builds/ffmpeg/%s/ffmpeg-mac-arm64.zip",
      win64: "builds/ffmpeg/%s/ffmpeg-win64.zip"
    },
    android: {
      "<unknown>": "builds/android/%s/android.zip",
      "ubuntu18.04-x64": undefined,
      "ubuntu20.04-x64": "builds/android/%s/android.zip",
      "ubuntu22.04-x64": "builds/android/%s/android.zip",
      "ubuntu18.04-arm64": undefined,
      "ubuntu20.04-arm64": "builds/android/%s/android.zip",
      "ubuntu22.04-arm64": "builds/android/%s/android.zip",
      "debian11-x64": "builds/android/%s/android.zip",
      "debian11-arm64": "builds/android/%s/android.zip",
      "debian12-x64": "builds/android/%s/android.zip",
      "debian12-arm64": "builds/android/%s/android.zip",
      "mac10.13": "builds/android/%s/android.zip",
      "mac10.14": "builds/android/%s/android.zip",
      "mac10.15": "builds/android/%s/android.zip",
      mac11: "builds/android/%s/android.zip",
      "mac11-arm64": "builds/android/%s/android.zip",
      mac12: "builds/android/%s/android.zip",
      "mac12-arm64": "builds/android/%s/android.zip",
      mac13: "builds/android/%s/android.zip",
      "mac13-arm64": "builds/android/%s/android.zip",
      mac14: "builds/android/%s/android.zip",
      "mac14-arm64": "builds/android/%s/android.zip",
      win64: "builds/android/%s/android.zip"
    }
  };
  var registryDirectory = exports.registryDirectory = (() => {
    let result;
    const envDefined = (0, _utils.getFromENV)("PLAYWRIGHT_BROWSERS_PATH");
    if (envDefined === "0") {
      result = _path.default.join(__dirname, "..", "..", "..", ".local-browsers");
    } else if (envDefined) {
      result = envDefined;
    } else {
      let cacheDirectory;
      if (process.platform === "linux")
        cacheDirectory = process.env.XDG_CACHE_HOME || _path.default.join(os.homedir(), ".cache");
      else if (process.platform === "darwin")
        cacheDirectory = _path.default.join(os.homedir(), "Library", "Caches");
      else if (process.platform === "win32")
        cacheDirectory = process.env.LOCALAPPDATA || _path.default.join(os.homedir(), "AppData", "Local");
      else
        throw new Error("Unsupported platform: " + process.platform);
      result = _path.default.join(cacheDirectory, "ms-playwright");
    }
    if (!_path.default.isAbsolute(result)) {
      result = _path.default.resolve((0, _utils.getFromENV)("INIT_CWD") || process.cwd(), result);
    }
    return result;
  })();
  var allDownloadable = ["chromium", "firefox", "webkit", "ffmpeg", "firefox-beta", "chromium-tip-of-tree"];

  class Registry {
    constructor(browsersJSON) {
      this._executables = undefined;
      const descriptors = readDescriptors(browsersJSON);
      const findExecutablePath = (dir, name) => {
        let tokens = undefined;
        if (process.platform === "linux")
          tokens = EXECUTABLE_PATHS[name]["linux"];
        else if (process.platform === "darwin")
          tokens = EXECUTABLE_PATHS[name]["mac"];
        else if (process.platform === "win32")
          tokens = EXECUTABLE_PATHS[name]["win"];
        return tokens ? _path.default.join(dir, ...tokens) : undefined;
      };
      const executablePathOrDie = (name, e, installByDefault, sdkLanguage) => {
        if (!e)
          throw new Error(`${name} is not supported on ${_hostPlatform.hostPlatform}`);
        const installCommand = buildPlaywrightCLICommand(sdkLanguage, `install${installByDefault ? "" : " " + name}`);
        if (!(0, _fileUtils.canAccessFile)(e)) {
          const currentDockerVersion = (0, _dependencies.readDockerVersionSync)();
          const preferredDockerVersion = currentDockerVersion ? (0, _dependencies.dockerVersion)(currentDockerVersion.dockerImageNameTemplate) : null;
          const isOutdatedDockerImage = currentDockerVersion && preferredDockerVersion && currentDockerVersion.dockerImageName !== preferredDockerVersion.dockerImageName;
          const prettyMessage = isOutdatedDockerImage ? [`Looks like ${sdkLanguage === "javascript" ? "Playwright Test or " : ""}Playwright was just updated to ${preferredDockerVersion.driverVersion}.`, `Please update docker image as well.`, `-  current: ${currentDockerVersion.dockerImageName}`, `- required: ${preferredDockerVersion.dockerImageName}`, ``, `<3 Playwright Team`].join("\n") : [`Looks like ${sdkLanguage === "javascript" ? "Playwright Test or " : ""}Playwright was just installed or updated.`, `Please run the following command to download new browser${installByDefault ? "s" : ""}:`, ``, `    ${installCommand}`, ``, `<3 Playwright Team`].join("\n");
          throw new Error(`Executable doesn't exist at ${e}\n${(0, _utils.wrapInASCIIBox)(prettyMessage, 1)}`);
        }
        return e;
      };
      this._executables = [];
      const chromium = descriptors.find((d) => d.name === "chromium");
      const chromiumExecutable = findExecutablePath(chromium.dir, "chromium");
      this._executables.push({
        type: "browser",
        name: "chromium",
        browserName: "chromium",
        directory: chromium.dir,
        executablePath: () => chromiumExecutable,
        executablePathOrDie: (sdkLanguage) => executablePathOrDie("chromium", chromiumExecutable, chromium.installByDefault, sdkLanguage),
        installType: chromium.installByDefault ? "download-by-default" : "download-on-demand",
        _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, "chromium", chromium.dir, ["chrome-linux"], [], ["chrome-win"]),
        downloadURLs: this._downloadURLs(chromium),
        browserVersion: chromium.browserVersion,
        _install: () => this._downloadExecutable(chromium, chromiumExecutable),
        _dependencyGroup: "chromium",
        _isHermeticInstallation: true
      });
      const chromiumTipOfTree = descriptors.find((d) => d.name === "chromium-tip-of-tree");
      const chromiumTipOfTreeExecutable = findExecutablePath(chromiumTipOfTree.dir, "chromium");
      this._executables.push({
        type: "tool",
        name: "chromium-tip-of-tree",
        browserName: "chromium",
        directory: chromiumTipOfTree.dir,
        executablePath: () => chromiumTipOfTreeExecutable,
        executablePathOrDie: (sdkLanguage) => executablePathOrDie("chromium-tip-of-tree", chromiumTipOfTreeExecutable, chromiumTipOfTree.installByDefault, sdkLanguage),
        installType: chromiumTipOfTree.installByDefault ? "download-by-default" : "download-on-demand",
        _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, "chromium", chromiumTipOfTree.dir, ["chrome-linux"], [], ["chrome-win"]),
        downloadURLs: this._downloadURLs(chromiumTipOfTree),
        browserVersion: chromiumTipOfTree.browserVersion,
        _install: () => this._downloadExecutable(chromiumTipOfTree, chromiumTipOfTreeExecutable),
        _dependencyGroup: "chromium",
        _isHermeticInstallation: true
      });
      this._executables.push(this._createChromiumChannel("chrome", {
        linux: "/opt/google/chrome/chrome",
        darwin: "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",
        win32: `\\Google\\Chrome\\Application\\chrome.exe`
      }, () => this._installChromiumChannel("chrome", {
        linux: "reinstall_chrome_stable_linux.sh",
        darwin: "reinstall_chrome_stable_mac.sh",
        win32: "reinstall_chrome_stable_win.ps1"
      })));
      this._executables.push(this._createChromiumChannel("chrome-beta", {
        linux: "/opt/google/chrome-beta/chrome",
        darwin: "/Applications/Google Chrome Beta.app/Contents/MacOS/Google Chrome Beta",
        win32: `\\Google\\Chrome Beta\\Application\\chrome.exe`
      }, () => this._installChromiumChannel("chrome-beta", {
        linux: "reinstall_chrome_beta_linux.sh",
        darwin: "reinstall_chrome_beta_mac.sh",
        win32: "reinstall_chrome_beta_win.ps1"
      })));
      this._executables.push(this._createChromiumChannel("chrome-dev", {
        linux: "/opt/google/chrome-unstable/chrome",
        darwin: "/Applications/Google Chrome Dev.app/Contents/MacOS/Google Chrome Dev",
        win32: `\\Google\\Chrome Dev\\Application\\chrome.exe`
      }));
      this._executables.push(this._createChromiumChannel("chrome-canary", {
        linux: "",
        darwin: "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary",
        win32: `\\Google\\Chrome SxS\\Application\\chrome.exe`
      }));
      this._executables.push(this._createChromiumChannel("msedge", {
        linux: "/opt/microsoft/msedge/msedge",
        darwin: "/Applications/Microsoft Edge.app/Contents/MacOS/Microsoft Edge",
        win32: `\\Microsoft\\Edge\\Application\\msedge.exe`
      }, () => this._installMSEdgeChannel("msedge", {
        linux: "reinstall_msedge_stable_linux.sh",
        darwin: "reinstall_msedge_stable_mac.sh",
        win32: "reinstall_msedge_stable_win.ps1"
      })));
      this._executables.push(this._createChromiumChannel("msedge-beta", {
        linux: "/opt/microsoft/msedge-beta/msedge",
        darwin: "/Applications/Microsoft Edge Beta.app/Contents/MacOS/Microsoft Edge Beta",
        win32: `\\Microsoft\\Edge Beta\\Application\\msedge.exe`
      }, () => this._installMSEdgeChannel("msedge-beta", {
        darwin: "reinstall_msedge_beta_mac.sh",
        linux: "reinstall_msedge_beta_linux.sh",
        win32: "reinstall_msedge_beta_win.ps1"
      })));
      this._executables.push(this._createChromiumChannel("msedge-dev", {
        linux: "/opt/microsoft/msedge-dev/msedge",
        darwin: "/Applications/Microsoft Edge Dev.app/Contents/MacOS/Microsoft Edge Dev",
        win32: `\\Microsoft\\Edge Dev\\Application\\msedge.exe`
      }, () => this._installMSEdgeChannel("msedge-dev", {
        darwin: "reinstall_msedge_dev_mac.sh",
        linux: "reinstall_msedge_dev_linux.sh",
        win32: "reinstall_msedge_dev_win.ps1"
      })));
      this._executables.push(this._createChromiumChannel("msedge-canary", {
        linux: "",
        darwin: "/Applications/Microsoft Edge Canary.app/Contents/MacOS/Microsoft Edge Canary",
        win32: `\\Microsoft\\Edge SxS\\Application\\msedge.exe`
      }));
      const firefox = descriptors.find((d) => d.name === "firefox");
      const firefoxExecutable = findExecutablePath(firefox.dir, "firefox");
      this._executables.push({
        type: "browser",
        name: "firefox",
        browserName: "firefox",
        directory: firefox.dir,
        executablePath: () => firefoxExecutable,
        executablePathOrDie: (sdkLanguage) => executablePathOrDie("firefox", firefoxExecutable, firefox.installByDefault, sdkLanguage),
        installType: firefox.installByDefault ? "download-by-default" : "download-on-demand",
        _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, "firefox", firefox.dir, ["firefox"], [], ["firefox"]),
        downloadURLs: this._downloadURLs(firefox),
        browserVersion: firefox.browserVersion,
        _install: () => this._downloadExecutable(firefox, firefoxExecutable),
        _dependencyGroup: "firefox",
        _isHermeticInstallation: true
      });
      const firefoxAsan = descriptors.find((d) => d.name === "firefox-asan");
      const firefoxAsanExecutable = findExecutablePath(firefoxAsan.dir, "firefox");
      this._executables.push({
        type: "browser",
        name: "firefox-asan",
        browserName: "firefox",
        directory: firefoxAsan.dir,
        executablePath: () => firefoxAsanExecutable,
        executablePathOrDie: (sdkLanguage) => executablePathOrDie("firefox-asan", firefoxAsanExecutable, firefoxAsan.installByDefault, sdkLanguage),
        installType: firefoxAsan.installByDefault ? "download-by-default" : "download-on-demand",
        _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, "firefox", firefoxAsan.dir, ["firefox"], [], ["firefox"]),
        downloadURLs: this._downloadURLs(firefoxAsan),
        browserVersion: firefoxAsan.browserVersion,
        _install: () => this._downloadExecutable(firefoxAsan, firefoxAsanExecutable),
        _dependencyGroup: "firefox",
        _isHermeticInstallation: true
      });
      const firefoxBeta = descriptors.find((d) => d.name === "firefox-beta");
      const firefoxBetaExecutable = findExecutablePath(firefoxBeta.dir, "firefox");
      this._executables.push({
        type: "tool",
        name: "firefox-beta",
        browserName: "firefox",
        directory: firefoxBeta.dir,
        executablePath: () => firefoxBetaExecutable,
        executablePathOrDie: (sdkLanguage) => executablePathOrDie("firefox-beta", firefoxBetaExecutable, firefoxBeta.installByDefault, sdkLanguage),
        installType: firefoxBeta.installByDefault ? "download-by-default" : "download-on-demand",
        _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, "firefox", firefoxBeta.dir, ["firefox"], [], ["firefox"]),
        downloadURLs: this._downloadURLs(firefoxBeta),
        browserVersion: firefoxBeta.browserVersion,
        _install: () => this._downloadExecutable(firefoxBeta, firefoxBetaExecutable),
        _dependencyGroup: "firefox",
        _isHermeticInstallation: true
      });
      const webkit = descriptors.find((d) => d.name === "webkit");
      const webkitExecutable = findExecutablePath(webkit.dir, "webkit");
      const webkitLinuxLddDirectories = [_path.default.join("minibrowser-gtk"), _path.default.join("minibrowser-gtk", "bin"), _path.default.join("minibrowser-gtk", "lib"), _path.default.join("minibrowser-gtk", "sys", "lib"), _path.default.join("minibrowser-wpe"), _path.default.join("minibrowser-wpe", "bin"), _path.default.join("minibrowser-wpe", "lib"), _path.default.join("minibrowser-wpe", "sys", "lib")];
      this._executables.push({
        type: "browser",
        name: "webkit",
        browserName: "webkit",
        directory: webkit.dir,
        executablePath: () => webkitExecutable,
        executablePathOrDie: (sdkLanguage) => executablePathOrDie("webkit", webkitExecutable, webkit.installByDefault, sdkLanguage),
        installType: webkit.installByDefault ? "download-by-default" : "download-on-demand",
        _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, "webkit", webkit.dir, webkitLinuxLddDirectories, ["libGLESv2.so.2", "libx264.so"], [""]),
        downloadURLs: this._downloadURLs(webkit),
        browserVersion: webkit.browserVersion,
        _install: () => this._downloadExecutable(webkit, webkitExecutable),
        _dependencyGroup: "webkit",
        _isHermeticInstallation: true
      });
      const ffmpeg = descriptors.find((d) => d.name === "ffmpeg");
      const ffmpegExecutable = findExecutablePath(ffmpeg.dir, "ffmpeg");
      this._executables.push({
        type: "tool",
        name: "ffmpeg",
        browserName: undefined,
        directory: ffmpeg.dir,
        executablePath: () => ffmpegExecutable,
        executablePathOrDie: (sdkLanguage) => executablePathOrDie("ffmpeg", ffmpegExecutable, ffmpeg.installByDefault, sdkLanguage),
        installType: ffmpeg.installByDefault ? "download-by-default" : "download-on-demand",
        _validateHostRequirements: () => Promise.resolve(),
        downloadURLs: this._downloadURLs(ffmpeg),
        _install: () => this._downloadExecutable(ffmpeg, ffmpegExecutable),
        _dependencyGroup: "tools",
        _isHermeticInstallation: true
      });
      const android = descriptors.find((d) => d.name === "android");
      this._executables.push({
        type: "tool",
        name: "android",
        browserName: undefined,
        directory: android.dir,
        executablePath: () => {
          return;
        },
        executablePathOrDie: () => "",
        installType: "download-on-demand",
        _validateHostRequirements: () => Promise.resolve(),
        downloadURLs: this._downloadURLs(android),
        _install: () => this._downloadExecutable(android),
        _dependencyGroup: "tools",
        _isHermeticInstallation: true
      });
    }
    _createChromiumChannel(name, lookAt, install) {
      const executablePath = (sdkLanguage, shouldThrow) => {
        const suffix = lookAt[process.platform];
        if (!suffix) {
          if (shouldThrow)
            throw new Error(`Chromium distribution '${name}' is not supported on ${process.platform}`);
          return;
        }
        const prefixes = process.platform === "win32" ? [process.env.LOCALAPPDATA, process.env.PROGRAMFILES, process.env["PROGRAMFILES(X86)"]].filter(Boolean) : [""];
        for (const prefix of prefixes) {
          const executablePath2 = _path.default.join(prefix, suffix);
          if ((0, _fileUtils.canAccessFile)(executablePath2))
            return executablePath2;
        }
        if (!shouldThrow)
          return;
        const location2 = prefixes.length ? ` at ${_path.default.join(prefixes[0], suffix)}` : ``;
        const installation = install ? `\nRun "${buildPlaywrightCLICommand(sdkLanguage, "install " + name)}"` : "";
        throw new Error(`Chromium distribution '${name}' is not found${location2}${installation}`);
      };
      return {
        type: "channel",
        name,
        browserName: "chromium",
        directory: undefined,
        executablePath: (sdkLanguage) => executablePath(sdkLanguage, false),
        executablePathOrDie: (sdkLanguage) => executablePath(sdkLanguage, true),
        installType: install ? "install-script" : "none",
        _validateHostRequirements: () => Promise.resolve(),
        _isHermeticInstallation: false,
        _install: install
      };
    }
    executables() {
      return this._executables;
    }
    findExecutable(name) {
      return this._executables.find((b) => b.name === name);
    }
    defaultExecutables() {
      return this._executables.filter((e) => e.installType === "download-by-default");
    }
    _addRequirementsAndDedupe(executables) {
      const set = new Set;
      for (const executable of executables) {
        set.add(executable);
        if (executable.browserName === "chromium")
          set.add(this.findExecutable("ffmpeg"));
      }
      return Array.from(set);
    }
    async _validateHostRequirements(sdkLanguage, browserName, browserDirectory, linuxLddDirectories, dlOpenLibraries, windowsExeAndDllDirectories) {
      if (os.platform() === "linux")
        return await (0, _dependencies.validateDependenciesLinux)(sdkLanguage, linuxLddDirectories.map((d) => _path.default.join(browserDirectory, d)), dlOpenLibraries);
      if (os.platform() === "win32" && os.arch() === "x64")
        return await (0, _dependencies.validateDependenciesWindows)(windowsExeAndDllDirectories.map((d) => _path.default.join(browserDirectory, d)));
    }
    async installDeps(executablesToInstallDeps, dryRun) {
      const executables = this._addRequirementsAndDedupe(executablesToInstallDeps);
      const targets = new Set;
      for (const executable of executables) {
        if (executable._dependencyGroup)
          targets.add(executable._dependencyGroup);
      }
      targets.add("tools");
      if (os.platform() === "win32")
        return await (0, _dependencies.installDependenciesWindows)(targets, dryRun);
      if (os.platform() === "linux")
        return await (0, _dependencies.installDependenciesLinux)(targets, dryRun);
    }
    async install(executablesToInstall, forceReinstall) {
      const executables = this._addRequirementsAndDedupe(executablesToInstall);
      await fs.promises.mkdir(registryDirectory, {
        recursive: true
      });
      const lockfilePath = _path.default.join(registryDirectory, "__dirlock");
      const linksDir = _path.default.join(registryDirectory, ".links");
      let releaseLock;
      try {
        releaseLock = await _utilsBundle.lockfile.lock(registryDirectory, {
          retries: {
            retries: 20,
            factor: 1.27579
          },
          onCompromised: (err) => {
            throw new Error(`${err.message} Path: ${lockfilePath}`);
          },
          lockfilePath
        });
        await fs.promises.mkdir(linksDir, {
          recursive: true
        });
        await fs.promises.writeFile(_path.default.join(linksDir, (0, _utils.calculateSha1)(PACKAGE_PATH)), PACKAGE_PATH);
        await this._validateInstallationCache(linksDir);
        for (const executable of executables) {
          if (!executable._install)
            throw new Error(`ERROR: Playwright does not support installing ${executable.name}`);
          const {
            embedderName
          } = (0, _userAgent.getEmbedderName)();
          if (!(0, _utils.getAsBooleanFromENV)("CI") && !executable._isHermeticInstallation && !forceReinstall && executable.executablePath(embedderName)) {
            const command = buildPlaywrightCLICommand(embedderName, "install --force " + executable.name);
            throw new Error("\n" + (0, _utils.wrapInASCIIBox)([`ATTENTION: "${executable.name}" is already installed on the system!`, ``, `"${executable.name}" installation is not hermetic; installing newer version`, `requires *removal* of a current installation first.`, ``, `To *uninstall* current version and re-install latest "${executable.name}":`, ``, `- Close all running instances of "${executable.name}", if any`, `- Use "--force" to install browser:`, ``, `    ${command}`, ``, `<3 Playwright Team`].join("\n"), 1));
          }
          await executable._install();
        }
      } catch (e) {
        if (e.code === "ELOCKED") {
          const rmCommand = process.platform === "win32" ? "rm -R" : "rm -rf";
          throw new Error("\n" + (0, _utils.wrapInASCIIBox)([`An active lockfile is found at:`, ``, `  ${lockfilePath}`, ``, `Either:`, `- wait a few minutes if other Playwright is installing browsers in parallel`, `- remove lock manually with:`, ``, `    ${rmCommand} ${lockfilePath}`, ``, `<3 Playwright Team`].join("\n"), 1));
        } else {
          throw e;
        }
      } finally {
        if (releaseLock)
          await releaseLock();
      }
    }
    async uninstall(all) {
      const linksDir = _path.default.join(registryDirectory, ".links");
      if (all) {
        const links = await fs.promises.readdir(linksDir).catch(() => []);
        for (const link of links)
          await fs.promises.unlink(_path.default.join(linksDir, link));
      } else {
        await fs.promises.unlink(_path.default.join(linksDir, (0, _utils.calculateSha1)(PACKAGE_PATH))).catch(() => {
        });
      }
      await this._validateInstallationCache(linksDir);
      return {
        numberOfBrowsersLeft: (await fs.promises.readdir(registryDirectory).catch(() => [])).filter((browserDirectory) => isBrowserDirectory(browserDirectory)).length
      };
    }
    async validateHostRequirementsForExecutablesIfNeeded(executables, sdkLanguage) {
      if ((0, _utils.getAsBooleanFromENV)("PLAYWRIGHT_SKIP_VALIDATE_HOST_REQUIREMENTS")) {
        process.stderr.write("Skipping host requirements validation logic because `PLAYWRIGHT_SKIP_VALIDATE_HOST_REQUIREMENTS` env variable is set.\n");
        return;
      }
      for (const executable of executables)
        await this._validateHostRequirementsForExecutableIfNeeded(executable, sdkLanguage);
    }
    async _validateHostRequirementsForExecutableIfNeeded(executable, sdkLanguage) {
      const kMaximumReValidationPeriod = 30 * 24 * 60 * 60 * 1000;
      if (!executable.directory)
        return;
      const markerFile = _path.default.join(executable.directory, "DEPENDENCIES_VALIDATED");
      if (await fs.promises.stat(markerFile).then((stat) => Date.now() - stat.mtime.getTime() < kMaximumReValidationPeriod).catch(() => false))
        return;
      _debugLogger.debugLogger.log("install", `validating host requirements for "${executable.name}"`);
      try {
        await executable._validateHostRequirements(sdkLanguage);
        _debugLogger.debugLogger.log("install", `validation passed for ${executable.name}`);
      } catch (error) {
        _debugLogger.debugLogger.log("install", `validation failed for ${executable.name}`);
        throw error;
      }
      await fs.promises.writeFile(markerFile, "").catch(() => {
      });
    }
    _downloadURLs(descriptor) {
      const paths = DOWNLOAD_PATHS[descriptor.name];
      const downloadPathTemplate = paths[_hostPlatform.hostPlatform] || paths["<unknown>"];
      if (!downloadPathTemplate)
        return [];
      const downloadPath = util.format(downloadPathTemplate, descriptor.revision);
      let downloadURLs = PLAYWRIGHT_CDN_MIRRORS.map((mirror) => `${mirror}/${downloadPath}`);
      let downloadHostEnv;
      if (descriptor.name.startsWith("chromium"))
        downloadHostEnv = "PLAYWRIGHT_CHROMIUM_DOWNLOAD_HOST";
      else if (descriptor.name.startsWith("firefox"))
        downloadHostEnv = "PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST";
      else if (descriptor.name.startsWith("webkit"))
        downloadHostEnv = "PLAYWRIGHT_WEBKIT_DOWNLOAD_HOST";
      const customHostOverride = downloadHostEnv && (0, _utils.getFromENV)(downloadHostEnv) || (0, _utils.getFromENV)("PLAYWRIGHT_DOWNLOAD_HOST");
      if (customHostOverride)
        downloadURLs = [`${customHostOverride}/${downloadPath}`];
      return downloadURLs;
    }
    async _downloadExecutable(descriptor, executablePath) {
      const downloadURLs = this._downloadURLs(descriptor);
      if (!downloadURLs.length)
        throw new Error(`ERROR: Playwright does not support ${descriptor.name} on ${_hostPlatform.hostPlatform}`);
      if (!_hostPlatform.isOfficiallySupportedPlatform)
        (0, _browserFetcher.logPolitely)(`BEWARE: your OS is not officially supported by Playwright; downloading fallback build for ${_hostPlatform.hostPlatform}.`);
      const displayName = descriptor.name.split("-").map((word) => {
        return word === "ffmpeg" ? "FFMPEG" : word.charAt(0).toUpperCase() + word.slice(1);
      }).join(" ");
      const title = descriptor.browserVersion ? `${displayName} ${descriptor.browserVersion} (playwright build v${descriptor.revision})` : `${displayName} playwright build v${descriptor.revision}`;
      const downloadFileName = `playwright-download-${descriptor.name}-${_hostPlatform.hostPlatform}-${descriptor.revision}.zip`;
      const downloadConnectionTimeoutEnv = (0, _utils.getFromENV)("PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT");
      const downloadConnectionTimeout = +(downloadConnectionTimeoutEnv || "0") || 30000;
      await (0, _browserFetcher.downloadBrowserWithProgressBar)(title, descriptor.dir, executablePath, downloadURLs, downloadFileName, downloadConnectionTimeout).catch((e) => {
        throw new Error(`Failed to download ${title}, caused by\n${e.stack}`);
      });
    }
    async _installMSEdgeChannel(channel, scripts) {
      const scriptArgs = [];
      if (process.platform !== "linux") {
        const products = lowercaseAllKeys(JSON.parse(await (0, _network.fetchData)({
          url: "https://edgeupdates.microsoft.com/api/products"
        })));
        const productName = {
          msedge: "Stable",
          "msedge-beta": "Beta",
          "msedge-dev": "Dev"
        }[channel];
        const product = products.find((product2) => product2.product === productName);
        const searchConfig = {
          darwin: {
            platform: "MacOS",
            arch: "universal",
            artifact: "pkg"
          },
          win32: {
            platform: "Windows",
            arch: "x64",
            artifact: "msi"
          }
        }[process.platform];
        const release = searchConfig ? product.releases.find((release2) => release2.platform === searchConfig.platform && release2.architecture === searchConfig.arch && release2.artifacts.length > 0) : null;
        const artifact = release ? release.artifacts.find((artifact2) => artifact2.artifactname === searchConfig.artifact) : null;
        if (artifact)
          scriptArgs.push(artifact.location);
        else
          throw new Error(`Cannot install ${channel} on ${process.platform}`);
      }
      await this._installChromiumChannel(channel, scripts, scriptArgs);
    }
    async _installChromiumChannel(channel, scripts, scriptArgs = []) {
      const scriptName = scripts[process.platform];
      if (!scriptName)
        throw new Error(`Cannot install ${channel} on ${process.platform}`);
      const cwd = BIN_PATH;
      const isPowerShell = scriptName.endsWith(".ps1");
      if (isPowerShell) {
        const args = ["-ExecutionPolicy", "Bypass", "-File", _path.default.join(BIN_PATH, scriptName), ...scriptArgs];
        const {
          code
        } = await (0, _spawnAsync.spawnAsync)("powershell.exe", args, {
          cwd,
          stdio: "inherit"
        });
        if (code !== 0)
          throw new Error(`Failed to install ${channel}`);
      } else {
        const {
          command,
          args,
          elevatedPermissions
        } = await (0, _dependencies.transformCommandsForRoot)([`bash "${_path.default.join(BIN_PATH, scriptName)}" ${scriptArgs.join("")}`]);
        if (elevatedPermissions)
          console.log("Switching to root user to install dependencies...");
        const {
          code
        } = await (0, _spawnAsync.spawnAsync)(command, args, {
          cwd,
          stdio: "inherit"
        });
        if (code !== 0)
          throw new Error(`Failed to install ${channel}`);
      }
    }
    async _validateInstallationCache(linksDir) {
      const usedBrowserPaths = new Set;
      for (const fileName of await fs.promises.readdir(linksDir)) {
        const linkPath = _path.default.join(linksDir, fileName);
        let linkTarget = "";
        try {
          linkTarget = (await fs.promises.readFile(linkPath)).toString();
          const browsersJSON = import.meta.require(_path.default.join(linkTarget, "browsers.json"));
          const descriptors = readDescriptors(browsersJSON);
          for (const browserName of allDownloadable) {
            const descriptor = descriptors.find((d) => d.name === browserName);
            if (!descriptor)
              continue;
            const usedBrowserPath = descriptor.dir;
            const browserRevision = parseInt(descriptor.revision, 10);
            const shouldHaveMarkerFile = browserName === "chromium" && (browserRevision >= 786218 || browserRevision < 300000) || browserName === "firefox" && browserRevision >= 1128 || browserName === "webkit" && browserRevision >= 1307 || browserName !== "firefox" && browserName !== "chromium" && browserName !== "webkit";
            if (!shouldHaveMarkerFile || await (0, _fileUtils.existsAsync)(browserDirectoryToMarkerFilePath(usedBrowserPath)))
              usedBrowserPaths.add(usedBrowserPath);
          }
        } catch (e) {
          await fs.promises.unlink(linkPath).catch((e2) => {
          });
        }
      }
      if (!(0, _utils.getAsBooleanFromENV)("PLAYWRIGHT_SKIP_BROWSER_GC")) {
        let downloadedBrowsers = (await fs.promises.readdir(registryDirectory)).map((file) => _path.default.join(registryDirectory, file));
        downloadedBrowsers = downloadedBrowsers.filter((file) => isBrowserDirectory(file));
        const directories = new Set(downloadedBrowsers);
        for (const browserDirectory of usedBrowserPaths)
          directories.delete(browserDirectory);
        for (const directory of directories)
          (0, _browserFetcher.logPolitely)("Removing unused browser at " + directory);
        await (0, _fileUtils.removeFolders)([...directories]);
      }
    }
  }
  exports.Registry = Registry;
  var registry = exports.registry = new Registry(require_browsers());
});

// node_modules/playwright-core/lib/protocol/validatorPrimitives.js
var require_validatorPrimitives = __commonJS((exports) => {
  var findValidator = function(type, method, kind) {
    const validator = maybeFindValidator(type, method, kind);
    if (!validator)
      throw new ValidationError(`Unknown scheme for ${kind}: ${type}.${method}`);
    return validator;
  };
  var maybeFindValidator = function(type, method, kind) {
    const schemeName = type + (kind === "Initializer" ? "" : method[0].toUpperCase() + method.substring(1)) + kind;
    return scheme[schemeName];
  };
  var createMetadataValidator = function() {
    return tOptional(scheme["Metadata"]);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ValidationError = undefined;
  exports.createMetadataValidator = createMetadataValidator;
  exports.findValidator = findValidator;
  exports.maybeFindValidator = maybeFindValidator;
  exports.tUndefined = exports.tType = exports.tString = exports.tOptional = exports.tObject = exports.tNumber = exports.tEnum = exports.tChannel = exports.tBoolean = exports.tBinary = exports.tArray = exports.tAny = exports.scheme = undefined;
  var _utils = require_utils3();

  class ValidationError extends Error {
  }
  exports.ValidationError = ValidationError;
  var scheme = exports.scheme = {};
  var tNumber = (arg, path, context) => {
    if (arg instanceof Number)
      return arg.valueOf();
    if (typeof arg === "number")
      return arg;
    throw new ValidationError(`${path}: expected number, got ${typeof arg}`);
  };
  exports.tNumber = tNumber;
  var tBoolean = (arg, path, context) => {
    if (arg instanceof Boolean)
      return arg.valueOf();
    if (typeof arg === "boolean")
      return arg;
    throw new ValidationError(`${path}: expected boolean, got ${typeof arg}`);
  };
  exports.tBoolean = tBoolean;
  var tString = (arg, path, context) => {
    if (arg instanceof String)
      return arg.valueOf();
    if (typeof arg === "string")
      return arg;
    throw new ValidationError(`${path}: expected string, got ${typeof arg}`);
  };
  exports.tString = tString;
  var tBinary = (arg, path, context) => {
    if (context.binary === "fromBase64") {
      if (arg instanceof String)
        return Buffer.from(arg.valueOf(), "base64");
      if (typeof arg === "string")
        return Buffer.from(arg, "base64");
      throw new ValidationError(`${path}: expected base64-encoded buffer, got ${typeof arg}`);
    }
    if (context.binary === "toBase64") {
      if (!(arg instanceof Buffer))
        throw new ValidationError(`${path}: expected Buffer, got ${typeof arg}`);
      return arg.toString("base64");
    }
    if (context.binary === "buffer") {
      if (!(arg instanceof Buffer))
        throw new ValidationError(`${path}: expected Buffer, got ${typeof arg}`);
      return arg;
    }
    throw new ValidationError(`Unsupported binary behavior "${context.binary}"`);
  };
  exports.tBinary = tBinary;
  var tUndefined = (arg, path, context) => {
    if (Object.is(arg, undefined))
      return arg;
    throw new ValidationError(`${path}: expected undefined, got ${typeof arg}`);
  };
  exports.tUndefined = tUndefined;
  var tAny = (arg, path, context) => {
    return arg;
  };
  exports.tAny = tAny;
  var tOptional = (v) => {
    return (arg, path, context) => {
      if (Object.is(arg, undefined))
        return arg;
      return v(arg, path, context);
    };
  };
  exports.tOptional = tOptional;
  var tArray = (v) => {
    return (arg, path, context) => {
      if (!Array.isArray(arg))
        throw new ValidationError(`${path}: expected array, got ${typeof arg}`);
      return arg.map((x, index) => v(x, path + "[" + index + "]", context));
    };
  };
  exports.tArray = tArray;
  var tObject = (s) => {
    return (arg, path, context) => {
      if (Object.is(arg, null))
        throw new ValidationError(`${path}: expected object, got null`);
      if (typeof arg !== "object")
        throw new ValidationError(`${path}: expected object, got ${typeof arg}`);
      const result = {};
      for (const [key, v] of Object.entries(s)) {
        const value = v(arg[key], path ? path + "." + key : key, context);
        if (!Object.is(value, undefined))
          result[key] = value;
      }
      if ((0, _utils.isUnderTest)()) {
        for (const [key, value] of Object.entries(arg)) {
          if (key.startsWith("__testHook"))
            result[key] = value;
        }
      }
      return result;
    };
  };
  exports.tObject = tObject;
  var tEnum = (e) => {
    return (arg, path, context) => {
      if (!e.includes(arg))
        throw new ValidationError(`${path}: expected one of (${e.join("|")})`);
      return arg;
    };
  };
  exports.tEnum = tEnum;
  var tChannel = (names) => {
    return (arg, path, context) => {
      return context.tChannelImpl(names, arg, path, context);
    };
  };
  exports.tChannel = tChannel;
  var tType = (name) => {
    return (arg, path, context) => {
      const v = scheme[name];
      if (!v)
        throw new ValidationError(path + ': unknown type "' + name + '"');
      return v(arg, path, context);
    };
  };
  exports.tType = tType;
});

// node_modules/playwright-core/lib/protocol/validator.js
var require_validator = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "ValidationError", {
    enumerable: true,
    get: function() {
      return _validatorPrimitives.ValidationError;
    }
  });
  Object.defineProperty(exports, "createMetadataValidator", {
    enumerable: true,
    get: function() {
      return _validatorPrimitives.createMetadataValidator;
    }
  });
  Object.defineProperty(exports, "findValidator", {
    enumerable: true,
    get: function() {
      return _validatorPrimitives.findValidator;
    }
  });
  Object.defineProperty(exports, "maybeFindValidator", {
    enumerable: true,
    get: function() {
      return _validatorPrimitives.maybeFindValidator;
    }
  });
  var _validatorPrimitives = require_validatorPrimitives();
  _validatorPrimitives.scheme.StackFrame = (0, _validatorPrimitives.tObject)({
    file: _validatorPrimitives.tString,
    line: _validatorPrimitives.tNumber,
    column: _validatorPrimitives.tNumber,
    function: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.Metadata = (0, _validatorPrimitives.tObject)({
    location: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      file: _validatorPrimitives.tString,
      line: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      column: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    })),
    apiName: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    internal: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    wallTime: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.ClientSideCallMetadata = (0, _validatorPrimitives.tObject)({
    id: _validatorPrimitives.tNumber,
    stack: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("StackFrame")))
  });
  _validatorPrimitives.scheme.Point = (0, _validatorPrimitives.tObject)({
    x: _validatorPrimitives.tNumber,
    y: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.Rect = (0, _validatorPrimitives.tObject)({
    x: _validatorPrimitives.tNumber,
    y: _validatorPrimitives.tNumber,
    width: _validatorPrimitives.tNumber,
    height: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.SerializedValue = (0, _validatorPrimitives.tObject)({
    n: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    b: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    s: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    v: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["null", "undefined", "NaN", "Infinity", "-Infinity", "-0"])),
    d: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    u: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    bi: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    r: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      p: _validatorPrimitives.tString,
      f: _validatorPrimitives.tString
    })),
    a: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("SerializedValue"))),
    o: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      k: _validatorPrimitives.tString,
      v: (0, _validatorPrimitives.tType)("SerializedValue")
    }))),
    h: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    id: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    ref: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.SerializedArgument = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue"),
    handles: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)("*"))
  });
  _validatorPrimitives.scheme.ExpectedTextValue = (0, _validatorPrimitives.tObject)({
    string: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    regexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    regexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    matchSubstring: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    ignoreCase: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    normalizeWhiteSpace: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.AXNode = (0, _validatorPrimitives.tObject)({
    role: _validatorPrimitives.tString,
    name: _validatorPrimitives.tString,
    valueString: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    valueNumber: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    description: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    keyshortcuts: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    roledescription: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    valuetext: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    disabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    expanded: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    focused: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modal: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    multiline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    multiselectable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    readonly: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    required: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    selected: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    checked: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["checked", "unchecked", "mixed"])),
    pressed: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["pressed", "released", "mixed"])),
    level: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    valuemin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    valuemax: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    autocomplete: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    haspopup: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    invalid: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    orientation: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    children: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("AXNode")))
  });
  _validatorPrimitives.scheme.SetNetworkCookie = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    value: _validatorPrimitives.tString,
    url: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    domain: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    path: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    expires: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    httpOnly: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    secure: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    sameSite: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["Strict", "Lax", "None"]))
  });
  _validatorPrimitives.scheme.NetworkCookie = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    value: _validatorPrimitives.tString,
    domain: _validatorPrimitives.tString,
    path: _validatorPrimitives.tString,
    expires: _validatorPrimitives.tNumber,
    httpOnly: _validatorPrimitives.tBoolean,
    secure: _validatorPrimitives.tBoolean,
    sameSite: (0, _validatorPrimitives.tEnum)(["Strict", "Lax", "None"])
  });
  _validatorPrimitives.scheme.NameValue = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.OriginStorage = (0, _validatorPrimitives.tObject)({
    origin: _validatorPrimitives.tString,
    localStorage: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
  });
  _validatorPrimitives.scheme.SerializedError = (0, _validatorPrimitives.tObject)({
    error: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      message: _validatorPrimitives.tString,
      name: _validatorPrimitives.tString,
      stack: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    value: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("SerializedValue"))
  });
  _validatorPrimitives.scheme.RecordHarOptions = (0, _validatorPrimitives.tObject)({
    path: _validatorPrimitives.tString,
    content: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["embed", "attach", "omit"])),
    mode: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["full", "minimal"])),
    urlGlob: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    urlRegexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    urlRegexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FormField = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    file: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      mimeType: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      buffer: _validatorPrimitives.tBinary
    }))
  });
  _validatorPrimitives.scheme.APIRequestContextInitializer = (0, _validatorPrimitives.tObject)({
    tracing: (0, _validatorPrimitives.tChannel)(["Tracing"])
  });
  _validatorPrimitives.scheme.APIRequestContextFetchParams = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString,
    params: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    method: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    headers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    postData: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    jsonData: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    formData: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    multipartData: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("FormField"))),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    failOnStatusCode: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    maxRedirects: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.APIRequestContextFetchResult = (0, _validatorPrimitives.tObject)({
    response: (0, _validatorPrimitives.tType)("APIResponse")
  });
  _validatorPrimitives.scheme.APIRequestContextFetchResponseBodyParams = (0, _validatorPrimitives.tObject)({
    fetchUid: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.APIRequestContextFetchResponseBodyResult = (0, _validatorPrimitives.tObject)({
    binary: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary)
  });
  _validatorPrimitives.scheme.APIRequestContextFetchLogParams = (0, _validatorPrimitives.tObject)({
    fetchUid: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.APIRequestContextFetchLogResult = (0, _validatorPrimitives.tObject)({
    log: (0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.APIRequestContextStorageStateParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.APIRequestContextStorageStateResult = (0, _validatorPrimitives.tObject)({
    cookies: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NetworkCookie")),
    origins: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("OriginStorage"))
  });
  _validatorPrimitives.scheme.APIRequestContextDisposeAPIResponseParams = (0, _validatorPrimitives.tObject)({
    fetchUid: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.APIRequestContextDisposeAPIResponseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.APIRequestContextDisposeParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.APIRequestContextDisposeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.APIResponse = (0, _validatorPrimitives.tObject)({
    fetchUid: _validatorPrimitives.tString,
    url: _validatorPrimitives.tString,
    status: _validatorPrimitives.tNumber,
    statusText: _validatorPrimitives.tString,
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
  });
  _validatorPrimitives.scheme.LifecycleEvent = (0, _validatorPrimitives.tEnum)(["load", "domcontentloaded", "networkidle", "commit"]);
  _validatorPrimitives.scheme.LocalUtilsInitializer = (0, _validatorPrimitives.tObject)({
    deviceDescriptors: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      descriptor: (0, _validatorPrimitives.tObject)({
        userAgent: _validatorPrimitives.tString,
        viewport: (0, _validatorPrimitives.tObject)({
          width: _validatorPrimitives.tNumber,
          height: _validatorPrimitives.tNumber
        }),
        screen: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
          width: _validatorPrimitives.tNumber,
          height: _validatorPrimitives.tNumber
        })),
        deviceScaleFactor: _validatorPrimitives.tNumber,
        isMobile: _validatorPrimitives.tBoolean,
        hasTouch: _validatorPrimitives.tBoolean,
        defaultBrowserType: (0, _validatorPrimitives.tEnum)(["chromium", "firefox", "webkit"])
      })
    }))
  });
  _validatorPrimitives.scheme.LocalUtilsZipParams = (0, _validatorPrimitives.tObject)({
    zipFile: _validatorPrimitives.tString,
    entries: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue")),
    stacksId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    mode: (0, _validatorPrimitives.tEnum)(["write", "append"]),
    includeSources: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.LocalUtilsZipResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.LocalUtilsHarOpenParams = (0, _validatorPrimitives.tObject)({
    file: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.LocalUtilsHarOpenResult = (0, _validatorPrimitives.tObject)({
    harId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    error: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.LocalUtilsHarLookupParams = (0, _validatorPrimitives.tObject)({
    harId: _validatorPrimitives.tString,
    url: _validatorPrimitives.tString,
    method: _validatorPrimitives.tString,
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue")),
    postData: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    isNavigationRequest: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.LocalUtilsHarLookupResult = (0, _validatorPrimitives.tObject)({
    action: (0, _validatorPrimitives.tEnum)(["error", "redirect", "fulfill", "noentry"]),
    message: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    redirectURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    status: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    headers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    body: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary)
  });
  _validatorPrimitives.scheme.LocalUtilsHarCloseParams = (0, _validatorPrimitives.tObject)({
    harId: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.LocalUtilsHarCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.LocalUtilsHarUnzipParams = (0, _validatorPrimitives.tObject)({
    zipFile: _validatorPrimitives.tString,
    harFile: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.LocalUtilsHarUnzipResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.LocalUtilsConnectParams = (0, _validatorPrimitives.tObject)({
    wsEndpoint: _validatorPrimitives.tString,
    headers: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
    exposeNetwork: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    slowMo: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    socksProxyRedirectPortForTest: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.LocalUtilsConnectResult = (0, _validatorPrimitives.tObject)({
    pipe: (0, _validatorPrimitives.tChannel)(["JsonPipe"]),
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
  });
  _validatorPrimitives.scheme.LocalUtilsTracingStartedParams = (0, _validatorPrimitives.tObject)({
    tracesDir: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    traceName: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.LocalUtilsTracingStartedResult = (0, _validatorPrimitives.tObject)({
    stacksId: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.LocalUtilsAddStackToTracingNoReplyParams = (0, _validatorPrimitives.tObject)({
    callData: (0, _validatorPrimitives.tType)("ClientSideCallMetadata")
  });
  _validatorPrimitives.scheme.LocalUtilsAddStackToTracingNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.LocalUtilsTraceDiscardedParams = (0, _validatorPrimitives.tObject)({
    stacksId: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.LocalUtilsTraceDiscardedResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.RootInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.RootInitializeParams = (0, _validatorPrimitives.tObject)({
    sdkLanguage: (0, _validatorPrimitives.tEnum)(["javascript", "python", "java", "csharp"])
  });
  _validatorPrimitives.scheme.RootInitializeResult = (0, _validatorPrimitives.tObject)({
    playwright: (0, _validatorPrimitives.tChannel)(["Playwright"])
  });
  _validatorPrimitives.scheme.PlaywrightInitializer = (0, _validatorPrimitives.tObject)({
    chromium: (0, _validatorPrimitives.tChannel)(["BrowserType"]),
    firefox: (0, _validatorPrimitives.tChannel)(["BrowserType"]),
    webkit: (0, _validatorPrimitives.tChannel)(["BrowserType"]),
    android: (0, _validatorPrimitives.tChannel)(["Android"]),
    electron: (0, _validatorPrimitives.tChannel)(["Electron"]),
    utils: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["LocalUtils"])),
    selectors: (0, _validatorPrimitives.tChannel)(["Selectors"]),
    preLaunchedBrowser: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Browser"])),
    preConnectedAndroidDevice: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["AndroidDevice"])),
    socksSupport: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["SocksSupport"]))
  });
  _validatorPrimitives.scheme.PlaywrightNewRequestParams = (0, _validatorPrimitives.tObject)({
    baseURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    userAgent: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      username: _validatorPrimitives.tString,
      password: _validatorPrimitives.tString,
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      server: _validatorPrimitives.tString,
      bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    storageState: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      cookies: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NetworkCookie"))),
      origins: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("OriginStorage")))
    })),
    tracesDir: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.PlaywrightNewRequestResult = (0, _validatorPrimitives.tObject)({
    request: (0, _validatorPrimitives.tChannel)(["APIRequestContext"])
  });
  _validatorPrimitives.scheme.RecorderSource = (0, _validatorPrimitives.tObject)({
    isRecorded: _validatorPrimitives.tBoolean,
    id: _validatorPrimitives.tString,
    label: _validatorPrimitives.tString,
    text: _validatorPrimitives.tString,
    language: _validatorPrimitives.tString,
    highlight: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      line: _validatorPrimitives.tNumber,
      type: _validatorPrimitives.tString
    })),
    revealLine: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    group: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.DebugControllerInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerInspectRequestedEvent = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    locator: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.DebugControllerSetModeRequestedEvent = (0, _validatorPrimitives.tObject)({
    mode: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.DebugControllerStateChangedEvent = (0, _validatorPrimitives.tObject)({
    pageCount: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.DebugControllerSourceChangedEvent = (0, _validatorPrimitives.tObject)({
    text: _validatorPrimitives.tString,
    header: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    footer: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    actions: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString))
  });
  _validatorPrimitives.scheme.DebugControllerPausedEvent = (0, _validatorPrimitives.tObject)({
    paused: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.DebugControllerInitializeParams = (0, _validatorPrimitives.tObject)({
    codegenId: _validatorPrimitives.tString,
    sdkLanguage: (0, _validatorPrimitives.tEnum)(["javascript", "python", "java", "csharp"])
  });
  _validatorPrimitives.scheme.DebugControllerInitializeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerSetReportStateChangedParams = (0, _validatorPrimitives.tObject)({
    enabled: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.DebugControllerSetReportStateChangedResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerResetForReuseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerResetForReuseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerNavigateParams = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.DebugControllerNavigateResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerSetRecorderModeParams = (0, _validatorPrimitives.tObject)({
    mode: (0, _validatorPrimitives.tEnum)(["inspecting", "recording", "none"]),
    testIdAttributeName: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.DebugControllerSetRecorderModeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerHighlightParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.DebugControllerHighlightResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerHideHighlightParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerHideHighlightResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerResumeParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerResumeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerKillParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerKillResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerCloseAllBrowsersParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerCloseAllBrowsersResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SocksSupportInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SocksSupportSocksRequestedEvent = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString,
    host: _validatorPrimitives.tString,
    port: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.SocksSupportSocksDataEvent = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString,
    data: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.SocksSupportSocksClosedEvent = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.SocksSupportSocksConnectedParams = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString,
    host: _validatorPrimitives.tString,
    port: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.SocksSupportSocksConnectedResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SocksSupportSocksFailedParams = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString,
    errorCode: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.SocksSupportSocksFailedResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SocksSupportSocksDataParams = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString,
    data: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.SocksSupportSocksDataResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SocksSupportSocksErrorParams = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString,
    error: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.SocksSupportSocksErrorResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SocksSupportSocksEndParams = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.SocksSupportSocksEndResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SelectorsInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SelectorsRegisterParams = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    source: _validatorPrimitives.tString,
    contentScript: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.SelectorsRegisterResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SelectorsSetTestIdAttributeNameParams = (0, _validatorPrimitives.tObject)({
    testIdAttributeName: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.SelectorsSetTestIdAttributeNameResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserTypeInitializer = (0, _validatorPrimitives.tObject)({
    executablePath: _validatorPrimitives.tString,
    name: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.BrowserTypeLaunchParams = (0, _validatorPrimitives.tObject)({
    channel: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    executablePath: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    ignoreAllDefaultArgs: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    ignoreDefaultArgs: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    handleSIGINT: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    handleSIGTERM: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    handleSIGHUP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    env: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    headless: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    devtools: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      server: _validatorPrimitives.tString,
      bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    downloadsPath: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    tracesDir: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    chromiumSandbox: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    firefoxUserPrefs: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
    slowMo: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.BrowserTypeLaunchResult = (0, _validatorPrimitives.tObject)({
    browser: (0, _validatorPrimitives.tChannel)(["Browser"])
  });
  _validatorPrimitives.scheme.BrowserTypeLaunchPersistentContextParams = (0, _validatorPrimitives.tObject)({
    channel: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    executablePath: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    ignoreAllDefaultArgs: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    ignoreDefaultArgs: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    handleSIGINT: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    handleSIGTERM: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    handleSIGHUP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    env: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    headless: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    devtools: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      server: _validatorPrimitives.tString,
      bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    downloadsPath: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    tracesDir: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    chromiumSandbox: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    firefoxUserPrefs: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
    noDefaultViewport: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    viewport: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    screen: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    javaScriptEnabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    bypassCSP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    userAgent: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    locale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    timezoneId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      longitude: _validatorPrimitives.tNumber,
      latitude: _validatorPrimitives.tNumber,
      accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    })),
    permissions: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    offline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      username: _validatorPrimitives.tString,
      password: _validatorPrimitives.tString,
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    deviceScaleFactor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    isMobile: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    hasTouch: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
    reducedMotion: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
    forcedColors: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["active", "none", "no-override"])),
    acceptDownloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
    baseURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    recordVideo: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      dir: _validatorPrimitives.tString,
      size: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      }))
    })),
    recordHar: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RecordHarOptions")),
    strictSelectors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    serviceWorkers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["allow", "block"])),
    userDataDir: _validatorPrimitives.tString,
    slowMo: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.BrowserTypeLaunchPersistentContextResult = (0, _validatorPrimitives.tObject)({
    context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
  });
  _validatorPrimitives.scheme.BrowserTypeConnectOverCDPParams = (0, _validatorPrimitives.tObject)({
    endpointURL: _validatorPrimitives.tString,
    headers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    slowMo: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.BrowserTypeConnectOverCDPResult = (0, _validatorPrimitives.tObject)({
    browser: (0, _validatorPrimitives.tChannel)(["Browser"]),
    defaultContext: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["BrowserContext"]))
  });
  _validatorPrimitives.scheme.BrowserInitializer = (0, _validatorPrimitives.tObject)({
    version: _validatorPrimitives.tString,
    name: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.BrowserCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserCloseParams = (0, _validatorPrimitives.tObject)({
    reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserKillForTestsParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserKillForTestsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserDefaultUserAgentForTestParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserDefaultUserAgentForTestResult = (0, _validatorPrimitives.tObject)({
    userAgent: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.BrowserNewContextParams = (0, _validatorPrimitives.tObject)({
    noDefaultViewport: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    viewport: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    screen: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    javaScriptEnabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    bypassCSP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    userAgent: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    locale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    timezoneId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      longitude: _validatorPrimitives.tNumber,
      latitude: _validatorPrimitives.tNumber,
      accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    })),
    permissions: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    offline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      username: _validatorPrimitives.tString,
      password: _validatorPrimitives.tString,
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    deviceScaleFactor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    isMobile: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    hasTouch: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
    reducedMotion: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
    forcedColors: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["active", "none", "no-override"])),
    acceptDownloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
    baseURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    recordVideo: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      dir: _validatorPrimitives.tString,
      size: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      }))
    })),
    recordHar: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RecordHarOptions")),
    strictSelectors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    serviceWorkers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["allow", "block"])),
    proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      server: _validatorPrimitives.tString,
      bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    storageState: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      cookies: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("SetNetworkCookie"))),
      origins: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("OriginStorage")))
    }))
  });
  _validatorPrimitives.scheme.BrowserNewContextResult = (0, _validatorPrimitives.tObject)({
    context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
  });
  _validatorPrimitives.scheme.BrowserNewContextForReuseParams = (0, _validatorPrimitives.tObject)({
    noDefaultViewport: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    viewport: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    screen: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    javaScriptEnabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    bypassCSP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    userAgent: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    locale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    timezoneId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      longitude: _validatorPrimitives.tNumber,
      latitude: _validatorPrimitives.tNumber,
      accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    })),
    permissions: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    offline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      username: _validatorPrimitives.tString,
      password: _validatorPrimitives.tString,
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    deviceScaleFactor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    isMobile: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    hasTouch: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
    reducedMotion: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
    forcedColors: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["active", "none", "no-override"])),
    acceptDownloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
    baseURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    recordVideo: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      dir: _validatorPrimitives.tString,
      size: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      }))
    })),
    recordHar: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RecordHarOptions")),
    strictSelectors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    serviceWorkers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["allow", "block"])),
    proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      server: _validatorPrimitives.tString,
      bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    storageState: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      cookies: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("SetNetworkCookie"))),
      origins: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("OriginStorage")))
    }))
  });
  _validatorPrimitives.scheme.BrowserNewContextForReuseResult = (0, _validatorPrimitives.tObject)({
    context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
  });
  _validatorPrimitives.scheme.BrowserStopPendingOperationsParams = (0, _validatorPrimitives.tObject)({
    reason: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.BrowserStopPendingOperationsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserNewBrowserCDPSessionParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserNewBrowserCDPSessionResult = (0, _validatorPrimitives.tObject)({
    session: (0, _validatorPrimitives.tChannel)(["CDPSession"])
  });
  _validatorPrimitives.scheme.BrowserStartTracingParams = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"])),
    screenshots: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    categories: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString))
  });
  _validatorPrimitives.scheme.BrowserStartTracingResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserStopTracingParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserStopTracingResult = (0, _validatorPrimitives.tObject)({
    artifact: (0, _validatorPrimitives.tChannel)(["Artifact"])
  });
  _validatorPrimitives.scheme.EventTargetInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.EventTargetWaitForEventInfoParams = (0, _validatorPrimitives.tObject)({
    info: (0, _validatorPrimitives.tObject)({
      waitId: _validatorPrimitives.tString,
      phase: (0, _validatorPrimitives.tEnum)(["before", "after", "log"]),
      event: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      message: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      error: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })
  });
  _validatorPrimitives.scheme.BrowserContextWaitForEventInfoParams = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
  _validatorPrimitives.scheme.PageWaitForEventInfoParams = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
  _validatorPrimitives.scheme.WebSocketWaitForEventInfoParams = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
  _validatorPrimitives.scheme.ElectronApplicationWaitForEventInfoParams = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
  _validatorPrimitives.scheme.AndroidDeviceWaitForEventInfoParams = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
  _validatorPrimitives.scheme.EventTargetWaitForEventInfoResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextWaitForEventInfoResult = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
  _validatorPrimitives.scheme.PageWaitForEventInfoResult = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
  _validatorPrimitives.scheme.WebSocketWaitForEventInfoResult = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
  _validatorPrimitives.scheme.ElectronApplicationWaitForEventInfoResult = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
  _validatorPrimitives.scheme.AndroidDeviceWaitForEventInfoResult = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
  _validatorPrimitives.scheme.BrowserContextInitializer = (0, _validatorPrimitives.tObject)({
    isChromium: _validatorPrimitives.tBoolean,
    requestContext: (0, _validatorPrimitives.tChannel)(["APIRequestContext"]),
    tracing: (0, _validatorPrimitives.tChannel)(["Tracing"])
  });
  _validatorPrimitives.scheme.BrowserContextBindingCallEvent = (0, _validatorPrimitives.tObject)({
    binding: (0, _validatorPrimitives.tChannel)(["BindingCall"])
  });
  _validatorPrimitives.scheme.BrowserContextConsoleEvent = (0, _validatorPrimitives.tObject)({
    type: _validatorPrimitives.tString,
    text: _validatorPrimitives.tString,
    args: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])),
    location: (0, _validatorPrimitives.tObject)({
      url: _validatorPrimitives.tString,
      lineNumber: _validatorPrimitives.tNumber,
      columnNumber: _validatorPrimitives.tNumber
    }),
    page: (0, _validatorPrimitives.tChannel)(["Page"])
  });
  _validatorPrimitives.scheme.BrowserContextCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextDialogEvent = (0, _validatorPrimitives.tObject)({
    dialog: (0, _validatorPrimitives.tChannel)(["Dialog"])
  });
  _validatorPrimitives.scheme.BrowserContextPageEvent = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tChannel)(["Page"])
  });
  _validatorPrimitives.scheme.BrowserContextPageErrorEvent = (0, _validatorPrimitives.tObject)({
    error: (0, _validatorPrimitives.tType)("SerializedError"),
    page: (0, _validatorPrimitives.tChannel)(["Page"])
  });
  _validatorPrimitives.scheme.BrowserContextRouteEvent = (0, _validatorPrimitives.tObject)({
    route: (0, _validatorPrimitives.tChannel)(["Route"])
  });
  _validatorPrimitives.scheme.BrowserContextVideoEvent = (0, _validatorPrimitives.tObject)({
    artifact: (0, _validatorPrimitives.tChannel)(["Artifact"])
  });
  _validatorPrimitives.scheme.BrowserContextBackgroundPageEvent = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tChannel)(["Page"])
  });
  _validatorPrimitives.scheme.BrowserContextServiceWorkerEvent = (0, _validatorPrimitives.tObject)({
    worker: (0, _validatorPrimitives.tChannel)(["Worker"])
  });
  _validatorPrimitives.scheme.BrowserContextRequestEvent = (0, _validatorPrimitives.tObject)({
    request: (0, _validatorPrimitives.tChannel)(["Request"]),
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"]))
  });
  _validatorPrimitives.scheme.BrowserContextRequestFailedEvent = (0, _validatorPrimitives.tObject)({
    request: (0, _validatorPrimitives.tChannel)(["Request"]),
    failureText: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    responseEndTiming: _validatorPrimitives.tNumber,
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"]))
  });
  _validatorPrimitives.scheme.BrowserContextRequestFinishedEvent = (0, _validatorPrimitives.tObject)({
    request: (0, _validatorPrimitives.tChannel)(["Request"]),
    response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"])),
    responseEndTiming: _validatorPrimitives.tNumber,
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"]))
  });
  _validatorPrimitives.scheme.BrowserContextResponseEvent = (0, _validatorPrimitives.tObject)({
    response: (0, _validatorPrimitives.tChannel)(["Response"]),
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"]))
  });
  _validatorPrimitives.scheme.BrowserContextAddCookiesParams = (0, _validatorPrimitives.tObject)({
    cookies: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("SetNetworkCookie"))
  });
  _validatorPrimitives.scheme.BrowserContextAddCookiesResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextAddInitScriptParams = (0, _validatorPrimitives.tObject)({
    source: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.BrowserContextAddInitScriptResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClearCookiesParams = (0, _validatorPrimitives.tObject)({
    name: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    nameRegexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    nameRegexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    domain: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    domainRegexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    domainRegexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    path: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    pathRegexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    pathRegexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextClearCookiesResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClearPermissionsParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClearPermissionsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextCloseParams = (0, _validatorPrimitives.tObject)({
    reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextCookiesParams = (0, _validatorPrimitives.tObject)({
    urls: (0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextCookiesResult = (0, _validatorPrimitives.tObject)({
    cookies: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NetworkCookie"))
  });
  _validatorPrimitives.scheme.BrowserContextExposeBindingParams = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    needsHandle: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.BrowserContextExposeBindingResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextGrantPermissionsParams = (0, _validatorPrimitives.tObject)({
    permissions: (0, _validatorPrimitives.tArray)(_validatorPrimitives.tString),
    origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextGrantPermissionsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextNewPageParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextNewPageResult = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tChannel)(["Page"])
  });
  _validatorPrimitives.scheme.BrowserContextSetDefaultNavigationTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.BrowserContextSetDefaultNavigationTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextSetDefaultTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.BrowserContextSetDefaultTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextSetExtraHTTPHeadersParams = (0, _validatorPrimitives.tObject)({
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
  });
  _validatorPrimitives.scheme.BrowserContextSetExtraHTTPHeadersResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextSetGeolocationParams = (0, _validatorPrimitives.tObject)({
    geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      longitude: _validatorPrimitives.tNumber,
      latitude: _validatorPrimitives.tNumber,
      accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    }))
  });
  _validatorPrimitives.scheme.BrowserContextSetGeolocationResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextSetHTTPCredentialsParams = (0, _validatorPrimitives.tObject)({
    httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      username: _validatorPrimitives.tString,
      password: _validatorPrimitives.tString,
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    }))
  });
  _validatorPrimitives.scheme.BrowserContextSetHTTPCredentialsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextSetNetworkInterceptionPatternsParams = (0, _validatorPrimitives.tObject)({
    patterns: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      glob: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      regexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      regexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    }))
  });
  _validatorPrimitives.scheme.BrowserContextSetNetworkInterceptionPatternsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextSetOfflineParams = (0, _validatorPrimitives.tObject)({
    offline: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.BrowserContextSetOfflineResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextStorageStateParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextStorageStateResult = (0, _validatorPrimitives.tObject)({
    cookies: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NetworkCookie")),
    origins: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("OriginStorage"))
  });
  _validatorPrimitives.scheme.BrowserContextPauseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextPauseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextRecorderSupplementEnableParams = (0, _validatorPrimitives.tObject)({
    language: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    mode: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["inspecting", "recording"])),
    pauseOnNextStatement: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    testIdAttributeName: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    launchOptions: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
    contextOptions: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
    device: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    saveStorage: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    outputFile: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    handleSIGINT: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    omitCallTracking: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.BrowserContextRecorderSupplementEnableResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextNewCDPSessionParams = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"])),
    frame: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Frame"]))
  });
  _validatorPrimitives.scheme.BrowserContextNewCDPSessionResult = (0, _validatorPrimitives.tObject)({
    session: (0, _validatorPrimitives.tChannel)(["CDPSession"])
  });
  _validatorPrimitives.scheme.BrowserContextHarStartParams = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"])),
    options: (0, _validatorPrimitives.tType)("RecordHarOptions")
  });
  _validatorPrimitives.scheme.BrowserContextHarStartResult = (0, _validatorPrimitives.tObject)({
    harId: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.BrowserContextHarExportParams = (0, _validatorPrimitives.tObject)({
    harId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextHarExportResult = (0, _validatorPrimitives.tObject)({
    artifact: (0, _validatorPrimitives.tChannel)(["Artifact"])
  });
  _validatorPrimitives.scheme.BrowserContextCreateTempFileParams = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    lastModifiedMs: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.BrowserContextCreateTempFileResult = (0, _validatorPrimitives.tObject)({
    writableStream: (0, _validatorPrimitives.tChannel)(["WritableStream"])
  });
  _validatorPrimitives.scheme.BrowserContextUpdateSubscriptionParams = (0, _validatorPrimitives.tObject)({
    event: (0, _validatorPrimitives.tEnum)(["console", "dialog", "request", "response", "requestFinished", "requestFailed"]),
    enabled: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.BrowserContextUpdateSubscriptionResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageInitializer = (0, _validatorPrimitives.tObject)({
    mainFrame: (0, _validatorPrimitives.tChannel)(["Frame"]),
    viewportSize: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    isClosed: _validatorPrimitives.tBoolean,
    opener: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"]))
  });
  _validatorPrimitives.scheme.PageBindingCallEvent = (0, _validatorPrimitives.tObject)({
    binding: (0, _validatorPrimitives.tChannel)(["BindingCall"])
  });
  _validatorPrimitives.scheme.PageCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageCrashEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageDownloadEvent = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString,
    suggestedFilename: _validatorPrimitives.tString,
    artifact: (0, _validatorPrimitives.tChannel)(["Artifact"])
  });
  _validatorPrimitives.scheme.PageFileChooserEvent = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tChannel)(["ElementHandle"]),
    isMultiple: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.PageFrameAttachedEvent = (0, _validatorPrimitives.tObject)({
    frame: (0, _validatorPrimitives.tChannel)(["Frame"])
  });
  _validatorPrimitives.scheme.PageFrameDetachedEvent = (0, _validatorPrimitives.tObject)({
    frame: (0, _validatorPrimitives.tChannel)(["Frame"])
  });
  _validatorPrimitives.scheme.PageLocatorHandlerTriggeredEvent = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.PageRouteEvent = (0, _validatorPrimitives.tObject)({
    route: (0, _validatorPrimitives.tChannel)(["Route"])
  });
  _validatorPrimitives.scheme.PageVideoEvent = (0, _validatorPrimitives.tObject)({
    artifact: (0, _validatorPrimitives.tChannel)(["Artifact"])
  });
  _validatorPrimitives.scheme.PageWebSocketEvent = (0, _validatorPrimitives.tObject)({
    webSocket: (0, _validatorPrimitives.tChannel)(["WebSocket"])
  });
  _validatorPrimitives.scheme.PageWorkerEvent = (0, _validatorPrimitives.tObject)({
    worker: (0, _validatorPrimitives.tChannel)(["Worker"])
  });
  _validatorPrimitives.scheme.PageSetDefaultNavigationTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageSetDefaultNavigationTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageSetDefaultTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageSetDefaultTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageAddInitScriptParams = (0, _validatorPrimitives.tObject)({
    source: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.PageAddInitScriptResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageCloseParams = (0, _validatorPrimitives.tObject)({
    runBeforeUnload: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.PageCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageEmulateMediaParams = (0, _validatorPrimitives.tObject)({
    media: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["screen", "print", "no-override"])),
    colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
    reducedMotion: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
    forcedColors: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["active", "none", "no-override"]))
  });
  _validatorPrimitives.scheme.PageEmulateMediaResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageExposeBindingParams = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    needsHandle: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.PageExposeBindingResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageGoBackParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    waitUntil: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent"))
  });
  _validatorPrimitives.scheme.PageGoBackResult = (0, _validatorPrimitives.tObject)({
    response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"]))
  });
  _validatorPrimitives.scheme.PageGoForwardParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    waitUntil: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent"))
  });
  _validatorPrimitives.scheme.PageGoForwardResult = (0, _validatorPrimitives.tObject)({
    response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"]))
  });
  _validatorPrimitives.scheme.PageRegisterLocatorHandlerParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.PageRegisterLocatorHandlerResult = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.PageResolveLocatorHandlerNoReplyParams = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tNumber,
    remove: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.PageResolveLocatorHandlerNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageUnregisterLocatorHandlerParams = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.PageUnregisterLocatorHandlerResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageReloadParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    waitUntil: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent"))
  });
  _validatorPrimitives.scheme.PageReloadResult = (0, _validatorPrimitives.tObject)({
    response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"]))
  });
  _validatorPrimitives.scheme.PageExpectScreenshotParams = (0, _validatorPrimitives.tObject)({
    expected: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    isNot: _validatorPrimitives.tBoolean,
    locator: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      frame: (0, _validatorPrimitives.tChannel)(["Frame"]),
      selector: _validatorPrimitives.tString
    })),
    comparator: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    maxDiffPixels: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    maxDiffPixelRatio: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    threshold: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    fullPage: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    clip: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Rect")),
    omitBackground: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    caret: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["hide", "initial"])),
    animations: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["disabled", "allow"])),
    scale: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["css", "device"])),
    mask: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      frame: (0, _validatorPrimitives.tChannel)(["Frame"]),
      selector: _validatorPrimitives.tString
    }))),
    maskColor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    style: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.PageExpectScreenshotResult = (0, _validatorPrimitives.tObject)({
    diff: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    errorMessage: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    actual: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    previous: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    log: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString))
  });
  _validatorPrimitives.scheme.PageScreenshotParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    type: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["png", "jpeg"])),
    quality: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    fullPage: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    clip: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Rect")),
    omitBackground: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    caret: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["hide", "initial"])),
    animations: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["disabled", "allow"])),
    scale: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["css", "device"])),
    mask: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      frame: (0, _validatorPrimitives.tChannel)(["Frame"]),
      selector: _validatorPrimitives.tString
    }))),
    maskColor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    style: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.PageScreenshotResult = (0, _validatorPrimitives.tObject)({
    binary: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.PageSetExtraHTTPHeadersParams = (0, _validatorPrimitives.tObject)({
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
  });
  _validatorPrimitives.scheme.PageSetExtraHTTPHeadersResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageSetNetworkInterceptionPatternsParams = (0, _validatorPrimitives.tObject)({
    patterns: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      glob: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      regexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      regexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    }))
  });
  _validatorPrimitives.scheme.PageSetNetworkInterceptionPatternsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageSetViewportSizeParams = (0, _validatorPrimitives.tObject)({
    viewportSize: (0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })
  });
  _validatorPrimitives.scheme.PageSetViewportSizeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageKeyboardDownParams = (0, _validatorPrimitives.tObject)({
    key: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.PageKeyboardDownResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageKeyboardUpParams = (0, _validatorPrimitives.tObject)({
    key: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.PageKeyboardUpResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageKeyboardInsertTextParams = (0, _validatorPrimitives.tObject)({
    text: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.PageKeyboardInsertTextResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageKeyboardTypeParams = (0, _validatorPrimitives.tObject)({
    text: _validatorPrimitives.tString,
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageKeyboardTypeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageKeyboardPressParams = (0, _validatorPrimitives.tObject)({
    key: _validatorPrimitives.tString,
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageKeyboardPressResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageMouseMoveParams = (0, _validatorPrimitives.tObject)({
    x: _validatorPrimitives.tNumber,
    y: _validatorPrimitives.tNumber,
    steps: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageMouseMoveResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageMouseDownParams = (0, _validatorPrimitives.tObject)({
    button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
    clickCount: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageMouseDownResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageMouseUpParams = (0, _validatorPrimitives.tObject)({
    button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
    clickCount: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageMouseUpResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageMouseClickParams = (0, _validatorPrimitives.tObject)({
    x: _validatorPrimitives.tNumber,
    y: _validatorPrimitives.tNumber,
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
    clickCount: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageMouseClickResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageMouseWheelParams = (0, _validatorPrimitives.tObject)({
    deltaX: _validatorPrimitives.tNumber,
    deltaY: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.PageMouseWheelResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageTouchscreenTapParams = (0, _validatorPrimitives.tObject)({
    x: _validatorPrimitives.tNumber,
    y: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.PageTouchscreenTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageAccessibilitySnapshotParams = (0, _validatorPrimitives.tObject)({
    interestingOnly: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    root: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
  });
  _validatorPrimitives.scheme.PageAccessibilitySnapshotResult = (0, _validatorPrimitives.tObject)({
    rootAXNode: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("AXNode"))
  });
  _validatorPrimitives.scheme.PagePdfParams = (0, _validatorPrimitives.tObject)({
    scale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    displayHeaderFooter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    headerTemplate: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    footerTemplate: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    printBackground: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    landscape: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    pageRanges: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    format: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    width: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    height: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    preferCSSPageSize: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    margin: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      top: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      bottom: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      left: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      right: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    tagged: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    outline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.PagePdfResult = (0, _validatorPrimitives.tObject)({
    pdf: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.PageStartJSCoverageParams = (0, _validatorPrimitives.tObject)({
    resetOnNavigation: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    reportAnonymousScripts: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.PageStartJSCoverageResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageStopJSCoverageParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageStopJSCoverageResult = (0, _validatorPrimitives.tObject)({
    entries: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      url: _validatorPrimitives.tString,
      scriptId: _validatorPrimitives.tString,
      source: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      functions: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        functionName: _validatorPrimitives.tString,
        isBlockCoverage: _validatorPrimitives.tBoolean,
        ranges: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
          startOffset: _validatorPrimitives.tNumber,
          endOffset: _validatorPrimitives.tNumber,
          count: _validatorPrimitives.tNumber
        }))
      }))
    }))
  });
  _validatorPrimitives.scheme.PageStartCSSCoverageParams = (0, _validatorPrimitives.tObject)({
    resetOnNavigation: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.PageStartCSSCoverageResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageStopCSSCoverageParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageStopCSSCoverageResult = (0, _validatorPrimitives.tObject)({
    entries: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      url: _validatorPrimitives.tString,
      text: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      ranges: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        start: _validatorPrimitives.tNumber,
        end: _validatorPrimitives.tNumber
      }))
    }))
  });
  _validatorPrimitives.scheme.PageBringToFrontParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageBringToFrontResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageUpdateSubscriptionParams = (0, _validatorPrimitives.tObject)({
    event: (0, _validatorPrimitives.tEnum)(["console", "dialog", "fileChooser", "request", "response", "requestFinished", "requestFailed"]),
    enabled: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.PageUpdateSubscriptionResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameInitializer = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString,
    name: _validatorPrimitives.tString,
    parentFrame: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Frame"])),
    loadStates: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("LifecycleEvent"))
  });
  _validatorPrimitives.scheme.FrameLoadstateEvent = (0, _validatorPrimitives.tObject)({
    add: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent")),
    remove: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent"))
  });
  _validatorPrimitives.scheme.FrameNavigatedEvent = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString,
    name: _validatorPrimitives.tString,
    newDocument: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      request: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Request"]))
    })),
    error: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FrameEvalOnSelectorParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.FrameEvalOnSelectorResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.FrameEvalOnSelectorAllParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.FrameEvalOnSelectorAllResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.FrameAddScriptTagParams = (0, _validatorPrimitives.tObject)({
    url: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    content: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    type: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FrameAddScriptTagResult = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tChannel)(["ElementHandle"])
  });
  _validatorPrimitives.scheme.FrameAddStyleTagParams = (0, _validatorPrimitives.tObject)({
    url: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    content: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FrameAddStyleTagResult = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tChannel)(["ElementHandle"])
  });
  _validatorPrimitives.scheme.FrameBlurParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameBlurResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameCheckParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameCheckResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameClickParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
    clickCount: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameClickResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameContentParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameContentResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameDragAndDropParams = (0, _validatorPrimitives.tObject)({
    source: _validatorPrimitives.tString,
    target: _validatorPrimitives.tString,
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    sourcePosition: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    targetPosition: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameDragAndDropResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameDblclickParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameDblclickResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameDispatchEventParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    type: _validatorPrimitives.tString,
    eventInit: (0, _validatorPrimitives.tType)("SerializedArgument"),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameDispatchEventResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameEvaluateExpressionParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    exposeUtilityScript: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.FrameEvaluateExpressionResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.FrameEvaluateExpressionHandleParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.FrameEvaluateExpressionHandleResult = (0, _validatorPrimitives.tObject)({
    handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
  });
  _validatorPrimitives.scheme.FrameFillParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    value: _validatorPrimitives.tString,
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameFillResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameFocusParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameFocusResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameFrameElementParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameFrameElementResult = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tChannel)(["ElementHandle"])
  });
  _validatorPrimitives.scheme.FrameHighlightParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameHighlightResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameGetAttributeParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    name: _validatorPrimitives.tString,
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameGetAttributeResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FrameGotoParams = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString,
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    waitUntil: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent")),
    referer: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FrameGotoResult = (0, _validatorPrimitives.tObject)({
    response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"]))
  });
  _validatorPrimitives.scheme.FrameHoverParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameHoverResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameInnerHTMLParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameInnerHTMLResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameInnerTextParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameInnerTextResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameInputValueParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameInputValueResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameIsCheckedParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameIsCheckedResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.FrameIsDisabledParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameIsDisabledResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.FrameIsEnabledParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameIsEnabledResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.FrameIsHiddenParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameIsHiddenResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.FrameIsVisibleParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameIsVisibleResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.FrameIsEditableParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameIsEditableResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.FramePressParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    key: _validatorPrimitives.tString,
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FramePressResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameQuerySelectorParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameQuerySelectorResult = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
  });
  _validatorPrimitives.scheme.FrameQuerySelectorAllParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameQuerySelectorAllResult = (0, _validatorPrimitives.tObject)({
    elements: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
  });
  _validatorPrimitives.scheme.FrameQueryCountParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameQueryCountResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.FrameSelectOptionParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    elements: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))),
    options: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      valueOrLabel: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      label: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      index: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    }))),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameSelectOptionResult = (0, _validatorPrimitives.tObject)({
    values: (0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FrameSetContentParams = (0, _validatorPrimitives.tObject)({
    html: _validatorPrimitives.tString,
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    waitUntil: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent"))
  });
  _validatorPrimitives.scheme.FrameSetContentResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameSetInputFilesParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    payloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      mimeType: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      buffer: _validatorPrimitives.tBinary
    }))),
    localPaths: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    streams: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["WritableStream"]))),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameSetInputFilesResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameTapParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameTextContentParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameTextContentResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FrameTitleParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameTitleResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameTypeParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    text: _validatorPrimitives.tString,
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameTypeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameUncheckParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameUncheckResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameWaitForTimeoutParams = (0, _validatorPrimitives.tObject)({
    timeout: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.FrameWaitForTimeoutResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameWaitForFunctionParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument"),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    pollingInterval: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameWaitForFunctionResult = (0, _validatorPrimitives.tObject)({
    handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
  });
  _validatorPrimitives.scheme.FrameWaitForSelectorParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    state: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["attached", "detached", "visible", "hidden"])),
    omitReturnValue: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameWaitForSelectorResult = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
  });
  _validatorPrimitives.scheme.FrameExpectParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    expression: _validatorPrimitives.tString,
    expressionArg: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
    expectedText: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("ExpectedTextValue"))),
    expectedNumber: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    expectedValue: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("SerializedArgument")),
    useInnerText: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    isNot: _validatorPrimitives.tBoolean,
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameExpectResult = (0, _validatorPrimitives.tObject)({
    matches: _validatorPrimitives.tBoolean,
    received: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("SerializedValue")),
    timedOut: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    log: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString))
  });
  _validatorPrimitives.scheme.WorkerInitializer = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.WorkerCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WorkerEvaluateExpressionParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.WorkerEvaluateExpressionResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.WorkerEvaluateExpressionHandleParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.WorkerEvaluateExpressionHandleResult = (0, _validatorPrimitives.tObject)({
    handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
  });
  _validatorPrimitives.scheme.JSHandleInitializer = (0, _validatorPrimitives.tObject)({
    preview: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.JSHandlePreviewUpdatedEvent = (0, _validatorPrimitives.tObject)({
    preview: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandlePreviewUpdatedEvent = (0, _validatorPrimitives.tType)("JSHandlePreviewUpdatedEvent");
  _validatorPrimitives.scheme.JSHandleDisposeParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleDisposeParams = (0, _validatorPrimitives.tType)("JSHandleDisposeParams");
  _validatorPrimitives.scheme.JSHandleDisposeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleDisposeResult = (0, _validatorPrimitives.tType)("JSHandleDisposeResult");
  _validatorPrimitives.scheme.JSHandleEvaluateExpressionParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.ElementHandleEvaluateExpressionParams = (0, _validatorPrimitives.tType)("JSHandleEvaluateExpressionParams");
  _validatorPrimitives.scheme.JSHandleEvaluateExpressionResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.ElementHandleEvaluateExpressionResult = (0, _validatorPrimitives.tType)("JSHandleEvaluateExpressionResult");
  _validatorPrimitives.scheme.JSHandleEvaluateExpressionHandleParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.ElementHandleEvaluateExpressionHandleParams = (0, _validatorPrimitives.tType)("JSHandleEvaluateExpressionHandleParams");
  _validatorPrimitives.scheme.JSHandleEvaluateExpressionHandleResult = (0, _validatorPrimitives.tObject)({
    handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
  });
  _validatorPrimitives.scheme.ElementHandleEvaluateExpressionHandleResult = (0, _validatorPrimitives.tType)("JSHandleEvaluateExpressionHandleResult");
  _validatorPrimitives.scheme.JSHandleGetPropertyListParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleGetPropertyListParams = (0, _validatorPrimitives.tType)("JSHandleGetPropertyListParams");
  _validatorPrimitives.scheme.JSHandleGetPropertyListResult = (0, _validatorPrimitives.tObject)({
    properties: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      value: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
    }))
  });
  _validatorPrimitives.scheme.ElementHandleGetPropertyListResult = (0, _validatorPrimitives.tType)("JSHandleGetPropertyListResult");
  _validatorPrimitives.scheme.JSHandleGetPropertyParams = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandleGetPropertyParams = (0, _validatorPrimitives.tType)("JSHandleGetPropertyParams");
  _validatorPrimitives.scheme.JSHandleGetPropertyResult = (0, _validatorPrimitives.tObject)({
    handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
  });
  _validatorPrimitives.scheme.ElementHandleGetPropertyResult = (0, _validatorPrimitives.tType)("JSHandleGetPropertyResult");
  _validatorPrimitives.scheme.JSHandleJsonValueParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleJsonValueParams = (0, _validatorPrimitives.tType)("JSHandleJsonValueParams");
  _validatorPrimitives.scheme.JSHandleJsonValueResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.ElementHandleJsonValueResult = (0, _validatorPrimitives.tType)("JSHandleJsonValueResult");
  _validatorPrimitives.scheme.JSHandleObjectCountParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleObjectCountParams = (0, _validatorPrimitives.tType)("JSHandleObjectCountParams");
  _validatorPrimitives.scheme.JSHandleObjectCountResult = (0, _validatorPrimitives.tObject)({
    count: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.ElementHandleObjectCountResult = (0, _validatorPrimitives.tType)("JSHandleObjectCountResult");
  _validatorPrimitives.scheme.ElementHandleInitializer = (0, _validatorPrimitives.tObject)({
    preview: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandleEvalOnSelectorParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.ElementHandleEvalOnSelectorResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.ElementHandleEvalOnSelectorAllParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.ElementHandleEvalOnSelectorAllResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.ElementHandleBoundingBoxParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleBoundingBoxResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Rect"))
  });
  _validatorPrimitives.scheme.ElementHandleCheckParams = (0, _validatorPrimitives.tObject)({
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleCheckResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleClickParams = (0, _validatorPrimitives.tObject)({
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
    clickCount: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleClickResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleContentFrameParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleContentFrameResult = (0, _validatorPrimitives.tObject)({
    frame: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Frame"]))
  });
  _validatorPrimitives.scheme.ElementHandleDblclickParams = (0, _validatorPrimitives.tObject)({
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleDblclickResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleDispatchEventParams = (0, _validatorPrimitives.tObject)({
    type: _validatorPrimitives.tString,
    eventInit: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.ElementHandleDispatchEventResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleFillParams = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString,
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleFillResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleFocusParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleFocusResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleGetAttributeParams = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandleGetAttributeResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.ElementHandleHoverParams = (0, _validatorPrimitives.tObject)({
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleHoverResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleInnerHTMLParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleInnerHTMLResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandleInnerTextParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleInnerTextResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandleInputValueParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleInputValueResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandleIsCheckedParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleIsCheckedResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ElementHandleIsDisabledParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleIsDisabledResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ElementHandleIsEditableParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleIsEditableResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ElementHandleIsEnabledParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleIsEnabledResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ElementHandleIsHiddenParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleIsHiddenResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ElementHandleIsVisibleParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleIsVisibleResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ElementHandleOwnerFrameParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleOwnerFrameResult = (0, _validatorPrimitives.tObject)({
    frame: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Frame"]))
  });
  _validatorPrimitives.scheme.ElementHandlePressParams = (0, _validatorPrimitives.tObject)({
    key: _validatorPrimitives.tString,
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandlePressResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleQuerySelectorParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleQuerySelectorResult = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
  });
  _validatorPrimitives.scheme.ElementHandleQuerySelectorAllParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandleQuerySelectorAllResult = (0, _validatorPrimitives.tObject)({
    elements: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
  });
  _validatorPrimitives.scheme.ElementHandleScreenshotParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    type: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["png", "jpeg"])),
    quality: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    omitBackground: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    caret: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["hide", "initial"])),
    animations: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["disabled", "allow"])),
    scale: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["css", "device"])),
    mask: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      frame: (0, _validatorPrimitives.tChannel)(["Frame"]),
      selector: _validatorPrimitives.tString
    }))),
    maskColor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    style: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.ElementHandleScreenshotResult = (0, _validatorPrimitives.tObject)({
    binary: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.ElementHandleScrollIntoViewIfNeededParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.ElementHandleScrollIntoViewIfNeededResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleSelectOptionParams = (0, _validatorPrimitives.tObject)({
    elements: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))),
    options: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      valueOrLabel: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      label: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      index: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    }))),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleSelectOptionResult = (0, _validatorPrimitives.tObject)({
    values: (0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.ElementHandleSelectTextParams = (0, _validatorPrimitives.tObject)({
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.ElementHandleSelectTextResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleSetInputFilesParams = (0, _validatorPrimitives.tObject)({
    payloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      mimeType: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      buffer: _validatorPrimitives.tBinary
    }))),
    localPaths: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    streams: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["WritableStream"]))),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleSetInputFilesResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleTapParams = (0, _validatorPrimitives.tObject)({
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleTextContentParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleTextContentResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.ElementHandleTypeParams = (0, _validatorPrimitives.tObject)({
    text: _validatorPrimitives.tString,
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.ElementHandleTypeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleUncheckParams = (0, _validatorPrimitives.tObject)({
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleUncheckResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleWaitForElementStateParams = (0, _validatorPrimitives.tObject)({
    state: (0, _validatorPrimitives.tEnum)(["visible", "hidden", "stable", "enabled", "disabled", "editable"]),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.ElementHandleWaitForElementStateResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleWaitForSelectorParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    state: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["attached", "detached", "visible", "hidden"]))
  });
  _validatorPrimitives.scheme.ElementHandleWaitForSelectorResult = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
  });
  _validatorPrimitives.scheme.RequestInitializer = (0, _validatorPrimitives.tObject)({
    frame: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Frame"])),
    serviceWorker: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Worker"])),
    url: _validatorPrimitives.tString,
    resourceType: _validatorPrimitives.tString,
    method: _validatorPrimitives.tString,
    postData: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue")),
    isNavigationRequest: _validatorPrimitives.tBoolean,
    redirectedFrom: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Request"]))
  });
  _validatorPrimitives.scheme.RequestResponseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.RequestResponseResult = (0, _validatorPrimitives.tObject)({
    response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"]))
  });
  _validatorPrimitives.scheme.RequestRawRequestHeadersParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.RequestRawRequestHeadersResult = (0, _validatorPrimitives.tObject)({
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
  });
  _validatorPrimitives.scheme.RouteInitializer = (0, _validatorPrimitives.tObject)({
    request: (0, _validatorPrimitives.tChannel)(["Request"])
  });
  _validatorPrimitives.scheme.RouteRedirectNavigationRequestParams = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.RouteRedirectNavigationRequestResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.RouteAbortParams = (0, _validatorPrimitives.tObject)({
    errorCode: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    requestUrl: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.RouteAbortResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.RouteContinueParams = (0, _validatorPrimitives.tObject)({
    url: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    method: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    headers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    postData: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    requestUrl: _validatorPrimitives.tString,
    isFallback: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.RouteContinueResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.RouteFulfillParams = (0, _validatorPrimitives.tObject)({
    status: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    headers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    body: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    isBase64: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    fetchResponseUid: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    requestUrl: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.RouteFulfillResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ResourceTiming = (0, _validatorPrimitives.tObject)({
    startTime: _validatorPrimitives.tNumber,
    domainLookupStart: _validatorPrimitives.tNumber,
    domainLookupEnd: _validatorPrimitives.tNumber,
    connectStart: _validatorPrimitives.tNumber,
    secureConnectionStart: _validatorPrimitives.tNumber,
    connectEnd: _validatorPrimitives.tNumber,
    requestStart: _validatorPrimitives.tNumber,
    responseStart: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.ResponseInitializer = (0, _validatorPrimitives.tObject)({
    request: (0, _validatorPrimitives.tChannel)(["Request"]),
    url: _validatorPrimitives.tString,
    status: _validatorPrimitives.tNumber,
    statusText: _validatorPrimitives.tString,
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue")),
    timing: (0, _validatorPrimitives.tType)("ResourceTiming"),
    fromServiceWorker: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ResponseBodyParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ResponseBodyResult = (0, _validatorPrimitives.tObject)({
    binary: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.ResponseSecurityDetailsParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ResponseSecurityDetailsResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("SecurityDetails"))
  });
  _validatorPrimitives.scheme.ResponseServerAddrParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ResponseServerAddrResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RemoteAddr"))
  });
  _validatorPrimitives.scheme.ResponseRawResponseHeadersParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ResponseRawResponseHeadersResult = (0, _validatorPrimitives.tObject)({
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
  });
  _validatorPrimitives.scheme.ResponseSizesParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ResponseSizesResult = (0, _validatorPrimitives.tObject)({
    sizes: (0, _validatorPrimitives.tType)("RequestSizes")
  });
  _validatorPrimitives.scheme.SecurityDetails = (0, _validatorPrimitives.tObject)({
    issuer: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    protocol: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    subjectName: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    validFrom: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    validTo: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.RequestSizes = (0, _validatorPrimitives.tObject)({
    requestBodySize: _validatorPrimitives.tNumber,
    requestHeadersSize: _validatorPrimitives.tNumber,
    responseBodySize: _validatorPrimitives.tNumber,
    responseHeadersSize: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.RemoteAddr = (0, _validatorPrimitives.tObject)({
    ipAddress: _validatorPrimitives.tString,
    port: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.WebSocketInitializer = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.WebSocketOpenEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WebSocketFrameSentEvent = (0, _validatorPrimitives.tObject)({
    opcode: _validatorPrimitives.tNumber,
    data: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.WebSocketFrameReceivedEvent = (0, _validatorPrimitives.tObject)({
    opcode: _validatorPrimitives.tNumber,
    data: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.WebSocketSocketErrorEvent = (0, _validatorPrimitives.tObject)({
    error: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.WebSocketCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BindingCallInitializer = (0, _validatorPrimitives.tObject)({
    frame: (0, _validatorPrimitives.tChannel)(["Frame"]),
    name: _validatorPrimitives.tString,
    args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("SerializedValue"))),
    handle: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"]))
  });
  _validatorPrimitives.scheme.BindingCallRejectParams = (0, _validatorPrimitives.tObject)({
    error: (0, _validatorPrimitives.tType)("SerializedError")
  });
  _validatorPrimitives.scheme.BindingCallRejectResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BindingCallResolveParams = (0, _validatorPrimitives.tObject)({
    result: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.BindingCallResolveResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DialogInitializer = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"])),
    type: _validatorPrimitives.tString,
    message: _validatorPrimitives.tString,
    defaultValue: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.DialogAcceptParams = (0, _validatorPrimitives.tObject)({
    promptText: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.DialogAcceptResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DialogDismissParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DialogDismissResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.TracingInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.TracingTracingStartParams = (0, _validatorPrimitives.tObject)({
    name: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    snapshots: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    screenshots: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    live: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.TracingTracingStartResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.TracingTracingStartChunkParams = (0, _validatorPrimitives.tObject)({
    name: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    title: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.TracingTracingStartChunkResult = (0, _validatorPrimitives.tObject)({
    traceName: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.TracingTracingStopChunkParams = (0, _validatorPrimitives.tObject)({
    mode: (0, _validatorPrimitives.tEnum)(["archive", "discard", "entries"])
  });
  _validatorPrimitives.scheme.TracingTracingStopChunkResult = (0, _validatorPrimitives.tObject)({
    artifact: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Artifact"])),
    entries: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue")))
  });
  _validatorPrimitives.scheme.TracingTracingStopParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.TracingTracingStopResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactInitializer = (0, _validatorPrimitives.tObject)({
    absolutePath: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ArtifactPathAfterFinishedParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactPathAfterFinishedResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ArtifactSaveAsParams = (0, _validatorPrimitives.tObject)({
    path: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ArtifactSaveAsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactSaveAsStreamParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactSaveAsStreamResult = (0, _validatorPrimitives.tObject)({
    stream: (0, _validatorPrimitives.tChannel)(["Stream"])
  });
  _validatorPrimitives.scheme.ArtifactFailureParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactFailureResult = (0, _validatorPrimitives.tObject)({
    error: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.ArtifactStreamParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactStreamResult = (0, _validatorPrimitives.tObject)({
    stream: (0, _validatorPrimitives.tChannel)(["Stream"])
  });
  _validatorPrimitives.scheme.ArtifactCancelParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactCancelResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactDeleteParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactDeleteResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.StreamInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.StreamReadParams = (0, _validatorPrimitives.tObject)({
    size: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.StreamReadResult = (0, _validatorPrimitives.tObject)({
    binary: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.StreamCloseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.StreamCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WritableStreamInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WritableStreamWriteParams = (0, _validatorPrimitives.tObject)({
    binary: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.WritableStreamWriteResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WritableStreamCloseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WritableStreamCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.CDPSessionInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.CDPSessionEventEvent = (0, _validatorPrimitives.tObject)({
    method: _validatorPrimitives.tString,
    params: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny)
  });
  _validatorPrimitives.scheme.CDPSessionSendParams = (0, _validatorPrimitives.tObject)({
    method: _validatorPrimitives.tString,
    params: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny)
  });
  _validatorPrimitives.scheme.CDPSessionSendResult = (0, _validatorPrimitives.tObject)({
    result: _validatorPrimitives.tAny
  });
  _validatorPrimitives.scheme.CDPSessionDetachParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.CDPSessionDetachResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElectronInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElectronLaunchParams = (0, _validatorPrimitives.tObject)({
    executablePath: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    cwd: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    env: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    acceptDownloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
    bypassCSP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
    extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      longitude: _validatorPrimitives.tNumber,
      latitude: _validatorPrimitives.tNumber,
      accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    })),
    httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      username: _validatorPrimitives.tString,
      password: _validatorPrimitives.tString,
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    locale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    offline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    recordHar: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RecordHarOptions")),
    recordVideo: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      dir: _validatorPrimitives.tString,
      size: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      }))
    })),
    strictSelectors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timezoneId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    tracesDir: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.ElectronLaunchResult = (0, _validatorPrimitives.tObject)({
    electronApplication: (0, _validatorPrimitives.tChannel)(["ElectronApplication"])
  });
  _validatorPrimitives.scheme.ElectronApplicationInitializer = (0, _validatorPrimitives.tObject)({
    context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
  });
  _validatorPrimitives.scheme.ElectronApplicationCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElectronApplicationConsoleEvent = (0, _validatorPrimitives.tObject)({
    type: _validatorPrimitives.tString,
    text: _validatorPrimitives.tString,
    args: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])),
    location: (0, _validatorPrimitives.tObject)({
      url: _validatorPrimitives.tString,
      lineNumber: _validatorPrimitives.tNumber,
      columnNumber: _validatorPrimitives.tNumber
    })
  });
  _validatorPrimitives.scheme.ElectronApplicationBrowserWindowParams = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tChannel)(["Page"])
  });
  _validatorPrimitives.scheme.ElectronApplicationBrowserWindowResult = (0, _validatorPrimitives.tObject)({
    handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
  });
  _validatorPrimitives.scheme.ElectronApplicationEvaluateExpressionParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.ElectronApplicationEvaluateExpressionResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.ElectronApplicationEvaluateExpressionHandleParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.ElectronApplicationEvaluateExpressionHandleResult = (0, _validatorPrimitives.tObject)({
    handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
  });
  _validatorPrimitives.scheme.ElectronApplicationUpdateSubscriptionParams = (0, _validatorPrimitives.tObject)({
    event: (0, _validatorPrimitives.tEnum)(["console"]),
    enabled: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ElectronApplicationUpdateSubscriptionResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElectronApplicationCloseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElectronApplicationCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDevicesParams = (0, _validatorPrimitives.tObject)({
    host: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    port: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    omitDriverInstall: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.AndroidDevicesResult = (0, _validatorPrimitives.tObject)({
    devices: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["AndroidDevice"]))
  });
  _validatorPrimitives.scheme.AndroidSetDefaultTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
    timeout: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.AndroidSetDefaultTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidSocketInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidSocketDataEvent = (0, _validatorPrimitives.tObject)({
    data: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.AndroidSocketCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidSocketWriteParams = (0, _validatorPrimitives.tObject)({
    data: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.AndroidSocketWriteResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidSocketCloseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidSocketCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceInitializer = (0, _validatorPrimitives.tObject)({
    model: _validatorPrimitives.tString,
    serial: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidDeviceCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceWebViewAddedEvent = (0, _validatorPrimitives.tObject)({
    webView: (0, _validatorPrimitives.tType)("AndroidWebView")
  });
  _validatorPrimitives.scheme.AndroidDeviceWebViewRemovedEvent = (0, _validatorPrimitives.tObject)({
    socketName: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidDeviceWaitParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    state: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["gone"])),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceWaitResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceFillParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    text: _validatorPrimitives.tString,
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceFillResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceTapParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    duration: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceDragParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    dest: (0, _validatorPrimitives.tType)("Point"),
    speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceDragResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceFlingParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    direction: (0, _validatorPrimitives.tEnum)(["up", "down", "left", "right"]),
    speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceFlingResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceLongTapParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceLongTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDevicePinchCloseParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    percent: _validatorPrimitives.tNumber,
    speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDevicePinchCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDevicePinchOpenParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    percent: _validatorPrimitives.tNumber,
    speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDevicePinchOpenResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceScrollParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    direction: (0, _validatorPrimitives.tEnum)(["up", "down", "left", "right"]),
    percent: _validatorPrimitives.tNumber,
    speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceScrollResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceSwipeParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    direction: (0, _validatorPrimitives.tEnum)(["up", "down", "left", "right"]),
    percent: _validatorPrimitives.tNumber,
    speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceSwipeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceInfoParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector")
  });
  _validatorPrimitives.scheme.AndroidDeviceInfoResult = (0, _validatorPrimitives.tObject)({
    info: (0, _validatorPrimitives.tType)("AndroidElementInfo")
  });
  _validatorPrimitives.scheme.AndroidDeviceScreenshotParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceScreenshotResult = (0, _validatorPrimitives.tObject)({
    binary: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.AndroidDeviceInputTypeParams = (0, _validatorPrimitives.tObject)({
    text: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidDeviceInputTypeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceInputPressParams = (0, _validatorPrimitives.tObject)({
    key: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidDeviceInputPressResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceInputTapParams = (0, _validatorPrimitives.tObject)({
    point: (0, _validatorPrimitives.tType)("Point")
  });
  _validatorPrimitives.scheme.AndroidDeviceInputTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceInputSwipeParams = (0, _validatorPrimitives.tObject)({
    segments: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("Point")),
    steps: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.AndroidDeviceInputSwipeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceInputDragParams = (0, _validatorPrimitives.tObject)({
    from: (0, _validatorPrimitives.tType)("Point"),
    to: (0, _validatorPrimitives.tType)("Point"),
    steps: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.AndroidDeviceInputDragResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceLaunchBrowserParams = (0, _validatorPrimitives.tObject)({
    noDefaultViewport: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    viewport: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    screen: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    javaScriptEnabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    bypassCSP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    userAgent: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    locale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    timezoneId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      longitude: _validatorPrimitives.tNumber,
      latitude: _validatorPrimitives.tNumber,
      accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    })),
    permissions: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    offline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      username: _validatorPrimitives.tString,
      password: _validatorPrimitives.tString,
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    deviceScaleFactor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    isMobile: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    hasTouch: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
    reducedMotion: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
    forcedColors: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["active", "none", "no-override"])),
    acceptDownloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
    baseURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    recordVideo: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      dir: _validatorPrimitives.tString,
      size: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      }))
    })),
    recordHar: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RecordHarOptions")),
    strictSelectors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    serviceWorkers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["allow", "block"])),
    pkg: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      server: _validatorPrimitives.tString,
      bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    }))
  });
  _validatorPrimitives.scheme.AndroidDeviceLaunchBrowserResult = (0, _validatorPrimitives.tObject)({
    context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
  });
  _validatorPrimitives.scheme.AndroidDeviceOpenParams = (0, _validatorPrimitives.tObject)({
    command: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidDeviceOpenResult = (0, _validatorPrimitives.tObject)({
    socket: (0, _validatorPrimitives.tChannel)(["AndroidSocket"])
  });
  _validatorPrimitives.scheme.AndroidDeviceShellParams = (0, _validatorPrimitives.tObject)({
    command: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidDeviceShellResult = (0, _validatorPrimitives.tObject)({
    result: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.AndroidDeviceInstallApkParams = (0, _validatorPrimitives.tObject)({
    file: _validatorPrimitives.tBinary,
    args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString))
  });
  _validatorPrimitives.scheme.AndroidDeviceInstallApkResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDevicePushParams = (0, _validatorPrimitives.tObject)({
    file: _validatorPrimitives.tBinary,
    path: _validatorPrimitives.tString,
    mode: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDevicePushResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceSetDefaultTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
    timeout: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.AndroidDeviceSetDefaultTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceConnectToWebViewParams = (0, _validatorPrimitives.tObject)({
    socketName: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidDeviceConnectToWebViewResult = (0, _validatorPrimitives.tObject)({
    context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
  });
  _validatorPrimitives.scheme.AndroidDeviceCloseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidWebView = (0, _validatorPrimitives.tObject)({
    pid: _validatorPrimitives.tNumber,
    pkg: _validatorPrimitives.tString,
    socketName: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidSelector = (0, _validatorPrimitives.tObject)({
    checkable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    checked: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    clazz: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    clickable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    depth: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    desc: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    enabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    focusable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    focused: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    hasChild: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      selector: (0, _validatorPrimitives.tType)("AndroidSelector")
    })),
    hasDescendant: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
      maxDepth: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    })),
    longClickable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    pkg: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    res: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    scrollable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    selected: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    text: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.AndroidElementInfo = (0, _validatorPrimitives.tObject)({
    children: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("AndroidElementInfo"))),
    clazz: _validatorPrimitives.tString,
    desc: _validatorPrimitives.tString,
    res: _validatorPrimitives.tString,
    pkg: _validatorPrimitives.tString,
    text: _validatorPrimitives.tString,
    bounds: (0, _validatorPrimitives.tType)("Rect"),
    checkable: _validatorPrimitives.tBoolean,
    checked: _validatorPrimitives.tBoolean,
    clickable: _validatorPrimitives.tBoolean,
    enabled: _validatorPrimitives.tBoolean,
    focusable: _validatorPrimitives.tBoolean,
    focused: _validatorPrimitives.tBoolean,
    longClickable: _validatorPrimitives.tBoolean,
    scrollable: _validatorPrimitives.tBoolean,
    selected: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.JsonPipeInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.JsonPipeMessageEvent = (0, _validatorPrimitives.tObject)({
    message: _validatorPrimitives.tAny
  });
  _validatorPrimitives.scheme.JsonPipeClosedEvent = (0, _validatorPrimitives.tObject)({
    reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.JsonPipeSendParams = (0, _validatorPrimitives.tObject)({
    message: _validatorPrimitives.tAny
  });
  _validatorPrimitives.scheme.JsonPipeSendResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.JsonPipeCloseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.JsonPipeCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
});

// node_modules/playwright-core/lib/protocol/serializers.js
var require_serializers = __commonJS((exports) => {
  var parseSerializedValue = function(value, handles) {
    return innerParseSerializedValue(value, handles, new Map);
  };
  var innerParseSerializedValue = function(value, handles, refs) {
    if (value.ref !== undefined)
      return refs.get(value.ref);
    if (value.n !== undefined)
      return value.n;
    if (value.s !== undefined)
      return value.s;
    if (value.b !== undefined)
      return value.b;
    if (value.v !== undefined) {
      if (value.v === "undefined")
        return;
      if (value.v === "null")
        return null;
      if (value.v === "NaN")
        return NaN;
      if (value.v === "Infinity")
        return Infinity;
      if (value.v === "-Infinity")
        return (-Infinity);
      if (value.v === "-0")
        return -0;
    }
    if (value.d !== undefined)
      return new Date(value.d);
    if (value.u !== undefined)
      return new URL(value.u);
    if (value.bi !== undefined)
      return BigInt(value.bi);
    if (value.r !== undefined)
      return new RegExp(value.r.p, value.r.f);
    if (value.a !== undefined) {
      const result = [];
      refs.set(value.id, result);
      for (const v of value.a)
        result.push(innerParseSerializedValue(v, handles, refs));
      return result;
    }
    if (value.o !== undefined) {
      const result = {};
      refs.set(value.id, result);
      for (const {
        k,
        v
      } of value.o)
        result[k] = innerParseSerializedValue(v, handles, refs);
      return result;
    }
    if (value.h !== undefined) {
      if (handles === undefined)
        throw new Error("Unexpected handle");
      return handles[value.h];
    }
    throw new Error("Unexpected value");
  };
  var serializeValue = function(value, handleSerializer) {
    return innerSerializeValue(value, handleSerializer, {
      lastId: 0,
      visited: new Map
    });
  };
  var innerSerializeValue = function(value, handleSerializer, visitorInfo) {
    const handle = handleSerializer(value);
    if ("fallThrough" in handle)
      value = handle.fallThrough;
    else
      return handle;
    if (typeof value === "symbol")
      return {
        v: "undefined"
      };
    if (Object.is(value, undefined))
      return {
        v: "undefined"
      };
    if (Object.is(value, null))
      return {
        v: "null"
      };
    if (Object.is(value, NaN))
      return {
        v: "NaN"
      };
    if (Object.is(value, Infinity))
      return {
        v: "Infinity"
      };
    if (Object.is(value, (-Infinity)))
      return {
        v: "-Infinity"
      };
    if (Object.is(value, -0))
      return {
        v: "-0"
      };
    if (typeof value === "boolean")
      return {
        b: value
      };
    if (typeof value === "number")
      return {
        n: value
      };
    if (typeof value === "string")
      return {
        s: value
      };
    if (typeof value === "bigint")
      return {
        bi: value.toString()
      };
    if (isError(value)) {
      const error = value;
      if ("captureStackTrace" in globalThis.Error) {
        return {
          s: error.stack || ""
        };
      }
      return {
        s: `${error.name}: ${error.message}\n${error.stack}`
      };
    }
    if (isDate(value))
      return {
        d: value.toJSON()
      };
    if (isURL(value))
      return {
        u: value.toJSON()
      };
    if (isRegExp(value))
      return {
        r: {
          p: value.source,
          f: value.flags
        }
      };
    const id = visitorInfo.visited.get(value);
    if (id)
      return {
        ref: id
      };
    if (Array.isArray(value)) {
      const a = [];
      const id2 = ++visitorInfo.lastId;
      visitorInfo.visited.set(value, id2);
      for (let i = 0;i < value.length; ++i)
        a.push(innerSerializeValue(value[i], handleSerializer, visitorInfo));
      return {
        a,
        id: id2
      };
    }
    if (typeof value === "object") {
      const o = [];
      const id2 = ++visitorInfo.lastId;
      visitorInfo.visited.set(value, id2);
      for (const name of Object.keys(value))
        o.push({
          k: name,
          v: innerSerializeValue(value[name], handleSerializer, visitorInfo)
        });
      return {
        o,
        id: id2
      };
    }
    throw new Error("Unexpected value");
  };
  var isRegExp = function(obj) {
    return obj instanceof RegExp || Object.prototype.toString.call(obj) === "[object RegExp]";
  };
  var isDate = function(obj) {
    return obj instanceof Date || Object.prototype.toString.call(obj) === "[object Date]";
  };
  var isURL = function(obj) {
    return obj instanceof URL || Object.prototype.toString.call(obj) === "[object URL]";
  };
  var isError = function(obj) {
    const proto = obj ? Object.getPrototypeOf(obj) : null;
    return obj instanceof Error || (proto === null || proto === undefined ? undefined : proto.name) === "Error" || proto && isError(proto);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.parseSerializedValue = parseSerializedValue;
  exports.serializeValue = serializeValue;
});

// node_modules/playwright-core/lib/server/errors.js
var require_errors = __commonJS((exports) => {
  var isTargetClosedError = function(error) {
    return error instanceof TargetClosedError || error.name === "TargetClosedError";
  };
  var serializeError = function(e) {
    if ((0, _utils.isError)(e))
      return {
        error: {
          message: e.message,
          stack: e.stack,
          name: e.name
        }
      };
    return {
      value: (0, _serializers.serializeValue)(e, (value) => ({
        fallThrough: value
      }))
    };
  };
  var parseError = function(error) {
    if (!error.error) {
      if (error.value === undefined)
        throw new Error("Serialized error must have either an error or a value");
      return (0, _serializers.parseSerializedValue)(error.value, undefined);
    }
    const e = new Error(error.error.message);
    e.stack = error.error.stack || "";
    e.name = error.error.name;
    return e;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TimeoutError = exports.TargetClosedError = undefined;
  exports.isTargetClosedError = isTargetClosedError;
  exports.parseError = parseError;
  exports.serializeError = serializeError;
  var _utils = require_utils3();
  var _serializers = require_serializers();

  class CustomError extends Error {
    constructor(message) {
      super(message);
      this.name = this.constructor.name;
    }
  }

  class TimeoutError extends CustomError {
  }
  exports.TimeoutError = TimeoutError;

  class TargetClosedError extends CustomError {
    constructor(cause, logs) {
      super((cause || "Target page, context or browser has been closed") + (logs || ""));
    }
  }
  exports.TargetClosedError = TargetClosedError;
});

// node_modules/playwright-core/lib/server/instrumentation.js
var require_instrumentation = __commonJS((exports) => {
  var createInstrumentation = function() {
    const listeners = new Map;
    return new Proxy({}, {
      get: (obj, prop) => {
        if (typeof prop !== "string")
          return obj[prop];
        if (prop === "addListener")
          return (listener, context) => listeners.set(listener, context);
        if (prop === "removeListener")
          return (listener) => listeners.delete(listener);
        if (!prop.startsWith("on"))
          return obj[prop];
        return async (sdkObject, ...params) => {
          for (const [listener, context] of listeners) {
            var _prop, _ref;
            if (!context || sdkObject.attribution.context === context)
              await ((_prop = (_ref = listener)[prop]) === null || _prop === undefined ? undefined : _prop.call(_ref, sdkObject, ...params));
          }
        };
      }
    });
  };
  var serverSideCallMetadata = function() {
    return {
      id: "",
      startTime: 0,
      endTime: 0,
      wallTime: Date.now(),
      type: "Internal",
      method: "",
      params: {},
      log: [],
      isServerSide: true
    };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SdkObject = undefined;
  exports.createInstrumentation = createInstrumentation;
  exports.kTestSdkObjects = undefined;
  exports.serverSideCallMetadata = serverSideCallMetadata;
  var _events = import.meta.require("events");
  var _utils = require_utils3();
  var kTestSdkObjects = exports.kTestSdkObjects = new WeakSet;

  class SdkObject extends _events.EventEmitter {
    constructor(parent, guidPrefix, guid) {
      super();
      this.guid = undefined;
      this.attribution = undefined;
      this.instrumentation = undefined;
      this.guid = guid || `${guidPrefix || ""}@${(0, _utils.createGuid)()}`;
      this.setMaxListeners(0);
      this.attribution = {
        ...parent.attribution
      };
      this.instrumentation = parent.instrumentation;
      if (process.env._PW_INTERNAL_COUNT_SDK_OBJECTS)
        kTestSdkObjects.add(this);
    }
  }
  exports.SdkObject = SdkObject;
});

// node_modules/playwright-core/lib/server/protocolError.js
var require_protocolError = __commonJS((exports) => {
  var isProtocolError = function(e) {
    return e instanceof ProtocolError;
  };
  var isSessionClosedError = function(e) {
    return e instanceof ProtocolError && (e.type === "closed" || e.type === "crashed");
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ProtocolError = undefined;
  exports.isProtocolError = isProtocolError;
  exports.isSessionClosedError = isSessionClosedError;
  var _stackTrace = require_stackTrace();

  class ProtocolError extends Error {
    constructor(type, method, logs) {
      super();
      this.type = undefined;
      this.method = undefined;
      this.logs = undefined;
      this.type = type;
      this.method = method;
      this.logs = logs;
    }
    setMessage(message) {
      (0, _stackTrace.rewriteErrorMessage)(this, `Protocol error (${this.method}): ${message}`);
    }
    browserLogMessage() {
      return this.logs ? "\nBrowser logs:\n" + this.logs : "";
    }
  }
  exports.ProtocolError = ProtocolError;
});

// node_modules/playwright-core/lib/server/dispatchers/dispatcher.js
var require_dispatcher = __commonJS((exports) => {
  var existingDispatcher = function(object) {
    return object[dispatcherSymbol];
  };
  var setMaxDispatchersForTest = function(value) {
    maxDispatchersOverride = value;
  };
  var maxDispatchersForBucket = function(gcBucket) {
    var _ref, _maxDispatchersOverri;
    return (_ref = (_maxDispatchersOverri = maxDispatchersOverride) !== null && _maxDispatchersOverri !== undefined ? _maxDispatchersOverri : {
      JSHandle: 1e5,
      ElementHandle: 1e5
    }[gcBucket]) !== null && _ref !== undefined ? _ref : 1e4;
  };
  var closeReason = function(sdkObject) {
    var _sdkObject$attributio3, _sdkObject$attributio4, _sdkObject$attributio5;
    return ((_sdkObject$attributio3 = sdkObject.attribution.page) === null || _sdkObject$attributio3 === undefined ? undefined : _sdkObject$attributio3._closeReason) || ((_sdkObject$attributio4 = sdkObject.attribution.context) === null || _sdkObject$attributio4 === undefined ? undefined : _sdkObject$attributio4._closeReason) || ((_sdkObject$attributio5 = sdkObject.attribution.browser) === null || _sdkObject$attributio5 === undefined ? undefined : _sdkObject$attributio5._closeReason);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.dispatcherSymbol = exports.RootDispatcher = exports.DispatcherConnection = exports.Dispatcher = undefined;
  exports.existingDispatcher = existingDispatcher;
  exports.setMaxDispatchersForTest = setMaxDispatchersForTest;
  var _events = import.meta.require("events");
  var _validator = require_validator();
  var _utils = require_utils3();
  var _errors = require_errors();
  var _instrumentation = require_instrumentation();
  var _eventsHelper = require_eventsHelper();
  var _protocolError = require_protocolError();
  var dispatcherSymbol = exports.dispatcherSymbol = Symbol("dispatcher");
  var metadataValidator = (0, _validator.createMetadataValidator)();
  var maxDispatchersOverride;

  class Dispatcher extends _events.EventEmitter {
    constructor(parent, object, type, initializer, gcBucket) {
      super();
      this._connection = undefined;
      this._parent = undefined;
      this._dispatchers = new Map;
      this._disposed = false;
      this._eventListeners = [];
      this._guid = undefined;
      this._type = undefined;
      this._gcBucket = undefined;
      this._object = undefined;
      this._openScope = new _utils.LongStandingScope;
      this._connection = parent instanceof DispatcherConnection ? parent : parent._connection;
      this._parent = parent instanceof DispatcherConnection ? undefined : parent;
      const guid = object.guid;
      this._guid = guid;
      this._type = type;
      this._object = object;
      this._gcBucket = gcBucket !== null && gcBucket !== undefined ? gcBucket : type;
      object[dispatcherSymbol] = this;
      this._connection.registerDispatcher(this);
      if (this._parent) {
        (0, _utils.assert)(!this._parent._dispatchers.has(guid));
        this._parent._dispatchers.set(guid, this);
      }
      if (this._parent)
        this._connection.sendCreate(this._parent, type, guid, initializer);
      this._connection.maybeDisposeStaleDispatchers(this._gcBucket);
    }
    parentScope() {
      return this._parent;
    }
    addObjectListener(eventName, handler) {
      this._eventListeners.push(_eventsHelper.eventsHelper.addEventListener(this._object, eventName, handler));
    }
    adopt(child) {
      if (child._parent === this)
        return;
      const oldParent = child._parent;
      oldParent._dispatchers.delete(child._guid);
      this._dispatchers.set(child._guid, child);
      child._parent = this;
      this._connection.sendAdopt(this, child);
    }
    async _handleCommand(callMetadata, method, validParams) {
      const commandPromise = this[method](validParams, callMetadata);
      try {
        return await this._openScope.race(commandPromise);
      } catch (e) {
        if (callMetadata.potentiallyClosesScope && (0, _errors.isTargetClosedError)(e))
          return await commandPromise;
        throw e;
      }
    }
    _dispatchEvent(method, params) {
      if (this._disposed) {
        if ((0, _utils.isUnderTest)())
          throw new Error(`${this._guid} is sending "${String(method)}" event after being disposed`);
        return;
      }
      this._connection.sendEvent(this, method, params);
    }
    _dispose(reason) {
      this._disposeRecursively(new _errors.TargetClosedError);
      this._connection.sendDispose(this, reason);
    }
    _onDispose() {
    }
    _disposeRecursively(error) {
      var _this$_parent;
      (0, _utils.assert)(!this._disposed, `${this._guid} is disposed more than once`);
      this._onDispose();
      this._disposed = true;
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      (_this$_parent = this._parent) === null || _this$_parent === undefined || _this$_parent._dispatchers.delete(this._guid);
      const list = this._connection._dispatchersByBucket.get(this._gcBucket);
      list === null || list === undefined || list.delete(this._guid);
      this._connection._dispatchers.delete(this._guid);
      for (const dispatcher of [...this._dispatchers.values()])
        dispatcher._disposeRecursively(error);
      this._dispatchers.clear();
      delete this._object[dispatcherSymbol];
      this._openScope.close(error);
    }
    _debugScopeState() {
      return {
        _guid: this._guid,
        objects: Array.from(this._dispatchers.values()).map((o) => o._debugScopeState())
      };
    }
    async waitForEventInfo() {
    }
  }
  exports.Dispatcher = Dispatcher;

  class RootDispatcher extends Dispatcher {
    constructor(connection, createPlaywright) {
      super(connection, {
        guid: ""
      }, "Root", {});
      this._initialized = false;
      this.createPlaywright = createPlaywright;
    }
    async initialize(params) {
      (0, _utils.assert)(this.createPlaywright);
      (0, _utils.assert)(!this._initialized);
      this._initialized = true;
      return {
        playwright: await this.createPlaywright(this, params)
      };
    }
  }
  exports.RootDispatcher = RootDispatcher;

  class DispatcherConnection {
    constructor(isLocal) {
      this._dispatchers = new Map;
      this._dispatchersByBucket = new Map;
      this.onmessage = (message) => {
      };
      this._waitOperations = new Map;
      this._isLocal = undefined;
      this._isLocal = !!isLocal;
    }
    sendEvent(dispatcher, event, params) {
      const validator = (0, _validator.findValidator)(dispatcher._type, event, "Event");
      params = validator(params, "", {
        tChannelImpl: this._tChannelImplToWire.bind(this),
        binary: this._isLocal ? "buffer" : "toBase64"
      });
      this.onmessage({
        guid: dispatcher._guid,
        method: event,
        params
      });
    }
    sendCreate(parent, type, guid, initializer) {
      const validator = (0, _validator.findValidator)(type, "", "Initializer");
      initializer = validator(initializer, "", {
        tChannelImpl: this._tChannelImplToWire.bind(this),
        binary: this._isLocal ? "buffer" : "toBase64"
      });
      this.onmessage({
        guid: parent._guid,
        method: "__create__",
        params: {
          type,
          initializer,
          guid
        }
      });
    }
    sendAdopt(parent, dispatcher) {
      this.onmessage({
        guid: parent._guid,
        method: "__adopt__",
        params: {
          guid: dispatcher._guid
        }
      });
    }
    sendDispose(dispatcher, reason) {
      this.onmessage({
        guid: dispatcher._guid,
        method: "__dispose__",
        params: {
          reason
        }
      });
    }
    _tChannelImplFromWire(names, arg, path, context) {
      if (arg && typeof arg === "object" && typeof arg.guid === "string") {
        const guid = arg.guid;
        const dispatcher = this._dispatchers.get(guid);
        if (!dispatcher)
          throw new _validator.ValidationError(`${path}: no object with guid ${guid}`);
        if (names !== "*" && !names.includes(dispatcher._type))
          throw new _validator.ValidationError(`${path}: object with guid ${guid} has type ${dispatcher._type}, expected ${names.toString()}`);
        return dispatcher;
      }
      throw new _validator.ValidationError(`${path}: expected guid for ${names.toString()}`);
    }
    _tChannelImplToWire(names, arg, path, context) {
      if (arg instanceof Dispatcher) {
        if (names !== "*" && !names.includes(arg._type))
          throw new _validator.ValidationError(`${path}: dispatcher with guid ${arg._guid} has type ${arg._type}, expected ${names.toString()}`);
        return {
          guid: arg._guid
        };
      }
      throw new _validator.ValidationError(`${path}: expected dispatcher ${names.toString()}`);
    }
    registerDispatcher(dispatcher) {
      (0, _utils.assert)(!this._dispatchers.has(dispatcher._guid));
      this._dispatchers.set(dispatcher._guid, dispatcher);
      let list = this._dispatchersByBucket.get(dispatcher._gcBucket);
      if (!list) {
        list = new Set;
        this._dispatchersByBucket.set(dispatcher._gcBucket, list);
      }
      list.add(dispatcher._guid);
    }
    maybeDisposeStaleDispatchers(gcBucket) {
      const maxDispatchers = maxDispatchersForBucket(gcBucket);
      const list = this._dispatchersByBucket.get(gcBucket);
      if (!list || list.size <= maxDispatchers)
        return;
      const dispatchersArray = [...list];
      const disposeCount = maxDispatchers / 10 | 0;
      this._dispatchersByBucket.set(gcBucket, new Set(dispatchersArray.slice(disposeCount)));
      for (let i = 0;i < disposeCount; ++i) {
        const d = this._dispatchers.get(dispatchersArray[i]);
        if (!d)
          continue;
        d._dispose("gc");
      }
    }
    async dispatch(message) {
      var _sdkObject$attributio, _sdkObject$attributio2, _params$info;
      const {
        id,
        guid,
        method,
        params,
        metadata
      } = message;
      const dispatcher = this._dispatchers.get(guid);
      if (!dispatcher) {
        this.onmessage({
          id,
          error: (0, _errors.serializeError)(new _errors.TargetClosedError)
        });
        return;
      }
      let validParams;
      let validMetadata;
      try {
        const validator = (0, _validator.findValidator)(dispatcher._type, method, "Params");
        validParams = validator(params, "", {
          tChannelImpl: this._tChannelImplFromWire.bind(this),
          binary: this._isLocal ? "buffer" : "fromBase64"
        });
        validMetadata = metadataValidator(metadata, "", {
          tChannelImpl: this._tChannelImplFromWire.bind(this),
          binary: this._isLocal ? "buffer" : "fromBase64"
        });
        if (typeof dispatcher[method] !== "function")
          throw new Error(`Mismatching dispatcher: "${dispatcher._type}" does not implement "${method}"`);
      } catch (e) {
        this.onmessage({
          id,
          error: (0, _errors.serializeError)(e)
        });
        return;
      }
      const sdkObject = dispatcher._object instanceof _instrumentation.SdkObject ? dispatcher._object : undefined;
      const callMetadata = {
        id: `call@${id}`,
        wallTime: validMetadata.wallTime || Date.now(),
        location: validMetadata.location,
        apiName: validMetadata.apiName,
        internal: validMetadata.internal,
        objectId: sdkObject === null || sdkObject === undefined ? undefined : sdkObject.guid,
        pageId: sdkObject === null || sdkObject === undefined || (_sdkObject$attributio = sdkObject.attribution) === null || _sdkObject$attributio === undefined || (_sdkObject$attributio = _sdkObject$attributio.page) === null || _sdkObject$attributio === undefined ? undefined : _sdkObject$attributio.guid,
        frameId: sdkObject === null || sdkObject === undefined || (_sdkObject$attributio2 = sdkObject.attribution) === null || _sdkObject$attributio2 === undefined || (_sdkObject$attributio2 = _sdkObject$attributio2.frame) === null || _sdkObject$attributio2 === undefined ? undefined : _sdkObject$attributio2.guid,
        startTime: (0, _utils.monotonicTime)(),
        endTime: 0,
        type: dispatcher._type,
        method,
        params: params || {},
        log: []
      };
      if (sdkObject && params !== null && params !== undefined && (_params$info = params.info) !== null && _params$info !== undefined && _params$info.waitId) {
        const info = params.info;
        switch (info.phase) {
          case "before": {
            this._waitOperations.set(info.waitId, callMetadata);
            await sdkObject.instrumentation.onBeforeCall(sdkObject, callMetadata);
            this.onmessage({
              id
            });
            return;
          }
          case "log": {
            const originalMetadata = this._waitOperations.get(info.waitId);
            originalMetadata.log.push(info.message);
            sdkObject.instrumentation.onCallLog(sdkObject, originalMetadata, "api", info.message);
            this.onmessage({
              id
            });
            return;
          }
          case "after": {
            const originalMetadata = this._waitOperations.get(info.waitId);
            originalMetadata.endTime = (0, _utils.monotonicTime)();
            originalMetadata.error = info.error ? {
              error: {
                name: "Error",
                message: info.error
              }
            } : undefined;
            this._waitOperations.delete(info.waitId);
            await sdkObject.instrumentation.onAfterCall(sdkObject, originalMetadata);
            this.onmessage({
              id
            });
            return;
          }
        }
      }
      await (sdkObject === null || sdkObject === undefined ? undefined : sdkObject.instrumentation.onBeforeCall(sdkObject, callMetadata));
      const response = {
        id
      };
      try {
        const result = await dispatcher._handleCommand(callMetadata, method, validParams);
        const validator = (0, _validator.findValidator)(dispatcher._type, method, "Result");
        response.result = validator(result, "", {
          tChannelImpl: this._tChannelImplToWire.bind(this),
          binary: this._isLocal ? "buffer" : "toBase64"
        });
        callMetadata.result = result;
      } catch (e) {
        if ((0, _errors.isTargetClosedError)(e) && sdkObject) {
          const reason = closeReason(sdkObject);
          if (reason)
            (0, _utils.rewriteErrorMessage)(e, reason);
        } else if ((0, _protocolError.isProtocolError)(e)) {
          if (e.type === "closed") {
            const reason = sdkObject ? closeReason(sdkObject) : undefined;
            e = new _errors.TargetClosedError(reason, e.browserLogMessage());
          } else if (e.type === "crashed") {
            (0, _utils.rewriteErrorMessage)(e, "Target crashed " + e.browserLogMessage());
          }
        }
        response.error = (0, _errors.serializeError)(e);
        callMetadata.error = response.error;
      } finally {
        callMetadata.endTime = (0, _utils.monotonicTime)();
        await (sdkObject === null || sdkObject === undefined ? undefined : sdkObject.instrumentation.onAfterCall(sdkObject, callMetadata));
      }
      if (response.error)
        response.log = callMetadata.log;
      this.onmessage(response);
    }
  }
  exports.DispatcherConnection = DispatcherConnection;
});

// node_modules/playwright-core/lib/common/timeoutSettings.js
var require_timeoutSettings = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TimeoutSettings = exports.DEFAULT_TIMEOUT = exports.DEFAULT_LAUNCH_TIMEOUT = undefined;
  var _utils = require_utils3();
  var DEFAULT_TIMEOUT = exports.DEFAULT_TIMEOUT = 30000;
  var DEFAULT_LAUNCH_TIMEOUT = exports.DEFAULT_LAUNCH_TIMEOUT = 3 * 60 * 1000;

  class TimeoutSettings {
    constructor(parent) {
      this._parent = undefined;
      this._defaultTimeout = undefined;
      this._defaultNavigationTimeout = undefined;
      this._parent = parent;
    }
    setDefaultTimeout(timeout) {
      this._defaultTimeout = timeout;
    }
    setDefaultNavigationTimeout(timeout) {
      this._defaultNavigationTimeout = timeout;
    }
    defaultNavigationTimeout() {
      return this._defaultNavigationTimeout;
    }
    defaultTimeout() {
      return this._defaultTimeout;
    }
    navigationTimeout(options) {
      if (typeof options.timeout === "number")
        return options.timeout;
      if (this._defaultNavigationTimeout !== undefined)
        return this._defaultNavigationTimeout;
      if ((0, _utils.debugMode)())
        return 0;
      if (this._defaultTimeout !== undefined)
        return this._defaultTimeout;
      if (this._parent)
        return this._parent.navigationTimeout(options);
      return DEFAULT_TIMEOUT;
    }
    timeout(options) {
      if (typeof options.timeout === "number")
        return options.timeout;
      if ((0, _utils.debugMode)())
        return 0;
      if (this._defaultTimeout !== undefined)
        return this._defaultTimeout;
      if (this._parent)
        return this._parent.timeout(options);
      return DEFAULT_TIMEOUT;
    }
    static timeout(options) {
      if (typeof options.timeout === "number")
        return options.timeout;
      if ((0, _utils.debugMode)())
        return 0;
      return DEFAULT_TIMEOUT;
    }
    static launchTimeout(options) {
      if (typeof options.timeout === "number")
        return options.timeout;
      if ((0, _utils.debugMode)())
        return 0;
      return DEFAULT_LAUNCH_TIMEOUT;
    }
  }
  exports.TimeoutSettings = TimeoutSettings;
});

// node_modules/playwright-core/lib/server/helper.js
var require_helper = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.helper = undefined;
  var _debugLogger = require_debugLogger();
  var _eventsHelper = require_eventsHelper();
  var MAX_LOG_LENGTH = process.env.MAX_LOG_LENGTH ? +process.env.MAX_LOG_LENGTH : Infinity;

  class Helper {
    static completeUserURL(urlString) {
      if (urlString.startsWith("localhost") || urlString.startsWith("127.0.0.1"))
        urlString = "http://" + urlString;
      return urlString;
    }
    static enclosingIntRect(rect) {
      const x = Math.floor(rect.x + 0.001);
      const y = Math.floor(rect.y + 0.001);
      const x2 = Math.ceil(rect.x + rect.width - 0.001);
      const y2 = Math.ceil(rect.y + rect.height - 0.001);
      return {
        x,
        y,
        width: x2 - x,
        height: y2 - y
      };
    }
    static enclosingIntSize(size) {
      return {
        width: Math.floor(size.width + 0.001),
        height: Math.floor(size.height + 0.001)
      };
    }
    static getViewportSizeFromWindowFeatures(features) {
      const widthString = features.find((f) => f.startsWith("width="));
      const heightString = features.find((f) => f.startsWith("height="));
      const width = widthString ? parseInt(widthString.substring(6), 10) : NaN;
      const height = heightString ? parseInt(heightString.substring(7), 10) : NaN;
      if (!Number.isNaN(width) && !Number.isNaN(height))
        return {
          width,
          height
        };
      return null;
    }
    static waitForEvent(progress2, emitter, event, predicate) {
      const listeners = [];
      const promise = new Promise((resolve, reject) => {
        listeners.push(_eventsHelper.eventsHelper.addEventListener(emitter, event, (eventArg) => {
          try {
            if (predicate && !predicate(eventArg))
              return;
            _eventsHelper.eventsHelper.removeEventListeners(listeners);
            resolve(eventArg);
          } catch (e) {
            _eventsHelper.eventsHelper.removeEventListeners(listeners);
            reject(e);
          }
        }));
      });
      const dispose = () => _eventsHelper.eventsHelper.removeEventListeners(listeners);
      if (progress2)
        progress2.cleanupWhenAborted(dispose);
      return {
        promise,
        dispose
      };
    }
    static secondsToRoundishMillis(value) {
      return (value * 1e6 | 0) / 1000;
    }
    static millisToRoundishMillis(value) {
      return (value * 1000 | 0) / 1000;
    }
    static debugProtocolLogger(protocolLogger) {
      return (direction, message) => {
        if (protocolLogger)
          protocolLogger(direction, message);
        if (_debugLogger.debugLogger.isEnabled("protocol")) {
          let text = JSON.stringify(message);
          if (text.length > MAX_LOG_LENGTH)
            text = text.substring(0, MAX_LOG_LENGTH / 2) + " <<<<<( LOG TRUNCATED )>>>>> " + text.substring(text.length - MAX_LOG_LENGTH / 2);
          _debugLogger.debugLogger.log("protocol", (direction === "send" ? "SEND \u25BA " : "\u25C0 RECV ") + text);
        }
      };
    }
    static formatBrowserLogs(logs, disconnectReason) {
      if (!disconnectReason && !logs.length)
        return "";
      return "\n" + (disconnectReason ? disconnectReason + "\n" : "") + logs.join("\n");
    }
  }
  var helper = exports.helper = Helper;
});

// node_modules/playwright-core/lib/server/network.js
var require_network2 = __commonJS((exports) => {
  var filterCookies = function(cookies, urls) {
    const parsedURLs = urls.map((s) => new URL(s));
    return cookies.filter((c) => {
      if (!parsedURLs.length)
        return true;
      for (const parsedURL2 of parsedURLs) {
        let domain = c.domain;
        if (!domain.startsWith("."))
          domain = "." + domain;
        if (!("." + parsedURL2.hostname).endsWith(domain))
          continue;
        if (!parsedURL2.pathname.startsWith(c.path))
          continue;
        if (parsedURL2.protocol !== "https:" && parsedURL2.hostname !== "localhost" && c.secure)
          continue;
        return true;
      }
      return false;
    });
  };
  var rewriteCookies = function(cookies) {
    return cookies.map((c) => {
      (0, _utils.assert)(c.url || c.domain && c.path, "Cookie should have a url or a domain/path pair");
      (0, _utils.assert)(!(c.url && c.domain), "Cookie should have either url or domain");
      (0, _utils.assert)(!(c.url && c.path), "Cookie should have either url or path");
      (0, _utils.assert)(!(c.expires && c.expires < 0 && c.expires !== -1), "Cookie should have a valid expires, only -1 or a positive number for the unix timestamp in seconds is allowed");
      (0, _utils.assert)(!(c.expires && c.expires > 0 && c.expires > kMaxCookieExpiresDateInSeconds), "Cookie should have a valid expires, only -1 or a positive number for the unix timestamp in seconds is allowed");
      const copy = {
        ...c
      };
      if (copy.url) {
        (0, _utils.assert)(copy.url !== "about:blank", `Blank page can not have cookie "${c.name}"`);
        (0, _utils.assert)(!copy.url.startsWith("data:"), `Data URL page can not have cookie "${c.name}"`);
        const url = new URL(copy.url);
        copy.domain = url.hostname;
        copy.path = url.pathname.substring(0, url.pathname.lastIndexOf("/") + 1);
        copy.secure = url.protocol === "https:";
      }
      return copy;
    });
  };
  var parsedURL = function(url) {
    try {
      return new URL(url);
    } catch (e) {
      return null;
    }
  };
  var stripFragmentFromUrl = function(url) {
    if (!url.includes("#"))
      return url;
    return url.substring(0, url.indexOf("#"));
  };
  var singleHeader = function(name, value) {
    return [{
      name,
      value
    }];
  };
  var mergeHeaders = function(headers) {
    const lowerCaseToValue = new Map;
    const lowerCaseToOriginalCase = new Map;
    for (const h of headers) {
      if (!h)
        continue;
      for (const {
        name,
        value
      } of h) {
        const lower = name.toLowerCase();
        lowerCaseToOriginalCase.set(lower, name);
        lowerCaseToValue.set(lower, value);
      }
    }
    const result = [];
    for (const [lower, value] of lowerCaseToValue)
      result.push({
        name: lowerCaseToOriginalCase.get(lower),
        value
      });
    return result;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WebSocket = exports.STATUS_TEXTS = exports.Route = exports.Response = exports.Request = undefined;
  exports.filterCookies = filterCookies;
  exports.kMaxCookieExpiresDateInSeconds = undefined;
  exports.mergeHeaders = mergeHeaders;
  exports.parsedURL = parsedURL;
  exports.rewriteCookies = rewriteCookies;
  exports.singleHeader = singleHeader;
  exports.stripFragmentFromUrl = stripFragmentFromUrl;
  var _utils = require_utils3();
  var _manualPromise = require_manualPromise();
  var _instrumentation = require_instrumentation();
  var _fetch = require_fetch();
  var _browserContext = require_browserContext();
  var kMaxCookieExpiresDateInSeconds = exports.kMaxCookieExpiresDateInSeconds = 253402300799;

  class Request extends _instrumentation.SdkObject {
    constructor(context, frame, serviceWorker, redirectedFrom, documentId, url, resourceType, method, postData, headers) {
      super(frame || context, "request");
      this._response = null;
      this._redirectedFrom = undefined;
      this._redirectedTo = null;
      this._documentId = undefined;
      this._isFavicon = undefined;
      this._failureText = null;
      this._url = undefined;
      this._resourceType = undefined;
      this._method = undefined;
      this._postData = undefined;
      this._headers = undefined;
      this._headersMap = new Map;
      this._frame = null;
      this._serviceWorker = null;
      this._context = undefined;
      this._rawRequestHeadersPromise = new _manualPromise.ManualPromise;
      this._waitForResponsePromise = new _manualPromise.ManualPromise;
      this._responseEndTiming = -1;
      this._overrides = undefined;
      (0, _utils.assert)(!url.startsWith("data:"), "Data urls should not fire requests");
      this._context = context;
      this._frame = frame;
      this._serviceWorker = serviceWorker;
      this._redirectedFrom = redirectedFrom;
      if (redirectedFrom)
        redirectedFrom._redirectedTo = this;
      this._documentId = documentId;
      this._url = stripFragmentFromUrl(url);
      this._resourceType = resourceType;
      this._method = method;
      this._postData = postData;
      this._headers = headers;
      this._updateHeadersMap();
      this._isFavicon = url.endsWith("/favicon.ico") || !!(redirectedFrom !== null && redirectedFrom !== undefined && redirectedFrom._isFavicon);
    }
    _setFailureText(failureText) {
      this._failureText = failureText;
      this._waitForResponsePromise.resolve(null);
    }
    _setOverrides(overrides) {
      this._overrides = overrides;
      this._updateHeadersMap();
    }
    _updateHeadersMap() {
      for (const {
        name,
        value
      } of this.headers())
        this._headersMap.set(name.toLowerCase(), value);
    }
    _hasOverrides() {
      return !!this._overrides;
    }
    url() {
      var _this$_overrides;
      return ((_this$_overrides = this._overrides) === null || _this$_overrides === undefined ? undefined : _this$_overrides.url) || this._url;
    }
    resourceType() {
      return this._resourceType;
    }
    method() {
      var _this$_overrides2;
      return ((_this$_overrides2 = this._overrides) === null || _this$_overrides2 === undefined ? undefined : _this$_overrides2.method) || this._method;
    }
    postDataBuffer() {
      var _this$_overrides3;
      return ((_this$_overrides3 = this._overrides) === null || _this$_overrides3 === undefined ? undefined : _this$_overrides3.postData) || this._postData;
    }
    headers() {
      var _this$_overrides4;
      return ((_this$_overrides4 = this._overrides) === null || _this$_overrides4 === undefined ? undefined : _this$_overrides4.headers) || this._headers;
    }
    headerValue(name) {
      return this._headersMap.get(name);
    }
    setRawRequestHeaders(headers) {
      if (!this._rawRequestHeadersPromise.isDone())
        this._rawRequestHeadersPromise.resolve(headers || this._headers);
    }
    async rawRequestHeaders() {
      var _this$_overrides5;
      return ((_this$_overrides5 = this._overrides) === null || _this$_overrides5 === undefined ? undefined : _this$_overrides5.headers) || this._rawRequestHeadersPromise;
    }
    response() {
      return this._waitForResponsePromise;
    }
    _existingResponse() {
      return this._response;
    }
    _setResponse(response) {
      this._response = response;
      this._waitForResponsePromise.resolve(response);
    }
    _finalRequest() {
      return this._redirectedTo ? this._redirectedTo._finalRequest() : this;
    }
    frame() {
      return this._frame;
    }
    serviceWorker() {
      return this._serviceWorker;
    }
    isNavigationRequest() {
      return !!this._documentId;
    }
    redirectedFrom() {
      return this._redirectedFrom;
    }
    failure() {
      if (this._failureText === null)
        return null;
      return {
        errorText: this._failureText
      };
    }
    bodySize() {
      var _this$postDataBuffer;
      return ((_this$postDataBuffer = this.postDataBuffer()) === null || _this$postDataBuffer === undefined ? undefined : _this$postDataBuffer.length) || 0;
    }
    async requestHeadersSize() {
      let headersSize = 4;
      headersSize += this.method().length;
      headersSize += new URL(this.url()).pathname.length;
      headersSize += 8;
      const headers = await this.rawRequestHeaders();
      for (const header of headers)
        headersSize += header.name.length + header.value.length + 4;
      return headersSize;
    }
  }
  exports.Request = Request;

  class Route extends _instrumentation.SdkObject {
    constructor(request, delegate) {
      super(request._frame || request._context, "route");
      this._request = undefined;
      this._delegate = undefined;
      this._handled = false;
      this._request = request;
      this._delegate = delegate;
      this._request._context.addRouteInFlight(this);
    }
    request() {
      return this._request;
    }
    async abort(errorCode = "failed") {
      this._startHandling();
      this._request._context.emit(_browserContext.BrowserContext.Events.RequestAborted, this._request);
      await this._delegate.abort(errorCode);
      this._endHandling();
    }
    async redirectNavigationRequest(url) {
      this._startHandling();
      (0, _utils.assert)(this._request.isNavigationRequest());
      this._request.frame().redirectNavigation(url, this._request._documentId, this._request.headerValue("referer"));
    }
    async fulfill(overrides) {
      this._startHandling();
      let body = overrides.body;
      let isBase64 = overrides.isBase64 || false;
      if (body === undefined) {
        if (overrides.fetchResponseUid) {
          const buffer = this._request._context.fetchRequest.fetchResponses.get(overrides.fetchResponseUid) || _fetch.APIRequestContext.findResponseBody(overrides.fetchResponseUid);
          (0, _utils.assert)(buffer, "Fetch response has been disposed");
          body = buffer.toString("base64");
          isBase64 = true;
        } else {
          body = "";
          isBase64 = false;
        }
      }
      const headers = [...overrides.headers || []];
      this._maybeAddCorsHeaders(headers);
      this._request._context.emit(_browserContext.BrowserContext.Events.RequestFulfilled, this._request);
      await this._delegate.fulfill({
        status: overrides.status || 200,
        headers,
        body,
        isBase64
      });
      this._endHandling();
    }
    _maybeAddCorsHeaders(headers) {
      const origin = this._request.headerValue("origin");
      if (!origin)
        return;
      const requestUrl = new URL(this._request.url());
      if (!requestUrl.protocol.startsWith("http"))
        return;
      if (requestUrl.origin === origin.trim())
        return;
      const corsHeader = headers.find(({
        name
      }) => name === "access-control-allow-origin");
      if (corsHeader)
        return;
      headers.push({
        name: "access-control-allow-origin",
        value: origin
      });
      headers.push({
        name: "access-control-allow-credentials",
        value: "true"
      });
      headers.push({
        name: "vary",
        value: "Origin"
      });
    }
    async continue(overrides) {
      this._startHandling();
      if (overrides.url) {
        const newUrl = new URL(overrides.url);
        const oldUrl = new URL(this._request.url());
        if (oldUrl.protocol !== newUrl.protocol)
          throw new Error("New URL must have same protocol as overridden URL");
      }
      this._request._setOverrides(overrides);
      if (!overrides.isFallback)
        this._request._context.emit(_browserContext.BrowserContext.Events.RequestContinued, this._request);
      await this._delegate.continue(this._request, overrides);
      this._endHandling();
    }
    _startHandling() {
      (0, _utils.assert)(!this._handled, "Route is already handled!");
      this._handled = true;
    }
    _endHandling() {
      this._request._context.removeRouteInFlight(this);
    }
  }
  exports.Route = Route;

  class Response extends _instrumentation.SdkObject {
    constructor(request, status, statusText, headers, timing, getResponseBodyCallback, fromServiceWorker, httpVersion) {
      super(request.frame() || request._context, "response");
      this._request = undefined;
      this._contentPromise = null;
      this._finishedPromise = new _manualPromise.ManualPromise;
      this._status = undefined;
      this._statusText = undefined;
      this._url = undefined;
      this._headers = undefined;
      this._headersMap = new Map;
      this._getResponseBodyCallback = undefined;
      this._timing = undefined;
      this._serverAddrPromise = new _manualPromise.ManualPromise;
      this._securityDetailsPromise = new _manualPromise.ManualPromise;
      this._rawResponseHeadersPromise = new _manualPromise.ManualPromise;
      this._httpVersion = undefined;
      this._fromServiceWorker = undefined;
      this._encodedBodySizePromise = new _manualPromise.ManualPromise;
      this._transferSizePromise = new _manualPromise.ManualPromise;
      this._responseHeadersSizePromise = new _manualPromise.ManualPromise;
      this._request = request;
      this._timing = timing;
      this._status = status;
      this._statusText = statusText;
      this._url = request.url();
      this._headers = headers;
      for (const {
        name,
        value
      } of this._headers)
        this._headersMap.set(name.toLowerCase(), value);
      this._getResponseBodyCallback = getResponseBodyCallback;
      this._request._setResponse(this);
      this._httpVersion = httpVersion;
      this._fromServiceWorker = fromServiceWorker;
    }
    _serverAddrFinished(addr) {
      this._serverAddrPromise.resolve(addr);
    }
    _securityDetailsFinished(securityDetails) {
      this._securityDetailsPromise.resolve(securityDetails);
    }
    _requestFinished(responseEndTiming) {
      this._request._responseEndTiming = Math.max(responseEndTiming, this._timing.responseStart);
      if (this._timing.requestStart === -1)
        this._timing.requestStart = this._request._responseEndTiming;
      this._finishedPromise.resolve();
    }
    _setHttpVersion(httpVersion) {
      this._httpVersion = httpVersion;
    }
    url() {
      return this._url;
    }
    status() {
      return this._status;
    }
    statusText() {
      return this._statusText;
    }
    headers() {
      return this._headers;
    }
    headerValue(name) {
      return this._headersMap.get(name);
    }
    async rawResponseHeaders() {
      return this._rawResponseHeadersPromise;
    }
    setRawResponseHeaders(headers) {
      if (!this._rawResponseHeadersPromise.isDone())
        this._rawResponseHeadersPromise.resolve(headers || this._headers);
    }
    setTransferSize(size) {
      this._transferSizePromise.resolve(size);
    }
    setEncodedBodySize(size) {
      this._encodedBodySizePromise.resolve(size);
    }
    setResponseHeadersSize(size) {
      this._responseHeadersSizePromise.resolve(size);
    }
    timing() {
      return this._timing;
    }
    async serverAddr() {
      return await this._serverAddrPromise || null;
    }
    async securityDetails() {
      return await this._securityDetailsPromise || null;
    }
    body() {
      if (!this._contentPromise) {
        this._contentPromise = this._finishedPromise.then(async () => {
          if (this._status >= 300 && this._status <= 399)
            throw new Error("Response body is unavailable for redirect responses");
          return this._getResponseBodyCallback();
        });
      }
      return this._contentPromise;
    }
    request() {
      return this._request;
    }
    frame() {
      return this._request.frame();
    }
    httpVersion() {
      if (!this._httpVersion)
        return "HTTP/1.1";
      if (this._httpVersion === "http/1.1")
        return "HTTP/1.1";
      if (this._httpVersion === "h2")
        return "HTTP/2.0";
      return this._httpVersion;
    }
    fromServiceWorker() {
      return this._fromServiceWorker;
    }
    async responseHeadersSize() {
      const availableSize = await this._responseHeadersSizePromise;
      if (availableSize !== null)
        return availableSize;
      let headersSize = 4;
      headersSize += 8;
      headersSize += 3;
      headersSize += this.statusText().length;
      const headers = await this._rawResponseHeadersPromise;
      for (const header of headers)
        headersSize += header.name.length + header.value.length + 4;
      headersSize += 2;
      return headersSize;
    }
    async sizes() {
      const requestHeadersSize = await this._request.requestHeadersSize();
      const responseHeadersSize = await this.responseHeadersSize();
      let encodedBodySize = await this._encodedBodySizePromise;
      if (encodedBodySize === null) {
        var _headers$find;
        const headers = await this._rawResponseHeadersPromise;
        const contentLength = (_headers$find = headers.find((h) => h.name.toLowerCase() === "content-length")) === null || _headers$find === undefined ? undefined : _headers$find.value;
        encodedBodySize = contentLength ? +contentLength : 0;
      }
      let transferSize = await this._transferSizePromise;
      if (transferSize === null) {
        transferSize = responseHeadersSize + encodedBodySize;
      }
      return {
        requestBodySize: this._request.bodySize(),
        requestHeadersSize,
        responseBodySize: encodedBodySize,
        responseHeadersSize,
        transferSize
      };
    }
  }
  exports.Response = Response;

  class WebSocket extends _instrumentation.SdkObject {
    constructor(parent, url) {
      super(parent, "ws");
      this._url = undefined;
      this._notified = false;
      this._url = url;
    }
    markAsNotified() {
      if (this._notified)
        return false;
      this._notified = true;
      return true;
    }
    url() {
      return this._url;
    }
    frameSent(opcode, data) {
      this.emit(WebSocket.Events.FrameSent, {
        opcode,
        data
      });
    }
    frameReceived(opcode, data) {
      this.emit(WebSocket.Events.FrameReceived, {
        opcode,
        data
      });
    }
    error(errorMessage) {
      this.emit(WebSocket.Events.SocketError, errorMessage);
    }
    closed() {
      this.emit(WebSocket.Events.Close);
    }
  }
  exports.WebSocket = WebSocket;
  WebSocket.Events = {
    Close: "close",
    SocketError: "socketerror",
    FrameReceived: "framereceived",
    FrameSent: "framesent"
  };
  var STATUS_TEXTS = exports.STATUS_TEXTS = {
    "100": "Continue",
    "101": "Switching Protocols",
    "102": "Processing",
    "103": "Early Hints",
    "200": "OK",
    "201": "Created",
    "202": "Accepted",
    "203": "Non-Authoritative Information",
    "204": "No Content",
    "205": "Reset Content",
    "206": "Partial Content",
    "207": "Multi-Status",
    "208": "Already Reported",
    "226": "IM Used",
    "300": "Multiple Choices",
    "301": "Moved Permanently",
    "302": "Found",
    "303": "See Other",
    "304": "Not Modified",
    "305": "Use Proxy",
    "306": "Switch Proxy",
    "307": "Temporary Redirect",
    "308": "Permanent Redirect",
    "400": "Bad Request",
    "401": "Unauthorized",
    "402": "Payment Required",
    "403": "Forbidden",
    "404": "Not Found",
    "405": "Method Not Allowed",
    "406": "Not Acceptable",
    "407": "Proxy Authentication Required",
    "408": "Request Timeout",
    "409": "Conflict",
    "410": "Gone",
    "411": "Length Required",
    "412": "Precondition Failed",
    "413": "Payload Too Large",
    "414": "URI Too Long",
    "415": "Unsupported Media Type",
    "416": "Range Not Satisfiable",
    "417": "Expectation Failed",
    "418": "I\'m a teapot",
    "421": "Misdirected Request",
    "422": "Unprocessable Entity",
    "423": "Locked",
    "424": "Failed Dependency",
    "425": "Too Early",
    "426": "Upgrade Required",
    "428": "Precondition Required",
    "429": "Too Many Requests",
    "431": "Request Header Fields Too Large",
    "451": "Unavailable For Legal Reasons",
    "500": "Internal Server Error",
    "501": "Not Implemented",
    "502": "Bad Gateway",
    "503": "Service Unavailable",
    "504": "Gateway Timeout",
    "505": "HTTP Version Not Supported",
    "506": "Variant Also Negotiates",
    "507": "Insufficient Storage",
    "508": "Loop Detected",
    "510": "Not Extended",
    "511": "Network Authentication Required"
  };
});

// node_modules/playwright-core/lib/generated/injectedScriptSource.js
var require_injectedScriptSource = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.source = undefined;
  var source = exports.source = "\nvar __commonJS = obj => {\n  let required = false;\n  let result;\n  return function __require() {\n    if (!required) {\n      required = true;\n      let fn;\n      for (const name in obj) { fn = obj[name]; break; }\n      const module = { exports: {} };\n      fn(module.exports, module);\n      result = module.exports;\n    }\n    return result;\n  }\n};\nvar __export = (target, all) => {for (var name in all) target[name] = all[name];};\nvar __toESM = mod => ({ ...mod, 'default': mod });\nvar __toCommonJS = mod => ({ ...mod, __esModule: true });\n\n\n// packages/playwright-core/src/server/injected/injectedScript.ts\nvar injectedScript_exports = {};\n__export(injectedScript_exports, {\n  InjectedScript: () => InjectedScript\n});\nmodule.exports = __toCommonJS(injectedScript_exports);\n\n// packages/playwright-core/src/server/injected/xpathSelectorEngine.ts\nvar XPathEngine = {\n  queryAll(root, selector) {\n    if (selector.startsWith(\"/\") && root.nodeType !== Node.DOCUMENT_NODE)\n      selector = \".\" + selector;\n    const result = [];\n    const document = root.ownerDocument || root;\n    if (!document)\n      return result;\n    const it = document.evaluate(selector, root, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE);\n    for (let node = it.iterateNext(); node; node = it.iterateNext()) {\n      if (node.nodeType === Node.ELEMENT_NODE)\n        result.push(node);\n    }\n    return result;\n  }\n};\n\n// packages/playwright-core/src/server/injected/domUtils.ts\nvar browserNameForWorkarounds = \"\";\nfunction setBrowserName(name) {\n  browserNameForWorkarounds = name;\n}\nfunction isInsideScope(scope, element) {\n  while (element) {\n    if (scope.contains(element))\n      return true;\n    element = enclosingShadowHost(element);\n  }\n  return false;\n}\nfunction parentElementOrShadowHost(element) {\n  if (element.parentElement)\n    return element.parentElement;\n  if (!element.parentNode)\n    return;\n  if (element.parentNode.nodeType === 11 && element.parentNode.host)\n    return element.parentNode.host;\n}\nfunction enclosingShadowRootOrDocument(element) {\n  let node = element;\n  while (node.parentNode)\n    node = node.parentNode;\n  if (node.nodeType === 11 || node.nodeType === 9)\n    return node;\n}\nfunction enclosingShadowHost(element) {\n  while (element.parentElement)\n    element = element.parentElement;\n  return parentElementOrShadowHost(element);\n}\nfunction closestCrossShadow(element, css, scope) {\n  while (element) {\n    const closest = element.closest(css);\n    if (scope && closest !== scope && (closest == null ? void 0 : closest.contains(scope)))\n      return;\n    if (closest)\n      return closest;\n    element = enclosingShadowHost(element);\n  }\n}\nfunction getElementComputedStyle(element, pseudo) {\n  return element.ownerDocument && element.ownerDocument.defaultView ? element.ownerDocument.defaultView.getComputedStyle(element, pseudo) : void 0;\n}\nfunction isElementStyleVisibilityVisible(element, style) {\n  style = style != null ? style : getElementComputedStyle(element);\n  if (!style)\n    return true;\n  if (Element.prototype.checkVisibility && browserNameForWorkarounds !== \"webkit\") {\n    if (!element.checkVisibility({ checkOpacity: false, checkVisibilityCSS: false }))\n      return false;\n  } else {\n    const detailsOrSummary = element.closest(\"details,summary\");\n    if (detailsOrSummary !== element && (detailsOrSummary == null ? void 0 : detailsOrSummary.nodeName) === \"DETAILS\" && !detailsOrSummary.open)\n      return false;\n  }\n  if (style.visibility !== \"visible\")\n    return false;\n  return true;\n}\nfunction isElementVisible(element) {\n  const style = getElementComputedStyle(element);\n  if (!style)\n    return true;\n  if (style.display === \"contents\") {\n    for (let child = element.firstChild; child; child = child.nextSibling) {\n      if (child.nodeType === 1 && isElementVisible(child))\n        return true;\n      if (child.nodeType === 3 && isVisibleTextNode(child))\n        return true;\n    }\n    return false;\n  }\n  if (!isElementStyleVisibilityVisible(element, style))\n    return false;\n  const rect = element.getBoundingClientRect();\n  return rect.width > 0 && rect.height > 0;\n}\nfunction isVisibleTextNode(node) {\n  const range = node.ownerDocument.createRange();\n  range.selectNode(node);\n  const rect = range.getBoundingClientRect();\n  return rect.width > 0 && rect.height > 0;\n}\nfunction elementSafeTagName(element) {\n  if (element instanceof HTMLFormElement)\n    return \"FORM\";\n  return element.tagName.toUpperCase();\n}\n\n// packages/playwright-core/src/utils/isomorphic/stringUtils.ts\nfunction escapeWithQuotes(text, char = \"'\") {\n  const stringified = JSON.stringify(text);\n  const escapedText = stringified.substring(1, stringified.length - 1).replace(/\\\\\"/g, '\"');\n  if (char === \"'\")\n    return char + escapedText.replace(/[']/g, \"\\\\'\") + char;\n  if (char === '\"')\n    return char + escapedText.replace(/[\"]/g, '\\\\\"') + char;\n  if (char === \"`\")\n    return char + escapedText.replace(/[`]/g, \"`\") + char;\n  throw new Error(\"Invalid escape char\");\n}\nfunction toTitleCase(name) {\n  return name.charAt(0).toUpperCase() + name.substring(1);\n}\nfunction toSnakeCase(name) {\n  return name.replace(/([a-z0-9])([A-Z])/g, \"$1_$2\").replace(/([A-Z])([A-Z][a-z])/g, \"$1_$2\").toLowerCase();\n}\nfunction cssEscape(s) {\n  let result = \"\";\n  for (let i = 0; i < s.length; i++)\n    result += cssEscapeOne(s, i);\n  return result;\n}\nfunction quoteCSSAttributeValue(text) {\n  return `\"${cssEscape(text).replace(/\\\\ /g, \" \")}\"`;\n}\nfunction cssEscapeOne(s, i) {\n  const c = s.charCodeAt(i);\n  if (c === 0)\n    return \"\\uFFFD\";\n  if (c >= 1 && c <= 31 || c >= 48 && c <= 57 && (i === 0 || i === 1 && s.charCodeAt(0) === 45))\n    return \"\\\\\" + c.toString(16) + \" \";\n  if (i === 0 && c === 45 && s.length === 1)\n    return \"\\\\\" + s.charAt(i);\n  if (c >= 128 || c === 45 || c === 95 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122)\n    return s.charAt(i);\n  return \"\\\\\" + s.charAt(i);\n}\nfunction normalizeWhiteSpace(text) {\n  return text.replace(/\\u200b/g, \"\").trim().replace(/\\s+/g, \" \");\n}\nfunction normalizeEscapedRegexQuotes(source) {\n  return source.replace(/(^|[^\\\\])(\\\\\\\\)*\\\\(['\"`])/g, \"$1$2$3\");\n}\nfunction escapeRegexForSelector(re) {\n  if (re.unicode || re.unicodeSets)\n    return String(re);\n  return String(re).replace(/(^|[^\\\\])(\\\\\\\\)*([\"'`])/g, \"$1$2\\\\$3\").replace(/>>/g, \"\\\\>\\\\>\");\n}\nfunction escapeForTextSelector(text, exact) {\n  if (typeof text !== \"string\")\n    return escapeRegexForSelector(text);\n  return `${JSON.stringify(text)}${exact ? \"s\" : \"i\"}`;\n}\nfunction escapeForAttributeSelector(value, exact) {\n  if (typeof value !== \"string\")\n    return escapeRegexForSelector(value);\n  return `\"${value.replace(/\\\\/g, \"\\\\\\\\\").replace(/[\"]/g, '\\\\\"')}\"${exact ? \"s\" : \"i\"}`;\n}\nfunction trimString(input, cap, suffix = \"\") {\n  if (input.length <= cap)\n    return input;\n  const chars = [...input];\n  if (chars.length > cap)\n    return chars.slice(0, cap - suffix.length).join(\"\") + suffix;\n  return chars.join(\"\");\n}\nfunction trimStringWithEllipsis(input, cap) {\n  return trimString(input, cap, \"\\u2026\");\n}\nfunction escapeRegExp(s) {\n  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n\n// packages/playwright-core/src/server/injected/roleUtils.ts\nfunction hasExplicitAccessibleName(e) {\n  return e.hasAttribute(\"aria-label\") || e.hasAttribute(\"aria-labelledby\");\n}\nvar kAncestorPreventingLandmark = \"article:not([role]), aside:not([role]), main:not([role]), nav:not([role]), section:not([role]), [role=article], [role=complementary], [role=main], [role=navigation], [role=region]\";\nvar kGlobalAriaAttributes = /* @__PURE__ */ new Map([\n  [\"aria-atomic\", void 0],\n  [\"aria-busy\", void 0],\n  [\"aria-controls\", void 0],\n  [\"aria-current\", void 0],\n  [\"aria-describedby\", void 0],\n  [\"aria-details\", void 0],\n  // Global use deprecated in ARIA 1.2\n  // ['aria-disabled', undefined],\n  [\"aria-dropeffect\", void 0],\n  // Global use deprecated in ARIA 1.2\n  // ['aria-errormessage', undefined],\n  [\"aria-flowto\", void 0],\n  [\"aria-grabbed\", void 0],\n  // Global use deprecated in ARIA 1.2\n  // ['aria-haspopup', undefined],\n  [\"aria-hidden\", void 0],\n  // Global use deprecated in ARIA 1.2\n  // ['aria-invalid', undefined],\n  [\"aria-keyshortcuts\", void 0],\n  [\"aria-label\", /* @__PURE__ */ new Set([\"caption\", \"code\", \"deletion\", \"emphasis\", \"generic\", \"insertion\", \"paragraph\", \"presentation\", \"strong\", \"subscript\", \"superscript\"])],\n  [\"aria-labelledby\", /* @__PURE__ */ new Set([\"caption\", \"code\", \"deletion\", \"emphasis\", \"generic\", \"insertion\", \"paragraph\", \"presentation\", \"strong\", \"subscript\", \"superscript\"])],\n  [\"aria-live\", void 0],\n  [\"aria-owns\", void 0],\n  [\"aria-relevant\", void 0],\n  [\"aria-roledescription\", /* @__PURE__ */ new Set([\"generic\"])]\n]);\nfunction hasGlobalAriaAttribute(element, forRole) {\n  return [...kGlobalAriaAttributes].some(([attr, prohibited]) => {\n    return !(prohibited == null ? void 0 : prohibited.has(forRole || \"\")) && element.hasAttribute(attr);\n  });\n}\nfunction hasTabIndex(element) {\n  return !Number.isNaN(Number(String(element.getAttribute(\"tabindex\"))));\n}\nfunction isFocusable(element) {\n  return !isNativelyDisabled(element) && (isNativelyFocusable(element) || hasTabIndex(element));\n}\nfunction isNativelyFocusable(element) {\n  const tagName = elementSafeTagName(element);\n  if ([\"BUTTON\", \"DETAILS\", \"SELECT\", \"TEXTAREA\"].includes(tagName))\n    return true;\n  if (tagName === \"A\" || tagName === \"AREA\")\n    return element.hasAttribute(\"href\");\n  if (tagName === \"INPUT\")\n    return !element.hidden;\n  return false;\n}\nvar kImplicitRoleByTagName = {\n  \"A\": (e) => {\n    return e.hasAttribute(\"href\") ? \"link\" : null;\n  },\n  \"AREA\": (e) => {\n    return e.hasAttribute(\"href\") ? \"link\" : null;\n  },\n  \"ARTICLE\": () => \"article\",\n  \"ASIDE\": () => \"complementary\",\n  \"BLOCKQUOTE\": () => \"blockquote\",\n  \"BUTTON\": () => \"button\",\n  \"CAPTION\": () => \"caption\",\n  \"CODE\": () => \"code\",\n  \"DATALIST\": () => \"listbox\",\n  \"DD\": () => \"definition\",\n  \"DEL\": () => \"deletion\",\n  \"DETAILS\": () => \"group\",\n  \"DFN\": () => \"term\",\n  \"DIALOG\": () => \"dialog\",\n  \"DT\": () => \"term\",\n  \"EM\": () => \"emphasis\",\n  \"FIELDSET\": () => \"group\",\n  \"FIGURE\": () => \"figure\",\n  \"FOOTER\": (e) => closestCrossShadow(e, kAncestorPreventingLandmark) ? null : \"contentinfo\",\n  \"FORM\": (e) => hasExplicitAccessibleName(e) ? \"form\" : null,\n  \"H1\": () => \"heading\",\n  \"H2\": () => \"heading\",\n  \"H3\": () => \"heading\",\n  \"H4\": () => \"heading\",\n  \"H5\": () => \"heading\",\n  \"H6\": () => \"heading\",\n  \"HEADER\": (e) => closestCrossShadow(e, kAncestorPreventingLandmark) ? null : \"banner\",\n  \"HR\": () => \"separator\",\n  \"HTML\": () => \"document\",\n  \"IMG\": (e) => e.getAttribute(\"alt\") === \"\" && !e.getAttribute(\"title\") && !hasGlobalAriaAttribute(e) && !hasTabIndex(e) ? \"presentation\" : \"img\",\n  \"INPUT\": (e) => {\n    const type = e.type.toLowerCase();\n    if (type === \"search\")\n      return e.hasAttribute(\"list\") ? \"combobox\" : \"searchbox\";\n    if ([\"email\", \"tel\", \"text\", \"url\", \"\"].includes(type)) {\n      const list = getIdRefs(e, e.getAttribute(\"list\"))[0];\n      return list && elementSafeTagName(list) === \"DATALIST\" ? \"combobox\" : \"textbox\";\n    }\n    if (type === \"hidden\")\n      return \"\";\n    return {\n      \"button\": \"button\",\n      \"checkbox\": \"checkbox\",\n      \"image\": \"button\",\n      \"number\": \"spinbutton\",\n      \"radio\": \"radio\",\n      \"range\": \"slider\",\n      \"reset\": \"button\",\n      \"submit\": \"button\"\n    }[type] || \"textbox\";\n  },\n  \"INS\": () => \"insertion\",\n  \"LI\": () => \"listitem\",\n  \"MAIN\": () => \"main\",\n  \"MARK\": () => \"mark\",\n  \"MATH\": () => \"math\",\n  \"MENU\": () => \"list\",\n  \"METER\": () => \"meter\",\n  \"NAV\": () => \"navigation\",\n  \"OL\": () => \"list\",\n  \"OPTGROUP\": () => \"group\",\n  \"OPTION\": () => \"option\",\n  \"OUTPUT\": () => \"status\",\n  \"P\": () => \"paragraph\",\n  \"PROGRESS\": () => \"progressbar\",\n  \"SECTION\": (e) => hasExplicitAccessibleName(e) ? \"region\" : null,\n  \"SELECT\": (e) => e.hasAttribute(\"multiple\") || e.size > 1 ? \"listbox\" : \"combobox\",\n  \"STRONG\": () => \"strong\",\n  \"SUB\": () => \"subscript\",\n  \"SUP\": () => \"superscript\",\n  // For <svg> we default to Chrome behavior:\n  // - Chrome reports 'img'.\n  // - Firefox reports 'diagram' that is not in official ARIA spec yet.\n  // - Safari reports 'no role', but still computes accessible name.\n  \"SVG\": () => \"img\",\n  \"TABLE\": () => \"table\",\n  \"TBODY\": () => \"rowgroup\",\n  \"TD\": (e) => {\n    const table = closestCrossShadow(e, \"table\");\n    const role = table ? getExplicitAriaRole(table) : \"\";\n    return role === \"grid\" || role === \"treegrid\" ? \"gridcell\" : \"cell\";\n  },\n  \"TEXTAREA\": () => \"textbox\",\n  \"TFOOT\": () => \"rowgroup\",\n  \"TH\": (e) => {\n    if (e.getAttribute(\"scope\") === \"col\")\n      return \"columnheader\";\n    if (e.getAttribute(\"scope\") === \"row\")\n      return \"rowheader\";\n    const table = closestCrossShadow(e, \"table\");\n    const role = table ? getExplicitAriaRole(table) : \"\";\n    return role === \"grid\" || role === \"treegrid\" ? \"gridcell\" : \"cell\";\n  },\n  \"THEAD\": () => \"rowgroup\",\n  \"TIME\": () => \"time\",\n  \"TR\": () => \"row\",\n  \"UL\": () => \"list\"\n};\nvar kPresentationInheritanceParents = {\n  \"DD\": [\"DL\", \"DIV\"],\n  \"DIV\": [\"DL\"],\n  \"DT\": [\"DL\", \"DIV\"],\n  \"LI\": [\"OL\", \"UL\"],\n  \"TBODY\": [\"TABLE\"],\n  \"TD\": [\"TR\"],\n  \"TFOOT\": [\"TABLE\"],\n  \"TH\": [\"TR\"],\n  \"THEAD\": [\"TABLE\"],\n  \"TR\": [\"THEAD\", \"TBODY\", \"TFOOT\", \"TABLE\"]\n};\nfunction getImplicitAriaRole(element) {\n  var _a;\n  const implicitRole = ((_a = kImplicitRoleByTagName[elementSafeTagName(element)]) == null ? void 0 : _a.call(kImplicitRoleByTagName, element)) || \"\";\n  if (!implicitRole)\n    return null;\n  let ancestor = element;\n  while (ancestor) {\n    const parent = parentElementOrShadowHost(ancestor);\n    const parents = kPresentationInheritanceParents[elementSafeTagName(ancestor)];\n    if (!parents || !parent || !parents.includes(elementSafeTagName(parent)))\n      break;\n    const parentExplicitRole = getExplicitAriaRole(parent);\n    if ((parentExplicitRole === \"none\" || parentExplicitRole === \"presentation\") && !hasPresentationConflictResolution(parent, parentExplicitRole))\n      return parentExplicitRole;\n    ancestor = parent;\n  }\n  return implicitRole;\n}\nvar allRoles = [\n  \"alert\",\n  \"alertdialog\",\n  \"application\",\n  \"article\",\n  \"banner\",\n  \"blockquote\",\n  \"button\",\n  \"caption\",\n  \"cell\",\n  \"checkbox\",\n  \"code\",\n  \"columnheader\",\n  \"combobox\",\n  \"command\",\n  \"complementary\",\n  \"composite\",\n  \"contentinfo\",\n  \"definition\",\n  \"deletion\",\n  \"dialog\",\n  \"directory\",\n  \"document\",\n  \"emphasis\",\n  \"feed\",\n  \"figure\",\n  \"form\",\n  \"generic\",\n  \"grid\",\n  \"gridcell\",\n  \"group\",\n  \"heading\",\n  \"img\",\n  \"input\",\n  \"insertion\",\n  \"landmark\",\n  \"link\",\n  \"list\",\n  \"listbox\",\n  \"listitem\",\n  \"log\",\n  \"main\",\n  \"marquee\",\n  \"math\",\n  \"meter\",\n  \"menu\",\n  \"menubar\",\n  \"menuitem\",\n  \"menuitemcheckbox\",\n  \"menuitemradio\",\n  \"navigation\",\n  \"none\",\n  \"note\",\n  \"option\",\n  \"paragraph\",\n  \"presentation\",\n  \"progressbar\",\n  \"radio\",\n  \"radiogroup\",\n  \"range\",\n  \"region\",\n  \"roletype\",\n  \"row\",\n  \"rowgroup\",\n  \"rowheader\",\n  \"scrollbar\",\n  \"search\",\n  \"searchbox\",\n  \"section\",\n  \"sectionhead\",\n  \"select\",\n  \"separator\",\n  \"slider\",\n  \"spinbutton\",\n  \"status\",\n  \"strong\",\n  \"structure\",\n  \"subscript\",\n  \"superscript\",\n  \"switch\",\n  \"tab\",\n  \"table\",\n  \"tablist\",\n  \"tabpanel\",\n  \"term\",\n  \"textbox\",\n  \"time\",\n  \"timer\",\n  \"toolbar\",\n  \"tooltip\",\n  \"tree\",\n  \"treegrid\",\n  \"treeitem\",\n  \"widget\",\n  \"window\"\n];\nvar abstractRoles = [\"command\", \"composite\", \"input\", \"landmark\", \"range\", \"roletype\", \"section\", \"sectionhead\", \"select\", \"structure\", \"widget\", \"window\"];\nvar validRoles = allRoles.filter((role) => !abstractRoles.includes(role));\nfunction getExplicitAriaRole(element) {\n  const roles = (element.getAttribute(\"role\") || \"\").split(\" \").map((role) => role.trim());\n  return roles.find((role) => validRoles.includes(role)) || null;\n}\nfunction hasPresentationConflictResolution(element, role) {\n  return hasGlobalAriaAttribute(element, role) || isFocusable(element);\n}\nfunction getAriaRole(element) {\n  const explicitRole = getExplicitAriaRole(element);\n  if (!explicitRole)\n    return getImplicitAriaRole(element);\n  if (explicitRole === \"none\" || explicitRole === \"presentation\") {\n    const implicitRole = getImplicitAriaRole(element);\n    if (hasPresentationConflictResolution(element, implicitRole))\n      return implicitRole;\n  }\n  return explicitRole;\n}\nfunction getAriaBoolean(attr) {\n  return attr === null ? void 0 : attr.toLowerCase() === \"true\";\n}\nfunction isElementHiddenForAria(element) {\n  if ([\"STYLE\", \"SCRIPT\", \"NOSCRIPT\", \"TEMPLATE\"].includes(elementSafeTagName(element)))\n    return true;\n  const style = getElementComputedStyle(element);\n  const isSlot = element.nodeName === \"SLOT\";\n  if ((style == null ? void 0 : style.display) === \"contents\" && !isSlot) {\n    for (let child = element.firstChild; child; child = child.nextSibling) {\n      if (child.nodeType === 1 && !isElementHiddenForAria(child))\n        return false;\n      if (child.nodeType === 3 && isVisibleTextNode(child))\n        return false;\n    }\n    return true;\n  }\n  const isOptionInsideSelect = element.nodeName === \"OPTION\" && !!element.closest(\"select\");\n  if (!isOptionInsideSelect && !isSlot && !isElementStyleVisibilityVisible(element, style))\n    return true;\n  return belongsToDisplayNoneOrAriaHiddenOrNonSlotted(element);\n}\nfunction belongsToDisplayNoneOrAriaHiddenOrNonSlotted(element) {\n  let hidden = cacheIsHidden == null ? void 0 : cacheIsHidden.get(element);\n  if (hidden === void 0) {\n    hidden = false;\n    if (element.parentElement && element.parentElement.shadowRoot && !element.assignedSlot)\n      hidden = true;\n    if (!hidden) {\n      const style = getElementComputedStyle(element);\n      hidden = !style || style.display === \"none\" || getAriaBoolean(element.getAttribute(\"aria-hidden\")) === true;\n    }\n    if (!hidden) {\n      const parent = parentElementOrShadowHost(element);\n      if (parent)\n        hidden = belongsToDisplayNoneOrAriaHiddenOrNonSlotted(parent);\n    }\n    cacheIsHidden == null ? void 0 : cacheIsHidden.set(element, hidden);\n  }\n  return hidden;\n}\nfunction getIdRefs(element, ref) {\n  if (!ref)\n    return [];\n  const root = enclosingShadowRootOrDocument(element);\n  if (!root)\n    return [];\n  try {\n    const ids = ref.split(\" \").filter((id) => !!id);\n    const set = /* @__PURE__ */ new Set();\n    for (const id of ids) {\n      const firstElement = root.querySelector(\"#\" + CSS.escape(id));\n      if (firstElement)\n        set.add(firstElement);\n    }\n    return [...set];\n  } catch (e) {\n    return [];\n  }\n}\nfunction trimFlatString(s) {\n  return s.trim();\n}\nfunction asFlatString(s) {\n  return s.split(\"\\xA0\").map((chunk) => chunk.replace(/\\r\\n/g, \"\\n\").replace(/\\s\\s*/g, \" \")).join(\"\\xA0\").trim();\n}\nfunction queryInAriaOwned(element, selector) {\n  const result = [...element.querySelectorAll(selector)];\n  for (const owned of getIdRefs(element, element.getAttribute(\"aria-owns\"))) {\n    if (owned.matches(selector))\n      result.push(owned);\n    result.push(...owned.querySelectorAll(selector));\n  }\n  return result;\n}\nfunction getPseudoContent(element, pseudo) {\n  const cache = pseudo === \"::before\" ? cachePseudoContentBefore : cachePseudoContentAfter;\n  if (cache == null ? void 0 : cache.has(element))\n    return (cache == null ? void 0 : cache.get(element)) || \"\";\n  const pseudoStyle = getElementComputedStyle(element, pseudo);\n  const content = getPseudoContentImpl(pseudoStyle);\n  if (cache)\n    cache.set(element, content);\n  return content;\n}\nfunction getPseudoContentImpl(pseudoStyle) {\n  if (!pseudoStyle)\n    return \"\";\n  const content = pseudoStyle.content;\n  if (content[0] === \"'\" && content[content.length - 1] === \"'\" || content[0] === '\"' && content[content.length - 1] === '\"') {\n    const unquoted = content.substring(1, content.length - 1);\n    const display = pseudoStyle.display || \"inline\";\n    if (display !== \"inline\")\n      return \" \" + unquoted + \" \";\n    return unquoted;\n  }\n  return \"\";\n}\nfunction getAriaLabelledByElements(element) {\n  const ref = element.getAttribute(\"aria-labelledby\");\n  if (ref === null)\n    return null;\n  return getIdRefs(element, ref);\n}\nfunction allowsNameFromContent(role, targetDescendant) {\n  const alwaysAllowsNameFromContent = [\"button\", \"cell\", \"checkbox\", \"columnheader\", \"gridcell\", \"heading\", \"link\", \"menuitem\", \"menuitemcheckbox\", \"menuitemradio\", \"option\", \"radio\", \"row\", \"rowheader\", \"switch\", \"tab\", \"tooltip\", \"treeitem\"].includes(role);\n  const descendantAllowsNameFromContent = targetDescendant && [\"\", \"caption\", \"code\", \"contentinfo\", \"definition\", \"deletion\", \"emphasis\", \"insertion\", \"list\", \"listitem\", \"mark\", \"none\", \"paragraph\", \"presentation\", \"region\", \"row\", \"rowgroup\", \"section\", \"strong\", \"subscript\", \"superscript\", \"table\", \"term\", \"time\"].includes(role);\n  return alwaysAllowsNameFromContent || descendantAllowsNameFromContent;\n}\nfunction getElementAccessibleName(element, includeHidden) {\n  const cache = includeHidden ? cacheAccessibleNameHidden : cacheAccessibleName;\n  let accessibleName = cache == null ? void 0 : cache.get(element);\n  if (accessibleName === void 0) {\n    accessibleName = \"\";\n    const elementProhibitsNaming = [\"caption\", \"code\", \"definition\", \"deletion\", \"emphasis\", \"generic\", \"insertion\", \"mark\", \"paragraph\", \"presentation\", \"strong\", \"subscript\", \"suggestion\", \"superscript\", \"term\", \"time\"].includes(getAriaRole(element) || \"\");\n    if (!elementProhibitsNaming) {\n      accessibleName = asFlatString(getTextAlternativeInternal(element, {\n        includeHidden,\n        visitedElements: /* @__PURE__ */ new Set(),\n        embeddedInDescribedBy: void 0,\n        embeddedInLabelledBy: void 0,\n        embeddedInLabel: void 0,\n        embeddedInNativeTextAlternative: void 0,\n        embeddedInTargetElement: \"self\"\n      }));\n    }\n    cache == null ? void 0 : cache.set(element, accessibleName);\n  }\n  return accessibleName;\n}\nfunction getElementAccessibleDescription(element, includeHidden) {\n  const cache = includeHidden ? cacheAccessibleDescriptionHidden : cacheAccessibleDescription;\n  let accessibleDescription = cache == null ? void 0 : cache.get(element);\n  if (accessibleDescription === void 0) {\n    accessibleDescription = \"\";\n    if (element.hasAttribute(\"aria-describedby\")) {\n      const describedBy = getIdRefs(element, element.getAttribute(\"aria-describedby\"));\n      accessibleDescription = asFlatString(describedBy.map((ref) => getTextAlternativeInternal(ref, {\n        includeHidden,\n        visitedElements: /* @__PURE__ */ new Set(),\n        embeddedInLabelledBy: void 0,\n        embeddedInLabel: void 0,\n        embeddedInNativeTextAlternative: void 0,\n        embeddedInTargetElement: \"none\",\n        embeddedInDescribedBy: { element: ref, hidden: isElementHiddenForAria(ref) }\n      })).join(\" \"));\n    } else if (element.hasAttribute(\"aria-description\")) {\n      accessibleDescription = asFlatString(element.getAttribute(\"aria-description\") || \"\");\n    } else {\n      accessibleDescription = asFlatString(element.getAttribute(\"title\") || \"\");\n    }\n    cache == null ? void 0 : cache.set(element, accessibleDescription);\n  }\n  return accessibleDescription;\n}\nfunction getTextAlternativeInternal(element, options) {\n  var _a, _b, _c, _d;\n  if (options.visitedElements.has(element))\n    return \"\";\n  const childOptions = {\n    ...options,\n    embeddedInTargetElement: options.embeddedInTargetElement === \"self\" ? \"descendant\" : options.embeddedInTargetElement\n  };\n  if (!options.includeHidden && !((_a = options.embeddedInLabelledBy) == null ? void 0 : _a.hidden) && !((_b = options.embeddedInDescribedBy) == null ? void 0 : _b.hidden) && !((_c = options == null ? void 0 : options.embeddedInNativeTextAlternative) == null ? void 0 : _c.hidden) && !((_d = options == null ? void 0 : options.embeddedInLabel) == null ? void 0 : _d.hidden) && isElementHiddenForAria(element)) {\n    options.visitedElements.add(element);\n    return \"\";\n  }\n  const labelledBy = getAriaLabelledByElements(element);\n  if (!options.embeddedInLabelledBy) {\n    const accessibleName = (labelledBy || []).map((ref) => getTextAlternativeInternal(ref, {\n      ...options,\n      embeddedInLabelledBy: { element: ref, hidden: isElementHiddenForAria(ref) },\n      embeddedInDescribedBy: void 0,\n      embeddedInTargetElement: \"none\",\n      embeddedInLabel: void 0,\n      embeddedInNativeTextAlternative: void 0\n    })).join(\" \");\n    if (accessibleName)\n      return accessibleName;\n  }\n  const role = getAriaRole(element) || \"\";\n  const tagName = elementSafeTagName(element);\n  if (!!options.embeddedInLabel || !!options.embeddedInLabelledBy || options.embeddedInTargetElement === \"descendant\") {\n    const isOwnLabel = [...element.labels || []].includes(element);\n    const isOwnLabelledBy = (labelledBy || []).includes(element);\n    if (!isOwnLabel && !isOwnLabelledBy) {\n      if (role === \"textbox\") {\n        options.visitedElements.add(element);\n        if (tagName === \"INPUT\" || tagName === \"TEXTAREA\")\n          return element.value;\n        return element.textContent || \"\";\n      }\n      if ([\"combobox\", \"listbox\"].includes(role)) {\n        options.visitedElements.add(element);\n        let selectedOptions;\n        if (tagName === \"SELECT\") {\n          selectedOptions = [...element.selectedOptions];\n          if (!selectedOptions.length && element.options.length)\n            selectedOptions.push(element.options[0]);\n        } else {\n          const listbox = role === \"combobox\" ? queryInAriaOwned(element, \"*\").find((e) => getAriaRole(e) === \"listbox\") : element;\n          selectedOptions = listbox ? queryInAriaOwned(listbox, '[aria-selected=\"true\"]').filter((e) => getAriaRole(e) === \"option\") : [];\n        }\n        if (!selectedOptions.length && tagName === \"INPUT\") {\n          return element.value;\n        }\n        return selectedOptions.map((option) => getTextAlternativeInternal(option, childOptions)).join(\" \");\n      }\n      if ([\"progressbar\", \"scrollbar\", \"slider\", \"spinbutton\", \"meter\"].includes(role)) {\n        options.visitedElements.add(element);\n        if (element.hasAttribute(\"aria-valuetext\"))\n          return element.getAttribute(\"aria-valuetext\") || \"\";\n        if (element.hasAttribute(\"aria-valuenow\"))\n          return element.getAttribute(\"aria-valuenow\") || \"\";\n        return element.getAttribute(\"value\") || \"\";\n      }\n      if ([\"menu\"].includes(role)) {\n        options.visitedElements.add(element);\n        return \"\";\n      }\n    }\n  }\n  const ariaLabel = element.getAttribute(\"aria-label\") || \"\";\n  if (trimFlatString(ariaLabel)) {\n    options.visitedElements.add(element);\n    return ariaLabel;\n  }\n  if (![\"presentation\", \"none\"].includes(role)) {\n    if (tagName === \"INPUT\" && [\"button\", \"submit\", \"reset\"].includes(element.type)) {\n      options.visitedElements.add(element);\n      const value = element.value || \"\";\n      if (trimFlatString(value))\n        return value;\n      if (element.type === \"submit\")\n        return \"Submit\";\n      if (element.type === \"reset\")\n        return \"Reset\";\n      const title = element.getAttribute(\"title\") || \"\";\n      return title;\n    }\n    if (tagName === \"INPUT\" && element.type === \"image\") {\n      options.visitedElements.add(element);\n      const labels = element.labels || [];\n      if (labels.length && !options.embeddedInLabelledBy)\n        return getAccessibleNameFromAssociatedLabels(labels, options);\n      const alt = element.getAttribute(\"alt\") || \"\";\n      if (trimFlatString(alt))\n        return alt;\n      const title = element.getAttribute(\"title\") || \"\";\n      if (trimFlatString(title))\n        return title;\n      return \"Submit\";\n    }\n    if (!labelledBy && tagName === \"BUTTON\") {\n      options.visitedElements.add(element);\n      const labels = element.labels || [];\n      if (labels.length)\n        return getAccessibleNameFromAssociatedLabels(labels, options);\n    }\n    if (!labelledBy && tagName === \"OUTPUT\") {\n      options.visitedElements.add(element);\n      const labels = element.labels || [];\n      if (labels.length)\n        return getAccessibleNameFromAssociatedLabels(labels, options);\n      return element.getAttribute(\"title\") || \"\";\n    }\n    if (!labelledBy && (tagName === \"TEXTAREA\" || tagName === \"SELECT\" || tagName === \"INPUT\")) {\n      options.visitedElements.add(element);\n      const labels = element.labels || [];\n      if (labels.length)\n        return getAccessibleNameFromAssociatedLabels(labels, options);\n      const usePlaceholder = tagName === \"INPUT\" && [\"text\", \"password\", \"search\", \"tel\", \"email\", \"url\"].includes(element.type) || tagName === \"TEXTAREA\";\n      const placeholder = element.getAttribute(\"placeholder\") || \"\";\n      const title = element.getAttribute(\"title\") || \"\";\n      if (!usePlaceholder || title)\n        return title;\n      return placeholder;\n    }\n    if (!labelledBy && tagName === \"FIELDSET\") {\n      options.visitedElements.add(element);\n      for (let child = element.firstElementChild; child; child = child.nextElementSibling) {\n        if (elementSafeTagName(child) === \"LEGEND\") {\n          return getTextAlternativeInternal(child, {\n            ...childOptions,\n            embeddedInNativeTextAlternative: { element: child, hidden: isElementHiddenForAria(child) }\n          });\n        }\n      }\n      const title = element.getAttribute(\"title\") || \"\";\n      return title;\n    }\n    if (!labelledBy && tagName === \"FIGURE\") {\n      options.visitedElements.add(element);\n      for (let child = element.firstElementChild; child; child = child.nextElementSibling) {\n        if (elementSafeTagName(child) === \"FIGCAPTION\") {\n          return getTextAlternativeInternal(child, {\n            ...childOptions,\n            embeddedInNativeTextAlternative: { element: child, hidden: isElementHiddenForAria(child) }\n          });\n        }\n      }\n      const title = element.getAttribute(\"title\") || \"\";\n      return title;\n    }\n    if (tagName === \"IMG\") {\n      options.visitedElements.add(element);\n      const alt = element.getAttribute(\"alt\") || \"\";\n      if (trimFlatString(alt))\n        return alt;\n      const title = element.getAttribute(\"title\") || \"\";\n      return title;\n    }\n    if (tagName === \"TABLE\") {\n      options.visitedElements.add(element);\n      for (let child = element.firstElementChild; child; child = child.nextElementSibling) {\n        if (elementSafeTagName(child) === \"CAPTION\") {\n          return getTextAlternativeInternal(child, {\n            ...childOptions,\n            embeddedInNativeTextAlternative: { element: child, hidden: isElementHiddenForAria(child) }\n          });\n        }\n      }\n      const summary = element.getAttribute(\"summary\") || \"\";\n      if (summary)\n        return summary;\n    }\n    if (tagName === \"AREA\") {\n      options.visitedElements.add(element);\n      const alt = element.getAttribute(\"alt\") || \"\";\n      if (trimFlatString(alt))\n        return alt;\n      const title = element.getAttribute(\"title\") || \"\";\n      return title;\n    }\n    if (tagName === \"SVG\" || element.ownerSVGElement) {\n      options.visitedElements.add(element);\n      for (let child = element.firstElementChild; child; child = child.nextElementSibling) {\n        if (elementSafeTagName(child) === \"TITLE\" && child.ownerSVGElement) {\n          return getTextAlternativeInternal(child, {\n            ...childOptions,\n            embeddedInLabelledBy: { element: child, hidden: isElementHiddenForAria(child) }\n          });\n        }\n      }\n    }\n    if (element.ownerSVGElement && tagName === \"A\") {\n      const title = element.getAttribute(\"xlink:title\") || \"\";\n      if (trimFlatString(title)) {\n        options.visitedElements.add(element);\n        return title;\n      }\n    }\n  }\n  const shouldNameFromContentForSummary = tagName === \"SUMMARY\" && ![\"presentation\", \"none\"].includes(role);\n  if (allowsNameFromContent(role, options.embeddedInTargetElement === \"descendant\") || shouldNameFromContentForSummary || !!options.embeddedInLabelledBy || !!options.embeddedInDescribedBy || !!options.embeddedInLabel || !!options.embeddedInNativeTextAlternative) {\n    options.visitedElements.add(element);\n    const tokens = [];\n    const visit = (node, skipSlotted) => {\n      var _a2;\n      if (skipSlotted && node.assignedSlot)\n        return;\n      if (node.nodeType === 1) {\n        const display = ((_a2 = getElementComputedStyle(node)) == null ? void 0 : _a2.display) || \"inline\";\n        let token = getTextAlternativeInternal(node, childOptions);\n        if (display !== \"inline\" || node.nodeName === \"BR\")\n          token = \" \" + token + \" \";\n        tokens.push(token);\n      } else if (node.nodeType === 3) {\n        tokens.push(node.textContent || \"\");\n      }\n    };\n    tokens.push(getPseudoContent(element, \"::before\"));\n    const assignedNodes = element.nodeName === \"SLOT\" ? element.assignedNodes() : [];\n    if (assignedNodes.length) {\n      for (const child of assignedNodes)\n        visit(child, false);\n    } else {\n      for (let child = element.firstChild; child; child = child.nextSibling)\n        visit(child, true);\n      if (element.shadowRoot) {\n        for (let child = element.shadowRoot.firstChild; child; child = child.nextSibling)\n          visit(child, true);\n      }\n      for (const owned of getIdRefs(element, element.getAttribute(\"aria-owns\")))\n        visit(owned, true);\n    }\n    tokens.push(getPseudoContent(element, \"::after\"));\n    const accessibleName = tokens.join(\"\");\n    const maybeTrimmedAccessibleName = options.embeddedInTargetElement === \"self\" ? trimFlatString(accessibleName) : accessibleName;\n    if (maybeTrimmedAccessibleName)\n      return accessibleName;\n  }\n  if (![\"presentation\", \"none\"].includes(role) || tagName === \"IFRAME\") {\n    options.visitedElements.add(element);\n    const title = element.getAttribute(\"title\") || \"\";\n    if (trimFlatString(title))\n      return title;\n  }\n  options.visitedElements.add(element);\n  return \"\";\n}\nvar kAriaSelectedRoles = [\"gridcell\", \"option\", \"row\", \"tab\", \"rowheader\", \"columnheader\", \"treeitem\"];\nfunction getAriaSelected(element) {\n  if (elementSafeTagName(element) === \"OPTION\")\n    return element.selected;\n  if (kAriaSelectedRoles.includes(getAriaRole(element) || \"\"))\n    return getAriaBoolean(element.getAttribute(\"aria-selected\")) === true;\n  return false;\n}\nvar kAriaCheckedRoles = [\"checkbox\", \"menuitemcheckbox\", \"option\", \"radio\", \"switch\", \"menuitemradio\", \"treeitem\"];\nfunction getAriaChecked(element) {\n  const result = getChecked(element, true);\n  return result === \"error\" ? false : result;\n}\nfunction getChecked(element, allowMixed) {\n  const tagName = elementSafeTagName(element);\n  if (allowMixed && tagName === \"INPUT\" && element.indeterminate)\n    return \"mixed\";\n  if (tagName === \"INPUT\" && [\"checkbox\", \"radio\"].includes(element.type))\n    return element.checked;\n  if (kAriaCheckedRoles.includes(getAriaRole(element) || \"\")) {\n    const checked = element.getAttribute(\"aria-checked\");\n    if (checked === \"true\")\n      return true;\n    if (allowMixed && checked === \"mixed\")\n      return \"mixed\";\n    return false;\n  }\n  return \"error\";\n}\nvar kAriaPressedRoles = [\"button\"];\nfunction getAriaPressed(element) {\n  if (kAriaPressedRoles.includes(getAriaRole(element) || \"\")) {\n    const pressed = element.getAttribute(\"aria-pressed\");\n    if (pressed === \"true\")\n      return true;\n    if (pressed === \"mixed\")\n      return \"mixed\";\n  }\n  return false;\n}\nvar kAriaExpandedRoles = [\"application\", \"button\", \"checkbox\", \"combobox\", \"gridcell\", \"link\", \"listbox\", \"menuitem\", \"row\", \"rowheader\", \"tab\", \"treeitem\", \"columnheader\", \"menuitemcheckbox\", \"menuitemradio\", \"rowheader\", \"switch\"];\nfunction getAriaExpanded(element) {\n  if (elementSafeTagName(element) === \"DETAILS\")\n    return element.open;\n  if (kAriaExpandedRoles.includes(getAriaRole(element) || \"\")) {\n    const expanded = element.getAttribute(\"aria-expanded\");\n    if (expanded === null)\n      return \"none\";\n    if (expanded === \"true\")\n      return true;\n    return false;\n  }\n  return \"none\";\n}\nvar kAriaLevelRoles = [\"heading\", \"listitem\", \"row\", \"treeitem\"];\nfunction getAriaLevel(element) {\n  const native = { \"H1\": 1, \"H2\": 2, \"H3\": 3, \"H4\": 4, \"H5\": 5, \"H6\": 6 }[elementSafeTagName(element)];\n  if (native)\n    return native;\n  if (kAriaLevelRoles.includes(getAriaRole(element) || \"\")) {\n    const attr = element.getAttribute(\"aria-level\");\n    const value = attr === null ? Number.NaN : Number(attr);\n    if (Number.isInteger(value) && value >= 1)\n      return value;\n  }\n  return 0;\n}\nvar kAriaDisabledRoles = [\"application\", \"button\", \"composite\", \"gridcell\", \"group\", \"input\", \"link\", \"menuitem\", \"scrollbar\", \"separator\", \"tab\", \"checkbox\", \"columnheader\", \"combobox\", \"grid\", \"listbox\", \"menu\", \"menubar\", \"menuitemcheckbox\", \"menuitemradio\", \"option\", \"radio\", \"radiogroup\", \"row\", \"rowheader\", \"searchbox\", \"select\", \"slider\", \"spinbutton\", \"switch\", \"tablist\", \"textbox\", \"toolbar\", \"tree\", \"treegrid\", \"treeitem\"];\nfunction getAriaDisabled(element) {\n  return isNativelyDisabled(element) || hasExplicitAriaDisabled(element);\n}\nfunction isNativelyDisabled(element) {\n  const isNativeFormControl = [\"BUTTON\", \"INPUT\", \"SELECT\", \"TEXTAREA\", \"OPTION\", \"OPTGROUP\"].includes(element.tagName);\n  return isNativeFormControl && (element.hasAttribute(\"disabled\") || belongsToDisabledFieldSet(element));\n}\nfunction belongsToDisabledFieldSet(element) {\n  if (!element)\n    return false;\n  if (elementSafeTagName(element) === \"FIELDSET\" && element.hasAttribute(\"disabled\"))\n    return true;\n  return belongsToDisabledFieldSet(element.parentElement);\n}\nfunction hasExplicitAriaDisabled(element) {\n  if (!element)\n    return false;\n  if (kAriaDisabledRoles.includes(getAriaRole(element) || \"\")) {\n    const attribute = (element.getAttribute(\"aria-disabled\") || \"\").toLowerCase();\n    if (attribute === \"true\")\n      return true;\n    if (attribute === \"false\")\n      return false;\n  }\n  return hasExplicitAriaDisabled(parentElementOrShadowHost(element));\n}\nfunction getAccessibleNameFromAssociatedLabels(labels, options) {\n  return [...labels].map((label) => getTextAlternativeInternal(label, {\n    ...options,\n    embeddedInLabel: { element: label, hidden: isElementHiddenForAria(label) },\n    embeddedInNativeTextAlternative: void 0,\n    embeddedInLabelledBy: void 0,\n    embeddedInDescribedBy: void 0,\n    embeddedInTargetElement: \"none\"\n  })).filter((accessibleName) => !!accessibleName).join(\" \");\n}\nvar cacheAccessibleName;\nvar cacheAccessibleNameHidden;\nvar cacheAccessibleDescription;\nvar cacheAccessibleDescriptionHidden;\nvar cacheIsHidden;\nvar cachePseudoContentBefore;\nvar cachePseudoContentAfter;\nvar cachesCounter = 0;\nfunction beginAriaCaches() {\n  ++cachesCounter;\n  cacheAccessibleName != null ? cacheAccessibleName : cacheAccessibleName = /* @__PURE__ */ new Map();\n  cacheAccessibleNameHidden != null ? cacheAccessibleNameHidden : cacheAccessibleNameHidden = /* @__PURE__ */ new Map();\n  cacheAccessibleDescription != null ? cacheAccessibleDescription : cacheAccessibleDescription = /* @__PURE__ */ new Map();\n  cacheAccessibleDescriptionHidden != null ? cacheAccessibleDescriptionHidden : cacheAccessibleDescriptionHidden = /* @__PURE__ */ new Map();\n  cacheIsHidden != null ? cacheIsHidden : cacheIsHidden = /* @__PURE__ */ new Map();\n  cachePseudoContentBefore != null ? cachePseudoContentBefore : cachePseudoContentBefore = /* @__PURE__ */ new Map();\n  cachePseudoContentAfter != null ? cachePseudoContentAfter : cachePseudoContentAfter = /* @__PURE__ */ new Map();\n}\nfunction endAriaCaches() {\n  if (!--cachesCounter) {\n    cacheAccessibleName = void 0;\n    cacheAccessibleNameHidden = void 0;\n    cacheAccessibleDescription = void 0;\n    cacheAccessibleDescriptionHidden = void 0;\n    cacheIsHidden = void 0;\n    cachePseudoContentBefore = void 0;\n    cachePseudoContentAfter = void 0;\n  }\n}\n\n// packages/playwright-core/src/server/injected/selectorUtils.ts\nfunction matchesComponentAttribute(obj, attr) {\n  for (const token of attr.jsonPath) {\n    if (obj !== void 0 && obj !== null)\n      obj = obj[token];\n  }\n  return matchesAttributePart(obj, attr);\n}\nfunction matchesAttributePart(value, attr) {\n  const objValue = typeof value === \"string\" && !attr.caseSensitive ? value.toUpperCase() : value;\n  const attrValue = typeof attr.value === \"string\" && !attr.caseSensitive ? attr.value.toUpperCase() : attr.value;\n  if (attr.op === \"<truthy>\")\n    return !!objValue;\n  if (attr.op === \"=\") {\n    if (attrValue instanceof RegExp)\n      return typeof objValue === \"string\" && !!objValue.match(attrValue);\n    return objValue === attrValue;\n  }\n  if (typeof objValue !== \"string\" || typeof attrValue !== \"string\")\n    return false;\n  if (attr.op === \"*=\")\n    return objValue.includes(attrValue);\n  if (attr.op === \"^=\")\n    return objValue.startsWith(attrValue);\n  if (attr.op === \"$=\")\n    return objValue.endsWith(attrValue);\n  if (attr.op === \"|=\")\n    return objValue === attrValue || objValue.startsWith(attrValue + \"-\");\n  if (attr.op === \"~=\")\n    return objValue.split(\" \").includes(attrValue);\n  return false;\n}\nfunction shouldSkipForTextMatching(element) {\n  const document = element.ownerDocument;\n  return element.nodeName === \"SCRIPT\" || element.nodeName === \"NOSCRIPT\" || element.nodeName === \"STYLE\" || document.head && document.head.contains(element);\n}\nfunction elementText(cache, root) {\n  let value = cache.get(root);\n  if (value === void 0) {\n    value = { full: \"\", normalized: \"\", immediate: [] };\n    if (!shouldSkipForTextMatching(root)) {\n      let currentImmediate = \"\";\n      if (root instanceof HTMLInputElement && (root.type === \"submit\" || root.type === \"button\")) {\n        value = { full: root.value, normalized: normalizeWhiteSpace(root.value), immediate: [root.value] };\n      } else {\n        for (let child = root.firstChild; child; child = child.nextSibling) {\n          if (child.nodeType === Node.TEXT_NODE) {\n            value.full += child.nodeValue || \"\";\n            currentImmediate += child.nodeValue || \"\";\n          } else {\n            if (currentImmediate)\n              value.immediate.push(currentImmediate);\n            currentImmediate = \"\";\n            if (child.nodeType === Node.ELEMENT_NODE)\n              value.full += elementText(cache, child).full;\n          }\n        }\n        if (currentImmediate)\n          value.immediate.push(currentImmediate);\n        if (root.shadowRoot)\n          value.full += elementText(cache, root.shadowRoot).full;\n        if (value.full)\n          value.normalized = normalizeWhiteSpace(value.full);\n      }\n    }\n    cache.set(root, value);\n  }\n  return value;\n}\nfunction elementMatchesText(cache, element, matcher) {\n  if (shouldSkipForTextMatching(element))\n    return \"none\";\n  if (!matcher(elementText(cache, element)))\n    return \"none\";\n  for (let child = element.firstChild; child; child = child.nextSibling) {\n    if (child.nodeType === Node.ELEMENT_NODE && matcher(elementText(cache, child)))\n      return \"selfAndChildren\";\n  }\n  if (element.shadowRoot && matcher(elementText(cache, element.shadowRoot)))\n    return \"selfAndChildren\";\n  return \"self\";\n}\nfunction getElementLabels(textCache, element) {\n  const labels = getAriaLabelledByElements(element);\n  if (labels)\n    return labels.map((label) => elementText(textCache, label));\n  const ariaLabel = element.getAttribute(\"aria-label\");\n  if (ariaLabel !== null && !!ariaLabel.trim())\n    return [{ full: ariaLabel, normalized: normalizeWhiteSpace(ariaLabel), immediate: [ariaLabel] }];\n  const isNonHiddenInput = element.nodeName === \"INPUT\" && element.type !== \"hidden\";\n  if ([\"BUTTON\", \"METER\", \"OUTPUT\", \"PROGRESS\", \"SELECT\", \"TEXTAREA\"].includes(element.nodeName) || isNonHiddenInput) {\n    const labels2 = element.labels;\n    if (labels2)\n      return [...labels2].map((label) => elementText(textCache, label));\n  }\n  return [];\n}\n\n// packages/playwright-core/src/utils/isomorphic/cssTokenizer.ts\nvar between = function(num, first, last) {\n  return num >= first && num <= last;\n};\nfunction digit(code) {\n  return between(code, 48, 57);\n}\nfunction hexdigit(code) {\n  return digit(code) || between(code, 65, 70) || between(code, 97, 102);\n}\nfunction uppercaseletter(code) {\n  return between(code, 65, 90);\n}\nfunction lowercaseletter(code) {\n  return between(code, 97, 122);\n}\nfunction letter(code) {\n  return uppercaseletter(code) || lowercaseletter(code);\n}\nfunction nonascii(code) {\n  return code >= 128;\n}\nfunction namestartchar(code) {\n  return letter(code) || nonascii(code) || code === 95;\n}\nfunction namechar(code) {\n  return namestartchar(code) || digit(code) || code === 45;\n}\nfunction nonprintable(code) {\n  return between(code, 0, 8) || code === 11 || between(code, 14, 31) || code === 127;\n}\nfunction newline(code) {\n  return code === 10;\n}\nfunction whitespace(code) {\n  return newline(code) || code === 9 || code === 32;\n}\nvar maximumallowedcodepoint = 1114111;\nvar InvalidCharacterError = class extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"InvalidCharacterError\";\n  }\n};\nfunction preprocess(str) {\n  const codepoints = [];\n  for (let i = 0; i < str.length; i++) {\n    let code = str.charCodeAt(i);\n    if (code === 13 && str.charCodeAt(i + 1) === 10) {\n      code = 10;\n      i++;\n    }\n    if (code === 13 || code === 12)\n      code = 10;\n    if (code === 0)\n      code = 65533;\n    if (between(code, 55296, 56319) && between(str.charCodeAt(i + 1), 56320, 57343)) {\n      const lead = code - 55296;\n      const trail = str.charCodeAt(i + 1) - 56320;\n      code = Math.pow(2, 16) + lead * Math.pow(2, 10) + trail;\n      i++;\n    }\n    codepoints.push(code);\n  }\n  return codepoints;\n}\nfunction stringFromCode(code) {\n  if (code <= 65535)\n    return String.fromCharCode(code);\n  code -= Math.pow(2, 16);\n  const lead = Math.floor(code / Math.pow(2, 10)) + 55296;\n  const trail = code % Math.pow(2, 10) + 56320;\n  return String.fromCharCode(lead) + String.fromCharCode(trail);\n}\nfunction tokenize(str1) {\n  const str = preprocess(str1);\n  let i = -1;\n  const tokens = [];\n  let code;\n  let line = 0;\n  let column = 0;\n  let lastLineLength = 0;\n  const incrLineno = function() {\n    line += 1;\n    lastLineLength = column;\n    column = 0;\n  };\n  const locStart = { line, column };\n  const codepoint = function(i2) {\n    if (i2 >= str.length)\n      return -1;\n    return str[i2];\n  };\n  const next = function(num) {\n    if (num === void 0)\n      num = 1;\n    if (num > 3)\n      throw \"Spec Error: no more than three codepoints of lookahead.\";\n    return codepoint(i + num);\n  };\n  const consume = function(num) {\n    if (num === void 0)\n      num = 1;\n    i += num;\n    code = codepoint(i);\n    if (newline(code))\n      incrLineno();\n    else\n      column += num;\n    return true;\n  };\n  const reconsume = function() {\n    i -= 1;\n    if (newline(code)) {\n      line -= 1;\n      column = lastLineLength;\n    } else {\n      column -= 1;\n    }\n    locStart.line = line;\n    locStart.column = column;\n    return true;\n  };\n  const eof = function(codepoint2) {\n    if (codepoint2 === void 0)\n      codepoint2 = code;\n    return codepoint2 === -1;\n  };\n  const donothing = function() {\n  };\n  const parseerror = function() {\n  };\n  const consumeAToken = function() {\n    consumeComments();\n    consume();\n    if (whitespace(code)) {\n      while (whitespace(next()))\n        consume();\n      return new WhitespaceToken();\n    } else if (code === 34) {\n      return consumeAStringToken();\n    } else if (code === 35) {\n      if (namechar(next()) || areAValidEscape(next(1), next(2))) {\n        const token = new HashToken(\"\");\n        if (wouldStartAnIdentifier(next(1), next(2), next(3)))\n          token.type = \"id\";\n        token.value = consumeAName();\n        return token;\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 36) {\n      if (next() === 61) {\n        consume();\n        return new SuffixMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 39) {\n      return consumeAStringToken();\n    } else if (code === 40) {\n      return new OpenParenToken();\n    } else if (code === 41) {\n      return new CloseParenToken();\n    } else if (code === 42) {\n      if (next() === 61) {\n        consume();\n        return new SubstringMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 43) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 44) {\n      return new CommaToken();\n    } else if (code === 45) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else if (next(1) === 45 && next(2) === 62) {\n        consume(2);\n        return new CDCToken();\n      } else if (startsWithAnIdentifier()) {\n        reconsume();\n        return consumeAnIdentlikeToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 46) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 58) {\n      return new ColonToken();\n    } else if (code === 59) {\n      return new SemicolonToken();\n    } else if (code === 60) {\n      if (next(1) === 33 && next(2) === 45 && next(3) === 45) {\n        consume(3);\n        return new CDOToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 64) {\n      if (wouldStartAnIdentifier(next(1), next(2), next(3)))\n        return new AtKeywordToken(consumeAName());\n      else\n        return new DelimToken(code);\n    } else if (code === 91) {\n      return new OpenSquareToken();\n    } else if (code === 92) {\n      if (startsWithAValidEscape()) {\n        reconsume();\n        return consumeAnIdentlikeToken();\n      } else {\n        parseerror();\n        return new DelimToken(code);\n      }\n    } else if (code === 93) {\n      return new CloseSquareToken();\n    } else if (code === 94) {\n      if (next() === 61) {\n        consume();\n        return new PrefixMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 123) {\n      return new OpenCurlyToken();\n    } else if (code === 124) {\n      if (next() === 61) {\n        consume();\n        return new DashMatchToken();\n      } else if (next() === 124) {\n        consume();\n        return new ColumnToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 125) {\n      return new CloseCurlyToken();\n    } else if (code === 126) {\n      if (next() === 61) {\n        consume();\n        return new IncludeMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (digit(code)) {\n      reconsume();\n      return consumeANumericToken();\n    } else if (namestartchar(code)) {\n      reconsume();\n      return consumeAnIdentlikeToken();\n    } else if (eof()) {\n      return new EOFToken();\n    } else {\n      return new DelimToken(code);\n    }\n  };\n  const consumeComments = function() {\n    while (next(1) === 47 && next(2) === 42) {\n      consume(2);\n      while (true) {\n        consume();\n        if (code === 42 && next() === 47) {\n          consume();\n          break;\n        } else if (eof()) {\n          parseerror();\n          return;\n        }\n      }\n    }\n  };\n  const consumeANumericToken = function() {\n    const num = consumeANumber();\n    if (wouldStartAnIdentifier(next(1), next(2), next(3))) {\n      const token = new DimensionToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      token.type = num.type;\n      token.unit = consumeAName();\n      return token;\n    } else if (next() === 37) {\n      consume();\n      const token = new PercentageToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      return token;\n    } else {\n      const token = new NumberToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      token.type = num.type;\n      return token;\n    }\n  };\n  const consumeAnIdentlikeToken = function() {\n    const str2 = consumeAName();\n    if (str2.toLowerCase() === \"url\" && next() === 40) {\n      consume();\n      while (whitespace(next(1)) && whitespace(next(2)))\n        consume();\n      if (next() === 34 || next() === 39)\n        return new FunctionToken(str2);\n      else if (whitespace(next()) && (next(2) === 34 || next(2) === 39))\n        return new FunctionToken(str2);\n      else\n        return consumeAURLToken();\n    } else if (next() === 40) {\n      consume();\n      return new FunctionToken(str2);\n    } else {\n      return new IdentToken(str2);\n    }\n  };\n  const consumeAStringToken = function(endingCodePoint) {\n    if (endingCodePoint === void 0)\n      endingCodePoint = code;\n    let string = \"\";\n    while (consume()) {\n      if (code === endingCodePoint || eof()) {\n        return new StringToken(string);\n      } else if (newline(code)) {\n        parseerror();\n        reconsume();\n        return new BadStringToken();\n      } else if (code === 92) {\n        if (eof(next()))\n          donothing();\n        else if (newline(next()))\n          consume();\n        else\n          string += stringFromCode(consumeEscape());\n      } else {\n        string += stringFromCode(code);\n      }\n    }\n    throw new Error(\"Internal error\");\n  };\n  const consumeAURLToken = function() {\n    const token = new URLToken(\"\");\n    while (whitespace(next()))\n      consume();\n    if (eof(next()))\n      return token;\n    while (consume()) {\n      if (code === 41 || eof()) {\n        return token;\n      } else if (whitespace(code)) {\n        while (whitespace(next()))\n          consume();\n        if (next() === 41 || eof(next())) {\n          consume();\n          return token;\n        } else {\n          consumeTheRemnantsOfABadURL();\n          return new BadURLToken();\n        }\n      } else if (code === 34 || code === 39 || code === 40 || nonprintable(code)) {\n        parseerror();\n        consumeTheRemnantsOfABadURL();\n        return new BadURLToken();\n      } else if (code === 92) {\n        if (startsWithAValidEscape()) {\n          token.value += stringFromCode(consumeEscape());\n        } else {\n          parseerror();\n          consumeTheRemnantsOfABadURL();\n          return new BadURLToken();\n        }\n      } else {\n        token.value += stringFromCode(code);\n      }\n    }\n    throw new Error(\"Internal error\");\n  };\n  const consumeEscape = function() {\n    consume();\n    if (hexdigit(code)) {\n      const digits = [code];\n      for (let total = 0; total < 5; total++) {\n        if (hexdigit(next())) {\n          consume();\n          digits.push(code);\n        } else {\n          break;\n        }\n      }\n      if (whitespace(next()))\n        consume();\n      let value = parseInt(digits.map(function(x) {\n        return String.fromCharCode(x);\n      }).join(\"\"), 16);\n      if (value > maximumallowedcodepoint)\n        value = 65533;\n      return value;\n    } else if (eof()) {\n      return 65533;\n    } else {\n      return code;\n    }\n  };\n  const areAValidEscape = function(c1, c2) {\n    if (c1 !== 92)\n      return false;\n    if (newline(c2))\n      return false;\n    return true;\n  };\n  const startsWithAValidEscape = function() {\n    return areAValidEscape(code, next());\n  };\n  const wouldStartAnIdentifier = function(c1, c2, c3) {\n    if (c1 === 45)\n      return namestartchar(c2) || c2 === 45 || areAValidEscape(c2, c3);\n    else if (namestartchar(c1))\n      return true;\n    else if (c1 === 92)\n      return areAValidEscape(c1, c2);\n    else\n      return false;\n  };\n  const startsWithAnIdentifier = function() {\n    return wouldStartAnIdentifier(code, next(1), next(2));\n  };\n  const wouldStartANumber = function(c1, c2, c3) {\n    if (c1 === 43 || c1 === 45) {\n      if (digit(c2))\n        return true;\n      if (c2 === 46 && digit(c3))\n        return true;\n      return false;\n    } else if (c1 === 46) {\n      if (digit(c2))\n        return true;\n      return false;\n    } else if (digit(c1)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  const startsWithANumber = function() {\n    return wouldStartANumber(code, next(1), next(2));\n  };\n  const consumeAName = function() {\n    let result = \"\";\n    while (consume()) {\n      if (namechar(code)) {\n        result += stringFromCode(code);\n      } else if (startsWithAValidEscape()) {\n        result += stringFromCode(consumeEscape());\n      } else {\n        reconsume();\n        return result;\n      }\n    }\n    throw new Error(\"Internal parse error\");\n  };\n  const consumeANumber = function() {\n    let repr = \"\";\n    let type = \"integer\";\n    if (next() === 43 || next() === 45) {\n      consume();\n      repr += stringFromCode(code);\n    }\n    while (digit(next())) {\n      consume();\n      repr += stringFromCode(code);\n    }\n    if (next(1) === 46 && digit(next(2))) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = \"number\";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    }\n    const c1 = next(1), c2 = next(2), c3 = next(3);\n    if ((c1 === 69 || c1 === 101) && digit(c2)) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = \"number\";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    } else if ((c1 === 69 || c1 === 101) && (c2 === 43 || c2 === 45) && digit(c3)) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = \"number\";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    }\n    const value = convertAStringToANumber(repr);\n    return { type, value, repr };\n  };\n  const convertAStringToANumber = function(string) {\n    return +string;\n  };\n  const consumeTheRemnantsOfABadURL = function() {\n    while (consume()) {\n      if (code === 41 || eof()) {\n        return;\n      } else if (startsWithAValidEscape()) {\n        consumeEscape();\n        donothing();\n      } else {\n        donothing();\n      }\n    }\n  };\n  let iterationCount = 0;\n  while (!eof(next())) {\n    tokens.push(consumeAToken());\n    iterationCount++;\n    if (iterationCount > str.length * 2)\n      throw new Error(\"I'm infinite-looping!\");\n  }\n  return tokens;\n}\nvar CSSParserToken = class {\n  constructor() {\n    this.tokenType = \"\";\n  }\n  toJSON() {\n    return { token: this.tokenType };\n  }\n  toString() {\n    return this.tokenType;\n  }\n  toSource() {\n    return \"\" + this;\n  }\n};\nvar BadStringToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"BADSTRING\";\n  }\n};\nvar BadURLToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"BADURL\";\n  }\n};\nvar WhitespaceToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"WHITESPACE\";\n  }\n  toString() {\n    return \"WS\";\n  }\n  toSource() {\n    return \" \";\n  }\n};\nvar CDOToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"CDO\";\n  }\n  toSource() {\n    return \"<!--\";\n  }\n};\nvar CDCToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"CDC\";\n  }\n  toSource() {\n    return \"-->\";\n  }\n};\nvar ColonToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \":\";\n  }\n};\nvar SemicolonToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \";\";\n  }\n};\nvar CommaToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \",\";\n  }\n};\nvar GroupingToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.value = \"\";\n    this.mirror = \"\";\n  }\n};\nvar OpenCurlyToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = \"{\";\n    this.value = \"{\";\n    this.mirror = \"}\";\n  }\n};\nvar CloseCurlyToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = \"}\";\n    this.value = \"}\";\n    this.mirror = \"{\";\n  }\n};\nvar OpenSquareToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = \"[\";\n    this.value = \"[\";\n    this.mirror = \"]\";\n  }\n};\nvar CloseSquareToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = \"]\";\n    this.value = \"]\";\n    this.mirror = \"[\";\n  }\n};\nvar OpenParenToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = \"(\";\n    this.value = \"(\";\n    this.mirror = \")\";\n  }\n};\nvar CloseParenToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = \")\";\n    this.value = \")\";\n    this.mirror = \"(\";\n  }\n};\nvar IncludeMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"~=\";\n  }\n};\nvar DashMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"|=\";\n  }\n};\nvar PrefixMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"^=\";\n  }\n};\nvar SuffixMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"$=\";\n  }\n};\nvar SubstringMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"*=\";\n  }\n};\nvar ColumnToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"||\";\n  }\n};\nvar EOFToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"EOF\";\n  }\n  toSource() {\n    return \"\";\n  }\n};\nvar DelimToken = class extends CSSParserToken {\n  constructor(code) {\n    super();\n    this.tokenType = \"DELIM\";\n    this.value = \"\";\n    this.value = stringFromCode(code);\n  }\n  toString() {\n    return \"DELIM(\" + this.value + \")\";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    return json;\n  }\n  toSource() {\n    if (this.value === \"\\\\\")\n      return \"\\\\\\n\";\n    else\n      return this.value;\n  }\n};\nvar StringValuedToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.value = \"\";\n  }\n  ASCIIMatch(str) {\n    return this.value.toLowerCase() === str.toLowerCase();\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    return json;\n  }\n};\nvar IdentToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = \"IDENT\";\n    this.value = val;\n  }\n  toString() {\n    return \"IDENT(\" + this.value + \")\";\n  }\n  toSource() {\n    return escapeIdent(this.value);\n  }\n};\nvar FunctionToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = \"FUNCTION\";\n    this.value = val;\n    this.mirror = \")\";\n  }\n  toString() {\n    return \"FUNCTION(\" + this.value + \")\";\n  }\n  toSource() {\n    return escapeIdent(this.value) + \"(\";\n  }\n};\nvar AtKeywordToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = \"AT-KEYWORD\";\n    this.value = val;\n  }\n  toString() {\n    return \"AT(\" + this.value + \")\";\n  }\n  toSource() {\n    return \"@\" + escapeIdent(this.value);\n  }\n};\nvar HashToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = \"HASH\";\n    this.value = val;\n    this.type = \"unrestricted\";\n  }\n  toString() {\n    return \"HASH(\" + this.value + \")\";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.type = this.type;\n    return json;\n  }\n  toSource() {\n    if (this.type === \"id\")\n      return \"#\" + escapeIdent(this.value);\n    else\n      return \"#\" + escapeHash(this.value);\n  }\n};\nvar StringToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = \"STRING\";\n    this.value = val;\n  }\n  toString() {\n    return '\"' + escapeString(this.value) + '\"';\n  }\n};\nvar URLToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = \"URL\";\n    this.value = val;\n  }\n  toString() {\n    return \"URL(\" + this.value + \")\";\n  }\n  toSource() {\n    return 'url(\"' + escapeString(this.value) + '\")';\n  }\n};\nvar NumberToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = \"NUMBER\";\n    this.type = \"integer\";\n    this.repr = \"\";\n  }\n  toString() {\n    if (this.type === \"integer\")\n      return \"INT(\" + this.value + \")\";\n    return \"NUMBER(\" + this.value + \")\";\n  }\n  toJSON() {\n    const json = super.toJSON();\n    json.value = this.value;\n    json.type = this.type;\n    json.repr = this.repr;\n    return json;\n  }\n  toSource() {\n    return this.repr;\n  }\n};\nvar PercentageToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = \"PERCENTAGE\";\n    this.repr = \"\";\n  }\n  toString() {\n    return \"PERCENTAGE(\" + this.value + \")\";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.repr = this.repr;\n    return json;\n  }\n  toSource() {\n    return this.repr + \"%\";\n  }\n};\nvar DimensionToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = \"DIMENSION\";\n    this.type = \"integer\";\n    this.repr = \"\";\n    this.unit = \"\";\n  }\n  toString() {\n    return \"DIM(\" + this.value + \",\" + this.unit + \")\";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.type = this.type;\n    json.repr = this.repr;\n    json.unit = this.unit;\n    return json;\n  }\n  toSource() {\n    const source = this.repr;\n    let unit = escapeIdent(this.unit);\n    if (unit[0].toLowerCase() === \"e\" && (unit[1] === \"-\" || between(unit.charCodeAt(1), 48, 57))) {\n      unit = \"\\\\65 \" + unit.slice(1, unit.length);\n    }\n    return source + unit;\n  }\n};\nfunction escapeIdent(string) {\n  string = \"\" + string;\n  let result = \"\";\n  const firstcode = string.charCodeAt(0);\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError(\"Invalid character: the input contains U+0000.\");\n    if (between(code, 1, 31) || code === 127 || i === 0 && between(code, 48, 57) || i === 1 && between(code, 48, 57) && firstcode === 45)\n      result += \"\\\\\" + code.toString(16) + \" \";\n    else if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))\n      result += string[i];\n    else\n      result += \"\\\\\" + string[i];\n  }\n  return result;\n}\nfunction escapeHash(string) {\n  string = \"\" + string;\n  let result = \"\";\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError(\"Invalid character: the input contains U+0000.\");\n    if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))\n      result += string[i];\n    else\n      result += \"\\\\\" + code.toString(16) + \" \";\n  }\n  return result;\n}\nfunction escapeString(string) {\n  string = \"\" + string;\n  let result = \"\";\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError(\"Invalid character: the input contains U+0000.\");\n    if (between(code, 1, 31) || code === 127)\n      result += \"\\\\\" + code.toString(16) + \" \";\n    else if (code === 34 || code === 92)\n      result += \"\\\\\" + string[i];\n    else\n      result += string[i];\n  }\n  return result;\n}\n\n// packages/playwright-core/src/utils/isomorphic/cssParser.ts\nvar InvalidSelectorError = class extends Error {\n};\nfunction parseCSS(selector, customNames) {\n  let tokens;\n  try {\n    tokens = tokenize(selector);\n    if (!(tokens[tokens.length - 1] instanceof EOFToken))\n      tokens.push(new EOFToken());\n  } catch (e) {\n    const newMessage = e.message + ` while parsing selector \"${selector}\"`;\n    const index = (e.stack || \"\").indexOf(e.message);\n    if (index !== -1)\n      e.stack = e.stack.substring(0, index) + newMessage + e.stack.substring(index + e.message.length);\n    e.message = newMessage;\n    throw e;\n  }\n  const unsupportedToken = tokens.find((token) => {\n    return token instanceof AtKeywordToken || token instanceof BadStringToken || token instanceof BadURLToken || token instanceof ColumnToken || token instanceof CDOToken || token instanceof CDCToken || token instanceof SemicolonToken || // TODO: Consider using these for something, e.g. to escape complex strings.\n    // For example :xpath{ (//div/bar[@attr=\"foo\"])[2]/baz }\n    // Or this way :xpath( {complex-xpath-goes-here(\"hello\")} )\n    token instanceof OpenCurlyToken || token instanceof CloseCurlyToken || // TODO: Consider treating these as strings?\n    token instanceof URLToken || token instanceof PercentageToken;\n  });\n  if (unsupportedToken)\n    throw new InvalidSelectorError(`Unsupported token \"${unsupportedToken.toSource()}\" while parsing selector \"${selector}\"`);\n  let pos = 0;\n  const names = /* @__PURE__ */ new Set();\n  function unexpected() {\n    return new InvalidSelectorError(`Unexpected token \"${tokens[pos].toSource()}\" while parsing selector \"${selector}\"`);\n  }\n  function skipWhitespace() {\n    while (tokens[pos] instanceof WhitespaceToken)\n      pos++;\n  }\n  function isIdent(p = pos) {\n    return tokens[p] instanceof IdentToken;\n  }\n  function isString(p = pos) {\n    return tokens[p] instanceof StringToken;\n  }\n  function isNumber(p = pos) {\n    return tokens[p] instanceof NumberToken;\n  }\n  function isComma(p = pos) {\n    return tokens[p] instanceof CommaToken;\n  }\n  function isOpenParen(p = pos) {\n    return tokens[p] instanceof OpenParenToken;\n  }\n  function isCloseParen(p = pos) {\n    return tokens[p] instanceof CloseParenToken;\n  }\n  function isFunction(p = pos) {\n    return tokens[p] instanceof FunctionToken;\n  }\n  function isStar(p = pos) {\n    return tokens[p] instanceof DelimToken && tokens[p].value === \"*\";\n  }\n  function isEOF(p = pos) {\n    return tokens[p] instanceof EOFToken;\n  }\n  function isClauseCombinator(p = pos) {\n    return tokens[p] instanceof DelimToken && [\">\", \"+\", \"~\"].includes(tokens[p].value);\n  }\n  function isSelectorClauseEnd(p = pos) {\n    return isComma(p) || isCloseParen(p) || isEOF(p) || isClauseCombinator(p) || tokens[p] instanceof WhitespaceToken;\n  }\n  function consumeFunctionArguments() {\n    const result2 = [consumeArgument()];\n    while (true) {\n      skipWhitespace();\n      if (!isComma())\n        break;\n      pos++;\n      result2.push(consumeArgument());\n    }\n    return result2;\n  }\n  function consumeArgument() {\n    skipWhitespace();\n    if (isNumber())\n      return tokens[pos++].value;\n    if (isString())\n      return tokens[pos++].value;\n    return consumeComplexSelector();\n  }\n  function consumeComplexSelector() {\n    const result2 = { simples: [] };\n    skipWhitespace();\n    if (isClauseCombinator()) {\n      result2.simples.push({ selector: { functions: [{ name: \"scope\", args: [] }] }, combinator: \"\" });\n    } else {\n      result2.simples.push({ selector: consumeSimpleSelector(), combinator: \"\" });\n    }\n    while (true) {\n      skipWhitespace();\n      if (isClauseCombinator()) {\n        result2.simples[result2.simples.length - 1].combinator = tokens[pos++].value;\n        skipWhitespace();\n      } else if (isSelectorClauseEnd()) {\n        break;\n      }\n      result2.simples.push({ combinator: \"\", selector: consumeSimpleSelector() });\n    }\n    return result2;\n  }\n  function consumeSimpleSelector() {\n    let rawCSSString = \"\";\n    const functions = [];\n    while (!isSelectorClauseEnd()) {\n      if (isIdent() || isStar()) {\n        rawCSSString += tokens[pos++].toSource();\n      } else if (tokens[pos] instanceof HashToken) {\n        rawCSSString += tokens[pos++].toSource();\n      } else if (tokens[pos] instanceof DelimToken && tokens[pos].value === \".\") {\n        pos++;\n        if (isIdent())\n          rawCSSString += \".\" + tokens[pos++].toSource();\n        else\n          throw unexpected();\n      } else if (tokens[pos] instanceof ColonToken) {\n        pos++;\n        if (isIdent()) {\n          if (!customNames.has(tokens[pos].value.toLowerCase())) {\n            rawCSSString += \":\" + tokens[pos++].toSource();\n          } else {\n            const name = tokens[pos++].value.toLowerCase();\n            functions.push({ name, args: [] });\n            names.add(name);\n          }\n        } else if (isFunction()) {\n          const name = tokens[pos++].value.toLowerCase();\n          if (!customNames.has(name)) {\n            rawCSSString += `:${name}(${consumeBuiltinFunctionArguments()})`;\n          } else {\n            functions.push({ name, args: consumeFunctionArguments() });\n            names.add(name);\n          }\n          skipWhitespace();\n          if (!isCloseParen())\n            throw unexpected();\n          pos++;\n        } else {\n          throw unexpected();\n        }\n      } else if (tokens[pos] instanceof OpenSquareToken) {\n        rawCSSString += \"[\";\n        pos++;\n        while (!(tokens[pos] instanceof CloseSquareToken) && !isEOF())\n          rawCSSString += tokens[pos++].toSource();\n        if (!(tokens[pos] instanceof CloseSquareToken))\n          throw unexpected();\n        rawCSSString += \"]\";\n        pos++;\n      } else {\n        throw unexpected();\n      }\n    }\n    if (!rawCSSString && !functions.length)\n      throw unexpected();\n    return { css: rawCSSString || void 0, functions };\n  }\n  function consumeBuiltinFunctionArguments() {\n    let s = \"\";\n    let balance = 1;\n    while (!isEOF()) {\n      if (isOpenParen() || isFunction())\n        balance++;\n      if (isCloseParen())\n        balance--;\n      if (!balance)\n        break;\n      s += tokens[pos++].toSource();\n    }\n    return s;\n  }\n  const result = consumeFunctionArguments();\n  if (!isEOF())\n    throw unexpected();\n  if (result.some((arg) => typeof arg !== \"object\" || !(\"simples\" in arg)))\n    throw new InvalidSelectorError(`Error while parsing selector \"${selector}\"`);\n  return { selector: result, names: Array.from(names) };\n}\n\n// packages/playwright-core/src/utils/isomorphic/selectorParser.ts\nvar kNestedSelectorNames = /* @__PURE__ */ new Set([\"internal:has\", \"internal:has-not\", \"internal:and\", \"internal:or\", \"internal:chain\", \"left-of\", \"right-of\", \"above\", \"below\", \"near\"]);\nvar kNestedSelectorNamesWithDistance = /* @__PURE__ */ new Set([\"left-of\", \"right-of\", \"above\", \"below\", \"near\"]);\nvar customCSSNames = /* @__PURE__ */ new Set([\"not\", \"is\", \"where\", \"has\", \"scope\", \"light\", \"visible\", \"text\", \"text-matches\", \"text-is\", \"has-text\", \"above\", \"below\", \"right-of\", \"left-of\", \"near\", \"nth-match\"]);\nfunction parseSelector(selector) {\n  const parsedStrings = parseSelectorString(selector);\n  const parts = [];\n  for (const part of parsedStrings.parts) {\n    if (part.name === \"css\" || part.name === \"css:light\") {\n      if (part.name === \"css:light\")\n        part.body = \":light(\" + part.body + \")\";\n      const parsedCSS = parseCSS(part.body, customCSSNames);\n      parts.push({\n        name: \"css\",\n        body: parsedCSS.selector,\n        source: part.body\n      });\n      continue;\n    }\n    if (kNestedSelectorNames.has(part.name)) {\n      let innerSelector;\n      let distance;\n      try {\n        const unescaped = JSON.parse(\"[\" + part.body + \"]\");\n        if (!Array.isArray(unescaped) || unescaped.length < 1 || unescaped.length > 2 || typeof unescaped[0] !== \"string\")\n          throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n        innerSelector = unescaped[0];\n        if (unescaped.length === 2) {\n          if (typeof unescaped[1] !== \"number\" || !kNestedSelectorNamesWithDistance.has(part.name))\n            throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n          distance = unescaped[1];\n        }\n      } catch (e) {\n        throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n      }\n      const nested = { name: part.name, source: part.body, body: { parsed: parseSelector(innerSelector), distance } };\n      const lastFrame = [...nested.body.parsed.parts].reverse().find((part2) => part2.name === \"internal:control\" && part2.body === \"enter-frame\");\n      const lastFrameIndex = lastFrame ? nested.body.parsed.parts.indexOf(lastFrame) : -1;\n      if (lastFrameIndex !== -1 && selectorPartsEqual(nested.body.parsed.parts.slice(0, lastFrameIndex + 1), parts.slice(0, lastFrameIndex + 1)))\n        nested.body.parsed.parts.splice(0, lastFrameIndex + 1);\n      parts.push(nested);\n      continue;\n    }\n    parts.push({ ...part, source: part.body });\n  }\n  if (kNestedSelectorNames.has(parts[0].name))\n    throw new InvalidSelectorError(`\"${parts[0].name}\" selector cannot be first`);\n  return {\n    capture: parsedStrings.capture,\n    parts\n  };\n}\nfunction selectorPartsEqual(list1, list2) {\n  return stringifySelector({ parts: list1 }) === stringifySelector({ parts: list2 });\n}\nfunction stringifySelector(selector, forceEngineName) {\n  if (typeof selector === \"string\")\n    return selector;\n  return selector.parts.map((p, i) => {\n    let includeEngine = true;\n    if (!forceEngineName && i !== selector.capture) {\n      if (p.name === \"css\")\n        includeEngine = false;\n      else if (p.name === \"xpath\" && p.source.startsWith(\"//\") || p.source.startsWith(\"..\"))\n        includeEngine = false;\n    }\n    const prefix = includeEngine ? p.name + \"=\" : \"\";\n    return `${i === selector.capture ? \"*\" : \"\"}${prefix}${p.source}`;\n  }).join(\" >> \");\n}\nfunction visitAllSelectorParts(selector, visitor) {\n  const visit = (selector2, nested) => {\n    for (const part of selector2.parts) {\n      visitor(part, nested);\n      if (kNestedSelectorNames.has(part.name))\n        visit(part.body.parsed, true);\n    }\n  };\n  visit(selector, false);\n}\nfunction parseSelectorString(selector) {\n  let index = 0;\n  let quote;\n  let start = 0;\n  const result = { parts: [] };\n  const append = () => {\n    const part = selector.substring(start, index).trim();\n    const eqIndex = part.indexOf(\"=\");\n    let name;\n    let body;\n    if (eqIndex !== -1 && part.substring(0, eqIndex).trim().match(/^[a-zA-Z_0-9-+:*]+$/)) {\n      name = part.substring(0, eqIndex).trim();\n      body = part.substring(eqIndex + 1);\n    } else if (part.length > 1 && part[0] === '\"' && part[part.length - 1] === '\"') {\n      name = \"text\";\n      body = part;\n    } else if (part.length > 1 && part[0] === \"'\" && part[part.length - 1] === \"'\") {\n      name = \"text\";\n      body = part;\n    } else if (/^\\(*\\/\\//.test(part) || part.startsWith(\"..\")) {\n      name = \"xpath\";\n      body = part;\n    } else {\n      name = \"css\";\n      body = part;\n    }\n    let capture = false;\n    if (name[0] === \"*\") {\n      capture = true;\n      name = name.substring(1);\n    }\n    result.parts.push({ name, body });\n    if (capture) {\n      if (result.capture !== void 0)\n        throw new InvalidSelectorError(`Only one of the selectors can capture using * modifier`);\n      result.capture = result.parts.length - 1;\n    }\n  };\n  if (!selector.includes(\">>\")) {\n    index = selector.length;\n    append();\n    return result;\n  }\n  const shouldIgnoreTextSelectorQuote = () => {\n    const prefix = selector.substring(start, index);\n    const match = prefix.match(/^\\s*text\\s*=(.*)$/);\n    return !!match && !!match[1];\n  };\n  while (index < selector.length) {\n    const c = selector[index];\n    if (c === \"\\\\\" && index + 1 < selector.length) {\n      index += 2;\n    } else if (c === quote) {\n      quote = void 0;\n      index++;\n    } else if (!quote && (c === '\"' || c === \"'\" || c === \"`\") && !shouldIgnoreTextSelectorQuote()) {\n      quote = c;\n      index++;\n    } else if (!quote && c === \">\" && selector[index + 1] === \">\") {\n      append();\n      index += 2;\n      start = index;\n    } else {\n      index++;\n    }\n  }\n  append();\n  return result;\n}\nfunction parseAttributeSelector(selector, allowUnquotedStrings) {\n  let wp = 0;\n  let EOL = selector.length === 0;\n  const next = () => selector[wp] || \"\";\n  const eat1 = () => {\n    const result2 = next();\n    ++wp;\n    EOL = wp >= selector.length;\n    return result2;\n  };\n  const syntaxError = (stage) => {\n    if (EOL)\n      throw new InvalidSelectorError(`Unexpected end of selector while parsing selector \\`${selector}\\``);\n    throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - unexpected symbol \"${next()}\" at position ${wp}` + (stage ? \" during \" + stage : \"\"));\n  };\n  function skipSpaces() {\n    while (!EOL && /\\s/.test(next()))\n      eat1();\n  }\n  function isCSSNameChar(char) {\n    return char >= \"\\x80\" || char >= \"0\" && char <= \"9\" || char >= \"A\" && char <= \"Z\" || char >= \"a\" && char <= \"z\" || char >= \"0\" && char <= \"9\" || char === \"_\" || char === \"-\";\n  }\n  function readIdentifier() {\n    let result2 = \"\";\n    skipSpaces();\n    while (!EOL && isCSSNameChar(next()))\n      result2 += eat1();\n    return result2;\n  }\n  function readQuotedString(quote) {\n    let result2 = eat1();\n    if (result2 !== quote)\n      syntaxError(\"parsing quoted string\");\n    while (!EOL && next() !== quote) {\n      if (next() === \"\\\\\")\n        eat1();\n      result2 += eat1();\n    }\n    if (next() !== quote)\n      syntaxError(\"parsing quoted string\");\n    result2 += eat1();\n    return result2;\n  }\n  function readRegularExpression() {\n    if (eat1() !== \"/\")\n      syntaxError(\"parsing regular expression\");\n    let source = \"\";\n    let inClass = false;\n    while (!EOL) {\n      if (next() === \"\\\\\") {\n        source += eat1();\n        if (EOL)\n          syntaxError(\"parsing regular expression\");\n      } else if (inClass && next() === \"]\") {\n        inClass = false;\n      } else if (!inClass && next() === \"[\") {\n        inClass = true;\n      } else if (!inClass && next() === \"/\") {\n        break;\n      }\n      source += eat1();\n    }\n    if (eat1() !== \"/\")\n      syntaxError(\"parsing regular expression\");\n    let flags = \"\";\n    while (!EOL && next().match(/[dgimsuy]/))\n      flags += eat1();\n    try {\n      return new RegExp(source, flags);\n    } catch (e) {\n      throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\`: ${e.message}`);\n    }\n  }\n  function readAttributeToken() {\n    let token = \"\";\n    skipSpaces();\n    if (next() === `'` || next() === `\"`)\n      token = readQuotedString(next()).slice(1, -1);\n    else\n      token = readIdentifier();\n    if (!token)\n      syntaxError(\"parsing property path\");\n    return token;\n  }\n  function readOperator() {\n    skipSpaces();\n    let op = \"\";\n    if (!EOL)\n      op += eat1();\n    if (!EOL && op !== \"=\")\n      op += eat1();\n    if (![\"=\", \"*=\", \"^=\", \"$=\", \"|=\", \"~=\"].includes(op))\n      syntaxError(\"parsing operator\");\n    return op;\n  }\n  function readAttribute() {\n    eat1();\n    const jsonPath = [];\n    jsonPath.push(readAttributeToken());\n    skipSpaces();\n    while (next() === \".\") {\n      eat1();\n      jsonPath.push(readAttributeToken());\n      skipSpaces();\n    }\n    if (next() === \"]\") {\n      eat1();\n      return { name: jsonPath.join(\".\"), jsonPath, op: \"<truthy>\", value: null, caseSensitive: false };\n    }\n    const operator = readOperator();\n    let value = void 0;\n    let caseSensitive = true;\n    skipSpaces();\n    if (next() === \"/\") {\n      if (operator !== \"=\")\n        throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - cannot use ${operator} in attribute with regular expression`);\n      value = readRegularExpression();\n    } else if (next() === `'` || next() === `\"`) {\n      value = readQuotedString(next()).slice(1, -1);\n      skipSpaces();\n      if (next() === \"i\" || next() === \"I\") {\n        caseSensitive = false;\n        eat1();\n      } else if (next() === \"s\" || next() === \"S\") {\n        caseSensitive = true;\n        eat1();\n      }\n    } else {\n      value = \"\";\n      while (!EOL && (isCSSNameChar(next()) || next() === \"+\" || next() === \".\"))\n        value += eat1();\n      if (value === \"true\") {\n        value = true;\n      } else if (value === \"false\") {\n        value = false;\n      } else {\n        if (!allowUnquotedStrings) {\n          value = +value;\n          if (Number.isNaN(value))\n            syntaxError(\"parsing attribute value\");\n        }\n      }\n    }\n    skipSpaces();\n    if (next() !== \"]\")\n      syntaxError(\"parsing attribute value\");\n    eat1();\n    if (operator !== \"=\" && typeof value !== \"string\")\n      throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - cannot use ${operator} in attribute with non-string matching value - ${value}`);\n    return { name: jsonPath.join(\".\"), jsonPath, op: operator, value, caseSensitive };\n  }\n  const result = {\n    name: \"\",\n    attributes: []\n  };\n  result.name = readIdentifier();\n  skipSpaces();\n  while (next() === \"[\") {\n    result.attributes.push(readAttribute());\n    skipSpaces();\n  }\n  if (!EOL)\n    syntaxError(void 0);\n  if (!result.name && !result.attributes.length)\n    throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - selector cannot be empty`);\n  return result;\n}\n\n// packages/playwright-core/src/server/injected/reactSelectorEngine.ts\nfunction getFunctionComponentName(component) {\n  return component.displayName || component.name || \"Anonymous\";\n}\nfunction getComponentName(reactElement) {\n  if (reactElement.type) {\n    switch (typeof reactElement.type) {\n      case \"function\":\n        return getFunctionComponentName(reactElement.type);\n      case \"string\":\n        return reactElement.type;\n      case \"object\":\n        return reactElement.type.displayName || (reactElement.type.render ? getFunctionComponentName(reactElement.type.render) : \"\");\n    }\n  }\n  if (reactElement._currentElement) {\n    const elementType = reactElement._currentElement.type;\n    if (typeof elementType === \"string\")\n      return elementType;\n    if (typeof elementType === \"function\")\n      return elementType.displayName || elementType.name || \"Anonymous\";\n  }\n  return \"\";\n}\nfunction getComponentKey(reactElement) {\n  var _a, _b;\n  return (_b = reactElement.key) != null ? _b : (_a = reactElement._currentElement) == null ? void 0 : _a.key;\n}\nfunction getChildren(reactElement) {\n  if (reactElement.child) {\n    const children = [];\n    for (let child = reactElement.child; child; child = child.sibling)\n      children.push(child);\n    return children;\n  }\n  if (!reactElement._currentElement)\n    return [];\n  const isKnownElement = (reactElement2) => {\n    var _a;\n    const elementType = (_a = reactElement2._currentElement) == null ? void 0 : _a.type;\n    return typeof elementType === \"function\" || typeof elementType === \"string\";\n  };\n  if (reactElement._renderedComponent) {\n    const child = reactElement._renderedComponent;\n    return isKnownElement(child) ? [child] : [];\n  }\n  if (reactElement._renderedChildren)\n    return [...Object.values(reactElement._renderedChildren)].filter(isKnownElement);\n  return [];\n}\nfunction getProps(reactElement) {\n  var _a;\n  const props = (\n    // React 16+\n    reactElement.memoizedProps || // React 15\n    ((_a = reactElement._currentElement) == null ? void 0 : _a.props)\n  );\n  if (!props || typeof props === \"string\")\n    return props;\n  const result = { ...props };\n  delete result.children;\n  return result;\n}\nfunction buildComponentsTree(reactElement) {\n  var _a;\n  const treeNode = {\n    key: getComponentKey(reactElement),\n    name: getComponentName(reactElement),\n    children: getChildren(reactElement).map(buildComponentsTree),\n    rootElements: [],\n    props: getProps(reactElement)\n  };\n  const rootElement = (\n    // React 16+\n    // @see https://github.com/baruchvlz/resq/blob/5c15a5e04d3f7174087248f5a158c3d6dcc1ec72/src/utils.js#L29\n    reactElement.stateNode || // React 15\n    reactElement._hostNode || ((_a = reactElement._renderedComponent) == null ? void 0 : _a._hostNode)\n  );\n  if (rootElement instanceof Element) {\n    treeNode.rootElements.push(rootElement);\n  } else {\n    for (const child of treeNode.children)\n      treeNode.rootElements.push(...child.rootElements);\n  }\n  return treeNode;\n}\nfunction filterComponentsTree(treeNode, searchFn, result = []) {\n  if (searchFn(treeNode))\n    result.push(treeNode);\n  for (const child of treeNode.children)\n    filterComponentsTree(child, searchFn, result);\n  return result;\n}\nfunction findReactRoots(root, roots = []) {\n  const document = root.ownerDocument || root;\n  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);\n  do {\n    const node = walker.currentNode;\n    const reactNode = node;\n    const rootKey = Object.keys(reactNode).find((key) => key.startsWith(\"__reactContainer\") && reactNode[key] !== null);\n    if (rootKey) {\n      roots.push(reactNode[rootKey].stateNode.current);\n    } else {\n      const legacyRootKey = \"_reactRootContainer\";\n      if (reactNode.hasOwnProperty(legacyRootKey) && reactNode[legacyRootKey] !== null) {\n        roots.push(reactNode[legacyRootKey]._internalRoot.current);\n      }\n    }\n    if (node instanceof Element && node.hasAttribute(\"data-reactroot\")) {\n      for (const key of Object.keys(node)) {\n        if (key.startsWith(\"__reactInternalInstance\") || key.startsWith(\"__reactFiber\"))\n          roots.push(node[key]);\n      }\n    }\n    const shadowRoot = node instanceof Element ? node.shadowRoot : null;\n    if (shadowRoot)\n      findReactRoots(shadowRoot, roots);\n  } while (walker.nextNode());\n  return roots;\n}\nvar ReactEngine = {\n  queryAll(scope, selector) {\n    const { name, attributes } = parseAttributeSelector(selector, false);\n    const reactRoots = findReactRoots(scope.ownerDocument || scope);\n    const trees = reactRoots.map((reactRoot) => buildComponentsTree(reactRoot));\n    const treeNodes = trees.map((tree) => filterComponentsTree(tree, (treeNode) => {\n      var _a;\n      const props = (_a = treeNode.props) != null ? _a : {};\n      if (treeNode.key !== void 0)\n        props.key = treeNode.key;\n      if (name && treeNode.name !== name)\n        return false;\n      if (treeNode.rootElements.some((domNode) => !isInsideScope(scope, domNode)))\n        return false;\n      for (const attr of attributes) {\n        if (!matchesComponentAttribute(props, attr))\n          return false;\n      }\n      return true;\n    })).flat();\n    const allRootElements = /* @__PURE__ */ new Set();\n    for (const treeNode of treeNodes) {\n      for (const domNode of treeNode.rootElements)\n        allRootElements.add(domNode);\n    }\n    return [...allRootElements];\n  }\n};\n\n// packages/playwright-core/src/server/injected/vueSelectorEngine.ts\nfunction basename(filename, ext) {\n  const normalized = filename.replace(/^[a-zA-Z]:/, \"\").replace(/\\\\/g, \"/\");\n  let result = normalized.substring(normalized.lastIndexOf(\"/\") + 1);\n  if (ext && result.endsWith(ext))\n    result = result.substring(0, result.length - ext.length);\n  return result;\n}\nfunction toUpper(_, c) {\n  return c ? c.toUpperCase() : \"\";\n}\nvar classifyRE = /(?:^|[-_/])(\\w)/g;\nvar classify = (str) => {\n  return str && str.replace(classifyRE, toUpper);\n};\nfunction buildComponentsTreeVue3(instance) {\n  function getComponentTypeName(options) {\n    const name = options.name || options._componentTag || options.__playwright_guessedName;\n    if (name)\n      return name;\n    const file = options.__file;\n    if (file)\n      return classify(basename(file, \".vue\"));\n  }\n  function saveComponentName(instance2, key) {\n    instance2.type.__playwright_guessedName = key;\n    return key;\n  }\n  function getInstanceName(instance2) {\n    var _a, _b, _c, _d;\n    const name = getComponentTypeName(instance2.type || {});\n    if (name)\n      return name;\n    if (instance2.root === instance2)\n      return \"Root\";\n    for (const key in (_b = (_a = instance2.parent) == null ? void 0 : _a.type) == null ? void 0 : _b.components) {\n      if (((_c = instance2.parent) == null ? void 0 : _c.type.components[key]) === instance2.type)\n        return saveComponentName(instance2, key);\n    }\n    for (const key in (_d = instance2.appContext) == null ? void 0 : _d.components) {\n      if (instance2.appContext.components[key] === instance2.type)\n        return saveComponentName(instance2, key);\n    }\n    return \"Anonymous Component\";\n  }\n  function isBeingDestroyed(instance2) {\n    return instance2._isBeingDestroyed || instance2.isUnmounted;\n  }\n  function isFragment(instance2) {\n    return instance2.subTree.type.toString() === \"Symbol(Fragment)\";\n  }\n  function getInternalInstanceChildren(subTree) {\n    const list = [];\n    if (subTree.component)\n      list.push(subTree.component);\n    if (subTree.suspense)\n      list.push(...getInternalInstanceChildren(subTree.suspense.activeBranch));\n    if (Array.isArray(subTree.children)) {\n      subTree.children.forEach((childSubTree) => {\n        if (childSubTree.component)\n          list.push(childSubTree.component);\n        else\n          list.push(...getInternalInstanceChildren(childSubTree));\n      });\n    }\n    return list.filter((child) => {\n      var _a;\n      return !isBeingDestroyed(child) && !((_a = child.type.devtools) == null ? void 0 : _a.hide);\n    });\n  }\n  function getRootElementsFromComponentInstance(instance2) {\n    if (isFragment(instance2))\n      return getFragmentRootElements(instance2.subTree);\n    return [instance2.subTree.el];\n  }\n  function getFragmentRootElements(vnode) {\n    if (!vnode.children)\n      return [];\n    const list = [];\n    for (let i = 0, l = vnode.children.length; i < l; i++) {\n      const childVnode = vnode.children[i];\n      if (childVnode.component)\n        list.push(...getRootElementsFromComponentInstance(childVnode.component));\n      else if (childVnode.el)\n        list.push(childVnode.el);\n    }\n    return list;\n  }\n  function buildComponentsTree2(instance2) {\n    return {\n      name: getInstanceName(instance2),\n      children: getInternalInstanceChildren(instance2.subTree).map(buildComponentsTree2),\n      rootElements: getRootElementsFromComponentInstance(instance2),\n      props: instance2.props\n    };\n  }\n  return buildComponentsTree2(instance);\n}\nfunction buildComponentsTreeVue2(instance) {\n  function getComponentName2(options) {\n    const name = options.displayName || options.name || options._componentTag;\n    if (name)\n      return name;\n    const file = options.__file;\n    if (file)\n      return classify(basename(file, \".vue\"));\n  }\n  function getInstanceName(instance2) {\n    const name = getComponentName2(instance2.$options || instance2.fnOptions || {});\n    if (name)\n      return name;\n    return instance2.$root === instance2 ? \"Root\" : \"Anonymous Component\";\n  }\n  function getInternalInstanceChildren(instance2) {\n    if (instance2.$children)\n      return instance2.$children;\n    if (Array.isArray(instance2.subTree.children))\n      return instance2.subTree.children.filter((vnode) => !!vnode.component).map((vnode) => vnode.component);\n    return [];\n  }\n  function buildComponentsTree2(instance2) {\n    return {\n      name: getInstanceName(instance2),\n      children: getInternalInstanceChildren(instance2).map(buildComponentsTree2),\n      rootElements: [instance2.$el],\n      props: instance2._props\n    };\n  }\n  return buildComponentsTree2(instance);\n}\nfunction filterComponentsTree2(treeNode, searchFn, result = []) {\n  if (searchFn(treeNode))\n    result.push(treeNode);\n  for (const child of treeNode.children)\n    filterComponentsTree2(child, searchFn, result);\n  return result;\n}\nfunction findVueRoots(root, roots = []) {\n  const document = root.ownerDocument || root;\n  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);\n  const vue2Roots = /* @__PURE__ */ new Set();\n  do {\n    const node = walker.currentNode;\n    if (node.__vue__)\n      vue2Roots.add(node.__vue__.$root);\n    if (node.__vue_app__ && node._vnode && node._vnode.component)\n      roots.push({ root: node._vnode.component, version: 3 });\n    const shadowRoot = node instanceof Element ? node.shadowRoot : null;\n    if (shadowRoot)\n      findVueRoots(shadowRoot, roots);\n  } while (walker.nextNode());\n  for (const vue2root of vue2Roots) {\n    roots.push({\n      version: 2,\n      root: vue2root\n    });\n  }\n  return roots;\n}\nvar VueEngine = {\n  queryAll(scope, selector) {\n    const document = scope.ownerDocument || scope;\n    const { name, attributes } = parseAttributeSelector(selector, false);\n    const vueRoots = findVueRoots(document);\n    const trees = vueRoots.map((vueRoot) => vueRoot.version === 3 ? buildComponentsTreeVue3(vueRoot.root) : buildComponentsTreeVue2(vueRoot.root));\n    const treeNodes = trees.map((tree) => filterComponentsTree2(tree, (treeNode) => {\n      if (name && treeNode.name !== name)\n        return false;\n      if (treeNode.rootElements.some((rootElement) => !isInsideScope(scope, rootElement)))\n        return false;\n      for (const attr of attributes) {\n        if (!matchesComponentAttribute(treeNode.props, attr))\n          return false;\n      }\n      return true;\n    })).flat();\n    const allRootElements = /* @__PURE__ */ new Set();\n    for (const treeNode of treeNodes) {\n      for (const rootElement of treeNode.rootElements)\n        allRootElements.add(rootElement);\n    }\n    return [...allRootElements];\n  }\n};\n\n// packages/playwright-core/src/server/injected/roleSelectorEngine.ts\nvar kSupportedAttributes = [\"selected\", \"checked\", \"pressed\", \"expanded\", \"level\", \"disabled\", \"name\", \"include-hidden\"];\nkSupportedAttributes.sort();\nfunction validateSupportedRole(attr, roles, role) {\n  if (!roles.includes(role))\n    throw new Error(`\"${attr}\" attribute is only supported for roles: ${roles.slice().sort().map((role2) => `\"${role2}\"`).join(\", \")}`);\n}\nfunction validateSupportedValues(attr, values) {\n  if (attr.op !== \"<truthy>\" && !values.includes(attr.value))\n    throw new Error(`\"${attr.name}\" must be one of ${values.map((v) => JSON.stringify(v)).join(\", \")}`);\n}\nfunction validateSupportedOp(attr, ops) {\n  if (!ops.includes(attr.op))\n    throw new Error(`\"${attr.name}\" does not support \"${attr.op}\" matcher`);\n}\nfunction validateAttributes(attrs, role) {\n  const options = { role };\n  for (const attr of attrs) {\n    switch (attr.name) {\n      case \"checked\": {\n        validateSupportedRole(attr.name, kAriaCheckedRoles, role);\n        validateSupportedValues(attr, [true, false, \"mixed\"]);\n        validateSupportedOp(attr, [\"<truthy>\", \"=\"]);\n        options.checked = attr.op === \"<truthy>\" ? true : attr.value;\n        break;\n      }\n      case \"pressed\": {\n        validateSupportedRole(attr.name, kAriaPressedRoles, role);\n        validateSupportedValues(attr, [true, false, \"mixed\"]);\n        validateSupportedOp(attr, [\"<truthy>\", \"=\"]);\n        options.pressed = attr.op === \"<truthy>\" ? true : attr.value;\n        break;\n      }\n      case \"selected\": {\n        validateSupportedRole(attr.name, kAriaSelectedRoles, role);\n        validateSupportedValues(attr, [true, false]);\n        validateSupportedOp(attr, [\"<truthy>\", \"=\"]);\n        options.selected = attr.op === \"<truthy>\" ? true : attr.value;\n        break;\n      }\n      case \"expanded\": {\n        validateSupportedRole(attr.name, kAriaExpandedRoles, role);\n        validateSupportedValues(attr, [true, false]);\n        validateSupportedOp(attr, [\"<truthy>\", \"=\"]);\n        options.expanded = attr.op === \"<truthy>\" ? true : attr.value;\n        break;\n      }\n      case \"level\": {\n        validateSupportedRole(attr.name, kAriaLevelRoles, role);\n        if (typeof attr.value === \"string\")\n          attr.value = +attr.value;\n        if (attr.op !== \"=\" || typeof attr.value !== \"number\" || Number.isNaN(attr.value))\n          throw new Error(`\"level\" attribute must be compared to a number`);\n        options.level = attr.value;\n        break;\n      }\n      case \"disabled\": {\n        validateSupportedValues(attr, [true, false]);\n        validateSupportedOp(attr, [\"<truthy>\", \"=\"]);\n        options.disabled = attr.op === \"<truthy>\" ? true : attr.value;\n        break;\n      }\n      case \"name\": {\n        if (attr.op === \"<truthy>\")\n          throw new Error(`\"name\" attribute must have a value`);\n        if (typeof attr.value !== \"string\" && !(attr.value instanceof RegExp))\n          throw new Error(`\"name\" attribute must be a string or a regular expression`);\n        options.name = attr.value;\n        options.nameOp = attr.op;\n        options.exact = attr.caseSensitive;\n        break;\n      }\n      case \"include-hidden\": {\n        validateSupportedValues(attr, [true, false]);\n        validateSupportedOp(attr, [\"<truthy>\", \"=\"]);\n        options.includeHidden = attr.op === \"<truthy>\" ? true : attr.value;\n        break;\n      }\n      default: {\n        throw new Error(`Unknown attribute \"${attr.name}\", must be one of ${kSupportedAttributes.map((a) => `\"${a}\"`).join(\", \")}.`);\n      }\n    }\n  }\n  return options;\n}\nfunction queryRole(scope, options, internal) {\n  const result = [];\n  const match = (element) => {\n    if (getAriaRole(element) !== options.role)\n      return;\n    if (options.selected !== void 0 && getAriaSelected(element) !== options.selected)\n      return;\n    if (options.checked !== void 0 && getAriaChecked(element) !== options.checked)\n      return;\n    if (options.pressed !== void 0 && getAriaPressed(element) !== options.pressed)\n      return;\n    if (options.expanded !== void 0 && getAriaExpanded(element) !== options.expanded)\n      return;\n    if (options.level !== void 0 && getAriaLevel(element) !== options.level)\n      return;\n    if (options.disabled !== void 0 && getAriaDisabled(element) !== options.disabled)\n      return;\n    if (!options.includeHidden) {\n      const isHidden = isElementHiddenForAria(element);\n      if (isHidden)\n        return;\n    }\n    if (options.name !== void 0) {\n      const accessibleName = normalizeWhiteSpace(getElementAccessibleName(element, !!options.includeHidden));\n      if (typeof options.name === \"string\")\n        options.name = normalizeWhiteSpace(options.name);\n      if (internal && !options.exact && options.nameOp === \"=\")\n        options.nameOp = \"*=\";\n      if (!matchesAttributePart(accessibleName, { name: \"\", jsonPath: [], op: options.nameOp || \"=\", value: options.name, caseSensitive: !!options.exact }))\n        return;\n    }\n    result.push(element);\n  };\n  const query = (root) => {\n    const shadows = [];\n    if (root.shadowRoot)\n      shadows.push(root.shadowRoot);\n    for (const element of root.querySelectorAll(\"*\")) {\n      match(element);\n      if (element.shadowRoot)\n        shadows.push(element.shadowRoot);\n    }\n    shadows.forEach(query);\n  };\n  query(scope);\n  return result;\n}\nfunction createRoleEngine(internal) {\n  return {\n    queryAll: (scope, selector) => {\n      const parsed = parseAttributeSelector(selector, true);\n      const role = parsed.name.toLowerCase();\n      if (!role)\n        throw new Error(`Role must not be empty`);\n      const options = validateAttributes(parsed.attributes, role);\n      beginAriaCaches();\n      try {\n        return queryRole(scope, options, internal);\n      } finally {\n        endAriaCaches();\n      }\n    }\n  };\n}\n\n// packages/playwright-core/src/server/injected/layoutSelectorUtils.ts\nfunction boxRightOf(box1, box2, maxDistance) {\n  const distance = box1.left - box2.right;\n  if (distance < 0 || maxDistance !== void 0 && distance > maxDistance)\n    return;\n  return distance + Math.max(box2.bottom - box1.bottom, 0) + Math.max(box1.top - box2.top, 0);\n}\nfunction boxLeftOf(box1, box2, maxDistance) {\n  const distance = box2.left - box1.right;\n  if (distance < 0 || maxDistance !== void 0 && distance > maxDistance)\n    return;\n  return distance + Math.max(box2.bottom - box1.bottom, 0) + Math.max(box1.top - box2.top, 0);\n}\nfunction boxAbove(box1, box2, maxDistance) {\n  const distance = box2.top - box1.bottom;\n  if (distance < 0 || maxDistance !== void 0 && distance > maxDistance)\n    return;\n  return distance + Math.max(box1.left - box2.left, 0) + Math.max(box2.right - box1.right, 0);\n}\nfunction boxBelow(box1, box2, maxDistance) {\n  const distance = box1.top - box2.bottom;\n  if (distance < 0 || maxDistance !== void 0 && distance > maxDistance)\n    return;\n  return distance + Math.max(box1.left - box2.left, 0) + Math.max(box2.right - box1.right, 0);\n}\nfunction boxNear(box1, box2, maxDistance) {\n  const kThreshold = maxDistance === void 0 ? 50 : maxDistance;\n  let score = 0;\n  if (box1.left - box2.right >= 0)\n    score += box1.left - box2.right;\n  if (box2.left - box1.right >= 0)\n    score += box2.left - box1.right;\n  if (box2.top - box1.bottom >= 0)\n    score += box2.top - box1.bottom;\n  if (box1.top - box2.bottom >= 0)\n    score += box1.top - box2.bottom;\n  return score > kThreshold ? void 0 : score;\n}\nvar kLayoutSelectorNames = [\"left-of\", \"right-of\", \"above\", \"below\", \"near\"];\nfunction layoutSelectorScore(name, element, inner, maxDistance) {\n  const box = element.getBoundingClientRect();\n  const scorer = { \"left-of\": boxLeftOf, \"right-of\": boxRightOf, \"above\": boxAbove, \"below\": boxBelow, \"near\": boxNear }[name];\n  let bestScore;\n  for (const e of inner) {\n    if (e === element)\n      continue;\n    const score = scorer(box, e.getBoundingClientRect(), maxDistance);\n    if (score === void 0)\n      continue;\n    if (bestScore === void 0 || score < bestScore)\n      bestScore = score;\n  }\n  return bestScore;\n}\n\n// packages/playwright-core/src/server/injected/selectorEvaluator.ts\nvar SelectorEvaluatorImpl = class {\n  constructor(extraEngines) {\n    this._engines = /* @__PURE__ */ new Map();\n    this._cacheQueryCSS = /* @__PURE__ */ new Map();\n    this._cacheMatches = /* @__PURE__ */ new Map();\n    this._cacheQuery = /* @__PURE__ */ new Map();\n    this._cacheMatchesSimple = /* @__PURE__ */ new Map();\n    this._cacheMatchesParents = /* @__PURE__ */ new Map();\n    this._cacheCallMatches = /* @__PURE__ */ new Map();\n    this._cacheCallQuery = /* @__PURE__ */ new Map();\n    this._cacheQuerySimple = /* @__PURE__ */ new Map();\n    this._cacheText = /* @__PURE__ */ new Map();\n    this._retainCacheCounter = 0;\n    for (const [name, engine] of extraEngines)\n      this._engines.set(name, engine);\n    this._engines.set(\"not\", notEngine);\n    this._engines.set(\"is\", isEngine);\n    this._engines.set(\"where\", isEngine);\n    this._engines.set(\"has\", hasEngine);\n    this._engines.set(\"scope\", scopeEngine);\n    this._engines.set(\"light\", lightEngine);\n    this._engines.set(\"visible\", visibleEngine);\n    this._engines.set(\"text\", textEngine);\n    this._engines.set(\"text-is\", textIsEngine);\n    this._engines.set(\"text-matches\", textMatchesEngine);\n    this._engines.set(\"has-text\", hasTextEngine);\n    this._engines.set(\"right-of\", createLayoutEngine(\"right-of\"));\n    this._engines.set(\"left-of\", createLayoutEngine(\"left-of\"));\n    this._engines.set(\"above\", createLayoutEngine(\"above\"));\n    this._engines.set(\"below\", createLayoutEngine(\"below\"));\n    this._engines.set(\"near\", createLayoutEngine(\"near\"));\n    this._engines.set(\"nth-match\", nthMatchEngine);\n    const allNames = [...this._engines.keys()];\n    allNames.sort();\n    const parserNames = [...customCSSNames];\n    parserNames.sort();\n    if (allNames.join(\"|\") !== parserNames.join(\"|\"))\n      throw new Error(`Please keep customCSSNames in sync with evaluator engines: ${allNames.join(\"|\")} vs ${parserNames.join(\"|\")}`);\n  }\n  begin() {\n    ++this._retainCacheCounter;\n  }\n  end() {\n    --this._retainCacheCounter;\n    if (!this._retainCacheCounter) {\n      this._cacheQueryCSS.clear();\n      this._cacheMatches.clear();\n      this._cacheQuery.clear();\n      this._cacheMatchesSimple.clear();\n      this._cacheMatchesParents.clear();\n      this._cacheCallMatches.clear();\n      this._cacheCallQuery.clear();\n      this._cacheQuerySimple.clear();\n      this._cacheText.clear();\n    }\n  }\n  _cached(cache, main, rest, cb) {\n    if (!cache.has(main))\n      cache.set(main, []);\n    const entries = cache.get(main);\n    const entry = entries.find((e) => rest.every((value, index) => e.rest[index] === value));\n    if (entry)\n      return entry.result;\n    const result = cb();\n    entries.push({ rest, result });\n    return result;\n  }\n  _checkSelector(s) {\n    const wellFormed = typeof s === \"object\" && s && (Array.isArray(s) || \"simples\" in s && s.simples.length);\n    if (!wellFormed)\n      throw new Error(`Malformed selector \"${s}\"`);\n    return s;\n  }\n  matches(element, s, context) {\n    const selector = this._checkSelector(s);\n    this.begin();\n    try {\n      return this._cached(this._cacheMatches, element, [selector, context.scope, context.pierceShadow, context.originalScope], () => {\n        if (Array.isArray(selector))\n          return this._matchesEngine(isEngine, element, selector, context);\n        if (this._hasScopeClause(selector))\n          context = this._expandContextForScopeMatching(context);\n        if (!this._matchesSimple(element, selector.simples[selector.simples.length - 1].selector, context))\n          return false;\n        return this._matchesParents(element, selector, selector.simples.length - 2, context);\n      });\n    } finally {\n      this.end();\n    }\n  }\n  query(context, s) {\n    const selector = this._checkSelector(s);\n    this.begin();\n    try {\n      return this._cached(this._cacheQuery, selector, [context.scope, context.pierceShadow, context.originalScope], () => {\n        if (Array.isArray(selector))\n          return this._queryEngine(isEngine, context, selector);\n        if (this._hasScopeClause(selector))\n          context = this._expandContextForScopeMatching(context);\n        const previousScoreMap = this._scoreMap;\n        this._scoreMap = /* @__PURE__ */ new Map();\n        let elements = this._querySimple(context, selector.simples[selector.simples.length - 1].selector);\n        elements = elements.filter((element) => this._matchesParents(element, selector, selector.simples.length - 2, context));\n        if (this._scoreMap.size) {\n          elements.sort((a, b) => {\n            const aScore = this._scoreMap.get(a);\n            const bScore = this._scoreMap.get(b);\n            if (aScore === bScore)\n              return 0;\n            if (aScore === void 0)\n              return 1;\n            if (bScore === void 0)\n              return -1;\n            return aScore - bScore;\n          });\n        }\n        this._scoreMap = previousScoreMap;\n        return elements;\n      });\n    } finally {\n      this.end();\n    }\n  }\n  _markScore(element, score) {\n    if (this._scoreMap)\n      this._scoreMap.set(element, score);\n  }\n  _hasScopeClause(selector) {\n    return selector.simples.some((simple) => simple.selector.functions.some((f) => f.name === \"scope\"));\n  }\n  _expandContextForScopeMatching(context) {\n    if (context.scope.nodeType !== 1)\n      return context;\n    const scope = parentElementOrShadowHost(context.scope);\n    if (!scope)\n      return context;\n    return { ...context, scope, originalScope: context.originalScope || context.scope };\n  }\n  _matchesSimple(element, simple, context) {\n    return this._cached(this._cacheMatchesSimple, element, [simple, context.scope, context.pierceShadow, context.originalScope], () => {\n      if (element === context.scope)\n        return false;\n      if (simple.css && !this._matchesCSS(element, simple.css))\n        return false;\n      for (const func of simple.functions) {\n        if (!this._matchesEngine(this._getEngine(func.name), element, func.args, context))\n          return false;\n      }\n      return true;\n    });\n  }\n  _querySimple(context, simple) {\n    if (!simple.functions.length)\n      return this._queryCSS(context, simple.css || \"*\");\n    return this._cached(this._cacheQuerySimple, simple, [context.scope, context.pierceShadow, context.originalScope], () => {\n      let css = simple.css;\n      const funcs = simple.functions;\n      if (css === \"*\" && funcs.length)\n        css = void 0;\n      let elements;\n      let firstIndex = -1;\n      if (css !== void 0) {\n        elements = this._queryCSS(context, css);\n      } else {\n        firstIndex = funcs.findIndex((func) => this._getEngine(func.name).query !== void 0);\n        if (firstIndex === -1)\n          firstIndex = 0;\n        elements = this._queryEngine(this._getEngine(funcs[firstIndex].name), context, funcs[firstIndex].args);\n      }\n      for (let i = 0; i < funcs.length; i++) {\n        if (i === firstIndex)\n          continue;\n        const engine = this._getEngine(funcs[i].name);\n        if (engine.matches !== void 0)\n          elements = elements.filter((e) => this._matchesEngine(engine, e, funcs[i].args, context));\n      }\n      for (let i = 0; i < funcs.length; i++) {\n        if (i === firstIndex)\n          continue;\n        const engine = this._getEngine(funcs[i].name);\n        if (engine.matches === void 0)\n          elements = elements.filter((e) => this._matchesEngine(engine, e, funcs[i].args, context));\n      }\n      return elements;\n    });\n  }\n  _matchesParents(element, complex, index, context) {\n    if (index < 0)\n      return true;\n    return this._cached(this._cacheMatchesParents, element, [complex, index, context.scope, context.pierceShadow, context.originalScope], () => {\n      const { selector: simple, combinator } = complex.simples[index];\n      if (combinator === \">\") {\n        const parent = parentElementOrShadowHostInContext(element, context);\n        if (!parent || !this._matchesSimple(parent, simple, context))\n          return false;\n        return this._matchesParents(parent, complex, index - 1, context);\n      }\n      if (combinator === \"+\") {\n        const previousSibling = previousSiblingInContext(element, context);\n        if (!previousSibling || !this._matchesSimple(previousSibling, simple, context))\n          return false;\n        return this._matchesParents(previousSibling, complex, index - 1, context);\n      }\n      if (combinator === \"\") {\n        let parent = parentElementOrShadowHostInContext(element, context);\n        while (parent) {\n          if (this._matchesSimple(parent, simple, context)) {\n            if (this._matchesParents(parent, complex, index - 1, context))\n              return true;\n            if (complex.simples[index - 1].combinator === \"\")\n              break;\n          }\n          parent = parentElementOrShadowHostInContext(parent, context);\n        }\n        return false;\n      }\n      if (combinator === \"~\") {\n        let previousSibling = previousSiblingInContext(element, context);\n        while (previousSibling) {\n          if (this._matchesSimple(previousSibling, simple, context)) {\n            if (this._matchesParents(previousSibling, complex, index - 1, context))\n              return true;\n            if (complex.simples[index - 1].combinator === \"~\")\n              break;\n          }\n          previousSibling = previousSiblingInContext(previousSibling, context);\n        }\n        return false;\n      }\n      if (combinator === \">=\") {\n        let parent = element;\n        while (parent) {\n          if (this._matchesSimple(parent, simple, context)) {\n            if (this._matchesParents(parent, complex, index - 1, context))\n              return true;\n            if (complex.simples[index - 1].combinator === \"\")\n              break;\n          }\n          parent = parentElementOrShadowHostInContext(parent, context);\n        }\n        return false;\n      }\n      throw new Error(`Unsupported combinator \"${combinator}\"`);\n    });\n  }\n  _matchesEngine(engine, element, args, context) {\n    if (engine.matches)\n      return this._callMatches(engine, element, args, context);\n    if (engine.query)\n      return this._callQuery(engine, args, context).includes(element);\n    throw new Error(`Selector engine should implement \"matches\" or \"query\"`);\n  }\n  _queryEngine(engine, context, args) {\n    if (engine.query)\n      return this._callQuery(engine, args, context);\n    if (engine.matches)\n      return this._queryCSS(context, \"*\").filter((element) => this._callMatches(engine, element, args, context));\n    throw new Error(`Selector engine should implement \"matches\" or \"query\"`);\n  }\n  _callMatches(engine, element, args, context) {\n    return this._cached(this._cacheCallMatches, element, [engine, context.scope, context.pierceShadow, context.originalScope, ...args], () => {\n      return engine.matches(element, args, context, this);\n    });\n  }\n  _callQuery(engine, args, context) {\n    return this._cached(this._cacheCallQuery, engine, [context.scope, context.pierceShadow, context.originalScope, ...args], () => {\n      return engine.query(context, args, this);\n    });\n  }\n  _matchesCSS(element, css) {\n    return element.matches(css);\n  }\n  _queryCSS(context, css) {\n    return this._cached(this._cacheQueryCSS, css, [context.scope, context.pierceShadow, context.originalScope], () => {\n      let result = [];\n      function query(root) {\n        result = result.concat([...root.querySelectorAll(css)]);\n        if (!context.pierceShadow)\n          return;\n        if (root.shadowRoot)\n          query(root.shadowRoot);\n        for (const element of root.querySelectorAll(\"*\")) {\n          if (element.shadowRoot)\n            query(element.shadowRoot);\n        }\n      }\n      query(context.scope);\n      return result;\n    });\n  }\n  _getEngine(name) {\n    const engine = this._engines.get(name);\n    if (!engine)\n      throw new Error(`Unknown selector engine \"${name}\"`);\n    return engine;\n  }\n};\nvar isEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length === 0)\n      throw new Error(`\"is\" engine expects non-empty selector list`);\n    return args.some((selector) => evaluator.matches(element, selector, context));\n  },\n  query(context, args, evaluator) {\n    if (args.length === 0)\n      throw new Error(`\"is\" engine expects non-empty selector list`);\n    let elements = [];\n    for (const arg of args)\n      elements = elements.concat(evaluator.query(context, arg));\n    return args.length === 1 ? elements : sortInDOMOrder(elements);\n  }\n};\nvar hasEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length === 0)\n      throw new Error(`\"has\" engine expects non-empty selector list`);\n    return evaluator.query({ ...context, scope: element }, args).length > 0;\n  }\n  // TODO: we can implement efficient \"query\" by matching \"args\" and returning\n  // all parents/descendants, just have to be careful with the \":scope\" matching.\n};\nvar scopeEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length !== 0)\n      throw new Error(`\"scope\" engine expects no arguments`);\n    const actualScope = context.originalScope || context.scope;\n    if (actualScope.nodeType === 9)\n      return element === actualScope.documentElement;\n    return element === actualScope;\n  },\n  query(context, args, evaluator) {\n    if (args.length !== 0)\n      throw new Error(`\"scope\" engine expects no arguments`);\n    const actualScope = context.originalScope || context.scope;\n    if (actualScope.nodeType === 9) {\n      const root = actualScope.documentElement;\n      return root ? [root] : [];\n    }\n    if (actualScope.nodeType === 1)\n      return [actualScope];\n    return [];\n  }\n};\nvar notEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length === 0)\n      throw new Error(`\"not\" engine expects non-empty selector list`);\n    return !evaluator.matches(element, args, context);\n  }\n};\nvar lightEngine = {\n  query(context, args, evaluator) {\n    return evaluator.query({ ...context, pierceShadow: false }, args);\n  },\n  matches(element, args, context, evaluator) {\n    return evaluator.matches(element, args, { ...context, pierceShadow: false });\n  }\n};\nvar visibleEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length)\n      throw new Error(`\"visible\" engine expects no arguments`);\n    return isElementVisible(element);\n  }\n};\nvar textEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length !== 1 || typeof args[0] !== \"string\")\n      throw new Error(`\"text\" engine expects a single string`);\n    const text = normalizeWhiteSpace(args[0]).toLowerCase();\n    const matcher = (elementText2) => elementText2.normalized.toLowerCase().includes(text);\n    return elementMatchesText(evaluator._cacheText, element, matcher) === \"self\";\n  }\n};\nvar textIsEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length !== 1 || typeof args[0] !== \"string\")\n      throw new Error(`\"text-is\" engine expects a single string`);\n    const text = normalizeWhiteSpace(args[0]);\n    const matcher = (elementText2) => {\n      if (!text && !elementText2.immediate.length)\n        return true;\n      return elementText2.immediate.some((s) => normalizeWhiteSpace(s) === text);\n    };\n    return elementMatchesText(evaluator._cacheText, element, matcher) !== \"none\";\n  }\n};\nvar textMatchesEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length === 0 || typeof args[0] !== \"string\" || args.length > 2 || args.length === 2 && typeof args[1] !== \"string\")\n      throw new Error(`\"text-matches\" engine expects a regexp body and optional regexp flags`);\n    const re = new RegExp(args[0], args.length === 2 ? args[1] : void 0);\n    const matcher = (elementText2) => re.test(elementText2.full);\n    return elementMatchesText(evaluator._cacheText, element, matcher) === \"self\";\n  }\n};\nvar hasTextEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length !== 1 || typeof args[0] !== \"string\")\n      throw new Error(`\"has-text\" engine expects a single string`);\n    if (shouldSkipForTextMatching(element))\n      return false;\n    const text = normalizeWhiteSpace(args[0]).toLowerCase();\n    const matcher = (elementText2) => elementText2.normalized.toLowerCase().includes(text);\n    return matcher(elementText(evaluator._cacheText, element));\n  }\n};\nfunction createLayoutEngine(name) {\n  return {\n    matches(element, args, context, evaluator) {\n      const maxDistance = args.length && typeof args[args.length - 1] === \"number\" ? args[args.length - 1] : void 0;\n      const queryArgs = maxDistance === void 0 ? args : args.slice(0, args.length - 1);\n      if (args.length < 1 + (maxDistance === void 0 ? 0 : 1))\n        throw new Error(`\"${name}\" engine expects a selector list and optional maximum distance in pixels`);\n      const inner = evaluator.query(context, queryArgs);\n      const score = layoutSelectorScore(name, element, inner, maxDistance);\n      if (score === void 0)\n        return false;\n      evaluator._markScore(element, score);\n      return true;\n    }\n  };\n}\nvar nthMatchEngine = {\n  query(context, args, evaluator) {\n    let index = args[args.length - 1];\n    if (args.length < 2)\n      throw new Error(`\"nth-match\" engine expects non-empty selector list and an index argument`);\n    if (typeof index !== \"number\" || index < 1)\n      throw new Error(`\"nth-match\" engine expects a one-based index as the last argument`);\n    const elements = isEngine.query(context, args.slice(0, args.length - 1), evaluator);\n    index--;\n    return index < elements.length ? [elements[index]] : [];\n  }\n};\nfunction parentElementOrShadowHostInContext(element, context) {\n  if (element === context.scope)\n    return;\n  if (!context.pierceShadow)\n    return element.parentElement || void 0;\n  return parentElementOrShadowHost(element);\n}\nfunction previousSiblingInContext(element, context) {\n  if (element === context.scope)\n    return;\n  return element.previousElementSibling || void 0;\n}\nfunction sortInDOMOrder(elements) {\n  const elementToEntry = /* @__PURE__ */ new Map();\n  const roots = [];\n  const result = [];\n  function append(element) {\n    let entry = elementToEntry.get(element);\n    if (entry)\n      return entry;\n    const parent = parentElementOrShadowHost(element);\n    if (parent) {\n      const parentEntry = append(parent);\n      parentEntry.children.push(element);\n    } else {\n      roots.push(element);\n    }\n    entry = { children: [], taken: false };\n    elementToEntry.set(element, entry);\n    return entry;\n  }\n  for (const e of elements)\n    append(e).taken = true;\n  function visit(element) {\n    const entry = elementToEntry.get(element);\n    if (entry.taken)\n      result.push(element);\n    if (entry.children.length > 1) {\n      const set = new Set(entry.children);\n      entry.children = [];\n      let child = element.firstElementChild;\n      while (child && entry.children.length < set.size) {\n        if (set.has(child))\n          entry.children.push(child);\n        child = child.nextElementSibling;\n      }\n      child = element.shadowRoot ? element.shadowRoot.firstElementChild : null;\n      while (child && entry.children.length < set.size) {\n        if (set.has(child))\n          entry.children.push(child);\n        child = child.nextElementSibling;\n      }\n    }\n    entry.children.forEach(visit);\n  }\n  roots.forEach(visit);\n  return result;\n}\n\n// packages/playwright-core/src/server/injected/selectorGenerator.ts\nvar cacheAllowText = /* @__PURE__ */ new Map();\nvar cacheDisallowText = /* @__PURE__ */ new Map();\nvar kTextScoreRange = 10;\nvar kExactPenalty = kTextScoreRange / 2;\nvar kTestIdScore = 1;\nvar kOtherTestIdScore = 2;\nvar kIframeByAttributeScore = 10;\nvar kBeginPenalizedScore = 50;\nvar kPlaceholderScore = 100;\nvar kLabelScore = 120;\nvar kRoleWithNameScore = 140;\nvar kAltTextScore = 160;\nvar kTextScore = 180;\nvar kTitleScore = 200;\nvar kTextScoreRegex = 250;\nvar kPlaceholderScoreExact = kPlaceholderScore + kExactPenalty;\nvar kLabelScoreExact = kLabelScore + kExactPenalty;\nvar kRoleWithNameScoreExact = kRoleWithNameScore + kExactPenalty;\nvar kAltTextScoreExact = kAltTextScore + kExactPenalty;\nvar kTextScoreExact = kTextScore + kExactPenalty;\nvar kTitleScoreExact = kTitleScore + kExactPenalty;\nvar kEndPenalizedScore = 300;\nvar kCSSIdScore = 500;\nvar kRoleWithoutNameScore = 510;\nvar kCSSInputTypeNameScore = 520;\nvar kCSSTagNameScore = 530;\nvar kNthScore = 1e4;\nvar kCSSFallbackScore = 1e7;\nvar kScoreThresholdForTextExpect = 1e3;\nfunction generateSelector(injectedScript, targetElement, options) {\n  var _a;\n  injectedScript._evaluator.begin();\n  beginAriaCaches();\n  try {\n    let selectors = [];\n    if (options.forTextExpect) {\n      let targetTokens = cssFallback(injectedScript, targetElement.ownerDocument.documentElement, options);\n      for (let element = targetElement; element; element = parentElementOrShadowHost(element)) {\n        const tokens = generateSelectorFor(injectedScript, element, { ...options, noText: true });\n        if (!tokens)\n          continue;\n        const score = combineScores(tokens);\n        if (score <= kScoreThresholdForTextExpect) {\n          targetTokens = tokens;\n          break;\n        }\n      }\n      selectors = [joinTokens(targetTokens)];\n    } else {\n      targetElement = closestCrossShadow(targetElement, \"button,select,input,[role=button],[role=checkbox],[role=radio],a,[role=link]\", options.root) || targetElement;\n      if (options.multiple) {\n        const withText = generateSelectorFor(injectedScript, targetElement, options);\n        const withoutText = generateSelectorFor(injectedScript, targetElement, { ...options, noText: true });\n        let tokens = [withText, withoutText];\n        cacheAllowText.clear();\n        cacheDisallowText.clear();\n        if (withText && hasCSSIdToken(withText))\n          tokens.push(generateSelectorFor(injectedScript, targetElement, { ...options, noCSSId: true }));\n        if (withoutText && hasCSSIdToken(withoutText))\n          tokens.push(generateSelectorFor(injectedScript, targetElement, { ...options, noText: true, noCSSId: true }));\n        tokens = tokens.filter(Boolean);\n        if (!tokens.length) {\n          const css = cssFallback(injectedScript, targetElement, options);\n          tokens.push(css);\n          if (hasCSSIdToken(css))\n            tokens.push(cssFallback(injectedScript, targetElement, { ...options, noCSSId: true }));\n        }\n        selectors = [...new Set(tokens.map((t) => joinTokens(t)))];\n      } else {\n        const targetTokens = generateSelectorFor(injectedScript, targetElement, options) || cssFallback(injectedScript, targetElement, options);\n        selectors = [joinTokens(targetTokens)];\n      }\n    }\n    const selector = selectors[0];\n    const parsedSelector = injectedScript.parseSelector(selector);\n    return {\n      selector,\n      selectors,\n      elements: injectedScript.querySelectorAll(parsedSelector, (_a = options.root) != null ? _a : targetElement.ownerDocument)\n    };\n  } finally {\n    cacheAllowText.clear();\n    cacheDisallowText.clear();\n    endAriaCaches();\n    injectedScript._evaluator.end();\n  }\n}\nfunction filterRegexTokens(textCandidates) {\n  return textCandidates.filter((c) => c[0].selector[0] !== \"/\");\n}\nfunction generateSelectorFor(injectedScript, targetElement, options) {\n  if (options.root && !isInsideScope(options.root, targetElement))\n    throw new Error(`Target element must belong to the root's subtree`);\n  if (targetElement === options.root)\n    return [{ engine: \"css\", selector: \":scope\", score: 1 }];\n  if (targetElement.ownerDocument.documentElement === targetElement)\n    return [{ engine: \"css\", selector: \"html\", score: 1 }];\n  const calculate = (element, allowText) => {\n    var _a;\n    const allowNthMatch = element === targetElement;\n    let textCandidates = allowText ? buildTextCandidates(injectedScript, element, element === targetElement) : [];\n    if (element !== targetElement) {\n      textCandidates = filterRegexTokens(textCandidates);\n    }\n    const noTextCandidates = buildNoTextCandidates(injectedScript, element, options).filter((token) => !options.omitInternalEngines || !token.engine.startsWith(\"internal:\")).map((token) => [token]);\n    let result = chooseFirstSelector(injectedScript, (_a = options.root) != null ? _a : targetElement.ownerDocument, element, [...textCandidates, ...noTextCandidates], allowNthMatch);\n    textCandidates = filterRegexTokens(textCandidates);\n    const checkWithText = (textCandidatesToUse) => {\n      const allowParentText = allowText && !textCandidatesToUse.length;\n      const candidates = [...textCandidatesToUse, ...noTextCandidates].filter((c) => {\n        if (!result)\n          return true;\n        return combineScores(c) < combineScores(result);\n      });\n      let bestPossibleInParent = candidates[0];\n      if (!bestPossibleInParent)\n        return;\n      for (let parent = parentElementOrShadowHost(element); parent && parent !== options.root; parent = parentElementOrShadowHost(parent)) {\n        const parentTokens = calculateCached(parent, allowParentText);\n        if (!parentTokens)\n          continue;\n        if (result && combineScores([...parentTokens, ...bestPossibleInParent]) >= combineScores(result))\n          continue;\n        bestPossibleInParent = chooseFirstSelector(injectedScript, parent, element, candidates, allowNthMatch);\n        if (!bestPossibleInParent)\n          return;\n        const combined = [...parentTokens, ...bestPossibleInParent];\n        if (!result || combineScores(combined) < combineScores(result))\n          result = combined;\n      }\n    };\n    checkWithText(textCandidates);\n    if (element === targetElement && textCandidates.length)\n      checkWithText([]);\n    return result;\n  };\n  const calculateCached = (element, allowText) => {\n    const cache = allowText ? cacheAllowText : cacheDisallowText;\n    let value = cache.get(element);\n    if (value === void 0) {\n      value = calculate(element, allowText);\n      cache.set(element, value);\n    }\n    return value;\n  };\n  return calculate(targetElement, !options.noText);\n}\nfunction buildNoTextCandidates(injectedScript, element, options) {\n  const candidates = [];\n  {\n    for (const attr of [\"data-testid\", \"data-test-id\", \"data-test\"]) {\n      if (attr !== options.testIdAttributeName && element.getAttribute(attr))\n        candidates.push({ engine: \"css\", selector: `[${attr}=${quoteCSSAttributeValue(element.getAttribute(attr))}]`, score: kOtherTestIdScore });\n    }\n    if (!options.noCSSId) {\n      const idAttr = element.getAttribute(\"id\");\n      if (idAttr && !isGuidLike(idAttr))\n        candidates.push({ engine: \"css\", selector: makeSelectorForId(idAttr), score: kCSSIdScore });\n    }\n    candidates.push({ engine: \"css\", selector: cssEscape(element.nodeName.toLowerCase()), score: kCSSTagNameScore });\n  }\n  if (element.nodeName === \"IFRAME\") {\n    for (const attribute of [\"name\", \"title\"]) {\n      if (element.getAttribute(attribute))\n        candidates.push({ engine: \"css\", selector: `${cssEscape(element.nodeName.toLowerCase())}[${attribute}=${quoteCSSAttributeValue(element.getAttribute(attribute))}]`, score: kIframeByAttributeScore });\n    }\n    if (element.getAttribute(options.testIdAttributeName))\n      candidates.push({ engine: \"css\", selector: `[${options.testIdAttributeName}=${quoteCSSAttributeValue(element.getAttribute(options.testIdAttributeName))}]`, score: kTestIdScore });\n    penalizeScoreForLength([candidates]);\n    return candidates;\n  }\n  if (element.getAttribute(options.testIdAttributeName))\n    candidates.push({ engine: \"internal:testid\", selector: `[${options.testIdAttributeName}=${escapeForAttributeSelector(element.getAttribute(options.testIdAttributeName), true)}]`, score: kTestIdScore });\n  if (element.nodeName === \"INPUT\" || element.nodeName === \"TEXTAREA\") {\n    const input = element;\n    if (input.placeholder) {\n      candidates.push({ engine: \"internal:attr\", selector: `[placeholder=${escapeForAttributeSelector(input.placeholder, true)}]`, score: kPlaceholderScoreExact });\n      for (const alternative of suitableTextAlternatives(input.placeholder))\n        candidates.push({ engine: \"internal:attr\", selector: `[placeholder=${escapeForAttributeSelector(alternative.text, false)}]`, score: kPlaceholderScore - alternative.scoreBouns });\n    }\n  }\n  const labels = getElementLabels(injectedScript._evaluator._cacheText, element);\n  for (const label of labels) {\n    const labelText = label.normalized;\n    candidates.push({ engine: \"internal:label\", selector: escapeForTextSelector(labelText, true), score: kLabelScoreExact });\n    for (const alternative of suitableTextAlternatives(labelText))\n      candidates.push({ engine: \"internal:label\", selector: escapeForTextSelector(alternative.text, false), score: kLabelScore - alternative.scoreBouns });\n  }\n  const ariaRole = getAriaRole(element);\n  if (ariaRole && ![\"none\", \"presentation\"].includes(ariaRole))\n    candidates.push({ engine: \"internal:role\", selector: ariaRole, score: kRoleWithoutNameScore });\n  if (element.getAttribute(\"name\") && [\"BUTTON\", \"FORM\", \"FIELDSET\", \"FRAME\", \"IFRAME\", \"INPUT\", \"KEYGEN\", \"OBJECT\", \"OUTPUT\", \"SELECT\", \"TEXTAREA\", \"MAP\", \"META\", \"PARAM\"].includes(element.nodeName))\n    candidates.push({ engine: \"css\", selector: `${cssEscape(element.nodeName.toLowerCase())}[name=${quoteCSSAttributeValue(element.getAttribute(\"name\"))}]`, score: kCSSInputTypeNameScore });\n  if ([\"INPUT\", \"TEXTAREA\"].includes(element.nodeName) && element.getAttribute(\"type\") !== \"hidden\") {\n    if (element.getAttribute(\"type\"))\n      candidates.push({ engine: \"css\", selector: `${cssEscape(element.nodeName.toLowerCase())}[type=${quoteCSSAttributeValue(element.getAttribute(\"type\"))}]`, score: kCSSInputTypeNameScore });\n  }\n  if ([\"INPUT\", \"TEXTAREA\", \"SELECT\"].includes(element.nodeName) && element.getAttribute(\"type\") !== \"hidden\")\n    candidates.push({ engine: \"css\", selector: cssEscape(element.nodeName.toLowerCase()), score: kCSSInputTypeNameScore + 1 });\n  penalizeScoreForLength([candidates]);\n  return candidates;\n}\nfunction buildTextCandidates(injectedScript, element, isTargetNode) {\n  if (element.nodeName === \"SELECT\")\n    return [];\n  const candidates = [];\n  const title = element.getAttribute(\"title\");\n  if (title) {\n    candidates.push([{ engine: \"internal:attr\", selector: `[title=${escapeForAttributeSelector(title, true)}]`, score: kTitleScoreExact }]);\n    for (const alternative of suitableTextAlternatives(title))\n      candidates.push([{ engine: \"internal:attr\", selector: `[title=${escapeForAttributeSelector(alternative.text, false)}]`, score: kTitleScore - alternative.scoreBouns }]);\n  }\n  const alt = element.getAttribute(\"alt\");\n  if (alt && [\"APPLET\", \"AREA\", \"IMG\", \"INPUT\"].includes(element.nodeName)) {\n    candidates.push([{ engine: \"internal:attr\", selector: `[alt=${escapeForAttributeSelector(alt, true)}]`, score: kAltTextScoreExact }]);\n    for (const alternative of suitableTextAlternatives(alt))\n      candidates.push([{ engine: \"internal:attr\", selector: `[alt=${escapeForAttributeSelector(alternative.text, false)}]`, score: kAltTextScore - alternative.scoreBouns }]);\n  }\n  const text = elementText(injectedScript._evaluator._cacheText, element).normalized;\n  if (text) {\n    const alternatives = suitableTextAlternatives(text);\n    if (isTargetNode) {\n      if (text.length <= 80)\n        candidates.push([{ engine: \"internal:text\", selector: escapeForTextSelector(text, true), score: kTextScoreExact }]);\n      for (const alternative of alternatives)\n        candidates.push([{ engine: \"internal:text\", selector: escapeForTextSelector(alternative.text, false), score: kTextScore - alternative.scoreBouns }]);\n    }\n    const cssToken = { engine: \"css\", selector: cssEscape(element.nodeName.toLowerCase()), score: kCSSTagNameScore };\n    for (const alternative of alternatives)\n      candidates.push([cssToken, { engine: \"internal:has-text\", selector: escapeForTextSelector(alternative.text, false), score: kTextScore - alternative.scoreBouns }]);\n    if (text.length <= 80)\n      candidates.push([cssToken, { engine: \"internal:has-text\", selector: \"/^\" + escapeRegExp(text) + \"$/\", score: kTextScoreRegex }]);\n  }\n  const ariaRole = getAriaRole(element);\n  if (ariaRole && ![\"none\", \"presentation\"].includes(ariaRole)) {\n    const ariaName = getElementAccessibleName(element, false);\n    if (ariaName) {\n      candidates.push([{ engine: \"internal:role\", selector: `${ariaRole}[name=${escapeForAttributeSelector(ariaName, true)}]`, score: kRoleWithNameScoreExact }]);\n      for (const alternative of suitableTextAlternatives(ariaName))\n        candidates.push([{ engine: \"internal:role\", selector: `${ariaRole}[name=${escapeForAttributeSelector(alternative.text, false)}]`, score: kRoleWithNameScore - alternative.scoreBouns }]);\n    }\n  }\n  penalizeScoreForLength(candidates);\n  return candidates;\n}\nfunction makeSelectorForId(id) {\n  return /^[a-zA-Z][a-zA-Z0-9\\-\\_]+$/.test(id) ? \"#\" + id : `[id=\"${cssEscape(id)}\"]`;\n}\nfunction hasCSSIdToken(tokens) {\n  return tokens.some((token) => token.engine === \"css\" && (token.selector.startsWith(\"#\") || token.selector.startsWith('[id=\"')));\n}\nfunction cssFallback(injectedScript, targetElement, options) {\n  var _a;\n  const root = (_a = options.root) != null ? _a : targetElement.ownerDocument;\n  const tokens = [];\n  function uniqueCSSSelector(prefix) {\n    const path = tokens.slice();\n    if (prefix)\n      path.unshift(prefix);\n    const selector = path.join(\" > \");\n    const parsedSelector = injectedScript.parseSelector(selector);\n    const node = injectedScript.querySelector(parsedSelector, root, false);\n    return node === targetElement ? selector : void 0;\n  }\n  function makeStrict(selector) {\n    const token = { engine: \"css\", selector, score: kCSSFallbackScore };\n    const parsedSelector = injectedScript.parseSelector(selector);\n    const elements = injectedScript.querySelectorAll(parsedSelector, root);\n    if (elements.length === 1)\n      return [token];\n    const nth = { engine: \"nth\", selector: String(elements.indexOf(targetElement)), score: kNthScore };\n    return [token, nth];\n  }\n  for (let element = targetElement; element && element !== root; element = parentElementOrShadowHost(element)) {\n    const nodeName = element.nodeName.toLowerCase();\n    let bestTokenForLevel = \"\";\n    if (element.id && !options.noCSSId) {\n      const token = makeSelectorForId(element.id);\n      const selector = uniqueCSSSelector(token);\n      if (selector)\n        return makeStrict(selector);\n      bestTokenForLevel = token;\n    }\n    const parent = element.parentNode;\n    const classes = [...element.classList];\n    for (let i = 0; i < classes.length; ++i) {\n      const token = \".\" + cssEscape(classes.slice(0, i + 1).join(\".\"));\n      const selector = uniqueCSSSelector(token);\n      if (selector)\n        return makeStrict(selector);\n      if (!bestTokenForLevel && parent) {\n        const sameClassSiblings = parent.querySelectorAll(token);\n        if (sameClassSiblings.length === 1)\n          bestTokenForLevel = token;\n      }\n    }\n    if (parent) {\n      const siblings = [...parent.children];\n      const sameTagSiblings = siblings.filter((sibling) => sibling.nodeName.toLowerCase() === nodeName);\n      const token = sameTagSiblings.indexOf(element) === 0 ? cssEscape(nodeName) : `${cssEscape(nodeName)}:nth-child(${1 + siblings.indexOf(element)})`;\n      const selector = uniqueCSSSelector(token);\n      if (selector)\n        return makeStrict(selector);\n      if (!bestTokenForLevel)\n        bestTokenForLevel = token;\n    } else if (!bestTokenForLevel) {\n      bestTokenForLevel = cssEscape(nodeName);\n    }\n    tokens.unshift(bestTokenForLevel);\n  }\n  return makeStrict(uniqueCSSSelector());\n}\nfunction penalizeScoreForLength(groups) {\n  for (const group of groups) {\n    for (const token of group) {\n      if (token.score > kBeginPenalizedScore && token.score < kEndPenalizedScore)\n        token.score += Math.min(kTextScoreRange, token.selector.length / 10 | 0);\n    }\n  }\n}\nfunction joinTokens(tokens) {\n  const parts = [];\n  let lastEngine = \"\";\n  for (const { engine, selector } of tokens) {\n    if (parts.length && (lastEngine !== \"css\" || engine !== \"css\" || selector.startsWith(\":nth-match(\")))\n      parts.push(\">>\");\n    lastEngine = engine;\n    if (engine === \"css\")\n      parts.push(selector);\n    else\n      parts.push(`${engine}=${selector}`);\n  }\n  return parts.join(\" \");\n}\nfunction combineScores(tokens) {\n  let score = 0;\n  for (let i = 0; i < tokens.length; i++)\n    score += tokens[i].score * (tokens.length - i);\n  return score;\n}\nfunction chooseFirstSelector(injectedScript, scope, targetElement, selectors, allowNthMatch) {\n  const joined = selectors.map((tokens) => ({ tokens, score: combineScores(tokens) }));\n  joined.sort((a, b) => a.score - b.score);\n  let bestWithIndex = null;\n  for (const { tokens } of joined) {\n    const parsedSelector = injectedScript.parseSelector(joinTokens(tokens));\n    const result = injectedScript.querySelectorAll(parsedSelector, scope);\n    if (result[0] === targetElement && result.length === 1) {\n      return tokens;\n    }\n    const index = result.indexOf(targetElement);\n    if (!allowNthMatch || bestWithIndex || index === -1 || result.length > 5)\n      continue;\n    const nth = { engine: \"nth\", selector: String(index), score: kNthScore };\n    bestWithIndex = [...tokens, nth];\n  }\n  return bestWithIndex;\n}\nfunction isGuidLike(id) {\n  let lastCharacterType;\n  let transitionCount = 0;\n  for (let i = 0; i < id.length; ++i) {\n    const c = id[i];\n    let characterType;\n    if (c === \"-\" || c === \"_\")\n      continue;\n    if (c >= \"a\" && c <= \"z\")\n      characterType = \"lower\";\n    else if (c >= \"A\" && c <= \"Z\")\n      characterType = \"upper\";\n    else if (c >= \"0\" && c <= \"9\")\n      characterType = \"digit\";\n    else\n      characterType = \"other\";\n    if (characterType === \"lower\" && lastCharacterType === \"upper\") {\n      lastCharacterType = characterType;\n      continue;\n    }\n    if (lastCharacterType && lastCharacterType !== characterType)\n      ++transitionCount;\n    lastCharacterType = characterType;\n  }\n  return transitionCount >= id.length / 4;\n}\nfunction trimWordBoundary(text, maxLength) {\n  if (text.length <= maxLength)\n    return text;\n  text = text.substring(0, maxLength);\n  const match = text.match(/^(.*)\\b(.+?)$/);\n  if (!match)\n    return \"\";\n  return match[1].trimEnd();\n}\nfunction suitableTextAlternatives(text) {\n  let result = [];\n  {\n    const match = text.match(/^([\\d.,]+)[^.,\\w]/);\n    const leadingNumberLength = match ? match[1].length : 0;\n    if (leadingNumberLength) {\n      const alt = text.substring(leadingNumberLength).trimStart();\n      result.push({ text: alt, scoreBouns: alt.length <= 30 ? 2 : 1 });\n    }\n  }\n  {\n    const match = text.match(/[^.,\\w]([\\d.,]+)$/);\n    const trailingNumberLength = match ? match[1].length : 0;\n    if (trailingNumberLength) {\n      const alt = text.substring(0, text.length - trailingNumberLength).trimEnd();\n      result.push({ text: alt, scoreBouns: alt.length <= 30 ? 2 : 1 });\n    }\n  }\n  if (text.length <= 30) {\n    result.push({ text, scoreBouns: 0 });\n  } else {\n    result.push({ text: trimWordBoundary(text, 80), scoreBouns: 0 });\n    result.push({ text: trimWordBoundary(text, 30), scoreBouns: 1 });\n  }\n  result = result.filter((r) => r.text);\n  if (!result.length)\n    result.push({ text: text.substring(0, 80), scoreBouns: 0 });\n  return result;\n}\n\n// packages/playwright-core/src/utils/isomorphic/locatorGenerators.ts\nfunction asLocator(lang, selector, isFrameLocator = false) {\n  return asLocators(lang, selector, isFrameLocator)[0];\n}\nfunction asLocators(lang, selector, isFrameLocator = false, maxOutputSize = 20, preferredQuote) {\n  try {\n    return innerAsLocators(new generators[lang](preferredQuote), parseSelector(selector), isFrameLocator, maxOutputSize);\n  } catch (e) {\n    return [selector];\n  }\n}\nfunction innerAsLocators(factory, parsed, isFrameLocator = false, maxOutputSize = 20) {\n  const parts = [...parsed.parts];\n  for (let index = 0; index < parts.length - 1; index++) {\n    if (parts[index].name === \"nth\" && parts[index + 1].name === \"internal:control\" && parts[index + 1].body === \"enter-frame\") {\n      const [nth] = parts.splice(index, 1);\n      parts.splice(index + 1, 0, nth);\n    }\n  }\n  const tokens = [];\n  let nextBase = isFrameLocator ? \"frame-locator\" : \"page\";\n  for (let index = 0; index < parts.length; index++) {\n    const part = parts[index];\n    const base = nextBase;\n    nextBase = \"locator\";\n    if (part.name === \"nth\") {\n      if (part.body === \"0\")\n        tokens.push([factory.generateLocator(base, \"first\", \"\"), factory.generateLocator(base, \"nth\", \"0\")]);\n      else if (part.body === \"-1\")\n        tokens.push([factory.generateLocator(base, \"last\", \"\"), factory.generateLocator(base, \"nth\", \"-1\")]);\n      else\n        tokens.push([factory.generateLocator(base, \"nth\", part.body)]);\n      continue;\n    }\n    if (part.name === \"internal:text\") {\n      const { exact, text } = detectExact(part.body);\n      tokens.push([factory.generateLocator(base, \"text\", text, { exact })]);\n      continue;\n    }\n    if (part.name === \"internal:has-text\") {\n      const { exact, text } = detectExact(part.body);\n      if (!exact) {\n        tokens.push([factory.generateLocator(base, \"has-text\", text, { exact })]);\n        continue;\n      }\n    }\n    if (part.name === \"internal:has-not-text\") {\n      const { exact, text } = detectExact(part.body);\n      if (!exact) {\n        tokens.push([factory.generateLocator(base, \"has-not-text\", text, { exact })]);\n        continue;\n      }\n    }\n    if (part.name === \"internal:has\") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, \"has\", inner)));\n      continue;\n    }\n    if (part.name === \"internal:has-not\") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, \"hasNot\", inner)));\n      continue;\n    }\n    if (part.name === \"internal:and\") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, \"and\", inner)));\n      continue;\n    }\n    if (part.name === \"internal:or\") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, \"or\", inner)));\n      continue;\n    }\n    if (part.name === \"internal:chain\") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, \"chain\", inner)));\n      continue;\n    }\n    if (part.name === \"internal:label\") {\n      const { exact, text } = detectExact(part.body);\n      tokens.push([factory.generateLocator(base, \"label\", text, { exact })]);\n      continue;\n    }\n    if (part.name === \"internal:role\") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const options = { attrs: [] };\n      for (const attr of attrSelector.attributes) {\n        if (attr.name === \"name\") {\n          options.exact = attr.caseSensitive;\n          options.name = attr.value;\n        } else {\n          if (attr.name === \"level\" && typeof attr.value === \"string\")\n            attr.value = +attr.value;\n          options.attrs.push({ name: attr.name === \"include-hidden\" ? \"includeHidden\" : attr.name, value: attr.value });\n        }\n      }\n      tokens.push([factory.generateLocator(base, \"role\", attrSelector.name, options)]);\n      continue;\n    }\n    if (part.name === \"internal:testid\") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const { value } = attrSelector.attributes[0];\n      tokens.push([factory.generateLocator(base, \"test-id\", value)]);\n      continue;\n    }\n    if (part.name === \"internal:attr\") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const { name, value, caseSensitive } = attrSelector.attributes[0];\n      const text = value;\n      const exact = !!caseSensitive;\n      if (name === \"placeholder\") {\n        tokens.push([factory.generateLocator(base, \"placeholder\", text, { exact })]);\n        continue;\n      }\n      if (name === \"alt\") {\n        tokens.push([factory.generateLocator(base, \"alt\", text, { exact })]);\n        continue;\n      }\n      if (name === \"title\") {\n        tokens.push([factory.generateLocator(base, \"title\", text, { exact })]);\n        continue;\n      }\n    }\n    let locatorType = \"default\";\n    const nextPart = parts[index + 1];\n    if (nextPart && nextPart.name === \"internal:control\" && nextPart.body === \"enter-frame\") {\n      locatorType = \"frame\";\n      nextBase = \"frame-locator\";\n      index++;\n    }\n    const selectorPart = stringifySelector({ parts: [part] });\n    const locatorPart = factory.generateLocator(base, locatorType, selectorPart);\n    if (locatorType === \"default\" && nextPart && [\"internal:has-text\", \"internal:has-not-text\"].includes(nextPart.name)) {\n      const { exact, text } = detectExact(nextPart.body);\n      if (!exact) {\n        const nextLocatorPart = factory.generateLocator(\"locator\", nextPart.name === \"internal:has-text\" ? \"has-text\" : \"has-not-text\", text, { exact });\n        const options = {};\n        if (nextPart.name === \"internal:has-text\")\n          options.hasText = text;\n        else\n          options.hasNotText = text;\n        const combinedPart = factory.generateLocator(base, \"default\", selectorPart, options);\n        tokens.push([factory.chainLocators([locatorPart, nextLocatorPart]), combinedPart]);\n        index++;\n        continue;\n      }\n    }\n    let locatorPartWithEngine;\n    if ([\"xpath\", \"css\"].includes(part.name)) {\n      const selectorPart2 = stringifySelector(\n        { parts: [part] },\n        /* forceEngineName */\n        true\n      );\n      locatorPartWithEngine = factory.generateLocator(base, locatorType, selectorPart2);\n    }\n    tokens.push([locatorPart, locatorPartWithEngine].filter(Boolean));\n  }\n  return combineTokens(factory, tokens, maxOutputSize);\n}\nfunction combineTokens(factory, tokens, maxOutputSize) {\n  const currentTokens = tokens.map(() => \"\");\n  const result = [];\n  const visit = (index) => {\n    if (index === tokens.length) {\n      result.push(factory.chainLocators(currentTokens));\n      return currentTokens.length < maxOutputSize;\n    }\n    for (const taken of tokens[index]) {\n      currentTokens[index] = taken;\n      if (!visit(index + 1))\n        return false;\n    }\n    return true;\n  };\n  visit(0);\n  return result;\n}\nfunction detectExact(text) {\n  let exact = false;\n  const match = text.match(/^\\/(.*)\\/([igm]*)$/);\n  if (match)\n    return { text: new RegExp(match[1], match[2]) };\n  if (text.endsWith('\"')) {\n    text = JSON.parse(text);\n    exact = true;\n  } else if (text.endsWith('\"s')) {\n    text = JSON.parse(text.substring(0, text.length - 1));\n    exact = true;\n  } else if (text.endsWith('\"i')) {\n    text = JSON.parse(text.substring(0, text.length - 1));\n    exact = false;\n  }\n  return { exact, text };\n}\nvar JavaScriptLocatorFactory = class {\n  constructor(preferredQuote) {\n    this.preferredQuote = preferredQuote;\n  }\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case \"default\":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, { hasText: ${this.toHasText(options.hasText)} })`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, { hasNotText: ${this.toHasText(options.hasNotText)} })`;\n        return `locator(${this.quote(body)})`;\n      case \"frame\":\n        return `frameLocator(${this.quote(body)})`;\n      case \"nth\":\n        return `nth(${body})`;\n      case \"first\":\n        return `first()`;\n      case \"last\":\n        return `last()`;\n      case \"role\":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`name: ${this.regexToSourceString(options.name)}`);\n        } else if (typeof options.name === \"string\") {\n          attrs.push(`name: ${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`exact: true`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`${name}: ${typeof value === \"string\" ? this.quote(value) : value}`);\n        const attrString = attrs.length ? `, { ${attrs.join(\", \")} }` : \"\";\n        return `getByRole(${this.quote(body)}${attrString})`;\n      case \"has-text\":\n        return `filter({ hasText: ${this.toHasText(body)} })`;\n      case \"has-not-text\":\n        return `filter({ hasNotText: ${this.toHasText(body)} })`;\n      case \"has\":\n        return `filter({ has: ${body} })`;\n      case \"hasNot\":\n        return `filter({ hasNot: ${body} })`;\n      case \"and\":\n        return `and(${body})`;\n      case \"or\":\n        return `or(${body})`;\n      case \"chain\":\n        return `locator(${body})`;\n      case \"test-id\":\n        return `getByTestId(${this.toTestIdValue(body)})`;\n      case \"text\":\n        return this.toCallWithExact(\"getByText\", body, !!options.exact);\n      case \"alt\":\n        return this.toCallWithExact(\"getByAltText\", body, !!options.exact);\n      case \"placeholder\":\n        return this.toCallWithExact(\"getByPlaceholder\", body, !!options.exact);\n      case \"label\":\n        return this.toCallWithExact(\"getByLabel\", body, !!options.exact);\n      case \"title\":\n        return this.toCallWithExact(\"getByTitle\", body, !!options.exact);\n      default:\n        throw new Error(\"Unknown selector kind \" + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(\".\");\n  }\n  regexToSourceString(re) {\n    return normalizeEscapedRegexQuotes(String(re));\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToSourceString(body)})`;\n    return exact ? `${method}(${this.quote(body)}, { exact: true })` : `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToSourceString(body);\n    return this.quote(body);\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToSourceString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    var _a;\n    return escapeWithQuotes(text, (_a = this.preferredQuote) != null ? _a : \"'\");\n  }\n};\nvar PythonLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case \"default\":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, has_text=${this.toHasText(options.hasText)})`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, has_not_text=${this.toHasText(options.hasNotText)})`;\n        return `locator(${this.quote(body)})`;\n      case \"frame\":\n        return `frame_locator(${this.quote(body)})`;\n      case \"nth\":\n        return `nth(${body})`;\n      case \"first\":\n        return `first`;\n      case \"last\":\n        return `last`;\n      case \"role\":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`name=${this.regexToString(options.name)}`);\n        } else if (typeof options.name === \"string\") {\n          attrs.push(`name=${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`exact=True`);\n        }\n        for (const { name, value } of options.attrs) {\n          let valueString = typeof value === \"string\" ? this.quote(value) : value;\n          if (typeof value === \"boolean\")\n            valueString = value ? \"True\" : \"False\";\n          attrs.push(`${toSnakeCase(name)}=${valueString}`);\n        }\n        const attrString = attrs.length ? `, ${attrs.join(\", \")}` : \"\";\n        return `get_by_role(${this.quote(body)}${attrString})`;\n      case \"has-text\":\n        return `filter(has_text=${this.toHasText(body)})`;\n      case \"has-not-text\":\n        return `filter(has_not_text=${this.toHasText(body)})`;\n      case \"has\":\n        return `filter(has=${body})`;\n      case \"hasNot\":\n        return `filter(has_not=${body})`;\n      case \"and\":\n        return `and_(${body})`;\n      case \"or\":\n        return `or_(${body})`;\n      case \"chain\":\n        return `locator(${body})`;\n      case \"test-id\":\n        return `get_by_test_id(${this.toTestIdValue(body)})`;\n      case \"text\":\n        return this.toCallWithExact(\"get_by_text\", body, !!options.exact);\n      case \"alt\":\n        return this.toCallWithExact(\"get_by_alt_text\", body, !!options.exact);\n      case \"placeholder\":\n        return this.toCallWithExact(\"get_by_placeholder\", body, !!options.exact);\n      case \"label\":\n        return this.toCallWithExact(\"get_by_label\", body, !!options.exact);\n      case \"title\":\n        return this.toCallWithExact(\"get_by_title\", body, !!options.exact);\n      default:\n        throw new Error(\"Unknown selector kind \" + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(\".\");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes(\"i\") ? \", re.IGNORECASE\" : \"\";\n    return `re.compile(r\"${normalizeEscapedRegexQuotes(body.source).replace(/\\\\\\//, \"/\").replace(/\"/g, '\\\\\"')}\"${suffix})`;\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, exact=True)`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToString(body);\n    return `${this.quote(body)}`;\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    return escapeWithQuotes(text, '\"');\n  }\n};\nvar JavaLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    let clazz;\n    switch (base) {\n      case \"page\":\n        clazz = \"Page\";\n        break;\n      case \"frame-locator\":\n        clazz = \"FrameLocator\";\n        break;\n      case \"locator\":\n        clazz = \"Locator\";\n        break;\n    }\n    switch (kind) {\n      case \"default\":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasText(${this.toHasText(options.hasText)}))`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasNotText(${this.toHasText(options.hasNotText)}))`;\n        return `locator(${this.quote(body)})`;\n      case \"frame\":\n        return `frameLocator(${this.quote(body)})`;\n      case \"nth\":\n        return `nth(${body})`;\n      case \"first\":\n        return `first()`;\n      case \"last\":\n        return `last()`;\n      case \"role\":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`.setName(${this.regexToString(options.name)})`);\n        } else if (typeof options.name === \"string\") {\n          attrs.push(`.setName(${this.quote(options.name)})`);\n          if (options.exact)\n            attrs.push(`.setExact(true)`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`.set${toTitleCase(name)}(${typeof value === \"string\" ? this.quote(value) : value})`);\n        const attrString = attrs.length ? `, new ${clazz}.GetByRoleOptions()${attrs.join(\"\")}` : \"\";\n        return `getByRole(AriaRole.${toSnakeCase(body).toUpperCase()}${attrString})`;\n      case \"has-text\":\n        return `filter(new ${clazz}.FilterOptions().setHasText(${this.toHasText(body)}))`;\n      case \"has-not-text\":\n        return `filter(new ${clazz}.FilterOptions().setHasNotText(${this.toHasText(body)}))`;\n      case \"has\":\n        return `filter(new ${clazz}.FilterOptions().setHas(${body}))`;\n      case \"hasNot\":\n        return `filter(new ${clazz}.FilterOptions().setHasNot(${body}))`;\n      case \"and\":\n        return `and(${body})`;\n      case \"or\":\n        return `or(${body})`;\n      case \"chain\":\n        return `locator(${body})`;\n      case \"test-id\":\n        return `getByTestId(${this.toTestIdValue(body)})`;\n      case \"text\":\n        return this.toCallWithExact(clazz, \"getByText\", body, !!options.exact);\n      case \"alt\":\n        return this.toCallWithExact(clazz, \"getByAltText\", body, !!options.exact);\n      case \"placeholder\":\n        return this.toCallWithExact(clazz, \"getByPlaceholder\", body, !!options.exact);\n      case \"label\":\n        return this.toCallWithExact(clazz, \"getByLabel\", body, !!options.exact);\n      case \"title\":\n        return this.toCallWithExact(clazz, \"getByTitle\", body, !!options.exact);\n      default:\n        throw new Error(\"Unknown selector kind \" + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(\".\");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes(\"i\") ? \", Pattern.CASE_INSENSITIVE\" : \"\";\n    return `Pattern.compile(${this.quote(normalizeEscapedRegexQuotes(body.source))}${suffix})`;\n  }\n  toCallWithExact(clazz, method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, new ${clazz}.${toTitleCase(method)}Options().setExact(true))`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToString(body);\n    return this.quote(body);\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    return escapeWithQuotes(text, '\"');\n  }\n};\nvar CSharpLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case \"default\":\n        if (options.hasText !== void 0)\n          return `Locator(${this.quote(body)}, new() { ${this.toHasText(options.hasText)} })`;\n        if (options.hasNotText !== void 0)\n          return `Locator(${this.quote(body)}, new() { ${this.toHasNotText(options.hasNotText)} })`;\n        return `Locator(${this.quote(body)})`;\n      case \"frame\":\n        return `FrameLocator(${this.quote(body)})`;\n      case \"nth\":\n        return `Nth(${body})`;\n      case \"first\":\n        return `First`;\n      case \"last\":\n        return `Last`;\n      case \"role\":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`NameRegex = ${this.regexToString(options.name)}`);\n        } else if (typeof options.name === \"string\") {\n          attrs.push(`Name = ${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`Exact = true`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`${toTitleCase(name)} = ${typeof value === \"string\" ? this.quote(value) : value}`);\n        const attrString = attrs.length ? `, new() { ${attrs.join(\", \")} }` : \"\";\n        return `GetByRole(AriaRole.${toTitleCase(body)}${attrString})`;\n      case \"has-text\":\n        return `Filter(new() { ${this.toHasText(body)} })`;\n      case \"has-not-text\":\n        return `Filter(new() { ${this.toHasNotText(body)} })`;\n      case \"has\":\n        return `Filter(new() { Has = ${body} })`;\n      case \"hasNot\":\n        return `Filter(new() { HasNot = ${body} })`;\n      case \"and\":\n        return `And(${body})`;\n      case \"or\":\n        return `Or(${body})`;\n      case \"chain\":\n        return `Locator(${body})`;\n      case \"test-id\":\n        return `GetByTestId(${this.toTestIdValue(body)})`;\n      case \"text\":\n        return this.toCallWithExact(\"GetByText\", body, !!options.exact);\n      case \"alt\":\n        return this.toCallWithExact(\"GetByAltText\", body, !!options.exact);\n      case \"placeholder\":\n        return this.toCallWithExact(\"GetByPlaceholder\", body, !!options.exact);\n      case \"label\":\n        return this.toCallWithExact(\"GetByLabel\", body, !!options.exact);\n      case \"title\":\n        return this.toCallWithExact(\"GetByTitle\", body, !!options.exact);\n      default:\n        throw new Error(\"Unknown selector kind \" + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(\".\");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes(\"i\") ? \", RegexOptions.IgnoreCase\" : \"\";\n    return `new Regex(${this.quote(normalizeEscapedRegexQuotes(body.source))}${suffix})`;\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, new() { Exact = true })`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return `HasTextRegex = ${this.regexToString(body)}`;\n    return `HasText = ${this.quote(body)}`;\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  toHasNotText(body) {\n    if (isRegExp(body))\n      return `HasNotTextRegex = ${this.regexToString(body)}`;\n    return `HasNotText = ${this.quote(body)}`;\n  }\n  quote(text) {\n    return escapeWithQuotes(text, '\"');\n  }\n};\nvar JsonlLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    return JSON.stringify({\n      kind,\n      body,\n      options\n    });\n  }\n  chainLocators(locators) {\n    const objects = locators.map((l) => JSON.parse(l));\n    for (let i = 0; i < objects.length - 1; ++i)\n      objects[i].next = objects[i + 1];\n    return JSON.stringify(objects[0]);\n  }\n};\nvar generators = {\n  javascript: JavaScriptLocatorFactory,\n  python: PythonLocatorFactory,\n  java: JavaLocatorFactory,\n  csharp: CSharpLocatorFactory,\n  jsonl: JsonlLocatorFactory\n};\nfunction isRegExp(obj) {\n  return obj instanceof RegExp;\n}\n\n// packages/playwright-core/src/server/injected/highlight.css?inline\nvar highlight_default = \":host{font-size:13px;font-family:system-ui,Ubuntu,Droid Sans,sans-serif;color:#333}svg{position:absolute;height:0}x-pw-tooltip{backdrop-filter:blur(5px);background-color:#fff;border-radius:6px;box-shadow:0 .5rem 1.2rem #0000004d;display:none;font-size:12.8px;font-weight:400;left:0;line-height:1.5;max-width:600px;position:absolute;top:0;padding:0;flex-direction:column;overflow:hidden}x-pw-tooltip-line{display:flex;max-width:600px;padding:6px;user-select:none;cursor:pointer}x-pw-tooltip-line.selectable:hover{background-color:#f2f2f2;overflow:hidden}x-pw-tooltip-footer{display:flex;max-width:600px;padding:6px;user-select:none;color:#777}x-pw-dialog{background-color:#fff;pointer-events:auto;border-radius:6px;box-shadow:0 .5rem 1.2rem #0000004d;display:flex;flex-direction:column;position:absolute;width:400px;height:150px;z-index:10;font-size:13px}x-pw-dialog-body{display:flex;flex-direction:column;flex:auto}x-pw-dialog-body label{margin:5px 8px;display:flex;flex-direction:row;align-items:center}x-pw-highlight{position:absolute;top:0;left:0;width:0;height:0}x-pw-action-point{position:absolute;width:20px;height:20px;background:red;border-radius:10px;margin:-10px 0 0 -10px;z-index:2}x-pw-separator{height:1px;margin:6px 9px;background:rgb(148 148 148 / 90%)}x-pw-tool-gripper{height:28px;width:24px;margin:2px 0;cursor:grab}x-pw-tool-gripper:active{cursor:grabbing}x-pw-tool-gripper>x-div{width:16px;height:16px;margin:6px 4px;clip-path:url(#icon-gripper);background-color:#555}x-pw-tools-list>label{display:flex;align-items:center;margin:0 10px;user-select:none}x-pw-tools-list{display:flex;width:100%;border-bottom:1px solid #dddddd}x-pw-tool-item{pointer-events:auto;cursor:pointer;height:28px;width:28px;border-radius:3px}x-pw-tool-item:not(.disabled):hover{background-color:#dbdbdb}x-pw-tool-item.active{background-color:#8acae480}x-pw-tool-item.active:not(.disabled):hover{background-color:#8acae4c4}x-pw-tool-item>x-div{width:16px;height:16px;margin:6px;background-color:#3a3a3a}x-pw-tool-item.disabled>x-div{background-color:#61616180;cursor:default}x-pw-tool-item.record.active{background-color:transparent}x-pw-tool-item.record.active:hover{background-color:#dbdbdb}x-pw-tool-item.record.active>x-div{background-color:#a1260d}x-pw-tool-item.accept>x-div{background-color:#388a34}x-pw-tool-item.record>x-div{clip-path:url(#icon-circle-large-filled)}x-pw-tool-item.pick-locator>x-div{clip-path:url(#icon-inspect)}x-pw-tool-item.text>x-div{clip-path:url(#icon-whole-word)}x-pw-tool-item.visibility>x-div{clip-path:url(#icon-eye)}x-pw-tool-item.value>x-div{clip-path:url(#icon-symbol-constant)}x-pw-tool-item.accept>x-div{clip-path:url(#icon-check)}x-pw-tool-item.cancel>x-div{clip-path:url(#icon-close)}x-pw-tool-item.succeeded>x-div{clip-path:url(#icon-pass);background-color:#388a34!important}x-pw-overlay{position:absolute;top:0;max-width:min-content;z-index:2147483647;background:transparent;pointer-events:auto}x-pw-overlay x-pw-tools-list{background-color:#fffd;box-shadow:#0000001a 0 5px 5px;border-radius:3px;border-bottom:none}x-pw-overlay x-pw-tool-item{margin:2px}textarea.text-editor{font-family:system-ui,Ubuntu,Droid Sans,sans-serif;flex:auto;border:none;margin:6px 10px;color:#333;outline:1px solid transparent!important;resize:none;padding:0;font-size:13px}textarea.text-editor.does-not-match{outline:1px solid red!important}x-div{display:block}x-spacer{flex:auto}*{box-sizing:border-box}*[hidden]{display:none!important}x-locator-editor{flex:none;width:100%;height:60px;padding:4px;border-bottom:1px solid #dddddd;outline:1px solid transparent}x-locator-editor.does-not-match{outline:1px solid red}.CodeMirror{width:100%!important;height:100%!important}\\n\";\n\n// packages/playwright-core/src/server/injected/highlight.ts\nvar Highlight = class {\n  constructor(injectedScript) {\n    this._highlightEntries = [];\n    this._highlightOptions = {};\n    this._language = \"javascript\";\n    this._injectedScript = injectedScript;\n    const document = injectedScript.document;\n    this._isUnderTest = injectedScript.isUnderTest;\n    this._glassPaneElement = document.createElement(\"x-pw-glass\");\n    this._glassPaneElement.style.position = \"fixed\";\n    this._glassPaneElement.style.top = \"0\";\n    this._glassPaneElement.style.right = \"0\";\n    this._glassPaneElement.style.bottom = \"0\";\n    this._glassPaneElement.style.left = \"0\";\n    this._glassPaneElement.style.zIndex = \"2147483646\";\n    this._glassPaneElement.style.pointerEvents = \"none\";\n    this._glassPaneElement.style.display = \"flex\";\n    this._glassPaneElement.style.backgroundColor = \"transparent\";\n    for (const eventName of [\"click\", \"auxclick\", \"dragstart\", \"input\", \"keydown\", \"keyup\", \"pointerdown\", \"pointerup\", \"mousedown\", \"mouseup\", \"mouseleave\", \"focus\", \"scroll\"]) {\n      this._glassPaneElement.addEventListener(eventName, (e) => {\n        e.stopPropagation();\n        e.stopImmediatePropagation();\n        if (e.type === \"click\" && e.button === 0 && this._highlightOptions.tooltipListItemSelected)\n          this._highlightOptions.tooltipListItemSelected(void 0);\n      });\n    }\n    this._actionPointElement = document.createElement(\"x-pw-action-point\");\n    this._actionPointElement.setAttribute(\"hidden\", \"true\");\n    this._glassPaneShadow = this._glassPaneElement.attachShadow({ mode: this._isUnderTest ? \"open\" : \"closed\" });\n    if (typeof this._glassPaneShadow.adoptedStyleSheets.push === \"function\") {\n      const sheet = new this._injectedScript.window.CSSStyleSheet();\n      sheet.replaceSync(highlight_default);\n      this._glassPaneShadow.adoptedStyleSheets.push(sheet);\n    } else {\n      const styleElement = this._injectedScript.document.createElement(\"style\");\n      styleElement.textContent = highlight_default;\n      this._glassPaneShadow.appendChild(styleElement);\n    }\n    this._glassPaneShadow.appendChild(this._actionPointElement);\n  }\n  install() {\n    this._injectedScript.document.documentElement.appendChild(this._glassPaneElement);\n  }\n  setLanguage(language) {\n    this._language = language;\n  }\n  runHighlightOnRaf(selector) {\n    if (this._rafRequest)\n      cancelAnimationFrame(this._rafRequest);\n    this.updateHighlight(this._injectedScript.querySelectorAll(selector, this._injectedScript.document.documentElement), { tooltipText: asLocator(this._language, stringifySelector(selector)) });\n    this._rafRequest = requestAnimationFrame(() => this.runHighlightOnRaf(selector));\n  }\n  uninstall() {\n    if (this._rafRequest)\n      cancelAnimationFrame(this._rafRequest);\n    this._glassPaneElement.remove();\n  }\n  showActionPoint(x, y) {\n    this._actionPointElement.style.top = y + \"px\";\n    this._actionPointElement.style.left = x + \"px\";\n    this._actionPointElement.hidden = false;\n  }\n  hideActionPoint() {\n    this._actionPointElement.hidden = true;\n  }\n  clearHighlight() {\n    var _a, _b;\n    for (const entry of this._highlightEntries) {\n      (_a = entry.highlightElement) == null ? void 0 : _a.remove();\n      (_b = entry.tooltipElement) == null ? void 0 : _b.remove();\n    }\n    this._highlightEntries = [];\n    this._highlightOptions = {};\n    this._glassPaneElement.style.pointerEvents = \"none\";\n  }\n  updateHighlight(elements, options) {\n    this._innerUpdateHighlight(elements, options);\n  }\n  maskElements(elements, color) {\n    this._innerUpdateHighlight(elements, { color });\n  }\n  _innerUpdateHighlight(elements, options) {\n    let color = options.color;\n    if (!color)\n      color = elements.length > 1 ? \"#f6b26b7f\" : \"#6fa8dc7f\";\n    if (this._highlightIsUpToDate(elements, options))\n      return;\n    this.clearHighlight();\n    this._highlightOptions = options;\n    this._glassPaneElement.style.pointerEvents = options.tooltipListItemSelected ? \"initial\" : \"none\";\n    for (let i = 0; i < elements.length; ++i) {\n      const highlightElement = this._createHighlightElement();\n      this._glassPaneShadow.appendChild(highlightElement);\n      let tooltipElement;\n      if (options.tooltipList || options.tooltipText || options.tooltipFooter) {\n        tooltipElement = this._injectedScript.document.createElement(\"x-pw-tooltip\");\n        this._glassPaneShadow.appendChild(tooltipElement);\n        tooltipElement.style.top = \"0\";\n        tooltipElement.style.left = \"0\";\n        tooltipElement.style.display = \"flex\";\n        let lines = [];\n        if (options.tooltipList) {\n          lines = options.tooltipList;\n        } else if (options.tooltipText) {\n          const suffix = elements.length > 1 ? ` [${i + 1} of ${elements.length}]` : \"\";\n          lines = [options.tooltipText + suffix];\n        }\n        for (let index = 0; index < lines.length; index++) {\n          const element = this._injectedScript.document.createElement(\"x-pw-tooltip-line\");\n          element.textContent = lines[index];\n          tooltipElement.appendChild(element);\n          if (options.tooltipListItemSelected) {\n            element.classList.add(\"selectable\");\n            element.addEventListener(\"click\", () => {\n              var _a;\n              return (_a = options.tooltipListItemSelected) == null ? void 0 : _a.call(options, index);\n            });\n          }\n        }\n        if (options.tooltipFooter) {\n          const footer = this._injectedScript.document.createElement(\"x-pw-tooltip-footer\");\n          footer.textContent = options.tooltipFooter;\n          tooltipElement.appendChild(footer);\n        }\n      }\n      this._highlightEntries.push({ targetElement: elements[i], tooltipElement, highlightElement });\n    }\n    for (const entry of this._highlightEntries) {\n      entry.box = entry.targetElement.getBoundingClientRect();\n      if (!entry.tooltipElement)\n        continue;\n      const { anchorLeft, anchorTop } = this.tooltipPosition(entry.box, entry.tooltipElement);\n      entry.tooltipTop = anchorTop;\n      entry.tooltipLeft = anchorLeft;\n    }\n    for (const entry of this._highlightEntries) {\n      if (entry.tooltipElement) {\n        entry.tooltipElement.style.top = entry.tooltipTop + \"px\";\n        entry.tooltipElement.style.left = entry.tooltipLeft + \"px\";\n      }\n      const box = entry.box;\n      entry.highlightElement.style.backgroundColor = color;\n      entry.highlightElement.style.left = box.x + \"px\";\n      entry.highlightElement.style.top = box.y + \"px\";\n      entry.highlightElement.style.width = box.width + \"px\";\n      entry.highlightElement.style.height = box.height + \"px\";\n      entry.highlightElement.style.display = \"block\";\n      if (this._isUnderTest)\n        console.error(\"Highlight box for test: \" + JSON.stringify({ x: box.x, y: box.y, width: box.width, height: box.height }));\n    }\n  }\n  firstBox() {\n    var _a;\n    return (_a = this._highlightEntries[0]) == null ? void 0 : _a.box;\n  }\n  tooltipPosition(box, tooltipElement) {\n    const tooltipWidth = tooltipElement.offsetWidth;\n    const tooltipHeight = tooltipElement.offsetHeight;\n    const totalWidth = this._glassPaneElement.offsetWidth;\n    const totalHeight = this._glassPaneElement.offsetHeight;\n    let anchorLeft = box.left;\n    if (anchorLeft + tooltipWidth > totalWidth - 5)\n      anchorLeft = totalWidth - tooltipWidth - 5;\n    let anchorTop = box.bottom + 5;\n    if (anchorTop + tooltipHeight > totalHeight - 5) {\n      if (box.top > tooltipHeight + 5) {\n        anchorTop = box.top - tooltipHeight - 5;\n      } else {\n        anchorTop = totalHeight - 5 - tooltipHeight;\n      }\n    }\n    return { anchorLeft, anchorTop };\n  }\n  _highlightIsUpToDate(elements, options) {\n    var _a, _b;\n    if (options.tooltipText !== this._highlightOptions.tooltipText)\n      return false;\n    if (options.tooltipListItemSelected !== this._highlightOptions.tooltipListItemSelected)\n      return false;\n    if (options.tooltipFooter !== this._highlightOptions.tooltipFooter)\n      return false;\n    if (((_a = options.tooltipList) == null ? void 0 : _a.length) !== ((_b = this._highlightOptions.tooltipList) == null ? void 0 : _b.length))\n      return false;\n    if (options.tooltipList && this._highlightOptions.tooltipList) {\n      for (let i = 0; i < options.tooltipList.length; i++) {\n        if (options.tooltipList[i] !== this._highlightOptions.tooltipList[i])\n          return false;\n      }\n    }\n    if (elements.length !== this._highlightEntries.length)\n      return false;\n    for (let i = 0; i < this._highlightEntries.length; ++i) {\n      if (elements[i] !== this._highlightEntries[i].targetElement)\n        return false;\n      const oldBox = this._highlightEntries[i].box;\n      if (!oldBox)\n        return false;\n      const box = elements[i].getBoundingClientRect();\n      if (box.top !== oldBox.top || box.right !== oldBox.right || box.bottom !== oldBox.bottom || box.left !== oldBox.left)\n        return false;\n    }\n    return true;\n  }\n  _createHighlightElement() {\n    return this._injectedScript.document.createElement(\"x-pw-highlight\");\n  }\n  appendChild(element) {\n    this._glassPaneShadow.appendChild(element);\n  }\n};\n\n// packages/playwright-core/src/server/injected/injectedScript.ts\nvar InjectedScript = class {\n  // eslint-disable-next-line no-restricted-globals\n  constructor(window, isUnderTest, sdkLanguage, testIdAttributeNameForStrictErrorAndConsoleCodegen, stableRafCount, browserName, customEngines) {\n    this.onGlobalListenersRemoved = /* @__PURE__ */ new Set();\n    this._testIdAttributeNameForStrictErrorAndConsoleCodegen = \"data-testid\";\n    this.utils = { isInsideScope, elementText, asLocator, normalizeWhiteSpace };\n    this.window = window;\n    this.document = window.document;\n    this.isUnderTest = isUnderTest;\n    this._sdkLanguage = sdkLanguage;\n    this._testIdAttributeNameForStrictErrorAndConsoleCodegen = testIdAttributeNameForStrictErrorAndConsoleCodegen;\n    this._evaluator = new SelectorEvaluatorImpl(/* @__PURE__ */ new Map());\n    this._engines = /* @__PURE__ */ new Map();\n    this._engines.set(\"xpath\", XPathEngine);\n    this._engines.set(\"xpath:light\", XPathEngine);\n    this._engines.set(\"_react\", ReactEngine);\n    this._engines.set(\"_vue\", VueEngine);\n    this._engines.set(\"role\", createRoleEngine(false));\n    this._engines.set(\"text\", this._createTextEngine(true, false));\n    this._engines.set(\"text:light\", this._createTextEngine(false, false));\n    this._engines.set(\"id\", this._createAttributeEngine(\"id\", true));\n    this._engines.set(\"id:light\", this._createAttributeEngine(\"id\", false));\n    this._engines.set(\"data-testid\", this._createAttributeEngine(\"data-testid\", true));\n    this._engines.set(\"data-testid:light\", this._createAttributeEngine(\"data-testid\", false));\n    this._engines.set(\"data-test-id\", this._createAttributeEngine(\"data-test-id\", true));\n    this._engines.set(\"data-test-id:light\", this._createAttributeEngine(\"data-test-id\", false));\n    this._engines.set(\"data-test\", this._createAttributeEngine(\"data-test\", true));\n    this._engines.set(\"data-test:light\", this._createAttributeEngine(\"data-test\", false));\n    this._engines.set(\"css\", this._createCSSEngine());\n    this._engines.set(\"nth\", { queryAll: () => [] });\n    this._engines.set(\"visible\", this._createVisibleEngine());\n    this._engines.set(\"internal:control\", this._createControlEngine());\n    this._engines.set(\"internal:has\", this._createHasEngine());\n    this._engines.set(\"internal:has-not\", this._createHasNotEngine());\n    this._engines.set(\"internal:and\", { queryAll: () => [] });\n    this._engines.set(\"internal:or\", { queryAll: () => [] });\n    this._engines.set(\"internal:chain\", this._createInternalChainEngine());\n    this._engines.set(\"internal:label\", this._createInternalLabelEngine());\n    this._engines.set(\"internal:text\", this._createTextEngine(true, true));\n    this._engines.set(\"internal:has-text\", this._createInternalHasTextEngine());\n    this._engines.set(\"internal:has-not-text\", this._createInternalHasNotTextEngine());\n    this._engines.set(\"internal:attr\", this._createNamedAttributeEngine());\n    this._engines.set(\"internal:testid\", this._createNamedAttributeEngine());\n    this._engines.set(\"internal:role\", createRoleEngine(true));\n    for (const { name, engine } of customEngines)\n      this._engines.set(name, engine);\n    this._stableRafCount = stableRafCount;\n    this._browserName = browserName;\n    setBrowserName(browserName);\n    this._setupGlobalListenersRemovalDetection();\n    this._setupHitTargetInterceptors();\n    if (isUnderTest)\n      this.window.__injectedScript = this;\n  }\n  eval(expression) {\n    return this.window.eval(expression);\n  }\n  testIdAttributeNameForStrictErrorAndConsoleCodegen() {\n    return this._testIdAttributeNameForStrictErrorAndConsoleCodegen;\n  }\n  parseSelector(selector) {\n    const result = parseSelector(selector);\n    visitAllSelectorParts(result, (part) => {\n      if (!this._engines.has(part.name))\n        throw this.createStacklessError(`Unknown engine \"${part.name}\" while parsing selector ${selector}`);\n    });\n    return result;\n  }\n  generateSelector(targetElement, options) {\n    return generateSelector(this, targetElement, options);\n  }\n  generateSelectorSimple(targetElement, options) {\n    return generateSelector(this, targetElement, { ...options, testIdAttributeName: this._testIdAttributeNameForStrictErrorAndConsoleCodegen }).selector;\n  }\n  querySelector(selector, root, strict) {\n    const result = this.querySelectorAll(selector, root);\n    if (strict && result.length > 1)\n      throw this.strictModeViolationError(selector, result);\n    return result[0];\n  }\n  _queryNth(elements, part) {\n    const list = [...elements];\n    let nth = +part.body;\n    if (nth === -1)\n      nth = list.length - 1;\n    return new Set(list.slice(nth, nth + 1));\n  }\n  _queryLayoutSelector(elements, part, originalRoot) {\n    const name = part.name;\n    const body = part.body;\n    const result = [];\n    const inner = this.querySelectorAll(body.parsed, originalRoot);\n    for (const element of elements) {\n      const score = layoutSelectorScore(name, element, inner, body.distance);\n      if (score !== void 0)\n        result.push({ element, score });\n    }\n    result.sort((a, b) => a.score - b.score);\n    return new Set(result.map((r) => r.element));\n  }\n  querySelectorAll(selector, root) {\n    if (selector.capture !== void 0) {\n      if (selector.parts.some((part) => part.name === \"nth\"))\n        throw this.createStacklessError(`Can't query n-th element in a request with the capture.`);\n      const withHas = { parts: selector.parts.slice(0, selector.capture + 1) };\n      if (selector.capture < selector.parts.length - 1) {\n        const parsed = { parts: selector.parts.slice(selector.capture + 1) };\n        const has = { name: \"internal:has\", body: { parsed }, source: stringifySelector(parsed) };\n        withHas.parts.push(has);\n      }\n      return this.querySelectorAll(withHas, root);\n    }\n    if (!root[\"querySelectorAll\"])\n      throw this.createStacklessError(\"Node is not queryable.\");\n    if (selector.capture !== void 0) {\n      throw this.createStacklessError(\"Internal error: there should not be a capture in the selector.\");\n    }\n    if (root.nodeType === 11 && selector.parts.length === 1 && selector.parts[0].name === \"css\" && selector.parts[0].source === \":scope\")\n      return [root];\n    this._evaluator.begin();\n    try {\n      let roots = /* @__PURE__ */ new Set([root]);\n      for (const part of selector.parts) {\n        if (part.name === \"nth\") {\n          roots = this._queryNth(roots, part);\n        } else if (part.name === \"internal:and\") {\n          const andElements = this.querySelectorAll(part.body.parsed, root);\n          roots = new Set(andElements.filter((e) => roots.has(e)));\n        } else if (part.name === \"internal:or\") {\n          const orElements = this.querySelectorAll(part.body.parsed, root);\n          roots = new Set(sortInDOMOrder(/* @__PURE__ */ new Set([...roots, ...orElements])));\n        } else if (kLayoutSelectorNames.includes(part.name)) {\n          roots = this._queryLayoutSelector(roots, part, root);\n        } else {\n          const next = /* @__PURE__ */ new Set();\n          for (const root2 of roots) {\n            const all = this._queryEngineAll(part, root2);\n            for (const one of all)\n              next.add(one);\n          }\n          roots = next;\n        }\n      }\n      return [...roots];\n    } finally {\n      this._evaluator.end();\n    }\n  }\n  _queryEngineAll(part, root) {\n    const result = this._engines.get(part.name).queryAll(root, part.body);\n    for (const element of result) {\n      if (!(\"nodeName\" in element))\n        throw this.createStacklessError(`Expected a Node but got ${Object.prototype.toString.call(element)}`);\n    }\n    return result;\n  }\n  _createAttributeEngine(attribute, shadow) {\n    const toCSS = (selector) => {\n      const css = `[${attribute}=${JSON.stringify(selector)}]`;\n      return [{ simples: [{ selector: { css, functions: [] }, combinator: \"\" }] }];\n    };\n    return {\n      queryAll: (root, selector) => {\n        return this._evaluator.query({ scope: root, pierceShadow: shadow }, toCSS(selector));\n      }\n    };\n  }\n  _createCSSEngine() {\n    return {\n      queryAll: (root, body) => {\n        return this._evaluator.query({ scope: root, pierceShadow: true }, body);\n      }\n    };\n  }\n  _createTextEngine(shadow, internal) {\n    const queryAll = (root, selector) => {\n      const { matcher, kind } = createTextMatcher(selector, internal);\n      const result = [];\n      let lastDidNotMatchSelf = null;\n      const appendElement = (element) => {\n        if (kind === \"lax\" && lastDidNotMatchSelf && lastDidNotMatchSelf.contains(element))\n          return false;\n        const matches = elementMatchesText(this._evaluator._cacheText, element, matcher);\n        if (matches === \"none\")\n          lastDidNotMatchSelf = element;\n        if (matches === \"self\" || matches === \"selfAndChildren\" && kind === \"strict\" && !internal)\n          result.push(element);\n      };\n      if (root.nodeType === Node.ELEMENT_NODE)\n        appendElement(root);\n      const elements = this._evaluator._queryCSS({ scope: root, pierceShadow: shadow }, \"*\");\n      for (const element of elements)\n        appendElement(element);\n      return result;\n    };\n    return { queryAll };\n  }\n  _createInternalHasTextEngine() {\n    return {\n      queryAll: (root, selector) => {\n        if (root.nodeType !== 1)\n          return [];\n        const element = root;\n        const text = elementText(this._evaluator._cacheText, element);\n        const { matcher } = createTextMatcher(selector, true);\n        return matcher(text) ? [element] : [];\n      }\n    };\n  }\n  _createInternalHasNotTextEngine() {\n    return {\n      queryAll: (root, selector) => {\n        if (root.nodeType !== 1)\n          return [];\n        const element = root;\n        const text = elementText(this._evaluator._cacheText, element);\n        const { matcher } = createTextMatcher(selector, true);\n        return matcher(text) ? [] : [element];\n      }\n    };\n  }\n  _createInternalLabelEngine() {\n    return {\n      queryAll: (root, selector) => {\n        const { matcher } = createTextMatcher(selector, true);\n        const allElements = this._evaluator._queryCSS({ scope: root, pierceShadow: true }, \"*\");\n        return allElements.filter((element) => {\n          return getElementLabels(this._evaluator._cacheText, element).some((label) => matcher(label));\n        });\n      }\n    };\n  }\n  _createNamedAttributeEngine() {\n    const queryAll = (root, selector) => {\n      const parsed = parseAttributeSelector(selector, true);\n      if (parsed.name || parsed.attributes.length !== 1)\n        throw new Error(\"Malformed attribute selector: \" + selector);\n      const { name, value, caseSensitive } = parsed.attributes[0];\n      const lowerCaseValue = caseSensitive ? null : value.toLowerCase();\n      let matcher;\n      if (value instanceof RegExp)\n        matcher = (s) => !!s.match(value);\n      else if (caseSensitive)\n        matcher = (s) => s === value;\n      else\n        matcher = (s) => s.toLowerCase().includes(lowerCaseValue);\n      const elements = this._evaluator._queryCSS({ scope: root, pierceShadow: true }, `[${name}]`);\n      return elements.filter((e) => matcher(e.getAttribute(name)));\n    };\n    return { queryAll };\n  }\n  _createControlEngine() {\n    return {\n      queryAll(root, body) {\n        if (body === \"enter-frame\")\n          return [];\n        if (body === \"return-empty\")\n          return [];\n        if (body === \"component\") {\n          if (root.nodeType !== 1)\n            return [];\n          return [root.childElementCount === 1 ? root.firstElementChild : root];\n        }\n        throw new Error(`Internal error, unknown internal:control selector ${body}`);\n      }\n    };\n  }\n  _createHasEngine() {\n    const queryAll = (root, body) => {\n      if (root.nodeType !== 1)\n        return [];\n      const has = !!this.querySelector(body.parsed, root, false);\n      return has ? [root] : [];\n    };\n    return { queryAll };\n  }\n  _createHasNotEngine() {\n    const queryAll = (root, body) => {\n      if (root.nodeType !== 1)\n        return [];\n      const has = !!this.querySelector(body.parsed, root, false);\n      return has ? [] : [root];\n    };\n    return { queryAll };\n  }\n  _createVisibleEngine() {\n    const queryAll = (root, body) => {\n      if (root.nodeType !== 1)\n        return [];\n      return isElementVisible(root) === Boolean(body) ? [root] : [];\n    };\n    return { queryAll };\n  }\n  _createInternalChainEngine() {\n    const queryAll = (root, body) => {\n      return this.querySelectorAll(body.parsed, root);\n    };\n    return { queryAll };\n  }\n  extend(source, params) {\n    const constrFunction = this.window.eval(`\n    (() => {\n      const module = {};\n      ${source}\n      return module.exports.default();\n    })()`);\n    return new constrFunction(this, params);\n  }\n  isVisible(element) {\n    return isElementVisible(element);\n  }\n  async viewportRatio(element) {\n    return await new Promise((resolve) => {\n      const observer = new IntersectionObserver((entries) => {\n        resolve(entries[0].intersectionRatio);\n        observer.disconnect();\n      });\n      observer.observe(element);\n      requestAnimationFrame(() => {\n      });\n    });\n  }\n  getElementBorderWidth(node) {\n    if (node.nodeType !== Node.ELEMENT_NODE || !node.ownerDocument || !node.ownerDocument.defaultView)\n      return { left: 0, top: 0 };\n    const style = node.ownerDocument.defaultView.getComputedStyle(node);\n    return { left: parseInt(style.borderLeftWidth || \"\", 10), top: parseInt(style.borderTopWidth || \"\", 10) };\n  }\n  describeIFrameStyle(iframe) {\n    if (!iframe.ownerDocument || !iframe.ownerDocument.defaultView)\n      return \"error:notconnected\";\n    const defaultView = iframe.ownerDocument.defaultView;\n    for (let e = iframe; e; e = parentElementOrShadowHost(e)) {\n      if (defaultView.getComputedStyle(e).transform !== \"none\")\n        return \"transformed\";\n    }\n    const iframeStyle = defaultView.getComputedStyle(iframe);\n    return {\n      left: parseInt(iframeStyle.borderLeftWidth || \"\", 10) + parseInt(iframeStyle.paddingLeft || \"\", 10),\n      top: parseInt(iframeStyle.borderTopWidth || \"\", 10) + parseInt(iframeStyle.paddingTop || \"\", 10)\n    };\n  }\n  retarget(node, behavior) {\n    let element = node.nodeType === Node.ELEMENT_NODE ? node : node.parentElement;\n    if (!element)\n      return null;\n    if (behavior === \"none\")\n      return element;\n    if (!element.matches(\"input, textarea, select\") && !element.isContentEditable) {\n      if (behavior === \"button-link\")\n        element = element.closest(\"button, [role=button], a, [role=link]\") || element;\n      else\n        element = element.closest(\"button, [role=button], [role=checkbox], [role=radio]\") || element;\n    }\n    if (behavior === \"follow-label\") {\n      if (!element.matches(\"input, textarea, button, select, [role=button], [role=checkbox], [role=radio]\") && !element.isContentEditable) {\n        element = element.closest(\"label\") || element;\n      }\n      if (element.nodeName === \"LABEL\")\n        element = element.control || element;\n    }\n    return element;\n  }\n  async checkElementStates(node, states) {\n    if (states.includes(\"stable\")) {\n      const stableResult = await this._checkElementIsStable(node);\n      if (stableResult === false)\n        return { missingState: \"stable\" };\n      if (stableResult === \"error:notconnected\")\n        return stableResult;\n    }\n    for (const state of states) {\n      if (state !== \"stable\") {\n        const result = this.elementState(node, state);\n        if (result === false)\n          return { missingState: state };\n        if (result === \"error:notconnected\")\n          return result;\n      }\n    }\n  }\n  async _checkElementIsStable(node) {\n    const continuePolling = Symbol(\"continuePolling\");\n    let lastRect;\n    let stableRafCounter = 0;\n    let lastTime = 0;\n    const check = () => {\n      const element = this.retarget(node, \"no-follow-label\");\n      if (!element)\n        return \"error:notconnected\";\n      const time = performance.now();\n      if (this._stableRafCount > 1 && time - lastTime < 15)\n        return continuePolling;\n      lastTime = time;\n      const clientRect = element.getBoundingClientRect();\n      const rect = { x: clientRect.top, y: clientRect.left, width: clientRect.width, height: clientRect.height };\n      if (lastRect) {\n        const samePosition = rect.x === lastRect.x && rect.y === lastRect.y && rect.width === lastRect.width && rect.height === lastRect.height;\n        if (!samePosition)\n          return false;\n        if (++stableRafCounter >= this._stableRafCount)\n          return true;\n      }\n      lastRect = rect;\n      return continuePolling;\n    };\n    let fulfill;\n    let reject;\n    const result = new Promise((f, r) => {\n      fulfill = f;\n      reject = r;\n    });\n    const raf = () => {\n      try {\n        const success = check();\n        if (success !== continuePolling)\n          fulfill(success);\n        else\n          requestAnimationFrame(raf);\n      } catch (e) {\n        reject(e);\n      }\n    };\n    requestAnimationFrame(raf);\n    return result;\n  }\n  elementState(node, state) {\n    const element = this.retarget(node, [\"stable\", \"visible\", \"hidden\"].includes(state) ? \"none\" : \"follow-label\");\n    if (!element || !element.isConnected) {\n      if (state === \"hidden\")\n        return true;\n      return \"error:notconnected\";\n    }\n    if (state === \"visible\")\n      return this.isVisible(element);\n    if (state === \"hidden\")\n      return !this.isVisible(element);\n    const disabled = getAriaDisabled(element);\n    if (state === \"disabled\")\n      return disabled;\n    if (state === \"enabled\")\n      return !disabled;\n    const editable = !([\"INPUT\", \"TEXTAREA\", \"SELECT\"].includes(element.nodeName) && element.hasAttribute(\"readonly\"));\n    if (state === \"editable\")\n      return !disabled && editable;\n    if (state === \"checked\" || state === \"unchecked\") {\n      const need = state === \"checked\";\n      const checked = getChecked(element, false);\n      if (checked === \"error\")\n        throw this.createStacklessError(\"Not a checkbox or radio button\");\n      return need === checked;\n    }\n    throw this.createStacklessError(`Unexpected element state \"${state}\"`);\n  }\n  selectOptions(node, optionsToSelect) {\n    const element = this.retarget(node, \"follow-label\");\n    if (!element)\n      return \"error:notconnected\";\n    if (element.nodeName.toLowerCase() !== \"select\")\n      throw this.createStacklessError(\"Element is not a <select> element\");\n    const select = element;\n    const options = [...select.options];\n    const selectedOptions = [];\n    let remainingOptionsToSelect = optionsToSelect.slice();\n    for (let index = 0; index < options.length; index++) {\n      const option = options[index];\n      const filter = (optionToSelect) => {\n        if (optionToSelect instanceof Node)\n          return option === optionToSelect;\n        let matches = true;\n        if (optionToSelect.valueOrLabel !== void 0)\n          matches = matches && (optionToSelect.valueOrLabel === option.value || optionToSelect.valueOrLabel === option.label);\n        if (optionToSelect.value !== void 0)\n          matches = matches && optionToSelect.value === option.value;\n        if (optionToSelect.label !== void 0)\n          matches = matches && optionToSelect.label === option.label;\n        if (optionToSelect.index !== void 0)\n          matches = matches && optionToSelect.index === index;\n        return matches;\n      };\n      if (!remainingOptionsToSelect.some(filter))\n        continue;\n      selectedOptions.push(option);\n      if (select.multiple) {\n        remainingOptionsToSelect = remainingOptionsToSelect.filter((o) => !filter(o));\n      } else {\n        remainingOptionsToSelect = [];\n        break;\n      }\n    }\n    if (remainingOptionsToSelect.length)\n      return \"error:optionsnotfound\";\n    select.value = void 0;\n    selectedOptions.forEach((option) => option.selected = true);\n    select.dispatchEvent(new Event(\"input\", { bubbles: true, composed: true }));\n    select.dispatchEvent(new Event(\"change\", { bubbles: true }));\n    return selectedOptions.map((option) => option.value);\n  }\n  fill(node, value) {\n    const element = this.retarget(node, \"follow-label\");\n    if (!element)\n      return \"error:notconnected\";\n    if (element.nodeName.toLowerCase() === \"input\") {\n      const input = element;\n      const type = input.type.toLowerCase();\n      const kInputTypesToSetValue = /* @__PURE__ */ new Set([\"color\", \"date\", \"time\", \"datetime-local\", \"month\", \"range\", \"week\"]);\n      const kInputTypesToTypeInto = /* @__PURE__ */ new Set([\"\", \"email\", \"number\", \"password\", \"search\", \"tel\", \"text\", \"url\"]);\n      if (!kInputTypesToTypeInto.has(type) && !kInputTypesToSetValue.has(type))\n        throw this.createStacklessError(`Input of type \"${type}\" cannot be filled`);\n      if (type === \"number\") {\n        value = value.trim();\n        if (isNaN(Number(value)))\n          throw this.createStacklessError(\"Cannot type text into input[type=number]\");\n      }\n      if (kInputTypesToSetValue.has(type)) {\n        value = value.trim();\n        input.focus();\n        input.value = value;\n        if (input.value !== value)\n          throw this.createStacklessError(\"Malformed value\");\n        element.dispatchEvent(new Event(\"input\", { bubbles: true, composed: true }));\n        element.dispatchEvent(new Event(\"change\", { bubbles: true }));\n        return \"done\";\n      }\n    } else if (element.nodeName.toLowerCase() === \"textarea\") {\n    } else if (!element.isContentEditable) {\n      throw this.createStacklessError(\"Element is not an <input>, <textarea> or [contenteditable] element\");\n    }\n    this.selectText(element);\n    return \"needsinput\";\n  }\n  selectText(node) {\n    const element = this.retarget(node, \"follow-label\");\n    if (!element)\n      return \"error:notconnected\";\n    if (element.nodeName.toLowerCase() === \"input\") {\n      const input = element;\n      input.select();\n      input.focus();\n      return \"done\";\n    }\n    if (element.nodeName.toLowerCase() === \"textarea\") {\n      const textarea = element;\n      textarea.selectionStart = 0;\n      textarea.selectionEnd = textarea.value.length;\n      textarea.focus();\n      return \"done\";\n    }\n    const range = element.ownerDocument.createRange();\n    range.selectNodeContents(element);\n    const selection = element.ownerDocument.defaultView.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n    element.focus();\n    return \"done\";\n  }\n  _activelyFocused(node) {\n    const activeElement = node.getRootNode().activeElement;\n    const isFocused = activeElement === node && !!node.ownerDocument && node.ownerDocument.hasFocus();\n    return { activeElement, isFocused };\n  }\n  focusNode(node, resetSelectionIfNotFocused) {\n    if (!node.isConnected)\n      return \"error:notconnected\";\n    if (node.nodeType !== Node.ELEMENT_NODE)\n      throw this.createStacklessError(\"Node is not an element\");\n    const { activeElement, isFocused: wasFocused } = this._activelyFocused(node);\n    if (node.isContentEditable && !wasFocused && activeElement && activeElement.blur) {\n      activeElement.blur();\n    }\n    node.focus();\n    node.focus();\n    if (resetSelectionIfNotFocused && !wasFocused && node.nodeName.toLowerCase() === \"input\") {\n      try {\n        const input = node;\n        input.setSelectionRange(0, 0);\n      } catch (e) {\n      }\n    }\n    return \"done\";\n  }\n  blurNode(node) {\n    if (!node.isConnected)\n      return \"error:notconnected\";\n    if (node.nodeType !== Node.ELEMENT_NODE)\n      throw this.createStacklessError(\"Node is not an element\");\n    node.blur();\n    return \"done\";\n  }\n  setInputFiles(node, payloads) {\n    if (node.nodeType !== Node.ELEMENT_NODE)\n      return \"Node is not of type HTMLElement\";\n    const element = node;\n    if (element.nodeName !== \"INPUT\")\n      return \"Not an <input> element\";\n    const input = element;\n    const type = (input.getAttribute(\"type\") || \"\").toLowerCase();\n    if (type !== \"file\")\n      return \"Not an input[type=file] element\";\n    const files = payloads.map((file) => {\n      const bytes = Uint8Array.from(atob(file.buffer), (c) => c.charCodeAt(0));\n      return new File([bytes], file.name, { type: file.mimeType, lastModified: file.lastModifiedMs });\n    });\n    const dt = new DataTransfer();\n    for (const file of files)\n      dt.items.add(file);\n    input.files = dt.files;\n    input.dispatchEvent(new Event(\"input\", { bubbles: true, composed: true }));\n    input.dispatchEvent(new Event(\"change\", { bubbles: true }));\n  }\n  expectHitTarget(hitPoint, targetElement) {\n    const roots = [];\n    let parentElement = targetElement;\n    while (parentElement) {\n      const root = enclosingShadowRootOrDocument(parentElement);\n      if (!root)\n        break;\n      roots.push(root);\n      if (root.nodeType === 9)\n        break;\n      parentElement = root.host;\n    }\n    let hitElement;\n    for (let index = roots.length - 1; index >= 0; index--) {\n      const root = roots[index];\n      const elements = root.elementsFromPoint(hitPoint.x, hitPoint.y);\n      const singleElement = root.elementFromPoint(hitPoint.x, hitPoint.y);\n      if (singleElement && elements[0] && parentElementOrShadowHost(singleElement) === elements[0]) {\n        const style = this.window.getComputedStyle(singleElement);\n        if ((style == null ? void 0 : style.display) === \"contents\") {\n          elements.unshift(singleElement);\n        }\n      }\n      if (elements[0] && elements[0].shadowRoot === root && elements[1] === singleElement) {\n        elements.shift();\n      }\n      const innerElement = elements[0];\n      if (!innerElement)\n        break;\n      hitElement = innerElement;\n      if (index && innerElement !== roots[index - 1].host)\n        break;\n    }\n    const hitParents = [];\n    while (hitElement && hitElement !== targetElement) {\n      hitParents.push(hitElement);\n      hitElement = parentElementOrShadowHost(hitElement);\n    }\n    if (hitElement === targetElement)\n      return \"done\";\n    const hitTargetDescription = this.previewNode(hitParents[0] || this.document.documentElement);\n    let rootHitTargetDescription;\n    let element = targetElement;\n    while (element) {\n      const index = hitParents.indexOf(element);\n      if (index !== -1) {\n        if (index > 1)\n          rootHitTargetDescription = this.previewNode(hitParents[index - 1]);\n        break;\n      }\n      element = parentElementOrShadowHost(element);\n    }\n    if (rootHitTargetDescription)\n      return { hitTargetDescription: `${hitTargetDescription} from ${rootHitTargetDescription} subtree` };\n    return { hitTargetDescription };\n  }\n  // Life of a pointer action, for example click.\n  //\n  // 0. Retry items 1 and 2 while action fails due to navigation or element being detached.\n  //   1. Resolve selector to an element.\n  //   2. Retry the following steps until the element is detached or frame navigates away.\n  //     2a. Wait for the element to be stable (not moving), visible and enabled.\n  //     2b. Scroll element into view. Scrolling alternates between:\n  //         - Built-in protocol scrolling.\n  //         - Anchoring to the top/left, bottom/right and center/center.\n  //         This is to scroll elements from under sticky headers/footers.\n  //     2c. Click point is calculated, either based on explicitly specified position,\n  //         or some visible point of the element based on protocol content quads.\n  //     2d. Click point relative to page viewport is converted relative to the target iframe\n  //         for the next hit-point check.\n  //     2e. (injected) Hit target at the click point must be a descendant of the target element.\n  //         This prevents mis-clicking in edge cases like <iframe> overlaying the target.\n  //     2f. (injected) Events specific for click (or some other action type) are intercepted on\n  //         the Window with capture:true. See 2i for details.\n  //         Note: this step is skipped for drag&drop (see inline comments for the reason).\n  //     2g. Necessary keyboard modifiers are pressed.\n  //     2h. Click event is issued (mousemove + mousedown + mouseup).\n  //     2i. (injected) For each event, we check that hit target at the event point\n  //         is a descendant of the target element.\n  //         This guarantees no race between issuing the event and handling it in the page,\n  //         for example due to layout shift.\n  //         When hit target check fails, we block all future events in the page.\n  //     2j. Keyboard modifiers are restored.\n  //     2k. (injected) Event interceptor is removed.\n  //     2l. All navigations triggered between 2g-2k are awaited to be either committed or canceled.\n  //     2m. If failed, wait for increasing amount of time before the next retry.\n  setupHitTargetInterceptor(node, action, hitPoint, blockAllEvents) {\n    const element = this.retarget(node, \"button-link\");\n    if (!element || !element.isConnected)\n      return \"error:notconnected\";\n    if (hitPoint) {\n      const preliminaryResult = this.expectHitTarget(hitPoint, element);\n      if (preliminaryResult !== \"done\")\n        return preliminaryResult.hitTargetDescription;\n    }\n    if (action === \"drag\")\n      return { stop: () => \"done\" };\n    const events = {\n      \"hover\": kHoverHitTargetInterceptorEvents,\n      \"tap\": kTapHitTargetInterceptorEvents,\n      \"mouse\": kMouseHitTargetInterceptorEvents\n    }[action];\n    let result;\n    const listener = (event) => {\n      if (!events.has(event.type))\n        return;\n      if (!event.isTrusted)\n        return;\n      const point = !!this.window.TouchEvent && event instanceof this.window.TouchEvent ? event.touches[0] : event;\n      if (result === void 0 && point)\n        result = this.expectHitTarget({ x: point.clientX, y: point.clientY }, element);\n      if (blockAllEvents || result !== \"done\" && result !== void 0) {\n        event.preventDefault();\n        event.stopPropagation();\n        event.stopImmediatePropagation();\n      }\n    };\n    const stop = () => {\n      if (this._hitTargetInterceptor === listener)\n        this._hitTargetInterceptor = void 0;\n      return result || \"done\";\n    };\n    this._hitTargetInterceptor = listener;\n    return { stop };\n  }\n  dispatchEvent(node, type, eventInit) {\n    let event;\n    eventInit = { bubbles: true, cancelable: true, composed: true, ...eventInit };\n    switch (eventType.get(type)) {\n      case \"mouse\":\n        event = new MouseEvent(type, eventInit);\n        break;\n      case \"keyboard\":\n        event = new KeyboardEvent(type, eventInit);\n        break;\n      case \"touch\":\n        event = new TouchEvent(type, eventInit);\n        break;\n      case \"pointer\":\n        event = new PointerEvent(type, eventInit);\n        break;\n      case \"focus\":\n        event = new FocusEvent(type, eventInit);\n        break;\n      case \"drag\":\n        event = new DragEvent(type, eventInit);\n        break;\n      case \"wheel\":\n        event = new WheelEvent(type, eventInit);\n        break;\n      case \"deviceorientation\":\n        try {\n          event = new DeviceOrientationEvent(type, eventInit);\n        } catch {\n          const { bubbles, cancelable, alpha, beta, gamma, absolute } = eventInit;\n          event = this.document.createEvent(\"DeviceOrientationEvent\");\n          event.initDeviceOrientationEvent(type, bubbles, cancelable, alpha, beta, gamma, absolute);\n        }\n        break;\n      case \"devicemotion\":\n        try {\n          event = new DeviceMotionEvent(type, eventInit);\n        } catch {\n          const { bubbles, cancelable, acceleration, accelerationIncludingGravity, rotationRate, interval } = eventInit;\n          event = this.document.createEvent(\"DeviceMotionEvent\");\n          event.initDeviceMotionEvent(type, bubbles, cancelable, acceleration, accelerationIncludingGravity, rotationRate, interval);\n        }\n        break;\n      default:\n        event = new Event(type, eventInit);\n        break;\n    }\n    node.dispatchEvent(event);\n  }\n  previewNode(node) {\n    if (node.nodeType === Node.TEXT_NODE)\n      return oneLine(`#text=${node.nodeValue || \"\"}`);\n    if (node.nodeType !== Node.ELEMENT_NODE)\n      return oneLine(`<${node.nodeName.toLowerCase()} />`);\n    const element = node;\n    const attrs = [];\n    for (let i = 0; i < element.attributes.length; i++) {\n      const { name, value } = element.attributes[i];\n      if (name === \"style\")\n        continue;\n      if (!value && booleanAttributes.has(name))\n        attrs.push(` ${name}`);\n      else\n        attrs.push(` ${name}=\"${value}\"`);\n    }\n    attrs.sort((a, b) => a.length - b.length);\n    const attrText = trimStringWithEllipsis(attrs.join(\"\"), 50);\n    if (autoClosingTags.has(element.nodeName))\n      return oneLine(`<${element.nodeName.toLowerCase()}${attrText}/>`);\n    const children = element.childNodes;\n    let onlyText = false;\n    if (children.length <= 5) {\n      onlyText = true;\n      for (let i = 0; i < children.length; i++)\n        onlyText = onlyText && children[i].nodeType === Node.TEXT_NODE;\n    }\n    const text = onlyText ? element.textContent || \"\" : children.length ? \"\\u2026\" : \"\";\n    return oneLine(`<${element.nodeName.toLowerCase()}${attrText}>${trimStringWithEllipsis(text, 50)}</${element.nodeName.toLowerCase()}>`);\n  }\n  strictModeViolationError(selector, matches) {\n    const infos = matches.slice(0, 10).map((m) => ({\n      preview: this.previewNode(m),\n      selector: this.generateSelectorSimple(m)\n    }));\n    const lines = infos.map((info, i) => `\n    ${i + 1}) ${info.preview} aka ${asLocator(this._sdkLanguage, info.selector)}`);\n    if (infos.length < matches.length)\n      lines.push(\"\\n    ...\");\n    return this.createStacklessError(`strict mode violation: ${asLocator(this._sdkLanguage, stringifySelector(selector))} resolved to ${matches.length} elements:${lines.join(\"\")}\n`);\n  }\n  createStacklessError(message) {\n    if (this._browserName === \"firefox\") {\n      const error2 = new Error(\"Error: \" + message);\n      error2.stack = \"\";\n      return error2;\n    }\n    const error = new Error(message);\n    delete error.stack;\n    return error;\n  }\n  createHighlight() {\n    return new Highlight(this);\n  }\n  maskSelectors(selectors, color) {\n    if (this._highlight)\n      this.hideHighlight();\n    this._highlight = new Highlight(this);\n    this._highlight.install();\n    const elements = [];\n    for (const selector of selectors)\n      elements.push(this.querySelectorAll(selector, this.document.documentElement));\n    this._highlight.maskElements(elements.flat(), color);\n  }\n  highlight(selector) {\n    if (!this._highlight) {\n      this._highlight = new Highlight(this);\n      this._highlight.install();\n    }\n    this._highlight.runHighlightOnRaf(selector);\n  }\n  hideHighlight() {\n    if (this._highlight) {\n      this._highlight.uninstall();\n      delete this._highlight;\n    }\n  }\n  markTargetElements(markedElements, callId) {\n    const customEvent = new CustomEvent(\"__playwright_target__\", {\n      bubbles: true,\n      cancelable: true,\n      detail: callId,\n      composed: true\n    });\n    for (const element of markedElements)\n      element.dispatchEvent(customEvent);\n  }\n  _setupGlobalListenersRemovalDetection() {\n    const customEventName = \"__playwright_global_listeners_check__\";\n    let seenEvent = false;\n    const handleCustomEvent = () => seenEvent = true;\n    this.window.addEventListener(customEventName, handleCustomEvent);\n    new MutationObserver((entries) => {\n      const newDocumentElement = entries.some((entry) => Array.from(entry.addedNodes).includes(this.document.documentElement));\n      if (!newDocumentElement)\n        return;\n      seenEvent = false;\n      this.window.dispatchEvent(new CustomEvent(customEventName));\n      if (seenEvent)\n        return;\n      this.window.addEventListener(customEventName, handleCustomEvent);\n      for (const callback of this.onGlobalListenersRemoved)\n        callback();\n    }).observe(this.document, { childList: true });\n  }\n  _setupHitTargetInterceptors() {\n    const listener = (event) => {\n      var _a;\n      return (_a = this._hitTargetInterceptor) == null ? void 0 : _a.call(this, event);\n    };\n    const addHitTargetInterceptorListeners = () => {\n      for (const event of kAllHitTargetInterceptorEvents)\n        this.window.addEventListener(event, listener, { capture: true, passive: false });\n    };\n    addHitTargetInterceptorListeners();\n    this.onGlobalListenersRemoved.add(addHitTargetInterceptorListeners);\n  }\n  async expect(element, options, elements) {\n    const isArray = options.expression === \"to.have.count\" || options.expression.endsWith(\".array\");\n    if (isArray)\n      return this.expectArray(elements, options);\n    if (!element) {\n      if (!options.isNot && options.expression === \"to.be.hidden\")\n        return { matches: true };\n      if (options.isNot && options.expression === \"to.be.visible\")\n        return { matches: false };\n      if (!options.isNot && options.expression === \"to.be.detached\")\n        return { matches: true };\n      if (options.isNot && options.expression === \"to.be.attached\")\n        return { matches: false };\n      if (options.isNot && options.expression === \"to.be.in.viewport\")\n        return { matches: false };\n      return { matches: options.isNot, missingReceived: true };\n    }\n    return await this.expectSingleElement(element, options);\n  }\n  async expectSingleElement(element, options) {\n    var _a, _b;\n    const expression = options.expression;\n    {\n      let elementState;\n      if (expression === \"to.have.attribute\") {\n        elementState = element.hasAttribute(options.expressionArg);\n      } else if (expression === \"to.be.checked\") {\n        elementState = this.elementState(element, \"checked\");\n      } else if (expression === \"to.be.unchecked\") {\n        elementState = this.elementState(element, \"unchecked\");\n      } else if (expression === \"to.be.disabled\") {\n        elementState = this.elementState(element, \"disabled\");\n      } else if (expression === \"to.be.editable\") {\n        elementState = this.elementState(element, \"editable\");\n      } else if (expression === \"to.be.readonly\") {\n        elementState = !this.elementState(element, \"editable\");\n      } else if (expression === \"to.be.empty\") {\n        if (element.nodeName === \"INPUT\" || element.nodeName === \"TEXTAREA\")\n          elementState = !element.value;\n        else\n          elementState = !((_a = element.textContent) == null ? void 0 : _a.trim());\n      } else if (expression === \"to.be.enabled\") {\n        elementState = this.elementState(element, \"enabled\");\n      } else if (expression === \"to.be.focused\") {\n        elementState = this._activelyFocused(element).isFocused;\n      } else if (expression === \"to.be.hidden\") {\n        elementState = this.elementState(element, \"hidden\");\n      } else if (expression === \"to.be.visible\") {\n        elementState = this.elementState(element, \"visible\");\n      } else if (expression === \"to.be.attached\") {\n        elementState = true;\n      } else if (expression === \"to.be.detached\") {\n        elementState = false;\n      }\n      if (elementState !== void 0) {\n        if (elementState === \"error:notcheckbox\")\n          throw this.createStacklessError(\"Element is not a checkbox\");\n        if (elementState === \"error:notconnected\")\n          throw this.createStacklessError(\"Element is not connected\");\n        return { received: elementState, matches: elementState };\n      }\n    }\n    {\n      if (expression === \"to.have.property\") {\n        let target = element;\n        const properties = options.expressionArg.split(\".\");\n        for (let i = 0; i < properties.length - 1; i++) {\n          if (typeof target !== \"object\" || !(properties[i] in target))\n            return { received: void 0, matches: false };\n          target = target[properties[i]];\n        }\n        const received = target[properties[properties.length - 1]];\n        const matches = deepEquals(received, options.expectedValue);\n        return { received, matches };\n      }\n    }\n    {\n      if (expression === \"to.be.in.viewport\") {\n        const ratio = await this.viewportRatio(element);\n        return { received: `viewport ratio ${ratio}`, matches: ratio > 0 && ratio > ((_b = options.expectedNumber) != null ? _b : 0) - 1e-9 };\n      }\n    }\n    {\n      if (expression === \"to.have.values\") {\n        element = this.retarget(element, \"follow-label\");\n        if (element.nodeName !== \"SELECT\" || !element.multiple)\n          throw this.createStacklessError(\"Not a select element with a multiple attribute\");\n        const received = [...element.selectedOptions].map((o) => o.value);\n        if (received.length !== options.expectedText.length)\n          return { received, matches: false };\n        return { received, matches: received.map((r, i) => new ExpectedTextMatcher(options.expectedText[i]).matches(r)).every(Boolean) };\n      }\n    }\n    {\n      let received;\n      if (expression === \"to.have.attribute.value\") {\n        const value = element.getAttribute(options.expressionArg);\n        if (value === null)\n          return { received: null, matches: false };\n        received = value;\n      } else if (expression === \"to.have.class\") {\n        received = element.classList.toString();\n      } else if (expression === \"to.have.css\") {\n        received = this.window.getComputedStyle(element).getPropertyValue(options.expressionArg);\n      } else if (expression === \"to.have.id\") {\n        received = element.id;\n      } else if (expression === \"to.have.text\") {\n        received = options.useInnerText ? element.innerText : elementText(/* @__PURE__ */ new Map(), element).full;\n      } else if (expression === \"to.have.accessible.name\") {\n        received = getElementAccessibleName(\n          element,\n          false\n          /* includeHidden */\n        );\n      } else if (expression === \"to.have.accessible.description\") {\n        received = getElementAccessibleDescription(\n          element,\n          false\n          /* includeHidden */\n        );\n      } else if (expression === \"to.have.role\") {\n        received = getAriaRole(element) || \"\";\n      } else if (expression === \"to.have.title\") {\n        received = this.document.title;\n      } else if (expression === \"to.have.url\") {\n        received = this.document.location.href;\n      } else if (expression === \"to.have.value\") {\n        element = this.retarget(element, \"follow-label\");\n        if (element.nodeName !== \"INPUT\" && element.nodeName !== \"TEXTAREA\" && element.nodeName !== \"SELECT\")\n          throw this.createStacklessError(\"Not an input element\");\n        received = element.value;\n      }\n      if (received !== void 0 && options.expectedText) {\n        const matcher = new ExpectedTextMatcher(options.expectedText[0]);\n        return { received, matches: matcher.matches(received) };\n      }\n    }\n    throw this.createStacklessError(\"Unknown expect matcher: \" + expression);\n  }\n  expectArray(elements, options) {\n    const expression = options.expression;\n    if (expression === \"to.have.count\") {\n      const received2 = elements.length;\n      const matches = received2 === options.expectedNumber;\n      return { received: received2, matches };\n    }\n    let received;\n    if (expression === \"to.have.text.array\" || expression === \"to.contain.text.array\")\n      received = elements.map((e) => options.useInnerText ? e.innerText : elementText(/* @__PURE__ */ new Map(), e).full);\n    else if (expression === \"to.have.class.array\")\n      received = elements.map((e) => e.classList.toString());\n    if (received && options.expectedText) {\n      const lengthShouldMatch = expression !== \"to.contain.text.array\";\n      const matchesLength = received.length === options.expectedText.length || !lengthShouldMatch;\n      if (!matchesLength)\n        return { received, matches: false };\n      const matchers = options.expectedText.map((e) => new ExpectedTextMatcher(e));\n      let mIndex = 0, rIndex = 0;\n      while (mIndex < matchers.length && rIndex < received.length) {\n        if (matchers[mIndex].matches(received[rIndex]))\n          ++mIndex;\n        ++rIndex;\n      }\n      return { received, matches: mIndex === matchers.length };\n    }\n    throw this.createStacklessError(\"Unknown expect matcher: \" + expression);\n  }\n  getElementAccessibleName(element, includeHidden) {\n    return getElementAccessibleName(element, !!includeHidden);\n  }\n  getElementAccessibleDescription(element, includeHidden) {\n    return getElementAccessibleDescription(element, !!includeHidden);\n  }\n  getAriaRole(element) {\n    return getAriaRole(element);\n  }\n};\nvar autoClosingTags = /* @__PURE__ */ new Set([\"AREA\", \"BASE\", \"BR\", \"COL\", \"COMMAND\", \"EMBED\", \"HR\", \"IMG\", \"INPUT\", \"KEYGEN\", \"LINK\", \"MENUITEM\", \"META\", \"PARAM\", \"SOURCE\", \"TRACK\", \"WBR\"]);\nvar booleanAttributes = /* @__PURE__ */ new Set([\"checked\", \"selected\", \"disabled\", \"readonly\", \"multiple\"]);\nfunction oneLine(s) {\n  return s.replace(/\\n/g, \"\\u21B5\").replace(/\\t/g, \"\\u21C6\");\n}\nvar eventType = /* @__PURE__ */ new Map([\n  [\"auxclick\", \"mouse\"],\n  [\"click\", \"mouse\"],\n  [\"dblclick\", \"mouse\"],\n  [\"mousedown\", \"mouse\"],\n  [\"mouseeenter\", \"mouse\"],\n  [\"mouseleave\", \"mouse\"],\n  [\"mousemove\", \"mouse\"],\n  [\"mouseout\", \"mouse\"],\n  [\"mouseover\", \"mouse\"],\n  [\"mouseup\", \"mouse\"],\n  [\"mouseleave\", \"mouse\"],\n  [\"mousewheel\", \"mouse\"],\n  [\"keydown\", \"keyboard\"],\n  [\"keyup\", \"keyboard\"],\n  [\"keypress\", \"keyboard\"],\n  [\"textInput\", \"keyboard\"],\n  [\"touchstart\", \"touch\"],\n  [\"touchmove\", \"touch\"],\n  [\"touchend\", \"touch\"],\n  [\"touchcancel\", \"touch\"],\n  [\"pointerover\", \"pointer\"],\n  [\"pointerout\", \"pointer\"],\n  [\"pointerenter\", \"pointer\"],\n  [\"pointerleave\", \"pointer\"],\n  [\"pointerdown\", \"pointer\"],\n  [\"pointerup\", \"pointer\"],\n  [\"pointermove\", \"pointer\"],\n  [\"pointercancel\", \"pointer\"],\n  [\"gotpointercapture\", \"pointer\"],\n  [\"lostpointercapture\", \"pointer\"],\n  [\"focus\", \"focus\"],\n  [\"blur\", \"focus\"],\n  [\"drag\", \"drag\"],\n  [\"dragstart\", \"drag\"],\n  [\"dragend\", \"drag\"],\n  [\"dragover\", \"drag\"],\n  [\"dragenter\", \"drag\"],\n  [\"dragleave\", \"drag\"],\n  [\"dragexit\", \"drag\"],\n  [\"drop\", \"drag\"],\n  [\"wheel\", \"wheel\"],\n  [\"deviceorientation\", \"deviceorientation\"],\n  [\"deviceorientationabsolute\", \"deviceorientation\"],\n  [\"devicemotion\", \"devicemotion\"]\n]);\nvar kHoverHitTargetInterceptorEvents = /* @__PURE__ */ new Set([\"mousemove\"]);\nvar kTapHitTargetInterceptorEvents = /* @__PURE__ */ new Set([\"pointerdown\", \"pointerup\", \"touchstart\", \"touchend\", \"touchcancel\"]);\nvar kMouseHitTargetInterceptorEvents = /* @__PURE__ */ new Set([\"mousedown\", \"mouseup\", \"pointerdown\", \"pointerup\", \"click\", \"auxclick\", \"dblclick\", \"contextmenu\"]);\nvar kAllHitTargetInterceptorEvents = /* @__PURE__ */ new Set([...kHoverHitTargetInterceptorEvents, ...kTapHitTargetInterceptorEvents, ...kMouseHitTargetInterceptorEvents]);\nfunction cssUnquote(s) {\n  s = s.substring(1, s.length - 1);\n  if (!s.includes(\"\\\\\"))\n    return s;\n  const r = [];\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === \"\\\\\" && i + 1 < s.length)\n      i++;\n    r.push(s[i++]);\n  }\n  return r.join(\"\");\n}\nfunction createTextMatcher(selector, internal) {\n  if (selector[0] === \"/\" && selector.lastIndexOf(\"/\") > 0) {\n    const lastSlash = selector.lastIndexOf(\"/\");\n    const re = new RegExp(selector.substring(1, lastSlash), selector.substring(lastSlash + 1));\n    return { matcher: (elementText2) => re.test(elementText2.full), kind: \"regex\" };\n  }\n  const unquote = internal ? JSON.parse.bind(JSON) : cssUnquote;\n  let strict = false;\n  if (selector.length > 1 && selector[0] === '\"' && selector[selector.length - 1] === '\"') {\n    selector = unquote(selector);\n    strict = true;\n  } else if (internal && selector.length > 1 && selector[0] === '\"' && selector[selector.length - 2] === '\"' && selector[selector.length - 1] === \"i\") {\n    selector = unquote(selector.substring(0, selector.length - 1));\n    strict = false;\n  } else if (internal && selector.length > 1 && selector[0] === '\"' && selector[selector.length - 2] === '\"' && selector[selector.length - 1] === \"s\") {\n    selector = unquote(selector.substring(0, selector.length - 1));\n    strict = true;\n  } else if (selector.length > 1 && selector[0] === \"'\" && selector[selector.length - 1] === \"'\") {\n    selector = unquote(selector);\n    strict = true;\n  }\n  selector = normalizeWhiteSpace(selector);\n  if (strict) {\n    if (internal)\n      return { kind: \"strict\", matcher: (elementText2) => elementText2.normalized === selector };\n    const strictTextNodeMatcher = (elementText2) => {\n      if (!selector && !elementText2.immediate.length)\n        return true;\n      return elementText2.immediate.some((s) => normalizeWhiteSpace(s) === selector);\n    };\n    return { matcher: strictTextNodeMatcher, kind: \"strict\" };\n  }\n  selector = selector.toLowerCase();\n  return { kind: \"lax\", matcher: (elementText2) => elementText2.normalized.toLowerCase().includes(selector) };\n}\nvar ExpectedTextMatcher = class {\n  constructor(expected) {\n    this._normalizeWhiteSpace = expected.normalizeWhiteSpace;\n    this._ignoreCase = expected.ignoreCase;\n    this._string = expected.matchSubstring ? void 0 : this.normalize(expected.string);\n    this._substring = expected.matchSubstring ? this.normalize(expected.string) : void 0;\n    if (expected.regexSource) {\n      const flags = new Set((expected.regexFlags || \"\").split(\"\"));\n      if (expected.ignoreCase === false)\n        flags.delete(\"i\");\n      if (expected.ignoreCase === true)\n        flags.add(\"i\");\n      this._regex = new RegExp(expected.regexSource, [...flags].join(\"\"));\n    }\n  }\n  matches(text) {\n    if (!this._regex)\n      text = this.normalize(text);\n    if (this._string !== void 0)\n      return text === this._string;\n    if (this._substring !== void 0)\n      return text.includes(this._substring);\n    if (this._regex)\n      return !!this._regex.test(text);\n    return false;\n  }\n  normalize(s) {\n    if (!s)\n      return s;\n    if (this._normalizeWhiteSpace)\n      s = normalizeWhiteSpace(s);\n    if (this._ignoreCase)\n      s = s.toLocaleLowerCase();\n    return s;\n  }\n};\nfunction deepEquals(a, b) {\n  if (a === b)\n    return true;\n  if (a && b && typeof a === \"object\" && typeof b === \"object\") {\n    if (a.constructor !== b.constructor)\n      return false;\n    if (Array.isArray(a)) {\n      if (a.length !== b.length)\n        return false;\n      for (let i = 0; i < a.length; ++i) {\n        if (!deepEquals(a[i], b[i]))\n          return false;\n      }\n      return true;\n    }\n    if (a instanceof RegExp)\n      return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf)\n      return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString)\n      return a.toString() === b.toString();\n    const keys = Object.keys(a);\n    if (keys.length !== Object.keys(b).length)\n      return false;\n    for (let i = 0; i < keys.length; ++i) {\n      if (!b.hasOwnProperty(keys[i]))\n        return false;\n    }\n    for (const key of keys) {\n      if (!deepEquals(a[key], b[key]))\n        return false;\n    }\n    return true;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\")\n    return isNaN(a) && isNaN(b);\n  return false;\n}\n";
});

// node_modules/playwright-core/lib/generated/utilityScriptSource.js
var require_utilityScriptSource = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.source = undefined;
  var source = exports.source = "\nvar __commonJS = obj => {\n  let required = false;\n  let result;\n  return function __require() {\n    if (!required) {\n      required = true;\n      let fn;\n      for (const name in obj) { fn = obj[name]; break; }\n      const module = { exports: {} };\n      fn(module.exports, module);\n      result = module.exports;\n    }\n    return result;\n  }\n};\nvar __export = (target, all) => {for (var name in all) target[name] = all[name];};\nvar __toESM = mod => ({ ...mod, 'default': mod });\nvar __toCommonJS = mod => ({ ...mod, __esModule: true });\n\n\n// packages/playwright-core/src/server/injected/utilityScript.ts\nvar utilityScript_exports = {};\n__export(utilityScript_exports, {\n  UtilityScript: () => UtilityScript\n});\nmodule.exports = __toCommonJS(utilityScript_exports);\n\n// packages/playwright-core/src/server/isomorphic/utilityScriptSerializers.ts\nfunction source() {\n  function isRegExp(obj) {\n    try {\n      return obj instanceof RegExp || Object.prototype.toString.call(obj) === \"[object RegExp]\";\n    } catch (error) {\n      return false;\n    }\n  }\n  function isDate(obj) {\n    try {\n      return obj instanceof Date || Object.prototype.toString.call(obj) === \"[object Date]\";\n    } catch (error) {\n      return false;\n    }\n  }\n  function isURL(obj) {\n    try {\n      return obj instanceof URL || Object.prototype.toString.call(obj) === \"[object URL]\";\n    } catch (error) {\n      return false;\n    }\n  }\n  function isError(obj) {\n    var _a;\n    try {\n      return obj instanceof Error || obj && ((_a = Object.getPrototypeOf(obj)) == null ? void 0 : _a.name) === \"Error\";\n    } catch (error) {\n      return false;\n    }\n  }\n  function parseEvaluationResultValue2(value, handles = [], refs = /* @__PURE__ */ new Map()) {\n    if (Object.is(value, void 0))\n      return void 0;\n    if (typeof value === \"object\" && value) {\n      if (\"ref\" in value)\n        return refs.get(value.ref);\n      if (\"v\" in value) {\n        if (value.v === \"undefined\")\n          return void 0;\n        if (value.v === \"null\")\n          return null;\n        if (value.v === \"NaN\")\n          return NaN;\n        if (value.v === \"Infinity\")\n          return Infinity;\n        if (value.v === \"-Infinity\")\n          return -Infinity;\n        if (value.v === \"-0\")\n          return -0;\n        return void 0;\n      }\n      if (\"d\" in value)\n        return new Date(value.d);\n      if (\"u\" in value)\n        return new URL(value.u);\n      if (\"bi\" in value)\n        return BigInt(value.bi);\n      if (\"r\" in value)\n        return new RegExp(value.r.p, value.r.f);\n      if (\"a\" in value) {\n        const result2 = [];\n        refs.set(value.id, result2);\n        for (const a of value.a)\n          result2.push(parseEvaluationResultValue2(a, handles, refs));\n        return result2;\n      }\n      if (\"o\" in value) {\n        const result2 = {};\n        refs.set(value.id, result2);\n        for (const { k, v } of value.o)\n          result2[k] = parseEvaluationResultValue2(v, handles, refs);\n        return result2;\n      }\n      if (\"h\" in value)\n        return handles[value.h];\n    }\n    return value;\n  }\n  function serializeAsCallArgument2(value, handleSerializer) {\n    return serialize(value, handleSerializer, { visited: /* @__PURE__ */ new Map(), lastId: 0 });\n  }\n  function serialize(value, handleSerializer, visitorInfo) {\n    if (value && typeof value === \"object\") {\n      if (typeof globalThis.Window === \"function\" && value instanceof globalThis.Window)\n        return \"ref: <Window>\";\n      if (typeof globalThis.Document === \"function\" && value instanceof globalThis.Document)\n        return \"ref: <Document>\";\n      if (typeof globalThis.Node === \"function\" && value instanceof globalThis.Node)\n        return \"ref: <Node>\";\n    }\n    return innerSerialize(value, handleSerializer, visitorInfo);\n  }\n  function innerSerialize(value, handleSerializer, visitorInfo) {\n    var _a;\n    const result2 = handleSerializer(value);\n    if (\"fallThrough\" in result2)\n      value = result2.fallThrough;\n    else\n      return result2;\n    if (typeof value === \"symbol\")\n      return { v: \"undefined\" };\n    if (Object.is(value, void 0))\n      return { v: \"undefined\" };\n    if (Object.is(value, null))\n      return { v: \"null\" };\n    if (Object.is(value, NaN))\n      return { v: \"NaN\" };\n    if (Object.is(value, Infinity))\n      return { v: \"Infinity\" };\n    if (Object.is(value, -Infinity))\n      return { v: \"-Infinity\" };\n    if (Object.is(value, -0))\n      return { v: \"-0\" };\n    if (typeof value === \"boolean\")\n      return value;\n    if (typeof value === \"number\")\n      return value;\n    if (typeof value === \"string\")\n      return value;\n    if (typeof value === \"bigint\")\n      return { bi: value.toString() };\n    if (isError(value)) {\n      const error = value;\n      if ((_a = error.stack) == null ? void 0 : _a.startsWith(error.name + \": \" + error.message)) {\n        return error.stack;\n      }\n      return `${error.name}: ${error.message}\n${error.stack}`;\n    }\n    if (isDate(value))\n      return { d: value.toJSON() };\n    if (isURL(value))\n      return { u: value.toJSON() };\n    if (isRegExp(value))\n      return { r: { p: value.source, f: value.flags } };\n    const id = visitorInfo.visited.get(value);\n    if (id)\n      return { ref: id };\n    if (Array.isArray(value)) {\n      const a = [];\n      const id2 = ++visitorInfo.lastId;\n      visitorInfo.visited.set(value, id2);\n      for (let i = 0; i < value.length; ++i)\n        a.push(serialize(value[i], handleSerializer, visitorInfo));\n      return { a, id: id2 };\n    }\n    if (typeof value === \"object\") {\n      const o = [];\n      const id2 = ++visitorInfo.lastId;\n      visitorInfo.visited.set(value, id2);\n      for (const name of Object.keys(value)) {\n        let item;\n        try {\n          item = value[name];\n        } catch (e) {\n          continue;\n        }\n        if (name === \"toJSON\" && typeof item === \"function\")\n          o.push({ k: name, v: { o: [], id: 0 } });\n        else\n          o.push({ k: name, v: serialize(item, handleSerializer, visitorInfo) });\n      }\n      let jsonWrapper;\n      try {\n        if (o.length === 0 && value.toJSON && typeof value.toJSON === \"function\")\n          jsonWrapper = { value: value.toJSON() };\n      } catch (e) {\n      }\n      if (jsonWrapper)\n        return innerSerialize(jsonWrapper.value, handleSerializer, visitorInfo);\n      return { o, id: id2 };\n    }\n  }\n  return { parseEvaluationResultValue: parseEvaluationResultValue2, serializeAsCallArgument: serializeAsCallArgument2 };\n}\nvar result = source();\nvar parseEvaluationResultValue = result.parseEvaluationResultValue;\nvar serializeAsCallArgument = result.serializeAsCallArgument;\n\n// packages/playwright-core/src/server/injected/utilityScript.ts\nvar UtilityScript = class {\n  constructor() {\n    this.serializeAsCallArgument = serializeAsCallArgument;\n    this.parseEvaluationResultValue = parseEvaluationResultValue;\n  }\n  evaluate(isFunction, returnByValue, exposeUtilityScript, expression, argCount, ...argsAndHandles) {\n    const args = argsAndHandles.slice(0, argCount);\n    const handles = argsAndHandles.slice(argCount);\n    const parameters = [];\n    for (let i = 0; i < args.length; i++)\n      parameters[i] = this.parseEvaluationResultValue(args[i], handles);\n    if (exposeUtilityScript)\n      parameters.unshift(this);\n    let result2 = globalThis.eval(expression);\n    if (isFunction === true) {\n      result2 = result2(...parameters);\n    } else if (isFunction === false) {\n      result2 = result2;\n    } else {\n      if (typeof result2 === \"function\")\n        result2 = result2(...parameters);\n    }\n    return returnByValue ? this._promiseAwareJsonValueNoThrow(result2) : result2;\n  }\n  jsonValue(returnByValue, value) {\n    if (Object.is(value, void 0))\n      return void 0;\n    return serializeAsCallArgument(value, (value2) => ({ fallThrough: value2 }));\n  }\n  _promiseAwareJsonValueNoThrow(value) {\n    const safeJson = (value2) => {\n      try {\n        return this.jsonValue(true, value2);\n      } catch (e) {\n        return void 0;\n      }\n    };\n    if (value && typeof value === \"object\" && typeof value.then === \"function\") {\n      return (async () => {\n        const promiseValue = await value;\n        return safeJson(promiseValue);\n      })();\n    }\n    return safeJson(value);\n  }\n};\n";
});

// node_modules/playwright-core/lib/server/isomorphic/utilityScriptSerializers.js
var require_utilityScriptSerializers = __commonJS((exports) => {
  var source = function() {
    function isRegExp(obj) {
      try {
        return obj instanceof RegExp || Object.prototype.toString.call(obj) === "[object RegExp]";
      } catch (error) {
        return false;
      }
    }
    function isDate(obj) {
      try {
        return obj instanceof Date || Object.prototype.toString.call(obj) === "[object Date]";
      } catch (error) {
        return false;
      }
    }
    function isURL(obj) {
      try {
        return obj instanceof URL || Object.prototype.toString.call(obj) === "[object URL]";
      } catch (error) {
        return false;
      }
    }
    function isError(obj) {
      try {
        var _Object$getPrototypeO;
        return obj instanceof Error || obj && ((_Object$getPrototypeO = Object.getPrototypeOf(obj)) === null || _Object$getPrototypeO === undefined ? undefined : _Object$getPrototypeO.name) === "Error";
      } catch (error) {
        return false;
      }
    }
    function parseEvaluationResultValue2(value, handles = [], refs = new Map) {
      if (Object.is(value, undefined))
        return;
      if (typeof value === "object" && value) {
        if ("ref" in value)
          return refs.get(value.ref);
        if ("v" in value) {
          if (value.v === "undefined")
            return;
          if (value.v === "null")
            return null;
          if (value.v === "NaN")
            return NaN;
          if (value.v === "Infinity")
            return Infinity;
          if (value.v === "-Infinity")
            return (-Infinity);
          if (value.v === "-0")
            return -0;
          return;
        }
        if ("d" in value)
          return new Date(value.d);
        if ("u" in value)
          return new URL(value.u);
        if ("bi" in value)
          return BigInt(value.bi);
        if ("r" in value)
          return new RegExp(value.r.p, value.r.f);
        if ("a" in value) {
          const result2 = [];
          refs.set(value.id, result2);
          for (const a of value.a)
            result2.push(parseEvaluationResultValue2(a, handles, refs));
          return result2;
        }
        if ("o" in value) {
          const result2 = {};
          refs.set(value.id, result2);
          for (const {
            k,
            v
          } of value.o)
            result2[k] = parseEvaluationResultValue2(v, handles, refs);
          return result2;
        }
        if ("h" in value)
          return handles[value.h];
      }
      return value;
    }
    function serializeAsCallArgument2(value, handleSerializer) {
      return serialize(value, handleSerializer, {
        visited: new Map,
        lastId: 0
      });
    }
    function serialize(value, handleSerializer, visitorInfo) {
      if (value && typeof value === "object") {
        if (typeof globalThis.Window === "function" && value instanceof globalThis.Window)
          return "ref: <Window>";
        if (typeof globalThis.Document === "function" && value instanceof globalThis.Document)
          return "ref: <Document>";
        if (typeof globalThis.Node === "function" && value instanceof globalThis.Node)
          return "ref: <Node>";
      }
      return innerSerialize(value, handleSerializer, visitorInfo);
    }
    function innerSerialize(value, handleSerializer, visitorInfo) {
      const result2 = handleSerializer(value);
      if ("fallThrough" in result2)
        value = result2.fallThrough;
      else
        return result2;
      if (typeof value === "symbol")
        return {
          v: "undefined"
        };
      if (Object.is(value, undefined))
        return {
          v: "undefined"
        };
      if (Object.is(value, null))
        return {
          v: "null"
        };
      if (Object.is(value, NaN))
        return {
          v: "NaN"
        };
      if (Object.is(value, Infinity))
        return {
          v: "Infinity"
        };
      if (Object.is(value, (-Infinity)))
        return {
          v: "-Infinity"
        };
      if (Object.is(value, -0))
        return {
          v: "-0"
        };
      if (typeof value === "boolean")
        return value;
      if (typeof value === "number")
        return value;
      if (typeof value === "string")
        return value;
      if (typeof value === "bigint")
        return {
          bi: value.toString()
        };
      if (isError(value)) {
        var _error$stack;
        const error = value;
        if ((_error$stack = error.stack) !== null && _error$stack !== undefined && _error$stack.startsWith(error.name + ": " + error.message)) {
          return error.stack;
        }
        return `${error.name}: ${error.message}\n${error.stack}`;
      }
      if (isDate(value))
        return {
          d: value.toJSON()
        };
      if (isURL(value))
        return {
          u: value.toJSON()
        };
      if (isRegExp(value))
        return {
          r: {
            p: value.source,
            f: value.flags
          }
        };
      const id = visitorInfo.visited.get(value);
      if (id)
        return {
          ref: id
        };
      if (Array.isArray(value)) {
        const a = [];
        const id2 = ++visitorInfo.lastId;
        visitorInfo.visited.set(value, id2);
        for (let i = 0;i < value.length; ++i)
          a.push(serialize(value[i], handleSerializer, visitorInfo));
        return {
          a,
          id: id2
        };
      }
      if (typeof value === "object") {
        const o = [];
        const id2 = ++visitorInfo.lastId;
        visitorInfo.visited.set(value, id2);
        for (const name of Object.keys(value)) {
          let item;
          try {
            item = value[name];
          } catch (e) {
            continue;
          }
          if (name === "toJSON" && typeof item === "function")
            o.push({
              k: name,
              v: {
                o: [],
                id: 0
              }
            });
          else
            o.push({
              k: name,
              v: serialize(item, handleSerializer, visitorInfo)
            });
        }
        let jsonWrapper;
        try {
          if (o.length === 0 && value.toJSON && typeof value.toJSON === "function")
            jsonWrapper = {
              value: value.toJSON()
            };
        } catch (e) {
        }
        if (jsonWrapper)
          return innerSerialize(jsonWrapper.value, handleSerializer, visitorInfo);
        return {
          o,
          id: id2
        };
      }
    }
    return {
      parseEvaluationResultValue: parseEvaluationResultValue2,
      serializeAsCallArgument: serializeAsCallArgument2
    };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.serializeAsCallArgument = exports.parseEvaluationResultValue = undefined;
  exports.source = source;
  var result = source();
  var parseEvaluationResultValue = exports.parseEvaluationResultValue = result.parseEvaluationResultValue;
  var serializeAsCallArgument = exports.serializeAsCallArgument = result.serializeAsCallArgument;
});

// node_modules/playwright-core/lib/server/javascript.js
var require_javascript = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  async function evaluate(context, returnByValue, pageFunction, ...args) {
    return evaluateExpression(context, String(pageFunction), {
      returnByValue,
      isFunction: typeof pageFunction === "function"
    }, ...args);
  }
  async function evaluateExpression(context, expression, options, ...args) {
    const utilityScript = await context.utilityScript();
    expression = normalizeEvaluationExpression(expression, options.isFunction);
    const handles = [];
    const toDispose = [];
    const pushHandle = (handle) => {
      handles.push(handle);
      return handles.length - 1;
    };
    args = args.map((arg) => (0, _utilityScriptSerializers.serializeAsCallArgument)(arg, (handle) => {
      if (handle instanceof JSHandle) {
        if (!handle._objectId)
          return {
            fallThrough: handle._value
          };
        if (handle._disposed)
          throw new JavaScriptErrorInEvaluate("JSHandle is disposed!");
        const adopted = context.adoptIfNeeded(handle);
        if (adopted === null)
          return {
            h: pushHandle(Promise.resolve(handle))
          };
        toDispose.push(adopted);
        return {
          h: pushHandle(adopted)
        };
      }
      return {
        fallThrough: handle
      };
    }));
    const utilityScriptObjectIds = [];
    for (const handle of await Promise.all(handles)) {
      if (handle._context !== context)
        throw new JavaScriptErrorInEvaluate("JSHandles can be evaluated only in the context they were created!");
      utilityScriptObjectIds.push(handle._objectId);
    }
    const utilityScriptValues = [options.isFunction, options.returnByValue, options.exposeUtilityScript, expression, args.length, ...args];
    const script = `(utilityScript, ...args) => utilityScript.evaluate(...args)`;
    try {
      return await context.evaluateWithArguments(script, options.returnByValue || false, utilityScript, utilityScriptValues, utilityScriptObjectIds);
    } finally {
      toDispose.map((handlePromise) => handlePromise.then((handle) => handle.dispose()));
    }
  }
  var parseUnserializableValue = function(unserializableValue) {
    if (unserializableValue === "NaN")
      return NaN;
    if (unserializableValue === "Infinity")
      return Infinity;
    if (unserializableValue === "-Infinity")
      return (-Infinity);
    if (unserializableValue === "-0")
      return -0;
  };
  var normalizeEvaluationExpression = function(expression, isFunction) {
    expression = expression.trim();
    if (isFunction) {
      try {
        new Function("(" + expression + ")");
      } catch (e1) {
        if (expression.startsWith("async "))
          expression = "async function " + expression.substring("async ".length);
        else
          expression = "function " + expression;
        try {
          new Function("(" + expression + ")");
        } catch (e2) {
          throw new Error("Passed function is not well-serializable!");
        }
      }
    }
    if (/^(async)?\s*function(\s|\()/.test(expression))
      expression = "(" + expression + ")";
    return expression;
  };
  var isJavaScriptErrorInEvaluate = function(error) {
    return error instanceof JavaScriptErrorInEvaluate;
  };
  var sparseArrayToString = function(entries) {
    const arrayEntries = [];
    for (const {
      name,
      value
    } of entries) {
      const index = +name;
      if (isNaN(index) || index < 0)
        continue;
      arrayEntries.push({
        index,
        value
      });
    }
    arrayEntries.sort((a, b) => a.index - b.index);
    let lastIndex = -1;
    const tokens = [];
    for (const {
      index,
      value
    } of arrayEntries) {
      const emptyItems = index - lastIndex - 1;
      if (emptyItems === 1)
        tokens.push(`empty`);
      else if (emptyItems > 1)
        tokens.push(`empty x ${emptyItems}`);
      tokens.push(String(value));
      lastIndex = index;
    }
    return "[" + tokens.join(", ") + "]";
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.JavaScriptErrorInEvaluate = exports.JSHandle = exports.ExecutionContext = undefined;
  exports.evaluate = evaluate;
  exports.evaluateExpression = evaluateExpression;
  exports.isJavaScriptErrorInEvaluate = isJavaScriptErrorInEvaluate;
  exports.normalizeEvaluationExpression = normalizeEvaluationExpression;
  exports.parseUnserializableValue = parseUnserializableValue;
  exports.sparseArrayToString = sparseArrayToString;
  var utilityScriptSource = _interopRequireWildcard(require_utilityScriptSource());
  var _utilityScriptSerializers = require_utilityScriptSerializers();
  var _instrumentation = require_instrumentation();
  var _manualPromise = require_manualPromise();

  class ExecutionContext extends _instrumentation.SdkObject {
    constructor(parent, delegate, worldNameForTest) {
      super(parent, "execution-context");
      this._delegate = undefined;
      this._utilityScriptPromise = undefined;
      this._contextDestroyedScope = new _manualPromise.LongStandingScope;
      this.worldNameForTest = undefined;
      this.worldNameForTest = worldNameForTest;
      this._delegate = delegate;
    }
    contextDestroyed(reason) {
      this._contextDestroyedScope.close(new Error(reason));
    }
    async _raceAgainstContextDestroyed(promise) {
      return this._contextDestroyedScope.race(promise);
    }
    rawEvaluateJSON(expression) {
      return this._raceAgainstContextDestroyed(this._delegate.rawEvaluateJSON(expression));
    }
    rawEvaluateHandle(expression) {
      return this._raceAgainstContextDestroyed(this._delegate.rawEvaluateHandle(expression));
    }
    rawCallFunctionNoReply(func, ...args) {
      this._delegate.rawCallFunctionNoReply(func, ...args);
    }
    evaluateWithArguments(expression, returnByValue, utilityScript, values, objectIds) {
      return this._raceAgainstContextDestroyed(this._delegate.evaluateWithArguments(expression, returnByValue, utilityScript, values, objectIds));
    }
    getProperties(context, objectId) {
      return this._raceAgainstContextDestroyed(this._delegate.getProperties(context, objectId));
    }
    createHandle(remoteObject) {
      return this._delegate.createHandle(this, remoteObject);
    }
    releaseHandle(objectId) {
      return this._delegate.releaseHandle(objectId);
    }
    adoptIfNeeded(handle) {
      return null;
    }
    utilityScript() {
      if (!this._utilityScriptPromise) {
        const source = `
      (() => {
        const module = {};
        ${utilityScriptSource.source}
        return new (module.exports.UtilityScript())();
      })();`;
        this._utilityScriptPromise = this._raceAgainstContextDestroyed(this._delegate.rawEvaluateHandle(source).then((objectId) => new JSHandle(this, "object", "UtilityScript", objectId)));
      }
      return this._utilityScriptPromise;
    }
    async objectCount(objectId) {
      return this._delegate.objectCount(objectId);
    }
    async doSlowMo() {
    }
  }
  exports.ExecutionContext = ExecutionContext;

  class JSHandle extends _instrumentation.SdkObject {
    constructor(context, type, preview, objectId, value) {
      super(context, "handle");
      this.__jshandle = true;
      this._context = undefined;
      this._disposed = false;
      this._objectId = undefined;
      this._value = undefined;
      this._objectType = undefined;
      this._preview = undefined;
      this._previewCallback = undefined;
      this._context = context;
      this._objectId = objectId;
      this._value = value;
      this._objectType = type;
      this._preview = this._objectId ? preview || `JSHandle@${this._objectType}` : String(value);
      if (this._objectId && globalThis.leakedJSHandles)
        globalThis.leakedJSHandles.set(this, new Error("Leaked JSHandle"));
    }
    callFunctionNoReply(func, arg) {
      this._context.rawCallFunctionNoReply(func, this, arg);
    }
    async evaluate(pageFunction, arg) {
      return evaluate(this._context, true, pageFunction, this, arg);
    }
    async evaluateHandle(pageFunction, arg) {
      return evaluate(this._context, false, pageFunction, this, arg);
    }
    async evaluateExpression(expression, options, arg) {
      const value = await evaluateExpression(this._context, expression, {
        ...options,
        returnByValue: true
      }, this, arg);
      await this._context.doSlowMo();
      return value;
    }
    async evaluateExpressionHandle(expression, options, arg) {
      const value = await evaluateExpression(this._context, expression, {
        ...options,
        returnByValue: false
      }, this, arg);
      await this._context.doSlowMo();
      return value;
    }
    async getProperty(propertyName) {
      const objectHandle = await this.evaluateHandle((object, propertyName2) => {
        const result2 = {
          __proto__: null
        };
        result2[propertyName2] = object[propertyName2];
        return result2;
      }, propertyName);
      const properties = await objectHandle.getProperties();
      const result = properties.get(propertyName);
      objectHandle.dispose();
      return result;
    }
    async getProperties() {
      if (!this._objectId)
        return new Map;
      return this._context.getProperties(this._context, this._objectId);
    }
    rawValue() {
      return this._value;
    }
    async jsonValue() {
      if (!this._objectId)
        return this._value;
      const utilityScript = await this._context.utilityScript();
      const script = `(utilityScript, ...args) => utilityScript.jsonValue(...args)`;
      return this._context.evaluateWithArguments(script, true, utilityScript, [true], [this._objectId]);
    }
    asElement() {
      return null;
    }
    dispose() {
      if (this._disposed)
        return;
      this._disposed = true;
      if (this._objectId) {
        this._context.releaseHandle(this._objectId).catch((e) => {
        });
        if (globalThis.leakedJSHandles)
          globalThis.leakedJSHandles.delete(this);
      }
    }
    toString() {
      return this._preview;
    }
    _setPreviewCallback(callback) {
      this._previewCallback = callback;
    }
    preview() {
      return this._preview;
    }
    worldNameForTest() {
      return this._context.worldNameForTest;
    }
    _setPreview(preview) {
      this._preview = preview;
      if (this._previewCallback)
        this._previewCallback(preview);
    }
    async objectCount() {
      if (!this._objectId)
        throw new Error("Can only count objects for a handle that points to the constructor prototype");
      return this._context.objectCount(this._objectId);
    }
  }
  exports.JSHandle = JSHandle;

  class JavaScriptErrorInEvaluate extends Error {
  }
  exports.JavaScriptErrorInEvaluate = JavaScriptErrorInEvaluate;
});

// node_modules/playwright-core/lib/server/progress.js
var require_progress = __commonJS((exports) => {
  async function runCleanup(cleanup) {
    try {
      await cleanup();
    } catch (e) {
    }
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ProgressController = undefined;
  var _errors = require_errors();
  var _utils = require_utils3();
  var _manualPromise = require_manualPromise();

  class ProgressController {
    constructor(metadata, sdkObject) {
      this._forceAbortPromise = new _manualPromise.ManualPromise;
      this._cleanups = [];
      this._logName = "api";
      this._state = "before";
      this._deadline = 0;
      this._timeout = 0;
      this.metadata = undefined;
      this.instrumentation = undefined;
      this.sdkObject = undefined;
      this.metadata = metadata;
      this.sdkObject = sdkObject;
      this.instrumentation = sdkObject.instrumentation;
      this._forceAbortPromise.catch((e) => null);
    }
    setLogName(logName) {
      this._logName = logName;
    }
    abort(error) {
      this._forceAbortPromise.reject(error);
    }
    async run(task, timeout) {
      var _this$sdkObject$attri;
      if (timeout) {
        this._timeout = timeout;
        this._deadline = timeout ? (0, _utils.monotonicTime)() + timeout : 0;
      }
      (0, _utils.assert)(this._state === "before");
      this._state = "running";
      (_this$sdkObject$attri = this.sdkObject.attribution.context) === null || _this$sdkObject$attri === undefined || _this$sdkObject$attri._activeProgressControllers.add(this);
      const progress2 = {
        log: (message) => {
          if (this._state === "running")
            this.metadata.log.push(message);
          this.instrumentation.onCallLog(this.sdkObject, this.metadata, this._logName, message);
        },
        timeUntilDeadline: () => this._deadline ? this._deadline - (0, _utils.monotonicTime)() : 2147483647,
        isRunning: () => this._state === "running",
        cleanupWhenAborted: (cleanup) => {
          if (this._state === "running")
            this._cleanups.push(cleanup);
          else
            runCleanup(cleanup);
        },
        throwIfAborted: () => {
          if (this._state === "aborted")
            throw new AbortedError;
        },
        beforeInputAction: async (element) => {
          await this.instrumentation.onBeforeInputAction(this.sdkObject, this.metadata, element);
        },
        metadata: this.metadata
      };
      const timeoutError = new _errors.TimeoutError(`Timeout ${this._timeout}ms exceeded.`);
      const timer = setTimeout(() => this._forceAbortPromise.reject(timeoutError), progress2.timeUntilDeadline());
      try {
        const promise = task(progress2);
        const result = await Promise.race([promise, this._forceAbortPromise]);
        this._state = "finished";
        return result;
      } catch (e) {
        this._state = "aborted";
        await Promise.all(this._cleanups.splice(0).map(runCleanup));
        throw e;
      } finally {
        var _this$sdkObject$attri2;
        (_this$sdkObject$attri2 = this.sdkObject.attribution.context) === null || _this$sdkObject$attri2 === undefined || _this$sdkObject$attri2._activeProgressControllers.delete(this);
        clearTimeout(timer);
      }
    }
  }
  exports.ProgressController = ProgressController;

  class AbortedError extends Error {
  }
});

// node_modules/playwright-core/lib/server/fileUploadUtils.js
var require_fileUploadUtils = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  async function filesExceedUploadLimit(files) {
    const sizes = await Promise.all(files.map(async (file) => (await _fs.default.promises.stat(file)).size));
    return sizes.reduce((total, size) => total + size, 0) >= _utils.fileUploadSizeLimit;
  }
  async function prepareFilesForUpload(frame, params) {
    var _fileBuffers;
    const {
      payloads,
      streams
    } = params;
    let {
      localPaths
    } = params;
    if ([payloads, localPaths, streams].filter(Boolean).length !== 1)
      throw new Error("Exactly one of payloads, localPaths and streams must be provided");
    if (streams)
      localPaths = streams.map((c) => c.path());
    if (localPaths) {
      for (const p of localPaths)
        (0, _utils.assert)(_path.default.isAbsolute(p) && _path.default.resolve(p) === p, "Paths provided to localPaths must be absolute and fully resolved.");
    }
    let fileBuffers = payloads;
    if (!frame._page._browserContext._browser._isCollocatedWithServer) {
      if (localPaths) {
        if (await filesExceedUploadLimit(localPaths))
          throw new Error("Cannot transfer files larger than 50Mb to a browser not co-located with the server");
        fileBuffers = await Promise.all(localPaths.map(async (item) => {
          return {
            name: _path.default.basename(item),
            buffer: await _fs.default.promises.readFile(item),
            lastModifiedMs: (await _fs.default.promises.stat(item)).mtimeMs
          };
        }));
        localPaths = undefined;
      }
    }
    const filePayloads = (_fileBuffers = fileBuffers) === null || _fileBuffers === undefined ? undefined : _fileBuffers.map((payload) => ({
      name: payload.name,
      mimeType: payload.mimeType || _utilsBundle.mime.getType(payload.name) || "application/octet-stream",
      buffer: payload.buffer.toString("base64"),
      lastModifiedMs: payload.lastModifiedMs
    }));
    return {
      localPaths,
      filePayloads
    };
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.prepareFilesForUpload = prepareFilesForUpload;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _utils = require_utils3();
  var _utilsBundle = require_utilsBundle();
});

// node_modules/playwright-core/lib/server/dom.js
var require_dom = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var isNonRecoverableDOMError = function(error) {
    return error instanceof NonRecoverableDOMError;
  };
  var throwRetargetableDOMError = function(result) {
    if (result === "error:notconnected")
      throw new Error("Element is not attached to the DOM");
    return result;
  };
  var assertDone = function(result) {
  };
  var roundPoint = function(point) {
    return {
      x: (point.x * 100 | 0) / 100,
      y: (point.y * 100 | 0) / 100
    };
  };
  var compensateHalfIntegerRoundingError = function(point) {
    const remainderX = point.x - Math.floor(point.x);
    if (remainderX > 0.49 && remainderX < 0.51)
      point.x -= 0.02;
    const remainderY = point.y - Math.floor(point.y);
    if (remainderY > 0.49 && remainderY < 0.51)
      point.y -= 0.02;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NonRecoverableDOMError = exports.FrameExecutionContext = exports.ElementHandle = undefined;
  exports.assertDone = assertDone;
  exports.isNonRecoverableDOMError = isNonRecoverableDOMError;
  exports.kUnableToAdoptErrorMessage = undefined;
  exports.throwRetargetableDOMError = throwRetargetableDOMError;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var injectedScriptSource = _interopRequireWildcard(require_injectedScriptSource());
  var _protocolError = require_protocolError();
  var js = _interopRequireWildcard(require_javascript());
  var _progress = require_progress();
  var _utils = require_utils3();
  var _fileUploadUtils = require_fileUploadUtils();

  class NonRecoverableDOMError extends Error {
  }
  exports.NonRecoverableDOMError = NonRecoverableDOMError;

  class FrameExecutionContext extends js.ExecutionContext {
    constructor(delegate, frame, world) {
      super(frame, delegate, world || "content-script");
      this.frame = undefined;
      this._injectedScriptPromise = undefined;
      this.world = undefined;
      this.frame = frame;
      this.world = world;
    }
    adoptIfNeeded(handle) {
      if (handle instanceof ElementHandle && handle._context !== this)
        return this.frame._page._delegate.adoptElementHandle(handle, this);
      return null;
    }
    async evaluate(pageFunction, arg) {
      return js.evaluate(this, true, pageFunction, arg);
    }
    async evaluateHandle(pageFunction, arg) {
      return js.evaluate(this, false, pageFunction, arg);
    }
    async evaluateExpression(expression, options, arg) {
      return js.evaluateExpression(this, expression, {
        ...options,
        returnByValue: true
      }, arg);
    }
    async evaluateExpressionHandle(expression, options, arg) {
      return js.evaluateExpression(this, expression, {
        ...options,
        returnByValue: false
      }, arg);
    }
    createHandle(remoteObject) {
      if (this.frame._page._delegate.isElementHandle(remoteObject))
        return new ElementHandle(this, remoteObject.objectId);
      return super.createHandle(remoteObject);
    }
    injectedScript() {
      if (!this._injectedScriptPromise) {
        const custom = [];
        const selectorsRegistry = this.frame._page.context().selectors();
        for (const [name, {
          source: source2
        }] of selectorsRegistry._engines)
          custom.push(`{ name: '${name}', engine: (${source2}) }`);
        const sdkLanguage = this.frame.attribution.playwright.options.sdkLanguage;
        const source = `
        (() => {
        const module = {};
        ${injectedScriptSource.source}
        return new (module.exports.InjectedScript())(
          globalThis,
          ${(0, _utils.isUnderTest)()},
          "${sdkLanguage}",
          ${JSON.stringify(selectorsRegistry.testIdAttributeName())},
          ${this.frame._page._delegate.rafCountForStablePosition()},
          "${this.frame._page._browserContext._browser.options.name}",
          [${custom.join(",\n")}]
        );
        })();
      `;
        this._injectedScriptPromise = this.rawEvaluateHandle(source).then((objectId) => new js.JSHandle(this, "object", "InjectedScript", objectId));
      }
      return this._injectedScriptPromise;
    }
  }
  exports.FrameExecutionContext = FrameExecutionContext;

  class ElementHandle extends js.JSHandle {
    constructor(context, objectId) {
      super(context, "node", undefined, objectId);
      this.__elementhandle = true;
      this._page = undefined;
      this._frame = undefined;
      this._page = context.frame._page;
      this._frame = context.frame;
      this._initializePreview().catch((e) => {
      });
    }
    async _initializePreview() {
      const utility = await this._context.injectedScript();
      this._setPreview(await utility.evaluate((injected, e) => "JSHandle@" + injected.previewNode(e), this));
    }
    asElement() {
      return this;
    }
    async evaluateInUtility(pageFunction, arg) {
      try {
        const utility = await this._frame._utilityContext();
        return await utility.evaluate(pageFunction, [await utility.injectedScript(), this, arg]);
      } catch (e) {
        if (js.isJavaScriptErrorInEvaluate(e) || (0, _protocolError.isSessionClosedError)(e))
          throw e;
        return "error:notconnected";
      }
    }
    async evaluateHandleInUtility(pageFunction, arg) {
      try {
        const utility = await this._frame._utilityContext();
        return await utility.evaluateHandle(pageFunction, [await utility.injectedScript(), this, arg]);
      } catch (e) {
        if (js.isJavaScriptErrorInEvaluate(e) || (0, _protocolError.isSessionClosedError)(e))
          throw e;
        return "error:notconnected";
      }
    }
    async ownerFrame() {
      const frameId = await this._page._delegate.getOwnerFrame(this);
      if (!frameId)
        return null;
      const frame = this._page._frameManager.frame(frameId);
      if (frame)
        return frame;
      for (const page of this._page._browserContext.pages()) {
        const frame2 = page._frameManager.frame(frameId);
        if (frame2)
          return frame2;
      }
      return null;
    }
    async isIframeElement() {
      return this.evaluateInUtility(([injected, node]) => node && (node.nodeName === "IFRAME" || node.nodeName === "FRAME"), {});
    }
    async contentFrame() {
      const isFrameElement = throwRetargetableDOMError(await this.isIframeElement());
      if (!isFrameElement)
        return null;
      return this._page._delegate.getContentFrame(this);
    }
    async getAttribute(metadata, name) {
      return this._frame.getAttribute(metadata, ":scope", name, {}, this);
    }
    async inputValue(metadata) {
      return this._frame.inputValue(metadata, ":scope", {}, this);
    }
    async textContent(metadata) {
      return this._frame.textContent(metadata, ":scope", {}, this);
    }
    async innerText(metadata) {
      return this._frame.innerText(metadata, ":scope", {}, this);
    }
    async innerHTML(metadata) {
      return this._frame.innerHTML(metadata, ":scope", {}, this);
    }
    async dispatchEvent(metadata, type, eventInit = {}) {
      return this._frame.dispatchEvent(metadata, ":scope", type, eventInit, {}, this);
    }
    async _scrollRectIntoViewIfNeeded(rect) {
      return await this._page._delegate.scrollRectIntoViewIfNeeded(this, rect);
    }
    async _waitAndScrollIntoViewIfNeeded(progress2, waitForVisible) {
      const result = await this._retryAction(progress2, "scroll into view", async () => {
        progress2.log(`  waiting for element to be stable`);
        const waitResult = await this.evaluateInUtility(async ([injected, node, {
          waitForVisible: waitForVisible2
        }]) => {
          return await injected.checkElementStates(node, waitForVisible2 ? ["visible", "stable"] : ["stable"]);
        }, {
          waitForVisible
        });
        if (waitResult)
          return waitResult;
        return await this._scrollRectIntoViewIfNeeded();
      }, {});
      assertDone(throwRetargetableDOMError(result));
    }
    async scrollIntoViewIfNeeded(metadata, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run((progress2) => this._waitAndScrollIntoViewIfNeeded(progress2, false), this._page._timeoutSettings.timeout(options));
    }
    async _clickablePoint() {
      const intersectQuadWithViewport = (quad) => {
        return quad.map((point) => ({
          x: Math.min(Math.max(point.x, 0), metrics.width),
          y: Math.min(Math.max(point.y, 0), metrics.height)
        }));
      };
      const computeQuadArea = (quad) => {
        let area = 0;
        for (let i = 0;i < quad.length; ++i) {
          const p1 = quad[i];
          const p2 = quad[(i + 1) % quad.length];
          area += (p1.x * p2.y - p2.x * p1.y) / 2;
        }
        return Math.abs(area);
      };
      const [quads, metrics] = await Promise.all([this._page._delegate.getContentQuads(this), this._page.mainFrame()._utilityContext().then((utility) => utility.evaluate(() => ({
        width: innerWidth,
        height: innerHeight
      })))]);
      if (!quads || !quads.length)
        return "error:notvisible";
      const filtered = quads.map((quad) => intersectQuadWithViewport(quad)).filter((quad) => computeQuadArea(quad) > 0.99);
      if (!filtered.length)
        return "error:notinviewport";
      const result = {
        x: 0,
        y: 0
      };
      for (const point of filtered[0]) {
        result.x += point.x / 4;
        result.y += point.y / 4;
      }
      compensateHalfIntegerRoundingError(result);
      return result;
    }
    async _offsetPoint(offset) {
      const [box, border] = await Promise.all([this.boundingBox(), this.evaluateInUtility(([injected, node]) => injected.getElementBorderWidth(node), {}).catch((e) => {
      })]);
      if (!box || !border)
        return "error:notvisible";
      if (border === "error:notconnected")
        return border;
      return {
        x: box.x + border.left + offset.x,
        y: box.y + border.top + offset.y
      };
    }
    async _retryAction(progress2, actionName, action, options) {
      let retry = 0;
      const waitTime = [0, 20, 100, 100, 500];
      while (progress2.isRunning()) {
        if (retry) {
          progress2.log(`retrying ${actionName} action${options.trial ? " (trial run)" : ""}, attempt #${retry}`);
          const timeout = waitTime[Math.min(retry - 1, waitTime.length - 1)];
          if (timeout) {
            progress2.log(`  waiting ${timeout}ms`);
            const result2 = await this.evaluateInUtility(([injected, node, timeout2]) => new Promise((f) => setTimeout(f, timeout2)), timeout);
            if (result2 === "error:notconnected")
              return result2;
          }
        } else {
          progress2.log(`attempting ${actionName} action${options.trial ? " (trial run)" : ""}`);
        }
        if (!options.skipLocatorHandlersCheckpoint && !options.force)
          await this._frame._page.performLocatorHandlersCheckpoint(progress2);
        const result = await action(retry);
        ++retry;
        if (result === "error:notvisible") {
          if (options.force)
            throw new NonRecoverableDOMError("Element is not visible");
          progress2.log("  element is not visible");
          continue;
        }
        if (result === "error:notinviewport") {
          if (options.force)
            throw new NonRecoverableDOMError("Element is outside of the viewport");
          progress2.log("  element is outside of the viewport");
          continue;
        }
        if (result === "error:optionsnotfound") {
          progress2.log("  did not find some options");
          continue;
        }
        if (typeof result === "object" && "hitTargetDescription" in result) {
          progress2.log(`  ${result.hitTargetDescription} intercepts pointer events`);
          continue;
        }
        if (typeof result === "object" && "missingState" in result) {
          progress2.log(`  element is not ${result.missingState}`);
          continue;
        }
        return result;
      }
      return "done";
    }
    async _retryPointerAction(progress2, actionName, waitForEnabled, action, options) {
      const skipLocatorHandlersCheckpoint = actionName === "move and up";
      return await this._retryAction(progress2, actionName, async (retry) => {
        const scrollOptions = [undefined, {
          block: "end",
          inline: "end"
        }, {
          block: "center",
          inline: "center"
        }, {
          block: "start",
          inline: "start"
        }];
        const forceScrollOptions = scrollOptions[retry % scrollOptions.length];
        return await this._performPointerAction(progress2, actionName, waitForEnabled, action, forceScrollOptions, options);
      }, {
        ...options,
        skipLocatorHandlersCheckpoint
      });
    }
    async _performPointerAction(progress2, actionName, waitForEnabled, action, forceScrollOptions, options) {
      const {
        force = false,
        position
      } = options;
      const doScrollIntoView = async () => {
        if (forceScrollOptions) {
          return await this.evaluateInUtility(([injected, node, options2]) => {
            if (node.nodeType === 1)
              node.scrollIntoView(options2);
            return "done";
          }, forceScrollOptions);
        }
        return await this._scrollRectIntoViewIfNeeded(position ? {
          x: position.x,
          y: position.y,
          width: 0,
          height: 0
        } : undefined);
      };
      if (this._frame.parentFrame()) {
        progress2.throwIfAborted();
        await doScrollIntoView().catch(() => {
        });
      }
      if (options.__testHookBeforeStable)
        await options.__testHookBeforeStable();
      if (!force) {
        const elementStates = waitForEnabled ? ["visible", "enabled", "stable"] : ["visible", "stable"];
        progress2.log(`  waiting for element to be ${waitForEnabled ? "visible, enabled and stable" : "visible and stable"}`);
        const result = await this.evaluateInUtility(async ([injected, node, {
          elementStates: elementStates2
        }]) => {
          return await injected.checkElementStates(node, elementStates2);
        }, {
          elementStates
        });
        if (result)
          return result;
        progress2.log(`  element is ${waitForEnabled ? "visible, enabled and stable" : "visible and stable"}`);
      }
      if (options.__testHookAfterStable)
        await options.__testHookAfterStable();
      progress2.log("  scrolling into view if needed");
      progress2.throwIfAborted();
      const scrolled = await doScrollIntoView();
      if (scrolled !== "done")
        return scrolled;
      progress2.log("  done scrolling");
      const maybePoint = position ? await this._offsetPoint(position) : await this._clickablePoint();
      if (typeof maybePoint === "string")
        return maybePoint;
      const point = roundPoint(maybePoint);
      progress2.metadata.point = point;
      await progress2.beforeInputAction(this);
      let hitTargetInterceptionHandle;
      if (force) {
        progress2.log(`  forcing action`);
      } else {
        if (options.__testHookBeforeHitTarget)
          await options.__testHookBeforeHitTarget();
        const frameCheckResult = await this._checkFrameIsHitTarget(point);
        if (frameCheckResult === "error:notconnected" || "hitTargetDescription" in frameCheckResult)
          return frameCheckResult;
        const hitPoint = frameCheckResult.framePoint;
        const actionType = actionName === "move and up" ? "drag" : actionName === "hover" || actionName === "tap" ? actionName : "mouse";
        const handle = await this.evaluateHandleInUtility(([injected, node, {
          actionType: actionType2,
          hitPoint: hitPoint2,
          trial
        }]) => injected.setupHitTargetInterceptor(node, actionType2, hitPoint2, trial), {
          actionType,
          hitPoint,
          trial: !!options.trial
        });
        if (handle === "error:notconnected")
          return handle;
        if (!handle._objectId) {
          const error = handle.rawValue();
          if (error === "error:notconnected")
            return error;
          return {
            hitTargetDescription: error
          };
        }
        hitTargetInterceptionHandle = handle;
        progress2.cleanupWhenAborted(() => {
          hitTargetInterceptionHandle.evaluate((h) => h.stop()).catch((e) => {
          });
          hitTargetInterceptionHandle.dispose();
        });
      }
      const actionResult = await this._page._frameManager.waitForSignalsCreatedBy(progress2, options.noWaitAfter, async () => {
        if (options.__testHookBeforePointerAction)
          await options.__testHookBeforePointerAction();
        progress2.throwIfAborted();
        let restoreModifiers;
        if (options && options.modifiers)
          restoreModifiers = await this._page.keyboard.ensureModifiers(options.modifiers);
        progress2.log(`  performing ${actionName} action`);
        await action(point);
        if (restoreModifiers)
          await this._page.keyboard.ensureModifiers(restoreModifiers);
        if (hitTargetInterceptionHandle) {
          const stopHitTargetInterception = hitTargetInterceptionHandle.evaluate((h) => h.stop()).catch((e) => "done").finally(() => {
            var _hitTargetInterceptio;
            (_hitTargetInterceptio = hitTargetInterceptionHandle) === null || _hitTargetInterceptio === undefined || _hitTargetInterceptio.dispose();
          });
          if (!options.noWaitAfter) {
            const hitTargetResult = await stopHitTargetInterception;
            if (hitTargetResult !== "done")
              return hitTargetResult;
          }
        }
        progress2.log(`  ${options.trial ? "trial " : ""}${actionName} action done`);
        progress2.log("  waiting for scheduled navigations to finish");
        if (options.__testHookAfterPointerAction)
          await options.__testHookAfterPointerAction();
        return "done";
      }, "input");
      if (actionResult !== "done")
        return actionResult;
      progress2.log("  navigations have finished");
      return "done";
    }
    async hover(metadata, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._hover(progress2, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    _hover(progress2, options) {
      return this._retryPointerAction(progress2, "hover", false, (point) => this._page.mouse.move(point.x, point.y), options);
    }
    async click(metadata, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._click(progress2, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    _click(progress2, options) {
      return this._retryPointerAction(progress2, "click", true, (point) => this._page.mouse.click(point.x, point.y, options), options);
    }
    async dblclick(metadata, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._dblclick(progress2, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    _dblclick(progress2, options) {
      return this._retryPointerAction(progress2, "dblclick", true, (point) => this._page.mouse.dblclick(point.x, point.y, options), options);
    }
    async tap(metadata, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._tap(progress2, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    _tap(progress2, options) {
      return this._retryPointerAction(progress2, "tap", true, (point) => this._page.touchscreen.tap(point.x, point.y), options);
    }
    async selectOption(metadata, elements, values, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._selectOption(progress2, elements, values, options);
        return throwRetargetableDOMError(result);
      }, this._page._timeoutSettings.timeout(options));
    }
    async _selectOption(progress2, elements, values, options) {
      let resultingOptions = [];
      await this._retryAction(progress2, "select option", async () => {
        await progress2.beforeInputAction(this);
        if (!options.force)
          progress2.log(`  waiting for element to be visible and enabled`);
        const optionsToSelect = [...elements, ...values];
        const result = await this.evaluateInUtility(async ([injected, node, {
          optionsToSelect: optionsToSelect2,
          force
        }]) => {
          if (!force) {
            const checkResult = await injected.checkElementStates(node, ["visible", "enabled"]);
            if (checkResult)
              return checkResult;
          }
          return injected.selectOptions(node, optionsToSelect2);
        }, {
          optionsToSelect,
          force: options.force
        });
        if (Array.isArray(result)) {
          progress2.log("  selected specified option(s)");
          resultingOptions = result;
          return "done";
        }
        return result;
      }, options);
      return resultingOptions;
    }
    async fill(metadata, value, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._fill(progress2, value, options);
        assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    async _fill(progress2, value, options) {
      progress2.log(`  fill("${value}")`);
      return await this._retryAction(progress2, "fill", async () => {
        await progress2.beforeInputAction(this);
        return this._page._frameManager.waitForSignalsCreatedBy(progress2, options.noWaitAfter, async () => {
          if (!options.force)
            progress2.log("  waiting for element to be visible, enabled and editable");
          const result = await this.evaluateInUtility(async ([injected, node, {
            value: value2,
            force
          }]) => {
            if (!force) {
              const checkResult = await injected.checkElementStates(node, ["visible", "enabled", "editable"]);
              if (checkResult)
                return checkResult;
            }
            return injected.fill(node, value2);
          }, {
            value,
            force: options.force
          });
          progress2.throwIfAborted();
          if (result === "needsinput") {
            if (value)
              await this._page.keyboard.insertText(value);
            else
              await this._page.keyboard.press("Delete");
            return "done";
          } else {
            return result;
          }
        }, "input");
      }, options);
    }
    async selectText(metadata, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._retryAction(progress2, "selectText", async () => {
          if (!options.force)
            progress2.log("  waiting for element to be visible");
          return await this.evaluateInUtility(async ([injected, node, {
            force
          }]) => {
            if (!force) {
              const checkResult = await injected.checkElementStates(node, ["visible"]);
              if (checkResult)
                return checkResult;
            }
            return injected.selectText(node);
          }, {
            force: options.force
          });
        }, options);
        assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    async setInputFiles(metadata, params) {
      const inputFileItems = await (0, _fileUploadUtils.prepareFilesForUpload)(this._frame, params);
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._setInputFiles(progress2, inputFileItems, params);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(params));
    }
    async _setInputFiles(progress2, items, options) {
      const {
        filePayloads,
        localPaths
      } = items;
      const multiple = filePayloads && filePayloads.length > 1 || localPaths && localPaths.length > 1;
      const result = await this.evaluateHandleInUtility(([injected, node, multiple2]) => {
        const element = injected.retarget(node, "follow-label");
        if (!element)
          return;
        if (element.tagName !== "INPUT")
          throw injected.createStacklessError("Node is not an HTMLInputElement");
        if (multiple2 && !element.multiple)
          throw injected.createStacklessError("Non-multiple file input can only accept single file");
        return element;
      }, multiple);
      if (result === "error:notconnected" || !result.asElement())
        return "error:notconnected";
      const retargeted = result.asElement();
      await progress2.beforeInputAction(this);
      await this._page._frameManager.waitForSignalsCreatedBy(progress2, options.noWaitAfter, async () => {
        progress2.throwIfAborted();
        if (localPaths) {
          await Promise.all(localPaths.map((localPath) => _fs.default.promises.access(localPath, _fs.default.constants.F_OK)));
          await this._page._delegate.setInputFilePaths(retargeted, localPaths);
        } else {
          await this._page._delegate.setInputFiles(retargeted, filePayloads);
        }
      });
      return "done";
    }
    async focus(metadata) {
      const controller = new _progress.ProgressController(metadata, this);
      await controller.run(async (progress2) => {
        const result = await this._focus(progress2);
        return assertDone(throwRetargetableDOMError(result));
      }, 0);
    }
    async _focus(progress2, resetSelectionIfNotFocused) {
      progress2.throwIfAborted();
      return await this.evaluateInUtility(([injected, node, resetSelectionIfNotFocused2]) => injected.focusNode(node, resetSelectionIfNotFocused2), resetSelectionIfNotFocused);
    }
    async _blur(progress2) {
      progress2.throwIfAborted();
      return await this.evaluateInUtility(([injected, node]) => injected.blurNode(node), {});
    }
    async type(metadata, text, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._type(progress2, text, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    async _type(progress2, text, options) {
      progress2.log(`elementHandle.type("${text}")`);
      await progress2.beforeInputAction(this);
      return this._page._frameManager.waitForSignalsCreatedBy(progress2, options.noWaitAfter, async () => {
        const result = await this._focus(progress2, true);
        if (result !== "done")
          return result;
        progress2.throwIfAborted();
        await this._page.keyboard.type(text, options);
        return "done";
      }, "input");
    }
    async press(metadata, key, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._press(progress2, key, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    async _press(progress2, key, options) {
      progress2.log(`elementHandle.press("${key}")`);
      await progress2.beforeInputAction(this);
      return this._page._frameManager.waitForSignalsCreatedBy(progress2, options.noWaitAfter, async () => {
        const result = await this._focus(progress2, true);
        if (result !== "done")
          return result;
        progress2.throwIfAborted();
        await this._page.keyboard.press(key, options);
        return "done";
      }, "input");
    }
    async check(metadata, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._setChecked(progress2, true, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    async uncheck(metadata, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._setChecked(progress2, false, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    async _setChecked(progress2, state, options) {
      const isChecked = async () => {
        const result2 = await this.evaluateInUtility(([injected, node]) => injected.elementState(node, "checked"), {});
        return throwRetargetableDOMError(result2);
      };
      if (await isChecked() === state)
        return "done";
      const result = await this._click(progress2, options);
      if (result !== "done")
        return result;
      if (options.trial)
        return "done";
      if (await isChecked() !== state)
        throw new NonRecoverableDOMError("Clicking the checkbox did not change its state");
      return "done";
    }
    async boundingBox() {
      return this._page._delegate.getBoundingBox(this);
    }
    async screenshot(metadata, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run((progress2) => this._page._screenshotter.screenshotElement(progress2, this, options), this._page._timeoutSettings.timeout(options));
    }
    async querySelector(selector, options) {
      return this._frame.selectors.query(selector, options, this);
    }
    async querySelectorAll(selector) {
      return this._frame.selectors.queryAll(selector, this);
    }
    async evalOnSelector(selector, strict, expression, isFunction, arg) {
      return this._frame.evalOnSelector(selector, strict, expression, isFunction, arg, this);
    }
    async evalOnSelectorAll(selector, expression, isFunction, arg) {
      return this._frame.evalOnSelectorAll(selector, expression, isFunction, arg, this);
    }
    async isVisible(metadata) {
      return this._frame.isVisible(metadata, ":scope", {}, this);
    }
    async isHidden(metadata) {
      return this._frame.isHidden(metadata, ":scope", {}, this);
    }
    async isEnabled(metadata) {
      return this._frame.isEnabled(metadata, ":scope", {}, this);
    }
    async isDisabled(metadata) {
      return this._frame.isDisabled(metadata, ":scope", {}, this);
    }
    async isEditable(metadata) {
      return this._frame.isEditable(metadata, ":scope", {}, this);
    }
    async isChecked(metadata) {
      return this._frame.isChecked(metadata, ":scope", {}, this);
    }
    async waitForElementState(metadata, state, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const actionName = `wait for ${state}`;
        const result = await this._retryAction(progress2, actionName, async () => {
          return await this.evaluateInUtility(async ([injected, node, state2]) => {
            return await injected.checkElementStates(node, [state2]) || "done";
          }, state);
        }, {});
        assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    async waitForSelector(metadata, selector, options = {}) {
      return this._frame.waitForSelector(metadata, selector, options, this);
    }
    async _adoptTo(context) {
      if (this._context !== context) {
        const adopted = await this._page._delegate.adoptElementHandle(this, context);
        this.dispose();
        return adopted;
      }
      return this;
    }
    async _checkFrameIsHitTarget(point) {
      let frame = this._frame;
      const data = [];
      while (frame.parentFrame()) {
        const frameElement = await frame.frameElement();
        const box = await frameElement.boundingBox();
        const style = await frameElement.evaluateInUtility(([injected, iframe]) => injected.describeIFrameStyle(iframe), {}).catch((e) => "error:notconnected");
        if (!box || style === "error:notconnected")
          return "error:notconnected";
        if (style === "transformed") {
          return {
            framePoint: undefined
          };
        }
        const pointInFrame = {
          x: point.x - box.x - style.left,
          y: point.y - box.y - style.top
        };
        data.push({
          frame,
          frameElement,
          pointInFrame
        });
        frame = frame.parentFrame();
      }
      data.push({
        frame,
        frameElement: null,
        pointInFrame: point
      });
      for (let i = data.length - 1;i > 0; i--) {
        const element = data[i - 1].frameElement;
        const point2 = data[i].pointInFrame;
        const hitTargetResult = await element.evaluateInUtility(([injected, element2, hitPoint]) => {
          return injected.expectHitTarget(hitPoint, element2);
        }, point2);
        if (hitTargetResult !== "done")
          return hitTargetResult;
      }
      return {
        framePoint: data[0].pointInFrame
      };
    }
  }
  exports.ElementHandle = ElementHandle;
  var kUnableToAdoptErrorMessage = exports.kUnableToAdoptErrorMessage = "Unable to adopt element handle from a different document";
});

// node_modules/playwright-core/lib/server/types.js
var require_types2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.kLifecycleEvents = undefined;
  var kLifecycleEvents = exports.kLifecycleEvents = new Set(["load", "domcontentloaded", "networkidle", "commit"]);
});

// node_modules/playwright-core/lib/server/frameSelectors.js
var require_frameSelectors = __commonJS((exports) => {
  async function adoptIfNeeded(handle, context) {
    if (handle._context === context)
      return handle;
    const adopted = handle._page._delegate.adoptElementHandle(handle, context);
    handle.dispose();
    return adopted;
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FrameSelectors = undefined;
  var _selectorParser = require_selectorParser();
  var _locatorGenerators = require_locatorGenerators();

  class FrameSelectors {
    constructor(frame) {
      this.frame = undefined;
      this.frame = frame;
    }
    _parseSelector(selector, options) {
      const strict = typeof (options === null || options === undefined ? undefined : options.strict) === "boolean" ? options.strict : !!this.frame._page.context()._options.strictSelectors;
      return this.frame._page.context().selectors().parseSelector(selector, strict);
    }
    async query(selector, options, scope) {
      const resolved = await this.resolveInjectedForSelector(selector, options, scope);
      if (!resolved)
        return null;
      const handle = await resolved.injected.evaluateHandle((injected, {
        info,
        scope: scope2
      }) => {
        return injected.querySelector(info.parsed, scope2 || document, info.strict);
      }, {
        info: resolved.info,
        scope: resolved.scope
      });
      const elementHandle = handle.asElement();
      if (!elementHandle) {
        handle.dispose();
        return null;
      }
      return adoptIfNeeded(elementHandle, await resolved.frame._mainContext());
    }
    async queryArrayInMainWorld(selector, scope) {
      const resolved = await this.resolveInjectedForSelector(selector, {
        mainWorld: true
      }, scope);
      if (!resolved)
        throw new Error(`Failed to find frame for selector "${selector}"`);
      return await resolved.injected.evaluateHandle((injected, {
        info,
        scope: scope2
      }) => {
        return injected.querySelectorAll(info.parsed, scope2 || document);
      }, {
        info: resolved.info,
        scope: resolved.scope
      });
    }
    async queryCount(selector) {
      const resolved = await this.resolveInjectedForSelector(selector);
      if (!resolved)
        throw new Error(`Failed to find frame for selector "${selector}"`);
      return await resolved.injected.evaluate((injected, {
        info
      }) => {
        return injected.querySelectorAll(info.parsed, document).length;
      }, {
        info: resolved.info
      });
    }
    async queryAll(selector, scope) {
      const resolved = await this.resolveInjectedForSelector(selector, {}, scope);
      if (!resolved)
        return [];
      const arrayHandle = await resolved.injected.evaluateHandle((injected, {
        info,
        scope: scope2
      }) => {
        return injected.querySelectorAll(info.parsed, scope2 || document);
      }, {
        info: resolved.info,
        scope: resolved.scope
      });
      const properties = await arrayHandle.getProperties();
      arrayHandle.dispose();
      const targetContext = await resolved.frame._mainContext();
      const result = [];
      for (const property of properties.values()) {
        const elementHandle = property.asElement();
        if (elementHandle)
          result.push(adoptIfNeeded(elementHandle, targetContext));
        else
          property.dispose();
      }
      return Promise.all(result);
    }
    async resolveFrameForSelector(selector, options = {}, scope) {
      let frame = this.frame;
      const frameChunks = (0, _selectorParser.splitSelectorByFrame)(selector);
      for (const chunk of frameChunks) {
        (0, _selectorParser.visitAllSelectorParts)(chunk, (part, nested) => {
          if (nested && part.name === "internal:control" && part.body === "enter-frame") {
            const locator = (0, _locatorGenerators.asLocator)(this.frame._page.attribution.playwright.options.sdkLanguage, selector);
            throw new _selectorParser.InvalidSelectorError(`Frame locators are not allowed inside composite locators, while querying "${locator}"`);
          }
        });
      }
      for (let i = 0;i < frameChunks.length - 1; ++i) {
        const info = this._parseSelector(frameChunks[i], options);
        const context = await frame._context(info.world);
        const injectedScript = await context.injectedScript();
        const handle = await injectedScript.evaluateHandle((injected, {
          info: info2,
          scope: scope2,
          selectorString
        }) => {
          const element2 = injected.querySelector(info2.parsed, scope2 || document, info2.strict);
          if (element2 && element2.nodeName !== "IFRAME" && element2.nodeName !== "FRAME")
            throw injected.createStacklessError(`Selector "${selectorString}" resolved to ${injected.previewNode(element2)}, <iframe> was expected`);
          return element2;
        }, {
          info,
          scope: i === 0 ? scope : undefined,
          selectorString: (0, _selectorParser.stringifySelector)(info.parsed)
        });
        const element = handle.asElement();
        if (!element)
          return null;
        const maybeFrame = await frame._page._delegate.getContentFrame(element);
        element.dispose();
        if (!maybeFrame)
          return null;
        frame = maybeFrame;
      }
      if (frame !== this.frame)
        scope = undefined;
      return {
        frame,
        info: frame.selectors._parseSelector(frameChunks[frameChunks.length - 1], options),
        scope
      };
    }
    async resolveInjectedForSelector(selector, options, scope) {
      const resolved = await this.resolveFrameForSelector(selector, options, scope);
      if (!resolved)
        return;
      const context = await resolved.frame._context(options !== null && options !== undefined && options.mainWorld ? "main" : resolved.info.world);
      const injected = await context.injectedScript();
      return {
        injected,
        info: resolved.info,
        frame: resolved.frame,
        scope: resolved.scope
      };
    }
  }
  exports.FrameSelectors = FrameSelectors;
});

// node_modules/playwright-core/lib/server/frames.js
var require_frames = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var verifyLifecycle = function(name, waitUntil) {
    if (waitUntil === "networkidle0")
      waitUntil = "networkidle";
    if (!types.kLifecycleEvents.has(waitUntil))
      throw new Error(`${name}: expected one of (load|domcontentloaded|networkidle|commit)`);
    return waitUntil;
  };
  var renderUnexpectedValue = function(expression, received) {
    if (expression === "to.be.checked")
      return received ? "checked" : "unchecked";
    if (expression === "to.be.unchecked")
      return received ? "unchecked" : "checked";
    if (expression === "to.be.visible")
      return received ? "visible" : "hidden";
    if (expression === "to.be.hidden")
      return received ? "hidden" : "visible";
    if (expression === "to.be.enabled")
      return received ? "enabled" : "disabled";
    if (expression === "to.be.disabled")
      return received ? "disabled" : "enabled";
    if (expression === "to.be.editable")
      return received ? "editable" : "readonly";
    if (expression === "to.be.readonly")
      return received ? "readonly" : "editable";
    if (expression === "to.be.empty")
      return received ? "empty" : "not empty";
    if (expression === "to.be.focused")
      return received ? "focused" : "not focused";
    return received;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NavigationAbortedError = exports.FrameManager = exports.Frame = undefined;
  var dom = _interopRequireWildcard(require_dom());
  var _helper = require_helper();
  var _eventsHelper = require_eventsHelper();
  var js = _interopRequireWildcard(require_javascript());
  var network = _interopRequireWildcard(require_network2());
  var _page = require_page();
  var types = _interopRequireWildcard(require_types2());
  var _browserContext = require_browserContext();
  var _progress = require_progress();
  var _utils = require_utils3();
  var _manualPromise = require_manualPromise();
  var _debugLogger = require_debugLogger();
  var _instrumentation = require_instrumentation();
  var _protocolError = require_protocolError();
  var _selectorParser = require_selectorParser();
  var _locatorGenerators = require_locatorGenerators();
  var _frameSelectors = require_frameSelectors();
  var _errors = require_errors();
  var _fileUploadUtils = require_fileUploadUtils();

  class NavigationAbortedError extends Error {
    constructor(documentId, message) {
      super(message);
      this.documentId = undefined;
      this.documentId = documentId;
    }
  }
  exports.NavigationAbortedError = NavigationAbortedError;
  var kDummyFrameId = "<dummy>";

  class FrameManager {
    constructor(page) {
      this._page = undefined;
      this._frames = new Map;
      this._mainFrame = undefined;
      this._consoleMessageTags = new Map;
      this._signalBarriers = new Set;
      this._webSockets = new Map;
      this._openedDialogs = new Set;
      this._closeAllOpeningDialogs = false;
      this._page = page;
      this._mainFrame = undefined;
    }
    createDummyMainFrameIfNeeded() {
      if (!this._mainFrame)
        this.frameAttached(kDummyFrameId, null);
    }
    dispose() {
      for (const frame of this._frames.values()) {
        frame._stopNetworkIdleTimer();
        frame._invalidateNonStallingEvaluations("Target crashed");
      }
    }
    mainFrame() {
      return this._mainFrame;
    }
    frames() {
      const frames = [];
      collect(this._mainFrame);
      return frames;
      function collect(frame) {
        frames.push(frame);
        for (const subframe of frame.childFrames())
          collect(subframe);
      }
    }
    frame(frameId) {
      return this._frames.get(frameId) || null;
    }
    frameAttached(frameId, parentFrameId) {
      const parentFrame = parentFrameId ? this._frames.get(parentFrameId) : null;
      if (!parentFrame) {
        if (this._mainFrame) {
          this._frames.delete(this._mainFrame._id);
          this._mainFrame._id = frameId;
        } else {
          (0, _utils.assert)(!this._frames.has(frameId));
          this._mainFrame = new Frame(this._page, frameId, parentFrame);
        }
        this._frames.set(frameId, this._mainFrame);
        return this._mainFrame;
      } else {
        (0, _utils.assert)(!this._frames.has(frameId));
        const frame = new Frame(this._page, frameId, parentFrame);
        this._frames.set(frameId, frame);
        this._page.emit(_page.Page.Events.FrameAttached, frame);
        return frame;
      }
    }
    async waitForSignalsCreatedBy(progress2, noWaitAfter, action, source) {
      if (noWaitAfter)
        return action();
      const barrier = new SignalBarrier(progress2);
      this._signalBarriers.add(barrier);
      if (progress2)
        progress2.cleanupWhenAborted(() => this._signalBarriers.delete(barrier));
      const result = await action();
      if (source === "input")
        await this._page._delegate.inputActionEpilogue();
      await barrier.waitFor();
      this._signalBarriers.delete(barrier);
      await new Promise((0, _utils.makeWaitForNextTask)());
      return result;
    }
    frameWillPotentiallyRequestNavigation() {
      for (const barrier of this._signalBarriers)
        barrier.retain();
    }
    frameDidPotentiallyRequestNavigation() {
      for (const barrier of this._signalBarriers)
        barrier.release();
    }
    frameRequestedNavigation(frameId, documentId) {
      const frame = this._frames.get(frameId);
      if (!frame)
        return;
      for (const barrier of this._signalBarriers)
        barrier.addFrameNavigation(frame);
      if (frame.pendingDocument() && frame.pendingDocument().documentId === documentId) {
        return;
      }
      const request = documentId ? Array.from(frame._inflightRequests).find((request2) => request2._documentId === documentId) : undefined;
      frame.setPendingDocument({
        documentId,
        request
      });
    }
    frameCommittedNewDocumentNavigation(frameId, url, name, documentId, initial) {
      const frame = this._frames.get(frameId);
      this.removeChildFramesRecursively(frame);
      this.clearWebSockets(frame);
      frame._url = url;
      frame._name = name;
      let keepPending;
      const pendingDocument = frame.pendingDocument();
      if (pendingDocument) {
        if (pendingDocument.documentId === undefined) {
          pendingDocument.documentId = documentId;
        }
        if (pendingDocument.documentId === documentId) {
          frame._currentDocument = pendingDocument;
        } else {
          keepPending = pendingDocument;
          frame._currentDocument = {
            documentId,
            request: undefined
          };
        }
        frame.setPendingDocument(undefined);
      } else {
        frame._currentDocument = {
          documentId,
          request: undefined
        };
      }
      frame._onClearLifecycle();
      const navigationEvent = {
        url,
        name,
        newDocument: frame._currentDocument,
        isPublic: true
      };
      this._fireInternalFrameNavigation(frame, navigationEvent);
      if (!initial) {
        _debugLogger.debugLogger.log("api", `  navigated to "${url}"`);
        this._page.frameNavigatedToNewDocument(frame);
      }
      frame.setPendingDocument(keepPending);
    }
    frameCommittedSameDocumentNavigation(frameId, url) {
      const frame = this._frames.get(frameId);
      if (!frame)
        return;
      frame._url = url;
      const navigationEvent = {
        url,
        name: frame._name,
        isPublic: true
      };
      this._fireInternalFrameNavigation(frame, navigationEvent);
      _debugLogger.debugLogger.log("api", `  navigated to "${url}"`);
    }
    frameAbortedNavigation(frameId, errorText, documentId) {
      const frame = this._frames.get(frameId);
      if (!frame || !frame.pendingDocument())
        return;
      if (documentId !== undefined && frame.pendingDocument().documentId !== documentId)
        return;
      const navigationEvent = {
        url: frame._url,
        name: frame._name,
        newDocument: frame.pendingDocument(),
        error: new NavigationAbortedError(documentId, errorText),
        isPublic: !(documentId && frame._redirectedNavigations.has(documentId))
      };
      frame.setPendingDocument(undefined);
      this._fireInternalFrameNavigation(frame, navigationEvent);
    }
    frameDetached(frameId) {
      const frame = this._frames.get(frameId);
      if (frame) {
        this._removeFramesRecursively(frame);
        this._page.mainFrame()._recalculateNetworkIdle();
      }
    }
    frameLifecycleEvent(frameId, event) {
      const frame = this._frames.get(frameId);
      if (frame)
        frame._onLifecycleEvent(event);
    }
    requestStarted(request, route) {
      const frame = request.frame();
      this._inflightRequestStarted(request);
      if (request._documentId)
        frame.setPendingDocument({
          documentId: request._documentId,
          request
        });
      if (request._isFavicon) {
        if (route)
          route.continue(request, {
            isFallback: true
          }).catch(() => {
          });
        return;
      }
      this._page.emitOnContext(_browserContext.BrowserContext.Events.Request, request);
      if (route) {
        var _this$_page$_serverRe, _this$_page, _this$_page$_clientRe, _this$_page2, _this$_page$_browserC, _this$_page$_browserC2;
        const r = new network.Route(request, route);
        if ((_this$_page$_serverRe = (_this$_page = this._page)._serverRequestInterceptor) !== null && _this$_page$_serverRe !== undefined && _this$_page$_serverRe.call(_this$_page, r, request))
          return;
        if ((_this$_page$_clientRe = (_this$_page2 = this._page)._clientRequestInterceptor) !== null && _this$_page$_clientRe !== undefined && _this$_page$_clientRe.call(_this$_page2, r, request))
          return;
        if ((_this$_page$_browserC = (_this$_page$_browserC2 = this._page._browserContext)._requestInterceptor) !== null && _this$_page$_browserC !== undefined && _this$_page$_browserC.call(_this$_page$_browserC2, r, request))
          return;
        r.continue({
          isFallback: true
        }).catch(() => {
        });
      }
    }
    requestReceivedResponse(response) {
      if (response.request()._isFavicon)
        return;
      this._page.emitOnContext(_browserContext.BrowserContext.Events.Response, response);
    }
    reportRequestFinished(request, response) {
      this._inflightRequestFinished(request);
      if (request._isFavicon)
        return;
      this._page.emitOnContext(_browserContext.BrowserContext.Events.RequestFinished, {
        request,
        response
      });
    }
    requestFailed(request, canceled) {
      const frame = request.frame();
      this._inflightRequestFinished(request);
      if (frame.pendingDocument() && frame.pendingDocument().request === request) {
        let errorText = request.failure().errorText;
        if (canceled)
          errorText += "; maybe frame was detached?";
        this.frameAbortedNavigation(frame._id, errorText, frame.pendingDocument().documentId);
      }
      if (request._isFavicon)
        return;
      this._page.emitOnContext(_browserContext.BrowserContext.Events.RequestFailed, request);
    }
    dialogDidOpen(dialog) {
      for (const frame of this._frames.values())
        frame._invalidateNonStallingEvaluations("JavaScript dialog interrupted evaluation");
      if (this._closeAllOpeningDialogs)
        dialog.close().then(() => {
        });
      else
        this._openedDialogs.add(dialog);
    }
    dialogWillClose(dialog) {
      this._openedDialogs.delete(dialog);
    }
    async closeOpenDialogs() {
      await Promise.all([...this._openedDialogs].map((dialog) => dialog.close())).catch(() => {
      });
      this._openedDialogs.clear();
    }
    setCloseAllOpeningDialogs(closeDialogs) {
      this._closeAllOpeningDialogs = closeDialogs;
    }
    removeChildFramesRecursively(frame) {
      for (const child of frame.childFrames())
        this._removeFramesRecursively(child);
    }
    _removeFramesRecursively(frame) {
      this.removeChildFramesRecursively(frame);
      frame._onDetached();
      this._frames.delete(frame._id);
      if (!this._page.isClosed())
        this._page.emit(_page.Page.Events.FrameDetached, frame);
    }
    _inflightRequestFinished(request) {
      const frame = request.frame();
      if (request._isFavicon)
        return;
      if (!frame._inflightRequests.has(request))
        return;
      frame._inflightRequests.delete(request);
      if (frame._inflightRequests.size === 0)
        frame._startNetworkIdleTimer();
    }
    _inflightRequestStarted(request) {
      const frame = request.frame();
      if (request._isFavicon)
        return;
      frame._inflightRequests.add(request);
      if (frame._inflightRequests.size === 1)
        frame._stopNetworkIdleTimer();
    }
    interceptConsoleMessage(message) {
      if (message.type() !== "debug")
        return false;
      const tag = message.text();
      const handler = this._consoleMessageTags.get(tag);
      if (!handler)
        return false;
      this._consoleMessageTags.delete(tag);
      handler();
      return true;
    }
    clearWebSockets(frame) {
      if (frame.parentFrame())
        return;
      this._webSockets.clear();
    }
    onWebSocketCreated(requestId, url) {
      const ws2 = new network.WebSocket(this._page, url);
      this._webSockets.set(requestId, ws2);
    }
    onWebSocketRequest(requestId) {
      const ws2 = this._webSockets.get(requestId);
      if (ws2 && ws2.markAsNotified())
        this._page.emit(_page.Page.Events.WebSocket, ws2);
    }
    onWebSocketResponse(requestId, status, statusText) {
      const ws2 = this._webSockets.get(requestId);
      if (status < 400)
        return;
      if (ws2)
        ws2.error(`${statusText}: ${status}`);
    }
    onWebSocketFrameSent(requestId, opcode, data) {
      const ws2 = this._webSockets.get(requestId);
      if (ws2)
        ws2.frameSent(opcode, data);
    }
    webSocketFrameReceived(requestId, opcode, data) {
      const ws2 = this._webSockets.get(requestId);
      if (ws2)
        ws2.frameReceived(opcode, data);
    }
    webSocketClosed(requestId) {
      const ws2 = this._webSockets.get(requestId);
      if (ws2)
        ws2.closed();
      this._webSockets.delete(requestId);
    }
    webSocketError(requestId, errorMessage) {
      const ws2 = this._webSockets.get(requestId);
      if (ws2)
        ws2.error(errorMessage);
    }
    _fireInternalFrameNavigation(frame, event) {
      frame.emit(Frame.Events.InternalNavigation, event);
    }
  }
  exports.FrameManager = FrameManager;

  class Frame extends _instrumentation.SdkObject {
    constructor(page, id, parentFrame) {
      super(page, "frame");
      this._id = undefined;
      this._firedLifecycleEvents = new Set;
      this._firedNetworkIdleSelf = false;
      this._currentDocument = undefined;
      this._pendingDocument = undefined;
      this._page = undefined;
      this._parentFrame = undefined;
      this._url = "";
      this._contextData = new Map;
      this._childFrames = new Set;
      this._name = "";
      this._inflightRequests = new Set;
      this._networkIdleTimer = undefined;
      this._setContentCounter = 0;
      this._detachedScope = new _utils.LongStandingScope;
      this._raceAgainstEvaluationStallingEventsPromises = new Set;
      this._redirectedNavigations = new Map;
      this.selectors = undefined;
      this.attribution.frame = this;
      this._id = id;
      this._page = page;
      this._parentFrame = parentFrame;
      this._currentDocument = {
        documentId: undefined,
        request: undefined
      };
      this.selectors = new _frameSelectors.FrameSelectors(this);
      this._contextData.set("main", {
        contextPromise: new _manualPromise.ManualPromise,
        context: null
      });
      this._contextData.set("utility", {
        contextPromise: new _manualPromise.ManualPromise,
        context: null
      });
      this._setContext("main", null);
      this._setContext("utility", null);
      if (this._parentFrame)
        this._parentFrame._childFrames.add(this);
      this._firedLifecycleEvents.add("commit");
      if (id !== kDummyFrameId)
        this._startNetworkIdleTimer();
    }
    isDetached() {
      return this._detachedScope.isClosed();
    }
    _onLifecycleEvent(event) {
      if (this._firedLifecycleEvents.has(event))
        return;
      this._firedLifecycleEvents.add(event);
      this.emit(Frame.Events.AddLifecycle, event);
      if (this === this._page.mainFrame() && this._url !== "about:blank")
        _debugLogger.debugLogger.log("api", `  "${event}" event fired`);
      this._page.mainFrame()._recalculateNetworkIdle();
    }
    _onClearLifecycle() {
      for (const event of this._firedLifecycleEvents)
        this.emit(Frame.Events.RemoveLifecycle, event);
      this._firedLifecycleEvents.clear();
      this._inflightRequests = new Set(Array.from(this._inflightRequests).filter((request) => request === this._currentDocument.request));
      this._stopNetworkIdleTimer();
      if (this._inflightRequests.size === 0)
        this._startNetworkIdleTimer();
      this._page.mainFrame()._recalculateNetworkIdle(this);
      this._onLifecycleEvent("commit");
    }
    setPendingDocument(documentInfo) {
      this._pendingDocument = documentInfo;
      if (documentInfo)
        this._invalidateNonStallingEvaluations("Navigation interrupted the evaluation");
    }
    pendingDocument() {
      return this._pendingDocument;
    }
    _invalidateNonStallingEvaluations(message) {
      if (!this._raceAgainstEvaluationStallingEventsPromises.size)
        return;
      const error = new Error(message);
      for (const promise of this._raceAgainstEvaluationStallingEventsPromises)
        promise.reject(error);
    }
    async raceAgainstEvaluationStallingEvents(cb) {
      if (this._pendingDocument)
        throw new Error("Frame is currently attempting a navigation");
      if (this._page._frameManager._openedDialogs.size)
        throw new Error("Open JavaScript dialog prevents evaluation");
      const promise = new _manualPromise.ManualPromise;
      this._raceAgainstEvaluationStallingEventsPromises.add(promise);
      try {
        return await Promise.race([cb(), promise]);
      } finally {
        this._raceAgainstEvaluationStallingEventsPromises.delete(promise);
      }
    }
    nonStallingRawEvaluateInExistingMainContext(expression) {
      return this.raceAgainstEvaluationStallingEvents(() => {
        const context = this._existingMainContext();
        if (!context)
          throw new Error("Frame does not yet have a main execution context");
        return context.rawEvaluateJSON(expression);
      });
    }
    nonStallingEvaluateInExistingContext(expression, isFunction, world) {
      return this.raceAgainstEvaluationStallingEvents(() => {
        var _this$_contextData$ge;
        const context = (_this$_contextData$ge = this._contextData.get(world)) === null || _this$_contextData$ge === undefined ? undefined : _this$_contextData$ge.context;
        if (!context)
          throw new Error("Frame does not yet have the execution context");
        return context.evaluateExpression(expression, {
          isFunction
        });
      });
    }
    _recalculateNetworkIdle(frameThatAllowsRemovingNetworkIdle) {
      let isNetworkIdle = this._firedNetworkIdleSelf;
      for (const child of this._childFrames) {
        child._recalculateNetworkIdle(frameThatAllowsRemovingNetworkIdle);
        if (!child._firedLifecycleEvents.has("networkidle"))
          isNetworkIdle = false;
      }
      if (isNetworkIdle && !this._firedLifecycleEvents.has("networkidle")) {
        this._firedLifecycleEvents.add("networkidle");
        this.emit(Frame.Events.AddLifecycle, "networkidle");
        if (this === this._page.mainFrame() && this._url !== "about:blank")
          _debugLogger.debugLogger.log("api", `  "networkidle" event fired`);
      }
      if (frameThatAllowsRemovingNetworkIdle !== this && this._firedLifecycleEvents.has("networkidle") && !isNetworkIdle) {
        this._firedLifecycleEvents.delete("networkidle");
        this.emit(Frame.Events.RemoveLifecycle, "networkidle");
      }
    }
    async raceNavigationAction(progress2, options, action) {
      return _utils.LongStandingScope.raceMultiple([this._detachedScope, this._page.openScope], action().catch((e) => {
        if (e instanceof NavigationAbortedError && e.documentId) {
          const data = this._redirectedNavigations.get(e.documentId);
          if (data) {
            progress2.log(`waiting for redirected navigation to "${data.url}"`);
            return data.gotoPromise;
          }
        }
        throw e;
      }));
    }
    redirectNavigation(url, documentId, referer) {
      const controller = new _progress.ProgressController((0, _instrumentation.serverSideCallMetadata)(), this);
      const data = {
        url,
        gotoPromise: controller.run((progress2) => this._gotoAction(progress2, url, {
          referer
        }), 0)
      };
      this._redirectedNavigations.set(documentId, data);
      data.gotoPromise.finally(() => this._redirectedNavigations.delete(documentId));
    }
    async goto(metadata, url, options = {}) {
      const constructedNavigationURL = (0, _utils.constructURLBasedOnBaseURL)(this._page._browserContext._options.baseURL, url);
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run((progress2) => this._goto(progress2, constructedNavigationURL, options), this._page._timeoutSettings.navigationTimeout(options));
    }
    async _goto(progress2, url, options) {
      return this.raceNavigationAction(progress2, options, async () => this._gotoAction(progress2, url, options));
    }
    async _gotoAction(progress2, url, options) {
      const waitUntil = verifyLifecycle("waitUntil", options.waitUntil === undefined ? "load" : options.waitUntil);
      progress2.log(`navigating to "${url}", waiting until "${waitUntil}"`);
      const headers = this._page.extraHTTPHeaders() || [];
      const refererHeader = headers.find((h) => h.name.toLowerCase() === "referer");
      let referer = refererHeader ? refererHeader.value : undefined;
      if (options.referer !== undefined) {
        if (referer !== undefined && referer !== options.referer)
          throw new Error('"referer" is already specified as extra HTTP header');
        referer = options.referer;
      }
      url = _helper.helper.completeUserURL(url);
      const sameDocument = _helper.helper.waitForEvent(progress2, this, Frame.Events.InternalNavigation, (e) => !e.newDocument);
      const navigateResult = await this._page._delegate.navigateFrame(this, url, referer);
      let event;
      if (navigateResult.newDocumentId) {
        sameDocument.dispose();
        event = await _helper.helper.waitForEvent(progress2, this, Frame.Events.InternalNavigation, (event2) => {
          return event2.newDocument && (event2.newDocument.documentId === navigateResult.newDocumentId || !event2.error);
        }).promise;
        if (event.newDocument.documentId !== navigateResult.newDocumentId) {
          throw new NavigationAbortedError(navigateResult.newDocumentId, `Navigation to "${url}" is interrupted by another navigation to "${event.url}"`);
        }
        if (event.error)
          throw event.error;
      } else {
        event = await sameDocument.promise;
      }
      if (!this._firedLifecycleEvents.has(waitUntil))
        await _helper.helper.waitForEvent(progress2, this, Frame.Events.AddLifecycle, (e) => e === waitUntil).promise;
      const request = event.newDocument ? event.newDocument.request : undefined;
      const response = request ? request._finalRequest().response() : null;
      return response;
    }
    async _waitForNavigation(progress2, requiresNewDocument, options) {
      const waitUntil = verifyLifecycle("waitUntil", options.waitUntil === undefined ? "load" : options.waitUntil);
      progress2.log(`waiting for navigation until "${waitUntil}"`);
      const navigationEvent = await _helper.helper.waitForEvent(progress2, this, Frame.Events.InternalNavigation, (event) => {
        if (event.error)
          return true;
        if (requiresNewDocument && !event.newDocument)
          return false;
        progress2.log(`  navigated to "${this._url}"`);
        return true;
      }).promise;
      if (navigationEvent.error)
        throw navigationEvent.error;
      if (!this._firedLifecycleEvents.has(waitUntil))
        await _helper.helper.waitForEvent(progress2, this, Frame.Events.AddLifecycle, (e) => e === waitUntil).promise;
      const request = navigationEvent.newDocument ? navigationEvent.newDocument.request : undefined;
      return request ? request._finalRequest().response() : null;
    }
    async _waitForLoadState(progress2, state) {
      const waitUntil = verifyLifecycle("state", state);
      if (!this._firedLifecycleEvents.has(waitUntil))
        await _helper.helper.waitForEvent(progress2, this, Frame.Events.AddLifecycle, (e) => e === waitUntil).promise;
    }
    async frameElement() {
      return this._page._delegate.getFrameElement(this);
    }
    _context(world) {
      return this._contextData.get(world).contextPromise.then((contextOrDestroyedReason) => {
        if (contextOrDestroyedReason instanceof js.ExecutionContext)
          return contextOrDestroyedReason;
        throw new Error(contextOrDestroyedReason.destroyedReason);
      });
    }
    _mainContext() {
      return this._context("main");
    }
    _existingMainContext() {
      var _this$_contextData$ge2;
      return ((_this$_contextData$ge2 = this._contextData.get("main")) === null || _this$_contextData$ge2 === undefined ? undefined : _this$_contextData$ge2.context) || null;
    }
    _utilityContext() {
      return this._context("utility");
    }
    async evaluateExpression(expression, options = {}, arg) {
      var _options$world;
      const context = await this._context((_options$world = options.world) !== null && _options$world !== undefined ? _options$world : "main");
      const value = await context.evaluateExpression(expression, options, arg);
      return value;
    }
    async evaluateExpressionHandle(expression, options = {}, arg) {
      var _options$world2;
      const context = await this._context((_options$world2 = options.world) !== null && _options$world2 !== undefined ? _options$world2 : "main");
      const value = await context.evaluateExpressionHandle(expression, options, arg);
      return value;
    }
    async querySelector(selector, options) {
      _debugLogger.debugLogger.log("api", `    finding element using the selector "${selector}"`);
      return this.selectors.query(selector, options);
    }
    async waitForSelector(metadata, selector, options, scope) {
      const controller = new _progress.ProgressController(metadata, this);
      if (options.visibility)
        throw new Error("options.visibility is not supported, did you mean options.state?");
      if (options.waitFor && options.waitFor !== "visible")
        throw new Error("options.waitFor is not supported, did you mean options.state?");
      const {
        state = "visible"
      } = options;
      if (!["attached", "detached", "visible", "hidden"].includes(state))
        throw new Error(`state: expected one of (attached|detached|visible|hidden)`);
      return controller.run(async (progress2) => {
        progress2.log(`waiting for ${this._asLocator(selector)}${state === "attached" ? "" : " to be " + state}`);
        return await this.waitForSelectorInternal(progress2, selector, options, scope);
      }, this._page._timeoutSettings.timeout(options));
    }
    async waitForSelectorInternal(progress2, selector, options, scope) {
      const {
        state = "visible"
      } = options;
      const promise = this.retryWithProgressAndTimeouts(progress2, [0, 20, 50, 100, 100, 500], async (continuePolling) => {
        const resolved = await this.selectors.resolveInjectedForSelector(selector, options, scope);
        progress2.throwIfAborted();
        if (!resolved) {
          if (state === "hidden" || state === "detached")
            return null;
          return continuePolling;
        }
        const result = await resolved.injected.evaluateHandle((injected, {
          info,
          root
        }) => {
          const elements = injected.querySelectorAll(info.parsed, root || document);
          const element2 = elements[0];
          const visible2 = element2 ? injected.isVisible(element2) : false;
          let log2 = "";
          if (elements.length > 1) {
            if (info.strict)
              throw injected.strictModeViolationError(info.parsed, elements);
            log2 = `  locator resolved to ${elements.length} elements. Proceeding with the first one: ${injected.previewNode(elements[0])}`;
          } else if (element2) {
            log2 = `  locator resolved to ${visible2 ? "visible" : "hidden"} ${injected.previewNode(element2)}`;
          }
          return {
            log: log2,
            element: element2,
            visible: visible2,
            attached: !!element2
          };
        }, {
          info: resolved.info,
          root: resolved.frame === this ? scope : undefined
        });
        const {
          log,
          visible,
          attached
        } = await result.evaluate((r) => ({
          log: r.log,
          visible: r.visible,
          attached: r.attached
        }));
        if (log)
          progress2.log(log);
        const success = {
          attached,
          detached: !attached,
          visible,
          hidden: !visible
        }[state];
        if (!success) {
          result.dispose();
          return continuePolling;
        }
        if (options.omitReturnValue) {
          result.dispose();
          return null;
        }
        const element = state === "attached" || state === "visible" ? await result.evaluateHandle((r) => r.element) : null;
        result.dispose();
        if (!element)
          return null;
        if (options.__testHookBeforeAdoptNode)
          await options.__testHookBeforeAdoptNode();
        try {
          return await element._adoptTo(await resolved.frame._mainContext());
        } catch (e) {
          return continuePolling;
        }
      });
      return scope ? scope._context._raceAgainstContextDestroyed(promise) : promise;
    }
    async dispatchEvent(metadata, selector, type, eventInit = {}, options = {}, scope) {
      await this._callOnElementOnceMatches(metadata, selector, (injectedScript, element, data) => {
        injectedScript.dispatchEvent(element, data.type, data.eventInit);
      }, {
        type,
        eventInit
      }, {
        mainWorld: true,
        ...options
      }, scope);
    }
    async evalOnSelector(selector, strict, expression, isFunction, arg, scope) {
      const handle = await this.selectors.query(selector, {
        strict
      }, scope);
      if (!handle)
        throw new Error(`Failed to find element matching selector "${selector}"`);
      const result = await handle.evaluateExpression(expression, {
        isFunction
      }, arg);
      handle.dispose();
      return result;
    }
    async evalOnSelectorAll(selector, expression, isFunction, arg, scope) {
      const arrayHandle = await this.selectors.queryArrayInMainWorld(selector, scope);
      const result = await arrayHandle.evaluateExpression(expression, {
        isFunction
      }, arg);
      arrayHandle.dispose();
      return result;
    }
    async maskSelectors(selectors, color) {
      const context = await this._utilityContext();
      const injectedScript = await context.injectedScript();
      await injectedScript.evaluate((injected, {
        parsed,
        color: color2
      }) => {
        injected.maskSelectors(parsed, color2);
      }, {
        parsed: selectors,
        color
      });
    }
    async querySelectorAll(selector) {
      return this.selectors.queryAll(selector);
    }
    async queryCount(selector) {
      return await this.selectors.queryCount(selector);
    }
    async content() {
      try {
        const context = await this._utilityContext();
        return await context.evaluate(() => {
          let retVal = "";
          if (document.doctype)
            retVal = new XMLSerializer().serializeToString(document.doctype);
          if (document.documentElement)
            retVal += document.documentElement.outerHTML;
          return retVal;
        });
      } catch (e) {
        if (js.isJavaScriptErrorInEvaluate(e) || (0, _protocolError.isSessionClosedError)(e))
          throw e;
        throw new Error(`Unable to retrieve content because the page is navigating and changing the content.`);
      }
    }
    async setContent(metadata, html, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        await this.raceNavigationAction(progress2, options, async () => {
          const waitUntil = options.waitUntil === undefined ? "load" : options.waitUntil;
          progress2.log(`setting frame content, waiting until "${waitUntil}"`);
          const tag = `--playwright--set--content--${this._id}--${++this._setContentCounter}--`;
          const context = await this._utilityContext();
          const lifecyclePromise = new Promise((resolve, reject) => {
            this._page._frameManager._consoleMessageTags.set(tag, () => {
              this._onClearLifecycle();
              this._waitForLoadState(progress2, waitUntil).then(resolve).catch(reject);
            });
          });
          const contentPromise = context.evaluate(({
            html: html2,
            tag: tag2
          }) => {
            document.open();
            console.debug(tag2);
            document.write(html2);
            document.close();
          }, {
            html,
            tag
          });
          await Promise.all([contentPromise, lifecyclePromise]);
          return null;
        });
      }, this._page._timeoutSettings.navigationTimeout(options));
    }
    name() {
      return this._name || "";
    }
    url() {
      return this._url;
    }
    origin() {
      var _network$parsedURL;
      if (!this._url.startsWith("http"))
        return;
      return (_network$parsedURL = network.parsedURL(this._url)) === null || _network$parsedURL === undefined ? undefined : _network$parsedURL.origin;
    }
    parentFrame() {
      return this._parentFrame;
    }
    childFrames() {
      return Array.from(this._childFrames);
    }
    async addScriptTag(params) {
      const {
        url = null,
        content = null,
        type = ""
      } = params;
      if (!url && !content)
        throw new Error("Provide an object with a `url`, `path` or `content` property");
      const context = await this._mainContext();
      return this._raceWithCSPError(async () => {
        if (url !== null)
          return (await context.evaluateHandle(addScriptUrl, {
            url,
            type
          })).asElement();
        const result = (await context.evaluateHandle(addScriptContent, {
          content,
          type
        })).asElement();
        if (this._page._delegate.cspErrorsAsynchronousForInlineScripts)
          await context.evaluate(() => true);
        return result;
      });
      async function addScriptUrl(params2) {
        const script = document.createElement("script");
        script.src = params2.url;
        if (params2.type)
          script.type = params2.type;
        const promise = new Promise((res, rej) => {
          script.onload = res;
          script.onerror = (e) => rej(typeof e === "string" ? new Error(e) : new Error(`Failed to load script at ${script.src}`));
        });
        document.head.appendChild(script);
        await promise;
        return script;
      }
      function addScriptContent(params2) {
        const script = document.createElement("script");
        script.type = params2.type || "text/javascript";
        script.text = params2.content;
        let error = null;
        script.onerror = (e) => error = e;
        document.head.appendChild(script);
        if (error)
          throw error;
        return script;
      }
    }
    async addStyleTag(params) {
      const {
        url = null,
        content = null
      } = params;
      if (!url && !content)
        throw new Error("Provide an object with a `url`, `path` or `content` property");
      const context = await this._mainContext();
      return this._raceWithCSPError(async () => {
        if (url !== null)
          return (await context.evaluateHandle(addStyleUrl, url)).asElement();
        return (await context.evaluateHandle(addStyleContent, content)).asElement();
      });
      async function addStyleUrl(url2) {
        const link = document.createElement("link");
        link.rel = "stylesheet";
        link.href = url2;
        const promise = new Promise((res, rej) => {
          link.onload = res;
          link.onerror = rej;
        });
        document.head.appendChild(link);
        await promise;
        return link;
      }
      async function addStyleContent(content2) {
        const style = document.createElement("style");
        style.type = "text/css";
        style.appendChild(document.createTextNode(content2));
        const promise = new Promise((res, rej) => {
          style.onload = res;
          style.onerror = rej;
        });
        document.head.appendChild(style);
        await promise;
        return style;
      }
    }
    async _raceWithCSPError(func) {
      const listeners = [];
      let result;
      let error;
      let cspMessage;
      const actionPromise = func().then((r) => result = r).catch((e) => error = e);
      const errorPromise = new Promise((resolve) => {
        listeners.push(_eventsHelper.eventsHelper.addEventListener(this._page._browserContext, _browserContext.BrowserContext.Events.Console, (message) => {
          if (message.page() !== this._page || message.type() !== "error")
            return;
          if (message.text().includes("Content-Security-Policy") || message.text().includes("Content Security Policy")) {
            cspMessage = message;
            resolve();
          }
        }));
      });
      await Promise.race([actionPromise, errorPromise]);
      _eventsHelper.eventsHelper.removeEventListeners(listeners);
      if (cspMessage)
        throw new Error(cspMessage.text());
      if (error)
        throw error;
      return result;
    }
    async retryWithProgressAndTimeouts(progress2, timeouts, action) {
      const continuePolling = Symbol("continuePolling");
      timeouts = [0, ...timeouts];
      let timeoutIndex = 0;
      while (progress2.isRunning()) {
        const timeout = timeouts[Math.min(timeoutIndex++, timeouts.length - 1)];
        if (timeout) {
          const actionPromise = new Promise((f) => setTimeout(f, timeout));
          await _utils.LongStandingScope.raceMultiple([this._page.openScope, this._detachedScope], actionPromise);
        }
        progress2.throwIfAborted();
        try {
          const result = await action(continuePolling);
          if (result === continuePolling)
            continue;
          return result;
        } catch (e) {
          if (this._isErrorThatCannotBeRetried(e))
            throw e;
          continue;
        }
      }
      progress2.throwIfAborted();
      return;
    }
    _isErrorThatCannotBeRetried(e) {
      if (js.isJavaScriptErrorInEvaluate(e) || (0, _protocolError.isSessionClosedError)(e))
        return true;
      if (dom.isNonRecoverableDOMError(e) || (0, _selectorParser.isInvalidSelectorError)(e))
        return true;
      if (this.isDetached())
        return true;
      return false;
    }
    async _retryWithProgressIfNotConnected(progress2, selector, strict, performLocatorHandlersCheckpoint, action) {
      progress2.log(`waiting for ${this._asLocator(selector)}`);
      return this.retryWithProgressAndTimeouts(progress2, [0, 20, 50, 100, 100, 500], async (continuePolling) => {
        if (performLocatorHandlersCheckpoint)
          await this._page.performLocatorHandlersCheckpoint(progress2);
        const resolved = await this.selectors.resolveInjectedForSelector(selector, {
          strict
        });
        progress2.throwIfAborted();
        if (!resolved)
          return continuePolling;
        const result = await resolved.injected.evaluateHandle((injected, {
          info
        }) => {
          const elements = injected.querySelectorAll(info.parsed, document);
          const element2 = elements[0];
          let log2 = "";
          if (elements.length > 1) {
            if (info.strict)
              throw injected.strictModeViolationError(info.parsed, elements);
            log2 = `  locator resolved to ${elements.length} elements. Proceeding with the first one: ${injected.previewNode(elements[0])}`;
          } else if (element2) {
            log2 = `  locator resolved to ${injected.previewNode(element2)}`;
          }
          return {
            log: log2,
            success: !!element2,
            element: element2
          };
        }, {
          info: resolved.info
        });
        const {
          log,
          success
        } = await result.evaluate((r) => ({
          log: r.log,
          success: r.success
        }));
        if (log)
          progress2.log(log);
        if (!success) {
          result.dispose();
          return continuePolling;
        }
        const element = await result.evaluateHandle((r) => r.element);
        result.dispose();
        try {
          const result2 = await action(element);
          if (result2 === "error:notconnected") {
            progress2.log("element was detached from the DOM, retrying");
            return continuePolling;
          }
          return result2;
        } finally {
          element === null || element === undefined || element.dispose();
        }
      });
    }
    async rafrafTimeoutScreenshotElementWithProgress(progress2, selector, timeout, options) {
      return await this._retryWithProgressIfNotConnected(progress2, selector, true, true, async (handle) => {
        await handle._frame.rafrafTimeout(timeout);
        return await this._page._screenshotter.screenshotElement(progress2, handle, options);
      });
    }
    async click(metadata, selector, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._click(progress2, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async dblclick(metadata, selector, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._dblclick(progress2, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async dragAndDrop(metadata, source, target, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      await controller.run(async (progress2) => {
        dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, source, options.strict, !options.force, async (handle) => {
          return handle._retryPointerAction(progress2, "move and down", false, async (point) => {
            await this._page.mouse.move(point.x, point.y);
            await this._page.mouse.down();
          }, {
            ...options,
            position: options.sourcePosition,
            timeout: progress2.timeUntilDeadline()
          });
        }));
        dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, target, options.strict, false, async (handle) => {
          return handle._retryPointerAction(progress2, "move and up", false, async (point) => {
            await this._page.mouse.move(point.x, point.y);
            await this._page.mouse.up();
          }, {
            ...options,
            position: options.targetPosition,
            timeout: progress2.timeUntilDeadline()
          });
        }));
      }, this._page._timeoutSettings.timeout(options));
    }
    async tap(metadata, selector, options) {
      if (!this._page._browserContext._options.hasTouch)
        throw new Error("The page does not support tap. Use hasTouch context option to enable touch support.");
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._tap(progress2, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async fill(metadata, selector, value, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._fill(progress2, value, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async focus(metadata, selector, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      await controller.run(async (progress2) => {
        dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, true, (handle) => handle._focus(progress2)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async blur(metadata, selector, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      await controller.run(async (progress2) => {
        dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, true, (handle) => handle._blur(progress2)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async textContent(metadata, selector, options = {}, scope) {
      return this._callOnElementOnceMatches(metadata, selector, (injected, element) => element.textContent, undefined, options, scope);
    }
    async innerText(metadata, selector, options = {}, scope) {
      return this._callOnElementOnceMatches(metadata, selector, (injectedScript, element) => {
        if (element.namespaceURI !== "http://www.w3.org/1999/xhtml")
          throw injectedScript.createStacklessError("Node is not an HTMLElement");
        return element.innerText;
      }, undefined, options, scope);
    }
    async innerHTML(metadata, selector, options = {}, scope) {
      return this._callOnElementOnceMatches(metadata, selector, (injected, element) => element.innerHTML, undefined, options, scope);
    }
    async getAttribute(metadata, selector, name, options = {}, scope) {
      return this._callOnElementOnceMatches(metadata, selector, (injected, element, data) => element.getAttribute(data.name), {
        name
      }, options, scope);
    }
    async inputValue(metadata, selector, options = {}, scope) {
      return this._callOnElementOnceMatches(metadata, selector, (injectedScript, node) => {
        const element = injectedScript.retarget(node, "follow-label");
        if (!element || element.nodeName !== "INPUT" && element.nodeName !== "TEXTAREA" && element.nodeName !== "SELECT")
          throw injectedScript.createStacklessError("Node is not an <input>, <textarea> or <select> element");
        return element.value;
      }, undefined, options, scope);
    }
    async highlight(selector) {
      const resolved = await this.selectors.resolveInjectedForSelector(selector);
      if (!resolved)
        return;
      return await resolved.injected.evaluate((injected, {
        info
      }) => {
        return injected.highlight(info.parsed);
      }, {
        info: resolved.info
      });
    }
    async hideHighlight() {
      return this.raceAgainstEvaluationStallingEvents(async () => {
        const context = await this._utilityContext();
        const injectedScript = await context.injectedScript();
        return await injectedScript.evaluate((injected) => {
          return injected.hideHighlight();
        });
      });
    }
    async _elementState(metadata, selector, state, options = {}, scope) {
      const result = await this._callOnElementOnceMatches(metadata, selector, (injected, element, data) => {
        return injected.elementState(element, data.state);
      }, {
        state
      }, options, scope);
      return dom.throwRetargetableDOMError(result);
    }
    async isVisible(metadata, selector, options = {}, scope) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        progress2.log(`  checking visibility of ${this._asLocator(selector)}`);
        return await this.isVisibleInternal(selector, options, scope);
      }, this._page._timeoutSettings.timeout({}));
    }
    async isVisibleInternal(selector, options = {}, scope) {
      try {
        const resolved = await this.selectors.resolveInjectedForSelector(selector, options, scope);
        if (!resolved)
          return false;
        return await resolved.injected.evaluate((injected, {
          info,
          root
        }) => {
          const element = injected.querySelector(info.parsed, root || document, info.strict);
          const state = element ? injected.elementState(element, "visible") : false;
          return state === "error:notconnected" ? false : state;
        }, {
          info: resolved.info,
          root: resolved.frame === this ? scope : undefined
        });
      } catch (e) {
        if (js.isJavaScriptErrorInEvaluate(e) || (0, _selectorParser.isInvalidSelectorError)(e) || (0, _protocolError.isSessionClosedError)(e))
          throw e;
        return false;
      }
    }
    async isHidden(metadata, selector, options = {}, scope) {
      return !await this.isVisible(metadata, selector, options, scope);
    }
    async isDisabled(metadata, selector, options = {}, scope) {
      return this._elementState(metadata, selector, "disabled", options, scope);
    }
    async isEnabled(metadata, selector, options = {}, scope) {
      return this._elementState(metadata, selector, "enabled", options, scope);
    }
    async isEditable(metadata, selector, options = {}, scope) {
      return this._elementState(metadata, selector, "editable", options, scope);
    }
    async isChecked(metadata, selector, options = {}, scope) {
      return this._elementState(metadata, selector, "checked", options, scope);
    }
    async hover(metadata, selector, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._hover(progress2, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async selectOption(metadata, selector, elements, values, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._selectOption(progress2, elements, values, options));
      }, this._page._timeoutSettings.timeout(options));
    }
    async setInputFiles(metadata, selector, params) {
      const inputFileItems = await (0, _fileUploadUtils.prepareFilesForUpload)(this, params);
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, params.strict, true, (handle) => handle._setInputFiles(progress2, inputFileItems, params)));
      }, this._page._timeoutSettings.timeout(params));
    }
    async type(metadata, selector, text, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, true, (handle) => handle._type(progress2, text, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async press(metadata, selector, key, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, true, (handle) => handle._press(progress2, key, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async check(metadata, selector, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._setChecked(progress2, true, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async uncheck(metadata, selector, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._setChecked(progress2, false, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async waitForTimeout(metadata, timeout) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async () => {
        await new Promise((resolve) => setTimeout(resolve, timeout));
      });
    }
    async expect(metadata, selector, options) {
      const result = await this._expectImpl(metadata, selector, options);
      if (result.matches === options.isNot)
        metadata.error = {
          error: {
            name: "Expect",
            message: "Expect failed"
          }
        };
      return result;
    }
    async _expectImpl(metadata, selector, options) {
      let timeout = this._page._timeoutSettings.timeout(options);
      const start = timeout > 0 ? (0, _utils.monotonicTime)() : 0;
      const lastIntermediateResult = {
        isSet: false
      };
      const resultOneShot = await this._expectInternal(metadata, selector, options, true, timeout, lastIntermediateResult);
      if (resultOneShot.matches !== options.isNot)
        return resultOneShot;
      if (timeout > 0) {
        const elapsed = (0, _utils.monotonicTime)() - start;
        timeout -= elapsed;
      }
      if (timeout < 0)
        return {
          matches: options.isNot,
          log: metadata.log,
          timedOut: true,
          received: lastIntermediateResult.received
        };
      return await this._expectInternal(metadata, selector, options, false, timeout, lastIntermediateResult);
    }
    async _expectInternal(metadata, selector, options, oneShot, timeout, lastIntermediateResult) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        if (oneShot) {
          progress2.log(`${metadata.apiName}${timeout ? ` with timeout ${timeout}ms` : ""}`);
          progress2.log(`waiting for ${this._asLocator(selector)}`);
        }
        return await this.retryWithProgressAndTimeouts(progress2, [100, 250, 500, 1000], async (continuePolling) => {
          var _info$world;
          await this._page.performLocatorHandlersCheckpoint(progress2);
          const selectorInFrame = await this.selectors.resolveFrameForSelector(selector, {
            strict: true
          });
          progress2.throwIfAborted();
          const {
            frame,
            info
          } = selectorInFrame || {
            frame: this,
            info: undefined
          };
          const world = options.expression === "to.have.property" ? "main" : (_info$world = info === null || info === undefined ? undefined : info.world) !== null && _info$world !== undefined ? _info$world : "utility";
          const context = await frame._context(world);
          const injected = await context.injectedScript();
          progress2.throwIfAborted();
          const {
            log,
            matches,
            received,
            missingReceived
          } = await injected.evaluate(async (injected2, {
            info: info2,
            options: options2,
            callId
          }) => {
            const elements = info2 ? injected2.querySelectorAll(info2.parsed, document) : [];
            const isArray = options2.expression === "to.have.count" || options2.expression.endsWith(".array");
            let log2 = "";
            if (isArray)
              log2 = `  locator resolved to ${elements.length} element${elements.length === 1 ? "" : "s"}`;
            else if (elements.length > 1)
              throw injected2.strictModeViolationError(info2.parsed, elements);
            else if (elements.length)
              log2 = `  locator resolved to ${injected2.previewNode(elements[0])}`;
            if (callId)
              injected2.markTargetElements(new Set(elements), callId);
            return {
              log: log2,
              ...await injected2.expect(elements[0], options2, elements)
            };
          }, {
            info,
            options,
            callId: metadata.id
          });
          if (log)
            progress2.log(log);
          if (matches === options.isNot) {
            lastIntermediateResult.received = missingReceived ? "<element(s) not found>" : received;
            lastIntermediateResult.isSet = true;
            if (!missingReceived && !Array.isArray(received))
              progress2.log(`  unexpected value "${renderUnexpectedValue(options.expression, received)}"`);
          }
          if (!oneShot && matches === options.isNot) {
            return continuePolling;
          }
          return {
            matches,
            received
          };
        });
      }, oneShot ? 0 : timeout).catch((e) => {
        if (js.isJavaScriptErrorInEvaluate(e) || (0, _selectorParser.isInvalidSelectorError)(e))
          throw e;
        const result = {
          matches: options.isNot,
          log: metadata.log
        };
        if (lastIntermediateResult.isSet)
          result.received = lastIntermediateResult.received;
        if (e instanceof _errors.TimeoutError)
          result.timedOut = true;
        return result;
      });
    }
    async _waitForFunctionExpression(metadata, expression, isFunction, arg, options, world = "main") {
      const controller = new _progress.ProgressController(metadata, this);
      if (typeof options.pollingInterval === "number")
        (0, _utils.assert)(options.pollingInterval > 0, "Cannot poll with non-positive interval: " + options.pollingInterval);
      expression = js.normalizeEvaluationExpression(expression, isFunction);
      return controller.run(async (progress2) => {
        return this.retryWithProgressAndTimeouts(progress2, [100], async () => {
          const context = world === "main" ? await this._mainContext() : await this._utilityContext();
          const injectedScript = await context.injectedScript();
          const handle = await injectedScript.evaluateHandle((injected, {
            expression: expression2,
            isFunction: isFunction2,
            polling,
            arg: arg2
          }) => {
            const predicate = () => {
              let result2 = globalThis.eval(expression2);
              if (isFunction2 === true) {
                result2 = result2(arg2);
              } else if (isFunction2 === false) {
                result2 = result2;
              } else {
                if (typeof result2 === "function")
                  result2 = result2(arg2);
              }
              return result2;
            };
            let fulfill;
            let reject;
            let aborted = false;
            const result = new Promise((f, r) => {
              fulfill = f;
              reject = r;
            });
            const next = () => {
              if (aborted)
                return;
              try {
                const success = predicate();
                if (success) {
                  fulfill(success);
                  return;
                }
                if (typeof polling !== "number")
                  requestAnimationFrame(next);
                else
                  setTimeout(next, polling);
              } catch (e) {
                reject(e);
              }
            };
            next();
            return {
              result,
              abort: () => aborted = true
            };
          }, {
            expression,
            isFunction,
            polling: options.pollingInterval,
            arg
          });
          progress2.cleanupWhenAborted(() => handle.evaluate((h) => h.abort()).catch(() => {
          }));
          return handle.evaluateHandle((h) => h.result);
        });
      }, this._page._timeoutSettings.timeout(options));
    }
    async waitForFunctionValueInUtility(progress2, pageFunction) {
      const expression = `() => {
      const result = (${pageFunction})();
      if (!result)
        return result;
      return JSON.stringify(result);
    }`;
      const handle = await this._waitForFunctionExpression((0, _instrumentation.serverSideCallMetadata)(), expression, true, undefined, {
        timeout: progress2.timeUntilDeadline()
      }, "utility");
      return JSON.parse(handle.rawValue());
    }
    async title() {
      const context = await this._utilityContext();
      return context.evaluate(() => document.title);
    }
    async rafrafTimeout(timeout) {
      if (timeout === 0)
        return;
      const context = await this._utilityContext();
      await Promise.all([
        context.evaluate(() => new Promise((x) => {
          requestAnimationFrame(() => {
            requestAnimationFrame(x);
          });
        })),
        new Promise((fulfill) => setTimeout(fulfill, timeout))
      ]);
    }
    _onDetached() {
      this._stopNetworkIdleTimer();
      this._detachedScope.close(new Error("Frame was detached"));
      for (const data of this._contextData.values()) {
        if (data.context)
          data.context.contextDestroyed("Frame was detached");
        data.contextPromise.resolve({
          destroyedReason: "Frame was detached"
        });
      }
      if (this._parentFrame)
        this._parentFrame._childFrames.delete(this);
      this._parentFrame = null;
    }
    async _callOnElementOnceMatches(metadata, selector, body, taskData, options = {}, scope) {
      const callbackText = body.toString();
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        progress2.log(`waiting for ${this._asLocator(selector)}`);
        const promise = this.retryWithProgressAndTimeouts(progress2, [0, 20, 50, 100, 100, 500], async (continuePolling) => {
          const resolved = await this.selectors.resolveInjectedForSelector(selector, options, scope);
          progress2.throwIfAborted();
          if (!resolved)
            return continuePolling;
          const {
            log,
            success,
            value
          } = await resolved.injected.evaluate((injected, {
            info,
            callbackText: callbackText2,
            taskData: taskData2,
            callId,
            root
          }) => {
            const callback = injected.eval(callbackText2);
            const element = injected.querySelector(info.parsed, root || document, info.strict);
            if (!element)
              return {
                success: false
              };
            const log2 = `  locator resolved to ${injected.previewNode(element)}`;
            if (callId)
              injected.markTargetElements(new Set([element]), callId);
            return {
              log: log2,
              success: true,
              value: callback(injected, element, taskData2)
            };
          }, {
            info: resolved.info,
            callbackText,
            taskData,
            callId: progress2.metadata.id,
            root: resolved.frame === this ? scope : undefined
          });
          if (log)
            progress2.log(log);
          if (!success)
            return continuePolling;
          return value;
        });
        return scope ? scope._context._raceAgainstContextDestroyed(promise) : promise;
      }, this._page._timeoutSettings.timeout(options));
    }
    _setContext(world, context) {
      const data = this._contextData.get(world);
      data.context = context;
      if (context)
        data.contextPromise.resolve(context);
      else
        data.contextPromise = new _manualPromise.ManualPromise;
    }
    _contextCreated(world, context) {
      const data = this._contextData.get(world);
      if (data.context) {
        data.context.contextDestroyed("Execution context was destroyed, most likely because of a navigation");
        this._setContext(world, null);
      }
      this._setContext(world, context);
    }
    _contextDestroyed(context) {
      if (this._detachedScope.isClosed())
        return;
      context.contextDestroyed("Execution context was destroyed, most likely because of a navigation");
      for (const [world, data] of this._contextData) {
        if (data.context === context)
          this._setContext(world, null);
      }
    }
    _startNetworkIdleTimer() {
      (0, _utils.assert)(!this._networkIdleTimer);
      if (this._firedLifecycleEvents.has("networkidle") || this._detachedScope.isClosed())
        return;
      this._networkIdleTimer = setTimeout(() => {
        this._firedNetworkIdleSelf = true;
        this._page.mainFrame()._recalculateNetworkIdle();
      }, 500);
    }
    _stopNetworkIdleTimer() {
      if (this._networkIdleTimer)
        clearTimeout(this._networkIdleTimer);
      this._networkIdleTimer = undefined;
      this._firedNetworkIdleSelf = false;
    }
    async extendInjectedScript(source, arg) {
      const context = await this._context("main");
      const injectedScriptHandle = await context.injectedScript();
      return injectedScriptHandle.evaluateHandle((injectedScript, {
        source: source2,
        arg: arg2
      }) => {
        return injectedScript.extend(source2, arg2);
      }, {
        source,
        arg
      });
    }
    async resetStorageForCurrentOriginBestEffort(newStorage) {
      const context = await this._utilityContext();
      await context.evaluate(async ({
        ls
      }) => {
        sessionStorage.clear();
        localStorage.clear();
        for (const entry of ls || [])
          localStorage[entry.name] = entry.value;
        const registrations = navigator.serviceWorker ? await navigator.serviceWorker.getRegistrations() : [];
        await Promise.all(registrations.map(async (r) => {
          if (!r.installing && !r.waiting && !r.active)
            r.unregister().catch(() => {
            });
          else
            await r.unregister().catch(() => {
            });
        }));
        for (const db of await ((_indexedDB$databases = (_indexedDB = indexedDB).databases) === null || _indexedDB$databases === undefined ? undefined : _indexedDB$databases.call(_indexedDB)) || []) {
          var _indexedDB$databases, _indexedDB;
          if (db.name)
            indexedDB.deleteDatabase(db.name);
        }
      }, {
        ls: newStorage === null || newStorage === undefined ? undefined : newStorage.localStorage
      }).catch(() => {
      });
    }
    _asLocator(selector) {
      return (0, _locatorGenerators.asLocator)(this._page.attribution.playwright.options.sdkLanguage, selector);
    }
  }
  exports.Frame = Frame;
  Frame.Events = {
    InternalNavigation: "internalnavigation",
    AddLifecycle: "addlifecycle",
    RemoveLifecycle: "removelifecycle"
  };

  class SignalBarrier {
    constructor(progress2) {
      this._progress = undefined;
      this._protectCount = 0;
      this._promise = new _manualPromise.ManualPromise;
      this._progress = progress2;
      this.retain();
    }
    waitFor() {
      this.release();
      return this._promise;
    }
    async addFrameNavigation(frame) {
      if (frame.parentFrame())
        return;
      this.retain();
      const waiter = _helper.helper.waitForEvent(null, frame, Frame.Events.InternalNavigation, (e) => {
        if (!e.isPublic)
          return false;
        if (!e.error && this._progress)
          this._progress.log(`  navigated to "${frame._url}"`);
        return true;
      });
      await _utils.LongStandingScope.raceMultiple([frame._page.openScope, frame._detachedScope], waiter.promise).catch(() => {
      });
      waiter.dispose();
      this.release();
    }
    retain() {
      ++this._protectCount;
    }
    release() {
      --this._protectCount;
      if (!this._protectCount)
        this._promise.resolve();
    }
  }
});

// node_modules/playwright-core/lib/server/usKeyboardLayout.js
var require_usKeyboardLayout = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.keypadLocation = exports.USKeyboardLayout = undefined;
  var keypadLocation = exports.keypadLocation = 3;
  var USKeyboardLayout = exports.USKeyboardLayout = {
    Escape: {
      keyCode: 27,
      key: "Escape"
    },
    F1: {
      keyCode: 112,
      key: "F1"
    },
    F2: {
      keyCode: 113,
      key: "F2"
    },
    F3: {
      keyCode: 114,
      key: "F3"
    },
    F4: {
      keyCode: 115,
      key: "F4"
    },
    F5: {
      keyCode: 116,
      key: "F5"
    },
    F6: {
      keyCode: 117,
      key: "F6"
    },
    F7: {
      keyCode: 118,
      key: "F7"
    },
    F8: {
      keyCode: 119,
      key: "F8"
    },
    F9: {
      keyCode: 120,
      key: "F9"
    },
    F10: {
      keyCode: 121,
      key: "F10"
    },
    F11: {
      keyCode: 122,
      key: "F11"
    },
    F12: {
      keyCode: 123,
      key: "F12"
    },
    Backquote: {
      keyCode: 192,
      shiftKey: "~",
      key: "`"
    },
    Digit1: {
      keyCode: 49,
      shiftKey: "!",
      key: "1"
    },
    Digit2: {
      keyCode: 50,
      shiftKey: "@",
      key: "2"
    },
    Digit3: {
      keyCode: 51,
      shiftKey: "#",
      key: "3"
    },
    Digit4: {
      keyCode: 52,
      shiftKey: "$",
      key: "4"
    },
    Digit5: {
      keyCode: 53,
      shiftKey: "%",
      key: "5"
    },
    Digit6: {
      keyCode: 54,
      shiftKey: "^",
      key: "6"
    },
    Digit7: {
      keyCode: 55,
      shiftKey: "&",
      key: "7"
    },
    Digit8: {
      keyCode: 56,
      shiftKey: "*",
      key: "8"
    },
    Digit9: {
      keyCode: 57,
      shiftKey: "(",
      key: "9"
    },
    Digit0: {
      keyCode: 48,
      shiftKey: ")",
      key: "0"
    },
    Minus: {
      keyCode: 189,
      shiftKey: "_",
      key: "-"
    },
    Equal: {
      keyCode: 187,
      shiftKey: "+",
      key: "="
    },
    Backslash: {
      keyCode: 220,
      shiftKey: "|",
      key: "\\"
    },
    Backspace: {
      keyCode: 8,
      key: "Backspace"
    },
    Tab: {
      keyCode: 9,
      key: "Tab"
    },
    KeyQ: {
      keyCode: 81,
      shiftKey: "Q",
      key: "q"
    },
    KeyW: {
      keyCode: 87,
      shiftKey: "W",
      key: "w"
    },
    KeyE: {
      keyCode: 69,
      shiftKey: "E",
      key: "e"
    },
    KeyR: {
      keyCode: 82,
      shiftKey: "R",
      key: "r"
    },
    KeyT: {
      keyCode: 84,
      shiftKey: "T",
      key: "t"
    },
    KeyY: {
      keyCode: 89,
      shiftKey: "Y",
      key: "y"
    },
    KeyU: {
      keyCode: 85,
      shiftKey: "U",
      key: "u"
    },
    KeyI: {
      keyCode: 73,
      shiftKey: "I",
      key: "i"
    },
    KeyO: {
      keyCode: 79,
      shiftKey: "O",
      key: "o"
    },
    KeyP: {
      keyCode: 80,
      shiftKey: "P",
      key: "p"
    },
    BracketLeft: {
      keyCode: 219,
      shiftKey: "{",
      key: "["
    },
    BracketRight: {
      keyCode: 221,
      shiftKey: "}",
      key: "]"
    },
    CapsLock: {
      keyCode: 20,
      key: "CapsLock"
    },
    KeyA: {
      keyCode: 65,
      shiftKey: "A",
      key: "a"
    },
    KeyS: {
      keyCode: 83,
      shiftKey: "S",
      key: "s"
    },
    KeyD: {
      keyCode: 68,
      shiftKey: "D",
      key: "d"
    },
    KeyF: {
      keyCode: 70,
      shiftKey: "F",
      key: "f"
    },
    KeyG: {
      keyCode: 71,
      shiftKey: "G",
      key: "g"
    },
    KeyH: {
      keyCode: 72,
      shiftKey: "H",
      key: "h"
    },
    KeyJ: {
      keyCode: 74,
      shiftKey: "J",
      key: "j"
    },
    KeyK: {
      keyCode: 75,
      shiftKey: "K",
      key: "k"
    },
    KeyL: {
      keyCode: 76,
      shiftKey: "L",
      key: "l"
    },
    Semicolon: {
      keyCode: 186,
      shiftKey: ":",
      key: ";"
    },
    Quote: {
      keyCode: 222,
      shiftKey: '"',
      key: "\'"
    },
    Enter: {
      keyCode: 13,
      key: "Enter",
      text: "\r"
    },
    ShiftLeft: {
      keyCode: 160,
      keyCodeWithoutLocation: 16,
      key: "Shift",
      location: 1
    },
    KeyZ: {
      keyCode: 90,
      shiftKey: "Z",
      key: "z"
    },
    KeyX: {
      keyCode: 88,
      shiftKey: "X",
      key: "x"
    },
    KeyC: {
      keyCode: 67,
      shiftKey: "C",
      key: "c"
    },
    KeyV: {
      keyCode: 86,
      shiftKey: "V",
      key: "v"
    },
    KeyB: {
      keyCode: 66,
      shiftKey: "B",
      key: "b"
    },
    KeyN: {
      keyCode: 78,
      shiftKey: "N",
      key: "n"
    },
    KeyM: {
      keyCode: 77,
      shiftKey: "M",
      key: "m"
    },
    Comma: {
      keyCode: 188,
      shiftKey: "<",
      key: ","
    },
    Period: {
      keyCode: 190,
      shiftKey: ">",
      key: "."
    },
    Slash: {
      keyCode: 191,
      shiftKey: "?",
      key: "/"
    },
    ShiftRight: {
      keyCode: 161,
      keyCodeWithoutLocation: 16,
      key: "Shift",
      location: 2
    },
    ControlLeft: {
      keyCode: 162,
      keyCodeWithoutLocation: 17,
      key: "Control",
      location: 1
    },
    MetaLeft: {
      keyCode: 91,
      key: "Meta",
      location: 1
    },
    AltLeft: {
      keyCode: 164,
      keyCodeWithoutLocation: 18,
      key: "Alt",
      location: 1
    },
    Space: {
      keyCode: 32,
      key: " "
    },
    AltRight: {
      keyCode: 165,
      keyCodeWithoutLocation: 18,
      key: "Alt",
      location: 2
    },
    AltGraph: {
      keyCode: 225,
      key: "AltGraph"
    },
    MetaRight: {
      keyCode: 92,
      key: "Meta",
      location: 2
    },
    ContextMenu: {
      keyCode: 93,
      key: "ContextMenu"
    },
    ControlRight: {
      keyCode: 163,
      keyCodeWithoutLocation: 17,
      key: "Control",
      location: 2
    },
    PrintScreen: {
      keyCode: 44,
      key: "PrintScreen"
    },
    ScrollLock: {
      keyCode: 145,
      key: "ScrollLock"
    },
    Pause: {
      keyCode: 19,
      key: "Pause"
    },
    PageUp: {
      keyCode: 33,
      key: "PageUp"
    },
    PageDown: {
      keyCode: 34,
      key: "PageDown"
    },
    Insert: {
      keyCode: 45,
      key: "Insert"
    },
    Delete: {
      keyCode: 46,
      key: "Delete"
    },
    Home: {
      keyCode: 36,
      key: "Home"
    },
    End: {
      keyCode: 35,
      key: "End"
    },
    ArrowLeft: {
      keyCode: 37,
      key: "ArrowLeft"
    },
    ArrowUp: {
      keyCode: 38,
      key: "ArrowUp"
    },
    ArrowRight: {
      keyCode: 39,
      key: "ArrowRight"
    },
    ArrowDown: {
      keyCode: 40,
      key: "ArrowDown"
    },
    NumLock: {
      keyCode: 144,
      key: "NumLock"
    },
    NumpadDivide: {
      keyCode: 111,
      key: "/",
      location: 3
    },
    NumpadMultiply: {
      keyCode: 106,
      key: "*",
      location: 3
    },
    NumpadSubtract: {
      keyCode: 109,
      key: "-",
      location: 3
    },
    Numpad7: {
      keyCode: 36,
      shiftKeyCode: 103,
      key: "Home",
      shiftKey: "7",
      location: 3
    },
    Numpad8: {
      keyCode: 38,
      shiftKeyCode: 104,
      key: "ArrowUp",
      shiftKey: "8",
      location: 3
    },
    Numpad9: {
      keyCode: 33,
      shiftKeyCode: 105,
      key: "PageUp",
      shiftKey: "9",
      location: 3
    },
    Numpad4: {
      keyCode: 37,
      shiftKeyCode: 100,
      key: "ArrowLeft",
      shiftKey: "4",
      location: 3
    },
    Numpad5: {
      keyCode: 12,
      shiftKeyCode: 101,
      key: "Clear",
      shiftKey: "5",
      location: 3
    },
    Numpad6: {
      keyCode: 39,
      shiftKeyCode: 102,
      key: "ArrowRight",
      shiftKey: "6",
      location: 3
    },
    NumpadAdd: {
      keyCode: 107,
      key: "+",
      location: 3
    },
    Numpad1: {
      keyCode: 35,
      shiftKeyCode: 97,
      key: "End",
      shiftKey: "1",
      location: 3
    },
    Numpad2: {
      keyCode: 40,
      shiftKeyCode: 98,
      key: "ArrowDown",
      shiftKey: "2",
      location: 3
    },
    Numpad3: {
      keyCode: 34,
      shiftKeyCode: 99,
      key: "PageDown",
      shiftKey: "3",
      location: 3
    },
    Numpad0: {
      keyCode: 45,
      shiftKeyCode: 96,
      key: "Insert",
      shiftKey: "0",
      location: 3
    },
    NumpadDecimal: {
      keyCode: 46,
      shiftKeyCode: 110,
      key: "\0",
      shiftKey: ".",
      location: 3
    },
    NumpadEnter: {
      keyCode: 13,
      key: "Enter",
      text: "\r",
      location: 3
    }
  };
});

// node_modules/playwright-core/lib/server/input.js
var require_input = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var resolveSmartModifierString = function(key) {
    if (key === "ControlOrMeta")
      return process.platform === "darwin" ? "Meta" : "Control";
    return key;
  };
  var resolveSmartModifier = function(m) {
    return resolveSmartModifierString(m);
  };
  var buildLayoutClosure = function(layout) {
    const result = new Map;
    for (const code in layout) {
      const definition = layout[code];
      const description = {
        key: definition.key || "",
        keyCode: definition.keyCode || 0,
        keyCodeWithoutLocation: definition.keyCodeWithoutLocation || definition.keyCode || 0,
        code,
        text: definition.text || "",
        location: definition.location || 0
      };
      if (definition.key.length === 1)
        description.text = description.key;
      let shiftedDescription;
      if (definition.shiftKey) {
        (0, _utils.assert)(definition.shiftKey.length === 1);
        shiftedDescription = {
          ...description
        };
        shiftedDescription.key = definition.shiftKey;
        shiftedDescription.text = definition.shiftKey;
        if (definition.shiftKeyCode)
          shiftedDescription.keyCode = definition.shiftKeyCode;
      }
      result.set(code, {
        ...description,
        shifted: shiftedDescription
      });
      if (aliases.has(code)) {
        for (const alias of aliases.get(code))
          result.set(alias, description);
      }
      if (definition.location)
        continue;
      if (description.key.length === 1)
        result.set(description.key, description);
      if (shiftedDescription)
        result.set(shiftedDescription.key, {
          ...shiftedDescription,
          shifted: undefined
        });
    }
    return result;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.keypadLocation = exports.Touchscreen = exports.Mouse = exports.Keyboard = undefined;
  exports.resolveSmartModifier = resolveSmartModifier;
  exports.resolveSmartModifierString = resolveSmartModifierString;
  var _utils = require_utils3();
  var keyboardLayout = _interopRequireWildcard(require_usKeyboardLayout());
  var keypadLocation = exports.keypadLocation = keyboardLayout.keypadLocation;
  var kModifiers = ["Alt", "Control", "Meta", "Shift"];

  class Keyboard {
    constructor(raw) {
      this._pressedModifiers = new Set;
      this._pressedKeys = new Set;
      this._raw = undefined;
      this._raw = raw;
    }
    async down(key) {
      const description = this._keyDescriptionForString(key);
      const autoRepeat = this._pressedKeys.has(description.code);
      this._pressedKeys.add(description.code);
      if (kModifiers.includes(description.key))
        this._pressedModifiers.add(description.key);
      const text = description.text;
      await this._raw.keydown(this._pressedModifiers, description.code, description.keyCode, description.keyCodeWithoutLocation, description.key, description.location, autoRepeat, text);
    }
    _keyDescriptionForString(str) {
      const keyString = resolveSmartModifierString(str);
      let description = usKeyboardLayout.get(keyString);
      (0, _utils.assert)(description, `Unknown key: "${keyString}"`);
      const shift = this._pressedModifiers.has("Shift");
      description = shift && description.shifted ? description.shifted : description;
      if (this._pressedModifiers.size > 1 || !this._pressedModifiers.has("Shift") && this._pressedModifiers.size === 1)
        return {
          ...description,
          text: ""
        };
      return description;
    }
    async up(key) {
      const description = this._keyDescriptionForString(key);
      if (kModifiers.includes(description.key))
        this._pressedModifiers.delete(description.key);
      this._pressedKeys.delete(description.code);
      await this._raw.keyup(this._pressedModifiers, description.code, description.keyCode, description.keyCodeWithoutLocation, description.key, description.location);
    }
    async insertText(text) {
      await this._raw.sendText(text);
    }
    async type(text, options) {
      const delay = options && options.delay || undefined;
      for (const char of text) {
        if (usKeyboardLayout.has(char)) {
          await this.press(char, {
            delay
          });
        } else {
          if (delay)
            await new Promise((f) => setTimeout(f, delay));
          await this.insertText(char);
        }
      }
    }
    async press(key, options = {}) {
      function split(keyString) {
        const keys = [];
        let building = "";
        for (const char of keyString) {
          if (char === "+" && building) {
            keys.push(building);
            building = "";
          } else {
            building += char;
          }
        }
        keys.push(building);
        return keys;
      }
      const tokens = split(key);
      key = tokens[tokens.length - 1];
      for (let i = 0;i < tokens.length - 1; ++i)
        await this.down(tokens[i]);
      await this.down(key);
      if (options.delay)
        await new Promise((f) => setTimeout(f, options.delay));
      await this.up(key);
      for (let i = tokens.length - 2;i >= 0; --i)
        await this.up(tokens[i]);
    }
    async ensureModifiers(mm) {
      const modifiers = mm.map(resolveSmartModifier);
      for (const modifier of modifiers) {
        if (!kModifiers.includes(modifier))
          throw new Error("Unknown modifier " + modifier);
      }
      const restore = Array.from(this._pressedModifiers);
      for (const key of kModifiers) {
        const needDown = modifiers.includes(key);
        const isDown = this._pressedModifiers.has(key);
        if (needDown && !isDown)
          await this.down(key);
        else if (!needDown && isDown)
          await this.up(key);
      }
      return restore;
    }
    _modifiers() {
      return this._pressedModifiers;
    }
  }
  exports.Keyboard = Keyboard;

  class Mouse {
    constructor(raw, page) {
      this._keyboard = undefined;
      this._x = 0;
      this._y = 0;
      this._lastButton = "none";
      this._buttons = new Set;
      this._raw = undefined;
      this._page = undefined;
      this._raw = raw;
      this._page = page;
      this._keyboard = this._page.keyboard;
    }
    async move(x, y, options = {}, metadata) {
      if (metadata)
        metadata.point = {
          x,
          y
        };
      const {
        steps = 1
      } = options;
      const fromX = this._x;
      const fromY = this._y;
      this._x = x;
      this._y = y;
      for (let i = 1;i <= steps; i++) {
        const middleX = fromX + (x - fromX) * (i / steps);
        const middleY = fromY + (y - fromY) * (i / steps);
        await this._raw.move(middleX, middleY, this._lastButton, this._buttons, this._keyboard._modifiers(), !!options.forClick);
      }
    }
    async down(options = {}, metadata) {
      if (metadata)
        metadata.point = {
          x: this._x,
          y: this._y
        };
      const {
        button = "left",
        clickCount = 1
      } = options;
      this._lastButton = button;
      this._buttons.add(button);
      await this._raw.down(this._x, this._y, this._lastButton, this._buttons, this._keyboard._modifiers(), clickCount);
    }
    async up(options = {}, metadata) {
      if (metadata)
        metadata.point = {
          x: this._x,
          y: this._y
        };
      const {
        button = "left",
        clickCount = 1
      } = options;
      this._lastButton = "none";
      this._buttons.delete(button);
      await this._raw.up(this._x, this._y, button, this._buttons, this._keyboard._modifiers(), clickCount);
    }
    async click(x, y, options = {}, metadata) {
      if (metadata)
        metadata.point = {
          x: this._x,
          y: this._y
        };
      const {
        delay = null,
        clickCount = 1
      } = options;
      if (delay) {
        this.move(x, y, {
          forClick: true
        });
        for (let cc = 1;cc <= clickCount; ++cc) {
          await this.down({
            ...options,
            clickCount: cc
          });
          await new Promise((f) => setTimeout(f, delay));
          await this.up({
            ...options,
            clickCount: cc
          });
          if (cc < clickCount)
            await new Promise((f) => setTimeout(f, delay));
        }
      } else {
        const promises = [];
        promises.push(this.move(x, y, {
          forClick: true
        }));
        for (let cc = 1;cc <= clickCount; ++cc) {
          promises.push(this.down({
            ...options,
            clickCount: cc
          }));
          promises.push(this.up({
            ...options,
            clickCount: cc
          }));
        }
        await Promise.all(promises);
      }
    }
    async dblclick(x, y, options = {}) {
      await this.click(x, y, {
        ...options,
        clickCount: 2
      });
    }
    async wheel(deltaX, deltaY) {
      await this._raw.wheel(this._x, this._y, this._buttons, this._keyboard._modifiers(), deltaX, deltaY);
    }
  }
  exports.Mouse = Mouse;
  var aliases = new Map([["ShiftLeft", ["Shift"]], ["ControlLeft", ["Control"]], ["AltLeft", ["Alt"]], ["MetaLeft", ["Meta"]], ["Enter", ["\n", "\r"]]]);
  var usKeyboardLayout = buildLayoutClosure(keyboardLayout.USKeyboardLayout);

  class Touchscreen {
    constructor(raw, page) {
      this._raw = undefined;
      this._page = undefined;
      this._raw = raw;
      this._page = page;
    }
    async tap(x, y, metadata) {
      if (metadata)
        metadata.point = {
          x,
          y
        };
      if (!this._page._browserContext._options.hasTouch)
        throw new Error("hasTouch must be enabled on the browser context before using the touchscreen.");
      await this._raw.tap(x, y, this._page.keyboard._modifiers());
    }
  }
  exports.Touchscreen = Touchscreen;
});

// node_modules/playwright-core/lib/server/screenshotter.js
var require_screenshotter = __commonJS((exports) => {
  var inPagePrepareForScreenshots = function(screenshotStyle, hideCaret, disableAnimations, syncAnimations) {
    if (syncAnimations) {
      const style = document.createElement("style");
      style.textContent = "body {}";
      document.head.appendChild(style);
      document.documentElement.getBoundingClientRect();
      style.remove();
    }
    if (!screenshotStyle && !hideCaret && !disableAnimations)
      return;
    const collectRoots = (root, roots2 = []) => {
      roots2.push(root);
      const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);
      do {
        const node = walker.currentNode;
        const shadowRoot = node instanceof Element ? node.shadowRoot : null;
        if (shadowRoot)
          collectRoots(shadowRoot, roots2);
      } while (walker.nextNode());
      return roots2;
    };
    const roots = collectRoots(document);
    const cleanupCallbacks = [];
    if (screenshotStyle) {
      for (const root of roots) {
        const styleTag = document.createElement("style");
        styleTag.textContent = screenshotStyle;
        if (root === document)
          document.documentElement.append(styleTag);
        else
          root.append(styleTag);
        cleanupCallbacks.push(() => {
          styleTag.remove();
        });
      }
    }
    if (hideCaret) {
      const elements = new Map;
      for (const root of roots) {
        root.querySelectorAll("input,textarea,[contenteditable]").forEach((element) => {
          elements.set(element, {
            value: element.style.getPropertyValue("caret-color"),
            priority: element.style.getPropertyPriority("caret-color")
          });
          element.style.setProperty("caret-color", "transparent", "important");
        });
      }
      cleanupCallbacks.push(() => {
        for (const [element, value] of elements)
          element.style.setProperty("caret-color", value.value, value.priority);
      });
    }
    if (disableAnimations) {
      const infiniteAnimationsToResume = new Set;
      const handleAnimations = (root) => {
        for (const animation of root.getAnimations()) {
          if (!animation.effect || animation.playbackRate === 0 || infiniteAnimationsToResume.has(animation))
            continue;
          const endTime = animation.effect.getComputedTiming().endTime;
          if (Number.isFinite(endTime)) {
            try {
              animation.finish();
            } catch (e) {
            }
          } else {
            try {
              animation.cancel();
              infiniteAnimationsToResume.add(animation);
            } catch (e) {
            }
          }
        }
      };
      for (const root of roots) {
        const handleRootAnimations = handleAnimations.bind(null, root);
        handleRootAnimations();
        root.addEventListener("transitionrun", handleRootAnimations);
        root.addEventListener("animationstart", handleRootAnimations);
        cleanupCallbacks.push(() => {
          root.removeEventListener("transitionrun", handleRootAnimations);
          root.removeEventListener("animationstart", handleRootAnimations);
        });
      }
      cleanupCallbacks.push(() => {
        for (const animation of infiniteAnimationsToResume) {
          try {
            animation.play();
          } catch (e) {
          }
        }
      });
    }
    window.__pwCleanupScreenshot = () => {
      for (const cleanupCallback of cleanupCallbacks)
        cleanupCallback();
      delete window.__pwCleanupScreenshot;
    };
  };
  var trimClipToSize = function(clip, size) {
    const p1 = {
      x: Math.max(0, Math.min(clip.x, size.width)),
      y: Math.max(0, Math.min(clip.y, size.height))
    };
    const p2 = {
      x: Math.max(0, Math.min(clip.x + clip.width, size.width)),
      y: Math.max(0, Math.min(clip.y + clip.height, size.height))
    };
    const result = {
      x: p1.x,
      y: p1.y,
      width: p2.x - p1.x,
      height: p2.y - p1.y
    };
    (0, _utils.assert)(result.width && result.height, "Clipped area is either empty or outside the resulting image");
    return result;
  };
  var validateScreenshotOptions = function(options) {
    let format = null;
    if (options.type) {
      (0, _utils.assert)(options.type === "png" || options.type === "jpeg", "Unknown options.type value: " + options.type);
      format = options.type;
    }
    if (!format)
      format = "png";
    if (options.quality !== undefined) {
      (0, _utils.assert)(format === "jpeg", "options.quality is unsupported for the " + format + " screenshots");
      (0, _utils.assert)(typeof options.quality === "number", "Expected options.quality to be a number but found " + typeof options.quality);
      (0, _utils.assert)(Number.isInteger(options.quality), "Expected options.quality to be an integer");
      (0, _utils.assert)(options.quality >= 0 && options.quality <= 100, "Expected options.quality to be between 0 and 100 (inclusive), got " + options.quality);
    }
    if (options.clip) {
      (0, _utils.assert)(typeof options.clip.x === "number", "Expected options.clip.x to be a number but found " + typeof options.clip.x);
      (0, _utils.assert)(typeof options.clip.y === "number", "Expected options.clip.y to be a number but found " + typeof options.clip.y);
      (0, _utils.assert)(typeof options.clip.width === "number", "Expected options.clip.width to be a number but found " + typeof options.clip.width);
      (0, _utils.assert)(typeof options.clip.height === "number", "Expected options.clip.height to be a number but found " + typeof options.clip.height);
      (0, _utils.assert)(options.clip.width !== 0, "Expected options.clip.width not to be 0.");
      (0, _utils.assert)(options.clip.height !== 0, "Expected options.clip.height not to be 0.");
    }
    return format;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Screenshotter = undefined;
  exports.validateScreenshotOptions = validateScreenshotOptions;
  var _helper = require_helper();
  var _utils = require_utils3();
  var _multimap = require_multimap();

  class Screenshotter {
    constructor(page) {
      this._queue = new TaskQueue;
      this._page = undefined;
      this._page = page;
      this._queue = new TaskQueue;
    }
    async _originalViewportSize(progress2) {
      const originalViewportSize = this._page.viewportSize();
      let viewportSize = originalViewportSize;
      if (!viewportSize)
        viewportSize = await this._page.mainFrame().waitForFunctionValueInUtility(progress2, () => ({
          width: window.innerWidth,
          height: window.innerHeight
        }));
      return {
        viewportSize,
        originalViewportSize
      };
    }
    async _fullPageSize(progress2) {
      const fullPageSize = await this._page.mainFrame().waitForFunctionValueInUtility(progress2, () => {
        if (!document.body || !document.documentElement)
          return null;
        return {
          width: Math.max(document.body.scrollWidth, document.documentElement.scrollWidth, document.body.offsetWidth, document.documentElement.offsetWidth, document.body.clientWidth, document.documentElement.clientWidth),
          height: Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight)
        };
      });
      return fullPageSize;
    }
    async screenshotPage(progress2, options) {
      const format = validateScreenshotOptions(options);
      return this._queue.postTask(async () => {
        progress2.log("taking page screenshot");
        const {
          viewportSize
        } = await this._originalViewportSize(progress2);
        await this._preparePageForScreenshot(progress2, options.style, options.caret !== "initial", options.animations === "disabled");
        progress2.throwIfAborted();
        if (options.fullPage) {
          const fullPageSize = await this._fullPageSize(progress2);
          let documentRect = {
            x: 0,
            y: 0,
            width: fullPageSize.width,
            height: fullPageSize.height
          };
          const fitsViewport = fullPageSize.width <= viewportSize.width && fullPageSize.height <= viewportSize.height;
          if (options.clip)
            documentRect = trimClipToSize(options.clip, documentRect);
          const buffer2 = await this._screenshot(progress2, format, documentRect, undefined, fitsViewport, options);
          progress2.throwIfAborted();
          await this._restorePageAfterScreenshot();
          return buffer2;
        }
        const viewportRect = options.clip ? trimClipToSize(options.clip, viewportSize) : {
          x: 0,
          y: 0,
          ...viewportSize
        };
        const buffer = await this._screenshot(progress2, format, undefined, viewportRect, true, options);
        progress2.throwIfAborted();
        await this._restorePageAfterScreenshot();
        return buffer;
      });
    }
    async screenshotElement(progress2, handle, options) {
      const format = validateScreenshotOptions(options);
      return this._queue.postTask(async () => {
        progress2.log("taking element screenshot");
        const {
          viewportSize
        } = await this._originalViewportSize(progress2);
        await this._preparePageForScreenshot(progress2, options.style, options.caret !== "initial", options.animations === "disabled");
        progress2.throwIfAborted();
        await handle._waitAndScrollIntoViewIfNeeded(progress2, true);
        progress2.throwIfAborted();
        const boundingBox = await handle.boundingBox();
        (0, _utils.assert)(boundingBox, "Node is either not visible or not an HTMLElement");
        (0, _utils.assert)(boundingBox.width !== 0, "Node has 0 width.");
        (0, _utils.assert)(boundingBox.height !== 0, "Node has 0 height.");
        const fitsViewport = boundingBox.width <= viewportSize.width && boundingBox.height <= viewportSize.height;
        progress2.throwIfAborted();
        const scrollOffset = await this._page.mainFrame().waitForFunctionValueInUtility(progress2, () => ({
          x: window.scrollX,
          y: window.scrollY
        }));
        const documentRect = {
          ...boundingBox
        };
        documentRect.x += scrollOffset.x;
        documentRect.y += scrollOffset.y;
        const buffer = await this._screenshot(progress2, format, _helper.helper.enclosingIntRect(documentRect), undefined, fitsViewport, options);
        progress2.throwIfAborted();
        await this._restorePageAfterScreenshot();
        return buffer;
      });
    }
    async _preparePageForScreenshot(progress2, screenshotStyle, hideCaret, disableAnimations) {
      if (disableAnimations)
        progress2.log("  disabled all CSS animations");
      const syncAnimations = this._page._delegate.shouldToggleStyleSheetToSyncAnimations();
      await Promise.all(this._page.frames().map(async (frame) => {
        await frame.nonStallingEvaluateInExistingContext("(" + inPagePrepareForScreenshots.toString() + `)(${JSON.stringify(screenshotStyle)}, ${hideCaret}, ${disableAnimations}, ${syncAnimations})`, false, "utility").catch(() => {
        });
      }));
      if (!process.env.PW_TEST_SCREENSHOT_NO_FONTS_READY) {
        progress2.log("waiting for fonts to load...");
        await Promise.all(this._page.frames().map(async (frame) => {
          await frame.nonStallingEvaluateInExistingContext("document.fonts.ready", false, "utility").catch(() => {
          });
        }));
        progress2.log("fonts loaded");
      }
      progress2.cleanupWhenAborted(() => this._restorePageAfterScreenshot());
    }
    async _restorePageAfterScreenshot() {
      await Promise.all(this._page.frames().map(async (frame) => {
        frame.nonStallingEvaluateInExistingContext("window.__pwCleanupScreenshot && window.__pwCleanupScreenshot()", false, "utility").catch(() => {
        });
      }));
    }
    async _maskElements(progress2, options) {
      const framesToParsedSelectors = new _multimap.MultiMap;
      const cleanup = async () => {
        await Promise.all([...framesToParsedSelectors.keys()].map(async (frame) => {
          await frame.hideHighlight();
        }));
      };
      if (!options.mask || !options.mask.length)
        return cleanup;
      await Promise.all((options.mask || []).map(async ({
        frame,
        selector
      }) => {
        const pair = await frame.selectors.resolveFrameForSelector(selector);
        if (pair)
          framesToParsedSelectors.set(pair.frame, pair.info.parsed);
      }));
      progress2.throwIfAborted();
      await Promise.all([...framesToParsedSelectors.keys()].map(async (frame) => {
        await frame.maskSelectors(framesToParsedSelectors.get(frame), options.maskColor || "#F0F");
      }));
      progress2.cleanupWhenAborted(cleanup);
      return cleanup;
    }
    async _screenshot(progress2, format, documentRect, viewportRect, fitsViewport, options) {
      var _options$quality;
      if (options.__testHookBeforeScreenshot)
        await options.__testHookBeforeScreenshot();
      progress2.throwIfAborted();
      const shouldSetDefaultBackground = options.omitBackground && format === "png";
      if (shouldSetDefaultBackground) {
        await this._page._delegate.setBackgroundColor({
          r: 0,
          g: 0,
          b: 0,
          a: 0
        });
        progress2.cleanupWhenAborted(() => this._page._delegate.setBackgroundColor());
      }
      progress2.throwIfAborted();
      const cleanupHighlight = await this._maskElements(progress2, options);
      progress2.throwIfAborted();
      const quality = format === "jpeg" ? (_options$quality = options.quality) !== null && _options$quality !== undefined ? _options$quality : 80 : undefined;
      const buffer = await this._page._delegate.takeScreenshot(progress2, format, documentRect, viewportRect, quality, fitsViewport, options.scale || "device");
      progress2.throwIfAborted();
      await cleanupHighlight();
      progress2.throwIfAborted();
      if (shouldSetDefaultBackground)
        await this._page._delegate.setBackgroundColor();
      progress2.throwIfAborted();
      if (options.__testHookAfterScreenshot)
        await options.__testHookAfterScreenshot();
      return buffer;
    }
  }
  exports.Screenshotter = Screenshotter;

  class TaskQueue {
    constructor() {
      this._chain = undefined;
      this._chain = Promise.resolve();
    }
    postTask(task) {
      const result = this._chain.then(task);
      this._chain = result.catch(() => {
      });
      return result;
    }
  }
});

// node_modules/playwright-core/lib/server/console.js
var require_console = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ConsoleMessage = undefined;

  class ConsoleMessage {
    constructor(page, type, text, args, location2) {
      this._type = undefined;
      this._text = undefined;
      this._args = undefined;
      this._location = undefined;
      this._page = undefined;
      this._page = page;
      this._type = type;
      this._text = text;
      this._args = args;
      this._location = location2 || {
        url: "",
        lineNumber: 0,
        columnNumber: 0
      };
    }
    page() {
      return this._page;
    }
    type() {
      return this._type;
    }
    text() {
      if (this._text === undefined)
        this._text = this._args.map((arg) => arg.preview()).join(" ");
      return this._text;
    }
    args() {
      return this._args;
    }
    location() {
      return this._location;
    }
  }
  exports.ConsoleMessage = ConsoleMessage;
});

// node_modules/playwright-core/lib/server/accessibility.js
var require_accessibility = __commonJS((exports) => {
  var collectInterestingNodes = function(collection, node, insideControl) {
    if (node.isInteresting(insideControl))
      collection.add(node);
    if (node.isLeafNode())
      return;
    insideControl = insideControl || node.isControl();
    for (const child of node.children())
      collectInterestingNodes(collection, child, insideControl);
  };
  var serializeTree = function(node, whitelistedNodes) {
    const children = [];
    for (const child of node.children())
      children.push(...serializeTree(child, whitelistedNodes));
    if (whitelistedNodes && !whitelistedNodes.has(node))
      return children;
    const serializedNode = node.serialize();
    if (children.length)
      serializedNode.children = children;
    return [serializedNode];
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Accessibility = undefined;

  class Accessibility {
    constructor(getAXTree) {
      this._getAXTree = undefined;
      this._getAXTree = getAXTree;
    }
    async snapshot(options = {}) {
      const {
        interestingOnly = true,
        root = null
      } = options;
      const {
        tree,
        needle
      } = await this._getAXTree(root || undefined);
      if (!interestingOnly) {
        if (root)
          return needle && serializeTree(needle)[0];
        return serializeTree(tree)[0];
      }
      const interestingNodes = new Set;
      collectInterestingNodes(interestingNodes, tree, false);
      if (root && (!needle || !interestingNodes.has(needle)))
        return null;
      return serializeTree(needle || tree, interestingNodes)[0];
    }
  }
  exports.Accessibility = Accessibility;
});

// node_modules/playwright-core/lib/server/fileChooser.js
var require_fileChooser = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FileChooser = undefined;

  class FileChooser {
    constructor(page, elementHandle, isMultiple) {
      this._page = undefined;
      this._elementHandle = undefined;
      this._isMultiple = undefined;
      this._page = page;
      this._elementHandle = elementHandle;
      this._isMultiple = isMultiple;
    }
    element() {
      return this._elementHandle;
    }
    isMultiple() {
      return this._isMultiple;
    }
    page() {
      return this._page;
    }
  }
  exports.FileChooser = FileChooser;
});

// node_modules/playwright-core/lib/server/page.js
var require_page = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var addPageBinding = function(bindingName, needsHandle, utilityScriptSerializers) {
    const binding = globalThis[bindingName];
    if (binding.__installed)
      return;
    globalThis[bindingName] = (...args) => {
      const me = globalThis[bindingName];
      if (needsHandle && args.slice(1).some((arg) => arg !== undefined))
        throw new Error(`exposeBindingHandle supports a single argument, ${args.length} received`);
      let callbacks = me["callbacks"];
      if (!callbacks) {
        callbacks = new Map;
        me["callbacks"] = callbacks;
      }
      const seq = (me["lastSeq"] || 0) + 1;
      me["lastSeq"] = seq;
      let handles = me["handles"];
      if (!handles) {
        handles = new Map;
        me["handles"] = handles;
      }
      const promise = new Promise((resolve, reject) => callbacks.set(seq, {
        resolve,
        reject
      }));
      let payload;
      if (needsHandle) {
        handles.set(seq, args[0]);
        payload = {
          name: bindingName,
          seq
        };
      } else {
        const serializedArgs = [];
        for (let i = 0;i < args.length; i++) {
          serializedArgs[i] = utilityScriptSerializers.serializeAsCallArgument(args[i], (v) => {
            return {
              fallThrough: v
            };
          });
        }
        payload = {
          name: bindingName,
          seq,
          serializedArgs
        };
      }
      binding(JSON.stringify(payload));
      return promise;
    };
    globalThis[bindingName].__installed = true;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Worker = exports.PageBinding = exports.Page = undefined;
  var frames = _interopRequireWildcard(require_frames());
  var input = _interopRequireWildcard(require_input());
  var js = _interopRequireWildcard(require_javascript());
  var _screenshotter = require_screenshotter();
  var _timeoutSettings = require_timeoutSettings();
  var _browserContext = require_browserContext();
  var _console = require_console();
  var accessibility = _interopRequireWildcard(require_accessibility());
  var _fileChooser = require_fileChooser();
  var _progress = require_progress();
  var _utils = require_utils3();
  var _manualPromise = require_manualPromise();
  var _debugLogger = require_debugLogger();
  var _comparators = require_comparators();
  var _instrumentation = require_instrumentation();
  var _selectorParser = require_selectorParser();
  var _utilityScriptSerializers = require_utilityScriptSerializers();
  var _errors = require_errors();
  var _locatorGenerators = require_locatorGenerators();

  class Page extends _instrumentation.SdkObject {
    constructor(delegate, browserContext) {
      super(browserContext, "page");
      this._closedState = "open";
      this._closedPromise = new _manualPromise.ManualPromise;
      this._initialized = false;
      this._eventsToEmitAfterInitialized = [];
      this._crashed = false;
      this.openScope = new _utils.LongStandingScope;
      this._browserContext = undefined;
      this.keyboard = undefined;
      this.mouse = undefined;
      this.touchscreen = undefined;
      this._timeoutSettings = undefined;
      this._delegate = undefined;
      this._emulatedSize = undefined;
      this._extraHTTPHeaders = undefined;
      this._emulatedMedia = {};
      this._interceptFileChooser = false;
      this._pageBindings = new Map;
      this.initScripts = [];
      this._screenshotter = undefined;
      this._frameManager = undefined;
      this.accessibility = undefined;
      this._workers = new Map;
      this.pdf = undefined;
      this.coverage = undefined;
      this._clientRequestInterceptor = undefined;
      this._serverRequestInterceptor = undefined;
      this._ownedContext = undefined;
      this._pageIsError = undefined;
      this._video = null;
      this._opener = undefined;
      this._isServerSideOnly = false;
      this._locatorHandlers = new Map;
      this._lastLocatorHandlerUid = 0;
      this._locatorHandlerRunningCounter = 0;
      this._frameThrottler = new FrameThrottler(10, 35, 200);
      this._closeReason = undefined;
      this.attribution.page = this;
      this._delegate = delegate;
      this._browserContext = browserContext;
      this.accessibility = new accessibility.Accessibility(delegate.getAccessibilityTree.bind(delegate));
      this.keyboard = new input.Keyboard(delegate.rawKeyboard);
      this.mouse = new input.Mouse(delegate.rawMouse, this);
      this.touchscreen = new input.Touchscreen(delegate.rawTouchscreen, this);
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings(browserContext._timeoutSettings);
      this._screenshotter = new _screenshotter.Screenshotter(this);
      this._frameManager = new frames.FrameManager(this);
      if (delegate.pdf)
        this.pdf = delegate.pdf.bind(delegate);
      this.coverage = delegate.coverage ? delegate.coverage() : null;
    }
    async initOpener(opener) {
      if (!opener)
        return;
      const openerPage = await opener.pageOrError();
      if (openerPage instanceof Page && !openerPage.isClosed())
        this._opener = openerPage;
    }
    reportAsNew(error = undefined, contextEvent = _browserContext.BrowserContext.Events.Page) {
      if (error) {
        if (this._browserContext.isClosingOrClosed())
          return;
        this._setIsError(error);
      }
      this._initialized = true;
      this.emitOnContext(contextEvent, this);
      for (const {
        event,
        args
      } of this._eventsToEmitAfterInitialized)
        this._browserContext.emit(event, ...args);
      this._eventsToEmitAfterInitialized = [];
      if (this.isClosed())
        this.emit(Page.Events.Close);
      else
        this.instrumentation.onPageOpen(this);
    }
    initializedOrUndefined() {
      return this._initialized ? this : undefined;
    }
    emitOnContext(event, ...args) {
      if (this._isServerSideOnly)
        return;
      this._browserContext.emit(event, ...args);
    }
    emitOnContextOnceInitialized(event, ...args) {
      if (this._isServerSideOnly)
        return;
      if (this._initialized)
        this._browserContext.emit(event, ...args);
      else
        this._eventsToEmitAfterInitialized.push({
          event,
          args
        });
    }
    async resetForReuse(metadata) {
      this.setDefaultNavigationTimeout(undefined);
      this.setDefaultTimeout(undefined);
      this._locatorHandlers.clear();
      await this._removeExposedBindings();
      await this._removeInitScripts();
      await this.setClientRequestInterceptor(undefined);
      await this._setServerRequestInterceptor(undefined);
      await this.setFileChooserIntercepted(false);
      await this.mainFrame().goto(metadata, "about:blank");
      this._emulatedSize = undefined;
      this._emulatedMedia = {};
      this._extraHTTPHeaders = undefined;
      this._interceptFileChooser = false;
      await Promise.all([this._delegate.updateEmulatedViewportSize(), this._delegate.updateEmulateMedia(), this._delegate.updateFileChooserInterception()]);
      await this._delegate.resetForReuse();
    }
    _didClose() {
      this._frameManager.dispose();
      this._frameThrottler.dispose();
      (0, _utils.assert)(this._closedState !== "closed", "Page closed twice");
      this._closedState = "closed";
      this.emit(Page.Events.Close);
      this._closedPromise.resolve();
      this.instrumentation.onPageClose(this);
      this.openScope.close(new _errors.TargetClosedError);
    }
    _didCrash() {
      this._frameManager.dispose();
      this._frameThrottler.dispose();
      this.emit(Page.Events.Crash);
      this._crashed = true;
      this.instrumentation.onPageClose(this);
      this.openScope.close(new Error("Page crashed"));
    }
    async _onFileChooserOpened(handle) {
      let multiple;
      try {
        multiple = await handle.evaluate((element) => !!element.multiple);
      } catch (e) {
        return;
      }
      if (!this.listenerCount(Page.Events.FileChooser)) {
        handle.dispose();
        return;
      }
      const fileChooser = new _fileChooser.FileChooser(this, handle, multiple);
      this.emit(Page.Events.FileChooser, fileChooser);
    }
    context() {
      return this._browserContext;
    }
    opener() {
      return this._opener;
    }
    mainFrame() {
      return this._frameManager.mainFrame();
    }
    frames() {
      return this._frameManager.frames();
    }
    setDefaultNavigationTimeout(timeout) {
      this._timeoutSettings.setDefaultNavigationTimeout(timeout);
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
    }
    async exposeBinding(name, needsHandle, playwrightBinding) {
      if (this._pageBindings.has(name))
        throw new Error(`Function "${name}" has been already registered`);
      if (this._browserContext._pageBindings.has(name))
        throw new Error(`Function "${name}" has been already registered in the browser context`);
      const binding = new PageBinding(name, playwrightBinding, needsHandle);
      this._pageBindings.set(name, binding);
      await this._delegate.exposeBinding(binding);
    }
    async _removeExposedBindings() {
      for (const key of this._pageBindings.keys()) {
        if (!key.startsWith("__pw"))
          this._pageBindings.delete(key);
      }
      await this._delegate.removeExposedBindings();
    }
    setExtraHTTPHeaders(headers) {
      this._extraHTTPHeaders = headers;
      return this._delegate.updateExtraHTTPHeaders();
    }
    extraHTTPHeaders() {
      return this._extraHTTPHeaders;
    }
    async _onBindingCalled(payload, context) {
      if (this._closedState === "closed")
        return;
      await PageBinding.dispatch(this, payload, context);
    }
    _addConsoleMessage(type, args, location2, text) {
      const message = new _console.ConsoleMessage(this, type, text, args, location2);
      const intercepted = this._frameManager.interceptConsoleMessage(message);
      if (intercepted) {
        args.forEach((arg) => arg.dispose());
        return;
      }
      this.emitOnContextOnceInitialized(_browserContext.BrowserContext.Events.Console, message);
    }
    async reload(metadata, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run((progress2) => this.mainFrame().raceNavigationAction(progress2, options, async () => {
        const [response] = await Promise.all([
          this.mainFrame()._waitForNavigation(progress2, true, options),
          this._delegate.reload()
        ]);
        return response;
      }), this._timeoutSettings.navigationTimeout(options));
    }
    async goBack(metadata, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run((progress2) => this.mainFrame().raceNavigationAction(progress2, options, async () => {
        let error;
        const waitPromise = this.mainFrame()._waitForNavigation(progress2, false, options).catch((e) => {
          error = e;
          return null;
        });
        const result = await this._delegate.goBack();
        if (!result)
          return null;
        const response = await waitPromise;
        if (error)
          throw error;
        return response;
      }), this._timeoutSettings.navigationTimeout(options));
    }
    async goForward(metadata, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run((progress2) => this.mainFrame().raceNavigationAction(progress2, options, async () => {
        let error;
        const waitPromise = this.mainFrame()._waitForNavigation(progress2, false, options).catch((e) => {
          error = e;
          return null;
        });
        const result = await this._delegate.goForward();
        if (!result)
          return null;
        const response = await waitPromise;
        if (error)
          throw error;
        return response;
      }), this._timeoutSettings.navigationTimeout(options));
    }
    registerLocatorHandler(selector, noWaitAfter) {
      const uid = ++this._lastLocatorHandlerUid;
      this._locatorHandlers.set(uid, {
        selector,
        noWaitAfter
      });
      return uid;
    }
    resolveLocatorHandler(uid, remove) {
      const handler = this._locatorHandlers.get(uid);
      if (remove)
        this._locatorHandlers.delete(uid);
      if (handler) {
        var _handler$resolved;
        (_handler$resolved = handler.resolved) === null || _handler$resolved === undefined || _handler$resolved.resolve();
        handler.resolved = undefined;
      }
    }
    unregisterLocatorHandler(uid) {
      this._locatorHandlers.delete(uid);
    }
    async performLocatorHandlersCheckpoint(progress2) {
      if (this._locatorHandlerRunningCounter)
        return;
      for (const [uid, handler] of this._locatorHandlers) {
        if (!handler.resolved) {
          if (await this.mainFrame().isVisibleInternal(handler.selector, {
            strict: true
          })) {
            handler.resolved = new _manualPromise.ManualPromise;
            this.emit(Page.Events.LocatorHandlerTriggered, uid);
          }
        }
        if (handler.resolved) {
          ++this._locatorHandlerRunningCounter;
          progress2.log(`  found ${(0, _locatorGenerators.asLocator)(this.attribution.playwright.options.sdkLanguage, handler.selector)}, intercepting action to run the handler`);
          const promise = handler.resolved.then(async () => {
            progress2.throwIfAborted();
            if (!handler.noWaitAfter) {
              progress2.log(`  locator handler has finished, waiting for ${(0, _locatorGenerators.asLocator)(this.attribution.playwright.options.sdkLanguage, handler.selector)} to be hidden`);
              await this.mainFrame().waitForSelectorInternal(progress2, handler.selector, {
                state: "hidden"
              });
            } else {
              progress2.log(`  locator handler has finished`);
            }
          });
          await this.openScope.race(promise).finally(() => --this._locatorHandlerRunningCounter);
          progress2.throwIfAborted();
          progress2.log(`  interception handler has finished, continuing`);
        }
      }
    }
    async emulateMedia(options) {
      if (options.media !== undefined)
        this._emulatedMedia.media = options.media;
      if (options.colorScheme !== undefined)
        this._emulatedMedia.colorScheme = options.colorScheme;
      if (options.reducedMotion !== undefined)
        this._emulatedMedia.reducedMotion = options.reducedMotion;
      if (options.forcedColors !== undefined)
        this._emulatedMedia.forcedColors = options.forcedColors;
      await this._delegate.updateEmulateMedia();
    }
    emulatedMedia() {
      var _contextOptions$color, _contextOptions$reduc, _contextOptions$force;
      const contextOptions = this._browserContext._options;
      return {
        media: this._emulatedMedia.media || "no-override",
        colorScheme: this._emulatedMedia.colorScheme !== undefined ? this._emulatedMedia.colorScheme : (_contextOptions$color = contextOptions.colorScheme) !== null && _contextOptions$color !== undefined ? _contextOptions$color : "light",
        reducedMotion: this._emulatedMedia.reducedMotion !== undefined ? this._emulatedMedia.reducedMotion : (_contextOptions$reduc = contextOptions.reducedMotion) !== null && _contextOptions$reduc !== undefined ? _contextOptions$reduc : "no-preference",
        forcedColors: this._emulatedMedia.forcedColors !== undefined ? this._emulatedMedia.forcedColors : (_contextOptions$force = contextOptions.forcedColors) !== null && _contextOptions$force !== undefined ? _contextOptions$force : "none"
      };
    }
    async setViewportSize(viewportSize) {
      this._emulatedSize = {
        viewport: {
          ...viewportSize
        },
        screen: {
          ...viewportSize
        }
      };
      await this._delegate.updateEmulatedViewportSize();
    }
    viewportSize() {
      var _this$emulatedSize;
      return ((_this$emulatedSize = this.emulatedSize()) === null || _this$emulatedSize === undefined ? undefined : _this$emulatedSize.viewport) || null;
    }
    emulatedSize() {
      if (this._emulatedSize)
        return this._emulatedSize;
      const contextOptions = this._browserContext._options;
      return contextOptions.viewport ? {
        viewport: contextOptions.viewport,
        screen: contextOptions.screen || contextOptions.viewport
      } : null;
    }
    async bringToFront() {
      await this._delegate.bringToFront();
    }
    async addInitScript(source) {
      this.initScripts.push(source);
      await this._delegate.addInitScript(source);
    }
    async _removeInitScripts() {
      this.initScripts.splice(0, this.initScripts.length);
      await this._delegate.removeInitScripts();
    }
    needsRequestInterception() {
      return !!this._clientRequestInterceptor || !!this._serverRequestInterceptor || !!this._browserContext._requestInterceptor;
    }
    async setClientRequestInterceptor(handler) {
      this._clientRequestInterceptor = handler;
      await this._delegate.updateRequestInterception();
    }
    async _setServerRequestInterceptor(handler) {
      this._serverRequestInterceptor = handler;
      await this._delegate.updateRequestInterception();
    }
    async expectScreenshot(metadata, options = {}) {
      const locator = options.locator;
      const rafrafScreenshot = locator ? async (progress2, timeout) => {
        return await locator.frame.rafrafTimeoutScreenshotElementWithProgress(progress2, locator.selector, timeout, options || {});
      } : async (progress2, timeout) => {
        await this.performLocatorHandlersCheckpoint(progress2);
        await this.mainFrame().rafrafTimeout(timeout);
        return await this._screenshotter.screenshotPage(progress2, options || {});
      };
      const comparator = (0, _comparators.getComparator)("image/png");
      const controller = new _progress.ProgressController(metadata, this);
      if (!options.expected && options.isNot)
        return {
          errorMessage: '"not" matcher requires expected result'
        };
      try {
        const format = (0, _screenshotter.validateScreenshotOptions)(options || {});
        if (format !== "png")
          throw new Error("Only PNG screenshots are supported");
      } catch (error) {
        return {
          errorMessage: error.message
        };
      }
      let intermediateResult = undefined;
      const areEqualScreenshots = (actual, expected, previous) => {
        const comparatorResult = actual && expected ? comparator(actual, expected, options) : undefined;
        if (comparatorResult !== undefined && !!comparatorResult === !!options.isNot)
          return true;
        if (comparatorResult)
          intermediateResult = {
            errorMessage: comparatorResult.errorMessage,
            diff: comparatorResult.diff,
            actual,
            previous
          };
        return false;
      };
      const callTimeout = this._timeoutSettings.timeout(options);
      return controller.run(async (progress2) => {
        let actual;
        let previous;
        const pollIntervals = [0, 100, 250, 500];
        progress2.log(`${metadata.apiName}${callTimeout ? ` with timeout ${callTimeout}ms` : ""}`);
        if (options.expected)
          progress2.log(`  verifying given screenshot expectation`);
        else
          progress2.log(`  generating new stable screenshot expectation`);
        let isFirstIteration = true;
        while (true) {
          var _pollIntervals$shift;
          progress2.throwIfAborted();
          if (this.isClosed())
            throw new Error("The page has closed");
          const screenshotTimeout = (_pollIntervals$shift = pollIntervals.shift()) !== null && _pollIntervals$shift !== undefined ? _pollIntervals$shift : 1000;
          if (screenshotTimeout)
            progress2.log(`waiting ${screenshotTimeout}ms before taking screenshot`);
          previous = actual;
          actual = await rafrafScreenshot(progress2, screenshotTimeout).catch((e) => {
            progress2.log(`failed to take screenshot - ` + e.message);
            return;
          });
          if (!actual)
            continue;
          const expectation = options.expected && isFirstIteration ? options.expected : previous;
          if (areEqualScreenshots(actual, expectation, previous))
            break;
          if (intermediateResult)
            progress2.log(intermediateResult.errorMessage);
          isFirstIteration = false;
        }
        if (!isFirstIteration)
          progress2.log(`captured a stable screenshot`);
        if (!options.expected)
          return {
            actual
          };
        if (isFirstIteration) {
          progress2.log(`screenshot matched expectation`);
          return {};
        }
        if (areEqualScreenshots(actual, options.expected, previous)) {
          progress2.log(`screenshot matched expectation`);
          return {};
        }
        throw new Error(intermediateResult.errorMessage);
      }, callTimeout).catch((e) => {
        if (js.isJavaScriptErrorInEvaluate(e) || (0, _selectorParser.isInvalidSelectorError)(e))
          throw e;
        return {
          log: e.message ? [...metadata.log, e.message] : metadata.log,
          ...intermediateResult,
          errorMessage: e.message
        };
      });
    }
    async screenshot(metadata, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run((progress2) => this._screenshotter.screenshotPage(progress2, options), this._timeoutSettings.timeout(options));
    }
    async close(metadata, options = {}) {
      if (this._closedState === "closed")
        return;
      if (options.reason)
        this._closeReason = options.reason;
      const runBeforeUnload = !!options.runBeforeUnload;
      if (this._closedState !== "closing") {
        this._closedState = "closing";
        await this._delegate.closePage(runBeforeUnload).catch((e) => _debugLogger.debugLogger.log("error", e));
      }
      if (!runBeforeUnload)
        await this._closedPromise;
      if (this._ownedContext)
        await this._ownedContext.close(options);
    }
    _setIsError(error) {
      this._pageIsError = error;
      this._frameManager.createDummyMainFrameIfNeeded();
    }
    isClosed() {
      return this._closedState === "closed";
    }
    hasCrashed() {
      return this._crashed;
    }
    isClosedOrClosingOrCrashed() {
      return this._closedState !== "open" || this._crashed;
    }
    _addWorker(workerId, worker) {
      this._workers.set(workerId, worker);
      this.emit(Page.Events.Worker, worker);
    }
    _removeWorker(workerId) {
      const worker = this._workers.get(workerId);
      if (!worker)
        return;
      worker.didClose();
      this._workers.delete(workerId);
    }
    _clearWorkers() {
      for (const [workerId, worker] of this._workers) {
        worker.didClose();
        this._workers.delete(workerId);
      }
    }
    async setFileChooserIntercepted(enabled) {
      this._interceptFileChooser = enabled;
      await this._delegate.updateFileChooserInterception();
    }
    fileChooserIntercepted() {
      return this._interceptFileChooser;
    }
    frameNavigatedToNewDocument(frame) {
      this.emit(Page.Events.InternalFrameNavigatedToNewDocument, frame);
      const origin = frame.origin();
      if (origin)
        this._browserContext.addVisitedOrigin(origin);
    }
    allBindings() {
      return [...this._browserContext._pageBindings.values(), ...this._pageBindings.values()];
    }
    getBinding(name) {
      return this._pageBindings.get(name) || this._browserContext._pageBindings.get(name);
    }
    setScreencastOptions(options) {
      this._delegate.setScreencastOptions(options).catch((e) => _debugLogger.debugLogger.log("error", e));
      this._frameThrottler.setThrottlingEnabled(!!options);
    }
    throttleScreencastFrameAck(ack) {
      this._frameThrottler.ack(ack);
    }
    temporarilyDisableTracingScreencastThrottling() {
      this._frameThrottler.recharge();
    }
    async hideHighlight() {
      await Promise.all(this.frames().map((frame) => frame.hideHighlight().catch(() => {
      })));
    }
    markAsServerSideOnly() {
      this._isServerSideOnly = true;
    }
  }
  exports.Page = Page;
  Page.Events = {
    Close: "close",
    Crash: "crash",
    Download: "download",
    FileChooser: "filechooser",
    FrameAttached: "frameattached",
    FrameDetached: "framedetached",
    InternalFrameNavigatedToNewDocument: "internalframenavigatedtonewdocument",
    LocatorHandlerTriggered: "locatorhandlertriggered",
    ScreencastFrame: "screencastframe",
    Video: "video",
    WebSocket: "websocket",
    Worker: "worker"
  };

  class Worker extends _instrumentation.SdkObject {
    constructor(parent, url) {
      super(parent, "worker");
      this._url = undefined;
      this._executionContextPromise = undefined;
      this._executionContextCallback = undefined;
      this._existingExecutionContext = null;
      this.openScope = new _utils.LongStandingScope;
      this._url = url;
      this._executionContextCallback = () => {
      };
      this._executionContextPromise = new Promise((x) => this._executionContextCallback = x);
    }
    _createExecutionContext(delegate) {
      this._existingExecutionContext = new js.ExecutionContext(this, delegate, "worker");
      this._executionContextCallback(this._existingExecutionContext);
    }
    url() {
      return this._url;
    }
    didClose() {
      if (this._existingExecutionContext)
        this._existingExecutionContext.contextDestroyed("Worker was closed");
      this.emit(Worker.Events.Close, this);
      this.openScope.close(new Error("Worker closed"));
    }
    async evaluateExpression(expression, isFunction, arg) {
      return js.evaluateExpression(await this._executionContextPromise, expression, {
        returnByValue: true,
        isFunction
      }, arg);
    }
    async evaluateExpressionHandle(expression, isFunction, arg) {
      return js.evaluateExpression(await this._executionContextPromise, expression, {
        returnByValue: false,
        isFunction
      }, arg);
    }
  }
  exports.Worker = Worker;
  Worker.Events = {
    Close: "close"
  };

  class PageBinding {
    constructor(name, playwrightFunction, needsHandle) {
      this.name = undefined;
      this.playwrightFunction = undefined;
      this.source = undefined;
      this.needsHandle = undefined;
      this.name = name;
      this.playwrightFunction = playwrightFunction;
      this.source = `(${addPageBinding.toString()})(${JSON.stringify(name)}, ${needsHandle}, (${_utilityScriptSerializers.source})())`;
      this.needsHandle = needsHandle;
    }
    static async dispatch(page, payload, context) {
      const {
        name,
        seq,
        serializedArgs
      } = JSON.parse(payload);
      try {
        (0, _utils.assert)(context.world);
        const binding = page.getBinding(name);
        let result;
        if (binding.needsHandle) {
          const handle = await context.evaluateHandle(takeHandle, {
            name,
            seq
          }).catch((e) => null);
          result = await binding.playwrightFunction({
            frame: context.frame,
            page,
            context: page._browserContext
          }, handle);
        } else {
          const args = serializedArgs.map((a) => (0, _utilityScriptSerializers.parseEvaluationResultValue)(a));
          result = await binding.playwrightFunction({
            frame: context.frame,
            page,
            context: page._browserContext
          }, ...args);
        }
        context.evaluate(deliverResult, {
          name,
          seq,
          result
        }).catch((e) => _debugLogger.debugLogger.log("error", e));
      } catch (error) {
        if ((0, _utils.isError)(error))
          context.evaluate(deliverError, {
            name,
            seq,
            message: error.message,
            stack: error.stack
          }).catch((e) => _debugLogger.debugLogger.log("error", e));
        else
          context.evaluate(deliverErrorValue, {
            name,
            seq,
            error
          }).catch((e) => _debugLogger.debugLogger.log("error", e));
      }
      function takeHandle(arg) {
        const handle = globalThis[arg.name]["handles"].get(arg.seq);
        globalThis[arg.name]["handles"].delete(arg.seq);
        return handle;
      }
      function deliverResult(arg) {
        globalThis[arg.name]["callbacks"].get(arg.seq).resolve(arg.result);
        globalThis[arg.name]["callbacks"].delete(arg.seq);
      }
      function deliverError(arg) {
        const error = new Error(arg.message);
        error.stack = arg.stack;
        globalThis[arg.name]["callbacks"].get(arg.seq).reject(error);
        globalThis[arg.name]["callbacks"].delete(arg.seq);
      }
      function deliverErrorValue(arg) {
        globalThis[arg.name]["callbacks"].get(arg.seq).reject(arg.error);
        globalThis[arg.name]["callbacks"].delete(arg.seq);
      }
    }
  }
  exports.PageBinding = PageBinding;

  class FrameThrottler {
    constructor(nonThrottledFrames, defaultInterval, throttlingInterval) {
      this._acks = [];
      this._defaultInterval = undefined;
      this._throttlingInterval = undefined;
      this._nonThrottledFrames = undefined;
      this._budget = undefined;
      this._throttlingEnabled = false;
      this._timeoutId = undefined;
      this._nonThrottledFrames = nonThrottledFrames;
      this._budget = nonThrottledFrames;
      this._defaultInterval = defaultInterval;
      this._throttlingInterval = throttlingInterval;
      this._tick();
    }
    dispose() {
      if (this._timeoutId) {
        clearTimeout(this._timeoutId);
        this._timeoutId = undefined;
      }
    }
    setThrottlingEnabled(enabled) {
      this._throttlingEnabled = enabled;
    }
    recharge() {
      for (const ack of this._acks)
        ack();
      this._acks = [];
      this._budget = this._nonThrottledFrames;
      if (this._timeoutId) {
        clearTimeout(this._timeoutId);
        this._tick();
      }
    }
    ack(ack) {
      if (!this._timeoutId) {
        ack();
        return;
      }
      this._acks.push(ack);
    }
    _tick() {
      const ack = this._acks.shift();
      if (ack) {
        --this._budget;
        ack();
      }
      if (this._throttlingEnabled && this._budget <= 0) {
        this._timeoutId = setTimeout(() => this._tick(), this._throttlingInterval);
      } else {
        this._timeoutId = setTimeout(() => this._tick(), this._defaultInterval);
      }
    }
  }
});

// node_modules/playwright-core/lib/protocol/debug.js
var require_debug6 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.slowMoActions = exports.pausesBeforeInputActions = exports.commandsWithTracingSnapshots = undefined;
  var slowMoActions = exports.slowMoActions = new Set(["Page.goBack", "Page.goForward", "Page.reload", "Page.keyboardDown", "Page.keyboardUp", "Page.keyboardInsertText", "Page.keyboardType", "Page.keyboardPress", "Page.mouseMove", "Page.mouseDown", "Page.mouseUp", "Page.mouseClick", "Page.mouseWheel", "Page.touchscreenTap", "Frame.blur", "Frame.check", "Frame.click", "Frame.dragAndDrop", "Frame.dblclick", "Frame.dispatchEvent", "Frame.fill", "Frame.focus", "Frame.goto", "Frame.hover", "Frame.press", "Frame.selectOption", "Frame.setInputFiles", "Frame.tap", "Frame.type", "Frame.uncheck", "ElementHandle.check", "ElementHandle.click", "ElementHandle.dblclick", "ElementHandle.dispatchEvent", "ElementHandle.fill", "ElementHandle.focus", "ElementHandle.hover", "ElementHandle.press", "ElementHandle.scrollIntoViewIfNeeded", "ElementHandle.selectOption", "ElementHandle.selectText", "ElementHandle.setInputFiles", "ElementHandle.tap", "ElementHandle.type", "ElementHandle.uncheck"]);
  var commandsWithTracingSnapshots = exports.commandsWithTracingSnapshots = new Set(["EventTarget.waitForEventInfo", "BrowserContext.waitForEventInfo", "Page.waitForEventInfo", "WebSocket.waitForEventInfo", "ElectronApplication.waitForEventInfo", "AndroidDevice.waitForEventInfo", "Page.emulateMedia", "Page.goBack", "Page.goForward", "Page.reload", "Page.expectScreenshot", "Page.screenshot", "Page.setViewportSize", "Page.keyboardDown", "Page.keyboardUp", "Page.keyboardInsertText", "Page.keyboardType", "Page.keyboardPress", "Page.mouseMove", "Page.mouseDown", "Page.mouseUp", "Page.mouseClick", "Page.mouseWheel", "Page.touchscreenTap", "Frame.evalOnSelector", "Frame.evalOnSelectorAll", "Frame.addScriptTag", "Frame.addStyleTag", "Frame.blur", "Frame.check", "Frame.click", "Frame.dragAndDrop", "Frame.dblclick", "Frame.dispatchEvent", "Frame.evaluateExpression", "Frame.evaluateExpressionHandle", "Frame.fill", "Frame.focus", "Frame.getAttribute", "Frame.goto", "Frame.hover", "Frame.innerHTML", "Frame.innerText", "Frame.inputValue", "Frame.isChecked", "Frame.isDisabled", "Frame.isEnabled", "Frame.isHidden", "Frame.isVisible", "Frame.isEditable", "Frame.press", "Frame.selectOption", "Frame.setContent", "Frame.setInputFiles", "Frame.tap", "Frame.textContent", "Frame.type", "Frame.uncheck", "Frame.waitForTimeout", "Frame.waitForFunction", "Frame.waitForSelector", "Frame.expect", "JSHandle.evaluateExpression", "ElementHandle.evaluateExpression", "JSHandle.evaluateExpressionHandle", "ElementHandle.evaluateExpressionHandle", "ElementHandle.evalOnSelector", "ElementHandle.evalOnSelectorAll", "ElementHandle.check", "ElementHandle.click", "ElementHandle.dblclick", "ElementHandle.dispatchEvent", "ElementHandle.fill", "ElementHandle.focus", "ElementHandle.hover", "ElementHandle.innerHTML", "ElementHandle.innerText", "ElementHandle.inputValue", "ElementHandle.isChecked", "ElementHandle.isDisabled", "ElementHandle.isEditable", "ElementHandle.isEnabled", "ElementHandle.isHidden", "ElementHandle.isVisible", "ElementHandle.press", "ElementHandle.screenshot", "ElementHandle.scrollIntoViewIfNeeded", "ElementHandle.selectOption", "ElementHandle.selectText", "ElementHandle.setInputFiles", "ElementHandle.tap", "ElementHandle.textContent", "ElementHandle.type", "ElementHandle.uncheck", "ElementHandle.waitForElementState", "ElementHandle.waitForSelector"]);
  var pausesBeforeInputActions = exports.pausesBeforeInputActions = new Set(["Frame.check", "Frame.click", "Frame.dragAndDrop", "Frame.dblclick", "Frame.fill", "Frame.hover", "Frame.press", "Frame.selectOption", "Frame.setInputFiles", "Frame.tap", "Frame.type", "Frame.uncheck", "ElementHandle.check", "ElementHandle.click", "ElementHandle.dblclick", "ElementHandle.fill", "ElementHandle.hover", "ElementHandle.press", "ElementHandle.selectOption", "ElementHandle.setInputFiles", "ElementHandle.tap", "ElementHandle.type", "ElementHandle.uncheck"]);
});

// node_modules/playwright-core/lib/server/debugger.js
var require_debugger = __commonJS((exports) => {
  var shouldPauseOnCall = function(sdkObject, metadata) {
    var _sdkObject$attributio;
    if (sdkObject.attribution.playwright.options.isServer)
      return false;
    if (!((_sdkObject$attributio = sdkObject.attribution.browser) !== null && _sdkObject$attributio !== undefined && _sdkObject$attributio.options.headful) && !(0, _utils.isUnderTest)())
      return false;
    return metadata.method === "pause";
  };
  var shouldPauseBeforeStep = function(metadata) {
    if (!metadata.apiName)
      return false;
    if (metadata.method === "close")
      return true;
    if (metadata.method === "waitForSelector" || metadata.method === "waitForEventInfo")
      return false;
    const step = metadata.type + "." + metadata.method;
    return _debug.commandsWithTracingSnapshots.has(step) && !_debug.pausesBeforeInputActions.has(metadata.type + "." + metadata.method);
  };
  var shouldSlowMo = function(metadata) {
    return _debug.slowMoActions.has(metadata.type + "." + metadata.method);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Debugger = undefined;
  exports.shouldSlowMo = shouldSlowMo;
  var _events = import.meta.require("events");
  var _utils = require_utils3();
  var _browserContext = require_browserContext();
  var _debug = require_debug6();
  var symbol = Symbol("Debugger");

  class Debugger extends _events.EventEmitter {
    constructor(context) {
      super();
      this._pauseOnNextStatement = false;
      this._pausedCallsMetadata = new Map;
      this._enabled = undefined;
      this._context = undefined;
      this._muted = false;
      this._slowMo = undefined;
      this._context = context;
      this._context[symbol] = this;
      this._enabled = (0, _utils.debugMode)() === "inspector";
      if (this._enabled)
        this.pauseOnNextStatement();
      context.instrumentation.addListener(this, context);
      this._context.once(_browserContext.BrowserContext.Events.Close, () => {
        this._context.instrumentation.removeListener(this);
      });
      this._slowMo = this._context._browser.options.slowMo;
    }
    async setMuted(muted) {
      this._muted = muted;
    }
    async onBeforeCall(sdkObject, metadata) {
      if (this._muted)
        return;
      if (shouldPauseOnCall(sdkObject, metadata) || this._pauseOnNextStatement && shouldPauseBeforeStep(metadata))
        await this.pause(sdkObject, metadata);
    }
    async _doSlowMo() {
      await new Promise((f) => setTimeout(f, this._slowMo));
    }
    async onAfterCall(sdkObject, metadata) {
      if (this._slowMo && shouldSlowMo(metadata))
        await this._doSlowMo();
    }
    async onBeforeInputAction(sdkObject, metadata) {
      if (this._muted)
        return;
      if (this._enabled && this._pauseOnNextStatement)
        await this.pause(sdkObject, metadata);
    }
    async pause(sdkObject, metadata) {
      if (this._muted)
        return;
      this._enabled = true;
      metadata.pauseStartTime = (0, _utils.monotonicTime)();
      const result = new Promise((resolve) => {
        this._pausedCallsMetadata.set(metadata, {
          resolve,
          sdkObject
        });
      });
      this.emit(Debugger.Events.PausedStateChanged);
      return result;
    }
    resume(step) {
      if (!this.isPaused())
        return;
      this._pauseOnNextStatement = step;
      const endTime = (0, _utils.monotonicTime)();
      for (const [metadata, {
        resolve
      }] of this._pausedCallsMetadata) {
        metadata.pauseEndTime = endTime;
        resolve();
      }
      this._pausedCallsMetadata.clear();
      this.emit(Debugger.Events.PausedStateChanged);
    }
    pauseOnNextStatement() {
      this._pauseOnNextStatement = true;
    }
    isPaused(metadata) {
      if (metadata)
        return this._pausedCallsMetadata.has(metadata);
      return !!this._pausedCallsMetadata.size;
    }
    pausedDetails() {
      const result = [];
      for (const [metadata, {
        sdkObject
      }] of this._pausedCallsMetadata)
        result.push({
          metadata,
          sdkObject
        });
      return result;
    }
  }
  exports.Debugger = Debugger;
  Debugger.Events = {
    PausedStateChanged: "pausedstatechanged"
  };
});

// node_modules/playwright-core/lib/server/artifact.js
var require_artifact = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Artifact = undefined;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _utils = require_utils3();
  var _manualPromise = require_manualPromise();
  var _instrumentation = require_instrumentation();
  var _errors = require_errors();

  class Artifact extends _instrumentation.SdkObject {
    constructor(parent, localPath, unaccessibleErrorMessage, cancelCallback) {
      super(parent, "artifact");
      this._localPath = undefined;
      this._unaccessibleErrorMessage = undefined;
      this._cancelCallback = undefined;
      this._finishedPromise = new _manualPromise.ManualPromise;
      this._saveCallbacks = [];
      this._finished = false;
      this._deleted = false;
      this._failureError = undefined;
      this._localPath = localPath;
      this._unaccessibleErrorMessage = unaccessibleErrorMessage;
      this._cancelCallback = cancelCallback;
    }
    finishedPromise() {
      return this._finishedPromise;
    }
    localPath() {
      return this._localPath;
    }
    async localPathAfterFinished() {
      if (this._unaccessibleErrorMessage)
        throw new Error(this._unaccessibleErrorMessage);
      await this._finishedPromise;
      if (this._failureError)
        throw this._failureError;
      return this._localPath;
    }
    saveAs(saveCallback) {
      if (this._unaccessibleErrorMessage)
        throw new Error(this._unaccessibleErrorMessage);
      if (this._deleted)
        throw new Error(`File already deleted. Save before deleting.`);
      if (this._failureError)
        throw this._failureError;
      if (this._finished) {
        saveCallback(this._localPath).catch(() => {
        });
        return;
      }
      this._saveCallbacks.push(saveCallback);
    }
    async failureError() {
      var _this$_failureError;
      if (this._unaccessibleErrorMessage)
        return this._unaccessibleErrorMessage;
      await this._finishedPromise;
      return ((_this$_failureError = this._failureError) === null || _this$_failureError === undefined ? undefined : _this$_failureError.message) || null;
    }
    async cancel() {
      (0, _utils.assert)(this._cancelCallback !== undefined);
      return this._cancelCallback();
    }
    async delete() {
      if (this._unaccessibleErrorMessage)
        return;
      const fileName = await this.localPathAfterFinished();
      if (this._deleted)
        return;
      this._deleted = true;
      if (fileName)
        await _fs.default.promises.unlink(fileName).catch((e) => {
        });
    }
    async deleteOnContextClose() {
      if (this._deleted)
        return;
      this._deleted = true;
      if (!this._unaccessibleErrorMessage)
        await _fs.default.promises.unlink(this._localPath).catch((e) => {
        });
      await this.reportFinished(new _errors.TargetClosedError);
    }
    async reportFinished(error) {
      if (this._finished)
        return;
      this._finished = true;
      this._failureError = error;
      if (error) {
        for (const callback of this._saveCallbacks)
          await callback("", error);
      } else {
        for (const callback of this._saveCallbacks)
          await callback(this._localPath);
      }
      this._saveCallbacks = [];
      this._finishedPromise.resolve();
    }
  }
  exports.Artifact = Artifact;
});

// node_modules/playwright-core/lib/server/har/harTracer.js
var require_harTracer = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var createHarEntry = function(method, url, frameref, options) {
    const harEntry = {
      _frameref: options.includeTraceInfo ? frameref : undefined,
      _monotonicTime: options.includeTraceInfo ? (0, _utils.monotonicTime)() : undefined,
      startedDateTime: new Date().toISOString(),
      time: -1,
      request: {
        method,
        url: url.toString(),
        httpVersion: FALLBACK_HTTP_VERSION,
        cookies: [],
        headers: [],
        queryString: [...url.searchParams].map((e) => ({
          name: e[0],
          value: e[1]
        })),
        headersSize: -1,
        bodySize: -1
      },
      response: {
        status: -1,
        statusText: "",
        httpVersion: FALLBACK_HTTP_VERSION,
        cookies: [],
        headers: [],
        content: {
          size: -1,
          mimeType: "x-unknown"
        },
        headersSize: -1,
        bodySize: -1,
        redirectURL: "",
        _transferSize: options.omitSizes ? undefined : -1
      },
      cache: {},
      timings: {
        send: -1,
        wait: -1,
        receive: -1
      }
    };
    return harEntry;
  };
  var parseCookie = function(c) {
    const cookie = {
      name: "",
      value: ""
    };
    let first = true;
    for (const pair of c.split(/; */)) {
      const indexOfEquals = pair.indexOf("=");
      const name = indexOfEquals !== -1 ? pair.substr(0, indexOfEquals).trim() : pair.trim();
      const value = indexOfEquals !== -1 ? pair.substr(indexOfEquals + 1, pair.length).trim() : "";
      if (first) {
        first = false;
        cookie.name = name;
        cookie.value = value;
        continue;
      }
      if (name === "Domain")
        cookie.domain = value;
      if (name === "Expires")
        cookie.expires = safeDateToISOString(value);
      if (name === "HttpOnly")
        cookie.httpOnly = true;
      if (name === "Max-Age")
        cookie.expires = safeDateToISOString(Date.now() + +value * 1000);
      if (name === "Path")
        cookie.path = value;
      if (name === "SameSite")
        cookie.sameSite = value;
      if (name === "Secure")
        cookie.secure = true;
    }
    return cookie;
  };
  var safeDateToISOString = function(value) {
    try {
      return new Date(value).toISOString();
    } catch (e) {
    }
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.HarTracer = undefined;
  var _browserContext = require_browserContext();
  var _fetch = require_fetch();
  var _helper = require_helper();
  var network = _interopRequireWildcard(require_network2());
  var _utils = require_utils3();
  var _eventsHelper = require_eventsHelper();
  var _utilsBundle = require_utilsBundle();
  var _manualPromise = require_manualPromise();
  var _userAgent = require_userAgent();
  var _network2 = require_network();
  var _frames = require_frames();
  var _mimeType = require_mimeType();
  var FALLBACK_HTTP_VERSION = "HTTP/1.1";

  class HarTracer {
    constructor(context, page, delegate, options) {
      this._context = undefined;
      this._barrierPromises = new Set;
      this._delegate = undefined;
      this._options = undefined;
      this._pageEntries = new Map;
      this._eventListeners = [];
      this._started = false;
      this._entrySymbol = undefined;
      this._baseURL = undefined;
      this._page = undefined;
      this._context = context;
      this._page = page;
      this._delegate = delegate;
      this._options = options;
      if (options.slimMode) {
        options.omitSecurityDetails = true;
        options.omitCookies = true;
        options.omitTiming = true;
        options.omitServerIP = true;
        options.omitSizes = true;
        options.omitPages = true;
      }
      this._entrySymbol = Symbol("requestHarEntry");
      this._baseURL = context instanceof _fetch.APIRequestContext ? context._defaultOptions().baseURL : context._options.baseURL;
    }
    start(options) {
      if (this._started)
        return;
      this._options.omitScripts = options.omitScripts;
      this._started = true;
      const apiRequest = this._context instanceof _fetch.APIRequestContext ? this._context : this._context.fetchRequest;
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(apiRequest, _fetch.APIRequestContext.Events.Request, (event) => this._onAPIRequest(event)), _eventsHelper.eventsHelper.addEventListener(apiRequest, _fetch.APIRequestContext.Events.RequestFinished, (event) => this._onAPIRequestFinished(event))];
      if (this._context instanceof _browserContext.BrowserContext) {
        this._eventListeners.push(_eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.Page, (page) => this._createPageEntryIfNeeded(page)), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.Request, (request) => this._onRequest(request)), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.RequestFinished, ({
          request,
          response
        }) => this._onRequestFinished(request, response).catch(() => {
        })), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.RequestFailed, (request) => this._onRequestFailed(request)), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.Response, (response) => this._onResponse(response)), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.RequestAborted, (request) => this._onRequestAborted(request)), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.RequestFulfilled, (request) => this._onRequestFulfilled(request)), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.RequestContinued, (request) => this._onRequestContinued(request)));
      }
    }
    _shouldIncludeEntryWithUrl(urlString) {
      return !this._options.urlFilter || (0, _network2.urlMatches)(this._baseURL, urlString, this._options.urlFilter);
    }
    _entryForRequest(request) {
      return request[this._entrySymbol];
    }
    _createPageEntryIfNeeded(page) {
      if (!page)
        return;
      if (this._options.omitPages)
        return;
      if (this._page && page !== this._page)
        return;
      let pageEntry = this._pageEntries.get(page);
      if (!pageEntry) {
        const date = new Date;
        pageEntry = {
          startedDateTime: date.toISOString(),
          id: page.guid,
          title: "",
          pageTimings: this._options.omitTiming ? {} : {
            onContentLoad: -1,
            onLoad: -1
          }
        };
        pageEntry[startedDateSymbol] = date;
        page.mainFrame().on(_frames.Frame.Events.AddLifecycle, (event) => {
          if (event === "load")
            this._onLoad(page, pageEntry);
          if (event === "domcontentloaded")
            this._onDOMContentLoaded(page, pageEntry);
        });
        this._pageEntries.set(page, pageEntry);
      }
      return pageEntry;
    }
    _onDOMContentLoaded(page, pageEntry) {
      const promise = page.mainFrame().evaluateExpression(String(() => {
        return {
          title: document.title,
          domContentLoaded: performance.timing.domContentLoadedEventStart
        };
      }), {
        isFunction: true,
        world: "utility"
      }).then((result) => {
        pageEntry.title = result.title;
        if (!this._options.omitTiming)
          pageEntry.pageTimings.onContentLoad = result.domContentLoaded;
      }).catch(() => {
      });
      this._addBarrier(page, promise);
    }
    _onLoad(page, pageEntry) {
      const promise = page.mainFrame().evaluateExpression(String(() => {
        return {
          title: document.title,
          loaded: performance.timing.loadEventStart
        };
      }), {
        isFunction: true,
        world: "utility"
      }).then((result) => {
        pageEntry.title = result.title;
        if (!this._options.omitTiming)
          pageEntry.pageTimings.onLoad = result.loaded;
      }).catch(() => {
      });
      this._addBarrier(page, promise);
    }
    _addBarrier(target, promise) {
      if (!target)
        return null;
      if (!this._options.waitForContentOnStop)
        return;
      const race = target.openScope.safeRace(promise);
      this._barrierPromises.add(race);
      race.then(() => this._barrierPromises.delete(race));
    }
    _onAPIRequest(event) {
      var _event$postData;
      if (!this._shouldIncludeEntryWithUrl(event.url.toString()))
        return;
      const harEntry = createHarEntry(event.method, event.url, undefined, this._options);
      harEntry._apiRequest = true;
      if (!this._options.omitCookies)
        harEntry.request.cookies = event.cookies;
      harEntry.request.headers = Object.entries(event.headers).map(([name, value]) => ({
        name,
        value
      }));
      harEntry.request.postData = this._postDataForBuffer(event.postData || null, event.headers["content-type"], this._options.content);
      if (!this._options.omitSizes)
        harEntry.request.bodySize = ((_event$postData = event.postData) === null || _event$postData === undefined ? undefined : _event$postData.length) || 0;
      event[this._entrySymbol] = harEntry;
      if (this._started)
        this._delegate.onEntryStarted(harEntry);
    }
    _onAPIRequestFinished(event) {
      const harEntry = this._entryForRequest(event.requestEvent);
      if (!harEntry)
        return;
      harEntry.response.status = event.statusCode;
      harEntry.response.statusText = event.statusMessage;
      harEntry.response.httpVersion = event.httpVersion;
      harEntry.response.redirectURL = event.headers.location || "";
      for (let i = 0;i < event.rawHeaders.length; i += 2) {
        harEntry.response.headers.push({
          name: event.rawHeaders[i],
          value: event.rawHeaders[i + 1]
        });
      }
      harEntry.response.cookies = this._options.omitCookies ? [] : event.cookies.map((c) => {
        return {
          ...c,
          expires: c.expires === -1 ? undefined : safeDateToISOString(c.expires)
        };
      });
      const content = harEntry.response.content;
      const contentType = event.headers["content-type"];
      if (contentType)
        content.mimeType = contentType;
      this._storeResponseContent(event.body, content, "other");
      if (this._started)
        this._delegate.onEntryFinished(harEntry);
    }
    _onRequest(request) {
      var _request$frame, _request$frame2;
      if (!this._shouldIncludeEntryWithUrl(request.url()))
        return;
      const page = (_request$frame = request.frame()) === null || _request$frame === undefined ? undefined : _request$frame._page;
      if (this._page && page !== this._page)
        return;
      const url = network.parsedURL(request.url());
      if (!url)
        return;
      const pageEntry = this._createPageEntryIfNeeded(page);
      const harEntry = createHarEntry(request.method(), url, (_request$frame2 = request.frame()) === null || _request$frame2 === undefined ? undefined : _request$frame2.guid, this._options);
      if (pageEntry)
        harEntry.pageref = pageEntry.id;
      this._recordRequestHeadersAndCookies(harEntry, request.headers());
      harEntry.request.postData = this._postDataForRequest(request, this._options.content);
      if (!this._options.omitSizes)
        harEntry.request.bodySize = request.bodySize();
      if (request.redirectedFrom()) {
        const fromEntry = this._entryForRequest(request.redirectedFrom());
        if (fromEntry)
          fromEntry.response.redirectURL = request.url();
      }
      request[this._entrySymbol] = harEntry;
      (0, _utils.assert)(this._started);
      this._delegate.onEntryStarted(harEntry);
    }
    _recordRequestHeadersAndCookies(harEntry, headers) {
      if (!this._options.omitCookies) {
        harEntry.request.cookies = [];
        for (const header of headers.filter((header2) => header2.name.toLowerCase() === "cookie"))
          harEntry.request.cookies.push(...header.value.split(";").map(parseCookie));
      }
      harEntry.request.headers = headers;
    }
    _recordRequestOverrides(harEntry, request) {
      if (!request._hasOverrides() || !this._options.recordRequestOverrides)
        return;
      harEntry.request.method = request.method();
      harEntry.request.url = request.url();
      harEntry.request.postData = this._postDataForRequest(request, this._options.content);
      this._recordRequestHeadersAndCookies(harEntry, request.headers());
    }
    async _onRequestFinished(request, response) {
      var _request$frame3;
      if (!response)
        return;
      const harEntry = this._entryForRequest(request);
      if (!harEntry)
        return;
      const page = (_request$frame3 = request.frame()) === null || _request$frame3 === undefined ? undefined : _request$frame3._page;
      if (!this._options.omitServerIP) {
        this._addBarrier(page || request.serviceWorker(), response.serverAddr().then((server) => {
          if (server !== null && server !== undefined && server.ipAddress)
            harEntry.serverIPAddress = server.ipAddress;
          if (server !== null && server !== undefined && server.port)
            harEntry._serverPort = server.port;
        }));
      }
      if (!this._options.omitSecurityDetails) {
        this._addBarrier(page || request.serviceWorker(), response.securityDetails().then((details) => {
          if (details)
            harEntry._securityDetails = details;
        }));
      }
      const httpVersion = response.httpVersion();
      harEntry.request.httpVersion = httpVersion;
      harEntry.response.httpVersion = httpVersion;
      const compressionCalculationBarrier = this._options.omitSizes ? undefined : {
        _encodedBodySize: -1,
        _decodedBodySize: -1,
        barrier: new _manualPromise.ManualPromise,
        _check: function() {
          if (this._encodedBodySize !== -1 && this._decodedBodySize !== -1) {
            harEntry.response.content.compression = Math.max(0, this._decodedBodySize - this._encodedBodySize);
            this.barrier.resolve();
          }
        },
        setEncodedBodySize: function(encodedBodySize) {
          this._encodedBodySize = encodedBodySize;
          this._check();
        },
        setDecodedBodySize: function(decodedBodySize) {
          this._decodedBodySize = decodedBodySize;
          this._check();
        }
      };
      if (compressionCalculationBarrier)
        this._addBarrier(page || request.serviceWorker(), compressionCalculationBarrier.barrier);
      const promise = response.body().then((buffer) => {
        if (this._options.omitScripts && request.resourceType() === "script") {
          compressionCalculationBarrier === null || compressionCalculationBarrier === undefined || compressionCalculationBarrier.setDecodedBodySize(0);
          return;
        }
        const content = harEntry.response.content;
        compressionCalculationBarrier === null || compressionCalculationBarrier === undefined || compressionCalculationBarrier.setDecodedBodySize(buffer.length);
        this._storeResponseContent(buffer, content, request.resourceType());
      }).catch(() => {
        compressionCalculationBarrier === null || compressionCalculationBarrier === undefined || compressionCalculationBarrier.setDecodedBodySize(0);
      }).then(() => {
        if (this._started)
          this._delegate.onEntryFinished(harEntry);
      });
      this._addBarrier(page || request.serviceWorker(), promise);
      const timing = response.timing();
      harEntry.timings.receive = response.request()._responseEndTiming !== -1 ? _helper.helper.millisToRoundishMillis(response.request()._responseEndTiming - timing.responseStart) : -1;
      this._computeHarEntryTotalTime(harEntry);
      if (!this._options.omitSizes) {
        this._addBarrier(page || request.serviceWorker(), response.sizes().then((sizes) => {
          harEntry.response.bodySize = sizes.responseBodySize;
          harEntry.response.headersSize = sizes.responseHeadersSize;
          harEntry.response._transferSize = sizes.transferSize;
          harEntry.request.headersSize = sizes.requestHeadersSize;
          compressionCalculationBarrier === null || compressionCalculationBarrier === undefined || compressionCalculationBarrier.setEncodedBodySize(sizes.responseBodySize);
        }));
      }
    }
    async _onRequestFailed(request) {
      const harEntry = this._entryForRequest(request);
      if (!harEntry)
        return;
      if (request._failureText !== null)
        harEntry.response._failureText = request._failureText;
      this._recordRequestOverrides(harEntry, request);
      if (this._started)
        this._delegate.onEntryFinished(harEntry);
    }
    _onRequestAborted(request) {
      const harEntry = this._entryForRequest(request);
      if (harEntry)
        harEntry._wasAborted = true;
    }
    _onRequestFulfilled(request) {
      const harEntry = this._entryForRequest(request);
      if (harEntry)
        harEntry._wasFulfilled = true;
    }
    _onRequestContinued(request) {
      const harEntry = this._entryForRequest(request);
      if (harEntry)
        harEntry._wasContinued = true;
    }
    _storeResponseContent(buffer, content, resourceType) {
      if (!buffer) {
        content.size = 0;
        return;
      }
      if (!this._options.omitSizes)
        content.size = buffer.length;
      if (this._options.content === "embed") {
        if ((0, _mimeType.isTextualMimeType)(content.mimeType) && resourceType !== "font") {
          content.text = buffer.toString();
        } else {
          content.text = buffer.toString("base64");
          content.encoding = "base64";
        }
      } else if (this._options.content === "attach") {
        const sha1 = (0, _utils.calculateSha1)(buffer) + "." + (_utilsBundle.mime.getExtension(content.mimeType) || "dat");
        if (this._options.includeTraceInfo)
          content._sha1 = sha1;
        else
          content._file = sha1;
        if (this._started)
          this._delegate.onContentBlob(sha1, buffer);
      }
    }
    _onResponse(response) {
      var _response$frame;
      const harEntry = this._entryForRequest(response.request());
      if (!harEntry)
        return;
      const page = (_response$frame = response.frame()) === null || _response$frame === undefined ? undefined : _response$frame._page;
      const pageEntry = this._createPageEntryIfNeeded(page);
      const request = response.request();
      if (this._options.includeTraceInfo)
        harEntry._monotonicTime = (0, _utils.monotonicTime)();
      harEntry.response = {
        status: response.status(),
        statusText: response.statusText(),
        httpVersion: response.httpVersion(),
        cookies: [],
        headers: [],
        content: {
          size: -1,
          mimeType: "x-unknown"
        },
        headersSize: -1,
        bodySize: -1,
        redirectURL: "",
        _transferSize: this._options.omitSizes ? undefined : -1
      };
      if (!this._options.omitTiming) {
        const startDateTime = pageEntry ? pageEntry[startedDateSymbol].valueOf() : 0;
        const timing = response.timing();
        if (pageEntry && startDateTime > timing.startTime)
          pageEntry.startedDateTime = new Date(timing.startTime).toISOString();
        const dns = timing.domainLookupEnd !== -1 ? _helper.helper.millisToRoundishMillis(timing.domainLookupEnd - timing.domainLookupStart) : -1;
        const connect = timing.connectEnd !== -1 ? _helper.helper.millisToRoundishMillis(timing.connectEnd - timing.connectStart) : -1;
        const ssl = timing.connectEnd !== -1 ? _helper.helper.millisToRoundishMillis(timing.connectEnd - timing.secureConnectionStart) : -1;
        const wait = timing.responseStart !== -1 ? _helper.helper.millisToRoundishMillis(timing.responseStart - timing.requestStart) : -1;
        const receive = -1;
        harEntry.timings = {
          dns,
          connect,
          ssl,
          send: 0,
          wait,
          receive
        };
        this._computeHarEntryTotalTime(harEntry);
      }
      this._recordRequestOverrides(harEntry, request);
      this._addBarrier(page || request.serviceWorker(), request.rawRequestHeaders().then((headers) => {
        this._recordRequestHeadersAndCookies(harEntry, headers);
      }));
      this._recordResponseHeaders(harEntry, response.headers());
      this._addBarrier(page || request.serviceWorker(), response.rawResponseHeaders().then((headers) => {
        this._recordResponseHeaders(harEntry, headers);
      }));
    }
    _recordResponseHeaders(harEntry, headers) {
      if (!this._options.omitCookies) {
        harEntry.response.cookies = headers.filter((header) => header.name.toLowerCase() === "set-cookie").map((header) => parseCookie(header.value));
      }
      harEntry.response.headers = headers;
      const contentType = headers.find((header) => header.name.toLowerCase() === "content-type");
      if (contentType)
        harEntry.response.content.mimeType = contentType.value;
    }
    _computeHarEntryTotalTime(harEntry) {
      harEntry.time = [harEntry.timings.dns, harEntry.timings.connect, harEntry.timings.ssl, harEntry.timings.wait, harEntry.timings.receive].reduce((pre, cur) => (cur || -1) > 0 ? cur + pre : pre, 0);
    }
    async flush() {
      await Promise.all(this._barrierPromises);
    }
    stop() {
      this._started = false;
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      this._barrierPromises.clear();
      const context = this._context instanceof _browserContext.BrowserContext ? this._context : undefined;
      const log = {
        version: "1.2",
        creator: {
          name: "Playwright",
          version: (0, _userAgent.getPlaywrightVersion)()
        },
        browser: {
          name: (context === null || context === undefined ? undefined : context._browser.options.name) || "",
          version: (context === null || context === undefined ? undefined : context._browser.version()) || ""
        },
        pages: this._pageEntries.size ? Array.from(this._pageEntries.values()) : undefined,
        entries: []
      };
      if (!this._options.omitTiming) {
        for (const pageEntry of log.pages || []) {
          const startDateTime = pageEntry[startedDateSymbol].valueOf();
          if (typeof pageEntry.pageTimings.onContentLoad === "number" && pageEntry.pageTimings.onContentLoad >= 0)
            pageEntry.pageTimings.onContentLoad -= startDateTime;
          else
            pageEntry.pageTimings.onContentLoad = -1;
          if (typeof pageEntry.pageTimings.onLoad === "number" && pageEntry.pageTimings.onLoad >= 0)
            pageEntry.pageTimings.onLoad -= startDateTime;
          else
            pageEntry.pageTimings.onLoad = -1;
        }
      }
      this._pageEntries.clear();
      return log;
    }
    _postDataForRequest(request, content) {
      const postData = request.postDataBuffer();
      if (!postData)
        return;
      const contentType = request.headerValue("content-type");
      return this._postDataForBuffer(postData, contentType, content);
    }
    _postDataForBuffer(postData, contentType, content) {
      var _contentType;
      if (!postData)
        return;
      (_contentType = contentType) !== null && _contentType !== undefined || (contentType = "application/octet-stream");
      const result = {
        mimeType: contentType,
        text: "",
        params: []
      };
      if (content === "embed" && contentType !== "application/octet-stream")
        result.text = postData.toString();
      if (content === "attach") {
        const sha1 = (0, _utils.calculateSha1)(postData) + "." + (_utilsBundle.mime.getExtension(contentType) || "dat");
        if (this._options.includeTraceInfo)
          result._sha1 = sha1;
        else
          result._file = sha1;
        this._delegate.onContentBlob(sha1, postData);
      }
      if (contentType === "application/x-www-form-urlencoded") {
        const parsed = new URLSearchParams(postData.toString());
        for (const [name, value] of parsed.entries())
          result.params.push({
            name,
            value
          });
      }
      return result;
    }
  }
  exports.HarTracer = HarTracer;
  var startedDateSymbol = Symbol("startedDate");
});

// node_modules/playwright-core/lib/server/trace/recorder/snapshotterInjected.js
var require_snapshotterInjected = __commonJS((exports) => {
  var frameSnapshotStreamer = function(snapshotStreamer, removeNoScript) {
    if (window[snapshotStreamer])
      return;
    const kShadowAttribute = "__playwright_shadow_root_";
    const kValueAttribute = "__playwright_value_";
    const kCheckedAttribute = "__playwright_checked_";
    const kSelectedAttribute = "__playwright_selected_";
    const kScrollTopAttribute = "__playwright_scroll_top_";
    const kScrollLeftAttribute = "__playwright_scroll_left_";
    const kStyleSheetAttribute = "__playwright_style_sheet_";
    const kTargetAttribute = "__playwright_target__";
    const kCustomElementsAttribute = "__playwright_custom_elements__";
    const kCurrentSrcAttribute = "__playwright_current_src__";
    const kSnapshotFrameId = Symbol("__playwright_snapshot_frameid_");
    const kCachedData = Symbol("__playwright_snapshot_cache_");
    const kEndOfList = Symbol("__playwright_end_of_list_");
    function resetCachedData(obj) {
      delete obj[kCachedData];
    }
    function ensureCachedData(obj) {
      if (!obj[kCachedData])
        obj[kCachedData] = {};
      return obj[kCachedData];
    }
    function removeHash(url) {
      try {
        const u = new URL(url);
        u.hash = "";
        return u.toString();
      } catch (e) {
        return url;
      }
    }

    class Streamer {
      constructor() {
        this._lastSnapshotNumber = 0;
        this._staleStyleSheets = new Set;
        this._readingStyleSheet = false;
        this._fakeBase = undefined;
        this._observer = undefined;
        const invalidateCSSGroupingRule = (rule) => {
          if (rule.parentStyleSheet)
            this._invalidateStyleSheet(rule.parentStyleSheet);
        };
        this._interceptNativeMethod(window.CSSStyleSheet.prototype, "insertRule", (sheet) => this._invalidateStyleSheet(sheet));
        this._interceptNativeMethod(window.CSSStyleSheet.prototype, "deleteRule", (sheet) => this._invalidateStyleSheet(sheet));
        this._interceptNativeMethod(window.CSSStyleSheet.prototype, "addRule", (sheet) => this._invalidateStyleSheet(sheet));
        this._interceptNativeMethod(window.CSSStyleSheet.prototype, "removeRule", (sheet) => this._invalidateStyleSheet(sheet));
        this._interceptNativeGetter(window.CSSStyleSheet.prototype, "rules", (sheet) => this._invalidateStyleSheet(sheet));
        this._interceptNativeGetter(window.CSSStyleSheet.prototype, "cssRules", (sheet) => this._invalidateStyleSheet(sheet));
        this._interceptNativeMethod(window.CSSStyleSheet.prototype, "replaceSync", (sheet) => this._invalidateStyleSheet(sheet));
        this._interceptNativeMethod(window.CSSGroupingRule.prototype, "insertRule", invalidateCSSGroupingRule);
        this._interceptNativeMethod(window.CSSGroupingRule.prototype, "deleteRule", invalidateCSSGroupingRule);
        this._interceptNativeGetter(window.CSSGroupingRule.prototype, "cssRules", invalidateCSSGroupingRule);
        this._interceptNativeAsyncMethod(window.CSSStyleSheet.prototype, "replace", (sheet) => this._invalidateStyleSheet(sheet));
        this._fakeBase = document.createElement("base");
        this._observer = new MutationObserver((list) => this._handleMutations(list));
        const observerConfig = {
          attributes: true,
          subtree: true
        };
        this._observer.observe(document, observerConfig);
        this._refreshListenersWhenNeeded();
      }
      _refreshListenersWhenNeeded() {
        this._refreshListeners();
        const customEventName = "__playwright_snapshotter_global_listeners_check__";
        let seenEvent = false;
        const handleCustomEvent = () => seenEvent = true;
        window.addEventListener(customEventName, handleCustomEvent);
        const observer = new MutationObserver((entries) => {
          const newDocumentElement = entries.some((entry) => Array.from(entry.addedNodes).includes(document.documentElement));
          if (newDocumentElement) {
            seenEvent = false;
            window.dispatchEvent(new CustomEvent(customEventName));
            if (!seenEvent) {
              window.addEventListener(customEventName, handleCustomEvent);
              this._refreshListeners();
            }
          }
        });
        observer.observe(document, {
          childList: true
        });
      }
      _refreshListeners() {
        document.addEventListener("__playwright_target__", (event) => {
          if (!event.detail)
            return;
          const callId = event.detail;
          event.composedPath()[0].__playwright_target__ = callId;
        });
      }
      _interceptNativeMethod(obj, method, cb) {
        const native = obj[method];
        if (!native)
          return;
        obj[method] = function(...args) {
          const result = native.call(this, ...args);
          cb(this, result);
          return result;
        };
      }
      _interceptNativeAsyncMethod(obj, method, cb) {
        const native = obj[method];
        if (!native)
          return;
        obj[method] = async function(...args) {
          const result = await native.call(this, ...args);
          cb(this, result);
          return result;
        };
      }
      _interceptNativeGetter(obj, prop, cb) {
        const descriptor = Object.getOwnPropertyDescriptor(obj, prop);
        Object.defineProperty(obj, prop, {
          ...descriptor,
          get: function() {
            const result = descriptor.get.call(this);
            cb(this, result);
            return result;
          }
        });
      }
      _handleMutations(list) {
        for (const mutation of list)
          ensureCachedData(mutation.target).attributesCached = undefined;
      }
      _invalidateStyleSheet(sheet) {
        if (this._readingStyleSheet)
          return;
        this._staleStyleSheets.add(sheet);
      }
      _updateStyleElementStyleSheetTextIfNeeded(sheet, forceText) {
        const data = ensureCachedData(sheet);
        if (this._staleStyleSheets.has(sheet) || forceText && data.cssText === undefined) {
          this._staleStyleSheets.delete(sheet);
          try {
            data.cssText = this._getSheetText(sheet);
          } catch (e) {
            data.cssText = "";
          }
        }
        return data.cssText;
      }
      _updateLinkStyleSheetTextIfNeeded(sheet, snapshotNumber) {
        const data = ensureCachedData(sheet);
        if (this._staleStyleSheets.has(sheet)) {
          this._staleStyleSheets.delete(sheet);
          try {
            data.cssText = this._getSheetText(sheet);
            data.cssRef = snapshotNumber;
            return data.cssText;
          } catch (e) {
          }
        }
        return data.cssRef === undefined ? undefined : snapshotNumber - data.cssRef;
      }
      markIframe(iframeElement, frameId) {
        iframeElement[kSnapshotFrameId] = frameId;
      }
      reset() {
        this._staleStyleSheets.clear();
        const visitNode = (node) => {
          resetCachedData(node);
          if (node.nodeType === Node.ELEMENT_NODE) {
            const element = node;
            if (element.shadowRoot)
              visitNode(element.shadowRoot);
          }
          for (let child = node.firstChild;child; child = child.nextSibling)
            visitNode(child);
        };
        visitNode(document.documentElement);
        visitNode(this._fakeBase);
      }
      __sanitizeMetaAttribute(name, value, httpEquiv) {
        if (name === "charset")
          return "utf-8";
        if (httpEquiv.toLowerCase() !== "content-type" || name !== "content")
          return value;
        const [type, ...params] = value.split(";");
        if (type !== "text/html" || params.length <= 0)
          return value;
        const charsetParamIdx = params.findIndex((param) => param.trim().startsWith("charset="));
        if (charsetParamIdx > -1)
          params[charsetParamIdx] = "charset=utf-8";
        return `${type}; ${params.join("; ")}`;
      }
      _sanitizeUrl(url) {
        if (url.startsWith("javascript:") || url.startsWith("vbscript:"))
          return "";
        return url;
      }
      _sanitizeSrcSet(srcset) {
        return srcset.split(",").map((src) => {
          src = src.trim();
          const spaceIndex = src.lastIndexOf(" ");
          if (spaceIndex === -1)
            return this._sanitizeUrl(src);
          return this._sanitizeUrl(src.substring(0, spaceIndex).trim()) + src.substring(spaceIndex);
        }).join(", ");
      }
      _resolveUrl(base, url) {
        if (url === "")
          return "";
        try {
          return new URL(url, base).href;
        } catch (e) {
          return url;
        }
      }
      _getSheetBase(sheet) {
        let rootSheet = sheet;
        while (rootSheet.parentStyleSheet)
          rootSheet = rootSheet.parentStyleSheet;
        if (rootSheet.ownerNode)
          return rootSheet.ownerNode.baseURI;
        return document.baseURI;
      }
      _getSheetText(sheet) {
        this._readingStyleSheet = true;
        try {
          const rules = [];
          for (const rule of sheet.cssRules)
            rules.push(rule.cssText);
          return rules.join("\n");
        } finally {
          this._readingStyleSheet = false;
        }
      }
      captureSnapshot() {
        const timestamp = performance.now();
        const snapshotNumber = ++this._lastSnapshotNumber;
        let nodeCounter = 0;
        let shadowDomNesting = 0;
        let headNesting = 0;
        this._handleMutations(this._observer.takeRecords());
        const definedCustomElements = new Set;
        const visitNode = (node) => {
          const nodeType = node.nodeType;
          const nodeName = nodeType === Node.DOCUMENT_FRAGMENT_NODE ? "template" : node.nodeName;
          if (nodeType !== Node.ELEMENT_NODE && nodeType !== Node.DOCUMENT_FRAGMENT_NODE && nodeType !== Node.TEXT_NODE)
            return;
          if (nodeName === "SCRIPT")
            return;
          if (nodeName === "LINK" && nodeType === Node.ELEMENT_NODE) {
            var _getAttribute;
            const rel = (_getAttribute = node.getAttribute("rel")) === null || _getAttribute === undefined ? undefined : _getAttribute.toLowerCase();
            if (rel === "preload" || rel === "prefetch")
              return;
          }
          if (removeNoScript && nodeName === "NOSCRIPT")
            return;
          if (nodeName === "META" && node.httpEquiv.toLowerCase() === "content-security-policy")
            return;
          if ((nodeName === "IFRAME" || nodeName === "FRAME") && headNesting)
            return;
          const data = ensureCachedData(node);
          const values = [];
          let equals = !!data.cached;
          let extraNodes = 0;
          const expectValue = (value) => {
            equals = equals && data.cached[values.length] === value;
            values.push(value);
          };
          const checkAndReturn = (n) => {
            data.attributesCached = true;
            if (equals)
              return {
                equals: true,
                n: [[snapshotNumber - data.ref[0], data.ref[1]]]
              };
            nodeCounter += extraNodes;
            data.ref = [snapshotNumber, nodeCounter++];
            data.cached = values;
            return {
              equals: false,
              n
            };
          };
          if (nodeType === Node.TEXT_NODE) {
            const value = node.nodeValue || "";
            expectValue(value);
            return checkAndReturn(value);
          }
          if (nodeName === "STYLE") {
            const sheet = node.sheet;
            let cssText;
            if (sheet)
              cssText = this._updateStyleElementStyleSheetTextIfNeeded(sheet);
            cssText = cssText || node.textContent || "";
            expectValue(cssText);
            extraNodes++;
            return checkAndReturn([nodeName, {}, cssText]);
          }
          const attrs = {};
          const result2 = [nodeName, attrs];
          const visitChild = (child) => {
            const snapshot = visitNode(child);
            if (snapshot) {
              result2.push(snapshot.n);
              expectValue(child);
              equals = equals && snapshot.equals;
            }
          };
          const visitChildStyleSheet = (child) => {
            const snapshot = visitStyleSheet(child);
            if (snapshot) {
              result2.push(snapshot.n);
              expectValue(child);
              equals = equals && snapshot.equals;
            }
          };
          if (nodeType === Node.DOCUMENT_FRAGMENT_NODE)
            attrs[kShadowAttribute] = "open";
          if (nodeType === Node.ELEMENT_NODE) {
            var _window$customElement;
            const element = node;
            if (element.localName.includes("-") && (_window$customElement = window.customElements) !== null && _window$customElement !== undefined && _window$customElement.get(element.localName))
              definedCustomElements.add(element.localName);
            if (nodeName === "INPUT" || nodeName === "TEXTAREA") {
              const value = element.value;
              expectValue(kValueAttribute);
              expectValue(value);
              attrs[kValueAttribute] = value;
            }
            if (nodeName === "INPUT" && ["checkbox", "radio"].includes(element.type)) {
              const value = element.checked ? "true" : "false";
              expectValue(kCheckedAttribute);
              expectValue(value);
              attrs[kCheckedAttribute] = value;
            }
            if (nodeName === "OPTION") {
              const value = element.selected ? "true" : "false";
              expectValue(kSelectedAttribute);
              expectValue(value);
              attrs[kSelectedAttribute] = value;
            }
            if (element.scrollTop) {
              expectValue(kScrollTopAttribute);
              expectValue(element.scrollTop);
              attrs[kScrollTopAttribute] = "" + element.scrollTop;
            }
            if (element.scrollLeft) {
              expectValue(kScrollLeftAttribute);
              expectValue(element.scrollLeft);
              attrs[kScrollLeftAttribute] = "" + element.scrollLeft;
            }
            if (element.shadowRoot) {
              ++shadowDomNesting;
              visitChild(element.shadowRoot);
              --shadowDomNesting;
            }
            if ("__playwright_target__" in element) {
              expectValue(kTargetAttribute);
              expectValue(element["__playwright_target__"]);
              attrs[kTargetAttribute] = element["__playwright_target__"];
            }
          }
          if (nodeName === "HEAD") {
            ++headNesting;
            this._fakeBase.setAttribute("href", document.baseURI);
            visitChild(this._fakeBase);
          }
          for (let child = node.firstChild;child; child = child.nextSibling)
            visitChild(child);
          if (nodeName === "HEAD")
            --headNesting;
          expectValue(kEndOfList);
          let documentOrShadowRoot = null;
          if (node.ownerDocument.documentElement === node)
            documentOrShadowRoot = node.ownerDocument;
          else if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE)
            documentOrShadowRoot = node;
          if (documentOrShadowRoot) {
            for (const sheet of documentOrShadowRoot.adoptedStyleSheets || [])
              visitChildStyleSheet(sheet);
            expectValue(kEndOfList);
          }
          if (nodeName === "IFRAME" || nodeName === "FRAME") {
            const element = node;
            const frameId = element[kSnapshotFrameId];
            const name = "src";
            const value = frameId ? `/snapshot/${frameId}` : "";
            expectValue(name);
            expectValue(value);
            attrs[name] = value;
          }
          if (nodeName === "BODY" && definedCustomElements.size) {
            const value = [...definedCustomElements].join(",");
            expectValue(kCustomElementsAttribute);
            expectValue(value);
            attrs[kCustomElementsAttribute] = value;
          }
          if (nodeName === "IMG" || nodeName === "PICTURE") {
            const value = nodeName === "PICTURE" ? "" : this._sanitizeUrl(node.currentSrc);
            expectValue(kCurrentSrcAttribute);
            expectValue(value);
            attrs[kCurrentSrcAttribute] = value;
          }
          if (equals && data.attributesCached && !shadowDomNesting)
            return checkAndReturn(result2);
          if (nodeType === Node.ELEMENT_NODE) {
            const element = node;
            for (let i = 0;i < element.attributes.length; i++) {
              const name = element.attributes[i].name;
              if (nodeName === "LINK" && name === "integrity")
                continue;
              if (nodeName === "IFRAME" && (name === "src" || name === "srcdoc" || name === "sandbox"))
                continue;
              if (nodeName === "FRAME" && name === "src")
                continue;
              let value = element.attributes[i].value;
              if (nodeName === "META")
                value = this.__sanitizeMetaAttribute(name, value, node.httpEquiv);
              else if (name === "src" && nodeName === "IMG")
                value = this._sanitizeUrl(value);
              else if (name === "srcset" && nodeName === "IMG")
                value = this._sanitizeSrcSet(value);
              else if (name === "srcset" && nodeName === "SOURCE")
                value = this._sanitizeSrcSet(value);
              else if (name === "href" && nodeName === "LINK")
                value = this._sanitizeUrl(value);
              else if (name.startsWith("on"))
                value = "";
              expectValue(name);
              expectValue(value);
              attrs[name] = value;
            }
            expectValue(kEndOfList);
          }
          if (result2.length === 2 && !Object.keys(attrs).length)
            result2.pop();
          return checkAndReturn(result2);
        };
        const visitStyleSheet = (sheet) => {
          const data = ensureCachedData(sheet);
          const oldCSSText = data.cssText;
          const cssText = this._updateStyleElementStyleSheetTextIfNeeded(sheet, true);
          if (cssText === oldCSSText)
            return {
              equals: true,
              n: [[snapshotNumber - data.ref[0], data.ref[1]]]
            };
          data.ref = [snapshotNumber, nodeCounter++];
          return {
            equals: false,
            n: ["template", {
              [kStyleSheetAttribute]: cssText
            }]
          };
        };
        let html;
        if (document.documentElement) {
          const {
            n
          } = visitNode(document.documentElement);
          html = n;
        } else {
          html = ["html"];
        }
        const result = {
          html,
          doctype: document.doctype ? document.doctype.name : undefined,
          resourceOverrides: [],
          viewport: {
            width: window.innerWidth,
            height: window.innerHeight
          },
          url: location.href,
          timestamp,
          collectionTime: 0
        };
        for (const sheet of this._staleStyleSheets) {
          if (sheet.href === null)
            continue;
          const content = this._updateLinkStyleSheetTextIfNeeded(sheet, snapshotNumber);
          if (content === undefined) {
            continue;
          }
          const base = this._getSheetBase(sheet);
          const url = removeHash(this._resolveUrl(base, sheet.href));
          result.resourceOverrides.push({
            url,
            content,
            contentType: "text/css"
          });
        }
        result.collectionTime = performance.now() - result.timestamp;
        return result;
      }
    }
    window[snapshotStreamer] = new Streamer;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.frameSnapshotStreamer = frameSnapshotStreamer;
});

// node_modules/playwright-core/lib/server/trace/recorder/snapshotter.js
var require_snapshotter = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Snapshotter = undefined;
  var _browserContext = require_browserContext();
  var _page = require_page();
  var _eventsHelper = require_eventsHelper();
  var _debugLogger = require_debugLogger();
  var _snapshotterInjected = require_snapshotterInjected();
  var _utils = require_utils3();
  var _utilsBundle = require_utilsBundle();

  class Snapshotter {
    constructor(context, delegate) {
      this._context = undefined;
      this._delegate = undefined;
      this._eventListeners = [];
      this._snapshotStreamer = undefined;
      this._initialized = false;
      this._started = false;
      this._context = context;
      this._delegate = delegate;
      const guid = (0, _utils.createGuid)();
      this._snapshotStreamer = "__playwright_snapshot_streamer_" + guid;
    }
    started() {
      return this._started;
    }
    async start() {
      this._started = true;
      if (!this._initialized) {
        this._initialized = true;
        await this._initialize();
      }
      await this.reset();
    }
    async reset() {
      if (this._started)
        await this._runInAllFrames(`window["${this._snapshotStreamer}"].reset()`);
    }
    async stop() {
      this._started = false;
    }
    resetForReuse() {
      this._initialized = false;
    }
    async _initialize() {
      for (const page of this._context.pages())
        this._onPage(page);
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.Page, this._onPage.bind(this))];
      const {
        javaScriptEnabled
      } = this._context._options;
      const initScript = `(${_snapshotterInjected.frameSnapshotStreamer})("${this._snapshotStreamer}", ${javaScriptEnabled || javaScriptEnabled === undefined})`;
      await this._context.addInitScript(initScript);
      await this._runInAllFrames(initScript);
    }
    async _runInAllFrames(expression) {
      const frames = [];
      for (const page of this._context.pages())
        frames.push(...page.frames());
      await Promise.all(frames.map((frame) => {
        return frame.nonStallingRawEvaluateInExistingMainContext(expression).catch((e) => _debugLogger.debugLogger.log("error", e));
      }));
    }
    dispose() {
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
    }
    async captureSnapshot(page, callId, snapshotName, element) {
      const expression = `window["${this._snapshotStreamer}"].captureSnapshot(${JSON.stringify(snapshotName)})`;
      element === null || element === undefined || element.callFunctionNoReply((element2, callId2) => {
        const customEvent = new CustomEvent("__playwright_target__", {
          bubbles: true,
          cancelable: true,
          detail: callId2,
          composed: true
        });
        element2.dispatchEvent(customEvent);
      }, callId);
      const snapshots = page.frames().map(async (frame) => {
        const data = await frame.nonStallingRawEvaluateInExistingMainContext(expression).catch((e) => _debugLogger.debugLogger.log("error", e));
        if (!data || !this._started)
          return;
        const snapshot = {
          callId,
          snapshotName,
          pageId: page.guid,
          frameId: frame.guid,
          frameUrl: data.url,
          doctype: data.doctype,
          html: data.html,
          viewport: data.viewport,
          timestamp: (0, _utils.monotonicTime)(),
          collectionTime: data.collectionTime,
          resourceOverrides: [],
          isMainFrame: page.mainFrame() === frame
        };
        for (const {
          url,
          content,
          contentType
        } of data.resourceOverrides) {
          if (typeof content === "string") {
            const buffer = Buffer.from(content);
            const sha1 = (0, _utils.calculateSha1)(buffer) + "." + (_utilsBundle.mime.getExtension(contentType) || "dat");
            this._delegate.onSnapshotterBlob({
              sha1,
              buffer
            });
            snapshot.resourceOverrides.push({
              url,
              sha1
            });
          } else {
            snapshot.resourceOverrides.push({
              url,
              ref: content
            });
          }
        }
        this._delegate.onFrameSnapshot(snapshot);
      });
      await Promise.all(snapshots);
    }
    _onPage(page) {
      for (const frame of page.frames())
        this._annotateFrameHierarchy(frame);
      this._eventListeners.push(_eventsHelper.eventsHelper.addEventListener(page, _page.Page.Events.FrameAttached, (frame) => this._annotateFrameHierarchy(frame)));
    }
    async _annotateFrameHierarchy(frame) {
      try {
        const frameElement = await frame.frameElement();
        const parent = frame.parentFrame();
        if (!parent)
          return;
        const context = await parent._mainContext();
        await (context === null || context === undefined ? undefined : context.evaluate(({
          snapshotStreamer,
          frameElement: frameElement2,
          frameId
        }) => {
          window[snapshotStreamer].markIframe(frameElement2, frameId);
        }, {
          snapshotStreamer: this._snapshotStreamer,
          frameElement,
          frameId: frame.guid
        }));
        frameElement.dispose();
      } catch (e) {
      }
    }
  }
  exports.Snapshotter = Snapshotter;
});

// node_modules/playwright-core/lib/server/trace/recorder/tracing.js
var require_tracing = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var visitTraceEvent = function(object, sha1s) {
    if (Array.isArray(object))
      return object.map((o) => visitTraceEvent(o, sha1s));
    if (object instanceof _dispatcher.Dispatcher)
      return `<${object._type}>`;
    if (object instanceof Buffer)
      return `<Buffer>`;
    if (object instanceof Date)
      return object;
    if (typeof object === "object") {
      const result = {};
      for (const key in object) {
        if (key === "sha1" || key === "_sha1" || key.endsWith("Sha1")) {
          const sha1 = object[key];
          if (sha1)
            sha1s.add(sha1);
        }
        result[key] = visitTraceEvent(object[key], sha1s);
      }
      return result;
    }
    return object;
  };
  var shouldCaptureSnapshot = function(metadata) {
    return _debug.commandsWithTracingSnapshots.has(metadata.type + "." + metadata.method);
  };
  var createBeforeActionTraceEvent = function(metadata) {
    if (metadata.internal || metadata.method.startsWith("tracing"))
      return null;
    return {
      type: "before",
      callId: metadata.id,
      startTime: metadata.startTime,
      apiName: metadata.apiName || metadata.type + "." + metadata.method,
      class: metadata.type,
      method: metadata.method,
      params: metadata.params,
      wallTime: metadata.wallTime,
      pageId: metadata.pageId
    };
  };
  var createInputActionTraceEvent = function(metadata) {
    if (metadata.internal || metadata.method.startsWith("tracing"))
      return null;
    return {
      type: "input",
      callId: metadata.id,
      point: metadata.point
    };
  };
  var createActionLogTraceEvent = function(metadata, message) {
    if (metadata.internal || metadata.method.startsWith("tracing"))
      return null;
    return {
      type: "log",
      callId: metadata.id,
      time: (0, _utils.monotonicTime)(),
      message
    };
  };
  var createAfterActionTraceEvent = function(metadata) {
    var _metadata$error;
    if (metadata.internal || metadata.method.startsWith("tracing"))
      return null;
    return {
      type: "after",
      callId: metadata.id,
      endTime: metadata.endTime,
      error: (_metadata$error = metadata.error) === null || _metadata$error === undefined ? undefined : _metadata$error.error,
      result: metadata.result,
      point: metadata.point
    };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Tracing = undefined;
  exports.shouldCaptureSnapshot = shouldCaptureSnapshot;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _os = _interopRequireDefault(import.meta.require("os"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _debug = require_debug6();
  var _manualPromise = require_manualPromise();
  var _eventsHelper = require_eventsHelper();
  var _utils = require_utils3();
  var _fileUtils = require_fileUtils();
  var _artifact = require_artifact();
  var _browserContext = require_browserContext();
  var _instrumentation = require_instrumentation();
  var _page = require_page();
  var _harTracer = require_harTracer();
  var _snapshotter = require_snapshotter();
  var _zipBundle = require_zipBundle();
  var _dispatcher = require_dispatcher();
  var _errors = require_errors();
  var version = 6;
  var kScreencastOptions = {
    width: 800,
    height: 600,
    quality: 90
  };

  class Tracing extends _instrumentation.SdkObject {
    constructor(context, tracesDir) {
      super(context, "tracing");
      this._fs = new SerializedFS;
      this._snapshotter = undefined;
      this._harTracer = undefined;
      this._screencastListeners = [];
      this._eventListeners = [];
      this._context = undefined;
      this._state = undefined;
      this._isStopping = false;
      this._precreatedTracesDir = undefined;
      this._tracesTmpDir = undefined;
      this._allResources = new Set;
      this._contextCreatedEvent = undefined;
      this._pendingHarEntries = new Set;
      this._context = context;
      this._precreatedTracesDir = tracesDir;
      this._harTracer = new _harTracer.HarTracer(context, null, this, {
        content: "attach",
        includeTraceInfo: true,
        recordRequestOverrides: false,
        waitForContentOnStop: false
      });
      const testIdAttributeName = "selectors" in context ? context.selectors().testIdAttributeName() : undefined;
      this._contextCreatedEvent = {
        version,
        type: "context-options",
        browserName: "",
        options: {},
        platform: process.platform,
        wallTime: 0,
        sdkLanguage: context.attribution.playwright.options.sdkLanguage,
        testIdAttributeName
      };
      if (context instanceof _browserContext.BrowserContext) {
        this._snapshotter = new _snapshotter.Snapshotter(context, this);
        (0, _utils.assert)(tracesDir, "tracesDir must be specified for BrowserContext");
        this._contextCreatedEvent.browserName = context._browser.options.name;
        this._contextCreatedEvent.channel = context._browser.options.channel;
        this._contextCreatedEvent.options = context._options;
      }
    }
    async resetForReuse() {
      var _this$_snapshotter;
      await this.stopChunk({
        mode: "discard"
      }).catch(() => {
      });
      await this.stop();
      (_this$_snapshotter = this._snapshotter) === null || _this$_snapshotter === undefined || _this$_snapshotter.resetForReuse();
    }
    async start(options) {
      if (this._isStopping)
        throw new Error("Cannot start tracing while stopping");
      if (this._state)
        throw new Error("Tracing has been already started");
      this._contextCreatedEvent.sdkLanguage = this._context.attribution.playwright.options.sdkLanguage;
      const traceName = options.name || (0, _utils.createGuid)();
      const tracesDir = this._createTracesDirIfNeeded();
      this._state = {
        options,
        traceName,
        tracesDir,
        traceFile: _path.default.join(tracesDir, traceName + ".trace"),
        networkFile: _path.default.join(tracesDir, traceName + ".network"),
        resourcesDir: _path.default.join(tracesDir, "resources"),
        chunkOrdinal: 0,
        traceSha1s: new Set,
        networkSha1s: new Set,
        recording: false,
        callIds: new Set
      };
      this._fs.mkdir(this._state.resourcesDir);
      this._fs.writeFile(this._state.networkFile, "");
      if (options.snapshots)
        this._harTracer.start({
          omitScripts: !options.live
        });
    }
    async startChunk(options = {}) {
      var _this$_snapshotter2;
      if (this._state && this._state.recording)
        await this.stopChunk({
          mode: "discard"
        });
      if (!this._state)
        throw new Error("Must start tracing before starting a new chunk");
      if (this._isStopping)
        throw new Error("Cannot start a trace chunk while stopping");
      this._state.recording = true;
      this._state.callIds.clear();
      if (options.name && options.name !== this._state.traceName)
        this._changeTraceName(this._state, options.name);
      else
        this._allocateNewTraceFile(this._state);
      this._fs.mkdir(_path.default.dirname(this._state.traceFile));
      const event = {
        ...this._contextCreatedEvent,
        title: options.title,
        wallTime: Date.now()
      };
      this._fs.appendFile(this._state.traceFile, JSON.stringify(event) + "\n");
      this._context.instrumentation.addListener(this, this._context);
      this._eventListeners.push(_eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.Console, this._onConsoleMessage.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.PageError, this._onPageError.bind(this)));
      if (this._state.options.screenshots)
        this._startScreencast();
      if (this._state.options.snapshots)
        await ((_this$_snapshotter2 = this._snapshotter) === null || _this$_snapshotter2 === undefined ? undefined : _this$_snapshotter2.start());
      return {
        traceName: this._state.traceName
      };
    }
    _startScreencast() {
      if (!(this._context instanceof _browserContext.BrowserContext))
        return;
      for (const page of this._context.pages())
        this._startScreencastInPage(page);
      this._screencastListeners.push(_eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.Page, this._startScreencastInPage.bind(this)));
    }
    _stopScreencast() {
      _eventsHelper.eventsHelper.removeEventListeners(this._screencastListeners);
      if (!(this._context instanceof _browserContext.BrowserContext))
        return;
      for (const page of this._context.pages())
        page.setScreencastOptions(null);
    }
    _allocateNewTraceFile(state) {
      const suffix = state.chunkOrdinal ? `-chunk${state.chunkOrdinal}` : ``;
      state.chunkOrdinal++;
      state.traceFile = _path.default.join(state.tracesDir, `${state.traceName}${suffix}.trace`);
    }
    _changeTraceName(state, name) {
      state.traceName = name;
      state.chunkOrdinal = 0;
      this._allocateNewTraceFile(state);
      const newNetworkFile = _path.default.join(state.tracesDir, name + ".network");
      this._fs.copyFile(state.networkFile, newNetworkFile);
      state.networkFile = newNetworkFile;
    }
    async stop() {
      if (!this._state)
        return;
      if (this._isStopping)
        throw new Error(`Tracing is already stopping`);
      if (this._state.recording)
        throw new Error(`Must stop trace file before stopping tracing`);
      this._harTracer.stop();
      this.flushHarEntries();
      await this._fs.syncAndGetError();
      this._state = undefined;
    }
    async deleteTmpTracesDir() {
      if (this._tracesTmpDir)
        await (0, _fileUtils.removeFolders)([this._tracesTmpDir]);
    }
    _createTracesDirIfNeeded() {
      if (this._precreatedTracesDir)
        return this._precreatedTracesDir;
      this._tracesTmpDir = _fs.default.mkdtempSync(_path.default.join(_os.default.tmpdir(), "playwright-tracing-"));
      return this._tracesTmpDir;
    }
    abort() {
      var _this$_snapshotter3;
      (_this$_snapshotter3 = this._snapshotter) === null || _this$_snapshotter3 === undefined || _this$_snapshotter3.dispose();
      this._harTracer.stop();
    }
    async flush() {
      this.abort();
      await this._fs.syncAndGetError();
    }
    async stopChunk(params) {
      var _this$_snapshotter4;
      if (this._isStopping)
        throw new Error(`Tracing is already stopping`);
      this._isStopping = true;
      if (!this._state || !this._state.recording) {
        this._isStopping = false;
        if (params.mode !== "discard")
          throw new Error(`Must start tracing before stopping`);
        return {};
      }
      this._context.instrumentation.removeListener(this);
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      if (this._state.options.screenshots)
        this._stopScreencast();
      if (this._state.options.snapshots)
        await ((_this$_snapshotter4 = this._snapshotter) === null || _this$_snapshotter4 === undefined ? undefined : _this$_snapshotter4.stop());
      this.flushHarEntries();
      const newNetworkFile = _path.default.join(this._state.tracesDir, this._state.traceName + `-pwnetcopy-${this._state.chunkOrdinal}.network`);
      const entries = [];
      entries.push({
        name: "trace.trace",
        value: this._state.traceFile
      });
      entries.push({
        name: "trace.network",
        value: newNetworkFile
      });
      for (const sha1 of new Set([...this._state.traceSha1s, ...this._state.networkSha1s]))
        entries.push({
          name: _path.default.join("resources", sha1),
          value: _path.default.join(this._state.resourcesDir, sha1)
        });
      this._state.traceSha1s = new Set;
      if (params.mode === "discard") {
        this._isStopping = false;
        this._state.recording = false;
        return {};
      }
      this._fs.copyFile(this._state.networkFile, newNetworkFile);
      const zipFileName = this._state.traceFile + ".zip";
      if (params.mode === "archive")
        this._fs.zip(entries, zipFileName);
      const error = await this._fs.syncAndGetError();
      this._isStopping = false;
      if (this._state)
        this._state.recording = false;
      if (error) {
        if (this._context instanceof _browserContext.BrowserContext && !this._context._browser.isConnected())
          return {};
        throw error;
      }
      if (params.mode === "entries")
        return {
          entries
        };
      const artifact = new _artifact.Artifact(this._context, zipFileName);
      artifact.reportFinished();
      return {
        artifact
      };
    }
    async _captureSnapshot(snapshotName, sdkObject, metadata, element) {
      if (!this._snapshotter)
        return;
      if (!sdkObject.attribution.page)
        return;
      if (!this._snapshotter.started())
        return;
      if (!shouldCaptureSnapshot(metadata))
        return;
      await this._snapshotter.captureSnapshot(sdkObject.attribution.page, metadata.id, snapshotName, element).catch(() => {
      });
    }
    onBeforeCall(sdkObject, metadata) {
      var _sdkObject$attributio, _this$_state;
      const event = createBeforeActionTraceEvent(metadata);
      if (!event)
        return Promise.resolve();
      (_sdkObject$attributio = sdkObject.attribution.page) === null || _sdkObject$attributio === undefined || _sdkObject$attributio.temporarilyDisableTracingScreencastThrottling();
      event.beforeSnapshot = `before@${metadata.id}`;
      (_this$_state = this._state) === null || _this$_state === undefined || _this$_state.callIds.add(metadata.id);
      this._appendTraceEvent(event);
      return this._captureSnapshot(event.beforeSnapshot, sdkObject, metadata);
    }
    onBeforeInputAction(sdkObject, metadata, element) {
      var _this$_state2, _sdkObject$attributio2;
      if (!((_this$_state2 = this._state) !== null && _this$_state2 !== undefined && _this$_state2.callIds.has(metadata.id)))
        return Promise.resolve();
      const event = createInputActionTraceEvent(metadata);
      if (!event)
        return Promise.resolve();
      (_sdkObject$attributio2 = sdkObject.attribution.page) === null || _sdkObject$attributio2 === undefined || _sdkObject$attributio2.temporarilyDisableTracingScreencastThrottling();
      event.inputSnapshot = `input@${metadata.id}`;
      this._appendTraceEvent(event);
      return this._captureSnapshot(event.inputSnapshot, sdkObject, metadata, element);
    }
    onCallLog(sdkObject, metadata, logName, message) {
      if (metadata.isServerSide || metadata.internal)
        return;
      if (logName !== "api")
        return;
      const event = createActionLogTraceEvent(metadata, message);
      if (event)
        this._appendTraceEvent(event);
    }
    async onAfterCall(sdkObject, metadata) {
      var _this$_state3, _this$_state4, _sdkObject$attributio3;
      if (!((_this$_state3 = this._state) !== null && _this$_state3 !== undefined && _this$_state3.callIds.has(metadata.id)))
        return;
      (_this$_state4 = this._state) === null || _this$_state4 === undefined || _this$_state4.callIds.delete(metadata.id);
      const event = createAfterActionTraceEvent(metadata);
      if (!event)
        return;
      (_sdkObject$attributio3 = sdkObject.attribution.page) === null || _sdkObject$attributio3 === undefined || _sdkObject$attributio3.temporarilyDisableTracingScreencastThrottling();
      event.afterSnapshot = `after@${metadata.id}`;
      this._appendTraceEvent(event);
      return this._captureSnapshot(event.afterSnapshot, sdkObject, metadata);
    }
    onEntryStarted(entry) {
      this._pendingHarEntries.add(entry);
    }
    onEntryFinished(entry) {
      this._pendingHarEntries.delete(entry);
      const event = {
        type: "resource-snapshot",
        snapshot: entry
      };
      const visited = visitTraceEvent(event, this._state.networkSha1s);
      this._fs.appendFile(this._state.networkFile, JSON.stringify(visited) + "\n", true);
    }
    flushHarEntries() {
      const harLines = [];
      for (const entry of this._pendingHarEntries) {
        const event = {
          type: "resource-snapshot",
          snapshot: entry
        };
        const visited = visitTraceEvent(event, this._state.networkSha1s);
        harLines.push(JSON.stringify(visited));
      }
      this._pendingHarEntries.clear();
      if (harLines.length)
        this._fs.appendFile(this._state.networkFile, harLines.join("\n") + "\n", true);
    }
    onContentBlob(sha1, buffer) {
      this._appendResource(sha1, buffer);
    }
    onSnapshotterBlob(blob) {
      this._appendResource(blob.sha1, blob.buffer);
    }
    onFrameSnapshot(snapshot) {
      this._appendTraceEvent({
        type: "frame-snapshot",
        snapshot
      });
    }
    _onConsoleMessage(message) {
      var _message$page;
      const event = {
        type: "console",
        messageType: message.type(),
        text: message.text(),
        args: message.args().map((a) => ({
          preview: a.toString(),
          value: a.rawValue()
        })),
        location: message.location(),
        time: (0, _utils.monotonicTime)(),
        pageId: (_message$page = message.page()) === null || _message$page === undefined ? undefined : _message$page.guid
      };
      this._appendTraceEvent(event);
    }
    _onPageError(error, page) {
      const event = {
        type: "event",
        time: (0, _utils.monotonicTime)(),
        class: "BrowserContext",
        method: "pageError",
        params: {
          error: (0, _errors.serializeError)(error)
        },
        pageId: page.guid
      };
      this._appendTraceEvent(event);
    }
    _startScreencastInPage(page) {
      page.setScreencastOptions(kScreencastOptions);
      const prefix = page.guid;
      this._screencastListeners.push(_eventsHelper.eventsHelper.addEventListener(page, _page.Page.Events.ScreencastFrame, (params) => {
        const suffix = params.timestamp || Date.now();
        const sha1 = `${prefix}-${suffix}.jpeg`;
        const event = {
          type: "screencast-frame",
          pageId: page.guid,
          sha1,
          width: params.width,
          height: params.height,
          timestamp: (0, _utils.monotonicTime)()
        };
        this._appendResource(sha1, params.buffer);
        this._appendTraceEvent(event);
      }));
    }
    _appendTraceEvent(event) {
      const visited = visitTraceEvent(event, this._state.traceSha1s);
      const flush = this._state.options.live || event.type !== "event" && event.type !== "console" && event.type !== "log";
      this._fs.appendFile(this._state.traceFile, JSON.stringify(visited) + "\n", flush);
    }
    _appendResource(sha1, buffer) {
      if (this._allResources.has(sha1))
        return;
      this._allResources.add(sha1);
      const resourcePath = _path.default.join(this._state.resourcesDir, sha1);
      this._fs.writeFile(resourcePath, buffer, true);
    }
  }
  exports.Tracing = Tracing;

  class SerializedFS {
    constructor() {
      this._writeChain = Promise.resolve();
      this._buffers = new Map;
      this._error = undefined;
    }
    mkdir(dir) {
      this._appendOperation(() => _fs.default.promises.mkdir(dir, {
        recursive: true
      }));
    }
    writeFile(file, content, skipIfExists) {
      this._buffers.delete(file);
      this._appendOperation(async () => {
        if (skipIfExists)
          await _fs.default.promises.writeFile(file, content, {
            flag: "wx"
          }).catch(() => {
          });
        else
          await _fs.default.promises.writeFile(file, content);
      });
    }
    appendFile(file, text, flush) {
      if (!this._buffers.has(file))
        this._buffers.set(file, []);
      this._buffers.get(file).push(text);
      if (flush)
        this._flushFile(file);
    }
    _flushFile(file) {
      const buffer = this._buffers.get(file);
      if (buffer === undefined)
        return;
      const text = buffer.join("");
      this._buffers.delete(file);
      this._appendOperation(() => _fs.default.promises.appendFile(file, text));
    }
    copyFile(from, to) {
      this._flushFile(from);
      this._buffers.delete(to);
      this._appendOperation(() => _fs.default.promises.copyFile(from, to));
    }
    async syncAndGetError() {
      for (const file of this._buffers.keys())
        this._flushFile(file);
      await this._writeChain;
      return this._error;
    }
    zip(entries, zipFileName) {
      for (const file of this._buffers.keys())
        this._flushFile(file);
      this._appendOperation(async () => {
        const zipFile = new _zipBundle.yazl.ZipFile;
        const result = new _manualPromise.ManualPromise;
        zipFile.on("error", (error) => result.reject(error));
        for (const entry of entries)
          zipFile.addFile(entry.value, entry.name);
        zipFile.end();
        zipFile.outputStream.pipe(_fs.default.createWriteStream(zipFileName)).on("close", () => result.resolve()).on("error", (error) => result.reject(error));
        await result;
      });
    }
    _appendOperation(cb) {
      this._writeChain = this._writeChain.then(async () => {
        if (this._error)
          return;
        try {
          await cb();
        } catch (e) {
          this._error = e;
        }
      });
    }
  }
});

// node_modules/playwright-core/lib/server/har/harRecorder.js
var require_harRecorder = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var jsonStringify = function(object) {
    const tokens = [];
    innerJsonStringify(object, tokens, "", false, undefined);
    return tokens.join("");
  };
  var innerJsonStringify = function(object, tokens, indent, flat, parentKey) {
    if (typeof object !== "object" || object === null) {
      tokens.push(JSON.stringify(object));
      return;
    }
    const isArray = Array.isArray(object);
    if (!isArray && object.constructor.name !== "Object") {
      tokens.push(JSON.stringify(object));
      return;
    }
    const entries = isArray ? object : Object.entries(object).filter((e) => e[1] !== undefined);
    if (!entries.length) {
      tokens.push(isArray ? `[]` : `{}`);
      return;
    }
    const childIndent = `${indent}  `;
    let brackets;
    if (isArray)
      brackets = flat ? {
        open: "[",
        close: "]"
      } : {
        open: `[\n${childIndent}`,
        close: `\n${indent}]`
      };
    else
      brackets = flat ? {
        open: "{ ",
        close: " }"
      } : {
        open: `{\n${childIndent}`,
        close: `\n${indent}}`
      };
    tokens.push(brackets.open);
    for (let i = 0;i < entries.length; ++i) {
      const entry = entries[i];
      if (i)
        tokens.push(flat ? `, ` : `,\n${childIndent}`);
      if (!isArray)
        tokens.push(`${JSON.stringify(entry[0])}: `);
      const key = isArray ? undefined : entry[0];
      const flatten = flat || key === "timings" || parentKey === "headers";
      innerJsonStringify(isArray ? entry : entry[1], tokens, childIndent, flatten, key);
    }
    tokens.push(brackets.close);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.HarRecorder = undefined;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _artifact = require_artifact();
  var _harTracer = require_harTracer();
  var _zipBundle = require_zipBundle();
  var _manualPromise = require_manualPromise();
  var _utils = require_utils3();

  class HarRecorder {
    constructor(context, page, options) {
      this._artifact = undefined;
      this._isFlushed = false;
      this._tracer = undefined;
      this._entries = [];
      this._zipFile = null;
      this._writtenZipEntries = new Set;
      this._artifact = new _artifact.Artifact(context, _path.default.join(context._browser.options.artifactsDir, `${(0, _utils.createGuid)()}.har`));
      const urlFilterRe = options.urlRegexSource !== undefined && options.urlRegexFlags !== undefined ? new RegExp(options.urlRegexSource, options.urlRegexFlags) : undefined;
      const expectsZip = options.path.endsWith(".zip");
      const content = options.content || (expectsZip ? "attach" : "embed");
      this._tracer = new _harTracer.HarTracer(context, page, this, {
        content,
        slimMode: options.mode === "minimal",
        includeTraceInfo: false,
        recordRequestOverrides: true,
        waitForContentOnStop: true,
        urlFilter: urlFilterRe !== null && urlFilterRe !== undefined ? urlFilterRe : options.urlGlob
      });
      this._zipFile = content === "attach" || expectsZip ? new _zipBundle.yazl.ZipFile : null;
      this._tracer.start({
        omitScripts: false
      });
    }
    onEntryStarted(entry) {
      this._entries.push(entry);
    }
    onEntryFinished(entry) {
    }
    onContentBlob(sha1, buffer) {
      if (!this._zipFile || this._writtenZipEntries.has(sha1))
        return;
      this._writtenZipEntries.add(sha1);
      this._zipFile.addBuffer(buffer, sha1);
    }
    async flush() {
      if (this._isFlushed)
        return;
      this._isFlushed = true;
      await this._tracer.flush();
      const log = this._tracer.stop();
      log.entries = this._entries;
      const harFileContent = jsonStringify({
        log
      });
      if (this._zipFile) {
        const result = new _manualPromise.ManualPromise;
        this._zipFile.on("error", (error) => result.reject(error));
        this._zipFile.addBuffer(Buffer.from(harFileContent, "utf-8"), "har.har");
        this._zipFile.end();
        this._zipFile.outputStream.pipe(_fs.default.createWriteStream(this._artifact.localPath())).on("close", () => {
          result.resolve();
        });
        await result;
      } else {
        await _fs.default.promises.writeFile(this._artifact.localPath(), harFileContent);
      }
    }
    async export() {
      await this.flush();
      this._artifact.reportFinished();
      return this._artifact;
    }
  }
  exports.HarRecorder = HarRecorder;
});

// node_modules/playwright-core/lib/server/recorder/codeGenerator.js
var require_codeGenerator = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CodeGenerator = undefined;
  var _events = import.meta.require("events");

  class CodeGenerator extends _events.EventEmitter {
    constructor(browserName, enabled, launchOptions, contextOptions, deviceName, saveStorage) {
      super();
      this._currentAction = null;
      this._lastAction = null;
      this._actions = [];
      this._enabled = undefined;
      this._options = undefined;
      launchOptions = {
        headless: false,
        ...launchOptions
      };
      contextOptions = {
        ...contextOptions
      };
      this._enabled = enabled;
      this._options = {
        browserName,
        launchOptions,
        contextOptions,
        deviceName,
        saveStorage
      };
      this.restart();
    }
    restart() {
      this._currentAction = null;
      this._lastAction = null;
      this._actions = [];
      this.emit("change");
    }
    setEnabled(enabled) {
      this._enabled = enabled;
    }
    addAction(action) {
      if (!this._enabled)
        return;
      this.willPerformAction(action);
      this.didPerformAction(action);
    }
    willPerformAction(action) {
      if (!this._enabled)
        return;
      this._currentAction = action;
    }
    performedActionFailed(action) {
      if (!this._enabled)
        return;
      if (this._currentAction === action)
        this._currentAction = null;
    }
    didPerformAction(actionInContext) {
      if (!this._enabled)
        return;
      const action = actionInContext.action;
      let eraseLastAction = false;
      if (this._lastAction && this._lastAction.frame.pageAlias === actionInContext.frame.pageAlias) {
        const lastAction = this._lastAction.action;
        if (this._lastAction && action.name === "fill" && lastAction.name === "fill") {
          if (action.selector === lastAction.selector)
            eraseLastAction = true;
        }
        if (lastAction && action.name === "click" && lastAction.name === "click") {
          if (action.selector === lastAction.selector && action.clickCount > lastAction.clickCount)
            eraseLastAction = true;
        }
        if (lastAction && action.name === "navigate" && lastAction.name === "navigate") {
          if (action.url === lastAction.url) {
            this._currentAction = null;
            return;
          }
        }
        if (lastAction && (action.name === "check" || action.name === "uncheck") && lastAction.name === "click") {
          if (action.selector === lastAction.selector)
            eraseLastAction = true;
        }
      }
      this._lastAction = actionInContext;
      this._currentAction = null;
      if (eraseLastAction)
        this._actions.pop();
      this._actions.push(actionInContext);
      this.emit("change");
    }
    commitLastAction() {
      if (!this._enabled)
        return;
      const action = this._lastAction;
      if (action)
        action.committed = true;
    }
    signal(pageAlias, frame, signal) {
      if (!this._enabled)
        return;
      if (this._currentAction) {
        this._currentAction.action.signals.push(signal);
        return;
      }
      if (this._lastAction && !this._lastAction.committed) {
        const signals = this._lastAction.action.signals;
        if (signal.name === "navigation" && signals.length && signals[signals.length - 1].name === "download")
          return;
        if (signal.name === "download" && signals.length && signals[signals.length - 1].name === "navigation")
          signals.length = signals.length - 1;
        this._lastAction.action.signals.push(signal);
        this.emit("change");
        return;
      }
      if (signal.name === "navigation" && frame._page.mainFrame() === frame) {
        this.addAction({
          frame: {
            pageAlias,
            isMainFrame: true
          },
          committed: true,
          action: {
            name: "navigate",
            url: frame.url(),
            signals: []
          }
        });
      }
    }
    generateStructure(languageGenerator) {
      const header = languageGenerator.generateHeader(this._options);
      const footer = languageGenerator.generateFooter(this._options.saveStorage);
      const actions = this._actions.map((a) => languageGenerator.generateAction(a)).filter(Boolean);
      const text = [header, ...actions, footer].join("\n");
      return {
        header,
        footer,
        actions,
        text
      };
    }
  }
  exports.CodeGenerator = CodeGenerator;
});

// node_modules/playwright-core/lib/server/recorder/utils.js
var require_utils4 = __commonJS((exports) => {
  var toClickOptions = function(action) {
    let method = "click";
    if (action.clickCount === 2)
      method = "dblclick";
    const modifiers = toModifiers(action.modifiers);
    const options = {};
    if (action.button !== "left")
      options.button = action.button;
    if (modifiers.length)
      options.modifiers = modifiers;
    if (action.clickCount > 2)
      options.clickCount = action.clickCount;
    if (action.position)
      options.position = action.position;
    return {
      method,
      options
    };
  };
  var toModifiers = function(modifiers) {
    const result = [];
    if (modifiers & 1)
      result.push("Alt");
    if (modifiers & 2)
      result.push("ControlOrMeta");
    if (modifiers & 4)
      result.push("ControlOrMeta");
    if (modifiers & 8)
      result.push("Shift");
    return result;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.toClickOptions = toClickOptions;
  exports.toModifiers = toModifiers;
});

// node_modules/playwright-core/lib/server/recorder/language.js
var require_language2 = __commonJS((exports) => {
  var sanitizeDeviceOptions = function(device, options) {
    const cleanedOptions = {};
    for (const property in options) {
      if (JSON.stringify(device[property]) !== JSON.stringify(options[property]))
        cleanedOptions[property] = options[property];
    }
    return cleanedOptions;
  };
  var toSignalMap = function(action) {
    let popup;
    let download;
    let dialog;
    for (const signal of action.signals) {
      if (signal.name === "popup")
        popup = signal;
      else if (signal.name === "download")
        download = signal;
      else if (signal.name === "dialog")
        dialog = signal;
    }
    return {
      popup,
      download,
      dialog
    };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.sanitizeDeviceOptions = sanitizeDeviceOptions;
  exports.toSignalMap = toSignalMap;
});

// node_modules/playwright-core/lib/server/deviceDescriptorsSource.json
var require_deviceDescriptorsSource = __commonJS((exports, module) => {
  module.exports = {
    "Blackberry PlayBook": {
      userAgent: "Mozilla/5.0 (PlayBook; U; RIM Tablet OS 2.1.0; en-US) AppleWebKit/536.2+ (KHTML like Gecko) Version/17.4 Safari/536.2+",
      viewport: {
        width: 600,
        height: 1024
      },
      deviceScaleFactor: 1,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Blackberry PlayBook landscape": {
      userAgent: "Mozilla/5.0 (PlayBook; U; RIM Tablet OS 2.1.0; en-US) AppleWebKit/536.2+ (KHTML like Gecko) Version/17.4 Safari/536.2+",
      viewport: {
        width: 1024,
        height: 600
      },
      deviceScaleFactor: 1,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "BlackBerry Z30": {
      userAgent: "Mozilla/5.0 (BB10; Touch) AppleWebKit/537.10+ (KHTML, like Gecko) Version/17.4 Mobile Safari/537.10+",
      viewport: {
        width: 360,
        height: 640
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "BlackBerry Z30 landscape": {
      userAgent: "Mozilla/5.0 (BB10; Touch) AppleWebKit/537.10+ (KHTML, like Gecko) Version/17.4 Mobile Safari/537.10+",
      viewport: {
        width: 640,
        height: 360
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Galaxy Note 3": {
      userAgent: "Mozilla/5.0 (Linux; U; Android 4.3; en-us; SM-N900T Build/JSS15J) AppleWebKit/534.30 (KHTML, like Gecko) Version/17.4 Mobile Safari/534.30",
      viewport: {
        width: 360,
        height: 640
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Galaxy Note 3 landscape": {
      userAgent: "Mozilla/5.0 (Linux; U; Android 4.3; en-us; SM-N900T Build/JSS15J) AppleWebKit/534.30 (KHTML, like Gecko) Version/17.4 Mobile Safari/534.30",
      viewport: {
        width: 640,
        height: 360
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Galaxy Note II": {
      userAgent: "Mozilla/5.0 (Linux; U; Android 4.1; en-us; GT-N7100 Build/JRO03C) AppleWebKit/534.30 (KHTML, like Gecko) Version/17.4 Mobile Safari/534.30",
      viewport: {
        width: 360,
        height: 640
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Galaxy Note II landscape": {
      userAgent: "Mozilla/5.0 (Linux; U; Android 4.1; en-us; GT-N7100 Build/JRO03C) AppleWebKit/534.30 (KHTML, like Gecko) Version/17.4 Mobile Safari/534.30",
      viewport: {
        width: 640,
        height: 360
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Galaxy S III": {
      userAgent: "Mozilla/5.0 (Linux; U; Android 4.0; en-us; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/17.4 Mobile Safari/534.30",
      viewport: {
        width: 360,
        height: 640
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Galaxy S III landscape": {
      userAgent: "Mozilla/5.0 (Linux; U; Android 4.0; en-us; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/17.4 Mobile Safari/534.30",
      viewport: {
        width: 640,
        height: 360
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Galaxy S5": {
      userAgent: "Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      viewport: {
        width: 360,
        height: 640
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Galaxy S5 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      viewport: {
        width: 640,
        height: 360
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Galaxy S8": {
      userAgent: "Mozilla/5.0 (Linux; Android 7.0; SM-G950U Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      viewport: {
        width: 360,
        height: 740
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Galaxy S8 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 7.0; SM-G950U Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      viewport: {
        width: 740,
        height: 360
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Galaxy S9+": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; SM-G965U Build/R16NW) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      viewport: {
        width: 320,
        height: 658
      },
      deviceScaleFactor: 4.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Galaxy S9+ landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; SM-G965U Build/R16NW) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      viewport: {
        width: 658,
        height: 320
      },
      deviceScaleFactor: 4.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Galaxy Tab S4": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.1.0; SM-T837A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Safari/537.36",
      viewport: {
        width: 712,
        height: 1138
      },
      deviceScaleFactor: 2.25,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Galaxy Tab S4 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.1.0; SM-T837A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Safari/537.36",
      viewport: {
        width: 1138,
        height: 712
      },
      deviceScaleFactor: 2.25,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "iPad (gen 5)": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 768,
        height: 1024
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPad (gen 5) landscape": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 1024,
        height: 768
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPad (gen 6)": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 768,
        height: 1024
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPad (gen 6) landscape": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 1024,
        height: 768
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPad (gen 7)": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 810,
        height: 1080
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPad (gen 7) landscape": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 1080,
        height: 810
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPad Mini": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 768,
        height: 1024
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPad Mini landscape": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 1024,
        height: 768
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPad Pro 11": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 834,
        height: 1194
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPad Pro 11 landscape": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 1194,
        height: 834
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 6": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/17.4 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 375,
        height: 667
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 6 landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/17.4 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 667,
        height: 375
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 6 Plus": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/17.4 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 414,
        height: 736
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 6 Plus landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/17.4 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 736,
        height: 414
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 7": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/17.4 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 375,
        height: 667
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 7 landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/17.4 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 667,
        height: 375
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 7 Plus": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/17.4 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 414,
        height: 736
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 7 Plus landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/17.4 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 736,
        height: 414
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 8": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/17.4 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 375,
        height: 667
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 8 landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/17.4 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 667,
        height: 375
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 8 Plus": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/17.4 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 414,
        height: 736
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 8 Plus landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/17.4 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 736,
        height: 414
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone SE": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/17.4 Mobile/14E304 Safari/602.1",
      viewport: {
        width: 320,
        height: 568
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone SE landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/17.4 Mobile/14E304 Safari/602.1",
      viewport: {
        width: 568,
        height: 320
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone X": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/17.4 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 375,
        height: 812
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone X landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/17.4 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 812,
        height: 375
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone XR": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 414,
        height: 896
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone XR landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 896,
        height: 414
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 11": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 414,
        height: 896
      },
      viewport: {
        width: 414,
        height: 715
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 11 landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 414,
        height: 896
      },
      viewport: {
        width: 800,
        height: 364
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 11 Pro": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 375,
        height: 812
      },
      viewport: {
        width: 375,
        height: 635
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 11 Pro landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 375,
        height: 812
      },
      viewport: {
        width: 724,
        height: 325
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 11 Pro Max": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 414,
        height: 896
      },
      viewport: {
        width: 414,
        height: 715
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 11 Pro Max landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 414,
        height: 896
      },
      viewport: {
        width: 808,
        height: 364
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 12": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 390,
        height: 664
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 12 landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 750,
        height: 340
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 12 Pro": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 390,
        height: 664
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 12 Pro landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 750,
        height: 340
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 12 Pro Max": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 428,
        height: 926
      },
      viewport: {
        width: 428,
        height: 746
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 12 Pro Max landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 428,
        height: 926
      },
      viewport: {
        width: 832,
        height: 378
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 12 Mini": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 375,
        height: 812
      },
      viewport: {
        width: 375,
        height: 629
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 12 Mini landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 375,
        height: 812
      },
      viewport: {
        width: 712,
        height: 325
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 13": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 390,
        height: 664
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 13 landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 750,
        height: 342
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 13 Pro": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 390,
        height: 664
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 13 Pro landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 750,
        height: 342
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 13 Pro Max": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 428,
        height: 926
      },
      viewport: {
        width: 428,
        height: 746
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 13 Pro Max landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 428,
        height: 926
      },
      viewport: {
        width: 832,
        height: 380
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 13 Mini": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 375,
        height: 812
      },
      viewport: {
        width: 375,
        height: 629
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 13 Mini landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 375,
        height: 812
      },
      viewport: {
        width: 712,
        height: 327
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 14": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 390,
        height: 664
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 14 landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 750,
        height: 340
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 14 Plus": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 428,
        height: 926
      },
      viewport: {
        width: 428,
        height: 746
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 14 Plus landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 428,
        height: 926
      },
      viewport: {
        width: 832,
        height: 378
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 14 Pro": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 393,
        height: 852
      },
      viewport: {
        width: 393,
        height: 660
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 14 Pro landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 393,
        height: 852
      },
      viewport: {
        width: 734,
        height: 343
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 14 Pro Max": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 430,
        height: 932
      },
      viewport: {
        width: 430,
        height: 740
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 14 Pro Max landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Mobile/15E148 Safari/604.1",
      screen: {
        width: 430,
        height: 932
      },
      viewport: {
        width: 814,
        height: 380
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Kindle Fire HDX": {
      userAgent: "Mozilla/5.0 (Linux; U; en-us; KFAPWI Build/JDQ39) AppleWebKit/535.19 (KHTML, like Gecko) Silk/3.13 Safari/535.19 Silk-Accelerated=true",
      viewport: {
        width: 800,
        height: 1280
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Kindle Fire HDX landscape": {
      userAgent: "Mozilla/5.0 (Linux; U; en-us; KFAPWI Build/JDQ39) AppleWebKit/535.19 (KHTML, like Gecko) Silk/3.13 Safari/535.19 Silk-Accelerated=true",
      viewport: {
        width: 1280,
        height: 800
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "LG Optimus L70": {
      userAgent: "Mozilla/5.0 (Linux; U; Android 4.4.2; en-us; LGMS323 Build/KOT49I.MS32310c) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/125.0.6422.26 Mobile Safari/537.36",
      viewport: {
        width: 384,
        height: 640
      },
      deviceScaleFactor: 1.25,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "LG Optimus L70 landscape": {
      userAgent: "Mozilla/5.0 (Linux; U; Android 4.4.2; en-us; LGMS323 Build/KOT49I.MS32310c) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/125.0.6422.26 Mobile Safari/537.36",
      viewport: {
        width: 640,
        height: 384
      },
      deviceScaleFactor: 1.25,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Microsoft Lumia 550": {
      userAgent: "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 550) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36 Edge/14.14263",
      viewport: {
        width: 640,
        height: 360
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Microsoft Lumia 550 landscape": {
      userAgent: "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 550) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36 Edge/14.14263",
      viewport: {
        width: 360,
        height: 640
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Microsoft Lumia 950": {
      userAgent: "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 950) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36 Edge/14.14263",
      viewport: {
        width: 360,
        height: 640
      },
      deviceScaleFactor: 4,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Microsoft Lumia 950 landscape": {
      userAgent: "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 950) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36 Edge/14.14263",
      viewport: {
        width: 640,
        height: 360
      },
      deviceScaleFactor: 4,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 10": {
      userAgent: "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 10 Build/MOB31T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Safari/537.36",
      viewport: {
        width: 800,
        height: 1280
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 10 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 10 Build/MOB31T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Safari/537.36",
      viewport: {
        width: 1280,
        height: 800
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 4": {
      userAgent: "Mozilla/5.0 (Linux; Android 4.4.2; Nexus 4 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      viewport: {
        width: 384,
        height: 640
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 4 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 4.4.2; Nexus 4 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      viewport: {
        width: 640,
        height: 384
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 5": {
      userAgent: "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      viewport: {
        width: 360,
        height: 640
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 5 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      viewport: {
        width: 640,
        height: 360
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 5X": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 5X Build/OPR4.170623.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      viewport: {
        width: 412,
        height: 732
      },
      deviceScaleFactor: 2.625,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 5X landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 5X Build/OPR4.170623.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      viewport: {
        width: 732,
        height: 412
      },
      deviceScaleFactor: 2.625,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 6": {
      userAgent: "Mozilla/5.0 (Linux; Android 7.1.1; Nexus 6 Build/N6F26U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      viewport: {
        width: 412,
        height: 732
      },
      deviceScaleFactor: 3.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 6 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 7.1.1; Nexus 6 Build/N6F26U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      viewport: {
        width: 732,
        height: 412
      },
      deviceScaleFactor: 3.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 6P": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 6P Build/OPP3.170518.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      viewport: {
        width: 412,
        height: 732
      },
      deviceScaleFactor: 3.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 6P landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 6P Build/OPP3.170518.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      viewport: {
        width: 732,
        height: 412
      },
      deviceScaleFactor: 3.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 7": {
      userAgent: "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 7 Build/MOB30X) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Safari/537.36",
      viewport: {
        width: 600,
        height: 960
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 7 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 7 Build/MOB30X) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Safari/537.36",
      viewport: {
        width: 960,
        height: 600
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nokia Lumia 520": {
      userAgent: "Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 520)",
      viewport: {
        width: 320,
        height: 533
      },
      deviceScaleFactor: 1.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nokia Lumia 520 landscape": {
      userAgent: "Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 520)",
      viewport: {
        width: 533,
        height: 320
      },
      deviceScaleFactor: 1.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nokia N9": {
      userAgent: "Mozilla/5.0 (MeeGo; NokiaN9) AppleWebKit/534.13 (KHTML, like Gecko) NokiaBrowser/8.5.0 Mobile Safari/534.13",
      viewport: {
        width: 480,
        height: 854
      },
      deviceScaleFactor: 1,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Nokia N9 landscape": {
      userAgent: "Mozilla/5.0 (MeeGo; NokiaN9) AppleWebKit/534.13 (KHTML, like Gecko) NokiaBrowser/8.5.0 Mobile Safari/534.13",
      viewport: {
        width: 854,
        height: 480
      },
      deviceScaleFactor: 1,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Pixel 2": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0; Pixel 2 Build/OPD3.170816.012) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      viewport: {
        width: 411,
        height: 731
      },
      deviceScaleFactor: 2.625,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 2 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0; Pixel 2 Build/OPD3.170816.012) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      viewport: {
        width: 731,
        height: 411
      },
      deviceScaleFactor: 2.625,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 2 XL": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Pixel 2 XL Build/OPD1.170816.004) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      viewport: {
        width: 411,
        height: 823
      },
      deviceScaleFactor: 3.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 2 XL landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Pixel 2 XL Build/OPD1.170816.004) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      viewport: {
        width: 823,
        height: 411
      },
      deviceScaleFactor: 3.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 3": {
      userAgent: "Mozilla/5.0 (Linux; Android 9; Pixel 3 Build/PQ1A.181105.017.A1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      viewport: {
        width: 393,
        height: 786
      },
      deviceScaleFactor: 2.75,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 3 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 9; Pixel 3 Build/PQ1A.181105.017.A1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      viewport: {
        width: 786,
        height: 393
      },
      deviceScaleFactor: 2.75,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 4": {
      userAgent: "Mozilla/5.0 (Linux; Android 10; Pixel 4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      viewport: {
        width: 353,
        height: 745
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 4 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 10; Pixel 4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      viewport: {
        width: 745,
        height: 353
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 4a (5G)": {
      userAgent: "Mozilla/5.0 (Linux; Android 11; Pixel 4a (5G)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      screen: {
        width: 412,
        height: 892
      },
      viewport: {
        width: 412,
        height: 765
      },
      deviceScaleFactor: 2.63,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 4a (5G) landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 11; Pixel 4a (5G)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      screen: {
        height: 892,
        width: 412
      },
      viewport: {
        width: 840,
        height: 312
      },
      deviceScaleFactor: 2.63,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 5": {
      userAgent: "Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      screen: {
        width: 393,
        height: 851
      },
      viewport: {
        width: 393,
        height: 727
      },
      deviceScaleFactor: 2.75,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 5 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      screen: {
        width: 851,
        height: 393
      },
      viewport: {
        width: 802,
        height: 293
      },
      deviceScaleFactor: 2.75,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 7": {
      userAgent: "Mozilla/5.0 (Linux; Android 14; Pixel 7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      screen: {
        width: 412,
        height: 915
      },
      viewport: {
        width: 412,
        height: 839
      },
      deviceScaleFactor: 2.625,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 7 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 14; Pixel 7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      screen: {
        width: 915,
        height: 412
      },
      viewport: {
        width: 863,
        height: 360
      },
      deviceScaleFactor: 2.625,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Moto G4": {
      userAgent: "Mozilla/5.0 (Linux; Android 7.0; Moto G (4)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      viewport: {
        width: 360,
        height: 640
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Moto G4 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 7.0; Moto G (4)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Mobile Safari/537.36",
      viewport: {
        width: 640,
        height: 360
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Desktop Chrome HiDPI": {
      userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Safari/537.36",
      screen: {
        width: 1792,
        height: 1120
      },
      viewport: {
        width: 1280,
        height: 720
      },
      deviceScaleFactor: 2,
      isMobile: false,
      hasTouch: false,
      defaultBrowserType: "chromium"
    },
    "Desktop Edge HiDPI": {
      userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Safari/537.36 Edg/125.0.6422.26",
      screen: {
        width: 1792,
        height: 1120
      },
      viewport: {
        width: 1280,
        height: 720
      },
      deviceScaleFactor: 2,
      isMobile: false,
      hasTouch: false,
      defaultBrowserType: "chromium"
    },
    "Desktop Firefox HiDPI": {
      userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:125.0.1) Gecko/20100101 Firefox/125.0.1",
      screen: {
        width: 1792,
        height: 1120
      },
      viewport: {
        width: 1280,
        height: 720
      },
      deviceScaleFactor: 2,
      isMobile: false,
      hasTouch: false,
      defaultBrowserType: "firefox"
    },
    "Desktop Safari": {
      userAgent: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Safari/605.1.15",
      screen: {
        width: 1792,
        height: 1120
      },
      viewport: {
        width: 1280,
        height: 720
      },
      deviceScaleFactor: 2,
      isMobile: false,
      hasTouch: false,
      defaultBrowserType: "webkit"
    },
    "Desktop Chrome": {
      userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Safari/537.36",
      screen: {
        width: 1920,
        height: 1080
      },
      viewport: {
        width: 1280,
        height: 720
      },
      deviceScaleFactor: 1,
      isMobile: false,
      hasTouch: false,
      defaultBrowserType: "chromium"
    },
    "Desktop Edge": {
      userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.6422.26 Safari/537.36 Edg/125.0.6422.26",
      screen: {
        width: 1920,
        height: 1080
      },
      viewport: {
        width: 1280,
        height: 720
      },
      deviceScaleFactor: 1,
      isMobile: false,
      hasTouch: false,
      defaultBrowserType: "chromium"
    },
    "Desktop Firefox": {
      userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:125.0.1) Gecko/20100101 Firefox/125.0.1",
      screen: {
        width: 1920,
        height: 1080
      },
      viewport: {
        width: 1280,
        height: 720
      },
      deviceScaleFactor: 1,
      isMobile: false,
      hasTouch: false,
      defaultBrowserType: "firefox"
    }
  };
});

// node_modules/playwright-core/lib/server/recorder/javascript.js
var require_javascript2 = __commonJS((exports) => {
  var formatOptions = function(value, hasArguments) {
    const keys = Object.keys(value);
    if (!keys.length)
      return "";
    return (hasArguments ? ", " : "") + formatObject(value);
  };
  var formatObject = function(value, indent = "  ") {
    if (typeof value === "string")
      return quote(value);
    if (Array.isArray(value))
      return `[${value.map((o) => formatObject(o)).join(", ")}]`;
    if (typeof value === "object") {
      const keys = Object.keys(value).filter((key) => value[key] !== undefined).sort();
      if (!keys.length)
        return "{}";
      const tokens = [];
      for (const key of keys)
        tokens.push(`${key}: ${formatObject(value[key])}`);
      return `{\n${indent}${tokens.join(`,\n${indent}`)}\n}`;
    }
    return String(value);
  };
  var formatObjectOrVoid = function(value, indent = "  ") {
    const result = formatObject(value, indent);
    return result === "{}" ? "" : result;
  };
  var formatContextOptions = function(options, deviceName) {
    const device = deviceName && deviceDescriptors[deviceName];
    if (!device)
      return formatObjectOrVoid(options);
    let serializedObject = formatObjectOrVoid((0, _language.sanitizeDeviceOptions)(device, options));
    if (!serializedObject)
      serializedObject = "{\n}";
    const lines = serializedObject.split("\n");
    lines.splice(1, 0, `...devices[${quote(deviceName)}],`);
    return lines.join("\n");
  };
  var quote = function(text) {
    return (0, _stringUtils.escapeWithQuotes)(text, "\'");
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.JavaScriptLanguageGenerator = exports.JavaScriptFormatter = undefined;
  var _language = require_language2();
  var _utils = require_utils4();
  var _stringUtils = require_stringUtils();
  var _locatorGenerators = require_locatorGenerators();
  var deviceDescriptors = require_deviceDescriptorsSource();

  class JavaScriptLanguageGenerator {
    constructor(isTest) {
      this.id = undefined;
      this.groupName = "Node.js";
      this.name = undefined;
      this.highlighter = "javascript";
      this._isTest = undefined;
      this.id = isTest ? "playwright-test" : "javascript";
      this.name = isTest ? "Test Runner" : "Library";
      this._isTest = isTest;
    }
    generateAction(actionInContext) {
      const action = actionInContext.action;
      if (this._isTest && (action.name === "openPage" || action.name === "closePage"))
        return "";
      const pageAlias = actionInContext.frame.pageAlias;
      const formatter = new JavaScriptFormatter(2);
      if (action.name === "openPage") {
        formatter.add(`const ${pageAlias} = await context.newPage();`);
        if (action.url && action.url !== "about:blank" && action.url !== "chrome://newtab/")
          formatter.add(`await ${pageAlias}.goto(${quote(action.url)});`);
        return formatter.format();
      }
      let subject;
      if (actionInContext.frame.isMainFrame) {
        subject = pageAlias;
      } else {
        const locators = actionInContext.frame.selectorsChain.map((selector) => `.frameLocator(${quote(selector)})`);
        subject = `${pageAlias}${locators.join("")}`;
      }
      const signals = (0, _language.toSignalMap)(action);
      if (signals.dialog) {
        formatter.add(`  ${pageAlias}.once('dialog', dialog => {
    console.log(\`Dialog message: \${dialog.message()}\`);
    dialog.dismiss().catch(() => {});
  });`);
      }
      if (signals.popup)
        formatter.add(`const ${signals.popup.popupAlias}Promise = ${pageAlias}.waitForEvent('popup');`);
      if (signals.download)
        formatter.add(`const download${signals.download.downloadAlias}Promise = ${pageAlias}.waitForEvent('download');`);
      formatter.add(this._generateActionCall(subject, action));
      if (signals.popup)
        formatter.add(`const ${signals.popup.popupAlias} = await ${signals.popup.popupAlias}Promise;`);
      if (signals.download)
        formatter.add(`const download${signals.download.downloadAlias} = await download${signals.download.downloadAlias}Promise;`);
      return formatter.format();
    }
    _generateActionCall(subject, action) {
      switch (action.name) {
        case "openPage":
          throw Error("Not reached");
        case "closePage":
          return `await ${subject}.close();`;
        case "click": {
          let method = "click";
          if (action.clickCount === 2)
            method = "dblclick";
          const modifiers = (0, _utils.toModifiers)(action.modifiers);
          const options = {};
          if (action.button !== "left")
            options.button = action.button;
          if (modifiers.length)
            options.modifiers = modifiers;
          if (action.clickCount > 2)
            options.clickCount = action.clickCount;
          if (action.position)
            options.position = action.position;
          const optionsString = formatOptions(options, false);
          return `await ${subject}.${this._asLocator(action.selector)}.${method}(${optionsString});`;
        }
        case "check":
          return `await ${subject}.${this._asLocator(action.selector)}.check();`;
        case "uncheck":
          return `await ${subject}.${this._asLocator(action.selector)}.uncheck();`;
        case "fill":
          return `await ${subject}.${this._asLocator(action.selector)}.fill(${quote(action.text)});`;
        case "setInputFiles":
          return `await ${subject}.${this._asLocator(action.selector)}.setInputFiles(${formatObject(action.files.length === 1 ? action.files[0] : action.files)});`;
        case "press": {
          const modifiers = (0, _utils.toModifiers)(action.modifiers);
          const shortcut = [...modifiers, action.key].join("+");
          return `await ${subject}.${this._asLocator(action.selector)}.press(${quote(shortcut)});`;
        }
        case "navigate":
          return `await ${subject}.goto(${quote(action.url)});`;
        case "select":
          return `await ${subject}.${this._asLocator(action.selector)}.selectOption(${formatObject(action.options.length > 1 ? action.options : action.options[0])});`;
        case "assertText":
          return `${this._isTest ? "" : "// "}await expect(${subject}.${this._asLocator(action.selector)}).${action.substring ? "toContainText" : "toHaveText"}(${quote(action.text)});`;
        case "assertChecked":
          return `${this._isTest ? "" : "// "}await expect(${subject}.${this._asLocator(action.selector)})${action.checked ? "" : ".not"}.toBeChecked();`;
        case "assertVisible":
          return `${this._isTest ? "" : "// "}await expect(${subject}.${this._asLocator(action.selector)}).toBeVisible();`;
        case "assertValue": {
          const assertion = action.value ? `toHaveValue(${quote(action.value)})` : `toBeEmpty()`;
          return `${this._isTest ? "" : "// "}await expect(${subject}.${this._asLocator(action.selector)}).${assertion};`;
        }
      }
    }
    _asLocator(selector) {
      return (0, _locatorGenerators.asLocator)("javascript", selector);
    }
    generateHeader(options) {
      if (this._isTest)
        return this.generateTestHeader(options);
      return this.generateStandaloneHeader(options);
    }
    generateFooter(saveStorage) {
      if (this._isTest)
        return this.generateTestFooter(saveStorage);
      return this.generateStandaloneFooter(saveStorage);
    }
    generateTestHeader(options) {
      const formatter = new JavaScriptFormatter;
      const useText = formatContextOptions(options.contextOptions, options.deviceName);
      formatter.add(`
      import { test, expect${options.deviceName ? ", devices" : ""} } from '@playwright/test';
${useText ? "\ntest.use(" + useText + ");\n" : ""}
      test('test', async ({ page }) => {`);
      return formatter.format();
    }
    generateTestFooter(saveStorage) {
      return `});`;
    }
    generateStandaloneHeader(options) {
      const formatter = new JavaScriptFormatter;
      formatter.add(`
      const { ${options.browserName}${options.deviceName ? ", devices" : ""} } = require('playwright');

      (async () => {
        const browser = await ${options.browserName}.launch(${formatObjectOrVoid(options.launchOptions)});
        const context = await browser.newContext(${formatContextOptions(options.contextOptions, options.deviceName)});`);
      return formatter.format();
    }
    generateStandaloneFooter(saveStorage) {
      const storageStateLine = saveStorage ? `\n  await context.storageState({ path: ${quote(saveStorage)} });` : "";
      return `\n  // ---------------------${storageStateLine}
  await context.close();
  await browser.close();
})();`;
    }
  }
  exports.JavaScriptLanguageGenerator = JavaScriptLanguageGenerator;

  class JavaScriptFormatter {
    constructor(offset = 0) {
      this._baseIndent = undefined;
      this._baseOffset = undefined;
      this._lines = [];
      this._baseIndent = " ".repeat(2);
      this._baseOffset = " ".repeat(offset);
    }
    prepend(text) {
      this._lines = text.trim().split("\n").map((line) => line.trim()).concat(this._lines);
    }
    add(text) {
      this._lines.push(...text.trim().split("\n").map((line) => line.trim()));
    }
    newLine() {
      this._lines.push("");
    }
    format() {
      let spaces = "";
      let previousLine = "";
      return this._lines.map((line) => {
        if (line === "")
          return line;
        if (line.startsWith("}") || line.startsWith("]"))
          spaces = spaces.substring(this._baseIndent.length);
        const extraSpaces = /^(for|while|if|try).*\(.*\)$/.test(previousLine) ? this._baseIndent : "";
        previousLine = line;
        const callCarryOver = line.startsWith(".set");
        line = spaces + extraSpaces + (callCarryOver ? this._baseIndent : "") + line;
        if (line.endsWith("{") || line.endsWith("["))
          spaces += this._baseIndent;
        return this._baseOffset + line;
      }).join("\n");
    }
  }
  exports.JavaScriptFormatter = JavaScriptFormatter;
});

// node_modules/playwright-core/lib/server/recorder/java.js
var require_java = __commonJS((exports) => {
  var formatPath = function(files) {
    if (Array.isArray(files)) {
      if (files.length === 0)
        return "new Path[0]";
      return `new Path[] {${files.map((s) => "Paths.get(" + quote(s) + ")").join(", ")}}`;
    }
    return `Paths.get(${quote(files)})`;
  };
  var formatSelectOption = function(options) {
    if (Array.isArray(options)) {
      if (options.length === 0)
        return "new String[0]";
      return `new String[] {${options.map((s) => quote(s)).join(", ")}}`;
    }
    return quote(options);
  };
  var formatLaunchOptions = function(options) {
    const lines = [];
    if (!Object.keys(options).filter((key) => options[key] !== undefined).length)
      return "";
    lines.push("new BrowserType.LaunchOptions()");
    if (options.channel)
      lines.push(`  .setChannel(${quote(options.channel)})`);
    if (typeof options.headless === "boolean")
      lines.push(`  .setHeadless(false)`);
    return lines.join("\n");
  };
  var formatContextOptions = function(contextOptions, deviceName) {
    var _options$recordHar, _options$recordHar2, _options$recordHar3, _options$recordHar4, _options$recordHar5, _options$recordHar6, _options$recordHar7;
    const lines = [];
    if (!Object.keys(contextOptions).length && !deviceName)
      return "";
    const device = deviceName ? deviceDescriptors[deviceName] : {};
    const options = {
      ...device,
      ...contextOptions
    };
    lines.push("new Browser.NewContextOptions()");
    if (options.acceptDownloads)
      lines.push(`  .setAcceptDownloads(true)`);
    if (options.bypassCSP)
      lines.push(`  .setBypassCSP(true)`);
    if (options.colorScheme)
      lines.push(`  .setColorScheme(ColorScheme.${options.colorScheme.toUpperCase()})`);
    if (options.deviceScaleFactor)
      lines.push(`  .setDeviceScaleFactor(${options.deviceScaleFactor})`);
    if (options.geolocation)
      lines.push(`  .setGeolocation(${options.geolocation.latitude}, ${options.geolocation.longitude})`);
    if (options.hasTouch)
      lines.push(`  .setHasTouch(${options.hasTouch})`);
    if (options.isMobile)
      lines.push(`  .setIsMobile(${options.isMobile})`);
    if (options.locale)
      lines.push(`  .setLocale(${quote(options.locale)})`);
    if (options.proxy)
      lines.push(`  .setProxy(new Proxy(${quote(options.proxy.server)}))`);
    if ((_options$recordHar = options.recordHar) !== null && _options$recordHar !== undefined && _options$recordHar.content)
      lines.push(`  .setRecordHarContent(HarContentPolicy.${(_options$recordHar2 = options.recordHar) === null || _options$recordHar2 === undefined ? undefined : _options$recordHar2.content.toUpperCase()})`);
    if ((_options$recordHar3 = options.recordHar) !== null && _options$recordHar3 !== undefined && _options$recordHar3.mode)
      lines.push(`  .setRecordHarMode(HarMode.${(_options$recordHar4 = options.recordHar) === null || _options$recordHar4 === undefined ? undefined : _options$recordHar4.mode.toUpperCase()})`);
    if ((_options$recordHar5 = options.recordHar) !== null && _options$recordHar5 !== undefined && _options$recordHar5.omitContent)
      lines.push(`  .setRecordHarOmitContent(true)`);
    if ((_options$recordHar6 = options.recordHar) !== null && _options$recordHar6 !== undefined && _options$recordHar6.path)
      lines.push(`  .setRecordHarPath(Paths.get(${quote(options.recordHar.path)}))`);
    if ((_options$recordHar7 = options.recordHar) !== null && _options$recordHar7 !== undefined && _options$recordHar7.urlFilter)
      lines.push(`  .setRecordHarUrlFilter(${quote(options.recordHar.urlFilter)})`);
    if (options.serviceWorkers)
      lines.push(`  .setServiceWorkers(ServiceWorkerPolicy.${options.serviceWorkers.toUpperCase()})`);
    if (options.storageState)
      lines.push(`  .setStorageStatePath(Paths.get(${quote(options.storageState)}))`);
    if (options.timezoneId)
      lines.push(`  .setTimezoneId(${quote(options.timezoneId)})`);
    if (options.userAgent)
      lines.push(`  .setUserAgent(${quote(options.userAgent)})`);
    if (options.viewport)
      lines.push(`  .setViewportSize(${options.viewport.width}, ${options.viewport.height})`);
    return lines.join("\n");
  };
  var formatClickOptions = function(options) {
    const lines = [];
    if (options.button)
      lines.push(`  .setButton(MouseButton.${options.button.toUpperCase()})`);
    if (options.modifiers)
      lines.push(`  .setModifiers(Arrays.asList(${options.modifiers.map((m) => `KeyboardModifier.${m.toUpperCase()}`).join(", ")}))`);
    if (options.clickCount)
      lines.push(`  .setClickCount(${options.clickCount})`);
    if (options.position)
      lines.push(`  .setPosition(${options.position.x}, ${options.position.y})`);
    if (!lines.length)
      return "";
    lines.unshift(`new Locator.ClickOptions()`);
    return lines.join("\n");
  };
  var quote = function(text) {
    return (0, _stringUtils.escapeWithQuotes)(text, "\"");
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.JavaLanguageGenerator = undefined;
  var _language = require_language2();
  var _utils = require_utils4();
  var _javascript = require_javascript2();
  var _stringUtils = require_stringUtils();
  var _locatorGenerators = require_locatorGenerators();
  var deviceDescriptors = require_deviceDescriptorsSource();

  class JavaLanguageGenerator {
    constructor(mode) {
      this.id = undefined;
      this.groupName = "Java";
      this.name = undefined;
      this.highlighter = "java";
      this._mode = undefined;
      if (mode === "library") {
        this.name = "Library";
        this.id = "java";
      } else if (mode === "junit") {
        this.name = "JUnit";
        this.id = "java-junit";
      } else {
        throw new Error(`Unknown Java language mode: ${mode}`);
      }
      this._mode = mode;
    }
    generateAction(actionInContext) {
      const action = actionInContext.action;
      const pageAlias = actionInContext.frame.pageAlias;
      const offset = this._mode === "junit" ? 4 : 6;
      const formatter = new _javascript.JavaScriptFormatter(offset);
      if (this._mode !== "library" && (action.name === "openPage" || action.name === "closePage"))
        return "";
      if (action.name === "openPage") {
        formatter.add(`Page ${pageAlias} = context.newPage();`);
        if (action.url && action.url !== "about:blank" && action.url !== "chrome://newtab/")
          formatter.add(`${pageAlias}.navigate(${quote(action.url)});`);
        return formatter.format();
      }
      let subject;
      let inFrameLocator = false;
      if (actionInContext.frame.isMainFrame) {
        subject = pageAlias;
      } else {
        const locators = actionInContext.frame.selectorsChain.map((selector) => `.frameLocator(${quote(selector)})`);
        subject = `${pageAlias}${locators.join("")}`;
        inFrameLocator = true;
      }
      const signals = (0, _language.toSignalMap)(action);
      if (signals.dialog) {
        formatter.add(`  ${pageAlias}.onceDialog(dialog -> {
        System.out.println(String.format("Dialog message: %s", dialog.message()));
        dialog.dismiss();
      });`);
      }
      let code = this._generateActionCall(subject, action, inFrameLocator);
      if (signals.popup) {
        code = `Page ${signals.popup.popupAlias} = ${pageAlias}.waitForPopup(() -> {
        ${code}
      });`;
      }
      if (signals.download) {
        code = `Download download${signals.download.downloadAlias} = ${pageAlias}.waitForDownload(() -> {
        ${code}
      });`;
      }
      formatter.add(code);
      return formatter.format();
    }
    _generateActionCall(subject, action, inFrameLocator) {
      switch (action.name) {
        case "openPage":
          throw Error("Not reached");
        case "closePage":
          return `${subject}.close();`;
        case "click": {
          let method = "click";
          if (action.clickCount === 2)
            method = "dblclick";
          const modifiers = (0, _utils.toModifiers)(action.modifiers);
          const options = {};
          if (action.button !== "left")
            options.button = action.button;
          if (modifiers.length)
            options.modifiers = modifiers;
          if (action.clickCount > 2)
            options.clickCount = action.clickCount;
          if (action.position)
            options.position = action.position;
          const optionsText = formatClickOptions(options);
          return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.${method}(${optionsText});`;
        }
        case "check":
          return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.check();`;
        case "uncheck":
          return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.uncheck();`;
        case "fill":
          return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.fill(${quote(action.text)});`;
        case "setInputFiles":
          return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.setInputFiles(${formatPath(action.files.length === 1 ? action.files[0] : action.files)});`;
        case "press": {
          const modifiers = (0, _utils.toModifiers)(action.modifiers);
          const shortcut = [...modifiers, action.key].join("+");
          return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.press(${quote(shortcut)});`;
        }
        case "navigate":
          return `${subject}.navigate(${quote(action.url)});`;
        case "select":
          return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.selectOption(${formatSelectOption(action.options.length > 1 ? action.options : action.options[0])});`;
        case "assertText":
          return `assertThat(${subject}.${this._asLocator(action.selector, inFrameLocator)}).${action.substring ? "containsText" : "hasText"}(${quote(action.text)});`;
        case "assertChecked":
          return `assertThat(${subject}.${this._asLocator(action.selector, inFrameLocator)})${action.checked ? "" : ".not()"}.isChecked();`;
        case "assertVisible":
          return `assertThat(${subject}.${this._asLocator(action.selector, inFrameLocator)}).isVisible();`;
        case "assertValue": {
          const assertion = action.value ? `hasValue(${quote(action.value)})` : `isEmpty()`;
          return `assertThat(${subject}.${this._asLocator(action.selector, inFrameLocator)}).${assertion};`;
        }
      }
    }
    _asLocator(selector, inFrameLocator) {
      return (0, _locatorGenerators.asLocator)("java", selector, inFrameLocator);
    }
    generateHeader(options) {
      const formatter = new _javascript.JavaScriptFormatter;
      if (this._mode === "junit") {
        formatter.add(`
      import com.microsoft.playwright.junit.UsePlaywright;
      import com.microsoft.playwright.Page;
      import com.microsoft.playwright.options.*;

      import org.junit.jupiter.api.*;
      import static com.microsoft.playwright.assertions.PlaywrightAssertions.*;

      @UsePlaywright
      public class TestExample {
        @Test
        void test(Page page) {`);
        return formatter.format();
      }
      formatter.add(`
    import com.microsoft.playwright.*;
    import com.microsoft.playwright.options.*;
    import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;
    import java.util.*;

    public class Example {
      public static void main(String[] args) {
        try (Playwright playwright = Playwright.create()) {
          Browser browser = playwright.${options.browserName}().launch(${formatLaunchOptions(options.launchOptions)});
          BrowserContext context = browser.newContext(${formatContextOptions(options.contextOptions, options.deviceName)});`);
      return formatter.format();
    }
    generateFooter(saveStorage) {
      const storageStateLine = saveStorage ? `\n      context.storageState(new BrowserContext.StorageStateOptions().setPath(${quote(saveStorage)}));\n` : "";
      if (this._mode === "junit") {
        return `${storageStateLine}  }
}`;
      }
      return `${storageStateLine}    }
  }
}`;
    }
  }
  exports.JavaLanguageGenerator = JavaLanguageGenerator;
});

// node_modules/playwright-core/lib/server/recorder/jsonl.js
var require_jsonl = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.JsonlLanguageGenerator = undefined;
  var _locatorGenerators = require_locatorGenerators();

  class JsonlLanguageGenerator {
    constructor() {
      this.id = "jsonl";
      this.groupName = "";
      this.name = "JSONL";
      this.highlighter = "javascript";
    }
    generateAction(actionInContext) {
      const locator = actionInContext.action.selector ? JSON.parse((0, _locatorGenerators.asLocator)("jsonl", actionInContext.action.selector)) : undefined;
      const entry = {
        ...actionInContext.action,
        pageAlias: actionInContext.frame.pageAlias,
        locator
      };
      return JSON.stringify(entry);
    }
    generateHeader(options) {
      return JSON.stringify(options);
    }
    generateFooter(saveStorage) {
      return "";
    }
  }
  exports.JsonlLanguageGenerator = JsonlLanguageGenerator;
});

// node_modules/playwright-core/lib/server/recorder/csharp.js
var require_csharp = __commonJS((exports) => {
  var formatObject = function(value, indent = "    ", name = "") {
    if (typeof value === "string") {
      if (["permissions", "colorScheme", "modifiers", "button", "recordHarContent", "recordHarMode", "serviceWorkers"].includes(name))
        return `${getClassName(name)}.${toPascal(value)}`;
      return quote(value);
    }
    if (Array.isArray(value))
      return `new[] { ${value.map((o) => formatObject(o, indent, name)).join(", ")} }`;
    if (typeof value === "object") {
      const keys = Object.keys(value).filter((key) => value[key] !== undefined).sort();
      if (!keys.length)
        return name ? `new ${getClassName(name)}` : "";
      const tokens = [];
      for (const key of keys) {
        const property = getPropertyName(key);
        tokens.push(`${property} = ${formatObject(value[key], indent, key)},`);
      }
      if (name)
        return `new ${getClassName(name)}\n{\n${indent}${tokens.join(`\n${indent}`)}\n${indent}}`;
      return `{\n${indent}${tokens.join(`\n${indent}`)}\n${indent}}`;
    }
    if (name === "latitude" || name === "longitude")
      return String(value) + "m";
    return String(value);
  };
  var getClassName = function(value) {
    switch (value) {
      case "viewport":
        return "ViewportSize";
      case "proxy":
        return "ProxySettings";
      case "permissions":
        return "ContextPermission";
      case "modifiers":
        return "KeyboardModifier";
      case "button":
        return "MouseButton";
      case "recordHarMode":
        return "HarMode";
      case "recordHarContent":
        return "HarContentPolicy";
      case "serviceWorkers":
        return "ServiceWorkerPolicy";
      default:
        return toPascal(value);
    }
  };
  var getPropertyName = function(key) {
    switch (key) {
      case "storageState":
        return "StorageStatePath";
      case "viewport":
        return "ViewportSize";
      default:
        return toPascal(key);
    }
  };
  var toPascal = function(value) {
    return value[0].toUpperCase() + value.slice(1);
  };
  var convertContextOptions = function(options) {
    const result = {
      ...options
    };
    if (options.recordHar) {
      result["recordHarPath"] = options.recordHar.path;
      result["recordHarContent"] = options.recordHar.content;
      result["recordHarMode"] = options.recordHar.mode;
      result["recordHarOmitContent"] = options.recordHar.omitContent;
      result["recordHarUrlFilter"] = options.recordHar.urlFilter;
      delete result.recordHar;
    }
    return result;
  };
  var formatContextOptions = function(options, deviceName) {
    const device = deviceName && deviceDescriptors[deviceName];
    if (!device) {
      if (!Object.entries(options).length)
        return "";
      return formatObject(convertContextOptions(options), "    ", "BrowserNewContextOptions");
    }
    options = (0, _language.sanitizeDeviceOptions)(device, options);
    if (!Object.entries(options).length)
      return `playwright.Devices[${quote(deviceName)}]`;
    return formatObject(convertContextOptions(options), "    ", `BrowserNewContextOptions(playwright.Devices[${quote(deviceName)}])`);
  };
  var quote = function(text) {
    return (0, _stringUtils.escapeWithQuotes)(text, "\"");
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CSharpLanguageGenerator = undefined;
  var _language = require_language2();
  var _utils = require_utils4();
  var _stringUtils = require_stringUtils();
  var _locatorGenerators = require_locatorGenerators();
  var deviceDescriptors = require_deviceDescriptorsSource();

  class CSharpLanguageGenerator {
    constructor(mode) {
      this.id = undefined;
      this.groupName = ".NET C#";
      this.name = undefined;
      this.highlighter = "csharp";
      this._mode = undefined;
      if (mode === "library") {
        this.name = "Library";
        this.id = "csharp";
      } else if (mode === "mstest") {
        this.name = "MSTest";
        this.id = "csharp-mstest";
      } else if (mode === "nunit") {
        this.name = "NUnit";
        this.id = "csharp-nunit";
      } else {
        throw new Error(`Unknown C# language mode: ${mode}`);
      }
      this._mode = mode;
    }
    generateAction(actionInContext) {
      const action = this._generateActionInner(actionInContext);
      if (action)
        return action;
      return "";
    }
    _generateActionInner(actionInContext) {
      const action = actionInContext.action;
      if (this._mode !== "library" && (action.name === "openPage" || action.name === "closePage"))
        return "";
      let pageAlias = actionInContext.frame.pageAlias;
      if (this._mode !== "library")
        pageAlias = pageAlias.replace("page", "Page");
      const formatter = new CSharpFormatter(this._mode === "library" ? 0 : 8);
      if (action.name === "openPage") {
        formatter.add(`var ${pageAlias} = await context.NewPageAsync();`);
        if (action.url && action.url !== "about:blank" && action.url !== "chrome://newtab/")
          formatter.add(`await ${pageAlias}.GotoAsync(${quote(action.url)});`);
        return formatter.format();
      }
      let subject;
      if (actionInContext.frame.isMainFrame) {
        subject = pageAlias;
      } else {
        const locators = actionInContext.frame.selectorsChain.map((selector) => `.FrameLocator(${quote(selector)})`);
        subject = `${pageAlias}${locators.join("")}`;
      }
      const signals = (0, _language.toSignalMap)(action);
      if (signals.dialog) {
        formatter.add(`    void ${pageAlias}_Dialog${signals.dialog.dialogAlias}_EventHandler(object sender, IDialog dialog)
      {
          Console.WriteLine(\$"Dialog message: {dialog.Message}");
          dialog.DismissAsync();
          ${pageAlias}.Dialog -= ${pageAlias}_Dialog${signals.dialog.dialogAlias}_EventHandler;
      }
      ${pageAlias}.Dialog += ${pageAlias}_Dialog${signals.dialog.dialogAlias}_EventHandler;`);
      }
      const lines = [];
      lines.push(this._generateActionCall(subject, action));
      if (signals.download) {
        lines.unshift(`var download${signals.download.downloadAlias} = await ${pageAlias}.RunAndWaitForDownloadAsync(async () =>\n{`);
        lines.push(`});`);
      }
      if (signals.popup) {
        lines.unshift(`var ${signals.popup.popupAlias} = await ${pageAlias}.RunAndWaitForPopupAsync(async () =>\n{`);
        lines.push(`});`);
      }
      for (const line of lines)
        formatter.add(line);
      return formatter.format();
    }
    _generateActionCall(subject, action) {
      switch (action.name) {
        case "openPage":
          throw Error("Not reached");
        case "closePage":
          return `await ${subject}.CloseAsync();`;
        case "click": {
          let method = "Click";
          if (action.clickCount === 2)
            method = "DblClick";
          const modifiers = (0, _utils.toModifiers)(action.modifiers);
          const options = {};
          if (action.button !== "left")
            options.button = action.button;
          if (modifiers.length)
            options.modifiers = modifiers;
          if (action.clickCount > 2)
            options.clickCount = action.clickCount;
          if (action.position)
            options.position = action.position;
          if (!Object.entries(options).length)
            return `await ${subject}.${this._asLocator(action.selector)}.${method}Async();`;
          const optionsString = formatObject(options, "    ", "Locator" + method + "Options");
          return `await ${subject}.${this._asLocator(action.selector)}.${method}Async(${optionsString});`;
        }
        case "check":
          return `await ${subject}.${this._asLocator(action.selector)}.CheckAsync();`;
        case "uncheck":
          return `await ${subject}.${this._asLocator(action.selector)}.UncheckAsync();`;
        case "fill":
          return `await ${subject}.${this._asLocator(action.selector)}.FillAsync(${quote(action.text)});`;
        case "setInputFiles":
          return `await ${subject}.${this._asLocator(action.selector)}.SetInputFilesAsync(${formatObject(action.files)});`;
        case "press": {
          const modifiers = (0, _utils.toModifiers)(action.modifiers);
          const shortcut = [...modifiers, action.key].join("+");
          return `await ${subject}.${this._asLocator(action.selector)}.PressAsync(${quote(shortcut)});`;
        }
        case "navigate":
          return `await ${subject}.GotoAsync(${quote(action.url)});`;
        case "select":
          return `await ${subject}.${this._asLocator(action.selector)}.SelectOptionAsync(${formatObject(action.options)});`;
        case "assertText":
          return `await Expect(${subject}.${this._asLocator(action.selector)}).${action.substring ? "ToContainTextAsync" : "ToHaveTextAsync"}(${quote(action.text)});`;
        case "assertChecked":
          return `await Expect(${subject}.${this._asLocator(action.selector)})${action.checked ? "" : ".Not"}.ToBeCheckedAsync();`;
        case "assertVisible":
          return `await Expect(${subject}.${this._asLocator(action.selector)}).ToBeVisibleAsync();`;
        case "assertValue": {
          const assertion = action.value ? `ToHaveValueAsync(${quote(action.value)})` : `ToBeEmptyAsync()`;
          return `await Expect(${subject}.${this._asLocator(action.selector)}).${assertion};`;
        }
      }
    }
    _asLocator(selector) {
      return (0, _locatorGenerators.asLocator)("csharp", selector);
    }
    generateHeader(options) {
      if (this._mode === "library")
        return this.generateStandaloneHeader(options);
      return this.generateTestRunnerHeader(options);
    }
    generateStandaloneHeader(options) {
      const formatter = new CSharpFormatter(0);
      formatter.add(`
      using Microsoft.Playwright;
      using System;
      using System.Threading.Tasks;

      using var playwright = await Playwright.CreateAsync();
      await using var browser = await playwright.${toPascal(options.browserName)}.LaunchAsync(${formatObject(options.launchOptions, "    ", "BrowserTypeLaunchOptions")});
      var context = await browser.NewContextAsync(${formatContextOptions(options.contextOptions, options.deviceName)});`);
      formatter.newLine();
      return formatter.format();
    }
    generateTestRunnerHeader(options) {
      const formatter = new CSharpFormatter(0);
      formatter.add(`
      using Microsoft.Playwright.${this._mode === "nunit" ? "NUnit" : "MSTest"};
      using Microsoft.Playwright;

      ${this._mode === "nunit" ? `[Parallelizable(ParallelScope.Self)]
      [TestFixture]` : "[TestClass]"}
      public class Tests : PageTest
      {`);
      const formattedContextOptions = formatContextOptions(options.contextOptions, options.deviceName);
      if (formattedContextOptions) {
        formatter.add(`public override BrowserNewContextOptions ContextOptions()
      {
          return ${formattedContextOptions};
      }`);
        formatter.newLine();
      }
      formatter.add(`    [${this._mode === "nunit" ? "Test" : "TestMethod"}]
    public async Task MyTest()
    {`);
      return formatter.format();
    }
    generateFooter(saveStorage) {
      const offset = this._mode === "library" ? "" : "        ";
      let storageStateLine = saveStorage ? `\n${offset}await context.StorageStateAsync(new BrowserContextStorageStateOptions\n${offset}{\n${offset}    Path = ${quote(saveStorage)}\n${offset}});\n` : "";
      if (this._mode !== "library")
        storageStateLine += `    }\n}\n`;
      return storageStateLine;
    }
  }
  exports.CSharpLanguageGenerator = CSharpLanguageGenerator;

  class CSharpFormatter {
    constructor(offset = 0) {
      this._baseIndent = undefined;
      this._baseOffset = undefined;
      this._lines = [];
      this._baseIndent = " ".repeat(4);
      this._baseOffset = " ".repeat(offset);
    }
    prepend(text) {
      this._lines = text.trim().split("\n").map((line) => line.trim()).concat(this._lines);
    }
    add(text) {
      this._lines.push(...text.trim().split("\n").map((line) => line.trim()));
    }
    newLine() {
      this._lines.push("");
    }
    format() {
      let spaces = "";
      let previousLine = "";
      return this._lines.map((line) => {
        if (line === "")
          return line;
        if (line.startsWith("}") || line.startsWith("]") || line.includes("});") || line === ");")
          spaces = spaces.substring(this._baseIndent.length);
        const extraSpaces = /^(for|while|if).*\(.*\)$/.test(previousLine) ? this._baseIndent : "";
        previousLine = line;
        line = spaces + extraSpaces + line;
        if (line.endsWith("{") || line.endsWith("[") || line.endsWith("("))
          spaces += this._baseIndent;
        if (line.endsWith("));"))
          spaces = spaces.substring(this._baseIndent.length);
        return this._baseOffset + line;
      }).join("\n");
    }
  }
});

// node_modules/playwright-core/lib/server/recorder/python.js
var require_python = __commonJS((exports) => {
  var formatValue = function(value) {
    if (value === false)
      return "False";
    if (value === true)
      return "True";
    if (value === undefined)
      return "None";
    if (Array.isArray(value))
      return `[${value.map(formatValue).join(", ")}]`;
    if (typeof value === "string")
      return quote(value);
    if (typeof value === "object")
      return JSON.stringify(value);
    return String(value);
  };
  var formatOptions = function(value, hasArguments, asDict) {
    const keys = Object.keys(value).filter((key) => value[key] !== undefined).sort();
    if (!keys.length)
      return "";
    return (hasArguments ? ", " : "") + keys.map((key) => {
      if (asDict)
        return `"${(0, _stringUtils.toSnakeCase)(key)}": ${formatValue(value[key])}`;
      return `${(0, _stringUtils.toSnakeCase)(key)}=${formatValue(value[key])}`;
    }).join(", ");
  };
  var convertContextOptions = function(options) {
    const result = {
      ...options
    };
    if (options.recordHar) {
      result["record_har_path"] = options.recordHar.path;
      result["record_har_content"] = options.recordHar.content;
      result["record_har_mode"] = options.recordHar.mode;
      result["record_har_omit_content"] = options.recordHar.omitContent;
      result["record_har_url_filter"] = options.recordHar.urlFilter;
      delete result.recordHar;
    }
    return result;
  };
  var formatContextOptions = function(options, deviceName, asDict) {
    const device = deviceName && deviceDescriptors[deviceName];
    if (!device)
      return formatOptions(convertContextOptions(options), false, asDict);
    return `**playwright.devices[${quote(deviceName)}]` + formatOptions(convertContextOptions((0, _language.sanitizeDeviceOptions)(device, options)), true, asDict);
  };
  var quote = function(text) {
    return (0, _stringUtils.escapeWithQuotes)(text, "\"");
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PythonLanguageGenerator = undefined;
  var _language = require_language2();
  var _utils = require_utils4();
  var _stringUtils = require_stringUtils();
  var _locatorGenerators = require_locatorGenerators();
  var deviceDescriptors = require_deviceDescriptorsSource();

  class PythonLanguageGenerator {
    constructor(isAsync, isPyTest) {
      this.id = undefined;
      this.groupName = "Python";
      this.name = undefined;
      this.highlighter = "python";
      this._awaitPrefix = undefined;
      this._asyncPrefix = undefined;
      this._isAsync = undefined;
      this._isPyTest = undefined;
      this.id = isPyTest ? "python-pytest" : isAsync ? "python-async" : "python";
      this.name = isPyTest ? "Pytest" : isAsync ? "Library Async" : "Library";
      this._isAsync = isAsync;
      this._isPyTest = isPyTest;
      this._awaitPrefix = isAsync ? "await " : "";
      this._asyncPrefix = isAsync ? "async " : "";
    }
    generateAction(actionInContext) {
      const action = actionInContext.action;
      if (this._isPyTest && (action.name === "openPage" || action.name === "closePage"))
        return "";
      const pageAlias = actionInContext.frame.pageAlias;
      const formatter = new PythonFormatter(4);
      if (action.name === "openPage") {
        formatter.add(`${pageAlias} = ${this._awaitPrefix}context.new_page()`);
        if (action.url && action.url !== "about:blank" && action.url !== "chrome://newtab/")
          formatter.add(`${this._awaitPrefix}${pageAlias}.goto(${quote(action.url)})`);
        return formatter.format();
      }
      let subject;
      if (actionInContext.frame.isMainFrame) {
        subject = pageAlias;
      } else {
        const locators = actionInContext.frame.selectorsChain.map((selector) => `.frame_locator(${quote(selector)})`);
        subject = `${pageAlias}${locators.join("")}`;
      }
      const signals = (0, _language.toSignalMap)(action);
      if (signals.dialog)
        formatter.add(`  ${pageAlias}.once("dialog", lambda dialog: dialog.dismiss())`);
      let code = `${this._awaitPrefix}${this._generateActionCall(subject, action)}`;
      if (signals.popup) {
        code = `${this._asyncPrefix}with ${pageAlias}.expect_popup() as ${signals.popup.popupAlias}_info {
        ${code}
      }
      ${signals.popup.popupAlias} = ${this._awaitPrefix}${signals.popup.popupAlias}_info.value`;
      }
      if (signals.download) {
        code = `${this._asyncPrefix}with ${pageAlias}.expect_download() as download${signals.download.downloadAlias}_info {
        ${code}
      }
      download${signals.download.downloadAlias} = ${this._awaitPrefix}download${signals.download.downloadAlias}_info.value`;
      }
      formatter.add(code);
      return formatter.format();
    }
    _generateActionCall(subject, action) {
      switch (action.name) {
        case "openPage":
          throw Error("Not reached");
        case "closePage":
          return `${subject}.close()`;
        case "click": {
          let method = "click";
          if (action.clickCount === 2)
            method = "dblclick";
          const modifiers = (0, _utils.toModifiers)(action.modifiers);
          const options = {};
          if (action.button !== "left")
            options.button = action.button;
          if (modifiers.length)
            options.modifiers = modifiers;
          if (action.clickCount > 2)
            options.clickCount = action.clickCount;
          if (action.position)
            options.position = action.position;
          const optionsString = formatOptions(options, false);
          return `${subject}.${this._asLocator(action.selector)}.${method}(${optionsString})`;
        }
        case "check":
          return `${subject}.${this._asLocator(action.selector)}.check()`;
        case "uncheck":
          return `${subject}.${this._asLocator(action.selector)}.uncheck()`;
        case "fill":
          return `${subject}.${this._asLocator(action.selector)}.fill(${quote(action.text)})`;
        case "setInputFiles":
          return `${subject}.${this._asLocator(action.selector)}.set_input_files(${formatValue(action.files.length === 1 ? action.files[0] : action.files)})`;
        case "press": {
          const modifiers = (0, _utils.toModifiers)(action.modifiers);
          const shortcut = [...modifiers, action.key].join("+");
          return `${subject}.${this._asLocator(action.selector)}.press(${quote(shortcut)})`;
        }
        case "navigate":
          return `${subject}.goto(${quote(action.url)})`;
        case "select":
          return `${subject}.${this._asLocator(action.selector)}.select_option(${formatValue(action.options.length === 1 ? action.options[0] : action.options)})`;
        case "assertText":
          return `expect(${subject}.${this._asLocator(action.selector)}).${action.substring ? "to_contain_text" : "to_have_text"}(${quote(action.text)})`;
        case "assertChecked":
          return `expect(${subject}.${this._asLocator(action.selector)}).${action.checked ? "to_be_checked()" : "not_to_be_checked()"}`;
        case "assertVisible":
          return `expect(${subject}.${this._asLocator(action.selector)}).to_be_visible()`;
        case "assertValue": {
          const assertion = action.value ? `to_have_value(${quote(action.value)})` : `to_be_empty()`;
          return `expect(${subject}.${this._asLocator(action.selector)}).${assertion};`;
        }
      }
    }
    _asLocator(selector) {
      return (0, _locatorGenerators.asLocator)("python", selector);
    }
    generateHeader(options) {
      const formatter = new PythonFormatter;
      if (this._isPyTest) {
        const contextOptions = formatContextOptions(options.contextOptions, options.deviceName, true);
        const fixture = contextOptions ? `

@pytest.fixture(scope="session")
def browser_context_args(browser_context_args, playwright) {
    return {${contextOptions}}
}
` : "";
        formatter.add(`${options.deviceName ? "import pytest\n" : ""}import re
from playwright.sync_api import Page, expect
${fixture}

def test_example(page: Page) -> None {`);
      } else if (this._isAsync) {
        formatter.add(`
import asyncio
import re
from playwright.async_api import Playwright, async_playwright, expect


async def run(playwright: Playwright) -> None {
    browser = await playwright.${options.browserName}.launch(${formatOptions(options.launchOptions, false)})
    context = await browser.new_context(${formatContextOptions(options.contextOptions, options.deviceName)})`);
      } else {
        formatter.add(`
import re
from playwright.sync_api import Playwright, sync_playwright, expect


def run(playwright: Playwright) -> None {
    browser = playwright.${options.browserName}.launch(${formatOptions(options.launchOptions, false)})
    context = browser.new_context(${formatContextOptions(options.contextOptions, options.deviceName)})`);
      }
      return formatter.format();
    }
    generateFooter(saveStorage) {
      if (this._isPyTest) {
        return "";
      } else if (this._isAsync) {
        const storageStateLine = saveStorage ? `\n    await context.storage_state(path=${quote(saveStorage)})` : "";
        return `\n    # ---------------------${storageStateLine}
    await context.close()
    await browser.close()


async def main() -> None:
    async with async_playwright() as playwright:
        await run(playwright)


asyncio.run(main())
`;
      } else {
        const storageStateLine = saveStorage ? `\n    context.storage_state(path=${quote(saveStorage)})` : "";
        return `\n    # ---------------------${storageStateLine}
    context.close()
    browser.close()


with sync_playwright() as playwright:
    run(playwright)
`;
      }
    }
  }
  exports.PythonLanguageGenerator = PythonLanguageGenerator;

  class PythonFormatter {
    constructor(offset = 0) {
      this._baseIndent = undefined;
      this._baseOffset = undefined;
      this._lines = [];
      this._baseIndent = " ".repeat(4);
      this._baseOffset = " ".repeat(offset);
    }
    prepend(text) {
      this._lines = text.trim().split("\n").map((line) => line.trim()).concat(this._lines);
    }
    add(text) {
      this._lines.push(...text.trim().split("\n").map((line) => line.trim()));
    }
    newLine() {
      this._lines.push("");
    }
    format() {
      let spaces = "";
      const lines = [];
      this._lines.forEach((line) => {
        if (line === "")
          return lines.push(line);
        if (line === "}") {
          spaces = spaces.substring(this._baseIndent.length);
          return;
        }
        line = spaces + line;
        if (line.endsWith("{")) {
          spaces += this._baseIndent;
          line = line.substring(0, line.length - 1).trimEnd() + ":";
        }
        return lines.push(this._baseOffset + line);
      });
      return lines.join("\n");
    }
  }
});

// node_modules/playwright-core/lib/generated/recorderSource.js
var require_recorderSource = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.source = undefined;
  var source = exports.source = "\nvar __commonJS = obj => {\n  let required = false;\n  let result;\n  return function __require() {\n    if (!required) {\n      required = true;\n      let fn;\n      for (const name in obj) { fn = obj[name]; break; }\n      const module = { exports: {} };\n      fn(module.exports, module);\n      result = module.exports;\n    }\n    return result;\n  }\n};\nvar __export = (target, all) => {for (var name in all) target[name] = all[name];};\nvar __toESM = mod => ({ ...mod, 'default': mod });\nvar __toCommonJS = mod => ({ ...mod, __esModule: true });\n\n\n// packages/playwright-core/src/server/injected/recorder/recorder.ts\nvar recorder_exports = {};\n__export(recorder_exports, {\n  PollingRecorder: () => PollingRecorder,\n  Recorder: () => Recorder,\n  default: () => recorder_default\n});\nmodule.exports = __toCommonJS(recorder_exports);\n\n// packages/playwright-core/src/server/injected/recorder/clipPaths.ts\nvar svgJson = { \"tagName\": \"svg\", \"children\": [{ \"tagName\": \"defs\", \"children\": [{ \"tagName\": \"clipPath\", \"attrs\": { \"width\": \"16\", \"height\": \"16\", \"viewBox\": \"0 0 16 16\", \"fill\": \"currentColor\", \"id\": \"icon-gripper\" }, \"children\": [{ \"tagName\": \"path\", \"attrs\": { \"d\": \"M5 3h2v2H5zm0 4h2v2H5zm0 4h2v2H5zm4-8h2v2H9zm0 4h2v2H9zm0 4h2v2H9z\" } }] }, { \"tagName\": \"clipPath\", \"attrs\": { \"width\": \"16\", \"height\": \"16\", \"viewBox\": \"0 0 16 16\", \"fill\": \"currentColor\", \"id\": \"icon-circle-large-filled\" }, \"children\": [{ \"tagName\": \"path\", \"attrs\": { \"d\": \"M8 1a6.8 6.8 0 0 1 1.86.253 6.899 6.899 0 0 1 3.083 1.805 6.903 6.903 0 0 1 1.804 3.083C14.916 6.738 15 7.357 15 8s-.084 1.262-.253 1.86a6.9 6.9 0 0 1-.704 1.674 7.157 7.157 0 0 1-2.516 2.509 6.966 6.966 0 0 1-1.668.71A6.984 6.984 0 0 1 8 15a6.984 6.984 0 0 1-1.86-.246 7.098 7.098 0 0 1-1.674-.711 7.3 7.3 0 0 1-1.415-1.094 7.295 7.295 0 0 1-1.094-1.415 7.098 7.098 0 0 1-.71-1.675A6.985 6.985 0 0 1 1 8c0-.643.082-1.262.246-1.86a6.968 6.968 0 0 1 .711-1.667 7.156 7.156 0 0 1 2.509-2.516 6.895 6.895 0 0 1 1.675-.704A6.808 6.808 0 0 1 8 1z\" } }] }, { \"tagName\": \"clipPath\", \"attrs\": { \"width\": \"16\", \"height\": \"16\", \"viewBox\": \"0 0 16 16\", \"fill\": \"currentColor\", \"id\": \"icon-inspect\" }, \"children\": [{ \"tagName\": \"path\", \"attrs\": { \"fill-rule\": \"evenodd\", \"clip-rule\": \"evenodd\", \"d\": \"M1 3l1-1h12l1 1v6h-1V3H2v8h5v1H2l-1-1V3zm14.707 9.707L9 6v9.414l2.707-2.707h4zM10 13V8.414l3.293 3.293h-2L10 13z\" } }] }, { \"tagName\": \"clipPath\", \"attrs\": { \"width\": \"16\", \"height\": \"16\", \"viewBox\": \"0 0 16 16\", \"fill\": \"currentColor\", \"id\": \"icon-whole-word\" }, \"children\": [{ \"tagName\": \"path\", \"attrs\": { \"fill-rule\": \"evenodd\", \"clip-rule\": \"evenodd\", \"d\": \"M0 11H1V13H15V11H16V14H15H1H0V11Z\" } }, { \"tagName\": \"path\", \"attrs\": { \"d\": \"M6.84048 11H5.95963V10.1406H5.93814C5.555 10.7995 4.99104 11.1289 4.24625 11.1289C3.69839 11.1289 3.26871 10.9839 2.95718 10.6938C2.64924 10.4038 2.49527 10.0189 2.49527 9.53906C2.49527 8.51139 3.10041 7.91341 4.3107 7.74512L5.95963 7.51416C5.95963 6.57959 5.58186 6.1123 4.82632 6.1123C4.16389 6.1123 3.56591 6.33789 3.03238 6.78906V5.88672C3.57307 5.54297 4.19612 5.37109 4.90152 5.37109C6.19416 5.37109 6.84048 6.05501 6.84048 7.42285V11ZM5.95963 8.21777L4.63297 8.40039C4.22476 8.45768 3.91682 8.55973 3.70914 8.70654C3.50145 8.84977 3.39761 9.10579 3.39761 9.47461C3.39761 9.74316 3.4925 9.96338 3.68228 10.1353C3.87564 10.3035 4.13166 10.3877 4.45035 10.3877C4.8872 10.3877 5.24706 10.2355 5.52994 9.93115C5.8164 9.62321 5.95963 9.2347 5.95963 8.76562V8.21777Z\" } }, { \"tagName\": \"path\", \"attrs\": { \"d\": \"M9.3475 10.2051H9.32601V11H8.44515V2.85742H9.32601V6.4668H9.3475C9.78076 5.73633 10.4146 5.37109 11.2489 5.37109C11.9543 5.37109 12.5057 5.61816 12.9032 6.1123C13.3042 6.60286 13.5047 7.26172 13.5047 8.08887C13.5047 9.00911 13.2809 9.74674 12.8333 10.3018C12.3857 10.8532 11.7734 11.1289 10.9964 11.1289C10.2695 11.1289 9.71989 10.821 9.3475 10.2051ZM9.32601 7.98682V8.75488C9.32601 9.20964 9.47282 9.59635 9.76644 9.91504C10.0636 10.2301 10.4396 10.3877 10.8944 10.3877C11.4279 10.3877 11.8451 10.1836 12.1458 9.77539C12.4502 9.36719 12.6024 8.79964 12.6024 8.07275C12.6024 7.46045 12.4609 6.98063 12.1781 6.6333C11.8952 6.28597 11.512 6.1123 11.0286 6.1123C10.5166 6.1123 10.1048 6.29134 9.7933 6.64941C9.48177 7.00391 9.32601 7.44971 9.32601 7.98682Z\" } }] }, { \"tagName\": \"clipPath\", \"attrs\": { \"width\": \"16\", \"height\": \"16\", \"viewBox\": \"0 0 16 16\", \"fill\": \"currentColor\", \"id\": \"icon-eye\" }, \"children\": [{ \"tagName\": \"path\", \"attrs\": { \"d\": \"M7.99993 6.00316C9.47266 6.00316 10.6666 7.19708 10.6666 8.66981C10.6666 10.1426 9.47266 11.3365 7.99993 11.3365C6.52715 11.3365 5.33324 10.1426 5.33324 8.66981C5.33324 7.19708 6.52715 6.00316 7.99993 6.00316ZM7.99993 7.00315C7.07946 7.00315 6.33324 7.74935 6.33324 8.66981C6.33324 9.59028 7.07946 10.3365 7.99993 10.3365C8.9204 10.3365 9.6666 9.59028 9.6666 8.66981C9.6666 7.74935 8.9204 7.00315 7.99993 7.00315ZM7.99993 3.66675C11.0756 3.66675 13.7307 5.76675 14.4673 8.70968C14.5344 8.97755 14.3716 9.24908 14.1037 9.31615C13.8358 9.38315 13.5643 9.22041 13.4973 8.95248C12.8713 6.45205 10.6141 4.66675 7.99993 4.66675C5.38454 4.66675 3.12664 6.45359 2.50182 8.95555C2.43491 9.22341 2.16348 9.38635 1.89557 9.31948C1.62766 9.25255 1.46471 8.98115 1.53162 8.71321C2.26701 5.76856 4.9229 3.66675 7.99993 3.66675Z\" } }] }, { \"tagName\": \"clipPath\", \"attrs\": { \"width\": \"16\", \"height\": \"16\", \"viewBox\": \"0 0 16 16\", \"fill\": \"currentColor\", \"id\": \"icon-symbol-constant\" }, \"children\": [{ \"tagName\": \"path\", \"attrs\": { \"fill-rule\": \"evenodd\", \"clip-rule\": \"evenodd\", \"d\": \"M4 6h8v1H4V6zm8 3H4v1h8V9z\" } }, { \"tagName\": \"path\", \"attrs\": { \"fill-rule\": \"evenodd\", \"clip-rule\": \"evenodd\", \"d\": \"M1 4l1-1h12l1 1v8l-1 1H2l-1-1V4zm1 0v8h12V4H2z\" } }] }, { \"tagName\": \"clipPath\", \"attrs\": { \"width\": \"16\", \"height\": \"16\", \"viewBox\": \"0 0 16 16\", \"fill\": \"currentColor\", \"id\": \"icon-check\" }, \"children\": [{ \"tagName\": \"path\", \"attrs\": { \"fill-rule\": \"evenodd\", \"clip-rule\": \"evenodd\", \"d\": \"M14.431 3.323l-8.47 10-.79-.036-3.35-4.77.818-.574 2.978 4.24 8.051-9.506.764.646z\" } }] }, { \"tagName\": \"clipPath\", \"attrs\": { \"width\": \"16\", \"height\": \"16\", \"viewBox\": \"0 0 16 16\", \"fill\": \"currentColor\", \"id\": \"icon-close\" }, \"children\": [{ \"tagName\": \"path\", \"attrs\": { \"fill-rule\": \"evenodd\", \"clip-rule\": \"evenodd\", \"d\": \"M8 8.707l3.646 3.647.708-.707L8.707 8l3.647-3.646-.707-.708L8 7.293 4.354 3.646l-.707.708L7.293 8l-3.646 3.646.707.708L8 8.707z\" } }] }, { \"tagName\": \"clipPath\", \"attrs\": { \"width\": \"16\", \"height\": \"16\", \"viewBox\": \"0 0 16 16\", \"fill\": \"currentColor\", \"id\": \"icon-pass\" }, \"children\": [{ \"tagName\": \"path\", \"attrs\": { \"d\": \"M6.27 10.87h.71l4.56-4.56-.71-.71-4.2 4.21-1.92-1.92L4 8.6l2.27 2.27z\" } }, { \"tagName\": \"path\", \"attrs\": { \"fill-rule\": \"evenodd\", \"clip-rule\": \"evenodd\", \"d\": \"M8.6 1c1.6.1 3.1.9 4.2 2 1.3 1.4 2 3.1 2 5.1 0 1.6-.6 3.1-1.6 4.4-1 1.2-2.4 2.1-4 2.4-1.6.3-3.2.1-4.6-.7-1.4-.8-2.5-2-3.1-3.5C.9 9.2.8 7.5 1.3 6c.5-1.6 1.4-2.9 2.8-3.8C5.4 1.3 7 .9 8.6 1zm.5 12.9c1.3-.3 2.5-1 3.4-2.1.8-1.1 1.3-2.4 1.2-3.8 0-1.6-.6-3.2-1.7-4.3-1-1-2.2-1.6-3.6-1.7-1.3-.1-2.7.2-3.8 1-1.1.8-1.9 1.9-2.3 3.3-.4 1.3-.4 2.7.2 4 .6 1.3 1.5 2.3 2.7 3 1.2.7 2.6.9 3.9.6z\" } }] }] }] };\nvar clipPaths_default = svgJson;\n\n// packages/playwright-core/src/server/injected/recorder/recorder.ts\nvar NoneTool = class {\n  cursor() {\n    return \"default\";\n  }\n};\nvar InspectTool = class {\n  constructor(recorder, assertVisibility) {\n    this._hoveredModel = null;\n    this._hoveredElement = null;\n    this._hoveredSelectors = null;\n    this._recorder = recorder;\n    this._assertVisibility = assertVisibility;\n  }\n  cursor() {\n    return \"pointer\";\n  }\n  cleanup() {\n    this._hoveredModel = null;\n    this._hoveredElement = null;\n    this._hoveredSelectors = null;\n  }\n  onClick(event) {\n    var _a;\n    consumeEvent(event);\n    if (event.button !== 0)\n      return;\n    if ((_a = this._hoveredModel) == null ? void 0 : _a.selector)\n      this._commit(this._hoveredModel.selector);\n  }\n  onContextMenu(event) {\n    if (this._hoveredModel && !this._hoveredModel.tooltipListItemSelected && this._hoveredSelectors && this._hoveredSelectors.length > 1) {\n      consumeEvent(event);\n      const selectors = this._hoveredSelectors;\n      this._hoveredModel.tooltipFooter = void 0;\n      this._hoveredModel.tooltipList = selectors.map((selector) => this._recorder.injectedScript.utils.asLocator(this._recorder.state.language, selector));\n      this._hoveredModel.tooltipListItemSelected = (index) => {\n        if (index === void 0)\n          this._reset(true);\n        else\n          this._commit(selectors[index]);\n      };\n      this._recorder.updateHighlight(this._hoveredModel, true);\n    }\n  }\n  onPointerDown(event) {\n    consumeEvent(event);\n  }\n  onPointerUp(event) {\n    consumeEvent(event);\n  }\n  onMouseDown(event) {\n    consumeEvent(event);\n  }\n  onMouseUp(event) {\n    consumeEvent(event);\n  }\n  onMouseMove(event) {\n    var _a;\n    consumeEvent(event);\n    let target = this._recorder.deepEventTarget(event);\n    if (!target.isConnected)\n      target = null;\n    if (this._hoveredElement === target)\n      return;\n    this._hoveredElement = target;\n    let model = null;\n    let selectors = [];\n    if (this._hoveredElement) {\n      const generated = this._recorder.injectedScript.generateSelector(this._hoveredElement, { testIdAttributeName: this._recorder.state.testIdAttributeName, multiple: false });\n      selectors = generated.selectors;\n      model = {\n        selector: generated.selector,\n        elements: generated.elements,\n        tooltipText: this._recorder.injectedScript.utils.asLocator(this._recorder.state.language, generated.selector),\n        tooltipFooter: selectors.length > 1 ? `Click to select, right-click for more options` : void 0,\n        color: this._assertVisibility ? \"#8acae480\" : void 0\n      };\n    }\n    if (((_a = this._hoveredModel) == null ? void 0 : _a.selector) === (model == null ? void 0 : model.selector))\n      return;\n    this._hoveredModel = model;\n    this._hoveredSelectors = selectors;\n    this._recorder.updateHighlight(model, true);\n  }\n  onMouseEnter(event) {\n    consumeEvent(event);\n  }\n  onMouseLeave(event) {\n    consumeEvent(event);\n    const window = this._recorder.injectedScript.window;\n    if (window.top !== window && this._recorder.deepEventTarget(event).nodeType === Node.DOCUMENT_NODE)\n      this._reset(true);\n  }\n  onKeyDown(event) {\n    var _a, _b, _c;\n    consumeEvent(event);\n    if (event.key === \"Escape\") {\n      if ((_a = this._hoveredModel) == null ? void 0 : _a.tooltipListItemSelected)\n        this._reset(true);\n      else if (this._assertVisibility)\n        (_c = (_b = this._recorder.delegate).setMode) == null ? void 0 : _c.call(_b, \"recording\");\n    }\n  }\n  onKeyUp(event) {\n    consumeEvent(event);\n  }\n  onScroll(event) {\n    this._reset(false);\n  }\n  _commit(selector) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    if (this._assertVisibility) {\n      (_b = (_a = this._recorder.delegate).recordAction) == null ? void 0 : _b.call(_a, {\n        name: \"assertVisible\",\n        selector,\n        signals: []\n      });\n      (_d = (_c = this._recorder.delegate).setMode) == null ? void 0 : _d.call(_c, \"recording\");\n      (_e = this._recorder.overlay) == null ? void 0 : _e.flashToolSucceeded(\"assertingVisibility\");\n    } else {\n      (_g = (_f = this._recorder.delegate).setSelector) == null ? void 0 : _g.call(_f, selector);\n    }\n  }\n  _reset(userGesture) {\n    this._hoveredElement = null;\n    this._hoveredModel = null;\n    this._hoveredSelectors = null;\n    this._recorder.updateHighlight(null, userGesture);\n  }\n};\nvar RecordActionTool = class {\n  constructor(recorder) {\n    this._performingAction = false;\n    this._hoveredModel = null;\n    this._hoveredElement = null;\n    this._activeModel = null;\n    this._expectProgrammaticKeyUp = false;\n    this._recorder = recorder;\n  }\n  cursor() {\n    return \"pointer\";\n  }\n  cleanup() {\n    this._hoveredModel = null;\n    this._hoveredElement = null;\n    this._activeModel = null;\n    this._expectProgrammaticKeyUp = false;\n  }\n  onClick(event) {\n    if (isRangeInput(this._hoveredElement))\n      return;\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (this._actionInProgress(event))\n      return;\n    if (this._consumedDueToNoModel(event, this._hoveredModel))\n      return;\n    const checkbox = asCheckbox(this._recorder.deepEventTarget(event));\n    if (checkbox) {\n      this._performAction({\n        name: checkbox.checked ? \"check\" : \"uncheck\",\n        selector: this._hoveredModel.selector,\n        signals: []\n      });\n      return;\n    }\n    this._performAction({\n      name: \"click\",\n      selector: this._hoveredModel.selector,\n      position: positionForEvent(event),\n      signals: [],\n      button: buttonForEvent(event),\n      modifiers: modifiersForEvent(event),\n      clickCount: event.detail\n    });\n  }\n  onPointerDown(event) {\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (!this._performingAction)\n      consumeEvent(event);\n  }\n  onPointerUp(event) {\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (!this._performingAction)\n      consumeEvent(event);\n  }\n  onMouseDown(event) {\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (!this._performingAction)\n      consumeEvent(event);\n    this._activeModel = this._hoveredModel;\n  }\n  onMouseUp(event) {\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (!this._performingAction)\n      consumeEvent(event);\n  }\n  onMouseMove(event) {\n    const target = this._recorder.deepEventTarget(event);\n    if (this._hoveredElement === target)\n      return;\n    this._hoveredElement = target;\n    this._updateModelForHoveredElement();\n  }\n  onMouseLeave(event) {\n    const window = this._recorder.injectedScript.window;\n    if (window.top !== window && this._recorder.deepEventTarget(event).nodeType === Node.DOCUMENT_NODE) {\n      this._hoveredElement = null;\n      this._updateModelForHoveredElement();\n    }\n  }\n  onFocus(event) {\n    this._onFocus(true);\n  }\n  onInput(event) {\n    var _a, _b, _c, _d, _e, _f;\n    const target = this._recorder.deepEventTarget(event);\n    if (target.nodeName === \"INPUT\" && target.type.toLowerCase() === \"file\") {\n      (_b = (_a = this._recorder.delegate).recordAction) == null ? void 0 : _b.call(_a, {\n        name: \"setInputFiles\",\n        selector: this._activeModel.selector,\n        signals: [],\n        files: [...target.files || []].map((file) => file.name)\n      });\n      return;\n    }\n    if (isRangeInput(target)) {\n      (_d = (_c = this._recorder.delegate).recordAction) == null ? void 0 : _d.call(_c, {\n        name: \"fill\",\n        // must use hoveredModel instead of activeModel for it to work in webkit\n        selector: this._hoveredModel.selector,\n        signals: [],\n        text: target.value\n      });\n      return;\n    }\n    if ([\"INPUT\", \"TEXTAREA\"].includes(target.nodeName) || target.isContentEditable) {\n      if (target.nodeName === \"INPUT\" && [\"checkbox\", \"radio\"].includes(target.type.toLowerCase())) {\n        return;\n      }\n      if (this._consumedDueWrongTarget(event))\n        return;\n      (_f = (_e = this._recorder.delegate).recordAction) == null ? void 0 : _f.call(_e, {\n        name: \"fill\",\n        selector: this._activeModel.selector,\n        signals: [],\n        text: target.isContentEditable ? target.innerText : target.value\n      });\n    }\n    if (target.nodeName === \"SELECT\") {\n      const selectElement = target;\n      if (this._actionInProgress(event))\n        return;\n      this._performAction({\n        name: \"select\",\n        selector: this._hoveredModel.selector,\n        options: [...selectElement.selectedOptions].map((option) => option.value),\n        signals: []\n      });\n    }\n  }\n  onKeyDown(event) {\n    if (!this._shouldGenerateKeyPressFor(event))\n      return;\n    if (this._actionInProgress(event)) {\n      this._expectProgrammaticKeyUp = true;\n      return;\n    }\n    if (this._consumedDueWrongTarget(event))\n      return;\n    if (event.key === \" \") {\n      const checkbox = asCheckbox(this._recorder.deepEventTarget(event));\n      if (checkbox) {\n        this._performAction({\n          name: checkbox.checked ? \"uncheck\" : \"check\",\n          selector: this._activeModel.selector,\n          signals: []\n        });\n        return;\n      }\n    }\n    this._performAction({\n      name: \"press\",\n      selector: this._activeModel.selector,\n      signals: [],\n      key: event.key,\n      modifiers: modifiersForEvent(event)\n    });\n  }\n  onKeyUp(event) {\n    if (!this._shouldGenerateKeyPressFor(event))\n      return;\n    if (!this._expectProgrammaticKeyUp) {\n      consumeEvent(event);\n      return;\n    }\n    this._expectProgrammaticKeyUp = false;\n  }\n  onScroll(event) {\n    this._hoveredModel = null;\n    this._hoveredElement = null;\n    this._recorder.updateHighlight(null, false);\n  }\n  _onFocus(userGesture) {\n    const activeElement = deepActiveElement(this._recorder.document);\n    if (userGesture && activeElement === this._recorder.document.body)\n      return;\n    const result = activeElement ? this._recorder.injectedScript.generateSelector(activeElement, { testIdAttributeName: this._recorder.state.testIdAttributeName }) : null;\n    this._activeModel = result && result.selector ? result : null;\n    if (userGesture)\n      this._hoveredElement = activeElement;\n    this._updateModelForHoveredElement();\n  }\n  _shouldIgnoreMouseEvent(event) {\n    const target = this._recorder.deepEventTarget(event);\n    const nodeName = target.nodeName;\n    if (nodeName === \"SELECT\" || nodeName === \"OPTION\")\n      return true;\n    if (nodeName === \"INPUT\" && [\"date\", \"range\"].includes(target.type))\n      return true;\n    return false;\n  }\n  _actionInProgress(event) {\n    if (this._performingAction)\n      return true;\n    consumeEvent(event);\n    return false;\n  }\n  _consumedDueToNoModel(event, model) {\n    if (model)\n      return false;\n    consumeEvent(event);\n    return true;\n  }\n  _consumedDueWrongTarget(event) {\n    if (this._activeModel && this._activeModel.elements[0] === this._recorder.deepEventTarget(event))\n      return false;\n    consumeEvent(event);\n    return true;\n  }\n  async _performAction(action) {\n    var _a, _b;\n    this._hoveredElement = null;\n    this._hoveredModel = null;\n    this._activeModel = null;\n    this._recorder.updateHighlight(null, false);\n    this._performingAction = true;\n    await ((_b = (_a = this._recorder.delegate).performAction) == null ? void 0 : _b.call(_a, action).catch(() => {\n    }));\n    this._performingAction = false;\n    this._onFocus(false);\n    if (this._recorder.injectedScript.isUnderTest) {\n      console.error(\"Action performed for test: \" + JSON.stringify({\n        // eslint-disable-line no-console\n        hovered: this._hoveredModel ? this._hoveredModel.selector : null,\n        active: this._activeModel ? this._activeModel.selector : null\n      }));\n    }\n  }\n  _shouldGenerateKeyPressFor(event) {\n    if (event.key === \"Enter\" && (this._recorder.deepEventTarget(event).nodeName === \"TEXTAREA\" || this._recorder.deepEventTarget(event).isContentEditable))\n      return false;\n    if ([\"Backspace\", \"Delete\", \"AltGraph\"].includes(event.key))\n      return false;\n    if (event.key === \"@\" && event.code === \"KeyL\")\n      return false;\n    if (navigator.platform.includes(\"Mac\")) {\n      if (event.key === \"v\" && event.metaKey)\n        return false;\n    } else {\n      if (event.key === \"v\" && event.ctrlKey)\n        return false;\n      if (event.key === \"Insert\" && event.shiftKey)\n        return false;\n    }\n    if ([\"Shift\", \"Control\", \"Meta\", \"Alt\", \"Process\"].includes(event.key))\n      return false;\n    const hasModifier = event.ctrlKey || event.altKey || event.metaKey;\n    if (event.key.length === 1 && !hasModifier)\n      return !!asCheckbox(this._recorder.deepEventTarget(event));\n    return true;\n  }\n  _updateModelForHoveredElement() {\n    if (!this._hoveredElement || !this._hoveredElement.isConnected) {\n      this._hoveredModel = null;\n      this._hoveredElement = null;\n      this._recorder.updateHighlight(null, true);\n      return;\n    }\n    const { selector, elements } = this._recorder.injectedScript.generateSelector(this._hoveredElement, { testIdAttributeName: this._recorder.state.testIdAttributeName });\n    if (this._hoveredModel && this._hoveredModel.selector === selector)\n      return;\n    this._hoveredModel = selector ? { selector, elements, color: \"#dc6f6f7f\" } : null;\n    this._recorder.updateHighlight(this._hoveredModel, true);\n  }\n};\nvar TextAssertionTool = class {\n  constructor(recorder, kind) {\n    this._hoverHighlight = null;\n    this._action = null;\n    this._dialogElement = null;\n    this._textCache = /* @__PURE__ */ new Map();\n    this._recorder = recorder;\n    this._kind = kind;\n    this._acceptButton = this._recorder.document.createElement(\"x-pw-tool-item\");\n    this._acceptButton.title = \"Accept\";\n    this._acceptButton.classList.add(\"accept\");\n    this._acceptButton.appendChild(this._recorder.document.createElement(\"x-div\"));\n    this._acceptButton.addEventListener(\"click\", () => this._commit());\n    this._cancelButton = this._recorder.document.createElement(\"x-pw-tool-item\");\n    this._cancelButton.title = \"Close\";\n    this._cancelButton.classList.add(\"cancel\");\n    this._cancelButton.appendChild(this._recorder.document.createElement(\"x-div\"));\n    this._cancelButton.addEventListener(\"click\", () => this._closeDialog());\n  }\n  cursor() {\n    return \"pointer\";\n  }\n  cleanup() {\n    this._closeDialog();\n    this._hoverHighlight = null;\n  }\n  onClick(event) {\n    consumeEvent(event);\n    if (this._kind === \"value\") {\n      this._commitAssertValue();\n    } else {\n      if (!this._dialogElement)\n        this._showDialog();\n    }\n  }\n  onMouseDown(event) {\n    const target = this._recorder.deepEventTarget(event);\n    if (this._elementHasValue(target))\n      event.preventDefault();\n  }\n  onPointerUp(event) {\n    var _a;\n    const target = (_a = this._hoverHighlight) == null ? void 0 : _a.elements[0];\n    if (this._kind === \"value\" && target && target.nodeName === \"INPUT\" && target.disabled) {\n      this._commitAssertValue();\n    }\n  }\n  onMouseMove(event) {\n    var _a;\n    if (this._dialogElement)\n      return;\n    const target = this._recorder.deepEventTarget(event);\n    if (((_a = this._hoverHighlight) == null ? void 0 : _a.elements[0]) === target)\n      return;\n    if (this._kind === \"text\")\n      this._hoverHighlight = this._recorder.injectedScript.utils.elementText(this._textCache, target).full ? { elements: [target], selector: \"\" } : null;\n    else\n      this._hoverHighlight = this._elementHasValue(target) ? this._recorder.injectedScript.generateSelector(target, { testIdAttributeName: this._recorder.state.testIdAttributeName }) : null;\n    if (this._hoverHighlight)\n      this._hoverHighlight.color = \"#8acae480\";\n    this._recorder.updateHighlight(this._hoverHighlight, true);\n  }\n  onKeyDown(event) {\n    var _a, _b;\n    if (event.key === \"Escape\")\n      (_b = (_a = this._recorder.delegate).setMode) == null ? void 0 : _b.call(_a, \"recording\");\n    consumeEvent(event);\n  }\n  onScroll(event) {\n    this._recorder.updateHighlight(this._hoverHighlight, false);\n  }\n  _elementHasValue(element) {\n    return element.nodeName === \"TEXTAREA\" || element.nodeName === \"SELECT\" || element.nodeName === \"INPUT\" && ![\"button\", \"image\", \"reset\", \"submit\"].includes(element.type);\n  }\n  _generateAction() {\n    var _a;\n    this._textCache.clear();\n    const target = (_a = this._hoverHighlight) == null ? void 0 : _a.elements[0];\n    if (!target)\n      return null;\n    if (this._kind === \"value\") {\n      if (!this._elementHasValue(target))\n        return null;\n      const { selector } = this._recorder.injectedScript.generateSelector(target, { testIdAttributeName: this._recorder.state.testIdAttributeName });\n      if (target.nodeName === \"INPUT\" && [\"checkbox\", \"radio\"].includes(target.type.toLowerCase())) {\n        return {\n          name: \"assertChecked\",\n          selector,\n          signals: [],\n          // Interestingly, inputElement.checked is reversed inside this event handler.\n          checked: !target.checked\n        };\n      } else {\n        return {\n          name: \"assertValue\",\n          selector,\n          signals: [],\n          value: target.value\n        };\n      }\n    } else {\n      this._hoverHighlight = this._recorder.injectedScript.generateSelector(target, { testIdAttributeName: this._recorder.state.testIdAttributeName, forTextExpect: true });\n      this._hoverHighlight.color = \"#8acae480\";\n      this._recorder.updateHighlight(this._hoverHighlight, true);\n      return {\n        name: \"assertText\",\n        selector: this._hoverHighlight.selector,\n        signals: [],\n        text: this._recorder.injectedScript.utils.elementText(this._textCache, target).normalized,\n        substring: true\n      };\n    }\n  }\n  _renderValue(action) {\n    if ((action == null ? void 0 : action.name) === \"assertText\")\n      return this._recorder.injectedScript.utils.normalizeWhiteSpace(action.text);\n    if ((action == null ? void 0 : action.name) === \"assertChecked\")\n      return String(action.checked);\n    if ((action == null ? void 0 : action.name) === \"assertValue\")\n      return action.value;\n    return \"\";\n  }\n  _commit() {\n    var _a, _b, _c, _d;\n    if (!this._action || !this._dialogElement)\n      return;\n    this._closeDialog();\n    (_b = (_a = this._recorder.delegate).recordAction) == null ? void 0 : _b.call(_a, this._action);\n    (_d = (_c = this._recorder.delegate).setMode) == null ? void 0 : _d.call(_c, \"recording\");\n  }\n  _showDialog() {\n    var _a;\n    if (!((_a = this._hoverHighlight) == null ? void 0 : _a.elements[0]))\n      return;\n    this._action = this._generateAction();\n    if (!this._action || this._action.name !== \"assertText\")\n      return;\n    this._dialogElement = this._recorder.document.createElement(\"x-pw-dialog\");\n    this._keyboardListener = (event) => {\n      if (event.key === \"Escape\") {\n        this._closeDialog();\n        return;\n      }\n      if (event.key === \"Enter\" && (event.ctrlKey || event.metaKey)) {\n        if (this._dialogElement)\n          this._commit();\n        return;\n      }\n    };\n    this._recorder.document.addEventListener(\"keydown\", this._keyboardListener, true);\n    const toolbarElement = this._recorder.document.createElement(\"x-pw-tools-list\");\n    const labelElement = this._recorder.document.createElement(\"label\");\n    labelElement.textContent = \"Assert that element contains text\";\n    toolbarElement.appendChild(labelElement);\n    toolbarElement.appendChild(this._recorder.document.createElement(\"x-spacer\"));\n    toolbarElement.appendChild(this._acceptButton);\n    toolbarElement.appendChild(this._cancelButton);\n    this._dialogElement.appendChild(toolbarElement);\n    const bodyElement = this._recorder.document.createElement(\"x-pw-dialog-body\");\n    const action = this._action;\n    const textElement = this._recorder.document.createElement(\"textarea\");\n    textElement.setAttribute(\"spellcheck\", \"false\");\n    textElement.value = this._renderValue(this._action);\n    textElement.classList.add(\"text-editor\");\n    const updateAndValidate = () => {\n      var _a2;\n      const newValue = this._recorder.injectedScript.utils.normalizeWhiteSpace(textElement.value);\n      const target = (_a2 = this._hoverHighlight) == null ? void 0 : _a2.elements[0];\n      if (!target)\n        return;\n      action.text = newValue;\n      const targetText = this._recorder.injectedScript.utils.elementText(this._textCache, target).normalized;\n      const matches = newValue && targetText.includes(newValue);\n      textElement.classList.toggle(\"does-not-match\", !matches);\n    };\n    textElement.addEventListener(\"input\", updateAndValidate);\n    bodyElement.appendChild(textElement);\n    this._dialogElement.appendChild(bodyElement);\n    this._recorder.highlight.appendChild(this._dialogElement);\n    const position = this._recorder.highlight.tooltipPosition(this._recorder.highlight.firstBox(), this._dialogElement);\n    this._dialogElement.style.top = position.anchorTop + \"px\";\n    this._dialogElement.style.left = position.anchorLeft + \"px\";\n    textElement.focus();\n  }\n  _closeDialog() {\n    if (!this._dialogElement)\n      return;\n    this._dialogElement.remove();\n    this._recorder.document.removeEventListener(\"keydown\", this._keyboardListener);\n    this._dialogElement = null;\n  }\n  _commitAssertValue() {\n    var _a, _b, _c, _d, _e;\n    if (this._kind !== \"value\")\n      return;\n    const action = this._generateAction();\n    if (!action)\n      return;\n    (_b = (_a = this._recorder.delegate).recordAction) == null ? void 0 : _b.call(_a, action);\n    (_d = (_c = this._recorder.delegate).setMode) == null ? void 0 : _d.call(_c, \"recording\");\n    (_e = this._recorder.overlay) == null ? void 0 : _e.flashToolSucceeded(\"assertingValue\");\n  }\n};\nvar Overlay = class {\n  constructor(recorder) {\n    this._listeners = [];\n    this._offsetX = 0;\n    this._measure = { width: 0, height: 0 };\n    this._recorder = recorder;\n    const document = this._recorder.document;\n    this._overlayElement = document.createElement(\"x-pw-overlay\");\n    this._overlayElement.appendChild(createSvgElement(this._recorder.document, clipPaths_default));\n    const toolsListElement = document.createElement(\"x-pw-tools-list\");\n    this._overlayElement.appendChild(toolsListElement);\n    this._dragHandle = document.createElement(\"x-pw-tool-gripper\");\n    this._dragHandle.appendChild(document.createElement(\"x-div\"));\n    toolsListElement.appendChild(this._dragHandle);\n    this._recordToggle = this._recorder.document.createElement(\"x-pw-tool-item\");\n    this._recordToggle.title = \"Record\";\n    this._recordToggle.classList.add(\"record\");\n    this._recordToggle.appendChild(this._recorder.document.createElement(\"x-div\"));\n    toolsListElement.appendChild(this._recordToggle);\n    this._pickLocatorToggle = this._recorder.document.createElement(\"x-pw-tool-item\");\n    this._pickLocatorToggle.title = \"Pick locator\";\n    this._pickLocatorToggle.classList.add(\"pick-locator\");\n    this._pickLocatorToggle.appendChild(this._recorder.document.createElement(\"x-div\"));\n    toolsListElement.appendChild(this._pickLocatorToggle);\n    this._assertVisibilityToggle = this._recorder.document.createElement(\"x-pw-tool-item\");\n    this._assertVisibilityToggle.title = \"Assert visibility\";\n    this._assertVisibilityToggle.classList.add(\"visibility\");\n    this._assertVisibilityToggle.appendChild(this._recorder.document.createElement(\"x-div\"));\n    toolsListElement.appendChild(this._assertVisibilityToggle);\n    this._assertTextToggle = this._recorder.document.createElement(\"x-pw-tool-item\");\n    this._assertTextToggle.title = \"Assert text\";\n    this._assertTextToggle.classList.add(\"text\");\n    this._assertTextToggle.appendChild(this._recorder.document.createElement(\"x-div\"));\n    toolsListElement.appendChild(this._assertTextToggle);\n    this._assertValuesToggle = this._recorder.document.createElement(\"x-pw-tool-item\");\n    this._assertValuesToggle.title = \"Assert value\";\n    this._assertValuesToggle.classList.add(\"value\");\n    this._assertValuesToggle.appendChild(this._recorder.document.createElement(\"x-div\"));\n    toolsListElement.appendChild(this._assertValuesToggle);\n    this._updateVisualPosition();\n    this._refreshListeners();\n  }\n  _refreshListeners() {\n    removeEventListeners(this._listeners);\n    this._listeners = [\n      addEventListener(this._dragHandle, \"mousedown\", (event) => {\n        this._dragState = { offsetX: this._offsetX, dragStart: { x: event.clientX, y: 0 } };\n      }),\n      addEventListener(this._recordToggle, \"click\", () => {\n        var _a, _b;\n        (_b = (_a = this._recorder.delegate).setMode) == null ? void 0 : _b.call(_a, this._recorder.state.mode === \"none\" || this._recorder.state.mode === \"standby\" || this._recorder.state.mode === \"inspecting\" ? \"recording\" : \"standby\");\n      }),\n      addEventListener(this._pickLocatorToggle, \"click\", () => {\n        var _a, _b;\n        const newMode = {\n          \"inspecting\": \"standby\",\n          \"none\": \"inspecting\",\n          \"standby\": \"inspecting\",\n          \"recording\": \"recording-inspecting\",\n          \"recording-inspecting\": \"recording\",\n          \"assertingText\": \"recording-inspecting\",\n          \"assertingVisibility\": \"recording-inspecting\",\n          \"assertingValue\": \"recording-inspecting\"\n        };\n        (_b = (_a = this._recorder.delegate).setMode) == null ? void 0 : _b.call(_a, newMode[this._recorder.state.mode]);\n      }),\n      addEventListener(this._assertVisibilityToggle, \"click\", () => {\n        var _a, _b;\n        if (!this._assertVisibilityToggle.classList.contains(\"disabled\"))\n          (_b = (_a = this._recorder.delegate).setMode) == null ? void 0 : _b.call(_a, this._recorder.state.mode === \"assertingVisibility\" ? \"recording\" : \"assertingVisibility\");\n      }),\n      addEventListener(this._assertTextToggle, \"click\", () => {\n        var _a, _b;\n        if (!this._assertTextToggle.classList.contains(\"disabled\"))\n          (_b = (_a = this._recorder.delegate).setMode) == null ? void 0 : _b.call(_a, this._recorder.state.mode === \"assertingText\" ? \"recording\" : \"assertingText\");\n      }),\n      addEventListener(this._assertValuesToggle, \"click\", () => {\n        var _a, _b;\n        if (!this._assertValuesToggle.classList.contains(\"disabled\"))\n          (_b = (_a = this._recorder.delegate).setMode) == null ? void 0 : _b.call(_a, this._recorder.state.mode === \"assertingValue\" ? \"recording\" : \"assertingValue\");\n      })\n    ];\n  }\n  install() {\n    this._recorder.highlight.appendChild(this._overlayElement);\n    this._refreshListeners();\n    this._updateVisualPosition();\n  }\n  contains(element) {\n    return this._recorder.injectedScript.utils.isInsideScope(this._overlayElement, element);\n  }\n  setUIState(state) {\n    this._recordToggle.classList.toggle(\"active\", state.mode === \"recording\" || state.mode === \"assertingText\" || state.mode === \"assertingVisibility\" || state.mode === \"assertingValue\" || state.mode === \"recording-inspecting\");\n    this._pickLocatorToggle.classList.toggle(\"active\", state.mode === \"inspecting\" || state.mode === \"recording-inspecting\");\n    this._assertVisibilityToggle.classList.toggle(\"active\", state.mode === \"assertingVisibility\");\n    this._assertVisibilityToggle.classList.toggle(\"disabled\", state.mode === \"none\" || state.mode === \"standby\" || state.mode === \"inspecting\");\n    this._assertTextToggle.classList.toggle(\"active\", state.mode === \"assertingText\");\n    this._assertTextToggle.classList.toggle(\"disabled\", state.mode === \"none\" || state.mode === \"standby\" || state.mode === \"inspecting\");\n    this._assertValuesToggle.classList.toggle(\"active\", state.mode === \"assertingValue\");\n    this._assertValuesToggle.classList.toggle(\"disabled\", state.mode === \"none\" || state.mode === \"standby\" || state.mode === \"inspecting\");\n    if (this._offsetX !== state.overlay.offsetX) {\n      this._offsetX = state.overlay.offsetX;\n      this._updateVisualPosition();\n    }\n    if (state.mode === \"none\")\n      this._hideOverlay();\n    else\n      this._showOverlay();\n  }\n  flashToolSucceeded(tool) {\n    const element = tool === \"assertingVisibility\" ? this._assertVisibilityToggle : this._assertValuesToggle;\n    element.classList.add(\"succeeded\");\n    setTimeout(() => element.classList.remove(\"succeeded\"), 2e3);\n  }\n  _hideOverlay() {\n    this._overlayElement.setAttribute(\"hidden\", \"true\");\n  }\n  _showOverlay() {\n    if (!this._overlayElement.hasAttribute(\"hidden\"))\n      return;\n    this._overlayElement.removeAttribute(\"hidden\");\n    this._updateVisualPosition();\n  }\n  _updateVisualPosition() {\n    this._measure = this._overlayElement.getBoundingClientRect();\n    this._overlayElement.style.left = (this._recorder.injectedScript.window.innerWidth - this._measure.width) / 2 + this._offsetX + \"px\";\n  }\n  onMouseMove(event) {\n    var _a, _b;\n    if (!event.buttons) {\n      this._dragState = void 0;\n      return false;\n    }\n    if (this._dragState) {\n      this._offsetX = this._dragState.offsetX + event.clientX - this._dragState.dragStart.x;\n      const halfGapSize = (this._recorder.injectedScript.window.innerWidth - this._measure.width) / 2 - 10;\n      this._offsetX = Math.max(-halfGapSize, Math.min(halfGapSize, this._offsetX));\n      this._updateVisualPosition();\n      (_b = (_a = this._recorder.delegate).setOverlayState) == null ? void 0 : _b.call(_a, { offsetX: this._offsetX });\n      consumeEvent(event);\n      return true;\n    }\n    return false;\n  }\n  onMouseUp(event) {\n    if (this._dragState) {\n      consumeEvent(event);\n      return true;\n    }\n    return false;\n  }\n  onClick(event) {\n    if (this._dragState) {\n      this._dragState = void 0;\n      consumeEvent(event);\n      return true;\n    }\n    return false;\n  }\n};\nvar Recorder = class {\n  constructor(injectedScript) {\n    this._listeners = [];\n    this._actionSelectorModel = null;\n    this.state = { mode: \"none\", testIdAttributeName: \"data-testid\", language: \"javascript\", overlay: { offsetX: 0 } };\n    this.delegate = {};\n    this.document = injectedScript.document;\n    this.injectedScript = injectedScript;\n    this.highlight = injectedScript.createHighlight();\n    this._tools = {\n      \"none\": new NoneTool(),\n      \"standby\": new NoneTool(),\n      \"inspecting\": new InspectTool(this, false),\n      \"recording\": new RecordActionTool(this),\n      \"recording-inspecting\": new InspectTool(this, false),\n      \"assertingText\": new TextAssertionTool(this, \"text\"),\n      \"assertingVisibility\": new InspectTool(this, true),\n      \"assertingValue\": new TextAssertionTool(this, \"value\")\n    };\n    this._currentTool = this._tools.none;\n    if (injectedScript.window.top === injectedScript.window) {\n      this.overlay = new Overlay(this);\n      this.overlay.setUIState(this.state);\n    }\n    this._stylesheet = new injectedScript.window.CSSStyleSheet();\n    this._stylesheet.replaceSync(`\n      body[data-pw-cursor=pointer] *, body[data-pw-cursor=pointer] *::after { cursor: pointer !important; }\n      body[data-pw-cursor=text] *, body[data-pw-cursor=text] *::after { cursor: text !important; }\n    `);\n    this.installListeners();\n    if (injectedScript.isUnderTest)\n      console.error(\"Recorder script ready for test\");\n  }\n  installListeners() {\n    var _a;\n    removeEventListeners(this._listeners);\n    this._listeners = [\n      addEventListener(this.document, \"click\", (event) => this._onClick(event), true),\n      addEventListener(this.document, \"auxclick\", (event) => this._onClick(event), true),\n      addEventListener(this.document, \"contextmenu\", (event) => this._onContextMenu(event), true),\n      addEventListener(this.document, \"dragstart\", (event) => this._onDragStart(event), true),\n      addEventListener(this.document, \"input\", (event) => this._onInput(event), true),\n      addEventListener(this.document, \"keydown\", (event) => this._onKeyDown(event), true),\n      addEventListener(this.document, \"keyup\", (event) => this._onKeyUp(event), true),\n      addEventListener(this.document, \"pointerdown\", (event) => this._onPointerDown(event), true),\n      addEventListener(this.document, \"pointerup\", (event) => this._onPointerUp(event), true),\n      addEventListener(this.document, \"mousedown\", (event) => this._onMouseDown(event), true),\n      addEventListener(this.document, \"mouseup\", (event) => this._onMouseUp(event), true),\n      addEventListener(this.document, \"mousemove\", (event) => this._onMouseMove(event), true),\n      addEventListener(this.document, \"mouseleave\", (event) => this._onMouseLeave(event), true),\n      addEventListener(this.document, \"mouseenter\", (event) => this._onMouseEnter(event), true),\n      addEventListener(this.document, \"focus\", (event) => this._onFocus(event), true),\n      addEventListener(this.document, \"scroll\", (event) => this._onScroll(event), true)\n    ];\n    this.highlight.install();\n    (_a = this.overlay) == null ? void 0 : _a.install();\n    this.document.adoptedStyleSheets.push(this._stylesheet);\n  }\n  _switchCurrentTool() {\n    var _a, _b, _c;\n    const newTool = this._tools[this.state.mode];\n    if (newTool === this._currentTool)\n      return;\n    (_b = (_a = this._currentTool).cleanup) == null ? void 0 : _b.call(_a);\n    this.clearHighlight();\n    this._currentTool = newTool;\n    (_c = this.injectedScript.document.body) == null ? void 0 : _c.setAttribute(\"data-pw-cursor\", newTool.cursor());\n  }\n  setUIState(state, delegate) {\n    var _a, _b, _c, _d;\n    this.delegate = delegate;\n    if (state.actionPoint && this.state.actionPoint && state.actionPoint.x === this.state.actionPoint.x && state.actionPoint.y === this.state.actionPoint.y) {\n    } else if (!state.actionPoint && !this.state.actionPoint) {\n    } else {\n      if (state.actionPoint)\n        this.highlight.showActionPoint(state.actionPoint.x, state.actionPoint.y);\n      else\n        this.highlight.hideActionPoint();\n    }\n    this.state = state;\n    this.highlight.setLanguage(state.language);\n    this._switchCurrentTool();\n    (_a = this.overlay) == null ? void 0 : _a.setUIState(state);\n    if (((_b = this._actionSelectorModel) == null ? void 0 : _b.selector) && !((_c = this._actionSelectorModel) == null ? void 0 : _c.elements.length))\n      this._actionSelectorModel = null;\n    if (state.actionSelector !== ((_d = this._actionSelectorModel) == null ? void 0 : _d.selector))\n      this._actionSelectorModel = state.actionSelector ? querySelector(this.injectedScript, state.actionSelector, this.document) : null;\n    if (this.state.mode === \"none\" || this.state.mode === \"standby\")\n      this.updateHighlight(this._actionSelectorModel, false);\n  }\n  clearHighlight() {\n    var _a, _b;\n    (_b = (_a = this._currentTool).cleanup) == null ? void 0 : _b.call(_a);\n    this.updateHighlight(null, false);\n  }\n  _onClick(event) {\n    var _a, _b, _c;\n    if (!event.isTrusted)\n      return;\n    if ((_a = this.overlay) == null ? void 0 : _a.onClick(event))\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_c = (_b = this._currentTool).onClick) == null ? void 0 : _c.call(_b, event);\n  }\n  _onContextMenu(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onContextMenu) == null ? void 0 : _b.call(_a, event);\n  }\n  _onDragStart(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onDragStart) == null ? void 0 : _b.call(_a, event);\n  }\n  _onPointerDown(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onPointerDown) == null ? void 0 : _b.call(_a, event);\n  }\n  _onPointerUp(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onPointerUp) == null ? void 0 : _b.call(_a, event);\n  }\n  _onMouseDown(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onMouseDown) == null ? void 0 : _b.call(_a, event);\n  }\n  _onMouseUp(event) {\n    var _a, _b, _c;\n    if (!event.isTrusted)\n      return;\n    if ((_a = this.overlay) == null ? void 0 : _a.onMouseUp(event))\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_c = (_b = this._currentTool).onMouseUp) == null ? void 0 : _c.call(_b, event);\n  }\n  _onMouseMove(event) {\n    var _a, _b, _c;\n    if (!event.isTrusted)\n      return;\n    if ((_a = this.overlay) == null ? void 0 : _a.onMouseMove(event))\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_c = (_b = this._currentTool).onMouseMove) == null ? void 0 : _c.call(_b, event);\n  }\n  _onMouseEnter(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onMouseEnter) == null ? void 0 : _b.call(_a, event);\n  }\n  _onMouseLeave(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onMouseLeave) == null ? void 0 : _b.call(_a, event);\n  }\n  _onFocus(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onFocus) == null ? void 0 : _b.call(_a, event);\n  }\n  _onScroll(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    this.highlight.hideActionPoint();\n    (_b = (_a = this._currentTool).onScroll) == null ? void 0 : _b.call(_a, event);\n  }\n  _onInput(event) {\n    var _a, _b;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onInput) == null ? void 0 : _b.call(_a, event);\n  }\n  _onKeyDown(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onKeyDown) == null ? void 0 : _b.call(_a, event);\n  }\n  _onKeyUp(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onKeyUp) == null ? void 0 : _b.call(_a, event);\n  }\n  updateHighlight(model, userGesture) {\n    var _a, _b;\n    let tooltipText = model == null ? void 0 : model.tooltipText;\n    if (tooltipText === void 0 && !(model == null ? void 0 : model.tooltipList) && (model == null ? void 0 : model.selector))\n      tooltipText = this.injectedScript.utils.asLocator(this.state.language, model.selector);\n    this.highlight.updateHighlight((model == null ? void 0 : model.elements) || [], { ...model, tooltipText });\n    if (userGesture)\n      (_b = (_a = this.delegate).highlightUpdated) == null ? void 0 : _b.call(_a);\n  }\n  _ignoreOverlayEvent(event) {\n    return event.composedPath().some((e) => {\n      const nodeName = e.nodeName || \"\";\n      return nodeName.toLowerCase() === \"x-pw-glass\";\n    });\n  }\n  deepEventTarget(event) {\n    var _a;\n    for (const element of event.composedPath()) {\n      if (!((_a = this.overlay) == null ? void 0 : _a.contains(element)))\n        return element;\n    }\n    return event.composedPath()[0];\n  }\n};\nfunction deepActiveElement(document) {\n  let activeElement = document.activeElement;\n  while (activeElement && activeElement.shadowRoot && activeElement.shadowRoot.activeElement)\n    activeElement = activeElement.shadowRoot.activeElement;\n  return activeElement;\n}\nfunction modifiersForEvent(event) {\n  return (event.altKey ? 1 : 0) | (event.ctrlKey ? 2 : 0) | (event.metaKey ? 4 : 0) | (event.shiftKey ? 8 : 0);\n}\nfunction buttonForEvent(event) {\n  switch (event.which) {\n    case 1:\n      return \"left\";\n    case 2:\n      return \"middle\";\n    case 3:\n      return \"right\";\n  }\n  return \"left\";\n}\nfunction positionForEvent(event) {\n  const targetElement = event.target;\n  if (targetElement.nodeName !== \"CANVAS\")\n    return;\n  return {\n    x: event.offsetX,\n    y: event.offsetY\n  };\n}\nfunction consumeEvent(e) {\n  e.preventDefault();\n  e.stopPropagation();\n  e.stopImmediatePropagation();\n}\nfunction asCheckbox(node) {\n  if (!node || node.nodeName !== \"INPUT\")\n    return null;\n  const inputElement = node;\n  return [\"checkbox\", \"radio\"].includes(inputElement.type) ? inputElement : null;\n}\nfunction isRangeInput(node) {\n  if (!node || node.nodeName !== \"INPUT\")\n    return false;\n  const inputElement = node;\n  return inputElement.type.toLowerCase() === \"range\";\n}\nfunction addEventListener(target, eventName, listener, useCapture) {\n  target.addEventListener(eventName, listener, useCapture);\n  const remove = () => {\n    target.removeEventListener(eventName, listener, useCapture);\n  };\n  return remove;\n}\nfunction removeEventListeners(listeners) {\n  for (const listener of listeners)\n    listener();\n  listeners.splice(0, listeners.length);\n}\nfunction querySelector(injectedScript, selector, ownerDocument) {\n  try {\n    const parsedSelector = injectedScript.parseSelector(selector);\n    return {\n      selector,\n      elements: injectedScript.querySelectorAll(parsedSelector, ownerDocument)\n    };\n  } catch (e) {\n    return {\n      selector,\n      elements: []\n    };\n  }\n}\nfunction createSvgElement(doc, { tagName, attrs, children }) {\n  const elem = doc.createElementNS(\"http://www.w3.org/2000/svg\", tagName);\n  if (attrs) {\n    for (const [k, v] of Object.entries(attrs))\n      elem.setAttribute(k, v);\n  }\n  if (children) {\n    for (const c of children)\n      elem.appendChild(createSvgElement(doc, c));\n  }\n  return elem;\n}\nvar PollingRecorder = class {\n  constructor(injectedScript) {\n    this._recorder = new Recorder(injectedScript);\n    this._embedder = injectedScript.window;\n    injectedScript.onGlobalListenersRemoved.add(() => this._recorder.installListeners());\n    const refreshOverlay = () => {\n      this._pollRecorderMode().catch((e) => console.log(e));\n    };\n    this._embedder.__pw_refreshOverlay = refreshOverlay;\n    refreshOverlay();\n  }\n  async _pollRecorderMode() {\n    const pollPeriod = 1e3;\n    if (this._pollRecorderModeTimer)\n      clearTimeout(this._pollRecorderModeTimer);\n    const state = await this._embedder.__pw_recorderState().catch(() => {\n    });\n    if (!state) {\n      this._pollRecorderModeTimer = setTimeout(() => this._pollRecorderMode(), pollPeriod);\n      return;\n    }\n    const win = this._recorder.document.defaultView;\n    if (win.top !== win) {\n      state.actionPoint = void 0;\n    }\n    this._recorder.setUIState(state, this);\n    this._pollRecorderModeTimer = setTimeout(() => this._pollRecorderMode(), pollPeriod);\n  }\n  async performAction(action) {\n    await this._embedder.__pw_recorderPerformAction(action);\n  }\n  async recordAction(action) {\n    await this._embedder.__pw_recorderRecordAction(action);\n  }\n  async setSelector(selector) {\n    await this._embedder.__pw_recorderSetSelector(selector);\n  }\n  async setMode(mode) {\n    await this._embedder.__pw_recorderSetMode(mode);\n  }\n  async setOverlayState(state) {\n    await this._embedder.__pw_recorderSetOverlayState(state);\n  }\n};\nvar recorder_default = PollingRecorder;\n";
});

// node_modules/playwright-core/lib/generated/consoleApiSource.js
var require_consoleApiSource = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.source = undefined;
  var source = exports.source = "\nvar __commonJS = obj => {\n  let required = false;\n  let result;\n  return function __require() {\n    if (!required) {\n      required = true;\n      let fn;\n      for (const name in obj) { fn = obj[name]; break; }\n      const module = { exports: {} };\n      fn(module.exports, module);\n      result = module.exports;\n    }\n    return result;\n  }\n};\nvar __export = (target, all) => {for (var name in all) target[name] = all[name];};\nvar __toESM = mod => ({ ...mod, 'default': mod });\nvar __toCommonJS = mod => ({ ...mod, __esModule: true });\n\n\n// packages/playwright-core/src/server/injected/consoleApi.ts\nvar consoleApi_exports = {};\n__export(consoleApi_exports, {\n  default: () => consoleApi_default\n});\nmodule.exports = __toCommonJS(consoleApi_exports);\n\n// packages/playwright-core/src/utils/isomorphic/stringUtils.ts\nfunction escapeWithQuotes(text, char = \"'\") {\n  const stringified = JSON.stringify(text);\n  const escapedText = stringified.substring(1, stringified.length - 1).replace(/\\\\\"/g, '\"');\n  if (char === \"'\")\n    return char + escapedText.replace(/[']/g, \"\\\\'\") + char;\n  if (char === '\"')\n    return char + escapedText.replace(/[\"]/g, '\\\\\"') + char;\n  if (char === \"`\")\n    return char + escapedText.replace(/[`]/g, \"`\") + char;\n  throw new Error(\"Invalid escape char\");\n}\nfunction toTitleCase(name) {\n  return name.charAt(0).toUpperCase() + name.substring(1);\n}\nfunction toSnakeCase(name) {\n  return name.replace(/([a-z0-9])([A-Z])/g, \"$1_$2\").replace(/([A-Z])([A-Z][a-z])/g, \"$1_$2\").toLowerCase();\n}\nfunction normalizeEscapedRegexQuotes(source) {\n  return source.replace(/(^|[^\\\\])(\\\\\\\\)*\\\\(['\"`])/g, \"$1$2$3\");\n}\nfunction escapeRegexForSelector(re) {\n  if (re.unicode || re.unicodeSets)\n    return String(re);\n  return String(re).replace(/(^|[^\\\\])(\\\\\\\\)*([\"'`])/g, \"$1$2\\\\$3\").replace(/>>/g, \"\\\\>\\\\>\");\n}\nfunction escapeForTextSelector(text, exact) {\n  if (typeof text !== \"string\")\n    return escapeRegexForSelector(text);\n  return `${JSON.stringify(text)}${exact ? \"s\" : \"i\"}`;\n}\nfunction escapeForAttributeSelector(value, exact) {\n  if (typeof value !== \"string\")\n    return escapeRegexForSelector(value);\n  return `\"${value.replace(/\\\\/g, \"\\\\\\\\\").replace(/[\"]/g, '\\\\\"')}\"${exact ? \"s\" : \"i\"}`;\n}\n\n// packages/playwright-core/src/utils/isomorphic/locatorUtils.ts\nfunction getByAttributeTextSelector(attrName, text, options) {\n  return `internal:attr=[${attrName}=${escapeForAttributeSelector(text, (options == null ? void 0 : options.exact) || false)}]`;\n}\nfunction getByTestIdSelector(testIdAttributeName, testId) {\n  return `internal:testid=[${testIdAttributeName}=${escapeForAttributeSelector(testId, true)}]`;\n}\nfunction getByLabelSelector(text, options) {\n  return \"internal:label=\" + escapeForTextSelector(text, !!(options == null ? void 0 : options.exact));\n}\nfunction getByAltTextSelector(text, options) {\n  return getByAttributeTextSelector(\"alt\", text, options);\n}\nfunction getByTitleSelector(text, options) {\n  return getByAttributeTextSelector(\"title\", text, options);\n}\nfunction getByPlaceholderSelector(text, options) {\n  return getByAttributeTextSelector(\"placeholder\", text, options);\n}\nfunction getByTextSelector(text, options) {\n  return \"internal:text=\" + escapeForTextSelector(text, !!(options == null ? void 0 : options.exact));\n}\nfunction getByRoleSelector(role, options = {}) {\n  const props = [];\n  if (options.checked !== void 0)\n    props.push([\"checked\", String(options.checked)]);\n  if (options.disabled !== void 0)\n    props.push([\"disabled\", String(options.disabled)]);\n  if (options.selected !== void 0)\n    props.push([\"selected\", String(options.selected)]);\n  if (options.expanded !== void 0)\n    props.push([\"expanded\", String(options.expanded)]);\n  if (options.includeHidden !== void 0)\n    props.push([\"include-hidden\", String(options.includeHidden)]);\n  if (options.level !== void 0)\n    props.push([\"level\", String(options.level)]);\n  if (options.name !== void 0)\n    props.push([\"name\", escapeForAttributeSelector(options.name, !!options.exact)]);\n  if (options.pressed !== void 0)\n    props.push([\"pressed\", String(options.pressed)]);\n  return `internal:role=${role}${props.map(([n, v]) => `[${n}=${v}]`).join(\"\")}`;\n}\n\n// packages/playwright-core/src/utils/isomorphic/cssTokenizer.ts\nvar between = function(num, first, last) {\n  return num >= first && num <= last;\n};\nfunction digit(code) {\n  return between(code, 48, 57);\n}\nfunction hexdigit(code) {\n  return digit(code) || between(code, 65, 70) || between(code, 97, 102);\n}\nfunction uppercaseletter(code) {\n  return between(code, 65, 90);\n}\nfunction lowercaseletter(code) {\n  return between(code, 97, 122);\n}\nfunction letter(code) {\n  return uppercaseletter(code) || lowercaseletter(code);\n}\nfunction nonascii(code) {\n  return code >= 128;\n}\nfunction namestartchar(code) {\n  return letter(code) || nonascii(code) || code === 95;\n}\nfunction namechar(code) {\n  return namestartchar(code) || digit(code) || code === 45;\n}\nfunction nonprintable(code) {\n  return between(code, 0, 8) || code === 11 || between(code, 14, 31) || code === 127;\n}\nfunction newline(code) {\n  return code === 10;\n}\nfunction whitespace(code) {\n  return newline(code) || code === 9 || code === 32;\n}\nvar maximumallowedcodepoint = 1114111;\nvar InvalidCharacterError = class extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"InvalidCharacterError\";\n  }\n};\nfunction preprocess(str) {\n  const codepoints = [];\n  for (let i = 0; i < str.length; i++) {\n    let code = str.charCodeAt(i);\n    if (code === 13 && str.charCodeAt(i + 1) === 10) {\n      code = 10;\n      i++;\n    }\n    if (code === 13 || code === 12)\n      code = 10;\n    if (code === 0)\n      code = 65533;\n    if (between(code, 55296, 56319) && between(str.charCodeAt(i + 1), 56320, 57343)) {\n      const lead = code - 55296;\n      const trail = str.charCodeAt(i + 1) - 56320;\n      code = Math.pow(2, 16) + lead * Math.pow(2, 10) + trail;\n      i++;\n    }\n    codepoints.push(code);\n  }\n  return codepoints;\n}\nfunction stringFromCode(code) {\n  if (code <= 65535)\n    return String.fromCharCode(code);\n  code -= Math.pow(2, 16);\n  const lead = Math.floor(code / Math.pow(2, 10)) + 55296;\n  const trail = code % Math.pow(2, 10) + 56320;\n  return String.fromCharCode(lead) + String.fromCharCode(trail);\n}\nfunction tokenize(str1) {\n  const str = preprocess(str1);\n  let i = -1;\n  const tokens = [];\n  let code;\n  let line = 0;\n  let column = 0;\n  let lastLineLength = 0;\n  const incrLineno = function() {\n    line += 1;\n    lastLineLength = column;\n    column = 0;\n  };\n  const locStart = { line, column };\n  const codepoint = function(i2) {\n    if (i2 >= str.length)\n      return -1;\n    return str[i2];\n  };\n  const next = function(num) {\n    if (num === void 0)\n      num = 1;\n    if (num > 3)\n      throw \"Spec Error: no more than three codepoints of lookahead.\";\n    return codepoint(i + num);\n  };\n  const consume = function(num) {\n    if (num === void 0)\n      num = 1;\n    i += num;\n    code = codepoint(i);\n    if (newline(code))\n      incrLineno();\n    else\n      column += num;\n    return true;\n  };\n  const reconsume = function() {\n    i -= 1;\n    if (newline(code)) {\n      line -= 1;\n      column = lastLineLength;\n    } else {\n      column -= 1;\n    }\n    locStart.line = line;\n    locStart.column = column;\n    return true;\n  };\n  const eof = function(codepoint2) {\n    if (codepoint2 === void 0)\n      codepoint2 = code;\n    return codepoint2 === -1;\n  };\n  const donothing = function() {\n  };\n  const parseerror = function() {\n  };\n  const consumeAToken = function() {\n    consumeComments();\n    consume();\n    if (whitespace(code)) {\n      while (whitespace(next()))\n        consume();\n      return new WhitespaceToken();\n    } else if (code === 34) {\n      return consumeAStringToken();\n    } else if (code === 35) {\n      if (namechar(next()) || areAValidEscape(next(1), next(2))) {\n        const token = new HashToken(\"\");\n        if (wouldStartAnIdentifier(next(1), next(2), next(3)))\n          token.type = \"id\";\n        token.value = consumeAName();\n        return token;\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 36) {\n      if (next() === 61) {\n        consume();\n        return new SuffixMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 39) {\n      return consumeAStringToken();\n    } else if (code === 40) {\n      return new OpenParenToken();\n    } else if (code === 41) {\n      return new CloseParenToken();\n    } else if (code === 42) {\n      if (next() === 61) {\n        consume();\n        return new SubstringMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 43) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 44) {\n      return new CommaToken();\n    } else if (code === 45) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else if (next(1) === 45 && next(2) === 62) {\n        consume(2);\n        return new CDCToken();\n      } else if (startsWithAnIdentifier()) {\n        reconsume();\n        return consumeAnIdentlikeToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 46) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 58) {\n      return new ColonToken();\n    } else if (code === 59) {\n      return new SemicolonToken();\n    } else if (code === 60) {\n      if (next(1) === 33 && next(2) === 45 && next(3) === 45) {\n        consume(3);\n        return new CDOToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 64) {\n      if (wouldStartAnIdentifier(next(1), next(2), next(3)))\n        return new AtKeywordToken(consumeAName());\n      else\n        return new DelimToken(code);\n    } else if (code === 91) {\n      return new OpenSquareToken();\n    } else if (code === 92) {\n      if (startsWithAValidEscape()) {\n        reconsume();\n        return consumeAnIdentlikeToken();\n      } else {\n        parseerror();\n        return new DelimToken(code);\n      }\n    } else if (code === 93) {\n      return new CloseSquareToken();\n    } else if (code === 94) {\n      if (next() === 61) {\n        consume();\n        return new PrefixMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 123) {\n      return new OpenCurlyToken();\n    } else if (code === 124) {\n      if (next() === 61) {\n        consume();\n        return new DashMatchToken();\n      } else if (next() === 124) {\n        consume();\n        return new ColumnToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 125) {\n      return new CloseCurlyToken();\n    } else if (code === 126) {\n      if (next() === 61) {\n        consume();\n        return new IncludeMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (digit(code)) {\n      reconsume();\n      return consumeANumericToken();\n    } else if (namestartchar(code)) {\n      reconsume();\n      return consumeAnIdentlikeToken();\n    } else if (eof()) {\n      return new EOFToken();\n    } else {\n      return new DelimToken(code);\n    }\n  };\n  const consumeComments = function() {\n    while (next(1) === 47 && next(2) === 42) {\n      consume(2);\n      while (true) {\n        consume();\n        if (code === 42 && next() === 47) {\n          consume();\n          break;\n        } else if (eof()) {\n          parseerror();\n          return;\n        }\n      }\n    }\n  };\n  const consumeANumericToken = function() {\n    const num = consumeANumber();\n    if (wouldStartAnIdentifier(next(1), next(2), next(3))) {\n      const token = new DimensionToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      token.type = num.type;\n      token.unit = consumeAName();\n      return token;\n    } else if (next() === 37) {\n      consume();\n      const token = new PercentageToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      return token;\n    } else {\n      const token = new NumberToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      token.type = num.type;\n      return token;\n    }\n  };\n  const consumeAnIdentlikeToken = function() {\n    const str2 = consumeAName();\n    if (str2.toLowerCase() === \"url\" && next() === 40) {\n      consume();\n      while (whitespace(next(1)) && whitespace(next(2)))\n        consume();\n      if (next() === 34 || next() === 39)\n        return new FunctionToken(str2);\n      else if (whitespace(next()) && (next(2) === 34 || next(2) === 39))\n        return new FunctionToken(str2);\n      else\n        return consumeAURLToken();\n    } else if (next() === 40) {\n      consume();\n      return new FunctionToken(str2);\n    } else {\n      return new IdentToken(str2);\n    }\n  };\n  const consumeAStringToken = function(endingCodePoint) {\n    if (endingCodePoint === void 0)\n      endingCodePoint = code;\n    let string = \"\";\n    while (consume()) {\n      if (code === endingCodePoint || eof()) {\n        return new StringToken(string);\n      } else if (newline(code)) {\n        parseerror();\n        reconsume();\n        return new BadStringToken();\n      } else if (code === 92) {\n        if (eof(next()))\n          donothing();\n        else if (newline(next()))\n          consume();\n        else\n          string += stringFromCode(consumeEscape());\n      } else {\n        string += stringFromCode(code);\n      }\n    }\n    throw new Error(\"Internal error\");\n  };\n  const consumeAURLToken = function() {\n    const token = new URLToken(\"\");\n    while (whitespace(next()))\n      consume();\n    if (eof(next()))\n      return token;\n    while (consume()) {\n      if (code === 41 || eof()) {\n        return token;\n      } else if (whitespace(code)) {\n        while (whitespace(next()))\n          consume();\n        if (next() === 41 || eof(next())) {\n          consume();\n          return token;\n        } else {\n          consumeTheRemnantsOfABadURL();\n          return new BadURLToken();\n        }\n      } else if (code === 34 || code === 39 || code === 40 || nonprintable(code)) {\n        parseerror();\n        consumeTheRemnantsOfABadURL();\n        return new BadURLToken();\n      } else if (code === 92) {\n        if (startsWithAValidEscape()) {\n          token.value += stringFromCode(consumeEscape());\n        } else {\n          parseerror();\n          consumeTheRemnantsOfABadURL();\n          return new BadURLToken();\n        }\n      } else {\n        token.value += stringFromCode(code);\n      }\n    }\n    throw new Error(\"Internal error\");\n  };\n  const consumeEscape = function() {\n    consume();\n    if (hexdigit(code)) {\n      const digits = [code];\n      for (let total = 0; total < 5; total++) {\n        if (hexdigit(next())) {\n          consume();\n          digits.push(code);\n        } else {\n          break;\n        }\n      }\n      if (whitespace(next()))\n        consume();\n      let value = parseInt(digits.map(function(x) {\n        return String.fromCharCode(x);\n      }).join(\"\"), 16);\n      if (value > maximumallowedcodepoint)\n        value = 65533;\n      return value;\n    } else if (eof()) {\n      return 65533;\n    } else {\n      return code;\n    }\n  };\n  const areAValidEscape = function(c1, c2) {\n    if (c1 !== 92)\n      return false;\n    if (newline(c2))\n      return false;\n    return true;\n  };\n  const startsWithAValidEscape = function() {\n    return areAValidEscape(code, next());\n  };\n  const wouldStartAnIdentifier = function(c1, c2, c3) {\n    if (c1 === 45)\n      return namestartchar(c2) || c2 === 45 || areAValidEscape(c2, c3);\n    else if (namestartchar(c1))\n      return true;\n    else if (c1 === 92)\n      return areAValidEscape(c1, c2);\n    else\n      return false;\n  };\n  const startsWithAnIdentifier = function() {\n    return wouldStartAnIdentifier(code, next(1), next(2));\n  };\n  const wouldStartANumber = function(c1, c2, c3) {\n    if (c1 === 43 || c1 === 45) {\n      if (digit(c2))\n        return true;\n      if (c2 === 46 && digit(c3))\n        return true;\n      return false;\n    } else if (c1 === 46) {\n      if (digit(c2))\n        return true;\n      return false;\n    } else if (digit(c1)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  const startsWithANumber = function() {\n    return wouldStartANumber(code, next(1), next(2));\n  };\n  const consumeAName = function() {\n    let result = \"\";\n    while (consume()) {\n      if (namechar(code)) {\n        result += stringFromCode(code);\n      } else if (startsWithAValidEscape()) {\n        result += stringFromCode(consumeEscape());\n      } else {\n        reconsume();\n        return result;\n      }\n    }\n    throw new Error(\"Internal parse error\");\n  };\n  const consumeANumber = function() {\n    let repr = \"\";\n    let type = \"integer\";\n    if (next() === 43 || next() === 45) {\n      consume();\n      repr += stringFromCode(code);\n    }\n    while (digit(next())) {\n      consume();\n      repr += stringFromCode(code);\n    }\n    if (next(1) === 46 && digit(next(2))) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = \"number\";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    }\n    const c1 = next(1), c2 = next(2), c3 = next(3);\n    if ((c1 === 69 || c1 === 101) && digit(c2)) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = \"number\";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    } else if ((c1 === 69 || c1 === 101) && (c2 === 43 || c2 === 45) && digit(c3)) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = \"number\";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    }\n    const value = convertAStringToANumber(repr);\n    return { type, value, repr };\n  };\n  const convertAStringToANumber = function(string) {\n    return +string;\n  };\n  const consumeTheRemnantsOfABadURL = function() {\n    while (consume()) {\n      if (code === 41 || eof()) {\n        return;\n      } else if (startsWithAValidEscape()) {\n        consumeEscape();\n        donothing();\n      } else {\n        donothing();\n      }\n    }\n  };\n  let iterationCount = 0;\n  while (!eof(next())) {\n    tokens.push(consumeAToken());\n    iterationCount++;\n    if (iterationCount > str.length * 2)\n      throw new Error(\"I'm infinite-looping!\");\n  }\n  return tokens;\n}\nvar CSSParserToken = class {\n  constructor() {\n    this.tokenType = \"\";\n  }\n  toJSON() {\n    return { token: this.tokenType };\n  }\n  toString() {\n    return this.tokenType;\n  }\n  toSource() {\n    return \"\" + this;\n  }\n};\nvar BadStringToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"BADSTRING\";\n  }\n};\nvar BadURLToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"BADURL\";\n  }\n};\nvar WhitespaceToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"WHITESPACE\";\n  }\n  toString() {\n    return \"WS\";\n  }\n  toSource() {\n    return \" \";\n  }\n};\nvar CDOToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"CDO\";\n  }\n  toSource() {\n    return \"<!--\";\n  }\n};\nvar CDCToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"CDC\";\n  }\n  toSource() {\n    return \"-->\";\n  }\n};\nvar ColonToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \":\";\n  }\n};\nvar SemicolonToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \";\";\n  }\n};\nvar CommaToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \",\";\n  }\n};\nvar GroupingToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.value = \"\";\n    this.mirror = \"\";\n  }\n};\nvar OpenCurlyToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = \"{\";\n    this.value = \"{\";\n    this.mirror = \"}\";\n  }\n};\nvar CloseCurlyToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = \"}\";\n    this.value = \"}\";\n    this.mirror = \"{\";\n  }\n};\nvar OpenSquareToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = \"[\";\n    this.value = \"[\";\n    this.mirror = \"]\";\n  }\n};\nvar CloseSquareToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = \"]\";\n    this.value = \"]\";\n    this.mirror = \"[\";\n  }\n};\nvar OpenParenToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = \"(\";\n    this.value = \"(\";\n    this.mirror = \")\";\n  }\n};\nvar CloseParenToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = \")\";\n    this.value = \")\";\n    this.mirror = \"(\";\n  }\n};\nvar IncludeMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"~=\";\n  }\n};\nvar DashMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"|=\";\n  }\n};\nvar PrefixMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"^=\";\n  }\n};\nvar SuffixMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"$=\";\n  }\n};\nvar SubstringMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"*=\";\n  }\n};\nvar ColumnToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"||\";\n  }\n};\nvar EOFToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = \"EOF\";\n  }\n  toSource() {\n    return \"\";\n  }\n};\nvar DelimToken = class extends CSSParserToken {\n  constructor(code) {\n    super();\n    this.tokenType = \"DELIM\";\n    this.value = \"\";\n    this.value = stringFromCode(code);\n  }\n  toString() {\n    return \"DELIM(\" + this.value + \")\";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    return json;\n  }\n  toSource() {\n    if (this.value === \"\\\\\")\n      return \"\\\\\\n\";\n    else\n      return this.value;\n  }\n};\nvar StringValuedToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.value = \"\";\n  }\n  ASCIIMatch(str) {\n    return this.value.toLowerCase() === str.toLowerCase();\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    return json;\n  }\n};\nvar IdentToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = \"IDENT\";\n    this.value = val;\n  }\n  toString() {\n    return \"IDENT(\" + this.value + \")\";\n  }\n  toSource() {\n    return escapeIdent(this.value);\n  }\n};\nvar FunctionToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = \"FUNCTION\";\n    this.value = val;\n    this.mirror = \")\";\n  }\n  toString() {\n    return \"FUNCTION(\" + this.value + \")\";\n  }\n  toSource() {\n    return escapeIdent(this.value) + \"(\";\n  }\n};\nvar AtKeywordToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = \"AT-KEYWORD\";\n    this.value = val;\n  }\n  toString() {\n    return \"AT(\" + this.value + \")\";\n  }\n  toSource() {\n    return \"@\" + escapeIdent(this.value);\n  }\n};\nvar HashToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = \"HASH\";\n    this.value = val;\n    this.type = \"unrestricted\";\n  }\n  toString() {\n    return \"HASH(\" + this.value + \")\";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.type = this.type;\n    return json;\n  }\n  toSource() {\n    if (this.type === \"id\")\n      return \"#\" + escapeIdent(this.value);\n    else\n      return \"#\" + escapeHash(this.value);\n  }\n};\nvar StringToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = \"STRING\";\n    this.value = val;\n  }\n  toString() {\n    return '\"' + escapeString(this.value) + '\"';\n  }\n};\nvar URLToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = \"URL\";\n    this.value = val;\n  }\n  toString() {\n    return \"URL(\" + this.value + \")\";\n  }\n  toSource() {\n    return 'url(\"' + escapeString(this.value) + '\")';\n  }\n};\nvar NumberToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = \"NUMBER\";\n    this.type = \"integer\";\n    this.repr = \"\";\n  }\n  toString() {\n    if (this.type === \"integer\")\n      return \"INT(\" + this.value + \")\";\n    return \"NUMBER(\" + this.value + \")\";\n  }\n  toJSON() {\n    const json = super.toJSON();\n    json.value = this.value;\n    json.type = this.type;\n    json.repr = this.repr;\n    return json;\n  }\n  toSource() {\n    return this.repr;\n  }\n};\nvar PercentageToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = \"PERCENTAGE\";\n    this.repr = \"\";\n  }\n  toString() {\n    return \"PERCENTAGE(\" + this.value + \")\";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.repr = this.repr;\n    return json;\n  }\n  toSource() {\n    return this.repr + \"%\";\n  }\n};\nvar DimensionToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = \"DIMENSION\";\n    this.type = \"integer\";\n    this.repr = \"\";\n    this.unit = \"\";\n  }\n  toString() {\n    return \"DIM(\" + this.value + \",\" + this.unit + \")\";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.type = this.type;\n    json.repr = this.repr;\n    json.unit = this.unit;\n    return json;\n  }\n  toSource() {\n    const source = this.repr;\n    let unit = escapeIdent(this.unit);\n    if (unit[0].toLowerCase() === \"e\" && (unit[1] === \"-\" || between(unit.charCodeAt(1), 48, 57))) {\n      unit = \"\\\\65 \" + unit.slice(1, unit.length);\n    }\n    return source + unit;\n  }\n};\nfunction escapeIdent(string) {\n  string = \"\" + string;\n  let result = \"\";\n  const firstcode = string.charCodeAt(0);\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError(\"Invalid character: the input contains U+0000.\");\n    if (between(code, 1, 31) || code === 127 || i === 0 && between(code, 48, 57) || i === 1 && between(code, 48, 57) && firstcode === 45)\n      result += \"\\\\\" + code.toString(16) + \" \";\n    else if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))\n      result += string[i];\n    else\n      result += \"\\\\\" + string[i];\n  }\n  return result;\n}\nfunction escapeHash(string) {\n  string = \"\" + string;\n  let result = \"\";\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError(\"Invalid character: the input contains U+0000.\");\n    if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))\n      result += string[i];\n    else\n      result += \"\\\\\" + code.toString(16) + \" \";\n  }\n  return result;\n}\nfunction escapeString(string) {\n  string = \"\" + string;\n  let result = \"\";\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError(\"Invalid character: the input contains U+0000.\");\n    if (between(code, 1, 31) || code === 127)\n      result += \"\\\\\" + code.toString(16) + \" \";\n    else if (code === 34 || code === 92)\n      result += \"\\\\\" + string[i];\n    else\n      result += string[i];\n  }\n  return result;\n}\n\n// packages/playwright-core/src/utils/isomorphic/cssParser.ts\nvar InvalidSelectorError = class extends Error {\n};\nfunction parseCSS(selector, customNames) {\n  let tokens;\n  try {\n    tokens = tokenize(selector);\n    if (!(tokens[tokens.length - 1] instanceof EOFToken))\n      tokens.push(new EOFToken());\n  } catch (e) {\n    const newMessage = e.message + ` while parsing selector \"${selector}\"`;\n    const index = (e.stack || \"\").indexOf(e.message);\n    if (index !== -1)\n      e.stack = e.stack.substring(0, index) + newMessage + e.stack.substring(index + e.message.length);\n    e.message = newMessage;\n    throw e;\n  }\n  const unsupportedToken = tokens.find((token) => {\n    return token instanceof AtKeywordToken || token instanceof BadStringToken || token instanceof BadURLToken || token instanceof ColumnToken || token instanceof CDOToken || token instanceof CDCToken || token instanceof SemicolonToken || // TODO: Consider using these for something, e.g. to escape complex strings.\n    // For example :xpath{ (//div/bar[@attr=\"foo\"])[2]/baz }\n    // Or this way :xpath( {complex-xpath-goes-here(\"hello\")} )\n    token instanceof OpenCurlyToken || token instanceof CloseCurlyToken || // TODO: Consider treating these as strings?\n    token instanceof URLToken || token instanceof PercentageToken;\n  });\n  if (unsupportedToken)\n    throw new InvalidSelectorError(`Unsupported token \"${unsupportedToken.toSource()}\" while parsing selector \"${selector}\"`);\n  let pos = 0;\n  const names = /* @__PURE__ */ new Set();\n  function unexpected() {\n    return new InvalidSelectorError(`Unexpected token \"${tokens[pos].toSource()}\" while parsing selector \"${selector}\"`);\n  }\n  function skipWhitespace() {\n    while (tokens[pos] instanceof WhitespaceToken)\n      pos++;\n  }\n  function isIdent(p = pos) {\n    return tokens[p] instanceof IdentToken;\n  }\n  function isString(p = pos) {\n    return tokens[p] instanceof StringToken;\n  }\n  function isNumber(p = pos) {\n    return tokens[p] instanceof NumberToken;\n  }\n  function isComma(p = pos) {\n    return tokens[p] instanceof CommaToken;\n  }\n  function isOpenParen(p = pos) {\n    return tokens[p] instanceof OpenParenToken;\n  }\n  function isCloseParen(p = pos) {\n    return tokens[p] instanceof CloseParenToken;\n  }\n  function isFunction(p = pos) {\n    return tokens[p] instanceof FunctionToken;\n  }\n  function isStar(p = pos) {\n    return tokens[p] instanceof DelimToken && tokens[p].value === \"*\";\n  }\n  function isEOF(p = pos) {\n    return tokens[p] instanceof EOFToken;\n  }\n  function isClauseCombinator(p = pos) {\n    return tokens[p] instanceof DelimToken && [\">\", \"+\", \"~\"].includes(tokens[p].value);\n  }\n  function isSelectorClauseEnd(p = pos) {\n    return isComma(p) || isCloseParen(p) || isEOF(p) || isClauseCombinator(p) || tokens[p] instanceof WhitespaceToken;\n  }\n  function consumeFunctionArguments() {\n    const result2 = [consumeArgument()];\n    while (true) {\n      skipWhitespace();\n      if (!isComma())\n        break;\n      pos++;\n      result2.push(consumeArgument());\n    }\n    return result2;\n  }\n  function consumeArgument() {\n    skipWhitespace();\n    if (isNumber())\n      return tokens[pos++].value;\n    if (isString())\n      return tokens[pos++].value;\n    return consumeComplexSelector();\n  }\n  function consumeComplexSelector() {\n    const result2 = { simples: [] };\n    skipWhitespace();\n    if (isClauseCombinator()) {\n      result2.simples.push({ selector: { functions: [{ name: \"scope\", args: [] }] }, combinator: \"\" });\n    } else {\n      result2.simples.push({ selector: consumeSimpleSelector(), combinator: \"\" });\n    }\n    while (true) {\n      skipWhitespace();\n      if (isClauseCombinator()) {\n        result2.simples[result2.simples.length - 1].combinator = tokens[pos++].value;\n        skipWhitespace();\n      } else if (isSelectorClauseEnd()) {\n        break;\n      }\n      result2.simples.push({ combinator: \"\", selector: consumeSimpleSelector() });\n    }\n    return result2;\n  }\n  function consumeSimpleSelector() {\n    let rawCSSString = \"\";\n    const functions = [];\n    while (!isSelectorClauseEnd()) {\n      if (isIdent() || isStar()) {\n        rawCSSString += tokens[pos++].toSource();\n      } else if (tokens[pos] instanceof HashToken) {\n        rawCSSString += tokens[pos++].toSource();\n      } else if (tokens[pos] instanceof DelimToken && tokens[pos].value === \".\") {\n        pos++;\n        if (isIdent())\n          rawCSSString += \".\" + tokens[pos++].toSource();\n        else\n          throw unexpected();\n      } else if (tokens[pos] instanceof ColonToken) {\n        pos++;\n        if (isIdent()) {\n          if (!customNames.has(tokens[pos].value.toLowerCase())) {\n            rawCSSString += \":\" + tokens[pos++].toSource();\n          } else {\n            const name = tokens[pos++].value.toLowerCase();\n            functions.push({ name, args: [] });\n            names.add(name);\n          }\n        } else if (isFunction()) {\n          const name = tokens[pos++].value.toLowerCase();\n          if (!customNames.has(name)) {\n            rawCSSString += `:${name}(${consumeBuiltinFunctionArguments()})`;\n          } else {\n            functions.push({ name, args: consumeFunctionArguments() });\n            names.add(name);\n          }\n          skipWhitespace();\n          if (!isCloseParen())\n            throw unexpected();\n          pos++;\n        } else {\n          throw unexpected();\n        }\n      } else if (tokens[pos] instanceof OpenSquareToken) {\n        rawCSSString += \"[\";\n        pos++;\n        while (!(tokens[pos] instanceof CloseSquareToken) && !isEOF())\n          rawCSSString += tokens[pos++].toSource();\n        if (!(tokens[pos] instanceof CloseSquareToken))\n          throw unexpected();\n        rawCSSString += \"]\";\n        pos++;\n      } else {\n        throw unexpected();\n      }\n    }\n    if (!rawCSSString && !functions.length)\n      throw unexpected();\n    return { css: rawCSSString || void 0, functions };\n  }\n  function consumeBuiltinFunctionArguments() {\n    let s = \"\";\n    let balance = 1;\n    while (!isEOF()) {\n      if (isOpenParen() || isFunction())\n        balance++;\n      if (isCloseParen())\n        balance--;\n      if (!balance)\n        break;\n      s += tokens[pos++].toSource();\n    }\n    return s;\n  }\n  const result = consumeFunctionArguments();\n  if (!isEOF())\n    throw unexpected();\n  if (result.some((arg) => typeof arg !== \"object\" || !(\"simples\" in arg)))\n    throw new InvalidSelectorError(`Error while parsing selector \"${selector}\"`);\n  return { selector: result, names: Array.from(names) };\n}\n\n// packages/playwright-core/src/utils/isomorphic/selectorParser.ts\nvar kNestedSelectorNames = /* @__PURE__ */ new Set([\"internal:has\", \"internal:has-not\", \"internal:and\", \"internal:or\", \"internal:chain\", \"left-of\", \"right-of\", \"above\", \"below\", \"near\"]);\nvar kNestedSelectorNamesWithDistance = /* @__PURE__ */ new Set([\"left-of\", \"right-of\", \"above\", \"below\", \"near\"]);\nvar customCSSNames = /* @__PURE__ */ new Set([\"not\", \"is\", \"where\", \"has\", \"scope\", \"light\", \"visible\", \"text\", \"text-matches\", \"text-is\", \"has-text\", \"above\", \"below\", \"right-of\", \"left-of\", \"near\", \"nth-match\"]);\nfunction parseSelector(selector) {\n  const parsedStrings = parseSelectorString(selector);\n  const parts = [];\n  for (const part of parsedStrings.parts) {\n    if (part.name === \"css\" || part.name === \"css:light\") {\n      if (part.name === \"css:light\")\n        part.body = \":light(\" + part.body + \")\";\n      const parsedCSS = parseCSS(part.body, customCSSNames);\n      parts.push({\n        name: \"css\",\n        body: parsedCSS.selector,\n        source: part.body\n      });\n      continue;\n    }\n    if (kNestedSelectorNames.has(part.name)) {\n      let innerSelector;\n      let distance;\n      try {\n        const unescaped = JSON.parse(\"[\" + part.body + \"]\");\n        if (!Array.isArray(unescaped) || unescaped.length < 1 || unescaped.length > 2 || typeof unescaped[0] !== \"string\")\n          throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n        innerSelector = unescaped[0];\n        if (unescaped.length === 2) {\n          if (typeof unescaped[1] !== \"number\" || !kNestedSelectorNamesWithDistance.has(part.name))\n            throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n          distance = unescaped[1];\n        }\n      } catch (e) {\n        throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n      }\n      const nested = { name: part.name, source: part.body, body: { parsed: parseSelector(innerSelector), distance } };\n      const lastFrame = [...nested.body.parsed.parts].reverse().find((part2) => part2.name === \"internal:control\" && part2.body === \"enter-frame\");\n      const lastFrameIndex = lastFrame ? nested.body.parsed.parts.indexOf(lastFrame) : -1;\n      if (lastFrameIndex !== -1 && selectorPartsEqual(nested.body.parsed.parts.slice(0, lastFrameIndex + 1), parts.slice(0, lastFrameIndex + 1)))\n        nested.body.parsed.parts.splice(0, lastFrameIndex + 1);\n      parts.push(nested);\n      continue;\n    }\n    parts.push({ ...part, source: part.body });\n  }\n  if (kNestedSelectorNames.has(parts[0].name))\n    throw new InvalidSelectorError(`\"${parts[0].name}\" selector cannot be first`);\n  return {\n    capture: parsedStrings.capture,\n    parts\n  };\n}\nfunction selectorPartsEqual(list1, list2) {\n  return stringifySelector({ parts: list1 }) === stringifySelector({ parts: list2 });\n}\nfunction stringifySelector(selector, forceEngineName) {\n  if (typeof selector === \"string\")\n    return selector;\n  return selector.parts.map((p, i) => {\n    let includeEngine = true;\n    if (!forceEngineName && i !== selector.capture) {\n      if (p.name === \"css\")\n        includeEngine = false;\n      else if (p.name === \"xpath\" && p.source.startsWith(\"//\") || p.source.startsWith(\"..\"))\n        includeEngine = false;\n    }\n    const prefix = includeEngine ? p.name + \"=\" : \"\";\n    return `${i === selector.capture ? \"*\" : \"\"}${prefix}${p.source}`;\n  }).join(\" >> \");\n}\nfunction parseSelectorString(selector) {\n  let index = 0;\n  let quote;\n  let start = 0;\n  const result = { parts: [] };\n  const append = () => {\n    const part = selector.substring(start, index).trim();\n    const eqIndex = part.indexOf(\"=\");\n    let name;\n    let body;\n    if (eqIndex !== -1 && part.substring(0, eqIndex).trim().match(/^[a-zA-Z_0-9-+:*]+$/)) {\n      name = part.substring(0, eqIndex).trim();\n      body = part.substring(eqIndex + 1);\n    } else if (part.length > 1 && part[0] === '\"' && part[part.length - 1] === '\"') {\n      name = \"text\";\n      body = part;\n    } else if (part.length > 1 && part[0] === \"'\" && part[part.length - 1] === \"'\") {\n      name = \"text\";\n      body = part;\n    } else if (/^\\(*\\/\\//.test(part) || part.startsWith(\"..\")) {\n      name = \"xpath\";\n      body = part;\n    } else {\n      name = \"css\";\n      body = part;\n    }\n    let capture = false;\n    if (name[0] === \"*\") {\n      capture = true;\n      name = name.substring(1);\n    }\n    result.parts.push({ name, body });\n    if (capture) {\n      if (result.capture !== void 0)\n        throw new InvalidSelectorError(`Only one of the selectors can capture using * modifier`);\n      result.capture = result.parts.length - 1;\n    }\n  };\n  if (!selector.includes(\">>\")) {\n    index = selector.length;\n    append();\n    return result;\n  }\n  const shouldIgnoreTextSelectorQuote = () => {\n    const prefix = selector.substring(start, index);\n    const match = prefix.match(/^\\s*text\\s*=(.*)$/);\n    return !!match && !!match[1];\n  };\n  while (index < selector.length) {\n    const c = selector[index];\n    if (c === \"\\\\\" && index + 1 < selector.length) {\n      index += 2;\n    } else if (c === quote) {\n      quote = void 0;\n      index++;\n    } else if (!quote && (c === '\"' || c === \"'\" || c === \"`\") && !shouldIgnoreTextSelectorQuote()) {\n      quote = c;\n      index++;\n    } else if (!quote && c === \">\" && selector[index + 1] === \">\") {\n      append();\n      index += 2;\n      start = index;\n    } else {\n      index++;\n    }\n  }\n  append();\n  return result;\n}\nfunction parseAttributeSelector(selector, allowUnquotedStrings) {\n  let wp = 0;\n  let EOL = selector.length === 0;\n  const next = () => selector[wp] || \"\";\n  const eat1 = () => {\n    const result2 = next();\n    ++wp;\n    EOL = wp >= selector.length;\n    return result2;\n  };\n  const syntaxError = (stage) => {\n    if (EOL)\n      throw new InvalidSelectorError(`Unexpected end of selector while parsing selector \\`${selector}\\``);\n    throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - unexpected symbol \"${next()}\" at position ${wp}` + (stage ? \" during \" + stage : \"\"));\n  };\n  function skipSpaces() {\n    while (!EOL && /\\s/.test(next()))\n      eat1();\n  }\n  function isCSSNameChar(char) {\n    return char >= \"\\x80\" || char >= \"0\" && char <= \"9\" || char >= \"A\" && char <= \"Z\" || char >= \"a\" && char <= \"z\" || char >= \"0\" && char <= \"9\" || char === \"_\" || char === \"-\";\n  }\n  function readIdentifier() {\n    let result2 = \"\";\n    skipSpaces();\n    while (!EOL && isCSSNameChar(next()))\n      result2 += eat1();\n    return result2;\n  }\n  function readQuotedString(quote) {\n    let result2 = eat1();\n    if (result2 !== quote)\n      syntaxError(\"parsing quoted string\");\n    while (!EOL && next() !== quote) {\n      if (next() === \"\\\\\")\n        eat1();\n      result2 += eat1();\n    }\n    if (next() !== quote)\n      syntaxError(\"parsing quoted string\");\n    result2 += eat1();\n    return result2;\n  }\n  function readRegularExpression() {\n    if (eat1() !== \"/\")\n      syntaxError(\"parsing regular expression\");\n    let source = \"\";\n    let inClass = false;\n    while (!EOL) {\n      if (next() === \"\\\\\") {\n        source += eat1();\n        if (EOL)\n          syntaxError(\"parsing regular expression\");\n      } else if (inClass && next() === \"]\") {\n        inClass = false;\n      } else if (!inClass && next() === \"[\") {\n        inClass = true;\n      } else if (!inClass && next() === \"/\") {\n        break;\n      }\n      source += eat1();\n    }\n    if (eat1() !== \"/\")\n      syntaxError(\"parsing regular expression\");\n    let flags = \"\";\n    while (!EOL && next().match(/[dgimsuy]/))\n      flags += eat1();\n    try {\n      return new RegExp(source, flags);\n    } catch (e) {\n      throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\`: ${e.message}`);\n    }\n  }\n  function readAttributeToken() {\n    let token = \"\";\n    skipSpaces();\n    if (next() === `'` || next() === `\"`)\n      token = readQuotedString(next()).slice(1, -1);\n    else\n      token = readIdentifier();\n    if (!token)\n      syntaxError(\"parsing property path\");\n    return token;\n  }\n  function readOperator() {\n    skipSpaces();\n    let op = \"\";\n    if (!EOL)\n      op += eat1();\n    if (!EOL && op !== \"=\")\n      op += eat1();\n    if (![\"=\", \"*=\", \"^=\", \"$=\", \"|=\", \"~=\"].includes(op))\n      syntaxError(\"parsing operator\");\n    return op;\n  }\n  function readAttribute() {\n    eat1();\n    const jsonPath = [];\n    jsonPath.push(readAttributeToken());\n    skipSpaces();\n    while (next() === \".\") {\n      eat1();\n      jsonPath.push(readAttributeToken());\n      skipSpaces();\n    }\n    if (next() === \"]\") {\n      eat1();\n      return { name: jsonPath.join(\".\"), jsonPath, op: \"<truthy>\", value: null, caseSensitive: false };\n    }\n    const operator = readOperator();\n    let value = void 0;\n    let caseSensitive = true;\n    skipSpaces();\n    if (next() === \"/\") {\n      if (operator !== \"=\")\n        throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - cannot use ${operator} in attribute with regular expression`);\n      value = readRegularExpression();\n    } else if (next() === `'` || next() === `\"`) {\n      value = readQuotedString(next()).slice(1, -1);\n      skipSpaces();\n      if (next() === \"i\" || next() === \"I\") {\n        caseSensitive = false;\n        eat1();\n      } else if (next() === \"s\" || next() === \"S\") {\n        caseSensitive = true;\n        eat1();\n      }\n    } else {\n      value = \"\";\n      while (!EOL && (isCSSNameChar(next()) || next() === \"+\" || next() === \".\"))\n        value += eat1();\n      if (value === \"true\") {\n        value = true;\n      } else if (value === \"false\") {\n        value = false;\n      } else {\n        if (!allowUnquotedStrings) {\n          value = +value;\n          if (Number.isNaN(value))\n            syntaxError(\"parsing attribute value\");\n        }\n      }\n    }\n    skipSpaces();\n    if (next() !== \"]\")\n      syntaxError(\"parsing attribute value\");\n    eat1();\n    if (operator !== \"=\" && typeof value !== \"string\")\n      throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - cannot use ${operator} in attribute with non-string matching value - ${value}`);\n    return { name: jsonPath.join(\".\"), jsonPath, op: operator, value, caseSensitive };\n  }\n  const result = {\n    name: \"\",\n    attributes: []\n  };\n  result.name = readIdentifier();\n  skipSpaces();\n  while (next() === \"[\") {\n    result.attributes.push(readAttribute());\n    skipSpaces();\n  }\n  if (!EOL)\n    syntaxError(void 0);\n  if (!result.name && !result.attributes.length)\n    throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - selector cannot be empty`);\n  return result;\n}\n\n// packages/playwright-core/src/utils/isomorphic/locatorGenerators.ts\nfunction asLocator(lang, selector, isFrameLocator = false) {\n  return asLocators(lang, selector, isFrameLocator)[0];\n}\nfunction asLocators(lang, selector, isFrameLocator = false, maxOutputSize = 20, preferredQuote) {\n  try {\n    return innerAsLocators(new generators[lang](preferredQuote), parseSelector(selector), isFrameLocator, maxOutputSize);\n  } catch (e) {\n    return [selector];\n  }\n}\nfunction innerAsLocators(factory, parsed, isFrameLocator = false, maxOutputSize = 20) {\n  const parts = [...parsed.parts];\n  for (let index = 0; index < parts.length - 1; index++) {\n    if (parts[index].name === \"nth\" && parts[index + 1].name === \"internal:control\" && parts[index + 1].body === \"enter-frame\") {\n      const [nth] = parts.splice(index, 1);\n      parts.splice(index + 1, 0, nth);\n    }\n  }\n  const tokens = [];\n  let nextBase = isFrameLocator ? \"frame-locator\" : \"page\";\n  for (let index = 0; index < parts.length; index++) {\n    const part = parts[index];\n    const base = nextBase;\n    nextBase = \"locator\";\n    if (part.name === \"nth\") {\n      if (part.body === \"0\")\n        tokens.push([factory.generateLocator(base, \"first\", \"\"), factory.generateLocator(base, \"nth\", \"0\")]);\n      else if (part.body === \"-1\")\n        tokens.push([factory.generateLocator(base, \"last\", \"\"), factory.generateLocator(base, \"nth\", \"-1\")]);\n      else\n        tokens.push([factory.generateLocator(base, \"nth\", part.body)]);\n      continue;\n    }\n    if (part.name === \"internal:text\") {\n      const { exact, text } = detectExact(part.body);\n      tokens.push([factory.generateLocator(base, \"text\", text, { exact })]);\n      continue;\n    }\n    if (part.name === \"internal:has-text\") {\n      const { exact, text } = detectExact(part.body);\n      if (!exact) {\n        tokens.push([factory.generateLocator(base, \"has-text\", text, { exact })]);\n        continue;\n      }\n    }\n    if (part.name === \"internal:has-not-text\") {\n      const { exact, text } = detectExact(part.body);\n      if (!exact) {\n        tokens.push([factory.generateLocator(base, \"has-not-text\", text, { exact })]);\n        continue;\n      }\n    }\n    if (part.name === \"internal:has\") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, \"has\", inner)));\n      continue;\n    }\n    if (part.name === \"internal:has-not\") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, \"hasNot\", inner)));\n      continue;\n    }\n    if (part.name === \"internal:and\") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, \"and\", inner)));\n      continue;\n    }\n    if (part.name === \"internal:or\") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, \"or\", inner)));\n      continue;\n    }\n    if (part.name === \"internal:chain\") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, \"chain\", inner)));\n      continue;\n    }\n    if (part.name === \"internal:label\") {\n      const { exact, text } = detectExact(part.body);\n      tokens.push([factory.generateLocator(base, \"label\", text, { exact })]);\n      continue;\n    }\n    if (part.name === \"internal:role\") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const options = { attrs: [] };\n      for (const attr of attrSelector.attributes) {\n        if (attr.name === \"name\") {\n          options.exact = attr.caseSensitive;\n          options.name = attr.value;\n        } else {\n          if (attr.name === \"level\" && typeof attr.value === \"string\")\n            attr.value = +attr.value;\n          options.attrs.push({ name: attr.name === \"include-hidden\" ? \"includeHidden\" : attr.name, value: attr.value });\n        }\n      }\n      tokens.push([factory.generateLocator(base, \"role\", attrSelector.name, options)]);\n      continue;\n    }\n    if (part.name === \"internal:testid\") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const { value } = attrSelector.attributes[0];\n      tokens.push([factory.generateLocator(base, \"test-id\", value)]);\n      continue;\n    }\n    if (part.name === \"internal:attr\") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const { name, value, caseSensitive } = attrSelector.attributes[0];\n      const text = value;\n      const exact = !!caseSensitive;\n      if (name === \"placeholder\") {\n        tokens.push([factory.generateLocator(base, \"placeholder\", text, { exact })]);\n        continue;\n      }\n      if (name === \"alt\") {\n        tokens.push([factory.generateLocator(base, \"alt\", text, { exact })]);\n        continue;\n      }\n      if (name === \"title\") {\n        tokens.push([factory.generateLocator(base, \"title\", text, { exact })]);\n        continue;\n      }\n    }\n    let locatorType = \"default\";\n    const nextPart = parts[index + 1];\n    if (nextPart && nextPart.name === \"internal:control\" && nextPart.body === \"enter-frame\") {\n      locatorType = \"frame\";\n      nextBase = \"frame-locator\";\n      index++;\n    }\n    const selectorPart = stringifySelector({ parts: [part] });\n    const locatorPart = factory.generateLocator(base, locatorType, selectorPart);\n    if (locatorType === \"default\" && nextPart && [\"internal:has-text\", \"internal:has-not-text\"].includes(nextPart.name)) {\n      const { exact, text } = detectExact(nextPart.body);\n      if (!exact) {\n        const nextLocatorPart = factory.generateLocator(\"locator\", nextPart.name === \"internal:has-text\" ? \"has-text\" : \"has-not-text\", text, { exact });\n        const options = {};\n        if (nextPart.name === \"internal:has-text\")\n          options.hasText = text;\n        else\n          options.hasNotText = text;\n        const combinedPart = factory.generateLocator(base, \"default\", selectorPart, options);\n        tokens.push([factory.chainLocators([locatorPart, nextLocatorPart]), combinedPart]);\n        index++;\n        continue;\n      }\n    }\n    let locatorPartWithEngine;\n    if ([\"xpath\", \"css\"].includes(part.name)) {\n      const selectorPart2 = stringifySelector(\n        { parts: [part] },\n        /* forceEngineName */\n        true\n      );\n      locatorPartWithEngine = factory.generateLocator(base, locatorType, selectorPart2);\n    }\n    tokens.push([locatorPart, locatorPartWithEngine].filter(Boolean));\n  }\n  return combineTokens(factory, tokens, maxOutputSize);\n}\nfunction combineTokens(factory, tokens, maxOutputSize) {\n  const currentTokens = tokens.map(() => \"\");\n  const result = [];\n  const visit = (index) => {\n    if (index === tokens.length) {\n      result.push(factory.chainLocators(currentTokens));\n      return currentTokens.length < maxOutputSize;\n    }\n    for (const taken of tokens[index]) {\n      currentTokens[index] = taken;\n      if (!visit(index + 1))\n        return false;\n    }\n    return true;\n  };\n  visit(0);\n  return result;\n}\nfunction detectExact(text) {\n  let exact = false;\n  const match = text.match(/^\\/(.*)\\/([igm]*)$/);\n  if (match)\n    return { text: new RegExp(match[1], match[2]) };\n  if (text.endsWith('\"')) {\n    text = JSON.parse(text);\n    exact = true;\n  } else if (text.endsWith('\"s')) {\n    text = JSON.parse(text.substring(0, text.length - 1));\n    exact = true;\n  } else if (text.endsWith('\"i')) {\n    text = JSON.parse(text.substring(0, text.length - 1));\n    exact = false;\n  }\n  return { exact, text };\n}\nvar JavaScriptLocatorFactory = class {\n  constructor(preferredQuote) {\n    this.preferredQuote = preferredQuote;\n  }\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case \"default\":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, { hasText: ${this.toHasText(options.hasText)} })`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, { hasNotText: ${this.toHasText(options.hasNotText)} })`;\n        return `locator(${this.quote(body)})`;\n      case \"frame\":\n        return `frameLocator(${this.quote(body)})`;\n      case \"nth\":\n        return `nth(${body})`;\n      case \"first\":\n        return `first()`;\n      case \"last\":\n        return `last()`;\n      case \"role\":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`name: ${this.regexToSourceString(options.name)}`);\n        } else if (typeof options.name === \"string\") {\n          attrs.push(`name: ${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`exact: true`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`${name}: ${typeof value === \"string\" ? this.quote(value) : value}`);\n        const attrString = attrs.length ? `, { ${attrs.join(\", \")} }` : \"\";\n        return `getByRole(${this.quote(body)}${attrString})`;\n      case \"has-text\":\n        return `filter({ hasText: ${this.toHasText(body)} })`;\n      case \"has-not-text\":\n        return `filter({ hasNotText: ${this.toHasText(body)} })`;\n      case \"has\":\n        return `filter({ has: ${body} })`;\n      case \"hasNot\":\n        return `filter({ hasNot: ${body} })`;\n      case \"and\":\n        return `and(${body})`;\n      case \"or\":\n        return `or(${body})`;\n      case \"chain\":\n        return `locator(${body})`;\n      case \"test-id\":\n        return `getByTestId(${this.toTestIdValue(body)})`;\n      case \"text\":\n        return this.toCallWithExact(\"getByText\", body, !!options.exact);\n      case \"alt\":\n        return this.toCallWithExact(\"getByAltText\", body, !!options.exact);\n      case \"placeholder\":\n        return this.toCallWithExact(\"getByPlaceholder\", body, !!options.exact);\n      case \"label\":\n        return this.toCallWithExact(\"getByLabel\", body, !!options.exact);\n      case \"title\":\n        return this.toCallWithExact(\"getByTitle\", body, !!options.exact);\n      default:\n        throw new Error(\"Unknown selector kind \" + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(\".\");\n  }\n  regexToSourceString(re) {\n    return normalizeEscapedRegexQuotes(String(re));\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToSourceString(body)})`;\n    return exact ? `${method}(${this.quote(body)}, { exact: true })` : `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToSourceString(body);\n    return this.quote(body);\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToSourceString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    var _a;\n    return escapeWithQuotes(text, (_a = this.preferredQuote) != null ? _a : \"'\");\n  }\n};\nvar PythonLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case \"default\":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, has_text=${this.toHasText(options.hasText)})`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, has_not_text=${this.toHasText(options.hasNotText)})`;\n        return `locator(${this.quote(body)})`;\n      case \"frame\":\n        return `frame_locator(${this.quote(body)})`;\n      case \"nth\":\n        return `nth(${body})`;\n      case \"first\":\n        return `first`;\n      case \"last\":\n        return `last`;\n      case \"role\":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`name=${this.regexToString(options.name)}`);\n        } else if (typeof options.name === \"string\") {\n          attrs.push(`name=${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`exact=True`);\n        }\n        for (const { name, value } of options.attrs) {\n          let valueString = typeof value === \"string\" ? this.quote(value) : value;\n          if (typeof value === \"boolean\")\n            valueString = value ? \"True\" : \"False\";\n          attrs.push(`${toSnakeCase(name)}=${valueString}`);\n        }\n        const attrString = attrs.length ? `, ${attrs.join(\", \")}` : \"\";\n        return `get_by_role(${this.quote(body)}${attrString})`;\n      case \"has-text\":\n        return `filter(has_text=${this.toHasText(body)})`;\n      case \"has-not-text\":\n        return `filter(has_not_text=${this.toHasText(body)})`;\n      case \"has\":\n        return `filter(has=${body})`;\n      case \"hasNot\":\n        return `filter(has_not=${body})`;\n      case \"and\":\n        return `and_(${body})`;\n      case \"or\":\n        return `or_(${body})`;\n      case \"chain\":\n        return `locator(${body})`;\n      case \"test-id\":\n        return `get_by_test_id(${this.toTestIdValue(body)})`;\n      case \"text\":\n        return this.toCallWithExact(\"get_by_text\", body, !!options.exact);\n      case \"alt\":\n        return this.toCallWithExact(\"get_by_alt_text\", body, !!options.exact);\n      case \"placeholder\":\n        return this.toCallWithExact(\"get_by_placeholder\", body, !!options.exact);\n      case \"label\":\n        return this.toCallWithExact(\"get_by_label\", body, !!options.exact);\n      case \"title\":\n        return this.toCallWithExact(\"get_by_title\", body, !!options.exact);\n      default:\n        throw new Error(\"Unknown selector kind \" + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(\".\");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes(\"i\") ? \", re.IGNORECASE\" : \"\";\n    return `re.compile(r\"${normalizeEscapedRegexQuotes(body.source).replace(/\\\\\\//, \"/\").replace(/\"/g, '\\\\\"')}\"${suffix})`;\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, exact=True)`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToString(body);\n    return `${this.quote(body)}`;\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    return escapeWithQuotes(text, '\"');\n  }\n};\nvar JavaLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    let clazz;\n    switch (base) {\n      case \"page\":\n        clazz = \"Page\";\n        break;\n      case \"frame-locator\":\n        clazz = \"FrameLocator\";\n        break;\n      case \"locator\":\n        clazz = \"Locator\";\n        break;\n    }\n    switch (kind) {\n      case \"default\":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasText(${this.toHasText(options.hasText)}))`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasNotText(${this.toHasText(options.hasNotText)}))`;\n        return `locator(${this.quote(body)})`;\n      case \"frame\":\n        return `frameLocator(${this.quote(body)})`;\n      case \"nth\":\n        return `nth(${body})`;\n      case \"first\":\n        return `first()`;\n      case \"last\":\n        return `last()`;\n      case \"role\":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`.setName(${this.regexToString(options.name)})`);\n        } else if (typeof options.name === \"string\") {\n          attrs.push(`.setName(${this.quote(options.name)})`);\n          if (options.exact)\n            attrs.push(`.setExact(true)`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`.set${toTitleCase(name)}(${typeof value === \"string\" ? this.quote(value) : value})`);\n        const attrString = attrs.length ? `, new ${clazz}.GetByRoleOptions()${attrs.join(\"\")}` : \"\";\n        return `getByRole(AriaRole.${toSnakeCase(body).toUpperCase()}${attrString})`;\n      case \"has-text\":\n        return `filter(new ${clazz}.FilterOptions().setHasText(${this.toHasText(body)}))`;\n      case \"has-not-text\":\n        return `filter(new ${clazz}.FilterOptions().setHasNotText(${this.toHasText(body)}))`;\n      case \"has\":\n        return `filter(new ${clazz}.FilterOptions().setHas(${body}))`;\n      case \"hasNot\":\n        return `filter(new ${clazz}.FilterOptions().setHasNot(${body}))`;\n      case \"and\":\n        return `and(${body})`;\n      case \"or\":\n        return `or(${body})`;\n      case \"chain\":\n        return `locator(${body})`;\n      case \"test-id\":\n        return `getByTestId(${this.toTestIdValue(body)})`;\n      case \"text\":\n        return this.toCallWithExact(clazz, \"getByText\", body, !!options.exact);\n      case \"alt\":\n        return this.toCallWithExact(clazz, \"getByAltText\", body, !!options.exact);\n      case \"placeholder\":\n        return this.toCallWithExact(clazz, \"getByPlaceholder\", body, !!options.exact);\n      case \"label\":\n        return this.toCallWithExact(clazz, \"getByLabel\", body, !!options.exact);\n      case \"title\":\n        return this.toCallWithExact(clazz, \"getByTitle\", body, !!options.exact);\n      default:\n        throw new Error(\"Unknown selector kind \" + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(\".\");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes(\"i\") ? \", Pattern.CASE_INSENSITIVE\" : \"\";\n    return `Pattern.compile(${this.quote(normalizeEscapedRegexQuotes(body.source))}${suffix})`;\n  }\n  toCallWithExact(clazz, method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, new ${clazz}.${toTitleCase(method)}Options().setExact(true))`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToString(body);\n    return this.quote(body);\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    return escapeWithQuotes(text, '\"');\n  }\n};\nvar CSharpLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case \"default\":\n        if (options.hasText !== void 0)\n          return `Locator(${this.quote(body)}, new() { ${this.toHasText(options.hasText)} })`;\n        if (options.hasNotText !== void 0)\n          return `Locator(${this.quote(body)}, new() { ${this.toHasNotText(options.hasNotText)} })`;\n        return `Locator(${this.quote(body)})`;\n      case \"frame\":\n        return `FrameLocator(${this.quote(body)})`;\n      case \"nth\":\n        return `Nth(${body})`;\n      case \"first\":\n        return `First`;\n      case \"last\":\n        return `Last`;\n      case \"role\":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`NameRegex = ${this.regexToString(options.name)}`);\n        } else if (typeof options.name === \"string\") {\n          attrs.push(`Name = ${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`Exact = true`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`${toTitleCase(name)} = ${typeof value === \"string\" ? this.quote(value) : value}`);\n        const attrString = attrs.length ? `, new() { ${attrs.join(\", \")} }` : \"\";\n        return `GetByRole(AriaRole.${toTitleCase(body)}${attrString})`;\n      case \"has-text\":\n        return `Filter(new() { ${this.toHasText(body)} })`;\n      case \"has-not-text\":\n        return `Filter(new() { ${this.toHasNotText(body)} })`;\n      case \"has\":\n        return `Filter(new() { Has = ${body} })`;\n      case \"hasNot\":\n        return `Filter(new() { HasNot = ${body} })`;\n      case \"and\":\n        return `And(${body})`;\n      case \"or\":\n        return `Or(${body})`;\n      case \"chain\":\n        return `Locator(${body})`;\n      case \"test-id\":\n        return `GetByTestId(${this.toTestIdValue(body)})`;\n      case \"text\":\n        return this.toCallWithExact(\"GetByText\", body, !!options.exact);\n      case \"alt\":\n        return this.toCallWithExact(\"GetByAltText\", body, !!options.exact);\n      case \"placeholder\":\n        return this.toCallWithExact(\"GetByPlaceholder\", body, !!options.exact);\n      case \"label\":\n        return this.toCallWithExact(\"GetByLabel\", body, !!options.exact);\n      case \"title\":\n        return this.toCallWithExact(\"GetByTitle\", body, !!options.exact);\n      default:\n        throw new Error(\"Unknown selector kind \" + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(\".\");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes(\"i\") ? \", RegexOptions.IgnoreCase\" : \"\";\n    return `new Regex(${this.quote(normalizeEscapedRegexQuotes(body.source))}${suffix})`;\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, new() { Exact = true })`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return `HasTextRegex = ${this.regexToString(body)}`;\n    return `HasText = ${this.quote(body)}`;\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  toHasNotText(body) {\n    if (isRegExp(body))\n      return `HasNotTextRegex = ${this.regexToString(body)}`;\n    return `HasNotText = ${this.quote(body)}`;\n  }\n  quote(text) {\n    return escapeWithQuotes(text, '\"');\n  }\n};\nvar JsonlLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    return JSON.stringify({\n      kind,\n      body,\n      options\n    });\n  }\n  chainLocators(locators) {\n    const objects = locators.map((l) => JSON.parse(l));\n    for (let i = 0; i < objects.length - 1; ++i)\n      objects[i].next = objects[i + 1];\n    return JSON.stringify(objects[0]);\n  }\n};\nvar generators = {\n  javascript: JavaScriptLocatorFactory,\n  python: PythonLocatorFactory,\n  java: JavaLocatorFactory,\n  csharp: CSharpLocatorFactory,\n  jsonl: JsonlLocatorFactory\n};\nfunction isRegExp(obj) {\n  return obj instanceof RegExp;\n}\n\n// packages/playwright-core/src/server/injected/consoleApi.ts\nvar selectorSymbol = Symbol(\"selector\");\nvar _Locator = class _Locator {\n  constructor(injectedScript, selector, options) {\n    if (options == null ? void 0 : options.hasText)\n      selector += ` >> internal:has-text=${escapeForTextSelector(options.hasText, false)}`;\n    if (options == null ? void 0 : options.hasNotText)\n      selector += ` >> internal:has-not-text=${escapeForTextSelector(options.hasNotText, false)}`;\n    if (options == null ? void 0 : options.has)\n      selector += ` >> internal:has=` + JSON.stringify(options.has[selectorSymbol]);\n    if (options == null ? void 0 : options.hasNot)\n      selector += ` >> internal:has-not=` + JSON.stringify(options.hasNot[selectorSymbol]);\n    this[selectorSymbol] = selector;\n    if (selector) {\n      const parsed = injectedScript.parseSelector(selector);\n      this.element = injectedScript.querySelector(parsed, injectedScript.document, false);\n      this.elements = injectedScript.querySelectorAll(parsed, injectedScript.document);\n    }\n    const selectorBase = selector;\n    const self = this;\n    self.locator = (selector2, options2) => {\n      return new _Locator(injectedScript, selectorBase ? selectorBase + \" >> \" + selector2 : selector2, options2);\n    };\n    self.getByTestId = (testId) => self.locator(getByTestIdSelector(injectedScript.testIdAttributeNameForStrictErrorAndConsoleCodegen(), testId));\n    self.getByAltText = (text, options2) => self.locator(getByAltTextSelector(text, options2));\n    self.getByLabel = (text, options2) => self.locator(getByLabelSelector(text, options2));\n    self.getByPlaceholder = (text, options2) => self.locator(getByPlaceholderSelector(text, options2));\n    self.getByText = (text, options2) => self.locator(getByTextSelector(text, options2));\n    self.getByTitle = (text, options2) => self.locator(getByTitleSelector(text, options2));\n    self.getByRole = (role, options2 = {}) => self.locator(getByRoleSelector(role, options2));\n    self.filter = (options2) => new _Locator(injectedScript, selector, options2);\n    self.first = () => self.locator(\"nth=0\");\n    self.last = () => self.locator(\"nth=-1\");\n    self.nth = (index) => self.locator(`nth=${index}`);\n    self.and = (locator) => new _Locator(injectedScript, selectorBase + ` >> internal:and=` + JSON.stringify(locator[selectorSymbol]));\n    self.or = (locator) => new _Locator(injectedScript, selectorBase + ` >> internal:or=` + JSON.stringify(locator[selectorSymbol]));\n  }\n};\nselectorSymbol;\nvar Locator = _Locator;\nvar ConsoleAPI = class {\n  constructor(injectedScript) {\n    this._injectedScript = injectedScript;\n    if (this._injectedScript.window.playwright)\n      return;\n    this._injectedScript.window.playwright = {\n      $: (selector, strict) => this._querySelector(selector, !!strict),\n      $$: (selector) => this._querySelectorAll(selector),\n      inspect: (selector) => this._inspect(selector),\n      selector: (element) => this._selector(element),\n      generateLocator: (element, language) => this._generateLocator(element, language),\n      resume: () => this._resume(),\n      ...new Locator(injectedScript, \"\")\n    };\n    delete this._injectedScript.window.playwright.filter;\n    delete this._injectedScript.window.playwright.first;\n    delete this._injectedScript.window.playwright.last;\n    delete this._injectedScript.window.playwright.nth;\n    delete this._injectedScript.window.playwright.and;\n    delete this._injectedScript.window.playwright.or;\n  }\n  _querySelector(selector, strict) {\n    if (typeof selector !== \"string\")\n      throw new Error(`Usage: playwright.query('Playwright >> selector').`);\n    const parsed = this._injectedScript.parseSelector(selector);\n    return this._injectedScript.querySelector(parsed, this._injectedScript.document, strict);\n  }\n  _querySelectorAll(selector) {\n    if (typeof selector !== \"string\")\n      throw new Error(`Usage: playwright.$$('Playwright >> selector').`);\n    const parsed = this._injectedScript.parseSelector(selector);\n    return this._injectedScript.querySelectorAll(parsed, this._injectedScript.document);\n  }\n  _inspect(selector) {\n    if (typeof selector !== \"string\")\n      throw new Error(`Usage: playwright.inspect('Playwright >> selector').`);\n    this._injectedScript.window.inspect(this._querySelector(selector, false));\n  }\n  _selector(element) {\n    if (!(element instanceof Element))\n      throw new Error(`Usage: playwright.selector(element).`);\n    return this._injectedScript.generateSelectorSimple(element);\n  }\n  _generateLocator(element, language) {\n    if (!(element instanceof Element))\n      throw new Error(`Usage: playwright.locator(element).`);\n    const selector = this._injectedScript.generateSelectorSimple(element);\n    return asLocator(language || \"javascript\", selector);\n  }\n  _resume() {\n    this._injectedScript.window.__pw_resume().catch(() => {\n    });\n  }\n};\nvar consoleApi_default = ConsoleAPI;\n";
});

// node_modules/playwright-core/lib/server/chromium/appIcon.png
var exports_appIcon = {};
__export(exports_appIcon, {
  default: () => {
    {
      return appIcon_default;
    }
  }
});
var appIcon_default;
var init_appIcon = __esm(() => {
  appIcon_default = "./appIcon-feda845524d897ac.png";
});

// node_modules/playwright-core/lib/server/launchApp.js
var require_launchApp = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  async function launchApp(browserType, options) {
    var _options$persistentCo, _options$persistentCo2;
    const args = [...(_options$persistentCo = (_options$persistentCo2 = options.persistentContextOptions) === null || _options$persistentCo2 === undefined ? undefined : _options$persistentCo2.args) !== null && _options$persistentCo !== undefined ? _options$persistentCo : []];
    if (browserType.name() === "chromium") {
      args.push("--app=data:text/html,", `--window-size=${options.windowSize.width},${options.windowSize.height}`, ...options.windowPosition ? [`--window-position=${options.windowPosition.x},${options.windowPosition.y}`] : [], "--test-type=");
    }
    const context = await browserType.launchPersistentContext((0, _instrumentation.serverSideCallMetadata)(), "", {
      channel: (0, _registry.findChromiumChannel)(options.sdkLanguage),
      noDefaultViewport: true,
      ignoreDefaultArgs: ["--enable-automation"],
      colorScheme: "no-override",
      acceptDownloads: (0, _utils.isUnderTest)() ? "accept" : "internal-browser-default",
      ...options === null || options === undefined ? undefined : options.persistentContextOptions,
      args
    });
    const [page] = context.pages();
    if (browserType.name() === "chromium" && process.platform === "darwin") {
      context.on("page", async (newPage) => {
        if (newPage.mainFrame().url() === "chrome://new-tab-page/") {
          await page.bringToFront();
          await newPage.close((0, _instrumentation.serverSideCallMetadata)());
        }
      });
    }
    if (browserType.name() === "chromium")
      await installAppIcon(page);
    return {
      context,
      page
    };
  }
  async function installAppIcon(page) {
    const icon = await _fs.default.promises.readFile(import.meta.require.resolve("/Users/hottin/project/jwave_playlist/node_modules/playwright-core/lib/server/chromium/appIcon.png"));
    const crPage = page._delegate;
    await crPage._mainFrameSession._client.send("Browser.setDockTile", {
      image: icon.toString("base64")
    });
  }
  async function syncLocalStorageWithSettings(page, appName) {
    if ((0, _utils.isUnderTest)())
      return;
    const settingsFile = _path.default.join(_registry.registryDirectory, ".settings", `${appName}.json`);
    await page.exposeBinding("_saveSerializedSettings", false, (_, settings2) => {
      _fs.default.mkdirSync(_path.default.dirname(settingsFile), {
        recursive: true
      });
      _fs.default.writeFileSync(settingsFile, settings2);
    });
    const settings = await _fs.default.promises.readFile(settingsFile, "utf-8").catch(() => "{}");
    await page.addInitScript(`(${String((settings2) => {
      if (location && location.protocol === "data:")
        return;
      Object.entries(settings2).map(([k, v]) => localStorage[k] = v);
      window.saveSettings = () => {
        window._saveSerializedSettings(JSON.stringify({
          ...localStorage
        }));
      };
    })})(${settings});
  `);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.launchApp = launchApp;
  exports.syncLocalStorageWithSettings = syncLocalStorageWithSettings;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _registry = require_registry();
  var _utils = require_utils3();
  var _instrumentation = require_instrumentation();
});

// node_modules/playwright-core/lib/server/download.js
var require_download = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Download = undefined;
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _page = require_page();
  var _utils = require_utils3();
  var _artifact = require_artifact();

  class Download {
    constructor(page, downloadsPath, uuid, url, suggestedFilename) {
      this.artifact = undefined;
      this.url = undefined;
      this._page = undefined;
      this._suggestedFilename = undefined;
      const unaccessibleErrorMessage = page._browserContext._options.acceptDownloads === "deny" ? "Pass { acceptDownloads: true } when you are creating your browser context." : undefined;
      this.artifact = new _artifact.Artifact(page, _path.default.join(downloadsPath, uuid), unaccessibleErrorMessage, () => {
        return this._page._browserContext.cancelDownload(uuid);
      });
      this._page = page;
      this.url = url;
      this._suggestedFilename = suggestedFilename;
      page._browserContext._downloads.add(this);
      if (suggestedFilename !== undefined)
        this._page.emit(_page.Page.Events.Download, this);
    }
    _filenameSuggested(suggestedFilename) {
      (0, _utils.assert)(this._suggestedFilename === undefined);
      this._suggestedFilename = suggestedFilename;
      this._page.emit(_page.Page.Events.Download, this);
    }
    suggestedFilename() {
      return this._suggestedFilename;
    }
  }
  exports.Download = Download;
});

// node_modules/playwright-core/lib/server/browser.js
var require_browser5 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Browser = undefined;
  var _browserContext = require_browserContext();
  var _page = require_page();
  var _download = require_download();
  var _instrumentation = require_instrumentation();
  var _artifact = require_artifact();

  class Browser extends _instrumentation.SdkObject {
    constructor(parent, options) {
      super(parent, "browser");
      this.options = undefined;
      this._downloads = new Map;
      this._defaultContext = null;
      this._startedClosing = false;
      this._idToVideo = new Map;
      this._contextForReuse = undefined;
      this._closeReason = undefined;
      this._isCollocatedWithServer = true;
      this.attribution.browser = this;
      this.options = options;
      this.instrumentation.onBrowserOpen(this);
    }
    async newContext(metadata, options) {
      (0, _browserContext.validateBrowserContextOptions)(options, this.options);
      const context = await this.doCreateNewContext(options);
      if (options.storageState)
        await context.setStorageState(metadata, options.storageState);
      return context;
    }
    async newContextForReuse(params, metadata) {
      const hash = _browserContext.BrowserContext.reusableContextHash(params);
      if (!this._contextForReuse || hash !== this._contextForReuse.hash || !this._contextForReuse.context.canResetForReuse()) {
        if (this._contextForReuse)
          await this._contextForReuse.context.close({
            reason: "Context reused"
          });
        this._contextForReuse = {
          context: await this.newContext(metadata, params),
          hash
        };
        return {
          context: this._contextForReuse.context,
          needsReset: false
        };
      }
      await this._contextForReuse.context.stopPendingOperations("Context recreated");
      return {
        context: this._contextForReuse.context,
        needsReset: true
      };
    }
    async stopPendingOperations(reason) {
      var _this$_contextForReus;
      await ((_this$_contextForReus = this._contextForReuse) === null || _this$_contextForReus === undefined || (_this$_contextForReus = _this$_contextForReus.context) === null || _this$_contextForReus === undefined ? undefined : _this$_contextForReus.stopPendingOperations(reason));
    }
    _downloadCreated(page, uuid, url, suggestedFilename) {
      const download = new _download.Download(page, this.options.downloadsPath || "", uuid, url, suggestedFilename);
      this._downloads.set(uuid, download);
    }
    _downloadFilenameSuggested(uuid, suggestedFilename) {
      const download = this._downloads.get(uuid);
      if (!download)
        return;
      download._filenameSuggested(suggestedFilename);
    }
    _downloadFinished(uuid, error) {
      const download = this._downloads.get(uuid);
      if (!download)
        return;
      download.artifact.reportFinished(error ? new Error(error) : undefined);
      this._downloads.delete(uuid);
    }
    _videoStarted(context, videoId, path, pageOrError) {
      const artifact = new _artifact.Artifact(context, path);
      this._idToVideo.set(videoId, {
        context,
        artifact
      });
      pageOrError.then((page) => {
        if (page instanceof _page.Page) {
          page._video = artifact;
          page.emitOnContext(_browserContext.BrowserContext.Events.VideoStarted, artifact);
          page.emit(_page.Page.Events.Video, artifact);
        }
      });
    }
    _takeVideo(videoId) {
      const video = this._idToVideo.get(videoId);
      this._idToVideo.delete(videoId);
      return video === null || video === undefined ? undefined : video.artifact;
    }
    _didClose() {
      for (const context of this.contexts())
        context._browserClosed();
      if (this._defaultContext)
        this._defaultContext._browserClosed();
      this.emit(Browser.Events.Disconnected);
      this.instrumentation.onBrowserClose(this);
    }
    async close(options) {
      if (!this._startedClosing) {
        if (options.reason)
          this._closeReason = options.reason;
        this._startedClosing = true;
        await this.options.browserProcess.close();
      }
      if (this.isConnected())
        await new Promise((x) => this.once(Browser.Events.Disconnected, x));
    }
    async killForTests() {
      await this.options.browserProcess.kill();
    }
  }
  exports.Browser = Browser;
  Browser.Events = {
    Disconnected: "disconnected"
  };
});

// node_modules/playwright-core/lib/server/chromium/crConnection.js
var require_crConnection = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.kBrowserCloseMessageId = exports.ConnectionEvents = exports.CRSession = exports.CRConnection = exports.CDPSession = undefined;
  var _utils = require_utils3();
  var _events = import.meta.require("events");
  var _debugLogger = require_debugLogger();
  var _helper = require_helper();
  var _protocolError = require_protocolError();
  var ConnectionEvents = exports.ConnectionEvents = {
    Disconnected: Symbol("ConnectionEvents.Disconnected")
  };
  var kBrowserCloseMessageId = exports.kBrowserCloseMessageId = -9999;

  class CRConnection extends _events.EventEmitter {
    constructor(transport, protocolLogger, browserLogsCollector) {
      super();
      this._lastId = 0;
      this._transport = undefined;
      this._sessions = new Map;
      this._protocolLogger = undefined;
      this._browserLogsCollector = undefined;
      this._browserDisconnectedLogs = undefined;
      this.rootSession = undefined;
      this._closed = false;
      this.setMaxListeners(0);
      this._transport = transport;
      this._protocolLogger = protocolLogger;
      this._browserLogsCollector = browserLogsCollector;
      this.rootSession = new CRSession(this, null, "");
      this._sessions.set("", this.rootSession);
      this._transport.onmessage = this._onMessage.bind(this);
      this._transport.onclose = this._onClose.bind(this);
    }
    _rawSend(sessionId, method, params) {
      const id = ++this._lastId;
      const message = {
        id,
        method,
        params
      };
      if (sessionId)
        message.sessionId = sessionId;
      this._protocolLogger("send", message);
      this._transport.send(message);
      return id;
    }
    async _onMessage(message) {
      this._protocolLogger("receive", message);
      if (message.id === kBrowserCloseMessageId)
        return;
      const session = this._sessions.get(message.sessionId || "");
      if (session)
        session._onMessage(message);
    }
    _onClose(reason) {
      this._closed = true;
      this._transport.onmessage = undefined;
      this._transport.onclose = undefined;
      this._browserDisconnectedLogs = _helper.helper.formatBrowserLogs(this._browserLogsCollector.recentLogs(), reason);
      this.rootSession.dispose();
      Promise.resolve().then(() => this.emit(ConnectionEvents.Disconnected));
    }
    close() {
      if (!this._closed)
        this._transport.close();
    }
    async createBrowserSession() {
      const {
        sessionId
      } = await this.rootSession.send("Target.attachToBrowserTarget");
      return new CDPSession(this.rootSession, sessionId);
    }
  }
  exports.CRConnection = CRConnection;

  class CRSession extends _events.EventEmitter {
    constructor(connection, parentSession, sessionId, eventListener) {
      super();
      this._connection = undefined;
      this._eventListener = undefined;
      this._callbacks = new Map;
      this._sessionId = undefined;
      this._parentSession = undefined;
      this._crashed = false;
      this._closed = false;
      this.on = undefined;
      this.addListener = undefined;
      this.off = undefined;
      this.removeListener = undefined;
      this.once = undefined;
      this.setMaxListeners(0);
      this._connection = connection;
      this._parentSession = parentSession;
      this._sessionId = sessionId;
      this._eventListener = eventListener;
      this.on = super.on;
      this.addListener = super.addListener;
      this.off = super.removeListener;
      this.removeListener = super.removeListener;
      this.once = super.once;
    }
    _markAsCrashed() {
      this._crashed = true;
    }
    createChildSession(sessionId, eventListener) {
      const session = new CRSession(this._connection, this, sessionId, eventListener);
      this._connection._sessions.set(sessionId, session);
      return session;
    }
    async send(method, params) {
      if (this._crashed || this._closed || this._connection._closed || this._connection._browserDisconnectedLogs)
        throw new _protocolError.ProtocolError(this._crashed ? "crashed" : "closed", undefined, this._connection._browserDisconnectedLogs);
      const id = this._connection._rawSend(this._sessionId, method, params);
      return new Promise((resolve, reject) => {
        this._callbacks.set(id, {
          resolve,
          reject,
          error: new _protocolError.ProtocolError("error", method)
        });
      });
    }
    _sendMayFail(method, params) {
      return this.send(method, params).catch((error) => _debugLogger.debugLogger.log("error", error));
    }
    _onMessage(object) {
      var _object$error;
      if (object.id && this._callbacks.has(object.id)) {
        const callback = this._callbacks.get(object.id);
        this._callbacks.delete(object.id);
        if (object.error) {
          callback.error.setMessage(object.error.message);
          callback.reject(callback.error);
        } else {
          callback.resolve(object.result);
        }
      } else if (object.id && ((_object$error = object.error) === null || _object$error === undefined ? undefined : _object$error.code) === -32001) {
      } else {
        var _object$error2;
        (0, _utils.assert)(!object.id, (object === null || object === undefined || (_object$error2 = object.error) === null || _object$error2 === undefined ? undefined : _object$error2.message) || undefined);
        Promise.resolve().then(() => {
          if (this._eventListener)
            this._eventListener(object.method, object.params);
          this.emit(object.method, object.params);
        });
      }
    }
    async detach() {
      if (this._closed)
        throw new Error(`Session already detached. Most likely the page has been closed.`);
      if (!this._parentSession)
        throw new Error("Root session cannot be closed");
      await this._sendMayFail("Runtime.runIfWaitingForDebugger");
      await this._parentSession.send("Target.detachFromTarget", {
        sessionId: this._sessionId
      });
      this.dispose();
    }
    dispose() {
      this._closed = true;
      this._connection._sessions.delete(this._sessionId);
      for (const callback of this._callbacks.values()) {
        callback.error.setMessage(`Internal server error, session closed.`);
        callback.error.type = this._crashed ? "crashed" : "closed";
        callback.error.logs = this._connection._browserDisconnectedLogs;
        callback.reject(callback.error);
      }
      this._callbacks.clear();
    }
  }
  exports.CRSession = CRSession;

  class CDPSession extends _events.EventEmitter {
    constructor(parentSession, sessionId) {
      super();
      this.guid = undefined;
      this._session = undefined;
      this._listeners = [];
      this.guid = `cdp-session@${sessionId}`;
      this._session = parentSession.createChildSession(sessionId, (method, params) => this.emit(CDPSession.Events.Event, {
        method,
        params
      }));
      this._listeners = [_utils.eventsHelper.addEventListener(parentSession, "Target.detachedFromTarget", (event) => {
        if (event.sessionId === sessionId)
          this._onClose();
      })];
    }
    async send(method, params) {
      return await this._session.send(method, params);
    }
    async detach() {
      return await this._session.detach();
    }
    async attachToTarget(targetId) {
      const {
        sessionId
      } = await this.send("Target.attachToTarget", {
        targetId,
        flatten: true
      });
      return new CDPSession(this._session, sessionId);
    }
    _onClose() {
      _utils.eventsHelper.removeEventListeners(this._listeners);
      this._session.dispose();
      this.emit(CDPSession.Events.Closed);
    }
  }
  exports.CDPSession = CDPSession;
  CDPSession.Events = {
    Event: "event",
    Closed: "close"
  };
});

// node_modules/playwright-core/lib/server/dialog.js
var require_dialog = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Dialog = undefined;
  var _utils = require_utils3();
  var _instrumentation = require_instrumentation();

  class Dialog extends _instrumentation.SdkObject {
    constructor(page, type, message, onHandle, defaultValue) {
      super(page, "dialog");
      this._page = undefined;
      this._type = undefined;
      this._message = undefined;
      this._onHandle = undefined;
      this._handled = false;
      this._defaultValue = undefined;
      this._page = page;
      this._type = type;
      this._message = message;
      this._onHandle = onHandle;
      this._defaultValue = defaultValue || "";
      this._page._frameManager.dialogDidOpen(this);
    }
    page() {
      return this._page;
    }
    type() {
      return this._type;
    }
    message() {
      return this._message;
    }
    defaultValue() {
      return this._defaultValue;
    }
    async accept(promptText) {
      (0, _utils.assert)(!this._handled, "Cannot accept dialog which is already handled!");
      this._handled = true;
      this._page._frameManager.dialogWillClose(this);
      await this._onHandle(true, promptText);
    }
    async dismiss() {
      (0, _utils.assert)(!this._handled, "Cannot dismiss dialog which is already handled!");
      this._handled = true;
      this._page._frameManager.dialogWillClose(this);
      await this._onHandle(false);
    }
    async close() {
      if (this._type === "beforeunload")
        await this.accept();
      else
        await this.dismiss();
    }
  }
  exports.Dialog = Dialog;
});

// node_modules/playwright-core/lib/server/chromium/crAccessibility.js
var require_crAccessibility = __commonJS((exports) => {
  async function getAccessibilityTree(client, needle) {
    const {
      nodes
    } = await client.send("Accessibility.getFullAXTree");
    const tree = CRAXNode.createTree(client, nodes);
    return {
      tree,
      needle: needle ? await tree._findElement(needle) : null
    };
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getAccessibilityTree = getAccessibilityTree;

  class CRAXNode {
    constructor(client, payload) {
      this._payload = undefined;
      this._children = [];
      this._richlyEditable = false;
      this._editable = false;
      this._focusable = false;
      this._expanded = false;
      this._hidden = false;
      this._name = undefined;
      this._role = undefined;
      this._cachedHasFocusableChild = undefined;
      this._client = undefined;
      this._client = client;
      this._payload = payload;
      this._name = this._payload.name ? this._payload.name.value : "";
      this._role = this._payload.role ? this._payload.role.value : "Unknown";
      for (const property of this._payload.properties || []) {
        if (property.name === "editable") {
          this._richlyEditable = property.value.value === "richtext";
          this._editable = true;
        }
        if (property.name === "focusable")
          this._focusable = property.value.value;
        if (property.name === "expanded")
          this._expanded = property.value.value;
        if (property.name === "hidden")
          this._hidden = property.value.value;
      }
    }
    _isPlainTextField() {
      if (this._richlyEditable)
        return false;
      if (this._editable)
        return true;
      return this._role === "textbox" || this._role === "ComboBox" || this._role === "searchbox";
    }
    _isTextOnlyObject() {
      const role = this._role;
      return role === "LineBreak" || role === "text" || role === "InlineTextBox" || role === "StaticText";
    }
    _hasFocusableChild() {
      if (this._cachedHasFocusableChild === undefined) {
        this._cachedHasFocusableChild = false;
        for (const child of this._children) {
          if (child._focusable || child._hasFocusableChild()) {
            this._cachedHasFocusableChild = true;
            break;
          }
        }
      }
      return this._cachedHasFocusableChild;
    }
    children() {
      return this._children;
    }
    async _findElement(element) {
      const objectId = element._objectId;
      const {
        node: {
          backendNodeId
        }
      } = await this._client.send("DOM.describeNode", {
        objectId
      });
      const needle = this.find((node) => node._payload.backendDOMNodeId === backendNodeId);
      return needle || null;
    }
    find(predicate) {
      if (predicate(this))
        return this;
      for (const child of this._children) {
        const result = child.find(predicate);
        if (result)
          return result;
      }
      return null;
    }
    isLeafNode() {
      if (!this._children.length)
        return true;
      if (this._isPlainTextField() || this._isTextOnlyObject())
        return true;
      switch (this._role) {
        case "doc-cover":
        case "graphics-symbol":
        case "img":
        case "Meter":
        case "scrollbar":
        case "slider":
        case "separator":
        case "progressbar":
          return true;
        default:
          break;
      }
      if (this._hasFocusableChild())
        return false;
      if (this._focusable && this._role !== "WebArea" && this._role !== "RootWebArea" && this._name)
        return true;
      if (this._role === "heading" && this._name)
        return true;
      return false;
    }
    isControl() {
      switch (this._role) {
        case "button":
        case "checkbox":
        case "ColorWell":
        case "combobox":
        case "DisclosureTriangle":
        case "listbox":
        case "menu":
        case "menubar":
        case "menuitem":
        case "menuitemcheckbox":
        case "menuitemradio":
        case "radio":
        case "scrollbar":
        case "searchbox":
        case "slider":
        case "spinbutton":
        case "switch":
        case "tab":
        case "textbox":
        case "tree":
          return true;
        default:
          return false;
      }
    }
    isInteresting(insideControl) {
      const role = this._role;
      if (role === "Ignored" || this._hidden)
        return false;
      if (this._focusable || this._richlyEditable)
        return true;
      if (this.isControl())
        return true;
      if (insideControl)
        return false;
      return this.isLeafNode() && !!this._name;
    }
    normalizedRole() {
      switch (this._role) {
        case "RootWebArea":
          return "WebArea";
        case "StaticText":
          return "text";
        default:
          return this._role;
      }
    }
    serialize() {
      const properties = new Map;
      for (const property of this._payload.properties || [])
        properties.set(property.name.toLowerCase(), property.value.value);
      if (this._payload.description)
        properties.set("description", this._payload.description.value);
      const node = {
        role: this.normalizedRole(),
        name: this._payload.name ? this._payload.name.value || "" : ""
      };
      const userStringProperties = ["description", "keyshortcuts", "roledescription", "valuetext"];
      for (const userStringProperty of userStringProperties) {
        if (!properties.has(userStringProperty))
          continue;
        node[userStringProperty] = properties.get(userStringProperty);
      }
      const booleanProperties = ["disabled", "expanded", "focused", "modal", "multiline", "multiselectable", "readonly", "required", "selected"];
      for (const booleanProperty of booleanProperties) {
        if (booleanProperty === "focused" && (this._role === "WebArea" || this._role === "RootWebArea"))
          continue;
        const value = properties.get(booleanProperty);
        if (!value)
          continue;
        node[booleanProperty] = value;
      }
      const numericalProperties = ["level", "valuemax", "valuemin"];
      for (const numericalProperty of numericalProperties) {
        if (!properties.has(numericalProperty))
          continue;
        node[numericalProperty] = properties.get(numericalProperty);
      }
      const tokenProperties = ["autocomplete", "haspopup", "invalid", "orientation"];
      for (const tokenProperty of tokenProperties) {
        const value = properties.get(tokenProperty);
        if (!value || value === "false")
          continue;
        node[tokenProperty] = value;
      }
      const axNode = node;
      if (this._payload.value) {
        if (typeof this._payload.value.value === "string")
          axNode.valueString = this._payload.value.value;
        if (typeof this._payload.value.value === "number")
          axNode.valueNumber = this._payload.value.value;
      }
      if (properties.has("checked"))
        axNode.checked = properties.get("checked") === "true" ? "checked" : properties.get("checked") === "false" ? "unchecked" : "mixed";
      if (properties.has("pressed"))
        axNode.pressed = properties.get("pressed") === "true" ? "pressed" : properties.get("pressed") === "false" ? "released" : "mixed";
      return axNode;
    }
    static createTree(client, payloads) {
      const nodeById = new Map;
      for (const payload of payloads)
        nodeById.set(payload.nodeId, new CRAXNode(client, payload));
      for (const node of nodeById.values()) {
        for (const childId of node._payload.childIds || [])
          node._children.push(nodeById.get(childId));
      }
      return nodeById.values().next().value;
    }
  }
});

// node_modules/playwright-core/lib/server/chromium/crCoverage.js
var require_crCoverage = __commonJS((exports) => {
  var convertToDisjointRanges = function(nestedRanges) {
    const points = [];
    for (const range of nestedRanges) {
      points.push({
        offset: range.startOffset,
        type: 0,
        range
      });
      points.push({
        offset: range.endOffset,
        type: 1,
        range
      });
    }
    points.sort((a, b) => {
      if (a.offset !== b.offset)
        return a.offset - b.offset;
      if (a.type !== b.type)
        return b.type - a.type;
      const aLength = a.range.endOffset - a.range.startOffset;
      const bLength = b.range.endOffset - b.range.startOffset;
      if (a.type === 0)
        return bLength - aLength;
      return aLength - bLength;
    });
    const hitCountStack = [];
    const results = [];
    let lastOffset = 0;
    for (const point of points) {
      if (hitCountStack.length && lastOffset < point.offset && hitCountStack[hitCountStack.length - 1] > 0) {
        const lastResult = results.length ? results[results.length - 1] : null;
        if (lastResult && lastResult.end === lastOffset)
          lastResult.end = point.offset;
        else
          results.push({
            start: lastOffset,
            end: point.offset
          });
      }
      lastOffset = point.offset;
      if (point.type === 0)
        hitCountStack.push(point.range.count);
      else
        hitCountStack.pop();
    }
    return results.filter((range) => range.end - range.start > 1);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CRCoverage = undefined;
  var _eventsHelper = require_eventsHelper();
  var _utils = require_utils3();

  class CRCoverage {
    constructor(client) {
      this._jsCoverage = undefined;
      this._cssCoverage = undefined;
      this._jsCoverage = new JSCoverage(client);
      this._cssCoverage = new CSSCoverage(client);
    }
    async startJSCoverage(options) {
      return await this._jsCoverage.start(options);
    }
    async stopJSCoverage() {
      return await this._jsCoverage.stop();
    }
    async startCSSCoverage(options) {
      return await this._cssCoverage.start(options);
    }
    async stopCSSCoverage() {
      return await this._cssCoverage.stop();
    }
  }
  exports.CRCoverage = CRCoverage;

  class JSCoverage {
    constructor(client) {
      this._client = undefined;
      this._enabled = undefined;
      this._scriptIds = undefined;
      this._scriptSources = undefined;
      this._eventListeners = undefined;
      this._resetOnNavigation = undefined;
      this._reportAnonymousScripts = false;
      this._client = client;
      this._enabled = false;
      this._scriptIds = new Set;
      this._scriptSources = new Map;
      this._eventListeners = [];
      this._resetOnNavigation = false;
    }
    async start(options) {
      (0, _utils.assert)(!this._enabled, "JSCoverage is already enabled");
      const {
        resetOnNavigation = true,
        reportAnonymousScripts = false
      } = options;
      this._resetOnNavigation = resetOnNavigation;
      this._reportAnonymousScripts = reportAnonymousScripts;
      this._enabled = true;
      this._scriptIds.clear();
      this._scriptSources.clear();
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(this._client, "Debugger.scriptParsed", this._onScriptParsed.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.executionContextsCleared", this._onExecutionContextsCleared.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._client, "Debugger.paused", this._onDebuggerPaused.bind(this))];
      await Promise.all([this._client.send("Profiler.enable"), this._client.send("Profiler.startPreciseCoverage", {
        callCount: true,
        detailed: true
      }), this._client.send("Debugger.enable"), this._client.send("Debugger.setSkipAllPauses", {
        skip: true
      })]);
    }
    _onDebuggerPaused() {
      this._client.send("Debugger.resume");
    }
    _onExecutionContextsCleared() {
      if (!this._resetOnNavigation)
        return;
      this._scriptIds.clear();
      this._scriptSources.clear();
    }
    async _onScriptParsed(event) {
      this._scriptIds.add(event.scriptId);
      if (!event.url && !this._reportAnonymousScripts)
        return;
      const response = await this._client._sendMayFail("Debugger.getScriptSource", {
        scriptId: event.scriptId
      });
      if (response)
        this._scriptSources.set(event.scriptId, response.scriptSource);
    }
    async stop() {
      (0, _utils.assert)(this._enabled, "JSCoverage is not enabled");
      this._enabled = false;
      const [profileResponse] = await Promise.all([this._client.send("Profiler.takePreciseCoverage"), this._client.send("Profiler.stopPreciseCoverage"), this._client.send("Profiler.disable"), this._client.send("Debugger.disable")]);
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      const coverage = {
        entries: []
      };
      for (const entry of profileResponse.result) {
        if (!this._scriptIds.has(entry.scriptId))
          continue;
        if (!entry.url && !this._reportAnonymousScripts)
          continue;
        const source = this._scriptSources.get(entry.scriptId);
        if (source)
          coverage.entries.push({
            ...entry,
            source
          });
        else
          coverage.entries.push(entry);
      }
      return coverage;
    }
  }

  class CSSCoverage {
    constructor(client) {
      this._client = undefined;
      this._enabled = undefined;
      this._stylesheetURLs = undefined;
      this._stylesheetSources = undefined;
      this._eventListeners = undefined;
      this._resetOnNavigation = undefined;
      this._client = client;
      this._enabled = false;
      this._stylesheetURLs = new Map;
      this._stylesheetSources = new Map;
      this._eventListeners = [];
      this._resetOnNavigation = false;
    }
    async start(options) {
      (0, _utils.assert)(!this._enabled, "CSSCoverage is already enabled");
      const {
        resetOnNavigation = true
      } = options;
      this._resetOnNavigation = resetOnNavigation;
      this._enabled = true;
      this._stylesheetURLs.clear();
      this._stylesheetSources.clear();
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(this._client, "CSS.styleSheetAdded", this._onStyleSheet.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.executionContextsCleared", this._onExecutionContextsCleared.bind(this))];
      await Promise.all([this._client.send("DOM.enable"), this._client.send("CSS.enable"), this._client.send("CSS.startRuleUsageTracking")]);
    }
    _onExecutionContextsCleared() {
      if (!this._resetOnNavigation)
        return;
      this._stylesheetURLs.clear();
      this._stylesheetSources.clear();
    }
    async _onStyleSheet(event) {
      const header = event.header;
      if (!header.sourceURL)
        return;
      const response = await this._client._sendMayFail("CSS.getStyleSheetText", {
        styleSheetId: header.styleSheetId
      });
      if (response) {
        this._stylesheetURLs.set(header.styleSheetId, header.sourceURL);
        this._stylesheetSources.set(header.styleSheetId, response.text);
      }
    }
    async stop() {
      (0, _utils.assert)(this._enabled, "CSSCoverage is not enabled");
      this._enabled = false;
      const ruleTrackingResponse = await this._client.send("CSS.stopRuleUsageTracking");
      await Promise.all([this._client.send("CSS.disable"), this._client.send("DOM.disable")]);
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      const styleSheetIdToCoverage = new Map;
      for (const entry of ruleTrackingResponse.ruleUsage) {
        let ranges = styleSheetIdToCoverage.get(entry.styleSheetId);
        if (!ranges) {
          ranges = [];
          styleSheetIdToCoverage.set(entry.styleSheetId, ranges);
        }
        ranges.push({
          startOffset: entry.startOffset,
          endOffset: entry.endOffset,
          count: entry.used ? 1 : 0
        });
      }
      const coverage = {
        entries: []
      };
      for (const styleSheetId of this._stylesheetURLs.keys()) {
        const url = this._stylesheetURLs.get(styleSheetId);
        const text = this._stylesheetSources.get(styleSheetId);
        const ranges = convertToDisjointRanges(styleSheetIdToCoverage.get(styleSheetId) || []);
        coverage.entries.push({
          url,
          ranges,
          text
        });
      }
      return coverage;
    }
  }
});

// node_modules/playwright-core/lib/server/chromium/crProtocolHelper.js
var require_crProtocolHelper = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var getExceptionMessage = function(exceptionDetails) {
    if (exceptionDetails.exception)
      return exceptionDetails.exception.description || String(exceptionDetails.exception.value);
    let message = exceptionDetails.text;
    if (exceptionDetails.stackTrace) {
      for (const callframe of exceptionDetails.stackTrace.callFrames) {
        const location2 = callframe.url + ":" + callframe.lineNumber + ":" + callframe.columnNumber;
        const functionName = callframe.functionName || "<anonymous>";
        message += `\n    at ${functionName} (${location2})`;
      }
    }
    return message;
  };
  async function releaseObject(client, objectId) {
    await client.send("Runtime.releaseObject", {
      objectId
    }).catch((error) => {
    });
  }
  async function saveProtocolStream(client, handle, path) {
    let eof = false;
    await (0, _fileUtils.mkdirIfNeeded)(path);
    const fd = await _fs.default.promises.open(path, "w");
    while (!eof) {
      const response = await client.send("IO.read", {
        handle
      });
      eof = response.eof;
      const buf = Buffer.from(response.data, response.base64Encoded ? "base64" : undefined);
      await fd.write(buf);
    }
    await fd.close();
    await client.send("IO.close", {
      handle
    });
  }
  async function readProtocolStream(client, handle) {
    let eof = false;
    const chunks = [];
    while (!eof) {
      const response = await client.send("IO.read", {
        handle
      });
      eof = response.eof;
      const buf = Buffer.from(response.data, response.base64Encoded ? "base64" : undefined);
      chunks.push(buf);
    }
    await client.send("IO.close", {
      handle
    });
    return Buffer.concat(chunks);
  }
  var toConsoleMessageLocation = function(stackTrace) {
    return stackTrace && stackTrace.callFrames.length ? {
      url: stackTrace.callFrames[0].url,
      lineNumber: stackTrace.callFrames[0].lineNumber,
      columnNumber: stackTrace.callFrames[0].columnNumber
    } : {
      url: "",
      lineNumber: 0,
      columnNumber: 0
    };
  };
  var exceptionToError = function(exceptionDetails) {
    const messageWithStack = getExceptionMessage(exceptionDetails);
    const lines = messageWithStack.split("\n");
    const firstStackTraceLine = lines.findIndex((line) => line.startsWith("    at"));
    let messageWithName = "";
    let stack = "";
    if (firstStackTraceLine === -1) {
      messageWithName = messageWithStack;
    } else {
      messageWithName = lines.slice(0, firstStackTraceLine).join("\n");
      stack = messageWithStack;
    }
    const {
      name,
      message
    } = (0, _stackTrace.splitErrorMessage)(messageWithName);
    const err = new Error(message);
    err.stack = stack;
    err.name = name;
    return err;
  };
  var toModifiersMask = function(modifiers) {
    let mask = 0;
    if (modifiers.has("Alt"))
      mask |= 1;
    if (modifiers.has("Control"))
      mask |= 2;
    if (modifiers.has("Meta"))
      mask |= 4;
    if (modifiers.has("Shift"))
      mask |= 8;
    return mask;
  };
  var toButtonsMask = function(buttons) {
    let mask = 0;
    if (buttons.has("left"))
      mask |= 1;
    if (buttons.has("right"))
      mask |= 2;
    if (buttons.has("middle"))
      mask |= 4;
    return mask;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.exceptionToError = exceptionToError;
  exports.getExceptionMessage = getExceptionMessage;
  exports.readProtocolStream = readProtocolStream;
  exports.releaseObject = releaseObject;
  exports.saveProtocolStream = saveProtocolStream;
  exports.toButtonsMask = toButtonsMask;
  exports.toConsoleMessageLocation = toConsoleMessageLocation;
  exports.toModifiersMask = toModifiersMask;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _fileUtils = require_fileUtils();
  var _stackTrace = require_stackTrace();
});

// node_modules/playwright-core/lib/server/chromium/crDragDrop.js
var require_crDragDrop = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DragManager = undefined;
  var _utils = require_utils3();
  var _crProtocolHelper = require_crProtocolHelper();

  class DragManager {
    constructor(page) {
      this._crPage = undefined;
      this._dragState = null;
      this._lastPosition = {
        x: 0,
        y: 0
      };
      this._crPage = page;
    }
    async cancelDrag() {
      if (!this._dragState)
        return false;
      await this._crPage._mainFrameSession._client.send("Input.dispatchDragEvent", {
        type: "dragCancel",
        x: this._lastPosition.x,
        y: this._lastPosition.y,
        data: {
          items: [],
          dragOperationsMask: 65535
        }
      });
      this._dragState = null;
      return true;
    }
    async interceptDragCausedByMove(x, y, button, buttons, modifiers, moveCallback) {
      this._lastPosition = {
        x,
        y
      };
      if (this._dragState) {
        await this._crPage._mainFrameSession._client.send("Input.dispatchDragEvent", {
          type: "dragOver",
          x,
          y,
          data: this._dragState,
          modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers)
        });
        return;
      }
      if (button !== "left")
        return moveCallback();
      const client = this._crPage._mainFrameSession._client;
      let onDragIntercepted;
      const dragInterceptedPromise = new Promise((x2) => onDragIntercepted = x2);
      await Promise.all(this._crPage._page.frames().map(async (frame) => {
        await frame.nonStallingEvaluateInExistingContext(function() {
          let didStartDrag = Promise.resolve(false);
          let dragEvent = null;
          const dragListener = (event) => dragEvent = event;
          const mouseListener = () => {
            didStartDrag = new Promise((callback) => {
              window.addEventListener("dragstart", dragListener, {
                once: true,
                capture: true
              });
              setTimeout(() => callback(dragEvent ? !dragEvent.defaultPrevented : false), 0);
            });
          };
          window.addEventListener("mousemove", mouseListener, {
            once: true,
            capture: true
          });
          window.__cleanupDrag = async () => {
            const val = await didStartDrag;
            window.removeEventListener("mousemove", mouseListener, {
              capture: true
            });
            window.removeEventListener("dragstart", dragListener, {
              capture: true
            });
            delete window.__cleanupDrag;
            return val;
          };
        }.toString(), true, "utility").catch(() => {
        });
      }));
      client.on("Input.dragIntercepted", onDragIntercepted);
      try {
        await client.send("Input.setInterceptDrags", {
          enabled: true
        });
      } catch {
        client.off("Input.dragIntercepted", onDragIntercepted);
        return moveCallback();
      }
      await moveCallback();
      const expectingDrag = (await Promise.all(this._crPage._page.frames().map(async (frame) => {
        return frame.nonStallingEvaluateInExistingContext("window.__cleanupDrag && window.__cleanupDrag()", false, "utility").catch(() => false);
      }))).some((x2) => x2);
      this._dragState = expectingDrag ? (await dragInterceptedPromise).data : null;
      client.off("Input.dragIntercepted", onDragIntercepted);
      await client.send("Input.setInterceptDrags", {
        enabled: false
      });
      if (this._dragState) {
        await this._crPage._mainFrameSession._client.send("Input.dispatchDragEvent", {
          type: "dragEnter",
          x,
          y,
          data: this._dragState,
          modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers)
        });
      }
    }
    isDragging() {
      return !!this._dragState;
    }
    async drop(x, y, modifiers) {
      (0, _utils.assert)(this._dragState, "missing drag state");
      await this._crPage._mainFrameSession._client.send("Input.dispatchDragEvent", {
        type: "drop",
        x,
        y,
        data: this._dragState,
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers)
      });
      this._dragState = null;
    }
  }
  exports.DragManager = DragManager;
});

// node_modules/playwright-core/lib/server/chromium/crExecutionContext.js
var require_crExecutionContext = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var rewriteError = function(error) {
    if (error.message.includes("Object reference chain is too long"))
      return {
        result: {
          type: "undefined"
        }
      };
    if (error.message.includes("Object couldn\'t be returned by value"))
      return {
        result: {
          type: "undefined"
        }
      };
    if (error instanceof TypeError && error.message.startsWith("Converting circular structure to JSON"))
      (0, _stackTrace.rewriteErrorMessage)(error, error.message + " Are you passing a nested JSHandle?");
    if (!js.isJavaScriptErrorInEvaluate(error) && !(0, _protocolError.isSessionClosedError)(error))
      throw new Error("Execution context was destroyed, most likely because of a navigation.");
    throw error;
  };
  var potentiallyUnserializableValue = function(remoteObject) {
    const value = remoteObject.value;
    const unserializableValue = remoteObject.unserializableValue;
    return unserializableValue ? js.parseUnserializableValue(unserializableValue) : value;
  };
  var renderPreview = function(object) {
    if (object.type === "undefined")
      return "undefined";
    if ("value" in object)
      return String(object.value);
    if (object.unserializableValue)
      return String(object.unserializableValue);
    if (object.description === "Object" && object.preview) {
      const tokens = [];
      for (const {
        name,
        value
      } of object.preview.properties)
        tokens.push(`${name}: ${value}`);
      return `{${tokens.join(", ")}}`;
    }
    if (object.subtype === "array" && object.preview)
      return js.sparseArrayToString(object.preview.properties);
    return object.description;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CRExecutionContext = undefined;
  var _crProtocolHelper = require_crProtocolHelper();
  var js = _interopRequireWildcard(require_javascript());
  var _stackTrace = require_stackTrace();
  var _utilityScriptSerializers = require_utilityScriptSerializers();
  var _protocolError = require_protocolError();

  class CRExecutionContext {
    constructor(client, contextPayload) {
      this._client = undefined;
      this._contextId = undefined;
      this._client = client;
      this._contextId = contextPayload.id;
    }
    async rawEvaluateJSON(expression) {
      const {
        exceptionDetails,
        result: remoteObject
      } = await this._client.send("Runtime.evaluate", {
        expression,
        contextId: this._contextId,
        returnByValue: true
      }).catch(rewriteError);
      if (exceptionDetails)
        throw new js.JavaScriptErrorInEvaluate((0, _crProtocolHelper.getExceptionMessage)(exceptionDetails));
      return remoteObject.value;
    }
    async rawEvaluateHandle(expression) {
      const {
        exceptionDetails,
        result: remoteObject
      } = await this._client.send("Runtime.evaluate", {
        expression,
        contextId: this._contextId
      }).catch(rewriteError);
      if (exceptionDetails)
        throw new js.JavaScriptErrorInEvaluate((0, _crProtocolHelper.getExceptionMessage)(exceptionDetails));
      return remoteObject.objectId;
    }
    rawCallFunctionNoReply(func, ...args) {
      this._client.send("Runtime.callFunctionOn", {
        functionDeclaration: func.toString(),
        arguments: args.map((a) => a instanceof js.JSHandle ? {
          objectId: a._objectId
        } : {
          value: a
        }),
        returnByValue: true,
        executionContextId: this._contextId,
        userGesture: true
      }).catch(() => {
      });
    }
    async evaluateWithArguments(expression, returnByValue, utilityScript, values, objectIds) {
      const {
        exceptionDetails,
        result: remoteObject
      } = await this._client.send("Runtime.callFunctionOn", {
        functionDeclaration: expression,
        objectId: utilityScript._objectId,
        arguments: [{
          objectId: utilityScript._objectId
        }, ...values.map((value) => ({
          value
        })), ...objectIds.map((objectId) => ({
          objectId
        }))],
        returnByValue,
        awaitPromise: true,
        userGesture: true
      }).catch(rewriteError);
      if (exceptionDetails)
        throw new js.JavaScriptErrorInEvaluate((0, _crProtocolHelper.getExceptionMessage)(exceptionDetails));
      return returnByValue ? (0, _utilityScriptSerializers.parseEvaluationResultValue)(remoteObject.value) : utilityScript._context.createHandle(remoteObject);
    }
    async getProperties(context, objectId) {
      const response = await this._client.send("Runtime.getProperties", {
        objectId,
        ownProperties: true
      });
      const result = new Map;
      for (const property of response.result) {
        if (!property.enumerable || !property.value)
          continue;
        result.set(property.name, context.createHandle(property.value));
      }
      return result;
    }
    createHandle(context, remoteObject) {
      return new js.JSHandle(context, remoteObject.subtype || remoteObject.type, renderPreview(remoteObject), remoteObject.objectId, potentiallyUnserializableValue(remoteObject));
    }
    async releaseHandle(objectId) {
      await (0, _crProtocolHelper.releaseObject)(this._client, objectId);
    }
    async objectCount(objectId) {
      const result = await this._client.send("Runtime.queryObjects", {
        prototypeObjectId: objectId
      });
      const match = result.objects.description.match(/Array\((\d+)\)/);
      return +match[1];
    }
  }
  exports.CRExecutionContext = CRExecutionContext;
});

// node_modules/playwright-core/lib/server/macEditingCommands.js
var require_macEditingCommands = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.macEditingCommands = undefined;
  var macEditingCommands = exports.macEditingCommands = {
    Backspace: "deleteBackward:",
    Enter: "insertNewline:",
    NumpadEnter: "insertNewline:",
    Escape: "cancelOperation:",
    ArrowUp: "moveUp:",
    ArrowDown: "moveDown:",
    ArrowLeft: "moveLeft:",
    ArrowRight: "moveRight:",
    F5: "complete:",
    Delete: "deleteForward:",
    Home: "scrollToBeginningOfDocument:",
    End: "scrollToEndOfDocument:",
    PageUp: "scrollPageUp:",
    PageDown: "scrollPageDown:",
    "Shift+Backspace": "deleteBackward:",
    "Shift+Enter": "insertNewline:",
    "Shift+NumpadEnter": "insertNewline:",
    "Shift+Escape": "cancelOperation:",
    "Shift+ArrowUp": "moveUpAndModifySelection:",
    "Shift+ArrowDown": "moveDownAndModifySelection:",
    "Shift+ArrowLeft": "moveLeftAndModifySelection:",
    "Shift+ArrowRight": "moveRightAndModifySelection:",
    "Shift+F5": "complete:",
    "Shift+Delete": "deleteForward:",
    "Shift+Home": "moveToBeginningOfDocumentAndModifySelection:",
    "Shift+End": "moveToEndOfDocumentAndModifySelection:",
    "Shift+PageUp": "pageUpAndModifySelection:",
    "Shift+PageDown": "pageDownAndModifySelection:",
    "Shift+Numpad5": "delete:",
    "Control+Tab": "selectNextKeyView:",
    "Control+Enter": "insertLineBreak:",
    "Control+NumpadEnter": "insertLineBreak:",
    "Control+Quote": "insertSingleQuoteIgnoringSubstitution:",
    "Control+KeyA": "moveToBeginningOfParagraph:",
    "Control+KeyB": "moveBackward:",
    "Control+KeyD": "deleteForward:",
    "Control+KeyE": "moveToEndOfParagraph:",
    "Control+KeyF": "moveForward:",
    "Control+KeyH": "deleteBackward:",
    "Control+KeyK": "deleteToEndOfParagraph:",
    "Control+KeyL": "centerSelectionInVisibleArea:",
    "Control+KeyN": "moveDown:",
    "Control+KeyO": ["insertNewlineIgnoringFieldEditor:", "moveBackward:"],
    "Control+KeyP": "moveUp:",
    "Control+KeyT": "transpose:",
    "Control+KeyV": "pageDown:",
    "Control+KeyY": "yank:",
    "Control+Backspace": "deleteBackwardByDecomposingPreviousCharacter:",
    "Control+ArrowUp": "scrollPageUp:",
    "Control+ArrowDown": "scrollPageDown:",
    "Control+ArrowLeft": "moveToLeftEndOfLine:",
    "Control+ArrowRight": "moveToRightEndOfLine:",
    "Shift+Control+Enter": "insertLineBreak:",
    "Shift+Control+NumpadEnter": "insertLineBreak:",
    "Shift+Control+Tab": "selectPreviousKeyView:",
    "Shift+Control+Quote": "insertDoubleQuoteIgnoringSubstitution:",
    "Shift+Control+KeyA": "moveToBeginningOfParagraphAndModifySelection:",
    "Shift+Control+KeyB": "moveBackwardAndModifySelection:",
    "Shift+Control+KeyE": "moveToEndOfParagraphAndModifySelection:",
    "Shift+Control+KeyF": "moveForwardAndModifySelection:",
    "Shift+Control+KeyN": "moveDownAndModifySelection:",
    "Shift+Control+KeyP": "moveUpAndModifySelection:",
    "Shift+Control+KeyV": "pageDownAndModifySelection:",
    "Shift+Control+Backspace": "deleteBackwardByDecomposingPreviousCharacter:",
    "Shift+Control+ArrowUp": "scrollPageUp:",
    "Shift+Control+ArrowDown": "scrollPageDown:",
    "Shift+Control+ArrowLeft": "moveToLeftEndOfLineAndModifySelection:",
    "Shift+Control+ArrowRight": "moveToRightEndOfLineAndModifySelection:",
    "Alt+Backspace": "deleteWordBackward:",
    "Alt+Enter": "insertNewlineIgnoringFieldEditor:",
    "Alt+NumpadEnter": "insertNewlineIgnoringFieldEditor:",
    "Alt+Escape": "complete:",
    "Alt+ArrowUp": ["moveBackward:", "moveToBeginningOfParagraph:"],
    "Alt+ArrowDown": ["moveForward:", "moveToEndOfParagraph:"],
    "Alt+ArrowLeft": "moveWordLeft:",
    "Alt+ArrowRight": "moveWordRight:",
    "Alt+Delete": "deleteWordForward:",
    "Alt+PageUp": "pageUp:",
    "Alt+PageDown": "pageDown:",
    "Shift+Alt+Backspace": "deleteWordBackward:",
    "Shift+Alt+Enter": "insertNewlineIgnoringFieldEditor:",
    "Shift+Alt+NumpadEnter": "insertNewlineIgnoringFieldEditor:",
    "Shift+Alt+Escape": "complete:",
    "Shift+Alt+ArrowUp": "moveParagraphBackwardAndModifySelection:",
    "Shift+Alt+ArrowDown": "moveParagraphForwardAndModifySelection:",
    "Shift+Alt+ArrowLeft": "moveWordLeftAndModifySelection:",
    "Shift+Alt+ArrowRight": "moveWordRightAndModifySelection:",
    "Shift+Alt+Delete": "deleteWordForward:",
    "Shift+Alt+PageUp": "pageUp:",
    "Shift+Alt+PageDown": "pageDown:",
    "Control+Alt+KeyB": "moveWordBackward:",
    "Control+Alt+KeyF": "moveWordForward:",
    "Control+Alt+Backspace": "deleteWordBackward:",
    "Shift+Control+Alt+KeyB": "moveWordBackwardAndModifySelection:",
    "Shift+Control+Alt+KeyF": "moveWordForwardAndModifySelection:",
    "Shift+Control+Alt+Backspace": "deleteWordBackward:",
    "Meta+NumpadSubtract": "cancel:",
    "Meta+Backspace": "deleteToBeginningOfLine:",
    "Meta+ArrowUp": "moveToBeginningOfDocument:",
    "Meta+ArrowDown": "moveToEndOfDocument:",
    "Meta+ArrowLeft": "moveToLeftEndOfLine:",
    "Meta+ArrowRight": "moveToRightEndOfLine:",
    "Shift+Meta+NumpadSubtract": "cancel:",
    "Shift+Meta+Backspace": "deleteToBeginningOfLine:",
    "Shift+Meta+ArrowUp": "moveToBeginningOfDocumentAndModifySelection:",
    "Shift+Meta+ArrowDown": "moveToEndOfDocumentAndModifySelection:",
    "Shift+Meta+ArrowLeft": "moveToLeftEndOfLineAndModifySelection:",
    "Shift+Meta+ArrowRight": "moveToRightEndOfLineAndModifySelection:",
    "Meta+KeyA": "selectAll:",
    "Meta+KeyC": "copy:",
    "Meta+KeyX": "cut:",
    "Meta+KeyV": "paste:",
    "Meta+KeyZ": "undo:",
    "Shift+Meta+KeyZ": "redo:"
  };
});

// node_modules/playwright-core/lib/server/chromium/crInput.js
var require_crInput = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.RawTouchscreenImpl = exports.RawMouseImpl = exports.RawKeyboardImpl = undefined;
  var input = _interopRequireWildcard(require_input());
  var _macEditingCommands = require_macEditingCommands();
  var _utils = require_utils3();
  var _crProtocolHelper = require_crProtocolHelper();

  class RawKeyboardImpl {
    constructor(_client, _isMac, _dragManger) {
      this._client = _client;
      this._isMac = _isMac;
      this._dragManger = _dragManger;
    }
    _commandsForCode(code, modifiers) {
      if (!this._isMac)
        return [];
      const parts = [];
      for (const modifier of ["Shift", "Control", "Alt", "Meta"]) {
        if (modifiers.has(modifier))
          parts.push(modifier);
      }
      parts.push(code);
      const shortcut = parts.join("+");
      let commands = _macEditingCommands.macEditingCommands[shortcut] || [];
      if ((0, _utils.isString)(commands))
        commands = [commands];
      commands = commands.filter((x) => !x.startsWith("insert"));
      return commands.map((c) => c.substring(0, c.length - 1));
    }
    async keydown(modifiers, code, keyCode, keyCodeWithoutLocation, key, location2, autoRepeat, text) {
      if (code === "Escape" && await this._dragManger.cancelDrag())
        return;
      const commands = this._commandsForCode(code, modifiers);
      await this._client.send("Input.dispatchKeyEvent", {
        type: text ? "keyDown" : "rawKeyDown",
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers),
        windowsVirtualKeyCode: keyCodeWithoutLocation,
        code,
        commands,
        key,
        text,
        unmodifiedText: text,
        autoRepeat,
        location: location2,
        isKeypad: location2 === input.keypadLocation
      });
    }
    async keyup(modifiers, code, keyCode, keyCodeWithoutLocation, key, location2) {
      await this._client.send("Input.dispatchKeyEvent", {
        type: "keyUp",
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers),
        key,
        windowsVirtualKeyCode: keyCodeWithoutLocation,
        code,
        location: location2
      });
    }
    async sendText(text) {
      await this._client.send("Input.insertText", {
        text
      });
    }
  }
  exports.RawKeyboardImpl = RawKeyboardImpl;

  class RawMouseImpl {
    constructor(page, client, dragManager) {
      this._client = undefined;
      this._page = undefined;
      this._dragManager = undefined;
      this._page = page;
      this._client = client;
      this._dragManager = dragManager;
    }
    async move(x, y, button, buttons, modifiers, forClick) {
      const actualMove = async () => {
        await this._client.send("Input.dispatchMouseEvent", {
          type: "mouseMoved",
          button,
          buttons: (0, _crProtocolHelper.toButtonsMask)(buttons),
          x,
          y,
          modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers)
        });
      };
      if (forClick) {
        return actualMove();
      }
      await this._dragManager.interceptDragCausedByMove(x, y, button, buttons, modifiers, actualMove);
    }
    async down(x, y, button, buttons, modifiers, clickCount) {
      if (this._dragManager.isDragging())
        return;
      await this._client.send("Input.dispatchMouseEvent", {
        type: "mousePressed",
        button,
        buttons: (0, _crProtocolHelper.toButtonsMask)(buttons),
        x,
        y,
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers),
        clickCount
      });
    }
    async up(x, y, button, buttons, modifiers, clickCount) {
      if (this._dragManager.isDragging()) {
        await this._dragManager.drop(x, y, modifiers);
        return;
      }
      await this._client.send("Input.dispatchMouseEvent", {
        type: "mouseReleased",
        button,
        buttons: (0, _crProtocolHelper.toButtonsMask)(buttons),
        x,
        y,
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers),
        clickCount
      });
    }
    async wheel(x, y, buttons, modifiers, deltaX, deltaY) {
      await this._client.send("Input.dispatchMouseEvent", {
        type: "mouseWheel",
        x,
        y,
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers),
        deltaX,
        deltaY
      });
    }
  }
  exports.RawMouseImpl = RawMouseImpl;

  class RawTouchscreenImpl {
    constructor(client) {
      this._client = undefined;
      this._client = client;
    }
    async tap(x, y, modifiers) {
      await Promise.all([this._client.send("Input.dispatchTouchEvent", {
        type: "touchStart",
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers),
        touchPoints: [{
          x,
          y
        }]
      }), this._client.send("Input.dispatchTouchEvent", {
        type: "touchEnd",
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers),
        touchPoints: []
      })]);
    }
  }
  exports.RawTouchscreenImpl = RawTouchscreenImpl;
});

// node_modules/playwright-core/lib/server/chromium/crNetworkManager.js
var require_crNetworkManager = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  async function catchDisallowedErrors(callback) {
    try {
      return await callback();
    } catch (e) {
      if ((0, _protocolError.isProtocolError)(e) && e.message.includes("Invalid http status code or phrase"))
        throw e;
    }
  }
  var splitSetCookieHeader = function(headers) {
    const index = headers.findIndex(({
      name
    }) => name.toLowerCase() === "set-cookie");
    if (index === -1)
      return headers;
    const header = headers[index];
    const values = header.value.split("\n");
    if (values.length === 1)
      return headers;
    const result = headers.slice();
    result.splice(index, 1, ...values.map((value) => ({
      name: header.name,
      value
    })));
    return result;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CRNetworkManager = undefined;
  var _helper = require_helper();
  var _eventsHelper = require_eventsHelper();
  var network = _interopRequireWildcard(require_network2());
  var _utils = require_utils3();
  var _protocolError = require_protocolError();

  class CRNetworkManager {
    constructor(page, serviceWorker) {
      this._page = undefined;
      this._serviceWorker = undefined;
      this._requestIdToRequest = new Map;
      this._requestIdToRequestWillBeSentEvent = new Map;
      this._credentials = null;
      this._attemptedAuthentications = new Set;
      this._userRequestInterceptionEnabled = false;
      this._protocolRequestInterceptionEnabled = false;
      this._offline = false;
      this._extraHTTPHeaders = [];
      this._requestIdToRequestPausedEvent = new Map;
      this._responseExtraInfoTracker = new ResponseExtraInfoTracker;
      this._sessions = new Map;
      this._page = page;
      this._serviceWorker = serviceWorker;
    }
    async addSession(session, workerFrame, isMain) {
      const sessionInfo = {
        session,
        isMain,
        workerFrame,
        eventListeners: []
      };
      sessionInfo.eventListeners = [_eventsHelper.eventsHelper.addEventListener(session, "Fetch.requestPaused", this._onRequestPaused.bind(this, sessionInfo)), _eventsHelper.eventsHelper.addEventListener(session, "Fetch.authRequired", this._onAuthRequired.bind(this, sessionInfo)), _eventsHelper.eventsHelper.addEventListener(session, "Network.requestWillBeSent", this._onRequestWillBeSent.bind(this, sessionInfo)), _eventsHelper.eventsHelper.addEventListener(session, "Network.requestWillBeSentExtraInfo", this._onRequestWillBeSentExtraInfo.bind(this)), _eventsHelper.eventsHelper.addEventListener(session, "Network.requestServedFromCache", this._onRequestServedFromCache.bind(this)), _eventsHelper.eventsHelper.addEventListener(session, "Network.responseReceived", this._onResponseReceived.bind(this, sessionInfo)), _eventsHelper.eventsHelper.addEventListener(session, "Network.responseReceivedExtraInfo", this._onResponseReceivedExtraInfo.bind(this)), _eventsHelper.eventsHelper.addEventListener(session, "Network.loadingFinished", this._onLoadingFinished.bind(this, sessionInfo)), _eventsHelper.eventsHelper.addEventListener(session, "Network.loadingFailed", this._onLoadingFailed.bind(this, sessionInfo))];
      if (this._page) {
        sessionInfo.eventListeners.push(...[_eventsHelper.eventsHelper.addEventListener(session, "Network.webSocketCreated", (e) => this._page._frameManager.onWebSocketCreated(e.requestId, e.url)), _eventsHelper.eventsHelper.addEventListener(session, "Network.webSocketWillSendHandshakeRequest", (e) => this._page._frameManager.onWebSocketRequest(e.requestId)), _eventsHelper.eventsHelper.addEventListener(session, "Network.webSocketHandshakeResponseReceived", (e) => this._page._frameManager.onWebSocketResponse(e.requestId, e.response.status, e.response.statusText)), _eventsHelper.eventsHelper.addEventListener(session, "Network.webSocketFrameSent", (e) => e.response.payloadData && this._page._frameManager.onWebSocketFrameSent(e.requestId, e.response.opcode, e.response.payloadData)), _eventsHelper.eventsHelper.addEventListener(session, "Network.webSocketFrameReceived", (e) => e.response.payloadData && this._page._frameManager.webSocketFrameReceived(e.requestId, e.response.opcode, e.response.payloadData)), _eventsHelper.eventsHelper.addEventListener(session, "Network.webSocketClosed", (e) => this._page._frameManager.webSocketClosed(e.requestId)), _eventsHelper.eventsHelper.addEventListener(session, "Network.webSocketFrameError", (e) => this._page._frameManager.webSocketError(e.requestId, e.errorMessage))]);
      }
      this._sessions.set(session, sessionInfo);
      await Promise.all([session.send("Network.enable"), this._updateProtocolRequestInterceptionForSession(sessionInfo, true), this._setOfflineForSession(sessionInfo, true), this._setExtraHTTPHeadersForSession(sessionInfo, true)]);
    }
    removeSession(session) {
      const info = this._sessions.get(session);
      if (info)
        _eventsHelper.eventsHelper.removeEventListeners(info.eventListeners);
      this._sessions.delete(session);
    }
    async _forEachSession(cb) {
      await Promise.all([...this._sessions.values()].map((info) => {
        if (info.isMain)
          return cb(info);
        return cb(info).catch((e) => {
          if ((0, _protocolError.isSessionClosedError)(e))
            return;
          throw e;
        });
      }));
    }
    async authenticate(credentials) {
      this._credentials = credentials;
      await this._updateProtocolRequestInterception();
    }
    async setOffline(offline) {
      if (offline === this._offline)
        return;
      this._offline = offline;
      await this._forEachSession((info) => this._setOfflineForSession(info));
    }
    async _setOfflineForSession(info, initial) {
      if (initial && !this._offline)
        return;
      if (info.workerFrame)
        return;
      await info.session.send("Network.emulateNetworkConditions", {
        offline: this._offline,
        latency: 0,
        downloadThroughput: -1,
        uploadThroughput: -1
      });
    }
    async setRequestInterception(value) {
      this._userRequestInterceptionEnabled = value;
      await this._updateProtocolRequestInterception();
    }
    async _updateProtocolRequestInterception() {
      const enabled = this._userRequestInterceptionEnabled || !!this._credentials;
      if (enabled === this._protocolRequestInterceptionEnabled)
        return;
      this._protocolRequestInterceptionEnabled = enabled;
      await this._forEachSession((info) => this._updateProtocolRequestInterceptionForSession(info));
    }
    async _updateProtocolRequestInterceptionForSession(info, initial) {
      const enabled = this._protocolRequestInterceptionEnabled;
      if (initial && !enabled)
        return;
      const cachePromise = info.session.send("Network.setCacheDisabled", {
        cacheDisabled: enabled
      });
      let fetchPromise = Promise.resolve(undefined);
      if (!info.workerFrame) {
        if (enabled)
          fetchPromise = info.session.send("Fetch.enable", {
            handleAuthRequests: true,
            patterns: [{
              urlPattern: "*",
              requestStage: "Request"
            }]
          });
        else
          fetchPromise = info.session.send("Fetch.disable");
      }
      await Promise.all([cachePromise, fetchPromise]);
    }
    async setExtraHTTPHeaders(extraHTTPHeaders) {
      if (!this._extraHTTPHeaders.length && !extraHTTPHeaders.length)
        return;
      this._extraHTTPHeaders = extraHTTPHeaders;
      await this._forEachSession((info) => this._setExtraHTTPHeadersForSession(info));
    }
    async _setExtraHTTPHeadersForSession(info, initial) {
      if (initial && !this._extraHTTPHeaders.length)
        return;
      await info.session.send("Network.setExtraHTTPHeaders", {
        headers: (0, _utils.headersArrayToObject)(this._extraHTTPHeaders, false)
      });
    }
    async clearCache() {
      await this._forEachSession(async (info) => {
        await info.session.send("Network.setCacheDisabled", {
          cacheDisabled: true
        });
        if (!this._protocolRequestInterceptionEnabled)
          await info.session.send("Network.setCacheDisabled", {
            cacheDisabled: false
          });
        if (!info.workerFrame)
          await info.session.send("Network.clearBrowserCache");
      });
    }
    _onRequestWillBeSent(sessionInfo, event) {
      if (this._protocolRequestInterceptionEnabled && !event.request.url.startsWith("data:")) {
        const requestId = event.requestId;
        const requestPausedEvent = this._requestIdToRequestPausedEvent.get(requestId);
        if (requestPausedEvent) {
          this._onRequest(sessionInfo, event, requestPausedEvent.sessionInfo, requestPausedEvent.event);
          this._requestIdToRequestPausedEvent.delete(requestId);
        } else {
          this._requestIdToRequestWillBeSentEvent.set(event.requestId, {
            sessionInfo,
            event
          });
        }
      } else {
        this._onRequest(sessionInfo, event, undefined, undefined);
      }
    }
    _onRequestServedFromCache(event) {
      this._responseExtraInfoTracker.requestServedFromCache(event);
    }
    _onRequestWillBeSentExtraInfo(event) {
      this._responseExtraInfoTracker.requestWillBeSentExtraInfo(event);
    }
    _onAuthRequired(sessionInfo, event) {
      let response = "Default";
      const shouldProvideCredentials = this._shouldProvideCredentials(event.request.url);
      if (this._attemptedAuthentications.has(event.requestId)) {
        response = "CancelAuth";
      } else if (shouldProvideCredentials) {
        response = "ProvideCredentials";
        this._attemptedAuthentications.add(event.requestId);
      }
      const {
        username,
        password
      } = shouldProvideCredentials && this._credentials ? this._credentials : {
        username: undefined,
        password: undefined
      };
      sessionInfo.session._sendMayFail("Fetch.continueWithAuth", {
        requestId: event.requestId,
        authChallengeResponse: {
          response,
          username,
          password
        }
      });
    }
    _shouldProvideCredentials(url) {
      if (!this._credentials)
        return false;
      return !this._credentials.origin || new URL(url).origin.toLowerCase() === this._credentials.origin.toLowerCase();
    }
    _onRequestPaused(sessionInfo, event) {
      if (!event.networkId) {
        sessionInfo.session._sendMayFail("Fetch.continueRequest", {
          requestId: event.requestId
        });
        return;
      }
      if (event.request.url.startsWith("data:"))
        return;
      const requestId = event.networkId;
      const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(requestId);
      if (requestWillBeSentEvent) {
        this._onRequest(requestWillBeSentEvent.sessionInfo, requestWillBeSentEvent.event, sessionInfo, event);
        this._requestIdToRequestWillBeSentEvent.delete(requestId);
      } else {
        var _existingRequest$_rou;
        const existingRequest = this._requestIdToRequest.get(requestId);
        const alreadyContinuedParams = existingRequest === null || existingRequest === undefined || (_existingRequest$_rou = existingRequest._route) === null || _existingRequest$_rou === undefined ? undefined : _existingRequest$_rou._alreadyContinuedParams;
        if (alreadyContinuedParams && !event.redirectedRequestId) {
          sessionInfo.session._sendMayFail("Fetch.continueRequest", {
            ...alreadyContinuedParams,
            requestId: event.requestId
          });
          return;
        }
        this._requestIdToRequestPausedEvent.set(requestId, {
          sessionInfo,
          event
        });
      }
    }
    _onRequest(requestWillBeSentSessionInfo, requestWillBeSentEvent, requestPausedSessionInfo, requestPausedEvent) {
      var _this$_page, _this$_page2, _this$_page3;
      if (requestWillBeSentEvent.request.url.startsWith("data:"))
        return;
      let redirectedFrom = null;
      if (requestWillBeSentEvent.redirectResponse) {
        const request2 = this._requestIdToRequest.get(requestWillBeSentEvent.requestId);
        if (request2) {
          this._handleRequestRedirect(request2, requestWillBeSentEvent.redirectResponse, requestWillBeSentEvent.timestamp, requestWillBeSentEvent.redirectHasExtraInfo);
          redirectedFrom = request2;
        }
      }
      let frame = requestWillBeSentEvent.frameId ? (_this$_page = this._page) === null || _this$_page === undefined ? undefined : _this$_page._frameManager.frame(requestWillBeSentEvent.frameId) : requestWillBeSentSessionInfo.workerFrame;
      if (!frame && this._page && requestPausedEvent && requestPausedEvent.frameId)
        frame = this._page._frameManager.frame(requestPausedEvent.frameId);
      if (!frame && this._page && requestWillBeSentEvent.frameId === ((_this$_page2 = this._page) === null || _this$_page2 === undefined ? undefined : _this$_page2._delegate)._targetId) {
        frame = this._page._frameManager.frameAttached(requestWillBeSentEvent.frameId, null);
      }
      const isInterceptedOptionsPreflight = !!requestPausedEvent && requestPausedEvent.request.method === "OPTIONS" && requestWillBeSentEvent.initiator.type === "preflight";
      if (isInterceptedOptionsPreflight && (this._page || this._serviceWorker).needsRequestInterception()) {
        const requestHeaders = requestPausedEvent.request.headers;
        const responseHeaders = [{
          name: "Access-Control-Allow-Origin",
          value: requestHeaders["Origin"] || "*"
        }, {
          name: "Access-Control-Allow-Methods",
          value: requestHeaders["Access-Control-Request-Method"] || "GET, POST, OPTIONS, DELETE"
        }, {
          name: "Access-Control-Allow-Credentials",
          value: "true"
        }];
        if (requestHeaders["Access-Control-Request-Headers"])
          responseHeaders.push({
            name: "Access-Control-Allow-Headers",
            value: requestHeaders["Access-Control-Request-Headers"]
          });
        requestPausedSessionInfo.session._sendMayFail("Fetch.fulfillRequest", {
          requestId: requestPausedEvent.requestId,
          responseCode: 204,
          responsePhrase: network.STATUS_TEXTS["204"],
          responseHeaders,
          body: ""
        });
        return;
      }
      if (!frame && !this._serviceWorker) {
        if (requestPausedEvent)
          requestPausedSessionInfo.session._sendMayFail("Fetch.continueRequest", {
            requestId: requestPausedEvent.requestId
          });
        return;
      }
      let route = null;
      if (requestPausedEvent) {
        if (redirectedFrom || !this._userRequestInterceptionEnabled && this._protocolRequestInterceptionEnabled) {
          var _redirectedFrom;
          const headers = (_redirectedFrom = redirectedFrom) === null || _redirectedFrom === undefined || (_redirectedFrom = _redirectedFrom._originalRequestRoute) === null || _redirectedFrom === undefined || (_redirectedFrom = _redirectedFrom._alreadyContinuedParams) === null || _redirectedFrom === undefined ? undefined : _redirectedFrom.headers;
          requestPausedSessionInfo.session._sendMayFail("Fetch.continueRequest", {
            requestId: requestPausedEvent.requestId,
            headers
          });
        } else {
          route = new RouteImpl(requestPausedSessionInfo.session, requestPausedEvent.requestId);
        }
      }
      const isNavigationRequest = requestWillBeSentEvent.requestId === requestWillBeSentEvent.loaderId && requestWillBeSentEvent.type === "Document";
      const documentId = isNavigationRequest ? requestWillBeSentEvent.loaderId : undefined;
      const request = new InterceptableRequest({
        session: requestWillBeSentSessionInfo.session,
        context: (this._page || this._serviceWorker)._browserContext,
        frame: frame || null,
        serviceWorker: this._serviceWorker || null,
        documentId,
        route,
        requestWillBeSentEvent,
        requestPausedEvent,
        redirectedFrom
      });
      this._requestIdToRequest.set(requestWillBeSentEvent.requestId, request);
      if (requestPausedEvent) {
        request.request.setRawRequestHeaders((0, _utils.headersObjectToArray)(requestPausedEvent.request.headers, "\n"));
      }
      (((_this$_page3 = this._page) === null || _this$_page3 === undefined ? undefined : _this$_page3._frameManager) || this._serviceWorker).requestStarted(request.request, route || undefined);
    }
    _createResponse(request, responsePayload, hasExtraInfo) {
      var _responsePayload$secu, _responsePayload$secu2, _responsePayload$secu3, _responsePayload$secu4, _responsePayload$secu5;
      const getResponseBody = async () => {
        const contentLengthHeader = Object.entries(responsePayload.headers).find((header) => header[0].toLowerCase() === "content-length");
        const expectedLength = contentLengthHeader ? +contentLengthHeader[1] : undefined;
        const session = request.session;
        const response2 = await session.send("Network.getResponseBody", {
          requestId: request._requestId
        });
        if (response2.body || !expectedLength)
          return Buffer.from(response2.body, response2.base64Encoded ? "base64" : "utf8");
        const resource = await session.send("Network.loadNetworkResource", {
          url: request.request.url(),
          frameId: this._serviceWorker ? undefined : request.request.frame()._id,
          options: {
            disableCache: false,
            includeCredentials: true
          }
        });
        const chunks = [];
        while (resource.resource.stream) {
          const chunk = await session.send("IO.read", {
            handle: resource.resource.stream
          });
          chunks.push(Buffer.from(chunk.data, chunk.base64Encoded ? "base64" : "utf-8"));
          if (chunk.eof) {
            await session.send("IO.close", {
              handle: resource.resource.stream
            });
            break;
          }
        }
        return Buffer.concat(chunks);
      };
      const timingPayload = responsePayload.timing;
      let timing;
      if (timingPayload && !this._responseExtraInfoTracker.servedFromCache(request._requestId)) {
        timing = {
          startTime: (timingPayload.requestTime - request._timestamp + request._wallTime) * 1000,
          domainLookupStart: timingPayload.dnsStart,
          domainLookupEnd: timingPayload.dnsEnd,
          connectStart: timingPayload.connectStart,
          secureConnectionStart: timingPayload.sslStart,
          connectEnd: timingPayload.connectEnd,
          requestStart: timingPayload.sendStart,
          responseStart: timingPayload.receiveHeadersEnd
        };
      } else {
        timing = {
          startTime: request._wallTime * 1000,
          domainLookupStart: -1,
          domainLookupEnd: -1,
          connectStart: -1,
          secureConnectionStart: -1,
          connectEnd: -1,
          requestStart: -1,
          responseStart: -1
        };
      }
      const response = new network.Response(request.request, responsePayload.status, responsePayload.statusText, (0, _utils.headersObjectToArray)(responsePayload.headers), timing, getResponseBody, !!responsePayload.fromServiceWorker, responsePayload.protocol);
      if (responsePayload !== null && responsePayload !== undefined && responsePayload.remoteIPAddress && typeof (responsePayload === null || responsePayload === undefined ? undefined : responsePayload.remotePort) === "number") {
        response._serverAddrFinished({
          ipAddress: responsePayload.remoteIPAddress,
          port: responsePayload.remotePort
        });
      } else {
        response._serverAddrFinished();
      }
      response._securityDetailsFinished({
        protocol: responsePayload === null || responsePayload === undefined || (_responsePayload$secu = responsePayload.securityDetails) === null || _responsePayload$secu === undefined ? undefined : _responsePayload$secu.protocol,
        subjectName: responsePayload === null || responsePayload === undefined || (_responsePayload$secu2 = responsePayload.securityDetails) === null || _responsePayload$secu2 === undefined ? undefined : _responsePayload$secu2.subjectName,
        issuer: responsePayload === null || responsePayload === undefined || (_responsePayload$secu3 = responsePayload.securityDetails) === null || _responsePayload$secu3 === undefined ? undefined : _responsePayload$secu3.issuer,
        validFrom: responsePayload === null || responsePayload === undefined || (_responsePayload$secu4 = responsePayload.securityDetails) === null || _responsePayload$secu4 === undefined ? undefined : _responsePayload$secu4.validFrom,
        validTo: responsePayload === null || responsePayload === undefined || (_responsePayload$secu5 = responsePayload.securityDetails) === null || _responsePayload$secu5 === undefined ? undefined : _responsePayload$secu5.validTo
      });
      this._responseExtraInfoTracker.processResponse(request._requestId, response, hasExtraInfo);
      return response;
    }
    _deleteRequest(request) {
      this._requestIdToRequest.delete(request._requestId);
      if (request._interceptionId)
        this._attemptedAuthentications.delete(request._interceptionId);
    }
    _handleRequestRedirect(request, responsePayload, timestamp, hasExtraInfo) {
      var _this$_page4, _this$_page5;
      const response = this._createResponse(request, responsePayload, hasExtraInfo);
      response.setTransferSize(null);
      response.setEncodedBodySize(null);
      response._requestFinished((timestamp - request._timestamp) * 1000);
      this._deleteRequest(request);
      (((_this$_page4 = this._page) === null || _this$_page4 === undefined ? undefined : _this$_page4._frameManager) || this._serviceWorker).requestReceivedResponse(response);
      (((_this$_page5 = this._page) === null || _this$_page5 === undefined ? undefined : _this$_page5._frameManager) || this._serviceWorker).reportRequestFinished(request.request, response);
    }
    _onResponseReceivedExtraInfo(event) {
      this._responseExtraInfoTracker.responseReceivedExtraInfo(event);
    }
    _onResponseReceived(sessionInfo, event) {
      var _this$_page6;
      let request = this._requestIdToRequest.get(event.requestId);
      if (!request && event.response.fromServiceWorker) {
        const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
        if (requestWillBeSentEvent) {
          this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
          this._onRequest(sessionInfo, requestWillBeSentEvent.event, undefined, undefined);
          request = this._requestIdToRequest.get(event.requestId);
        }
      }
      if (!request)
        return;
      const response = this._createResponse(request, event.response, event.hasExtraInfo);
      (((_this$_page6 = this._page) === null || _this$_page6 === undefined ? undefined : _this$_page6._frameManager) || this._serviceWorker).requestReceivedResponse(response);
    }
    _onLoadingFinished(sessionInfo, event) {
      var _this$_page7;
      this._responseExtraInfoTracker.loadingFinished(event);
      const request = this._requestIdToRequest.get(event.requestId);
      if (!request)
        return;
      this._maybeUpdateOOPIFMainRequest(sessionInfo, request);
      const response = request.request._existingResponse();
      if (response) {
        response.setTransferSize(event.encodedDataLength);
        response.responseHeadersSize().then((size) => response.setEncodedBodySize(event.encodedDataLength - size));
        response._requestFinished(_helper.helper.secondsToRoundishMillis(event.timestamp - request._timestamp));
      }
      this._deleteRequest(request);
      (((_this$_page7 = this._page) === null || _this$_page7 === undefined ? undefined : _this$_page7._frameManager) || this._serviceWorker).reportRequestFinished(request.request, response);
    }
    _onLoadingFailed(sessionInfo, event) {
      var _this$_page8;
      this._responseExtraInfoTracker.loadingFailed(event);
      let request = this._requestIdToRequest.get(event.requestId);
      if (!request) {
        const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
        if (requestWillBeSentEvent) {
          this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
          this._onRequest(sessionInfo, requestWillBeSentEvent.event, undefined, undefined);
          request = this._requestIdToRequest.get(event.requestId);
        }
      }
      if (!request)
        return;
      this._maybeUpdateOOPIFMainRequest(sessionInfo, request);
      const response = request.request._existingResponse();
      if (response) {
        response.setTransferSize(null);
        response.setEncodedBodySize(null);
        response._requestFinished(_helper.helper.secondsToRoundishMillis(event.timestamp - request._timestamp));
      } else {
        request.request.setRawRequestHeaders(null);
      }
      this._deleteRequest(request);
      request.request._setFailureText(event.errorText || event.blockedReason || "");
      (((_this$_page8 = this._page) === null || _this$_page8 === undefined ? undefined : _this$_page8._frameManager) || this._serviceWorker).requestFailed(request.request, !!event.canceled);
    }
    _maybeUpdateOOPIFMainRequest(sessionInfo, request) {
      if (request.session !== sessionInfo.session && !sessionInfo.isMain && request._documentId === request._requestId)
        request.session = sessionInfo.session;
    }
  }
  exports.CRNetworkManager = CRNetworkManager;

  class InterceptableRequest {
    constructor(options) {
      this.request = undefined;
      this._requestId = undefined;
      this._interceptionId = undefined;
      this._documentId = undefined;
      this._timestamp = undefined;
      this._wallTime = undefined;
      this._route = undefined;
      this._originalRequestRoute = undefined;
      this.session = undefined;
      const {
        session,
        context,
        frame,
        documentId,
        route,
        requestWillBeSentEvent,
        requestPausedEvent,
        redirectedFrom,
        serviceWorker
      } = options;
      this.session = session;
      this._timestamp = requestWillBeSentEvent.timestamp;
      this._wallTime = requestWillBeSentEvent.wallTime;
      this._requestId = requestWillBeSentEvent.requestId;
      this._interceptionId = requestPausedEvent && requestPausedEvent.requestId;
      this._documentId = documentId;
      this._route = route;
      this._originalRequestRoute = route !== null && route !== undefined ? route : redirectedFrom === null || redirectedFrom === undefined ? undefined : redirectedFrom._originalRequestRoute;
      const {
        headers,
        method,
        url,
        postDataEntries = null
      } = requestPausedEvent ? requestPausedEvent.request : requestWillBeSentEvent.request;
      const type = (requestWillBeSentEvent.type || "").toLowerCase();
      let postDataBuffer = null;
      if (postDataEntries && postDataEntries.length && postDataEntries[0].bytes)
        postDataBuffer = Buffer.from(postDataEntries[0].bytes, "base64");
      this.request = new network.Request(context, frame, serviceWorker, (redirectedFrom === null || redirectedFrom === undefined ? undefined : redirectedFrom.request) || null, documentId, url, type, method, postDataBuffer, (0, _utils.headersObjectToArray)(headers));
    }
  }

  class RouteImpl {
    constructor(session, interceptionId) {
      this._session = undefined;
      this._interceptionId = undefined;
      this._alreadyContinuedParams = undefined;
      this._session = session;
      this._interceptionId = interceptionId;
    }
    async continue(request, overrides) {
      this._alreadyContinuedParams = {
        requestId: this._interceptionId,
        url: overrides.url,
        headers: overrides.headers,
        method: overrides.method,
        postData: overrides.postData ? overrides.postData.toString("base64") : undefined
      };
      await catchDisallowedErrors(async () => {
        await this._session.send("Fetch.continueRequest", this._alreadyContinuedParams);
      });
    }
    async fulfill(response) {
      const body = response.isBase64 ? response.body : Buffer.from(response.body).toString("base64");
      const responseHeaders = splitSetCookieHeader(response.headers);
      await catchDisallowedErrors(async () => {
        await this._session.send("Fetch.fulfillRequest", {
          requestId: this._interceptionId,
          responseCode: response.status,
          responsePhrase: network.STATUS_TEXTS[String(response.status)],
          responseHeaders,
          body
        });
      });
    }
    async abort(errorCode = "failed") {
      const errorReason = errorReasons[errorCode];
      (0, _utils.assert)(errorReason, "Unknown error code: " + errorCode);
      await catchDisallowedErrors(async () => {
        await this._session.send("Fetch.failRequest", {
          requestId: this._interceptionId,
          errorReason
        });
      });
    }
  }
  var errorReasons = {
    aborted: "Aborted",
    accessdenied: "AccessDenied",
    addressunreachable: "AddressUnreachable",
    blockedbyclient: "BlockedByClient",
    blockedbyresponse: "BlockedByResponse",
    connectionaborted: "ConnectionAborted",
    connectionclosed: "ConnectionClosed",
    connectionfailed: "ConnectionFailed",
    connectionrefused: "ConnectionRefused",
    connectionreset: "ConnectionReset",
    internetdisconnected: "InternetDisconnected",
    namenotresolved: "NameNotResolved",
    timedout: "TimedOut",
    failed: "Failed"
  };

  class ResponseExtraInfoTracker {
    constructor() {
      this._requests = new Map;
    }
    requestWillBeSentExtraInfo(event) {
      const info = this._getOrCreateEntry(event.requestId);
      info.requestWillBeSentExtraInfo.push(event);
      this._patchHeaders(info, info.requestWillBeSentExtraInfo.length - 1);
      this._checkFinished(info);
    }
    requestServedFromCache(event) {
      const info = this._getOrCreateEntry(event.requestId);
      info.servedFromCache = true;
    }
    servedFromCache(requestId) {
      const info = this._requests.get(requestId);
      return !!(info !== null && info !== undefined && info.servedFromCache);
    }
    responseReceivedExtraInfo(event) {
      const info = this._getOrCreateEntry(event.requestId);
      info.responseReceivedExtraInfo.push(event);
      this._patchHeaders(info, info.responseReceivedExtraInfo.length - 1);
      this._checkFinished(info);
    }
    processResponse(requestId, response, hasExtraInfo) {
      var _info;
      let info = this._requests.get(requestId);
      if (!hasExtraInfo || (_info = info) !== null && _info !== undefined && _info.servedFromCache) {
        response.request().setRawRequestHeaders(null);
        response.setResponseHeadersSize(null);
        response.setRawResponseHeaders(null);
        return;
      }
      info = this._getOrCreateEntry(requestId);
      info.responses.push(response);
      this._patchHeaders(info, info.responses.length - 1);
    }
    loadingFinished(event) {
      const info = this._requests.get(event.requestId);
      if (!info)
        return;
      info.loadingFinished = event;
      this._checkFinished(info);
    }
    loadingFailed(event) {
      const info = this._requests.get(event.requestId);
      if (!info)
        return;
      info.loadingFailed = event;
      this._checkFinished(info);
    }
    _getOrCreateEntry(requestId) {
      let info = this._requests.get(requestId);
      if (!info) {
        info = {
          requestId,
          requestWillBeSentExtraInfo: [],
          responseReceivedExtraInfo: [],
          responses: []
        };
        this._requests.set(requestId, info);
      }
      return info;
    }
    _patchHeaders(info, index) {
      const response = info.responses[index];
      const requestExtraInfo = info.requestWillBeSentExtraInfo[index];
      if (response && requestExtraInfo) {
        response.request().setRawRequestHeaders((0, _utils.headersObjectToArray)(requestExtraInfo.headers, "\n"));
        info.requestWillBeSentExtraInfo[index] = undefined;
      }
      const responseExtraInfo = info.responseReceivedExtraInfo[index];
      if (response && responseExtraInfo) {
        var _responseExtraInfo$he;
        response.setResponseHeadersSize(((_responseExtraInfo$he = responseExtraInfo.headersText) === null || _responseExtraInfo$he === undefined ? undefined : _responseExtraInfo$he.length) || 0);
        response.setRawResponseHeaders((0, _utils.headersObjectToArray)(responseExtraInfo.headers, "\n"));
        info.responseReceivedExtraInfo[index] = undefined;
      }
    }
    _checkFinished(info) {
      if (!info.loadingFinished && !info.loadingFailed)
        return;
      if (info.responses.length <= info.responseReceivedExtraInfo.length) {
        this._stopTracking(info.requestId);
        return;
      }
    }
    _stopTracking(requestId) {
      this._requests.delete(requestId);
    }
  }
});

// node_modules/playwright-core/lib/server/chromium/crPdf.js
var require_crPdf = __commonJS((exports) => {
  var convertPrintParameterToInches = function(text) {
    if (text === undefined)
      return;
    let unit = text.substring(text.length - 2).toLowerCase();
    let valueText = "";
    if (unitToPixels.hasOwnProperty(unit)) {
      valueText = text.substring(0, text.length - 2);
    } else {
      unit = "px";
      valueText = text;
    }
    const value = Number(valueText);
    (0, _utils.assert)(!isNaN(value), "Failed to parse parameter value: " + text);
    const pixels = value * unitToPixels[unit];
    return pixels / 96;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CRPDF = undefined;
  var _utils = require_utils3();
  var _crProtocolHelper = require_crProtocolHelper();
  var PagePaperFormats = {
    letter: {
      width: 8.5,
      height: 11
    },
    legal: {
      width: 8.5,
      height: 14
    },
    tabloid: {
      width: 11,
      height: 17
    },
    ledger: {
      width: 17,
      height: 11
    },
    a0: {
      width: 33.1,
      height: 46.8
    },
    a1: {
      width: 23.4,
      height: 33.1
    },
    a2: {
      width: 16.54,
      height: 23.4
    },
    a3: {
      width: 11.7,
      height: 16.54
    },
    a4: {
      width: 8.27,
      height: 11.7
    },
    a5: {
      width: 5.83,
      height: 8.27
    },
    a6: {
      width: 4.13,
      height: 5.83
    }
  };
  var unitToPixels = {
    px: 1,
    in: 96,
    cm: 37.8,
    mm: 3.78
  };

  class CRPDF {
    constructor(client) {
      this._client = undefined;
      this._client = client;
    }
    async generate(options) {
      const {
        scale = 1,
        displayHeaderFooter = false,
        headerTemplate = "",
        footerTemplate = "",
        printBackground = false,
        landscape = false,
        pageRanges = "",
        preferCSSPageSize = false,
        margin = {},
        tagged = false,
        outline = false
      } = options;
      let paperWidth = 8.5;
      let paperHeight = 11;
      if (options.format) {
        const format = PagePaperFormats[options.format.toLowerCase()];
        (0, _utils.assert)(format, "Unknown paper format: " + options.format);
        paperWidth = format.width;
        paperHeight = format.height;
      } else {
        paperWidth = convertPrintParameterToInches(options.width) || paperWidth;
        paperHeight = convertPrintParameterToInches(options.height) || paperHeight;
      }
      const marginTop = convertPrintParameterToInches(margin.top) || 0;
      const marginLeft = convertPrintParameterToInches(margin.left) || 0;
      const marginBottom = convertPrintParameterToInches(margin.bottom) || 0;
      const marginRight = convertPrintParameterToInches(margin.right) || 0;
      const generateDocumentOutline = outline;
      const generateTaggedPDF = tagged;
      const result = await this._client.send("Page.printToPDF", {
        transferMode: "ReturnAsStream",
        landscape,
        displayHeaderFooter,
        headerTemplate,
        footerTemplate,
        printBackground,
        scale,
        paperWidth,
        paperHeight,
        marginTop,
        marginBottom,
        marginLeft,
        marginRight,
        pageRanges,
        preferCSSPageSize,
        generateTaggedPDF,
        generateDocumentOutline
      });
      return await (0, _crProtocolHelper.readProtocolStream)(this._client, result.stream);
    }
  }
  exports.CRPDF = CRPDF;
});

// node_modules/playwright-core/lib/server/chromium/defaultFontFamilies.js
var require_defaultFontFamilies = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.platformToFontFamilies = undefined;
  var platformToFontFamilies = exports.platformToFontFamilies = {
    linux: {
      fontFamilies: {
        standard: "Times New Roman",
        fixed: "Monospace",
        serif: "Times New Roman",
        sansSerif: "Arial",
        cursive: "Comic Sans MS",
        fantasy: "Impact"
      }
    },
    mac: {
      fontFamilies: {
        standard: "Times",
        fixed: "Courier",
        serif: "Times",
        sansSerif: "Helvetica",
        cursive: "Apple Chancery",
        fantasy: "Papyrus"
      },
      forScripts: [{
        script: "jpan",
        fontFamilies: {
          standard: "Hiragino Kaku Gothic ProN",
          fixed: "Osaka-Mono",
          serif: "Hiragino Mincho ProN",
          sansSerif: "Hiragino Kaku Gothic ProN"
        }
      }, {
        script: "hang",
        fontFamilies: {
          standard: "Apple SD Gothic Neo",
          serif: "AppleMyungjo",
          sansSerif: "Apple SD Gothic Neo"
        }
      }, {
        script: "hans",
        fontFamilies: {
          standard: ",PingFang SC,STHeiti",
          serif: "Songti SC",
          sansSerif: ",PingFang SC,STHeiti",
          cursive: "Kaiti SC"
        }
      }, {
        script: "hant",
        fontFamilies: {
          standard: ",PingFang TC,Heiti TC",
          serif: "Songti TC",
          sansSerif: ",PingFang TC,Heiti TC",
          cursive: "Kaiti TC"
        }
      }]
    },
    win: {
      fontFamilies: {
        standard: "Times New Roman",
        fixed: "Consolas",
        serif: "Times New Roman",
        sansSerif: "Arial",
        cursive: "Comic Sans MS",
        fantasy: "Impact"
      },
      forScripts: [{
        script: "cyrl",
        fontFamilies: {
          standard: "Times New Roman",
          fixed: "Courier New",
          serif: "Times New Roman",
          sansSerif: "Arial"
        }
      }, {
        script: "arab",
        fontFamilies: {
          fixed: "Courier New",
          sansSerif: "Segoe UI"
        }
      }, {
        script: "grek",
        fontFamilies: {
          standard: "Times New Roman",
          fixed: "Courier New",
          serif: "Times New Roman",
          sansSerif: "Arial"
        }
      }, {
        script: "jpan",
        fontFamilies: {
          standard: ",Meiryo,Yu Gothic",
          fixed: "MS Gothic",
          serif: ",Yu Mincho,MS PMincho",
          sansSerif: ",Meiryo,Yu Gothic"
        }
      }, {
        script: "hang",
        fontFamilies: {
          standard: "Malgun Gothic",
          fixed: "Gulimche",
          serif: "Batang",
          sansSerif: "Malgun Gothic",
          cursive: "Gungsuh"
        }
      }, {
        script: "hans",
        fontFamilies: {
          standard: "Microsoft YaHei",
          fixed: "NSimsun",
          serif: "Simsun",
          sansSerif: "Microsoft YaHei",
          cursive: "KaiTi"
        }
      }, {
        script: "hant",
        fontFamilies: {
          standard: "Microsoft JhengHei",
          fixed: "MingLiU",
          serif: "PMingLiU",
          sansSerif: "Microsoft JhengHei",
          cursive: "DFKai-SB"
        }
      }]
    }
  };
});

// node_modules/playwright-core/lib/server/chromium/videoRecorder.js
var require_videoRecorder = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.VideoRecorder = undefined;
  var _utils = require_utils3();
  var _page = require_page();
  var _processLauncher = require_processLauncher();
  var _progress = require_progress();
  var _instrumentation = require_instrumentation();
  var fps = 25;

  class VideoRecorder {
    static async launch(page, ffmpegPath, options) {
      if (!options.outputFile.endsWith(".webm"))
        throw new Error("File must have .webm extension");
      const controller = new _progress.ProgressController((0, _instrumentation.serverSideCallMetadata)(), page);
      controller.setLogName("browser");
      return await controller.run(async (progress2) => {
        const recorder = new VideoRecorder(page, ffmpegPath, progress2);
        await recorder._launch(options);
        return recorder;
      });
    }
    constructor(page, ffmpegPath, progress2) {
      this._process = null;
      this._gracefullyClose = null;
      this._lastWritePromise = Promise.resolve();
      this._lastFrameTimestamp = 0;
      this._lastFrameBuffer = null;
      this._lastWriteTimestamp = 0;
      this._progress = undefined;
      this._frameQueue = [];
      this._isStopped = false;
      this._ffmpegPath = undefined;
      this._progress = progress2;
      this._ffmpegPath = ffmpegPath;
      page.on(_page.Page.Events.ScreencastFrame, (frame) => this.writeFrame(frame.buffer, frame.timestamp));
    }
    async _launch(options) {
      const w = options.width;
      const h = options.height;
      const args = `-loglevel error -f image2pipe -avioflags direct -fpsprobesize 0 -probesize 32 -analyzeduration 0 -c:v mjpeg -i - -y -an -r ${fps} -c:v vp8 -qmin 0 -qmax 50 -crf 8 -deadline realtime -speed 8 -b:v 1M -threads 1 -vf pad=${w}:${h}:0:0:gray,crop=${w}:${h}:0:0`.split(" ");
      args.push(options.outputFile);
      const progress2 = this._progress;
      const {
        launchedProcess,
        gracefullyClose
      } = await (0, _processLauncher.launchProcess)({
        command: this._ffmpegPath,
        args,
        stdio: "stdin",
        log: (message) => progress2.log(message),
        tempDirectories: [],
        attemptToGracefullyClose: async () => {
          progress2.log("Closing stdin...");
          launchedProcess.stdin.end();
        },
        onExit: (exitCode, signal) => {
          progress2.log(`ffmpeg onkill exitCode=${exitCode} signal=${signal}`);
        }
      });
      launchedProcess.stdin.on("finish", () => {
        progress2.log("ffmpeg finished input.");
      });
      launchedProcess.stdin.on("error", () => {
        progress2.log("ffmpeg error.");
      });
      this._process = launchedProcess;
      this._gracefullyClose = gracefullyClose;
    }
    writeFrame(frame, timestamp) {
      (0, _utils.assert)(this._process);
      if (this._isStopped)
        return;
      if (this._lastFrameBuffer) {
        const durationSec = timestamp - this._lastFrameTimestamp;
        const repeatCount = Math.max(1, Math.round(fps * durationSec));
        for (let i = 0;i < repeatCount; ++i)
          this._frameQueue.push(this._lastFrameBuffer);
        this._lastWritePromise = this._lastWritePromise.then(() => this._sendFrames());
      }
      this._lastFrameBuffer = frame;
      this._lastFrameTimestamp = timestamp;
      this._lastWriteTimestamp = (0, _utils.monotonicTime)();
    }
    async _sendFrames() {
      while (this._frameQueue.length)
        await this._sendFrame(this._frameQueue.shift());
    }
    async _sendFrame(frame) {
      return new Promise((f) => this._process.stdin.write(frame, f)).then((error) => {
        if (error)
          this._progress.log(`ffmpeg failed to write: ${String(error)}`);
      });
    }
    async stop() {
      if (this._isStopped)
        return;
      this.writeFrame(Buffer.from([]), this._lastFrameTimestamp + ((0, _utils.monotonicTime)() - this._lastWriteTimestamp) / 1000);
      this._isStopped = true;
      await this._lastWritePromise;
      await this._gracefullyClose();
    }
  }
  exports.VideoRecorder = VideoRecorder;
});

// node_modules/playwright-core/lib/server/chromium/crPage.js
var require_crPage = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  async function emulateLocale(session, locale) {
    try {
      await session.send("Emulation.setLocaleOverride", {
        locale
      });
    } catch (exception) {
      if (exception.message.includes("Another locale override is already in effect"))
        return;
      throw exception;
    }
  }
  async function emulateTimezone(session, timezoneId) {
    try {
      await session.send("Emulation.setTimezoneOverride", {
        timezoneId
      });
    } catch (exception) {
      if (exception.message.includes("Timezone override is already in effect"))
        return;
      if (exception.message.includes("Invalid timezone"))
        throw new Error(`Invalid timezone ID: ${timezoneId}`);
      throw exception;
    }
  }
  var calculateUserAgentMetadata = function(options) {
    const ua = options.userAgent;
    if (!ua)
      return;
    const metadata = {
      mobile: !!options.isMobile,
      model: "",
      architecture: "x64",
      platform: "Windows",
      platformVersion: ""
    };
    const androidMatch = ua.match(/Android (\d+(\.\d+)?(\.\d+)?)/);
    const iPhoneMatch = ua.match(/iPhone OS (\d+(_\d+)?)/);
    const iPadMatch = ua.match(/iPad; CPU OS (\d+(_\d+)?)/);
    const macOSMatch = ua.match(/Mac OS X (\d+(_\d+)?(_\d+)?)/);
    const windowsMatch = ua.match(/Windows\D+(\d+(\.\d+)?(\.\d+)?)/);
    if (androidMatch) {
      metadata.platform = "Android";
      metadata.platformVersion = androidMatch[1];
      metadata.architecture = "arm";
    } else if (iPhoneMatch) {
      metadata.platform = "iOS";
      metadata.platformVersion = iPhoneMatch[1];
      metadata.architecture = "arm";
    } else if (iPadMatch) {
      metadata.platform = "iOS";
      metadata.platformVersion = iPadMatch[1];
      metadata.architecture = "arm";
    } else if (macOSMatch) {
      metadata.platform = "macOS";
      metadata.platformVersion = macOSMatch[1];
      if (!ua.includes("Intel"))
        metadata.architecture = "arm";
    } else if (windowsMatch) {
      metadata.platform = "Windows";
      metadata.platformVersion = windowsMatch[1];
    } else if (ua.toLowerCase().includes("linux")) {
      metadata.platform = "Linux";
    }
    if (ua.includes("ARM"))
      metadata.architecture = "arm";
    return metadata;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CRPage = undefined;
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _eventsHelper = require_eventsHelper();
  var _registry = require_registry();
  var _stackTrace = require_stackTrace();
  var _utils = require_utils3();
  var dialog = _interopRequireWildcard(require_dialog());
  var dom = _interopRequireWildcard(require_dom());
  var frames = _interopRequireWildcard(require_frames());
  var _helper = require_helper();
  var network = _interopRequireWildcard(require_network2());
  var _page = require_page();
  var _crAccessibility = require_crAccessibility();
  var _crBrowser = require_crBrowser();
  var _crCoverage = require_crCoverage();
  var _crDragDrop = require_crDragDrop();
  var _crExecutionContext = require_crExecutionContext();
  var _crInput = require_crInput();
  var _crNetworkManager = require_crNetworkManager();
  var _crPdf = require_crPdf();
  var _crProtocolHelper = require_crProtocolHelper();
  var _defaultFontFamilies = require_defaultFontFamilies();
  var _videoRecorder = require_videoRecorder();
  var _browserContext = require_browserContext();
  var _errors = require_errors();
  var _protocolError = require_protocolError();
  var UTILITY_WORLD_NAME = "__playwright_utility_world__";

  class CRPage {
    static mainFrameSession(page) {
      const crPage = page._delegate;
      return crPage._mainFrameSession;
    }
    constructor(client, targetId, browserContext, opener, bits) {
      this._mainFrameSession = undefined;
      this._sessions = new Map;
      this._page = undefined;
      this.rawMouse = undefined;
      this.rawKeyboard = undefined;
      this.rawTouchscreen = undefined;
      this._targetId = undefined;
      this._opener = undefined;
      this._networkManager = undefined;
      this._pdf = undefined;
      this._coverage = undefined;
      this._browserContext = undefined;
      this._pagePromise = undefined;
      this._initializedPage = null;
      this._isBackgroundPage = undefined;
      this._nextWindowOpenPopupFeatures = [];
      this._targetId = targetId;
      this._opener = opener;
      this._isBackgroundPage = bits.isBackgroundPage;
      const dragManager = new _crDragDrop.DragManager(this);
      this.rawKeyboard = new _crInput.RawKeyboardImpl(client, browserContext._browser._platform() === "mac", dragManager);
      this.rawMouse = new _crInput.RawMouseImpl(this, client, dragManager);
      this.rawTouchscreen = new _crInput.RawTouchscreenImpl(client);
      this._pdf = new _crPdf.CRPDF(client);
      this._coverage = new _crCoverage.CRCoverage(client);
      this._browserContext = browserContext;
      this._page = new _page.Page(this, browserContext);
      this._networkManager = new _crNetworkManager.CRNetworkManager(this._page, null);
      this.updateOffline();
      this.updateExtraHTTPHeaders();
      this.updateHttpCredentials();
      this.updateRequestInterception();
      this._mainFrameSession = new FrameSession(this, client, targetId, null);
      this._sessions.set(targetId, this._mainFrameSession);
      if (opener && !browserContext._options.noDefaultViewport) {
        const features = opener._nextWindowOpenPopupFeatures.shift() || [];
        const viewportSize = _helper.helper.getViewportSizeFromWindowFeatures(features);
        if (viewportSize)
          this._page._emulatedSize = {
            viewport: viewportSize,
            screen: viewportSize
          };
      }
      this._pagePromise = this._mainFrameSession._initialize(bits.hasUIWindow).then(async (r) => {
        await this._page.initOpener(this._opener);
        return r;
      }).catch(async (e) => {
        await this._page.initOpener(this._opener);
        throw e;
      }).then(() => {
        this._initializedPage = this._page;
        this._reportAsNew();
        return this._page;
      }).catch((e) => {
        this._reportAsNew(e);
        return e;
      });
    }
    potentiallyUninitializedPage() {
      return this._page;
    }
    _reportAsNew(error) {
      this._page.reportAsNew(error, this._isBackgroundPage ? _crBrowser.CRBrowserContext.CREvents.BackgroundPage : _browserContext.BrowserContext.Events.Page);
    }
    async _forAllFrameSessions(cb) {
      const frameSessions = Array.from(this._sessions.values());
      await Promise.all(frameSessions.map((frameSession) => {
        if (frameSession._isMainFrame())
          return cb(frameSession);
        return cb(frameSession).catch((e) => {
          if ((0, _protocolError.isSessionClosedError)(e))
            return;
          throw e;
        });
      }));
    }
    _sessionForFrame(frame) {
      while (!this._sessions.has(frame._id)) {
        const parent = frame.parentFrame();
        if (!parent)
          throw new Error(`Frame has been detached.`);
        frame = parent;
      }
      return this._sessions.get(frame._id);
    }
    _sessionForHandle(handle) {
      const frame = handle._context.frame;
      return this._sessionForFrame(frame);
    }
    willBeginDownload() {
      this._mainFrameSession._willBeginDownload();
    }
    async pageOrError() {
      return this._pagePromise;
    }
    didClose() {
      for (const session of this._sessions.values())
        session.dispose();
      this._page._didClose();
    }
    async navigateFrame(frame, url, referrer) {
      return this._sessionForFrame(frame)._navigate(frame, url, referrer);
    }
    async exposeBinding(binding) {
      await this._forAllFrameSessions((frame) => frame._initBinding(binding));
      await Promise.all(this._page.frames().map((frame) => frame.evaluateExpression(binding.source).catch((e) => {
      })));
    }
    async removeExposedBindings() {
      await this._forAllFrameSessions((frame) => frame._removeExposedBindings());
    }
    async updateExtraHTTPHeaders() {
      const headers = network.mergeHeaders([this._browserContext._options.extraHTTPHeaders, this._page.extraHTTPHeaders()]);
      await this._networkManager.setExtraHTTPHeaders(headers);
    }
    async updateGeolocation() {
      await this._forAllFrameSessions((frame) => frame._updateGeolocation(false));
    }
    async updateOffline() {
      await this._networkManager.setOffline(!!this._browserContext._options.offline);
    }
    async updateHttpCredentials() {
      await this._networkManager.authenticate(this._browserContext._options.httpCredentials || null);
    }
    async updateEmulatedViewportSize(preserveWindowBoundaries) {
      await this._mainFrameSession._updateViewport(preserveWindowBoundaries);
    }
    async bringToFront() {
      await this._mainFrameSession._client.send("Page.bringToFront");
    }
    async updateEmulateMedia() {
      await this._forAllFrameSessions((frame) => frame._updateEmulateMedia());
    }
    async updateUserAgent() {
      await this._forAllFrameSessions((frame) => frame._updateUserAgent());
    }
    async updateRequestInterception() {
      await this._networkManager.setRequestInterception(this._page.needsRequestInterception());
    }
    async updateFileChooserInterception() {
      await this._forAllFrameSessions((frame) => frame._updateFileChooserInterception(false));
    }
    async reload() {
      await this._mainFrameSession._client.send("Page.reload");
    }
    async _go(delta) {
      const history = await this._mainFrameSession._client.send("Page.getNavigationHistory");
      const entry = history.entries[history.currentIndex + delta];
      if (!entry)
        return false;
      await this._mainFrameSession._client.send("Page.navigateToHistoryEntry", {
        entryId: entry.id
      });
      return true;
    }
    goBack() {
      return this._go(-1);
    }
    goForward() {
      return this._go(1);
    }
    async addInitScript(source, world = "main") {
      await this._forAllFrameSessions((frame) => frame._evaluateOnNewDocument(source, world));
    }
    async removeInitScripts() {
      await this._forAllFrameSessions((frame) => frame._removeEvaluatesOnNewDocument());
    }
    async closePage(runBeforeUnload) {
      if (runBeforeUnload)
        await this._mainFrameSession._client.send("Page.close");
      else
        await this._browserContext._browser._closePage(this);
    }
    async setBackgroundColor(color) {
      await this._mainFrameSession._client.send("Emulation.setDefaultBackgroundColorOverride", {
        color
      });
    }
    async takeScreenshot(progress2, format, documentRect, viewportRect, quality, fitsViewport, scale) {
      const {
        visualViewport
      } = await this._mainFrameSession._client.send("Page.getLayoutMetrics");
      if (!documentRect) {
        documentRect = {
          x: visualViewport.pageX + viewportRect.x,
          y: visualViewport.pageY + viewportRect.y,
          ..._helper.helper.enclosingIntSize({
            width: viewportRect.width / visualViewport.scale,
            height: viewportRect.height / visualViewport.scale
          })
        };
      }
      const clip = {
        ...documentRect,
        scale: viewportRect ? visualViewport.scale : 1
      };
      if (scale === "css") {
        const deviceScaleFactor = this._browserContext._options.deviceScaleFactor || 1;
        clip.scale /= deviceScaleFactor;
      }
      progress2.throwIfAborted();
      const result = await this._mainFrameSession._client.send("Page.captureScreenshot", {
        format,
        quality,
        clip,
        captureBeyondViewport: !fitsViewport
      });
      return Buffer.from(result.data, "base64");
    }
    async getContentFrame(handle) {
      return this._sessionForHandle(handle)._getContentFrame(handle);
    }
    async getOwnerFrame(handle) {
      return this._sessionForHandle(handle)._getOwnerFrame(handle);
    }
    isElementHandle(remoteObject) {
      return remoteObject.subtype === "node";
    }
    async getBoundingBox(handle) {
      return this._sessionForHandle(handle)._getBoundingBox(handle);
    }
    async scrollRectIntoViewIfNeeded(handle, rect) {
      return this._sessionForHandle(handle)._scrollRectIntoViewIfNeeded(handle, rect);
    }
    async setScreencastOptions(options) {
      if (options) {
        await this._mainFrameSession._startScreencast(this, {
          format: "jpeg",
          quality: options.quality,
          maxWidth: options.width,
          maxHeight: options.height
        });
      } else {
        await this._mainFrameSession._stopScreencast(this);
      }
    }
    rafCountForStablePosition() {
      return 1;
    }
    async getContentQuads(handle) {
      return this._sessionForHandle(handle)._getContentQuads(handle);
    }
    async setInputFiles(handle, files) {
      await handle.evaluateInUtility(([injected, node, files2]) => injected.setInputFiles(node, files2), files);
    }
    async setInputFilePaths(handle, files) {
      const frame = await handle.ownerFrame();
      if (!frame)
        throw new Error("Cannot set input files to detached input element");
      const parentSession = this._sessionForFrame(frame);
      await parentSession._client.send("DOM.setFileInputFiles", {
        objectId: handle._objectId,
        files
      });
    }
    async adoptElementHandle(handle, to) {
      return this._sessionForHandle(handle)._adoptElementHandle(handle, to);
    }
    async getAccessibilityTree(needle) {
      return (0, _crAccessibility.getAccessibilityTree)(this._mainFrameSession._client, needle);
    }
    async inputActionEpilogue() {
      await this._mainFrameSession._client.send("Page.enable").catch((e) => {
      });
    }
    async resetForReuse() {
    }
    async pdf(options) {
      return this._pdf.generate(options);
    }
    coverage() {
      return this._coverage;
    }
    async getFrameElement(frame) {
      let parent = frame.parentFrame();
      if (!parent)
        throw new Error("Frame has been detached.");
      const parentSession = this._sessionForFrame(parent);
      const {
        backendNodeId
      } = await parentSession._client.send("DOM.getFrameOwner", {
        frameId: frame._id
      }).catch((e) => {
        if (e instanceof Error && e.message.includes("Frame with the given id was not found."))
          (0, _stackTrace.rewriteErrorMessage)(e, "Frame has been detached.");
        throw e;
      });
      parent = frame.parentFrame();
      if (!parent)
        throw new Error("Frame has been detached.");
      return parentSession._adoptBackendNodeId(backendNodeId, await parent._mainContext());
    }
    shouldToggleStyleSheetToSyncAnimations() {
      return false;
    }
  }
  exports.CRPage = CRPage;

  class FrameSession {
    constructor(crPage, client, targetId, parentSession) {
      this._client = undefined;
      this._crPage = undefined;
      this._page = undefined;
      this._parentSession = undefined;
      this._childSessions = new Set;
      this._contextIdToContext = new Map;
      this._eventListeners = [];
      this._targetId = undefined;
      this._firstNonInitialNavigationCommittedPromise = undefined;
      this._firstNonInitialNavigationCommittedFulfill = () => {
      };
      this._firstNonInitialNavigationCommittedReject = (e) => {
      };
      this._windowId = undefined;
      this._swappedIn = false;
      this._videoRecorder = null;
      this._screencastId = null;
      this._screencastClients = new Set;
      this._evaluateOnNewDocumentIdentifiers = [];
      this._exposedBindingNames = [];
      this._metricsOverride = undefined;
      this._workerSessions = new Map;
      this._client = client;
      this._crPage = crPage;
      this._page = crPage._page;
      this._targetId = targetId;
      this._parentSession = parentSession;
      if (parentSession)
        parentSession._childSessions.add(this);
      this._firstNonInitialNavigationCommittedPromise = new Promise((f, r) => {
        this._firstNonInitialNavigationCommittedFulfill = f;
        this._firstNonInitialNavigationCommittedReject = r;
      });
    }
    _isMainFrame() {
      return this._targetId === this._crPage._targetId;
    }
    _addRendererListeners() {
      this._eventListeners.push(...[_eventsHelper.eventsHelper.addEventListener(this._client, "Log.entryAdded", (event) => this._onLogEntryAdded(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.fileChooserOpened", (event) => this._onFileChooserOpened(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.frameAttached", (event) => this._onFrameAttached(event.frameId, event.parentFrameId)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.frameDetached", (event) => this._onFrameDetached(event.frameId, event.reason)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.frameNavigated", (event) => this._onFrameNavigated(event.frame, false)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.frameRequestedNavigation", (event) => this._onFrameRequestedNavigation(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.javascriptDialogOpening", (event) => this._onDialog(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.navigatedWithinDocument", (event) => this._onFrameNavigatedWithinDocument(event.frameId, event.url)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.bindingCalled", (event) => this._onBindingCalled(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.consoleAPICalled", (event) => this._onConsoleAPI(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.exceptionThrown", (exception) => this._handleException(exception.exceptionDetails)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.executionContextCreated", (event) => this._onExecutionContextCreated(event.context)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.executionContextDestroyed", (event) => this._onExecutionContextDestroyed(event.executionContextId)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.executionContextsCleared", (event) => this._onExecutionContextsCleared()), _eventsHelper.eventsHelper.addEventListener(this._client, "Target.attachedToTarget", (event) => this._onAttachedToTarget(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Target.detachedFromTarget", (event) => this._onDetachedFromTarget(event))]);
    }
    _addBrowserListeners() {
      this._eventListeners.push(...[_eventsHelper.eventsHelper.addEventListener(this._client, "Inspector.targetCrashed", (event) => this._onTargetCrashed()), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.screencastFrame", (event) => this._onScreencastFrame(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.windowOpen", (event) => this._onWindowOpen(event))]);
    }
    async _initialize(hasUIWindow) {
      const isSettingStorageState = this._page._browserContext.isSettingStorageState();
      if (!isSettingStorageState && hasUIWindow && !this._crPage._browserContext._browser.isClank() && !this._crPage._browserContext._options.noDefaultViewport) {
        const {
          windowId
        } = await this._client.send("Browser.getWindowForTarget");
        this._windowId = windowId;
      }
      let screencastOptions;
      if (!isSettingStorageState && this._isMainFrame() && this._crPage._browserContext._options.recordVideo && hasUIWindow) {
        const screencastId = (0, _utils.createGuid)();
        const outputFile = _path.default.join(this._crPage._browserContext._options.recordVideo.dir, screencastId + ".webm");
        screencastOptions = {
          ...this._crPage._browserContext._options.recordVideo.size,
          outputFile
        };
        await this._crPage._browserContext._ensureVideosPath();
        await this._createVideoRecorder(screencastId, screencastOptions);
        this._crPage.pageOrError().then((p) => {
          if (p instanceof Error)
            this._stopVideoRecording().catch(() => {
            });
        });
      }
      let lifecycleEventsEnabled;
      if (!this._isMainFrame())
        this._addRendererListeners();
      this._addBrowserListeners();
      const promises = [this._client.send("Page.enable"), this._client.send("Page.getFrameTree").then(({
        frameTree
      }) => {
        if (this._isMainFrame()) {
          this._handleFrameTree(frameTree);
          this._addRendererListeners();
        }
        const localFrames = this._isMainFrame() ? this._page.frames() : [this._page._frameManager.frame(this._targetId)];
        for (const frame of localFrames) {
          this._client._sendMayFail("Page.createIsolatedWorld", {
            frameId: frame._id,
            grantUniveralAccess: true,
            worldName: UTILITY_WORLD_NAME
          });
          for (const binding of this._crPage._browserContext._pageBindings.values())
            frame.evaluateExpression(binding.source).catch((e) => {
            });
          for (const source of this._crPage._browserContext.initScripts)
            frame.evaluateExpression(source).catch((e) => {
            });
        }
        const isInitialEmptyPage = this._isMainFrame() && this._page.mainFrame().url() === ":";
        if (isInitialEmptyPage) {
          lifecycleEventsEnabled.catch((e) => {
          }).then(() => {
            this._eventListeners.push(_eventsHelper.eventsHelper.addEventListener(this._client, "Page.lifecycleEvent", (event) => this._onLifecycleEvent(event)));
          });
        } else {
          this._firstNonInitialNavigationCommittedFulfill();
          this._eventListeners.push(_eventsHelper.eventsHelper.addEventListener(this._client, "Page.lifecycleEvent", (event) => this._onLifecycleEvent(event)));
        }
      }), this._client.send("Log.enable", {}), lifecycleEventsEnabled = this._client.send("Page.setLifecycleEventsEnabled", {
        enabled: true
      }), this._client.send("Runtime.enable", {}), this._client.send("Page.addScriptToEvaluateOnNewDocument", {
        source: "",
        worldName: UTILITY_WORLD_NAME
      }), this._crPage._networkManager.addSession(this._client, undefined, this._isMainFrame()), this._client.send("Target.setAutoAttach", {
        autoAttach: true,
        waitForDebuggerOnStart: true,
        flatten: true
      })];
      if (!isSettingStorageState) {
        if (this._isMainFrame())
          promises.push(this._client.send("Emulation.setFocusEmulationEnabled", {
            enabled: true
          }));
        const options = this._crPage._browserContext._options;
        if (options.bypassCSP)
          promises.push(this._client.send("Page.setBypassCSP", {
            enabled: true
          }));
        if (options.ignoreHTTPSErrors)
          promises.push(this._client.send("Security.setIgnoreCertificateErrors", {
            ignore: true
          }));
        if (this._isMainFrame())
          promises.push(this._updateViewport());
        if (options.hasTouch)
          promises.push(this._client.send("Emulation.setTouchEmulationEnabled", {
            enabled: true
          }));
        if (options.javaScriptEnabled === false)
          promises.push(this._client.send("Emulation.setScriptExecutionDisabled", {
            value: true
          }));
        if (options.userAgent || options.locale)
          promises.push(this._updateUserAgent());
        if (options.locale)
          promises.push(emulateLocale(this._client, options.locale));
        if (options.timezoneId)
          promises.push(emulateTimezone(this._client, options.timezoneId));
        if (!this._crPage._browserContext._browser.options.headful)
          promises.push(this._setDefaultFontFamilies(this._client));
        promises.push(this._updateGeolocation(true));
        promises.push(this._updateEmulateMedia());
        promises.push(this._updateFileChooserInterception(true));
        for (const binding of this._crPage._page.allBindings())
          promises.push(this._initBinding(binding));
        for (const source of this._crPage._browserContext.initScripts)
          promises.push(this._evaluateOnNewDocument(source, "main"));
        for (const source of this._crPage._page.initScripts)
          promises.push(this._evaluateOnNewDocument(source, "main"));
        if (screencastOptions)
          promises.push(this._startVideoRecording(screencastOptions));
      }
      promises.push(this._client.send("Runtime.runIfWaitingForDebugger"));
      promises.push(this._firstNonInitialNavigationCommittedPromise);
      await Promise.all(promises);
    }
    dispose() {
      this._firstNonInitialNavigationCommittedReject(new _errors.TargetClosedError);
      for (const childSession of this._childSessions)
        childSession.dispose();
      if (this._parentSession)
        this._parentSession._childSessions.delete(this);
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      this._crPage._networkManager.removeSession(this._client);
      this._crPage._sessions.delete(this._targetId);
      this._client.dispose();
    }
    async _navigate(frame, url, referrer) {
      const response = await this._client.send("Page.navigate", {
        url,
        referrer,
        frameId: frame._id,
        referrerPolicy: "unsafeUrl"
      });
      if (response.errorText)
        throw new frames.NavigationAbortedError(response.loaderId, `${response.errorText} at ${url}`);
      return {
        newDocumentId: response.loaderId
      };
    }
    _onLifecycleEvent(event) {
      if (this._eventBelongsToStaleFrame(event.frameId))
        return;
      if (event.name === "load")
        this._page._frameManager.frameLifecycleEvent(event.frameId, "load");
      else if (event.name === "DOMContentLoaded")
        this._page._frameManager.frameLifecycleEvent(event.frameId, "domcontentloaded");
    }
    _handleFrameTree(frameTree) {
      this._onFrameAttached(frameTree.frame.id, frameTree.frame.parentId || null);
      this._onFrameNavigated(frameTree.frame, true);
      if (!frameTree.childFrames)
        return;
      for (const child of frameTree.childFrames)
        this._handleFrameTree(child);
    }
    _eventBelongsToStaleFrame(frameId) {
      const frame = this._page._frameManager.frame(frameId);
      if (!frame)
        return true;
      const session = this._crPage._sessionForFrame(frame);
      return session && session !== this && !session._swappedIn;
    }
    _onFrameAttached(frameId, parentFrameId) {
      const frameSession = this._crPage._sessions.get(frameId);
      if (frameSession && frameId !== this._targetId) {
        frameSession._swappedIn = true;
        const frame = this._page._frameManager.frame(frameId);
        if (frame)
          this._page._frameManager.removeChildFramesRecursively(frame);
        return;
      }
      if (parentFrameId && !this._page._frameManager.frame(parentFrameId)) {
        return;
      }
      this._page._frameManager.frameAttached(frameId, parentFrameId);
    }
    _onFrameNavigated(framePayload, initial) {
      if (this._eventBelongsToStaleFrame(framePayload.id))
        return;
      this._page._frameManager.frameCommittedNewDocumentNavigation(framePayload.id, framePayload.url + (framePayload.urlFragment || ""), framePayload.name || "", framePayload.loaderId, initial);
      if (!initial)
        this._firstNonInitialNavigationCommittedFulfill();
    }
    _onFrameRequestedNavigation(payload) {
      if (this._eventBelongsToStaleFrame(payload.frameId))
        return;
      if (payload.disposition === "currentTab")
        this._page._frameManager.frameRequestedNavigation(payload.frameId);
    }
    _onFrameNavigatedWithinDocument(frameId, url) {
      if (this._eventBelongsToStaleFrame(frameId))
        return;
      this._page._frameManager.frameCommittedSameDocumentNavigation(frameId, url);
    }
    _onFrameDetached(frameId, reason) {
      if (this._crPage._sessions.has(frameId)) {
        return;
      }
      if (reason === "swap") {
        const frame = this._page._frameManager.frame(frameId);
        if (frame)
          this._page._frameManager.removeChildFramesRecursively(frame);
        return;
      }
      this._page._frameManager.frameDetached(frameId);
    }
    _onExecutionContextCreated(contextPayload) {
      const frame = contextPayload.auxData ? this._page._frameManager.frame(contextPayload.auxData.frameId) : null;
      if (!frame || this._eventBelongsToStaleFrame(frame._id))
        return;
      const delegate = new _crExecutionContext.CRExecutionContext(this._client, contextPayload);
      let worldName = null;
      if (contextPayload.auxData && !!contextPayload.auxData.isDefault)
        worldName = "main";
      else if (contextPayload.name === UTILITY_WORLD_NAME)
        worldName = "utility";
      const context = new dom.FrameExecutionContext(delegate, frame, worldName);
      context[contextDelegateSymbol] = delegate;
      if (worldName)
        frame._contextCreated(worldName, context);
      this._contextIdToContext.set(contextPayload.id, context);
    }
    _onExecutionContextDestroyed(executionContextId) {
      const context = this._contextIdToContext.get(executionContextId);
      if (!context)
        return;
      this._contextIdToContext.delete(executionContextId);
      context.frame._contextDestroyed(context);
    }
    _onExecutionContextsCleared() {
      for (const contextId of Array.from(this._contextIdToContext.keys()))
        this._onExecutionContextDestroyed(contextId);
    }
    _onAttachedToTarget(event) {
      var _this$_page$_frameMan;
      const session = this._client.createChildSession(event.sessionId);
      if (event.targetInfo.type === "iframe") {
        const targetId = event.targetInfo.targetId;
        const frame = this._page._frameManager.frame(targetId);
        if (!frame)
          return;
        this._page._frameManager.removeChildFramesRecursively(frame);
        const frameSession = new FrameSession(this._crPage, session, targetId, this);
        this._crPage._sessions.set(targetId, frameSession);
        frameSession._initialize(false).catch((e) => e);
        return;
      }
      if (event.targetInfo.type !== "worker") {
        session.detach().catch(() => {
        });
        return;
      }
      const url = event.targetInfo.url;
      const worker = new _page.Worker(this._page, url);
      this._page._addWorker(event.sessionId, worker);
      this._workerSessions.set(event.sessionId, session);
      session.once("Runtime.executionContextCreated", async (event2) => {
        worker._createExecutionContext(new _crExecutionContext.CRExecutionContext(session, event2.context));
      });
      session._sendMayFail("Runtime.enable");
      this._crPage._networkManager.addSession(session, (_this$_page$_frameMan = this._page._frameManager.frame(this._targetId)) !== null && _this$_page$_frameMan !== undefined ? _this$_page$_frameMan : undefined).catch(() => {
      });
      session._sendMayFail("Runtime.runIfWaitingForDebugger");
      session._sendMayFail("Target.setAutoAttach", {
        autoAttach: true,
        waitForDebuggerOnStart: true,
        flatten: true
      });
      session.on("Target.attachedToTarget", (event2) => this._onAttachedToTarget(event2));
      session.on("Target.detachedFromTarget", (event2) => this._onDetachedFromTarget(event2));
      session.on("Runtime.consoleAPICalled", (event2) => {
        const args = event2.args.map((o) => worker._existingExecutionContext.createHandle(o));
        this._page._addConsoleMessage(event2.type, args, (0, _crProtocolHelper.toConsoleMessageLocation)(event2.stackTrace));
      });
      session.on("Runtime.exceptionThrown", (exception) => this._page.emitOnContextOnceInitialized(_browserContext.BrowserContext.Events.PageError, (0, _crProtocolHelper.exceptionToError)(exception.exceptionDetails), this._page));
    }
    _onDetachedFromTarget(event) {
      const workerSession = this._workerSessions.get(event.sessionId);
      if (workerSession) {
        workerSession.dispose();
        this._page._removeWorker(event.sessionId);
        return;
      }
      const childFrameSession = this._crPage._sessions.get(event.targetId);
      if (!childFrameSession)
        return;
      if (childFrameSession._swappedIn) {
        childFrameSession.dispose();
        return;
      }
      this._client.send("Page.enable").catch((e) => null).then(() => {
        if (!childFrameSession._swappedIn)
          this._page._frameManager.frameDetached(event.targetId);
        childFrameSession.dispose();
      });
    }
    _onWindowOpen(event) {
      this._crPage._nextWindowOpenPopupFeatures.push(event.windowFeatures);
    }
    async _onConsoleAPI(event) {
      if (event.executionContextId === 0) {
        return;
      }
      const context = this._contextIdToContext.get(event.executionContextId);
      if (!context)
        return;
      const values = event.args.map((arg) => context.createHandle(arg));
      this._page._addConsoleMessage(event.type, values, (0, _crProtocolHelper.toConsoleMessageLocation)(event.stackTrace));
    }
    async _initBinding(binding) {
      const [, response] = await Promise.all([this._client.send("Runtime.addBinding", {
        name: binding.name
      }), this._client.send("Page.addScriptToEvaluateOnNewDocument", {
        source: binding.source
      })]);
      this._exposedBindingNames.push(binding.name);
      if (!binding.name.startsWith("__pw"))
        this._evaluateOnNewDocumentIdentifiers.push(response.identifier);
    }
    async _removeExposedBindings() {
      const toRetain = [];
      const toRemove = [];
      for (const name of this._exposedBindingNames)
        (name.startsWith("__pw_") ? toRetain : toRemove).push(name);
      this._exposedBindingNames = toRetain;
      await Promise.all(toRemove.map((name) => this._client.send("Runtime.removeBinding", {
        name
      })));
    }
    async _onBindingCalled(event) {
      const pageOrError = await this._crPage.pageOrError();
      if (!(pageOrError instanceof Error)) {
        const context = this._contextIdToContext.get(event.executionContextId);
        if (context)
          await this._page._onBindingCalled(event.payload, context);
      }
    }
    _onDialog(event) {
      if (!this._page._frameManager.frame(this._targetId))
        return;
      this._page.emitOnContext(_browserContext.BrowserContext.Events.Dialog, new dialog.Dialog(this._page, event.type, event.message, async (accept, promptText) => {
        await this._client.send("Page.handleJavaScriptDialog", {
          accept,
          promptText
        });
      }, event.defaultPrompt));
    }
    _handleException(exceptionDetails) {
      this._page.emitOnContextOnceInitialized(_browserContext.BrowserContext.Events.PageError, (0, _crProtocolHelper.exceptionToError)(exceptionDetails), this._page);
    }
    async _onTargetCrashed() {
      this._client._markAsCrashed();
      this._page._didCrash();
    }
    _onLogEntryAdded(event) {
      const {
        level,
        text,
        args,
        source,
        url,
        lineNumber
      } = event.entry;
      if (args)
        args.map((arg) => (0, _crProtocolHelper.releaseObject)(this._client, arg.objectId));
      if (source !== "worker") {
        const location2 = {
          url: url || "",
          lineNumber: lineNumber || 0,
          columnNumber: 0
        };
        this._page._addConsoleMessage(level, [], location2, text);
      }
    }
    async _onFileChooserOpened(event) {
      if (!event.backendNodeId)
        return;
      const frame = this._page._frameManager.frame(event.frameId);
      if (!frame)
        return;
      let handle;
      try {
        const utilityContext = await frame._utilityContext();
        handle = await this._adoptBackendNodeId(event.backendNodeId, utilityContext);
      } catch (e) {
        return;
      }
      await this._page._onFileChooserOpened(handle);
    }
    _willBeginDownload() {
      const originPage = this._crPage._initializedPage;
      if (!originPage) {
        this._firstNonInitialNavigationCommittedReject(new Error("Starting new page download"));
      }
    }
    _onScreencastFrame(payload) {
      this._page.throttleScreencastFrameAck(() => {
        this._client.send("Page.screencastFrameAck", {
          sessionId: payload.sessionId
        }).catch(() => {
        });
      });
      const buffer = Buffer.from(payload.data, "base64");
      this._page.emit(_page.Page.Events.ScreencastFrame, {
        buffer,
        timestamp: payload.metadata.timestamp,
        width: payload.metadata.deviceWidth,
        height: payload.metadata.deviceHeight
      });
    }
    async _createVideoRecorder(screencastId, options) {
      (0, _utils.assert)(!this._screencastId);
      const ffmpegPath = _registry.registry.findExecutable("ffmpeg").executablePathOrDie(this._page.attribution.playwright.options.sdkLanguage);
      this._videoRecorder = await _videoRecorder.VideoRecorder.launch(this._crPage._page, ffmpegPath, options);
      this._screencastId = screencastId;
    }
    async _startVideoRecording(options) {
      const screencastId = this._screencastId;
      (0, _utils.assert)(screencastId);
      this._page.once(_page.Page.Events.Close, () => this._stopVideoRecording().catch(() => {
      }));
      const gotFirstFrame = new Promise((f) => this._client.once("Page.screencastFrame", f));
      await this._startScreencast(this._videoRecorder, {
        format: "jpeg",
        quality: 90,
        maxWidth: options.width,
        maxHeight: options.height
      });
      gotFirstFrame.then(() => {
        this._crPage._browserContext._browser._videoStarted(this._crPage._browserContext, screencastId, options.outputFile, this._crPage.pageOrError());
      });
    }
    async _stopVideoRecording() {
      if (!this._screencastId)
        return;
      const screencastId = this._screencastId;
      this._screencastId = null;
      const recorder = this._videoRecorder;
      this._videoRecorder = null;
      await this._stopScreencast(recorder);
      await recorder.stop().catch(() => {
      });
      const video = this._crPage._browserContext._browser._takeVideo(screencastId);
      video === null || video === undefined || video.reportFinished();
    }
    async _startScreencast(client, options = {}) {
      this._screencastClients.add(client);
      if (this._screencastClients.size === 1)
        await this._client.send("Page.startScreencast", options);
    }
    async _stopScreencast(client) {
      this._screencastClients.delete(client);
      if (!this._screencastClients.size)
        await this._client._sendMayFail("Page.stopScreencast");
    }
    async _updateGeolocation(initial) {
      const geolocation = this._crPage._browserContext._options.geolocation;
      if (!initial || geolocation)
        await this._client.send("Emulation.setGeolocationOverride", geolocation || {});
    }
    async _updateViewport(preserveWindowBoundaries) {
      if (this._crPage._browserContext._browser.isClank())
        return;
      (0, _utils.assert)(this._isMainFrame());
      const options = this._crPage._browserContext._options;
      const emulatedSize = this._page.emulatedSize();
      if (emulatedSize === null)
        return;
      const viewportSize = emulatedSize.viewport;
      const screenSize = emulatedSize.screen;
      const isLandscape = screenSize.width > screenSize.height;
      const metricsOverride = {
        mobile: !!options.isMobile,
        width: viewportSize.width,
        height: viewportSize.height,
        screenWidth: screenSize.width,
        screenHeight: screenSize.height,
        deviceScaleFactor: options.deviceScaleFactor || 1,
        screenOrientation: options.isMobile ? isLandscape ? {
          angle: 90,
          type: "landscapePrimary"
        } : {
          angle: 0,
          type: "portraitPrimary"
        } : {
          angle: 0,
          type: "landscapePrimary"
        },
        dontSetVisibleSize: preserveWindowBoundaries
      };
      if (JSON.stringify(this._metricsOverride) === JSON.stringify(metricsOverride))
        return;
      const promises = [this._client.send("Emulation.setDeviceMetricsOverride", metricsOverride)];
      if (!preserveWindowBoundaries && this._windowId) {
        let insets = {
          width: 0,
          height: 0
        };
        if (this._crPage._browserContext._browser.options.headful) {
          insets = {
            width: 24,
            height: 88
          };
          if (process.platform === "win32")
            insets = {
              width: 16,
              height: 88
            };
          else if (process.platform === "linux")
            insets = {
              width: 8,
              height: 85
            };
          else if (process.platform === "darwin")
            insets = {
              width: 2,
              height: 80
            };
          if (this._crPage._browserContext.isPersistentContext()) {
            insets.height += 46;
          }
        }
        promises.push(this.setWindowBounds({
          width: viewportSize.width + insets.width,
          height: viewportSize.height + insets.height
        }));
      }
      await Promise.all(promises);
      this._metricsOverride = metricsOverride;
    }
    async windowBounds() {
      const {
        bounds
      } = await this._client.send("Browser.getWindowBounds", {
        windowId: this._windowId
      });
      return bounds;
    }
    async setWindowBounds(bounds) {
      return await this._client.send("Browser.setWindowBounds", {
        windowId: this._windowId,
        bounds
      });
    }
    async _updateEmulateMedia() {
      const emulatedMedia = this._page.emulatedMedia();
      const media = emulatedMedia.media === "no-override" ? "" : emulatedMedia.media;
      const colorScheme = emulatedMedia.colorScheme === "no-override" ? "" : emulatedMedia.colorScheme;
      const reducedMotion = emulatedMedia.reducedMotion === "no-override" ? "" : emulatedMedia.reducedMotion;
      const forcedColors = emulatedMedia.forcedColors === "no-override" ? "" : emulatedMedia.forcedColors;
      const features = [{
        name: "prefers-color-scheme",
        value: colorScheme
      }, {
        name: "prefers-reduced-motion",
        value: reducedMotion
      }, {
        name: "forced-colors",
        value: forcedColors
      }];
      await this._client.send("Emulation.setEmulatedMedia", {
        media,
        features
      });
    }
    async _updateUserAgent() {
      const options = this._crPage._browserContext._options;
      await this._client.send("Emulation.setUserAgentOverride", {
        userAgent: options.userAgent || "",
        acceptLanguage: options.locale,
        userAgentMetadata: calculateUserAgentMetadata(options)
      });
    }
    async _setDefaultFontFamilies(session) {
      const fontFamilies = _defaultFontFamilies.platformToFontFamilies[this._crPage._browserContext._browser._platform()];
      await session.send("Page.setFontFamilies", fontFamilies);
    }
    async _updateFileChooserInterception(initial) {
      const enabled = this._page.fileChooserIntercepted();
      if (initial && !enabled)
        return;
      await this._client.send("Page.setInterceptFileChooserDialog", {
        enabled
      }).catch(() => {
      });
    }
    async _evaluateOnNewDocument(source, world) {
      const worldName = world === "utility" ? UTILITY_WORLD_NAME : undefined;
      const {
        identifier
      } = await this._client.send("Page.addScriptToEvaluateOnNewDocument", {
        source,
        worldName
      });
      this._evaluateOnNewDocumentIdentifiers.push(identifier);
    }
    async _removeEvaluatesOnNewDocument() {
      const identifiers = this._evaluateOnNewDocumentIdentifiers;
      this._evaluateOnNewDocumentIdentifiers = [];
      await Promise.all(identifiers.map((identifier) => this._client.send("Page.removeScriptToEvaluateOnNewDocument", {
        identifier
      })));
    }
    async _getContentFrame(handle) {
      const nodeInfo = await this._client.send("DOM.describeNode", {
        objectId: handle._objectId
      });
      if (!nodeInfo || typeof nodeInfo.node.frameId !== "string")
        return null;
      return this._page._frameManager.frame(nodeInfo.node.frameId);
    }
    async _getOwnerFrame(handle) {
      const documentElement = await handle.evaluateHandle((node) => {
        const doc = node;
        if (doc.documentElement && doc.documentElement.ownerDocument === doc)
          return doc.documentElement;
        return node.ownerDocument ? node.ownerDocument.documentElement : null;
      });
      if (!documentElement)
        return null;
      if (!documentElement._objectId)
        return null;
      const nodeInfo = await this._client.send("DOM.describeNode", {
        objectId: documentElement._objectId
      });
      const frameId = nodeInfo && typeof nodeInfo.node.frameId === "string" ? nodeInfo.node.frameId : null;
      documentElement.dispose();
      return frameId;
    }
    async _getBoundingBox(handle) {
      const result = await this._client._sendMayFail("DOM.getBoxModel", {
        objectId: handle._objectId
      });
      if (!result)
        return null;
      const quad = result.model.border;
      const x = Math.min(quad[0], quad[2], quad[4], quad[6]);
      const y = Math.min(quad[1], quad[3], quad[5], quad[7]);
      const width = Math.max(quad[0], quad[2], quad[4], quad[6]) - x;
      const height = Math.max(quad[1], quad[3], quad[5], quad[7]) - y;
      const position = await this._framePosition();
      if (!position)
        return null;
      return {
        x: x + position.x,
        y: y + position.y,
        width,
        height
      };
    }
    async _framePosition() {
      const frame = this._page._frameManager.frame(this._targetId);
      if (!frame)
        return null;
      if (frame === this._page.mainFrame())
        return {
          x: 0,
          y: 0
        };
      const element = await frame.frameElement();
      const box = await element.boundingBox();
      return box;
    }
    async _scrollRectIntoViewIfNeeded(handle, rect) {
      return await this._client.send("DOM.scrollIntoViewIfNeeded", {
        objectId: handle._objectId,
        rect
      }).then(() => "done").catch((e) => {
        if (e instanceof Error && e.message.includes("Node does not have a layout object"))
          return "error:notvisible";
        if (e instanceof Error && e.message.includes("Node is detached from document"))
          return "error:notconnected";
        throw e;
      });
    }
    async _getContentQuads(handle) {
      const result = await this._client._sendMayFail("DOM.getContentQuads", {
        objectId: handle._objectId
      });
      if (!result)
        return null;
      const position = await this._framePosition();
      if (!position)
        return null;
      return result.quads.map((quad) => [{
        x: quad[0] + position.x,
        y: quad[1] + position.y
      }, {
        x: quad[2] + position.x,
        y: quad[3] + position.y
      }, {
        x: quad[4] + position.x,
        y: quad[5] + position.y
      }, {
        x: quad[6] + position.x,
        y: quad[7] + position.y
      }]);
    }
    async _adoptElementHandle(handle, to) {
      const nodeInfo = await this._client.send("DOM.describeNode", {
        objectId: handle._objectId
      });
      return this._adoptBackendNodeId(nodeInfo.node.backendNodeId, to);
    }
    async _adoptBackendNodeId(backendNodeId, to) {
      const result = await this._client._sendMayFail("DOM.resolveNode", {
        backendNodeId,
        executionContextId: to[contextDelegateSymbol]._contextId
      });
      if (!result || result.object.subtype === "null")
        throw new Error(dom.kUnableToAdoptErrorMessage);
      return to.createHandle(result.object).asElement();
    }
  }
  var contextDelegateSymbol = Symbol("delegate");
});

// node_modules/playwright-core/lib/server/chromium/crServiceWorker.js
var require_crServiceWorker = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CRServiceWorker = undefined;
  var _page = require_page();
  var _crExecutionContext = require_crExecutionContext();
  var _crNetworkManager = require_crNetworkManager();
  var network = _interopRequireWildcard(require_network2());
  var _browserContext = require_browserContext();

  class CRServiceWorker extends _page.Worker {
    constructor(browserContext, session, url) {
      super(browserContext, url);
      this._browserContext = undefined;
      this._networkManager = undefined;
      this._session = undefined;
      this._session = session;
      this._browserContext = browserContext;
      if (!!process.env.PW_EXPERIMENTAL_SERVICE_WORKER_NETWORK_EVENTS)
        this._networkManager = new _crNetworkManager.CRNetworkManager(null, this);
      session.once("Runtime.executionContextCreated", (event) => {
        this._createExecutionContext(new _crExecutionContext.CRExecutionContext(session, event.context));
      });
      if (this._networkManager && this._isNetworkInspectionEnabled()) {
        this.updateRequestInterception();
        this.updateExtraHTTPHeaders();
        this.updateHttpCredentials();
        this.updateOffline();
        this._networkManager.addSession(session, undefined, true).catch(() => {
        });
      }
      session.send("Runtime.enable", {}).catch((e) => {
      });
      session.send("Runtime.runIfWaitingForDebugger").catch((e) => {
      });
      session.on("Inspector.targetReloadedAfterCrash", () => {
        session._sendMayFail("Runtime.runIfWaitingForDebugger", {});
      });
    }
    didClose() {
      var _this$_networkManager;
      (_this$_networkManager = this._networkManager) === null || _this$_networkManager === undefined || _this$_networkManager.removeSession(this._session);
      this._session.dispose();
      super.didClose();
    }
    async updateOffline() {
      var _this$_networkManager2;
      if (!this._isNetworkInspectionEnabled())
        return;
      await ((_this$_networkManager2 = this._networkManager) === null || _this$_networkManager2 === undefined ? undefined : _this$_networkManager2.setOffline(!!this._browserContext._options.offline).catch(() => {
      }));
    }
    async updateHttpCredentials() {
      var _this$_networkManager3;
      if (!this._isNetworkInspectionEnabled())
        return;
      await ((_this$_networkManager3 = this._networkManager) === null || _this$_networkManager3 === undefined ? undefined : _this$_networkManager3.authenticate(this._browserContext._options.httpCredentials || null).catch(() => {
      }));
    }
    async updateExtraHTTPHeaders() {
      var _this$_networkManager4;
      if (!this._isNetworkInspectionEnabled())
        return;
      await ((_this$_networkManager4 = this._networkManager) === null || _this$_networkManager4 === undefined ? undefined : _this$_networkManager4.setExtraHTTPHeaders(this._browserContext._options.extraHTTPHeaders || []).catch(() => {
      }));
    }
    async updateRequestInterception() {
      var _this$_networkManager5;
      if (!this._isNetworkInspectionEnabled())
        return;
      await ((_this$_networkManager5 = this._networkManager) === null || _this$_networkManager5 === undefined ? undefined : _this$_networkManager5.setRequestInterception(this.needsRequestInterception()).catch(() => {
      }));
    }
    needsRequestInterception() {
      return this._isNetworkInspectionEnabled() && !!this._browserContext._requestInterceptor;
    }
    reportRequestFinished(request, response) {
      this._browserContext.emit(_browserContext.BrowserContext.Events.RequestFinished, {
        request,
        response
      });
    }
    requestFailed(request, _canceled) {
      this._browserContext.emit(_browserContext.BrowserContext.Events.RequestFailed, request);
    }
    requestReceivedResponse(response) {
      this._browserContext.emit(_browserContext.BrowserContext.Events.Response, response);
    }
    requestStarted(request, route) {
      this._browserContext.emit(_browserContext.BrowserContext.Events.Request, request);
      if (route) {
        var _this$_browserContext, _this$_browserContext2;
        const r = new network.Route(request, route);
        if ((_this$_browserContext = (_this$_browserContext2 = this._browserContext)._requestInterceptor) !== null && _this$_browserContext !== undefined && _this$_browserContext.call(_this$_browserContext2, r, request))
          return;
        r.continue({
          isFallback: true
        }).catch(() => {
        });
      }
    }
    _isNetworkInspectionEnabled() {
      return this._browserContext._options.serviceWorkers !== "block";
    }
  }
  exports.CRServiceWorker = CRServiceWorker;
});

// node_modules/playwright-core/lib/server/chromium/crBrowser.js
var require_crBrowser = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CRBrowserContext = exports.CRBrowser = undefined;
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _browser = require_browser5();
  var _browserContext = require_browserContext();
  var _utils = require_utils3();
  var network = _interopRequireWildcard(require_network2());
  var _page = require_page();
  var _frames = require_frames();
  var _crConnection = require_crConnection();
  var _crPage = require_crPage();
  var _crProtocolHelper = require_crProtocolHelper();
  var _crServiceWorker = require_crServiceWorker();
  var _artifact = require_artifact();

  class CRBrowser extends _browser.Browser {
    static async connect(parent, transport, options, devtools) {
      options = {
        ...options
      };
      const connection = new _crConnection.CRConnection(transport, options.protocolLogger, options.browserLogsCollector);
      const browser = new CRBrowser(parent, connection, options);
      browser._devtools = devtools;
      if (browser.isClank())
        browser._isCollocatedWithServer = false;
      const session = connection.rootSession;
      if (options.__testHookOnConnectToBrowser)
        await options.__testHookOnConnectToBrowser();
      const version = await session.send("Browser.getVersion");
      browser._version = version.product.substring(version.product.indexOf("/") + 1);
      browser._userAgent = version.userAgent;
      browser.options.headful = !version.userAgent.includes("Headless");
      if (!options.persistent) {
        await session.send("Target.setAutoAttach", {
          autoAttach: true,
          waitForDebuggerOnStart: true,
          flatten: true
        });
        return browser;
      }
      browser._defaultContext = new CRBrowserContext(browser, undefined, options.persistent);
      await Promise.all([session.send("Target.setAutoAttach", {
        autoAttach: true,
        waitForDebuggerOnStart: true,
        flatten: true
      }).then(async () => {
        await session.send("Target.getTargetInfo");
      }), browser._defaultContext._initialize()]);
      await browser._waitForAllPagesToBeInitialized();
      return browser;
    }
    constructor(parent, connection, options) {
      super(parent, options);
      this._connection = undefined;
      this._session = undefined;
      this._clientRootSessionPromise = null;
      this._contexts = new Map;
      this._crPages = new Map;
      this._backgroundPages = new Map;
      this._serviceWorkers = new Map;
      this._devtools = undefined;
      this._version = "";
      this._tracingRecording = false;
      this._tracingClient = undefined;
      this._userAgent = "";
      this._connection = connection;
      this._session = this._connection.rootSession;
      this._connection.on(_crConnection.ConnectionEvents.Disconnected, () => this._didDisconnect());
      this._session.on("Target.attachedToTarget", this._onAttachedToTarget.bind(this));
      this._session.on("Target.detachedFromTarget", this._onDetachedFromTarget.bind(this));
      this._session.on("Browser.downloadWillBegin", this._onDownloadWillBegin.bind(this));
      this._session.on("Browser.downloadProgress", this._onDownloadProgress.bind(this));
    }
    async doCreateNewContext(options) {
      let proxyBypassList = undefined;
      if (options.proxy) {
        if (process.env.PLAYWRIGHT_DISABLE_FORCED_CHROMIUM_PROXIED_LOOPBACK)
          proxyBypassList = options.proxy.bypass;
        else
          proxyBypassList = "<-loopback>" + (options.proxy.bypass ? `,${options.proxy.bypass}` : "");
      }
      const {
        browserContextId
      } = await this._session.send("Target.createBrowserContext", {
        disposeOnDetach: true,
        proxyServer: options.proxy ? options.proxy.server : undefined,
        proxyBypassList
      });
      const context = new CRBrowserContext(this, browserContextId, options);
      await context._initialize();
      this._contexts.set(browserContextId, context);
      return context;
    }
    contexts() {
      return Array.from(this._contexts.values());
    }
    version() {
      return this._version;
    }
    userAgent() {
      return this._userAgent;
    }
    _platform() {
      if (this._userAgent.includes("Windows"))
        return "win";
      if (this._userAgent.includes("Macintosh"))
        return "mac";
      return "linux";
    }
    isClank() {
      return this.options.name === "clank";
    }
    async _waitForAllPagesToBeInitialized() {
      await Promise.all([...this._crPages.values()].map((page) => page.pageOrError()));
    }
    _onAttachedToTarget({
      targetInfo,
      sessionId,
      waitingForDebugger
    }) {
      if (targetInfo.type === "browser")
        return;
      const session = this._session.createChildSession(sessionId);
      (0, _utils.assert)(targetInfo.browserContextId, "targetInfo: " + JSON.stringify(targetInfo, null, 2));
      let context = this._contexts.get(targetInfo.browserContextId) || null;
      if (!context) {
        context = this._defaultContext;
      }
      if (targetInfo.type === "other" && targetInfo.url.startsWith("devtools://devtools") && this._devtools) {
        this._devtools.install(session);
        return;
      }
      const treatOtherAsPage = targetInfo.type === "other" && process.env.PW_CHROMIUM_ATTACH_TO_OTHER;
      if (!context || targetInfo.type === "other" && !treatOtherAsPage) {
        session.detach().catch(() => {
        });
        return;
      }
      (0, _utils.assert)(!this._crPages.has(targetInfo.targetId), "Duplicate target " + targetInfo.targetId);
      (0, _utils.assert)(!this._backgroundPages.has(targetInfo.targetId), "Duplicate target " + targetInfo.targetId);
      (0, _utils.assert)(!this._serviceWorkers.has(targetInfo.targetId), "Duplicate target " + targetInfo.targetId);
      if (targetInfo.type === "background_page") {
        const backgroundPage = new _crPage.CRPage(session, targetInfo.targetId, context, null, {
          hasUIWindow: false,
          isBackgroundPage: true
        });
        this._backgroundPages.set(targetInfo.targetId, backgroundPage);
        return;
      }
      if (targetInfo.type === "page" || treatOtherAsPage) {
        const opener = targetInfo.openerId ? this._crPages.get(targetInfo.openerId) || null : null;
        const crPage = new _crPage.CRPage(session, targetInfo.targetId, context, opener, {
          hasUIWindow: targetInfo.type === "page",
          isBackgroundPage: false
        });
        this._crPages.set(targetInfo.targetId, crPage);
        return;
      }
      if (targetInfo.type === "service_worker") {
        const serviceWorker = new _crServiceWorker.CRServiceWorker(context, session, targetInfo.url);
        this._serviceWorkers.set(targetInfo.targetId, serviceWorker);
        context.emit(CRBrowserContext.CREvents.ServiceWorker, serviceWorker);
        return;
      }
      session.detach().catch(() => {
      });
    }
    _onDetachedFromTarget(payload) {
      const targetId = payload.targetId;
      const crPage = this._crPages.get(targetId);
      if (crPage) {
        this._crPages.delete(targetId);
        crPage.didClose();
        return;
      }
      const backgroundPage = this._backgroundPages.get(targetId);
      if (backgroundPage) {
        this._backgroundPages.delete(targetId);
        backgroundPage.didClose();
        return;
      }
      const serviceWorker = this._serviceWorkers.get(targetId);
      if (serviceWorker) {
        this._serviceWorkers.delete(targetId);
        serviceWorker.didClose();
        return;
      }
    }
    _didDisconnect() {
      for (const crPage of this._crPages.values())
        crPage.didClose();
      this._crPages.clear();
      for (const backgroundPage of this._backgroundPages.values())
        backgroundPage.didClose();
      this._backgroundPages.clear();
      for (const serviceWorker of this._serviceWorkers.values())
        serviceWorker.didClose();
      this._serviceWorkers.clear();
      this._didClose();
    }
    _findOwningPage(frameId) {
      for (const crPage of this._crPages.values()) {
        const frame = crPage._page._frameManager.frame(frameId);
        if (frame)
          return crPage;
      }
      return null;
    }
    _onDownloadWillBegin(payload) {
      const page = this._findOwningPage(payload.frameId);
      if (!page) {
        return;
      }
      page.willBeginDownload();
      let originPage = page._initializedPage;
      if (!originPage && page._opener)
        originPage = page._opener._initializedPage;
      if (!originPage)
        return;
      this._downloadCreated(originPage, payload.guid, payload.url, payload.suggestedFilename);
    }
    _onDownloadProgress(payload) {
      if (payload.state === "completed")
        this._downloadFinished(payload.guid, "");
      if (payload.state === "canceled")
        this._downloadFinished(payload.guid, this._closeReason || "canceled");
    }
    async _closePage(crPage) {
      await this._session.send("Target.closeTarget", {
        targetId: crPage._targetId
      });
    }
    async newBrowserCDPSession() {
      return await this._connection.createBrowserSession();
    }
    async startTracing(page, options = {}) {
      (0, _utils.assert)(!this._tracingRecording, "Cannot start recording trace while already recording trace.");
      this._tracingClient = page ? page._delegate._mainFrameSession._client : this._session;
      const defaultCategories = ["-*", "devtools.timeline", "v8.execute", "disabled-by-default-devtools.timeline", "disabled-by-default-devtools.timeline.frame", "toplevel", "blink.console", "blink.user_timing", "latencyInfo", "disabled-by-default-devtools.timeline.stack", "disabled-by-default-v8.cpu_profiler", "disabled-by-default-v8.cpu_profiler.hires"];
      const {
        screenshots = false,
        categories = defaultCategories
      } = options;
      if (screenshots)
        categories.push("disabled-by-default-devtools.screenshot");
      this._tracingRecording = true;
      await this._tracingClient.send("Tracing.start", {
        transferMode: "ReturnAsStream",
        categories: categories.join(",")
      });
    }
    async stopTracing() {
      (0, _utils.assert)(this._tracingClient, "Tracing was not started.");
      const [event] = await Promise.all([new Promise((f) => this._tracingClient.once("Tracing.tracingComplete", f)), this._tracingClient.send("Tracing.end")]);
      const tracingPath = _path.default.join(this.options.artifactsDir, (0, _utils.createGuid)() + ".crtrace");
      await (0, _crProtocolHelper.saveProtocolStream)(this._tracingClient, event.stream, tracingPath);
      this._tracingRecording = false;
      const artifact = new _artifact.Artifact(this, tracingPath);
      artifact.reportFinished();
      return artifact;
    }
    isConnected() {
      return !this._connection._closed;
    }
    async _clientRootSession() {
      if (!this._clientRootSessionPromise)
        this._clientRootSessionPromise = this._connection.createBrowserSession();
      return this._clientRootSessionPromise;
    }
  }
  exports.CRBrowser = CRBrowser;

  class CRBrowserContext extends _browserContext.BrowserContext {
    constructor(browser, browserContextId, options) {
      super(browser, options, browserContextId);
      this._authenticateProxyViaCredentials();
    }
    async _initialize() {
      (0, _utils.assert)(!Array.from(this._browser._crPages.values()).some((page) => page._browserContext === this));
      const promises = [super._initialize()];
      if (this._browser.options.name !== "electron" && this._browser.options.name !== "clank" && this._options.acceptDownloads !== "internal-browser-default") {
        promises.push(this._browser._session.send("Browser.setDownloadBehavior", {
          behavior: this._options.acceptDownloads === "accept" ? "allowAndName" : "deny",
          browserContextId: this._browserContextId,
          downloadPath: this._browser.options.downloadsPath,
          eventsEnabled: true
        }));
      }
      await Promise.all(promises);
    }
    _crPages() {
      return [...this._browser._crPages.values()].filter((crPage) => crPage._browserContext === this);
    }
    pages() {
      return this._crPages().map((crPage) => crPage._initializedPage).filter(Boolean);
    }
    async newPageDelegate() {
      (0, _browserContext.assertBrowserContextIsNotOwned)(this);
      const oldKeys = this._browser.isClank() ? new Set(this._browser._crPages.keys()) : undefined;
      let {
        targetId
      } = await this._browser._session.send("Target.createTarget", {
        url: "about:blank",
        browserContextId: this._browserContextId
      });
      if (oldKeys) {
        const newKeys = new Set(this._browser._crPages.keys());
        for (const key of oldKeys)
          newKeys.delete(key);
        for (const key of newKeys) {
          const page = this._browser._crPages.get(key);
          if (page._opener)
            newKeys.delete(key);
        }
        (0, _utils.assert)(newKeys.size === 1);
        [targetId] = [...newKeys];
      }
      return this._browser._crPages.get(targetId);
    }
    async doGetCookies(urls) {
      const {
        cookies
      } = await this._browser._session.send("Storage.getCookies", {
        browserContextId: this._browserContextId
      });
      return network.filterCookies(cookies.map((c) => {
        const copy = {
          sameSite: "Lax",
          ...c
        };
        delete copy.size;
        delete copy.priority;
        delete copy.session;
        delete copy.sameParty;
        delete copy.sourceScheme;
        delete copy.sourcePort;
        return copy;
      }), urls);
    }
    async addCookies(cookies) {
      await this._browser._session.send("Storage.setCookies", {
        cookies: network.rewriteCookies(cookies),
        browserContextId: this._browserContextId
      });
    }
    async doClearCookies() {
      await this._browser._session.send("Storage.clearCookies", {
        browserContextId: this._browserContextId
      });
    }
    async doGrantPermissions(origin, permissions) {
      const webPermissionToProtocol = new Map([
        ["geolocation", "geolocation"],
        ["midi", "midi"],
        ["notifications", "notifications"],
        ["camera", "videoCapture"],
        ["microphone", "audioCapture"],
        ["background-sync", "backgroundSync"],
        ["ambient-light-sensor", "sensors"],
        ["accelerometer", "sensors"],
        ["gyroscope", "sensors"],
        ["magnetometer", "sensors"],
        ["accessibility-events", "accessibilityEvents"],
        ["clipboard-read", "clipboardReadWrite"],
        ["clipboard-write", "clipboardSanitizedWrite"],
        ["payment-handler", "paymentHandler"],
        ["midi-sysex", "midiSysex"]
      ]);
      const filtered = permissions.map((permission) => {
        const protocolPermission = webPermissionToProtocol.get(permission);
        if (!protocolPermission)
          throw new Error("Unknown permission: " + permission);
        return protocolPermission;
      });
      await this._browser._session.send("Browser.grantPermissions", {
        origin: origin === "*" ? undefined : origin,
        browserContextId: this._browserContextId,
        permissions: filtered
      });
    }
    async doClearPermissions() {
      await this._browser._session.send("Browser.resetPermissions", {
        browserContextId: this._browserContextId
      });
    }
    async setGeolocation(geolocation) {
      (0, _browserContext.verifyGeolocation)(geolocation);
      this._options.geolocation = geolocation;
      for (const page of this.pages())
        await page._delegate.updateGeolocation();
    }
    async setExtraHTTPHeaders(headers) {
      this._options.extraHTTPHeaders = headers;
      for (const page of this.pages())
        await page._delegate.updateExtraHTTPHeaders();
      for (const sw of this.serviceWorkers())
        await sw.updateExtraHTTPHeaders();
    }
    async setUserAgent(userAgent) {
      this._options.userAgent = userAgent;
      for (const page of this.pages())
        await page._delegate.updateUserAgent();
    }
    async setOffline(offline) {
      this._options.offline = offline;
      for (const page of this.pages())
        await page._delegate.updateOffline();
      for (const sw of this.serviceWorkers())
        await sw.updateOffline();
    }
    async doSetHTTPCredentials(httpCredentials) {
      this._options.httpCredentials = httpCredentials;
      for (const page of this.pages())
        await page._delegate.updateHttpCredentials();
      for (const sw of this.serviceWorkers())
        await sw.updateHttpCredentials();
    }
    async doAddInitScript(source) {
      for (const page of this.pages())
        await page._delegate.addInitScript(source);
    }
    async doRemoveInitScripts() {
      for (const page of this.pages())
        await page._delegate.removeInitScripts();
    }
    async doExposeBinding(binding) {
      for (const page of this.pages())
        await page._delegate.exposeBinding(binding);
    }
    async doRemoveExposedBindings() {
      for (const page of this.pages())
        await page._delegate.removeExposedBindings();
    }
    async doUpdateRequestInterception() {
      for (const page of this.pages())
        await page._delegate.updateRequestInterception();
      for (const sw of this.serviceWorkers())
        await sw.updateRequestInterception();
    }
    async doClose(reason) {
      const openedBeforeUnloadDialogs = [];
      for (const crPage of this._crPages()) {
        const dialogs = [...crPage._page._frameManager._openedDialogs].filter((dialog) => dialog.type() === "beforeunload");
        openedBeforeUnloadDialogs.push(...dialogs);
      }
      await Promise.all(openedBeforeUnloadDialogs.map((dialog) => dialog.dismiss()));
      if (!this._browserContextId) {
        await this.stopVideoRecording();
        await this._browser.close({
          reason
        });
        return;
      }
      await this._browser._session.send("Target.disposeBrowserContext", {
        browserContextId: this._browserContextId
      });
      this._browser._contexts.delete(this._browserContextId);
      for (const [targetId, serviceWorker] of this._browser._serviceWorkers) {
        if (serviceWorker._browserContext !== this)
          continue;
        serviceWorker.didClose();
        this._browser._serviceWorkers.delete(targetId);
      }
    }
    async stopVideoRecording() {
      await Promise.all(this._crPages().map((crPage) => crPage._mainFrameSession._stopVideoRecording()));
    }
    onClosePersistent() {
      for (const [targetId, backgroundPage] of this._browser._backgroundPages.entries()) {
        if (backgroundPage._browserContext === this && backgroundPage._initializedPage) {
          backgroundPage.didClose();
          this._browser._backgroundPages.delete(targetId);
        }
      }
    }
    async clearCache() {
      for (const page of this._crPages())
        await page._networkManager.clearCache();
    }
    async cancelDownload(guid) {
      await this._browser._session.send("Browser.cancelDownload", {
        guid,
        browserContextId: this._browserContextId
      });
    }
    backgroundPages() {
      const result = [];
      for (const backgroundPage of this._browser._backgroundPages.values()) {
        if (backgroundPage._browserContext === this && backgroundPage._initializedPage)
          result.push(backgroundPage._initializedPage);
      }
      return result;
    }
    serviceWorkers() {
      return Array.from(this._browser._serviceWorkers.values()).filter((serviceWorker) => serviceWorker._browserContext === this);
    }
    async newCDPSession(page) {
      let targetId = null;
      if (page instanceof _page.Page) {
        targetId = page._delegate._targetId;
      } else if (page instanceof _frames.Frame) {
        const session = page._page._delegate._sessions.get(page._id);
        if (!session)
          throw new Error(`This frame does not have a separate CDP session, it is a part of the parent frame's session`);
        targetId = session._targetId;
      } else {
        throw new Error("page: expected Page or Frame");
      }
      const rootSession = await this._browser._clientRootSession();
      return rootSession.attachToTarget(targetId);
    }
  }
  exports.CRBrowserContext = CRBrowserContext;
  CRBrowserContext.CREvents = {
    BackgroundPage: "backgroundpage",
    ServiceWorker: "serviceworker"
  };
});

// node_modules/playwright-core/lib/protocol/transport.js
var require_transport = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PipeTransport = undefined;
  var _utils = require_utils3();

  class PipeTransport {
    constructor(pipeWrite, pipeRead, closeable, endian = "le") {
      this._pipeWrite = undefined;
      this._data = Buffer.from([]);
      this._waitForNextTask = (0, _utils.makeWaitForNextTask)();
      this._closed = false;
      this._bytesLeft = 0;
      this.onmessage = undefined;
      this.onclose = undefined;
      this._endian = undefined;
      this._closeableStream = undefined;
      this._pipeWrite = pipeWrite;
      this._endian = endian;
      this._closeableStream = closeable;
      pipeRead.on("data", (buffer) => this._dispatch(buffer));
      pipeRead.on("close", () => {
        this._closed = true;
        if (this.onclose)
          this.onclose();
      });
      this.onmessage = undefined;
      this.onclose = undefined;
    }
    send(message) {
      if (this._closed)
        throw new Error("Pipe has been closed");
      const data = Buffer.from(message, "utf-8");
      const dataLength = Buffer.alloc(4);
      if (this._endian === "be")
        dataLength.writeUInt32BE(data.length, 0);
      else
        dataLength.writeUInt32LE(data.length, 0);
      this._pipeWrite.write(dataLength);
      this._pipeWrite.write(data);
    }
    close() {
      this._closeableStream.close();
    }
    _dispatch(buffer) {
      this._data = Buffer.concat([this._data, buffer]);
      while (true) {
        if (!this._bytesLeft && this._data.length < 4) {
          break;
        }
        if (!this._bytesLeft) {
          this._bytesLeft = this._endian === "be" ? this._data.readUInt32BE(0) : this._data.readUInt32LE(0);
          this._data = this._data.slice(4);
        }
        if (!this._bytesLeft || this._data.length < this._bytesLeft) {
          break;
        }
        const message = this._data.slice(0, this._bytesLeft);
        this._data = this._data.slice(this._bytesLeft);
        this._bytesLeft = 0;
        this._waitForNextTask(() => {
          if (this.onmessage)
            this.onmessage(message.toString("utf-8"));
        });
      }
    }
  }
  exports.PipeTransport = PipeTransport;
});

// node_modules/playwright-core/lib/server/chromium/chromiumSwitches.js
var require_chromiumSwitches = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.chromiumSwitches = undefined;
  var chromiumSwitches = exports.chromiumSwitches = [
    "--disable-field-trial-config",
    "--disable-background-networking",
    "--enable-features=NetworkService,NetworkServiceInProcess",
    "--disable-background-timer-throttling",
    "--disable-backgrounding-occluded-windows",
    "--disable-back-forward-cache",
    "--disable-breakpad",
    "--disable-client-side-phishing-detection",
    "--disable-component-extensions-with-background-pages",
    "--disable-component-update",
    "--no-default-browser-check",
    "--disable-default-apps",
    "--disable-dev-shm-usage",
    "--disable-extensions",
    "--disable-features=ImprovedCookieControls,LazyFrameLoading,GlobalMediaControls,DestroyProfileOnBrowserClose,MediaRouter,DialMediaRouteProvider,AcceptCHFrame,AutoExpandDetailsElement,CertificateTransparencyComponentUpdater,AvoidUnnecessaryBeforeUnloadCheckSync,Translate,HttpsUpgrades,PaintHolding",
    "--allow-pre-commit-input",
    "--disable-hang-monitor",
    "--disable-ipc-flooding-protection",
    "--disable-popup-blocking",
    "--disable-prompt-on-repost",
    "--disable-renderer-backgrounding",
    "--force-color-profile=srgb",
    "--metrics-recording-only",
    "--no-first-run",
    "--enable-automation",
    "--password-store=basic",
    "--use-mock-keychain",
    "--no-service-autorun",
    "--export-tagged-pdf",
    "--disable-search-engine-choice-screen"
  ];
});

// node_modules/playwright-core/lib/server/android/android.js
var require_android = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var encodeWebFrame = function(data) {
    return _utilsBundle.wsSender.frame(Buffer.from(data), {
      opcode: 1,
      mask: true,
      fin: true,
      readOnly: true
    })[0];
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AndroidDevice = exports.Android = undefined;
  var _utilsBundle = require_utilsBundle();
  var _events = import.meta.require("events");
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _os = _interopRequireDefault(import.meta.require("os"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _utils = require_utils3();
  var _fileUtils = require_fileUtils();
  var _browserContext = require_browserContext();
  var _progress = require_progress();
  var _crBrowser = require_crBrowser();
  var _helper = require_helper();
  var _transport = require_transport();
  var _debugLogger = require_debugLogger();
  var _processLauncher = require_processLauncher();
  var _timeoutSettings = require_timeoutSettings();
  var _instrumentation = require_instrumentation();
  var _chromiumSwitches = require_chromiumSwitches();
  var _registry = require_registry();
  var ARTIFACTS_FOLDER = _path.default.join(_os.default.tmpdir(), "playwright-artifacts-");

  class Android extends _instrumentation.SdkObject {
    constructor(parent, backend) {
      super(parent, "android");
      this._backend = undefined;
      this._devices = new Map;
      this._timeoutSettings = undefined;
      this._backend = backend;
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings;
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
    }
    async devices(options) {
      const devices = (await this._backend.devices(options)).filter((d) => d.status === "device");
      const newSerials = new Set;
      for (const d of devices) {
        newSerials.add(d.serial);
        if (this._devices.has(d.serial))
          continue;
        const device = await AndroidDevice.create(this, d, options);
        this._devices.set(d.serial, device);
      }
      for (const d of this._devices.keys()) {
        if (!newSerials.has(d))
          this._devices.delete(d);
      }
      return [...this._devices.values()];
    }
    _deviceClosed(device) {
      this._devices.delete(device.serial);
    }
  }
  exports.Android = Android;

  class AndroidDevice extends _instrumentation.SdkObject {
    constructor(android, backend, model, options) {
      super(android, "android-device");
      this._backend = undefined;
      this.model = undefined;
      this.serial = undefined;
      this._options = undefined;
      this._driverPromise = undefined;
      this._lastId = 0;
      this._callbacks = new Map;
      this._pollingWebViews = undefined;
      this._timeoutSettings = undefined;
      this._webViews = new Map;
      this._browserConnections = new Set;
      this._android = undefined;
      this._isClosed = false;
      this._android = android;
      this._backend = backend;
      this.model = model;
      this.serial = backend.serial;
      this._options = options;
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings(android._timeoutSettings);
    }
    static async create(android, backend, options) {
      await backend.init();
      const model = await backend.runCommand("shell:getprop ro.product.model");
      const device = new AndroidDevice(android, backend, model.toString().trim(), options);
      await device._init();
      return device;
    }
    async _init() {
      await this._refreshWebViews();
      const poll = () => {
        this._pollingWebViews = setTimeout(() => this._refreshWebViews().then(poll).catch(() => {
          this.close().catch(() => {
          });
        }), 500);
      };
      poll();
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
    }
    async shell(command) {
      const result = await this._backend.runCommand(`shell:${command}`);
      await this._refreshWebViews();
      return result;
    }
    async open(command) {
      return await this._backend.open(`${command}`);
    }
    async screenshot() {
      return await this._backend.runCommand(`shell:screencap -p`);
    }
    async _driver() {
      if (this._isClosed)
        return;
      if (!this._driverPromise)
        this._driverPromise = this._installDriver();
      return this._driverPromise;
    }
    async _installDriver() {
      (0, _utilsBundle.debug)("pw:android")("Stopping the old driver");
      await this.shell(`am force-stop com.microsoft.playwright.androiddriver`);
      if (!this._options.omitDriverInstall) {
        (0, _utilsBundle.debug)("pw:android")("Uninstalling the old driver");
        await this.shell(`cmd package uninstall com.microsoft.playwright.androiddriver`);
        await this.shell(`cmd package uninstall com.microsoft.playwright.androiddriver.test`);
        (0, _utilsBundle.debug)("pw:android")("Installing the new driver");
        const executable = _registry.registry.findExecutable("android");
        const packageManagerCommand = (0, _utils.getPackageManagerExecCommand)();
        for (const file of ["android-driver.apk", "android-driver-target.apk"]) {
          const fullName = _path.default.join(executable.directory, file);
          if (!_fs.default.existsSync(fullName))
            throw new Error(`Please install Android driver apk using '${packageManagerCommand} playwright install android'`);
          await this.installApk(await _fs.default.promises.readFile(fullName));
        }
      } else {
        (0, _utilsBundle.debug)("pw:android")("Skipping the driver installation");
      }
      (0, _utilsBundle.debug)("pw:android")("Starting the new driver");
      this.shell("am instrument -w com.microsoft.playwright.androiddriver.test/androidx.test.runner.AndroidJUnitRunner").catch((e) => (0, _utilsBundle.debug)("pw:android")(e));
      const socket = await this._waitForLocalAbstract("playwright_android_driver_socket");
      const transport = new _transport.PipeTransport(socket, socket, socket, "be");
      transport.onmessage = (message) => {
        const response = JSON.parse(message);
        const {
          id,
          result,
          error
        } = response;
        const callback = this._callbacks.get(id);
        if (!callback)
          return;
        if (error)
          callback.reject(new Error(error));
        else
          callback.fulfill(result);
        this._callbacks.delete(id);
      };
      return transport;
    }
    async _waitForLocalAbstract(socketName) {
      let socket;
      (0, _utilsBundle.debug)("pw:android")(`Polling the socket localabstract:${socketName}`);
      while (!socket) {
        try {
          socket = await this._backend.open(`localabstract:${socketName}`);
        } catch (e) {
          await new Promise((f) => setTimeout(f, 250));
        }
      }
      (0, _utilsBundle.debug)("pw:android")(`Connected to localabstract:${socketName}`);
      return socket;
    }
    async send(method, params = {}) {
      params.timeout = this._timeoutSettings.timeout(params);
      const driver = await this._driver();
      if (!driver)
        throw new Error("Device is closed");
      const id = ++this._lastId;
      const result = new Promise((fulfill, reject) => this._callbacks.set(id, {
        fulfill,
        reject
      }));
      driver.send(JSON.stringify({
        id,
        method,
        params
      }));
      return result;
    }
    async close() {
      if (this._isClosed)
        return;
      this._isClosed = true;
      if (this._pollingWebViews)
        clearTimeout(this._pollingWebViews);
      for (const connection of this._browserConnections)
        await connection.close();
      if (this._driverPromise) {
        const driver = await this._driver();
        driver === null || driver === undefined || driver.close();
      }
      await this._backend.close();
      this._android._deviceClosed(this);
      this.emit(AndroidDevice.Events.Close);
    }
    async launchBrowser(pkg = "com.android.chrome", options) {
      (0, _utilsBundle.debug)("pw:android")("Force-stopping", pkg);
      await this._backend.runCommand(`shell:am force-stop ${pkg}`);
      const socketName = (0, _utils.isUnderTest)() ? "webview_devtools_remote_playwright_test" : "playwright_" + (0, _utils.createGuid)() + "_devtools_remote";
      const commandLine = this._defaultArgs(options, socketName).join(" ");
      (0, _utilsBundle.debug)("pw:android")("Starting", pkg, commandLine);
      await this._backend.runCommand(`shell:echo "${Buffer.from(commandLine).toString("base64")}" | base64 -d > /data/local/tmp/chrome-command-line`);
      await this._backend.runCommand(`shell:am start -a android.intent.action.VIEW -d about:blank ${pkg}`);
      const browserContext = await this._connectToBrowser(socketName, options);
      await this._backend.runCommand(`shell:rm /data/local/tmp/chrome-command-line`);
      return browserContext;
    }
    _defaultArgs(options, socketName) {
      const chromeArguments = ["_", "--disable-fre", "--no-default-browser-check", `--remote-debugging-socket-name=${socketName}`, ..._chromiumSwitches.chromiumSwitches, ...this._innerDefaultArgs(options)];
      return chromeArguments;
    }
    _innerDefaultArgs(options) {
      const {
        args = [],
        proxy
      } = options;
      const chromeArguments = [];
      if (proxy) {
        chromeArguments.push(`--proxy-server=${proxy.server}`);
        const proxyBypassRules = [];
        if (proxy.bypass)
          proxyBypassRules.push(...proxy.bypass.split(",").map((t) => t.trim()).map((t) => t.startsWith(".") ? "*" + t : t));
        if (!process.env.PLAYWRIGHT_DISABLE_FORCED_CHROMIUM_PROXIED_LOOPBACK && !proxyBypassRules.includes("<-loopback>"))
          proxyBypassRules.push("<-loopback>");
        if (proxyBypassRules.length > 0)
          chromeArguments.push(`--proxy-bypass-list=${proxyBypassRules.join(";")}`);
      }
      chromeArguments.push(...args);
      return chromeArguments;
    }
    async connectToWebView(socketName) {
      const webView = this._webViews.get(socketName);
      if (!webView)
        throw new Error("WebView has been closed");
      return await this._connectToBrowser(socketName);
    }
    async _connectToBrowser(socketName, options = {}) {
      const socket = await this._waitForLocalAbstract(socketName);
      const androidBrowser = new AndroidBrowser(this, socket);
      await androidBrowser._init();
      this._browserConnections.add(androidBrowser);
      const artifactsDir = await _fs.default.promises.mkdtemp(ARTIFACTS_FOLDER);
      const cleanupArtifactsDir = async () => {
        const errors = await (0, _fileUtils.removeFolders)([artifactsDir]);
        for (let i = 0;i < (errors || []).length; ++i)
          (0, _utilsBundle.debug)("pw:android")(`exception while removing ${artifactsDir}: ${errors[i]}`);
      };
      _processLauncher.gracefullyCloseSet.add(cleanupArtifactsDir);
      socket.on("close", async () => {
        _processLauncher.gracefullyCloseSet.delete(cleanupArtifactsDir);
        cleanupArtifactsDir().catch((e) => (0, _utilsBundle.debug)("pw:android")(`could not cleanup artifacts dir: ${e}`));
      });
      const browserOptions = {
        name: "clank",
        isChromium: true,
        slowMo: 0,
        persistent: {
          ...options,
          noDefaultViewport: true
        },
        artifactsDir,
        downloadsPath: artifactsDir,
        tracesDir: artifactsDir,
        browserProcess: new ClankBrowserProcess(androidBrowser),
        proxy: options.proxy,
        protocolLogger: _helper.helper.debugProtocolLogger(),
        browserLogsCollector: new _debugLogger.RecentLogsCollector,
        originalLaunchOptions: {}
      };
      (0, _browserContext.validateBrowserContextOptions)(options, browserOptions);
      const browser = await _crBrowser.CRBrowser.connect(this.attribution.playwright, androidBrowser, browserOptions);
      const controller = new _progress.ProgressController((0, _instrumentation.serverSideCallMetadata)(), this);
      const defaultContext = browser._defaultContext;
      await controller.run(async (progress2) => {
        await defaultContext._loadDefaultContextAsIs(progress2);
      });
      return defaultContext;
    }
    webViews() {
      return [...this._webViews.values()];
    }
    async installApk(content, options) {
      const args = options && options.args ? options.args : ["-r", "-t", "-S"];
      (0, _utilsBundle.debug)("pw:android")("Opening install socket");
      const installSocket = await this._backend.open(`shell:cmd package install ${args.join(" ")} ${content.length}`);
      (0, _utilsBundle.debug)("pw:android")("Writing driver bytes: " + content.length);
      await installSocket.write(content);
      const success = await new Promise((f) => installSocket.on("data", f));
      (0, _utilsBundle.debug)("pw:android")("Written driver bytes: " + success);
      installSocket.close();
    }
    async push(content, path, mode = 420) {
      const socket = await this._backend.open(`sync:`);
      const sendHeader = async (command, length) => {
        const buffer = Buffer.alloc(command.length + 4);
        buffer.write(command, 0);
        buffer.writeUInt32LE(length, command.length);
        await socket.write(buffer);
      };
      const send = async (command, data) => {
        await sendHeader(command, data.length);
        await socket.write(data);
      };
      await send("SEND", Buffer.from(`${path},${mode}`));
      const maxChunk = 65535;
      for (let i = 0;i < content.length; i += maxChunk)
        await send("DATA", content.slice(i, i + maxChunk));
      await sendHeader("DONE", Date.now() / 1000 | 0);
      const result = await new Promise((f) => socket.once("data", f));
      const code = result.slice(0, 4).toString();
      if (code !== "OKAY")
        throw new Error("Could not push: " + code);
      socket.close();
    }
    async _refreshWebViews() {
      const sockets = (await this._backend.runCommand(`shell:cat /proc/net/unix | grep webview_devtools_remote`)).toString().split("\n");
      if (this._isClosed)
        return;
      const socketNames = new Set;
      for (const line of sockets) {
        const matchSocketName = line.match(/[^@]+@(.*?webview_devtools_remote_?.*)/);
        if (!matchSocketName)
          continue;
        const socketName = matchSocketName[1];
        socketNames.add(socketName);
        if (this._webViews.has(socketName))
          continue;
        const match = line.match(/[^@]+@.*?webview_devtools_remote_?(\d*)/);
        let pid = -1;
        if (match && match[1])
          pid = +match[1];
        const pkg = await this._extractPkg(pid);
        if (this._isClosed)
          return;
        const webView = {
          pid,
          pkg,
          socketName
        };
        this._webViews.set(socketName, webView);
        this.emit(AndroidDevice.Events.WebViewAdded, webView);
      }
      for (const p of this._webViews.keys()) {
        if (!socketNames.has(p)) {
          this._webViews.delete(p);
          this.emit(AndroidDevice.Events.WebViewRemoved, p);
        }
      }
    }
    async _extractPkg(pid) {
      let pkg = "";
      if (pid === -1)
        return pkg;
      const procs = (await this._backend.runCommand(`shell:ps -A | grep ${pid}`)).toString().split("\n");
      for (const proc of procs) {
        const match = proc.match(/[^\s]+\s+(\d+).*$/);
        if (!match)
          continue;
        pkg = proc.substring(proc.lastIndexOf(" ") + 1);
      }
      return pkg;
    }
  }
  exports.AndroidDevice = AndroidDevice;
  AndroidDevice.Events = {
    WebViewAdded: "webViewAdded",
    WebViewRemoved: "webViewRemoved",
    Close: "close"
  };

  class AndroidBrowser extends _events.EventEmitter {
    constructor(device, socket) {
      super();
      this.device = undefined;
      this._socket = undefined;
      this._receiver = undefined;
      this._waitForNextTask = (0, _utils.makeWaitForNextTask)();
      this.onmessage = undefined;
      this.onclose = undefined;
      this.setMaxListeners(0);
      this.device = device;
      this._socket = socket;
      this._socket.on("close", () => {
        this._waitForNextTask(() => {
          if (this.onclose)
            this.onclose();
        });
      });
      this._receiver = new _utilsBundle.wsReceiver;
      this._receiver.on("message", (message) => {
        this._waitForNextTask(() => {
          if (this.onmessage)
            this.onmessage(JSON.parse(message));
        });
      });
    }
    async _init() {
      await this._socket.write(Buffer.from(`GET /devtools/browser HTTP/1.1\r
Upgrade: WebSocket\r
Connection: Upgrade\r
Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\r
Sec-WebSocket-Version: 13\r
\r
`));
      await new Promise((f) => this._socket.once("data", f));
      this._socket.on("data", (data) => this._receiver._write(data, "binary", () => {
      }));
    }
    async send(s) {
      await this._socket.write(encodeWebFrame(JSON.stringify(s)));
    }
    async close() {
      this._socket.close();
    }
  }

  class ClankBrowserProcess {
    constructor(browser) {
      this._browser = undefined;
      this.onclose = undefined;
      this._browser = browser;
    }
    async kill() {
    }
    async close() {
      await this._browser.close();
    }
  }
});

// node_modules/playwright-core/lib/server/android/backendAdb.js
var require_backendAdb = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  async function runCommand(command, host = "127.0.0.1", port = 5037, serial) {
    (0, _utilsBundle.debug)("pw:adb:runCommand")(command, serial);
    const socket = new BufferedSocketWrapper(command, net.createConnection({
      host,
      port
    }));
    try {
      if (serial) {
        await socket.write(encodeMessage(`host:transport:${serial}`));
        const status2 = await socket.read(4);
        (0, _utils.assert)(status2.toString() === "OKAY", status2.toString());
      }
      await socket.write(encodeMessage(command));
      const status = await socket.read(4);
      (0, _utils.assert)(status.toString() === "OKAY", status.toString());
      let commandOutput;
      if (!command.startsWith("shell:")) {
        const remainingLength = parseInt((await socket.read(4)).toString(), 16);
        commandOutput = await socket.read(remainingLength);
      } else {
        commandOutput = await socket.readAll();
      }
      return commandOutput;
    } finally {
      socket.close();
    }
  }
  async function open2(command, host = "127.0.0.1", port = 5037, serial) {
    const socket = new BufferedSocketWrapper(command, net.createConnection({
      host,
      port
    }));
    if (serial) {
      await socket.write(encodeMessage(`host:transport:${serial}`));
      const status2 = await socket.read(4);
      (0, _utils.assert)(status2.toString() === "OKAY", status2.toString());
    }
    await socket.write(encodeMessage(command));
    const status = await socket.read(4);
    (0, _utils.assert)(status.toString() === "OKAY", status.toString());
    return socket;
  }
  var encodeMessage = function(message) {
    let lenHex = message.length.toString(16);
    lenHex = "0".repeat(4 - lenHex.length) + lenHex;
    return Buffer.from(lenHex + message);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AdbBackend = undefined;
  var _utilsBundle = require_utilsBundle();
  var net = _interopRequireWildcard(import.meta.require("net"));
  var _events = import.meta.require("events");
  var _utils = require_utils3();

  class AdbBackend {
    async devices(options = {}) {
      const result = await runCommand("host:devices", options.host, options.port);
      const lines = result.toString().trim().split("\n");
      return lines.map((line) => {
        const [serial, status] = line.trim().split("\t");
        return new AdbDevice(serial, status, options.host, options.port);
      });
    }
  }
  exports.AdbBackend = AdbBackend;

  class AdbDevice {
    constructor(serial, status, host, port) {
      this.serial = undefined;
      this.status = undefined;
      this.host = undefined;
      this.port = undefined;
      this._closed = false;
      this.serial = serial;
      this.status = status;
      this.host = host;
      this.port = port;
    }
    async init() {
    }
    async close() {
      this._closed = true;
    }
    runCommand(command) {
      if (this._closed)
        throw new Error("Device is closed");
      return runCommand(command, this.host, this.port, this.serial);
    }
    async open(command) {
      if (this._closed)
        throw new Error("Device is closed");
      const result = await open2(command, this.host, this.port, this.serial);
      result.becomeSocket();
      return result;
    }
  }

  class BufferedSocketWrapper extends _events.EventEmitter {
    constructor(command, socket) {
      super();
      this.guid = (0, _utils.createGuid)();
      this._socket = undefined;
      this._buffer = Buffer.from([]);
      this._isSocket = false;
      this._notifyReader = undefined;
      this._connectPromise = undefined;
      this._isClosed = false;
      this._command = undefined;
      this._command = command;
      this._socket = socket;
      this._connectPromise = new Promise((f) => this._socket.on("connect", f));
      this._socket.on("data", (data) => {
        (0, _utilsBundle.debug)("pw:adb:data")(data.toString());
        if (this._isSocket) {
          this.emit("data", data);
          return;
        }
        this._buffer = Buffer.concat([this._buffer, data]);
        if (this._notifyReader)
          this._notifyReader();
      });
      this._socket.on("close", () => {
        this._isClosed = true;
        if (this._notifyReader)
          this._notifyReader();
        this.close();
        this.emit("close");
      });
      this._socket.on("error", (error) => this.emit("error", error));
    }
    async write(data) {
      (0, _utilsBundle.debug)("pw:adb:send")(data.toString().substring(0, 100) + "...");
      await this._connectPromise;
      await new Promise((f) => this._socket.write(data, f));
    }
    close() {
      if (this._isClosed)
        return;
      (0, _utilsBundle.debug)("pw:adb")("Close " + this._command);
      this._socket.destroy();
    }
    async read(length) {
      await this._connectPromise;
      (0, _utils.assert)(!this._isSocket, "Can not read by length in socket mode");
      while (this._buffer.length < length)
        await new Promise((f) => this._notifyReader = f);
      const result = this._buffer.slice(0, length);
      this._buffer = this._buffer.slice(length);
      (0, _utilsBundle.debug)("pw:adb:recv")(result.toString().substring(0, 100) + "...");
      return result;
    }
    async readAll() {
      while (!this._isClosed)
        await new Promise((f) => this._notifyReader = f);
      return this._buffer;
    }
    becomeSocket() {
      (0, _utils.assert)(!this._buffer.length);
      this._isSocket = true;
    }
  }
});

// node_modules/playwright-core/lib/server/transport.js
var require_transport2 = __commonJS((exports) => {
  var stripQueryParams = function(url) {
    try {
      const u = new URL(url);
      u.search = "";
      u.hash = "";
      return u.toString();
    } catch {
      return url;
    }
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.perMessageDeflate = exports.WebSocketTransport = undefined;
  var _utilsBundle = require_utilsBundle();
  var _utils = require_utils3();
  var _happyEyeballs = require_happy_eyeballs();
  var perMessageDeflate = exports.perMessageDeflate = {
    zlibDeflateOptions: {
      level: 3
    },
    zlibInflateOptions: {
      chunkSize: 10 * 1024
    },
    threshold: 10 * 1024
  };

  class WebSocketTransport {
    static async connect(progress2, url, headers, followRedirects, debugLogHeader) {
      return await WebSocketTransport._connect(progress2, url, headers || {}, {
        follow: !!followRedirects,
        hadRedirects: false
      }, debugLogHeader);
    }
    static async _connect(progress2, url, headers, redirect, debugLogHeader) {
      const logUrl = stripQueryParams(url);
      progress2 === null || progress2 === undefined || progress2.log(`<ws connecting> ${logUrl}`);
      const transport = new WebSocketTransport(progress2, url, logUrl, headers, redirect.follow && redirect.hadRedirects, debugLogHeader);
      let success = false;
      progress2 === null || progress2 === undefined || progress2.cleanupWhenAborted(async () => {
        if (!success)
          await transport.closeAndWait().catch((e) => null);
      });
      const result = await new Promise((fulfill, reject) => {
        transport._ws.on("open", async () => {
          progress2 === null || progress2 === undefined || progress2.log(`<ws connected> ${logUrl}`);
          fulfill({
            transport
          });
        });
        transport._ws.on("error", (event) => {
          progress2 === null || progress2 === undefined || progress2.log(`<ws connect error> ${logUrl} ${event.message}`);
          reject(new Error("WebSocket error: " + event.message));
          transport._ws.close();
        });
        transport._ws.on("unexpected-response", (request, response) => {
          if (redirect.follow && !redirect.hadRedirects && (response.statusCode === 301 || response.statusCode === 302 || response.statusCode === 307 || response.statusCode === 308)) {
            fulfill({
              redirect: response
            });
            transport._ws.close();
            return;
          }
          for (let i = 0;i < response.rawHeaders.length; i += 2) {
            if (debugLogHeader && response.rawHeaders[i] === debugLogHeader)
              progress2 === null || progress2 === undefined || progress2.log(response.rawHeaders[i + 1]);
          }
          const chunks = [];
          const errorPrefix = `${logUrl} ${response.statusCode} ${response.statusMessage}`;
          response.on("data", (chunk) => chunks.push(chunk));
          response.on("close", () => {
            const error = chunks.length ? `${errorPrefix}\n${Buffer.concat(chunks)}` : errorPrefix;
            progress2 === null || progress2 === undefined || progress2.log(`<ws unexpected response> ${error}`);
            reject(new Error("WebSocket error: " + error));
            transport._ws.close();
          });
        });
      });
      if (result.redirect) {
        const newHeaders = Object.fromEntries(Object.entries(headers || {}).filter(([name]) => {
          return !name.includes("access-key") && name.toLowerCase() !== "authorization";
        }));
        return WebSocketTransport._connect(progress2, result.redirect.headers.location, newHeaders, {
          follow: true,
          hadRedirects: true
        }, debugLogHeader);
      }
      success = true;
      return transport;
    }
    constructor(progress2, url, logUrl, headers, followRedirects, debugLogHeader) {
      var _progress$timeUntilDe;
      this._ws = undefined;
      this._progress = undefined;
      this._logUrl = undefined;
      this.onmessage = undefined;
      this.onclose = undefined;
      this.wsEndpoint = undefined;
      this.headers = [];
      this.wsEndpoint = url;
      this._logUrl = logUrl;
      this._ws = new _utilsBundle.ws(url, [], {
        maxPayload: 256 * 1024 * 1024,
        handshakeTimeout: Math.max((_progress$timeUntilDe = progress2 === null || progress2 === undefined ? undefined : progress2.timeUntilDeadline()) !== null && _progress$timeUntilDe !== undefined ? _progress$timeUntilDe : 30000, 1),
        headers,
        followRedirects,
        agent: /^(https|wss):\/\//.test(url) ? _happyEyeballs.httpsHappyEyeballsAgent : _happyEyeballs.httpHappyEyeballsAgent,
        perMessageDeflate
      });
      this._ws.on("upgrade", (response) => {
        for (let i = 0;i < response.rawHeaders.length; i += 2) {
          this.headers.push({
            name: response.rawHeaders[i],
            value: response.rawHeaders[i + 1]
          });
          if (debugLogHeader && response.rawHeaders[i] === debugLogHeader)
            progress2 === null || progress2 === undefined || progress2.log(response.rawHeaders[i + 1]);
        }
      });
      this._progress = progress2;
      const messageWrap = (0, _utils.makeWaitForNextTask)();
      this._ws.addEventListener("message", (event) => {
        messageWrap(() => {
          const eventData = event.data;
          let parsedJson;
          try {
            parsedJson = JSON.parse(eventData);
          } catch (e) {
            var _this$_progress;
            (_this$_progress = this._progress) === null || _this$_progress === undefined || _this$_progress.log(`<closing ws> Closing websocket due to malformed JSON. eventData=${eventData} e=${e === null || e === undefined ? undefined : e.message}`);
            this._ws.close();
            return;
          }
          try {
            if (this.onmessage)
              this.onmessage.call(null, parsedJson);
          } catch (e) {
            var _this$_progress2;
            (_this$_progress2 = this._progress) === null || _this$_progress2 === undefined || _this$_progress2.log(`<closing ws> Closing websocket due to failed onmessage callback. eventData=${eventData} e=${e === null || e === undefined ? undefined : e.message}`);
            this._ws.close();
          }
        });
      });
      this._ws.addEventListener("close", (event) => {
        var _this$_progress3;
        (_this$_progress3 = this._progress) === null || _this$_progress3 === undefined || _this$_progress3.log(`<ws disconnected> ${logUrl} code=${event.code} reason=${event.reason}`);
        if (this.onclose)
          this.onclose.call(null, event.reason);
      });
      this._ws.addEventListener("error", (error) => {
        var _this$_progress4;
        return (_this$_progress4 = this._progress) === null || _this$_progress4 === undefined ? undefined : _this$_progress4.log(`<ws error> ${logUrl} ${error.type} ${error.message}`);
      });
    }
    send(message) {
      this._ws.send(JSON.stringify(message));
    }
    close() {
      var _this$_progress5;
      (_this$_progress5 = this._progress) === null || _this$_progress5 === undefined || _this$_progress5.log(`<ws disconnecting> ${this._logUrl}`);
      this._ws.close();
    }
    async closeAndWait() {
      if (this._ws.readyState === _utilsBundle.ws.CLOSED)
        return;
      const promise = new Promise((f) => this._ws.once("close", f));
      this.close();
      await promise;
    }
  }
  exports.WebSocketTransport = WebSocketTransport;
});

// node_modules/playwright-core/lib/server/pipeTransport.js
var require_pipeTransport = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PipeTransport = undefined;
  var _utils = require_utils3();
  var _debugLogger = require_debugLogger();

  class PipeTransport {
    constructor(pipeWrite, pipeRead) {
      this._pipeRead = undefined;
      this._pipeWrite = undefined;
      this._pendingBuffers = [];
      this._waitForNextTask = (0, _utils.makeWaitForNextTask)();
      this._closed = false;
      this._onclose = undefined;
      this.onmessage = undefined;
      this._pipeRead = pipeRead;
      this._pipeWrite = pipeWrite;
      pipeRead.on("data", (buffer) => this._dispatch(buffer));
      pipeRead.on("close", () => {
        this._closed = true;
        if (this._onclose)
          this._onclose.call(null);
      });
      pipeRead.on("error", (e) => _debugLogger.debugLogger.log("error", e));
      pipeWrite.on("error", (e) => _debugLogger.debugLogger.log("error", e));
      this.onmessage = undefined;
    }
    get onclose() {
      return this._onclose;
    }
    set onclose(onclose) {
      this._onclose = onclose;
      if (onclose && !this._pipeRead.readable)
        onclose();
    }
    send(message) {
      if (this._closed)
        throw new Error("Pipe has been closed");
      this._pipeWrite.write(JSON.stringify(message));
      this._pipeWrite.write("\0");
    }
    close() {
      throw new Error("unimplemented");
    }
    _dispatch(buffer) {
      let end = buffer.indexOf("\0");
      if (end === -1) {
        this._pendingBuffers.push(buffer);
        return;
      }
      this._pendingBuffers.push(buffer.slice(0, end));
      const message = Buffer.concat(this._pendingBuffers).toString();
      this._waitForNextTask(() => {
        if (this.onmessage)
          this.onmessage.call(null, JSON.parse(message));
      });
      let start = end + 1;
      end = buffer.indexOf("\0", start);
      while (end !== -1) {
        const message2 = buffer.toString(undefined, start, end);
        this._waitForNextTask(() => {
          if (this.onmessage)
            this.onmessage.call(null, JSON.parse(message2));
        });
        start = end + 1;
        end = buffer.indexOf("\0", start);
      }
      this._pendingBuffers = [buffer.slice(start)];
    }
  }
  exports.PipeTransport = PipeTransport;
});

// node_modules/playwright-core/lib/server/browserType.js
var require_browserType = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var copyTestHooks = function(from, to) {
    for (const [key, value] of Object.entries(from)) {
      if (key.startsWith("__testHook"))
        to[key] = value;
    }
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.kNoXServerRunningError = exports.BrowserType = undefined;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var os = _interopRequireWildcard(import.meta.require("os"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _browserContext = require_browserContext();
  var _registry = require_registry();
  var _transport = require_transport2();
  var _processLauncher = require_processLauncher();
  var _pipeTransport = require_pipeTransport();
  var _progress = require_progress();
  var _timeoutSettings = require_timeoutSettings();
  var _utils = require_utils3();
  var _fileUtils = require_fileUtils();
  var _helper = require_helper();
  var _debugLogger = require_debugLogger();
  var _instrumentation = require_instrumentation();
  var _manualPromise = require_manualPromise();
  var _protocolError = require_protocolError();
  var kNoXServerRunningError = exports.kNoXServerRunningError = "Looks like you launched a headed browser without having a XServer running.\nSet either \'headless: true\' or use \'xvfb-run <your-playwright-app>\' before running Playwright.\n\n<3 Playwright Team";

  class BrowserType extends _instrumentation.SdkObject {
    constructor(parent, browserName) {
      super(parent, "browser-type");
      this._name = undefined;
      this.attribution.browserType = this;
      this._name = browserName;
    }
    executablePath() {
      return _registry.registry.findExecutable(this._name).executablePath(this.attribution.playwright.options.sdkLanguage) || "";
    }
    name() {
      return this._name;
    }
    async launch(metadata, options, protocolLogger) {
      options = this._validateLaunchOptions(options);
      const controller = new _progress.ProgressController(metadata, this);
      controller.setLogName("browser");
      const browser = await controller.run((progress2) => {
        const seleniumHubUrl = options.__testHookSeleniumRemoteURL || process.env.SELENIUM_REMOTE_URL;
        if (seleniumHubUrl)
          return this._launchWithSeleniumHub(progress2, seleniumHubUrl, options);
        return this._innerLaunchWithRetries(progress2, options, undefined, _helper.helper.debugProtocolLogger(protocolLogger)).catch((e) => {
          throw this._rewriteStartupLog(e);
        });
      }, _timeoutSettings.TimeoutSettings.launchTimeout(options));
      return browser;
    }
    async launchPersistentContext(metadata, userDataDir, options) {
      options = this._validateLaunchOptions(options);
      const controller = new _progress.ProgressController(metadata, this);
      const persistent = options;
      controller.setLogName("browser");
      const browser = await controller.run((progress2) => {
        return this._innerLaunchWithRetries(progress2, options, persistent, _helper.helper.debugProtocolLogger(), userDataDir).catch((e) => {
          throw this._rewriteStartupLog(e);
        });
      }, _timeoutSettings.TimeoutSettings.launchTimeout(options));
      return browser._defaultContext;
    }
    async _innerLaunchWithRetries(progress2, options, persistent, protocolLogger, userDataDir) {
      try {
        return await this._innerLaunch(progress2, options, persistent, protocolLogger, userDataDir);
      } catch (error) {
        const errorMessage = typeof error === "object" && typeof error.message === "string" ? error.message : "";
        if (errorMessage.includes("Inconsistency detected by ld.so")) {
          progress2.log(`<restarting browser due to hitting race condition in glibc>`);
          return this._innerLaunch(progress2, options, persistent, protocolLogger, userDataDir);
        }
        throw error;
      }
    }
    async _innerLaunch(progress2, options, persistent, protocolLogger, maybeUserDataDir) {
      options.proxy = options.proxy ? (0, _browserContext.normalizeProxySettings)(options.proxy) : undefined;
      const browserLogsCollector = new _debugLogger.RecentLogsCollector;
      const {
        browserProcess,
        userDataDir,
        artifactsDir,
        transport
      } = await this._launchProcess(progress2, options, !!persistent, browserLogsCollector, maybeUserDataDir);
      if (options.__testHookBeforeCreateBrowser)
        await options.__testHookBeforeCreateBrowser();
      const browserOptions = {
        name: this._name,
        isChromium: this._name === "chromium",
        channel: options.channel,
        slowMo: options.slowMo,
        persistent,
        headful: !options.headless,
        artifactsDir,
        downloadsPath: options.downloadsPath || artifactsDir,
        tracesDir: options.tracesDir || artifactsDir,
        browserProcess,
        customExecutablePath: options.executablePath,
        proxy: options.proxy,
        protocolLogger,
        browserLogsCollector,
        wsEndpoint: options.useWebSocket ? transport.wsEndpoint : undefined,
        originalLaunchOptions: options
      };
      if (persistent)
        (0, _browserContext.validateBrowserContextOptions)(persistent, browserOptions);
      copyTestHooks(options, browserOptions);
      const browser = await this._connectToTransport(transport, browserOptions);
      browser._userDataDirForTest = userDataDir;
      if (persistent && !options.ignoreAllDefaultArgs)
        await browser._defaultContext._loadDefaultContext(progress2);
      return browser;
    }
    async _launchProcess(progress2, options, isPersistent, browserLogsCollector, userDataDir) {
      var _options$args;
      const {
        ignoreDefaultArgs,
        ignoreAllDefaultArgs,
        args = [],
        executablePath = null,
        handleSIGINT = true,
        handleSIGTERM = true,
        handleSIGHUP = true
      } = options;
      const env = options.env ? (0, _processLauncher.envArrayToObject)(options.env) : process.env;
      await this._createArtifactDirs(options);
      const tempDirectories = [];
      const artifactsDir = await _fs.default.promises.mkdtemp(_path.default.join(os.tmpdir(), "playwright-artifacts-"));
      tempDirectories.push(artifactsDir);
      if (userDataDir) {
        if (!await (0, _fileUtils.existsAsync)(userDataDir))
          await _fs.default.promises.mkdir(userDataDir, {
            recursive: true,
            mode: 448
          });
      } else {
        userDataDir = await _fs.default.promises.mkdtemp(_path.default.join(os.tmpdir(), `playwright_${this._name}dev_profile-`));
        tempDirectories.push(userDataDir);
      }
      const browserArguments = [];
      if (ignoreAllDefaultArgs)
        browserArguments.push(...args);
      else if (ignoreDefaultArgs)
        browserArguments.push(...this._defaultArgs(options, isPersistent, userDataDir).filter((arg) => ignoreDefaultArgs.indexOf(arg) === -1));
      else
        browserArguments.push(...this._defaultArgs(options, isPersistent, userDataDir));
      let executable;
      if (executablePath) {
        if (!await (0, _fileUtils.existsAsync)(executablePath))
          throw new Error(`Failed to launch ${this._name} because executable doesn't exist at ${executablePath}`);
        executable = executablePath;
      } else {
        const registryExecutable = _registry.registry.findExecutable(options.channel || this._name);
        if (!registryExecutable || registryExecutable.browserName !== this._name)
          throw new Error(`Unsupported ${this._name} channel "${options.channel}"`);
        executable = registryExecutable.executablePathOrDie(this.attribution.playwright.options.sdkLanguage);
        await _registry.registry.validateHostRequirementsForExecutablesIfNeeded([registryExecutable], this.attribution.playwright.options.sdkLanguage);
      }
      const waitForWSEndpoint = options.useWebSocket || (_options$args = options.args) !== null && _options$args !== undefined && _options$args.some((a) => a.startsWith("--remote-debugging-port")) ? new _manualPromise.ManualPromise : undefined;
      const waitForJuggler = this._name === "firefox" ? new _manualPromise.ManualPromise : undefined;
      let transport = undefined;
      let browserProcess = undefined;
      const {
        launchedProcess,
        gracefullyClose,
        kill
      } = await (0, _processLauncher.launchProcess)({
        command: executable,
        args: browserArguments,
        env: this._amendEnvironment(env, userDataDir, executable, browserArguments),
        handleSIGINT,
        handleSIGTERM,
        handleSIGHUP,
        log: (message) => {
          if (waitForWSEndpoint) {
            const match = message.match(/DevTools listening on (.*)/);
            if (match)
              waitForWSEndpoint.resolve(match[1]);
          }
          if (waitForJuggler && message.includes("Juggler listening to the pipe"))
            waitForJuggler.resolve();
          progress2.log(message);
          browserLogsCollector.log(message);
        },
        stdio: "pipe",
        tempDirectories,
        attemptToGracefullyClose: async () => {
          if (options.__testHookGracefullyClose)
            await options.__testHookGracefullyClose();
          this._attemptToGracefullyCloseBrowser(transport);
        },
        onExit: (exitCode, signal) => {
          waitForJuggler === null || waitForJuggler === undefined || waitForJuggler.resolve();
          if (browserProcess && browserProcess.onclose)
            browserProcess.onclose(exitCode, signal);
        }
      });
      async function closeOrKill(timeout) {
        let timer;
        try {
          await Promise.race([gracefullyClose(), new Promise((resolve, reject) => timer = setTimeout(reject, timeout))]);
        } catch (ignored) {
          await kill().catch((ignored2) => {
          });
        } finally {
          clearTimeout(timer);
        }
      }
      browserProcess = {
        onclose: undefined,
        process: launchedProcess,
        close: () => closeOrKill(options.__testHookBrowserCloseTimeout || _timeoutSettings.DEFAULT_TIMEOUT),
        kill
      };
      progress2.cleanupWhenAborted(() => closeOrKill(progress2.timeUntilDeadline()));
      const wsEndpoint = await waitForWSEndpoint;
      await waitForJuggler;
      if (options.useWebSocket) {
        transport = await _transport.WebSocketTransport.connect(progress2, wsEndpoint);
      } else {
        const stdio = launchedProcess.stdio;
        transport = new _pipeTransport.PipeTransport(stdio[3], stdio[4]);
      }
      return {
        browserProcess,
        artifactsDir,
        userDataDir,
        transport
      };
    }
    async _createArtifactDirs(options) {
      if (options.downloadsPath)
        await _fs.default.promises.mkdir(options.downloadsPath, {
          recursive: true
        });
      if (options.tracesDir)
        await _fs.default.promises.mkdir(options.tracesDir, {
          recursive: true
        });
    }
    async connectOverCDP(metadata, endpointURL, options, timeout) {
      throw new Error("CDP connections are only supported by Chromium");
    }
    async _launchWithSeleniumHub(progress2, hubUrl, options) {
      throw new Error("Connecting to SELENIUM_REMOTE_URL is only supported by Chromium");
    }
    _validateLaunchOptions(options) {
      const {
        devtools = false
      } = options;
      let {
        headless = !devtools,
        downloadsPath,
        proxy
      } = options;
      if ((0, _utils.debugMode)())
        headless = false;
      if (downloadsPath && !_path.default.isAbsolute(downloadsPath))
        downloadsPath = _path.default.join(process.cwd(), downloadsPath);
      if (this.attribution.playwright.options.socksProxyPort)
        proxy = {
          server: `socks5://127.0.0.1:${this.attribution.playwright.options.socksProxyPort}`
        };
      return {
        ...options,
        devtools,
        headless,
        downloadsPath,
        proxy
      };
    }
    _createUserDataDirArgMisuseError(userDataDirArg) {
      switch (this.attribution.playwright.options.sdkLanguage) {
        case "java":
          return new Error(`Pass userDataDir parameter to 'BrowserType.launchPersistentContext(userDataDir, options)' instead of specifying '${userDataDirArg}' argument`);
        case "python":
          return new Error(`Pass user_data_dir parameter to 'browser_type.launch_persistent_context(user_data_dir, **kwargs)' instead of specifying '${userDataDirArg}' argument`);
        case "csharp":
          return new Error(`Pass userDataDir parameter to 'BrowserType.LaunchPersistentContextAsync(userDataDir, options)' instead of specifying '${userDataDirArg}' argument`);
        default:
          return new Error(`Pass userDataDir parameter to 'browserType.launchPersistentContext(userDataDir, options)' instead of specifying '${userDataDirArg}' argument`);
      }
    }
    _rewriteStartupLog(error) {
      if (!(0, _protocolError.isProtocolError)(error))
        return error;
      return this._doRewriteStartupLog(error);
    }
  }
  exports.BrowserType = BrowserType;
});

// node_modules/playwright-core/lib/server/chromium/crDevTools.js
var require_crDevTools = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CRDevTools = undefined;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var kBindingName = "__pw_devtools__";

  class CRDevTools {
    constructor(preferencesPath) {
      this._preferencesPath = undefined;
      this._prefs = undefined;
      this._savePromise = undefined;
      this.__testHookOnBinding = undefined;
      this._preferencesPath = preferencesPath;
      this._savePromise = Promise.resolve();
    }
    install(session) {
      session.on("Runtime.bindingCalled", async (event) => {
        if (event.name !== kBindingName)
          return;
        const parsed = JSON.parse(event.payload);
        let result = undefined;
        if (this.__testHookOnBinding)
          this.__testHookOnBinding(parsed);
        if (parsed.method === "getPreferences") {
          if (this._prefs === undefined) {
            try {
              const json = await _fs.default.promises.readFile(this._preferencesPath, "utf8");
              this._prefs = JSON.parse(json);
            } catch (e) {
              this._prefs = {};
            }
          }
          result = this._prefs;
        } else if (parsed.method === "setPreference") {
          this._prefs[parsed.params[0]] = parsed.params[1];
          this._save();
        } else if (parsed.method === "removePreference") {
          delete this._prefs[parsed.params[0]];
          this._save();
        } else if (parsed.method === "clearPreferences") {
          this._prefs = {};
          this._save();
        }
        session.send("Runtime.evaluate", {
          expression: `window.DevToolsAPI.embedderMessageAck(${parsed.id}, ${JSON.stringify(result)})`,
          contextId: event.executionContextId
        }).catch((e) => null);
      });
      Promise.all([session.send("Runtime.enable"), session.send("Runtime.addBinding", {
        name: kBindingName
      }), session.send("Page.enable"), session.send("Page.addScriptToEvaluateOnNewDocument", {
        source: `
        (() => {
          const init = () => {
            // Lazy init happens when InspectorFrontendHost is initialized.
            // At this point DevToolsHost is ready to be used.
            const host = window.DevToolsHost;
            const old = host.sendMessageToEmbedder.bind(host);
            host.sendMessageToEmbedder = message => {
              if (['getPreferences', 'setPreference', 'removePreference', 'clearPreferences'].includes(JSON.parse(message).method))
                window.${kBindingName}(message);
              else
                old(message);
            };
          };
          let value;
          Object.defineProperty(window, 'InspectorFrontendHost', {
            configurable: true,
            enumerable: true,
            get() { return value; },
            set(v) { value = v; init(); },
          });
        })()
      `
      }), session.send("Runtime.runIfWaitingForDebugger")]).catch((e) => null);
    }
    _save() {
      this._savePromise = this._savePromise.then(async () => {
        await _fs.default.promises.writeFile(this._preferencesPath, JSON.stringify(this._prefs)).catch((e) => null);
      });
    }
  }
  exports.CRDevTools = CRDevTools;
});

// node_modules/playwright-core/lib/server/chromium/chromium.js
var require_chromium = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  async function urlToWSEndpoint(progress2, endpointURL, headers) {
    if (endpointURL.startsWith("ws"))
      return endpointURL;
    progress2.log(`<ws preparing> retrieving websocket url from ${endpointURL}`);
    const httpURL = endpointURL.endsWith("/") ? `${endpointURL}json/version/` : `${endpointURL}/json/version/`;
    const json = await (0, _network.fetchData)({
      url: httpURL,
      headers
    }, async (_, resp) => new Error(`Unexpected status ${resp.statusCode} when connecting to ${httpURL}.\n` + `This does not look like a DevTools server, try connecting via ws://.`));
    return JSON.parse(json).webSocketDebuggerUrl;
  }
  async function seleniumErrorHandler(params, response) {
    const body = await streamToString(response);
    let message = body;
    try {
      const json = JSON.parse(body);
      message = json.value.localizedMessage || json.value.message;
    } catch (e) {
    }
    return new Error(`Error connecting to Selenium at ${params.url}: ${message}`);
  }
  var addProtocol = function(url) {
    if (!["ws://", "wss://", "http://", "https://"].some((protocol) => url.startsWith(protocol)))
      return "http://" + url;
    return url;
  };
  var streamToString = function(stream) {
    return new Promise((resolve, reject) => {
      const chunks = [];
      stream.on("data", (chunk) => chunks.push(Buffer.from(chunk)));
      stream.on("error", reject);
      stream.on("end", () => resolve(Buffer.concat(chunks).toString("utf8")));
    });
  };
  var parseSeleniumRemoteParams = function(env, progress2) {
    try {
      const parsed = JSON.parse(env.value);
      progress2.log(`<selenium> using additional ${env.name} "${env.value}"`);
      return parsed;
    } catch (e) {
      progress2.log(`<selenium> ignoring additional ${env.name} "${env.value}": ${e}`);
    }
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Chromium = undefined;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _os = _interopRequireDefault(import.meta.require("os"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _crBrowser = require_crBrowser();
  var _processLauncher = require_processLauncher();
  var _crConnection = require_crConnection();
  var _browserType = require_browserType();
  var _transport = require_transport2();
  var _crDevTools = require_crDevTools();
  var _browser = require_browser5();
  var _network = require_network();
  var _userAgent = require_userAgent();
  var _ascii = require_ascii();
  var _utils = require_utils3();
  var _fileUtils = require_fileUtils();
  var _debugLogger = require_debugLogger();
  var _progress = require_progress();
  var _timeoutSettings = require_timeoutSettings();
  var _helper = require_helper();
  var _registry = require_registry();
  var _manualPromise = require_manualPromise();
  var _browserContext = require_browserContext();
  var _chromiumSwitches = require_chromiumSwitches();
  var ARTIFACTS_FOLDER = _path.default.join(_os.default.tmpdir(), "playwright-artifacts-");

  class Chromium extends _browserType.BrowserType {
    constructor(parent) {
      super(parent, "chromium");
      this._devtools = undefined;
      if ((0, _utils.debugMode)())
        this._devtools = this._createDevTools();
    }
    async connectOverCDP(metadata, endpointURL, options, timeout) {
      const controller = new _progress.ProgressController(metadata, this);
      controller.setLogName("browser");
      return controller.run(async (progress2) => {
        return await this._connectOverCDPInternal(progress2, endpointURL, options);
      }, _timeoutSettings.TimeoutSettings.timeout({
        timeout
      }));
    }
    async _connectOverCDPInternal(progress2, endpointURL, options, onClose) {
      let headersMap;
      if (options.headers)
        headersMap = (0, _utils.headersArrayToObject)(options.headers, false);
      if (!headersMap)
        headersMap = {
          "User-Agent": (0, _userAgent.getUserAgent)()
        };
      else if (headersMap && !Object.keys(headersMap).some((key) => key.toLowerCase() === "user-agent"))
        headersMap["User-Agent"] = (0, _userAgent.getUserAgent)();
      const artifactsDir = await _fs.default.promises.mkdtemp(ARTIFACTS_FOLDER);
      const wsEndpoint = await urlToWSEndpoint(progress2, endpointURL, headersMap);
      progress2.throwIfAborted();
      const chromeTransport = await _transport.WebSocketTransport.connect(progress2, wsEndpoint, headersMap);
      const cleanedUp = new _manualPromise.ManualPromise;
      const doCleanup = async () => {
        await (0, _fileUtils.removeFolders)([artifactsDir]);
        await (onClose === null || onClose === undefined ? undefined : onClose());
        cleanedUp.resolve();
      };
      const doClose = async () => {
        await chromeTransport.closeAndWait();
        await cleanedUp;
      };
      const browserProcess = {
        close: doClose,
        kill: doClose
      };
      const persistent = {
        noDefaultViewport: true
      };
      const browserOptions = {
        slowMo: options.slowMo,
        name: "chromium",
        isChromium: true,
        persistent,
        browserProcess,
        protocolLogger: _helper.helper.debugProtocolLogger(),
        browserLogsCollector: new _debugLogger.RecentLogsCollector,
        artifactsDir,
        downloadsPath: options.downloadsPath || artifactsDir,
        tracesDir: options.tracesDir || artifactsDir,
        proxy: {
          server: "per-context"
        },
        originalLaunchOptions: {}
      };
      (0, _browserContext.validateBrowserContextOptions)(persistent, browserOptions);
      progress2.throwIfAborted();
      const browser = await _crBrowser.CRBrowser.connect(this.attribution.playwright, chromeTransport, browserOptions);
      browser._isCollocatedWithServer = false;
      browser.on(_browser.Browser.Events.Disconnected, doCleanup);
      return browser;
    }
    _createDevTools() {
      const directory = _registry.registry.findExecutable("chromium").directory;
      return directory ? new _crDevTools.CRDevTools(_path.default.join(directory, "devtools-preferences.json")) : undefined;
    }
    async _connectToTransport(transport, options) {
      let devtools = this._devtools;
      if (options.__testHookForDevTools) {
        devtools = this._createDevTools();
        await options.__testHookForDevTools(devtools);
      }
      return _crBrowser.CRBrowser.connect(this.attribution.playwright, transport, options, devtools);
    }
    _doRewriteStartupLog(error) {
      if (!error.logs)
        return error;
      if (error.logs.includes("Missing X server"))
        error.logs = "\n" + (0, _ascii.wrapInASCIIBox)(_browserType.kNoXServerRunningError, 1);
      if (!error.logs.includes("crbug.com/357670") && !error.logs.includes("No usable sandbox!") && !error.logs.includes("crbug.com/638180"))
        return error;
      error.logs = [`Chromium sandboxing failed!`, `================================`, `To avoid the sandboxing issue, do either of the following:`, `  - (preferred): Configure your environment to support sandboxing`, `  - (alternative): Launch Chromium without sandbox using 'chromiumSandbox: false' option`, `================================`, ``].join("\n");
      return error;
    }
    _amendEnvironment(env, userDataDir, executable, browserArguments) {
      return env;
    }
    _attemptToGracefullyCloseBrowser(transport) {
      const message = {
        method: "Browser.close",
        id: _crConnection.kBrowserCloseMessageId,
        params: {}
      };
      transport.send(message);
    }
    async _launchWithSeleniumHub(progress2, hubUrl, options) {
      await this._createArtifactDirs(options);
      if (!hubUrl.endsWith("/"))
        hubUrl = hubUrl + "/";
      const args = this._innerDefaultArgs(options);
      args.push("--remote-debugging-port=0");
      const isEdge = options.channel && options.channel.startsWith("msedge");
      let desiredCapabilities = {
        browserName: isEdge ? "MicrosoftEdge" : "chrome",
        [isEdge ? "ms:edgeOptions" : "goog:chromeOptions"]: {
          args
        }
      };
      if (process.env.SELENIUM_REMOTE_CAPABILITIES) {
        const remoteCapabilities = parseSeleniumRemoteParams({
          name: "capabilities",
          value: process.env.SELENIUM_REMOTE_CAPABILITIES
        }, progress2);
        if (remoteCapabilities)
          desiredCapabilities = {
            ...desiredCapabilities,
            ...remoteCapabilities
          };
      }
      let headers = {};
      if (process.env.SELENIUM_REMOTE_HEADERS) {
        const remoteHeaders = parseSeleniumRemoteParams({
          name: "headers",
          value: process.env.SELENIUM_REMOTE_HEADERS
        }, progress2);
        if (remoteHeaders)
          headers = remoteHeaders;
      }
      progress2.log(`<selenium> connecting to ${hubUrl}`);
      const response = await (0, _network.fetchData)({
        url: hubUrl + "session",
        method: "POST",
        headers: {
          "Content-Type": "application/json; charset=utf-8",
          ...headers
        },
        data: JSON.stringify({
          capabilities: {
            alwaysMatch: desiredCapabilities
          }
        }),
        timeout: progress2.timeUntilDeadline()
      }, seleniumErrorHandler);
      const value = JSON.parse(response).value;
      const sessionId = value.sessionId;
      progress2.log(`<selenium> connected to sessionId=${sessionId}`);
      const disconnectFromSelenium = async () => {
        progress2.log(`<selenium> disconnecting from sessionId=${sessionId}`);
        await (0, _network.fetchData)({
          url: hubUrl + "session/" + sessionId,
          method: "DELETE",
          headers
        }).catch((error) => progress2.log(`<error disconnecting from selenium>: ${error}`));
        progress2.log(`<selenium> disconnected from sessionId=${sessionId}`);
        _processLauncher.gracefullyCloseSet.delete(disconnectFromSelenium);
      };
      _processLauncher.gracefullyCloseSet.add(disconnectFromSelenium);
      try {
        const capabilities = value.capabilities;
        let endpointURL;
        if (capabilities["se:cdp"]) {
          progress2.log(`<selenium> using selenium v4`);
          const endpointURLString = addProtocol(capabilities["se:cdp"]);
          endpointURL = new URL(endpointURLString);
          if (endpointURL.hostname === "localhost" || endpointURL.hostname === "127.0.0.1")
            endpointURL.hostname = new URL(hubUrl).hostname;
          progress2.log(`<selenium> retrieved endpoint ${endpointURL.toString()} for sessionId=${sessionId}`);
        } else {
          progress2.log(`<selenium> using selenium v3`);
          const maybeChromeOptions = capabilities["goog:chromeOptions"];
          const chromeOptions = maybeChromeOptions && typeof maybeChromeOptions === "object" ? maybeChromeOptions : undefined;
          const debuggerAddress = chromeOptions && typeof chromeOptions.debuggerAddress === "string" ? chromeOptions.debuggerAddress : undefined;
          const chromeOptionsURL = typeof maybeChromeOptions === "string" ? maybeChromeOptions : undefined;
          const endpointURLString = addProtocol(debuggerAddress || chromeOptionsURL).replace("localhost", "127.0.0.1");
          progress2.log(`<selenium> retrieved endpoint ${endpointURLString} for sessionId=${sessionId}`);
          endpointURL = new URL(endpointURLString);
          if (endpointURL.hostname === "localhost" || endpointURL.hostname === "127.0.0.1") {
            const sessionInfoUrl = new URL(hubUrl).origin + "/grid/api/testsession?session=" + sessionId;
            try {
              const sessionResponse = await (0, _network.fetchData)({
                url: sessionInfoUrl,
                method: "GET",
                timeout: progress2.timeUntilDeadline(),
                headers
              }, seleniumErrorHandler);
              const proxyId = JSON.parse(sessionResponse).proxyId;
              endpointURL.hostname = new URL(proxyId).hostname;
              progress2.log(`<selenium> resolved endpoint ip ${endpointURL.toString()} for sessionId=${sessionId}`);
            } catch (e) {
              progress2.log(`<selenium> unable to resolve endpoint ip for sessionId=${sessionId}, running in standalone?`);
            }
          }
        }
        return await this._connectOverCDPInternal(progress2, endpointURL.toString(), {
          ...options,
          headers: (0, _utils.headersObjectToArray)(headers)
        }, disconnectFromSelenium);
      } catch (e) {
        await disconnectFromSelenium();
        throw e;
      }
    }
    _defaultArgs(options, isPersistent, userDataDir) {
      const chromeArguments = this._innerDefaultArgs(options);
      chromeArguments.push(`--user-data-dir=${userDataDir}`);
      if (options.useWebSocket)
        chromeArguments.push("--remote-debugging-port=0");
      else
        chromeArguments.push("--remote-debugging-pipe");
      if (isPersistent)
        chromeArguments.push("about:blank");
      else
        chromeArguments.push("--no-startup-window");
      return chromeArguments;
    }
    _innerDefaultArgs(options) {
      const {
        args = [],
        proxy
      } = options;
      const userDataDirArg = args.find((arg) => arg.startsWith("--user-data-dir"));
      if (userDataDirArg)
        throw this._createUserDataDirArgMisuseError("--user-data-dir");
      if (args.find((arg) => arg.startsWith("--remote-debugging-pipe")))
        throw new Error("Playwright manages remote debugging connection itself.");
      if (args.find((arg) => !arg.startsWith("-")))
        throw new Error("Arguments can not specify page to be opened");
      const chromeArguments = [..._chromiumSwitches.chromiumSwitches];
      if (_os.default.platform() === "darwin") {
        chromeArguments.push("--enable-use-zoom-for-dsf=false");
        if (options.headless)
          chromeArguments.push("--use-angle");
      }
      if (options.devtools)
        chromeArguments.push("--auto-open-devtools-for-tabs");
      if (options.headless) {
        if (process.env.PLAYWRIGHT_CHROMIUM_USE_HEADLESS_NEW)
          chromeArguments.push("--headless=new");
        else
          chromeArguments.push("--headless");
        chromeArguments.push("--hide-scrollbars", "--mute-audio", "--blink-settings=primaryHoverType=2,availableHoverTypes=2,primaryPointerType=4,availablePointerTypes=4");
      }
      if (options.chromiumSandbox !== true)
        chromeArguments.push("--no-sandbox");
      if (proxy) {
        const proxyURL = new URL(proxy.server);
        const isSocks = proxyURL.protocol === "socks5:";
        if (isSocks && !this.attribution.playwright.options.socksProxyPort) {
          chromeArguments.push(`--host-resolver-rules="MAP * ~NOTFOUND , EXCLUDE ${proxyURL.hostname}"`);
        }
        chromeArguments.push(`--proxy-server=${proxy.server}`);
        const proxyBypassRules = [];
        if (this.attribution.playwright.options.socksProxyPort)
          proxyBypassRules.push("<-loopback>");
        if (proxy.bypass)
          proxyBypassRules.push(...proxy.bypass.split(",").map((t) => t.trim()).map((t) => t.startsWith(".") ? "*" + t : t));
        if (!process.env.PLAYWRIGHT_DISABLE_FORCED_CHROMIUM_PROXIED_LOOPBACK && !proxyBypassRules.includes("<-loopback>"))
          proxyBypassRules.push("<-loopback>");
        if (proxyBypassRules.length > 0)
          chromeArguments.push(`--proxy-bypass-list=${proxyBypassRules.join(";")}`);
      }
      chromeArguments.push(...args);
      return chromeArguments;
    }
  }
  exports.Chromium = Chromium;
});

// node_modules/electron/index.js
var require_electron = __commonJS((exports, module) => {
  var getElectronPath = function() {
    let executablePath;
    if (fs.existsSync(pathFile)) {
      executablePath = fs.readFileSync(pathFile, "utf-8");
    }
    if (process.env.ELECTRON_OVERRIDE_DIST_PATH) {
      return path.join(process.env.ELECTRON_OVERRIDE_DIST_PATH, executablePath || "electron");
    }
    if (executablePath) {
      return path.join(__dirname, "dist", executablePath);
    } else {
      throw new Error("Electron failed to install correctly, please delete node_modules/electron and try installing again");
    }
  };
  var __dirname = "/Users/hottin/project/jwave_playlist/node_modules/electron";
  var fs = import.meta.require("fs");
  var path = import.meta.require("path");
  var pathFile = path.join(__dirname, "path.txt");
  module.exports = getElectronPath();
});

// node_modules/playwright-core/lib/server/electron/loader.js
var require_loader = __commonJS(() => {
  var {
    app
  } = require_electron();
  var {
    chromiumSwitches
  } = require_chromiumSwitches();
  process.argv.splice(1, process.argv.indexOf("--remote-debugging-port=0"));
  for (const arg of chromiumSwitches) {
    const match = arg.match(/--([^=]*)=?(.*)/);
    app.commandLine.appendSwitch(match[1], match[2]);
  }
  var originalWhenReady = app.whenReady();
  var originalEmit = app.emit.bind(app);
  var readyEventArgs;
  app.emit = (event, ...args) => {
    if (event === "ready") {
      readyEventArgs = args;
      return app.listenerCount("ready") > 0;
    }
    return originalEmit(event, ...args);
  };
  var isReady = false;
  var whenReadyCallback;
  var whenReadyPromise = new Promise((f) => whenReadyCallback = f);
  app.isReady = () => isReady;
  app.whenReady = () => whenReadyPromise;
  globalThis.__playwright_run = async () => {
    const event = await originalWhenReady;
    isReady = true;
    whenReadyCallback(event);
    originalEmit("ready", ...readyEventArgs);
  };
});

// node_modules/playwright-core/lib/server/electron/electron.js
var require_electron2 = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var waitForLine = function(progress2, process2, regex) {
    return new Promise((resolve, reject) => {
      const rl = readline.createInterface({
        input: process2.stderr
      });
      const failError = new Error("Process failed to launch!");
      const listeners = [
        _eventsHelper.eventsHelper.addEventListener(rl, "line", onLine),
        _eventsHelper.eventsHelper.addEventListener(rl, "close", reject.bind(null, failError)),
        _eventsHelper.eventsHelper.addEventListener(process2, "exit", reject.bind(null, failError)),
        _eventsHelper.eventsHelper.addEventListener(process2, "error", reject.bind(null, failError))
      ];
      progress2.cleanupWhenAborted(cleanup);
      function onLine(line) {
        const match = line.match(regex);
        if (!match)
          return;
        cleanup();
        resolve(match);
      }
      function cleanup() {
        _eventsHelper.eventsHelper.removeEventListeners(listeners);
      }
    });
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ElectronApplication = exports.Electron = undefined;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _os = _interopRequireDefault(import.meta.require("os"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _crBrowser = require_crBrowser();
  var _crConnection = require_crConnection();
  var _crExecutionContext = require_crExecutionContext();
  var js = _interopRequireWildcard(require_javascript());
  var _timeoutSettings = require_timeoutSettings();
  var _utils = require_utils3();
  var _transport = require_transport2();
  var _processLauncher = require_processLauncher();
  var _browserContext = require_browserContext();
  var _progress = require_progress();
  var _helper = require_helper();
  var _eventsHelper = require_eventsHelper();
  var readline = _interopRequireWildcard(import.meta.require("readline"));
  var _debugLogger = require_debugLogger();
  var _instrumentation = require_instrumentation();
  var _crProtocolHelper = require_crProtocolHelper();
  var _console = require_console();
  var ARTIFACTS_FOLDER = _path.default.join(_os.default.tmpdir(), "playwright-artifacts-");

  class ElectronApplication extends _instrumentation.SdkObject {
    constructor(parent, browser, nodeConnection, process2) {
      super(parent, "electron-app");
      this._browserContext = undefined;
      this._nodeConnection = undefined;
      this._nodeSession = undefined;
      this._nodeExecutionContext = undefined;
      this._nodeElectronHandlePromise = new _utils.ManualPromise;
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings;
      this._process = undefined;
      this._process = process2;
      this._browserContext = browser._defaultContext;
      this._nodeConnection = nodeConnection;
      this._nodeSession = nodeConnection.rootSession;
      this._nodeSession.on("Runtime.executionContextCreated", async (event) => {
        if (!event.context.auxData || !event.context.auxData.isDefault)
          return;
        const crExecutionContext = new _crExecutionContext.CRExecutionContext(this._nodeSession, event.context);
        this._nodeExecutionContext = new js.ExecutionContext(this, crExecutionContext, "electron");
        const {
          result: remoteObject
        } = await crExecutionContext._client.send("Runtime.evaluate", {
          expression: `require('electron')`,
          contextId: event.context.id,
          includeCommandLineAPI: true
        });
        this._nodeElectronHandlePromise.resolve(new js.JSHandle(this._nodeExecutionContext, "object", "ElectronModule", remoteObject.objectId));
      });
      this._nodeSession.on("Runtime.consoleAPICalled", (event) => this._onConsoleAPI(event));
      const appClosePromise = new Promise((f) => this.once(ElectronApplication.Events.Close, f));
      this._browserContext.setCustomCloseHandler(async () => {
        await this._browserContext.stopVideoRecording();
        const electronHandle = await this._nodeElectronHandlePromise;
        await electronHandle.evaluate(({
          app
        }) => app.quit()).catch(() => {
        });
        this._nodeConnection.close();
        await appClosePromise;
      });
    }
    async _onConsoleAPI(event) {
      if (event.executionContextId === 0) {
        return;
      }
      if (!this._nodeExecutionContext)
        return;
      const args = event.args.map((arg) => this._nodeExecutionContext.createHandle(arg));
      const message = new _console.ConsoleMessage(null, event.type, undefined, args, (0, _crProtocolHelper.toConsoleMessageLocation)(event.stackTrace));
      this.emit(ElectronApplication.Events.Console, message);
    }
    async initialize() {
      await this._nodeSession.send("Runtime.enable", {});
      await this._nodeSession.send("Runtime.evaluate", {
        expression: "__playwright_run()"
      });
    }
    process() {
      return this._process;
    }
    context() {
      return this._browserContext;
    }
    async close() {
      await this._browserContext.close({
        reason: "Application exited"
      });
    }
    async browserWindow(page) {
      const targetId = page._delegate._targetId;
      const electronHandle = await this._nodeElectronHandlePromise;
      return await electronHandle.evaluateHandle(({
        BrowserWindow,
        webContents
      }, targetId2) => {
        const wc = webContents.fromDevToolsTargetId(targetId2);
        return BrowserWindow.fromWebContents(wc);
      }, targetId);
    }
  }
  exports.ElectronApplication = ElectronApplication;
  ElectronApplication.Events = {
    Close: "close",
    Console: "console"
  };

  class Electron extends _instrumentation.SdkObject {
    constructor(playwright) {
      super(playwright, "electron");
    }
    async launch(options) {
      const {
        args = []
      } = options;
      const controller = new _progress.ProgressController((0, _instrumentation.serverSideCallMetadata)(), this);
      controller.setLogName("browser");
      return controller.run(async (progress2) => {
        let app = undefined;
        let electronArguments = ["--inspect=0", "--remote-debugging-port=0", ...args];
        if (_os.default.platform() === "linux") {
          const runningAsRoot = process.geteuid && process.geteuid() === 0;
          if (runningAsRoot && electronArguments.indexOf("--no-sandbox") === -1)
            electronArguments.unshift("--no-sandbox");
        }
        const artifactsDir = await _fs.default.promises.mkdtemp(ARTIFACTS_FOLDER);
        const browserLogsCollector = new _debugLogger.RecentLogsCollector;
        const env = options.env ? (0, _processLauncher.envArrayToObject)(options.env) : process.env;
        let command;
        if (options.executablePath) {
          command = options.executablePath;
        } else {
          try {
            command = require_electron();
          } catch (error) {
            if ((error === null || error === undefined ? undefined : error.code) === "MODULE_NOT_FOUND") {
              throw new Error("\n" + (0, _utils.wrapInASCIIBox)(["Electron executablePath not found!", "Please install it using `npm install -D electron` or set the executablePath to your Electron executable."].join("\n"), 1));
            }
            throw error;
          }
          electronArguments.unshift("-r", import.meta.require.resolve("/Users/hottin/project/jwave_playlist/node_modules/playwright-core/lib/server/electron/loader.js"));
        }
        let shell = false;
        if (process.platform === "win32") {
          shell = true;
          command = `"${command}"`;
          electronArguments = electronArguments.map((arg) => `"${arg}"`);
        }
        delete env.NODE_OPTIONS;
        const {
          launchedProcess,
          gracefullyClose,
          kill
        } = await (0, _processLauncher.launchProcess)({
          command,
          args: electronArguments,
          env,
          log: (message) => {
            progress2.log(message);
            browserLogsCollector.log(message);
          },
          shell,
          stdio: "pipe",
          cwd: options.cwd,
          tempDirectories: [artifactsDir],
          attemptToGracefullyClose: () => app.close(),
          handleSIGINT: true,
          handleSIGTERM: true,
          handleSIGHUP: true,
          onExit: () => {
            var _app;
            return (_app = app) === null || _app === undefined ? undefined : _app.emit(ElectronApplication.Events.Close);
          }
        });
        const waitForXserverError = new Promise(async (resolve, reject) => {
          waitForLine(progress2, launchedProcess, /Unable to open X display/).then(() => reject(new Error(["Unable to open X display!", `================================`, "Most likely this is because there is no X server available.", "Use 'xvfb-run' on Linux to launch your tests with an emulated display server.", "For example: 'xvfb-run npm run test:e2e'", `================================`, progress2.metadata.log].join("\n")))).catch(() => {
          });
        });
        const nodeMatch = await waitForLine(progress2, launchedProcess, /^Debugger listening on (ws:\/\/.*)$/);
        const nodeTransport = await _transport.WebSocketTransport.connect(progress2, nodeMatch[1]);
        const nodeConnection = new _crConnection.CRConnection(nodeTransport, _helper.helper.debugProtocolLogger(), browserLogsCollector);
        waitForLine(progress2, launchedProcess, /Waiting for the debugger to disconnect\.\.\./).then(() => {
          nodeTransport.close();
        }).catch(() => {
        });
        const chromeMatch = await Promise.race([waitForLine(progress2, launchedProcess, /^DevTools listening on (ws:\/\/.*)$/), waitForXserverError]);
        const chromeTransport = await _transport.WebSocketTransport.connect(progress2, chromeMatch[1]);
        const browserProcess = {
          onclose: undefined,
          process: launchedProcess,
          close: gracefullyClose,
          kill
        };
        const contextOptions = {
          ...options,
          noDefaultViewport: true
        };
        const browserOptions = {
          name: "electron",
          isChromium: true,
          headful: true,
          persistent: contextOptions,
          browserProcess,
          protocolLogger: _helper.helper.debugProtocolLogger(),
          browserLogsCollector,
          artifactsDir,
          downloadsPath: artifactsDir,
          tracesDir: options.tracesDir || artifactsDir,
          originalLaunchOptions: {}
        };
        (0, _browserContext.validateBrowserContextOptions)(contextOptions, browserOptions);
        const browser = await _crBrowser.CRBrowser.connect(this.attribution.playwright, chromeTransport, browserOptions);
        app = new ElectronApplication(this, browser, nodeConnection, launchedProcess);
        await app.initialize();
        return app;
      }, _timeoutSettings.TimeoutSettings.launchTimeout(options));
    }
  }
  exports.Electron = Electron;
});

// node_modules/playwright-core/lib/server/firefox/ffConnection.js
var require_ffConnection = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.kBrowserCloseMessageId = exports.FFSession = exports.FFConnection = exports.ConnectionEvents = undefined;
  var _events = import.meta.require("events");
  var _debugLogger = require_debugLogger();
  var _helper = require_helper();
  var _protocolError = require_protocolError();
  var ConnectionEvents = exports.ConnectionEvents = {
    Disconnected: Symbol("Disconnected")
  };
  var kBrowserCloseMessageId = exports.kBrowserCloseMessageId = -9999;

  class FFConnection extends _events.EventEmitter {
    constructor(transport, protocolLogger, browserLogsCollector) {
      super();
      this._lastId = undefined;
      this._transport = undefined;
      this._protocolLogger = undefined;
      this._browserLogsCollector = undefined;
      this._browserDisconnectedLogs = undefined;
      this.rootSession = undefined;
      this._sessions = undefined;
      this._closed = undefined;
      this.setMaxListeners(0);
      this._transport = transport;
      this._protocolLogger = protocolLogger;
      this._browserLogsCollector = browserLogsCollector;
      this._lastId = 0;
      this._sessions = new Map;
      this._closed = false;
      this.rootSession = new FFSession(this, "", (message) => this._rawSend(message));
      this._sessions.set("", this.rootSession);
      this._transport.onmessage = this._onMessage.bind(this);
      this._transport.onclose = this._onClose.bind(this);
    }
    nextMessageId() {
      return ++this._lastId;
    }
    _rawSend(message) {
      this._protocolLogger("send", message);
      this._transport.send(message);
    }
    async _onMessage(message) {
      this._protocolLogger("receive", message);
      if (message.id === kBrowserCloseMessageId)
        return;
      const session = this._sessions.get(message.sessionId || "");
      if (session)
        session.dispatchMessage(message);
    }
    _onClose(reason) {
      this._closed = true;
      this._transport.onmessage = undefined;
      this._transport.onclose = undefined;
      this._browserDisconnectedLogs = _helper.helper.formatBrowserLogs(this._browserLogsCollector.recentLogs(), reason);
      this.rootSession.dispose();
      Promise.resolve().then(() => this.emit(ConnectionEvents.Disconnected));
    }
    close() {
      if (!this._closed)
        this._transport.close();
    }
    createSession(sessionId) {
      const session = new FFSession(this, sessionId, (message) => this._rawSend({
        ...message,
        sessionId
      }));
      this._sessions.set(sessionId, session);
      return session;
    }
  }
  exports.FFConnection = FFConnection;

  class FFSession extends _events.EventEmitter {
    constructor(connection, sessionId, rawSend) {
      super();
      this._connection = undefined;
      this._disposed = false;
      this._callbacks = undefined;
      this._sessionId = undefined;
      this._rawSend = undefined;
      this._crashed = false;
      this.on = undefined;
      this.addListener = undefined;
      this.off = undefined;
      this.removeListener = undefined;
      this.once = undefined;
      this.setMaxListeners(0);
      this._callbacks = new Map;
      this._connection = connection;
      this._sessionId = sessionId;
      this._rawSend = rawSend;
      this.on = super.on;
      this.addListener = super.addListener;
      this.off = super.removeListener;
      this.removeListener = super.removeListener;
      this.once = super.once;
    }
    markAsCrashed() {
      this._crashed = true;
    }
    async send(method, params) {
      if (this._crashed || this._disposed || this._connection._closed || this._connection._browserDisconnectedLogs)
        throw new _protocolError.ProtocolError(this._crashed ? "crashed" : "closed", undefined, this._connection._browserDisconnectedLogs);
      const id = this._connection.nextMessageId();
      this._rawSend({
        method,
        params,
        id
      });
      return new Promise((resolve, reject) => {
        this._callbacks.set(id, {
          resolve,
          reject,
          error: new _protocolError.ProtocolError("error", method)
        });
      });
    }
    sendMayFail(method, params) {
      return this.send(method, params).catch((error) => _debugLogger.debugLogger.log("error", error));
    }
    dispatchMessage(object) {
      if (object.id) {
        const callback = this._callbacks.get(object.id);
        if (callback) {
          this._callbacks.delete(object.id);
          if (object.error) {
            callback.error.setMessage(object.error.message);
            callback.reject(callback.error);
          } else {
            callback.resolve(object.result);
          }
        }
      } else {
        Promise.resolve().then(() => this.emit(object.method, object.params));
      }
    }
    dispose() {
      this._disposed = true;
      this._connection._sessions.delete(this._sessionId);
      for (const callback of this._callbacks.values()) {
        callback.error.type = this._crashed ? "crashed" : "closed";
        callback.error.logs = this._connection._browserDisconnectedLogs;
        callback.reject(callback.error);
      }
      this._callbacks.clear();
    }
  }
  exports.FFSession = FFSession;
});

// node_modules/playwright-core/lib/server/firefox/ffAccessibility.js
var require_ffAccessibility = __commonJS((exports) => {
  async function getAccessibilityTree(session, needle) {
    const objectId = needle ? needle._objectId : undefined;
    const {
      tree
    } = await session.send("Accessibility.getFullAXTree", {
      objectId
    });
    const axNode = new FFAXNode(tree);
    return {
      tree: axNode,
      needle: needle ? axNode._findNeedle() : null
    };
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getAccessibilityTree = getAccessibilityTree;
  var FFRoleToARIARole = new Map(Object.entries({
    pushbutton: "button",
    checkbutton: "checkbox",
    editcombobox: "combobox",
    "content deletion": "deletion",
    footnote: "doc-footnote",
    "non-native document": "document",
    grouping: "group",
    graphic: "img",
    "content insertion": "insertion",
    animation: "marquee",
    "flat equation": "math",
    menupopup: "menu",
    "check menu item": "menuitemcheckbox",
    "radio menu item": "menuitemradio",
    "listbox option": "option",
    radiobutton: "radio",
    statusbar: "status",
    pagetab: "tab",
    pagetablist: "tablist",
    propertypage: "tabpanel",
    entry: "textbox",
    outline: "tree",
    "tree table": "treegrid",
    outlineitem: "treeitem"
  }));

  class FFAXNode {
    constructor(payload) {
      this._children = undefined;
      this._payload = undefined;
      this._editable = undefined;
      this._richlyEditable = undefined;
      this._focusable = undefined;
      this._expanded = undefined;
      this._name = undefined;
      this._role = undefined;
      this._cachedHasFocusableChild = undefined;
      this._payload = payload;
      this._children = (payload.children || []).map((x) => new FFAXNode(x));
      this._editable = !!payload.editable;
      this._richlyEditable = this._editable && payload.tag !== "textarea" && payload.tag !== "input";
      this._focusable = !!payload.focusable;
      this._expanded = !!payload.expanded;
      this._name = this._payload.name;
      this._role = this._payload.role;
    }
    _isPlainTextField() {
      if (this._richlyEditable)
        return false;
      if (this._editable)
        return true;
      return this._role === "entry";
    }
    _isTextOnlyObject() {
      const role = this._role;
      return role === "text leaf" || role === "text" || role === "statictext";
    }
    _hasFocusableChild() {
      if (this._cachedHasFocusableChild === undefined) {
        this._cachedHasFocusableChild = false;
        for (const child of this._children) {
          if (child._focusable || child._hasFocusableChild()) {
            this._cachedHasFocusableChild = true;
            break;
          }
        }
      }
      return this._cachedHasFocusableChild;
    }
    children() {
      return this._children;
    }
    _findNeedle() {
      if (this._payload.foundObject)
        return this;
      for (const child of this._children) {
        const found = child._findNeedle();
        if (found)
          return found;
      }
      return null;
    }
    isLeafNode() {
      if (!this._children.length)
        return true;
      if (this._isPlainTextField() || this._isTextOnlyObject())
        return true;
      switch (this._role) {
        case "graphic":
        case "scrollbar":
        case "slider":
        case "separator":
        case "progressbar":
          return true;
        default:
          break;
      }
      if (this._hasFocusableChild())
        return false;
      if (this._focusable && this._role !== "document" && this._name)
        return true;
      if (this._role === "heading" && this._name)
        return true;
      return false;
    }
    isControl() {
      switch (this._role) {
        case "checkbutton":
        case "check menu item":
        case "check rich option":
        case "combobox":
        case "combobox option":
        case "color chooser":
        case "listbox":
        case "listbox option":
        case "listbox rich option":
        case "popup menu":
        case "menupopup":
        case "menuitem":
        case "menubar":
        case "button":
        case "pushbutton":
        case "radiobutton":
        case "radio menuitem":
        case "scrollbar":
        case "slider":
        case "spinbutton":
        case "switch":
        case "pagetab":
        case "entry":
        case "tree table":
          return true;
        default:
          return false;
      }
    }
    isInteresting(insideControl) {
      if (this._focusable || this._richlyEditable)
        return true;
      if (this.isControl())
        return true;
      if (insideControl)
        return false;
      return this.isLeafNode() && !!this._name.trim();
    }
    serialize() {
      const node = {
        role: FFRoleToARIARole.get(this._role) || this._role,
        name: this._name || ""
      };
      const userStringProperties = ["name", "description", "roledescription", "valuetext", "keyshortcuts"];
      for (const userStringProperty of userStringProperties) {
        if (!(userStringProperty in this._payload))
          continue;
        node[userStringProperty] = this._payload[userStringProperty];
      }
      const booleanProperties = ["disabled", "expanded", "focused", "modal", "multiline", "multiselectable", "readonly", "required", "selected"];
      for (const booleanProperty of booleanProperties) {
        if (this._role === "document" && booleanProperty === "focused")
          continue;
        const value = this._payload[booleanProperty];
        if (!value)
          continue;
        node[booleanProperty] = value;
      }
      const numericalProperties = ["level"];
      for (const numericalProperty of numericalProperties) {
        if (!(numericalProperty in this._payload))
          continue;
        node[numericalProperty] = this._payload[numericalProperty];
      }
      const tokenProperties = ["autocomplete", "haspopup", "orientation"];
      for (const tokenProperty of tokenProperties) {
        const value = this._payload[tokenProperty];
        if (!value || value === "false")
          continue;
        node[tokenProperty] = value;
      }
      const axNode = node;
      axNode.valueString = this._payload.value;
      if ("checked" in this._payload)
        axNode.checked = this._payload.checked === true ? "checked" : this._payload.checked === "mixed" ? "mixed" : "unchecked";
      if ("pressed" in this._payload)
        axNode.pressed = this._payload.pressed === true ? "pressed" : "released";
      if ("invalid" in this._payload)
        axNode.invalid = this._payload.invalid === true ? "true" : "false";
      return axNode;
    }
  }
});

// node_modules/playwright-core/lib/server/firefox/ffExecutionContext.js
var require_ffExecutionContext = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var checkException = function(exceptionDetails) {
    if (!exceptionDetails)
      return;
    if (exceptionDetails.value)
      throw new js.JavaScriptErrorInEvaluate(JSON.stringify(exceptionDetails.value));
    else
      throw new js.JavaScriptErrorInEvaluate(exceptionDetails.text + (exceptionDetails.stack ? "\n" + exceptionDetails.stack : ""));
  };
  var rewriteError = function(error) {
    if (error.message.includes("cyclic object value") || error.message.includes("Object is not serializable"))
      return {
        result: {
          type: "undefined",
          value: undefined
        }
      };
    if (error instanceof TypeError && error.message.startsWith("Converting circular structure to JSON"))
      (0, _stackTrace.rewriteErrorMessage)(error, error.message + " Are you passing a nested JSHandle?");
    if (!js.isJavaScriptErrorInEvaluate(error) && !(0, _protocolError.isSessionClosedError)(error))
      throw new Error("Execution context was destroyed, most likely because of a navigation.");
    throw error;
  };
  var potentiallyUnserializableValue = function(remoteObject) {
    const value = remoteObject.value;
    const unserializableValue = remoteObject.unserializableValue;
    return unserializableValue ? js.parseUnserializableValue(unserializableValue) : value;
  };
  var renderPreview = function(object) {
    if (object.type === "undefined")
      return "undefined";
    if (object.unserializableValue)
      return String(object.unserializableValue);
    if (object.type === "symbol")
      return "Symbol()";
    if (object.subtype === "regexp")
      return "RegExp";
    if (object.subtype === "weakmap")
      return "WeakMap";
    if (object.subtype === "weakset")
      return "WeakSet";
    if (object.subtype)
      return object.subtype[0].toUpperCase() + object.subtype.slice(1);
    if ("value" in object)
      return String(object.value);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FFExecutionContext = undefined;
  var js = _interopRequireWildcard(require_javascript());
  var _stackTrace = require_stackTrace();
  var _utilityScriptSerializers = require_utilityScriptSerializers();
  var _protocolError = require_protocolError();

  class FFExecutionContext {
    constructor(session, executionContextId) {
      this._session = undefined;
      this._executionContextId = undefined;
      this._session = session;
      this._executionContextId = executionContextId;
    }
    async rawEvaluateJSON(expression) {
      const payload = await this._session.send("Runtime.evaluate", {
        expression,
        returnByValue: true,
        executionContextId: this._executionContextId
      }).catch(rewriteError);
      checkException(payload.exceptionDetails);
      return payload.result.value;
    }
    async rawEvaluateHandle(expression) {
      const payload = await this._session.send("Runtime.evaluate", {
        expression,
        returnByValue: false,
        executionContextId: this._executionContextId
      }).catch(rewriteError);
      checkException(payload.exceptionDetails);
      return payload.result.objectId;
    }
    rawCallFunctionNoReply(func, ...args) {
      this._session.send("Runtime.callFunction", {
        functionDeclaration: func.toString(),
        args: args.map((a) => a instanceof js.JSHandle ? {
          objectId: a._objectId
        } : {
          value: a
        }),
        returnByValue: true,
        executionContextId: this._executionContextId
      }).catch(() => {
      });
    }
    async evaluateWithArguments(expression, returnByValue, utilityScript, values, objectIds) {
      const payload = await this._session.send("Runtime.callFunction", {
        functionDeclaration: expression,
        args: [{
          objectId: utilityScript._objectId,
          value: undefined
        }, ...values.map((value) => ({
          value
        })), ...objectIds.map((objectId) => ({
          objectId,
          value: undefined
        }))],
        returnByValue,
        executionContextId: this._executionContextId
      }).catch(rewriteError);
      checkException(payload.exceptionDetails);
      if (returnByValue)
        return (0, _utilityScriptSerializers.parseEvaluationResultValue)(payload.result.value);
      return utilityScript._context.createHandle(payload.result);
    }
    async getProperties(context, objectId) {
      const response = await this._session.send("Runtime.getObjectProperties", {
        executionContextId: this._executionContextId,
        objectId
      });
      const result = new Map;
      for (const property of response.properties)
        result.set(property.name, context.createHandle(property.value));
      return result;
    }
    createHandle(context, remoteObject) {
      return new js.JSHandle(context, remoteObject.subtype || remoteObject.type || "", renderPreview(remoteObject), remoteObject.objectId, potentiallyUnserializableValue(remoteObject));
    }
    async releaseHandle(objectId) {
      await this._session.send("Runtime.disposeObject", {
        executionContextId: this._executionContextId,
        objectId
      });
    }
    objectCount(objectId) {
      throw new Error("Method not implemented in Firefox.");
    }
  }
  exports.FFExecutionContext = FFExecutionContext;
});

// node_modules/playwright-core/lib/server/firefox/ffInput.js
var require_ffInput = __commonJS((exports) => {
  var toModifiersMask = function(modifiers) {
    let mask = 0;
    if (modifiers.has("Alt"))
      mask |= 1;
    if (modifiers.has("Control"))
      mask |= 2;
    if (modifiers.has("Shift"))
      mask |= 4;
    if (modifiers.has("Meta"))
      mask |= 8;
    return mask;
  };
  var toButtonNumber = function(button) {
    if (button === "left")
      return 0;
    if (button === "middle")
      return 1;
    if (button === "right")
      return 2;
    return 0;
  };
  var toButtonsMask = function(buttons) {
    let mask = 0;
    if (buttons.has("left"))
      mask |= 1;
    if (buttons.has("right"))
      mask |= 2;
    if (buttons.has("middle"))
      mask |= 4;
    return mask;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.RawTouchscreenImpl = exports.RawMouseImpl = exports.RawKeyboardImpl = undefined;

  class RawKeyboardImpl {
    constructor(client) {
      this._client = undefined;
      this._client = client;
    }
    async keydown(modifiers, code, keyCode, keyCodeWithoutLocation, key, location2, autoRepeat, text) {
      if (text === "\r")
        text = "";
      await this._client.send("Page.dispatchKeyEvent", {
        type: "keydown",
        keyCode: keyCodeWithoutLocation,
        code,
        key,
        repeat: autoRepeat,
        location: location2,
        text
      });
    }
    async keyup(modifiers, code, keyCode, keyCodeWithoutLocation, key, location2) {
      await this._client.send("Page.dispatchKeyEvent", {
        type: "keyup",
        key,
        keyCode: keyCodeWithoutLocation,
        code,
        location: location2,
        repeat: false
      });
    }
    async sendText(text) {
      await this._client.send("Page.insertText", {
        text
      });
    }
  }
  exports.RawKeyboardImpl = RawKeyboardImpl;

  class RawMouseImpl {
    constructor(client) {
      this._client = undefined;
      this._page = undefined;
      this._client = client;
    }
    async move(x, y, button, buttons, modifiers, forClick) {
      await this._client.send("Page.dispatchMouseEvent", {
        type: "mousemove",
        button: 0,
        buttons: toButtonsMask(buttons),
        x: Math.floor(x),
        y: Math.floor(y),
        modifiers: toModifiersMask(modifiers)
      });
    }
    async down(x, y, button, buttons, modifiers, clickCount) {
      await this._client.send("Page.dispatchMouseEvent", {
        type: "mousedown",
        button: toButtonNumber(button),
        buttons: toButtonsMask(buttons),
        x: Math.floor(x),
        y: Math.floor(y),
        modifiers: toModifiersMask(modifiers),
        clickCount
      });
    }
    async up(x, y, button, buttons, modifiers, clickCount) {
      await this._client.send("Page.dispatchMouseEvent", {
        type: "mouseup",
        button: toButtonNumber(button),
        buttons: toButtonsMask(buttons),
        x: Math.floor(x),
        y: Math.floor(y),
        modifiers: toModifiersMask(modifiers),
        clickCount
      });
    }
    async wheel(x, y, buttons, modifiers, deltaX, deltaY) {
      await this._page.mainFrame().evaluateExpression(`new Promise(requestAnimationFrame)`, {
        world: "utility"
      });
      await this._client.send("Page.dispatchWheelEvent", {
        deltaX,
        deltaY,
        x: Math.floor(x),
        y: Math.floor(y),
        deltaZ: 0,
        modifiers: toModifiersMask(modifiers)
      });
    }
    setPage(page) {
      this._page = page;
    }
  }
  exports.RawMouseImpl = RawMouseImpl;

  class RawTouchscreenImpl {
    constructor(client) {
      this._client = undefined;
      this._client = client;
    }
    async tap(x, y, modifiers) {
      await this._client.send("Page.dispatchTapEvent", {
        x,
        y,
        modifiers: toModifiersMask(modifiers)
      });
    }
  }
  exports.RawTouchscreenImpl = RawTouchscreenImpl;
});

// node_modules/playwright-core/lib/server/firefox/ffNetworkManager.js
var require_ffNetworkManager = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var parseMultivalueHeaders = function(headers) {
    const result = [];
    for (const header of headers) {
      const separator = header.name.toLowerCase() === "set-cookie" ? "\n" : ",";
      const tokens = header.value.split(separator).map((s) => s.trim());
      for (const token of tokens)
        result.push({
          name: header.name,
          value: token
        });
    }
    return result;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FFNetworkManager = undefined;
  var _eventsHelper = require_eventsHelper();
  var network = _interopRequireWildcard(require_network2());

  class FFNetworkManager {
    constructor(session, page) {
      this._session = undefined;
      this._requests = undefined;
      this._page = undefined;
      this._eventListeners = undefined;
      this._session = session;
      this._requests = new Map;
      this._page = page;
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(session, "Network.requestWillBeSent", this._onRequestWillBeSent.bind(this)), _eventsHelper.eventsHelper.addEventListener(session, "Network.responseReceived", this._onResponseReceived.bind(this)), _eventsHelper.eventsHelper.addEventListener(session, "Network.requestFinished", this._onRequestFinished.bind(this)), _eventsHelper.eventsHelper.addEventListener(session, "Network.requestFailed", this._onRequestFailed.bind(this))];
    }
    dispose() {
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
    }
    async setRequestInterception(enabled) {
      await Promise.all([this._session.send("Network.setRequestInterception", {
        enabled
      }), this._session.send("Page.setCacheDisabled", {
        cacheDisabled: enabled
      })]);
    }
    _onRequestWillBeSent(event) {
      const redirectedFrom = event.redirectedFrom ? this._requests.get(event.redirectedFrom) || null : null;
      const frame = redirectedFrom ? redirectedFrom.request.frame() : event.frameId ? this._page._frameManager.frame(event.frameId) : null;
      if (!frame)
        return;
      if (redirectedFrom)
        this._requests.delete(redirectedFrom._id);
      const request = new InterceptableRequest(frame, redirectedFrom, event);
      let route;
      if (event.isIntercepted)
        route = new FFRouteImpl(this._session, request);
      this._requests.set(request._id, request);
      this._page._frameManager.requestStarted(request.request, route);
    }
    _onResponseReceived(event) {
      var _event$securityDetail, _event$securityDetail2, _event$securityDetail3, _event$securityDetail4, _event$securityDetail5;
      const request = this._requests.get(event.requestId);
      if (!request)
        return;
      const getResponseBody = async () => {
        const response2 = await this._session.send("Network.getResponseBody", {
          requestId: request._id
        });
        if (response2.evicted)
          throw new Error(`Response body for ${request.request.method()} ${request.request.url()} was evicted!`);
        return Buffer.from(response2.base64body, "base64");
      };
      const startTime = event.timing.startTime;
      function relativeToStart(time) {
        if (!time)
          return -1;
        return (time - startTime) / 1000;
      }
      const timing = {
        startTime: startTime / 1000,
        domainLookupStart: relativeToStart(event.timing.domainLookupStart),
        domainLookupEnd: relativeToStart(event.timing.domainLookupEnd),
        connectStart: relativeToStart(event.timing.connectStart),
        secureConnectionStart: relativeToStart(event.timing.secureConnectionStart),
        connectEnd: relativeToStart(event.timing.connectEnd),
        requestStart: relativeToStart(event.timing.requestStart),
        responseStart: relativeToStart(event.timing.responseStart)
      };
      const response = new network.Response(request.request, event.status, event.statusText, parseMultivalueHeaders(event.headers), timing, getResponseBody, event.fromServiceWorker);
      if (event !== null && event !== undefined && event.remoteIPAddress && typeof (event === null || event === undefined ? undefined : event.remotePort) === "number") {
        response._serverAddrFinished({
          ipAddress: event.remoteIPAddress,
          port: event.remotePort
        });
      } else {
        response._serverAddrFinished();
      }
      response._securityDetailsFinished({
        protocol: event === null || event === undefined || (_event$securityDetail = event.securityDetails) === null || _event$securityDetail === undefined ? undefined : _event$securityDetail.protocol,
        subjectName: event === null || event === undefined || (_event$securityDetail2 = event.securityDetails) === null || _event$securityDetail2 === undefined ? undefined : _event$securityDetail2.subjectName,
        issuer: event === null || event === undefined || (_event$securityDetail3 = event.securityDetails) === null || _event$securityDetail3 === undefined ? undefined : _event$securityDetail3.issuer,
        validFrom: event === null || event === undefined || (_event$securityDetail4 = event.securityDetails) === null || _event$securityDetail4 === undefined ? undefined : _event$securityDetail4.validFrom,
        validTo: event === null || event === undefined || (_event$securityDetail5 = event.securityDetails) === null || _event$securityDetail5 === undefined ? undefined : _event$securityDetail5.validTo
      });
      response.setRawResponseHeaders(null);
      response.setResponseHeadersSize(null);
      this._page._frameManager.requestReceivedResponse(response);
    }
    _onRequestFinished(event) {
      const request = this._requests.get(event.requestId);
      if (!request)
        return;
      const response = request.request._existingResponse();
      response.setTransferSize(event.transferSize);
      response.setEncodedBodySize(event.encodedBodySize);
      const isRedirected = response.status() >= 300 && response.status() <= 399;
      const responseEndTime = event.responseEndTime ? event.responseEndTime / 1000 - response.timing().startTime : -1;
      if (isRedirected) {
        response._requestFinished(responseEndTime);
      } else {
        this._requests.delete(request._id);
        response._requestFinished(responseEndTime);
      }
      if (event.protocolVersion)
        response._setHttpVersion(event.protocolVersion);
      this._page._frameManager.reportRequestFinished(request.request, response);
    }
    _onRequestFailed(event) {
      const request = this._requests.get(event.requestId);
      if (!request)
        return;
      this._requests.delete(request._id);
      const response = request.request._existingResponse();
      if (response) {
        response.setTransferSize(null);
        response.setEncodedBodySize(null);
        response._requestFinished(-1);
      }
      request.request._setFailureText(event.errorCode);
      this._page._frameManager.requestFailed(request.request, event.errorCode === "NS_BINDING_ABORTED");
    }
  }
  exports.FFNetworkManager = FFNetworkManager;
  var causeToResourceType = {
    TYPE_INVALID: "other",
    TYPE_OTHER: "other",
    TYPE_SCRIPT: "script",
    TYPE_IMAGE: "image",
    TYPE_STYLESHEET: "stylesheet",
    TYPE_OBJECT: "other",
    TYPE_DOCUMENT: "document",
    TYPE_SUBDOCUMENT: "document",
    TYPE_REFRESH: "document",
    TYPE_XBL: "other",
    TYPE_PING: "other",
    TYPE_XMLHTTPREQUEST: "xhr",
    TYPE_OBJECT_SUBREQUEST: "other",
    TYPE_DTD: "other",
    TYPE_FONT: "font",
    TYPE_MEDIA: "media",
    TYPE_WEBSOCKET: "websocket",
    TYPE_CSP_REPORT: "other",
    TYPE_XSLT: "other",
    TYPE_BEACON: "other",
    TYPE_FETCH: "fetch",
    TYPE_IMAGESET: "images",
    TYPE_WEB_MANIFEST: "manifest"
  };
  var internalCauseToResourceType = {
    TYPE_INTERNAL_EVENTSOURCE: "eventsource"
  };

  class InterceptableRequest {
    constructor(frame, redirectedFrom, payload) {
      this.request = undefined;
      this._id = undefined;
      this._redirectedTo = undefined;
      this._id = payload.requestId;
      if (redirectedFrom)
        redirectedFrom._redirectedTo = this;
      let postDataBuffer = null;
      if (payload.postData)
        postDataBuffer = Buffer.from(payload.postData, "base64");
      this.request = new network.Request(frame._page._browserContext, frame, null, redirectedFrom ? redirectedFrom.request : null, payload.navigationId, payload.url, internalCauseToResourceType[payload.internalCause] || causeToResourceType[payload.cause] || "other", payload.method, postDataBuffer, payload.headers);
      this.request.setRawRequestHeaders(null);
    }
    _finalRequest() {
      let request = this;
      while (request._redirectedTo)
        request = request._redirectedTo;
      return request;
    }
  }

  class FFRouteImpl {
    constructor(session, request) {
      this._request = undefined;
      this._session = undefined;
      this._session = session;
      this._request = request;
    }
    async continue(request, overrides) {
      await this._session.sendMayFail("Network.resumeInterceptedRequest", {
        requestId: this._request._id,
        url: overrides.url,
        method: overrides.method,
        headers: overrides.headers,
        postData: overrides.postData ? Buffer.from(overrides.postData).toString("base64") : undefined
      });
    }
    async fulfill(response) {
      const base64body = response.isBase64 ? response.body : Buffer.from(response.body).toString("base64");
      await this._session.sendMayFail("Network.fulfillInterceptedRequest", {
        requestId: this._request._id,
        status: response.status,
        statusText: network.STATUS_TEXTS[String(response.status)] || "",
        headers: response.headers,
        base64body
      });
    }
    async abort(errorCode) {
      await this._session.sendMayFail("Network.abortInterceptedRequest", {
        requestId: this._request._id,
        errorCode
      });
    }
  }
});

// node_modules/playwright-core/lib/server/firefox/ffPage.js
var require_ffPage = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var webSocketId = function(frameId, wsid) {
    return `${frameId}---${wsid}`;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.UTILITY_WORLD_NAME = exports.FFPage = undefined;
  var dialog = _interopRequireWildcard(require_dialog());
  var dom = _interopRequireWildcard(require_dom());
  var _eventsHelper = require_eventsHelper();
  var _page = require_page();
  var _ffAccessibility = require_ffAccessibility();
  var _ffConnection = require_ffConnection();
  var _ffExecutionContext = require_ffExecutionContext();
  var _ffInput = require_ffInput();
  var _ffNetworkManager = require_ffNetworkManager();
  var _stackTrace = require_stackTrace();
  var _debugLogger = require_debugLogger();
  var _manualPromise = require_manualPromise();
  var _browserContext = require_browserContext();
  var _errors = require_errors();
  var UTILITY_WORLD_NAME = exports.UTILITY_WORLD_NAME = "__playwright_utility_world__";

  class FFPage {
    constructor(session, browserContext, opener) {
      this.cspErrorsAsynchronousForInlineScripts = true;
      this.rawMouse = undefined;
      this.rawKeyboard = undefined;
      this.rawTouchscreen = undefined;
      this._session = undefined;
      this._page = undefined;
      this._networkManager = undefined;
      this._browserContext = undefined;
      this._pagePromise = new _manualPromise.ManualPromise;
      this._initializedPage = null;
      this._initializationFailed = false;
      this._opener = undefined;
      this._contextIdToContext = undefined;
      this._eventListeners = undefined;
      this._workers = new Map;
      this._screencastId = undefined;
      this._initScripts = [];
      this._session = session;
      this._opener = opener;
      this.rawKeyboard = new _ffInput.RawKeyboardImpl(session);
      this.rawMouse = new _ffInput.RawMouseImpl(session);
      this.rawTouchscreen = new _ffInput.RawTouchscreenImpl(session);
      this._contextIdToContext = new Map;
      this._browserContext = browserContext;
      this._page = new _page.Page(this, browserContext);
      this.rawMouse.setPage(this._page);
      this._networkManager = new _ffNetworkManager.FFNetworkManager(session, this._page);
      this._page.on(_page.Page.Events.FrameDetached, (frame) => this._removeContextsForFrame(frame));
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(this._session, "Page.eventFired", this._onEventFired.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameAttached", this._onFrameAttached.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameDetached", this._onFrameDetached.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.navigationAborted", this._onNavigationAborted.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.navigationCommitted", this._onNavigationCommitted.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.navigationStarted", this._onNavigationStarted.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.sameDocumentNavigation", this._onSameDocumentNavigation.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.executionContextCreated", this._onExecutionContextCreated.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.executionContextDestroyed", this._onExecutionContextDestroyed.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.executionContextsCleared", this._onExecutionContextsCleared.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.linkClicked", (event) => this._onLinkClicked(event.phase)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.uncaughtError", this._onUncaughtError.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.console", this._onConsole.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.dialogOpened", this._onDialogOpened.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.bindingCalled", this._onBindingCalled.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.fileChooserOpened", this._onFileChooserOpened.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.workerCreated", this._onWorkerCreated.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.workerDestroyed", this._onWorkerDestroyed.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.dispatchMessageFromWorker", this._onDispatchMessageFromWorker.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.crashed", this._onCrashed.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.videoRecordingStarted", this._onVideoRecordingStarted.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.webSocketCreated", this._onWebSocketCreated.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.webSocketClosed", this._onWebSocketClosed.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.webSocketFrameReceived", this._onWebSocketFrameReceived.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.webSocketFrameSent", this._onWebSocketFrameSent.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.screencastFrame", this._onScreencastFrame.bind(this))];
      this._session.once("Page.ready", async () => {
        await this._page.initOpener(this._opener);
        if (this._initializationFailed)
          return;
        this._initializedPage = this._page;
        this._page.reportAsNew();
        this._pagePromise.resolve(this._page);
      });
      this.addInitScript("", UTILITY_WORLD_NAME).catch((e) => this._markAsError(e));
    }
    potentiallyUninitializedPage() {
      return this._page;
    }
    async _markAsError(error) {
      if (this._initializationFailed)
        return;
      this._initializationFailed = true;
      if (!this._initializedPage) {
        await this._page.initOpener(this._opener);
        this._page.reportAsNew(error);
        this._pagePromise.resolve(error);
      }
    }
    async pageOrError() {
      return this._pagePromise;
    }
    _onWebSocketCreated(event) {
      this._page._frameManager.onWebSocketCreated(webSocketId(event.frameId, event.wsid), event.requestURL);
      this._page._frameManager.onWebSocketRequest(webSocketId(event.frameId, event.wsid));
    }
    _onWebSocketClosed(event) {
      if (event.error)
        this._page._frameManager.webSocketError(webSocketId(event.frameId, event.wsid), event.error);
      this._page._frameManager.webSocketClosed(webSocketId(event.frameId, event.wsid));
    }
    _onWebSocketFrameReceived(event) {
      this._page._frameManager.webSocketFrameReceived(webSocketId(event.frameId, event.wsid), event.opcode, event.data);
    }
    _onWebSocketFrameSent(event) {
      this._page._frameManager.onWebSocketFrameSent(webSocketId(event.frameId, event.wsid), event.opcode, event.data);
    }
    _onExecutionContextCreated(payload) {
      const {
        executionContextId,
        auxData
      } = payload;
      const frame = this._page._frameManager.frame(auxData.frameId);
      if (!frame)
        return;
      const delegate = new _ffExecutionContext.FFExecutionContext(this._session, executionContextId);
      let worldName = null;
      if (auxData.name === UTILITY_WORLD_NAME)
        worldName = "utility";
      else if (!auxData.name)
        worldName = "main";
      const context = new dom.FrameExecutionContext(delegate, frame, worldName);
      context[contextDelegateSymbol] = delegate;
      if (worldName)
        frame._contextCreated(worldName, context);
      this._contextIdToContext.set(executionContextId, context);
    }
    _onExecutionContextDestroyed(payload) {
      const {
        executionContextId
      } = payload;
      const context = this._contextIdToContext.get(executionContextId);
      if (!context)
        return;
      this._contextIdToContext.delete(executionContextId);
      context.frame._contextDestroyed(context);
    }
    _onExecutionContextsCleared() {
      for (const executionContextId of Array.from(this._contextIdToContext.keys()))
        this._onExecutionContextDestroyed({
          executionContextId
        });
    }
    _removeContextsForFrame(frame) {
      for (const [contextId, context] of this._contextIdToContext) {
        if (context.frame === frame)
          this._contextIdToContext.delete(contextId);
      }
    }
    _onLinkClicked(phase) {
      if (phase === "before")
        this._page._frameManager.frameWillPotentiallyRequestNavigation();
      else
        this._page._frameManager.frameDidPotentiallyRequestNavigation();
    }
    _onNavigationStarted(params) {
      this._page._frameManager.frameRequestedNavigation(params.frameId, params.navigationId);
    }
    _onNavigationAborted(params) {
      this._page._frameManager.frameAbortedNavigation(params.frameId, params.errorText, params.navigationId);
    }
    _onNavigationCommitted(params) {
      for (const [workerId, worker] of this._workers) {
        if (worker.frameId === params.frameId)
          this._onWorkerDestroyed({
            workerId
          });
      }
      this._page._frameManager.frameCommittedNewDocumentNavigation(params.frameId, params.url, params.name || "", params.navigationId || "", false);
    }
    _onSameDocumentNavigation(params) {
      this._page._frameManager.frameCommittedSameDocumentNavigation(params.frameId, params.url);
    }
    _onFrameAttached(params) {
      this._page._frameManager.frameAttached(params.frameId, params.parentFrameId);
    }
    _onFrameDetached(params) {
      this._page._frameManager.frameDetached(params.frameId);
    }
    _onEventFired(payload) {
      const {
        frameId,
        name
      } = payload;
      if (name === "load")
        this._page._frameManager.frameLifecycleEvent(frameId, "load");
      if (name === "DOMContentLoaded")
        this._page._frameManager.frameLifecycleEvent(frameId, "domcontentloaded");
    }
    _onUncaughtError(params) {
      const {
        name,
        message
      } = (0, _stackTrace.splitErrorMessage)(params.message);
      const error = new Error(message);
      error.stack = params.message + "\n" + params.stack.split("\n").filter(Boolean).map((a) => a.replace(/([^@]*)@(.*)/, "    at $1 ($2)")).join("\n");
      error.name = name;
      this._page.emitOnContextOnceInitialized(_browserContext.BrowserContext.Events.PageError, error, this._page);
    }
    _onConsole(payload) {
      const {
        type,
        args,
        executionContextId,
        location: location2
      } = payload;
      const context = this._contextIdToContext.get(executionContextId);
      if (!context)
        return;
      this._page._addConsoleMessage(type === "warn" ? "warning" : type, args.map((arg) => context.createHandle(arg)), location2);
    }
    _onDialogOpened(params) {
      this._page.emitOnContext(_browserContext.BrowserContext.Events.Dialog, new dialog.Dialog(this._page, params.type, params.message, async (accept, promptText) => {
        await this._session.sendMayFail("Page.handleDialog", {
          dialogId: params.dialogId,
          accept,
          promptText
        });
      }, params.defaultValue));
    }
    async _onBindingCalled(event) {
      const pageOrError = await this.pageOrError();
      if (!(pageOrError instanceof Error)) {
        const context = this._contextIdToContext.get(event.executionContextId);
        if (context)
          await this._page._onBindingCalled(event.payload, context);
      }
    }
    async _onFileChooserOpened(payload) {
      const {
        executionContextId,
        element
      } = payload;
      const context = this._contextIdToContext.get(executionContextId);
      if (!context)
        return;
      const handle = context.createHandle(element).asElement();
      await this._page._onFileChooserOpened(handle);
    }
    async _onWorkerCreated(event) {
      const workerId = event.workerId;
      const worker = new _page.Worker(this._page, event.url);
      const workerSession = new _ffConnection.FFSession(this._session._connection, workerId, (message) => {
        this._session.send("Page.sendMessageToWorker", {
          frameId: event.frameId,
          workerId,
          message: JSON.stringify(message)
        }).catch((e) => {
          workerSession.dispatchMessage({
            id: message.id,
            method: "",
            params: {},
            error: {
              message: e.message,
              data: undefined
            }
          });
        });
      });
      this._workers.set(workerId, {
        session: workerSession,
        frameId: event.frameId
      });
      this._page._addWorker(workerId, worker);
      workerSession.once("Runtime.executionContextCreated", (event2) => {
        worker._createExecutionContext(new _ffExecutionContext.FFExecutionContext(workerSession, event2.executionContextId));
      });
      workerSession.on("Runtime.console", (event2) => {
        const {
          type,
          args,
          location: location2
        } = event2;
        const context = worker._existingExecutionContext;
        this._page._addConsoleMessage(type, args.map((arg) => context.createHandle(arg)), location2);
      });
    }
    _onWorkerDestroyed(event) {
      const workerId = event.workerId;
      const worker = this._workers.get(workerId);
      if (!worker)
        return;
      worker.session.dispose();
      this._workers.delete(workerId);
      this._page._removeWorker(workerId);
    }
    async _onDispatchMessageFromWorker(event) {
      const worker = this._workers.get(event.workerId);
      if (!worker)
        return;
      worker.session.dispatchMessage(JSON.parse(event.message));
    }
    async _onCrashed(event) {
      this._session.markAsCrashed();
      this._page._didCrash();
    }
    _onVideoRecordingStarted(event) {
      this._browserContext._browser._videoStarted(this._browserContext, event.screencastId, event.file, this.pageOrError());
    }
    async exposeBinding(binding) {
      await this._session.send("Page.addBinding", {
        name: binding.name,
        script: binding.source
      });
    }
    async removeExposedBindings() {
    }
    didClose() {
      this._markAsError(new _errors.TargetClosedError);
      this._session.dispose();
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      this._networkManager.dispose();
      this._page._didClose();
    }
    async navigateFrame(frame, url, referer) {
      const response = await this._session.send("Page.navigate", {
        url,
        referer,
        frameId: frame._id
      });
      return {
        newDocumentId: response.navigationId || undefined
      };
    }
    async updateExtraHTTPHeaders() {
      await this._session.send("Network.setExtraHTTPHeaders", {
        headers: this._page.extraHTTPHeaders() || []
      });
    }
    async updateEmulatedViewportSize() {
      const viewportSize = this._page.viewportSize();
      await this._session.send("Page.setViewportSize", {
        viewportSize
      });
    }
    async bringToFront() {
      await this._session.send("Page.bringToFront", {});
    }
    async updateEmulateMedia() {
      const emulatedMedia = this._page.emulatedMedia();
      const colorScheme = emulatedMedia.colorScheme === "no-override" ? undefined : emulatedMedia.colorScheme;
      const reducedMotion = emulatedMedia.reducedMotion === "no-override" ? undefined : emulatedMedia.reducedMotion;
      const forcedColors = emulatedMedia.forcedColors === "no-override" ? undefined : emulatedMedia.forcedColors;
      await this._session.send("Page.setEmulatedMedia", {
        type: emulatedMedia.media === "no-override" ? "" : emulatedMedia.media,
        colorScheme,
        reducedMotion,
        forcedColors
      });
    }
    async updateRequestInterception() {
      await this._networkManager.setRequestInterception(this._page.needsRequestInterception());
    }
    async updateFileChooserInterception() {
      const enabled = this._page.fileChooserIntercepted();
      await this._session.send("Page.setInterceptFileChooserDialog", {
        enabled
      }).catch(() => {
      });
    }
    async reload() {
      await this._session.send("Page.reload");
    }
    async goBack() {
      const {
        success
      } = await this._session.send("Page.goBack", {
        frameId: this._page.mainFrame()._id
      });
      return success;
    }
    async goForward() {
      const {
        success
      } = await this._session.send("Page.goForward", {
        frameId: this._page.mainFrame()._id
      });
      return success;
    }
    async addInitScript(script, worldName) {
      this._initScripts.push({
        script,
        worldName
      });
      await this._session.send("Page.setInitScripts", {
        scripts: this._initScripts
      });
    }
    async removeInitScripts() {
      this._initScripts = [];
      await this._session.send("Page.setInitScripts", {
        scripts: []
      });
    }
    async closePage(runBeforeUnload) {
      await this._session.send("Page.close", {
        runBeforeUnload
      });
    }
    async setBackgroundColor(color) {
      if (color)
        throw new Error("Not implemented");
    }
    async takeScreenshot(progress2, format, documentRect, viewportRect, quality, fitsViewport, scale) {
      if (!documentRect) {
        const scrollOffset = await this._page.mainFrame().waitForFunctionValueInUtility(progress2, () => ({
          x: window.scrollX,
          y: window.scrollY
        }));
        documentRect = {
          x: viewportRect.x + scrollOffset.x,
          y: viewportRect.y + scrollOffset.y,
          width: viewportRect.width,
          height: viewportRect.height
        };
      }
      progress2.throwIfAborted();
      const {
        data
      } = await this._session.send("Page.screenshot", {
        mimeType: "image/" + format,
        clip: documentRect,
        quality,
        omitDeviceScaleFactor: scale === "css"
      });
      return Buffer.from(data, "base64");
    }
    async getContentFrame(handle) {
      const {
        contentFrameId
      } = await this._session.send("Page.describeNode", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId
      });
      if (!contentFrameId)
        return null;
      return this._page._frameManager.frame(contentFrameId);
    }
    async getOwnerFrame(handle) {
      const {
        ownerFrameId
      } = await this._session.send("Page.describeNode", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId
      });
      return ownerFrameId || null;
    }
    isElementHandle(remoteObject) {
      return remoteObject.subtype === "node";
    }
    async getBoundingBox(handle) {
      const quads = await this.getContentQuads(handle);
      if (!quads || !quads.length)
        return null;
      let minX = Infinity;
      let maxX = (-Infinity);
      let minY = Infinity;
      let maxY = (-Infinity);
      for (const quad of quads) {
        for (const point of quad) {
          minX = Math.min(minX, point.x);
          maxX = Math.max(maxX, point.x);
          minY = Math.min(minY, point.y);
          maxY = Math.max(maxY, point.y);
        }
      }
      return {
        x: minX,
        y: minY,
        width: maxX - minX,
        height: maxY - minY
      };
    }
    async scrollRectIntoViewIfNeeded(handle, rect) {
      return await this._session.send("Page.scrollIntoViewIfNeeded", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId,
        rect
      }).then(() => "done").catch((e) => {
        if (e instanceof Error && e.message.includes("Node is detached from document"))
          return "error:notconnected";
        if (e instanceof Error && e.message.includes("Node does not have a layout object"))
          return "error:notvisible";
        throw e;
      });
    }
    async setScreencastOptions(options) {
      if (options) {
        const {
          screencastId
        } = await this._session.send("Page.startScreencast", options);
        this._screencastId = screencastId;
      } else {
        await this._session.send("Page.stopScreencast");
      }
    }
    _onScreencastFrame(event) {
      if (!this._screencastId)
        return;
      const screencastId = this._screencastId;
      this._page.throttleScreencastFrameAck(() => {
        this._session.send("Page.screencastFrameAck", {
          screencastId
        }).catch((e) => _debugLogger.debugLogger.log("error", e));
      });
      const buffer = Buffer.from(event.data, "base64");
      this._page.emit(_page.Page.Events.ScreencastFrame, {
        buffer,
        width: event.deviceWidth,
        height: event.deviceHeight
      });
    }
    rafCountForStablePosition() {
      return 1;
    }
    async getContentQuads(handle) {
      const result = await this._session.sendMayFail("Page.getContentQuads", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId
      });
      if (!result)
        return null;
      return result.quads.map((quad) => [quad.p1, quad.p2, quad.p3, quad.p4]);
    }
    async setInputFiles(handle, files) {
      await handle.evaluateInUtility(([injected, node, files2]) => injected.setInputFiles(node, files2), files);
    }
    async setInputFilePaths(handle, files) {
      await this._session.send("Page.setFileInputFiles", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId,
        files
      });
    }
    async adoptElementHandle(handle, to) {
      const result = await this._session.send("Page.adoptNode", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId,
        executionContextId: to[contextDelegateSymbol]._executionContextId
      });
      if (!result.remoteObject)
        throw new Error(dom.kUnableToAdoptErrorMessage);
      return to.createHandle(result.remoteObject);
    }
    async getAccessibilityTree(needle) {
      return (0, _ffAccessibility.getAccessibilityTree)(this._session, needle);
    }
    async inputActionEpilogue() {
    }
    async resetForReuse() {
      await this.rawMouse.move(-1, -1, "none", new Set, new Set, false);
    }
    async getFrameElement(frame) {
      const parent = frame.parentFrame();
      if (!parent)
        throw new Error("Frame has been detached.");
      const context = await parent._mainContext();
      const result = await this._session.send("Page.adoptNode", {
        frameId: frame._id,
        executionContextId: context[contextDelegateSymbol]._executionContextId
      });
      if (!result.remoteObject)
        throw new Error("Frame has been detached.");
      return context.createHandle(result.remoteObject);
    }
    shouldToggleStyleSheetToSyncAnimations() {
      return false;
    }
  }
  exports.FFPage = FFPage;
  var contextDelegateSymbol = Symbol("delegate");
});

// node_modules/playwright-core/lib/server/firefox/ffBrowser.js
var require_ffBrowser = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var toJugglerProxyOptions = function(proxy) {
    const proxyServer = new URL(proxy.server);
    let port = parseInt(proxyServer.port, 10);
    let type = "http";
    if (proxyServer.protocol === "socks5:")
      type = "socks";
    else if (proxyServer.protocol === "socks4:")
      type = "socks4";
    else if (proxyServer.protocol === "https:")
      type = "https";
    if (proxyServer.port === "") {
      if (proxyServer.protocol === "http:")
        port = 80;
      else if (proxyServer.protocol === "https:")
        port = 443;
    }
    return {
      type,
      bypass: proxy.bypass ? proxy.bypass.split(",").map((domain) => domain.trim()) : [],
      host: proxyServer.hostname,
      port,
      username: proxy.username,
      password: proxy.password
    };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FFBrowserContext = exports.FFBrowser = undefined;
  var _errors = require_errors();
  var _utils = require_utils3();
  var _browser = require_browser5();
  var _browserContext = require_browserContext();
  var network = _interopRequireWildcard(require_network2());
  var _ffConnection = require_ffConnection();
  var _ffPage = require_ffPage();

  class FFBrowser extends _browser.Browser {
    static async connect(parent, transport, options) {
      var _options$originalLaun;
      const connection = new _ffConnection.FFConnection(transport, options.protocolLogger, options.browserLogsCollector);
      const browser = new FFBrowser(parent, connection, options);
      if (options.__testHookOnConnectToBrowser)
        await options.__testHookOnConnectToBrowser();
      let firefoxUserPrefs = (_options$originalLaun = options.originalLaunchOptions.firefoxUserPrefs) !== null && _options$originalLaun !== undefined ? _options$originalLaun : {};
      if (Object.keys(kBandaidFirefoxUserPrefs).length)
        firefoxUserPrefs = {
          ...kBandaidFirefoxUserPrefs,
          ...firefoxUserPrefs
        };
      const promises = [browser.session.send("Browser.enable", {
        attachToDefaultContext: !!options.persistent,
        userPrefs: Object.entries(firefoxUserPrefs).map(([name, value]) => ({
          name,
          value
        }))
      }), browser._initVersion()];
      if (options.persistent) {
        browser._defaultContext = new FFBrowserContext(browser, undefined, options.persistent);
        promises.push(browser._defaultContext._initialize());
      }
      if (options.proxy)
        promises.push(browser.session.send("Browser.setBrowserProxy", toJugglerProxyOptions(options.proxy)));
      await Promise.all(promises);
      return browser;
    }
    constructor(parent, connection, options) {
      super(parent, options);
      this._connection = undefined;
      this.session = undefined;
      this._ffPages = undefined;
      this._contexts = undefined;
      this._version = "";
      this._userAgent = "";
      this._connection = connection;
      this.session = connection.rootSession;
      this._ffPages = new Map;
      this._contexts = new Map;
      this._connection.on(_ffConnection.ConnectionEvents.Disconnected, () => this._onDisconnect());
      this.session.on("Browser.attachedToTarget", this._onAttachedToTarget.bind(this));
      this.session.on("Browser.detachedFromTarget", this._onDetachedFromTarget.bind(this));
      this.session.on("Browser.downloadCreated", this._onDownloadCreated.bind(this));
      this.session.on("Browser.downloadFinished", this._onDownloadFinished.bind(this));
      this.session.on("Browser.videoRecordingFinished", this._onVideoRecordingFinished.bind(this));
    }
    async _initVersion() {
      const result = await this.session.send("Browser.getInfo");
      this._version = result.version.substring(result.version.indexOf("/") + 1);
      this._userAgent = result.userAgent;
    }
    isConnected() {
      return !this._connection._closed;
    }
    async doCreateNewContext(options) {
      if (options.isMobile)
        throw new Error("options.isMobile is not supported in Firefox");
      const {
        browserContextId
      } = await this.session.send("Browser.createBrowserContext", {
        removeOnDetach: true
      });
      const context = new FFBrowserContext(this, browserContextId, options);
      await context._initialize();
      this._contexts.set(browserContextId, context);
      return context;
    }
    contexts() {
      return Array.from(this._contexts.values());
    }
    version() {
      return this._version;
    }
    userAgent() {
      return this._userAgent;
    }
    _onDetachedFromTarget(payload) {
      const ffPage = this._ffPages.get(payload.targetId);
      this._ffPages.delete(payload.targetId);
      ffPage.didClose();
    }
    _onAttachedToTarget(payload) {
      const {
        targetId,
        browserContextId,
        openerId,
        type
      } = payload.targetInfo;
      (0, _utils.assert)(type === "page");
      const context = browserContextId ? this._contexts.get(browserContextId) : this._defaultContext;
      (0, _utils.assert)(context, `Unknown context id:${browserContextId}, _defaultContext: ${this._defaultContext}`);
      const session = this._connection.createSession(payload.sessionId);
      const opener = openerId ? this._ffPages.get(openerId) : null;
      const ffPage = new _ffPage.FFPage(session, context, opener);
      this._ffPages.set(targetId, ffPage);
    }
    _onDownloadCreated(payload) {
      const ffPage = this._ffPages.get(payload.pageTargetId);
      if (!ffPage)
        return;
      ffPage._page._frameManager.frameAbortedNavigation(payload.frameId, "Download is starting");
      let originPage = ffPage._initializedPage;
      if (!originPage) {
        ffPage._markAsError(new Error("Starting new page download"));
        if (ffPage._opener)
          originPage = ffPage._opener._initializedPage;
      }
      if (!originPage)
        return;
      this._downloadCreated(originPage, payload.uuid, payload.url, payload.suggestedFileName);
    }
    _onDownloadFinished(payload) {
      const error = payload.canceled ? "canceled" : payload.error;
      this._downloadFinished(payload.uuid, error);
    }
    _onVideoRecordingFinished(payload) {
      var _this$_takeVideo;
      (_this$_takeVideo = this._takeVideo(payload.screencastId)) === null || _this$_takeVideo === undefined || _this$_takeVideo.reportFinished();
    }
    _onDisconnect() {
      for (const video of this._idToVideo.values())
        video.artifact.reportFinished(new _errors.TargetClosedError);
      this._idToVideo.clear();
      for (const ffPage of this._ffPages.values())
        ffPage.didClose();
      this._ffPages.clear();
      this._didClose();
    }
  }
  exports.FFBrowser = FFBrowser;

  class FFBrowserContext extends _browserContext.BrowserContext {
    constructor(browser, browserContextId, options) {
      super(browser, options, browserContextId);
    }
    async _initialize() {
      (0, _utils.assert)(!this._ffPages().length);
      const browserContextId = this._browserContextId;
      const promises = [super._initialize()];
      if (this._options.acceptDownloads !== "internal-browser-default") {
        promises.push(this._browser.session.send("Browser.setDownloadOptions", {
          browserContextId,
          downloadOptions: {
            behavior: this._options.acceptDownloads === "accept" ? "saveToDisk" : "cancel",
            downloadsDir: this._browser.options.downloadsPath
          }
        }));
      }
      if (this._options.viewport) {
        const viewport = {
          viewportSize: {
            width: this._options.viewport.width,
            height: this._options.viewport.height
          },
          deviceScaleFactor: this._options.deviceScaleFactor || 1
        };
        promises.push(this._browser.session.send("Browser.setDefaultViewport", {
          browserContextId,
          viewport
        }));
      }
      if (this._options.hasTouch)
        promises.push(this._browser.session.send("Browser.setTouchOverride", {
          browserContextId,
          hasTouch: true
        }));
      if (this._options.userAgent)
        promises.push(this._browser.session.send("Browser.setUserAgentOverride", {
          browserContextId,
          userAgent: this._options.userAgent
        }));
      if (this._options.bypassCSP)
        promises.push(this._browser.session.send("Browser.setBypassCSP", {
          browserContextId,
          bypassCSP: true
        }));
      if (this._options.ignoreHTTPSErrors)
        promises.push(this._browser.session.send("Browser.setIgnoreHTTPSErrors", {
          browserContextId,
          ignoreHTTPSErrors: true
        }));
      if (this._options.javaScriptEnabled === false)
        promises.push(this._browser.session.send("Browser.setJavaScriptDisabled", {
          browserContextId,
          javaScriptDisabled: true
        }));
      if (this._options.locale)
        promises.push(this._browser.session.send("Browser.setLocaleOverride", {
          browserContextId,
          locale: this._options.locale
        }));
      if (this._options.timezoneId)
        promises.push(this._browser.session.send("Browser.setTimezoneOverride", {
          browserContextId,
          timezoneId: this._options.timezoneId
        }));
      if (this._options.extraHTTPHeaders || this._options.locale)
        promises.push(this.setExtraHTTPHeaders(this._options.extraHTTPHeaders || []));
      if (this._options.httpCredentials)
        promises.push(this.setHTTPCredentials(this._options.httpCredentials));
      if (this._options.geolocation)
        promises.push(this.setGeolocation(this._options.geolocation));
      if (this._options.offline)
        promises.push(this.setOffline(this._options.offline));
      if (this._options.colorScheme !== "no-override") {
        promises.push(this._browser.session.send("Browser.setColorScheme", {
          browserContextId,
          colorScheme: this._options.colorScheme !== undefined ? this._options.colorScheme : "light"
        }));
      }
      if (this._options.reducedMotion !== "no-override") {
        promises.push(this._browser.session.send("Browser.setReducedMotion", {
          browserContextId,
          reducedMotion: this._options.reducedMotion !== undefined ? this._options.reducedMotion : "no-preference"
        }));
      }
      if (this._options.forcedColors !== "no-override") {
        promises.push(this._browser.session.send("Browser.setForcedColors", {
          browserContextId,
          forcedColors: this._options.forcedColors !== undefined ? this._options.forcedColors : "none"
        }));
      }
      if (this._options.recordVideo) {
        promises.push(this._ensureVideosPath().then(() => {
          return this._browser.session.send("Browser.setVideoRecordingOptions", {
            options: {
              ...this._options.recordVideo.size,
              dir: this._options.recordVideo.dir
            },
            browserContextId: this._browserContextId
          });
        }));
      }
      if (this._options.proxy) {
        promises.push(this._browser.session.send("Browser.setContextProxy", {
          browserContextId: this._browserContextId,
          ...toJugglerProxyOptions(this._options.proxy)
        }));
      }
      await Promise.all(promises);
    }
    _ffPages() {
      return Array.from(this._browser._ffPages.values()).filter((ffPage) => ffPage._browserContext === this);
    }
    pages() {
      return this._ffPages().map((ffPage) => ffPage._initializedPage).filter((pageOrNull) => !!pageOrNull);
    }
    async newPageDelegate() {
      (0, _browserContext.assertBrowserContextIsNotOwned)(this);
      const {
        targetId
      } = await this._browser.session.send("Browser.newPage", {
        browserContextId: this._browserContextId
      }).catch((e) => {
        if (e.message.includes("Failed to override timezone"))
          throw new Error(`Invalid timezone ID: ${this._options.timezoneId}`);
        throw e;
      });
      return this._browser._ffPages.get(targetId);
    }
    async doGetCookies(urls) {
      const {
        cookies
      } = await this._browser.session.send("Browser.getCookies", {
        browserContextId: this._browserContextId
      });
      return network.filterCookies(cookies.map((c) => {
        const copy = {
          ...c
        };
        delete copy.size;
        delete copy.session;
        return copy;
      }), urls);
    }
    async addCookies(cookies) {
      const cc = network.rewriteCookies(cookies).map((c) => ({
        ...c,
        expires: c.expires === -1 ? undefined : c.expires
      }));
      await this._browser.session.send("Browser.setCookies", {
        browserContextId: this._browserContextId,
        cookies: cc
      });
    }
    async doClearCookies() {
      await this._browser.session.send("Browser.clearCookies", {
        browserContextId: this._browserContextId
      });
    }
    async doGrantPermissions(origin, permissions) {
      const webPermissionToProtocol = new Map([["geolocation", "geo"], ["persistent-storage", "persistent-storage"], ["push", "push"], ["notifications", "desktop-notification"]]);
      const filtered = permissions.map((permission) => {
        const protocolPermission = webPermissionToProtocol.get(permission);
        if (!protocolPermission)
          throw new Error("Unknown permission: " + permission);
        return protocolPermission;
      });
      await this._browser.session.send("Browser.grantPermissions", {
        origin,
        browserContextId: this._browserContextId,
        permissions: filtered
      });
    }
    async doClearPermissions() {
      await this._browser.session.send("Browser.resetPermissions", {
        browserContextId: this._browserContextId
      });
    }
    async setGeolocation(geolocation) {
      (0, _browserContext.verifyGeolocation)(geolocation);
      this._options.geolocation = geolocation;
      await this._browser.session.send("Browser.setGeolocationOverride", {
        browserContextId: this._browserContextId,
        geolocation: geolocation || null
      });
    }
    async setExtraHTTPHeaders(headers) {
      this._options.extraHTTPHeaders = headers;
      let allHeaders = this._options.extraHTTPHeaders;
      if (this._options.locale)
        allHeaders = network.mergeHeaders([allHeaders, network.singleHeader("Accept-Language", this._options.locale)]);
      await this._browser.session.send("Browser.setExtraHTTPHeaders", {
        browserContextId: this._browserContextId,
        headers: allHeaders
      });
    }
    async setUserAgent(userAgent) {
      await this._browser.session.send("Browser.setUserAgentOverride", {
        browserContextId: this._browserContextId,
        userAgent: userAgent || null
      });
    }
    async setOffline(offline) {
      this._options.offline = offline;
      await this._browser.session.send("Browser.setOnlineOverride", {
        browserContextId: this._browserContextId,
        override: offline ? "offline" : "online"
      });
    }
    async doSetHTTPCredentials(httpCredentials) {
      this._options.httpCredentials = httpCredentials;
      await this._browser.session.send("Browser.setHTTPCredentials", {
        browserContextId: this._browserContextId,
        credentials: httpCredentials || null
      });
    }
    async doAddInitScript(source) {
      await this._browser.session.send("Browser.setInitScripts", {
        browserContextId: this._browserContextId,
        scripts: this.initScripts.map((script) => ({
          script
        }))
      });
    }
    async doRemoveInitScripts() {
      await this._browser.session.send("Browser.setInitScripts", {
        browserContextId: this._browserContextId,
        scripts: []
      });
    }
    async doExposeBinding(binding) {
      await this._browser.session.send("Browser.addBinding", {
        browserContextId: this._browserContextId,
        name: binding.name,
        script: binding.source
      });
    }
    async doRemoveExposedBindings() {
    }
    async doUpdateRequestInterception() {
      await Promise.all([this._browser.session.send("Browser.setRequestInterception", {
        browserContextId: this._browserContextId,
        enabled: !!this._requestInterceptor
      }), this._browser.session.send("Browser.setCacheDisabled", {
        browserContextId: this._browserContextId,
        cacheDisabled: !!this._requestInterceptor
      })]);
    }
    onClosePersistent() {
    }
    async clearCache() {
      await this._browser.session.send("Browser.clearCache");
    }
    async doClose(reason) {
      if (!this._browserContextId) {
        if (this._options.recordVideo) {
          await this._browser.session.send("Browser.setVideoRecordingOptions", {
            options: undefined,
            browserContextId: this._browserContextId
          });
        }
        await this._browser.close({
          reason
        });
      } else {
        await this._browser.session.send("Browser.removeBrowserContext", {
          browserContextId: this._browserContextId
        });
        this._browser._contexts.delete(this._browserContextId);
      }
    }
    async cancelDownload(uuid) {
      await this._browser.session.send("Browser.cancelDownload", {
        uuid
      });
    }
  }
  exports.FFBrowserContext = FFBrowserContext;
  var kBandaidFirefoxUserPrefs = {};
});

// node_modules/playwright-core/lib/server/firefox/firefox.js
var require_firefox = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Firefox = undefined;
  var os = _interopRequireWildcard(import.meta.require("os"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _ffBrowser = require_ffBrowser();
  var _ffConnection = require_ffConnection();
  var _browserType = require_browserType();
  var _utils = require_utils3();

  class Firefox extends _browserType.BrowserType {
    constructor(parent) {
      super(parent, "firefox");
    }
    _connectToTransport(transport, options) {
      return _ffBrowser.FFBrowser.connect(this.attribution.playwright, transport, options);
    }
    _doRewriteStartupLog(error) {
      if (!error.logs)
        return error;
      if (error.logs.includes(`as root in a regular user's session is not supported.`))
        error.logs = "\n" + (0, _utils.wrapInASCIIBox)(`Firefox is unable to launch if the \$HOME folder isn't owned by the current user.\nWorkaround: Set the HOME=/root environment variable${process.env.GITHUB_ACTION ? " in your GitHub Actions workflow file" : ""} when running Playwright.`, 1);
      if (error.logs.includes("no DISPLAY environment variable specified"))
        error.logs = "\n" + (0, _utils.wrapInASCIIBox)(_browserType.kNoXServerRunningError, 1);
      return error;
    }
    _amendEnvironment(env, userDataDir, executable, browserArguments) {
      if (!_path.default.isAbsolute(os.homedir()))
        throw new Error(`Cannot launch Firefox with relative home directory. Did you set ${os.platform() === "win32" ? "USERPROFILE" : "HOME"} to a relative path?`);
      if (os.platform() === "linux") {
        return {
          ...env,
          SNAP_NAME: undefined,
          SNAP_INSTANCE_NAME: undefined
        };
      }
      return env;
    }
    _attemptToGracefullyCloseBrowser(transport) {
      const message = {
        method: "Browser.close",
        params: {},
        id: _ffConnection.kBrowserCloseMessageId
      };
      transport.send(message);
    }
    _defaultArgs(options, isPersistent, userDataDir) {
      const {
        args = [],
        headless
      } = options;
      const userDataDirArg = args.find((arg) => arg.startsWith("-profile") || arg.startsWith("--profile"));
      if (userDataDirArg)
        throw this._createUserDataDirArgMisuseError("--profile");
      if (args.find((arg) => arg.startsWith("-juggler")))
        throw new Error("Use the port parameter instead of -juggler argument");
      const firefoxArguments = ["-no-remote"];
      if (headless) {
        firefoxArguments.push("-headless");
      } else {
        firefoxArguments.push("-wait-for-browser");
        firefoxArguments.push("-foreground");
      }
      firefoxArguments.push(`-profile`, userDataDir);
      firefoxArguments.push("-juggler-pipe");
      firefoxArguments.push(...args);
      if (isPersistent)
        firefoxArguments.push("about:blank");
      else
        firefoxArguments.push("-silent");
      return firefoxArguments;
    }
  }
  exports.Firefox = Firefox;
});

// node_modules/playwright-core/lib/server/selectors.js
var require_selectors = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Selectors = undefined;
  var _selectorParser = require_selectorParser();
  var _utils = require_utils3();

  class Selectors {
    constructor() {
      this._builtinEngines = undefined;
      this._builtinEnginesInMainWorld = undefined;
      this._engines = undefined;
      this.guid = `selectors@${(0, _utils.createGuid)()}`;
      this._testIdAttributeName = "data-testid";
      this._builtinEngines = new Set(["css", "css:light", "xpath", "xpath:light", "_react", "_vue", "text", "text:light", "id", "id:light", "data-testid", "data-testid:light", "data-test-id", "data-test-id:light", "data-test", "data-test:light", "nth", "visible", "internal:control", "internal:has", "internal:has-not", "internal:has-text", "internal:has-not-text", "internal:and", "internal:or", "internal:chain", "role", "internal:attr", "internal:label", "internal:text", "internal:role", "internal:testid"]);
      this._builtinEnginesInMainWorld = new Set(["_react", "_vue"]);
      this._engines = new Map;
    }
    async register(name, source, contentScript = false) {
      if (!name.match(/^[a-zA-Z_0-9-]+$/))
        throw new Error("Selector engine name may only contain [a-zA-Z0-9_] characters");
      if (this._builtinEngines.has(name) || name === "zs" || name === "zs:light")
        throw new Error(`"${name}" is a predefined selector engine`);
      if (this._engines.has(name))
        throw new Error(`"${name}" selector engine has been already registered`);
      this._engines.set(name, {
        source,
        contentScript
      });
    }
    testIdAttributeName() {
      return this._testIdAttributeName;
    }
    setTestIdAttributeName(testIdAttributeName) {
      this._testIdAttributeName = testIdAttributeName;
    }
    unregisterAll() {
      this._engines.clear();
    }
    parseSelector(selector, strict) {
      const parsed = typeof selector === "string" ? (0, _selectorParser.parseSelector)(selector) : selector;
      let needsMainWorld = false;
      (0, _selectorParser.visitAllSelectorParts)(parsed, (part) => {
        const name = part.name;
        const custom = this._engines.get(name);
        if (!custom && !this._builtinEngines.has(name))
          throw new _selectorParser.InvalidSelectorError(`Unknown engine "${name}" while parsing selector ${(0, _selectorParser.stringifySelector)(parsed)}`);
        if (custom && !custom.contentScript)
          needsMainWorld = true;
        if (this._builtinEnginesInMainWorld.has(name))
          needsMainWorld = true;
      });
      return {
        parsed,
        world: needsMainWorld ? "main" : "utility",
        strict
      };
    }
  }
  exports.Selectors = Selectors;
});

// node_modules/playwright-core/lib/server/webkit/wkConnection.js
var require_wkConnection = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.kPageProxyMessageReceived = exports.kBrowserCloseMessageId = exports.WKSession = exports.WKConnection = undefined;
  var _events = import.meta.require("events");
  var _utils = require_utils3();
  var _debugLogger = require_debugLogger();
  var _helper = require_helper();
  var _protocolError = require_protocolError();
  var kBrowserCloseMessageId = exports.kBrowserCloseMessageId = -9999;
  var kPageProxyMessageReceived = exports.kPageProxyMessageReceived = "kPageProxyMessageReceived";

  class WKConnection {
    constructor(transport, onDisconnect, protocolLogger, browserLogsCollector) {
      this._transport = undefined;
      this._onDisconnect = undefined;
      this._protocolLogger = undefined;
      this._browserLogsCollector = undefined;
      this._browserDisconnectedLogs = undefined;
      this._lastId = 0;
      this._closed = false;
      this.browserSession = undefined;
      this._transport = transport;
      this._onDisconnect = onDisconnect;
      this._protocolLogger = protocolLogger;
      this._browserLogsCollector = browserLogsCollector;
      this.browserSession = new WKSession(this, "", (message) => {
        this.rawSend(message);
      });
      this._transport.onmessage = this._dispatchMessage.bind(this);
      this._transport.onclose = this._onClose.bind(this);
    }
    nextMessageId() {
      return ++this._lastId;
    }
    rawSend(message) {
      this._protocolLogger("send", message);
      this._transport.send(message);
    }
    _dispatchMessage(message) {
      this._protocolLogger("receive", message);
      if (message.id === kBrowserCloseMessageId)
        return;
      if (message.pageProxyId) {
        const payload = {
          message,
          pageProxyId: message.pageProxyId
        };
        this.browserSession.dispatchMessage({
          method: kPageProxyMessageReceived,
          params: payload
        });
        return;
      }
      this.browserSession.dispatchMessage(message);
    }
    _onClose(reason) {
      this._closed = true;
      this._transport.onmessage = undefined;
      this._transport.onclose = undefined;
      this._browserDisconnectedLogs = _helper.helper.formatBrowserLogs(this._browserLogsCollector.recentLogs(), reason);
      this.browserSession.dispose();
      this._onDisconnect();
    }
    isClosed() {
      return this._closed;
    }
    close() {
      if (!this._closed)
        this._transport.close();
    }
  }
  exports.WKConnection = WKConnection;

  class WKSession extends _events.EventEmitter {
    constructor(connection, sessionId, rawSend) {
      super();
      this.connection = undefined;
      this.sessionId = undefined;
      this._disposed = false;
      this._rawSend = undefined;
      this._callbacks = new Map;
      this._crashed = false;
      this.on = undefined;
      this.addListener = undefined;
      this.off = undefined;
      this.removeListener = undefined;
      this.once = undefined;
      this.setMaxListeners(0);
      this.connection = connection;
      this.sessionId = sessionId;
      this._rawSend = rawSend;
      this.on = super.on;
      this.off = super.removeListener;
      this.addListener = super.addListener;
      this.removeListener = super.removeListener;
      this.once = super.once;
    }
    async send(method, params) {
      if (this._crashed || this._disposed || this.connection._browserDisconnectedLogs)
        throw new _protocolError.ProtocolError(this._crashed ? "crashed" : "closed", undefined, this.connection._browserDisconnectedLogs);
      const id = this.connection.nextMessageId();
      const messageObj = {
        id,
        method,
        params
      };
      this._rawSend(messageObj);
      return new Promise((resolve, reject) => {
        this._callbacks.set(id, {
          resolve,
          reject,
          error: new _protocolError.ProtocolError("error", method)
        });
      });
    }
    sendMayFail(method, params) {
      return this.send(method, params).catch((error) => _debugLogger.debugLogger.log("error", error));
    }
    markAsCrashed() {
      this._crashed = true;
    }
    isDisposed() {
      return this._disposed;
    }
    dispose() {
      for (const callback of this._callbacks.values()) {
        callback.error.type = this._crashed ? "crashed" : "closed";
        callback.error.logs = this.connection._browserDisconnectedLogs;
        callback.reject(callback.error);
      }
      this._callbacks.clear();
      this._disposed = true;
    }
    dispatchMessage(object) {
      if (object.id && this._callbacks.has(object.id)) {
        const callback = this._callbacks.get(object.id);
        this._callbacks.delete(object.id);
        if (object.error) {
          callback.error.setMessage(object.error.message);
          callback.reject(callback.error);
        } else {
          callback.resolve(object.result);
        }
      } else if (object.id && !object.error) {
        (0, _utils.assert)(this.isDisposed());
      } else {
        Promise.resolve().then(() => this.emit(object.method, object.params));
      }
    }
  }
  exports.WKSession = WKSession;
});

// node_modules/playwright-core/lib/server/webkit/wkAccessibility.js
var require_wkAccessibility = __commonJS((exports) => {
  async function getAccessibilityTree(session, needle) {
    const objectId = needle ? needle._objectId : undefined;
    const {
      axNode
    } = await session.send("Page.accessibilitySnapshot", {
      objectId
    });
    const tree = new WKAXNode(axNode);
    return {
      tree,
      needle: needle ? tree._findNeedle() : null
    };
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getAccessibilityTree = getAccessibilityTree;
  var WKRoleToARIARole = new Map(Object.entries({
    TextField: "textbox"
  }));
  var WKUnhelpfulRoleDescriptions = new Map(Object.entries({
    WebArea: "HTML content",
    Summary: "summary",
    DescriptionList: "description list",
    ImageMap: "image map",
    ListMarker: "list marker",
    Video: "video playback",
    Mark: "highlighted",
    contentinfo: "content information",
    Details: "details",
    DescriptionListDetail: "description",
    DescriptionListTerm: "term",
    alertdialog: "web alert dialog",
    dialog: "web dialog",
    status: "application status",
    tabpanel: "tab panel",
    application: "web application"
  }));

  class WKAXNode {
    constructor(payload) {
      this._payload = undefined;
      this._children = undefined;
      this._payload = payload;
      this._children = [];
      for (const payload2 of this._payload.children || [])
        this._children.push(new WKAXNode(payload2));
    }
    children() {
      return this._children;
    }
    _findNeedle() {
      if (this._payload.found)
        return this;
      for (const child of this._children) {
        const found = child._findNeedle();
        if (found)
          return found;
      }
      return null;
    }
    isControl() {
      switch (this._payload.role) {
        case "button":
        case "checkbox":
        case "ColorWell":
        case "combobox":
        case "DisclosureTriangle":
        case "listbox":
        case "menu":
        case "menubar":
        case "menuitem":
        case "menuitemcheckbox":
        case "menuitemradio":
        case "radio":
        case "scrollbar":
        case "searchbox":
        case "slider":
        case "spinbutton":
        case "switch":
        case "tab":
        case "textbox":
        case "TextField":
        case "tree":
          return true;
        default:
          return false;
      }
    }
    _isTextControl() {
      switch (this._payload.role) {
        case "combobox":
        case "searchfield":
        case "textbox":
        case "TextField":
          return true;
      }
      return false;
    }
    _name() {
      if (this._payload.role === "text")
        return this._payload.value || "";
      return this._payload.name || "";
    }
    isInteresting(insideControl) {
      const {
        role,
        focusable
      } = this._payload;
      const name = this._name();
      if (role === "ScrollArea")
        return false;
      if (role === "WebArea")
        return true;
      if (focusable || role === "MenuListOption")
        return true;
      if (this.isControl())
        return true;
      if (insideControl)
        return false;
      return this.isLeafNode() && !!name;
    }
    _hasRedundantTextChild() {
      if (this._children.length !== 1)
        return false;
      const child = this._children[0];
      return child._payload.role === "text" && this._payload.name === child._payload.value;
    }
    isLeafNode() {
      if (!this._children.length)
        return true;
      if (this._isTextControl())
        return true;
      if (this._hasRedundantTextChild())
        return true;
      return false;
    }
    serialize() {
      const node = {
        role: WKRoleToARIARole.get(this._payload.role) || this._payload.role,
        name: this._name()
      };
      if ("description" in this._payload && this._payload.description !== node.name)
        node.description = this._payload.description;
      if ("roledescription" in this._payload) {
        const roledescription = this._payload.roledescription;
        if (roledescription !== this._payload.role && WKUnhelpfulRoleDescriptions.get(this._payload.role) !== roledescription)
          node.roledescription = roledescription;
      }
      if ("value" in this._payload && this._payload.role !== "text") {
        if (typeof this._payload.value === "string")
          node.valueString = this._payload.value;
        else if (typeof this._payload.value === "number")
          node.valueNumber = this._payload.value;
      }
      if ("checked" in this._payload)
        node.checked = this._payload.checked === "true" ? "checked" : this._payload.checked === "false" ? "unchecked" : "mixed";
      if ("pressed" in this._payload)
        node.pressed = this._payload.pressed === "true" ? "pressed" : this._payload.pressed === "false" ? "released" : "mixed";
      const userStringProperties = ["keyshortcuts", "valuetext"];
      for (const userStringProperty of userStringProperties) {
        if (!(userStringProperty in this._payload))
          continue;
        node[userStringProperty] = this._payload[userStringProperty];
      }
      const booleanProperties = ["disabled", "expanded", "focused", "modal", "multiselectable", "readonly", "required", "selected"];
      for (const booleanProperty of booleanProperties) {
        if (booleanProperty === "focused" && (this._payload.role === "WebArea" || this._payload.role === "ScrollArea"))
          continue;
        const value = this._payload[booleanProperty];
        if (!value)
          continue;
        node[booleanProperty] = value;
      }
      const numericalProperties = ["level", "valuemax", "valuemin"];
      for (const numericalProperty of numericalProperties) {
        if (!(numericalProperty in this._payload))
          continue;
        node[numericalProperty] = this._payload[numericalProperty];
      }
      const tokenProperties = ["autocomplete", "haspopup", "invalid"];
      for (const tokenProperty of tokenProperties) {
        const value = this._payload[tokenProperty];
        if (!value || value === "false")
          continue;
        node[tokenProperty] = value;
      }
      const orientationIsApplicable = new Set(["ScrollArea", "scrollbar", "listbox", "combobox", "menu", "tree", "separator", "slider", "tablist", "toolbar"]);
      if (this._payload.orientation && orientationIsApplicable.has(this._payload.role))
        node.orientation = this._payload.orientation;
      return node;
    }
  }
});

// node_modules/playwright-core/lib/server/webkit/wkExecutionContext.js
var require_wkExecutionContext = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var potentiallyUnserializableValue = function(remoteObject) {
    const value = remoteObject.value;
    const isUnserializable = remoteObject.type === "number" && ["NaN", "-Infinity", "Infinity", "-0"].includes(remoteObject.description);
    return isUnserializable ? js.parseUnserializableValue(remoteObject.description) : value;
  };
  var rewriteError = function(error) {
    if (!js.isJavaScriptErrorInEvaluate(error) && !(0, _protocolError.isSessionClosedError)(error))
      return new Error("Execution context was destroyed, most likely because of a navigation.");
    return error;
  };
  var renderPreview = function(object) {
    if (object.type === "undefined")
      return "undefined";
    if ("value" in object)
      return String(object.value);
    if (object.description === "Object" && object.preview) {
      const tokens = [];
      for (const {
        name,
        value
      } of object.preview.properties)
        tokens.push(`${name}: ${value}`);
      return `{${tokens.join(", ")}}`;
    }
    if (object.subtype === "array" && object.preview)
      return js.sparseArrayToString(object.preview.properties);
    return object.description;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WKExecutionContext = undefined;
  var js = _interopRequireWildcard(require_javascript());
  var _utilityScriptSerializers = require_utilityScriptSerializers();
  var _protocolError = require_protocolError();

  class WKExecutionContext {
    constructor(session, contextId) {
      this._session = undefined;
      this._contextId = undefined;
      this._session = session;
      this._contextId = contextId;
    }
    async rawEvaluateJSON(expression) {
      try {
        const response = await this._session.send("Runtime.evaluate", {
          expression,
          contextId: this._contextId,
          returnByValue: true
        });
        if (response.wasThrown)
          throw new js.JavaScriptErrorInEvaluate(response.result.description);
        return response.result.value;
      } catch (error) {
        throw rewriteError(error);
      }
    }
    async rawEvaluateHandle(expression) {
      try {
        const response = await this._session.send("Runtime.evaluate", {
          expression,
          contextId: this._contextId,
          returnByValue: false
        });
        if (response.wasThrown)
          throw new js.JavaScriptErrorInEvaluate(response.result.description);
        return response.result.objectId;
      } catch (error) {
        throw rewriteError(error);
      }
    }
    rawCallFunctionNoReply(func, ...args) {
      this._session.send("Runtime.callFunctionOn", {
        functionDeclaration: func.toString(),
        objectId: args.find((a) => a instanceof js.JSHandle)._objectId,
        arguments: args.map((a) => a instanceof js.JSHandle ? {
          objectId: a._objectId
        } : {
          value: a
        }),
        returnByValue: true,
        emulateUserGesture: true
      }).catch(() => {
      });
    }
    async evaluateWithArguments(expression, returnByValue, utilityScript, values, objectIds) {
      try {
        const response = await this._session.send("Runtime.callFunctionOn", {
          functionDeclaration: expression,
          objectId: utilityScript._objectId,
          arguments: [{
            objectId: utilityScript._objectId
          }, ...values.map((value) => ({
            value
          })), ...objectIds.map((objectId) => ({
            objectId
          }))],
          returnByValue,
          emulateUserGesture: true,
          awaitPromise: true
        });
        if (response.wasThrown)
          throw new js.JavaScriptErrorInEvaluate(response.result.description);
        if (returnByValue)
          return (0, _utilityScriptSerializers.parseEvaluationResultValue)(response.result.value);
        return utilityScript._context.createHandle(response.result);
      } catch (error) {
        throw rewriteError(error);
      }
    }
    async getProperties(context, objectId) {
      const response = await this._session.send("Runtime.getProperties", {
        objectId,
        ownProperties: true
      });
      const result = new Map;
      for (const property of response.properties) {
        if (!property.enumerable || !property.value)
          continue;
        result.set(property.name, context.createHandle(property.value));
      }
      return result;
    }
    createHandle(context, remoteObject) {
      const isPromise = remoteObject.className === "Promise";
      return new js.JSHandle(context, isPromise ? "promise" : remoteObject.subtype || remoteObject.type, renderPreview(remoteObject), remoteObject.objectId, potentiallyUnserializableValue(remoteObject));
    }
    async releaseHandle(objectId) {
      await this._session.send("Runtime.releaseObject", {
        objectId
      });
    }
    objectCount(objectId) {
      throw new Error("Method not implemented in WebKit.");
    }
  }
  exports.WKExecutionContext = WKExecutionContext;
});

// node_modules/playwright-core/lib/server/webkit/wkInput.js
var require_wkInput = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var toModifiersMask = function(modifiers) {
    let mask = 0;
    if (modifiers.has("Shift"))
      mask |= 1;
    if (modifiers.has("Control"))
      mask |= 2;
    if (modifiers.has("Alt"))
      mask |= 4;
    if (modifiers.has("Meta"))
      mask |= 8;
    return mask;
  };
  var toButtonsMask = function(buttons) {
    let mask = 0;
    if (buttons.has("left"))
      mask |= 1;
    if (buttons.has("right"))
      mask |= 2;
    if (buttons.has("middle"))
      mask |= 4;
    return mask;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.RawTouchscreenImpl = exports.RawMouseImpl = exports.RawKeyboardImpl = undefined;
  var input = _interopRequireWildcard(require_input());
  var _macEditingCommands = require_macEditingCommands();
  var _utils = require_utils3();

  class RawKeyboardImpl {
    constructor(session) {
      this._pageProxySession = undefined;
      this._session = undefined;
      this._pageProxySession = session;
    }
    setSession(session) {
      this._session = session;
    }
    async keydown(modifiers, code, keyCode, keyCodeWithoutLocation, key, location2, autoRepeat, text) {
      const parts = [];
      for (const modifier of ["Shift", "Control", "Alt", "Meta"]) {
        if (modifiers.has(modifier))
          parts.push(modifier);
      }
      parts.push(code);
      const shortcut = parts.join("+");
      let commands = _macEditingCommands.macEditingCommands[shortcut];
      if ((0, _utils.isString)(commands))
        commands = [commands];
      await this._pageProxySession.send("Input.dispatchKeyEvent", {
        type: "keyDown",
        modifiers: toModifiersMask(modifiers),
        windowsVirtualKeyCode: keyCode,
        code,
        key,
        text,
        unmodifiedText: text,
        autoRepeat,
        macCommands: commands,
        isKeypad: location2 === input.keypadLocation
      });
    }
    async keyup(modifiers, code, keyCode, keyCodeWithoutLocation, key, location2) {
      await this._pageProxySession.send("Input.dispatchKeyEvent", {
        type: "keyUp",
        modifiers: toModifiersMask(modifiers),
        key,
        windowsVirtualKeyCode: keyCode,
        code,
        isKeypad: location2 === input.keypadLocation
      });
    }
    async sendText(text) {
      await this._session.send("Page.insertText", {
        text
      });
    }
  }
  exports.RawKeyboardImpl = RawKeyboardImpl;

  class RawMouseImpl {
    constructor(session) {
      this._pageProxySession = undefined;
      this._session = undefined;
      this._page = undefined;
      this._pageProxySession = session;
    }
    setSession(session) {
      this._session = session;
    }
    async move(x, y, button, buttons, modifiers, forClick) {
      await this._pageProxySession.send("Input.dispatchMouseEvent", {
        type: "move",
        button,
        buttons: toButtonsMask(buttons),
        x,
        y,
        modifiers: toModifiersMask(modifiers)
      });
    }
    async down(x, y, button, buttons, modifiers, clickCount) {
      await this._pageProxySession.send("Input.dispatchMouseEvent", {
        type: "down",
        button,
        buttons: toButtonsMask(buttons),
        x,
        y,
        modifiers: toModifiersMask(modifiers),
        clickCount
      });
    }
    async up(x, y, button, buttons, modifiers, clickCount) {
      await this._pageProxySession.send("Input.dispatchMouseEvent", {
        type: "up",
        button,
        buttons: toButtonsMask(buttons),
        x,
        y,
        modifiers: toModifiersMask(modifiers),
        clickCount
      });
    }
    async wheel(x, y, buttons, modifiers, deltaX, deltaY) {
      var _this$_page;
      if ((_this$_page = this._page) !== null && _this$_page !== undefined && _this$_page._browserContext._options.isMobile)
        throw new Error("Mouse wheel is not supported in mobile WebKit");
      await this._session.send("Page.updateScrollingState");
      await this._page.mainFrame().evaluateExpression(`new Promise(requestAnimationFrame)`, {
        world: "utility"
      });
      await this._pageProxySession.send("Input.dispatchWheelEvent", {
        x,
        y,
        deltaX,
        deltaY,
        modifiers: toModifiersMask(modifiers)
      });
    }
    setPage(page) {
      this._page = page;
    }
  }
  exports.RawMouseImpl = RawMouseImpl;

  class RawTouchscreenImpl {
    constructor(session) {
      this._pageProxySession = undefined;
      this._pageProxySession = session;
    }
    async tap(x, y, modifiers) {
      await this._pageProxySession.send("Input.dispatchTapEvent", {
        x,
        y,
        modifiers: toModifiersMask(modifiers)
      });
    }
  }
  exports.RawTouchscreenImpl = RawTouchscreenImpl;
});

// node_modules/playwright-core/lib/server/webkit/wkInterceptableRequest.js
var require_wkInterceptableRequest = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var wkMillisToRoundishMillis = function(value) {
    if (value === -1000)
      return -1;
    if (value <= 0) {
      return -1;
    }
    return (value * 1000 | 0) / 1000;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WKRouteImpl = exports.WKInterceptableRequest = undefined;
  var network = _interopRequireWildcard(require_network2());
  var _utils = require_utils3();
  var errorReasons = {
    aborted: "Cancellation",
    accessdenied: "AccessControl",
    addressunreachable: "General",
    blockedbyclient: "Cancellation",
    blockedbyresponse: "General",
    connectionaborted: "General",
    connectionclosed: "General",
    connectionfailed: "General",
    connectionrefused: "General",
    connectionreset: "General",
    internetdisconnected: "General",
    namenotresolved: "General",
    timedout: "Timeout",
    failed: "General"
  };

  class WKInterceptableRequest {
    constructor(session, frame, event, redirectedFrom, documentId) {
      this._session = undefined;
      this.request = undefined;
      this._requestId = undefined;
      this._timestamp = undefined;
      this._wallTime = undefined;
      this._session = session;
      this._requestId = event.requestId;
      const resourceType = event.type ? event.type.toLowerCase() : redirectedFrom ? redirectedFrom.request.resourceType() : "other";
      let postDataBuffer = null;
      this._timestamp = event.timestamp;
      this._wallTime = event.walltime * 1000;
      if (event.request.postData)
        postDataBuffer = Buffer.from(event.request.postData, "base64");
      this.request = new network.Request(frame._page._browserContext, frame, null, (redirectedFrom === null || redirectedFrom === undefined ? undefined : redirectedFrom.request) || null, documentId, event.request.url, resourceType, event.request.method, postDataBuffer, (0, _utils.headersObjectToArray)(event.request.headers));
    }
    createResponse(responsePayload) {
      const getResponseBody = async () => {
        const response2 = await this._session.send("Network.getResponseBody", {
          requestId: this._requestId
        });
        return Buffer.from(response2.body, response2.base64Encoded ? "base64" : "utf8");
      };
      const timingPayload = responsePayload.timing;
      const timing = {
        startTime: this._wallTime,
        domainLookupStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.domainLookupStart) : -1,
        domainLookupEnd: timingPayload ? wkMillisToRoundishMillis(timingPayload.domainLookupEnd) : -1,
        connectStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.connectStart) : -1,
        secureConnectionStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.secureConnectionStart) : -1,
        connectEnd: timingPayload ? wkMillisToRoundishMillis(timingPayload.connectEnd) : -1,
        requestStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.requestStart) : -1,
        responseStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.responseStart) : -1
      };
      const setCookieSeparator = process.platform === "darwin" ? "," : "\n";
      const response = new network.Response(this.request, responsePayload.status, responsePayload.statusText, (0, _utils.headersObjectToArray)(responsePayload.headers, ",", setCookieSeparator), timing, getResponseBody, responsePayload.source === "service-worker");
      response.setRawResponseHeaders(null);
      response.setTransferSize(null);
      if (responsePayload.requestHeaders && Object.keys(responsePayload.requestHeaders).length) {
        const headers = {
          ...responsePayload.requestHeaders
        };
        if (!headers["host"])
          headers["Host"] = new URL(this.request.url()).host;
        this.request.setRawRequestHeaders((0, _utils.headersObjectToArray)(headers));
      } else {
        this.request.setRawRequestHeaders(null);
      }
      return response;
    }
  }
  exports.WKInterceptableRequest = WKInterceptableRequest;

  class WKRouteImpl {
    constructor(session, requestId) {
      this._session = undefined;
      this._requestId = undefined;
      this._session = session;
      this._requestId = requestId;
    }
    async abort(errorCode) {
      const errorType = errorReasons[errorCode];
      (0, _utils.assert)(errorType, "Unknown error code: " + errorCode);
      await this._session.sendMayFail("Network.interceptRequestWithError", {
        requestId: this._requestId,
        errorType
      });
    }
    async fulfill(response) {
      if (300 <= response.status && response.status < 400)
        throw new Error("Cannot fulfill with redirect status: " + response.status);
      let mimeType = response.isBase64 ? "application/octet-stream" : "text/plain";
      const headers = (0, _utils.headersArrayToObject)(response.headers, true);
      const contentType = headers["content-type"];
      if (contentType)
        mimeType = contentType.split(";")[0].trim();
      await this._session.sendMayFail("Network.interceptRequestWithResponse", {
        requestId: this._requestId,
        status: response.status,
        statusText: network.STATUS_TEXTS[String(response.status)],
        mimeType,
        headers,
        base64Encoded: response.isBase64,
        content: response.body
      });
    }
    async continue(request, overrides) {
      await this._session.sendMayFail("Network.interceptWithRequest", {
        requestId: this._requestId,
        url: overrides.url,
        method: overrides.method,
        headers: overrides.headers ? (0, _utils.headersArrayToObject)(overrides.headers, false) : undefined,
        postData: overrides.postData ? Buffer.from(overrides.postData).toString("base64") : undefined
      });
    }
  }
  exports.WKRouteImpl = WKRouteImpl;
});

// node_modules/playwright-core/lib/server/webkit/wkProvisionalPage.js
var require_wkProvisionalPage = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WKProvisionalPage = undefined;
  var _eventsHelper = require_eventsHelper();
  var _utils = require_utils3();

  class WKProvisionalPage {
    constructor(session, page) {
      this._session = undefined;
      this._wkPage = undefined;
      this._sessionListeners = [];
      this._mainFrameId = null;
      this.initializationPromise = undefined;
      this._session = session;
      this._wkPage = page;
      const overrideFrameId = (handler) => {
        return (payload) => {
          if (payload.frameId)
            payload.frameId = this._wkPage._page._frameManager.mainFrame()._id;
          handler(payload);
        };
      };
      const wkPage = this._wkPage;
      this._sessionListeners = [_eventsHelper.eventsHelper.addEventListener(session, "Network.requestWillBeSent", overrideFrameId((e) => wkPage._onRequestWillBeSent(session, e))), _eventsHelper.eventsHelper.addEventListener(session, "Network.requestIntercepted", overrideFrameId((e) => wkPage._onRequestIntercepted(session, e))), _eventsHelper.eventsHelper.addEventListener(session, "Network.responseReceived", overrideFrameId((e) => wkPage._onResponseReceived(session, e))), _eventsHelper.eventsHelper.addEventListener(session, "Network.loadingFinished", overrideFrameId((e) => wkPage._onLoadingFinished(e))), _eventsHelper.eventsHelper.addEventListener(session, "Network.loadingFailed", overrideFrameId((e) => wkPage._onLoadingFailed(session, e)))];
      this.initializationPromise = this._wkPage._initializeSession(session, true, ({
        frameTree
      }) => this._handleFrameTree(frameTree));
    }
    dispose() {
      _eventsHelper.eventsHelper.removeEventListeners(this._sessionListeners);
    }
    commit() {
      (0, _utils.assert)(this._mainFrameId);
      this._wkPage._onFrameAttached(this._mainFrameId, null);
    }
    _handleFrameTree(frameTree) {
      (0, _utils.assert)(!frameTree.frame.parentId);
      this._mainFrameId = frameTree.frame.id;
    }
  }
  exports.WKProvisionalPage = WKProvisionalPage;
});

// node_modules/playwright-core/lib/server/webkit/wkWorkers.js
var require_wkWorkers = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WKWorkers = undefined;
  var _eventsHelper = require_eventsHelper();
  var _page = require_page();
  var _wkConnection = require_wkConnection();
  var _wkExecutionContext = require_wkExecutionContext();

  class WKWorkers {
    constructor(page) {
      this._sessionListeners = [];
      this._page = undefined;
      this._workerSessions = new Map;
      this._page = page;
    }
    setSession(session) {
      _eventsHelper.eventsHelper.removeEventListeners(this._sessionListeners);
      this.clear();
      this._sessionListeners = [_eventsHelper.eventsHelper.addEventListener(session, "Worker.workerCreated", (event) => {
        const worker = new _page.Worker(this._page, event.url);
        const workerSession = new _wkConnection.WKSession(session.connection, event.workerId, (message) => {
          session.send("Worker.sendMessageToWorker", {
            workerId: event.workerId,
            message: JSON.stringify(message)
          }).catch((e) => {
            workerSession.dispatchMessage({
              id: message.id,
              error: {
                message: e.message
              }
            });
          });
        });
        this._workerSessions.set(event.workerId, workerSession);
        worker._createExecutionContext(new _wkExecutionContext.WKExecutionContext(workerSession, undefined));
        this._page._addWorker(event.workerId, worker);
        workerSession.on("Console.messageAdded", (event2) => this._onConsoleMessage(worker, event2));
        Promise.all([workerSession.send("Runtime.enable"), workerSession.send("Console.enable"), session.send("Worker.initialized", {
          workerId: event.workerId
        })]).catch((e) => {
          this._page._removeWorker(event.workerId);
        });
      }), _eventsHelper.eventsHelper.addEventListener(session, "Worker.dispatchMessageFromWorker", (event) => {
        const workerSession = this._workerSessions.get(event.workerId);
        if (!workerSession)
          return;
        workerSession.dispatchMessage(JSON.parse(event.message));
      }), _eventsHelper.eventsHelper.addEventListener(session, "Worker.workerTerminated", (event) => {
        const workerSession = this._workerSessions.get(event.workerId);
        if (!workerSession)
          return;
        workerSession.dispose();
        this._workerSessions.delete(event.workerId);
        this._page._removeWorker(event.workerId);
      })];
    }
    clear() {
      this._page._clearWorkers();
      this._workerSessions.clear();
    }
    async initializeSession(session) {
      await session.send("Worker.enable");
    }
    async _onConsoleMessage(worker, event) {
      const {
        type,
        level,
        text,
        parameters,
        url,
        line: lineNumber,
        column: columnNumber
      } = event.message;
      let derivedType = type || "";
      if (type === "log")
        derivedType = level;
      else if (type === "timing")
        derivedType = "timeEnd";
      const handles = (parameters || []).map((p) => {
        return worker._existingExecutionContext.createHandle(p);
      });
      const location2 = {
        url: url || "",
        lineNumber: (lineNumber || 1) - 1,
        columnNumber: (columnNumber || 1) - 1
      };
      this._page._addConsoleMessage(derivedType, handles, location2, handles.length ? undefined : text);
    }
  }
  exports.WKWorkers = WKWorkers;
});

// node_modules/playwright-core/lib/server/webkit/wkPage.js
var require_wkPage = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var parseRemoteAddress = function(value) {
    if (!value)
      return;
    try {
      const colon = value.lastIndexOf(":");
      const dot = value.lastIndexOf(".");
      if (dot < 0) {
        return {
          ipAddress: `[${value.slice(0, colon)}]`,
          port: +value.slice(colon + 1)
        };
      }
      if (colon > dot) {
        const [address, port] = value.split(":");
        return {
          ipAddress: address,
          port: +port
        };
      } else {
        const [address, port] = value.split(".");
        return {
          ipAddress: `[${address}]`,
          port: +port
        };
      }
    } catch (_) {
    }
  };
  var isLoadedSecurely = function(url, timing) {
    try {
      const u = new URL(url);
      if (u.protocol !== "https:" && u.protocol !== "wss:" && u.protocol !== "sftp:")
        return false;
      if (timing.secureConnectionStart === -1 && timing.connectStart !== -1)
        return false;
      return true;
    } catch (_) {
    }
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WKPage = undefined;
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _utilsBundle = require_utilsBundle();
  var _stackTrace = require_stackTrace();
  var _utils = require_utils3();
  var _hostPlatform = require_hostPlatform();
  var dialog = _interopRequireWildcard(require_dialog());
  var dom = _interopRequireWildcard(require_dom());
  var _eventsHelper = require_eventsHelper();
  var _helper = require_helper();
  var network = _interopRequireWildcard(require_network2());
  var _page = require_page();
  var _wkAccessibility = require_wkAccessibility();
  var _wkConnection = require_wkConnection();
  var _wkExecutionContext = require_wkExecutionContext();
  var _wkInput = require_wkInput();
  var _wkInterceptableRequest = require_wkInterceptableRequest();
  var _wkProvisionalPage = require_wkProvisionalPage();
  var _wkWorkers = require_wkWorkers();
  var _debugLogger = require_debugLogger();
  var _manualPromise = require_manualPromise();
  var _browserContext = require_browserContext();
  var _errors = require_errors();
  var UTILITY_WORLD_NAME = "__playwright_utility_world__";

  class WKPage {
    constructor(browserContext, pageProxySession, opener) {
      this.rawMouse = undefined;
      this.rawKeyboard = undefined;
      this.rawTouchscreen = undefined;
      this._session = undefined;
      this._provisionalPage = null;
      this._page = undefined;
      this._pagePromise = new _manualPromise.ManualPromise;
      this._pageProxySession = undefined;
      this._opener = undefined;
      this._requestIdToRequest = new Map;
      this._requestIdToRequestWillBeSentEvent = new Map;
      this._workers = undefined;
      this._contextIdToContext = undefined;
      this._sessionListeners = [];
      this._eventListeners = undefined;
      this._browserContext = undefined;
      this._initializedPage = null;
      this._firstNonInitialNavigationCommittedPromise = undefined;
      this._firstNonInitialNavigationCommittedFulfill = () => {
      };
      this._firstNonInitialNavigationCommittedReject = (e) => {
      };
      this._lastConsoleMessage = null;
      this._requestIdToResponseReceivedPayloadEvent = new Map;
      this._nextWindowOpenPopupFeatures = undefined;
      this._recordingVideoFile = null;
      this._screencastGeneration = 0;
      this._pageProxySession = pageProxySession;
      this._opener = opener;
      this.rawKeyboard = new _wkInput.RawKeyboardImpl(pageProxySession);
      this.rawMouse = new _wkInput.RawMouseImpl(pageProxySession);
      this.rawTouchscreen = new _wkInput.RawTouchscreenImpl(pageProxySession);
      this._contextIdToContext = new Map;
      this._page = new _page.Page(this, browserContext);
      this.rawMouse.setPage(this._page);
      this._workers = new _wkWorkers.WKWorkers(this._page);
      this._session = undefined;
      this._browserContext = browserContext;
      this._page.on(_page.Page.Events.FrameDetached, (frame) => this._removeContextsForFrame(frame, false));
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Target.targetCreated", this._onTargetCreated.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Target.targetDestroyed", this._onTargetDestroyed.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Target.dispatchMessageFromTarget", this._onDispatchMessageFromTarget.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Target.didCommitProvisionalTarget", this._onDidCommitProvisionalTarget.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Screencast.screencastFrame", this._onScreencastFrame.bind(this))];
      this._firstNonInitialNavigationCommittedPromise = new Promise((f, r) => {
        this._firstNonInitialNavigationCommittedFulfill = f;
        this._firstNonInitialNavigationCommittedReject = r;
      });
      if (opener && !browserContext._options.noDefaultViewport && opener._nextWindowOpenPopupFeatures) {
        const viewportSize = _helper.helper.getViewportSizeFromWindowFeatures(opener._nextWindowOpenPopupFeatures);
        opener._nextWindowOpenPopupFeatures = undefined;
        if (viewportSize)
          this._page._emulatedSize = {
            viewport: viewportSize,
            screen: viewportSize
          };
      }
    }
    potentiallyUninitializedPage() {
      return this._page;
    }
    async _initializePageProxySession() {
      if (this._page._browserContext.isSettingStorageState())
        return;
      const promises = [this._pageProxySession.send("Dialog.enable"), this._pageProxySession.send("Emulation.setActiveAndFocused", {
        active: true
      })];
      const contextOptions = this._browserContext._options;
      if (contextOptions.javaScriptEnabled === false)
        promises.push(this._pageProxySession.send("Emulation.setJavaScriptEnabled", {
          enabled: false
        }));
      promises.push(this._updateViewport());
      promises.push(this.updateHttpCredentials());
      if (this._browserContext._permissions.size) {
        for (const [key, value] of this._browserContext._permissions)
          promises.push(this._grantPermissions(key, value));
      }
      if (this._browserContext._options.recordVideo) {
        const outputFile = _path.default.join(this._browserContext._options.recordVideo.dir, (0, _utils.createGuid)() + ".webm");
        promises.push(this._browserContext._ensureVideosPath().then(() => {
          return this._startVideo({
            ...this._browserContext._options.recordVideo.size,
            outputFile
          });
        }));
      }
      await Promise.all(promises);
    }
    _setSession(session) {
      _eventsHelper.eventsHelper.removeEventListeners(this._sessionListeners);
      this._session = session;
      this.rawKeyboard.setSession(session);
      this.rawMouse.setSession(session);
      this._addSessionListeners();
      this._workers.setSession(session);
    }
    async _initializeSession(session, provisional, resourceTreeHandler) {
      await this._initializeSessionMayThrow(session, resourceTreeHandler).catch((e) => {
        if (provisional && session.isDisposed())
          return;
        if (this._session === session)
          throw e;
      });
    }
    async _initializeSessionMayThrow(session, resourceTreeHandler) {
      const [, frameTree] = await Promise.all([
        session.send("Page.enable"),
        session.send("Page.getResourceTree")
      ]);
      resourceTreeHandler(frameTree);
      const promises = [
        session.send("Runtime.enable"),
        session.send("Page.createUserWorld", {
          name: UTILITY_WORLD_NAME
        }).catch((_) => {
        }),
        session.send("Console.enable"),
        session.send("Network.enable"),
        this._workers.initializeSession(session)
      ];
      if (this._page.needsRequestInterception()) {
        promises.push(session.send("Network.setInterceptionEnabled", {
          enabled: true
        }));
        promises.push(session.send("Network.setResourceCachingDisabled", {
          disabled: true
        }));
        promises.push(session.send("Network.addInterception", {
          url: ".*",
          stage: "request",
          isRegex: true
        }));
      }
      if (this._page._browserContext.isSettingStorageState()) {
        await Promise.all(promises);
        return;
      }
      const contextOptions = this._browserContext._options;
      if (contextOptions.userAgent)
        promises.push(this.updateUserAgent());
      const emulatedMedia = this._page.emulatedMedia();
      if (emulatedMedia.media || emulatedMedia.colorScheme || emulatedMedia.reducedMotion || emulatedMedia.forcedColors)
        promises.push(WKPage._setEmulateMedia(session, emulatedMedia.media, emulatedMedia.colorScheme, emulatedMedia.reducedMotion, emulatedMedia.forcedColors));
      for (const binding of this._page.allBindings())
        promises.push(session.send("Runtime.addBinding", {
          name: binding.name
        }));
      const bootstrapScript = this._calculateBootstrapScript();
      if (bootstrapScript.length)
        promises.push(session.send("Page.setBootstrapScript", {
          source: bootstrapScript
        }));
      this._page.frames().map((frame) => frame.evaluateExpression(bootstrapScript).catch((e) => {
      }));
      if (contextOptions.bypassCSP)
        promises.push(session.send("Page.setBypassCSP", {
          enabled: true
        }));
      const emulatedSize = this._page.emulatedSize();
      if (emulatedSize) {
        promises.push(session.send("Page.setScreenSizeOverride", {
          width: emulatedSize.screen.width,
          height: emulatedSize.screen.height
        }));
      }
      promises.push(this.updateEmulateMedia());
      promises.push(session.send("Network.setExtraHTTPHeaders", {
        headers: (0, _utils.headersArrayToObject)(this._calculateExtraHTTPHeaders(), false)
      }));
      if (contextOptions.offline)
        promises.push(session.send("Network.setEmulateOfflineState", {
          offline: true
        }));
      promises.push(session.send("Page.setTouchEmulationEnabled", {
        enabled: !!contextOptions.hasTouch
      }));
      if (contextOptions.timezoneId) {
        promises.push(session.send("Page.setTimeZone", {
          timeZone: contextOptions.timezoneId
        }).catch((e) => {
          throw new Error(`Invalid timezone ID: ${contextOptions.timezoneId}`);
        }));
      }
      if (this._page.fileChooserIntercepted())
        promises.push(session.send("Page.setInterceptFileChooserDialog", {
          enabled: true
        }));
      promises.push(session.send("Page.overrideSetting", {
        setting: "DeviceOrientationEventEnabled",
        value: contextOptions.isMobile
      }));
      promises.push(session.send("Page.overrideSetting", {
        setting: "FullScreenEnabled",
        value: !contextOptions.isMobile
      }));
      promises.push(session.send("Page.overrideSetting", {
        setting: "NotificationsEnabled",
        value: !contextOptions.isMobile
      }));
      promises.push(session.send("Page.overrideSetting", {
        setting: "PointerLockEnabled",
        value: !contextOptions.isMobile
      }));
      promises.push(session.send("Page.overrideSetting", {
        setting: "InputTypeMonthEnabled",
        value: contextOptions.isMobile
      }));
      promises.push(session.send("Page.overrideSetting", {
        setting: "InputTypeWeekEnabled",
        value: contextOptions.isMobile
      }));
      await Promise.all(promises);
    }
    _onDidCommitProvisionalTarget(event) {
      const {
        oldTargetId,
        newTargetId
      } = event;
      (0, _utils.assert)(this._provisionalPage);
      (0, _utils.assert)(this._provisionalPage._session.sessionId === newTargetId, "Unknown new target: " + newTargetId);
      (0, _utils.assert)(this._session.sessionId === oldTargetId, "Unknown old target: " + oldTargetId);
      const newSession = this._provisionalPage._session;
      this._provisionalPage.commit();
      this._provisionalPage.dispose();
      this._provisionalPage = null;
      this._setSession(newSession);
    }
    _onTargetDestroyed(event) {
      const {
        targetId,
        crashed
      } = event;
      if (this._provisionalPage && this._provisionalPage._session.sessionId === targetId) {
        this._provisionalPage._session.dispose();
        this._provisionalPage.dispose();
        this._provisionalPage = null;
      } else if (this._session.sessionId === targetId) {
        this._session.dispose();
        _eventsHelper.eventsHelper.removeEventListeners(this._sessionListeners);
        if (crashed) {
          this._session.markAsCrashed();
          this._page._didCrash();
        }
      }
    }
    didClose() {
      this._pageProxySession.dispose();
      _eventsHelper.eventsHelper.removeEventListeners(this._sessionListeners);
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      if (this._session)
        this._session.dispose();
      if (this._provisionalPage) {
        this._provisionalPage._session.dispose();
        this._provisionalPage.dispose();
        this._provisionalPage = null;
      }
      this._firstNonInitialNavigationCommittedReject(new _errors.TargetClosedError);
      this._page._didClose();
    }
    dispatchMessageToSession(message) {
      this._pageProxySession.dispatchMessage(message);
    }
    handleProvisionalLoadFailed(event) {
      if (!this._initializedPage) {
        this._firstNonInitialNavigationCommittedReject(new Error("Initial load failed"));
        return;
      }
      if (!this._provisionalPage)
        return;
      let errorText = event.error;
      if (errorText.includes("cancelled"))
        errorText += "; maybe frame was detached?";
      this._page._frameManager.frameAbortedNavigation(this._page.mainFrame()._id, errorText, event.loaderId);
    }
    handleWindowOpen(event) {
      (0, _utils.debugAssert)(!this._nextWindowOpenPopupFeatures);
      this._nextWindowOpenPopupFeatures = event.windowFeatures;
    }
    async pageOrError() {
      return this._pagePromise;
    }
    async _onTargetCreated(event) {
      const {
        targetInfo
      } = event;
      const session = new _wkConnection.WKSession(this._pageProxySession.connection, targetInfo.targetId, (message) => {
        this._pageProxySession.send("Target.sendMessageToTarget", {
          message: JSON.stringify(message),
          targetId: targetInfo.targetId
        }).catch((e) => {
          session.dispatchMessage({
            id: message.id,
            error: {
              message: e.message
            }
          });
        });
      });
      (0, _utils.assert)(targetInfo.type === "page", "Only page targets are expected in WebKit, received: " + targetInfo.type);
      if (!targetInfo.isProvisional) {
        (0, _utils.assert)(!this._initializedPage);
        let pageOrError;
        try {
          this._setSession(session);
          await Promise.all([this._initializePageProxySession(), this._initializeSession(session, false, ({
            frameTree
          }) => this._handleFrameTree(frameTree))]);
          pageOrError = this._page;
        } catch (e) {
          pageOrError = e;
        }
        if (targetInfo.isPaused)
          this._pageProxySession.sendMayFail("Target.resume", {
            targetId: targetInfo.targetId
          });
        if (pageOrError instanceof _page.Page && this._page.mainFrame().url() === "") {
          try {
            await this._firstNonInitialNavigationCommittedPromise;
          } catch (e) {
            pageOrError = e;
          }
        } else {
          this._firstNonInitialNavigationCommittedPromise.catch(() => {
          });
        }
        await this._page.initOpener(this._opener);
        this._initializedPage = pageOrError instanceof _page.Page ? pageOrError : null;
        this._page.reportAsNew(pageOrError instanceof _page.Page ? undefined : pageOrError);
        this._pagePromise.resolve(pageOrError);
      } else {
        (0, _utils.assert)(targetInfo.isProvisional);
        (0, _utils.assert)(!this._provisionalPage);
        this._provisionalPage = new _wkProvisionalPage.WKProvisionalPage(session, this);
        if (targetInfo.isPaused) {
          this._provisionalPage.initializationPromise.then(() => {
            this._pageProxySession.sendMayFail("Target.resume", {
              targetId: targetInfo.targetId
            });
          });
        }
      }
    }
    _onDispatchMessageFromTarget(event) {
      const {
        targetId,
        message
      } = event;
      if (this._provisionalPage && this._provisionalPage._session.sessionId === targetId)
        this._provisionalPage._session.dispatchMessage(JSON.parse(message));
      else if (this._session.sessionId === targetId)
        this._session.dispatchMessage(JSON.parse(message));
      else
        throw new Error("Unknown target: " + targetId);
    }
    _addSessionListeners() {
      this._sessionListeners = [_eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameNavigated", (event) => this._onFrameNavigated(event.frame, false)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.navigatedWithinDocument", (event) => this._onFrameNavigatedWithinDocument(event.frameId, event.url)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameAttached", (event) => this._onFrameAttached(event.frameId, event.parentFrameId)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameDetached", (event) => this._onFrameDetached(event.frameId)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.willCheckNavigationPolicy", (event) => this._onWillCheckNavigationPolicy(event.frameId)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.didCheckNavigationPolicy", (event) => this._onDidCheckNavigationPolicy(event.frameId, event.cancel)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameScheduledNavigation", (event) => this._onFrameScheduledNavigation(event.frameId, event.delay, event.targetIsCurrentFrame)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.loadEventFired", (event) => this._page._frameManager.frameLifecycleEvent(event.frameId, "load")), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.domContentEventFired", (event) => this._page._frameManager.frameLifecycleEvent(event.frameId, "domcontentloaded")), _eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.executionContextCreated", (event) => this._onExecutionContextCreated(event.context)), _eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.bindingCalled", (event) => this._onBindingCalled(event.contextId, event.argument)), _eventsHelper.eventsHelper.addEventListener(this._session, "Console.messageAdded", (event) => this._onConsoleMessage(event)), _eventsHelper.eventsHelper.addEventListener(this._session, "Console.messageRepeatCountUpdated", (event) => this._onConsoleRepeatCountUpdated(event)), _eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Dialog.javascriptDialogOpening", (event) => this._onDialog(event)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.fileChooserOpened", (event) => this._onFileChooserOpened(event)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.requestWillBeSent", (e) => this._onRequestWillBeSent(this._session, e)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.requestIntercepted", (e) => this._onRequestIntercepted(this._session, e)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.responseReceived", (e) => this._onResponseReceived(this._session, e)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.loadingFinished", (e) => this._onLoadingFinished(e)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.loadingFailed", (e) => this._onLoadingFailed(this._session, e)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketCreated", (e) => this._page._frameManager.onWebSocketCreated(e.requestId, e.url)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketWillSendHandshakeRequest", (e) => this._page._frameManager.onWebSocketRequest(e.requestId)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketHandshakeResponseReceived", (e) => this._page._frameManager.onWebSocketResponse(e.requestId, e.response.status, e.response.statusText)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketFrameSent", (e) => e.response.payloadData && this._page._frameManager.onWebSocketFrameSent(e.requestId, e.response.opcode, e.response.payloadData)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketFrameReceived", (e) => e.response.payloadData && this._page._frameManager.webSocketFrameReceived(e.requestId, e.response.opcode, e.response.payloadData)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketClosed", (e) => this._page._frameManager.webSocketClosed(e.requestId)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketFrameError", (e) => this._page._frameManager.webSocketError(e.requestId, e.errorMessage))];
    }
    async _updateState(method, params) {
      await this._forAllSessions((session) => session.send(method, params).then());
    }
    async _forAllSessions(callback) {
      const sessions = [this._session];
      if (this._provisionalPage)
        sessions.push(this._provisionalPage._session);
      await Promise.all(sessions.map((session) => callback(session).catch((e) => {
      })));
    }
    _onWillCheckNavigationPolicy(frameId) {
      if (this._provisionalPage)
        return;
      this._page._frameManager.frameRequestedNavigation(frameId);
    }
    _onDidCheckNavigationPolicy(frameId, cancel) {
      if (!cancel)
        return;
      if (this._provisionalPage)
        return;
      this._page._frameManager.frameAbortedNavigation(frameId, "Navigation canceled by policy check");
    }
    _onFrameScheduledNavigation(frameId, delay, targetIsCurrentFrame) {
      if (targetIsCurrentFrame)
        this._page._frameManager.frameRequestedNavigation(frameId);
    }
    _handleFrameTree(frameTree) {
      this._onFrameAttached(frameTree.frame.id, frameTree.frame.parentId || null);
      this._onFrameNavigated(frameTree.frame, true);
      this._page._frameManager.frameLifecycleEvent(frameTree.frame.id, "domcontentloaded");
      this._page._frameManager.frameLifecycleEvent(frameTree.frame.id, "load");
      if (!frameTree.childFrames)
        return;
      for (const child of frameTree.childFrames)
        this._handleFrameTree(child);
    }
    _onFrameAttached(frameId, parentFrameId) {
      return this._page._frameManager.frameAttached(frameId, parentFrameId);
    }
    _onFrameNavigated(framePayload, initial) {
      const frame = this._page._frameManager.frame(framePayload.id);
      (0, _utils.assert)(frame);
      this._removeContextsForFrame(frame, true);
      if (!framePayload.parentId)
        this._workers.clear();
      this._page._frameManager.frameCommittedNewDocumentNavigation(framePayload.id, framePayload.url, framePayload.name || "", framePayload.loaderId, initial);
      if (!initial)
        this._firstNonInitialNavigationCommittedFulfill();
    }
    _onFrameNavigatedWithinDocument(frameId, url) {
      this._page._frameManager.frameCommittedSameDocumentNavigation(frameId, url);
    }
    _onFrameDetached(frameId) {
      this._page._frameManager.frameDetached(frameId);
    }
    _removeContextsForFrame(frame, notifyFrame) {
      for (const [contextId, context] of this._contextIdToContext) {
        if (context.frame === frame) {
          this._contextIdToContext.delete(contextId);
          if (notifyFrame)
            frame._contextDestroyed(context);
        }
      }
    }
    _onExecutionContextCreated(contextPayload) {
      if (this._contextIdToContext.has(contextPayload.id))
        return;
      const frame = this._page._frameManager.frame(contextPayload.frameId);
      if (!frame)
        return;
      const delegate = new _wkExecutionContext.WKExecutionContext(this._session, contextPayload.id);
      let worldName = null;
      if (contextPayload.type === "normal")
        worldName = "main";
      else if (contextPayload.type === "user" && contextPayload.name === UTILITY_WORLD_NAME)
        worldName = "utility";
      const context = new dom.FrameExecutionContext(delegate, frame, worldName);
      context[contextDelegateSymbol] = delegate;
      if (worldName)
        frame._contextCreated(worldName, context);
      this._contextIdToContext.set(contextPayload.id, context);
    }
    async _onBindingCalled(contextId, argument) {
      const pageOrError = await this.pageOrError();
      if (!(pageOrError instanceof Error)) {
        const context = this._contextIdToContext.get(contextId);
        if (context)
          await this._page._onBindingCalled(argument, context);
      }
    }
    async navigateFrame(frame, url, referrer) {
      if (this._pageProxySession.isDisposed())
        throw new _errors.TargetClosedError;
      const pageProxyId = this._pageProxySession.sessionId;
      const result = await this._pageProxySession.connection.browserSession.send("Playwright.navigate", {
        url,
        pageProxyId,
        frameId: frame._id,
        referrer
      });
      return {
        newDocumentId: result.loaderId
      };
    }
    _onConsoleMessage(event) {
      const {
        type,
        level,
        text,
        parameters,
        url,
        line: lineNumber,
        column: columnNumber,
        source
      } = event.message;
      if (level === "error" && source === "javascript") {
        const {
          name,
          message
        } = (0, _stackTrace.splitErrorMessage)(text);
        let stack;
        if (event.message.stackTrace) {
          stack = text + "\n" + event.message.stackTrace.callFrames.map((callFrame) => {
            return `    at ${callFrame.functionName || "unknown"} (${callFrame.url}:${callFrame.lineNumber}:${callFrame.columnNumber})`;
          }).join("\n");
        } else {
          stack = "";
        }
        this._lastConsoleMessage = null;
        const error = new Error(message);
        error.stack = stack;
        error.name = name;
        this._page.emitOnContextOnceInitialized(_browserContext.BrowserContext.Events.PageError, error, this._page);
        return;
      }
      let derivedType = type || "";
      if (type === "log")
        derivedType = level;
      else if (type === "timing")
        derivedType = "timeEnd";
      const handles = [];
      for (const p of parameters || []) {
        let context;
        if (p.objectId) {
          const objectId = JSON.parse(p.objectId);
          context = this._contextIdToContext.get(objectId.injectedScriptId);
        } else {
          context = [...this._contextIdToContext.values()].find((c) => c.frame === this._page.mainFrame());
        }
        if (!context)
          return;
        handles.push(context.createHandle(p));
      }
      this._lastConsoleMessage = {
        derivedType,
        text,
        handles,
        count: 0,
        location: {
          url: url || "",
          lineNumber: (lineNumber || 1) - 1,
          columnNumber: (columnNumber || 1) - 1
        }
      };
      this._onConsoleRepeatCountUpdated({
        count: 1
      });
    }
    _onConsoleRepeatCountUpdated(event) {
      if (this._lastConsoleMessage) {
        const {
          derivedType,
          text,
          handles,
          count,
          location: location2
        } = this._lastConsoleMessage;
        for (let i = count;i < event.count; ++i)
          this._page._addConsoleMessage(derivedType, handles, location2, handles.length ? undefined : text);
        this._lastConsoleMessage.count = event.count;
      }
    }
    _onDialog(event) {
      this._page.emitOnContext(_browserContext.BrowserContext.Events.Dialog, new dialog.Dialog(this._page, event.type, event.message, async (accept, promptText) => {
        await this._pageProxySession.send("Dialog.handleJavaScriptDialog", {
          accept,
          promptText
        });
      }, event.defaultPrompt));
    }
    async _onFileChooserOpened(event) {
      let handle;
      try {
        const context = await this._page._frameManager.frame(event.frameId)._mainContext();
        handle = context.createHandle(event.element).asElement();
      } catch (e) {
        return;
      }
      await this._page._onFileChooserOpened(handle);
    }
    static async _setEmulateMedia(session, mediaType, colorScheme, reducedMotion, forcedColors) {
      const promises = [];
      promises.push(session.send("Page.setEmulatedMedia", {
        media: mediaType === "no-override" ? "" : mediaType
      }));
      let appearance = undefined;
      switch (colorScheme) {
        case "light":
          appearance = "Light";
          break;
        case "dark":
          appearance = "Dark";
          break;
        case "no-override":
          appearance = undefined;
          break;
      }
      promises.push(session.send("Page.overrideUserPreference", {
        name: "PrefersColorScheme",
        value: appearance
      }));
      let reducedMotionWk = undefined;
      switch (reducedMotion) {
        case "reduce":
          reducedMotionWk = "Reduce";
          break;
        case "no-preference":
          reducedMotionWk = "NoPreference";
          break;
        case "no-override":
          reducedMotionWk = undefined;
          break;
      }
      promises.push(session.send("Page.overrideUserPreference", {
        name: "PrefersReducedMotion",
        value: reducedMotionWk
      }));
      let forcedColorsWk = undefined;
      switch (forcedColors) {
        case "active":
          forcedColorsWk = "Active";
          break;
        case "none":
          forcedColorsWk = "None";
          break;
        case "no-override":
          forcedColorsWk = undefined;
          break;
      }
      promises.push(session.send("Page.setForcedColors", {
        forcedColors: forcedColorsWk
      }));
      await Promise.all(promises);
    }
    async updateExtraHTTPHeaders() {
      await this._updateState("Network.setExtraHTTPHeaders", {
        headers: (0, _utils.headersArrayToObject)(this._calculateExtraHTTPHeaders(), false)
      });
    }
    _calculateExtraHTTPHeaders() {
      const locale = this._browserContext._options.locale;
      const headers = network.mergeHeaders([this._browserContext._options.extraHTTPHeaders, this._page.extraHTTPHeaders(), locale ? network.singleHeader("Accept-Language", locale) : undefined]);
      return headers;
    }
    async updateEmulateMedia() {
      const emulatedMedia = this._page.emulatedMedia();
      const colorScheme = emulatedMedia.colorScheme;
      const reducedMotion = emulatedMedia.reducedMotion;
      const forcedColors = emulatedMedia.forcedColors;
      await this._forAllSessions((session) => WKPage._setEmulateMedia(session, emulatedMedia.media, colorScheme, reducedMotion, forcedColors));
    }
    async updateEmulatedViewportSize() {
      this._browserContext._validateEmulatedViewport(this._page.viewportSize());
      await this._updateViewport();
    }
    async updateUserAgent() {
      const contextOptions = this._browserContext._options;
      this._updateState("Page.overrideUserAgent", {
        value: contextOptions.userAgent
      });
    }
    async bringToFront() {
      this._pageProxySession.send("Target.activate", {
        targetId: this._session.sessionId
      });
    }
    async _updateViewport() {
      const options = this._browserContext._options;
      const deviceSize = this._page.emulatedSize();
      if (deviceSize === null)
        return;
      const viewportSize = deviceSize.viewport;
      const screenSize = deviceSize.screen;
      const promises = [this._pageProxySession.send("Emulation.setDeviceMetricsOverride", {
        width: viewportSize.width,
        height: viewportSize.height,
        fixedLayout: !!options.isMobile,
        deviceScaleFactor: options.deviceScaleFactor || 1
      }), this._session.send("Page.setScreenSizeOverride", {
        width: screenSize.width,
        height: screenSize.height
      })];
      if (options.isMobile) {
        const angle = viewportSize.width > viewportSize.height ? 90 : 0;
        promises.push(this._session.send("Page.setOrientationOverride", {
          angle
        }));
      }
      await Promise.all(promises);
    }
    async updateRequestInterception() {
      const enabled = this._page.needsRequestInterception();
      await Promise.all([this._updateState("Network.setInterceptionEnabled", {
        enabled
      }), this._updateState("Network.setResourceCachingDisabled", {
        disabled: enabled
      }), this._updateState("Network.addInterception", {
        url: ".*",
        stage: "request",
        isRegex: true
      })]);
    }
    async updateOffline() {
      await this._updateState("Network.setEmulateOfflineState", {
        offline: !!this._browserContext._options.offline
      });
    }
    async updateHttpCredentials() {
      const credentials = this._browserContext._options.httpCredentials || {
        username: "",
        password: "",
        origin: ""
      };
      await this._pageProxySession.send("Emulation.setAuthCredentials", {
        username: credentials.username,
        password: credentials.password,
        origin: credentials.origin
      });
    }
    async updateFileChooserInterception() {
      const enabled = this._page.fileChooserIntercepted();
      await this._session.send("Page.setInterceptFileChooserDialog", {
        enabled
      }).catch(() => {
      });
    }
    async reload() {
      await this._session.send("Page.reload");
    }
    goBack() {
      return this._session.send("Page.goBack").then(() => true).catch((error) => {
        if (error instanceof Error && error.message.includes(`Protocol error (Page.goBack): Failed to go`))
          return false;
        throw error;
      });
    }
    goForward() {
      return this._session.send("Page.goForward").then(() => true).catch((error) => {
        if (error instanceof Error && error.message.includes(`Protocol error (Page.goForward): Failed to go`))
          return false;
        throw error;
      });
    }
    async exposeBinding(binding) {
      this._session.send("Runtime.addBinding", {
        name: binding.name
      });
      await this._updateBootstrapScript();
      await Promise.all(this._page.frames().map((frame) => frame.evaluateExpression(binding.source).catch((e) => {
      })));
    }
    async removeExposedBindings() {
      await this._updateBootstrapScript();
    }
    async addInitScript(script) {
      await this._updateBootstrapScript();
    }
    async removeInitScripts() {
      await this._updateBootstrapScript();
    }
    _calculateBootstrapScript() {
      const scripts = [];
      if (!this._page.context()._options.isMobile) {
        scripts.push("delete window.orientation");
        scripts.push("delete window.ondevicemotion");
        scripts.push("delete window.ondeviceorientation");
      }
      scripts.push('if (!window.safari) window.safari = { pushNotification: { toString() { return "[object SafariRemoteNotification]"; } } };');
      scripts.push("if (!window.GestureEvent) window.GestureEvent = function GestureEvent() {};");
      for (const binding of this._page.allBindings())
        scripts.push(binding.source);
      scripts.push(...this._browserContext.initScripts);
      scripts.push(...this._page.initScripts);
      return scripts.join(";\n");
    }
    async _updateBootstrapScript() {
      await this._updateState("Page.setBootstrapScript", {
        source: this._calculateBootstrapScript()
      });
    }
    async closePage(runBeforeUnload) {
      await this._stopVideo();
      await this._pageProxySession.sendMayFail("Target.close", {
        targetId: this._session.sessionId,
        runBeforeUnload
      });
    }
    async setBackgroundColor(color) {
      await this._session.send("Page.setDefaultBackgroundColorOverride", {
        color
      });
    }
    _toolbarHeight() {
      var _this$_page$_browserC;
      if ((_this$_page$_browserC = this._page._browserContext._browser) !== null && _this$_page$_browserC !== undefined && _this$_page$_browserC.options.headful)
        return _hostPlatform.hostPlatform === "mac10.15" ? 55 : 59;
      return 0;
    }
    async _startVideo(options) {
      (0, _utils.assert)(!this._recordingVideoFile);
      const {
        screencastId
      } = await this._pageProxySession.send("Screencast.startVideo", {
        file: options.outputFile,
        width: options.width,
        height: options.height,
        toolbarHeight: this._toolbarHeight()
      });
      this._recordingVideoFile = options.outputFile;
      this._browserContext._browser._videoStarted(this._browserContext, screencastId, options.outputFile, this.pageOrError());
    }
    async _stopVideo() {
      if (!this._recordingVideoFile)
        return;
      await this._pageProxySession.sendMayFail("Screencast.stopVideo");
      this._recordingVideoFile = null;
    }
    validateScreenshotDimension(side, omitDeviceScaleFactor) {
      if (process.platform === "darwin")
        return;
      if (!omitDeviceScaleFactor && this._page._browserContext._options.deviceScaleFactor)
        side = Math.ceil(side * this._page._browserContext._options.deviceScaleFactor);
      if (side > 32767)
        throw new Error("Cannot take screenshot larger than 32767 pixels on any dimension");
    }
    async takeScreenshot(progress2, format, documentRect, viewportRect, quality, fitsViewport, scale) {
      const rect = documentRect || viewportRect;
      const omitDeviceScaleFactor = scale === "css";
      this.validateScreenshotDimension(rect.width, omitDeviceScaleFactor);
      this.validateScreenshotDimension(rect.height, omitDeviceScaleFactor);
      const result = await this._session.send("Page.snapshotRect", {
        ...rect,
        coordinateSystem: documentRect ? "Page" : "Viewport",
        omitDeviceScaleFactor
      });
      const prefix = "data:image/png;base64,";
      let buffer = Buffer.from(result.dataURL.substr(prefix.length), "base64");
      if (format === "jpeg")
        buffer = _utilsBundle.jpegjs.encode(_utilsBundle.PNG.sync.read(buffer), quality).data;
      return buffer;
    }
    async getContentFrame(handle) {
      const nodeInfo = await this._session.send("DOM.describeNode", {
        objectId: handle._objectId
      });
      if (!nodeInfo.contentFrameId)
        return null;
      return this._page._frameManager.frame(nodeInfo.contentFrameId);
    }
    async getOwnerFrame(handle) {
      if (!handle._objectId)
        return null;
      const nodeInfo = await this._session.send("DOM.describeNode", {
        objectId: handle._objectId
      });
      return nodeInfo.ownerFrameId || null;
    }
    isElementHandle(remoteObject) {
      return remoteObject.subtype === "node";
    }
    async getBoundingBox(handle) {
      const quads = await this.getContentQuads(handle);
      if (!quads || !quads.length)
        return null;
      let minX = Infinity;
      let maxX = (-Infinity);
      let minY = Infinity;
      let maxY = (-Infinity);
      for (const quad of quads) {
        for (const point of quad) {
          minX = Math.min(minX, point.x);
          maxX = Math.max(maxX, point.x);
          minY = Math.min(minY, point.y);
          maxY = Math.max(maxY, point.y);
        }
      }
      return {
        x: minX,
        y: minY,
        width: maxX - minX,
        height: maxY - minY
      };
    }
    async scrollRectIntoViewIfNeeded(handle, rect) {
      return await this._session.send("DOM.scrollIntoViewIfNeeded", {
        objectId: handle._objectId,
        rect
      }).then(() => "done").catch((e) => {
        if (e instanceof Error && e.message.includes("Node does not have a layout object"))
          return "error:notvisible";
        if (e instanceof Error && e.message.includes("Node is detached from document"))
          return "error:notconnected";
        throw e;
      });
    }
    async setScreencastOptions(options) {
      if (options) {
        const so = {
          ...options,
          toolbarHeight: this._toolbarHeight()
        };
        const {
          generation
        } = await this._pageProxySession.send("Screencast.startScreencast", so);
        this._screencastGeneration = generation;
      } else {
        await this._pageProxySession.send("Screencast.stopScreencast");
      }
    }
    _onScreencastFrame(event) {
      const generation = this._screencastGeneration;
      this._page.throttleScreencastFrameAck(() => {
        this._pageProxySession.send("Screencast.screencastFrameAck", {
          generation
        }).catch((e) => _debugLogger.debugLogger.log("error", e));
      });
      const buffer = Buffer.from(event.data, "base64");
      this._page.emit(_page.Page.Events.ScreencastFrame, {
        buffer,
        width: event.deviceWidth,
        height: event.deviceHeight
      });
    }
    rafCountForStablePosition() {
      return process.platform === "win32" ? 5 : 1;
    }
    async getContentQuads(handle) {
      const result = await this._session.sendMayFail("DOM.getContentQuads", {
        objectId: handle._objectId
      });
      if (!result)
        return null;
      return result.quads.map((quad) => [{
        x: quad[0],
        y: quad[1]
      }, {
        x: quad[2],
        y: quad[3]
      }, {
        x: quad[4],
        y: quad[5]
      }, {
        x: quad[6],
        y: quad[7]
      }]);
    }
    async setInputFiles(handle, files) {
      const objectId = handle._objectId;
      const protocolFiles = files.map((file) => ({
        name: file.name,
        type: file.mimeType,
        data: file.buffer
      }));
      await this._session.send("DOM.setInputFiles", {
        objectId,
        files: protocolFiles
      });
    }
    async setInputFilePaths(handle, paths) {
      const pageProxyId = this._pageProxySession.sessionId;
      const objectId = handle._objectId;
      await Promise.all([this._pageProxySession.connection.browserSession.send("Playwright.grantFileReadAccess", {
        pageProxyId,
        paths
      }), this._session.send("DOM.setInputFiles", {
        objectId,
        paths
      })]);
    }
    async adoptElementHandle(handle, to) {
      const result = await this._session.sendMayFail("DOM.resolveNode", {
        objectId: handle._objectId,
        executionContextId: to[contextDelegateSymbol]._contextId
      });
      if (!result || result.object.subtype === "null")
        throw new Error(dom.kUnableToAdoptErrorMessage);
      return to.createHandle(result.object);
    }
    async getAccessibilityTree(needle) {
      return (0, _wkAccessibility.getAccessibilityTree)(this._session, needle);
    }
    async inputActionEpilogue() {
    }
    async resetForReuse() {
    }
    async getFrameElement(frame) {
      const parent = frame.parentFrame();
      if (!parent)
        throw new Error("Frame has been detached.");
      const context = await parent._mainContext();
      const result = await this._session.send("DOM.resolveNode", {
        frameId: frame._id,
        executionContextId: context[contextDelegateSymbol]._contextId
      });
      if (!result || result.object.subtype === "null")
        throw new Error("Frame has been detached.");
      return context.createHandle(result.object);
    }
    _onRequestWillBeSent(session, event) {
      if (event.request.url.startsWith("data:"))
        return;
      if (this._page.needsRequestInterception() && !event.redirectResponse)
        this._requestIdToRequestWillBeSentEvent.set(event.requestId, event);
      else
        this._onRequest(session, event, false);
    }
    _onRequest(session, event, intercepted) {
      let redirectedFrom = null;
      if (event.redirectResponse) {
        const request2 = this._requestIdToRequest.get(event.requestId);
        if (request2) {
          this._handleRequestRedirect(request2, event.redirectResponse, event.timestamp);
          redirectedFrom = request2;
        }
      }
      const frame = redirectedFrom ? redirectedFrom.request.frame() : this._page._frameManager.frame(event.frameId);
      if (!frame)
        return;
      const isNavigationRequest = event.type === "Document";
      const documentId = isNavigationRequest ? event.loaderId : undefined;
      const request = new _wkInterceptableRequest.WKInterceptableRequest(session, frame, event, redirectedFrom, documentId);
      let route;
      if (intercepted) {
        route = new _wkInterceptableRequest.WKRouteImpl(session, request._requestId);
        request.request.setRawRequestHeaders(null);
      }
      this._requestIdToRequest.set(event.requestId, request);
      this._page._frameManager.requestStarted(request.request, route);
    }
    _handleRequestRedirect(request, responsePayload, timestamp) {
      const response = request.createResponse(responsePayload);
      response._securityDetailsFinished();
      response._serverAddrFinished();
      response.setResponseHeadersSize(null);
      response.setEncodedBodySize(null);
      response._requestFinished(responsePayload.timing ? _helper.helper.secondsToRoundishMillis(timestamp - request._timestamp) : -1);
      this._requestIdToRequest.delete(request._requestId);
      this._page._frameManager.requestReceivedResponse(response);
      this._page._frameManager.reportRequestFinished(request.request, response);
    }
    _onRequestIntercepted(session, event) {
      const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
      if (!requestWillBeSentEvent) {
        session.sendMayFail("Network.interceptWithRequest", {
          requestId: event.requestId
        });
        return;
      }
      this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
      this._onRequest(session, requestWillBeSentEvent, true);
    }
    _onResponseReceived(session, event) {
      const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
      if (requestWillBeSentEvent) {
        this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
        this._onRequest(session, requestWillBeSentEvent, false);
      }
      const request = this._requestIdToRequest.get(event.requestId);
      if (!request)
        return;
      this._requestIdToResponseReceivedPayloadEvent.set(request._requestId, event);
      const response = request.createResponse(event.response);
      this._page._frameManager.requestReceivedResponse(response);
      if (response.status() === 204) {
        this._onLoadingFailed(session, {
          requestId: event.requestId,
          errorText: "Aborted: 204 No Content",
          timestamp: event.timestamp
        });
      }
    }
    _onLoadingFinished(event) {
      const request = this._requestIdToRequest.get(event.requestId);
      if (!request)
        return;
      const response = request.request._existingResponse();
      if (response) {
        var _event$metrics, _event$metrics2, _responseReceivedPayl, _responseReceivedPayl2, _responseReceivedPayl3, _event$metrics3, _event$metrics$respon, _event$metrics4, _event$metrics$respon2, _event$metrics5;
        const responseReceivedPayload = this._requestIdToResponseReceivedPayloadEvent.get(request._requestId);
        response._serverAddrFinished(parseRemoteAddress(event === null || event === undefined || (_event$metrics = event.metrics) === null || _event$metrics === undefined ? undefined : _event$metrics.remoteAddress));
        response._securityDetailsFinished({
          protocol: isLoadedSecurely(response.url(), response.timing()) ? (_event$metrics2 = event.metrics) === null || _event$metrics2 === undefined || (_event$metrics2 = _event$metrics2.securityConnection) === null || _event$metrics2 === undefined ? undefined : _event$metrics2.protocol : undefined,
          subjectName: responseReceivedPayload === null || responseReceivedPayload === undefined || (_responseReceivedPayl = responseReceivedPayload.response.security) === null || _responseReceivedPayl === undefined || (_responseReceivedPayl = _responseReceivedPayl.certificate) === null || _responseReceivedPayl === undefined ? undefined : _responseReceivedPayl.subject,
          validFrom: responseReceivedPayload === null || responseReceivedPayload === undefined || (_responseReceivedPayl2 = responseReceivedPayload.response.security) === null || _responseReceivedPayl2 === undefined || (_responseReceivedPayl2 = _responseReceivedPayl2.certificate) === null || _responseReceivedPayl2 === undefined ? undefined : _responseReceivedPayl2.validFrom,
          validTo: responseReceivedPayload === null || responseReceivedPayload === undefined || (_responseReceivedPayl3 = responseReceivedPayload.response.security) === null || _responseReceivedPayl3 === undefined || (_responseReceivedPayl3 = _responseReceivedPayl3.certificate) === null || _responseReceivedPayl3 === undefined ? undefined : _responseReceivedPayl3.validUntil
        });
        if ((_event$metrics3 = event.metrics) !== null && _event$metrics3 !== undefined && _event$metrics3.protocol)
          response._setHttpVersion(event.metrics.protocol);
        response.setEncodedBodySize((_event$metrics$respon = (_event$metrics4 = event.metrics) === null || _event$metrics4 === undefined ? undefined : _event$metrics4.responseBodyBytesReceived) !== null && _event$metrics$respon !== undefined ? _event$metrics$respon : null);
        response.setResponseHeadersSize((_event$metrics$respon2 = (_event$metrics5 = event.metrics) === null || _event$metrics5 === undefined ? undefined : _event$metrics5.responseHeaderBytesReceived) !== null && _event$metrics$respon2 !== undefined ? _event$metrics$respon2 : null);
        response._requestFinished(_helper.helper.secondsToRoundishMillis(event.timestamp - request._timestamp));
      } else {
        request.request.setRawRequestHeaders(null);
      }
      this._requestIdToResponseReceivedPayloadEvent.delete(request._requestId);
      this._requestIdToRequest.delete(request._requestId);
      this._page._frameManager.reportRequestFinished(request.request, response);
    }
    _onLoadingFailed(session, event) {
      const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
      if (requestWillBeSentEvent) {
        this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
        this._onRequest(session, requestWillBeSentEvent, false);
      }
      const request = this._requestIdToRequest.get(event.requestId);
      if (!request)
        return;
      const response = request.request._existingResponse();
      if (response) {
        response._serverAddrFinished();
        response._securityDetailsFinished();
        response.setResponseHeadersSize(null);
        response.setEncodedBodySize(null);
        response._requestFinished(_helper.helper.secondsToRoundishMillis(event.timestamp - request._timestamp));
      } else {
        request.request.setRawRequestHeaders(null);
      }
      this._requestIdToRequest.delete(request._requestId);
      request.request._setFailureText(event.errorText);
      this._page._frameManager.requestFailed(request.request, event.errorText.includes("cancelled"));
    }
    async _grantPermissions(origin, permissions) {
      const webPermissionToProtocol = new Map([["geolocation", "geolocation"], ["clipboard-read", "clipboard-read"]]);
      const filtered = permissions.map((permission) => {
        const protocolPermission = webPermissionToProtocol.get(permission);
        if (!protocolPermission)
          throw new Error("Unknown permission: " + permission);
        return protocolPermission;
      });
      await this._pageProxySession.send("Emulation.grantPermissions", {
        origin,
        permissions: filtered
      });
    }
    async _clearPermissions() {
      await this._pageProxySession.send("Emulation.resetPermissions", {});
    }
    shouldToggleStyleSheetToSyncAnimations() {
      return true;
    }
  }
  exports.WKPage = WKPage;
  var contextDelegateSymbol = Symbol("delegate");
});

// node_modules/playwright-core/lib/server/webkit/wkBrowser.js
var require_wkBrowser = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WKBrowserContext = exports.WKBrowser = undefined;
  var _browser = require_browser5();
  var _browserContext = require_browserContext();
  var _utils = require_utils3();
  var _eventsHelper = require_eventsHelper();
  var network = _interopRequireWildcard(require_network2());
  var _wkConnection = require_wkConnection();
  var _wkPage = require_wkPage();
  var _errors = require_errors();
  var DEFAULT_USER_AGENT = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4 Safari/605.1.15";
  var BROWSER_VERSION = "17.4";

  class WKBrowser extends _browser.Browser {
    static async connect(parent, transport, options) {
      const browser = new WKBrowser(parent, transport, options);
      if (options.__testHookOnConnectToBrowser)
        await options.__testHookOnConnectToBrowser();
      const promises = [browser._browserSession.send("Playwright.enable")];
      if (options.persistent) {
        var _options$persistent;
        (_options$persistent = options.persistent).userAgent || (_options$persistent.userAgent = DEFAULT_USER_AGENT);
        browser._defaultContext = new WKBrowserContext(browser, undefined, options.persistent);
        promises.push(browser._defaultContext._initialize());
      }
      await Promise.all(promises);
      return browser;
    }
    constructor(parent, transport, options) {
      super(parent, options);
      this._connection = undefined;
      this._browserSession = undefined;
      this._contexts = new Map;
      this._wkPages = new Map;
      this._eventListeners = undefined;
      this._connection = new _wkConnection.WKConnection(transport, this._onDisconnect.bind(this), options.protocolLogger, options.browserLogsCollector);
      this._browserSession = this._connection.browserSession;
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(this._browserSession, "Playwright.pageProxyCreated", this._onPageProxyCreated.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._browserSession, "Playwright.pageProxyDestroyed", this._onPageProxyDestroyed.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._browserSession, "Playwright.provisionalLoadFailed", (event) => this._onProvisionalLoadFailed(event)), _eventsHelper.eventsHelper.addEventListener(this._browserSession, "Playwright.windowOpen", (event) => this._onWindowOpen(event)), _eventsHelper.eventsHelper.addEventListener(this._browserSession, "Playwright.downloadCreated", this._onDownloadCreated.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._browserSession, "Playwright.downloadFilenameSuggested", this._onDownloadFilenameSuggested.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._browserSession, "Playwright.downloadFinished", this._onDownloadFinished.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._browserSession, "Playwright.screencastFinished", this._onScreencastFinished.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._browserSession, _wkConnection.kPageProxyMessageReceived, this._onPageProxyMessageReceived.bind(this))];
    }
    _onDisconnect() {
      for (const wkPage of this._wkPages.values())
        wkPage.didClose();
      this._wkPages.clear();
      for (const video of this._idToVideo.values())
        video.artifact.reportFinished(new _errors.TargetClosedError);
      this._idToVideo.clear();
      this._didClose();
    }
    async doCreateNewContext(options) {
      const createOptions = options.proxy ? {
        proxyServer: process.platform === "win32" ? options.proxy.server.replace(/^socks5:\/\//, "socks5h://") : options.proxy.server,
        proxyBypassList: options.proxy.bypass
      } : undefined;
      const {
        browserContextId
      } = await this._browserSession.send("Playwright.createContext", createOptions);
      options.userAgent = options.userAgent || DEFAULT_USER_AGENT;
      const context = new WKBrowserContext(this, browserContextId, options);
      await context._initialize();
      this._contexts.set(browserContextId, context);
      return context;
    }
    contexts() {
      return Array.from(this._contexts.values());
    }
    version() {
      return BROWSER_VERSION;
    }
    userAgent() {
      return DEFAULT_USER_AGENT;
    }
    _onDownloadCreated(payload) {
      const page = this._wkPages.get(payload.pageProxyId);
      if (!page)
        return;
      page._page._frameManager.frameAbortedNavigation(payload.frameId, "Download is starting");
      let originPage = page._initializedPage;
      if (!originPage) {
        page._firstNonInitialNavigationCommittedReject(new Error("Starting new page download"));
        if (page._opener)
          originPage = page._opener._initializedPage;
      }
      if (!originPage)
        return;
      this._downloadCreated(originPage, payload.uuid, payload.url);
    }
    _onDownloadFilenameSuggested(payload) {
      this._downloadFilenameSuggested(payload.uuid, payload.suggestedFilename);
    }
    _onDownloadFinished(payload) {
      this._downloadFinished(payload.uuid, payload.error);
    }
    _onScreencastFinished(payload) {
      var _this$_takeVideo;
      (_this$_takeVideo = this._takeVideo(payload.screencastId)) === null || _this$_takeVideo === undefined || _this$_takeVideo.reportFinished();
    }
    _onPageProxyCreated(event) {
      const pageProxyId = event.pageProxyId;
      let context = null;
      if (event.browserContextId) {
        context = this._contexts.get(event.browserContextId) || null;
      }
      if (!context)
        context = this._defaultContext;
      if (!context)
        return;
      const pageProxySession = new _wkConnection.WKSession(this._connection, pageProxyId, (message) => {
        this._connection.rawSend({
          ...message,
          pageProxyId
        });
      });
      const opener = event.openerId ? this._wkPages.get(event.openerId) : undefined;
      const wkPage = new _wkPage.WKPage(context, pageProxySession, opener || null);
      this._wkPages.set(pageProxyId, wkPage);
    }
    _onPageProxyDestroyed(event) {
      const pageProxyId = event.pageProxyId;
      const wkPage = this._wkPages.get(pageProxyId);
      if (!wkPage)
        return;
      wkPage.didClose();
      this._wkPages.delete(pageProxyId);
    }
    _onPageProxyMessageReceived(event) {
      const wkPage = this._wkPages.get(event.pageProxyId);
      if (!wkPage)
        return;
      wkPage.dispatchMessageToSession(event.message);
    }
    _onProvisionalLoadFailed(event) {
      const wkPage = this._wkPages.get(event.pageProxyId);
      if (!wkPage)
        return;
      wkPage.handleProvisionalLoadFailed(event);
    }
    _onWindowOpen(event) {
      const wkPage = this._wkPages.get(event.pageProxyId);
      if (!wkPage)
        return;
      wkPage.handleWindowOpen(event);
    }
    isConnected() {
      return !this._connection.isClosed();
    }
  }
  exports.WKBrowser = WKBrowser;

  class WKBrowserContext extends _browserContext.BrowserContext {
    constructor(browser, browserContextId, options) {
      super(browser, options, browserContextId);
      this._validateEmulatedViewport(options.viewport);
      this._authenticateProxyViaHeader();
    }
    async _initialize() {
      (0, _utils.assert)(!this._wkPages().length);
      const browserContextId = this._browserContextId;
      const promises = [super._initialize()];
      promises.push(this._browser._browserSession.send("Playwright.setDownloadBehavior", {
        behavior: this._options.acceptDownloads === "accept" ? "allow" : "deny",
        downloadPath: this._browser.options.downloadsPath,
        browserContextId
      }));
      if (this._options.ignoreHTTPSErrors)
        promises.push(this._browser._browserSession.send("Playwright.setIgnoreCertificateErrors", {
          browserContextId,
          ignore: true
        }));
      if (this._options.locale)
        promises.push(this._browser._browserSession.send("Playwright.setLanguages", {
          browserContextId,
          languages: [this._options.locale]
        }));
      if (this._options.geolocation)
        promises.push(this.setGeolocation(this._options.geolocation));
      if (this._options.offline)
        promises.push(this.setOffline(this._options.offline));
      if (this._options.httpCredentials)
        promises.push(this.setHTTPCredentials(this._options.httpCredentials));
      await Promise.all(promises);
    }
    _wkPages() {
      return Array.from(this._browser._wkPages.values()).filter((wkPage) => wkPage._browserContext === this);
    }
    pages() {
      return this._wkPages().map((wkPage) => wkPage._initializedPage).filter((pageOrNull) => !!pageOrNull);
    }
    async newPageDelegate() {
      (0, _browserContext.assertBrowserContextIsNotOwned)(this);
      const {
        pageProxyId
      } = await this._browser._browserSession.send("Playwright.createPage", {
        browserContextId: this._browserContextId
      });
      return this._browser._wkPages.get(pageProxyId);
    }
    async doGetCookies(urls) {
      const {
        cookies
      } = await this._browser._browserSession.send("Playwright.getAllCookies", {
        browserContextId: this._browserContextId
      });
      return network.filterCookies(cookies.map((c) => {
        const copy = {
          ...c
        };
        copy.expires = c.expires === -1 ? -1 : c.expires / 1000;
        delete copy.session;
        return copy;
      }), urls);
    }
    async addCookies(cookies) {
      const cc = network.rewriteCookies(cookies).map((c) => ({
        ...c,
        session: c.expires === -1 || c.expires === undefined,
        expires: c.expires && c.expires !== -1 ? c.expires * 1000 : c.expires
      }));
      await this._browser._browserSession.send("Playwright.setCookies", {
        cookies: cc,
        browserContextId: this._browserContextId
      });
    }
    async doClearCookies() {
      await this._browser._browserSession.send("Playwright.deleteAllCookies", {
        browserContextId: this._browserContextId
      });
    }
    async doGrantPermissions(origin, permissions) {
      await Promise.all(this.pages().map((page) => page._delegate._grantPermissions(origin, permissions)));
    }
    async doClearPermissions() {
      await Promise.all(this.pages().map((page) => page._delegate._clearPermissions()));
    }
    async setGeolocation(geolocation) {
      (0, _browserContext.verifyGeolocation)(geolocation);
      this._options.geolocation = geolocation;
      const payload = geolocation ? {
        ...geolocation,
        timestamp: Date.now()
      } : undefined;
      await this._browser._browserSession.send("Playwright.setGeolocationOverride", {
        browserContextId: this._browserContextId,
        geolocation: payload
      });
    }
    async setExtraHTTPHeaders(headers) {
      this._options.extraHTTPHeaders = headers;
      for (const page of this.pages())
        await page._delegate.updateExtraHTTPHeaders();
    }
    async setUserAgent(userAgent) {
      this._options.userAgent = userAgent;
      for (const page of this.pages())
        await page._delegate.updateUserAgent();
    }
    async setOffline(offline) {
      this._options.offline = offline;
      for (const page of this.pages())
        await page._delegate.updateOffline();
    }
    async doSetHTTPCredentials(httpCredentials) {
      this._options.httpCredentials = httpCredentials;
      for (const page of this.pages())
        await page._delegate.updateHttpCredentials();
    }
    async doAddInitScript(source) {
      for (const page of this.pages())
        await page._delegate._updateBootstrapScript();
    }
    async doRemoveInitScripts() {
      for (const page of this.pages())
        await page._delegate._updateBootstrapScript();
    }
    async doExposeBinding(binding) {
      for (const page of this.pages())
        await page._delegate.exposeBinding(binding);
    }
    async doRemoveExposedBindings() {
      for (const page of this.pages())
        await page._delegate.removeExposedBindings();
    }
    async doUpdateRequestInterception() {
      for (const page of this.pages())
        await page._delegate.updateRequestInterception();
    }
    onClosePersistent() {
    }
    async clearCache() {
      await this._browser._browserSession.send("Playwright.clearMemoryCache", {
        browserContextId: this._browserContextId
      });
    }
    async doClose(reason) {
      if (!this._browserContextId) {
        await Promise.all(this._wkPages().map((wkPage) => wkPage._stopVideo()));
        await this._browser.close({
          reason
        });
      } else {
        await this._browser._browserSession.send("Playwright.deleteContext", {
          browserContextId: this._browserContextId
        });
        this._browser._contexts.delete(this._browserContextId);
      }
    }
    async cancelDownload(uuid) {
      await this._browser._browserSession.send("Playwright.cancelDownload", {
        uuid
      });
    }
    _validateEmulatedViewport(viewportSize) {
      if (!viewportSize)
        return;
      if (process.platform === "win32" && this._browser.options.headful && (viewportSize.width < 250 || viewportSize.height < 240))
        throw new Error(`WebKit on Windows has a minimal viewport of 250x240.`);
    }
  }
  exports.WKBrowserContext = WKBrowserContext;
});

// node_modules/playwright-core/lib/server/webkit/webkit.js
var require_webkit = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WebKit = undefined;
  var _wkBrowser = require_wkBrowser();
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _wkConnection = require_wkConnection();
  var _browserType = require_browserType();
  var _utils = require_utils3();

  class WebKit extends _browserType.BrowserType {
    constructor(parent) {
      super(parent, "webkit");
    }
    _connectToTransport(transport, options) {
      return _wkBrowser.WKBrowser.connect(this.attribution.playwright, transport, options);
    }
    _amendEnvironment(env, userDataDir, executable, browserArguments) {
      return {
        ...env,
        CURL_COOKIE_JAR_PATH: _path.default.join(userDataDir, "cookiejar.db")
      };
    }
    _doRewriteStartupLog(error) {
      if (!error.logs)
        return error;
      if (error.logs.includes("cannot open display"))
        error.logs = "\n" + (0, _utils.wrapInASCIIBox)(_browserType.kNoXServerRunningError, 1);
      return error;
    }
    _attemptToGracefullyCloseBrowser(transport) {
      transport.send({
        method: "Playwright.close",
        params: {},
        id: _wkConnection.kBrowserCloseMessageId
      });
    }
    _defaultArgs(options, isPersistent, userDataDir) {
      const {
        args = [],
        proxy,
        headless
      } = options;
      const userDataDirArg = args.find((arg) => arg.startsWith("--user-data-dir"));
      if (userDataDirArg)
        throw this._createUserDataDirArgMisuseError("--user-data-dir");
      if (args.find((arg) => !arg.startsWith("-")))
        throw new Error("Arguments can not specify page to be opened");
      const webkitArguments = ["--inspector-pipe"];
      if (process.platform === "win32")
        webkitArguments.push("--disable-accelerated-compositing");
      if (headless)
        webkitArguments.push("--headless");
      if (isPersistent)
        webkitArguments.push(`--user-data-dir=${userDataDir}`);
      else
        webkitArguments.push(`--no-startup-window`);
      if (proxy) {
        if (process.platform === "darwin") {
          webkitArguments.push(`--proxy=${proxy.server}`);
          if (proxy.bypass)
            webkitArguments.push(`--proxy-bypass-list=${proxy.bypass}`);
        } else if (process.platform === "linux") {
          webkitArguments.push(`--proxy=${proxy.server}`);
          if (proxy.bypass)
            webkitArguments.push(...proxy.bypass.split(",").map((t) => `--ignore-host=${t}`));
        } else if (process.platform === "win32") {
          webkitArguments.push(`--curl-proxy=${proxy.server.replace(/^socks5:\/\//, "socks5h://")}`);
          if (proxy.bypass)
            webkitArguments.push(`--curl-noproxy=${proxy.bypass}`);
        }
      }
      webkitArguments.push(...args);
      if (isPersistent)
        webkitArguments.push("about:blank");
      return webkitArguments;
    }
  }
  exports.WebKit = WebKit;
});

// node_modules/playwright-core/lib/server/debugController.js
var require_debugController = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DebugController = undefined;
  var _processLauncher = require_processLauncher();
  var _instrumentation = require_instrumentation();
  var _recorder = require_recorder();
  var _recorderApp = require_recorderApp();
  var _locatorGenerators = require_locatorGenerators();
  var internalMetadata = (0, _instrumentation.serverSideCallMetadata)();

  class DebugController extends _instrumentation.SdkObject {
    constructor(playwright) {
      super({
        attribution: {
          isInternalPlaywright: true
        },
        instrumentation: (0, _instrumentation.createInstrumentation)()
      }, undefined, "DebugController");
      this._autoCloseTimer = undefined;
      this._autoCloseAllowed = false;
      this._trackHierarchyListener = undefined;
      this._playwright = undefined;
      this._sdkLanguage = "javascript";
      this._codegenId = "playwright-test";
      this._playwright = playwright;
    }
    initialize(codegenId, sdkLanguage) {
      this._codegenId = codegenId;
      this._sdkLanguage = sdkLanguage;
      _recorder.Recorder.setAppFactory(async () => new InspectingRecorderApp(this));
    }
    setAutoCloseAllowed(allowed) {
      this._autoCloseAllowed = allowed;
    }
    dispose() {
      this.setReportStateChanged(false);
      this.setAutoCloseAllowed(false);
      _recorder.Recorder.setAppFactory(undefined);
    }
    setReportStateChanged(enabled) {
      if (enabled && !this._trackHierarchyListener) {
        this._trackHierarchyListener = {
          onPageOpen: () => this._emitSnapshot(),
          onPageClose: () => this._emitSnapshot()
        };
        this._playwright.instrumentation.addListener(this._trackHierarchyListener, null);
      } else if (!enabled && this._trackHierarchyListener) {
        this._playwright.instrumentation.removeListener(this._trackHierarchyListener);
        this._trackHierarchyListener = undefined;
      }
    }
    async resetForReuse() {
      const contexts = new Set;
      for (const page of this._playwright.allPages())
        contexts.add(page.context());
      for (const context of contexts)
        await context.resetForReuse(internalMetadata, null);
    }
    async navigate(url) {
      for (const p of this._playwright.allPages())
        await p.mainFrame().goto(internalMetadata, url);
    }
    async setRecorderMode(params) {
      await this._closeBrowsersWithoutPages();
      if (params.mode === "none") {
        for (const recorder of await this._allRecorders()) {
          recorder.hideHighlightedSelector();
          recorder.setMode("none");
        }
        this.setAutoCloseEnabled(true);
        return;
      }
      if (!this._playwright.allBrowsers().length)
        await this._playwright.chromium.launch(internalMetadata, {
          headless: !!process.env.PW_DEBUG_CONTROLLER_HEADLESS
        });
      const pages = this._playwright.allPages();
      if (!pages.length) {
        const [browser] = this._playwright.allBrowsers();
        const {
          context
        } = await browser.newContextForReuse({}, internalMetadata);
        await context.newPage(internalMetadata);
      }
      if (params.testIdAttributeName) {
        for (const page of this._playwright.allPages())
          page.context().selectors().setTestIdAttributeName(params.testIdAttributeName);
      }
      for (const recorder of await this._allRecorders()) {
        recorder.hideHighlightedSelector();
        if (params.mode !== "inspecting")
          recorder.setOutput(this._codegenId, params.file);
        recorder.setMode(params.mode);
      }
      this.setAutoCloseEnabled(true);
    }
    async setAutoCloseEnabled(enabled) {
      if (!this._autoCloseAllowed)
        return;
      if (this._autoCloseTimer)
        clearTimeout(this._autoCloseTimer);
      if (!enabled)
        return;
      const heartBeat = () => {
        if (!this._playwright.allPages().length)
          (0, _processLauncher.gracefullyProcessExitDoNotHang)(0);
        else
          this._autoCloseTimer = setTimeout(heartBeat, 5000);
      };
      this._autoCloseTimer = setTimeout(heartBeat, 30000);
    }
    async highlight(selector) {
      for (const recorder of await this._allRecorders())
        recorder.setHighlightedSelector(this._sdkLanguage, selector);
    }
    async hideHighlight() {
      for (const recorder of await this._allRecorders())
        recorder.hideHighlightedSelector();
      await this._playwright.hideHighlight();
    }
    allBrowsers() {
      return [...this._playwright.allBrowsers()];
    }
    async resume() {
      for (const recorder of await this._allRecorders())
        recorder.resume();
    }
    async kill() {
      (0, _processLauncher.gracefullyProcessExitDoNotHang)(0);
    }
    async closeAllBrowsers() {
      await Promise.all(this.allBrowsers().map((browser) => browser.close({
        reason: "Close all browsers requested"
      })));
    }
    _emitSnapshot() {
      const browsers = [];
      let pageCount = 0;
      for (const browser of this._playwright.allBrowsers()) {
        const b = {
          contexts: []
        };
        browsers.push(b);
        for (const context of browser.contexts()) {
          const c = {
            pages: []
          };
          b.contexts.push(c);
          for (const page of context.pages())
            c.pages.push(page.mainFrame().url());
          pageCount += context.pages().length;
        }
      }
      this.emit(DebugController.Events.StateChanged, {
        pageCount
      });
    }
    async _allRecorders() {
      const contexts = new Set;
      for (const page of this._playwright.allPages())
        contexts.add(page.context());
      const result = await Promise.all([...contexts].map((c) => _recorder.Recorder.show(c, {
        omitCallTracking: true
      })));
      return result.filter(Boolean);
    }
    async _closeBrowsersWithoutPages() {
      for (const browser of this._playwright.allBrowsers()) {
        for (const context of browser.contexts()) {
          if (!context.pages().length)
            await context.close({
              reason: "Browser collected"
            });
        }
        if (!browser.contexts())
          await browser.close({
            reason: "Browser collected"
          });
      }
    }
  }
  exports.DebugController = DebugController;
  DebugController.Events = {
    StateChanged: "stateChanged",
    InspectRequested: "inspectRequested",
    SourceChanged: "sourceChanged",
    Paused: "paused",
    SetModeRequested: "setModeRequested"
  };

  class InspectingRecorderApp extends _recorderApp.EmptyRecorderApp {
    constructor(debugController) {
      super();
      this._debugController = undefined;
      this._debugController = debugController;
    }
    async setSelector(selector) {
      const locator = (0, _locatorGenerators.asLocator)(this._debugController._sdkLanguage, selector);
      this._debugController.emit(DebugController.Events.InspectRequested, {
        selector,
        locator
      });
    }
    async setSources(sources) {
      const source = sources.find((s) => s.id === this._debugController._codegenId);
      const {
        text,
        header,
        footer,
        actions
      } = source || {
        text: ""
      };
      this._debugController.emit(DebugController.Events.SourceChanged, {
        text,
        header,
        footer,
        actions
      });
    }
    async setPaused(paused) {
      this._debugController.emit(DebugController.Events.Paused, {
        paused
      });
    }
    async setMode(mode) {
      this._debugController.emit(DebugController.Events.SetModeRequested, {
        mode
      });
    }
  }
});

// node_modules/playwright-core/lib/server/playwright.js
var require_playwright = __commonJS((exports) => {
  var createPlaywright = function(options) {
    return new Playwright(options);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Playwright = undefined;
  exports.createPlaywright = createPlaywright;
  var _android = require_android();
  var _backendAdb = require_backendAdb();
  var _chromium = require_chromium();
  var _electron = require_electron2();
  var _firefox = require_firefox();
  var _selectors = require_selectors();
  var _webkit = require_webkit();
  var _instrumentation = require_instrumentation();
  var _debugLogger = require_debugLogger();
  var _debugController = require_debugController();

  class Playwright extends _instrumentation.SdkObject {
    constructor(options) {
      super({
        attribution: {},
        instrumentation: (0, _instrumentation.createInstrumentation)()
      }, undefined, "Playwright");
      this.selectors = undefined;
      this.chromium = undefined;
      this.android = undefined;
      this.electron = undefined;
      this.firefox = undefined;
      this.webkit = undefined;
      this.options = undefined;
      this.debugController = undefined;
      this._allPages = new Set;
      this._allBrowsers = new Set;
      this.options = options;
      this.attribution.playwright = this;
      this.instrumentation.addListener({
        onBrowserOpen: (browser) => this._allBrowsers.add(browser),
        onBrowserClose: (browser) => this._allBrowsers.delete(browser),
        onPageOpen: (page) => this._allPages.add(page),
        onPageClose: (page) => this._allPages.delete(page),
        onCallLog: (sdkObject, metadata, logName, message) => {
          _debugLogger.debugLogger.log(logName, message);
        }
      }, null);
      this.chromium = new _chromium.Chromium(this);
      this.firefox = new _firefox.Firefox(this);
      this.webkit = new _webkit.WebKit(this);
      this.electron = new _electron.Electron(this);
      this.android = new _android.Android(this, new _backendAdb.AdbBackend);
      this.selectors = new _selectors.Selectors;
      this.debugController = new _debugController.DebugController(this);
    }
    async hideHighlight() {
      await Promise.all([...this._allPages].map((p) => p.hideHighlight().catch(() => {
      })));
    }
    allBrowsers() {
      return [...this._allBrowsers];
    }
    allPages() {
      return [...this._allPages];
    }
  }
  exports.Playwright = Playwright;
});

// node_modules/playwright-core/lib/server/recorder/recorderApp.js
var require_recorderApp = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.RecorderApp = exports.EmptyRecorderApp = undefined;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _progress = require_progress();
  var _events = import.meta.require("events");
  var _instrumentation = require_instrumentation();
  var _utils = require_utils3();
  var _utilsBundle = require_utilsBundle();
  var _launchApp = require_launchApp();

  class EmptyRecorderApp extends _events.EventEmitter {
    async close() {
    }
    async setPaused(paused) {
    }
    async setMode(mode) {
    }
    async setFileIfNeeded(file) {
    }
    async setSelector(selector, userGesture) {
    }
    async updateCallLogs(callLogs) {
    }
    async setSources(sources) {
    }
  }
  exports.EmptyRecorderApp = EmptyRecorderApp;

  class RecorderApp extends _events.EventEmitter {
    constructor(recorder, page, wsEndpoint) {
      super();
      this._page = undefined;
      this.wsEndpoint = undefined;
      this._recorder = undefined;
      this.setMaxListeners(0);
      this._recorder = recorder;
      this._page = page;
      this.wsEndpoint = wsEndpoint;
    }
    async close() {
      await this._page.context().close({
        reason: "Recorder window closed"
      });
    }
    async _init() {
      await (0, _launchApp.syncLocalStorageWithSettings)(this._page, "recorder");
      await this._page._setServerRequestInterceptor((route) => {
        if (!route.request().url().startsWith("https://playwright/"))
          return false;
        const uri = route.request().url().substring("https://playwright/".length);
        const file = import.meta.require.resolve("../../vite/recorder/" + uri);
        _fs.default.promises.readFile(file).then((buffer) => {
          route.fulfill({
            requestUrl: route.request().url(),
            status: 200,
            headers: [{
              name: "Content-Type",
              value: _utilsBundle.mime.getType(_path.default.extname(file)) || "application/octet-stream"
            }],
            body: buffer.toString("base64"),
            isBase64: true
          }).catch(() => {
          });
        });
        return true;
      });
      await this._page.exposeBinding("dispatch", false, (_, data) => this.emit("event", data));
      this._page.once("close", () => {
        this.emit("close");
        this._page.context().close({
          reason: "Recorder window closed"
        }).catch(() => {
        });
      });
      const mainFrame = this._page.mainFrame();
      await mainFrame.goto((0, _instrumentation.serverSideCallMetadata)(), "https://playwright/index.html");
    }
    static async open(recorder, inspectedContext, handleSIGINT) {
      const sdkLanguage = inspectedContext.attribution.playwright.options.sdkLanguage;
      const headed = !!inspectedContext._browser.options.headful;
      const recorderPlaywright = require_playwright().createPlaywright({
        sdkLanguage: "javascript",
        isInternalPlaywright: true
      });
      const {
        context,
        page
      } = await (0, _launchApp.launchApp)(recorderPlaywright.chromium, {
        sdkLanguage,
        windowSize: {
          width: 600,
          height: 600
        },
        windowPosition: {
          x: 1020,
          y: 10
        },
        persistentContextOptions: {
          noDefaultViewport: true,
          headless: !!process.env.PWTEST_CLI_HEADLESS || (0, _utils.isUnderTest)() && !headed,
          useWebSocket: !!process.env.PWTEST_RECORDER_PORT,
          handleSIGINT,
          args: process.env.PWTEST_RECORDER_PORT ? [`--remote-debugging-port=${process.env.PWTEST_RECORDER_PORT}`] : []
        }
      });
      const controller = new _progress.ProgressController((0, _instrumentation.serverSideCallMetadata)(), context._browser);
      await controller.run(async (progress2) => {
        await context._browser._defaultContext._loadDefaultContextAsIs(progress2);
      });
      const result = new RecorderApp(recorder, page, context._browser.options.wsEndpoint);
      await result._init();
      return result;
    }
    async setMode(mode) {
      await this._page.mainFrame().evaluateExpression(((mode2) => {
        window.playwrightSetMode(mode2);
      }).toString(), {
        isFunction: true
      }, mode).catch(() => {
      });
    }
    async setFileIfNeeded(file) {
      await this._page.mainFrame().evaluateExpression(((file2) => {
        window.playwrightSetFileIfNeeded(file2);
      }).toString(), {
        isFunction: true
      }, file).catch(() => {
      });
    }
    async setPaused(paused) {
      await this._page.mainFrame().evaluateExpression(((paused2) => {
        window.playwrightSetPaused(paused2);
      }).toString(), {
        isFunction: true
      }, paused).catch(() => {
      });
    }
    async setSources(sources) {
      await this._page.mainFrame().evaluateExpression(((sources2) => {
        window.playwrightSetSources(sources2);
      }).toString(), {
        isFunction: true
      }, sources).catch(() => {
      });
      if (process.env.PWTEST_CLI_IS_UNDER_TEST && sources.length)
        process._didSetSourcesForTest(sources[0].text);
    }
    async setSelector(selector, userGesture) {
      if (userGesture) {
        if (this._recorder.mode() === "inspecting") {
          this._recorder.setMode("standby");
          this._page.bringToFront();
        } else {
          this._recorder.setMode("recording");
        }
      }
      await this._page.mainFrame().evaluateExpression(((data) => {
        window.playwrightSetSelector(data.selector, data.userGesture);
      }).toString(), {
        isFunction: true
      }, {
        selector,
        userGesture
      }).catch(() => {
      });
    }
    async updateCallLogs(callLogs) {
      await this._page.mainFrame().evaluateExpression(((callLogs2) => {
        window.playwrightUpdateLogs(callLogs2);
      }).toString(), {
        isFunction: true
      }, callLogs).catch(() => {
      });
    }
  }
  exports.RecorderApp = RecorderApp;
});

// node_modules/playwright-core/lib/server/recorder/recorderUtils.js
var require_recorderUtils = __commonJS((exports) => {
  var metadataToCallLog = function(metadata, status) {
    var _metadata$params, _metadata$params2, _metadata$error;
    let title = metadata.apiName || metadata.method;
    if (metadata.method === "waitForEventInfo")
      title += `(${metadata.params.info.event})`;
    title = title.replace("object.expect", "expect");
    if (metadata.error)
      status = "error";
    const params = {
      url: (_metadata$params = metadata.params) === null || _metadata$params === undefined ? undefined : _metadata$params.url,
      selector: (_metadata$params2 = metadata.params) === null || _metadata$params2 === undefined ? undefined : _metadata$params2.selector
    };
    let duration = metadata.endTime ? metadata.endTime - metadata.startTime : undefined;
    if (typeof duration === "number" && metadata.pauseStartTime && metadata.pauseEndTime) {
      duration -= metadata.pauseEndTime - metadata.pauseStartTime;
      duration = Math.max(duration, 0);
    }
    const callLog = {
      id: metadata.id,
      messages: metadata.log,
      title,
      status,
      error: (_metadata$error = metadata.error) === null || _metadata$error === undefined || (_metadata$error = _metadata$error.error) === null || _metadata$error === undefined ? undefined : _metadata$error.message,
      params,
      duration
    };
    return callLog;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.metadataToCallLog = metadataToCallLog;
});

// node_modules/playwright-core/lib/utils/isomorphic/locatorParser.js
var require_locatorParser = __commonJS((exports) => {
  var parseLocator = function(locator, testIdAttributeName) {
    locator = locator.replace(/AriaRole\s*\.\s*([\w]+)/g, (_, group) => group.toLowerCase()).replace(/(get_by_role|getByRole)\s*\(\s*(?:["'`])([^'"`]+)['"`]/g, (_, group1, group2) => `${group1}(${group2.toLowerCase()}`);
    const params = [];
    let template = "";
    for (let i = 0;i < locator.length; ++i) {
      const quote = locator[i];
      if (quote !== '"' && quote !== "\'" && quote !== "`" && quote !== "/") {
        template += quote;
        continue;
      }
      const isRegexEscaping = locator[i - 1] === "r" || locator[i] === "/";
      ++i;
      let text = "";
      while (i < locator.length) {
        if (locator[i] === "\\") {
          if (isRegexEscaping) {
            if (locator[i + 1] !== quote)
              text += locator[i];
            ++i;
            text += locator[i];
          } else {
            ++i;
            if (locator[i] === "n")
              text += "\n";
            else if (locator[i] === "r")
              text += "\r";
            else if (locator[i] === "t")
              text += "\t";
            else
              text += locator[i];
          }
          ++i;
          continue;
        }
        if (locator[i] !== quote) {
          text += locator[i++];
          continue;
        }
        break;
      }
      params.push({
        quote,
        text
      });
      template += (quote === "/" ? "r" : "") + "$" + params.length;
    }
    template = template.toLowerCase().replace(/get_by_alt_text/g, "getbyalttext").replace(/get_by_test_id/g, "getbytestid").replace(/get_by_([\w]+)/g, "getby$1").replace(/has_not_text/g, "hasnottext").replace(/has_text/g, "hastext").replace(/has_not/g, "hasnot").replace(/frame_locator/g, "framelocator").replace(/[{}\s]/g, "").replace(/new\(\)/g, "").replace(/new[\w]+\.[\w]+options\(\)/g, "").replace(/\.set/g, ",set").replace(/\.or_\(/g, "or(").replace(/\.and_\(/g, "and(").replace(/:/g, "=").replace(/,re\.ignorecase/g, "i").replace(/,pattern.case_insensitive/g, "i").replace(/,regexoptions.ignorecase/g, "i").replace(/re.compile\(([^)]+)\)/g, "$1").replace(/pattern.compile\(([^)]+)\)/g, "r$1").replace(/newregex\(([^)]+)\)/g, "r$1").replace(/string=/g, "=").replace(/regex=/g, "=").replace(/,,/g, ",");
    const preferredQuote = params.map((p) => p.quote).filter((quote) => '\'"`'.includes(quote))[0];
    return {
      selector: transform(template, params, testIdAttributeName),
      preferredQuote
    };
  };
  var countParams = function(template) {
    return [...template.matchAll(/\$\d+/g)].length;
  };
  var shiftParams = function(template, sub) {
    return template.replace(/\$(\d+)/g, (_, ordinal) => `\$${ordinal - sub}`);
  };
  var transform = function(template, params, testIdAttributeName) {
    while (true) {
      const hasMatch = template.match(/filter\(,?(has=|hasnot=|sethas\(|sethasnot\()/);
      if (!hasMatch)
        break;
      const start = hasMatch.index + hasMatch[0].length;
      let balance = 0;
      let end = start;
      for (;end < template.length; end++) {
        if (template[end] === "(")
          balance++;
        else if (template[end] === ")")
          balance--;
        if (balance < 0)
          break;
      }
      let prefix = template.substring(0, start);
      let extraSymbol = 0;
      if (["sethas(", "sethasnot("].includes(hasMatch[1])) {
        extraSymbol = 1;
        prefix = prefix.replace(/sethas\($/, "has=").replace(/sethasnot\($/, "hasnot=");
      }
      const paramsCountBeforeHas = countParams(template.substring(0, start));
      const hasTemplate = shiftParams(template.substring(start, end), paramsCountBeforeHas);
      const paramsCountInHas = countParams(hasTemplate);
      const hasParams = params.slice(paramsCountBeforeHas, paramsCountBeforeHas + paramsCountInHas);
      const hasSelector = JSON.stringify(transform(hasTemplate, hasParams, testIdAttributeName));
      template = prefix.replace(/=$/, "2=") + `\$${paramsCountBeforeHas + 1}` + shiftParams(template.substring(end + extraSymbol), paramsCountInHas - 1);
      const paramsBeforeHas = params.slice(0, paramsCountBeforeHas);
      const paramsAfterHas = params.slice(paramsCountBeforeHas + paramsCountInHas);
      params = paramsBeforeHas.concat([{
        quote: '"',
        text: hasSelector
      }]).concat(paramsAfterHas);
    }
    template = template.replace(/\,set([\w]+)\(([^)]+)\)/g, (_, group1, group2) => "," + group1.toLowerCase() + "=" + group2.toLowerCase()).replace(/framelocator\(([^)]+)\)/g, "$1.internal:control=enter-frame").replace(/locator\(([^)]+),hastext=([^),]+)\)/g, "locator($1).internal:has-text=$2").replace(/locator\(([^)]+),hasnottext=([^),]+)\)/g, "locator($1).internal:has-not-text=$2").replace(/locator\(([^)]+),hastext=([^),]+)\)/g, "locator($1).internal:has-text=$2").replace(/locator\(([^)]+)\)/g, "$1").replace(/getbyrole\(([^)]+)\)/g, "internal:role=$1").replace(/getbytext\(([^)]+)\)/g, "internal:text=$1").replace(/getbylabel\(([^)]+)\)/g, "internal:label=$1").replace(/getbytestid\(([^)]+)\)/g, `internal:testid=[${testIdAttributeName}=\$1]`).replace(/getby(placeholder|alt|title)(?:text)?\(([^)]+)\)/g, "internal:attr=[$1=$2]").replace(/first(\(\))?/g, "nth=0").replace(/last(\(\))?/g, "nth=-1").replace(/nth\(([^)]+)\)/g, "nth=$1").replace(/filter\(,?hastext=([^)]+)\)/g, "internal:has-text=$1").replace(/filter\(,?hasnottext=([^)]+)\)/g, "internal:has-not-text=$1").replace(/filter\(,?has2=([^)]+)\)/g, "internal:has=$1").replace(/filter\(,?hasnot2=([^)]+)\)/g, "internal:has-not=$1").replace(/,exact=false/g, "").replace(/,exact=true/g, "s").replace(/\,/g, "][");
    const parts = template.split(".");
    for (let index = 0;index < parts.length - 1; index++) {
      if (parts[index] === "internal:control=enter-frame" && parts[index + 1].startsWith("nth=")) {
        const [nth] = parts.splice(index, 1);
        parts.splice(index + 1, 0, nth);
      }
    }
    return parts.map((t) => {
      if (!t.startsWith("internal:") || t === "internal:control")
        return t.replace(/\$(\d+)/g, (_, ordinal) => {
          const param = params[+ordinal - 1];
          return param.text;
        });
      t = t.includes("[") ? t.replace(/\]/, "") + "]" : t;
      t = t.replace(/(?:r)\$(\d+)(i)?/g, (_, ordinal, suffix) => {
        const param = params[+ordinal - 1];
        if (t.startsWith("internal:attr") || t.startsWith("internal:testid") || t.startsWith("internal:role"))
          return (0, _stringUtils.escapeForAttributeSelector)(new RegExp(param.text), false) + (suffix || "");
        return (0, _stringUtils.escapeForTextSelector)(new RegExp(param.text, suffix), false);
      }).replace(/\$(\d+)(i|s)?/g, (_, ordinal, suffix) => {
        const param = params[+ordinal - 1];
        if (t.startsWith("internal:has=") || t.startsWith("internal:has-not="))
          return param.text;
        if (t.startsWith("internal:testid"))
          return (0, _stringUtils.escapeForAttributeSelector)(param.text, true);
        if (t.startsWith("internal:attr") || t.startsWith("internal:role"))
          return (0, _stringUtils.escapeForAttributeSelector)(param.text, suffix === "s");
        return (0, _stringUtils.escapeForTextSelector)(param.text, suffix === "s");
      });
      return t;
    }).join(" >> ");
  };
  var locatorOrSelectorAsSelector = function(language, locator, testIdAttributeName) {
    try {
      (0, _selectorParser.parseSelector)(locator);
      return locator;
    } catch (e) {
    }
    try {
      const {
        selector,
        preferredQuote
      } = parseLocator(locator, testIdAttributeName);
      const locators = (0, _locatorGenerators.asLocators)(language, selector, undefined, undefined, preferredQuote);
      const digest = digestForComparison(language, locator);
      if (locators.some((candidate) => digestForComparison(language, candidate) === digest))
        return selector;
    } catch (e) {
    }
    return "";
  };
  var digestForComparison = function(language, locator) {
    locator = locator.replace(/\s/g, "");
    if (language === "javascript")
      locator = locator.replace(/\\?["`]/g, "\'");
    return locator;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.locatorOrSelectorAsSelector = locatorOrSelectorAsSelector;
  var _stringUtils = require_stringUtils();
  var _locatorGenerators = require_locatorGenerators();
  var _selectorParser = require_selectorParser();
});

// node_modules/playwright-core/lib/server/recorder.js
var require_recorder = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var languageForFile = function(file) {
    if (file.endsWith(".py"))
      return "python";
    if (file.endsWith(".java"))
      return "java";
    if (file.endsWith(".cs"))
      return "csharp";
    return "javascript";
  };
  var isScreenshotCommand = function(metadata) {
    return metadata.method.toLowerCase().includes("screenshot");
  };
  async function findFrameSelector(frame) {
    try {
      const parent = frame.parentFrame();
      const frameElement = await frame.frameElement();
      if (!frameElement || !parent)
        return;
      const utility = await parent._utilityContext();
      const injected = await utility.injectedScript();
      const selector = await injected.evaluate((injected2, element) => {
        return injected2.generateSelectorSimple(element, {
          testIdAttributeName: "",
          omitInternalEngines: true
        });
      }, frameElement);
      return selector;
    } catch (e) {
    }
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Recorder = undefined;
  var fs = _interopRequireWildcard(import.meta.require("fs"));
  var _codeGenerator = require_codeGenerator();
  var _utils = require_utils4();
  var _page = require_page();
  var _frames = require_frames();
  var _browserContext = require_browserContext();
  var _java = require_java();
  var _javascript = require_javascript2();
  var _jsonl = require_jsonl();
  var _csharp = require_csharp();
  var _python = require_python();
  var recorderSource = _interopRequireWildcard(require_recorderSource());
  var consoleApiSource = _interopRequireWildcard(require_consoleApiSource());
  var _recorderApp = require_recorderApp();
  var _utils2 = require_utils3();
  var _recorderUtils = require_recorderUtils();
  var _debugger = require_debugger();
  var _events = import.meta.require("events");
  var _timeoutRunner = require_timeoutRunner();
  var _locatorParser = require_locatorParser();
  var _stringUtils = require_stringUtils();
  var _eventsHelper = require_eventsHelper();
  var recorderSymbol = Symbol("recorderSymbol");

  class Recorder {
    static setAppFactory(recorderAppFactory) {
      Recorder.recorderAppFactory = recorderAppFactory;
    }
    static showInspector(context) {
      const params = {};
      if ((0, _utils2.isUnderTest)())
        params.language = process.env.TEST_INSPECTOR_LANGUAGE;
      Recorder.show(context, params).catch(() => {
      });
    }
    static show(context, params = {}) {
      let recorderPromise = context[recorderSymbol];
      if (!recorderPromise) {
        const recorder = new Recorder(context, params);
        recorderPromise = recorder.install().then(() => recorder);
        context[recorderSymbol] = recorderPromise;
      }
      return recorderPromise;
    }
    constructor(context, params) {
      this._context = undefined;
      this._mode = undefined;
      this._highlightedSelector = "";
      this._overlayState = {
        offsetX: 0
      };
      this._recorderApp = null;
      this._currentCallsMetadata = new Map;
      this._recorderSources = [];
      this._userSources = new Map;
      this._debugger = undefined;
      this._contextRecorder = undefined;
      this._handleSIGINT = undefined;
      this._omitCallTracking = false;
      this._currentLanguage = undefined;
      this._mode = params.mode || "none";
      this._contextRecorder = new ContextRecorder(context, params);
      this._context = context;
      this._omitCallTracking = !!params.omitCallTracking;
      this._debugger = context.debugger();
      this._handleSIGINT = params.handleSIGINT;
      context.instrumentation.addListener(this, context);
      this._currentLanguage = this._contextRecorder.languageName();
      if ((0, _utils2.isUnderTest)()) {
        this._overlayState.offsetX = 200;
      }
    }
    static async defaultRecorderAppFactory(recorder) {
      if (process.env.PW_CODEGEN_NO_INSPECTOR)
        return new _recorderApp.EmptyRecorderApp;
      return await _recorderApp.RecorderApp.open(recorder, recorder._context, recorder._handleSIGINT);
    }
    async install() {
      const recorderApp = await (Recorder.recorderAppFactory || Recorder.defaultRecorderAppFactory)(this);
      this._recorderApp = recorderApp;
      recorderApp.once("close", () => {
        this._debugger.resume(false);
        this._recorderApp = null;
      });
      recorderApp.on("event", (data) => {
        if (data.event === "setMode") {
          this.setMode(data.params.mode);
          return;
        }
        if (data.event === "selectorUpdated") {
          this.setHighlightedSelector(this._currentLanguage, data.params.selector);
          return;
        }
        if (data.event === "step") {
          this._debugger.resume(true);
          return;
        }
        if (data.event === "fileChanged") {
          this._currentLanguage = this._contextRecorder.languageName(data.params.file);
          this._refreshOverlay();
          return;
        }
        if (data.event === "resume") {
          this._debugger.resume(false);
          return;
        }
        if (data.event === "pause") {
          this._debugger.pauseOnNextStatement();
          return;
        }
        if (data.event === "clear") {
          this._contextRecorder.clearScript();
          return;
        }
      });
      await Promise.all([recorderApp.setMode(this._mode), recorderApp.setPaused(this._debugger.isPaused()), this._pushAllSources()]);
      this._context.once(_browserContext.BrowserContext.Events.Close, () => {
        this._contextRecorder.dispose();
        this._context.instrumentation.removeListener(this);
        recorderApp.close().catch(() => {
        });
      });
      this._contextRecorder.on(ContextRecorder.Events.Change, (data) => {
        var _this$_recorderApp;
        this._recorderSources = data.sources;
        this._pushAllSources();
        (_this$_recorderApp = this._recorderApp) === null || _this$_recorderApp === undefined || _this$_recorderApp.setFileIfNeeded(data.primaryFileName);
      });
      await this._context.exposeBinding("__pw_recorderState", false, (source) => {
        let actionSelector = "";
        let actionPoint;
        const hasActiveScreenshotCommand = [...this._currentCallsMetadata.keys()].some(isScreenshotCommand);
        if (!hasActiveScreenshotCommand) {
          actionSelector = this._highlightedSelector;
          for (const [metadata, sdkObject] of this._currentCallsMetadata) {
            if (source.page === sdkObject.attribution.page) {
              actionPoint = metadata.point || actionPoint;
              actionSelector = actionSelector || metadata.params.selector;
            }
          }
        }
        const uiState = {
          mode: this._mode,
          actionPoint,
          actionSelector,
          language: this._currentLanguage,
          testIdAttributeName: this._contextRecorder.testIdAttributeName(),
          overlay: this._overlayState
        };
        return uiState;
      });
      await this._context.exposeBinding("__pw_recorderSetSelector", false, async ({
        frame
      }, selector) => {
        var _this$_recorderApp2;
        const selectorPromises = [];
        let currentFrame = frame;
        while (currentFrame) {
          selectorPromises.push(findFrameSelector(currentFrame));
          currentFrame = currentFrame.parentFrame();
        }
        const fullSelector = (await Promise.all(selectorPromises)).filter(Boolean);
        fullSelector.push(selector);
        await ((_this$_recorderApp2 = this._recorderApp) === null || _this$_recorderApp2 === undefined ? undefined : _this$_recorderApp2.setSelector(fullSelector.join(" >> internal:control=enter-frame >> "), true));
      });
      await this._context.exposeBinding("__pw_recorderSetMode", false, async ({
        frame
      }, mode) => {
        if (frame.parentFrame())
          return;
        this.setMode(mode);
      });
      await this._context.exposeBinding("__pw_recorderSetOverlayState", false, async ({
        frame
      }, state) => {
        if (frame.parentFrame())
          return;
        this._overlayState = state;
      });
      await this._context.exposeBinding("__pw_resume", false, () => {
        this._debugger.resume(false);
      });
      await this._context.extendInjectedScript(consoleApiSource.source);
      await this._contextRecorder.install();
      if (this._debugger.isPaused())
        this._pausedStateChanged();
      this._debugger.on(_debugger.Debugger.Events.PausedStateChanged, () => this._pausedStateChanged());
      this._context.recorderAppForTest = recorderApp;
    }
    _pausedStateChanged() {
      var _this$_recorderApp3;
      for (const {
        metadata,
        sdkObject
      } of this._debugger.pausedDetails()) {
        if (!this._currentCallsMetadata.has(metadata))
          this.onBeforeCall(sdkObject, metadata);
      }
      (_this$_recorderApp3 = this._recorderApp) === null || _this$_recorderApp3 === undefined || _this$_recorderApp3.setPaused(this._debugger.isPaused());
      this._updateUserSources();
      this.updateCallLog([...this._currentCallsMetadata.keys()]);
    }
    setMode(mode) {
      var _this$_recorderApp4;
      if (this._mode === mode)
        return;
      this._highlightedSelector = "";
      this._mode = mode;
      (_this$_recorderApp4 = this._recorderApp) === null || _this$_recorderApp4 === undefined || _this$_recorderApp4.setMode(this._mode);
      this._contextRecorder.setEnabled(this._mode === "recording" || this._mode === "assertingText" || this._mode === "assertingVisibility" || this._mode === "assertingValue");
      this._debugger.setMuted(this._mode === "recording" || this._mode === "assertingText" || this._mode === "assertingVisibility" || this._mode === "assertingValue");
      if (this._mode !== "none" && this._mode !== "standby" && this._context.pages().length === 1)
        this._context.pages()[0].bringToFront().catch(() => {
        });
      this._refreshOverlay();
    }
    resume() {
      this._debugger.resume(false);
    }
    mode() {
      return this._mode;
    }
    setHighlightedSelector(language, selector) {
      this._highlightedSelector = (0, _locatorParser.locatorOrSelectorAsSelector)(language, selector, this._context.selectors().testIdAttributeName());
      this._refreshOverlay();
    }
    hideHighlightedSelector() {
      this._highlightedSelector = "";
      this._refreshOverlay();
    }
    setOutput(codegenId, outputFile) {
      this._contextRecorder.setOutput(codegenId, outputFile);
    }
    _refreshOverlay() {
      for (const page of this._context.pages())
        page.mainFrame().evaluateExpression("window.__pw_refreshOverlay()").catch(() => {
        });
    }
    async onBeforeCall(sdkObject, metadata) {
      if (this._omitCallTracking || this._mode === "recording" || this._mode === "assertingText" || this._mode === "assertingVisibility" || this._mode === "assertingValue")
        return;
      this._currentCallsMetadata.set(metadata, sdkObject);
      this._updateUserSources();
      this.updateCallLog([metadata]);
      if (isScreenshotCommand(metadata)) {
        this.hideHighlightedSelector();
      } else if (metadata.params && metadata.params.selector) {
        var _this$_recorderApp5;
        this._highlightedSelector = metadata.params.selector;
        (_this$_recorderApp5 = this._recorderApp) === null || _this$_recorderApp5 === undefined || _this$_recorderApp5.setSelector(this._highlightedSelector).catch(() => {
        });
      }
    }
    async onAfterCall(sdkObject, metadata) {
      if (this._omitCallTracking || this._mode === "recording" || this._mode === "assertingText" || this._mode === "assertingVisibility" || this._mode === "assertingValue")
        return;
      if (!metadata.error)
        this._currentCallsMetadata.delete(metadata);
      this._updateUserSources();
      this.updateCallLog([metadata]);
    }
    _updateUserSources() {
      var _this$_recorderApp6;
      for (const source of this._userSources.values()) {
        source.highlight = [];
        source.revealLine = undefined;
      }
      let fileToSelect = undefined;
      for (const metadata of this._currentCallsMetadata.keys()) {
        if (!metadata.location)
          continue;
        const {
          file,
          line
        } = metadata.location;
        let source = this._userSources.get(file);
        if (!source) {
          source = {
            isRecorded: false,
            label: file,
            id: file,
            text: this._readSource(file),
            highlight: [],
            language: languageForFile(file)
          };
          this._userSources.set(file, source);
        }
        if (line) {
          const paused = this._debugger.isPaused(metadata);
          source.highlight.push({
            line,
            type: metadata.error ? "error" : paused ? "paused" : "running"
          });
          source.revealLine = line;
          fileToSelect = source.id;
        }
      }
      this._pushAllSources();
      if (fileToSelect)
        (_this$_recorderApp6 = this._recorderApp) === null || _this$_recorderApp6 === undefined || _this$_recorderApp6.setFileIfNeeded(fileToSelect);
    }
    _pushAllSources() {
      var _this$_recorderApp7;
      (_this$_recorderApp7 = this._recorderApp) === null || _this$_recorderApp7 === undefined || _this$_recorderApp7.setSources([...this._recorderSources, ...this._userSources.values()]);
    }
    async onBeforeInputAction(sdkObject, metadata) {
    }
    async onCallLog(sdkObject, metadata, logName, message) {
      this.updateCallLog([metadata]);
    }
    updateCallLog(metadatas) {
      var _this$_recorderApp8;
      if (this._mode === "recording" || this._mode === "assertingText" || this._mode === "assertingVisibility" || this._mode === "assertingValue")
        return;
      const logs = [];
      for (const metadata of metadatas) {
        if (!metadata.method || metadata.internal)
          continue;
        let status = "done";
        if (this._currentCallsMetadata.has(metadata))
          status = "in-progress";
        if (this._debugger.isPaused(metadata))
          status = "paused";
        logs.push((0, _recorderUtils.metadataToCallLog)(metadata, status));
      }
      (_this$_recorderApp8 = this._recorderApp) === null || _this$_recorderApp8 === undefined || _this$_recorderApp8.updateCallLogs(logs);
    }
    _readSource(fileName) {
      try {
        return fs.readFileSync(fileName, "utf-8");
      } catch (e) {
        return "// No source available";
      }
    }
  }
  exports.Recorder = Recorder;
  Recorder.recorderAppFactory = undefined;

  class ContextRecorder extends _events.EventEmitter {
    constructor(context, params) {
      super();
      this._generator = undefined;
      this._pageAliases = new Map;
      this._lastPopupOrdinal = 0;
      this._lastDialogOrdinal = -1;
      this._lastDownloadOrdinal = -1;
      this._timers = new Set;
      this._context = undefined;
      this._params = undefined;
      this._recorderSources = undefined;
      this._throttledOutputFile = null;
      this._orderedLanguages = [];
      this._listeners = [];
      this._context = context;
      this._params = params;
      this._recorderSources = [];
      const language = params.language || context.attribution.playwright.options.sdkLanguage;
      this.setOutput(language, params.outputFile);
      const generator = new _codeGenerator.CodeGenerator(context._browser.options.name, params.mode === "recording", params.launchOptions || {}, params.contextOptions || {}, params.device, params.saveStorage);
      generator.on("change", () => {
        this._recorderSources = [];
        for (const languageGenerator of this._orderedLanguages) {
          var _this$_throttledOutpu;
          const {
            header,
            footer,
            actions,
            text
          } = generator.generateStructure(languageGenerator);
          const source = {
            isRecorded: true,
            label: languageGenerator.name,
            group: languageGenerator.groupName,
            id: languageGenerator.id,
            text,
            header,
            footer,
            actions,
            language: languageGenerator.highlighter,
            highlight: []
          };
          source.revealLine = text.split("\n").length - 1;
          this._recorderSources.push(source);
          if (languageGenerator === this._orderedLanguages[0])
            (_this$_throttledOutpu = this._throttledOutputFile) === null || _this$_throttledOutpu === undefined || _this$_throttledOutpu.setContent(source.text);
        }
        this.emit(ContextRecorder.Events.Change, {
          sources: this._recorderSources,
          primaryFileName: this._orderedLanguages[0].id
        });
      });
      context.on(_browserContext.BrowserContext.Events.BeforeClose, () => {
        var _this$_throttledOutpu2;
        (_this$_throttledOutpu2 = this._throttledOutputFile) === null || _this$_throttledOutpu2 === undefined || _this$_throttledOutpu2.flush();
      });
      this._listeners.push(_eventsHelper.eventsHelper.addEventListener(process, "exit", () => {
        var _this$_throttledOutpu3;
        (_this$_throttledOutpu3 = this._throttledOutputFile) === null || _this$_throttledOutpu3 === undefined || _this$_throttledOutpu3.flush();
      }));
      this._generator = generator;
    }
    setOutput(codegenId, outputFile) {
      var _this$_generator;
      const languages = new Set([new _java.JavaLanguageGenerator("junit"), new _java.JavaLanguageGenerator("library"), new _javascript.JavaScriptLanguageGenerator(false), new _javascript.JavaScriptLanguageGenerator(true), new _python.PythonLanguageGenerator(false, true), new _python.PythonLanguageGenerator(false, false), new _python.PythonLanguageGenerator(true, false), new _csharp.CSharpLanguageGenerator("mstest"), new _csharp.CSharpLanguageGenerator("nunit"), new _csharp.CSharpLanguageGenerator("library"), new _jsonl.JsonlLanguageGenerator]);
      const primaryLanguage = [...languages].find((l) => l.id === codegenId);
      if (!primaryLanguage)
        throw new Error(`\n===============================\nUnsupported language: '${codegenId}'\n===============================\n`);
      languages.delete(primaryLanguage);
      this._orderedLanguages = [primaryLanguage, ...languages];
      this._throttledOutputFile = outputFile ? new ThrottledFile(outputFile) : null;
      (_this$_generator = this._generator) === null || _this$_generator === undefined || _this$_generator.restart();
    }
    languageName(id) {
      for (const lang of this._orderedLanguages) {
        if (!id || lang.id === id)
          return lang.highlighter;
      }
      return "javascript";
    }
    async install() {
      this._context.on(_browserContext.BrowserContext.Events.Page, (page) => this._onPage(page));
      for (const page of this._context.pages())
        this._onPage(page);
      this._context.on(_browserContext.BrowserContext.Events.Dialog, (dialog) => this._onDialog(dialog.page()));
      await this._context.exposeBinding("__pw_recorderPerformAction", false, (source, action) => this._performAction(source.frame, action));
      await this._context.exposeBinding("__pw_recorderRecordAction", false, (source, action) => this._recordAction(source.frame, action));
      await this._context.extendInjectedScript(recorderSource.source);
    }
    setEnabled(enabled) {
      this._generator.setEnabled(enabled);
    }
    dispose() {
      for (const timer of this._timers)
        clearTimeout(timer);
      this._timers.clear();
      _eventsHelper.eventsHelper.removeEventListeners(this._listeners);
    }
    async _onPage(page) {
      const frame = page.mainFrame();
      page.on("close", () => {
        this._generator.addAction({
          frame: this._describeMainFrame(page),
          committed: true,
          action: {
            name: "closePage",
            signals: []
          }
        });
        this._pageAliases.delete(page);
      });
      frame.on(_frames.Frame.Events.InternalNavigation, (event) => {
        if (event.isPublic)
          this._onFrameNavigated(frame, page);
      });
      page.on(_page.Page.Events.Download, () => this._onDownload(page));
      const suffix = this._pageAliases.size ? String(++this._lastPopupOrdinal) : "";
      const pageAlias = "page" + suffix;
      this._pageAliases.set(page, pageAlias);
      if (page.opener()) {
        this._onPopup(page.opener(), page);
      } else {
        this._generator.addAction({
          frame: this._describeMainFrame(page),
          committed: true,
          action: {
            name: "openPage",
            url: page.mainFrame().url(),
            signals: []
          }
        });
      }
    }
    clearScript() {
      this._generator.restart();
      if (this._params.mode === "recording") {
        for (const page of this._context.pages())
          this._onFrameNavigated(page.mainFrame(), page);
      }
    }
    _describeMainFrame(page) {
      return {
        pageAlias: this._pageAliases.get(page),
        isMainFrame: true
      };
    }
    async _describeFrame(frame) {
      const page = frame._page;
      const pageAlias = this._pageAliases.get(page);
      const chain = [];
      for (let ancestor = frame;ancestor; ancestor = ancestor.parentFrame())
        chain.push(ancestor);
      chain.reverse();
      if (chain.length === 1)
        return this._describeMainFrame(page);
      const selectorPromises = [];
      for (let i = 0;i < chain.length - 1; i++)
        selectorPromises.push(findFrameSelector(chain[i + 1]));
      const result = await (0, _timeoutRunner.raceAgainstDeadline)(() => Promise.all(selectorPromises), (0, _utils2.monotonicTime)() + 2000);
      if (!result.timedOut && result.result.every((selector) => !!selector)) {
        return {
          pageAlias,
          isMainFrame: false,
          selectorsChain: result.result
        };
      }
      const selectorsChain = [];
      for (let i = 0;i < chain.length - 1; i++) {
        if (chain[i].name())
          selectorsChain.push(`iframe[name=${(0, _stringUtils.quoteCSSAttributeValue)(chain[i].name())}]`);
        else
          selectorsChain.push(`iframe[src=${(0, _stringUtils.quoteCSSAttributeValue)(chain[i].url())}]`);
      }
      return {
        pageAlias,
        isMainFrame: false,
        selectorsChain
      };
    }
    testIdAttributeName() {
      return this._params.testIdAttributeName || this._context.selectors().testIdAttributeName() || "data-testid";
    }
    async _performAction(frame, action) {
      this._generator.commitLastAction();
      const frameDescription = await this._describeFrame(frame);
      const actionInContext = {
        frame: frameDescription,
        action
      };
      const perform = async (action2, params, cb) => {
        const callMetadata = {
          id: `call@${(0, _utils2.createGuid)()}`,
          apiName: "frame." + action2,
          objectId: frame.guid,
          pageId: frame._page.guid,
          frameId: frame.guid,
          startTime: (0, _utils2.monotonicTime)(),
          endTime: 0,
          wallTime: Date.now(),
          type: "Frame",
          method: action2,
          params,
          log: []
        };
        this._generator.willPerformAction(actionInContext);
        try {
          await frame.instrumentation.onBeforeCall(frame, callMetadata);
          await cb(callMetadata);
        } catch (e) {
          callMetadata.endTime = (0, _utils2.monotonicTime)();
          await frame.instrumentation.onAfterCall(frame, callMetadata);
          this._generator.performedActionFailed(actionInContext);
          return;
        }
        callMetadata.endTime = (0, _utils2.monotonicTime)();
        await frame.instrumentation.onAfterCall(frame, callMetadata);
        this._setCommittedAfterTimeout(actionInContext);
        this._generator.didPerformAction(actionInContext);
      };
      const kActionTimeout = 5000;
      if (action.name === "click") {
        const {
          options
        } = (0, _utils.toClickOptions)(action);
        await perform("click", {
          selector: action.selector
        }, (callMetadata) => frame.click(callMetadata, action.selector, {
          ...options,
          timeout: kActionTimeout,
          strict: true
        }));
      }
      if (action.name === "press") {
        const modifiers = (0, _utils.toModifiers)(action.modifiers);
        const shortcut = [...modifiers, action.key].join("+");
        await perform("press", {
          selector: action.selector,
          key: shortcut
        }, (callMetadata) => frame.press(callMetadata, action.selector, shortcut, {
          timeout: kActionTimeout,
          strict: true
        }));
      }
      if (action.name === "check")
        await perform("check", {
          selector: action.selector
        }, (callMetadata) => frame.check(callMetadata, action.selector, {
          timeout: kActionTimeout,
          strict: true
        }));
      if (action.name === "uncheck")
        await perform("uncheck", {
          selector: action.selector
        }, (callMetadata) => frame.uncheck(callMetadata, action.selector, {
          timeout: kActionTimeout,
          strict: true
        }));
      if (action.name === "select") {
        const values = action.options.map((value) => ({
          value
        }));
        await perform("selectOption", {
          selector: action.selector,
          values
        }, (callMetadata) => frame.selectOption(callMetadata, action.selector, [], values, {
          timeout: kActionTimeout,
          strict: true
        }));
      }
    }
    async _recordAction(frame, action) {
      this._generator.commitLastAction();
      const frameDescription = await this._describeFrame(frame);
      const actionInContext = {
        frame: frameDescription,
        action
      };
      this._setCommittedAfterTimeout(actionInContext);
      this._generator.addAction(actionInContext);
    }
    _setCommittedAfterTimeout(actionInContext) {
      const timer = setTimeout(() => {
        actionInContext.committed = true;
        this._timers.delete(timer);
      }, (0, _utils2.isUnderTest)() ? 500 : 5000);
      this._timers.add(timer);
    }
    _onFrameNavigated(frame, page) {
      const pageAlias = this._pageAliases.get(page);
      this._generator.signal(pageAlias, frame, {
        name: "navigation",
        url: frame.url()
      });
    }
    _onPopup(page, popup) {
      const pageAlias = this._pageAliases.get(page);
      const popupAlias = this._pageAliases.get(popup);
      this._generator.signal(pageAlias, page.mainFrame(), {
        name: "popup",
        popupAlias
      });
    }
    _onDownload(page) {
      const pageAlias = this._pageAliases.get(page);
      ++this._lastDownloadOrdinal;
      this._generator.signal(pageAlias, page.mainFrame(), {
        name: "download",
        downloadAlias: this._lastDownloadOrdinal ? String(this._lastDownloadOrdinal) : ""
      });
    }
    _onDialog(page) {
      const pageAlias = this._pageAliases.get(page);
      ++this._lastDialogOrdinal;
      this._generator.signal(pageAlias, page.mainFrame(), {
        name: "dialog",
        dialogAlias: this._lastDialogOrdinal ? String(this._lastDialogOrdinal) : ""
      });
    }
  }
  ContextRecorder.Events = {
    Change: "change"
  };

  class ThrottledFile {
    constructor(file) {
      this._file = undefined;
      this._timer = undefined;
      this._text = undefined;
      this._file = file;
    }
    setContent(text) {
      this._text = text;
      if (!this._timer)
        this._timer = setTimeout(() => this.flush(), 250);
    }
    flush() {
      if (this._timer) {
        clearTimeout(this._timer);
        this._timer = undefined;
      }
      if (this._text)
        fs.writeFileSync(this._file, this._text);
      this._text = undefined;
    }
  }
});

// node_modules/playwright-core/lib/server/browserContext.js
var require_browserContext = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var assertBrowserContextIsNotOwned = function(context) {
    for (const page of context.pages()) {
      if (page._ownedContext)
        throw new Error("Please use browser.newContext() for multi-page scripts that share the context.");
    }
  };
  var validateBrowserContextOptions = function(options, browserOptions) {
    if (options.noDefaultViewport && options.deviceScaleFactor !== undefined)
      throw new Error(`"deviceScaleFactor" option is not supported with null "viewport"`);
    if (options.noDefaultViewport && !!options.isMobile)
      throw new Error(`"isMobile" option is not supported with null "viewport"`);
    if (options.acceptDownloads === undefined)
      options.acceptDownloads = "accept";
    if (!options.viewport && !options.noDefaultViewport)
      options.viewport = {
        width: 1280,
        height: 720
      };
    if (options.recordVideo) {
      if (!options.recordVideo.size) {
        if (options.noDefaultViewport) {
          options.recordVideo.size = {
            width: 800,
            height: 600
          };
        } else {
          const size = options.viewport;
          const scale = Math.min(1, 800 / Math.max(size.width, size.height));
          options.recordVideo.size = {
            width: Math.floor(size.width * scale),
            height: Math.floor(size.height * scale)
          };
        }
      }
      options.recordVideo.size.width &= ~1;
      options.recordVideo.size.height &= ~1;
    }
    if (options.proxy) {
      if (!browserOptions.proxy && browserOptions.isChromium && os.platform() === "win32")
        throw new Error(`Browser needs to be launched with the global proxy. If all contexts override the proxy, global proxy will be never used and can be any string, for example "launch({ proxy: { server: 'http://per-context' } })"`);
      options.proxy = normalizeProxySettings(options.proxy);
    }
    verifyGeolocation(options.geolocation);
  };
  var verifyGeolocation = function(geolocation) {
    if (!geolocation)
      return;
    geolocation.accuracy = geolocation.accuracy || 0;
    const {
      longitude,
      latitude,
      accuracy
    } = geolocation;
    if (longitude < -180 || longitude > 180)
      throw new Error(`geolocation.longitude: precondition -180 <= LONGITUDE <= 180 failed.`);
    if (latitude < -90 || latitude > 90)
      throw new Error(`geolocation.latitude: precondition -90 <= LATITUDE <= 90 failed.`);
    if (accuracy < 0)
      throw new Error(`geolocation.accuracy: precondition 0 <= ACCURACY failed.`);
  };
  var normalizeProxySettings = function(proxy) {
    let {
      server,
      bypass
    } = proxy;
    let url;
    try {
      url = new URL(server);
      if (!url.host || !url.protocol)
        url = new URL("http://" + server);
    } catch (e) {
      url = new URL("http://" + server);
    }
    if (url.protocol === "socks4:" && (proxy.username || proxy.password))
      throw new Error(`Socks4 proxy protocol does not support authentication`);
    if (url.protocol === "socks5:" && (proxy.username || proxy.password))
      throw new Error(`Browser does not support socks5 proxy authentication`);
    server = url.protocol + "//" + url.host;
    if (bypass)
      bypass = bypass.split(",").map((t) => t.trim()).join(",");
    return {
      ...proxy,
      server,
      bypass
    };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BrowserContext = undefined;
  exports.assertBrowserContextIsNotOwned = assertBrowserContextIsNotOwned;
  exports.normalizeProxySettings = normalizeProxySettings;
  exports.validateBrowserContextOptions = validateBrowserContextOptions;
  exports.verifyGeolocation = verifyGeolocation;
  var os = _interopRequireWildcard(import.meta.require("os"));
  var _timeoutSettings = require_timeoutSettings();
  var _utils = require_utils3();
  var _fileUtils = require_fileUtils();
  var _helper = require_helper();
  var network = _interopRequireWildcard(require_network2());
  var _page6 = require_page();
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _instrumentation = require_instrumentation();
  var _debugger = require_debugger();
  var _tracing = require_tracing();
  var _harRecorder = require_harRecorder();
  var _recorder = require_recorder();
  var consoleApiSource = _interopRequireWildcard(require_consoleApiSource());
  var _fetch = require_fetch();

  class BrowserContext extends _instrumentation.SdkObject {
    constructor(browser, options, browserContextId) {
      super(browser, "browser-context");
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings;
      this._pageBindings = new Map;
      this._activeProgressControllers = new Set;
      this._options = undefined;
      this._requestInterceptor = undefined;
      this._isPersistentContext = undefined;
      this._closedStatus = "open";
      this._closePromise = undefined;
      this._closePromiseFulfill = undefined;
      this._permissions = new Map;
      this._downloads = new Set;
      this._browser = undefined;
      this._browserContextId = undefined;
      this._selectors = undefined;
      this._origins = new Set;
      this._harRecorders = new Map;
      this.tracing = undefined;
      this.fetchRequest = undefined;
      this._customCloseHandler = undefined;
      this._tempDirs = [];
      this._settingStorageState = false;
      this.initScripts = [];
      this._routesInFlight = new Set;
      this._debugger = undefined;
      this._closeReason = undefined;
      this.attribution.context = this;
      this._browser = browser;
      this._options = options;
      this._browserContextId = browserContextId;
      this._isPersistentContext = !browserContextId;
      this._closePromise = new Promise((fulfill) => this._closePromiseFulfill = fulfill);
      this.fetchRequest = new _fetch.BrowserContextAPIRequestContext(this);
      if (this._options.recordHar)
        this._harRecorders.set("", new _harRecorder.HarRecorder(this, null, this._options.recordHar));
      this.tracing = new _tracing.Tracing(this, browser.options.tracesDir);
    }
    isPersistentContext() {
      return this._isPersistentContext;
    }
    setSelectors(selectors) {
      this._selectors = selectors;
    }
    selectors() {
      return this._selectors || this.attribution.playwright.selectors;
    }
    async _initialize() {
      if (this.attribution.playwright.options.isInternalPlaywright)
        return;
      this._debugger = new _debugger.Debugger(this);
      if ((0, _utils.debugMode)() === "inspector")
        await _recorder.Recorder.show(this, {
          pauseOnNextStatement: true
        });
      if (this._debugger.isPaused())
        _recorder.Recorder.showInspector(this);
      this._debugger.on(_debugger.Debugger.Events.PausedStateChanged, () => {
        _recorder.Recorder.showInspector(this);
      });
      if ((0, _utils.debugMode)() === "console")
        await this.extendInjectedScript(consoleApiSource.source);
      if (this._options.serviceWorkers === "block")
        await this.addInitScript(`\nnavigator.serviceWorker.register = async () => { console.warn('Service Worker registration blocked by Playwright'); };\n`);
      if (this._options.permissions)
        await this.grantPermissions(this._options.permissions);
    }
    debugger() {
      return this._debugger;
    }
    async _ensureVideosPath() {
      if (this._options.recordVideo)
        await (0, _fileUtils.mkdirIfNeeded)(_path.default.join(this._options.recordVideo.dir, "dummy"));
    }
    canResetForReuse() {
      if (this._closedStatus !== "open")
        return false;
      return true;
    }
    async stopPendingOperations(reason) {
      for (const controller of this._activeProgressControllers)
        controller.abort(new Error(reason));
      await new Promise((f) => setTimeout(f, 0));
    }
    static reusableContextHash(params) {
      const paramsCopy = {
        ...params
      };
      for (const k of Object.keys(paramsCopy)) {
        const key = k;
        if (paramsCopy[key] === defaultNewContextParamValues[key])
          delete paramsCopy[key];
      }
      for (const key of paramsThatAllowContextReuse)
        delete paramsCopy[key];
      return JSON.stringify(paramsCopy);
    }
    async resetForReuse(metadata, params) {
      var _page, _page2, _page3, _page4, _page5;
      this.setDefaultNavigationTimeout(undefined);
      this.setDefaultTimeout(undefined);
      this.tracing.resetForReuse();
      if (params) {
        for (const key of paramsThatAllowContextReuse)
          this._options[key] = params[key];
      }
      await this._cancelAllRoutesInFlight();
      let page = this.pages()[0];
      const [, ...otherPages] = this.pages();
      for (const p of otherPages)
        await p.close(metadata);
      if (page && page.hasCrashed()) {
        await page.close(metadata);
        page = undefined;
      }
      (_page = page) === null || _page === undefined || _page._frameManager.setCloseAllOpeningDialogs(true);
      await ((_page2 = page) === null || _page2 === undefined ? undefined : _page2._frameManager.closeOpenDialogs());
      await ((_page3 = page) === null || _page3 === undefined ? undefined : _page3.mainFrame().goto(metadata, "about:blank", {
        timeout: 0
      }));
      (_page4 = page) === null || _page4 === undefined || _page4._frameManager.setCloseAllOpeningDialogs(false);
      await this._resetStorage();
      await this._removeExposedBindings();
      await this._removeInitScripts();
      if (this._options.permissions)
        await this.grantPermissions(this._options.permissions);
      else
        await this.clearPermissions();
      await this.setExtraHTTPHeaders(this._options.extraHTTPHeaders || []);
      await this.setGeolocation(this._options.geolocation);
      await this.setOffline(!!this._options.offline);
      await this.setUserAgent(this._options.userAgent);
      await this.clearCache();
      await this._resetCookies();
      await ((_page5 = page) === null || _page5 === undefined ? undefined : _page5.resetForReuse(metadata));
    }
    _browserClosed() {
      for (const page of this.pages())
        page._didClose();
      this._didCloseInternal();
    }
    _didCloseInternal() {
      if (this._closedStatus === "closed") {
        return;
      }
      this.tracing.abort();
      if (this._isPersistentContext)
        this.onClosePersistent();
      this._closePromiseFulfill(new Error("Context closed"));
      this.emit(BrowserContext.Events.Close);
    }
    async cookies(urls = []) {
      if (urls && !Array.isArray(urls))
        urls = [urls];
      return await this.doGetCookies(urls);
    }
    async clearCookies(options) {
      const currentCookies = await this.cookies();
      await this.doClearCookies();
      const matches = (cookie, prop, value) => {
        if (!value)
          return true;
        if (value instanceof RegExp) {
          value.lastIndex = 0;
          return value.test(cookie[prop]);
        }
        return cookie[prop] === value;
      };
      const cookiesToReadd = currentCookies.filter((cookie) => {
        return !matches(cookie, "name", options.name) || !matches(cookie, "domain", options.domain) || !matches(cookie, "path", options.path);
      });
      await this.addCookies(cookiesToReadd);
    }
    setHTTPCredentials(httpCredentials) {
      return this.doSetHTTPCredentials(httpCredentials);
    }
    async exposeBinding(name, needsHandle, playwrightBinding) {
      if (this._pageBindings.has(name))
        throw new Error(`Function "${name}" has been already registered`);
      for (const page of this.pages()) {
        if (page.getBinding(name))
          throw new Error(`Function "${name}" has been already registered in one of the pages`);
      }
      const binding = new _page6.PageBinding(name, playwrightBinding, needsHandle);
      this._pageBindings.set(name, binding);
      await this.doExposeBinding(binding);
    }
    async _removeExposedBindings() {
      for (const key of this._pageBindings.keys()) {
        if (!key.startsWith("__pw"))
          this._pageBindings.delete(key);
      }
      await this.doRemoveExposedBindings();
    }
    async grantPermissions(permissions, origin) {
      let resolvedOrigin = "*";
      if (origin) {
        const url = new URL(origin);
        resolvedOrigin = url.origin;
      }
      const existing = new Set(this._permissions.get(resolvedOrigin) || []);
      permissions.forEach((p) => existing.add(p));
      const list = [...existing.values()];
      this._permissions.set(resolvedOrigin, list);
      await this.doGrantPermissions(resolvedOrigin, list);
    }
    async clearPermissions() {
      this._permissions.clear();
      await this.doClearPermissions();
    }
    setDefaultNavigationTimeout(timeout) {
      this._timeoutSettings.setDefaultNavigationTimeout(timeout);
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
    }
    async _loadDefaultContextAsIs(progress2) {
      if (!this.pages().length) {
        const waitForEvent = _helper.helper.waitForEvent(progress2, this, BrowserContext.Events.Page);
        progress2.cleanupWhenAborted(() => waitForEvent.dispose);
        const page = await waitForEvent.promise;
        if (page._pageIsError)
          throw page._pageIsError;
      }
      const pages = this.pages();
      if (pages[0]._pageIsError)
        throw pages[0]._pageIsError;
      await pages[0].mainFrame()._waitForLoadState(progress2, "load");
      return pages;
    }
    async _loadDefaultContext(progress2) {
      const pages = await this._loadDefaultContextAsIs(progress2);
      const browserName = this._browser.options.name;
      if (this._options.isMobile && browserName === "chromium" || this._options.locale && browserName === "webkit") {
        const oldPage = pages[0];
        await this.newPage(progress2.metadata);
        await oldPage.close(progress2.metadata);
      }
    }
    _authenticateProxyViaHeader() {
      const proxy = this._options.proxy || this._browser.options.proxy || {
        username: undefined,
        password: undefined
      };
      const {
        username,
        password
      } = proxy;
      if (username) {
        this._options.httpCredentials = {
          username,
          password
        };
        const token = Buffer.from(`${username}:${password}`).toString("base64");
        this._options.extraHTTPHeaders = network.mergeHeaders([this._options.extraHTTPHeaders, network.singleHeader("Proxy-Authorization", `Basic ${token}`)]);
      }
    }
    _authenticateProxyViaCredentials() {
      const proxy = this._options.proxy || this._browser.options.proxy;
      if (!proxy)
        return;
      const {
        username,
        password
      } = proxy;
      if (username)
        this._options.httpCredentials = {
          username,
          password: password || ""
        };
    }
    async addInitScript(script) {
      this.initScripts.push(script);
      await this.doAddInitScript(script);
    }
    async _removeInitScripts() {
      this.initScripts.splice(0, this.initScripts.length);
      await this.doRemoveInitScripts();
    }
    async setRequestInterceptor(handler) {
      this._requestInterceptor = handler;
      await this.doUpdateRequestInterception();
    }
    isClosingOrClosed() {
      return this._closedStatus !== "open";
    }
    async _deleteAllDownloads() {
      await Promise.all(Array.from(this._downloads).map((download) => download.artifact.deleteOnContextClose()));
    }
    async _deleteAllTempDirs() {
      await Promise.all(this._tempDirs.map(async (dir) => await _fs.default.promises.unlink(dir).catch((e) => {
      })));
    }
    setCustomCloseHandler(handler) {
      this._customCloseHandler = handler;
    }
    async close(options) {
      if (this._closedStatus === "open") {
        if (options.reason)
          this._closeReason = options.reason;
        this.emit(BrowserContext.Events.BeforeClose);
        this._closedStatus = "closing";
        for (const harRecorder of this._harRecorders.values())
          await harRecorder.flush();
        await this.tracing.flush();
        const promises = [];
        for (const {
          context,
          artifact
        } of this._browser._idToVideo.values()) {
          if (context === this)
            promises.push(artifact.finishedPromise());
        }
        if (this._customCloseHandler) {
          await this._customCloseHandler();
        } else {
          await this.doClose(options.reason);
        }
        promises.push(this._deleteAllDownloads());
        promises.push(this._deleteAllTempDirs());
        await Promise.all(promises);
        if (!this._customCloseHandler)
          this._didCloseInternal();
      }
      await this._closePromise;
    }
    async newPage(metadata) {
      const pageDelegate = await this.newPageDelegate();
      if (metadata.isServerSide)
        pageDelegate.potentiallyUninitializedPage().markAsServerSideOnly();
      const pageOrError = await pageDelegate.pageOrError();
      if (pageOrError instanceof _page6.Page) {
        if (pageOrError.isClosed())
          throw new Error("Page has been closed.");
        return pageOrError;
      }
      throw pageOrError;
    }
    addVisitedOrigin(origin) {
      this._origins.add(origin);
    }
    async storageState() {
      const result = {
        cookies: await this.cookies(),
        origins: []
      };
      const originsToSave = new Set(this._origins);
      for (const page of this.pages()) {
        const origin = page.mainFrame().origin();
        if (!origin || !originsToSave.has(origin))
          continue;
        try {
          const storage = await page.mainFrame().nonStallingEvaluateInExistingContext(`({
          localStorage: Object.keys(localStorage).map(name => ({ name, value: localStorage.getItem(name) })),
        })`, false, "utility");
          if (storage.localStorage.length)
            result.origins.push({
              origin,
              localStorage: storage.localStorage
            });
          originsToSave.delete(origin);
        } catch {
        }
      }
      if (originsToSave.size) {
        const internalMetadata = (0, _instrumentation.serverSideCallMetadata)();
        const page = await this.newPage(internalMetadata);
        await page._setServerRequestInterceptor((handler) => {
          handler.fulfill({
            body: "<html></html>",
            requestUrl: handler.request().url()
          }).catch(() => {
          });
          return true;
        });
        for (const origin of originsToSave) {
          const originStorage = {
            origin,
            localStorage: []
          };
          const frame = page.mainFrame();
          await frame.goto(internalMetadata, origin);
          const storage = await frame.evaluateExpression(`({
          localStorage: Object.keys(localStorage).map(name => ({ name, value: localStorage.getItem(name) })),
        })`, {
            world: "utility"
          });
          originStorage.localStorage = storage.localStorage;
          if (storage.localStorage.length)
            result.origins.push(originStorage);
        }
        await page.close(internalMetadata);
      }
      return result;
    }
    async _resetStorage() {
      var _this$_options$storag;
      const oldOrigins = this._origins;
      const newOrigins = new Map(((_this$_options$storag = this._options.storageState) === null || _this$_options$storag === undefined || (_this$_options$storag = _this$_options$storag.origins) === null || _this$_options$storag === undefined ? undefined : _this$_options$storag.map((p) => [p.origin, p])) || []);
      if (!oldOrigins.size && !newOrigins.size)
        return;
      let page = this.pages()[0];
      const internalMetadata = (0, _instrumentation.serverSideCallMetadata)();
      page = page || await this.newPage({
        ...internalMetadata,
        isServerSide: false
      });
      await page._setServerRequestInterceptor((handler) => {
        handler.fulfill({
          body: "<html></html>",
          requestUrl: handler.request().url()
        }).catch(() => {
        });
        return true;
      });
      for (const origin of new Set([...oldOrigins, ...newOrigins.keys()])) {
        const frame = page.mainFrame();
        await frame.goto(internalMetadata, origin);
        await frame.resetStorageForCurrentOriginBestEffort(newOrigins.get(origin));
      }
      await page._setServerRequestInterceptor(undefined);
      this._origins = new Set([...newOrigins.keys()]);
    }
    async _resetCookies() {
      var _this$_options$storag2, _this$_options$storag3;
      await this.doClearCookies();
      if ((_this$_options$storag2 = this._options.storageState) !== null && _this$_options$storag2 !== undefined && _this$_options$storag2.cookies)
        await this.addCookies((_this$_options$storag3 = this._options.storageState) === null || _this$_options$storag3 === undefined ? undefined : _this$_options$storag3.cookies);
    }
    isSettingStorageState() {
      return this._settingStorageState;
    }
    async setStorageState(metadata, state) {
      this._settingStorageState = true;
      try {
        if (state.cookies)
          await this.addCookies(state.cookies);
        if (state.origins && state.origins.length) {
          const internalMetadata = (0, _instrumentation.serverSideCallMetadata)();
          const page = await this.newPage(internalMetadata);
          await page._setServerRequestInterceptor((handler) => {
            handler.fulfill({
              body: "<html></html>",
              requestUrl: handler.request().url()
            }).catch(() => {
            });
            return true;
          });
          for (const originState of state.origins) {
            const frame = page.mainFrame();
            await frame.goto(metadata, originState.origin);
            await frame.evaluateExpression(`
            originState => {
              for (const { name, value } of (originState.localStorage || []))
                localStorage.setItem(name, value);
            }`, {
              isFunction: true,
              world: "utility"
            }, originState);
          }
          await page.close(internalMetadata);
        }
      } finally {
        this._settingStorageState = false;
      }
    }
    async extendInjectedScript(source, arg) {
      const installInFrame = (frame) => frame.extendInjectedScript(source, arg).catch(() => {
      });
      const installInPage = (page) => {
        page.on(_page6.Page.Events.InternalFrameNavigatedToNewDocument, installInFrame);
        return Promise.all(page.frames().map(installInFrame));
      };
      this.on(BrowserContext.Events.Page, installInPage);
      return Promise.all(this.pages().map(installInPage));
    }
    async _harStart(page, options) {
      const harId = (0, _utils.createGuid)();
      this._harRecorders.set(harId, new _harRecorder.HarRecorder(this, page, options));
      return harId;
    }
    async _harExport(harId) {
      const recorder = this._harRecorders.get(harId || "");
      return recorder.export();
    }
    addRouteInFlight(route) {
      this._routesInFlight.add(route);
    }
    removeRouteInFlight(route) {
      this._routesInFlight.delete(route);
    }
    async _cancelAllRoutesInFlight() {
      await Promise.all([...this._routesInFlight].map((r) => r.abort())).catch(() => {
      });
      this._routesInFlight.clear();
    }
  }
  exports.BrowserContext = BrowserContext;
  BrowserContext.Events = {
    Console: "console",
    Close: "close",
    Dialog: "dialog",
    Page: "page",
    PageError: "pageerror",
    Request: "request",
    Response: "response",
    RequestFailed: "requestfailed",
    RequestFinished: "requestfinished",
    RequestAborted: "requestaborted",
    RequestFulfilled: "requestfulfilled",
    RequestContinued: "requestcontinued",
    BeforeClose: "beforeclose",
    VideoStarted: "videostarted"
  };
  var paramsThatAllowContextReuse = ["colorScheme", "forcedColors", "reducedMotion", "screen", "userAgent", "viewport"];
  var defaultNewContextParamValues = {
    noDefaultViewport: false,
    ignoreHTTPSErrors: false,
    javaScriptEnabled: true,
    bypassCSP: false,
    offline: false,
    isMobile: false,
    hasTouch: false,
    acceptDownloads: "accept",
    strictSelectors: false,
    serviceWorkers: "allow",
    locale: "en-US"
  };
});

// node_modules/playwright-core/lib/server/cookieStore.js
var require_cookieStore = __commonJS((exports) => {
  var domainMatches = function(value, domain) {
    if (value === domain)
      return true;
    if (!domain.startsWith("."))
      return false;
    value = "." + value;
    return value.endsWith(domain);
  };
  var pathMatches = function(value, path) {
    if (value === path)
      return true;
    if (!value.endsWith("/"))
      value = value + "/";
    if (!path.endsWith("/"))
      path = path + "/";
    return value.startsWith(path);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CookieStore = undefined;
  exports.domainMatches = domainMatches;

  class Cookie {
    constructor(data) {
      this._raw = undefined;
      this._raw = data;
    }
    name() {
      return this._raw.name;
    }
    matches(url) {
      if (this._raw.secure && url.protocol !== "https:" && url.hostname !== "localhost")
        return false;
      if (!domainMatches(url.hostname, this._raw.domain))
        return false;
      if (!pathMatches(url.pathname, this._raw.path))
        return false;
      return true;
    }
    equals(other) {
      return this._raw.name === other._raw.name && this._raw.domain === other._raw.domain && this._raw.path === other._raw.path;
    }
    networkCookie() {
      return this._raw;
    }
    updateExpiresFrom(other) {
      this._raw.expires = other._raw.expires;
    }
    expired() {
      if (this._raw.expires === -1)
        return false;
      return this._raw.expires * 1000 < Date.now();
    }
  }

  class CookieStore {
    constructor() {
      this._nameToCookies = new Map;
    }
    addCookies(cookies) {
      for (const cookie of cookies)
        this._addCookie(new Cookie(cookie));
    }
    cookies(url) {
      const result = [];
      for (const cookie of this._cookiesIterator()) {
        if (cookie.matches(url))
          result.push(cookie.networkCookie());
      }
      return result;
    }
    allCookies() {
      const result = [];
      for (const cookie of this._cookiesIterator())
        result.push(cookie.networkCookie());
      return result;
    }
    _addCookie(cookie) {
      let set = this._nameToCookies.get(cookie.name());
      if (!set) {
        set = new Set;
        this._nameToCookies.set(cookie.name(), set);
      }
      for (const other of set) {
        if (other.equals(cookie))
          set.delete(other);
      }
      set.add(cookie);
      CookieStore.pruneExpired(set);
    }
    *_cookiesIterator() {
      for (const [name, cookies] of this._nameToCookies) {
        CookieStore.pruneExpired(cookies);
        for (const cookie of cookies)
          yield cookie;
        if (cookies.size === 0)
          this._nameToCookies.delete(name);
      }
    }
    static pruneExpired(cookies) {
      for (const cookie of cookies) {
        if (cookie.expired())
          cookies.delete(cookie);
      }
    }
  }
  exports.CookieStore = CookieStore;
});

// node_modules/playwright-core/lib/server/formData.js
var require_formData = __commonJS((exports) => {
  var generateUniqueBoundaryString = function() {
    const charCodes = [];
    for (let i = 0;i < 16; i++)
      charCodes.push(alphaNumericEncodingMap[Math.floor(Math.random() * alphaNumericEncodingMap.length)]);
    return "----WebKitFormBoundary" + String.fromCharCode(...charCodes);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.MultipartFormData = undefined;
  var _utilsBundle = require_utilsBundle();

  class MultipartFormData {
    constructor() {
      this._boundary = undefined;
      this._chunks = [];
      this._boundary = generateUniqueBoundaryString();
    }
    contentTypeHeader() {
      return `multipart/form-data; boundary=${this._boundary}`;
    }
    addField(name, value) {
      this._beginMultiPartHeader(name);
      this._finishMultiPartHeader();
      this._chunks.push(Buffer.from(value));
      this._finishMultiPartField();
    }
    addFileField(name, value) {
      this._beginMultiPartHeader(name);
      this._chunks.push(Buffer.from(`; filename="${value.name}"`));
      this._chunks.push(Buffer.from(`\r\ncontent-type: ${value.mimeType || _utilsBundle.mime.getType(value.name) || "application/octet-stream"}`));
      this._finishMultiPartHeader();
      this._chunks.push(value.buffer);
      this._finishMultiPartField();
    }
    finish() {
      this._addBoundary(true);
      return Buffer.concat(this._chunks);
    }
    _beginMultiPartHeader(name) {
      this._addBoundary();
      this._chunks.push(Buffer.from(`content-disposition: form-data; name="${name}"`));
    }
    _finishMultiPartHeader() {
      this._chunks.push(Buffer.from(`\r\n\r\n`));
    }
    _finishMultiPartField() {
      this._chunks.push(Buffer.from(`\r\n`));
    }
    _addBoundary(isLastBoundary) {
      this._chunks.push(Buffer.from("--" + this._boundary));
      if (isLastBoundary)
        this._chunks.push(Buffer.from("--"));
      this._chunks.push(Buffer.from("\r\n"));
    }
  }
  exports.MultipartFormData = MultipartFormData;
  var alphaNumericEncodingMap = [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66];
});

// node_modules/playwright-core/lib/server/fetch.js
var require_fetch = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var toHeadersArray = function(rawHeaders) {
    const result = [];
    for (let i = 0;i < rawHeaders.length; i += 2)
      result.push({
        name: rawHeaders[i],
        value: rawHeaders[i + 1]
      });
    return result;
  };
  var parseCookie = function(header) {
    const pairs = header.split(";").filter((s) => s.trim().length > 0).map((p) => {
      let key = "";
      let value2 = "";
      const separatorPos = p.indexOf("=");
      if (separatorPos === -1) {
        key = p.trim();
      } else {
        key = p.slice(0, separatorPos).trim();
        value2 = p.slice(separatorPos + 1).trim();
      }
      return [key, value2];
    });
    if (!pairs.length)
      return null;
    const [name, value] = pairs[0];
    const cookie = {
      name,
      value,
      domain: "",
      path: "",
      expires: -1,
      httpOnly: false,
      secure: false,
      sameSite: "Lax"
    };
    for (let i = 1;i < pairs.length; i++) {
      const [name2, value2] = pairs[i];
      switch (name2.toLowerCase()) {
        case "expires":
          const expiresMs = +new Date(value2);
          if (isFinite(expiresMs)) {
            if (expiresMs <= 0)
              cookie.expires = 0;
            else
              cookie.expires = Math.min(expiresMs / 1000, _network.kMaxCookieExpiresDateInSeconds);
          }
          break;
        case "max-age":
          const maxAgeSec = parseInt(value2, 10);
          if (isFinite(maxAgeSec)) {
            if (maxAgeSec <= 0)
              cookie.expires = 0;
            else
              cookie.expires = Math.min(Date.now() / 1000 + maxAgeSec, _network.kMaxCookieExpiresDateInSeconds);
          }
          break;
        case "domain":
          cookie.domain = value2.toLocaleLowerCase() || "";
          if (cookie.domain && !cookie.domain.startsWith(".") && cookie.domain.includes("."))
            cookie.domain = "." + cookie.domain;
          break;
        case "path":
          cookie.path = value2 || "";
          break;
        case "secure":
          cookie.secure = true;
          break;
        case "httponly":
          cookie.httpOnly = true;
          break;
        case "samesite":
          switch (value2.toLowerCase()) {
            case "none":
              cookie.sameSite = "None";
              break;
            case "lax":
              cookie.sameSite = "Lax";
              break;
            case "strict":
              cookie.sameSite = "Strict";
              break;
          }
          break;
      }
    }
    return cookie;
  };
  var serializePostData = function(params, headers) {
    (0, _utils.assert)((params.postData ? 1 : 0) + (params.jsonData ? 1 : 0) + (params.formData ? 1 : 0) + (params.multipartData ? 1 : 0) <= 1, `Only one of 'data', 'form' or 'multipart' can be specified`);
    if (params.jsonData !== undefined) {
      setHeader(headers, "content-type", "application/json", true);
      return Buffer.from(params.jsonData, "utf8");
    } else if (params.formData) {
      const searchParams = new URLSearchParams;
      for (const {
        name,
        value
      } of params.formData)
        searchParams.append(name, value);
      setHeader(headers, "content-type", "application/x-www-form-urlencoded", true);
      return Buffer.from(searchParams.toString(), "utf8");
    } else if (params.multipartData) {
      const formData = new _formData.MultipartFormData;
      for (const field of params.multipartData) {
        if (field.file)
          formData.addFileField(field.name, field.file);
        else if (field.value)
          formData.addField(field.name, field.value);
      }
      setHeader(headers, "content-type", formData.contentTypeHeader(), true);
      return formData.finish();
    } else if (params.postData !== undefined) {
      setHeader(headers, "content-type", "application/octet-stream", true);
      return params.postData;
    }
    return;
  };
  var setHeader = function(headers, name, value, keepExisting = false) {
    const existing = Object.entries(headers).find((pair) => pair[0].toLowerCase() === name.toLowerCase());
    if (!existing)
      headers[name] = value;
    else if (!keepExisting)
      headers[existing[0]] = value;
  };
  var getHeader = function(headers, name) {
    const existing = Object.entries(headers).find((pair) => pair[0].toLowerCase() === name.toLowerCase());
    return existing ? existing[1] : undefined;
  };
  var removeHeader = function(headers, name) {
    delete headers[name];
  };
  var shouldBypassProxy = function(url, bypass) {
    if (!bypass)
      return false;
    const domains = bypass.split(",").map((s) => {
      s = s.trim();
      if (!s.startsWith("."))
        s = "." + s;
      return s;
    });
    const domain = "." + url.hostname;
    return domains.some((d) => domain.endsWith(d));
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.GlobalAPIRequestContext = exports.BrowserContextAPIRequestContext = exports.APIRequestContext = undefined;
  var http = _interopRequireWildcard(import.meta.require("http"));
  var https = _interopRequireWildcard(import.meta.require("https"));
  var _stream = import.meta.require("stream");
  var _url = _interopRequireDefault(import.meta.require("url"));
  var _zlib = _interopRequireDefault(import.meta.require("zlib"));
  var _timeoutSettings = require_timeoutSettings();
  var _userAgent = require_userAgent();
  var _utils = require_utils3();
  var _utilsBundle = require_utilsBundle();
  var _browserContext = require_browserContext();
  var _cookieStore = require_cookieStore();
  var _formData = require_formData();
  var _happyEyeballs = require_happy_eyeballs();
  var _instrumentation = require_instrumentation();
  var _progress = require_progress();
  var _tracing = require_tracing();
  var _network = require_network2();

  class APIRequestContext extends _instrumentation.SdkObject {
    static findResponseBody(guid) {
      for (const request of APIRequestContext.allInstances) {
        const body = request.fetchResponses.get(guid);
        if (body)
          return body;
      }
      return;
    }
    constructor(parent) {
      super(parent, "request-context");
      this.fetchResponses = new Map;
      this.fetchLog = new Map;
      this._activeProgressControllers = new Set;
      this._closeReason = undefined;
      APIRequestContext.allInstances.add(this);
    }
    _disposeImpl() {
      APIRequestContext.allInstances.delete(this);
      this.fetchResponses.clear();
      this.fetchLog.clear();
      this.emit(APIRequestContext.Events.Dispose);
    }
    disposeResponse(fetchUid) {
      this.fetchResponses.delete(fetchUid);
      this.fetchLog.delete(fetchUid);
    }
    _storeResponseBody(body) {
      const uid = (0, _utils.createGuid)();
      this.fetchResponses.set(uid, body);
      return uid;
    }
    async fetch(params, metadata) {
      var _params$method;
      const defaults = this._defaultOptions();
      const headers = {
        "user-agent": defaults.userAgent,
        accept: "*/*",
        "accept-encoding": "gzip,deflate,br"
      };
      if (defaults.extraHTTPHeaders) {
        for (const {
          name,
          value
        } of defaults.extraHTTPHeaders)
          setHeader(headers, name, value);
      }
      if (params.headers) {
        for (const {
          name,
          value
        } of params.headers)
          setHeader(headers, name, value);
      }
      const requestUrl = new URL(params.url, defaults.baseURL);
      if (params.params) {
        for (const {
          name,
          value
        } of params.params)
          requestUrl.searchParams.set(name, value);
      }
      const method = ((_params$method = params.method) === null || _params$method === undefined ? undefined : _params$method.toUpperCase()) || "GET";
      const proxy = defaults.proxy;
      let agent;
      if (proxy && proxy.server !== "per-context" && !shouldBypassProxy(requestUrl, proxy.bypass)) {
        var _proxyOpts$protocol;
        const proxyOpts = _url.default.parse(proxy.server);
        if ((_proxyOpts$protocol = proxyOpts.protocol) !== null && _proxyOpts$protocol !== undefined && _proxyOpts$protocol.startsWith("socks")) {
          agent = new _utilsBundle.SocksProxyAgent({
            host: proxyOpts.hostname,
            port: proxyOpts.port || undefined
          });
        } else {
          if (proxy.username)
            proxyOpts.auth = `${proxy.username}:${proxy.password || ""}`;
          agent = new _utilsBundle.HttpsProxyAgent(proxyOpts);
        }
      }
      const timeout = defaults.timeoutSettings.timeout(params);
      const deadline = timeout && (0, _utils.monotonicTime)() + timeout;
      const options = {
        method,
        headers,
        agent,
        maxRedirects: params.maxRedirects === 0 ? -1 : params.maxRedirects === undefined ? 20 : params.maxRedirects,
        timeout,
        deadline,
        __testHookLookup: params.__testHookLookup
      };
      if (params.ignoreHTTPSErrors || defaults.ignoreHTTPSErrors)
        options.rejectUnauthorized = false;
      const postData = serializePostData(params, headers);
      if (postData)
        setHeader(headers, "content-length", String(postData.byteLength));
      const controller = new _progress.ProgressController(metadata, this);
      const fetchResponse = await controller.run((progress2) => {
        return this._sendRequest(progress2, requestUrl, options, postData);
      });
      const fetchUid = this._storeResponseBody(fetchResponse.body);
      this.fetchLog.set(fetchUid, controller.metadata.log);
      if (params.failOnStatusCode && (fetchResponse.status < 200 || fetchResponse.status >= 400))
        throw new Error(`${fetchResponse.status} ${fetchResponse.statusText}`);
      return {
        ...fetchResponse,
        fetchUid
      };
    }
    _parseSetCookieHeader(responseUrl, setCookie) {
      if (!setCookie)
        return [];
      const url = new URL(responseUrl);
      const defaultPath = "/" + url.pathname.substr(1).split("/").slice(0, -1).join("/");
      const cookies = [];
      for (const header of setCookie) {
        const cookie = parseCookie(header);
        if (!cookie)
          continue;
        if (!cookie.domain)
          cookie.domain = url.hostname;
        else
          (0, _utils.assert)(cookie.domain.startsWith(".") || !cookie.domain.includes("."));
        if (!(0, _cookieStore.domainMatches)(url.hostname, cookie.domain))
          continue;
        if (!cookie.path || !cookie.path.startsWith("/"))
          cookie.path = defaultPath;
        cookies.push(cookie);
      }
      return cookies;
    }
    async _updateRequestCookieHeader(url, headers) {
      if (getHeader(headers, "cookie") !== undefined)
        return;
      const cookies = await this._cookies(url);
      if (cookies.length) {
        const valueArray = cookies.map((c) => `${c.name}=${c.value}`);
        setHeader(headers, "cookie", valueArray.join("; "));
      }
    }
    async _sendRequest(progress2, url, options, postData) {
      var _getHeader;
      await this._updateRequestCookieHeader(url, options.headers);
      const requestCookies = ((_getHeader = getHeader(options.headers, "cookie")) === null || _getHeader === undefined ? undefined : _getHeader.split(";").map((p) => {
        const [name, value] = p.split("=").map((v) => v.trim());
        return {
          name,
          value
        };
      })) || [];
      const requestEvent = {
        url,
        method: options.method,
        headers: options.headers,
        cookies: requestCookies,
        postData
      };
      this.emit(APIRequestContext.Events.Request, requestEvent);
      return new Promise((fulfill, reject) => {
        const requestConstructor = (url.protocol === "https:" ? https : http).request;
        const agent = options.agent || (url.protocol === "https:" ? _happyEyeballs.httpsHappyEyeballsAgent : _happyEyeballs.httpHappyEyeballsAgent);
        const requestOptions = {
          ...options,
          agent
        };
        const request = requestConstructor(url, requestOptions, async (response) => {
          const notifyRequestFinished = (body2) => {
            const requestFinishedEvent = {
              requestEvent,
              httpVersion: response.httpVersion,
              statusCode: response.statusCode || 0,
              statusMessage: response.statusMessage || "",
              headers: response.headers,
              rawHeaders: response.rawHeaders,
              cookies,
              body: body2
            };
            this.emit(APIRequestContext.Events.RequestFinished, requestFinishedEvent);
          };
          progress2.log(`\u2190 ${response.statusCode} ${response.statusMessage}`);
          for (const [name, value] of Object.entries(response.headers))
            progress2.log(`  ${name}: ${value}`);
          const cookies = this._parseSetCookieHeader(response.url || url.toString(), response.headers["set-cookie"]);
          if (cookies.length) {
            try {
              await this._addCookies(cookies);
            } catch (e) {
              await Promise.all(cookies.map((c) => this._addCookies([c]).catch(() => {
              })));
            }
          }
          if (redirectStatus.includes(response.statusCode) && options.maxRedirects >= 0) {
            if (!options.maxRedirects) {
              reject(new Error("Max redirect count exceeded"));
              request.destroy();
              return;
            }
            const headers = {
              ...options.headers
            };
            removeHeader(headers, `cookie`);
            const status = response.statusCode;
            let method = options.method;
            if ((status === 301 || status === 302) && method === "POST" || status === 303 && !["GET", "HEAD"].includes(method)) {
              method = "GET";
              postData = undefined;
              removeHeader(headers, `content-encoding`);
              removeHeader(headers, `content-language`);
              removeHeader(headers, `content-length`);
              removeHeader(headers, `content-location`);
              removeHeader(headers, `content-type`);
            }
            const redirectOptions = {
              method,
              headers,
              agent: options.agent,
              maxRedirects: options.maxRedirects - 1,
              timeout: options.timeout,
              deadline: options.deadline,
              __testHookLookup: options.__testHookLookup
            };
            if (options.rejectUnauthorized === false)
              redirectOptions.rejectUnauthorized = false;
            if (response.headers.location) {
              let locationURL;
              try {
                locationURL = new URL(response.headers.location, url);
              } catch (error) {
                reject(new Error(`uri requested responds with an invalid redirect URL: ${response.headers.location}`));
                request.destroy();
                return;
              }
              if (headers["host"])
                headers["host"] = locationURL.host;
              notifyRequestFinished();
              fulfill(this._sendRequest(progress2, locationURL, redirectOptions, postData));
              request.destroy();
              return;
            }
          }
          if (response.statusCode === 401 && !getHeader(options.headers, "authorization")) {
            const auth = response.headers["www-authenticate"];
            const credentials = this._getHttpCredentials(url);
            if (auth !== null && auth !== undefined && auth.trim().startsWith("Basic") && credentials) {
              const {
                username,
                password
              } = credentials;
              const encoded = Buffer.from(`${username || ""}:${password || ""}`).toString("base64");
              setHeader(options.headers, "authorization", `Basic ${encoded}`);
              notifyRequestFinished();
              fulfill(this._sendRequest(progress2, url, options, postData));
              request.destroy();
              return;
            }
          }
          response.on("aborted", () => reject(new Error("aborted")));
          const chunks = [];
          const notifyBodyFinished = () => {
            const body2 = Buffer.concat(chunks);
            notifyRequestFinished(body2);
            fulfill({
              url: response.url || url.toString(),
              status: response.statusCode || 0,
              statusText: response.statusMessage || "",
              headers: toHeadersArray(response.rawHeaders),
              body: body2
            });
          };
          let body = response;
          let transform;
          const encoding = response.headers["content-encoding"];
          if (encoding === "gzip" || encoding === "x-gzip") {
            transform = _zlib.default.createGunzip({
              flush: _zlib.default.constants.Z_SYNC_FLUSH,
              finishFlush: _zlib.default.constants.Z_SYNC_FLUSH
            });
          } else if (encoding === "br") {
            transform = _zlib.default.createBrotliDecompress();
          } else if (encoding === "deflate") {
            transform = _zlib.default.createInflate();
          }
          if (transform) {
            const emptyStreamTransform = new SafeEmptyStreamTransform(notifyBodyFinished);
            body = (0, _stream.pipeline)(response, emptyStreamTransform, transform, (e) => {
              if (e)
                reject(new Error(`failed to decompress '${encoding}' encoding: ${e.message}`));
            });
            body.on("error", (e) => reject(new Error(`failed to decompress '${encoding}' encoding: ${e}`)));
          } else {
            body.on("error", reject);
          }
          body.on("data", (chunk) => chunks.push(chunk));
          body.on("end", notifyBodyFinished);
        });
        request.on("error", reject);
        const disposeListener = () => {
          reject(new Error("Request context disposed."));
          request.destroy();
        };
        this.on(APIRequestContext.Events.Dispose, disposeListener);
        request.on("close", () => this.off(APIRequestContext.Events.Dispose, disposeListener));
        progress2.log(`\u2192 ${options.method} ${url.toString()}`);
        if (options.headers) {
          for (const [name, value] of Object.entries(options.headers))
            progress2.log(`  ${name}: ${value}`);
        }
        if (options.deadline) {
          const rejectOnTimeout = () => {
            reject(new Error(`Request timed out after ${options.timeout}ms`));
            request.destroy();
          };
          const remaining = options.deadline - (0, _utils.monotonicTime)();
          if (remaining <= 0) {
            rejectOnTimeout();
            return;
          }
          request.setTimeout(remaining, rejectOnTimeout);
        }
        if (postData)
          request.write(postData);
        request.end();
      });
    }
    _getHttpCredentials(url) {
      var _this$_defaultOptions, _this$_defaultOptions2;
      if (!((_this$_defaultOptions = this._defaultOptions().httpCredentials) !== null && _this$_defaultOptions !== undefined && _this$_defaultOptions.origin) || url.origin.toLowerCase() === ((_this$_defaultOptions2 = this._defaultOptions().httpCredentials) === null || _this$_defaultOptions2 === undefined || (_this$_defaultOptions2 = _this$_defaultOptions2.origin) === null || _this$_defaultOptions2 === undefined ? undefined : _this$_defaultOptions2.toLowerCase()))
        return this._defaultOptions().httpCredentials;
      return;
    }
  }
  exports.APIRequestContext = APIRequestContext;
  APIRequestContext.Events = {
    Dispose: "dispose",
    Request: "request",
    RequestFinished: "requestfinished"
  };
  APIRequestContext.allInstances = new Set;

  class SafeEmptyStreamTransform extends _stream.Transform {
    constructor(onEmptyStreamCallback) {
      super();
      this._receivedSomeData = false;
      this._onEmptyStreamCallback = undefined;
      this._onEmptyStreamCallback = onEmptyStreamCallback;
    }
    _transform(chunk, encoding, callback) {
      this._receivedSomeData = true;
      callback(null, chunk);
    }
    _flush(callback) {
      if (this._receivedSomeData)
        callback(null);
      else
        this._onEmptyStreamCallback();
    }
  }

  class BrowserContextAPIRequestContext extends APIRequestContext {
    constructor(context) {
      super(context);
      this._context = undefined;
      this._context = context;
      context.once(_browserContext.BrowserContext.Events.Close, () => this._disposeImpl());
    }
    tracing() {
      return this._context.tracing;
    }
    async dispose() {
      this.fetchResponses.clear();
    }
    _defaultOptions() {
      return {
        userAgent: this._context._options.userAgent || this._context._browser.userAgent(),
        extraHTTPHeaders: this._context._options.extraHTTPHeaders,
        httpCredentials: this._context._options.httpCredentials,
        proxy: this._context._options.proxy || this._context._browser.options.proxy,
        timeoutSettings: this._context._timeoutSettings,
        ignoreHTTPSErrors: this._context._options.ignoreHTTPSErrors,
        baseURL: this._context._options.baseURL
      };
    }
    async _addCookies(cookies) {
      await this._context.addCookies(cookies);
    }
    async _cookies(url) {
      return await this._context.cookies(url.toString());
    }
    async storageState() {
      return this._context.storageState();
    }
  }
  exports.BrowserContextAPIRequestContext = BrowserContextAPIRequestContext;

  class GlobalAPIRequestContext extends APIRequestContext {
    constructor(playwright, options) {
      super(playwright);
      this._cookieStore = new _cookieStore.CookieStore;
      this._options = undefined;
      this._origins = undefined;
      this._tracing = undefined;
      this.attribution.context = this;
      const timeoutSettings = new _timeoutSettings.TimeoutSettings;
      if (options.timeout !== undefined)
        timeoutSettings.setDefaultTimeout(options.timeout);
      const proxy = options.proxy;
      if (proxy !== null && proxy !== undefined && proxy.server) {
        let url = proxy === null || proxy === undefined ? undefined : proxy.server.trim();
        if (!/^\w+:\/\//.test(url))
          url = "http://" + url;
        proxy.server = url;
      }
      if (options.storageState) {
        this._origins = options.storageState.origins;
        this._cookieStore.addCookies(options.storageState.cookies || []);
      }
      this._options = {
        baseURL: options.baseURL,
        userAgent: options.userAgent || (0, _userAgent.getUserAgent)(),
        extraHTTPHeaders: options.extraHTTPHeaders,
        ignoreHTTPSErrors: !!options.ignoreHTTPSErrors,
        httpCredentials: options.httpCredentials,
        proxy,
        timeoutSettings
      };
      this._tracing = new _tracing.Tracing(this, options.tracesDir);
    }
    tracing() {
      return this._tracing;
    }
    async dispose() {
      await this._tracing.flush();
      await this._tracing.deleteTmpTracesDir();
      this._disposeImpl();
    }
    _defaultOptions() {
      return this._options;
    }
    async _addCookies(cookies) {
      this._cookieStore.addCookies(cookies);
    }
    async _cookies(url) {
      return this._cookieStore.cookies(url);
    }
    async storageState() {
      return {
        cookies: this._cookieStore.allCookies(),
        origins: this._origins || []
      };
    }
  }
  exports.GlobalAPIRequestContext = GlobalAPIRequestContext;
  var redirectStatus = [301, 302, 303, 307, 308];
});

// node_modules/playwright-core/lib/common/socksProxy.js
var require_socksProxy = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var hexToNumber = function(hex) {
    return [...hex].reduce((value, digit) => {
      const code = digit.charCodeAt(0);
      if (code >= 48 && code <= 57)
        return value + code;
      if (code >= 97 && code <= 102)
        return value + (code - 97) + 10;
      if (code >= 65 && code <= 70)
        return value + (code - 65) + 10;
      throw new Error("Invalid IPv6 token " + hex);
    }, 0);
  };
  var ipToSocksAddress = function(address) {
    if (_net.default.isIPv4(address)) {
      return [
        1,
        ...address.split(".", 4).map((t) => +t & 255)
      ];
    }
    if (_net.default.isIPv6(address)) {
      const result = [4];
      const tokens = address.split(":", 8);
      while (tokens.length < 8)
        tokens.unshift("");
      for (const token of tokens) {
        const value = hexToNumber(token);
        result.push(value >> 8 & 255, value & 255);
      }
      return result;
    }
    throw new Error("Only IPv4 and IPv6 addresses are supported");
  };
  var starMatchToRegex = function(pattern) {
    const source = pattern.split("*").map((s) => {
      return s.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    }).join(".*");
    return new RegExp("^" + source + "$");
  };
  var parsePattern = function(pattern) {
    if (!pattern)
      return () => false;
    const matchers = pattern.split(",").map((token) => {
      const match = token.match(/^(.*?)(?::(\d+))?$/);
      if (!match)
        throw new Error(`Unsupported token "${token}" in pattern "${pattern}"`);
      const tokenPort = match[2] ? +match[2] : undefined;
      const portMatches = (port) => tokenPort === undefined || tokenPort === port;
      let tokenHost = match[1];
      if (tokenHost === "<loopback>") {
        return (host, port) => {
          if (!portMatches(port))
            return false;
          return host === "localhost" || host.endsWith(".localhost") || host === "127.0.0.1" || host === "[::1]";
        };
      }
      if (tokenHost === "*")
        return (host, port) => portMatches(port);
      if (_net.default.isIPv4(tokenHost) || _net.default.isIPv6(tokenHost))
        return (host, port) => host === tokenHost && portMatches(port);
      if (tokenHost[0] === ".")
        tokenHost = "*" + tokenHost;
      const tokenRegex = starMatchToRegex(tokenHost);
      return (host, port) => {
        if (!portMatches(port))
          return false;
        if (_net.default.isIPv4(host) || _net.default.isIPv6(host))
          return false;
        return !!host.match(tokenRegex);
      };
    });
    return (host, port) => matchers.some((matcher) => matcher(host, port));
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SocksProxyHandler = exports.SocksProxy = undefined;
  exports.parsePattern = parsePattern;
  var _events = _interopRequireDefault(import.meta.require("events"));
  var _net = _interopRequireDefault(import.meta.require("net"));
  var _debugLogger = require_debugLogger();
  var _happyEyeballs = require_happy_eyeballs();
  var _utils = require_utils3();
  var SocksAuth = function(SocksAuth2) {
    SocksAuth2[SocksAuth2["NO_AUTHENTICATION_REQUIRED"] = 0] = "NO_AUTHENTICATION_REQUIRED";
    SocksAuth2[SocksAuth2["GSSAPI"] = 1] = "GSSAPI";
    SocksAuth2[SocksAuth2["USERNAME_PASSWORD"] = 2] = "USERNAME_PASSWORD";
    SocksAuth2[SocksAuth2["NO_ACCEPTABLE_METHODS"] = 255] = "NO_ACCEPTABLE_METHODS";
    return SocksAuth2;
  }(SocksAuth || {});
  var SocksAddressType = function(SocksAddressType2) {
    SocksAddressType2[SocksAddressType2["IPv4"] = 1] = "IPv4";
    SocksAddressType2[SocksAddressType2["FqName"] = 3] = "FqName";
    SocksAddressType2[SocksAddressType2["IPv6"] = 4] = "IPv6";
    return SocksAddressType2;
  }(SocksAddressType || {});
  var SocksCommand = function(SocksCommand2) {
    SocksCommand2[SocksCommand2["CONNECT"] = 1] = "CONNECT";
    SocksCommand2[SocksCommand2["BIND"] = 2] = "BIND";
    SocksCommand2[SocksCommand2["UDP_ASSOCIATE"] = 3] = "UDP_ASSOCIATE";
    return SocksCommand2;
  }(SocksCommand || {});
  var SocksReply = function(SocksReply2) {
    SocksReply2[SocksReply2["Succeeded"] = 0] = "Succeeded";
    SocksReply2[SocksReply2["GeneralServerFailure"] = 1] = "GeneralServerFailure";
    SocksReply2[SocksReply2["NotAllowedByRuleSet"] = 2] = "NotAllowedByRuleSet";
    SocksReply2[SocksReply2["NetworkUnreachable"] = 3] = "NetworkUnreachable";
    SocksReply2[SocksReply2["HostUnreachable"] = 4] = "HostUnreachable";
    SocksReply2[SocksReply2["ConnectionRefused"] = 5] = "ConnectionRefused";
    SocksReply2[SocksReply2["TtlExpired"] = 6] = "TtlExpired";
    SocksReply2[SocksReply2["CommandNotSupported"] = 7] = "CommandNotSupported";
    SocksReply2[SocksReply2["AddressTypeNotSupported"] = 8] = "AddressTypeNotSupported";
    return SocksReply2;
  }(SocksReply || {});

  class SocksConnection {
    constructor(uid, socket, client) {
      this._buffer = Buffer.from([]);
      this._offset = 0;
      this._fence = 0;
      this._fenceCallback = undefined;
      this._socket = undefined;
      this._boundOnData = undefined;
      this._uid = undefined;
      this._client = undefined;
      this._uid = uid;
      this._socket = socket;
      this._client = client;
      this._boundOnData = this._onData.bind(this);
      socket.on("data", this._boundOnData);
      socket.on("close", () => this._onClose());
      socket.on("end", () => this._onClose());
      socket.on("error", () => this._onClose());
      this._run().catch(() => this._socket.end());
    }
    async _run() {
      (0, _utils.assert)(await this._authenticate());
      const {
        command,
        host,
        port
      } = await this._parseRequest();
      if (command !== SocksCommand.CONNECT) {
        this._writeBytes(Buffer.from([
          5,
          SocksReply.CommandNotSupported,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0
        ]));
        return;
      }
      this._socket.off("data", this._boundOnData);
      this._client.onSocketRequested({
        uid: this._uid,
        host,
        port
      });
    }
    async _authenticate() {
      const version = await this._readByte();
      (0, _utils.assert)(version === 5, "The VER field must be set to x05 for this version of the protocol, was " + version);
      const nMethods = await this._readByte();
      (0, _utils.assert)(nMethods, "No authentication methods specified");
      const methods = await this._readBytes(nMethods);
      for (const method of methods) {
        if (method === 0) {
          this._writeBytes(Buffer.from([version, method]));
          return true;
        }
      }
      this._writeBytes(Buffer.from([version, SocksAuth.NO_ACCEPTABLE_METHODS]));
      return false;
    }
    async _parseRequest() {
      const version = await this._readByte();
      (0, _utils.assert)(version === 5, "The VER field must be set to x05 for this version of the protocol, was " + version);
      const command = await this._readByte();
      await this._readByte();
      const addressType = await this._readByte();
      let host = "";
      switch (addressType) {
        case SocksAddressType.IPv4:
          host = (await this._readBytes(4)).join(".");
          break;
        case SocksAddressType.FqName:
          const length = await this._readByte();
          host = (await this._readBytes(length)).toString();
          break;
        case SocksAddressType.IPv6:
          const bytes = await this._readBytes(16);
          const tokens = [];
          for (let i = 0;i < 8; ++i)
            tokens.push(bytes.readUInt16BE(i * 2).toString(16));
          host = tokens.join(":");
          break;
      }
      const port = (await this._readBytes(2)).readUInt16BE(0);
      this._buffer = Buffer.from([]);
      this._offset = 0;
      this._fence = 0;
      return {
        command,
        host,
        port
      };
    }
    async _readByte() {
      const buffer = await this._readBytes(1);
      return buffer[0];
    }
    async _readBytes(length) {
      this._fence = this._offset + length;
      if (!this._buffer || this._buffer.length < this._fence)
        await new Promise((f) => this._fenceCallback = f);
      this._offset += length;
      return this._buffer.slice(this._offset - length, this._offset);
    }
    _writeBytes(buffer) {
      if (this._socket.writable)
        this._socket.write(buffer);
    }
    _onClose() {
      this._client.onSocketClosed({
        uid: this._uid
      });
    }
    _onData(buffer) {
      this._buffer = Buffer.concat([this._buffer, buffer]);
      if (this._fenceCallback && this._buffer.length >= this._fence) {
        const callback = this._fenceCallback;
        this._fenceCallback = undefined;
        callback();
      }
    }
    socketConnected(host, port) {
      this._writeBytes(Buffer.from([
        5,
        SocksReply.Succeeded,
        0,
        ...ipToSocksAddress(host),
        port >> 8,
        port & 255
      ]));
      this._socket.on("data", (data) => this._client.onSocketData({
        uid: this._uid,
        data
      }));
    }
    socketFailed(errorCode) {
      const buffer = Buffer.from([
        5,
        0,
        0,
        ...ipToSocksAddress("0.0.0.0"),
        0,
        0
      ]);
      switch (errorCode) {
        case "ENOENT":
        case "ENOTFOUND":
        case "ETIMEDOUT":
        case "EHOSTUNREACH":
          buffer[1] = SocksReply.HostUnreachable;
          break;
        case "ENETUNREACH":
          buffer[1] = SocksReply.NetworkUnreachable;
          break;
        case "ECONNREFUSED":
          buffer[1] = SocksReply.ConnectionRefused;
          break;
        case "ERULESET":
          buffer[1] = SocksReply.NotAllowedByRuleSet;
          break;
      }
      this._writeBytes(buffer);
      this._socket.end();
    }
    sendData(data) {
      this._socket.write(data);
    }
    end() {
      this._socket.end();
    }
    error(error) {
      this._socket.destroy(new Error(error));
    }
  }

  class SocksProxy extends _events.default {
    constructor() {
      super();
      this._server = undefined;
      this._connections = new Map;
      this._sockets = new Set;
      this._closed = false;
      this._port = undefined;
      this._patternMatcher = () => false;
      this._directSockets = new Map;
      this._server = new _net.default.Server((socket) => {
        const uid = (0, _utils.createGuid)();
        const connection = new SocksConnection(uid, socket, this);
        this._connections.set(uid, connection);
      });
      this._server.on("connection", (socket) => {
        if (this._closed) {
          socket.destroy();
          return;
        }
        this._sockets.add(socket);
        socket.once("close", () => this._sockets.delete(socket));
      });
    }
    setPattern(pattern) {
      try {
        this._patternMatcher = parsePattern(pattern);
      } catch (e) {
        this._patternMatcher = () => false;
      }
    }
    async _handleDirect(request) {
      try {
        var _this$_connections$ge4;
        const socket = await (0, _happyEyeballs.createSocket)(request.host, request.port);
        socket.on("data", (data) => {
          var _this$_connections$ge;
          return (_this$_connections$ge = this._connections.get(request.uid)) === null || _this$_connections$ge === undefined ? undefined : _this$_connections$ge.sendData(data);
        });
        socket.on("error", (error) => {
          var _this$_connections$ge2;
          (_this$_connections$ge2 = this._connections.get(request.uid)) === null || _this$_connections$ge2 === undefined || _this$_connections$ge2.error(error.message);
          this._directSockets.delete(request.uid);
        });
        socket.on("end", () => {
          var _this$_connections$ge3;
          (_this$_connections$ge3 = this._connections.get(request.uid)) === null || _this$_connections$ge3 === undefined || _this$_connections$ge3.end();
          this._directSockets.delete(request.uid);
        });
        const localAddress = socket.localAddress;
        const localPort = socket.localPort;
        this._directSockets.set(request.uid, socket);
        (_this$_connections$ge4 = this._connections.get(request.uid)) === null || _this$_connections$ge4 === undefined || _this$_connections$ge4.socketConnected(localAddress, localPort);
      } catch (error) {
        var _this$_connections$ge5;
        (_this$_connections$ge5 = this._connections.get(request.uid)) === null || _this$_connections$ge5 === undefined || _this$_connections$ge5.socketFailed(error.code);
      }
    }
    port() {
      return this._port;
    }
    async listen(port) {
      return new Promise((f) => {
        this._server.listen(port, () => {
          const port2 = this._server.address().port;
          this._port = port2;
          f(port2);
        });
      });
    }
    async close() {
      if (this._closed)
        return;
      this._closed = true;
      for (const socket of this._sockets)
        socket.destroy();
      this._sockets.clear();
      await new Promise((f) => this._server.close(f));
    }
    onSocketRequested(payload) {
      if (!this._patternMatcher(payload.host, payload.port)) {
        this._handleDirect(payload);
        return;
      }
      this.emit(SocksProxy.Events.SocksRequested, payload);
    }
    onSocketData(payload) {
      const direct = this._directSockets.get(payload.uid);
      if (direct) {
        direct.write(payload.data);
        return;
      }
      this.emit(SocksProxy.Events.SocksData, payload);
    }
    onSocketClosed(payload) {
      const direct = this._directSockets.get(payload.uid);
      if (direct) {
        direct.destroy();
        this._directSockets.delete(payload.uid);
        return;
      }
      this.emit(SocksProxy.Events.SocksClosed, payload);
    }
    socketConnected({
      uid,
      host,
      port
    }) {
      var _this$_connections$ge6;
      (_this$_connections$ge6 = this._connections.get(uid)) === null || _this$_connections$ge6 === undefined || _this$_connections$ge6.socketConnected(host, port);
    }
    socketFailed({
      uid,
      errorCode
    }) {
      var _this$_connections$ge7;
      (_this$_connections$ge7 = this._connections.get(uid)) === null || _this$_connections$ge7 === undefined || _this$_connections$ge7.socketFailed(errorCode);
    }
    sendSocketData({
      uid,
      data
    }) {
      var _this$_connections$ge8;
      (_this$_connections$ge8 = this._connections.get(uid)) === null || _this$_connections$ge8 === undefined || _this$_connections$ge8.sendData(data);
    }
    sendSocketEnd({
      uid
    }) {
      var _this$_connections$ge9;
      (_this$_connections$ge9 = this._connections.get(uid)) === null || _this$_connections$ge9 === undefined || _this$_connections$ge9.end();
    }
    sendSocketError({
      uid,
      error
    }) {
      var _this$_connections$ge10;
      (_this$_connections$ge10 = this._connections.get(uid)) === null || _this$_connections$ge10 === undefined || _this$_connections$ge10.error(error);
    }
  }
  exports.SocksProxy = SocksProxy;
  SocksProxy.Events = {
    SocksRequested: "socksRequested",
    SocksData: "socksData",
    SocksClosed: "socksClosed"
  };

  class SocksProxyHandler extends _events.default {
    constructor(pattern, redirectPortForTest) {
      super();
      this._sockets = new Map;
      this._patternMatcher = () => false;
      this._redirectPortForTest = undefined;
      this._patternMatcher = parsePattern(pattern);
      this._redirectPortForTest = redirectPortForTest;
    }
    cleanup() {
      for (const uid of this._sockets.keys())
        this.socketClosed({
          uid
        });
    }
    async socketRequested({
      uid,
      host,
      port
    }) {
      _debugLogger.debugLogger.log("socks", `[${uid}] => request ${host}:${port}`);
      if (!this._patternMatcher(host, port)) {
        const payload = {
          uid,
          errorCode: "ERULESET"
        };
        _debugLogger.debugLogger.log("socks", `[${uid}] <= pattern error ${payload.errorCode}`);
        this.emit(SocksProxyHandler.Events.SocksFailed, payload);
        return;
      }
      if (host === "local.playwright")
        host = "localhost";
      try {
        if (this._redirectPortForTest)
          port = this._redirectPortForTest;
        const socket = await (0, _happyEyeballs.createSocket)(host, port);
        socket.on("data", (data) => {
          const payload2 = {
            uid,
            data
          };
          this.emit(SocksProxyHandler.Events.SocksData, payload2);
        });
        socket.on("error", (error) => {
          const payload2 = {
            uid,
            error: error.message
          };
          _debugLogger.debugLogger.log("socks", `[${uid}] <= network socket error ${payload2.error}`);
          this.emit(SocksProxyHandler.Events.SocksError, payload2);
          this._sockets.delete(uid);
        });
        socket.on("end", () => {
          const payload2 = {
            uid
          };
          _debugLogger.debugLogger.log("socks", `[${uid}] <= network socket closed`);
          this.emit(SocksProxyHandler.Events.SocksEnd, payload2);
          this._sockets.delete(uid);
        });
        const localAddress = socket.localAddress;
        const localPort = socket.localPort;
        this._sockets.set(uid, socket);
        const payload = {
          uid,
          host: localAddress,
          port: localPort
        };
        _debugLogger.debugLogger.log("socks", `[${uid}] <= connected to network ${payload.host}:${payload.port}`);
        this.emit(SocksProxyHandler.Events.SocksConnected, payload);
      } catch (error) {
        const payload = {
          uid,
          errorCode: error.code
        };
        _debugLogger.debugLogger.log("socks", `[${uid}] <= connect error ${payload.errorCode}`);
        this.emit(SocksProxyHandler.Events.SocksFailed, payload);
      }
    }
    sendSocketData({
      uid,
      data
    }) {
      var _this$_sockets$get;
      (_this$_sockets$get = this._sockets.get(uid)) === null || _this$_sockets$get === undefined || _this$_sockets$get.write(data);
    }
    socketClosed({
      uid
    }) {
      var _this$_sockets$get2;
      _debugLogger.debugLogger.log("socks", `[${uid}] <= browser socket closed`);
      (_this$_sockets$get2 = this._sockets.get(uid)) === null || _this$_sockets$get2 === undefined || _this$_sockets$get2.destroy();
      this._sockets.delete(uid);
    }
  }
  exports.SocksProxyHandler = SocksProxyHandler;
  SocksProxyHandler.Events = {
    SocksConnected: "socksConnected",
    SocksData: "socksData",
    SocksError: "socksError",
    SocksFailed: "socksFailed",
    SocksEnd: "socksEnd"
  };
});

// node_modules/playwright-core/lib/server/dispatchers/jsHandleDispatcher.js
var require_jsHandleDispatcher = __commonJS((exports) => {
  var parseArgument = function(arg) {
    return (0, _serializers.parseSerializedValue)(arg.value, arg.handles.map((a) => a._object));
  };
  var parseValue = function(v) {
    return (0, _serializers.parseSerializedValue)(v, []);
  };
  var serializeResult = function(arg) {
    return (0, _serializers.serializeValue)(arg, (value) => ({
      fallThrough: value
    }));
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.JSHandleDispatcher = undefined;
  exports.parseArgument = parseArgument;
  exports.parseValue = parseValue;
  exports.serializeResult = serializeResult;
  var _dispatcher = require_dispatcher();
  var _elementHandlerDispatcher = require_elementHandlerDispatcher();
  var _serializers = require_serializers();

  class JSHandleDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, jsHandle) {
      super(scope, jsHandle, jsHandle.asElement() ? "ElementHandle" : "JSHandle", {
        preview: jsHandle.toString()
      });
      this._type_JSHandle = true;
      jsHandle._setPreviewCallback((preview) => this._dispatchEvent("previewUpdated", {
        preview
      }));
    }
    async evaluateExpression(params) {
      return {
        value: serializeResult(await this._object.evaluateExpression(params.expression, {
          isFunction: params.isFunction
        }, parseArgument(params.arg)))
      };
    }
    async evaluateExpressionHandle(params) {
      const jsHandle = await this._object.evaluateExpressionHandle(params.expression, {
        isFunction: params.isFunction
      }, parseArgument(params.arg));
      return {
        handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this.parentScope(), jsHandle)
      };
    }
    async getProperty(params) {
      const jsHandle = await this._object.getProperty(params.name);
      return {
        handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this.parentScope(), jsHandle)
      };
    }
    async getPropertyList() {
      const map = await this._object.getProperties();
      const properties = [];
      for (const [name, value] of map)
        properties.push({
          name,
          value: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this.parentScope(), value)
        });
      return {
        properties
      };
    }
    async jsonValue() {
      return {
        value: serializeResult(await this._object.jsonValue())
      };
    }
    async objectCount(params) {
      return {
        count: await this._object.objectCount()
      };
    }
    async dispose(_, metadata) {
      metadata.potentiallyClosesScope = true;
      this._object.dispose();
      this._dispose();
    }
  }
  exports.JSHandleDispatcher = JSHandleDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/elementHandlerDispatcher.js
var require_elementHandlerDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ElementHandleDispatcher = undefined;
  var _dispatcher = require_dispatcher();
  var _jsHandleDispatcher = require_jsHandleDispatcher();
  var _frameDispatcher = require_frameDispatcher();
  var _browserContextDispatcher = require_browserContextDispatcher();
  var _pageDispatcher = require_pageDispatcher();

  class ElementHandleDispatcher extends _jsHandleDispatcher.JSHandleDispatcher {
    static from(scope, handle) {
      return (0, _dispatcher.existingDispatcher)(handle) || new ElementHandleDispatcher(scope, handle);
    }
    static fromNullable(scope, handle) {
      if (!handle)
        return;
      return (0, _dispatcher.existingDispatcher)(handle) || new ElementHandleDispatcher(scope, handle);
    }
    static fromJSHandle(scope, handle) {
      const result = (0, _dispatcher.existingDispatcher)(handle);
      if (result)
        return result;
      return handle.asElement() ? new ElementHandleDispatcher(scope, handle.asElement()) : new _jsHandleDispatcher.JSHandleDispatcher(scope, handle);
    }
    constructor(scope, elementHandle) {
      super(scope, elementHandle);
      this._type_ElementHandle = true;
      this._elementHandle = undefined;
      this._elementHandle = elementHandle;
    }
    async ownerFrame(params, metadata) {
      const frame = await this._elementHandle.ownerFrame();
      return {
        frame: frame ? _frameDispatcher.FrameDispatcher.from(this._browserContextDispatcher(), frame) : undefined
      };
    }
    async contentFrame(params, metadata) {
      const frame = await this._elementHandle.contentFrame();
      return {
        frame: frame ? _frameDispatcher.FrameDispatcher.from(this._browserContextDispatcher(), frame) : undefined
      };
    }
    async getAttribute(params, metadata) {
      const value = await this._elementHandle.getAttribute(metadata, params.name);
      return {
        value: value === null ? undefined : value
      };
    }
    async inputValue(params, metadata) {
      const value = await this._elementHandle.inputValue(metadata);
      return {
        value
      };
    }
    async textContent(params, metadata) {
      const value = await this._elementHandle.textContent(metadata);
      return {
        value: value === null ? undefined : value
      };
    }
    async innerText(params, metadata) {
      return {
        value: await this._elementHandle.innerText(metadata)
      };
    }
    async innerHTML(params, metadata) {
      return {
        value: await this._elementHandle.innerHTML(metadata)
      };
    }
    async isChecked(params, metadata) {
      return {
        value: await this._elementHandle.isChecked(metadata)
      };
    }
    async isDisabled(params, metadata) {
      return {
        value: await this._elementHandle.isDisabled(metadata)
      };
    }
    async isEditable(params, metadata) {
      return {
        value: await this._elementHandle.isEditable(metadata)
      };
    }
    async isEnabled(params, metadata) {
      return {
        value: await this._elementHandle.isEnabled(metadata)
      };
    }
    async isHidden(params, metadata) {
      return {
        value: await this._elementHandle.isHidden(metadata)
      };
    }
    async isVisible(params, metadata) {
      return {
        value: await this._elementHandle.isVisible(metadata)
      };
    }
    async dispatchEvent(params, metadata) {
      await this._elementHandle.dispatchEvent(metadata, params.type, (0, _jsHandleDispatcher.parseArgument)(params.eventInit));
    }
    async scrollIntoViewIfNeeded(params, metadata) {
      await this._elementHandle.scrollIntoViewIfNeeded(metadata, params);
    }
    async hover(params, metadata) {
      return await this._elementHandle.hover(metadata, params);
    }
    async click(params, metadata) {
      return await this._elementHandle.click(metadata, params);
    }
    async dblclick(params, metadata) {
      return await this._elementHandle.dblclick(metadata, params);
    }
    async tap(params, metadata) {
      return await this._elementHandle.tap(metadata, params);
    }
    async selectOption(params, metadata) {
      const elements = (params.elements || []).map((e) => e._elementHandle);
      return {
        values: await this._elementHandle.selectOption(metadata, elements, params.options || [], params)
      };
    }
    async fill(params, metadata) {
      return await this._elementHandle.fill(metadata, params.value, params);
    }
    async selectText(params, metadata) {
      await this._elementHandle.selectText(metadata, params);
    }
    async setInputFiles(params, metadata) {
      return await this._elementHandle.setInputFiles(metadata, params);
    }
    async focus(params, metadata) {
      await this._elementHandle.focus(metadata);
    }
    async type(params, metadata) {
      return await this._elementHandle.type(metadata, params.text, params);
    }
    async press(params, metadata) {
      return await this._elementHandle.press(metadata, params.key, params);
    }
    async check(params, metadata) {
      return await this._elementHandle.check(metadata, params);
    }
    async uncheck(params, metadata) {
      return await this._elementHandle.uncheck(metadata, params);
    }
    async boundingBox(params, metadata) {
      const value = await this._elementHandle.boundingBox();
      return {
        value: value || undefined
      };
    }
    async screenshot(params, metadata) {
      const mask = (params.mask || []).map(({
        frame,
        selector
      }) => ({
        frame: frame._object,
        selector
      }));
      return {
        binary: await this._elementHandle.screenshot(metadata, {
          ...params,
          mask
        })
      };
    }
    async querySelector(params, metadata) {
      const handle = await this._elementHandle.querySelector(params.selector, params);
      return {
        element: ElementHandleDispatcher.fromNullable(this.parentScope(), handle)
      };
    }
    async querySelectorAll(params, metadata) {
      const elements = await this._elementHandle.querySelectorAll(params.selector);
      return {
        elements: elements.map((e) => ElementHandleDispatcher.from(this.parentScope(), e))
      };
    }
    async evalOnSelector(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher.serializeResult)(await this._elementHandle.evalOnSelector(params.selector, !!params.strict, params.expression, params.isFunction, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async evalOnSelectorAll(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher.serializeResult)(await this._elementHandle.evalOnSelectorAll(params.selector, params.expression, params.isFunction, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async waitForElementState(params, metadata) {
      await this._elementHandle.waitForElementState(metadata, params.state, params);
    }
    async waitForSelector(params, metadata) {
      return {
        element: ElementHandleDispatcher.fromNullable(this.parentScope(), await this._elementHandle.waitForSelector(metadata, params.selector, params))
      };
    }
    _browserContextDispatcher() {
      const scope = this.parentScope();
      if (scope instanceof _browserContextDispatcher.BrowserContextDispatcher)
        return scope;
      if (scope instanceof _pageDispatcher.PageDispatcher)
        return scope.parentScope();
      if (scope instanceof _pageDispatcher.WorkerDispatcher || scope instanceof _frameDispatcher.FrameDispatcher) {
        const parentScope = scope.parentScope();
        if (parentScope instanceof _browserContextDispatcher.BrowserContextDispatcher)
          return parentScope;
        return parentScope.parentScope();
      }
      throw new Error("ElementHandle belongs to unexpected scope");
    }
  }
  exports.ElementHandleDispatcher = ElementHandleDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/streamDispatcher.js
var require_streamDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.StreamDispatcher = undefined;
  var _dispatcher = require_dispatcher();
  var _utils = require_utils3();

  class StreamDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, stream) {
      super(scope, {
        guid: "stream@" + (0, _utils.createGuid)(),
        stream
      }, "Stream", {});
      this._type_Stream = true;
      this._ended = false;
      stream.once("end", () => this._ended = true);
      stream.once("error", () => this._ended = true);
    }
    async read(params) {
      const stream = this._object.stream;
      if (this._ended)
        return {
          binary: Buffer.from("")
        };
      if (!stream.readableLength) {
        const readyPromise = new _utils.ManualPromise;
        const done = () => readyPromise.resolve();
        stream.on("readable", done);
        stream.on("end", done);
        stream.on("error", done);
        await readyPromise;
        stream.off("readable", done);
        stream.off("end", done);
        stream.off("error", done);
      }
      const buffer = stream.read(Math.min(stream.readableLength, params.size || stream.readableLength));
      return {
        binary: buffer || Buffer.from("")
      };
    }
    async close() {
      this._object.stream.destroy();
    }
  }
  exports.StreamDispatcher = StreamDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/artifactDispatcher.js
var require_artifactDispatcher = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ArtifactDispatcher = undefined;
  var _dispatcher = require_dispatcher();
  var _streamDispatcher = require_streamDispatcher();
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _fileUtils = require_fileUtils();

  class ArtifactDispatcher extends _dispatcher.Dispatcher {
    static from(parentScope, artifact) {
      return ArtifactDispatcher.fromNullable(parentScope, artifact);
    }
    static fromNullable(parentScope, artifact) {
      if (!artifact)
        return;
      const result = (0, _dispatcher.existingDispatcher)(artifact);
      return result || new ArtifactDispatcher(parentScope, artifact);
    }
    constructor(scope, artifact) {
      super(scope, artifact, "Artifact", {
        absolutePath: artifact.localPath()
      });
      this._type_Artifact = true;
    }
    async pathAfterFinished() {
      const path = await this._object.localPathAfterFinished();
      return {
        value: path
      };
    }
    async saveAs(params) {
      return await new Promise((resolve, reject) => {
        this._object.saveAs(async (localPath, error) => {
          if (error) {
            reject(error);
            return;
          }
          try {
            await (0, _fileUtils.mkdirIfNeeded)(params.path);
            await _fs.default.promises.copyFile(localPath, params.path);
            resolve();
          } catch (e) {
            reject(e);
          }
        });
      });
    }
    async saveAsStream() {
      return await new Promise((resolve, reject) => {
        this._object.saveAs(async (localPath, error) => {
          if (error) {
            reject(error);
            return;
          }
          try {
            const readable = _fs.default.createReadStream(localPath, {
              highWaterMark: 1024 * 1024
            });
            const stream = new _streamDispatcher.StreamDispatcher(this, readable);
            resolve({
              stream
            });
            await new Promise((resolve2) => {
              readable.on("close", resolve2);
              readable.on("end", resolve2);
              readable.on("error", resolve2);
            });
          } catch (e) {
            reject(e);
          }
        });
      });
    }
    async stream() {
      const fileName = await this._object.localPathAfterFinished();
      const readable = _fs.default.createReadStream(fileName, {
        highWaterMark: 1024 * 1024
      });
      return {
        stream: new _streamDispatcher.StreamDispatcher(this, readable)
      };
    }
    async failure() {
      const error = await this._object.failureError();
      return {
        error: error || undefined
      };
    }
    async cancel() {
      await this._object.cancel();
    }
    async delete(_, metadata) {
      metadata.potentiallyClosesScope = true;
      await this._object.delete();
      this._dispose();
    }
  }
  exports.ArtifactDispatcher = ArtifactDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/tracingDispatcher.js
var require_tracingDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TracingDispatcher = undefined;
  var _artifactDispatcher = require_artifactDispatcher();
  var _dispatcher = require_dispatcher();

  class TracingDispatcher extends _dispatcher.Dispatcher {
    static from(scope, tracing) {
      const result = (0, _dispatcher.existingDispatcher)(tracing);
      return result || new TracingDispatcher(scope, tracing);
    }
    constructor(scope, tracing) {
      super(scope, tracing, "Tracing", {});
      this._type_Tracing = true;
    }
    async tracingStart(params) {
      await this._object.start(params);
    }
    async tracingStartChunk(params) {
      return await this._object.startChunk(params);
    }
    async tracingStopChunk(params) {
      const {
        artifact,
        entries
      } = await this._object.stopChunk(params);
      return {
        artifact: artifact ? _artifactDispatcher.ArtifactDispatcher.from(this, artifact) : undefined,
        entries
      };
    }
    async tracingStop(params) {
      await this._object.stop();
    }
  }
  exports.TracingDispatcher = TracingDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/networkDispatchers.js
var require_networkDispatchers = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WebSocketDispatcher = exports.RouteDispatcher = exports.ResponseDispatcher = exports.RequestDispatcher = exports.APIRequestContextDispatcher = undefined;
  var _network = require_network2();
  var _dispatcher = require_dispatcher();
  var _tracingDispatcher = require_tracingDispatcher();
  var _frameDispatcher = require_frameDispatcher();
  var _pageDispatcher = require_pageDispatcher();

  class RequestDispatcher extends _dispatcher.Dispatcher {
    static from(scope, request) {
      const result = (0, _dispatcher.existingDispatcher)(request);
      return result || new RequestDispatcher(scope, request);
    }
    static fromNullable(scope, request) {
      return request ? RequestDispatcher.from(scope, request) : undefined;
    }
    constructor(scope, request) {
      var _request$frame;
      const postData = request.postDataBuffer();
      const frame = request.frame();
      const page = (_request$frame = request.frame()) === null || _request$frame === undefined ? undefined : _request$frame._page;
      const pageDispatcher = page ? (0, _dispatcher.existingDispatcher)(page) : null;
      const frameDispatcher = frame ? _frameDispatcher.FrameDispatcher.from(scope, frame) : null;
      super(pageDispatcher || frameDispatcher || scope, request, "Request", {
        frame: _frameDispatcher.FrameDispatcher.fromNullable(scope, request.frame()),
        serviceWorker: _pageDispatcher.WorkerDispatcher.fromNullable(scope, request.serviceWorker()),
        url: request.url(),
        resourceType: request.resourceType(),
        method: request.method(),
        postData: postData === null ? undefined : postData,
        headers: request.headers(),
        isNavigationRequest: request.isNavigationRequest(),
        redirectedFrom: RequestDispatcher.fromNullable(scope, request.redirectedFrom())
      });
      this._type_Request = undefined;
      this._browserContextDispatcher = undefined;
      this._type_Request = true;
      this._browserContextDispatcher = scope;
    }
    async rawRequestHeaders(params) {
      return {
        headers: await this._object.rawRequestHeaders()
      };
    }
    async response() {
      return {
        response: ResponseDispatcher.fromNullable(this._browserContextDispatcher, await this._object.response())
      };
    }
  }
  exports.RequestDispatcher = RequestDispatcher;

  class ResponseDispatcher extends _dispatcher.Dispatcher {
    static from(scope, response) {
      const result = (0, _dispatcher.existingDispatcher)(response);
      const requestDispatcher = RequestDispatcher.from(scope, response.request());
      return result || new ResponseDispatcher(requestDispatcher, response);
    }
    static fromNullable(scope, response) {
      return response ? ResponseDispatcher.from(scope, response) : undefined;
    }
    constructor(scope, response) {
      super(scope, response, "Response", {
        request: scope,
        url: response.url(),
        status: response.status(),
        statusText: response.statusText(),
        headers: response.headers(),
        timing: response.timing(),
        fromServiceWorker: response.fromServiceWorker()
      });
      this._type_Response = true;
    }
    async body() {
      return {
        binary: await this._object.body()
      };
    }
    async securityDetails() {
      return {
        value: await this._object.securityDetails() || undefined
      };
    }
    async serverAddr() {
      return {
        value: await this._object.serverAddr() || undefined
      };
    }
    async rawResponseHeaders(params) {
      return {
        headers: await this._object.rawResponseHeaders()
      };
    }
    async sizes(params) {
      return {
        sizes: await this._object.sizes()
      };
    }
  }
  exports.ResponseDispatcher = ResponseDispatcher;

  class RouteDispatcher extends _dispatcher.Dispatcher {
    static from(scope, route) {
      const result = (0, _dispatcher.existingDispatcher)(route);
      return result || new RouteDispatcher(scope, route);
    }
    constructor(scope, route) {
      super(scope, route, "Route", {
        request: scope
      });
      this._type_Route = true;
    }
    async continue(params, metadata) {
      await this._object.continue({
        url: params.url,
        method: params.method,
        headers: params.headers,
        postData: params.postData,
        isFallback: params.isFallback
      });
    }
    async fulfill(params, metadata) {
      await this._object.fulfill(params);
    }
    async abort(params, metadata) {
      await this._object.abort(params.errorCode || "failed");
    }
    async redirectNavigationRequest(params) {
      await this._object.redirectNavigationRequest(params.url);
    }
  }
  exports.RouteDispatcher = RouteDispatcher;

  class WebSocketDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, webSocket) {
      super(scope, webSocket, "WebSocket", {
        url: webSocket.url()
      });
      this._type_EventTarget = true;
      this._type_WebSocket = true;
      this.addObjectListener(_network.WebSocket.Events.FrameSent, (event) => this._dispatchEvent("frameSent", event));
      this.addObjectListener(_network.WebSocket.Events.FrameReceived, (event) => this._dispatchEvent("frameReceived", event));
      this.addObjectListener(_network.WebSocket.Events.SocketError, (error) => this._dispatchEvent("socketError", {
        error
      }));
      this.addObjectListener(_network.WebSocket.Events.Close, () => this._dispatchEvent("close", {}));
    }
  }
  exports.WebSocketDispatcher = WebSocketDispatcher;

  class APIRequestContextDispatcher extends _dispatcher.Dispatcher {
    static from(scope, request) {
      const result = (0, _dispatcher.existingDispatcher)(request);
      return result || new APIRequestContextDispatcher(scope, request);
    }
    static fromNullable(scope, request) {
      return request ? APIRequestContextDispatcher.from(scope, request) : undefined;
    }
    constructor(parentScope, request) {
      const tracing = _tracingDispatcher.TracingDispatcher.from(parentScope, request.tracing());
      super(parentScope, request, "APIRequestContext", {
        tracing
      });
      this._type_APIRequestContext = true;
      this.adopt(tracing);
    }
    async storageState() {
      return this._object.storageState();
    }
    async dispose(_, metadata) {
      metadata.potentiallyClosesScope = true;
      await this._object.dispose();
      this._dispose();
    }
    async fetch(params, metadata) {
      const fetchResponse = await this._object.fetch(params, metadata);
      return {
        response: {
          url: fetchResponse.url,
          status: fetchResponse.status,
          statusText: fetchResponse.statusText,
          headers: fetchResponse.headers,
          fetchUid: fetchResponse.fetchUid
        }
      };
    }
    async fetchResponseBody(params) {
      return {
        binary: this._object.fetchResponses.get(params.fetchUid)
      };
    }
    async fetchLog(params) {
      const log = this._object.fetchLog.get(params.fetchUid) || [];
      return {
        log
      };
    }
    async disposeAPIResponse(params) {
      this._object.disposeResponse(params.fetchUid);
    }
  }
  exports.APIRequestContextDispatcher = APIRequestContextDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/frameDispatcher.js
var require_frameDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FrameDispatcher = undefined;
  var _frames = require_frames();
  var _dispatcher = require_dispatcher();
  var _elementHandlerDispatcher = require_elementHandlerDispatcher();
  var _jsHandleDispatcher = require_jsHandleDispatcher();
  var _networkDispatchers = require_networkDispatchers();
  var _utils = require_utils3();

  class FrameDispatcher extends _dispatcher.Dispatcher {
    static from(scope, frame) {
      const result = (0, _dispatcher.existingDispatcher)(frame);
      return result || new FrameDispatcher(scope, frame);
    }
    static fromNullable(scope, frame) {
      if (!frame)
        return;
      return FrameDispatcher.from(scope, frame);
    }
    constructor(scope, frame) {
      (0, _utils.debugAssert)(frame._page.mainFrame(), "Cannot determine whether the frame is a main frame");
      const gcBucket = frame._page.mainFrame() === frame ? "MainFrame" : "Frame";
      const pageDispatcher = (0, _dispatcher.existingDispatcher)(frame._page);
      super(pageDispatcher || scope, frame, "Frame", {
        url: frame.url(),
        name: frame.name(),
        parentFrame: FrameDispatcher.fromNullable(scope, frame.parentFrame()),
        loadStates: Array.from(frame._firedLifecycleEvents)
      }, gcBucket);
      this._type_Frame = true;
      this._frame = undefined;
      this._browserContextDispatcher = undefined;
      this._browserContextDispatcher = scope;
      this._frame = frame;
      this.addObjectListener(_frames.Frame.Events.AddLifecycle, (lifecycleEvent) => {
        this._dispatchEvent("loadstate", {
          add: lifecycleEvent
        });
      });
      this.addObjectListener(_frames.Frame.Events.RemoveLifecycle, (lifecycleEvent) => {
        this._dispatchEvent("loadstate", {
          remove: lifecycleEvent
        });
      });
      this.addObjectListener(_frames.Frame.Events.InternalNavigation, (event) => {
        if (!event.isPublic)
          return;
        const params = {
          url: event.url,
          name: event.name,
          error: event.error ? event.error.message : undefined
        };
        if (event.newDocument)
          params.newDocument = {
            request: _networkDispatchers.RequestDispatcher.fromNullable(this._browserContextDispatcher, event.newDocument.request || null)
          };
        this._dispatchEvent("navigated", params);
      });
    }
    async goto(params, metadata) {
      return {
        response: _networkDispatchers.ResponseDispatcher.fromNullable(this._browserContextDispatcher, await this._frame.goto(metadata, params.url, params))
      };
    }
    async frameElement() {
      return {
        element: _elementHandlerDispatcher.ElementHandleDispatcher.from(this, await this._frame.frameElement())
      };
    }
    async evaluateExpression(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher.serializeResult)(await this._frame.evaluateExpression(params.expression, {
          isFunction: params.isFunction,
          exposeUtilityScript: params.exposeUtilityScript
        }, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async evaluateExpressionHandle(params, metadata) {
      return {
        handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, await this._frame.evaluateExpressionHandle(params.expression, {
          isFunction: params.isFunction
        }, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async waitForSelector(params, metadata) {
      return {
        element: _elementHandlerDispatcher.ElementHandleDispatcher.fromNullable(this, await this._frame.waitForSelector(metadata, params.selector, params))
      };
    }
    async dispatchEvent(params, metadata) {
      return this._frame.dispatchEvent(metadata, params.selector, params.type, (0, _jsHandleDispatcher.parseArgument)(params.eventInit), params);
    }
    async evalOnSelector(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher.serializeResult)(await this._frame.evalOnSelector(params.selector, !!params.strict, params.expression, params.isFunction, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async evalOnSelectorAll(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher.serializeResult)(await this._frame.evalOnSelectorAll(params.selector, params.expression, params.isFunction, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async querySelector(params, metadata) {
      return {
        element: _elementHandlerDispatcher.ElementHandleDispatcher.fromNullable(this, await this._frame.querySelector(params.selector, params))
      };
    }
    async querySelectorAll(params, metadata) {
      const elements = await this._frame.querySelectorAll(params.selector);
      return {
        elements: elements.map((e) => _elementHandlerDispatcher.ElementHandleDispatcher.from(this, e))
      };
    }
    async queryCount(params) {
      return {
        value: await this._frame.queryCount(params.selector)
      };
    }
    async content() {
      return {
        value: await this._frame.content()
      };
    }
    async setContent(params, metadata) {
      return await this._frame.setContent(metadata, params.html, params);
    }
    async addScriptTag(params, metadata) {
      return {
        element: _elementHandlerDispatcher.ElementHandleDispatcher.from(this, await this._frame.addScriptTag(params))
      };
    }
    async addStyleTag(params, metadata) {
      return {
        element: _elementHandlerDispatcher.ElementHandleDispatcher.from(this, await this._frame.addStyleTag(params))
      };
    }
    async click(params, metadata) {
      metadata.potentiallyClosesScope = true;
      return await this._frame.click(metadata, params.selector, params);
    }
    async dblclick(params, metadata) {
      return await this._frame.dblclick(metadata, params.selector, params);
    }
    async dragAndDrop(params, metadata) {
      return await this._frame.dragAndDrop(metadata, params.source, params.target, params);
    }
    async tap(params, metadata) {
      return await this._frame.tap(metadata, params.selector, params);
    }
    async fill(params, metadata) {
      return await this._frame.fill(metadata, params.selector, params.value, params);
    }
    async focus(params, metadata) {
      await this._frame.focus(metadata, params.selector, params);
    }
    async blur(params, metadata) {
      await this._frame.blur(metadata, params.selector, params);
    }
    async textContent(params, metadata) {
      const value = await this._frame.textContent(metadata, params.selector, params);
      return {
        value: value === null ? undefined : value
      };
    }
    async innerText(params, metadata) {
      return {
        value: await this._frame.innerText(metadata, params.selector, params)
      };
    }
    async innerHTML(params, metadata) {
      return {
        value: await this._frame.innerHTML(metadata, params.selector, params)
      };
    }
    async getAttribute(params, metadata) {
      const value = await this._frame.getAttribute(metadata, params.selector, params.name, params);
      return {
        value: value === null ? undefined : value
      };
    }
    async inputValue(params, metadata) {
      const value = await this._frame.inputValue(metadata, params.selector, params);
      return {
        value
      };
    }
    async isChecked(params, metadata) {
      return {
        value: await this._frame.isChecked(metadata, params.selector, params)
      };
    }
    async isDisabled(params, metadata) {
      return {
        value: await this._frame.isDisabled(metadata, params.selector, params)
      };
    }
    async isEditable(params, metadata) {
      return {
        value: await this._frame.isEditable(metadata, params.selector, params)
      };
    }
    async isEnabled(params, metadata) {
      return {
        value: await this._frame.isEnabled(metadata, params.selector, params)
      };
    }
    async isHidden(params, metadata) {
      return {
        value: await this._frame.isHidden(metadata, params.selector, params)
      };
    }
    async isVisible(params, metadata) {
      return {
        value: await this._frame.isVisible(metadata, params.selector, params)
      };
    }
    async hover(params, metadata) {
      return await this._frame.hover(metadata, params.selector, params);
    }
    async selectOption(params, metadata) {
      const elements = (params.elements || []).map((e) => e._elementHandle);
      return {
        values: await this._frame.selectOption(metadata, params.selector, elements, params.options || [], params)
      };
    }
    async setInputFiles(params, metadata) {
      return await this._frame.setInputFiles(metadata, params.selector, params);
    }
    async type(params, metadata) {
      return await this._frame.type(metadata, params.selector, params.text, params);
    }
    async press(params, metadata) {
      return await this._frame.press(metadata, params.selector, params.key, params);
    }
    async check(params, metadata) {
      return await this._frame.check(metadata, params.selector, params);
    }
    async uncheck(params, metadata) {
      return await this._frame.uncheck(metadata, params.selector, params);
    }
    async waitForTimeout(params, metadata) {
      return await this._frame.waitForTimeout(metadata, params.timeout);
    }
    async waitForFunction(params, metadata) {
      return {
        handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, await this._frame._waitForFunctionExpression(metadata, params.expression, params.isFunction, (0, _jsHandleDispatcher.parseArgument)(params.arg), params))
      };
    }
    async title(params, metadata) {
      return {
        value: await this._frame.title()
      };
    }
    async highlight(params, metadata) {
      return await this._frame.highlight(params.selector);
    }
    async expect(params, metadata) {
      metadata.potentiallyClosesScope = true;
      const expectedValue = params.expectedValue ? (0, _jsHandleDispatcher.parseArgument)(params.expectedValue) : undefined;
      const result = await this._frame.expect(metadata, params.selector, {
        ...params,
        expectedValue
      });
      if (result.received !== undefined)
        result.received = (0, _jsHandleDispatcher.serializeResult)(result.received);
      return result;
    }
  }
  exports.FrameDispatcher = FrameDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/pageDispatcher.js
var require_pageDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WorkerDispatcher = exports.PageDispatcher = exports.BindingCallDispatcher = undefined;
  var _page = require_page();
  var _dispatcher = require_dispatcher();
  var _errors = require_errors();
  var _frameDispatcher = require_frameDispatcher();
  var _networkDispatchers = require_networkDispatchers();
  var _jsHandleDispatcher = require_jsHandleDispatcher();
  var _elementHandlerDispatcher = require_elementHandlerDispatcher();
  var _artifactDispatcher = require_artifactDispatcher();
  var _utils = require_utils3();

  class PageDispatcher extends _dispatcher.Dispatcher {
    static from(parentScope, page) {
      return PageDispatcher.fromNullable(parentScope, page);
    }
    static fromNullable(parentScope, page) {
      if (!page)
        return;
      const result = (0, _dispatcher.existingDispatcher)(page);
      return result || new PageDispatcher(parentScope, page);
    }
    constructor(parentScope, page) {
      const mainFrame = _frameDispatcher.FrameDispatcher.from(parentScope, page.mainFrame());
      super(parentScope, page, "Page", {
        mainFrame,
        viewportSize: page.viewportSize() || undefined,
        isClosed: page.isClosed(),
        opener: PageDispatcher.fromNullable(parentScope, page.opener())
      });
      this._type_EventTarget = true;
      this._type_Page = true;
      this._page = undefined;
      this._subscriptions = new Set;
      this.adopt(mainFrame);
      this._page = page;
      this.addObjectListener(_page.Page.Events.Close, () => {
        this._dispatchEvent("close");
        this._dispose();
      });
      this.addObjectListener(_page.Page.Events.Crash, () => this._dispatchEvent("crash"));
      this.addObjectListener(_page.Page.Events.Download, (download) => {
        this._dispatchEvent("download", {
          url: download.url,
          suggestedFilename: download.suggestedFilename(),
          artifact: _artifactDispatcher.ArtifactDispatcher.from(parentScope, download.artifact)
        });
      });
      this.addObjectListener(_page.Page.Events.FileChooser, (fileChooser) => this._dispatchEvent("fileChooser", {
        element: _elementHandlerDispatcher.ElementHandleDispatcher.from(mainFrame, fileChooser.element()),
        isMultiple: fileChooser.isMultiple()
      }));
      this.addObjectListener(_page.Page.Events.FrameAttached, (frame) => this._onFrameAttached(frame));
      this.addObjectListener(_page.Page.Events.FrameDetached, (frame) => this._onFrameDetached(frame));
      this.addObjectListener(_page.Page.Events.LocatorHandlerTriggered, (uid) => this._dispatchEvent("locatorHandlerTriggered", {
        uid
      }));
      this.addObjectListener(_page.Page.Events.WebSocket, (webSocket) => this._dispatchEvent("webSocket", {
        webSocket: new _networkDispatchers.WebSocketDispatcher(this, webSocket)
      }));
      this.addObjectListener(_page.Page.Events.Worker, (worker) => this._dispatchEvent("worker", {
        worker: new WorkerDispatcher(this, worker)
      }));
      this.addObjectListener(_page.Page.Events.Video, (artifact) => this._dispatchEvent("video", {
        artifact: _artifactDispatcher.ArtifactDispatcher.from(parentScope, artifact)
      }));
      if (page._video)
        this._dispatchEvent("video", {
          artifact: _artifactDispatcher.ArtifactDispatcher.from(this.parentScope(), page._video)
        });
      const frames = page._frameManager.frames();
      for (let i = 1;i < frames.length; i++)
        this._onFrameAttached(frames[i]);
    }
    page() {
      return this._page;
    }
    async setDefaultNavigationTimeoutNoReply(params, metadata) {
      this._page.setDefaultNavigationTimeout(params.timeout);
    }
    async setDefaultTimeoutNoReply(params, metadata) {
      this._page.setDefaultTimeout(params.timeout);
    }
    async exposeBinding(params, metadata) {
      await this._page.exposeBinding(params.name, !!params.needsHandle, (source, ...args) => {
        if (this._disposed)
          return;
        const binding = new BindingCallDispatcher(this, params.name, !!params.needsHandle, source, args);
        this._dispatchEvent("bindingCall", {
          binding
        });
        return binding.promise();
      });
    }
    async setExtraHTTPHeaders(params, metadata) {
      await this._page.setExtraHTTPHeaders(params.headers);
    }
    async reload(params, metadata) {
      return {
        response: _networkDispatchers.ResponseDispatcher.fromNullable(this.parentScope(), await this._page.reload(metadata, params))
      };
    }
    async goBack(params, metadata) {
      return {
        response: _networkDispatchers.ResponseDispatcher.fromNullable(this.parentScope(), await this._page.goBack(metadata, params))
      };
    }
    async goForward(params, metadata) {
      return {
        response: _networkDispatchers.ResponseDispatcher.fromNullable(this.parentScope(), await this._page.goForward(metadata, params))
      };
    }
    async registerLocatorHandler(params, metadata) {
      const uid = this._page.registerLocatorHandler(params.selector, params.noWaitAfter);
      return {
        uid
      };
    }
    async resolveLocatorHandlerNoReply(params, metadata) {
      this._page.resolveLocatorHandler(params.uid, params.remove);
    }
    async unregisterLocatorHandler(params, metadata) {
      this._page.unregisterLocatorHandler(params.uid);
    }
    async emulateMedia(params, metadata) {
      await this._page.emulateMedia({
        media: params.media,
        colorScheme: params.colorScheme,
        reducedMotion: params.reducedMotion,
        forcedColors: params.forcedColors
      });
    }
    async setViewportSize(params, metadata) {
      await this._page.setViewportSize(params.viewportSize);
    }
    async addInitScript(params, metadata) {
      await this._page.addInitScript(params.source);
    }
    async setNetworkInterceptionPatterns(params, metadata) {
      if (!params.patterns.length) {
        await this._page.setClientRequestInterceptor(undefined);
        return;
      }
      const urlMatchers = params.patterns.map((pattern) => pattern.regexSource ? new RegExp(pattern.regexSource, pattern.regexFlags) : pattern.glob);
      await this._page.setClientRequestInterceptor((route, request) => {
        const matchesSome = urlMatchers.some((urlMatch) => (0, _utils.urlMatches)(this._page._browserContext._options.baseURL, request.url(), urlMatch));
        if (!matchesSome)
          return false;
        this._dispatchEvent("route", {
          route: _networkDispatchers.RouteDispatcher.from(_networkDispatchers.RequestDispatcher.from(this.parentScope(), request), route)
        });
        return true;
      });
    }
    async expectScreenshot(params, metadata) {
      const mask = (params.mask || []).map(({
        frame,
        selector
      }) => ({
        frame: frame._object,
        selector
      }));
      const locator = params.locator ? {
        frame: params.locator.frame._object,
        selector: params.locator.selector
      } : undefined;
      return await this._page.expectScreenshot(metadata, {
        ...params,
        locator,
        mask
      });
    }
    async screenshot(params, metadata) {
      const mask = (params.mask || []).map(({
        frame,
        selector
      }) => ({
        frame: frame._object,
        selector
      }));
      return {
        binary: await this._page.screenshot(metadata, {
          ...params,
          mask
        })
      };
    }
    async close(params, metadata) {
      if (!params.runBeforeUnload)
        metadata.potentiallyClosesScope = true;
      await this._page.close(metadata, params);
    }
    async updateSubscription(params) {
      if (params.event === "fileChooser")
        await this._page.setFileChooserIntercepted(params.enabled);
      if (params.enabled)
        this._subscriptions.add(params.event);
      else
        this._subscriptions.delete(params.event);
    }
    async keyboardDown(params, metadata) {
      await this._page.keyboard.down(params.key);
    }
    async keyboardUp(params, metadata) {
      await this._page.keyboard.up(params.key);
    }
    async keyboardInsertText(params, metadata) {
      await this._page.keyboard.insertText(params.text);
    }
    async keyboardType(params, metadata) {
      await this._page.keyboard.type(params.text, params);
    }
    async keyboardPress(params, metadata) {
      await this._page.keyboard.press(params.key, params);
    }
    async mouseMove(params, metadata) {
      await this._page.mouse.move(params.x, params.y, params, metadata);
    }
    async mouseDown(params, metadata) {
      await this._page.mouse.down(params, metadata);
    }
    async mouseUp(params, metadata) {
      await this._page.mouse.up(params, metadata);
    }
    async mouseClick(params, metadata) {
      await this._page.mouse.click(params.x, params.y, params, metadata);
    }
    async mouseWheel(params, metadata) {
      await this._page.mouse.wheel(params.deltaX, params.deltaY);
    }
    async touchscreenTap(params, metadata) {
      await this._page.touchscreen.tap(params.x, params.y, metadata);
    }
    async accessibilitySnapshot(params, metadata) {
      const rootAXNode = await this._page.accessibility.snapshot({
        interestingOnly: params.interestingOnly,
        root: params.root ? params.root._elementHandle : undefined
      });
      return {
        rootAXNode: rootAXNode || undefined
      };
    }
    async pdf(params, metadata) {
      if (!this._page.pdf)
        throw new Error("PDF generation is only supported for Headless Chromium");
      const buffer = await this._page.pdf(params);
      return {
        pdf: buffer
      };
    }
    async bringToFront(params, metadata) {
      await this._page.bringToFront();
    }
    async startJSCoverage(params, metadata) {
      const coverage = this._page.coverage;
      await coverage.startJSCoverage(params);
    }
    async stopJSCoverage(params, metadata) {
      const coverage = this._page.coverage;
      return await coverage.stopJSCoverage();
    }
    async startCSSCoverage(params, metadata) {
      const coverage = this._page.coverage;
      await coverage.startCSSCoverage(params);
    }
    async stopCSSCoverage(params, metadata) {
      const coverage = this._page.coverage;
      return await coverage.stopCSSCoverage();
    }
    _onFrameAttached(frame) {
      this._dispatchEvent("frameAttached", {
        frame: _frameDispatcher.FrameDispatcher.from(this.parentScope(), frame)
      });
    }
    _onFrameDetached(frame) {
      this._dispatchEvent("frameDetached", {
        frame: _frameDispatcher.FrameDispatcher.from(this.parentScope(), frame)
      });
    }
    _onDispose() {
      if (!this._page.isClosedOrClosingOrCrashed())
        this._page.setClientRequestInterceptor(undefined).catch(() => {
        });
    }
  }
  exports.PageDispatcher = PageDispatcher;

  class WorkerDispatcher extends _dispatcher.Dispatcher {
    static fromNullable(scope, worker) {
      if (!worker)
        return;
      const result = (0, _dispatcher.existingDispatcher)(worker);
      return result || new WorkerDispatcher(scope, worker);
    }
    constructor(scope, worker) {
      super(scope, worker, "Worker", {
        url: worker.url()
      });
      this._type_Worker = true;
      this.addObjectListener(_page.Worker.Events.Close, () => this._dispatchEvent("close"));
    }
    async evaluateExpression(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher.serializeResult)(await this._object.evaluateExpression(params.expression, params.isFunction, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async evaluateExpressionHandle(params, metadata) {
      return {
        handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, await this._object.evaluateExpressionHandle(params.expression, params.isFunction, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
  }
  exports.WorkerDispatcher = WorkerDispatcher;

  class BindingCallDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, name, needsHandle, source, args) {
      super(scope, {
        guid: "bindingCall@" + (0, _utils.createGuid)()
      }, "BindingCall", {
        frame: _frameDispatcher.FrameDispatcher.from(scope.parentScope(), source.frame),
        name,
        args: needsHandle ? undefined : args.map(_jsHandleDispatcher.serializeResult),
        handle: needsHandle ? _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(scope, args[0]) : undefined
      });
      this._type_BindingCall = true;
      this._resolve = undefined;
      this._reject = undefined;
      this._promise = undefined;
      this._promise = new Promise((resolve, reject) => {
        this._resolve = resolve;
        this._reject = reject;
      });
    }
    promise() {
      return this._promise;
    }
    async resolve(params, metadata) {
      this._resolve((0, _jsHandleDispatcher.parseArgument)(params.result));
      this._dispose();
    }
    async reject(params, metadata) {
      this._reject((0, _errors.parseError)(params.error));
      this._dispose();
    }
  }
  exports.BindingCallDispatcher = BindingCallDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/cdpSessionDispatcher.js
var require_cdpSessionDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CDPSessionDispatcher = undefined;
  var _crConnection = require_crConnection();
  var _dispatcher = require_dispatcher();

  class CDPSessionDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, cdpSession) {
      super(scope, cdpSession, "CDPSession", {});
      this._type_CDPSession = true;
      this.addObjectListener(_crConnection.CDPSession.Events.Event, ({
        method,
        params
      }) => this._dispatchEvent("event", {
        method,
        params
      }));
      this.addObjectListener(_crConnection.CDPSession.Events.Closed, () => this._dispose());
    }
    async send(params) {
      return {
        result: await this._object.send(params.method, params.params)
      };
    }
    async detach(_, metadata) {
      metadata.potentiallyClosesScope = true;
      await this._object.detach();
    }
  }
  exports.CDPSessionDispatcher = CDPSessionDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/writableStreamDispatcher.js
var require_writableStreamDispatcher = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WritableStreamDispatcher = undefined;
  var _dispatcher = require_dispatcher();
  var fs = _interopRequireWildcard(import.meta.require("fs"));
  var _utils = require_utils3();

  class WritableStreamDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, stream, lastModifiedMs) {
      super(scope, {
        guid: "writableStream@" + (0, _utils.createGuid)(),
        stream
      }, "WritableStream", {});
      this._type_WritableStream = true;
      this._lastModifiedMs = undefined;
      this._lastModifiedMs = lastModifiedMs;
    }
    async write(params) {
      const stream = this._object.stream;
      await new Promise((fulfill, reject) => {
        stream.write(params.binary, (error) => {
          if (error)
            reject(error);
          else
            fulfill();
        });
      });
    }
    async close() {
      const stream = this._object.stream;
      await new Promise((fulfill) => stream.end(fulfill));
      if (this._lastModifiedMs)
        await fs.promises.utimes(this.path(), new Date(this._lastModifiedMs), new Date(this._lastModifiedMs));
    }
    path() {
      return this._object.stream.path;
    }
  }
  exports.WritableStreamDispatcher = WritableStreamDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/dialogDispatcher.js
var require_dialogDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DialogDispatcher = undefined;
  var _dispatcher = require_dispatcher();
  var _pageDispatcher = require_pageDispatcher();

  class DialogDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, dialog) {
      const page = _pageDispatcher.PageDispatcher.fromNullable(scope, dialog.page().initializedOrUndefined());
      super(page || scope, dialog, "Dialog", {
        page,
        type: dialog.type(),
        message: dialog.message(),
        defaultValue: dialog.defaultValue()
      });
      this._type_Dialog = true;
    }
    async accept(params) {
      await this._object.accept(params.promptText);
    }
    async dismiss() {
      await this._object.dismiss();
    }
  }
  exports.DialogDispatcher = DialogDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/browserContextDispatcher.js
var require_browserContextDispatcher = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BrowserContextDispatcher = undefined;
  var _browserContext = require_browserContext();
  var _dispatcher = require_dispatcher();
  var _pageDispatcher = require_pageDispatcher();
  var _networkDispatchers = require_networkDispatchers();
  var _crBrowser = require_crBrowser();
  var _cdpSessionDispatcher = require_cdpSessionDispatcher();
  var _recorder = require_recorder();
  var _artifactDispatcher = require_artifactDispatcher();
  var _tracingDispatcher = require_tracingDispatcher();
  var fs = _interopRequireWildcard(import.meta.require("fs"));
  var path = _interopRequireWildcard(import.meta.require("path"));
  var _utils = require_utils3();
  var _writableStreamDispatcher = require_writableStreamDispatcher();
  var _dialogDispatcher = require_dialogDispatcher();
  var _errors = require_errors();
  var _elementHandlerDispatcher = require_elementHandlerDispatcher();

  class BrowserContextDispatcher extends _dispatcher.Dispatcher {
    constructor(parentScope, context) {
      const requestContext = _networkDispatchers.APIRequestContextDispatcher.from(parentScope, context.fetchRequest);
      const tracing = _tracingDispatcher.TracingDispatcher.from(parentScope, context.tracing);
      super(parentScope, context, "BrowserContext", {
        isChromium: context._browser.options.isChromium,
        isLocalBrowserOnServer: context._browser._isCollocatedWithServer,
        requestContext,
        tracing
      });
      this._type_EventTarget = true;
      this._type_BrowserContext = true;
      this._context = undefined;
      this._subscriptions = new Set;
      this.adopt(requestContext);
      this.adopt(tracing);
      this._context = context;
      const onVideo = (artifact) => {
        const artifactDispatcher = _artifactDispatcher.ArtifactDispatcher.from(parentScope, artifact);
        this._dispatchEvent("video", {
          artifact: artifactDispatcher
        });
      };
      this.addObjectListener(_browserContext.BrowserContext.Events.VideoStarted, onVideo);
      for (const video of context._browser._idToVideo.values()) {
        if (video.context === context)
          onVideo(video.artifact);
      }
      for (const page of context.pages())
        this._dispatchEvent("page", {
          page: _pageDispatcher.PageDispatcher.from(this, page)
        });
      this.addObjectListener(_browserContext.BrowserContext.Events.Page, (page) => {
        this._dispatchEvent("page", {
          page: _pageDispatcher.PageDispatcher.from(this, page)
        });
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.Close, () => {
        this._dispatchEvent("close");
        this._dispose();
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.PageError, (error, page) => {
        this._dispatchEvent("pageError", {
          error: (0, _errors.serializeError)(error),
          page: _pageDispatcher.PageDispatcher.from(this, page)
        });
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.Console, (message) => {
        const page = message.page();
        if (this._shouldDispatchEvent(page, "console")) {
          const pageDispatcher = _pageDispatcher.PageDispatcher.from(this, page);
          this._dispatchEvent("console", {
            page: pageDispatcher,
            type: message.type(),
            text: message.text(),
            args: message.args().map((a) => _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(pageDispatcher, a)),
            location: message.location()
          });
        }
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.Dialog, (dialog) => {
        if (this._shouldDispatchEvent(dialog.page(), "dialog"))
          this._dispatchEvent("dialog", {
            dialog: new _dialogDispatcher.DialogDispatcher(this, dialog)
          });
        else
          dialog.close().catch(() => {
          });
      });
      if (context._browser.options.name === "chromium") {
        for (const page of context.backgroundPages())
          this._dispatchEvent("backgroundPage", {
            page: _pageDispatcher.PageDispatcher.from(this, page)
          });
        this.addObjectListener(_crBrowser.CRBrowserContext.CREvents.BackgroundPage, (page) => this._dispatchEvent("backgroundPage", {
          page: _pageDispatcher.PageDispatcher.from(this, page)
        }));
        for (const serviceWorker of context.serviceWorkers())
          this._dispatchEvent("serviceWorker", {
            worker: new _pageDispatcher.WorkerDispatcher(this, serviceWorker)
          });
        this.addObjectListener(_crBrowser.CRBrowserContext.CREvents.ServiceWorker, (serviceWorker) => this._dispatchEvent("serviceWorker", {
          worker: new _pageDispatcher.WorkerDispatcher(this, serviceWorker)
        }));
      }
      this.addObjectListener(_browserContext.BrowserContext.Events.Request, (request) => {
        var _request$frame;
        const redirectFromDispatcher = request.redirectedFrom() && (0, _dispatcher.existingDispatcher)(request.redirectedFrom());
        if (!redirectFromDispatcher && !this._shouldDispatchNetworkEvent(request, "request") && !request.isNavigationRequest())
          return;
        const requestDispatcher = _networkDispatchers.RequestDispatcher.from(this, request);
        this._dispatchEvent("request", {
          request: requestDispatcher,
          page: _pageDispatcher.PageDispatcher.fromNullable(this, (_request$frame = request.frame()) === null || _request$frame === undefined ? undefined : _request$frame._page.initializedOrUndefined())
        });
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.Response, (response) => {
        var _response$frame;
        const requestDispatcher = (0, _dispatcher.existingDispatcher)(response.request());
        if (!requestDispatcher && !this._shouldDispatchNetworkEvent(response.request(), "response"))
          return;
        this._dispatchEvent("response", {
          response: _networkDispatchers.ResponseDispatcher.from(this, response),
          page: _pageDispatcher.PageDispatcher.fromNullable(this, (_response$frame = response.frame()) === null || _response$frame === undefined ? undefined : _response$frame._page.initializedOrUndefined())
        });
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.RequestFailed, (request) => {
        var _request$frame2;
        const requestDispatcher = (0, _dispatcher.existingDispatcher)(request);
        if (!requestDispatcher && !this._shouldDispatchNetworkEvent(request, "requestFailed"))
          return;
        this._dispatchEvent("requestFailed", {
          request: _networkDispatchers.RequestDispatcher.from(this, request),
          failureText: request._failureText || undefined,
          responseEndTiming: request._responseEndTiming,
          page: _pageDispatcher.PageDispatcher.fromNullable(this, (_request$frame2 = request.frame()) === null || _request$frame2 === undefined ? undefined : _request$frame2._page.initializedOrUndefined())
        });
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.RequestFinished, ({
        request,
        response
      }) => {
        var _request$frame3;
        const requestDispatcher = (0, _dispatcher.existingDispatcher)(request);
        if (!requestDispatcher && !this._shouldDispatchNetworkEvent(request, "requestFinished"))
          return;
        this._dispatchEvent("requestFinished", {
          request: _networkDispatchers.RequestDispatcher.from(this, request),
          response: _networkDispatchers.ResponseDispatcher.fromNullable(this, response),
          responseEndTiming: request._responseEndTiming,
          page: _pageDispatcher.PageDispatcher.fromNullable(this, (_request$frame3 = request.frame()) === null || _request$frame3 === undefined ? undefined : _request$frame3._page.initializedOrUndefined())
        });
      });
    }
    _shouldDispatchNetworkEvent(request, event) {
      var _request$frame4;
      return this._shouldDispatchEvent((_request$frame4 = request.frame()) === null || _request$frame4 === undefined || (_request$frame4 = _request$frame4._page) === null || _request$frame4 === undefined ? undefined : _request$frame4.initializedOrUndefined(), event);
    }
    _shouldDispatchEvent(page, event) {
      if (this._subscriptions.has(event))
        return true;
      const pageDispatcher = page ? (0, _dispatcher.existingDispatcher)(page) : undefined;
      if (pageDispatcher !== null && pageDispatcher !== undefined && pageDispatcher._subscriptions.has(event))
        return true;
      return false;
    }
    async createTempFile(params) {
      const dir = this._context._browser.options.artifactsDir;
      const tmpDir = path.join(dir, "upload-" + (0, _utils.createGuid)());
      await fs.promises.mkdir(tmpDir);
      this._context._tempDirs.push(tmpDir);
      const file = fs.createWriteStream(path.join(tmpDir, params.name));
      return {
        writableStream: new _writableStreamDispatcher.WritableStreamDispatcher(this, file, params.lastModifiedMs)
      };
    }
    async setDefaultNavigationTimeoutNoReply(params) {
      this._context.setDefaultNavigationTimeout(params.timeout);
    }
    async setDefaultTimeoutNoReply(params) {
      this._context.setDefaultTimeout(params.timeout);
    }
    async exposeBinding(params) {
      await this._context.exposeBinding(params.name, !!params.needsHandle, (source, ...args) => {
        if (this._disposed)
          return;
        const pageDispatcher = _pageDispatcher.PageDispatcher.from(this, source.page);
        const binding = new _pageDispatcher.BindingCallDispatcher(pageDispatcher, params.name, !!params.needsHandle, source, args);
        this._dispatchEvent("bindingCall", {
          binding
        });
        return binding.promise();
      });
    }
    async newPage(params, metadata) {
      return {
        page: _pageDispatcher.PageDispatcher.from(this, await this._context.newPage(metadata))
      };
    }
    async cookies(params) {
      return {
        cookies: await this._context.cookies(params.urls)
      };
    }
    async addCookies(params) {
      await this._context.addCookies(params.cookies);
    }
    async clearCookies(params) {
      const nameRe = params.nameRegexSource !== undefined && params.nameRegexFlags !== undefined ? new RegExp(params.nameRegexSource, params.nameRegexFlags) : undefined;
      const domainRe = params.domainRegexSource !== undefined && params.domainRegexFlags !== undefined ? new RegExp(params.domainRegexSource, params.domainRegexFlags) : undefined;
      const pathRe = params.pathRegexSource !== undefined && params.pathRegexFlags !== undefined ? new RegExp(params.pathRegexSource, params.pathRegexFlags) : undefined;
      await this._context.clearCookies({
        name: nameRe || params.name,
        domain: domainRe || params.domain,
        path: pathRe || params.path
      });
    }
    async grantPermissions(params) {
      await this._context.grantPermissions(params.permissions, params.origin);
    }
    async clearPermissions() {
      await this._context.clearPermissions();
    }
    async setGeolocation(params) {
      await this._context.setGeolocation(params.geolocation);
    }
    async setExtraHTTPHeaders(params) {
      await this._context.setExtraHTTPHeaders(params.headers);
    }
    async setOffline(params) {
      await this._context.setOffline(params.offline);
    }
    async setHTTPCredentials(params) {
      await this._context.setHTTPCredentials(params.httpCredentials);
    }
    async addInitScript(params) {
      await this._context.addInitScript(params.source);
    }
    async setNetworkInterceptionPatterns(params) {
      if (!params.patterns.length) {
        await this._context.setRequestInterceptor(undefined);
        return;
      }
      const urlMatchers = params.patterns.map((pattern) => pattern.regexSource ? new RegExp(pattern.regexSource, pattern.regexFlags) : pattern.glob);
      await this._context.setRequestInterceptor((route, request) => {
        const matchesSome = urlMatchers.some((urlMatch) => (0, _utils.urlMatches)(this._context._options.baseURL, request.url(), urlMatch));
        if (!matchesSome)
          return false;
        this._dispatchEvent("route", {
          route: _networkDispatchers.RouteDispatcher.from(_networkDispatchers.RequestDispatcher.from(this, request), route)
        });
        return true;
      });
    }
    async storageState(params, metadata) {
      return await this._context.storageState();
    }
    async close(params, metadata) {
      metadata.potentiallyClosesScope = true;
      await this._context.close(params);
    }
    async recorderSupplementEnable(params) {
      await _recorder.Recorder.show(this._context, params);
    }
    async pause(params, metadata) {
    }
    async newCDPSession(params) {
      if (!this._object._browser.options.isChromium)
        throw new Error(`CDP session is only available in Chromium`);
      if (!params.page && !params.frame || params.page && params.frame)
        throw new Error(`CDP session must be initiated with either Page or Frame, not none or both`);
      const crBrowserContext = this._object;
      return {
        session: new _cdpSessionDispatcher.CDPSessionDispatcher(this, await crBrowserContext.newCDPSession((params.page ? params.page : params.frame)._object))
      };
    }
    async harStart(params) {
      const harId = await this._context._harStart(params.page ? params.page._object : null, params.options);
      return {
        harId
      };
    }
    async harExport(params) {
      const artifact = await this._context._harExport(params.harId);
      if (!artifact)
        throw new Error("No HAR artifact. Ensure record.harPath is set.");
      return {
        artifact: _artifactDispatcher.ArtifactDispatcher.from(this, artifact)
      };
    }
    async updateSubscription(params) {
      if (params.enabled)
        this._subscriptions.add(params.event);
      else
        this._subscriptions.delete(params.event);
    }
    _onDispose() {
      if (!this._context.isClosingOrClosed())
        this._context.setRequestInterceptor(undefined).catch(() => {
        });
    }
  }
  exports.BrowserContextDispatcher = BrowserContextDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/androidDispatcher.js
var require_androidDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AndroidSocketDispatcher = exports.AndroidDispatcher = exports.AndroidDeviceDispatcher = undefined;
  var _dispatcher = require_dispatcher();
  var _android = require_android();
  var _browserContextDispatcher = require_browserContextDispatcher();

  class AndroidDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, android) {
      super(scope, android, "Android", {});
      this._type_Android = true;
    }
    async devices(params) {
      const devices = await this._object.devices(params);
      return {
        devices: devices.map((d) => AndroidDeviceDispatcher.from(this, d))
      };
    }
    async setDefaultTimeoutNoReply(params) {
      this._object.setDefaultTimeout(params.timeout);
    }
  }
  exports.AndroidDispatcher = AndroidDispatcher;

  class AndroidDeviceDispatcher extends _dispatcher.Dispatcher {
    static from(scope, device) {
      const result = (0, _dispatcher.existingDispatcher)(device);
      return result || new AndroidDeviceDispatcher(scope, device);
    }
    constructor(scope, device) {
      super(scope, device, "AndroidDevice", {
        model: device.model,
        serial: device.serial
      });
      this._type_EventTarget = true;
      this._type_AndroidDevice = true;
      for (const webView of device.webViews())
        this._dispatchEvent("webViewAdded", {
          webView
        });
      this.addObjectListener(_android.AndroidDevice.Events.WebViewAdded, (webView) => this._dispatchEvent("webViewAdded", {
        webView
      }));
      this.addObjectListener(_android.AndroidDevice.Events.WebViewRemoved, (socketName) => this._dispatchEvent("webViewRemoved", {
        socketName
      }));
      this.addObjectListener(_android.AndroidDevice.Events.Close, (socketName) => this._dispatchEvent("close"));
    }
    async wait(params) {
      await this._object.send("wait", params);
    }
    async fill(params) {
      await this._object.send("click", {
        selector: params.selector
      });
      await this._object.send("fill", params);
    }
    async tap(params) {
      await this._object.send("click", params);
    }
    async drag(params) {
      await this._object.send("drag", params);
    }
    async fling(params) {
      await this._object.send("fling", params);
    }
    async longTap(params) {
      await this._object.send("longClick", params);
    }
    async pinchClose(params) {
      await this._object.send("pinchClose", params);
    }
    async pinchOpen(params) {
      await this._object.send("pinchOpen", params);
    }
    async scroll(params) {
      await this._object.send("scroll", params);
    }
    async swipe(params) {
      await this._object.send("swipe", params);
    }
    async info(params) {
      return {
        info: await this._object.send("info", params)
      };
    }
    async inputType(params) {
      const text = params.text;
      const keyCodes = [];
      for (let i = 0;i < text.length; ++i) {
        const code = keyMap.get(text[i].toUpperCase());
        if (code === undefined)
          throw new Error("No mapping for " + text[i] + " found");
        keyCodes.push(code);
      }
      await Promise.all(keyCodes.map((keyCode) => this._object.send("inputPress", {
        keyCode
      })));
    }
    async inputPress(params) {
      if (!keyMap.has(params.key))
        throw new Error("Unknown key: " + params.key);
      await this._object.send("inputPress", {
        keyCode: keyMap.get(params.key)
      });
    }
    async inputTap(params) {
      await this._object.send("inputClick", params);
    }
    async inputSwipe(params) {
      await this._object.send("inputSwipe", params);
    }
    async inputDrag(params) {
      await this._object.send("inputDrag", params);
    }
    async screenshot(params) {
      return {
        binary: await this._object.screenshot()
      };
    }
    async shell(params) {
      return {
        result: await this._object.shell(params.command)
      };
    }
    async open(params, metadata) {
      const socket = await this._object.open(params.command);
      return {
        socket: new AndroidSocketDispatcher(this, socket)
      };
    }
    async installApk(params) {
      await this._object.installApk(params.file, {
        args: params.args
      });
    }
    async push(params) {
      await this._object.push(params.file, params.path, params.mode);
    }
    async launchBrowser(params) {
      const context = await this._object.launchBrowser(params.pkg, params);
      return {
        context: new _browserContextDispatcher.BrowserContextDispatcher(this, context)
      };
    }
    async close(params) {
      await this._object.close();
    }
    async setDefaultTimeoutNoReply(params) {
      this._object.setDefaultTimeout(params.timeout);
    }
    async connectToWebView(params) {
      return {
        context: new _browserContextDispatcher.BrowserContextDispatcher(this, await this._object.connectToWebView(params.socketName))
      };
    }
  }
  exports.AndroidDeviceDispatcher = AndroidDeviceDispatcher;

  class AndroidSocketDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, socket) {
      super(scope, socket, "AndroidSocket", {});
      this._type_AndroidSocket = true;
      this.addObjectListener("data", (data) => this._dispatchEvent("data", {
        data
      }));
      this.addObjectListener("close", () => {
        this._dispatchEvent("close");
        this._dispose();
      });
    }
    async write(params, metadata) {
      await this._object.write(params.data);
    }
    async close(params, metadata) {
      this._object.close();
    }
  }
  exports.AndroidSocketDispatcher = AndroidSocketDispatcher;
  var keyMap = new Map([["Unknown", 0], ["SoftLeft", 1], ["SoftRight", 2], ["Home", 3], ["Back", 4], ["Call", 5], ["EndCall", 6], ["0", 7], ["1", 8], ["2", 9], ["3", 10], ["4", 11], ["5", 12], ["6", 13], ["7", 14], ["8", 15], ["9", 16], ["Star", 17], ["*", 17], ["Pound", 18], ["#", 18], ["DialUp", 19], ["DialDown", 20], ["DialLeft", 21], ["DialRight", 22], ["DialCenter", 23], ["VolumeUp", 24], ["VolumeDown", 25], ["Power", 26], ["Camera", 27], ["Clear", 28], ["A", 29], ["B", 30], ["C", 31], ["D", 32], ["E", 33], ["F", 34], ["G", 35], ["H", 36], ["I", 37], ["J", 38], ["K", 39], ["L", 40], ["M", 41], ["N", 42], ["O", 43], ["P", 44], ["Q", 45], ["R", 46], ["S", 47], ["T", 48], ["U", 49], ["V", 50], ["W", 51], ["X", 52], ["Y", 53], ["Z", 54], ["Comma", 55], [",", 55], ["Period", 56], [".", 56], ["AltLeft", 57], ["AltRight", 58], ["ShiftLeft", 59], ["ShiftRight", 60], ["Tab", 61], ["\t", 61], ["Space", 62], [" ", 62], ["Sym", 63], ["Explorer", 64], ["Envelop", 65], ["Enter", 66], ["Del", 67], ["Grave", 68], ["Minus", 69], ["-", 69], ["Equals", 70], ["=", 70], ["LeftBracket", 71], ["(", 71], ["RightBracket", 72], [")", 72], ["Backslash", 73], ["\\", 73], ["Semicolon", 74], [";", 74], ["Apostrophe", 75], ["`", 75], ["Slash", 76], ["/", 76], ["At", 77], ["@", 77], ["Num", 78], ["HeadsetHook", 79], ["Focus", 80], ["Plus", 81], ["Menu", 82], ["Notification", 83], ["Search", 84], ["AppSwitch", 187], ["Assist", 219], ["Cut", 277], ["Copy", 278], ["Paste", 279]]);
});

// node_modules/playwright-core/lib/server/dispatchers/browserDispatcher.js
var require_browserDispatcher = __commonJS((exports) => {
  async function newContextForReuse(browser, scope, params, selectors, metadata) {
    const {
      context,
      needsReset
    } = await browser.newContextForReuse(params, metadata);
    if (needsReset) {
      const oldContextDispatcher = (0, _dispatcher.existingDispatcher)(context);
      if (oldContextDispatcher)
        oldContextDispatcher._dispose();
      await context.resetForReuse(metadata, params);
    }
    if (selectors)
      context.setSelectors(selectors);
    const contextDispatcher = new _browserContextDispatcher.BrowserContextDispatcher(scope, context);
    return {
      context: contextDispatcher
    };
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ConnectedBrowserDispatcher = exports.BrowserDispatcher = undefined;
  var _browser = require_browser5();
  var _browserContextDispatcher = require_browserContextDispatcher();
  var _cdpSessionDispatcher = require_cdpSessionDispatcher();
  var _dispatcher = require_dispatcher();
  var _browserContext = require_browserContext();
  var _selectors = require_selectors();
  var _artifactDispatcher = require_artifactDispatcher();

  class BrowserDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, browser) {
      super(scope, browser, "Browser", {
        version: browser.version(),
        name: browser.options.name
      });
      this._type_Browser = true;
      this.addObjectListener(_browser.Browser.Events.Disconnected, () => this._didClose());
    }
    _didClose() {
      this._dispatchEvent("close");
      this._dispose();
    }
    async newContext(params, metadata) {
      const context = await this._object.newContext(metadata, params);
      return {
        context: new _browserContextDispatcher.BrowserContextDispatcher(this, context)
      };
    }
    async newContextForReuse(params, metadata) {
      return await newContextForReuse(this._object, this, params, null, metadata);
    }
    async stopPendingOperations(params, metadata) {
      await this._object.stopPendingOperations(params.reason);
    }
    async close(params, metadata) {
      metadata.potentiallyClosesScope = true;
      await this._object.close(params);
    }
    async killForTests(_, metadata) {
      metadata.potentiallyClosesScope = true;
      await this._object.killForTests();
    }
    async defaultUserAgentForTest() {
      return {
        userAgent: this._object.userAgent()
      };
    }
    async newBrowserCDPSession() {
      if (!this._object.options.isChromium)
        throw new Error(`CDP session is only available in Chromium`);
      const crBrowser = this._object;
      return {
        session: new _cdpSessionDispatcher.CDPSessionDispatcher(this, await crBrowser.newBrowserCDPSession())
      };
    }
    async startTracing(params) {
      if (!this._object.options.isChromium)
        throw new Error(`Tracing is only available in Chromium`);
      const crBrowser = this._object;
      await crBrowser.startTracing(params.page ? params.page._object : undefined, params);
    }
    async stopTracing() {
      if (!this._object.options.isChromium)
        throw new Error(`Tracing is only available in Chromium`);
      const crBrowser = this._object;
      return {
        artifact: _artifactDispatcher.ArtifactDispatcher.from(this, await crBrowser.stopTracing())
      };
    }
  }
  exports.BrowserDispatcher = BrowserDispatcher;

  class ConnectedBrowserDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, browser) {
      super(scope, browser, "Browser", {
        version: browser.version(),
        name: browser.options.name
      });
      this._type_Browser = true;
      this._contexts = new Set;
      this.selectors = undefined;
      this.selectors = new _selectors.Selectors;
    }
    async newContext(params, metadata) {
      if (params.recordVideo)
        params.recordVideo.dir = this._object.options.artifactsDir;
      const context = await this._object.newContext(metadata, params);
      this._contexts.add(context);
      context.setSelectors(this.selectors);
      context.on(_browserContext.BrowserContext.Events.Close, () => this._contexts.delete(context));
      return {
        context: new _browserContextDispatcher.BrowserContextDispatcher(this, context)
      };
    }
    async newContextForReuse(params, metadata) {
      return await newContextForReuse(this._object, this, params, this.selectors, metadata);
    }
    async stopPendingOperations(params, metadata) {
      await this._object.stopPendingOperations(params.reason);
    }
    async close() {
    }
    async killForTests() {
    }
    async defaultUserAgentForTest() {
      throw new Error("Client should not send us Browser.defaultUserAgentForTest");
    }
    async newBrowserCDPSession() {
      if (!this._object.options.isChromium)
        throw new Error(`CDP session is only available in Chromium`);
      const crBrowser = this._object;
      return {
        session: new _cdpSessionDispatcher.CDPSessionDispatcher(this, await crBrowser.newBrowserCDPSession())
      };
    }
    async startTracing(params) {
      if (!this._object.options.isChromium)
        throw new Error(`Tracing is only available in Chromium`);
      const crBrowser = this._object;
      await crBrowser.startTracing(params.page ? params.page._object : undefined, params);
    }
    async stopTracing() {
      if (!this._object.options.isChromium)
        throw new Error(`Tracing is only available in Chromium`);
      const crBrowser = this._object;
      return {
        artifact: _artifactDispatcher.ArtifactDispatcher.from(this, await crBrowser.stopTracing())
      };
    }
    async cleanupContexts() {
      await Promise.all(Array.from(this._contexts).map((context) => context.close({
        reason: "Global context cleanup (connection terminated)"
      })));
    }
  }
  exports.ConnectedBrowserDispatcher = ConnectedBrowserDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/browserTypeDispatcher.js
var require_browserTypeDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BrowserTypeDispatcher = undefined;
  var _browserDispatcher = require_browserDispatcher();
  var _dispatcher = require_dispatcher();
  var _browserContextDispatcher = require_browserContextDispatcher();

  class BrowserTypeDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, browserType) {
      super(scope, browserType, "BrowserType", {
        executablePath: browserType.executablePath(),
        name: browserType.name()
      });
      this._type_BrowserType = true;
    }
    async launch(params, metadata) {
      const browser = await this._object.launch(metadata, params);
      return {
        browser: new _browserDispatcher.BrowserDispatcher(this, browser)
      };
    }
    async launchPersistentContext(params, metadata) {
      const browserContext = await this._object.launchPersistentContext(metadata, params.userDataDir, params);
      return {
        context: new _browserContextDispatcher.BrowserContextDispatcher(this, browserContext)
      };
    }
    async connectOverCDP(params, metadata) {
      const browser = await this._object.connectOverCDP(metadata, params.endpointURL, params, params.timeout);
      const browserDispatcher = new _browserDispatcher.BrowserDispatcher(this, browser);
      return {
        browser: browserDispatcher,
        defaultContext: browser._defaultContext ? new _browserContextDispatcher.BrowserContextDispatcher(browserDispatcher, browser._defaultContext) : undefined
      };
    }
  }
  exports.BrowserTypeDispatcher = BrowserTypeDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/electronDispatcher.js
var require_electronDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ElectronDispatcher = exports.ElectronApplicationDispatcher = undefined;
  var _dispatcher = require_dispatcher();
  var _electron = require_electron2();
  var _browserContextDispatcher = require_browserContextDispatcher();
  var _jsHandleDispatcher = require_jsHandleDispatcher();
  var _elementHandlerDispatcher = require_elementHandlerDispatcher();

  class ElectronDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, electron) {
      super(scope, electron, "Electron", {});
      this._type_Electron = true;
    }
    async launch(params) {
      const electronApplication = await this._object.launch(params);
      return {
        electronApplication: new ElectronApplicationDispatcher(this, electronApplication)
      };
    }
  }
  exports.ElectronDispatcher = ElectronDispatcher;

  class ElectronApplicationDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, electronApplication) {
      super(scope, electronApplication, "ElectronApplication", {
        context: new _browserContextDispatcher.BrowserContextDispatcher(scope, electronApplication.context())
      });
      this._type_EventTarget = true;
      this._type_ElectronApplication = true;
      this._subscriptions = new Set;
      this.addObjectListener(_electron.ElectronApplication.Events.Close, () => {
        this._dispatchEvent("close");
        this._dispose();
      });
      this.addObjectListener(_electron.ElectronApplication.Events.Console, (message) => {
        if (!this._subscriptions.has("console"))
          return;
        this._dispatchEvent("console", {
          type: message.type(),
          text: message.text(),
          args: message.args().map((a) => _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, a)),
          location: message.location()
        });
      });
    }
    async browserWindow(params) {
      const handle = await this._object.browserWindow(params.page.page());
      return {
        handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, handle)
      };
    }
    async evaluateExpression(params) {
      const handle = await this._object._nodeElectronHandlePromise;
      return {
        value: (0, _jsHandleDispatcher.serializeResult)(await handle.evaluateExpression(params.expression, {
          isFunction: params.isFunction
        }, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async evaluateExpressionHandle(params) {
      const handle = await this._object._nodeElectronHandlePromise;
      const result = await handle.evaluateExpressionHandle(params.expression, {
        isFunction: params.isFunction
      }, (0, _jsHandleDispatcher.parseArgument)(params.arg));
      return {
        handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, result)
      };
    }
    async updateSubscription(params) {
      if (params.enabled)
        this._subscriptions.add(params.event);
      else
        this._subscriptions.delete(params.event);
    }
    async close() {
      await this._object.close();
    }
  }
  exports.ElectronApplicationDispatcher = ElectronApplicationDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/jsonPipeDispatcher.js
var require_jsonPipeDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.JsonPipeDispatcher = undefined;
  var _dispatcher = require_dispatcher();
  var _utils = require_utils3();

  class JsonPipeDispatcher extends _dispatcher.Dispatcher {
    constructor(scope) {
      super(scope, {
        guid: "jsonPipe@" + (0, _utils.createGuid)()
      }, "JsonPipe", {});
      this._type_JsonPipe = true;
    }
    async send(params) {
      this.emit("message", params.message);
    }
    async close() {
      this.emit("close");
      if (!this._disposed) {
        this._dispatchEvent("closed", {});
        this._dispose();
      }
    }
    dispatch(message) {
      if (!this._disposed)
        this._dispatchEvent("message", {
          message
        });
    }
    wasClosed(reason) {
      if (!this._disposed) {
        this._dispatchEvent("closed", {
          reason
        });
        this._dispose();
      }
    }
    dispose() {
      this._dispose();
    }
  }
  exports.JsonPipeDispatcher = JsonPipeDispatcher;
});

// node_modules/playwright-core/lib/server/socksInterceptor.js
var require_socksInterceptor = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var tChannelForSocks = function(names, arg, path, context) {
    throw new _validator.ValidationError(`${path}: channels are not expected in SocksSupport`);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SocksInterceptor = undefined;
  var socks = _interopRequireWildcard(require_socksProxy());
  var _events = _interopRequireDefault(import.meta.require("events"));
  var _validator = require_validator();

  class SocksInterceptor {
    constructor(transport, pattern, redirectPortForTest) {
      this._handler = undefined;
      this._channel = undefined;
      this._socksSupportObjectGuid = undefined;
      this._ids = new Set;
      this._handler = new socks.SocksProxyHandler(pattern, redirectPortForTest);
      let lastId = -1;
      this._channel = new Proxy(new _events.default, {
        get: (obj, prop) => {
          if (prop in obj || obj[prop] !== undefined || typeof prop !== "string")
            return obj[prop];
          return (params) => {
            try {
              const id = --lastId;
              this._ids.add(id);
              const validator = (0, _validator.findValidator)("SocksSupport", prop, "Params");
              params = validator(params, "", {
                tChannelImpl: tChannelForSocks,
                binary: "toBase64"
              });
              transport.send({
                id,
                guid: this._socksSupportObjectGuid,
                method: prop,
                params,
                metadata: {
                  stack: [],
                  apiName: "",
                  internal: true
                }
              });
            } catch (e) {
            }
          };
        }
      });
      this._handler.on(socks.SocksProxyHandler.Events.SocksConnected, (payload) => this._channel.socksConnected(payload));
      this._handler.on(socks.SocksProxyHandler.Events.SocksData, (payload) => this._channel.socksData(payload));
      this._handler.on(socks.SocksProxyHandler.Events.SocksError, (payload) => this._channel.socksError(payload));
      this._handler.on(socks.SocksProxyHandler.Events.SocksFailed, (payload) => this._channel.socksFailed(payload));
      this._handler.on(socks.SocksProxyHandler.Events.SocksEnd, (payload) => this._channel.socksEnd(payload));
      this._channel.on("socksRequested", (payload) => this._handler.socketRequested(payload));
      this._channel.on("socksClosed", (payload) => this._handler.socketClosed(payload));
      this._channel.on("socksData", (payload) => this._handler.sendSocketData(payload));
    }
    cleanup() {
      this._handler.cleanup();
    }
    interceptMessage(message) {
      if (this._ids.has(message.id)) {
        this._ids.delete(message.id);
        return true;
      }
      if (message.method === "__create__" && message.params.type === "SocksSupport") {
        this._socksSupportObjectGuid = message.params.guid;
        return false;
      }
      if (this._socksSupportObjectGuid && message.guid === this._socksSupportObjectGuid) {
        const validator = (0, _validator.findValidator)("SocksSupport", message.method, "Event");
        const params = validator(message.params, "", {
          tChannelImpl: tChannelForSocks,
          binary: "fromBase64"
        });
        this._channel.emit(message.method, params);
        return true;
      }
      return false;
    }
  }
  exports.SocksInterceptor = SocksInterceptor;
});

// node_modules/playwright-core/lib/server/dispatchers/localUtilsDispatcher.js
var require_localUtilsDispatcher = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var countMatchingHeaders = function(harHeaders, headers) {
    const set = new Set(headers.map((h) => h.name.toLowerCase() + ":" + h.value));
    let matches = 0;
    for (const h of harHeaders) {
      if (set.has(h.name.toLowerCase() + ":" + h.value))
        ++matches;
    }
    return matches;
  };
  async function urlToWSEndpoint(progress2, endpointURL) {
    var _progress$timeUntilDe;
    if (endpointURL.startsWith("ws"))
      return endpointURL;
    progress2 === null || progress2 === undefined || progress2.log(`<ws preparing> retrieving websocket url from ${endpointURL}`);
    const fetchUrl = new URL(endpointURL);
    if (!fetchUrl.pathname.endsWith("/"))
      fetchUrl.pathname += "/";
    fetchUrl.pathname += "json";
    const json = await (0, _network.fetchData)({
      url: fetchUrl.toString(),
      method: "GET",
      timeout: (_progress$timeUntilDe = progress2 === null || progress2 === undefined ? undefined : progress2.timeUntilDeadline()) !== null && _progress$timeUntilDe !== undefined ? _progress$timeUntilDe : 30000,
      headers: {
        "User-Agent": (0, _userAgent.getUserAgent)()
      }
    }, async (params, response) => {
      return new Error(`Unexpected status ${response.statusCode} when connecting to ${fetchUrl.toString()}.\n` + `This does not look like a Playwright server, try connecting via ws://.`);
    });
    progress2 === null || progress2 === undefined || progress2.throwIfAborted();
    const wsUrl = new URL(endpointURL);
    let wsEndpointPath = JSON.parse(json).wsEndpointPath;
    if (wsEndpointPath.startsWith("/"))
      wsEndpointPath = wsEndpointPath.substring(1);
    if (!wsUrl.pathname.endsWith("/"))
      wsUrl.pathname += "/";
    wsUrl.pathname += wsEndpointPath;
    wsUrl.protocol = wsUrl.protocol === "https:" ? "wss:" : "ws:";
    return wsUrl.toString();
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.LocalUtilsDispatcher = undefined;
  exports.urlToWSEndpoint = urlToWSEndpoint;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _os = _interopRequireDefault(import.meta.require("os"));
  var _manualPromise = require_manualPromise();
  var _utils = require_utils3();
  var _dispatcher = require_dispatcher();
  var _zipBundle = require_zipBundle();
  var _zipFile = require_zipFile();
  var _jsonPipeDispatcher = require_jsonPipeDispatcher();
  var _transport = require_transport2();
  var _socksInterceptor = require_socksInterceptor();
  var _userAgent = require_userAgent();
  var _progress = require_progress();
  var _network = require_network();
  var _instrumentation = require_instrumentation();

  class LocalUtilsDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, playwright) {
      const localUtils = new _instrumentation.SdkObject(playwright, "localUtils", "localUtils");
      const descriptors = require_deviceDescriptorsSource();
      const deviceDescriptors = Object.entries(descriptors).map(([name, descriptor]) => ({
        name,
        descriptor
      }));
      super(scope, localUtils, "LocalUtils", {
        deviceDescriptors
      });
      this._type_LocalUtils = undefined;
      this._harBackends = new Map;
      this._stackSessions = new Map;
      this._type_LocalUtils = true;
    }
    async zip(params) {
      const promise = new _manualPromise.ManualPromise;
      const zipFile = new _zipBundle.yazl.ZipFile;
      zipFile.on("error", (error) => promise.reject(error));
      const addFile = (file, name) => {
        try {
          if (_fs.default.statSync(file).isFile())
            zipFile.addFile(file, name);
        } catch (e) {
        }
      };
      for (const entry of params.entries)
        addFile(entry.value, entry.name);
      const stackSession = params.stacksId ? this._stackSessions.get(params.stacksId) : undefined;
      if (stackSession !== null && stackSession !== undefined && stackSession.callStacks.length) {
        await stackSession.writer;
        if (process.env.PW_LIVE_TRACE_STACKS) {
          zipFile.addFile(stackSession.file, "trace.stacks");
        } else {
          const buffer = Buffer.from(JSON.stringify((0, _utils.serializeClientSideCallMetadata)(stackSession.callStacks)));
          zipFile.addBuffer(buffer, "trace.stacks");
        }
      }
      if (params.includeSources) {
        const sourceFiles = new Set;
        for (const {
          stack
        } of (stackSession === null || stackSession === undefined ? undefined : stackSession.callStacks) || []) {
          if (!stack)
            continue;
          for (const {
            file
          } of stack)
            sourceFiles.add(file);
        }
        for (const sourceFile of sourceFiles)
          addFile(sourceFile, "resources/src@" + (0, _utils.calculateSha1)(sourceFile) + ".txt");
      }
      if (params.mode === "write") {
        await _fs.default.promises.mkdir(_path.default.dirname(params.zipFile), {
          recursive: true
        });
        zipFile.end(undefined, () => {
          zipFile.outputStream.pipe(_fs.default.createWriteStream(params.zipFile)).on("close", () => promise.resolve()).on("error", (error) => promise.reject(error));
        });
        await promise;
        await this._deleteStackSession(params.stacksId);
        return;
      }
      const tempFile = params.zipFile + ".tmp";
      await _fs.default.promises.rename(params.zipFile, tempFile);
      _zipBundle.yauzl.open(tempFile, (err, inZipFile) => {
        if (err) {
          promise.reject(err);
          return;
        }
        (0, _utils.assert)(inZipFile);
        let pendingEntries = inZipFile.entryCount;
        inZipFile.on("entry", (entry) => {
          inZipFile.openReadStream(entry, (err2, readStream) => {
            if (err2) {
              promise.reject(err2);
              return;
            }
            zipFile.addReadStream(readStream, entry.fileName);
            if (--pendingEntries === 0) {
              zipFile.end(undefined, () => {
                zipFile.outputStream.pipe(_fs.default.createWriteStream(params.zipFile)).on("close", () => {
                  _fs.default.promises.unlink(tempFile).then(() => {
                    promise.resolve();
                  }).catch((error) => promise.reject(error));
                });
              });
            }
          });
        });
      });
      await promise;
      await this._deleteStackSession(params.stacksId);
    }
    async harOpen(params, metadata) {
      let harBackend;
      if (params.file.endsWith(".zip")) {
        const zipFile = new _zipFile.ZipFile(params.file);
        const entryNames = await zipFile.entries();
        const harEntryName = entryNames.find((e) => e.endsWith(".har"));
        if (!harEntryName)
          return {
            error: "Specified archive does not have a .har file"
          };
        const har = await zipFile.read(harEntryName);
        const harFile = JSON.parse(har.toString());
        harBackend = new HarBackend(harFile, null, zipFile);
      } else {
        const harFile = JSON.parse(await _fs.default.promises.readFile(params.file, "utf-8"));
        harBackend = new HarBackend(harFile, _path.default.dirname(params.file), null);
      }
      this._harBackends.set(harBackend.id, harBackend);
      return {
        harId: harBackend.id
      };
    }
    async harLookup(params, metadata) {
      const harBackend = this._harBackends.get(params.harId);
      if (!harBackend)
        return {
          action: "error",
          message: `Internal error: har was not opened`
        };
      return await harBackend.lookup(params.url, params.method, params.headers, params.postData, params.isNavigationRequest);
    }
    async harClose(params, metadata) {
      const harBackend = this._harBackends.get(params.harId);
      if (harBackend) {
        this._harBackends.delete(harBackend.id);
        harBackend.dispose();
      }
    }
    async harUnzip(params, metadata) {
      const dir = _path.default.dirname(params.zipFile);
      const zipFile = new _zipFile.ZipFile(params.zipFile);
      for (const entry of await zipFile.entries()) {
        const buffer = await zipFile.read(entry);
        if (entry === "har.har")
          await _fs.default.promises.writeFile(params.harFile, buffer);
        else
          await _fs.default.promises.writeFile(_path.default.join(dir, entry), buffer);
      }
      zipFile.close();
      await _fs.default.promises.unlink(params.zipFile);
    }
    async connect(params, metadata) {
      const controller = new _progress.ProgressController(metadata, this._object);
      controller.setLogName("browser");
      return await controller.run(async (progress2) => {
        var _params$exposeNetwork;
        const wsHeaders = {
          "User-Agent": (0, _userAgent.getUserAgent)(),
          "x-playwright-proxy": (_params$exposeNetwork = params.exposeNetwork) !== null && _params$exposeNetwork !== undefined ? _params$exposeNetwork : "",
          ...params.headers
        };
        const wsEndpoint = await urlToWSEndpoint(progress2, params.wsEndpoint);
        const transport = await _transport.WebSocketTransport.connect(progress2, wsEndpoint, wsHeaders, true, "x-playwright-debug-log");
        const socksInterceptor = new _socksInterceptor.SocksInterceptor(transport, params.exposeNetwork, params.socksProxyRedirectPortForTest);
        const pipe = new _jsonPipeDispatcher.JsonPipeDispatcher(this);
        transport.onmessage = (json) => {
          if (socksInterceptor.interceptMessage(json))
            return;
          const cb = () => {
            try {
              pipe.dispatch(json);
            } catch (e) {
              transport.close();
            }
          };
          if (params.slowMo)
            setTimeout(cb, params.slowMo);
          else
            cb();
        };
        pipe.on("message", (message) => {
          transport.send(message);
        });
        transport.onclose = (reason) => {
          socksInterceptor === null || socksInterceptor === undefined || socksInterceptor.cleanup();
          pipe.wasClosed(reason);
        };
        pipe.on("close", () => transport.close());
        return {
          pipe,
          headers: transport.headers
        };
      }, params.timeout || 0);
    }
    async tracingStarted(params, metadata) {
      let tmpDir = undefined;
      if (!params.tracesDir)
        tmpDir = await _fs.default.promises.mkdtemp(_path.default.join(_os.default.tmpdir(), "playwright-tracing-"));
      const traceStacksFile = _path.default.join(params.tracesDir || tmpDir, params.traceName + ".stacks");
      this._stackSessions.set(traceStacksFile, {
        callStacks: [],
        file: traceStacksFile,
        writer: Promise.resolve(),
        tmpDir
      });
      return {
        stacksId: traceStacksFile
      };
    }
    async traceDiscarded(params, metadata) {
      await this._deleteStackSession(params.stacksId);
    }
    async addStackToTracingNoReply(params, metadata) {
      for (const session of this._stackSessions.values()) {
        session.callStacks.push(params.callData);
        if (process.env.PW_LIVE_TRACE_STACKS) {
          session.writer = session.writer.then(() => {
            const buffer = Buffer.from(JSON.stringify((0, _utils.serializeClientSideCallMetadata)(session.callStacks)));
            return _fs.default.promises.writeFile(session.file, buffer);
          });
        }
      }
    }
    async _deleteStackSession(stacksId) {
      const session = stacksId ? this._stackSessions.get(stacksId) : undefined;
      if (!session)
        return;
      await session.writer;
      if (session.tmpDir)
        await (0, _utils.removeFolders)([session.tmpDir]);
      this._stackSessions.delete(stacksId);
    }
  }
  exports.LocalUtilsDispatcher = LocalUtilsDispatcher;
  var redirectStatus = [301, 302, 303, 307, 308];

  class HarBackend {
    constructor(harFile, baseDir, zipFile) {
      this.id = (0, _utils.createGuid)();
      this._harFile = undefined;
      this._zipFile = undefined;
      this._baseDir = undefined;
      this._harFile = harFile;
      this._baseDir = baseDir;
      this._zipFile = zipFile;
    }
    async lookup(url, method, headers, postData, isNavigationRequest) {
      let entry;
      try {
        entry = await this._harFindResponse(url, method, headers, postData);
      } catch (e) {
        return {
          action: "error",
          message: "HAR error: " + e.message
        };
      }
      if (!entry)
        return {
          action: "noentry"
        };
      if (entry.request.url !== url && isNavigationRequest)
        return {
          action: "redirect",
          redirectURL: entry.request.url
        };
      const response = entry.response;
      try {
        const buffer = await this._loadContent(response.content);
        return {
          action: "fulfill",
          status: response.status,
          headers: response.headers,
          body: buffer
        };
      } catch (e) {
        return {
          action: "error",
          message: e.message
        };
      }
    }
    async _loadContent(content) {
      const file = content._file;
      let buffer;
      if (file) {
        if (this._zipFile)
          buffer = await this._zipFile.read(file);
        else
          buffer = await _fs.default.promises.readFile(_path.default.resolve(this._baseDir, file));
      } else {
        buffer = Buffer.from(content.text || "", content.encoding === "base64" ? "base64" : "utf-8");
      }
      return buffer;
    }
    async _harFindResponse(url, method, headers, postData) {
      const harLog = this._harFile.log;
      const visited = new Set;
      while (true) {
        const entries = [];
        for (const candidate of harLog.entries) {
          if (candidate.request.url !== url || candidate.request.method !== method)
            continue;
          if (method === "POST" && postData && candidate.request.postData) {
            const buffer = await this._loadContent(candidate.request.postData);
            if (!buffer.equals(postData))
              continue;
          }
          entries.push(candidate);
        }
        if (!entries.length)
          return;
        let entry = entries[0];
        if (entries.length > 1) {
          const list = [];
          for (const candidate of entries) {
            const matchingHeaders = countMatchingHeaders(candidate.request.headers, headers);
            list.push({
              candidate,
              matchingHeaders
            });
          }
          list.sort((a, b) => b.matchingHeaders - a.matchingHeaders);
          entry = list[0].candidate;
        }
        if (visited.has(entry))
          throw new Error(`Found redirect cycle for ${url}`);
        visited.add(entry);
        const locationHeader = entry.response.headers.find((h) => h.name.toLowerCase() === "location");
        if (redirectStatus.includes(entry.response.status) && locationHeader) {
          const locationURL = new URL(locationHeader.value, url);
          url = locationURL.toString();
          if ((entry.response.status === 301 || entry.response.status === 302) && method === "POST" || entry.response.status === 303 && !["GET", "HEAD"].includes(method)) {
            method = "GET";
          }
          continue;
        }
        return entry;
      }
    }
    dispose() {
      var _this$_zipFile;
      (_this$_zipFile = this._zipFile) === null || _this$_zipFile === undefined || _this$_zipFile.close();
    }
  }
});

// node_modules/playwright-core/lib/server/dispatchers/selectorsDispatcher.js
var require_selectorsDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SelectorsDispatcher = undefined;
  var _dispatcher = require_dispatcher();

  class SelectorsDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, selectors) {
      super(scope, selectors, "Selectors", {});
      this._type_Selectors = true;
    }
    async register(params) {
      await this._object.register(params.name, params.source, params.contentScript);
    }
    async setTestIdAttributeName(params) {
      this._object.setTestIdAttributeName(params.testIdAttributeName);
    }
  }
  exports.SelectorsDispatcher = SelectorsDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/playwrightDispatcher.js
var require_playwrightDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PlaywrightDispatcher = undefined;
  var _fetch = require_fetch();
  var _socksProxy = require_socksProxy();
  var _androidDispatcher = require_androidDispatcher();
  var _browserTypeDispatcher = require_browserTypeDispatcher();
  var _dispatcher = require_dispatcher();
  var _electronDispatcher = require_electronDispatcher();
  var _localUtilsDispatcher = require_localUtilsDispatcher();
  var _networkDispatchers = require_networkDispatchers();
  var _selectorsDispatcher = require_selectorsDispatcher();
  var _browserDispatcher = require_browserDispatcher();
  var _utils = require_utils3();
  var _eventsHelper = require_eventsHelper();

  class PlaywrightDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, playwright, socksProxy, preLaunchedBrowser, prelaunchedAndroidDevice) {
      const browserDispatcher = preLaunchedBrowser ? new _browserDispatcher.ConnectedBrowserDispatcher(scope, preLaunchedBrowser) : undefined;
      const android = new _androidDispatcher.AndroidDispatcher(scope, playwright.android);
      const prelaunchedAndroidDeviceDispatcher = prelaunchedAndroidDevice ? new _androidDispatcher.AndroidDeviceDispatcher(android, prelaunchedAndroidDevice) : undefined;
      super(scope, playwright, "Playwright", {
        chromium: new _browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright.chromium),
        firefox: new _browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright.firefox),
        webkit: new _browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright.webkit),
        android,
        electron: new _electronDispatcher.ElectronDispatcher(scope, playwright.electron),
        utils: playwright.options.isServer ? undefined : new _localUtilsDispatcher.LocalUtilsDispatcher(scope, playwright),
        selectors: new _selectorsDispatcher.SelectorsDispatcher(scope, (browserDispatcher === null || browserDispatcher === undefined ? undefined : browserDispatcher.selectors) || playwright.selectors),
        preLaunchedBrowser: browserDispatcher,
        preConnectedAndroidDevice: prelaunchedAndroidDeviceDispatcher,
        socksSupport: socksProxy ? new SocksSupportDispatcher(scope, socksProxy) : undefined
      });
      this._type_Playwright = undefined;
      this._browserDispatcher = undefined;
      this._type_Playwright = true;
      this._browserDispatcher = browserDispatcher;
    }
    async newRequest(params) {
      const request = new _fetch.GlobalAPIRequestContext(this._object, params);
      return {
        request: _networkDispatchers.APIRequestContextDispatcher.from(this.parentScope(), request)
      };
    }
    async cleanup() {
      var _this$_browserDispatc;
      await ((_this$_browserDispatc = this._browserDispatcher) === null || _this$_browserDispatc === undefined ? undefined : _this$_browserDispatc.cleanupContexts());
    }
  }
  exports.PlaywrightDispatcher = PlaywrightDispatcher;

  class SocksSupportDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, socksProxy) {
      super(scope, {
        guid: "socksSupport@" + (0, _utils.createGuid)()
      }, "SocksSupport", {});
      this._type_SocksSupport = undefined;
      this._socksProxy = undefined;
      this._socksListeners = undefined;
      this._type_SocksSupport = true;
      this._socksProxy = socksProxy;
      this._socksListeners = [_eventsHelper.eventsHelper.addEventListener(socksProxy, _socksProxy.SocksProxy.Events.SocksRequested, (payload) => this._dispatchEvent("socksRequested", payload)), _eventsHelper.eventsHelper.addEventListener(socksProxy, _socksProxy.SocksProxy.Events.SocksData, (payload) => this._dispatchEvent("socksData", payload)), _eventsHelper.eventsHelper.addEventListener(socksProxy, _socksProxy.SocksProxy.Events.SocksClosed, (payload) => this._dispatchEvent("socksClosed", payload))];
    }
    async socksConnected(params) {
      var _this$_socksProxy;
      (_this$_socksProxy = this._socksProxy) === null || _this$_socksProxy === undefined || _this$_socksProxy.socketConnected(params);
    }
    async socksFailed(params) {
      var _this$_socksProxy2;
      (_this$_socksProxy2 = this._socksProxy) === null || _this$_socksProxy2 === undefined || _this$_socksProxy2.socketFailed(params);
    }
    async socksData(params) {
      var _this$_socksProxy3;
      (_this$_socksProxy3 = this._socksProxy) === null || _this$_socksProxy3 === undefined || _this$_socksProxy3.sendSocketData(params);
    }
    async socksError(params) {
      var _this$_socksProxy4;
      (_this$_socksProxy4 = this._socksProxy) === null || _this$_socksProxy4 === undefined || _this$_socksProxy4.sendSocketError(params);
    }
    async socksEnd(params) {
      var _this$_socksProxy5;
      (_this$_socksProxy5 = this._socksProxy) === null || _this$_socksProxy5 === undefined || _this$_socksProxy5.sendSocketEnd(params);
    }
    _onDispose() {
      _eventsHelper.eventsHelper.removeEventListeners(this._socksListeners);
    }
  }
});

// node_modules/playwright-core/lib/server/trace/viewer/traceViewer.js
var require_traceViewer = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var validateTraceUrls = function(traceUrls) {
    for (const traceUrl of traceUrls) {
      let traceFile = traceUrl;
      if (traceUrl.endsWith(".json"))
        traceFile = traceUrl.substring(0, traceUrl.length - ".json".length);
      if (!traceUrl.startsWith("http://") && !traceUrl.startsWith("https://") && !_fs.default.existsSync(traceFile) && !_fs.default.existsSync(traceFile + ".trace"))
        throw new Error(`Trace file ${traceUrl} does not exist!`);
    }
  };
  async function startTraceViewerServer(options) {
    const server = new _httpServer.HttpServer;
    server.routePrefix("/trace", (request, response) => {
      const url = new URL("http://localhost" + request.url);
      const relativePath = url.pathname.slice("/trace".length);
      if (relativePath.endsWith("/stall.js"))
        return true;
      if (relativePath.startsWith("/file")) {
        try {
          const filePath = url.searchParams.get("path");
          if (_fs.default.existsSync(filePath))
            return server.serveFile(request, response, url.searchParams.get("path"));
          if (filePath.endsWith(".json")) {
            const traceName = filePath.substring(0, filePath.length - ".json".length);
            response.statusCode = 200;
            response.setHeader("Content-Type", "application/json");
            response.end(JSON.stringify(traceDescriptor(traceName)));
            return true;
          }
        } catch (e) {
        }
        response.statusCode = 404;
        response.end();
        return true;
      }
      const absolutePath = _path.default.join(__dirname, "..", "..", "..", "vite", "traceViewer", ...relativePath.split("/"));
      return server.serveFile(request, response, absolutePath);
    });
    const transport = (options === null || options === undefined ? undefined : options.transport) || (options !== null && options !== undefined && options.isServer ? new StdinServer : undefined);
    if (transport)
      server.createWebSocket(transport);
    const {
      host,
      port
    } = options || {};
    await server.start({
      preferredPort: port,
      host
    });
    return server;
  }
  async function installRootRedirect(server, traceUrls, options) {
    const params = new URLSearchParams;
    for (const traceUrl of traceUrls)
      params.append("trace", traceUrl);
    if (server.wsGuid())
      params.append("ws", server.wsGuid());
    if (options !== null && options !== undefined && options.isServer)
      params.append("isServer", "");
    if ((0, _utils.isUnderTest)())
      params.append("isUnderTest", "true");
    for (const arg of options.args || [])
      params.append("arg", arg);
    if (options.grep)
      params.append("grep", options.grep);
    if (options.grepInvert)
      params.append("grepInvert", options.grepInvert);
    for (const project of options.project || [])
      params.append("project", project);
    if (options.workers)
      params.append("workers", String(options.workers));
    if (options.timeout)
      params.append("timeout", String(options.timeout));
    if (options.headed)
      params.append("headed", "");
    for (const reporter of options.reporter || [])
      params.append("reporter", reporter);
    const urlPath = `/trace/${options.webApp || "index.html"}?${params.toString()}`;
    server.routePath("/", (_, response) => {
      response.statusCode = 302;
      response.setHeader("Location", urlPath);
      response.end();
      return true;
    });
  }
  async function runTraceViewerApp(traceUrls, browserName, options, exitOnClose) {
    validateTraceUrls(traceUrls);
    const server = await startTraceViewerServer(options);
    await installRootRedirect(server, traceUrls, options);
    const page = await openTraceViewerApp(server.urlPrefix("precise"), browserName, options);
    if (exitOnClose)
      page.on("close", () => (0, _utils.gracefullyProcessExitDoNotHang)(0));
    return page;
  }
  async function runTraceInBrowser(traceUrls, options) {
    validateTraceUrls(traceUrls);
    const server = await startTraceViewerServer(options);
    await installRootRedirect(server, traceUrls, options);
    await openTraceInBrowser(server.urlPrefix("human-readable"));
  }
  async function openTraceViewerApp(url, browserName, options) {
    const traceViewerPlaywright = (0, _playwright.createPlaywright)({
      sdkLanguage: "javascript",
      isInternalPlaywright: true
    });
    const traceViewerBrowser = (0, _utils.isUnderTest)() ? "chromium" : browserName;
    const {
      context,
      page
    } = await (0, _launchApp.launchApp)(traceViewerPlaywright[traceViewerBrowser], {
      sdkLanguage: traceViewerPlaywright.options.sdkLanguage,
      windowSize: {
        width: 1280,
        height: 800
      },
      persistentContextOptions: {
        ...options === null || options === undefined ? undefined : options.persistentContextOptions,
        useWebSocket: (0, _utils.isUnderTest)(),
        headless: !!(options !== null && options !== undefined && options.headless)
      }
    });
    const controller = new _progress.ProgressController((0, _instrumentation.serverSideCallMetadata)(), context._browser);
    await controller.run(async (progress2) => {
      await context._browser._defaultContext._loadDefaultContextAsIs(progress2);
    });
    if (process.env.PWTEST_PRINT_WS_ENDPOINT)
      process.stderr.write("DevTools listening on: " + context._browser.options.wsEndpoint + "\n");
    if (!(0, _utils.isUnderTest)())
      await (0, _launchApp.syncLocalStorageWithSettings)(page, "traceviewer");
    if ((0, _utils.isUnderTest)())
      page.on("close", () => context.close({
        reason: "Trace viewer closed"
      }).catch(() => {
      }));
    await page.mainFrame().goto((0, _instrumentation.serverSideCallMetadata)(), url);
    return page;
  }
  async function openTraceInBrowser(url) {
    console.log("\nListening on " + url);
    if (!(0, _utils.isUnderTest)())
      await (0, _utilsBundle.open)(url.replace("0.0.0.0", "localhost")).catch(() => {
      });
  }
  var traceDescriptor = function(traceName) {
    const result = {
      entries: []
    };
    const traceDir = _path.default.dirname(traceName);
    const traceFile = _path.default.basename(traceName);
    for (const name of _fs.default.readdirSync(traceDir)) {
      if (name.startsWith(traceFile))
        result.entries.push({
          name,
          path: _path.default.join(traceDir, name)
        });
    }
    const resourcesDir = _path.default.join(traceDir, "resources");
    if (_fs.default.existsSync(resourcesDir)) {
      for (const name of _fs.default.readdirSync(resourcesDir))
        result.entries.push({
          name: "resources/" + name,
          path: _path.default.join(resourcesDir, name)
        });
    }
    return result;
  };
  var __dirname = "/Users/hottin/project/jwave_playlist/node_modules/playwright-core/lib/server/trace/viewer";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.installRootRedirect = installRootRedirect;
  exports.openTraceInBrowser = openTraceInBrowser;
  exports.openTraceViewerApp = openTraceViewerApp;
  exports.runTraceInBrowser = runTraceInBrowser;
  exports.runTraceViewerApp = runTraceViewerApp;
  exports.startTraceViewerServer = startTraceViewerServer;
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _httpServer = require_httpServer();
  var _utils = require_utils3();
  var _launchApp = require_launchApp();
  var _instrumentation = require_instrumentation();
  var _playwright = require_playwright();
  var _progress = require_progress();
  var _utilsBundle = require_utilsBundle();

  class StdinServer {
    constructor() {
      this._pollTimer = undefined;
      this._traceUrl = undefined;
      this.sendEvent = undefined;
      this.close = undefined;
      process.stdin.on("data", (data) => {
        const url = data.toString().trim();
        if (url === this._traceUrl)
          return;
        if (url.endsWith(".json"))
          this._pollLoadTrace(url);
        else
          this._loadTrace(url);
      });
      process.stdin.on("close", () => (0, _utils.gracefullyProcessExitDoNotHang)(0));
    }
    async dispatch(method, params) {
      if (method === "initialize") {
        if (this._traceUrl)
          this._loadTrace(this._traceUrl);
      }
    }
    onclose() {
    }
    _loadTrace(traceUrl) {
      var _this$sendEvent;
      this._traceUrl = traceUrl;
      clearTimeout(this._pollTimer);
      (_this$sendEvent = this.sendEvent) === null || _this$sendEvent === undefined || _this$sendEvent.call(this, "loadTraceRequested", {
        traceUrl
      });
    }
    _pollLoadTrace(url) {
      this._loadTrace(url);
      this._pollTimer = setTimeout(() => {
        this._pollLoadTrace(url);
      }, 500);
    }
  }
});

// node_modules/playwright-core/lib/server/index.js
var require_server = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "DispatcherConnection", {
    enumerable: true,
    get: function() {
      return _dispatcher.DispatcherConnection;
    }
  });
  Object.defineProperty(exports, "PlaywrightDispatcher", {
    enumerable: true,
    get: function() {
      return _playwrightDispatcher.PlaywrightDispatcher;
    }
  });
  Object.defineProperty(exports, "Registry", {
    enumerable: true,
    get: function() {
      return _registry.Registry;
    }
  });
  Object.defineProperty(exports, "RootDispatcher", {
    enumerable: true,
    get: function() {
      return _dispatcher.RootDispatcher;
    }
  });
  Object.defineProperty(exports, "SocksProxy", {
    enumerable: true,
    get: function() {
      return _socksProxy.SocksProxy;
    }
  });
  Object.defineProperty(exports, "createPlaywright", {
    enumerable: true,
    get: function() {
      return _playwright.createPlaywright;
    }
  });
  Object.defineProperty(exports, "installBrowsersForNpmInstall", {
    enumerable: true,
    get: function() {
      return _registry.installBrowsersForNpmInstall;
    }
  });
  Object.defineProperty(exports, "installDefaultBrowsersForNpmInstall", {
    enumerable: true,
    get: function() {
      return _registry.installDefaultBrowsersForNpmInstall;
    }
  });
  Object.defineProperty(exports, "installRootRedirect", {
    enumerable: true,
    get: function() {
      return _traceViewer.installRootRedirect;
    }
  });
  Object.defineProperty(exports, "openTraceInBrowser", {
    enumerable: true,
    get: function() {
      return _traceViewer.openTraceInBrowser;
    }
  });
  Object.defineProperty(exports, "openTraceViewerApp", {
    enumerable: true,
    get: function() {
      return _traceViewer.openTraceViewerApp;
    }
  });
  Object.defineProperty(exports, "registry", {
    enumerable: true,
    get: function() {
      return _registry.registry;
    }
  });
  Object.defineProperty(exports, "registryDirectory", {
    enumerable: true,
    get: function() {
      return _registry.registryDirectory;
    }
  });
  Object.defineProperty(exports, "runTraceViewerApp", {
    enumerable: true,
    get: function() {
      return _traceViewer.runTraceViewerApp;
    }
  });
  Object.defineProperty(exports, "serverSideCallMetadata", {
    enumerable: true,
    get: function() {
      return _instrumentation.serverSideCallMetadata;
    }
  });
  Object.defineProperty(exports, "startTraceViewerServer", {
    enumerable: true,
    get: function() {
      return _traceViewer.startTraceViewerServer;
    }
  });
  Object.defineProperty(exports, "writeDockerVersion", {
    enumerable: true,
    get: function() {
      return _registry.writeDockerVersion;
    }
  });
  var _registry = require_registry();
  var _dispatcher = require_dispatcher();
  var _playwrightDispatcher = require_playwrightDispatcher();
  var _playwright = require_playwright();
  var _traceViewer = require_traceViewer();
  var _instrumentation = require_instrumentation();
  var _socksProxy = require_socksProxy();
});

// node_modules/playwright-core/lib/client/errors.js
var require_errors2 = __commonJS((exports) => {
  var isTargetClosedError = function(error) {
    return error instanceof TargetClosedError;
  };
  var serializeError = function(e) {
    if ((0, _utils.isError)(e))
      return {
        error: {
          message: e.message,
          stack: e.stack,
          name: e.name
        }
      };
    return {
      value: (0, _serializers.serializeValue)(e, (value) => ({
        fallThrough: value
      }))
    };
  };
  var parseError = function(error) {
    if (!error.error) {
      if (error.value === undefined)
        throw new Error("Serialized error must have either an error or a value");
      return (0, _serializers.parseSerializedValue)(error.value, undefined);
    }
    if (error.error.name === "TimeoutError") {
      const e2 = new TimeoutError(error.error.message);
      e2.stack = error.error.stack || "";
      return e2;
    }
    if (error.error.name === "TargetClosedError") {
      const e2 = new TargetClosedError(error.error.message);
      e2.stack = error.error.stack || "";
      return e2;
    }
    const e = new Error(error.error.message);
    e.stack = error.error.stack || "";
    e.name = error.error.name;
    return e;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TimeoutError = exports.TargetClosedError = undefined;
  exports.isTargetClosedError = isTargetClosedError;
  exports.parseError = parseError;
  exports.serializeError = serializeError;
  var _utils = require_utils3();
  var _serializers = require_serializers();

  class TimeoutError extends Error {
    constructor(message) {
      super(message);
      this.name = "TimeoutError";
    }
  }
  exports.TimeoutError = TimeoutError;

  class TargetClosedError extends Error {
    constructor(cause) {
      super(cause || "Target page, context or browser has been closed");
    }
  }
  exports.TargetClosedError = TargetClosedError;
});

// node_modules/playwright-core/lib/client/accessibility.js
var require_accessibility2 = __commonJS((exports) => {
  var axNodeFromProtocol = function(axNode) {
    const result = {
      ...axNode,
      value: axNode.valueNumber !== undefined ? axNode.valueNumber : axNode.valueString,
      checked: axNode.checked === "checked" ? true : axNode.checked === "unchecked" ? false : axNode.checked,
      pressed: axNode.pressed === "pressed" ? true : axNode.pressed === "released" ? false : axNode.pressed,
      children: axNode.children ? axNode.children.map(axNodeFromProtocol) : undefined
    };
    delete result.valueNumber;
    delete result.valueString;
    return result;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Accessibility = undefined;

  class Accessibility {
    constructor(channel) {
      this._channel = undefined;
      this._channel = channel;
    }
    async snapshot(options = {}) {
      const root = options.root ? options.root._elementChannel : undefined;
      const result = await this._channel.accessibilitySnapshot({
        interestingOnly: options.interestingOnly,
        root
      });
      return result.rootAXNode ? axNodeFromProtocol(result.rootAXNode) : null;
    }
  }
  exports.Accessibility = Accessibility;
});

// node_modules/playwright-core/lib/client/channelOwner.js
var require_channelOwner = __commonJS((exports) => {
  var logApiCall = function(logger, message, isNested) {
    if (isNested)
      return;
    if (logger && logger.isEnabled("api", "info"))
      logger.log("api", "info", message, [], {
        color: "cyan"
      });
    _debugLogger.debugLogger.log("api", message);
  };
  var tChannelImplToWire = function(names, arg, path, context) {
    if (arg._object instanceof ChannelOwner && (names === "*" || names.includes(arg._object._type)))
      return {
        guid: arg._object._guid
      };
    throw new _validator.ValidationError(`${path}: expected channel ${names.toString()}`);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ChannelOwner = undefined;
  var _events = import.meta.require("events");
  var _validator = require_validator();
  var _debugLogger = require_debugLogger();
  var _stackTrace = require_stackTrace();
  var _utils = require_utils3();
  var _zones = require_zones();

  class ChannelOwner extends _events.EventEmitter {
    constructor(parent, type, guid, initializer) {
      super();
      this._connection = undefined;
      this._parent = undefined;
      this._objects = new Map;
      this._type = undefined;
      this._guid = undefined;
      this._channel = undefined;
      this._initializer = undefined;
      this._logger = undefined;
      this._instrumentation = undefined;
      this._eventToSubscriptionMapping = new Map;
      this._wasCollected = false;
      this.setMaxListeners(0);
      this._connection = parent instanceof ChannelOwner ? parent._connection : parent;
      this._type = type;
      this._guid = guid;
      this._parent = parent instanceof ChannelOwner ? parent : undefined;
      this._instrumentation = this._connection._instrumentation;
      this._connection._objects.set(guid, this);
      if (this._parent) {
        this._parent._objects.set(guid, this);
        this._logger = this._parent._logger;
      }
      this._channel = this._createChannel(new _events.EventEmitter);
      this._initializer = initializer;
    }
    _setEventToSubscriptionMapping(mapping) {
      this._eventToSubscriptionMapping = mapping;
    }
    _updateSubscription(event, enabled) {
      const protocolEvent = this._eventToSubscriptionMapping.get(String(event));
      if (protocolEvent) {
        this._wrapApiCall(async () => {
          await this._channel.updateSubscription({
            event: protocolEvent,
            enabled
          });
        }, true).catch(() => {
        });
      }
    }
    on(event, listener) {
      if (!this.listenerCount(event))
        this._updateSubscription(event, true);
      super.on(event, listener);
      return this;
    }
    addListener(event, listener) {
      if (!this.listenerCount(event))
        this._updateSubscription(event, true);
      super.addListener(event, listener);
      return this;
    }
    prependListener(event, listener) {
      if (!this.listenerCount(event))
        this._updateSubscription(event, true);
      super.prependListener(event, listener);
      return this;
    }
    off(event, listener) {
      super.off(event, listener);
      if (!this.listenerCount(event))
        this._updateSubscription(event, false);
      return this;
    }
    removeListener(event, listener) {
      super.removeListener(event, listener);
      if (!this.listenerCount(event))
        this._updateSubscription(event, false);
      return this;
    }
    _adopt(child) {
      child._parent._objects.delete(child._guid);
      this._objects.set(child._guid, child);
      child._parent = this;
    }
    _dispose(reason) {
      if (this._parent)
        this._parent._objects.delete(this._guid);
      this._connection._objects.delete(this._guid);
      this._wasCollected = reason === "gc";
      for (const object of [...this._objects.values()])
        object._dispose(reason);
      this._objects.clear();
    }
    _debugScopeState() {
      return {
        _guid: this._guid,
        objects: Array.from(this._objects.values()).map((o) => o._debugScopeState())
      };
    }
    _createChannel(base) {
      const channel = new Proxy(base, {
        get: (obj, prop) => {
          if (typeof prop === "string") {
            const validator = (0, _validator.maybeFindValidator)(this._type, prop, "Params");
            if (validator) {
              return async (params) => {
                return await this._wrapApiCall(async (apiZone) => {
                  const {
                    apiName,
                    frames,
                    csi,
                    callCookie,
                    wallTime
                  } = apiZone.reported ? {
                    apiName: undefined,
                    csi: undefined,
                    callCookie: undefined,
                    frames: [],
                    wallTime: undefined
                  } : apiZone;
                  apiZone.reported = true;
                  if (csi && apiName)
                    csi.onApiCallBegin(apiName, params, frames, wallTime, callCookie);
                  return await this._connection.sendMessageToServer(this, prop, validator(params, "", {
                    tChannelImpl: tChannelImplToWire,
                    binary: this._connection.rawBuffers() ? "buffer" : "toBase64"
                  }), apiName, frames, wallTime);
                });
              };
            }
          }
          return obj[prop];
        }
      });
      channel._object = this;
      return channel;
    }
    async _wrapApiCall(func, isInternal = false) {
      const logger = this._logger;
      const apiZone = _zones.zones.zoneData("apiZone");
      if (apiZone)
        return await func(apiZone);
      const stackTrace = (0, _stackTrace.captureLibraryStackTrace)();
      let apiName = stackTrace.apiName;
      const frames = stackTrace.frames;
      isInternal = isInternal || this._type === "LocalUtils";
      if (isInternal)
        apiName = undefined;
      const expectZone = _zones.zones.zoneData("expectZone");
      const wallTime = expectZone ? expectZone.wallTime : Date.now();
      if (!isInternal && expectZone)
        apiName = expectZone.title;
      const csi = isInternal || expectZone ? undefined : this._instrumentation;
      const callCookie = {};
      try {
        logApiCall(logger, `=> ${apiName} started`, isInternal);
        const apiZone2 = {
          apiName,
          frames,
          isInternal,
          reported: false,
          csi,
          callCookie,
          wallTime
        };
        const result = await _zones.zones.run("apiZone", apiZone2, async () => await func(apiZone2));
        csi === null || csi === undefined || csi.onApiCallEnd(callCookie);
        logApiCall(logger, `<= ${apiName} succeeded`, isInternal);
        return result;
      } catch (e) {
        const innerError = (process.env.PWDEBUGIMPL || (0, _utils.isUnderTest)()) && e.stack ? "\n<inner error>\n" + e.stack : "";
        if (apiName && !apiName.includes("<anonymous>"))
          e.message = apiName + ": " + e.message;
        const stackFrames = "\n" + (0, _stackTrace.stringifyStackFrames)(stackTrace.frames).join("\n") + innerError;
        if (stackFrames.trim())
          e.stack = e.message + stackFrames;
        else
          e.stack = "";
        csi === null || csi === undefined || csi.onApiCallEnd(callCookie, e);
        logApiCall(logger, `<= ${apiName} failed`, isInternal);
        throw e;
      }
    }
    _toImpl() {
      var _this$_connection$toI, _this$_connection;
      return (_this$_connection$toI = (_this$_connection = this._connection).toImpl) === null || _this$_connection$toI === undefined ? undefined : _this$_connection$toI.call(_this$_connection, this);
    }
    toJSON() {
      return {
        _type: this._type,
        _guid: this._guid
      };
    }
  }
  exports.ChannelOwner = ChannelOwner;
});

// node_modules/playwright-core/lib/client/stream.js
var require_stream = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Stream = undefined;
  var _stream = import.meta.require("stream");
  var _channelOwner = require_channelOwner();

  class Stream extends _channelOwner.ChannelOwner {
    static from(Stream2) {
      return Stream2._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
    }
    stream() {
      return new StreamImpl(this._channel);
    }
  }
  exports.Stream = Stream;

  class StreamImpl extends _stream.Readable {
    constructor(channel) {
      super();
      this._channel = undefined;
      this._channel = channel;
    }
    async _read() {
      const result = await this._channel.read({
        size: 1024 * 1024
      });
      if (result.binary.byteLength)
        this.push(result.binary);
      else
        this.push(null);
    }
    _destroy(error, callback) {
      this._channel.close().catch((e) => null);
      super._destroy(error, callback);
    }
  }
});

// node_modules/playwright-core/lib/client/artifact.js
var require_artifact2 = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Artifact = undefined;
  var fs = _interopRequireWildcard(import.meta.require("fs"));
  var _stream = require_stream();
  var _fileUtils = require_fileUtils();
  var _channelOwner = require_channelOwner();

  class Artifact extends _channelOwner.ChannelOwner {
    static from(channel) {
      return channel._object;
    }
    async pathAfterFinished() {
      if (this._connection.isRemote())
        throw new Error(`Path is not available when connecting remotely. Use saveAs() to save a local copy.`);
      return (await this._channel.pathAfterFinished()).value;
    }
    async saveAs(path) {
      if (!this._connection.isRemote()) {
        await this._channel.saveAs({
          path
        });
        return;
      }
      const result = await this._channel.saveAsStream();
      const stream = _stream.Stream.from(result.stream);
      await (0, _fileUtils.mkdirIfNeeded)(path);
      await new Promise((resolve, reject) => {
        stream.stream().pipe(fs.createWriteStream(path)).on("finish", resolve).on("error", reject);
      });
    }
    async failure() {
      return (await this._channel.failure()).error || null;
    }
    async createReadStream() {
      const result = await this._channel.stream();
      const stream = _stream.Stream.from(result.stream);
      return stream.stream();
    }
    async readIntoBuffer() {
      const stream = await this.createReadStream();
      return await new Promise((resolve, reject) => {
        const chunks = [];
        stream.on("data", (chunk) => {
          chunks.push(chunk);
        });
        stream.on("end", () => {
          resolve(Buffer.concat(chunks));
        });
        stream.on("error", reject);
      });
    }
    async cancel() {
      return await this._channel.cancel();
    }
    async delete() {
      return await this._channel.delete();
    }
  }
  exports.Artifact = Artifact;
});

// node_modules/playwright-core/lib/client/clientHelper.js
var require_clientHelper = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var envObjectToArray = function(env) {
    const result = [];
    for (const name in env) {
      if (!Object.is(env[name], undefined))
        result.push({
          name,
          value: String(env[name])
        });
    }
    return result;
  };
  async function evaluationScript(fun, arg, addSourceUrl = true) {
    if (typeof fun === "function") {
      const source = fun.toString();
      const argString = Object.is(arg, undefined) ? "undefined" : JSON.stringify(arg);
      return `(${source})(${argString})`;
    }
    if (arg !== undefined)
      throw new Error("Cannot evaluate a string with arguments");
    if ((0, _utils.isString)(fun))
      return fun;
    if (fun.content !== undefined)
      return fun.content;
    if (fun.path !== undefined) {
      let source = await _fs.default.promises.readFile(fun.path, "utf8");
      if (addSourceUrl)
        source = addSourceUrlToScript(source, fun.path);
      return source;
    }
    throw new Error("Either path or content property must be present");
  }
  var addSourceUrlToScript = function(source, path) {
    return `${source}\n//# sourceURL=${path.replace(/\n/g, "")}`;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.addSourceUrlToScript = addSourceUrlToScript;
  exports.envObjectToArray = envObjectToArray;
  exports.evaluationScript = evaluationScript;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _utils = require_utils3();
});

// node_modules/playwright-core/lib/client/coverage.js
var require_coverage = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Coverage = undefined;

  class Coverage {
    constructor(channel) {
      this._channel = undefined;
      this._channel = channel;
    }
    async startJSCoverage(options = {}) {
      await this._channel.startJSCoverage(options);
    }
    async stopJSCoverage() {
      return (await this._channel.stopJSCoverage()).entries;
    }
    async startCSSCoverage(options = {}) {
      await this._channel.startCSSCoverage(options);
    }
    async stopCSSCoverage() {
      return (await this._channel.stopCSSCoverage()).entries;
    }
  }
  exports.Coverage = Coverage;
});

// node_modules/playwright-core/lib/client/download.js
var require_download2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Download = undefined;

  class Download {
    constructor(page, url, suggestedFilename, artifact) {
      this._page = undefined;
      this._url = undefined;
      this._suggestedFilename = undefined;
      this._artifact = undefined;
      this._page = page;
      this._url = url;
      this._suggestedFilename = suggestedFilename;
      this._artifact = artifact;
    }
    page() {
      return this._page;
    }
    url() {
      return this._url;
    }
    suggestedFilename() {
      return this._suggestedFilename;
    }
    async path() {
      return await this._artifact.pathAfterFinished();
    }
    async saveAs(path) {
      return await this._artifact.saveAs(path);
    }
    async failure() {
      return await this._artifact.failure();
    }
    async createReadStream() {
      return await this._artifact.createReadStream();
    }
    async cancel() {
      return await this._artifact.cancel();
    }
    async delete() {
      return await this._artifact.delete();
    }
  }
  exports.Download = Download;
});

// node_modules/playwright-core/lib/client/jsHandle.js
var require_jsHandle = __commonJS((exports) => {
  var serializeArgument = function(arg) {
    const handles = [];
    const pushHandle = (channel) => {
      handles.push(channel);
      return handles.length - 1;
    };
    const value = (0, _serializers.serializeValue)(arg, (value2) => {
      if (value2 instanceof JSHandle)
        return {
          h: pushHandle(value2._channel)
        };
      return {
        fallThrough: value2
      };
    });
    return {
      value,
      handles
    };
  };
  var parseResult = function(value) {
    return (0, _serializers.parseSerializedValue)(value, undefined);
  };
  var assertMaxArguments = function(count, max) {
    if (count > max)
      throw new Error("Too many arguments. If you need to pass more than 1 argument to the function wrap them in an object.");
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.JSHandle = undefined;
  exports.assertMaxArguments = assertMaxArguments;
  exports.parseResult = parseResult;
  exports.serializeArgument = serializeArgument;
  var _channelOwner = require_channelOwner();
  var _serializers = require_serializers();
  var _errors = require_errors2();
  var _Symbol$asyncDispose;
  _Symbol$asyncDispose = Symbol.asyncDispose;

  class JSHandle extends _channelOwner.ChannelOwner {
    static from(handle) {
      return handle._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._preview = undefined;
      this._preview = this._initializer.preview;
      this._channel.on("previewUpdated", ({
        preview
      }) => this._preview = preview);
    }
    async evaluate(pageFunction, arg) {
      const result = await this._channel.evaluateExpression({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: serializeArgument(arg)
      });
      return parseResult(result.value);
    }
    async evaluateHandle(pageFunction, arg) {
      const result = await this._channel.evaluateExpressionHandle({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: serializeArgument(arg)
      });
      return JSHandle.from(result.handle);
    }
    async getProperty(propertyName) {
      const result = await this._channel.getProperty({
        name: propertyName
      });
      return JSHandle.from(result.handle);
    }
    async getProperties() {
      const map = new Map;
      for (const {
        name,
        value
      } of (await this._channel.getPropertyList()).properties)
        map.set(name, JSHandle.from(value));
      return map;
    }
    async jsonValue() {
      return parseResult((await this._channel.jsonValue()).value);
    }
    asElement() {
      return null;
    }
    async[_Symbol$asyncDispose]() {
      await this.dispose();
    }
    async dispose() {
      try {
        await this._channel.dispose();
      } catch (e) {
        if ((0, _errors.isTargetClosedError)(e))
          return;
        throw e;
      }
    }
    async _objectCount() {
      return await this._wrapApiCall(async () => {
        const {
          count
        } = await this._channel.objectCount();
        return count;
      });
    }
    toString() {
      return this._preview;
    }
  }
  exports.JSHandle = JSHandle;
});

// node_modules/playwright-core/lib/utils/isomorphic/locatorUtils.js
var require_locatorUtils = __commonJS((exports) => {
  var getByAttributeTextSelector = function(attrName, text, options) {
    return `internal:attr=[${attrName}=${(0, _stringUtils.escapeForAttributeSelector)(text, (options === null || options === undefined ? undefined : options.exact) || false)}]`;
  };
  var getByTestIdSelector = function(testIdAttributeName, testId) {
    return `internal:testid=[${testIdAttributeName}=${(0, _stringUtils.escapeForAttributeSelector)(testId, true)}]`;
  };
  var getByLabelSelector = function(text, options) {
    return "internal:label=" + (0, _stringUtils.escapeForTextSelector)(text, !!(options !== null && options !== undefined && options.exact));
  };
  var getByAltTextSelector = function(text, options) {
    return getByAttributeTextSelector("alt", text, options);
  };
  var getByTitleSelector = function(text, options) {
    return getByAttributeTextSelector("title", text, options);
  };
  var getByPlaceholderSelector = function(text, options) {
    return getByAttributeTextSelector("placeholder", text, options);
  };
  var getByTextSelector = function(text, options) {
    return "internal:text=" + (0, _stringUtils.escapeForTextSelector)(text, !!(options !== null && options !== undefined && options.exact));
  };
  var getByRoleSelector = function(role, options = {}) {
    const props = [];
    if (options.checked !== undefined)
      props.push(["checked", String(options.checked)]);
    if (options.disabled !== undefined)
      props.push(["disabled", String(options.disabled)]);
    if (options.selected !== undefined)
      props.push(["selected", String(options.selected)]);
    if (options.expanded !== undefined)
      props.push(["expanded", String(options.expanded)]);
    if (options.includeHidden !== undefined)
      props.push(["include-hidden", String(options.includeHidden)]);
    if (options.level !== undefined)
      props.push(["level", String(options.level)]);
    if (options.name !== undefined)
      props.push(["name", (0, _stringUtils.escapeForAttributeSelector)(options.name, !!options.exact)]);
    if (options.pressed !== undefined)
      props.push(["pressed", String(options.pressed)]);
    return `internal:role=${role}${props.map(([n, v]) => `[${n}=${v}]`).join("")}`;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getByAltTextSelector = getByAltTextSelector;
  exports.getByLabelSelector = getByLabelSelector;
  exports.getByPlaceholderSelector = getByPlaceholderSelector;
  exports.getByRoleSelector = getByRoleSelector;
  exports.getByTestIdSelector = getByTestIdSelector;
  exports.getByTextSelector = getByTextSelector;
  exports.getByTitleSelector = getByTitleSelector;
  var _stringUtils = require_stringUtils();
});

// node_modules/playwright-core/lib/client/locator.js
var require_locator = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var testIdAttributeName = function() {
    return _testIdAttributeName;
  };
  var setTestIdAttribute = function(attributeName) {
    _testIdAttributeName = attributeName;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Locator = exports.FrameLocator = undefined;
  exports.setTestIdAttribute = setTestIdAttribute;
  exports.testIdAttributeName = testIdAttributeName;
  var util = _interopRequireWildcard(import.meta.require("util"));
  var _utils = require_utils3();
  var _elementHandle = require_elementHandle();
  var _jsHandle = require_jsHandle();
  var _stringUtils = require_stringUtils();
  var _locatorUtils = require_locatorUtils();
  var _util$inspect$custom;
  _util$inspect$custom = util.inspect.custom;

  class Locator {
    constructor(frame, selector, options) {
      this._frame = undefined;
      this._selector = undefined;
      this._frame = frame;
      this._selector = selector;
      if (options !== null && options !== undefined && options.hasText)
        this._selector += ` >> internal:has-text=${(0, _stringUtils.escapeForTextSelector)(options.hasText, false)}`;
      if (options !== null && options !== undefined && options.hasNotText)
        this._selector += ` >> internal:has-not-text=${(0, _stringUtils.escapeForTextSelector)(options.hasNotText, false)}`;
      if (options !== null && options !== undefined && options.has) {
        const locator = options.has;
        if (locator._frame !== frame)
          throw new Error(`Inner "has" locator must belong to the same frame.`);
        this._selector += ` >> internal:has=` + JSON.stringify(locator._selector);
      }
      if (options !== null && options !== undefined && options.hasNot) {
        const locator = options.hasNot;
        if (locator._frame !== frame)
          throw new Error(`Inner "hasNot" locator must belong to the same frame.`);
        this._selector += ` >> internal:has-not=` + JSON.stringify(locator._selector);
      }
    }
    async _withElement(task, timeout) {
      timeout = this._frame.page()._timeoutSettings.timeout({
        timeout
      });
      const deadline = timeout ? (0, _utils.monotonicTime)() + timeout : 0;
      return await this._frame._wrapApiCall(async () => {
        const result = await this._frame._channel.waitForSelector({
          selector: this._selector,
          strict: true,
          state: "attached",
          timeout
        });
        const handle = _elementHandle.ElementHandle.fromNullable(result.element);
        if (!handle)
          throw new Error(`Could not resolve ${this._selector} to DOM Element`);
        try {
          return await task(handle, deadline ? deadline - (0, _utils.monotonicTime)() : 0);
        } finally {
          await handle.dispose();
        }
      });
    }
    _equals(locator) {
      return this._frame === locator._frame && this._selector === locator._selector;
    }
    page() {
      return this._frame.page();
    }
    async boundingBox(options) {
      return await this._withElement((h) => h.boundingBox(), options === null || options === undefined ? undefined : options.timeout);
    }
    async check(options = {}) {
      return await this._frame.check(this._selector, {
        strict: true,
        ...options
      });
    }
    async click(options = {}) {
      return await this._frame.click(this._selector, {
        strict: true,
        ...options
      });
    }
    async dblclick(options = {}) {
      return await this._frame.dblclick(this._selector, {
        strict: true,
        ...options
      });
    }
    async dispatchEvent(type, eventInit = {}, options) {
      return await this._frame.dispatchEvent(this._selector, type, eventInit, {
        strict: true,
        ...options
      });
    }
    async dragTo(target, options = {}) {
      return await this._frame.dragAndDrop(this._selector, target._selector, {
        strict: true,
        ...options
      });
    }
    async evaluate(pageFunction, arg, options) {
      return await this._withElement((h) => h.evaluate(pageFunction, arg), options === null || options === undefined ? undefined : options.timeout);
    }
    async evaluateAll(pageFunction, arg) {
      return await this._frame.$$eval(this._selector, pageFunction, arg);
    }
    async evaluateHandle(pageFunction, arg, options) {
      return await this._withElement((h) => h.evaluateHandle(pageFunction, arg), options === null || options === undefined ? undefined : options.timeout);
    }
    async fill(value, options = {}) {
      return await this._frame.fill(this._selector, value, {
        strict: true,
        ...options
      });
    }
    async clear(options = {}) {
      return await this.fill("", options);
    }
    async _highlight() {
      return await this._frame._highlight(this._selector);
    }
    async highlight() {
      return await this._frame._highlight(this._selector);
    }
    locator(selectorOrLocator, options) {
      if ((0, _utils.isString)(selectorOrLocator))
        return new Locator(this._frame, this._selector + " >> " + selectorOrLocator, options);
      if (selectorOrLocator._frame !== this._frame)
        throw new Error(`Locators must belong to the same frame.`);
      return new Locator(this._frame, this._selector + " >> internal:chain=" + JSON.stringify(selectorOrLocator._selector), options);
    }
    getByTestId(testId) {
      return this.locator((0, _locatorUtils.getByTestIdSelector)(testIdAttributeName(), testId));
    }
    getByAltText(text, options) {
      return this.locator((0, _locatorUtils.getByAltTextSelector)(text, options));
    }
    getByLabel(text, options) {
      return this.locator((0, _locatorUtils.getByLabelSelector)(text, options));
    }
    getByPlaceholder(text, options) {
      return this.locator((0, _locatorUtils.getByPlaceholderSelector)(text, options));
    }
    getByText(text, options) {
      return this.locator((0, _locatorUtils.getByTextSelector)(text, options));
    }
    getByTitle(text, options) {
      return this.locator((0, _locatorUtils.getByTitleSelector)(text, options));
    }
    getByRole(role, options = {}) {
      return this.locator((0, _locatorUtils.getByRoleSelector)(role, options));
    }
    frameLocator(selector) {
      return new FrameLocator(this._frame, this._selector + " >> " + selector);
    }
    filter(options) {
      return new Locator(this._frame, this._selector, options);
    }
    async elementHandle(options) {
      return await this._frame.waitForSelector(this._selector, {
        strict: true,
        state: "attached",
        ...options
      });
    }
    async elementHandles() {
      return await this._frame.$$(this._selector);
    }
    contentFrame() {
      return new FrameLocator(this._frame, this._selector);
    }
    first() {
      return new Locator(this._frame, this._selector + " >> nth=0");
    }
    last() {
      return new Locator(this._frame, this._selector + ` >> nth=-1`);
    }
    nth(index) {
      return new Locator(this._frame, this._selector + ` >> nth=${index}`);
    }
    and(locator) {
      if (locator._frame !== this._frame)
        throw new Error(`Locators must belong to the same frame.`);
      return new Locator(this._frame, this._selector + ` >> internal:and=` + JSON.stringify(locator._selector));
    }
    or(locator) {
      if (locator._frame !== this._frame)
        throw new Error(`Locators must belong to the same frame.`);
      return new Locator(this._frame, this._selector + ` >> internal:or=` + JSON.stringify(locator._selector));
    }
    async focus(options) {
      return await this._frame.focus(this._selector, {
        strict: true,
        ...options
      });
    }
    async blur(options) {
      await this._frame._channel.blur({
        selector: this._selector,
        strict: true,
        ...options
      });
    }
    async count() {
      return await this._frame._queryCount(this._selector);
    }
    async getAttribute(name, options) {
      return await this._frame.getAttribute(this._selector, name, {
        strict: true,
        ...options
      });
    }
    async hover(options = {}) {
      return await this._frame.hover(this._selector, {
        strict: true,
        ...options
      });
    }
    async innerHTML(options) {
      return await this._frame.innerHTML(this._selector, {
        strict: true,
        ...options
      });
    }
    async innerText(options) {
      return await this._frame.innerText(this._selector, {
        strict: true,
        ...options
      });
    }
    async inputValue(options) {
      return await this._frame.inputValue(this._selector, {
        strict: true,
        ...options
      });
    }
    async isChecked(options) {
      return await this._frame.isChecked(this._selector, {
        strict: true,
        ...options
      });
    }
    async isDisabled(options) {
      return await this._frame.isDisabled(this._selector, {
        strict: true,
        ...options
      });
    }
    async isEditable(options) {
      return await this._frame.isEditable(this._selector, {
        strict: true,
        ...options
      });
    }
    async isEnabled(options) {
      return await this._frame.isEnabled(this._selector, {
        strict: true,
        ...options
      });
    }
    async isHidden(options) {
      return await this._frame.isHidden(this._selector, {
        strict: true,
        ...options
      });
    }
    async isVisible(options) {
      return await this._frame.isVisible(this._selector, {
        strict: true,
        ...options
      });
    }
    async press(key, options = {}) {
      return await this._frame.press(this._selector, key, {
        strict: true,
        ...options
      });
    }
    async screenshot(options = {}) {
      return await this._withElement((h, timeout) => h.screenshot({
        ...options,
        timeout
      }), options.timeout);
    }
    async scrollIntoViewIfNeeded(options = {}) {
      return await this._withElement((h, timeout) => h.scrollIntoViewIfNeeded({
        ...options,
        timeout
      }), options.timeout);
    }
    async selectOption(values, options = {}) {
      return await this._frame.selectOption(this._selector, values, {
        strict: true,
        ...options
      });
    }
    async selectText(options = {}) {
      return await this._withElement((h, timeout) => h.selectText({
        ...options,
        timeout
      }), options.timeout);
    }
    async setChecked(checked, options) {
      if (checked)
        await this.check(options);
      else
        await this.uncheck(options);
    }
    async setInputFiles(files, options = {}) {
      return await this._frame.setInputFiles(this._selector, files, {
        strict: true,
        ...options
      });
    }
    async tap(options = {}) {
      return await this._frame.tap(this._selector, {
        strict: true,
        ...options
      });
    }
    async textContent(options) {
      return await this._frame.textContent(this._selector, {
        strict: true,
        ...options
      });
    }
    async type(text, options = {}) {
      return await this._frame.type(this._selector, text, {
        strict: true,
        ...options
      });
    }
    async pressSequentially(text, options = {}) {
      return await this.type(text, options);
    }
    async uncheck(options = {}) {
      return await this._frame.uncheck(this._selector, {
        strict: true,
        ...options
      });
    }
    async all() {
      return new Array(await this.count()).fill(0).map((e, i) => this.nth(i));
    }
    async allInnerTexts() {
      return await this._frame.$$eval(this._selector, (ee) => ee.map((e) => e.innerText));
    }
    async allTextContents() {
      return await this._frame.$$eval(this._selector, (ee) => ee.map((e) => e.textContent || ""));
    }
    async waitFor(options) {
      await this._frame._channel.waitForSelector({
        selector: this._selector,
        strict: true,
        omitReturnValue: true,
        ...options
      });
    }
    async _expect(expression, options) {
      const params = {
        selector: this._selector,
        expression,
        ...options,
        isNot: !!options.isNot
      };
      params.expectedValue = (0, _jsHandle.serializeArgument)(options.expectedValue);
      const result = await this._frame._channel.expect(params);
      if (result.received !== undefined)
        result.received = (0, _jsHandle.parseResult)(result.received);
      return result;
    }
    [_util$inspect$custom]() {
      return this.toString();
    }
    toString() {
      return (0, _utils.asLocator)("javascript", this._selector);
    }
  }
  exports.Locator = Locator;

  class FrameLocator {
    constructor(frame, selector) {
      this._frame = undefined;
      this._frameSelector = undefined;
      this._frame = frame;
      this._frameSelector = selector;
    }
    locator(selectorOrLocator, options) {
      if ((0, _utils.isString)(selectorOrLocator))
        return new Locator(this._frame, this._frameSelector + " >> internal:control=enter-frame >> " + selectorOrLocator, options);
      if (selectorOrLocator._frame !== this._frame)
        throw new Error(`Locators must belong to the same frame.`);
      return new Locator(this._frame, this._frameSelector + " >> internal:control=enter-frame >> " + selectorOrLocator._selector, options);
    }
    getByTestId(testId) {
      return this.locator((0, _locatorUtils.getByTestIdSelector)(testIdAttributeName(), testId));
    }
    getByAltText(text, options) {
      return this.locator((0, _locatorUtils.getByAltTextSelector)(text, options));
    }
    getByLabel(text, options) {
      return this.locator((0, _locatorUtils.getByLabelSelector)(text, options));
    }
    getByPlaceholder(text, options) {
      return this.locator((0, _locatorUtils.getByPlaceholderSelector)(text, options));
    }
    getByText(text, options) {
      return this.locator((0, _locatorUtils.getByTextSelector)(text, options));
    }
    getByTitle(text, options) {
      return this.locator((0, _locatorUtils.getByTitleSelector)(text, options));
    }
    getByRole(role, options = {}) {
      return this.locator((0, _locatorUtils.getByRoleSelector)(role, options));
    }
    owner() {
      return new Locator(this._frame, this._frameSelector);
    }
    frameLocator(selector) {
      return new FrameLocator(this._frame, this._frameSelector + " >> internal:control=enter-frame >> " + selector);
    }
    first() {
      return new FrameLocator(this._frame, this._frameSelector + " >> nth=0");
    }
    last() {
      return new FrameLocator(this._frame, this._frameSelector + ` >> nth=-1`);
    }
    nth(index) {
      return new FrameLocator(this._frame, this._frameSelector + ` >> nth=${index}`);
    }
  }
  exports.FrameLocator = FrameLocator;
  var _testIdAttributeName = "data-testid";
});

// node_modules/playwright-core/lib/client/events.js
var require_events = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Events = undefined;
  var Events = exports.Events = {
    AndroidDevice: {
      WebView: "webview",
      Close: "close"
    },
    AndroidSocket: {
      Data: "data",
      Close: "close"
    },
    AndroidWebView: {
      Close: "close"
    },
    Browser: {
      Disconnected: "disconnected"
    },
    BrowserContext: {
      Console: "console",
      Close: "close",
      Dialog: "dialog",
      Page: "page",
      WebError: "weberror",
      BackgroundPage: "backgroundpage",
      ServiceWorker: "serviceworker",
      Request: "request",
      Response: "response",
      RequestFailed: "requestfailed",
      RequestFinished: "requestfinished"
    },
    BrowserServer: {
      Close: "close"
    },
    Page: {
      Close: "close",
      Crash: "crash",
      Console: "console",
      Dialog: "dialog",
      Download: "download",
      FileChooser: "filechooser",
      DOMContentLoaded: "domcontentloaded",
      PageError: "pageerror",
      Request: "request",
      Response: "response",
      RequestFailed: "requestfailed",
      RequestFinished: "requestfinished",
      FrameAttached: "frameattached",
      FrameDetached: "framedetached",
      FrameNavigated: "framenavigated",
      Load: "load",
      Popup: "popup",
      WebSocket: "websocket",
      Worker: "worker"
    },
    WebSocket: {
      Close: "close",
      Error: "socketerror",
      FrameReceived: "framereceived",
      FrameSent: "framesent"
    },
    Worker: {
      Close: "close"
    },
    ElectronApplication: {
      Close: "close",
      Console: "console",
      Window: "window"
    }
  };
});

// node_modules/playwright-core/lib/client/worker.js
var require_worker = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Worker = undefined;
  var _events = require_events();
  var _channelOwner = require_channelOwner();
  var _jsHandle = require_jsHandle();
  var _utils = require_utils3();
  var _errors = require_errors2();

  class Worker extends _channelOwner.ChannelOwner {
    static from(worker) {
      return worker._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._page = undefined;
      this._context = undefined;
      this._closedScope = new _utils.LongStandingScope;
      this._channel.on("close", () => {
        if (this._page)
          this._page._workers.delete(this);
        if (this._context)
          this._context._serviceWorkers.delete(this);
        this.emit(_events.Events.Worker.Close, this);
      });
      this.once(_events.Events.Worker.Close, () => {
        var _this$_page;
        return this._closedScope.close(((_this$_page = this._page) === null || _this$_page === undefined ? undefined : _this$_page._closeErrorWithReason()) || new _errors.TargetClosedError);
      });
    }
    url() {
      return this._initializer.url;
    }
    async evaluate(pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 2);
      const result = await this._channel.evaluateExpression({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async evaluateHandle(pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 2);
      const result = await this._channel.evaluateExpressionHandle({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return _jsHandle.JSHandle.from(result.handle);
    }
  }
  exports.Worker = Worker;
});

// node_modules/playwright-core/lib/client/waiter.js
var require_waiter = __commonJS((exports) => {
  var waitForEvent = function(emitter, event, predicate) {
    let listener;
    const promise = new Promise((resolve, reject) => {
      listener = async (eventArg) => {
        try {
          if (predicate && !await predicate(eventArg))
            return;
          emitter.removeListener(event, listener);
          resolve(eventArg);
        } catch (e) {
          emitter.removeListener(event, listener);
          reject(e);
        }
      };
      emitter.addListener(event, listener);
    });
    const dispose = () => emitter.removeListener(event, listener);
    return {
      promise,
      dispose
    };
  };
  var waitForTimeout = function(timeout) {
    let timeoutId;
    const promise = new Promise((resolve) => timeoutId = setTimeout(resolve, timeout));
    const dispose = () => clearTimeout(timeoutId);
    return {
      promise,
      dispose
    };
  };
  var formatLogRecording = function(log) {
    if (!log.length)
      return "";
    const header = ` logs `;
    const headerLength = 60;
    const leftLength = (headerLength - header.length) / 2;
    const rightLength = headerLength - header.length - leftLength;
    return `\n${"=".repeat(leftLength)}${header}${"=".repeat(rightLength)}\n${log.join("\n")}\n${"=".repeat(headerLength)}`;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Waiter = undefined;
  var _stackTrace = require_stackTrace();
  var _errors = require_errors2();
  var _utils = require_utils3();

  class Waiter {
    constructor(channelOwner, event) {
      this._dispose = undefined;
      this._failures = [];
      this._immediateError = undefined;
      this._logs = [];
      this._channelOwner = undefined;
      this._waitId = undefined;
      this._error = undefined;
      this._waitId = (0, _utils.createGuid)();
      this._channelOwner = channelOwner;
      this._channelOwner._channel.waitForEventInfo({
        info: {
          waitId: this._waitId,
          phase: "before",
          event
        }
      }).catch(() => {
      });
      this._dispose = [() => this._channelOwner._wrapApiCall(async () => {
        await this._channelOwner._channel.waitForEventInfo({
          info: {
            waitId: this._waitId,
            phase: "after",
            error: this._error
          }
        });
      }, true).catch(() => {
      })];
    }
    static createForEvent(channelOwner, event) {
      return new Waiter(channelOwner, event);
    }
    async waitForEvent(emitter, event, predicate) {
      const {
        promise,
        dispose
      } = waitForEvent(emitter, event, predicate);
      return await this.waitForPromise(promise, dispose);
    }
    rejectOnEvent(emitter, event, error, predicate) {
      const {
        promise,
        dispose
      } = waitForEvent(emitter, event, predicate);
      this._rejectOn(promise.then(() => {
        throw typeof error === "function" ? error() : error;
      }), dispose);
    }
    rejectOnTimeout(timeout, message) {
      if (!timeout)
        return;
      const {
        promise,
        dispose
      } = waitForTimeout(timeout);
      this._rejectOn(promise.then(() => {
        throw new _errors.TimeoutError(message);
      }), dispose);
    }
    rejectImmediately(error) {
      this._immediateError = error;
    }
    dispose() {
      for (const dispose of this._dispose)
        dispose();
    }
    async waitForPromise(promise, dispose) {
      try {
        if (this._immediateError)
          throw this._immediateError;
        const result = await Promise.race([promise, ...this._failures]);
        if (dispose)
          dispose();
        return result;
      } catch (e) {
        if (dispose)
          dispose();
        this._error = e.message;
        this.dispose();
        (0, _stackTrace.rewriteErrorMessage)(e, e.message + formatLogRecording(this._logs));
        throw e;
      }
    }
    log(s) {
      this._logs.push(s);
      this._channelOwner._wrapApiCall(async () => {
        await this._channelOwner._channel.waitForEventInfo({
          info: {
            waitId: this._waitId,
            phase: "log",
            message: s
          }
        }).catch(() => {
        });
      }, true);
    }
    _rejectOn(promise, dispose) {
      this._failures.push(promise);
      if (dispose)
        this._dispose.push(dispose);
    }
  }
  exports.Waiter = Waiter;
});

// node_modules/playwright-core/lib/client/tracing.js
var require_tracing2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Tracing = undefined;
  var _artifact = require_artifact2();
  var _channelOwner = require_channelOwner();

  class Tracing extends _channelOwner.ChannelOwner {
    static from(channel) {
      return channel._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._includeSources = false;
      this._tracesDir = undefined;
      this._stacksId = undefined;
      this._isTracing = false;
    }
    async start(options = {}) {
      this._includeSources = !!options.sources;
      const traceName = await this._wrapApiCall(async () => {
        await this._channel.tracingStart({
          name: options.name,
          snapshots: options.snapshots,
          screenshots: options.screenshots,
          live: options._live
        });
        const response = await this._channel.tracingStartChunk({
          name: options.name,
          title: options.title
        });
        return response.traceName;
      }, true);
      await this._startCollectingStacks(traceName);
    }
    async startChunk(options = {}) {
      const {
        traceName
      } = await this._channel.tracingStartChunk(options);
      await this._startCollectingStacks(traceName);
    }
    async _startCollectingStacks(traceName) {
      if (!this._isTracing) {
        this._isTracing = true;
        this._connection.setIsTracing(true);
      }
      const result = await this._connection.localUtils()._channel.tracingStarted({
        tracesDir: this._tracesDir,
        traceName
      });
      this._stacksId = result.stacksId;
    }
    async stopChunk(options = {}) {
      await this._wrapApiCall(async () => {
        await this._doStopChunk(options.path);
      }, true);
    }
    async stop(options = {}) {
      await this._wrapApiCall(async () => {
        await this._doStopChunk(options.path);
        await this._channel.tracingStop();
      }, true);
    }
    async _doStopChunk(filePath) {
      this._resetStackCounter();
      if (!filePath) {
        await this._channel.tracingStopChunk({
          mode: "discard"
        });
        if (this._stacksId)
          await this._connection.localUtils()._channel.traceDiscarded({
            stacksId: this._stacksId
          });
        return;
      }
      const isLocal = !this._connection.isRemote();
      if (isLocal) {
        const result2 = await this._channel.tracingStopChunk({
          mode: "entries"
        });
        await this._connection.localUtils()._channel.zip({
          zipFile: filePath,
          entries: result2.entries,
          mode: "write",
          stacksId: this._stacksId,
          includeSources: this._includeSources
        });
        return;
      }
      const result = await this._channel.tracingStopChunk({
        mode: "archive"
      });
      if (!result.artifact) {
        if (this._stacksId)
          await this._connection.localUtils()._channel.traceDiscarded({
            stacksId: this._stacksId
          });
        return;
      }
      const artifact = _artifact.Artifact.from(result.artifact);
      await artifact.saveAs(filePath);
      await artifact.delete();
      await this._connection.localUtils()._channel.zip({
        zipFile: filePath,
        entries: [],
        mode: "append",
        stacksId: this._stacksId,
        includeSources: this._includeSources
      });
    }
    _resetStackCounter() {
      if (this._isTracing) {
        this._isTracing = false;
        this._connection.setIsTracing(false);
      }
    }
  }
  exports.Tracing = Tracing;
});

// node_modules/playwright-core/lib/client/fetch.js
var require_fetch2 = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  async function toFormField(name, value) {
    if (isFilePayload(value)) {
      const payload = value;
      if (!Buffer.isBuffer(payload.buffer))
        throw new Error(`Unexpected buffer type of 'data.${name}'`);
      return {
        name,
        file: filePayloadToJson(payload)
      };
    } else if (value instanceof _fs.default.ReadStream) {
      return {
        name,
        file: await readStreamToJson(value)
      };
    } else {
      return {
        name,
        value: String(value)
      };
    }
  }
  var isJsonParsable = function(value) {
    if (typeof value !== "string")
      return false;
    try {
      JSON.parse(value);
      return true;
    } catch (e) {
      if (e instanceof SyntaxError)
        return false;
      else
        throw e;
    }
  };
  var filePayloadToJson = function(payload) {
    return {
      name: payload.name,
      mimeType: payload.mimeType,
      buffer: payload.buffer
    };
  };
  async function readStreamToJson(stream) {
    const buffer = await new Promise((resolve, reject) => {
      const chunks = [];
      stream.on("data", (chunk) => chunks.push(chunk));
      stream.on("end", () => resolve(Buffer.concat(chunks)));
      stream.on("error", (err) => reject(err));
    });
    const streamPath = Buffer.isBuffer(stream.path) ? stream.path.toString("utf8") : stream.path;
    return {
      name: _path.default.basename(streamPath),
      buffer
    };
  }
  var isJsonContentType = function(headers) {
    if (!headers)
      return false;
    for (const {
      name,
      value
    } of headers) {
      if (name.toLocaleLowerCase() === "content-type")
        return value === "application/json";
    }
    return false;
  };
  var objectToArray = function(map) {
    if (!map)
      return;
    const result = [];
    for (const [name, value] of Object.entries(map))
      result.push({
        name,
        value: String(value)
      });
    return result;
  };
  var isFilePayload = function(value) {
    return typeof value === "object" && value["name"] && value["mimeType"] && value["buffer"];
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.APIResponse = exports.APIRequestContext = exports.APIRequest = undefined;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var util = _interopRequireWildcard(import.meta.require("util"));
  var _utils = require_utils3();
  var _fileUtils = require_fileUtils();
  var _channelOwner = require_channelOwner();
  var _network = require_network3();
  var _tracing = require_tracing2();
  var _errors = require_errors2();
  var _Symbol$asyncDispose;
  var _Symbol$asyncDispose2;
  var _util$inspect$custom;

  class APIRequest {
    constructor(playwright) {
      this._playwright = undefined;
      this._contexts = new Set;
      this._defaultContextOptions = undefined;
      this._playwright = playwright;
    }
    async newContext(options = {}) {
      var _this$_defaultContext;
      options = {
        ...this._defaultContextOptions,
        ...options
      };
      const storageState = typeof options.storageState === "string" ? JSON.parse(await _fs.default.promises.readFile(options.storageState, "utf8")) : options.storageState;
      const tracesDir = (_this$_defaultContext = this._defaultContextOptions) === null || _this$_defaultContext === undefined ? undefined : _this$_defaultContext.tracesDir;
      const context = APIRequestContext.from((await this._playwright._channel.newRequest({
        ...options,
        extraHTTPHeaders: options.extraHTTPHeaders ? (0, _utils.headersObjectToArray)(options.extraHTTPHeaders) : undefined,
        storageState,
        tracesDir
      })).request);
      this._contexts.add(context);
      context._request = this;
      context._tracing._tracesDir = tracesDir;
      await context._instrumentation.onDidCreateRequestContext(context);
      return context;
    }
  }
  exports.APIRequest = APIRequest;
  _Symbol$asyncDispose = Symbol.asyncDispose;

  class APIRequestContext extends _channelOwner.ChannelOwner {
    static from(channel) {
      return channel._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._request = undefined;
      this._tracing = undefined;
      this._tracing = _tracing.Tracing.from(initializer.tracing);
    }
    async[_Symbol$asyncDispose]() {
      await this.dispose();
    }
    async dispose() {
      var _this$_request;
      await this._instrumentation.onWillCloseRequestContext(this);
      await this._channel.dispose();
      this._tracing._resetStackCounter();
      (_this$_request = this._request) === null || _this$_request === undefined || _this$_request._contexts.delete(this);
    }
    async delete(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "DELETE"
      });
    }
    async head(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "HEAD"
      });
    }
    async get(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "GET"
      });
    }
    async patch(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "PATCH"
      });
    }
    async post(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "POST"
      });
    }
    async put(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "PUT"
      });
    }
    async fetch(urlOrRequest, options = {}) {
      const url = (0, _utils.isString)(urlOrRequest) ? urlOrRequest : undefined;
      const request = (0, _utils.isString)(urlOrRequest) ? undefined : urlOrRequest;
      return await this._innerFetch({
        url,
        request,
        ...options
      });
    }
    async _innerFetch(options = {}) {
      return await this._wrapApiCall(async () => {
        var _options$request, _options$request2, _options$request3;
        (0, _utils.assert)(options.request || typeof options.url === "string", "First argument must be either URL string or Request");
        (0, _utils.assert)((options.data === undefined ? 0 : 1) + (options.form === undefined ? 0 : 1) + (options.multipart === undefined ? 0 : 1) <= 1, `Only one of 'data', 'form' or 'multipart' can be specified`);
        (0, _utils.assert)(options.maxRedirects === undefined || options.maxRedirects >= 0, `'maxRedirects' should be greater than or equal to '0'`);
        const url = options.url !== undefined ? options.url : options.request.url();
        const params = objectToArray(options.params);
        const method = options.method || ((_options$request = options.request) === null || _options$request === undefined ? undefined : _options$request.method());
        const maxRedirects = options.maxRedirects;
        const headersObj = options.headers || ((_options$request2 = options.request) === null || _options$request2 === undefined ? undefined : _options$request2.headers());
        const headers = headersObj ? (0, _utils.headersObjectToArray)(headersObj) : undefined;
        let jsonData;
        let formData;
        let multipartData;
        let postDataBuffer;
        if (options.data !== undefined) {
          if ((0, _utils.isString)(options.data)) {
            if (isJsonContentType(headers))
              jsonData = isJsonParsable(options.data) ? options.data : JSON.stringify(options.data);
            else
              postDataBuffer = Buffer.from(options.data, "utf8");
          } else if (Buffer.isBuffer(options.data)) {
            postDataBuffer = options.data;
          } else if (typeof options.data === "object" || typeof options.data === "number" || typeof options.data === "boolean") {
            jsonData = JSON.stringify(options.data);
          } else {
            throw new Error(`Unexpected 'data' type`);
          }
        } else if (options.form) {
          formData = objectToArray(options.form);
        } else if (options.multipart) {
          multipartData = [];
          if (globalThis.FormData && options.multipart instanceof FormData) {
            const form = options.multipart;
            for (const [name, value] of form.entries()) {
              if ((0, _utils.isString)(value)) {
                multipartData.push({
                  name,
                  value
                });
              } else {
                const file = {
                  name: value.name,
                  mimeType: value.type,
                  buffer: Buffer.from(await value.arrayBuffer())
                };
                multipartData.push({
                  name,
                  file
                });
              }
            }
          } else {
            for (const [name, value] of Object.entries(options.multipart))
              multipartData.push(await toFormField(name, value));
          }
        }
        if (postDataBuffer === undefined && jsonData === undefined && formData === undefined && multipartData === undefined)
          postDataBuffer = ((_options$request3 = options.request) === null || _options$request3 === undefined ? undefined : _options$request3.postDataBuffer()) || undefined;
        const fixtures = {
          __testHookLookup: options.__testHookLookup
        };
        const result = await this._channel.fetch({
          url,
          params,
          method,
          headers,
          postData: postDataBuffer,
          jsonData,
          formData,
          multipartData,
          timeout: options.timeout,
          failOnStatusCode: options.failOnStatusCode,
          ignoreHTTPSErrors: options.ignoreHTTPSErrors,
          maxRedirects,
          ...fixtures
        });
        return new APIResponse(this, result.response);
      });
    }
    async storageState(options = {}) {
      const state = await this._channel.storageState();
      if (options.path) {
        await (0, _fileUtils.mkdirIfNeeded)(options.path);
        await _fs.default.promises.writeFile(options.path, JSON.stringify(state, undefined, 2), "utf8");
      }
      return state;
    }
  }
  exports.APIRequestContext = APIRequestContext;
  _Symbol$asyncDispose2 = Symbol.asyncDispose;
  _util$inspect$custom = util.inspect.custom;

  class APIResponse {
    constructor(context, initializer) {
      this._initializer = undefined;
      this._headers = undefined;
      this._request = undefined;
      this._request = context;
      this._initializer = initializer;
      this._headers = new _network.RawHeaders(this._initializer.headers);
    }
    ok() {
      return this._initializer.status >= 200 && this._initializer.status <= 299;
    }
    url() {
      return this._initializer.url;
    }
    status() {
      return this._initializer.status;
    }
    statusText() {
      return this._initializer.statusText;
    }
    headers() {
      return this._headers.headers();
    }
    headersArray() {
      return this._headers.headersArray();
    }
    async body() {
      try {
        const result = await this._request._channel.fetchResponseBody({
          fetchUid: this._fetchUid()
        });
        if (result.binary === undefined)
          throw new Error("Response has been disposed");
        return result.binary;
      } catch (e) {
        if ((0, _errors.isTargetClosedError)(e))
          throw new Error("Response has been disposed");
        throw e;
      }
    }
    async text() {
      const content = await this.body();
      return content.toString("utf8");
    }
    async json() {
      const content = await this.text();
      return JSON.parse(content);
    }
    async[_Symbol$asyncDispose2]() {
      await this.dispose();
    }
    async dispose() {
      await this._request._channel.disposeAPIResponse({
        fetchUid: this._fetchUid()
      });
    }
    [_util$inspect$custom]() {
      const headers = this.headersArray().map(({
        name,
        value
      }) => `  ${name}: ${value}`);
      return `APIResponse: ${this.status()} ${this.statusText()}\n${headers.join("\n")}`;
    }
    _fetchUid() {
      return this._initializer.fetchUid;
    }
    async _fetchLog() {
      const {
        log
      } = await this._request._channel.fetchLog({
        fetchUid: this._fetchUid()
      });
      return log;
    }
  }
  exports.APIResponse = APIResponse;
});

// node_modules/playwright-core/lib/client/network.js
var require_network3 = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var validateHeaders = function(headers) {
    for (const key of Object.keys(headers)) {
      const value = headers[key];
      if (!Object.is(value, undefined) && !(0, _utils.isString)(value))
        throw new Error(`Expected value of header "${key}" to be String, but "${typeof value}" is found.`);
    }
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WebSocket = exports.RouteHandler = exports.Route = exports.Response = exports.Request = exports.RawHeaders = undefined;
  exports.validateHeaders = validateHeaders;
  var _url = import.meta.require("url");
  var _channelOwner = require_channelOwner();
  var _frame = require_frame();
  var _worker = require_worker();
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _utilsBundle = require_utilsBundle();
  var _utils = require_utils3();
  var _manualPromise = require_manualPromise();
  var _events = require_events();
  var _waiter = require_waiter();
  var _network = require_network();
  var _multimap = require_multimap();
  var _fetch = require_fetch2();

  class Request extends _channelOwner.ChannelOwner {
    static from(request) {
      return request._object;
    }
    static fromNullable(request) {
      return request ? Request.from(request) : null;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._redirectedFrom = null;
      this._redirectedTo = null;
      this._failureText = null;
      this._provisionalHeaders = undefined;
      this._actualHeadersPromise = undefined;
      this._timing = undefined;
      this._fallbackOverrides = {};
      this._redirectedFrom = Request.fromNullable(initializer.redirectedFrom);
      if (this._redirectedFrom)
        this._redirectedFrom._redirectedTo = this;
      this._provisionalHeaders = new RawHeaders(initializer.headers);
      this._fallbackOverrides.postDataBuffer = initializer.postData;
      this._timing = {
        startTime: 0,
        domainLookupStart: -1,
        domainLookupEnd: -1,
        connectStart: -1,
        secureConnectionStart: -1,
        connectEnd: -1,
        requestStart: -1,
        responseStart: -1,
        responseEnd: -1
      };
    }
    url() {
      return this._fallbackOverrides.url || this._initializer.url;
    }
    resourceType() {
      return this._initializer.resourceType;
    }
    method() {
      return this._fallbackOverrides.method || this._initializer.method;
    }
    postData() {
      var _this$_fallbackOverri;
      return ((_this$_fallbackOverri = this._fallbackOverrides.postDataBuffer) === null || _this$_fallbackOverri === undefined ? undefined : _this$_fallbackOverri.toString("utf-8")) || null;
    }
    postDataBuffer() {
      return this._fallbackOverrides.postDataBuffer || null;
    }
    postDataJSON() {
      const postData = this.postData();
      if (!postData)
        return null;
      const contentType = this.headers()["content-type"];
      if (contentType !== null && contentType !== undefined && contentType.includes("application/x-www-form-urlencoded")) {
        const entries = {};
        const parsed = new _url.URLSearchParams(postData);
        for (const [k, v] of parsed.entries())
          entries[k] = v;
        return entries;
      }
      try {
        return JSON.parse(postData);
      } catch (e) {
        throw new Error("POST data is not a valid JSON object: " + postData);
      }
    }
    headers() {
      if (this._fallbackOverrides.headers)
        return RawHeaders._fromHeadersObjectLossy(this._fallbackOverrides.headers).headers();
      return this._provisionalHeaders.headers();
    }
    async _actualHeaders() {
      if (this._fallbackOverrides.headers)
        return RawHeaders._fromHeadersObjectLossy(this._fallbackOverrides.headers);
      if (!this._actualHeadersPromise) {
        this._actualHeadersPromise = this._wrapApiCall(async () => {
          return new RawHeaders((await this._channel.rawRequestHeaders()).headers);
        });
      }
      return await this._actualHeadersPromise;
    }
    async allHeaders() {
      return (await this._actualHeaders()).headers();
    }
    async headersArray() {
      return (await this._actualHeaders()).headersArray();
    }
    async headerValue(name) {
      return (await this._actualHeaders()).get(name);
    }
    async response() {
      return Response.fromNullable((await this._channel.response()).response);
    }
    async _internalResponse() {
      return await this._wrapApiCall(async () => {
        return Response.fromNullable((await this._channel.response()).response);
      }, true);
    }
    frame() {
      if (!this._initializer.frame) {
        (0, _utils.assert)(this.serviceWorker());
        throw new Error("Service Worker requests do not have an associated frame.");
      }
      const frame = _frame.Frame.from(this._initializer.frame);
      if (!frame._page) {
        throw new Error(["Frame for this navigation request is not available, because the request", "was issued before the frame is created. You can check whether the request", "is a navigation request by calling isNavigationRequest() method."].join("\n"));
      }
      return frame;
    }
    _safePage() {
      var _Frame$fromNullable;
      return ((_Frame$fromNullable = _frame.Frame.fromNullable(this._initializer.frame)) === null || _Frame$fromNullable === undefined ? undefined : _Frame$fromNullable._page) || null;
    }
    serviceWorker() {
      return this._initializer.serviceWorker ? _worker.Worker.from(this._initializer.serviceWorker) : null;
    }
    isNavigationRequest() {
      return this._initializer.isNavigationRequest;
    }
    redirectedFrom() {
      return this._redirectedFrom;
    }
    redirectedTo() {
      return this._redirectedTo;
    }
    failure() {
      if (this._failureText === null)
        return null;
      return {
        errorText: this._failureText
      };
    }
    timing() {
      return this._timing;
    }
    async sizes() {
      const response = await this.response();
      if (!response)
        throw new Error("Unable to fetch sizes for failed request");
      return (await response._channel.sizes()).sizes;
    }
    _setResponseEndTiming(responseEndTiming) {
      this._timing.responseEnd = responseEndTiming;
      if (this._timing.responseStart === -1)
        this._timing.responseStart = responseEndTiming;
    }
    _finalRequest() {
      return this._redirectedTo ? this._redirectedTo._finalRequest() : this;
    }
    _applyFallbackOverrides(overrides) {
      if (overrides.url)
        this._fallbackOverrides.url = overrides.url;
      if (overrides.method)
        this._fallbackOverrides.method = overrides.method;
      if (overrides.headers)
        this._fallbackOverrides.headers = overrides.headers;
      if ((0, _utils.isString)(overrides.postData))
        this._fallbackOverrides.postDataBuffer = Buffer.from(overrides.postData, "utf-8");
      else if (overrides.postData instanceof Buffer)
        this._fallbackOverrides.postDataBuffer = overrides.postData;
      else if (overrides.postData)
        this._fallbackOverrides.postDataBuffer = Buffer.from(JSON.stringify(overrides.postData), "utf-8");
    }
    _fallbackOverridesForContinue() {
      return this._fallbackOverrides;
    }
    _targetClosedScope() {
      var _this$serviceWorker, _this$_safePage;
      return ((_this$serviceWorker = this.serviceWorker()) === null || _this$serviceWorker === undefined ? undefined : _this$serviceWorker._closedScope) || ((_this$_safePage = this._safePage()) === null || _this$_safePage === undefined ? undefined : _this$_safePage._closedOrCrashedScope) || new _manualPromise.LongStandingScope;
    }
  }
  exports.Request = Request;

  class Route extends _channelOwner.ChannelOwner {
    static from(route) {
      return route._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._handlingPromise = null;
      this._context = undefined;
      this._didThrow = false;
    }
    request() {
      return Request.from(this._initializer.request);
    }
    async _raceWithTargetClose(promise) {
      return await this.request()._targetClosedScope().safeRace(promise);
    }
    async _startHandling() {
      this._handlingPromise = new _manualPromise.ManualPromise;
      return await this._handlingPromise;
    }
    async fallback(options = {}) {
      this._checkNotHandled();
      this.request()._applyFallbackOverrides(options);
      this._reportHandled(false);
    }
    async abort(errorCode) {
      await this._handleRoute(async () => {
        await this._raceWithTargetClose(this._channel.abort({
          requestUrl: this.request()._initializer.url,
          errorCode
        }));
      });
    }
    async _redirectNavigationRequest(url) {
      await this._handleRoute(async () => {
        await this._raceWithTargetClose(this._channel.redirectNavigationRequest({
          url
        }));
      });
    }
    async fetch(options = {}) {
      return await this._wrapApiCall(async () => {
        return await this._context.request._innerFetch({
          request: this.request(),
          data: options.postData,
          ...options
        });
      });
    }
    async fulfill(options = {}) {
      await this._handleRoute(async () => {
        await this._wrapApiCall(async () => {
          await this._innerFulfill(options);
        });
      });
    }
    async _handleRoute(callback) {
      this._checkNotHandled();
      try {
        await callback();
        this._reportHandled(true);
      } catch (e) {
        this._didThrow = true;
        throw e;
      }
    }
    async _innerFulfill(options = {}) {
      let fetchResponseUid;
      let {
        status: statusOption,
        headers: headersOption,
        body
      } = options;
      if (options.json !== undefined) {
        (0, _utils.assert)(options.body === undefined, "Can specify either body or json parameters");
        body = JSON.stringify(options.json);
      }
      if (options.response instanceof _fetch.APIResponse) {
        var _statusOption, _headersOption;
        (_statusOption = statusOption) !== null && _statusOption !== undefined || (statusOption = options.response.status());
        (_headersOption = headersOption) !== null && _headersOption !== undefined || (headersOption = options.response.headers());
        if (body === undefined && options.path === undefined) {
          if (options.response._request._connection === this._connection)
            fetchResponseUid = options.response._fetchUid();
          else
            body = await options.response.body();
        }
      }
      let isBase64 = false;
      let length = 0;
      if (options.path) {
        const buffer = await _fs.default.promises.readFile(options.path);
        body = buffer.toString("base64");
        isBase64 = true;
        length = buffer.length;
      } else if ((0, _utils.isString)(body)) {
        isBase64 = false;
        length = Buffer.byteLength(body);
      } else if (body) {
        length = body.length;
        body = body.toString("base64");
        isBase64 = true;
      }
      const headers = {};
      for (const header of Object.keys(headersOption || {}))
        headers[header.toLowerCase()] = String(headersOption[header]);
      if (options.contentType)
        headers["content-type"] = String(options.contentType);
      else if (options.json)
        headers["content-type"] = "application/json";
      else if (options.path)
        headers["content-type"] = _utilsBundle.mime.getType(options.path) || "application/octet-stream";
      if (length && !("content-length" in headers))
        headers["content-length"] = String(length);
      await this._raceWithTargetClose(this._channel.fulfill({
        requestUrl: this.request()._initializer.url,
        status: statusOption || 200,
        headers: (0, _utils.headersObjectToArray)(headers),
        body,
        isBase64,
        fetchResponseUid
      }));
    }
    async continue(options = {}) {
      await this._handleRoute(async () => {
        this.request()._applyFallbackOverrides(options);
        await this._innerContinue();
      });
    }
    _checkNotHandled() {
      if (!this._handlingPromise)
        throw new Error("Route is already handled!");
    }
    _reportHandled(done) {
      const chain = this._handlingPromise;
      this._handlingPromise = null;
      chain.resolve(done);
    }
    async _innerContinue(internal = false) {
      const options = this.request()._fallbackOverridesForContinue();
      return await this._wrapApiCall(async () => {
        await this._raceWithTargetClose(this._channel.continue({
          requestUrl: this.request()._initializer.url,
          url: options.url,
          method: options.method,
          headers: options.headers ? (0, _utils.headersObjectToArray)(options.headers) : undefined,
          postData: options.postDataBuffer,
          isFallback: internal
        }));
      }, !!internal);
    }
  }
  exports.Route = Route;

  class Response extends _channelOwner.ChannelOwner {
    static from(response) {
      return response._object;
    }
    static fromNullable(response) {
      return response ? Response.from(response) : null;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._provisionalHeaders = undefined;
      this._actualHeadersPromise = undefined;
      this._request = undefined;
      this._finishedPromise = new _manualPromise.ManualPromise;
      this._provisionalHeaders = new RawHeaders(initializer.headers);
      this._request = Request.from(this._initializer.request);
      Object.assign(this._request._timing, this._initializer.timing);
    }
    url() {
      return this._initializer.url;
    }
    ok() {
      return this._initializer.status === 0 || this._initializer.status >= 200 && this._initializer.status <= 299;
    }
    status() {
      return this._initializer.status;
    }
    statusText() {
      return this._initializer.statusText;
    }
    fromServiceWorker() {
      return this._initializer.fromServiceWorker;
    }
    headers() {
      return this._provisionalHeaders.headers();
    }
    async _actualHeaders() {
      if (!this._actualHeadersPromise) {
        this._actualHeadersPromise = (async () => {
          return new RawHeaders((await this._channel.rawResponseHeaders()).headers);
        })();
      }
      return await this._actualHeadersPromise;
    }
    async allHeaders() {
      return (await this._actualHeaders()).headers();
    }
    async headersArray() {
      return (await this._actualHeaders()).headersArray().slice();
    }
    async headerValue(name) {
      return (await this._actualHeaders()).get(name);
    }
    async headerValues(name) {
      return (await this._actualHeaders()).getAll(name);
    }
    async finished() {
      return await this.request()._targetClosedScope().race(this._finishedPromise);
    }
    async body() {
      return (await this._channel.body()).binary;
    }
    async text() {
      const content = await this.body();
      return content.toString("utf8");
    }
    async json() {
      const content = await this.text();
      return JSON.parse(content);
    }
    request() {
      return this._request;
    }
    frame() {
      return this._request.frame();
    }
    async serverAddr() {
      return (await this._channel.serverAddr()).value || null;
    }
    async securityDetails() {
      return (await this._channel.securityDetails()).value || null;
    }
  }
  exports.Response = Response;

  class WebSocket extends _channelOwner.ChannelOwner {
    static from(webSocket) {
      return webSocket._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._page = undefined;
      this._isClosed = undefined;
      this._isClosed = false;
      this._page = parent;
      this._channel.on("frameSent", (event) => {
        if (event.opcode === 1)
          this.emit(_events.Events.WebSocket.FrameSent, {
            payload: event.data
          });
        else if (event.opcode === 2)
          this.emit(_events.Events.WebSocket.FrameSent, {
            payload: Buffer.from(event.data, "base64")
          });
      });
      this._channel.on("frameReceived", (event) => {
        if (event.opcode === 1)
          this.emit(_events.Events.WebSocket.FrameReceived, {
            payload: event.data
          });
        else if (event.opcode === 2)
          this.emit(_events.Events.WebSocket.FrameReceived, {
            payload: Buffer.from(event.data, "base64")
          });
      });
      this._channel.on("socketError", ({
        error
      }) => this.emit(_events.Events.WebSocket.Error, error));
      this._channel.on("close", () => {
        this._isClosed = true;
        this.emit(_events.Events.WebSocket.Close, this);
      });
    }
    url() {
      return this._initializer.url;
    }
    isClosed() {
      return this._isClosed;
    }
    async waitForEvent(event, optionsOrPredicate = {}) {
      return await this._wrapApiCall(async () => {
        const timeout = this._page._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
        const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
        const waiter = _waiter.Waiter.createForEvent(this, event);
        waiter.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
        if (event !== _events.Events.WebSocket.Error)
          waiter.rejectOnEvent(this, _events.Events.WebSocket.Error, new Error("Socket error"));
        if (event !== _events.Events.WebSocket.Close)
          waiter.rejectOnEvent(this, _events.Events.WebSocket.Close, new Error("Socket closed"));
        waiter.rejectOnEvent(this._page, _events.Events.Page.Close, () => this._page._closeErrorWithReason());
        const result = await waiter.waitForEvent(this, event, predicate);
        waiter.dispose();
        return result;
      });
    }
  }
  exports.WebSocket = WebSocket;

  class RouteHandler {
    constructor(baseURL, url, handler, times = Number.MAX_SAFE_INTEGER) {
      this.handledCount = 0;
      this._baseURL = undefined;
      this._times = undefined;
      this.url = undefined;
      this.handler = undefined;
      this._ignoreException = false;
      this._activeInvocations = new Set;
      this._baseURL = baseURL;
      this._times = times;
      this.url = url;
      this.handler = handler;
    }
    static prepareInterceptionPatterns(handlers) {
      const patterns = [];
      let all = false;
      for (const handler of handlers) {
        if ((0, _utils.isString)(handler.url))
          patterns.push({
            glob: handler.url
          });
        else if ((0, _utils.isRegExp)(handler.url))
          patterns.push({
            regexSource: handler.url.source,
            regexFlags: handler.url.flags
          });
        else
          all = true;
      }
      if (all)
        return [{
          glob: "**/*"
        }];
      return patterns;
    }
    matches(requestURL) {
      return (0, _network.urlMatches)(this._baseURL, requestURL, this.url);
    }
    async handle(route) {
      const handlerInvocation = {
        complete: new _manualPromise.ManualPromise,
        route
      };
      this._activeInvocations.add(handlerInvocation);
      try {
        return await this._handleInternal(route);
      } catch (e) {
        if (this._ignoreException)
          return false;
        throw e;
      } finally {
        handlerInvocation.complete.resolve();
        this._activeInvocations.delete(handlerInvocation);
      }
    }
    async stop(behavior) {
      if (behavior === "ignoreErrors") {
        this._ignoreException = true;
      } else {
        const promises = [];
        for (const activation of this._activeInvocations) {
          if (!activation.route._didThrow)
            promises.push(activation.complete);
        }
        await Promise.all(promises);
      }
    }
    async _handleInternal(route) {
      ++this.handledCount;
      const handledPromise = route._startHandling();
      const handler = this.handler;
      const [handled] = await Promise.all([handledPromise, handler(route, route.request())]);
      return handled;
    }
    willExpire() {
      return this.handledCount + 1 >= this._times;
    }
  }
  exports.RouteHandler = RouteHandler;

  class RawHeaders {
    static _fromHeadersObjectLossy(headers) {
      const headersArray = Object.entries(headers).map(([name, value]) => ({
        name,
        value
      })).filter((header) => header.value !== undefined);
      return new RawHeaders(headersArray);
    }
    constructor(headers) {
      this._headersArray = undefined;
      this._headersMap = new _multimap.MultiMap;
      this._headersArray = headers;
      for (const header of headers)
        this._headersMap.set(header.name.toLowerCase(), header.value);
    }
    get(name) {
      const values = this.getAll(name);
      if (!values || !values.length)
        return null;
      return values.join(name.toLowerCase() === "set-cookie" ? "\n" : ", ");
    }
    getAll(name) {
      return [...this._headersMap.get(name.toLowerCase())];
    }
    headers() {
      const result = {};
      for (const name of this._headersMap.keys())
        result[name] = this.get(name);
      return result;
    }
    headersArray() {
      return this._headersArray;
    }
  }
  exports.RawHeaders = RawHeaders;
});

// node_modules/playwright-core/lib/client/types.js
var require_types3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.kLifecycleEvents = undefined;
  var kLifecycleEvents = exports.kLifecycleEvents = new Set(["load", "domcontentloaded", "networkidle", "commit"]);
});

// node_modules/playwright-core/lib/client/frame.js
var require_frame = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var verifyLoadState = function(name, waitUntil) {
    if (waitUntil === "networkidle0")
      waitUntil = "networkidle";
    if (!_types.kLifecycleEvents.has(waitUntil))
      throw new Error(`${name}: expected one of (load|domcontentloaded|networkidle|commit)`);
    return waitUntil;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Frame = undefined;
  exports.verifyLoadState = verifyLoadState;
  var _utils = require_utils3();
  var _channelOwner = require_channelOwner();
  var _locator = require_locator();
  var _locatorUtils = require_locatorUtils();
  var _elementHandle = require_elementHandle();
  var _jsHandle = require_jsHandle();
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var network = _interopRequireWildcard(require_network3());
  var _events = import.meta.require("events");
  var _waiter = require_waiter();
  var _events2 = require_events();
  var _types = require_types3();
  var _network2 = require_network();
  var _clientHelper = require_clientHelper();

  class Frame extends _channelOwner.ChannelOwner {
    static from(frame) {
      return frame._object;
    }
    static fromNullable(frame) {
      return frame ? Frame.from(frame) : null;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._eventEmitter = undefined;
      this._loadStates = undefined;
      this._parentFrame = null;
      this._url = "";
      this._name = "";
      this._detached = false;
      this._childFrames = new Set;
      this._page = undefined;
      this._eventEmitter = new _events.EventEmitter;
      this._eventEmitter.setMaxListeners(0);
      this._parentFrame = Frame.fromNullable(initializer.parentFrame);
      if (this._parentFrame)
        this._parentFrame._childFrames.add(this);
      this._name = initializer.name;
      this._url = initializer.url;
      this._loadStates = new Set(initializer.loadStates);
      this._channel.on("loadstate", (event) => {
        if (event.add) {
          this._loadStates.add(event.add);
          this._eventEmitter.emit("loadstate", event.add);
        }
        if (event.remove)
          this._loadStates.delete(event.remove);
        if (!this._parentFrame && event.add === "load" && this._page)
          this._page.emit(_events2.Events.Page.Load, this._page);
        if (!this._parentFrame && event.add === "domcontentloaded" && this._page)
          this._page.emit(_events2.Events.Page.DOMContentLoaded, this._page);
      });
      this._channel.on("navigated", (event) => {
        this._url = event.url;
        this._name = event.name;
        this._eventEmitter.emit("navigated", event);
        if (!event.error && this._page)
          this._page.emit(_events2.Events.Page.FrameNavigated, this);
      });
    }
    page() {
      return this._page;
    }
    async goto(url, options = {}) {
      const waitUntil = verifyLoadState("waitUntil", options.waitUntil === undefined ? "load" : options.waitUntil);
      return network.Response.fromNullable((await this._channel.goto({
        url,
        ...options,
        waitUntil
      })).response);
    }
    _setupNavigationWaiter(options) {
      const waiter = new _waiter.Waiter(this._page, "");
      if (this._page.isClosed())
        waiter.rejectImmediately(this._page._closeErrorWithReason());
      waiter.rejectOnEvent(this._page, _events2.Events.Page.Close, () => this._page._closeErrorWithReason());
      waiter.rejectOnEvent(this._page, _events2.Events.Page.Crash, new Error("Navigation failed because page crashed!"));
      waiter.rejectOnEvent(this._page, _events2.Events.Page.FrameDetached, new Error("Navigating frame was detached!"), (frame) => frame === this);
      const timeout = this._page._timeoutSettings.navigationTimeout(options);
      waiter.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded.`);
      return waiter;
    }
    async waitForNavigation(options = {}) {
      return await this._page._wrapApiCall(async () => {
        const waitUntil = verifyLoadState("waitUntil", options.waitUntil === undefined ? "load" : options.waitUntil);
        const waiter = this._setupNavigationWaiter(options);
        const toUrl = typeof options.url === "string" ? ` to "${options.url}"` : "";
        waiter.log(`waiting for navigation${toUrl} until "${waitUntil}"`);
        const navigatedEvent = await waiter.waitForEvent(this._eventEmitter, "navigated", (event) => {
          var _this$_page;
          if (event.error)
            return true;
          waiter.log(`  navigated to "${event.url}"`);
          return (0, _network2.urlMatches)((_this$_page = this._page) === null || _this$_page === undefined ? undefined : _this$_page.context()._options.baseURL, event.url, options.url);
        });
        if (navigatedEvent.error) {
          const e = new Error(navigatedEvent.error);
          e.stack = "";
          await waiter.waitForPromise(Promise.reject(e));
        }
        if (!this._loadStates.has(waitUntil)) {
          await waiter.waitForEvent(this._eventEmitter, "loadstate", (s) => {
            waiter.log(`  "${s}" event fired`);
            return s === waitUntil;
          });
        }
        const request = navigatedEvent.newDocument ? network.Request.fromNullable(navigatedEvent.newDocument.request) : null;
        const response = request ? await waiter.waitForPromise(request._finalRequest()._internalResponse()) : null;
        waiter.dispose();
        return response;
      });
    }
    async waitForLoadState(state = "load", options = {}) {
      state = verifyLoadState("state", state);
      return await this._page._wrapApiCall(async () => {
        const waiter = this._setupNavigationWaiter(options);
        if (this._loadStates.has(state)) {
          waiter.log(`  not waiting, "${state}" event already fired`);
        } else {
          await waiter.waitForEvent(this._eventEmitter, "loadstate", (s) => {
            waiter.log(`  "${s}" event fired`);
            return s === state;
          });
        }
        waiter.dispose();
      });
    }
    async waitForURL(url, options = {}) {
      var _this$_page2;
      if ((0, _network2.urlMatches)((_this$_page2 = this._page) === null || _this$_page2 === undefined ? undefined : _this$_page2.context()._options.baseURL, this.url(), url))
        return await this.waitForLoadState(options.waitUntil, options);
      await this.waitForNavigation({
        url,
        ...options
      });
    }
    async frameElement() {
      return _elementHandle.ElementHandle.from((await this._channel.frameElement()).element);
    }
    async evaluateHandle(pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 2);
      const result = await this._channel.evaluateExpressionHandle({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return _jsHandle.JSHandle.from(result.handle);
    }
    async evaluate(pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 2);
      const result = await this._channel.evaluateExpression({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async _evaluateExposeUtilityScript(pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 2);
      const result = await this._channel.evaluateExpression({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        exposeUtilityScript: true,
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async $(selector, options) {
      const result = await this._channel.querySelector({
        selector,
        ...options
      });
      return _elementHandle.ElementHandle.fromNullable(result.element);
    }
    async waitForSelector(selector, options = {}) {
      if (options.visibility)
        throw new Error("options.visibility is not supported, did you mean options.state?");
      if (options.waitFor && options.waitFor !== "visible")
        throw new Error("options.waitFor is not supported, did you mean options.state?");
      const result = await this._channel.waitForSelector({
        selector,
        ...options
      });
      return _elementHandle.ElementHandle.fromNullable(result.element);
    }
    async dispatchEvent(selector, type, eventInit, options = {}) {
      await this._channel.dispatchEvent({
        selector,
        type,
        eventInit: (0, _jsHandle.serializeArgument)(eventInit),
        ...options
      });
    }
    async $eval(selector, pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 3);
      const result = await this._channel.evalOnSelector({
        selector,
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async $$eval(selector, pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 3);
      const result = await this._channel.evalOnSelectorAll({
        selector,
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async $$(selector) {
      const result = await this._channel.querySelectorAll({
        selector
      });
      return result.elements.map((e) => _elementHandle.ElementHandle.from(e));
    }
    async _queryCount(selector) {
      return (await this._channel.queryCount({
        selector
      })).value;
    }
    async content() {
      return (await this._channel.content()).value;
    }
    async setContent(html, options = {}) {
      const waitUntil = verifyLoadState("waitUntil", options.waitUntil === undefined ? "load" : options.waitUntil);
      await this._channel.setContent({
        html,
        ...options,
        waitUntil
      });
    }
    name() {
      return this._name || "";
    }
    url() {
      return this._url;
    }
    parentFrame() {
      return this._parentFrame;
    }
    childFrames() {
      return Array.from(this._childFrames);
    }
    isDetached() {
      return this._detached;
    }
    async addScriptTag(options = {}) {
      const copy = {
        ...options
      };
      if (copy.path) {
        copy.content = (await _fs.default.promises.readFile(copy.path)).toString();
        copy.content = (0, _clientHelper.addSourceUrlToScript)(copy.content, copy.path);
      }
      return _elementHandle.ElementHandle.from((await this._channel.addScriptTag({
        ...copy
      })).element);
    }
    async addStyleTag(options = {}) {
      const copy = {
        ...options
      };
      if (copy.path) {
        copy.content = (await _fs.default.promises.readFile(copy.path)).toString();
        copy.content += "/*# sourceURL=" + copy.path.replace(/\n/g, "") + "*/";
      }
      return _elementHandle.ElementHandle.from((await this._channel.addStyleTag({
        ...copy
      })).element);
    }
    async click(selector, options = {}) {
      return await this._channel.click({
        selector,
        ...options
      });
    }
    async dblclick(selector, options = {}) {
      return await this._channel.dblclick({
        selector,
        ...options
      });
    }
    async dragAndDrop(source, target, options = {}) {
      return await this._channel.dragAndDrop({
        source,
        target,
        ...options
      });
    }
    async tap(selector, options = {}) {
      return await this._channel.tap({
        selector,
        ...options
      });
    }
    async fill(selector, value, options = {}) {
      return await this._channel.fill({
        selector,
        value,
        ...options
      });
    }
    async _highlight(selector) {
      return await this._channel.highlight({
        selector
      });
    }
    locator(selector, options) {
      return new _locator.Locator(this, selector, options);
    }
    getByTestId(testId) {
      return this.locator((0, _locatorUtils.getByTestIdSelector)((0, _locator.testIdAttributeName)(), testId));
    }
    getByAltText(text, options) {
      return this.locator((0, _locatorUtils.getByAltTextSelector)(text, options));
    }
    getByLabel(text, options) {
      return this.locator((0, _locatorUtils.getByLabelSelector)(text, options));
    }
    getByPlaceholder(text, options) {
      return this.locator((0, _locatorUtils.getByPlaceholderSelector)(text, options));
    }
    getByText(text, options) {
      return this.locator((0, _locatorUtils.getByTextSelector)(text, options));
    }
    getByTitle(text, options) {
      return this.locator((0, _locatorUtils.getByTitleSelector)(text, options));
    }
    getByRole(role, options = {}) {
      return this.locator((0, _locatorUtils.getByRoleSelector)(role, options));
    }
    frameLocator(selector) {
      return new _locator.FrameLocator(this, selector);
    }
    async focus(selector, options = {}) {
      await this._channel.focus({
        selector,
        ...options
      });
    }
    async textContent(selector, options = {}) {
      const value = (await this._channel.textContent({
        selector,
        ...options
      })).value;
      return value === undefined ? null : value;
    }
    async innerText(selector, options = {}) {
      return (await this._channel.innerText({
        selector,
        ...options
      })).value;
    }
    async innerHTML(selector, options = {}) {
      return (await this._channel.innerHTML({
        selector,
        ...options
      })).value;
    }
    async getAttribute(selector, name, options = {}) {
      const value = (await this._channel.getAttribute({
        selector,
        name,
        ...options
      })).value;
      return value === undefined ? null : value;
    }
    async inputValue(selector, options = {}) {
      return (await this._channel.inputValue({
        selector,
        ...options
      })).value;
    }
    async isChecked(selector, options = {}) {
      return (await this._channel.isChecked({
        selector,
        ...options
      })).value;
    }
    async isDisabled(selector, options = {}) {
      return (await this._channel.isDisabled({
        selector,
        ...options
      })).value;
    }
    async isEditable(selector, options = {}) {
      return (await this._channel.isEditable({
        selector,
        ...options
      })).value;
    }
    async isEnabled(selector, options = {}) {
      return (await this._channel.isEnabled({
        selector,
        ...options
      })).value;
    }
    async isHidden(selector, options = {}) {
      return (await this._channel.isHidden({
        selector,
        ...options
      })).value;
    }
    async isVisible(selector, options = {}) {
      return (await this._channel.isVisible({
        selector,
        ...options
      })).value;
    }
    async hover(selector, options = {}) {
      await this._channel.hover({
        selector,
        ...options
      });
    }
    async selectOption(selector, values, options = {}) {
      return (await this._channel.selectOption({
        selector,
        ...(0, _elementHandle.convertSelectOptionValues)(values),
        ...options
      })).values;
    }
    async setInputFiles(selector, files, options = {}) {
      const converted = await (0, _elementHandle.convertInputFiles)(files, this.page().context());
      await this._channel.setInputFiles({
        selector,
        ...converted,
        ...options
      });
    }
    async type(selector, text, options = {}) {
      await this._channel.type({
        selector,
        text,
        ...options
      });
    }
    async press(selector, key, options = {}) {
      await this._channel.press({
        selector,
        key,
        ...options
      });
    }
    async check(selector, options = {}) {
      await this._channel.check({
        selector,
        ...options
      });
    }
    async uncheck(selector, options = {}) {
      await this._channel.uncheck({
        selector,
        ...options
      });
    }
    async setChecked(selector, checked, options) {
      if (checked)
        await this.check(selector, options);
      else
        await this.uncheck(selector, options);
    }
    async waitForTimeout(timeout) {
      await this._channel.waitForTimeout({
        timeout
      });
    }
    async waitForFunction(pageFunction, arg, options = {}) {
      if (typeof options.polling === "string")
        (0, _utils.assert)(options.polling === "raf", "Unknown polling option: " + options.polling);
      const result = await this._channel.waitForFunction({
        ...options,
        pollingInterval: options.polling === "raf" ? undefined : options.polling,
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return _jsHandle.JSHandle.from(result.handle);
    }
    async title() {
      return (await this._channel.title()).value;
    }
  }
  exports.Frame = Frame;
});

// node_modules/playwright-core/lib/client/writableStream.js
var require_writableStream = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WritableStream = undefined;
  var _stream = import.meta.require("stream");
  var _channelOwner = require_channelOwner();

  class WritableStream extends _channelOwner.ChannelOwner {
    static from(Stream) {
      return Stream._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
    }
    stream() {
      return new WritableStreamImpl(this._channel);
    }
  }
  exports.WritableStream = WritableStream;

  class WritableStreamImpl extends _stream.Writable {
    constructor(channel) {
      super();
      this._channel = undefined;
      this._channel = channel;
    }
    async _write(chunk, encoding, callback) {
      const error = await this._channel.write({
        binary: typeof chunk === "string" ? Buffer.from(chunk) : chunk
      }).catch((e) => e);
      callback(error || null);
    }
    async _final(callback) {
      const error = await this._channel.close().catch((e) => e);
      callback(error || null);
    }
  }
});

// node_modules/playwright-core/lib/client/elementHandle.js
var require_elementHandle = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var convertSelectOptionValues = function(values) {
    if (values === null)
      return {};
    if (!Array.isArray(values))
      values = [values];
    if (!values.length)
      return {};
    for (let i = 0;i < values.length; i++)
      (0, _utils.assert)(values[i] !== null, `options[${i}]: expected object, got null`);
    if (values[0] instanceof ElementHandle)
      return {
        elements: values.map((v) => v._elementChannel)
      };
    if ((0, _utils.isString)(values[0]))
      return {
        options: values.map((valueOrLabel) => ({
          valueOrLabel
        }))
      };
    return {
      options: values
    };
  };
  var filePayloadExceedsSizeLimit = function(payloads) {
    return payloads.reduce((size, item) => size + (item.buffer ? item.buffer.byteLength : 0), 0) >= _fileUtils.fileUploadSizeLimit;
  };
  async function convertInputFiles(files, context) {
    const items = Array.isArray(files) ? files.slice() : [files];
    if (items.some((item) => typeof item === "string")) {
      if (!items.every((item) => typeof item === "string"))
        throw new Error("File paths cannot be mixed with buffers");
      if (context._connection.isRemote()) {
        const streams = await Promise.all(items.map(async (item) => {
          const lastModifiedMs = (await _fs.default.promises.stat(item)).mtimeMs;
          const {
            writableStream: stream
          } = await context._wrapApiCall(() => context._channel.createTempFile({
            name: _path.default.basename(item),
            lastModifiedMs
          }), true);
          const writable = _writableStream.WritableStream.from(stream);
          await pipelineAsync(_fs.default.createReadStream(item), writable.stream());
          return stream;
        }));
        return {
          streams
        };
      }
      return {
        localPaths: items.map((f) => _path.default.resolve(f))
      };
    }
    const payloads = items;
    if (filePayloadExceedsSizeLimit(payloads))
      throw new Error("Cannot set buffer larger than 50Mb, please write it to a file and pass its path instead.");
    return {
      payloads
    };
  }
  var determineScreenshotType = function(options) {
    if (options.path) {
      const mimeType = _utilsBundle.mime.getType(options.path);
      if (mimeType === "image/png")
        return "png";
      else if (mimeType === "image/jpeg")
        return "jpeg";
      throw new Error(`path: unsupported mime type "${mimeType}"`);
    }
    return options.type;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ElementHandle = undefined;
  exports.convertInputFiles = convertInputFiles;
  exports.convertSelectOptionValues = convertSelectOptionValues;
  exports.determineScreenshotType = determineScreenshotType;
  var _frame = require_frame();
  var _jsHandle = require_jsHandle();
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _utilsBundle = require_utilsBundle();
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _utils = require_utils3();
  var _fileUtils = require_fileUtils();
  var _writableStream = require_writableStream();
  var _stream = import.meta.require("stream");
  var _util = import.meta.require("util");
  var pipelineAsync = (0, _util.promisify)(_stream.pipeline);

  class ElementHandle extends _jsHandle.JSHandle {
    static from(handle) {
      return handle._object;
    }
    static fromNullable(handle) {
      return handle ? ElementHandle.from(handle) : null;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._elementChannel = undefined;
      this._elementChannel = this._channel;
    }
    asElement() {
      return this;
    }
    async ownerFrame() {
      return _frame.Frame.fromNullable((await this._elementChannel.ownerFrame()).frame);
    }
    async contentFrame() {
      return _frame.Frame.fromNullable((await this._elementChannel.contentFrame()).frame);
    }
    async getAttribute(name) {
      const value = (await this._elementChannel.getAttribute({
        name
      })).value;
      return value === undefined ? null : value;
    }
    async inputValue() {
      return (await this._elementChannel.inputValue()).value;
    }
    async textContent() {
      const value = (await this._elementChannel.textContent()).value;
      return value === undefined ? null : value;
    }
    async innerText() {
      return (await this._elementChannel.innerText()).value;
    }
    async innerHTML() {
      return (await this._elementChannel.innerHTML()).value;
    }
    async isChecked() {
      return (await this._elementChannel.isChecked()).value;
    }
    async isDisabled() {
      return (await this._elementChannel.isDisabled()).value;
    }
    async isEditable() {
      return (await this._elementChannel.isEditable()).value;
    }
    async isEnabled() {
      return (await this._elementChannel.isEnabled()).value;
    }
    async isHidden() {
      return (await this._elementChannel.isHidden()).value;
    }
    async isVisible() {
      return (await this._elementChannel.isVisible()).value;
    }
    async dispatchEvent(type, eventInit = {}) {
      await this._elementChannel.dispatchEvent({
        type,
        eventInit: (0, _jsHandle.serializeArgument)(eventInit)
      });
    }
    async scrollIntoViewIfNeeded(options = {}) {
      await this._elementChannel.scrollIntoViewIfNeeded(options);
    }
    async hover(options = {}) {
      await this._elementChannel.hover(options);
    }
    async click(options = {}) {
      return await this._elementChannel.click(options);
    }
    async dblclick(options = {}) {
      return await this._elementChannel.dblclick(options);
    }
    async tap(options = {}) {
      return await this._elementChannel.tap(options);
    }
    async selectOption(values, options = {}) {
      const result = await this._elementChannel.selectOption({
        ...convertSelectOptionValues(values),
        ...options
      });
      return result.values;
    }
    async fill(value, options = {}) {
      return await this._elementChannel.fill({
        value,
        ...options
      });
    }
    async selectText(options = {}) {
      await this._elementChannel.selectText(options);
    }
    async setInputFiles(files, options = {}) {
      const frame = await this.ownerFrame();
      if (!frame)
        throw new Error("Cannot set input files to detached element");
      const converted = await convertInputFiles(files, frame.page().context());
      await this._elementChannel.setInputFiles({
        ...converted,
        ...options
      });
    }
    async focus() {
      await this._elementChannel.focus();
    }
    async type(text, options = {}) {
      await this._elementChannel.type({
        text,
        ...options
      });
    }
    async press(key, options = {}) {
      await this._elementChannel.press({
        key,
        ...options
      });
    }
    async check(options = {}) {
      return await this._elementChannel.check(options);
    }
    async uncheck(options = {}) {
      return await this._elementChannel.uncheck(options);
    }
    async setChecked(checked, options) {
      if (checked)
        await this.check(options);
      else
        await this.uncheck(options);
    }
    async boundingBox() {
      const value = (await this._elementChannel.boundingBox()).value;
      return value === undefined ? null : value;
    }
    async screenshot(options = {}) {
      const copy = {
        ...options,
        mask: undefined
      };
      if (!copy.type)
        copy.type = determineScreenshotType(options);
      if (options.mask) {
        copy.mask = options.mask.map((locator) => ({
          frame: locator._frame._channel,
          selector: locator._selector
        }));
      }
      const result = await this._elementChannel.screenshot(copy);
      if (options.path) {
        await (0, _fileUtils.mkdirIfNeeded)(options.path);
        await _fs.default.promises.writeFile(options.path, result.binary);
      }
      return result.binary;
    }
    async $(selector) {
      return ElementHandle.fromNullable((await this._elementChannel.querySelector({
        selector
      })).element);
    }
    async $$(selector) {
      const result = await this._elementChannel.querySelectorAll({
        selector
      });
      return result.elements.map((h) => ElementHandle.from(h));
    }
    async $eval(selector, pageFunction, arg) {
      const result = await this._elementChannel.evalOnSelector({
        selector,
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async $$eval(selector, pageFunction, arg) {
      const result = await this._elementChannel.evalOnSelectorAll({
        selector,
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async waitForElementState(state, options = {}) {
      return await this._elementChannel.waitForElementState({
        state,
        ...options
      });
    }
    async waitForSelector(selector, options = {}) {
      const result = await this._elementChannel.waitForSelector({
        selector,
        ...options
      });
      return ElementHandle.fromNullable(result.element);
    }
  }
  exports.ElementHandle = ElementHandle;
});

// node_modules/playwright-core/lib/client/fileChooser.js
var require_fileChooser2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FileChooser = undefined;

  class FileChooser {
    constructor(page, elementHandle, isMultiple) {
      this._page = undefined;
      this._elementHandle = undefined;
      this._isMultiple = undefined;
      this._page = page;
      this._elementHandle = elementHandle;
      this._isMultiple = isMultiple;
    }
    element() {
      return this._elementHandle;
    }
    isMultiple() {
      return this._isMultiple;
    }
    page() {
      return this._page;
    }
    async setFiles(files, options) {
      return await this._elementHandle.setInputFiles(files, options);
    }
  }
  exports.FileChooser = FileChooser;
});

// node_modules/playwright-core/lib/client/input.js
var require_input2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Touchscreen = exports.Mouse = exports.Keyboard = undefined;

  class Keyboard {
    constructor(page) {
      this._page = undefined;
      this._page = page;
    }
    async down(key) {
      await this._page._channel.keyboardDown({
        key
      });
    }
    async up(key) {
      await this._page._channel.keyboardUp({
        key
      });
    }
    async insertText(text) {
      await this._page._channel.keyboardInsertText({
        text
      });
    }
    async type(text, options = {}) {
      await this._page._channel.keyboardType({
        text,
        ...options
      });
    }
    async press(key, options = {}) {
      await this._page._channel.keyboardPress({
        key,
        ...options
      });
    }
  }
  exports.Keyboard = Keyboard;

  class Mouse {
    constructor(page) {
      this._page = undefined;
      this._page = page;
    }
    async move(x, y, options = {}) {
      await this._page._channel.mouseMove({
        x,
        y,
        ...options
      });
    }
    async down(options = {}) {
      await this._page._channel.mouseDown({
        ...options
      });
    }
    async up(options = {}) {
      await this._page._channel.mouseUp(options);
    }
    async click(x, y, options = {}) {
      await this._page._channel.mouseClick({
        x,
        y,
        ...options
      });
    }
    async dblclick(x, y, options = {}) {
      await this.click(x, y, {
        ...options,
        clickCount: 2
      });
    }
    async wheel(deltaX, deltaY) {
      await this._page._channel.mouseWheel({
        deltaX,
        deltaY
      });
    }
  }
  exports.Mouse = Mouse;

  class Touchscreen {
    constructor(page) {
      this._page = undefined;
      this._page = page;
    }
    async tap(x, y) {
      await this._page._channel.touchscreenTap({
        x,
        y
      });
    }
  }
  exports.Touchscreen = Touchscreen;
});

// node_modules/playwright-core/lib/client/video.js
var require_video = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Video = undefined;
  var _utils = require_utils3();

  class Video {
    constructor(page, connection) {
      this._artifact = null;
      this._artifactReadyPromise = new _utils.ManualPromise;
      this._isRemote = false;
      this._isRemote = connection.isRemote();
      this._artifact = page._closedOrCrashedScope.safeRace(this._artifactReadyPromise);
    }
    _artifactReady(artifact) {
      this._artifactReadyPromise.resolve(artifact);
    }
    async path() {
      if (this._isRemote)
        throw new Error(`Path is not available when connecting remotely. Use saveAs() to save a local copy.`);
      const artifact = await this._artifact;
      if (!artifact)
        throw new Error("Page did not produce any video frames");
      return artifact._initializer.absolutePath;
    }
    async saveAs(path) {
      const artifact = await this._artifact;
      if (!artifact)
        throw new Error("Page did not produce any video frames");
      return await artifact.saveAs(path);
    }
    async delete() {
      const artifact = await this._artifact;
      if (artifact)
        await artifact.delete();
    }
  }
  exports.Video = Video;
});

// node_modules/playwright-core/lib/client/harRouter.js
var require_harRouter = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.HarRouter = undefined;
  var _debugLogger = require_debugLogger();
  var _Symbol$asyncDispose;
  _Symbol$asyncDispose = Symbol.asyncDispose;

  class HarRouter {
    static async create(localUtils, file, notFoundAction, options) {
      const {
        harId,
        error
      } = await localUtils._channel.harOpen({
        file
      });
      if (error)
        throw new Error(error);
      return new HarRouter(localUtils, harId, notFoundAction, options);
    }
    constructor(localUtils, harId, notFoundAction, options) {
      this._localUtils = undefined;
      this._harId = undefined;
      this._notFoundAction = undefined;
      this._options = undefined;
      this._localUtils = localUtils;
      this._harId = harId;
      this._options = options;
      this._notFoundAction = notFoundAction;
    }
    async _handle(route) {
      const request = route.request();
      const response = await this._localUtils._channel.harLookup({
        harId: this._harId,
        url: request.url(),
        method: request.method(),
        headers: await request.headersArray(),
        postData: request.postDataBuffer() || undefined,
        isNavigationRequest: request.isNavigationRequest()
      });
      if (response.action === "redirect") {
        _debugLogger.debugLogger.log("api", `HAR: ${route.request().url()} redirected to ${response.redirectURL}`);
        await route._redirectNavigationRequest(response.redirectURL);
        return;
      }
      if (response.action === "fulfill") {
        if (response.status === -1)
          return;
        await route.fulfill({
          status: response.status,
          headers: Object.fromEntries(response.headers.map((h) => [h.name, h.value])),
          body: response.body
        });
        return;
      }
      if (response.action === "error")
        _debugLogger.debugLogger.log("api", "HAR: " + response.message);
      if (this._notFoundAction === "abort") {
        await route.abort();
        return;
      }
      await route.fallback();
    }
    async addContextRoute(context) {
      await context.route(this._options.urlMatch || "**/*", (route) => this._handle(route));
    }
    async addPageRoute(page) {
      await page.route(this._options.urlMatch || "**/*", (route) => this._handle(route));
    }
    async[_Symbol$asyncDispose]() {
      await this.dispose();
    }
    dispose() {
      this._localUtils._channel.harClose({
        harId: this._harId
      }).catch(() => {
      });
    }
  }
  exports.HarRouter = HarRouter;
});

// node_modules/playwright-core/lib/client/page.js
var require_page2 = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var trimUrl = function(param) {
    if ((0, _utils.isRegExp)(param))
      return `/${(0, _stringUtils.trimStringWithEllipsis)(param.source, 50)}/${param.flags}`;
    if ((0, _utils.isString)(param))
      return `"${(0, _stringUtils.trimStringWithEllipsis)(param, 50)}"`;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Page = exports.BindingCall = undefined;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _errors = require_errors2();
  var _network = require_network();
  var _timeoutSettings = require_timeoutSettings();
  var _utils = require_utils3();
  var _fileUtils = require_fileUtils();
  var _accessibility = require_accessibility2();
  var _artifact = require_artifact2();
  var _channelOwner = require_channelOwner();
  var _clientHelper = require_clientHelper();
  var _coverage = require_coverage();
  var _download = require_download2();
  var _elementHandle = require_elementHandle();
  var _events = require_events();
  var _fileChooser = require_fileChooser2();
  var _frame = require_frame();
  var _input = require_input2();
  var _jsHandle = require_jsHandle();
  var _stringUtils = require_stringUtils();
  var _network2 = require_network3();
  var _video = require_video();
  var _waiter = require_waiter();
  var _worker = require_worker();
  var _harRouter = require_harRouter();
  var _Symbol$asyncDispose;
  _Symbol$asyncDispose = Symbol.asyncDispose;

  class Page extends _channelOwner.ChannelOwner {
    static from(page) {
      return page._object;
    }
    static fromNullable(page) {
      return page ? Page.from(page) : null;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._browserContext = undefined;
      this._ownedContext = undefined;
      this._mainFrame = undefined;
      this._frames = new Set;
      this._workers = new Set;
      this._closed = false;
      this._closedOrCrashedScope = new _utils.LongStandingScope;
      this._viewportSize = undefined;
      this._routes = [];
      this.accessibility = undefined;
      this.coverage = undefined;
      this.keyboard = undefined;
      this.mouse = undefined;
      this.request = undefined;
      this.touchscreen = undefined;
      this._bindings = new Map;
      this._timeoutSettings = undefined;
      this._video = null;
      this._opener = undefined;
      this._closeReason = undefined;
      this._closeWasCalled = false;
      this._harRouters = [];
      this._locatorHandlers = new Map;
      this._browserContext = parent;
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings(this._browserContext._timeoutSettings);
      this.accessibility = new _accessibility.Accessibility(this._channel);
      this.keyboard = new _input.Keyboard(this);
      this.mouse = new _input.Mouse(this);
      this.request = this._browserContext.request;
      this.touchscreen = new _input.Touchscreen(this);
      this._mainFrame = _frame.Frame.from(initializer.mainFrame);
      this._mainFrame._page = this;
      this._frames.add(this._mainFrame);
      this._viewportSize = initializer.viewportSize || null;
      this._closed = initializer.isClosed;
      this._opener = Page.fromNullable(initializer.opener);
      this._channel.on("bindingCall", ({
        binding
      }) => this._onBinding(BindingCall.from(binding)));
      this._channel.on("close", () => this._onClose());
      this._channel.on("crash", () => this._onCrash());
      this._channel.on("download", ({
        url,
        suggestedFilename,
        artifact
      }) => {
        const artifactObject = _artifact.Artifact.from(artifact);
        this.emit(_events.Events.Page.Download, new _download.Download(this, url, suggestedFilename, artifactObject));
      });
      this._channel.on("fileChooser", ({
        element,
        isMultiple
      }) => this.emit(_events.Events.Page.FileChooser, new _fileChooser.FileChooser(this, _elementHandle.ElementHandle.from(element), isMultiple)));
      this._channel.on("frameAttached", ({
        frame
      }) => this._onFrameAttached(_frame.Frame.from(frame)));
      this._channel.on("frameDetached", ({
        frame
      }) => this._onFrameDetached(_frame.Frame.from(frame)));
      this._channel.on("locatorHandlerTriggered", ({
        uid
      }) => this._onLocatorHandlerTriggered(uid));
      this._channel.on("route", ({
        route
      }) => this._onRoute(_network2.Route.from(route)));
      this._channel.on("video", ({
        artifact
      }) => {
        const artifactObject = _artifact.Artifact.from(artifact);
        this._forceVideo()._artifactReady(artifactObject);
      });
      this._channel.on("webSocket", ({
        webSocket
      }) => this.emit(_events.Events.Page.WebSocket, _network2.WebSocket.from(webSocket)));
      this._channel.on("worker", ({
        worker
      }) => this._onWorker(_worker.Worker.from(worker)));
      this.coverage = new _coverage.Coverage(this._channel);
      this.once(_events.Events.Page.Close, () => this._closedOrCrashedScope.close(this._closeErrorWithReason()));
      this.once(_events.Events.Page.Crash, () => this._closedOrCrashedScope.close(new _errors.TargetClosedError));
      this._setEventToSubscriptionMapping(new Map([[_events.Events.Page.Console, "console"], [_events.Events.Page.Dialog, "dialog"], [_events.Events.Page.Request, "request"], [_events.Events.Page.Response, "response"], [_events.Events.Page.RequestFinished, "requestFinished"], [_events.Events.Page.RequestFailed, "requestFailed"], [_events.Events.Page.FileChooser, "fileChooser"]]));
    }
    _onFrameAttached(frame) {
      frame._page = this;
      this._frames.add(frame);
      if (frame._parentFrame)
        frame._parentFrame._childFrames.add(frame);
      this.emit(_events.Events.Page.FrameAttached, frame);
    }
    _onFrameDetached(frame) {
      this._frames.delete(frame);
      frame._detached = true;
      if (frame._parentFrame)
        frame._parentFrame._childFrames.delete(frame);
      this.emit(_events.Events.Page.FrameDetached, frame);
    }
    async _onRoute(route) {
      route._context = this.context();
      const routeHandlers = this._routes.slice();
      for (const routeHandler of routeHandlers) {
        if (this._closeWasCalled || this._browserContext._closeWasCalled)
          return;
        if (!routeHandler.matches(route.request().url()))
          continue;
        const index = this._routes.indexOf(routeHandler);
        if (index === -1)
          continue;
        if (routeHandler.willExpire())
          this._routes.splice(index, 1);
        const handled = await routeHandler.handle(route);
        if (!this._routes.length)
          this._wrapApiCall(() => this._updateInterceptionPatterns(), true).catch(() => {
          });
        if (handled)
          return;
      }
      await this._browserContext._onRoute(route);
    }
    async _onBinding(bindingCall) {
      const func = this._bindings.get(bindingCall._initializer.name);
      if (func) {
        await bindingCall.call(func);
        return;
      }
      await this._browserContext._onBinding(bindingCall);
    }
    _onWorker(worker) {
      this._workers.add(worker);
      worker._page = this;
      this.emit(_events.Events.Page.Worker, worker);
    }
    _onClose() {
      this._closed = true;
      this._browserContext._pages.delete(this);
      this._browserContext._backgroundPages.delete(this);
      this._disposeHarRouters();
      this.emit(_events.Events.Page.Close, this);
    }
    _onCrash() {
      this.emit(_events.Events.Page.Crash, this);
    }
    context() {
      return this._browserContext;
    }
    async opener() {
      if (!this._opener || this._opener.isClosed())
        return null;
      return this._opener;
    }
    mainFrame() {
      return this._mainFrame;
    }
    frame(frameSelector) {
      const name = (0, _utils.isString)(frameSelector) ? frameSelector : frameSelector.name;
      const url = (0, _utils.isObject)(frameSelector) ? frameSelector.url : undefined;
      (0, _utils.assert)(name || url, "Either name or url matcher should be specified");
      return this.frames().find((f) => {
        if (name)
          return f.name() === name;
        return (0, _network.urlMatches)(this._browserContext._options.baseURL, f.url(), url);
      }) || null;
    }
    frames() {
      return [...this._frames];
    }
    setDefaultNavigationTimeout(timeout) {
      this._timeoutSettings.setDefaultNavigationTimeout(timeout);
      this._wrapApiCall(async () => {
        this._channel.setDefaultNavigationTimeoutNoReply({
          timeout
        }).catch(() => {
        });
      }, true);
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
      this._wrapApiCall(async () => {
        this._channel.setDefaultTimeoutNoReply({
          timeout
        }).catch(() => {
        });
      }, true);
    }
    _forceVideo() {
      if (!this._video)
        this._video = new _video.Video(this, this._connection);
      return this._video;
    }
    video() {
      if (!this._browserContext._options.recordVideo)
        return null;
      return this._forceVideo();
    }
    async $(selector, options) {
      return await this._mainFrame.$(selector, options);
    }
    async waitForSelector(selector, options) {
      return await this._mainFrame.waitForSelector(selector, options);
    }
    async dispatchEvent(selector, type, eventInit, options) {
      return await this._mainFrame.dispatchEvent(selector, type, eventInit, options);
    }
    async evaluateHandle(pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 2);
      return await this._mainFrame.evaluateHandle(pageFunction, arg);
    }
    async $eval(selector, pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 3);
      return await this._mainFrame.$eval(selector, pageFunction, arg);
    }
    async $$eval(selector, pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 3);
      return await this._mainFrame.$$eval(selector, pageFunction, arg);
    }
    async $$(selector) {
      return await this._mainFrame.$$(selector);
    }
    async addScriptTag(options = {}) {
      return await this._mainFrame.addScriptTag(options);
    }
    async addStyleTag(options = {}) {
      return await this._mainFrame.addStyleTag(options);
    }
    async exposeFunction(name, callback) {
      await this._channel.exposeBinding({
        name
      });
      const binding = (source, ...args) => callback(...args);
      this._bindings.set(name, binding);
    }
    async exposeBinding(name, callback, options = {}) {
      await this._channel.exposeBinding({
        name,
        needsHandle: options.handle
      });
      this._bindings.set(name, callback);
    }
    async setExtraHTTPHeaders(headers) {
      (0, _network2.validateHeaders)(headers);
      await this._channel.setExtraHTTPHeaders({
        headers: (0, _utils.headersObjectToArray)(headers)
      });
    }
    url() {
      return this._mainFrame.url();
    }
    async content() {
      return await this._mainFrame.content();
    }
    async setContent(html, options) {
      return await this._mainFrame.setContent(html, options);
    }
    async goto(url, options) {
      return await this._mainFrame.goto(url, options);
    }
    async reload(options = {}) {
      const waitUntil = (0, _frame.verifyLoadState)("waitUntil", options.waitUntil === undefined ? "load" : options.waitUntil);
      return _network2.Response.fromNullable((await this._channel.reload({
        ...options,
        waitUntil
      })).response);
    }
    async addLocatorHandler(locator, handler, options = {}) {
      if (locator._frame !== this._mainFrame)
        throw new Error(`Locator must belong to the main frame of this page`);
      if (options.times === 0)
        return;
      const {
        uid
      } = await this._channel.registerLocatorHandler({
        selector: locator._selector,
        noWaitAfter: options.noWaitAfter
      });
      this._locatorHandlers.set(uid, {
        locator,
        handler,
        times: options.times
      });
    }
    async _onLocatorHandlerTriggered(uid) {
      let remove = false;
      try {
        const handler = this._locatorHandlers.get(uid);
        if (handler && handler.times !== 0) {
          if (handler.times !== undefined)
            handler.times--;
          await handler.handler(handler.locator);
        }
        remove = (handler === null || handler === undefined ? undefined : handler.times) === 0;
      } finally {
        this._wrapApiCall(() => this._channel.resolveLocatorHandlerNoReply({
          uid,
          remove
        }), true).catch(() => {
        });
      }
    }
    async removeLocatorHandler(locator) {
      for (const [uid, data] of this._locatorHandlers) {
        if (data.locator._equals(locator)) {
          this._locatorHandlers.delete(uid);
          await this._channel.unregisterLocatorHandler({
            uid
          }).catch(() => {
          });
        }
      }
    }
    async waitForLoadState(state, options) {
      return await this._mainFrame.waitForLoadState(state, options);
    }
    async waitForNavigation(options) {
      return await this._mainFrame.waitForNavigation(options);
    }
    async waitForURL(url, options) {
      return await this._mainFrame.waitForURL(url, options);
    }
    async waitForRequest(urlOrPredicate, options = {}) {
      const predicate = async (request) => {
        if ((0, _utils.isString)(urlOrPredicate) || (0, _utils.isRegExp)(urlOrPredicate))
          return (0, _network.urlMatches)(this._browserContext._options.baseURL, request.url(), urlOrPredicate);
        return await urlOrPredicate(request);
      };
      const trimmedUrl = trimUrl(urlOrPredicate);
      const logLine = trimmedUrl ? `waiting for request ${trimmedUrl}` : undefined;
      return await this._waitForEvent(_events.Events.Page.Request, {
        predicate,
        timeout: options.timeout
      }, logLine);
    }
    async waitForResponse(urlOrPredicate, options = {}) {
      const predicate = async (response) => {
        if ((0, _utils.isString)(urlOrPredicate) || (0, _utils.isRegExp)(urlOrPredicate))
          return (0, _network.urlMatches)(this._browserContext._options.baseURL, response.url(), urlOrPredicate);
        return await urlOrPredicate(response);
      };
      const trimmedUrl = trimUrl(urlOrPredicate);
      const logLine = trimmedUrl ? `waiting for response ${trimmedUrl}` : undefined;
      return await this._waitForEvent(_events.Events.Page.Response, {
        predicate,
        timeout: options.timeout
      }, logLine);
    }
    async waitForEvent(event, optionsOrPredicate = {}) {
      return await this._waitForEvent(event, optionsOrPredicate, `waiting for event "${event}"`);
    }
    _closeErrorWithReason() {
      return new _errors.TargetClosedError(this._closeReason || this._browserContext._effectiveCloseReason());
    }
    async _waitForEvent(event, optionsOrPredicate, logLine) {
      return await this._wrapApiCall(async () => {
        const timeout = this._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
        const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
        const waiter = _waiter.Waiter.createForEvent(this, event);
        if (logLine)
          waiter.log(logLine);
        waiter.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
        if (event !== _events.Events.Page.Crash)
          waiter.rejectOnEvent(this, _events.Events.Page.Crash, new Error("Page crashed"));
        if (event !== _events.Events.Page.Close)
          waiter.rejectOnEvent(this, _events.Events.Page.Close, () => this._closeErrorWithReason());
        const result = await waiter.waitForEvent(this, event, predicate);
        waiter.dispose();
        return result;
      });
    }
    async goBack(options = {}) {
      const waitUntil = (0, _frame.verifyLoadState)("waitUntil", options.waitUntil === undefined ? "load" : options.waitUntil);
      return _network2.Response.fromNullable((await this._channel.goBack({
        ...options,
        waitUntil
      })).response);
    }
    async goForward(options = {}) {
      const waitUntil = (0, _frame.verifyLoadState)("waitUntil", options.waitUntil === undefined ? "load" : options.waitUntil);
      return _network2.Response.fromNullable((await this._channel.goForward({
        ...options,
        waitUntil
      })).response);
    }
    async emulateMedia(options = {}) {
      await this._channel.emulateMedia({
        media: options.media === null ? "no-override" : options.media,
        colorScheme: options.colorScheme === null ? "no-override" : options.colorScheme,
        reducedMotion: options.reducedMotion === null ? "no-override" : options.reducedMotion,
        forcedColors: options.forcedColors === null ? "no-override" : options.forcedColors
      });
    }
    async setViewportSize(viewportSize) {
      this._viewportSize = viewportSize;
      await this._channel.setViewportSize({
        viewportSize
      });
    }
    viewportSize() {
      return this._viewportSize;
    }
    async evaluate(pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 2);
      return await this._mainFrame.evaluate(pageFunction, arg);
    }
    async addInitScript(script, arg) {
      const source = await (0, _clientHelper.evaluationScript)(script, arg);
      await this._channel.addInitScript({
        source
      });
    }
    async route(url, handler, options = {}) {
      this._routes.unshift(new _network2.RouteHandler(this._browserContext._options.baseURL, url, handler, options.times));
      await this._updateInterceptionPatterns();
    }
    async routeFromHAR(har, options = {}) {
      if (options.update) {
        await this._browserContext._recordIntoHAR(har, this, options);
        return;
      }
      const harRouter = await _harRouter.HarRouter.create(this._connection.localUtils(), har, options.notFound || "abort", {
        urlMatch: options.url
      });
      this._harRouters.push(harRouter);
      await harRouter.addPageRoute(this);
    }
    _disposeHarRouters() {
      this._harRouters.forEach((router) => router.dispose());
      this._harRouters = [];
    }
    async unrouteAll(options) {
      await this._unrouteInternal(this._routes, [], options === null || options === undefined ? undefined : options.behavior);
      this._disposeHarRouters();
    }
    async unroute(url, handler) {
      const removed = [];
      const remaining = [];
      for (const route of this._routes) {
        if ((0, _utils.urlMatchesEqual)(route.url, url) && (!handler || route.handler === handler))
          removed.push(route);
        else
          remaining.push(route);
      }
      await this._unrouteInternal(removed, remaining, "default");
    }
    async _unrouteInternal(removed, remaining, behavior) {
      this._routes = remaining;
      await this._updateInterceptionPatterns();
      if (!behavior || behavior === "default")
        return;
      const promises = removed.map((routeHandler) => routeHandler.stop(behavior));
      await Promise.all(promises);
    }
    async _updateInterceptionPatterns() {
      const patterns = _network2.RouteHandler.prepareInterceptionPatterns(this._routes);
      await this._channel.setNetworkInterceptionPatterns({
        patterns
      });
    }
    async screenshot(options = {}) {
      const copy = {
        ...options,
        mask: undefined
      };
      if (!copy.type)
        copy.type = (0, _elementHandle.determineScreenshotType)(options);
      if (options.mask) {
        copy.mask = options.mask.map((locator) => ({
          frame: locator._frame._channel,
          selector: locator._selector
        }));
      }
      const result = await this._channel.screenshot(copy);
      if (options.path) {
        await (0, _fileUtils.mkdirIfNeeded)(options.path);
        await _fs.default.promises.writeFile(options.path, result.binary);
      }
      return result.binary;
    }
    async _expectScreenshot(options) {
      const mask = options !== null && options !== undefined && options.mask ? options === null || options === undefined ? undefined : options.mask.map((locator2) => ({
        frame: locator2._frame._channel,
        selector: locator2._selector
      })) : undefined;
      const locator = options.locator ? {
        frame: options.locator._frame._channel,
        selector: options.locator._selector
      } : undefined;
      return await this._channel.expectScreenshot({
        ...options,
        isNot: !!options.isNot,
        locator,
        mask
      });
    }
    async title() {
      return await this._mainFrame.title();
    }
    async bringToFront() {
      await this._channel.bringToFront();
    }
    async[_Symbol$asyncDispose]() {
      await this.close();
    }
    async close(options = {}) {
      this._closeReason = options.reason;
      this._closeWasCalled = true;
      try {
        if (this._ownedContext)
          await this._ownedContext.close();
        else
          await this._channel.close(options);
      } catch (e) {
        if ((0, _errors.isTargetClosedError)(e) && !options.runBeforeUnload)
          return;
        throw e;
      }
    }
    isClosed() {
      return this._closed;
    }
    async click(selector, options) {
      return await this._mainFrame.click(selector, options);
    }
    async dragAndDrop(source, target, options) {
      return await this._mainFrame.dragAndDrop(source, target, options);
    }
    async dblclick(selector, options) {
      return await this._mainFrame.dblclick(selector, options);
    }
    async tap(selector, options) {
      return await this._mainFrame.tap(selector, options);
    }
    async fill(selector, value, options) {
      return await this._mainFrame.fill(selector, value, options);
    }
    locator(selector, options) {
      return this.mainFrame().locator(selector, options);
    }
    getByTestId(testId) {
      return this.mainFrame().getByTestId(testId);
    }
    getByAltText(text, options) {
      return this.mainFrame().getByAltText(text, options);
    }
    getByLabel(text, options) {
      return this.mainFrame().getByLabel(text, options);
    }
    getByPlaceholder(text, options) {
      return this.mainFrame().getByPlaceholder(text, options);
    }
    getByText(text, options) {
      return this.mainFrame().getByText(text, options);
    }
    getByTitle(text, options) {
      return this.mainFrame().getByTitle(text, options);
    }
    getByRole(role, options = {}) {
      return this.mainFrame().getByRole(role, options);
    }
    frameLocator(selector) {
      return this.mainFrame().frameLocator(selector);
    }
    async focus(selector, options) {
      return await this._mainFrame.focus(selector, options);
    }
    async textContent(selector, options) {
      return await this._mainFrame.textContent(selector, options);
    }
    async innerText(selector, options) {
      return await this._mainFrame.innerText(selector, options);
    }
    async innerHTML(selector, options) {
      return await this._mainFrame.innerHTML(selector, options);
    }
    async getAttribute(selector, name, options) {
      return await this._mainFrame.getAttribute(selector, name, options);
    }
    async inputValue(selector, options) {
      return await this._mainFrame.inputValue(selector, options);
    }
    async isChecked(selector, options) {
      return await this._mainFrame.isChecked(selector, options);
    }
    async isDisabled(selector, options) {
      return await this._mainFrame.isDisabled(selector, options);
    }
    async isEditable(selector, options) {
      return await this._mainFrame.isEditable(selector, options);
    }
    async isEnabled(selector, options) {
      return await this._mainFrame.isEnabled(selector, options);
    }
    async isHidden(selector, options) {
      return await this._mainFrame.isHidden(selector, options);
    }
    async isVisible(selector, options) {
      return await this._mainFrame.isVisible(selector, options);
    }
    async hover(selector, options) {
      return await this._mainFrame.hover(selector, options);
    }
    async selectOption(selector, values, options) {
      return await this._mainFrame.selectOption(selector, values, options);
    }
    async setInputFiles(selector, files, options) {
      return await this._mainFrame.setInputFiles(selector, files, options);
    }
    async type(selector, text, options) {
      return await this._mainFrame.type(selector, text, options);
    }
    async press(selector, key, options) {
      return await this._mainFrame.press(selector, key, options);
    }
    async check(selector, options) {
      return await this._mainFrame.check(selector, options);
    }
    async uncheck(selector, options) {
      return await this._mainFrame.uncheck(selector, options);
    }
    async setChecked(selector, checked, options) {
      return await this._mainFrame.setChecked(selector, checked, options);
    }
    async waitForTimeout(timeout) {
      return await this._mainFrame.waitForTimeout(timeout);
    }
    async waitForFunction(pageFunction, arg, options) {
      return await this._mainFrame.waitForFunction(pageFunction, arg, options);
    }
    workers() {
      return [...this._workers];
    }
    async pause() {
      var _this$_instrumentatio;
      if (import.meta.require("inspector").url())
        return;
      const defaultNavigationTimeout = this._browserContext._timeoutSettings.defaultNavigationTimeout();
      const defaultTimeout = this._browserContext._timeoutSettings.defaultTimeout();
      this._browserContext.setDefaultNavigationTimeout(0);
      this._browserContext.setDefaultTimeout(0);
      (_this$_instrumentatio = this._instrumentation) === null || _this$_instrumentatio === undefined || _this$_instrumentatio.onWillPause();
      await this._closedOrCrashedScope.safeRace(this.context()._channel.pause());
      this._browserContext.setDefaultNavigationTimeout(defaultNavigationTimeout);
      this._browserContext.setDefaultTimeout(defaultTimeout);
    }
    async pdf(options = {}) {
      const transportOptions = {
        ...options
      };
      if (transportOptions.margin)
        transportOptions.margin = {
          ...transportOptions.margin
        };
      if (typeof options.width === "number")
        transportOptions.width = options.width + "px";
      if (typeof options.height === "number")
        transportOptions.height = options.height + "px";
      for (const margin of ["top", "right", "bottom", "left"]) {
        const index = margin;
        if (options.margin && typeof options.margin[index] === "number")
          transportOptions.margin[index] = transportOptions.margin[index] + "px";
      }
      const result = await this._channel.pdf(transportOptions);
      if (options.path) {
        await _fs.default.promises.mkdir(_path.default.dirname(options.path), {
          recursive: true
        });
        await _fs.default.promises.writeFile(options.path, result.pdf);
      }
      return result.pdf;
    }
  }
  exports.Page = Page;

  class BindingCall extends _channelOwner.ChannelOwner {
    static from(channel) {
      return channel._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
    }
    async call(func) {
      try {
        const frame = _frame.Frame.from(this._initializer.frame);
        const source = {
          context: frame._page.context(),
          page: frame._page,
          frame
        };
        let result;
        if (this._initializer.handle)
          result = await func(source, _jsHandle.JSHandle.from(this._initializer.handle));
        else
          result = await func(source, ...this._initializer.args.map(_jsHandle.parseResult));
        this._channel.resolve({
          result: (0, _jsHandle.serializeArgument)(result)
        }).catch(() => {
        });
      } catch (e) {
        this._channel.reject({
          error: (0, _errors.serializeError)(e)
        }).catch(() => {
        });
      }
    }
  }
  exports.BindingCall = BindingCall;
});

// node_modules/playwright-core/lib/client/cdpSession.js
var require_cdpSession = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CDPSession = undefined;
  var _channelOwner = require_channelOwner();

  class CDPSession extends _channelOwner.ChannelOwner {
    static from(cdpSession) {
      return cdpSession._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._channel.on("event", ({
        method,
        params
      }) => {
        this.emit(method, params);
      });
      this.on = super.on;
      this.addListener = super.addListener;
      this.off = super.removeListener;
      this.removeListener = super.removeListener;
      this.once = super.once;
    }
    async send(method, params) {
      const result = await this._channel.send({
        method,
        params
      });
      return result.result;
    }
    async detach() {
      return await this._channel.detach();
    }
  }
  exports.CDPSession = CDPSession;
});

// node_modules/playwright-core/lib/client/consoleMessage.js
var require_consoleMessage = __commonJS((exports) => {
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ConsoleMessage = undefined;
  var util = _interopRequireWildcard(import.meta.require("util"));
  var _jsHandle = require_jsHandle();
  var _page = require_page2();
  var _util$inspect$custom;
  _util$inspect$custom = util.inspect.custom;

  class ConsoleMessage {
    constructor(event) {
      this._page = undefined;
      this._event = undefined;
      this._page = "page" in event && event.page ? _page.Page.from(event.page) : null;
      this._event = event;
    }
    page() {
      return this._page;
    }
    type() {
      return this._event.type;
    }
    text() {
      return this._event.text;
    }
    args() {
      return this._event.args.map(_jsHandle.JSHandle.from);
    }
    location() {
      return this._event.location;
    }
    [_util$inspect$custom]() {
      return this.text();
    }
  }
  exports.ConsoleMessage = ConsoleMessage;
});

// node_modules/playwright-core/lib/client/dialog.js
var require_dialog2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Dialog = undefined;
  var _channelOwner = require_channelOwner();
  var _page = require_page2();

  class Dialog extends _channelOwner.ChannelOwner {
    static from(dialog) {
      return dialog._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._page = undefined;
      this._page = _page.Page.fromNullable(initializer.page);
    }
    page() {
      return this._page;
    }
    type() {
      return this._initializer.type;
    }
    message() {
      return this._initializer.message;
    }
    defaultValue() {
      return this._initializer.defaultValue;
    }
    async accept(promptText) {
      await this._channel.accept({
        promptText
      });
    }
    async dismiss() {
      await this._channel.dismiss();
    }
  }
  exports.Dialog = Dialog;
});

// node_modules/playwright-core/lib/client/webError.js
var require_webError = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WebError = undefined;

  class WebError {
    constructor(page, error) {
      this._page = undefined;
      this._error = undefined;
      this._page = page;
      this._error = error;
    }
    page() {
      return this._page;
    }
    error() {
      return this._error;
    }
  }
  exports.WebError = WebError;
});

// node_modules/playwright-core/lib/client/browserContext.js
var require_browserContext2 = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var _getRequireWildcardCache = function(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  };
  var _interopRequireWildcard = function(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  };
  async function prepareStorageState(options) {
    if (typeof options.storageState !== "string")
      return options.storageState;
    try {
      return JSON.parse(await _fs.default.promises.readFile(options.storageState, "utf8"));
    } catch (e) {
      (0, _stackTrace.rewriteErrorMessage)(e, `Error reading storage state from ${options.storageState}:\n` + e.message);
      throw e;
    }
  }
  var prepareRecordHarOptions = function(options) {
    if (!options)
      return;
    return {
      path: options.path,
      content: options.content || (options.omitContent ? "omit" : undefined),
      urlGlob: (0, _utils.isString)(options.urlFilter) ? options.urlFilter : undefined,
      urlRegexSource: (0, _utils.isRegExp)(options.urlFilter) ? options.urlFilter.source : undefined,
      urlRegexFlags: (0, _utils.isRegExp)(options.urlFilter) ? options.urlFilter.flags : undefined,
      mode: options.mode
    };
  };
  async function prepareBrowserContextParams(options) {
    if (options.videoSize && !options.videosPath)
      throw new Error(`"videoSize" option requires "videosPath" to be specified`);
    if (options.extraHTTPHeaders)
      network.validateHeaders(options.extraHTTPHeaders);
    const contextParams = {
      ...options,
      viewport: options.viewport === null ? undefined : options.viewport,
      noDefaultViewport: options.viewport === null,
      extraHTTPHeaders: options.extraHTTPHeaders ? (0, _utils.headersObjectToArray)(options.extraHTTPHeaders) : undefined,
      storageState: await prepareStorageState(options),
      serviceWorkers: options.serviceWorkers,
      recordHar: prepareRecordHarOptions(options.recordHar),
      colorScheme: options.colorScheme === null ? "no-override" : options.colorScheme,
      reducedMotion: options.reducedMotion === null ? "no-override" : options.reducedMotion,
      forcedColors: options.forcedColors === null ? "no-override" : options.forcedColors,
      acceptDownloads: toAcceptDownloadsProtocol(options.acceptDownloads)
    };
    if (!contextParams.recordVideo && options.videosPath) {
      contextParams.recordVideo = {
        dir: options.videosPath,
        size: options.videoSize
      };
    }
    if (contextParams.recordVideo && contextParams.recordVideo.dir)
      contextParams.recordVideo.dir = _path.default.resolve(process.cwd(), contextParams.recordVideo.dir);
    return contextParams;
  }
  var toAcceptDownloadsProtocol = function(acceptDownloads) {
    if (acceptDownloads === undefined)
      return;
    if (acceptDownloads)
      return "accept";
    return "deny";
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BrowserContext = undefined;
  exports.prepareBrowserContextParams = prepareBrowserContextParams;
  var _page = require_page2();
  var _frame = require_frame();
  var network = _interopRequireWildcard(require_network3());
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _path = _interopRequireDefault(import.meta.require("path"));
  var _channelOwner = require_channelOwner();
  var _clientHelper = require_clientHelper();
  var _browser = require_browser6();
  var _worker = require_worker();
  var _events = require_events();
  var _timeoutSettings = require_timeoutSettings();
  var _waiter = require_waiter();
  var _utils = require_utils3();
  var _fileUtils = require_fileUtils();
  var _cdpSession = require_cdpSession();
  var _tracing = require_tracing2();
  var _artifact = require_artifact2();
  var _fetch = require_fetch2();
  var _stackTrace = require_stackTrace();
  var _harRouter = require_harRouter();
  var _consoleMessage = require_consoleMessage();
  var _dialog = require_dialog2();
  var _webError = require_webError();
  var _errors = require_errors2();
  var _Symbol$asyncDispose;
  _Symbol$asyncDispose = Symbol.asyncDispose;

  class BrowserContext extends _channelOwner.ChannelOwner {
    static from(context) {
      return context._object;
    }
    static fromNullable(context) {
      return context ? BrowserContext.from(context) : null;
    }
    constructor(parent, type, guid, initializer) {
      var _this$_browser, _this$_browser2;
      super(parent, type, guid, initializer);
      this._pages = new Set;
      this._routes = [];
      this._browser = null;
      this._browserType = undefined;
      this._bindings = new Map;
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings;
      this._ownerPage = undefined;
      this._closedPromise = undefined;
      this._options = {};
      this.request = undefined;
      this.tracing = undefined;
      this._backgroundPages = new Set;
      this._serviceWorkers = new Set;
      this._isChromium = undefined;
      this._harRecorders = new Map;
      this._closeWasCalled = false;
      this._closeReason = undefined;
      this._harRouters = [];
      if (parent instanceof _browser.Browser)
        this._browser = parent;
      (_this$_browser = this._browser) === null || _this$_browser === undefined || _this$_browser._contexts.add(this);
      this._isChromium = ((_this$_browser2 = this._browser) === null || _this$_browser2 === undefined ? undefined : _this$_browser2._name) === "chromium";
      this.tracing = _tracing.Tracing.from(initializer.tracing);
      this.request = _fetch.APIRequestContext.from(initializer.requestContext);
      this._channel.on("bindingCall", ({
        binding
      }) => this._onBinding(_page.BindingCall.from(binding)));
      this._channel.on("close", () => this._onClose());
      this._channel.on("page", ({
        page
      }) => this._onPage(_page.Page.from(page)));
      this._channel.on("route", ({
        route
      }) => this._onRoute(network.Route.from(route)));
      this._channel.on("backgroundPage", ({
        page
      }) => {
        const backgroundPage = _page.Page.from(page);
        this._backgroundPages.add(backgroundPage);
        this.emit(_events.Events.BrowserContext.BackgroundPage, backgroundPage);
      });
      this._channel.on("serviceWorker", ({
        worker
      }) => {
        const serviceWorker = _worker.Worker.from(worker);
        serviceWorker._context = this;
        this._serviceWorkers.add(serviceWorker);
        this.emit(_events.Events.BrowserContext.ServiceWorker, serviceWorker);
      });
      this._channel.on("console", (event) => {
        const consoleMessage = new _consoleMessage.ConsoleMessage(event);
        this.emit(_events.Events.BrowserContext.Console, consoleMessage);
        const page = consoleMessage.page();
        if (page)
          page.emit(_events.Events.Page.Console, consoleMessage);
      });
      this._channel.on("pageError", ({
        error,
        page
      }) => {
        const pageObject = _page.Page.from(page);
        const parsedError = (0, _errors.parseError)(error);
        this.emit(_events.Events.BrowserContext.WebError, new _webError.WebError(pageObject, parsedError));
        if (pageObject)
          pageObject.emit(_events.Events.Page.PageError, parsedError);
      });
      this._channel.on("dialog", ({
        dialog
      }) => {
        const dialogObject = _dialog.Dialog.from(dialog);
        let hasListeners = this.emit(_events.Events.BrowserContext.Dialog, dialogObject);
        const page = dialogObject.page();
        if (page)
          hasListeners = page.emit(_events.Events.Page.Dialog, dialogObject) || hasListeners;
        if (!hasListeners) {
          if (dialogObject.type() === "beforeunload")
            dialog.accept({}).catch(() => {
            });
          else
            dialog.dismiss().catch(() => {
            });
        }
      });
      this._channel.on("request", ({
        request,
        page
      }) => this._onRequest(network.Request.from(request), _page.Page.fromNullable(page)));
      this._channel.on("requestFailed", ({
        request,
        failureText,
        responseEndTiming,
        page
      }) => this._onRequestFailed(network.Request.from(request), responseEndTiming, failureText, _page.Page.fromNullable(page)));
      this._channel.on("requestFinished", (params) => this._onRequestFinished(params));
      this._channel.on("response", ({
        response,
        page
      }) => this._onResponse(network.Response.from(response), _page.Page.fromNullable(page)));
      this._closedPromise = new Promise((f) => this.once(_events.Events.BrowserContext.Close, f));
      this._setEventToSubscriptionMapping(new Map([[_events.Events.BrowserContext.Console, "console"], [_events.Events.BrowserContext.Dialog, "dialog"], [_events.Events.BrowserContext.Request, "request"], [_events.Events.BrowserContext.Response, "response"], [_events.Events.BrowserContext.RequestFinished, "requestFinished"], [_events.Events.BrowserContext.RequestFailed, "requestFailed"]]));
    }
    _setOptions(contextOptions, browserOptions) {
      this._options = contextOptions;
      if (this._options.recordHar)
        this._harRecorders.set("", {
          path: this._options.recordHar.path,
          content: this._options.recordHar.content
        });
      this.tracing._tracesDir = browserOptions.tracesDir;
    }
    _onPage(page) {
      this._pages.add(page);
      this.emit(_events.Events.BrowserContext.Page, page);
      if (page._opener && !page._opener.isClosed())
        page._opener.emit(_events.Events.Page.Popup, page);
    }
    _onRequest(request, page) {
      this.emit(_events.Events.BrowserContext.Request, request);
      if (page)
        page.emit(_events.Events.Page.Request, request);
    }
    _onResponse(response, page) {
      this.emit(_events.Events.BrowserContext.Response, response);
      if (page)
        page.emit(_events.Events.Page.Response, response);
    }
    _onRequestFailed(request, responseEndTiming, failureText, page) {
      request._failureText = failureText || null;
      request._setResponseEndTiming(responseEndTiming);
      this.emit(_events.Events.BrowserContext.RequestFailed, request);
      if (page)
        page.emit(_events.Events.Page.RequestFailed, request);
    }
    _onRequestFinished(params) {
      const {
        responseEndTiming
      } = params;
      const request = network.Request.from(params.request);
      const response = network.Response.fromNullable(params.response);
      const page = _page.Page.fromNullable(params.page);
      request._setResponseEndTiming(responseEndTiming);
      this.emit(_events.Events.BrowserContext.RequestFinished, request);
      if (page)
        page.emit(_events.Events.Page.RequestFinished, request);
      if (response)
        response._finishedPromise.resolve(null);
    }
    async _onRoute(route) {
      route._context = this;
      const page = route.request()._safePage();
      const routeHandlers = this._routes.slice();
      for (const routeHandler of routeHandlers) {
        if (page !== null && page !== undefined && page._closeWasCalled || this._closeWasCalled)
          return;
        if (!routeHandler.matches(route.request().url()))
          continue;
        const index = this._routes.indexOf(routeHandler);
        if (index === -1)
          continue;
        if (routeHandler.willExpire())
          this._routes.splice(index, 1);
        const handled = await routeHandler.handle(route);
        if (!this._routes.length)
          this._wrapApiCall(() => this._updateInterceptionPatterns(), true).catch(() => {
          });
        if (handled)
          return;
      }
      await route._innerContinue(true).catch(() => {
      });
    }
    async _onBinding(bindingCall) {
      const func = this._bindings.get(bindingCall._initializer.name);
      if (!func)
        return;
      await bindingCall.call(func);
    }
    setDefaultNavigationTimeout(timeout) {
      this._timeoutSettings.setDefaultNavigationTimeout(timeout);
      this._wrapApiCall(async () => {
        this._channel.setDefaultNavigationTimeoutNoReply({
          timeout
        }).catch(() => {
        });
      }, true);
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
      this._wrapApiCall(async () => {
        this._channel.setDefaultTimeoutNoReply({
          timeout
        }).catch(() => {
        });
      }, true);
    }
    browser() {
      return this._browser;
    }
    pages() {
      return [...this._pages];
    }
    async newPage() {
      if (this._ownerPage)
        throw new Error("Please use browser.newContext()");
      return _page.Page.from((await this._channel.newPage()).page);
    }
    async cookies(urls) {
      if (!urls)
        urls = [];
      if (urls && typeof urls === "string")
        urls = [urls];
      return (await this._channel.cookies({
        urls
      })).cookies;
    }
    async addCookies(cookies) {
      await this._channel.addCookies({
        cookies
      });
    }
    async clearCookies(options = {}) {
      await this._channel.clearCookies({
        name: (0, _utils.isString)(options.name) ? options.name : undefined,
        nameRegexSource: (0, _utils.isRegExp)(options.name) ? options.name.source : undefined,
        nameRegexFlags: (0, _utils.isRegExp)(options.name) ? options.name.flags : undefined,
        domain: (0, _utils.isString)(options.domain) ? options.domain : undefined,
        domainRegexSource: (0, _utils.isRegExp)(options.domain) ? options.domain.source : undefined,
        domainRegexFlags: (0, _utils.isRegExp)(options.domain) ? options.domain.flags : undefined,
        path: (0, _utils.isString)(options.path) ? options.path : undefined,
        pathRegexSource: (0, _utils.isRegExp)(options.path) ? options.path.source : undefined,
        pathRegexFlags: (0, _utils.isRegExp)(options.path) ? options.path.flags : undefined
      });
    }
    async grantPermissions(permissions, options) {
      await this._channel.grantPermissions({
        permissions,
        ...options
      });
    }
    async clearPermissions() {
      await this._channel.clearPermissions();
    }
    async setGeolocation(geolocation) {
      await this._channel.setGeolocation({
        geolocation: geolocation || undefined
      });
    }
    async setExtraHTTPHeaders(headers) {
      network.validateHeaders(headers);
      await this._channel.setExtraHTTPHeaders({
        headers: (0, _utils.headersObjectToArray)(headers)
      });
    }
    async setOffline(offline) {
      await this._channel.setOffline({
        offline
      });
    }
    async setHTTPCredentials(httpCredentials) {
      await this._channel.setHTTPCredentials({
        httpCredentials: httpCredentials || undefined
      });
    }
    async addInitScript(script, arg) {
      const source = await (0, _clientHelper.evaluationScript)(script, arg);
      await this._channel.addInitScript({
        source
      });
    }
    async exposeBinding(name, callback, options = {}) {
      await this._channel.exposeBinding({
        name,
        needsHandle: options.handle
      });
      this._bindings.set(name, callback);
    }
    async exposeFunction(name, callback) {
      await this._channel.exposeBinding({
        name
      });
      const binding = (source, ...args) => callback(...args);
      this._bindings.set(name, binding);
    }
    async route(url, handler, options = {}) {
      this._routes.unshift(new network.RouteHandler(this._options.baseURL, url, handler, options.times));
      await this._updateInterceptionPatterns();
    }
    async _recordIntoHAR(har, page, options = {}) {
      var _options$updateConten, _options$updateMode, _options$updateConten2;
      const {
        harId
      } = await this._channel.harStart({
        page: page === null || page === undefined ? undefined : page._channel,
        options: prepareRecordHarOptions({
          path: har,
          content: (_options$updateConten = options.updateContent) !== null && _options$updateConten !== undefined ? _options$updateConten : "attach",
          mode: (_options$updateMode = options.updateMode) !== null && _options$updateMode !== undefined ? _options$updateMode : "minimal",
          urlFilter: options.url
        })
      });
      this._harRecorders.set(harId, {
        path: har,
        content: (_options$updateConten2 = options.updateContent) !== null && _options$updateConten2 !== undefined ? _options$updateConten2 : "attach"
      });
    }
    async routeFromHAR(har, options = {}) {
      if (options.update) {
        await this._recordIntoHAR(har, null, options);
        return;
      }
      const harRouter = await _harRouter.HarRouter.create(this._connection.localUtils(), har, options.notFound || "abort", {
        urlMatch: options.url
      });
      this._harRouters.push(harRouter);
      await harRouter.addContextRoute(this);
    }
    _disposeHarRouters() {
      this._harRouters.forEach((router) => router.dispose());
      this._harRouters = [];
    }
    async unrouteAll(options) {
      await this._unrouteInternal(this._routes, [], options === null || options === undefined ? undefined : options.behavior);
      this._disposeHarRouters();
    }
    async unroute(url, handler) {
      const removed = [];
      const remaining = [];
      for (const route of this._routes) {
        if ((0, _utils.urlMatchesEqual)(route.url, url) && (!handler || route.handler === handler))
          removed.push(route);
        else
          remaining.push(route);
      }
      await this._unrouteInternal(removed, remaining, "default");
    }
    async _unrouteInternal(removed, remaining, behavior) {
      this._routes = remaining;
      await this._updateInterceptionPatterns();
      if (!behavior || behavior === "default")
        return;
      const promises = removed.map((routeHandler) => routeHandler.stop(behavior));
      await Promise.all(promises);
    }
    async _updateInterceptionPatterns() {
      const patterns = network.RouteHandler.prepareInterceptionPatterns(this._routes);
      await this._channel.setNetworkInterceptionPatterns({
        patterns
      });
    }
    _effectiveCloseReason() {
      var _this$_browser3;
      return this._closeReason || ((_this$_browser3 = this._browser) === null || _this$_browser3 === undefined ? undefined : _this$_browser3._closeReason);
    }
    async waitForEvent(event, optionsOrPredicate = {}) {
      return await this._wrapApiCall(async () => {
        const timeout = this._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
        const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
        const waiter = _waiter.Waiter.createForEvent(this, event);
        waiter.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
        if (event !== _events.Events.BrowserContext.Close)
          waiter.rejectOnEvent(this, _events.Events.BrowserContext.Close, () => new _errors.TargetClosedError(this._effectiveCloseReason()));
        const result = await waiter.waitForEvent(this, event, predicate);
        waiter.dispose();
        return result;
      });
    }
    async storageState(options = {}) {
      const state = await this._channel.storageState();
      if (options.path) {
        await (0, _fileUtils.mkdirIfNeeded)(options.path);
        await _fs.default.promises.writeFile(options.path, JSON.stringify(state, undefined, 2), "utf8");
      }
      return state;
    }
    backgroundPages() {
      return [...this._backgroundPages];
    }
    serviceWorkers() {
      return [...this._serviceWorkers];
    }
    async newCDPSession(page) {
      if (!(page instanceof _page.Page) && !(page instanceof _frame.Frame))
        throw new Error("page: expected Page or Frame");
      const result = await this._channel.newCDPSession(page instanceof _page.Page ? {
        page: page._channel
      } : {
        frame: page._channel
      });
      return _cdpSession.CDPSession.from(result.session);
    }
    _onClose() {
      var _this$_browserType;
      if (this._browser)
        this._browser._contexts.delete(this);
      (_this$_browserType = this._browserType) === null || _this$_browserType === undefined || (_this$_browserType = _this$_browserType._contexts) === null || _this$_browserType === undefined || _this$_browserType.delete(this);
      this._disposeHarRouters();
      this.tracing._resetStackCounter();
      this.emit(_events.Events.BrowserContext.Close, this);
    }
    async[_Symbol$asyncDispose]() {
      await this.close();
    }
    async close(options = {}) {
      if (this._closeWasCalled)
        return;
      this._closeReason = options.reason;
      this._closeWasCalled = true;
      await this._wrapApiCall(async () => {
        var _this$_browserType2;
        await ((_this$_browserType2 = this._browserType) === null || _this$_browserType2 === undefined ? undefined : _this$_browserType2._willCloseContext(this));
        for (const [harId, harParams] of this._harRecorders) {
          const har = await this._channel.harExport({
            harId
          });
          const artifact = _artifact.Artifact.from(har.artifact);
          const isCompressed = harParams.content === "attach" || harParams.path.endsWith(".zip");
          const needCompressed = harParams.path.endsWith(".zip");
          if (isCompressed && !needCompressed) {
            await artifact.saveAs(harParams.path + ".tmp");
            await this._connection.localUtils()._channel.harUnzip({
              zipFile: harParams.path + ".tmp",
              harFile: harParams.path
            });
          } else {
            await artifact.saveAs(harParams.path);
          }
          await artifact.delete();
        }
      }, true);
      await this._channel.close(options);
      await this._closedPromise;
    }
    async _enableRecorder(params) {
      await this._channel.recorderSupplementEnable(params);
    }
  }
  exports.BrowserContext = BrowserContext;
});

// node_modules/playwright-core/lib/client/browser.js
var require_browser6 = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Browser = undefined;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _browserContext = require_browserContext2();
  var _channelOwner = require_channelOwner();
  var _events = require_events();
  var _errors = require_errors2();
  var _cdpSession = require_cdpSession();
  var _artifact = require_artifact2();
  var _utils = require_utils3();
  var _Symbol$asyncDispose;
  _Symbol$asyncDispose = Symbol.asyncDispose;

  class Browser extends _channelOwner.ChannelOwner {
    static from(browser) {
      return browser._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._contexts = new Set;
      this._isConnected = true;
      this._closedPromise = undefined;
      this._shouldCloseConnectionOnClose = false;
      this._browserType = undefined;
      this._options = {};
      this._name = undefined;
      this._path = undefined;
      this._connectHeaders = undefined;
      this._closeReason = undefined;
      this._name = initializer.name;
      this._channel.on("close", () => this._didClose());
      this._closedPromise = new Promise((f) => this.once(_events.Events.Browser.Disconnected, f));
    }
    browserType() {
      return this._browserType;
    }
    async newContext(options = {}) {
      return await this._innerNewContext(options, false);
    }
    async _newContextForReuse(options = {}) {
      return await this._wrapApiCall(async () => {
        for (const context of this._contexts) {
          await this._browserType._willCloseContext(context);
          for (const page of context.pages())
            page._onClose();
          context._onClose();
        }
        return await this._innerNewContext(options, true);
      }, true);
    }
    async _stopPendingOperations(reason) {
      return await this._wrapApiCall(async () => {
        await this._channel.stopPendingOperations({
          reason
        });
      }, true);
    }
    async _innerNewContext(options = {}, forReuse) {
      options = {
        ...this._browserType._defaultContextOptions,
        ...options
      };
      const contextOptions = await (0, _browserContext.prepareBrowserContextParams)(options);
      const response = forReuse ? await this._channel.newContextForReuse(contextOptions) : await this._channel.newContext(contextOptions);
      const context = _browserContext.BrowserContext.from(response.context);
      await this._browserType._didCreateContext(context, contextOptions, this._options, options.logger || this._logger);
      return context;
    }
    contexts() {
      return [...this._contexts];
    }
    version() {
      return this._initializer.version;
    }
    async newPage(options = {}) {
      return await this._wrapApiCall(async () => {
        const context = await this.newContext(options);
        const page = await context.newPage();
        page._ownedContext = context;
        context._ownerPage = page;
        return page;
      });
    }
    isConnected() {
      return this._isConnected;
    }
    async newBrowserCDPSession() {
      return _cdpSession.CDPSession.from((await this._channel.newBrowserCDPSession()).session);
    }
    async startTracing(page, options = {}) {
      this._path = options.path;
      await this._channel.startTracing({
        ...options,
        page: page ? page._channel : undefined
      });
    }
    async stopTracing() {
      const artifact = _artifact.Artifact.from((await this._channel.stopTracing()).artifact);
      const buffer = await artifact.readIntoBuffer();
      await artifact.delete();
      if (this._path) {
        await (0, _utils.mkdirIfNeeded)(this._path);
        await _fs.default.promises.writeFile(this._path, buffer);
        this._path = undefined;
      }
      return buffer;
    }
    async[_Symbol$asyncDispose]() {
      await this.close();
    }
    async close(options = {}) {
      this._closeReason = options.reason;
      try {
        if (this._shouldCloseConnectionOnClose)
          this._connection.close();
        else
          await this._channel.close(options);
        await this._closedPromise;
      } catch (e) {
        if ((0, _errors.isTargetClosedError)(e))
          return;
        throw e;
      }
    }
    _didClose() {
      this._isConnected = false;
      this.emit(_events.Events.Browser.Disconnected, this);
    }
  }
  exports.Browser = Browser;
});

// node_modules/playwright-core/lib/client/browserType.js
var require_browserType2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BrowserType = undefined;
  var _browser3 = require_browser6();
  var _browserContext = require_browserContext2();
  var _channelOwner = require_channelOwner();
  var _connection = require_connection();
  var _events = require_events();
  var _clientHelper = require_clientHelper();
  var _utils = require_utils3();
  var _timeoutRunner = require_timeoutRunner();

  class BrowserType extends _channelOwner.ChannelOwner {
    constructor(...args) {
      super(...args);
      this._serverLauncher = undefined;
      this._contexts = new Set;
      this._playwright = undefined;
      this._defaultContextOptions = undefined;
      this._defaultContextTimeout = undefined;
      this._defaultContextNavigationTimeout = undefined;
      this._defaultLaunchOptions = undefined;
    }
    static from(browserType) {
      return browserType._object;
    }
    executablePath() {
      if (!this._initializer.executablePath)
        throw new Error("Browser is not supported on current platform");
      return this._initializer.executablePath;
    }
    name() {
      return this._initializer.name;
    }
    async launch(options = {}) {
      var _this$_defaultLaunchO;
      (0, _utils.assert)(!options.userDataDir, "userDataDir option is not supported in `browserType.launch`. Use `browserType.launchPersistentContext` instead");
      (0, _utils.assert)(!options.port, "Cannot specify a port without launching as a server.");
      const logger = options.logger || ((_this$_defaultLaunchO = this._defaultLaunchOptions) === null || _this$_defaultLaunchO === undefined ? undefined : _this$_defaultLaunchO.logger);
      options = {
        ...this._defaultLaunchOptions,
        ...options
      };
      const launchOptions = {
        ...options,
        ignoreDefaultArgs: Array.isArray(options.ignoreDefaultArgs) ? options.ignoreDefaultArgs : undefined,
        ignoreAllDefaultArgs: !!options.ignoreDefaultArgs && !Array.isArray(options.ignoreDefaultArgs),
        env: options.env ? (0, _clientHelper.envObjectToArray)(options.env) : undefined
      };
      return await this._wrapApiCall(async () => {
        const browser = _browser3.Browser.from((await this._channel.launch(launchOptions)).browser);
        this._didLaunchBrowser(browser, options, logger);
        return browser;
      });
    }
    async launchServer(options = {}) {
      if (!this._serverLauncher)
        throw new Error("Launching server is not supported");
      options = {
        ...this._defaultLaunchOptions,
        ...options
      };
      return await this._serverLauncher.launchServer(options);
    }
    async launchPersistentContext(userDataDir, options = {}) {
      var _this$_defaultLaunchO2;
      const logger = options.logger || ((_this$_defaultLaunchO2 = this._defaultLaunchOptions) === null || _this$_defaultLaunchO2 === undefined ? undefined : _this$_defaultLaunchO2.logger);
      (0, _utils.assert)(!options.port, "Cannot specify a port without launching as a server.");
      options = {
        ...this._defaultLaunchOptions,
        ...this._defaultContextOptions,
        ...options
      };
      const contextParams = await (0, _browserContext.prepareBrowserContextParams)(options);
      const persistentParams = {
        ...contextParams,
        ignoreDefaultArgs: Array.isArray(options.ignoreDefaultArgs) ? options.ignoreDefaultArgs : undefined,
        ignoreAllDefaultArgs: !!options.ignoreDefaultArgs && !Array.isArray(options.ignoreDefaultArgs),
        env: options.env ? (0, _clientHelper.envObjectToArray)(options.env) : undefined,
        channel: options.channel,
        userDataDir
      };
      return await this._wrapApiCall(async () => {
        const result = await this._channel.launchPersistentContext(persistentParams);
        const context = _browserContext.BrowserContext.from(result.context);
        await this._didCreateContext(context, contextParams, options, logger);
        return context;
      });
    }
    async connect(optionsOrWsEndpoint, options) {
      if (typeof optionsOrWsEndpoint === "string")
        return await this._connect({
          ...options,
          wsEndpoint: optionsOrWsEndpoint
        });
      (0, _utils.assert)(optionsOrWsEndpoint.wsEndpoint, "options.wsEndpoint is required");
      return await this._connect(optionsOrWsEndpoint);
    }
    async _connect(params) {
      const logger = params.logger;
      return await this._wrapApiCall(async () => {
        var _params$exposeNetwork;
        const deadline = params.timeout ? (0, _utils.monotonicTime)() + params.timeout : 0;
        const headers = {
          "x-playwright-browser": this.name(),
          ...params.headers
        };
        const localUtils = this._connection.localUtils();
        const connectParams = {
          wsEndpoint: params.wsEndpoint,
          headers,
          exposeNetwork: (_params$exposeNetwork = params.exposeNetwork) !== null && _params$exposeNetwork !== undefined ? _params$exposeNetwork : params._exposeNetwork,
          slowMo: params.slowMo,
          timeout: params.timeout
        };
        if (params.__testHookRedirectPortForwarding)
          connectParams.socksProxyRedirectPortForTest = params.__testHookRedirectPortForwarding;
        const {
          pipe,
          headers: connectHeaders
        } = await localUtils._channel.connect(connectParams);
        const closePipe = () => pipe.close().catch(() => {
        });
        const connection = new _connection.Connection(localUtils, this._instrumentation);
        connection.markAsRemote();
        connection.on("close", closePipe);
        let browser;
        let closeError;
        const onPipeClosed = (reason) => {
          var _browser2;
          for (const context of ((_browser = browser) === null || _browser === undefined ? undefined : _browser.contexts()) || []) {
            var _browser;
            for (const page of context.pages())
              page._onClose();
            context._onClose();
          }
          (_browser2 = browser) === null || _browser2 === undefined || _browser2._didClose();
          connection.close(reason || closeError);
        };
        pipe.on("closed", (params2) => onPipeClosed(params2.reason));
        connection.onmessage = (message) => pipe.send({
          message
        }).catch(() => onPipeClosed());
        pipe.on("message", ({
          message
        }) => {
          try {
            connection.dispatch(message);
          } catch (e) {
            closeError = String(e);
            closePipe();
          }
        });
        const result = await (0, _timeoutRunner.raceAgainstDeadline)(async () => {
          if (params.__testHookBeforeCreateBrowser)
            await params.__testHookBeforeCreateBrowser();
          const playwright = await connection.initializePlaywright();
          if (!playwright._initializer.preLaunchedBrowser) {
            closePipe();
            throw new Error("Malformed endpoint. Did you use BrowserType.launchServer method?");
          }
          playwright._setSelectors(this._playwright.selectors);
          browser = _browser3.Browser.from(playwright._initializer.preLaunchedBrowser);
          this._didLaunchBrowser(browser, {}, logger);
          browser._shouldCloseConnectionOnClose = true;
          browser._connectHeaders = connectHeaders;
          browser.on(_events.Events.Browser.Disconnected, closePipe);
          return browser;
        }, deadline);
        if (!result.timedOut) {
          return result.result;
        } else {
          closePipe();
          throw new Error(`Timeout ${params.timeout}ms exceeded`);
        }
      });
    }
    async connectOverCDP(endpointURLOrOptions, options) {
      if (typeof endpointURLOrOptions === "string")
        return await this._connectOverCDP(endpointURLOrOptions, options);
      const endpointURL = "endpointURL" in endpointURLOrOptions ? endpointURLOrOptions.endpointURL : endpointURLOrOptions.wsEndpoint;
      (0, _utils.assert)(endpointURL, "Cannot connect over CDP without wsEndpoint.");
      return await this.connectOverCDP(endpointURL, endpointURLOrOptions);
    }
    async _connectOverCDP(endpointURL, params = {}) {
      if (this.name() !== "chromium")
        throw new Error("Connecting over CDP is only supported in Chromium.");
      const headers = params.headers ? (0, _utils.headersObjectToArray)(params.headers) : undefined;
      const result = await this._channel.connectOverCDP({
        endpointURL,
        headers,
        slowMo: params.slowMo,
        timeout: params.timeout
      });
      const browser = _browser3.Browser.from(result.browser);
      this._didLaunchBrowser(browser, {}, params.logger);
      if (result.defaultContext)
        await this._didCreateContext(_browserContext.BrowserContext.from(result.defaultContext), {}, {}, params.logger);
      return browser;
    }
    _didLaunchBrowser(browser, browserOptions, logger) {
      browser._browserType = this;
      browser._options = browserOptions;
      browser._logger = logger;
    }
    async _didCreateContext(context, contextOptions, browserOptions, logger) {
      context._logger = logger;
      context._browserType = this;
      this._contexts.add(context);
      context._setOptions(contextOptions, browserOptions);
      if (this._defaultContextTimeout !== undefined)
        context.setDefaultTimeout(this._defaultContextTimeout);
      if (this._defaultContextNavigationTimeout !== undefined)
        context.setDefaultNavigationTimeout(this._defaultContextNavigationTimeout);
      await this._instrumentation.onDidCreateBrowserContext(context);
    }
    async _willCloseContext(context) {
      this._contexts.delete(context);
      await this._instrumentation.onWillCloseBrowserContext(context);
    }
  }
  exports.BrowserType = BrowserType;
});

// node_modules/playwright-core/lib/client/android.js
var require_android2 = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  async function loadFile(file) {
    if ((0, _utils.isString)(file))
      return await _fs.default.promises.readFile(file);
    return file;
  }
  var toSelectorChannel = function(selector) {
    const {
      checkable,
      checked,
      clazz,
      clickable,
      depth,
      desc,
      enabled,
      focusable,
      focused,
      hasChild,
      hasDescendant,
      longClickable,
      pkg,
      res,
      scrollable,
      selected,
      text
    } = selector;
    const toRegex = (value) => {
      if (value === undefined)
        return;
      if ((0, _utils.isRegExp)(value))
        return value.source;
      return "^" + value.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d") + "$";
    };
    return {
      checkable,
      checked,
      clazz: toRegex(clazz),
      pkg: toRegex(pkg),
      desc: toRegex(desc),
      res: toRegex(res),
      text: toRegex(text),
      clickable,
      depth,
      enabled,
      focusable,
      focused,
      hasChild: hasChild ? {
        selector: toSelectorChannel(hasChild.selector)
      } : undefined,
      hasDescendant: hasDescendant ? {
        selector: toSelectorChannel(hasDescendant.selector),
        maxDepth: hasDescendant.maxDepth
      } : undefined,
      longClickable,
      scrollable,
      selected
    };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AndroidWebView = exports.AndroidSocket = exports.AndroidInput = exports.AndroidDevice = exports.Android = undefined;
  var _fs = _interopRequireDefault(import.meta.require("fs"));
  var _utils = require_utils3();
  var _events = require_events();
  var _browserContext = require_browserContext2();
  var _channelOwner = require_channelOwner();
  var _timeoutSettings = require_timeoutSettings();
  var _waiter = require_waiter();
  var _events2 = import.meta.require("events");
  var _connection = require_connection();
  var _errors = require_errors2();
  var _timeoutRunner = require_timeoutRunner();
  var _Symbol$asyncDispose;

  class Android extends _channelOwner.ChannelOwner {
    static from(android) {
      return android._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._timeoutSettings = undefined;
      this._serverLauncher = undefined;
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings;
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
      this._channel.setDefaultTimeoutNoReply({
        timeout
      });
    }
    async devices(options = {}) {
      const {
        devices
      } = await this._channel.devices(options);
      return devices.map((d) => AndroidDevice.from(d));
    }
    async launchServer(options = {}) {
      if (!this._serverLauncher)
        throw new Error("Launching server is not supported");
      return await this._serverLauncher.launchServer(options);
    }
    async connect(wsEndpoint, options = {}) {
      return await this._wrapApiCall(async () => {
        const deadline = options.timeout ? (0, _utils.monotonicTime)() + options.timeout : 0;
        const headers = {
          "x-playwright-browser": "android",
          ...options.headers
        };
        const localUtils = this._connection.localUtils();
        const connectParams = {
          wsEndpoint,
          headers,
          slowMo: options.slowMo,
          timeout: options.timeout
        };
        const {
          pipe
        } = await localUtils._channel.connect(connectParams);
        const closePipe = () => pipe.close().catch(() => {
        });
        const connection = new _connection.Connection(localUtils, this._instrumentation);
        connection.markAsRemote();
        connection.on("close", closePipe);
        let device;
        let closeError;
        const onPipeClosed = () => {
          var _device;
          (_device = device) === null || _device === undefined || _device._didClose();
          connection.close(closeError);
        };
        pipe.on("closed", onPipeClosed);
        connection.onmessage = (message) => pipe.send({
          message
        }).catch(onPipeClosed);
        pipe.on("message", ({
          message
        }) => {
          try {
            connection.dispatch(message);
          } catch (e) {
            closeError = String(e);
            closePipe();
          }
        });
        const result = await (0, _timeoutRunner.raceAgainstDeadline)(async () => {
          const playwright = await connection.initializePlaywright();
          if (!playwright._initializer.preConnectedAndroidDevice) {
            closePipe();
            throw new Error("Malformed endpoint. Did you use Android.launchServer method?");
          }
          device = AndroidDevice.from(playwright._initializer.preConnectedAndroidDevice);
          device._shouldCloseConnectionOnClose = true;
          device.on(_events.Events.AndroidDevice.Close, closePipe);
          return device;
        }, deadline);
        if (!result.timedOut) {
          return result.result;
        } else {
          closePipe();
          throw new Error(`Timeout ${options.timeout}ms exceeded`);
        }
      });
    }
  }
  exports.Android = Android;
  _Symbol$asyncDispose = Symbol.asyncDispose;

  class AndroidDevice extends _channelOwner.ChannelOwner {
    static from(androidDevice) {
      return androidDevice._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._timeoutSettings = undefined;
      this._webViews = new Map;
      this._shouldCloseConnectionOnClose = false;
      this.input = undefined;
      this.input = new AndroidInput(this);
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings(parent._timeoutSettings);
      this._channel.on("webViewAdded", ({
        webView
      }) => this._onWebViewAdded(webView));
      this._channel.on("webViewRemoved", ({
        socketName
      }) => this._onWebViewRemoved(socketName));
      this._channel.on("close", () => this._didClose());
    }
    _onWebViewAdded(webView) {
      const view = new AndroidWebView(this, webView);
      this._webViews.set(webView.socketName, view);
      this.emit(_events.Events.AndroidDevice.WebView, view);
    }
    _onWebViewRemoved(socketName) {
      const view = this._webViews.get(socketName);
      this._webViews.delete(socketName);
      if (view)
        view.emit(_events.Events.AndroidWebView.Close);
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
      this._channel.setDefaultTimeoutNoReply({
        timeout
      });
    }
    serial() {
      return this._initializer.serial;
    }
    model() {
      return this._initializer.model;
    }
    webViews() {
      return [...this._webViews.values()];
    }
    async webView(selector, options) {
      const predicate = (v) => {
        if (selector.pkg)
          return v.pkg() === selector.pkg;
        if (selector.socketName)
          return v._socketName() === selector.socketName;
        return false;
      };
      const webView = [...this._webViews.values()].find(predicate);
      if (webView)
        return webView;
      return await this.waitForEvent("webview", {
        ...options,
        predicate
      });
    }
    async wait(selector, options) {
      await this._channel.wait({
        selector: toSelectorChannel(selector),
        ...options
      });
    }
    async fill(selector, text, options) {
      await this._channel.fill({
        selector: toSelectorChannel(selector),
        text,
        ...options
      });
    }
    async press(selector, key, options) {
      await this.tap(selector, options);
      await this.input.press(key);
    }
    async tap(selector, options) {
      await this._channel.tap({
        selector: toSelectorChannel(selector),
        ...options
      });
    }
    async drag(selector, dest, options) {
      await this._channel.drag({
        selector: toSelectorChannel(selector),
        dest,
        ...options
      });
    }
    async fling(selector, direction, options) {
      await this._channel.fling({
        selector: toSelectorChannel(selector),
        direction,
        ...options
      });
    }
    async longTap(selector, options) {
      await this._channel.longTap({
        selector: toSelectorChannel(selector),
        ...options
      });
    }
    async pinchClose(selector, percent, options) {
      await this._channel.pinchClose({
        selector: toSelectorChannel(selector),
        percent,
        ...options
      });
    }
    async pinchOpen(selector, percent, options) {
      await this._channel.pinchOpen({
        selector: toSelectorChannel(selector),
        percent,
        ...options
      });
    }
    async scroll(selector, direction, percent, options) {
      await this._channel.scroll({
        selector: toSelectorChannel(selector),
        direction,
        percent,
        ...options
      });
    }
    async swipe(selector, direction, percent, options) {
      await this._channel.swipe({
        selector: toSelectorChannel(selector),
        direction,
        percent,
        ...options
      });
    }
    async info(selector) {
      return (await this._channel.info({
        selector: toSelectorChannel(selector)
      })).info;
    }
    async screenshot(options = {}) {
      const {
        binary
      } = await this._channel.screenshot();
      if (options.path)
        await _fs.default.promises.writeFile(options.path, binary);
      return binary;
    }
    async[_Symbol$asyncDispose]() {
      await this.close();
    }
    async close() {
      try {
        if (this._shouldCloseConnectionOnClose)
          this._connection.close();
        else
          await this._channel.close();
      } catch (e) {
        if ((0, _errors.isTargetClosedError)(e))
          return;
        throw e;
      }
    }
    _didClose() {
      this.emit(_events.Events.AndroidDevice.Close, this);
    }
    async shell(command) {
      const {
        result
      } = await this._channel.shell({
        command
      });
      return result;
    }
    async open(command) {
      return AndroidSocket.from((await this._channel.open({
        command
      })).socket);
    }
    async installApk(file, options) {
      await this._channel.installApk({
        file: await loadFile(file),
        args: options && options.args
      });
    }
    async push(file, path, options) {
      await this._channel.push({
        file: await loadFile(file),
        path,
        mode: options ? options.mode : undefined
      });
    }
    async launchBrowser(options = {}) {
      const contextOptions = await (0, _browserContext.prepareBrowserContextParams)(options);
      const result = await this._channel.launchBrowser(contextOptions);
      const context = _browserContext.BrowserContext.from(result.context);
      context._setOptions(contextOptions, {});
      return context;
    }
    async waitForEvent(event, optionsOrPredicate = {}) {
      return await this._wrapApiCall(async () => {
        const timeout = this._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
        const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
        const waiter = _waiter.Waiter.createForEvent(this, event);
        waiter.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
        if (event !== _events.Events.AndroidDevice.Close)
          waiter.rejectOnEvent(this, _events.Events.AndroidDevice.Close, () => new _errors.TargetClosedError);
        const result = await waiter.waitForEvent(this, event, predicate);
        waiter.dispose();
        return result;
      });
    }
  }
  exports.AndroidDevice = AndroidDevice;

  class AndroidSocket extends _channelOwner.ChannelOwner {
    static from(androidDevice) {
      return androidDevice._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._channel.on("data", ({
        data
      }) => this.emit(_events.Events.AndroidSocket.Data, data));
      this._channel.on("close", () => this.emit(_events.Events.AndroidSocket.Close));
    }
    async write(data) {
      await this._channel.write({
        data
      });
    }
    async close() {
      await this._channel.close();
    }
    async[Symbol.asyncDispose]() {
      await this.close();
    }
  }
  exports.AndroidSocket = AndroidSocket;

  class AndroidInput {
    constructor(device) {
      this._device = undefined;
      this._device = device;
    }
    async type(text) {
      await this._device._channel.inputType({
        text
      });
    }
    async press(key) {
      await this._device._channel.inputPress({
        key
      });
    }
    async tap(point) {
      await this._device._channel.inputTap({
        point
      });
    }
    async swipe(from, segments, steps) {
      await this._device._channel.inputSwipe({
        segments,
        steps
      });
    }
    async drag(from, to, steps) {
      await this._device._channel.inputDrag({
        from,
        to,
        steps
      });
    }
  }
  exports.AndroidInput = AndroidInput;

  class AndroidWebView extends _events2.EventEmitter {
    constructor(device, data) {
      super();
      this._device = undefined;
      this._data = undefined;
      this._pagePromise = undefined;
      this._device = device;
      this._data = data;
    }
    pid() {
      return this._data.pid;
    }
    pkg() {
      return this._data.pkg;
    }
    _socketName() {
      return this._data.socketName;
    }
    async page() {
      if (!this._pagePromise)
        this._pagePromise = this._fetchPage();
      return await this._pagePromise;
    }
    async _fetchPage() {
      const {
        context
      } = await this._device._channel.connectToWebView({
        socketName: this._data.socketName
      });
      return _browserContext.BrowserContext.from(context).pages()[0];
    }
  }
  exports.AndroidWebView = AndroidWebView;
});

// node_modules/playwright-core/lib/client/electron.js
var require_electron3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ElectronApplication = exports.Electron = undefined;
  var _timeoutSettings = require_timeoutSettings();
  var _browserContext = require_browserContext2();
  var _channelOwner = require_channelOwner();
  var _clientHelper = require_clientHelper();
  var _events = require_events();
  var _jsHandle = require_jsHandle();
  var _consoleMessage = require_consoleMessage();
  var _waiter = require_waiter();
  var _errors = require_errors2();
  var _Symbol$asyncDispose;

  class Electron extends _channelOwner.ChannelOwner {
    static from(electron) {
      return electron._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
    }
    async launch(options = {}) {
      const params = {
        ...await (0, _browserContext.prepareBrowserContextParams)(options),
        env: (0, _clientHelper.envObjectToArray)(options.env ? options.env : process.env),
        tracesDir: options.tracesDir
      };
      const app = ElectronApplication.from((await this._channel.launch(params)).electronApplication);
      app._context._options = params;
      return app;
    }
  }
  exports.Electron = Electron;
  _Symbol$asyncDispose = Symbol.asyncDispose;

  class ElectronApplication extends _channelOwner.ChannelOwner {
    static from(electronApplication) {
      return electronApplication._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._context = undefined;
      this._windows = new Set;
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings;
      this._isClosed = false;
      this._context = _browserContext.BrowserContext.from(initializer.context);
      for (const page of this._context._pages)
        this._onPage(page);
      this._context.on(_events.Events.BrowserContext.Page, (page) => this._onPage(page));
      this._channel.on("close", () => {
        this._isClosed = true;
        this.emit(_events.Events.ElectronApplication.Close);
      });
      this._channel.on("console", (event) => this.emit(_events.Events.ElectronApplication.Console, new _consoleMessage.ConsoleMessage(event)));
      this._setEventToSubscriptionMapping(new Map([[_events.Events.ElectronApplication.Console, "console"]]));
    }
    process() {
      return this._toImpl().process();
    }
    _onPage(page) {
      this._windows.add(page);
      this.emit(_events.Events.ElectronApplication.Window, page);
      page.once(_events.Events.Page.Close, () => this._windows.delete(page));
    }
    windows() {
      return [...this._windows];
    }
    async firstWindow(options) {
      if (this._windows.size)
        return this._windows.values().next().value;
      return await this.waitForEvent("window", options);
    }
    context() {
      return this._context;
    }
    async[_Symbol$asyncDispose]() {
      await this.close();
    }
    async close() {
      if (this._isClosed)
        return;
      await this._channel.close().catch(() => {
      });
    }
    async waitForEvent(event, optionsOrPredicate = {}) {
      return await this._wrapApiCall(async () => {
        const timeout = this._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
        const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
        const waiter = _waiter.Waiter.createForEvent(this, event);
        waiter.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
        if (event !== _events.Events.ElectronApplication.Close)
          waiter.rejectOnEvent(this, _events.Events.ElectronApplication.Close, () => new _errors.TargetClosedError);
        const result = await waiter.waitForEvent(this, event, predicate);
        waiter.dispose();
        return result;
      });
    }
    async browserWindow(page) {
      const result = await this._channel.browserWindow({
        page: page._channel
      });
      return _jsHandle.JSHandle.from(result.handle);
    }
    async evaluate(pageFunction, arg) {
      const result = await this._channel.evaluateExpression({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async evaluateHandle(pageFunction, arg) {
      const result = await this._channel.evaluateExpressionHandle({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return _jsHandle.JSHandle.from(result.handle);
    }
  }
  exports.ElectronApplication = ElectronApplication;
});

// node_modules/playwright-core/lib/client/selectors.js
var require_selectors2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SelectorsOwner = exports.Selectors = undefined;
  var _clientHelper = require_clientHelper();
  var _channelOwner = require_channelOwner();
  var _locator = require_locator();

  class Selectors {
    constructor() {
      this._channels = new Set;
      this._registrations = [];
    }
    async register(name, script, options = {}) {
      const source = await (0, _clientHelper.evaluationScript)(script, undefined, false);
      const params = {
        ...options,
        name,
        source
      };
      for (const channel of this._channels)
        await channel._channel.register(params);
      this._registrations.push(params);
    }
    setTestIdAttribute(attributeName) {
      (0, _locator.setTestIdAttribute)(attributeName);
      for (const channel of this._channels)
        channel._channel.setTestIdAttributeName({
          testIdAttributeName: attributeName
        }).catch(() => {
        });
    }
    _addChannel(channel) {
      this._channels.add(channel);
      for (const params of this._registrations) {
        channel._channel.register(params).catch(() => {
        });
        channel._channel.setTestIdAttributeName({
          testIdAttributeName: (0, _locator.testIdAttributeName)()
        }).catch(() => {
        });
      }
    }
    _removeChannel(channel) {
      this._channels.delete(channel);
    }
  }
  exports.Selectors = Selectors;

  class SelectorsOwner extends _channelOwner.ChannelOwner {
    static from(browser) {
      return browser._object;
    }
  }
  exports.SelectorsOwner = SelectorsOwner;
});

// node_modules/playwright-core/lib/client/playwright.js
var require_playwright2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Playwright = undefined;
  var _errors = require_errors2();
  var _android = require_android2();
  var _browserType = require_browserType2();
  var _channelOwner = require_channelOwner();
  var _electron = require_electron3();
  var _fetch = require_fetch2();
  var _selectors = require_selectors2();

  class Playwright extends _channelOwner.ChannelOwner {
    constructor(parent, type, guid, initializer) {
      var _this$_connection$loc, _this$_connection$loc2;
      super(parent, type, guid, initializer);
      this._android = undefined;
      this._electron = undefined;
      this.chromium = undefined;
      this.firefox = undefined;
      this.webkit = undefined;
      this.devices = undefined;
      this.selectors = undefined;
      this.request = undefined;
      this.errors = undefined;
      this.request = new _fetch.APIRequest(this);
      this.chromium = _browserType.BrowserType.from(initializer.chromium);
      this.chromium._playwright = this;
      this.firefox = _browserType.BrowserType.from(initializer.firefox);
      this.firefox._playwright = this;
      this.webkit = _browserType.BrowserType.from(initializer.webkit);
      this.webkit._playwright = this;
      this._android = _android.Android.from(initializer.android);
      this._electron = _electron.Electron.from(initializer.electron);
      this.devices = (_this$_connection$loc = (_this$_connection$loc2 = this._connection.localUtils()) === null || _this$_connection$loc2 === undefined ? undefined : _this$_connection$loc2.devices) !== null && _this$_connection$loc !== undefined ? _this$_connection$loc : {};
      this.selectors = new _selectors.Selectors;
      this.errors = {
        TimeoutError: _errors.TimeoutError
      };
      const selectorsOwner = _selectors.SelectorsOwner.from(initializer.selectors);
      this.selectors._addChannel(selectorsOwner);
      this._connection.on("close", () => {
        this.selectors._removeChannel(selectorsOwner);
      });
      global._playwrightInstance = this;
    }
    _setSelectors(selectors) {
      const selectorsOwner = _selectors.SelectorsOwner.from(this._initializer.selectors);
      this.selectors._removeChannel(selectorsOwner);
      this.selectors = selectors;
      this.selectors._addChannel(selectorsOwner);
    }
    static from(channel) {
      return channel._object;
    }
  }
  exports.Playwright = Playwright;
});

// node_modules/playwright-core/lib/client/jsonPipe.js
var require_jsonPipe = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.JsonPipe = undefined;
  var _channelOwner = require_channelOwner();

  class JsonPipe extends _channelOwner.ChannelOwner {
    static from(jsonPipe) {
      return jsonPipe._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
    }
    channel() {
      return this._channel;
    }
  }
  exports.JsonPipe = JsonPipe;
});

// node_modules/playwright-core/lib/client/localUtils.js
var require_localUtils = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.LocalUtils = undefined;
  var _channelOwner = require_channelOwner();

  class LocalUtils extends _channelOwner.ChannelOwner {
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this.devices = undefined;
      this.devices = {};
      for (const {
        name,
        descriptor
      } of initializer.deviceDescriptors)
        this.devices[name] = descriptor;
    }
  }
  exports.LocalUtils = LocalUtils;
});

// node_modules/playwright-core/lib/client/clientInstrumentation.js
var require_clientInstrumentation = __commonJS((exports) => {
  var createInstrumentation = function() {
    const listeners = [];
    return new Proxy({}, {
      get: (obj, prop) => {
        if (typeof prop !== "string")
          return obj[prop];
        if (prop === "addListener")
          return (listener) => listeners.push(listener);
        if (prop === "removeListener")
          return (listener) => listeners.splice(listeners.indexOf(listener), 1);
        if (prop === "removeAllListeners")
          return () => listeners.splice(0, listeners.length);
        if (!prop.startsWith("on"))
          return obj[prop];
        return async (...params) => {
          for (const listener of listeners) {
            var _prop, _ref;
            await ((_prop = (_ref = listener)[prop]) === null || _prop === undefined ? undefined : _prop.call(_ref, ...params));
          }
        };
      }
    });
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createInstrumentation = createInstrumentation;
});

// node_modules/playwright-core/lib/client/connection.js
var require_connection = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Connection = undefined;
  var _browser = require_browser6();
  var _browserContext = require_browserContext2();
  var _browserType = require_browserType2();
  var _channelOwner = require_channelOwner();
  var _elementHandle = require_elementHandle();
  var _frame = require_frame();
  var _jsHandle = require_jsHandle();
  var _network = require_network3();
  var _page = require_page2();
  var _worker = require_worker();
  var _dialog = require_dialog2();
  var _errors = require_errors2();
  var _cdpSession = require_cdpSession();
  var _playwright = require_playwright2();
  var _electron = require_electron3();
  var _stream = require_stream();
  var _writableStream = require_writableStream();
  var _debugLogger = require_debugLogger();
  var _selectors = require_selectors2();
  var _android = require_android2();
  var _artifact = require_artifact2();
  var _events = import.meta.require("events");
  var _jsonPipe = require_jsonPipe();
  var _fetch = require_fetch2();
  var _localUtils = require_localUtils();
  var _tracing = require_tracing2();
  var _validator = require_validator();
  var _clientInstrumentation = require_clientInstrumentation();
  var _utils = require_utils3();

  class Root extends _channelOwner.ChannelOwner {
    constructor(connection) {
      super(connection, "Root", "", {});
    }
    async initialize() {
      return _playwright.Playwright.from((await this._channel.initialize({
        sdkLanguage: "javascript"
      })).playwright);
    }
  }

  class DummyChannelOwner extends _channelOwner.ChannelOwner {
  }

  class Connection extends _events.EventEmitter {
    constructor(localUtils, instrumentation) {
      super();
      this._objects = new Map;
      this.onmessage = (message) => {
      };
      this._lastId = 0;
      this._callbacks = new Map;
      this._rootObject = undefined;
      this._closedError = undefined;
      this._isRemote = false;
      this._localUtils = undefined;
      this._rawBuffers = false;
      this.toImpl = undefined;
      this._tracingCount = 0;
      this._instrumentation = undefined;
      this._rootObject = new Root(this);
      this._localUtils = localUtils;
      this._instrumentation = instrumentation || (0, _clientInstrumentation.createInstrumentation)();
    }
    markAsRemote() {
      this._isRemote = true;
    }
    isRemote() {
      return this._isRemote;
    }
    useRawBuffers() {
      this._rawBuffers = true;
    }
    rawBuffers() {
      return this._rawBuffers;
    }
    localUtils() {
      return this._localUtils;
    }
    async initializePlaywright() {
      return await this._rootObject.initialize();
    }
    getObjectWithKnownName(guid) {
      return this._objects.get(guid);
    }
    setIsTracing(isTracing) {
      if (isTracing)
        this._tracingCount++;
      else
        this._tracingCount--;
    }
    async sendMessageToServer(object, method, params, apiName, frames, wallTime) {
      var _this$_localUtils;
      if (this._closedError)
        throw this._closedError;
      if (object._wasCollected)
        throw new Error("The object has been collected to prevent unbounded heap growth.");
      const guid = object._guid;
      const type = object._type;
      const id = ++this._lastId;
      const message = {
        id,
        guid,
        method,
        params
      };
      if (_debugLogger.debugLogger.isEnabled("channel")) {
        _debugLogger.debugLogger.log("channel", "SEND> " + JSON.stringify(message));
      }
      const location2 = frames[0] ? {
        file: frames[0].file,
        line: frames[0].line,
        column: frames[0].column
      } : undefined;
      const metadata = {
        wallTime,
        apiName,
        location: location2,
        internal: !apiName
      };
      if (this._tracingCount && frames && type !== "LocalUtils")
        (_this$_localUtils = this._localUtils) === null || _this$_localUtils === undefined || _this$_localUtils._channel.addStackToTracingNoReply({
          callData: {
            stack: frames,
            id
          }
        }).catch(() => {
        });
      _utils.zones.exitZones(() => this.onmessage({
        ...message,
        metadata
      }));
      return await new Promise((resolve, reject) => this._callbacks.set(id, {
        resolve,
        reject,
        apiName,
        type,
        method
      }));
    }
    dispatch(message) {
      if (this._closedError)
        return;
      const {
        id,
        guid,
        method,
        params,
        result,
        error,
        log
      } = message;
      if (id) {
        if (_debugLogger.debugLogger.isEnabled("channel"))
          _debugLogger.debugLogger.log("channel", "<RECV " + JSON.stringify(message));
        const callback = this._callbacks.get(id);
        if (!callback)
          throw new Error(`Cannot find command to respond: ${id}`);
        this._callbacks.delete(id);
        if (error && !result) {
          const parsedError = (0, _errors.parseError)(error);
          (0, _utils.rewriteErrorMessage)(parsedError, parsedError.message + (0, _utils.formatCallLog)(log));
          callback.reject(parsedError);
        } else {
          const validator2 = (0, _validator.findValidator)(callback.type, callback.method, "Result");
          callback.resolve(validator2(result, "", {
            tChannelImpl: this._tChannelImplFromWire.bind(this),
            binary: this._rawBuffers ? "buffer" : "fromBase64"
          }));
        }
        return;
      }
      if (_debugLogger.debugLogger.isEnabled("channel"))
        _debugLogger.debugLogger.log("channel", "<EVENT " + JSON.stringify(message));
      if (method === "__create__") {
        this._createRemoteObject(guid, params.type, params.guid, params.initializer);
        return;
      }
      const object = this._objects.get(guid);
      if (!object)
        throw new Error(`Cannot find object to "${method}": ${guid}`);
      if (method === "__adopt__") {
        const child = this._objects.get(params.guid);
        if (!child)
          throw new Error(`Unknown new child: ${params.guid}`);
        object._adopt(child);
        return;
      }
      if (method === "__dispose__") {
        object._dispose(params.reason);
        return;
      }
      const validator = (0, _validator.findValidator)(object._type, method, "Event");
      object._channel.emit(method, validator(params, "", {
        tChannelImpl: this._tChannelImplFromWire.bind(this),
        binary: this._rawBuffers ? "buffer" : "fromBase64"
      }));
    }
    close(cause) {
      this._closedError = new _errors.TargetClosedError(cause);
      for (const callback of this._callbacks.values())
        callback.reject(this._closedError);
      this._callbacks.clear();
      this.emit("close");
    }
    _tChannelImplFromWire(names, arg, path, context) {
      if (arg && typeof arg === "object" && typeof arg.guid === "string") {
        const object = this._objects.get(arg.guid);
        if (!object)
          throw new Error(`Object with guid ${arg.guid} was not bound in the connection`);
        if (names !== "*" && !names.includes(object._type))
          throw new _validator.ValidationError(`${path}: expected channel ${names.toString()}`);
        return object._channel;
      }
      throw new _validator.ValidationError(`${path}: expected channel ${names.toString()}`);
    }
    _createRemoteObject(parentGuid, type, guid, initializer) {
      const parent = this._objects.get(parentGuid);
      if (!parent)
        throw new Error(`Cannot find parent object ${parentGuid} to create ${guid}`);
      let result;
      const validator = (0, _validator.findValidator)(type, "", "Initializer");
      initializer = validator(initializer, "", {
        tChannelImpl: this._tChannelImplFromWire.bind(this),
        binary: this._rawBuffers ? "buffer" : "fromBase64"
      });
      switch (type) {
        case "Android":
          result = new _android.Android(parent, type, guid, initializer);
          break;
        case "AndroidSocket":
          result = new _android.AndroidSocket(parent, type, guid, initializer);
          break;
        case "AndroidDevice":
          result = new _android.AndroidDevice(parent, type, guid, initializer);
          break;
        case "APIRequestContext":
          result = new _fetch.APIRequestContext(parent, type, guid, initializer);
          break;
        case "Artifact":
          result = new _artifact.Artifact(parent, type, guid, initializer);
          break;
        case "BindingCall":
          result = new _page.BindingCall(parent, type, guid, initializer);
          break;
        case "Browser":
          result = new _browser.Browser(parent, type, guid, initializer);
          break;
        case "BrowserContext":
          result = new _browserContext.BrowserContext(parent, type, guid, initializer);
          break;
        case "BrowserType":
          result = new _browserType.BrowserType(parent, type, guid, initializer);
          break;
        case "CDPSession":
          result = new _cdpSession.CDPSession(parent, type, guid, initializer);
          break;
        case "Dialog":
          result = new _dialog.Dialog(parent, type, guid, initializer);
          break;
        case "Electron":
          result = new _electron.Electron(parent, type, guid, initializer);
          break;
        case "ElectronApplication":
          result = new _electron.ElectronApplication(parent, type, guid, initializer);
          break;
        case "ElementHandle":
          result = new _elementHandle.ElementHandle(parent, type, guid, initializer);
          break;
        case "Frame":
          result = new _frame.Frame(parent, type, guid, initializer);
          break;
        case "JSHandle":
          result = new _jsHandle.JSHandle(parent, type, guid, initializer);
          break;
        case "JsonPipe":
          result = new _jsonPipe.JsonPipe(parent, type, guid, initializer);
          break;
        case "LocalUtils":
          result = new _localUtils.LocalUtils(parent, type, guid, initializer);
          if (!this._localUtils)
            this._localUtils = result;
          break;
        case "Page":
          result = new _page.Page(parent, type, guid, initializer);
          break;
        case "Playwright":
          result = new _playwright.Playwright(parent, type, guid, initializer);
          break;
        case "Request":
          result = new _network.Request(parent, type, guid, initializer);
          break;
        case "Response":
          result = new _network.Response(parent, type, guid, initializer);
          break;
        case "Route":
          result = new _network.Route(parent, type, guid, initializer);
          break;
        case "Stream":
          result = new _stream.Stream(parent, type, guid, initializer);
          break;
        case "Selectors":
          result = new _selectors.SelectorsOwner(parent, type, guid, initializer);
          break;
        case "SocksSupport":
          result = new DummyChannelOwner(parent, type, guid, initializer);
          break;
        case "Tracing":
          result = new _tracing.Tracing(parent, type, guid, initializer);
          break;
        case "WebSocket":
          result = new _network.WebSocket(parent, type, guid, initializer);
          break;
        case "Worker":
          result = new _worker.Worker(parent, type, guid, initializer);
          break;
        case "WritableStream":
          result = new _writableStream.WritableStream(parent, type, guid, initializer);
          break;
        default:
          throw new Error("Missing type " + type);
      }
      return result;
    }
  }
  exports.Connection = Connection;
});

// node_modules/playwright-core/lib/server/dispatchers/debugControllerDispatcher.js
var require_debugControllerDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DebugControllerDispatcher = undefined;
  var _utils = require_utils3();
  var _debugController = require_debugController();
  var _dispatcher = require_dispatcher();

  class DebugControllerDispatcher extends _dispatcher.Dispatcher {
    constructor(connection, debugController) {
      super(connection, debugController, "DebugController", {});
      this._type_DebugController = undefined;
      this._listeners = undefined;
      this._type_DebugController = true;
      this._listeners = [_utils.eventsHelper.addEventListener(this._object, _debugController.DebugController.Events.StateChanged, (params) => {
        this._dispatchEvent("stateChanged", params);
      }), _utils.eventsHelper.addEventListener(this._object, _debugController.DebugController.Events.InspectRequested, ({
        selector,
        locator
      }) => {
        this._dispatchEvent("inspectRequested", {
          selector,
          locator
        });
      }), _utils.eventsHelper.addEventListener(this._object, _debugController.DebugController.Events.SourceChanged, ({
        text,
        header,
        footer,
        actions
      }) => {
        this._dispatchEvent("sourceChanged", {
          text,
          header,
          footer,
          actions
        });
      }), _utils.eventsHelper.addEventListener(this._object, _debugController.DebugController.Events.Paused, ({
        paused
      }) => {
        this._dispatchEvent("paused", {
          paused
        });
      }), _utils.eventsHelper.addEventListener(this._object, _debugController.DebugController.Events.SetModeRequested, ({
        mode
      }) => {
        this._dispatchEvent("setModeRequested", {
          mode
        });
      })];
    }
    async initialize(params) {
      this._object.initialize(params.codegenId, params.sdkLanguage);
    }
    async setReportStateChanged(params) {
      this._object.setReportStateChanged(params.enabled);
    }
    async resetForReuse() {
      await this._object.resetForReuse();
    }
    async navigate(params) {
      await this._object.navigate(params.url);
    }
    async setRecorderMode(params) {
      await this._object.setRecorderMode(params);
    }
    async highlight(params) {
      await this._object.highlight(params.selector);
    }
    async hideHighlight() {
      await this._object.hideHighlight();
    }
    async resume() {
      await this._object.resume();
    }
    async kill() {
      await this._object.kill();
    }
    async closeAllBrowsers() {
      await this._object.closeAllBrowsers();
    }
    _onDispose() {
      _utils.eventsHelper.removeEventListeners(this._listeners);
      this._object.dispose();
    }
  }
  exports.DebugControllerDispatcher = DebugControllerDispatcher;
});

// node_modules/playwright-core/lib/remote/playwrightConnection.js
var require_playwrightConnection = __commonJS((exports) => {
  var launchOptionsHash = function(options) {
    const copy = {
      ...options
    };
    for (const k of Object.keys(copy)) {
      const key = k;
      if (copy[key] === defaultLaunchOptions[key])
        delete copy[key];
    }
    for (const key of optionsThatAllowBrowserReuse)
      delete copy[key];
    return JSON.stringify(copy);
  };
  var filterLaunchOptions = function(options) {
    return {
      channel: options.channel,
      args: options.args,
      ignoreAllDefaultArgs: options.ignoreAllDefaultArgs,
      ignoreDefaultArgs: options.ignoreDefaultArgs,
      timeout: options.timeout,
      headless: options.headless,
      proxy: options.proxy,
      chromiumSandbox: options.chromiumSandbox,
      firefoxUserPrefs: options.firefoxUserPrefs,
      slowMo: options.slowMo,
      executablePath: (0, _utils.isUnderTest)() ? options.executablePath : undefined
    };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PlaywrightConnection = undefined;
  var _server = require_server();
  var _browser = require_browser5();
  var _instrumentation = require_instrumentation();
  var _socksProxy = require_socksProxy();
  var _utils = require_utils3();
  var _android = require_android();
  var _debugControllerDispatcher = require_debugControllerDispatcher();
  var _debugLogger = require_debugLogger();

  class PlaywrightConnection {
    constructor(lock, clientType, ws2, options, preLaunched, id, onClose) {
      this._ws = undefined;
      this._onClose = undefined;
      this._dispatcherConnection = undefined;
      this._cleanups = [];
      this._id = undefined;
      this._disconnected = false;
      this._preLaunched = undefined;
      this._options = undefined;
      this._root = undefined;
      this._profileName = undefined;
      this._ws = ws2;
      this._preLaunched = preLaunched;
      this._options = options;
      options.launchOptions = filterLaunchOptions(options.launchOptions);
      if (clientType === "reuse-browser" || clientType === "pre-launched-browser-or-android")
        (0, _utils.assert)(preLaunched.playwright);
      if (clientType === "pre-launched-browser-or-android")
        (0, _utils.assert)(preLaunched.browser || preLaunched.androidDevice);
      this._onClose = onClose;
      this._id = id;
      this._profileName = `${new Date().toISOString()}-${clientType}`;
      this._dispatcherConnection = new _server.DispatcherConnection;
      this._dispatcherConnection.onmessage = async (message) => {
        await lock;
        if (ws2.readyState !== ws2.CLOSING) {
          const messageString = JSON.stringify(message);
          if (_debugLogger.debugLogger.isEnabled("server:channel"))
            _debugLogger.debugLogger.log("server:channel", `[${this._id}] ${(0, _utils.monotonicTime)() * 1000} SEND \u25BA ${messageString}`);
          if (_debugLogger.debugLogger.isEnabled("server:metadata"))
            this.logServerMetadata(message, messageString, "SEND");
          ws2.send(messageString);
        }
      };
      ws2.on("message", async (message) => {
        await lock;
        const messageString = Buffer.from(message).toString();
        const jsonMessage = JSON.parse(messageString);
        if (_debugLogger.debugLogger.isEnabled("server:channel"))
          _debugLogger.debugLogger.log("server:channel", `[${this._id}] ${(0, _utils.monotonicTime)() * 1000} \u25C0 RECV ${messageString}`);
        if (_debugLogger.debugLogger.isEnabled("server:metadata"))
          this.logServerMetadata(jsonMessage, messageString, "RECV");
        this._dispatcherConnection.dispatch(jsonMessage);
      });
      ws2.on("close", () => this._onDisconnect());
      ws2.on("error", (error) => this._onDisconnect(error));
      if (clientType === "controller") {
        this._root = this._initDebugControllerMode();
        return;
      }
      this._root = new _server.RootDispatcher(this._dispatcherConnection, async (scope, options2) => {
        await (0, _utils.startProfiling)();
        if (clientType === "reuse-browser")
          return await this._initReuseBrowsersMode(scope);
        if (clientType === "pre-launched-browser-or-android")
          return this._preLaunched.browser ? await this._initPreLaunchedBrowserMode(scope) : await this._initPreLaunchedAndroidMode(scope);
        if (clientType === "launch-browser")
          return await this._initLaunchBrowserMode(scope, options2);
        throw new Error("Unsupported client type: " + clientType);
      });
    }
    async _initLaunchBrowserMode(scope, options) {
      _debugLogger.debugLogger.log("server", `[${this._id}] engaged launch mode for "${this._options.browserName}"`);
      const playwright = (0, _server.createPlaywright)({
        sdkLanguage: options.sdkLanguage,
        isServer: true
      });
      const ownedSocksProxy = await this._createOwnedSocksProxy(playwright);
      const browser = await playwright[this._options.browserName].launch((0, _instrumentation.serverSideCallMetadata)(), this._options.launchOptions);
      this._cleanups.push(async () => {
        for (const browser2 of playwright.allBrowsers())
          await browser2.close({
            reason: "Connection terminated"
          });
      });
      browser.on(_browser.Browser.Events.Disconnected, () => {
        this.close({
          code: 1001,
          reason: "Browser closed"
        });
      });
      return new _server.PlaywrightDispatcher(scope, playwright, ownedSocksProxy, browser);
    }
    async _initPreLaunchedBrowserMode(scope) {
      var _this$_preLaunched$so;
      _debugLogger.debugLogger.log("server", `[${this._id}] engaged pre-launched (browser) mode`);
      const playwright = this._preLaunched.playwright;
      (_this$_preLaunched$so = this._preLaunched.socksProxy) === null || _this$_preLaunched$so === undefined || _this$_preLaunched$so.setPattern(this._options.socksProxyPattern);
      const browser = this._preLaunched.browser;
      browser.on(_browser.Browser.Events.Disconnected, () => {
        this.close({
          code: 1001,
          reason: "Browser closed"
        });
      });
      const playwrightDispatcher = new _server.PlaywrightDispatcher(scope, playwright, this._preLaunched.socksProxy, browser);
      for (const b of playwright.allBrowsers()) {
        if (b !== browser)
          await b.close({
            reason: "Connection terminated"
          });
      }
      this._cleanups.push(() => playwrightDispatcher.cleanup());
      return playwrightDispatcher;
    }
    async _initPreLaunchedAndroidMode(scope) {
      _debugLogger.debugLogger.log("server", `[${this._id}] engaged pre-launched (Android) mode`);
      const playwright = this._preLaunched.playwright;
      const androidDevice = this._preLaunched.androidDevice;
      androidDevice.on(_android.AndroidDevice.Events.Close, () => {
        this.close({
          code: 1001,
          reason: "Android device disconnected"
        });
      });
      const playwrightDispatcher = new _server.PlaywrightDispatcher(scope, playwright, undefined, undefined, androidDevice);
      this._cleanups.push(() => playwrightDispatcher.cleanup());
      return playwrightDispatcher;
    }
    _initDebugControllerMode() {
      _debugLogger.debugLogger.log("server", `[${this._id}] engaged reuse controller mode`);
      const playwright = this._preLaunched.playwright;
      return new _debugControllerDispatcher.DebugControllerDispatcher(this._dispatcherConnection, playwright.debugController);
    }
    async _initReuseBrowsersMode(scope) {
      _debugLogger.debugLogger.log("server", `[${this._id}] engaged reuse browsers mode for ${this._options.browserName}`);
      const playwright = this._preLaunched.playwright;
      const requestedOptions = launchOptionsHash(this._options.launchOptions);
      let browser = playwright.allBrowsers().find((b) => {
        if (b.options.name !== this._options.browserName)
          return false;
        const existingOptions = launchOptionsHash(b.options.originalLaunchOptions);
        return existingOptions === requestedOptions;
      });
      for (const b of playwright.allBrowsers()) {
        if (b === browser)
          continue;
        if (b.options.name === this._options.browserName && b.options.channel === this._options.launchOptions.channel)
          await b.close({
            reason: "Connection terminated"
          });
      }
      if (!browser) {
        browser = await playwright[this._options.browserName || "chromium"].launch((0, _instrumentation.serverSideCallMetadata)(), {
          ...this._options.launchOptions,
          headless: !!process.env.PW_DEBUG_CONTROLLER_HEADLESS
        });
        browser.on(_browser.Browser.Events.Disconnected, () => {
          this.close({
            code: 1001,
            reason: "Browser closed"
          });
        });
      }
      this._cleanups.push(async () => {
        for (const browser2 of playwright.allBrowsers()) {
          for (const context of browser2.contexts()) {
            if (!context.pages().length)
              await context.close({
                reason: "Connection terminated"
              });
            else
              await context.stopPendingOperations("Connection closed");
          }
          if (!browser2.contexts())
            await browser2.close({
              reason: "Connection terminated"
            });
        }
      });
      const playwrightDispatcher = new _server.PlaywrightDispatcher(scope, playwright, undefined, browser);
      return playwrightDispatcher;
    }
    async _createOwnedSocksProxy(playwright) {
      if (!this._options.socksProxyPattern)
        return;
      const socksProxy = new _socksProxy.SocksProxy;
      socksProxy.setPattern(this._options.socksProxyPattern);
      playwright.options.socksProxyPort = await socksProxy.listen(0);
      _debugLogger.debugLogger.log("server", `[${this._id}] started socks proxy on port ${playwright.options.socksProxyPort}`);
      this._cleanups.push(() => socksProxy.close());
      return socksProxy;
    }
    async _onDisconnect(error) {
      this._disconnected = true;
      _debugLogger.debugLogger.log("server", `[${this._id}] disconnected. error: ${error}`);
      this._root._dispose();
      _debugLogger.debugLogger.log("server", `[${this._id}] starting cleanup`);
      for (const cleanup of this._cleanups)
        await cleanup().catch(() => {
        });
      await (0, _utils.stopProfiling)(this._profileName);
      this._onClose();
      _debugLogger.debugLogger.log("server", `[${this._id}] finished cleanup`);
    }
    logServerMetadata(message, messageString, direction) {
      const serverLogMetadata = {
        wallTime: Date.now(),
        id: message.id,
        guid: message.guid,
        method: message.method,
        payloadSizeInBytes: Buffer.byteLength(messageString, "utf-8")
      };
      _debugLogger.debugLogger.log("server:metadata", (direction === "SEND" ? "SEND \u25BA " : "\u25C0 RECV ") + JSON.stringify(serverLogMetadata));
    }
    async close(reason) {
      if (this._disconnected)
        return;
      _debugLogger.debugLogger.log("server", `[${this._id}] force closing connection: ${(reason === null || reason === undefined ? undefined : reason.reason) || ""} (${(reason === null || reason === undefined ? undefined : reason.code) || 0})`);
      try {
        this._ws.close(reason === null || reason === undefined ? undefined : reason.code, reason === null || reason === undefined ? undefined : reason.reason);
      } catch (e) {
      }
    }
  }
  exports.PlaywrightConnection = PlaywrightConnection;
  var defaultLaunchOptions = {
    ignoreAllDefaultArgs: false,
    handleSIGINT: false,
    handleSIGTERM: false,
    handleSIGHUP: false,
    headless: true,
    devtools: false
  };
  var optionsThatAllowBrowserReuse = ["headless", "tracesDir"];
});

// node_modules/playwright-core/lib/remote/playwrightServer.js
var require_playwrightServer = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PlaywrightServer = undefined;
  var _playwright = require_playwright();
  var _playwrightConnection = require_playwrightConnection();
  var _semaphore = require_semaphore();
  var _debugLogger = require_debugLogger();
  var _utils = require_utils3();
  var _wsServer = require_wsServer();

  class PlaywrightServer {
    constructor(options) {
      this._preLaunchedPlaywright = undefined;
      this._options = undefined;
      this._wsServer = undefined;
      this._options = options;
      if (options.preLaunchedBrowser)
        this._preLaunchedPlaywright = options.preLaunchedBrowser.attribution.playwright;
      if (options.preLaunchedAndroidDevice)
        this._preLaunchedPlaywright = options.preLaunchedAndroidDevice._android.attribution.playwright;
      const browserSemaphore = new _semaphore.Semaphore(this._options.maxConnections);
      const controllerSemaphore = new _semaphore.Semaphore(1);
      const reuseBrowserSemaphore = new _semaphore.Semaphore(1);
      this._wsServer = new _wsServer.WSServer({
        onUpgrade: (request, socket) => {
          const uaError = (0, _utils.userAgentVersionMatchesErrorMessage)(request.headers["user-agent"] || "");
          if (uaError)
            return {
              error: `HTTP/${request.httpVersion} 428 Precondition Required\r\n\r\n${uaError}`
            };
        },
        onHeaders: (headers) => {
          if (process.env.PWTEST_SERVER_WS_HEADERS)
            headers.push(process.env.PWTEST_SERVER_WS_HEADERS);
        },
        onConnection: (request, url, ws2, id) => {
          const browserHeader = request.headers["x-playwright-browser"];
          const browserName = url.searchParams.get("browser") || (Array.isArray(browserHeader) ? browserHeader[0] : browserHeader) || null;
          const proxyHeader = request.headers["x-playwright-proxy"];
          const proxyValue = url.searchParams.get("proxy") || (Array.isArray(proxyHeader) ? proxyHeader[0] : proxyHeader);
          const launchOptionsHeader = request.headers["x-playwright-launch-options"] || "";
          const launchOptionsHeaderValue = Array.isArray(launchOptionsHeader) ? launchOptionsHeader[0] : launchOptionsHeader;
          const launchOptionsParam = url.searchParams.get("launch-options");
          let launchOptions = {};
          try {
            launchOptions = JSON.parse(launchOptionsParam || launchOptionsHeaderValue);
          } catch (e) {
          }
          const isExtension = this._options.mode === "extension";
          if (isExtension) {
            if (!this._preLaunchedPlaywright)
              this._preLaunchedPlaywright = (0, _playwright.createPlaywright)({
                sdkLanguage: "javascript",
                isServer: true
              });
          }
          let clientType = "launch-browser";
          let semaphore = browserSemaphore;
          if (isExtension && url.searchParams.has("debug-controller")) {
            clientType = "controller";
            semaphore = controllerSemaphore;
          } else if (isExtension) {
            clientType = "reuse-browser";
            semaphore = reuseBrowserSemaphore;
          } else if (this._options.mode === "launchServer") {
            clientType = "pre-launched-browser-or-android";
            semaphore = browserSemaphore;
          }
          return new _playwrightConnection.PlaywrightConnection(semaphore.acquire(), clientType, ws2, {
            socksProxyPattern: proxyValue,
            browserName,
            launchOptions
          }, {
            playwright: this._preLaunchedPlaywright,
            browser: this._options.preLaunchedBrowser,
            androidDevice: this._options.preLaunchedAndroidDevice,
            socksProxy: this._options.preLaunchedSocksProxy
          }, id, () => semaphore.release());
        },
        onClose: async () => {
          _debugLogger.debugLogger.log("server", "closing browsers");
          if (this._preLaunchedPlaywright)
            await Promise.all(this._preLaunchedPlaywright.allBrowsers().map((browser) => browser.close({
              reason: "Playwright Server stopped"
            })));
          _debugLogger.debugLogger.log("server", "closed browsers");
        }
      });
    }
    async listen(port = 0, hostname) {
      return this._wsServer.listen(port, hostname, this._options.path);
    }
    async close() {
      await this._wsServer.close();
    }
  }
  exports.PlaywrightServer = PlaywrightServer;
});

// node_modules/playwright-core/lib/browserServerImpl.js
var require_browserServerImpl = __commonJS((exports) => {
  var toProtocolLogger = function(logger) {
    return logger ? (direction, message) => {
      if (logger.isEnabled("protocol", "verbose"))
        logger.log("protocol", "verbose", (direction === "send" ? "SEND \u25BA " : "\u25C0 RECV ") + JSON.stringify(message), [], {});
    } : undefined;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BrowserServerLauncherImpl = undefined;
  var _utilsBundle = require_utilsBundle();
  var _clientHelper = require_clientHelper();
  var _utils = require_utils3();
  var _instrumentation = require_instrumentation();
  var _playwright = require_playwright();
  var _playwrightServer = require_playwrightServer();
  var _helper = require_helper();
  var _stackTrace = require_stackTrace();
  var _socksProxy = require_socksProxy();

  class BrowserServerLauncherImpl {
    constructor(browserName) {
      this._browserName = undefined;
      this._browserName = browserName;
    }
    async launchServer(options = {}) {
      const playwright = (0, _playwright.createPlaywright)({
        sdkLanguage: "javascript",
        isServer: true
      });
      const socksProxy = undefined;
      playwright.options.socksProxyPort = await (socksProxy === null || socksProxy === undefined ? undefined : socksProxy.listen(0));
      const metadata = (0, _instrumentation.serverSideCallMetadata)();
      const browser = await playwright[this._browserName].launch(metadata, {
        ...options,
        ignoreDefaultArgs: Array.isArray(options.ignoreDefaultArgs) ? options.ignoreDefaultArgs : undefined,
        ignoreAllDefaultArgs: !!options.ignoreDefaultArgs && !Array.isArray(options.ignoreDefaultArgs),
        env: options.env ? (0, _clientHelper.envObjectToArray)(options.env) : undefined
      }, toProtocolLogger(options.logger)).catch((e) => {
        const log = _helper.helper.formatBrowserLogs(metadata.log);
        (0, _stackTrace.rewriteErrorMessage)(e, `${e.message} Failed to launch browser.${log}`);
        throw e;
      });
      const path = options.wsPath ? options.wsPath.startsWith("/") ? options.wsPath : `/${options.wsPath}` : `/${(0, _utils.createGuid)()}`;
      const server = new _playwrightServer.PlaywrightServer({
        mode: "launchServer",
        path,
        maxConnections: Infinity,
        preLaunchedBrowser: browser,
        preLaunchedSocksProxy: socksProxy
      });
      const wsEndpoint = await server.listen(options.port);
      const browserServer = new _utilsBundle.ws.EventEmitter;
      browserServer.process = () => browser.options.browserProcess.process;
      browserServer.wsEndpoint = () => wsEndpoint;
      browserServer.close = () => browser.options.browserProcess.close();
      browserServer[Symbol.asyncDispose] = browserServer.close;
      browserServer.kill = () => browser.options.browserProcess.kill();
      browserServer._disconnectForTest = () => server.close();
      browserServer._userDataDirForTest = browser._userDataDirForTest;
      browser.options.browserProcess.onclose = (exitCode, signal) => {
        socksProxy === null || socksProxy === undefined || socksProxy.close().catch(() => {
        });
        server.close();
        browserServer.emit("close", exitCode, signal);
      };
      return browserServer;
    }
  }
  exports.BrowserServerLauncherImpl = BrowserServerLauncherImpl;
});

// node_modules/playwright-core/lib/androidServerImpl.js
var require_androidServerImpl = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AndroidServerLauncherImpl = undefined;
  var _utilsBundle = require_utilsBundle();
  var _utils = require_utils3();
  var _playwright = require_playwright();
  var _playwrightServer = require_playwrightServer();

  class AndroidServerLauncherImpl {
    async launchServer(options = {}) {
      const playwright = (0, _playwright.createPlaywright)({
        sdkLanguage: "javascript",
        isServer: true
      });
      let devices = await playwright.android.devices({
        host: options.adbHost,
        port: options.adbPort,
        omitDriverInstall: options.omitDriverInstall
      });
      if (devices.length === 0)
        throw new Error("No devices found");
      if (options.deviceSerialNumber) {
        devices = devices.filter((d) => d.serial === options.deviceSerialNumber);
        if (devices.length === 0)
          throw new Error(`No device with serial number '${options.deviceSerialNumber}' not found`);
      }
      if (devices.length > 1)
        throw new Error(`More than one device found. Please specify deviceSerialNumber`);
      const device = devices[0];
      const path = options.wsPath ? options.wsPath.startsWith("/") ? options.wsPath : `/${options.wsPath}` : `/${(0, _utils.createGuid)()}`;
      const server = new _playwrightServer.PlaywrightServer({
        mode: "launchServer",
        path,
        maxConnections: 1,
        preLaunchedAndroidDevice: device
      });
      const wsEndpoint = await server.listen(options.port);
      const browserServer = new _utilsBundle.ws.EventEmitter;
      browserServer.wsEndpoint = () => wsEndpoint;
      browserServer.close = () => device.close();
      browserServer.kill = () => device.close();
      device.on("close", () => {
        server.close();
        browserServer.emit("close");
      });
      return browserServer;
    }
  }
  exports.AndroidServerLauncherImpl = AndroidServerLauncherImpl;
});

// node_modules/playwright-core/lib/inProcessFactory.js
var require_inProcessFactory = __commonJS((exports) => {
  var createInProcessPlaywright = function() {
    const playwright = (0, _server.createPlaywright)({
      sdkLanguage: process.env.PW_LANG_NAME || "javascript"
    });
    const clientConnection = new _connection.Connection(undefined, undefined);
    clientConnection.useRawBuffers();
    const dispatcherConnection = new _server.DispatcherConnection(true);
    dispatcherConnection.onmessage = (message) => clientConnection.dispatch(message);
    clientConnection.onmessage = (message) => dispatcherConnection.dispatch(message);
    const rootScope = new _server.RootDispatcher(dispatcherConnection);
    new _server.PlaywrightDispatcher(rootScope, playwright);
    const playwrightAPI = clientConnection.getObjectWithKnownName("Playwright");
    playwrightAPI.chromium._serverLauncher = new _browserServerImpl.BrowserServerLauncherImpl("chromium");
    playwrightAPI.firefox._serverLauncher = new _browserServerImpl.BrowserServerLauncherImpl("firefox");
    playwrightAPI.webkit._serverLauncher = new _browserServerImpl.BrowserServerLauncherImpl("webkit");
    playwrightAPI._android._serverLauncher = new _androidServerImpl.AndroidServerLauncherImpl;
    dispatcherConnection.onmessage = (message) => setImmediate(() => clientConnection.dispatch(message));
    clientConnection.onmessage = (message) => setImmediate(() => dispatcherConnection.dispatch(message));
    clientConnection.toImpl = (x) => x ? dispatcherConnection._dispatchers.get(x._guid)._object : dispatcherConnection._dispatchers.get("");
    playwrightAPI._toImpl = clientConnection.toImpl;
    return playwrightAPI;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createInProcessPlaywright = createInProcessPlaywright;
  var _server = require_server();
  var _connection = require_connection();
  var _browserServerImpl = require_browserServerImpl();
  var _androidServerImpl = require_androidServerImpl();
});

// node_modules/playwright-core/lib/inprocess.js
var require_inprocess = __commonJS((exports, module) => {
  var _inProcessFactory = require_inProcessFactory();
  module.exports = (0, _inProcessFactory.createInProcessPlaywright)();
});

// node_modules/playwright-core/index.js
var require_playwright_core = __commonJS((exports, module) => {
  var minimumMajorNodeVersion = 14;
  var currentNodeVersion = process.versions.node;
  var semver = currentNodeVersion.split(".");
  var [major] = [+semver[0]];
  if (major < minimumMajorNodeVersion) {
    console.error("You are running Node.js " + currentNodeVersion + ".\n" + `Playwright requires Node.js ${minimumMajorNodeVersion} or higher. \n` + "Please update your version of Node.js.");
    process.exit(1);
  }
  module.exports = require_inprocess();
});

// node_modules/dotenv/package.json
var require_package2 = __commonJS((exports, module) => {
  module.exports = {
    name: "dotenv",
    version: "16.4.5",
    description: "Loads environment variables from .env file",
    main: "lib/main.js",
    types: "lib/main.d.ts",
    exports: {
      ".": {
        types: "./lib/main.d.ts",
        require: "./lib/main.js",
        default: "./lib/main.js"
      },
      "./config": "./config.js",
      "./config.js": "./config.js",
      "./lib/env-options": "./lib/env-options.js",
      "./lib/env-options.js": "./lib/env-options.js",
      "./lib/cli-options": "./lib/cli-options.js",
      "./lib/cli-options.js": "./lib/cli-options.js",
      "./package.json": "./package.json"
    },
    scripts: {
      "dts-check": "tsc --project tests/types/tsconfig.json",
      lint: "standard",
      "lint-readme": "standard-markdown",
      pretest: "npm run lint && npm run dts-check",
      test: "tap tests/*.js --100 -Rspec",
      "test:coverage": "tap --coverage-report=lcov",
      prerelease: "npm test",
      release: "standard-version"
    },
    repository: {
      type: "git",
      url: "git://github.com/motdotla/dotenv.git"
    },
    funding: "https://dotenvx.com",
    keywords: [
      "dotenv",
      "env",
      ".env",
      "environment",
      "variables",
      "config",
      "settings"
    ],
    readmeFilename: "README.md",
    license: "BSD-2-Clause",
    devDependencies: {
      "@definitelytyped/dtslint": "^0.0.133",
      "@types/node": "^18.11.3",
      decache: "^4.6.1",
      sinon: "^14.0.1",
      standard: "^17.0.0",
      "standard-markdown": "^7.1.0",
      "standard-version": "^9.5.0",
      tap: "^16.3.0",
      tar: "^6.1.11",
      typescript: "^4.8.4"
    },
    engines: {
      node: ">=12"
    },
    browser: {
      fs: false
    }
  };
});

// node_modules/dotenv/lib/main.js
var require_main = __commonJS((exports, module) => {
  var parse = function(src) {
    const obj = {};
    let lines = src.toString();
    lines = lines.replace(/\r\n?/mg, "\n");
    let match;
    while ((match = LINE.exec(lines)) != null) {
      const key = match[1];
      let value = match[2] || "";
      value = value.trim();
      const maybeQuote = value[0];
      value = value.replace(/^(['"`])([\s\S]*)\1$/mg, "$2");
      if (maybeQuote === '"') {
        value = value.replace(/\\n/g, "\n");
        value = value.replace(/\\r/g, "\r");
      }
      obj[key] = value;
    }
    return obj;
  };
  var _parseVault = function(options) {
    const vaultPath = _vaultPath(options);
    const result = DotenvModule.configDotenv({ path: vaultPath });
    if (!result.parsed) {
      const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`);
      err.code = "MISSING_DATA";
      throw err;
    }
    const keys = _dotenvKey(options).split(",");
    const length = keys.length;
    let decrypted;
    for (let i = 0;i < length; i++) {
      try {
        const key = keys[i].trim();
        const attrs = _instructions(result, key);
        decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key);
        break;
      } catch (error) {
        if (i + 1 >= length) {
          throw error;
        }
      }
    }
    return DotenvModule.parse(decrypted);
  };
  var _log = function(message) {
    console.log(`[dotenv@${version}][INFO] ${message}`);
  };
  var _warn = function(message) {
    console.log(`[dotenv@${version}][WARN] ${message}`);
  };
  var _debug = function(message) {
    console.log(`[dotenv@${version}][DEBUG] ${message}`);
  };
  var _dotenvKey = function(options) {
    if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {
      return options.DOTENV_KEY;
    }
    if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {
      return process.env.DOTENV_KEY;
    }
    return "";
  };
  var _instructions = function(result, dotenvKey) {
    let uri;
    try {
      uri = new URL(dotenvKey);
    } catch (error) {
      if (error.code === "ERR_INVALID_URL") {
        const err = new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");
        err.code = "INVALID_DOTENV_KEY";
        throw err;
      }
      throw error;
    }
    const key = uri.password;
    if (!key) {
      const err = new Error("INVALID_DOTENV_KEY: Missing key part");
      err.code = "INVALID_DOTENV_KEY";
      throw err;
    }
    const environment = uri.searchParams.get("environment");
    if (!environment) {
      const err = new Error("INVALID_DOTENV_KEY: Missing environment part");
      err.code = "INVALID_DOTENV_KEY";
      throw err;
    }
    const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`;
    const ciphertext = result.parsed[environmentKey];
    if (!ciphertext) {
      const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`);
      err.code = "NOT_FOUND_DOTENV_ENVIRONMENT";
      throw err;
    }
    return { ciphertext, key };
  };
  var _vaultPath = function(options) {
    let possibleVaultPath = null;
    if (options && options.path && options.path.length > 0) {
      if (Array.isArray(options.path)) {
        for (const filepath of options.path) {
          if (fs.existsSync(filepath)) {
            possibleVaultPath = filepath.endsWith(".vault") ? filepath : `${filepath}.vault`;
          }
        }
      } else {
        possibleVaultPath = options.path.endsWith(".vault") ? options.path : `${options.path}.vault`;
      }
    } else {
      possibleVaultPath = path.resolve(process.cwd(), ".env.vault");
    }
    if (fs.existsSync(possibleVaultPath)) {
      return possibleVaultPath;
    }
    return null;
  };
  var _resolveHome = function(envPath) {
    return envPath[0] === "~" ? path.join(os.homedir(), envPath.slice(1)) : envPath;
  };
  var _configVault = function(options) {
    _log("Loading env from encrypted .env.vault");
    const parsed = DotenvModule._parseVault(options);
    let processEnv = process.env;
    if (options && options.processEnv != null) {
      processEnv = options.processEnv;
    }
    DotenvModule.populate(processEnv, parsed, options);
    return { parsed };
  };
  var configDotenv = function(options) {
    const dotenvPath = path.resolve(process.cwd(), ".env");
    let encoding = "utf8";
    const debug2 = Boolean(options && options.debug);
    if (options && options.encoding) {
      encoding = options.encoding;
    } else {
      if (debug2) {
        _debug("No encoding is specified. UTF-8 is used by default");
      }
    }
    let optionPaths = [dotenvPath];
    if (options && options.path) {
      if (!Array.isArray(options.path)) {
        optionPaths = [_resolveHome(options.path)];
      } else {
        optionPaths = [];
        for (const filepath of options.path) {
          optionPaths.push(_resolveHome(filepath));
        }
      }
    }
    let lastError;
    const parsedAll = {};
    for (const path2 of optionPaths) {
      try {
        const parsed = DotenvModule.parse(fs.readFileSync(path2, { encoding }));
        DotenvModule.populate(parsedAll, parsed, options);
      } catch (e) {
        if (debug2) {
          _debug(`Failed to load ${path2} ${e.message}`);
        }
        lastError = e;
      }
    }
    let processEnv = process.env;
    if (options && options.processEnv != null) {
      processEnv = options.processEnv;
    }
    DotenvModule.populate(processEnv, parsedAll, options);
    if (lastError) {
      return { parsed: parsedAll, error: lastError };
    } else {
      return { parsed: parsedAll };
    }
  };
  var config = function(options) {
    if (_dotenvKey(options).length === 0) {
      return DotenvModule.configDotenv(options);
    }
    const vaultPath = _vaultPath(options);
    if (!vaultPath) {
      _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`);
      return DotenvModule.configDotenv(options);
    }
    return DotenvModule._configVault(options);
  };
  var decrypt = function(encrypted, keyStr) {
    const key = Buffer.from(keyStr.slice(-64), "hex");
    let ciphertext = Buffer.from(encrypted, "base64");
    const nonce = ciphertext.subarray(0, 12);
    const authTag = ciphertext.subarray(-16);
    ciphertext = ciphertext.subarray(12, -16);
    try {
      const aesgcm = crypto.createDecipheriv("aes-256-gcm", key, nonce);
      aesgcm.setAuthTag(authTag);
      return `${aesgcm.update(ciphertext)}${aesgcm.final()}`;
    } catch (error) {
      const isRange = error instanceof RangeError;
      const invalidKeyLength = error.message === "Invalid key length";
      const decryptionFailed = error.message === "Unsupported state or unable to authenticate data";
      if (isRange || invalidKeyLength) {
        const err = new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");
        err.code = "INVALID_DOTENV_KEY";
        throw err;
      } else if (decryptionFailed) {
        const err = new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");
        err.code = "DECRYPTION_FAILED";
        throw err;
      } else {
        throw error;
      }
    }
  };
  var populate = function(processEnv, parsed, options = {}) {
    const debug2 = Boolean(options && options.debug);
    const override = Boolean(options && options.override);
    if (typeof parsed !== "object") {
      const err = new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");
      err.code = "OBJECT_REQUIRED";
      throw err;
    }
    for (const key of Object.keys(parsed)) {
      if (Object.prototype.hasOwnProperty.call(processEnv, key)) {
        if (override === true) {
          processEnv[key] = parsed[key];
        }
        if (debug2) {
          if (override === true) {
            _debug(`"${key}" is already defined and WAS overwritten`);
          } else {
            _debug(`"${key}" is already defined and was NOT overwritten`);
          }
        }
      } else {
        processEnv[key] = parsed[key];
      }
    }
  };
  var fs = import.meta.require("fs");
  var path = import.meta.require("path");
  var os = import.meta.require("os");
  var crypto = import.meta.require("crypto");
  var packageJson = require_package2();
  var version = packageJson.version;
  var LINE = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;
  var DotenvModule = {
    configDotenv,
    _configVault,
    _parseVault,
    config,
    decrypt,
    parse,
    populate
  };
  exports.configDotenv = DotenvModule.configDotenv;
  exports._configVault = DotenvModule._configVault;
  exports._parseVault = DotenvModule._parseVault;
  exports.config = DotenvModule.config;
  exports.decrypt = DotenvModule.decrypt;
  exports.parse = DotenvModule.parse;
  exports.populate = DotenvModule.populate;
  module.exports = DotenvModule;
});

// node_modules/dayjs/dayjs.min.js
var require_dayjs_min = __commonJS((exports, module) => {
  (function(t, e) {
    typeof exports == "object" && typeof module != "undefined" ? module.exports = e() : typeof define == "function" && define.amd ? define(e) : (t = typeof globalThis != "undefined" ? globalThis : t || self).dayjs = e();
  })(exports, function() {
    var t = 1000, e = 60000, n = 3600000, r = "millisecond", i = "second", s = "minute", u = "hour", a = "day", o = "week", c = "month", f = "quarter", h = "year", d = "date", l = "Invalid Date", $ = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(t2) {
      var e2 = ["th", "st", "nd", "rd"], n2 = t2 % 100;
      return "[" + t2 + (e2[(n2 - 20) % 10] || e2[n2] || e2[0]) + "]";
    } }, m = function(t2, e2, n2) {
      var r2 = String(t2);
      return !r2 || r2.length >= e2 ? t2 : "" + Array(e2 + 1 - r2.length).join(n2) + t2;
    }, v = { s: m, z: function(t2) {
      var e2 = -t2.utcOffset(), n2 = Math.abs(e2), r2 = Math.floor(n2 / 60), i2 = n2 % 60;
      return (e2 <= 0 ? "+" : "-") + m(r2, 2, "0") + ":" + m(i2, 2, "0");
    }, m: function t(e2, n2) {
      if (e2.date() < n2.date())
        return -t(n2, e2);
      var r2 = 12 * (n2.year() - e2.year()) + (n2.month() - e2.month()), i2 = e2.clone().add(r2, c), s2 = n2 - i2 < 0, u2 = e2.clone().add(r2 + (s2 ? -1 : 1), c);
      return +(-(r2 + (n2 - i2) / (s2 ? i2 - u2 : u2 - i2)) || 0);
    }, a: function(t2) {
      return t2 < 0 ? Math.ceil(t2) || 0 : Math.floor(t2);
    }, p: function(t2) {
      return { M: c, y: h, w: o, d: a, D: d, h: u, m: s, s: i, ms: r, Q: f }[t2] || String(t2 || "").toLowerCase().replace(/s$/, "");
    }, u: function(t2) {
      return t2 === undefined;
    } }, g = "en", D = {};
    D[g] = M;
    var p = "$isDayjsObject", S = function(t2) {
      return t2 instanceof _ || !(!t2 || !t2[p]);
    }, w = function t(e2, n2, r2) {
      var i2;
      if (!e2)
        return g;
      if (typeof e2 == "string") {
        var s2 = e2.toLowerCase();
        D[s2] && (i2 = s2), n2 && (D[s2] = n2, i2 = s2);
        var u2 = e2.split("-");
        if (!i2 && u2.length > 1)
          return t(u2[0]);
      } else {
        var a2 = e2.name;
        D[a2] = e2, i2 = a2;
      }
      return !r2 && i2 && (g = i2), i2 || !r2 && g;
    }, O = function(t2, e2) {
      if (S(t2))
        return t2.clone();
      var n2 = typeof e2 == "object" ? e2 : {};
      return n2.date = t2, n2.args = arguments, new _(n2);
    }, b = v;
    b.l = w, b.i = S, b.w = function(t2, e2) {
      return O(t2, { locale: e2.$L, utc: e2.$u, x: e2.$x, $offset: e2.$offset });
    };
    var _ = function() {
      function M2(t2) {
        this.$L = w(t2.locale, null, true), this.parse(t2), this.$x = this.$x || t2.x || {}, this[p] = true;
      }
      var m2 = M2.prototype;
      return m2.parse = function(t2) {
        this.$d = function(t3) {
          var { date: e2, utc: n2 } = t3;
          if (e2 === null)
            return new Date(NaN);
          if (b.u(e2))
            return new Date;
          if (e2 instanceof Date)
            return new Date(e2);
          if (typeof e2 == "string" && !/Z$/i.test(e2)) {
            var r2 = e2.match($);
            if (r2) {
              var i2 = r2[2] - 1 || 0, s2 = (r2[7] || "0").substring(0, 3);
              return n2 ? new Date(Date.UTC(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2)) : new Date(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2);
            }
          }
          return new Date(e2);
        }(t2), this.init();
      }, m2.init = function() {
        var t2 = this.$d;
        this.$y = t2.getFullYear(), this.$M = t2.getMonth(), this.$D = t2.getDate(), this.$W = t2.getDay(), this.$H = t2.getHours(), this.$m = t2.getMinutes(), this.$s = t2.getSeconds(), this.$ms = t2.getMilliseconds();
      }, m2.$utils = function() {
        return b;
      }, m2.isValid = function() {
        return !(this.$d.toString() === l);
      }, m2.isSame = function(t2, e2) {
        var n2 = O(t2);
        return this.startOf(e2) <= n2 && n2 <= this.endOf(e2);
      }, m2.isAfter = function(t2, e2) {
        return O(t2) < this.startOf(e2);
      }, m2.isBefore = function(t2, e2) {
        return this.endOf(e2) < O(t2);
      }, m2.$g = function(t2, e2, n2) {
        return b.u(t2) ? this[e2] : this.set(n2, t2);
      }, m2.unix = function() {
        return Math.floor(this.valueOf() / 1000);
      }, m2.valueOf = function() {
        return this.$d.getTime();
      }, m2.startOf = function(t2, e2) {
        var n2 = this, r2 = !!b.u(e2) || e2, f2 = b.p(t2), l2 = function(t3, e3) {
          var i2 = b.w(n2.$u ? Date.UTC(n2.$y, e3, t3) : new Date(n2.$y, e3, t3), n2);
          return r2 ? i2 : i2.endOf(a);
        }, $2 = function(t3, e3) {
          return b.w(n2.toDate()[t3].apply(n2.toDate("s"), (r2 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e3)), n2);
        }, y2 = this.$W, M3 = this.$M, m3 = this.$D, v2 = "set" + (this.$u ? "UTC" : "");
        switch (f2) {
          case h:
            return r2 ? l2(1, 0) : l2(31, 11);
          case c:
            return r2 ? l2(1, M3) : l2(0, M3 + 1);
          case o:
            var g2 = this.$locale().weekStart || 0, D2 = (y2 < g2 ? y2 + 7 : y2) - g2;
            return l2(r2 ? m3 - D2 : m3 + (6 - D2), M3);
          case a:
          case d:
            return $2(v2 + "Hours", 0);
          case u:
            return $2(v2 + "Minutes", 1);
          case s:
            return $2(v2 + "Seconds", 2);
          case i:
            return $2(v2 + "Milliseconds", 3);
          default:
            return this.clone();
        }
      }, m2.endOf = function(t2) {
        return this.startOf(t2, false);
      }, m2.$set = function(t2, e2) {
        var n2, o2 = b.p(t2), f2 = "set" + (this.$u ? "UTC" : ""), l2 = (n2 = {}, n2[a] = f2 + "Date", n2[d] = f2 + "Date", n2[c] = f2 + "Month", n2[h] = f2 + "FullYear", n2[u] = f2 + "Hours", n2[s] = f2 + "Minutes", n2[i] = f2 + "Seconds", n2[r] = f2 + "Milliseconds", n2)[o2], $2 = o2 === a ? this.$D + (e2 - this.$W) : e2;
        if (o2 === c || o2 === h) {
          var y2 = this.clone().set(d, 1);
          y2.$d[l2]($2), y2.init(), this.$d = y2.set(d, Math.min(this.$D, y2.daysInMonth())).$d;
        } else
          l2 && this.$d[l2]($2);
        return this.init(), this;
      }, m2.set = function(t2, e2) {
        return this.clone().$set(t2, e2);
      }, m2.get = function(t2) {
        return this[b.p(t2)]();
      }, m2.add = function(r2, f2) {
        var d2, l2 = this;
        r2 = Number(r2);
        var $2 = b.p(f2), y2 = function(t2) {
          var e2 = O(l2);
          return b.w(e2.date(e2.date() + Math.round(t2 * r2)), l2);
        };
        if ($2 === c)
          return this.set(c, this.$M + r2);
        if ($2 === h)
          return this.set(h, this.$y + r2);
        if ($2 === a)
          return y2(1);
        if ($2 === o)
          return y2(7);
        var M3 = (d2 = {}, d2[s] = e, d2[u] = n, d2[i] = t, d2)[$2] || 1, m3 = this.$d.getTime() + r2 * M3;
        return b.w(m3, this);
      }, m2.subtract = function(t2, e2) {
        return this.add(-1 * t2, e2);
      }, m2.format = function(t2) {
        var e2 = this, n2 = this.$locale();
        if (!this.isValid())
          return n2.invalidDate || l;
        var r2 = t2 || "YYYY-MM-DDTHH:mm:ssZ", i2 = b.z(this), s2 = this.$H, u2 = this.$m, a2 = this.$M, o2 = n2.weekdays, c2 = n2.months, f2 = n2.meridiem, h2 = function(t3, n3, i3, s3) {
          return t3 && (t3[n3] || t3(e2, r2)) || i3[n3].slice(0, s3);
        }, d2 = function(t3) {
          return b.s(s2 % 12 || 12, t3, "0");
        }, $2 = f2 || function(t3, e3, n3) {
          var r3 = t3 < 12 ? "AM" : "PM";
          return n3 ? r3.toLowerCase() : r3;
        };
        return r2.replace(y, function(t3, r3) {
          return r3 || function(t4) {
            switch (t4) {
              case "YY":
                return String(e2.$y).slice(-2);
              case "YYYY":
                return b.s(e2.$y, 4, "0");
              case "M":
                return a2 + 1;
              case "MM":
                return b.s(a2 + 1, 2, "0");
              case "MMM":
                return h2(n2.monthsShort, a2, c2, 3);
              case "MMMM":
                return h2(c2, a2);
              case "D":
                return e2.$D;
              case "DD":
                return b.s(e2.$D, 2, "0");
              case "d":
                return String(e2.$W);
              case "dd":
                return h2(n2.weekdaysMin, e2.$W, o2, 2);
              case "ddd":
                return h2(n2.weekdaysShort, e2.$W, o2, 3);
              case "dddd":
                return o2[e2.$W];
              case "H":
                return String(s2);
              case "HH":
                return b.s(s2, 2, "0");
              case "h":
                return d2(1);
              case "hh":
                return d2(2);
              case "a":
                return $2(s2, u2, true);
              case "A":
                return $2(s2, u2, false);
              case "m":
                return String(u2);
              case "mm":
                return b.s(u2, 2, "0");
              case "s":
                return String(e2.$s);
              case "ss":
                return b.s(e2.$s, 2, "0");
              case "SSS":
                return b.s(e2.$ms, 3, "0");
              case "Z":
                return i2;
            }
            return null;
          }(t3) || i2.replace(":", "");
        });
      }, m2.utcOffset = function() {
        return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
      }, m2.diff = function(r2, d2, l2) {
        var $2, y2 = this, M3 = b.p(d2), m3 = O(r2), v2 = (m3.utcOffset() - this.utcOffset()) * e, g2 = this - m3, D2 = function() {
          return b.m(y2, m3);
        };
        switch (M3) {
          case h:
            $2 = D2() / 12;
            break;
          case c:
            $2 = D2();
            break;
          case f:
            $2 = D2() / 3;
            break;
          case o:
            $2 = (g2 - v2) / 604800000;
            break;
          case a:
            $2 = (g2 - v2) / 86400000;
            break;
          case u:
            $2 = g2 / n;
            break;
          case s:
            $2 = g2 / e;
            break;
          case i:
            $2 = g2 / t;
            break;
          default:
            $2 = g2;
        }
        return l2 ? $2 : b.a($2);
      }, m2.daysInMonth = function() {
        return this.endOf(c).$D;
      }, m2.$locale = function() {
        return D[this.$L];
      }, m2.locale = function(t2, e2) {
        if (!t2)
          return this.$L;
        var n2 = this.clone(), r2 = w(t2, e2, true);
        return r2 && (n2.$L = r2), n2;
      }, m2.clone = function() {
        return b.w(this.$d, this);
      }, m2.toDate = function() {
        return new Date(this.valueOf());
      }, m2.toJSON = function() {
        return this.isValid() ? this.toISOString() : null;
      }, m2.toISOString = function() {
        return this.$d.toISOString();
      }, m2.toString = function() {
        return this.$d.toUTCString();
      }, M2;
    }(), k = _.prototype;
    return O.prototype = k, [["$ms", r], ["$s", i], ["$m", s], ["$H", u], ["$W", a], ["$M", c], ["$y", h], ["$D", d]].forEach(function(t2) {
      k[t2[1]] = function(e2) {
        return this.$g(e2, t2[0], t2[1]);
      };
    }), O.extend = function(t2, e2) {
      return t2.$i || (t2(e2, _, O), t2.$i = true), O;
    }, O.locale = w, O.isDayjs = S, O.unix = function(t2) {
      return O(1000 * t2);
    }, O.en = D[g], O.Ls = D, O.p = {}, O;
  });
});

// node_modules/aspida/dist/esm/index.js
var import_form_data = __toESM(require_form_data(), 1);
var headersToObject = (headers) => [...headers.entries()].reduce((prev, [key, val]) => ({ ...prev, [key]: val }), {});
var appendDataToFormData = (data, formData) => {
  for (const key in data) {
    if (Array.isArray(data[key])) {
      data[key].forEach((d) => formData.append(key, d));
    } else if (data[key] != null) {
      formData.append(key, data[key]);
    }
  }
  return formData;
};
var encode = (str) => encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, (match) => ({
  "!": "%21",
  "'": "%27",
  "(": "%28",
  ")": "%29",
  "~": "%7E",
  "%20": "+",
  "%00": "\0"
})[match]);
var dataToURLString = (data) => Object.keys(data).filter((key) => data[key] != null).map((key) => Array.isArray(data[key]) ? data[key].map((v) => `${encode(key)}=${encode(v)}`).join("&") : `${encode(key)}=${encode(data[key])}`).join("&");
var hasFormData = typeof FormData !== "undefined";
var optionToRequest = (option, type) => {
  if ((option === null || option === undefined ? undefined : option.body) === undefined)
    return option;
  let httpBody;
  let headers = {};
  switch (type) {
    case "FormData":
      if (hasFormData) {
        httpBody = appendDataToFormData(option.body, new FormData);
      } else {
        const formData = new import_form_data.default;
        httpBody = appendDataToFormData(option.body, formData);
        headers = formData.getHeaders();
      }
      break;
    case "URLSearchParams":
      httpBody = dataToURLString(option.body);
      headers["Content-Type"] = "application/x-www-form-urlencoded;charset=utf-8";
      break;
    case "ArrayBuffer":
    case "string":
    case "Blob":
    case "any":
      httpBody = option.body;
      break;
    default:
      httpBody = JSON.stringify(option.body);
      headers["Content-Type"] = "application/json;charset=utf-8";
      break;
  }
  return { httpBody, ...option, headers: { ...headers, ...option.headers } };
};

// spotify-auth/$api.ts
var api = ({ baseURL, fetch: fetch2 }) => {
  const prefix = (baseURL === undefined ? "https://accounts.spotify.com" : baseURL).replace(/\/$/, "");
  const PATH0 = "/api/token";
  const PATH1 = "/authorize";
  const GET = "GET";
  const POST = "POST";
  return {
    api: {
      token: {
        post: (option) => fetch2(prefix, PATH0, POST, option, "URLSearchParams").json(),
        $post: (option) => fetch2(prefix, PATH0, POST, option, "URLSearchParams").json().then((r) => r.body),
        $path: () => `${prefix}${PATH0}`
      }
    },
    authorize: {
      get: (option) => fetch2(prefix, PATH1, GET, option).json(),
      $get: (option) => fetch2(prefix, PATH1, GET, option).json().then((r) => r.body),
      $path: (option) => `${prefix}${PATH1}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
    }
  };
};
var $api_default = api;

// node_modules/@aspida/fetch/dist/esm/index.js
class HTTPError extends Error {
  constructor(response) {
    super(`HTTP Error: ${response.status} ${response.statusText}`);
    this.response = response;
    Object.setPrototypeOf(this, new.target.prototype);
  }
}
var esm_default = (client = fetch, config) => ({
  baseURL: config === null || config === undefined ? undefined : config.baseURL,
  fetch(baseURL, url, method, params, type) {
    const send = (fn) => async () => {
      var _a, _b, _c;
      const request = optionToRequest(params, type);
      const serializer = (config === null || config === undefined ? undefined : config.paramsSerializer) || dataToURLString;
      const res = await client(`${(_b = (_a = request === null || request === undefined ? undefined : request.config) === null || _a === undefined ? undefined : _a.baseURL) !== null && _b !== undefined ? _b : baseURL}${url}${(request === null || request === undefined ? undefined : request.query) ? `?${serializer(request.query)}` : ""}`, {
        method,
        ...config,
        ...request === null || request === undefined ? undefined : request.config,
        body: request === null || request === undefined ? undefined : request.httpBody,
        headers: { ...config === null || config === undefined ? undefined : config.headers, ...(_c = request === null || request === undefined ? undefined : request.config) === null || _c === undefined ? undefined : _c.headers, ...request === null || request === undefined ? undefined : request.headers }
      }).then((res2) => !res2.ok && (config === null || config === undefined ? undefined : config.throwHttpErrors) ? Promise.reject(new HTTPError(res2)) : res2);
      return {
        status: res.status,
        headers: headersToObject(res.headers),
        originalResponse: res,
        body: await fn(res)
      };
    };
    return {
      send: send(() => Promise.resolve()),
      json: send((res) => res.json()),
      text: send((res) => res.text()),
      arrayBuffer: send((res) => res.arrayBuffer()),
      blob: send((res) => res.blob()),
      formData: send((res) => res.formData())
    };
  }
});

// src/lib/spotify-auth.ts
var import_express = __toESM(require_express2(), 1);
import http from "http";
import * as querystring from "querystring";

// node_modules/playwright-core/index.mjs
var import_ = __toESM(require_playwright_core(), 1);
var chromium = import_.default.chromium;
var firefox = import_.default.firefox;
var webkit = import_.default.webkit;
var selectors = import_.default.selectors;
var devices = import_.default.devices;
var errors = import_.default.errors;
var request = import_.default.request;
var _electron = import_.default._electron;
var _android = import_.default._android;

// src/lib/spotify-auth.ts
var import_dotenv = __toESM(require_main(), 1);

// node_modules/result-type-ts/dist/index.mjs
var getOrThrow = function() {
  if (this.isSuccess)
    return this.value;
  throw this.error;
};
var toUnion = function() {
  if (this.isSuccess)
    return this.value;
  return this.error;
};
var ifSuccess = function(f) {
  if (this.isFailure)
    return;
  return f(this.value);
};
var ifFailure = function(f) {
  if (this.isSuccess)
    return;
  return f(this.error);
};
var match = function(f, g) {
  if (this.isSuccess)
    return f(this.value);
  return g(this.error);
};
var map = function(f) {
  if (this.isFailure)
    return this;
  return Result.success(f(this.value));
};
var mapError = function(f) {
  if (this.isSuccess)
    return this;
  return Result.failure(f(this.error));
};
var flatMap = function(f) {
  if (this.isFailure)
    return this;
  return f(this.value);
};
var flatten = function() {
  if (this.isFailure)
    return this;
  return this.value;
};
var assertErrorInstanceOf = function(constructor) {
  if (this.isSuccess)
    return this;
  if (this.error instanceof constructor)
    return this;
  throw new TypeError(`Assertion failed: Expected error to be an instance of ${constructor.name}.`);
};
var withPrototype = function(target, prototype2) {
  return Object.assign(Object.create(prototype2), target);
};
var prototype = {
  getOrThrow,
  toUnion,
  ifSuccess,
  ifFailure,
  match,
  map,
  mapError,
  flatMap,
  flatten,
  assertErrorInstanceOf
};
var Result;
((Result2) => {
  function success(value) {
    return withPrototype({ value, isSuccess: true, isFailure: false }, prototype);
  }
  Result2.success = success;
  function failure(error) {
    return withPrototype({ error, isSuccess: false, isFailure: true }, prototype);
  }
  Result2.failure = failure;
  function tryCatch(f) {
    try {
      return success(f());
    } catch (error) {
      return failure(error);
    }
  }
  Result2.tryCatch = tryCatch;
  async function fromPromise(promise) {
    try {
      return success(await promise);
    } catch (error) {
      return failure(error);
    }
  }
  Result2.fromPromise = fromPromise;
  function fromNullish(value) {
    return value != null ? success(value) : failure(value);
  }
  Result2.fromNullish = fromNullish;
  function all(results) {
    const values = [];
    for (const result of results) {
      if (result.isFailure)
        return result;
      values.push(result.value);
    }
    return success(values);
  }
  Result2.all = all;
})(Result || (Result = {}));

// src/lib/spotify-auth.ts
import_dotenv.default.config();
var BASE_URL = "http://localhost";
var PORT = "3000";
var AUTH_BASE_URL = BASE_URL + (PORT ? `:${PORT}` : "");
var SPOTIFY_AUTHORIZE_URL = "https://accounts.spotify.com/authorize";
var SCOPE = "playlist-read-private playlist-modify-private playlist-modify-public";
var AUTH_REDIRECT_URL = `${AUTH_BASE_URL}/callback`;
var BASE_CHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
var generateString = (length) => {
  const chars = Array.from({ length }, () => {
    const index = Math.floor(Math.random() * BASE_CHARS.length);
    return BASE_CHARS[index];
  });
  return chars.join("");
};
var state = generateString(16);
var loginPage = async () => {
  const url = SPOTIFY_AUTHORIZE_URL + "?" + querystring.stringify({
    response_type: "code",
    client_id: "da5386eb1d3f4c1ba01a763a8e0cea92",
    scope: SCOPE,
    redirect_uri: AUTH_REDIRECT_URL,
    state
  });
  const browser = await chromium.launch({
    channel: "chrome",
    headless: false
  });
  const page = await browser.newPage();
  await page.goto(url);
  await page.fill("#login-username", "hotterdragon@gmail.com");
  await page.fill("#login-password", "xkc1kcw.phv-jhf.UCK");
  await page.locator("#login-button").click();
  await page.waitForTimeout(1000);
  const [locator] = await Promise.all([page.locator("button")]);
  const buttons = await locator.all();
  for (const button of buttons) {
    const testId = await button.getAttribute("data-testid");
    if (testId === "auth-accept") {
      await button.click();
    }
  }
  return browser;
};
var callbackAction = (app, state2) => new Promise((resolve, reject) => {
  app.get("/callback", (req, res) => {
    const code = req.query.code || null;
    const s = req.query.state || null;
    if (state2 !== s) {
      reject(new Error("state is not matched"));
      res.status(400);
      return;
    }
    res.status(200);
    resolve(code);
    res.send("OK");
  });
});
var validateValueSet = (value, message) => {
  if (!value) {
    throw new Error(message);
  }
};
var token = async (code, redirectUri) => {
  const client = $api_default(esm_default());
  try {
    validateValueSet("da5386eb1d3f4c1ba01a763a8e0cea92", "SPOTIFY_CLIENT_ID is not set");
    validateValueSet("9b56b3bcd4104ecb8d6eb06360df38ea", "SPOTIFY_CLIENT_SECRET is not set");
    const clientId = "da5386eb1d3f4c1ba01a763a8e0cea92";
    const clientSecret = "9b56b3bcd4104ecb8d6eb06360df38ea";
    const basicAuth = Buffer.from(`${clientId}:${clientSecret}`).toString("base64");
    const { body } = await client.api.token.post({
      body: {
        code,
        redirect_uri: redirectUri,
        grant_type: "authorization_code"
      },
      config: {
        headers: {
          Authorization: `Basic ${basicAuth}`
        }
      }
    });
    return Result.success(body);
  } catch (e) {
    return Result.failure(e);
  }
};
var authorize = async () => {
  const app = import_express.default();
  const server = http.createServer(app);
  try {
    validateValueSet("hotterdragon@gmail.com", "SPOTIFY_USER_NAME is not set");
    validateValueSet("xkc1kcw.phv-jhf.UCK", "SPOTIFY_USER_PASSWORD is not set");
    const getCode = callbackAction(app, state);
    server.listen(PORT, () => {
      console.log(`Server is running on port ${PORT}`);
    });
    const browser = await loginPage();
    const code = await getCode;
    await browser.close();
    return await token(code, AUTH_REDIRECT_URL);
  } catch (e) {
    console.log(e);
    return Result.failure(e);
  } finally {
    server.close();
  }
};

// src/lib/scrape-songs.ts
var scrapeSongs = async (url, songsSelector, artistSelector, songSelector) => {
  const browser = await chromium.launch({
    channel: "chrome",
    headless: true,
    slowMo: 500
  });
  try {
    const page = await browser.newPage();
    await page.goto(url);
    return await page.evaluate(([songsSelector2, artistSelector2, songSelector2]) => {
      const songInfos = document.querySelectorAll(songsSelector2);
      return Array.from(songInfos.values()).map((songInfo) => {
        const artistName = (songInfo.querySelector(artistSelector2)?.textContent ?? "").trim();
        const songName = (songInfo.querySelector(songSelector2)?.textContent ?? "").trim();
        return {
          songName,
          artistName
        };
      });
    }, [songsSelector, artistSelector, songSelector]);
  } finally {
    await browser.close();
  }
};

// src/lib/jwave.ts
var JWAVE_ON_AIR_URL = "https://www.j-wave.co.jp/songlist/";
var getOnAirList = async () => {
  return await scrapeSongs(JWAVE_ON_AIR_URL, ".list_songs > .song > .song_wrap > .song_inner > .col_l > .song_info", ".txt_artist > span", "h4");
};

// src/lib/fm802.ts
var FM802_ON_AIR_URL = "https://funky802.com/site/onairlist";
var getOnAirList2 = async () => {
  return await scrapeSongs(FM802_ON_AIR_URL, ".c-infoOnair__list", ".c-infoOnair__list--artist", ".c-infoOnair__list--title");
};

// src/lib/kissfm.ts
var KISSFM_ON_AIR_URL = "https://noa.audee.jp/search/view/iv/";
var getOnAirList3 = async () => {
  return await scrapeSongs(KISSFM_ON_AIR_URL, ".entry", ".entryArtist", ".entryTxt > a");
};

// src/lib/bayfm.ts
var BAYFM_ON_AIR_URL = "https://www.bayfm.co.jp/onair/";
var getOnAirList4 = async () => {
  return await scrapeSongs(BAYFM_ON_AIR_URL, ".names", ".artist", ".title");
};

// spotify/search/$api.ts
var api2 = ({ baseURL, fetch: fetch3 }) => {
  const prefix = (baseURL === undefined ? "https://api.spotify.com/v1" : baseURL).replace(/\/$/, "");
  const PATH0 = "/search";
  const GET = "GET";
  return {
    get: (option) => fetch3(prefix, PATH0, GET, option).json(),
    $get: (option) => fetch3(prefix, PATH0, GET, option).json().then((r) => r.body),
    $path: (option) => `${prefix}${PATH0}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
  };
};
var $api_default2 = api2;

// spotify/users/$api.ts
var api3 = ({ baseURL, fetch: fetch3 }) => {
  const prefix = (baseURL === undefined ? "https://api.spotify.com/v1" : baseURL).replace(/\/$/, "");
  const PATH0 = "/users";
  const PATH1 = "/playlists";
  const GET = "GET";
  const POST = "POST";
  return {
    _user_id: (val0) => {
      const prefix0 = `${PATH0}/${val0}`;
      return {
        playlists: {
          get: (option) => fetch3(prefix, `${prefix0}${PATH1}`, GET, option).json(),
          $get: (option) => fetch3(prefix, `${prefix0}${PATH1}`, GET, option).json().then((r) => r.body),
          post: (option) => fetch3(prefix, `${prefix0}${PATH1}`, POST, option).json(),
          $post: (option) => fetch3(prefix, `${prefix0}${PATH1}`, POST, option).json().then((r) => r.body),
          $path: (option) => `${prefix}${prefix0}${PATH1}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
        },
        get: (option) => fetch3(prefix, prefix0, GET, option).json(),
        $get: (option) => fetch3(prefix, prefix0, GET, option).json().then((r) => r.body),
        $path: () => `${prefix}${prefix0}`
      };
    }
  };
};
var $api_default3 = api3;

// spotify/playlists/$api.ts
var api4 = ({ baseURL, fetch: fetch3 }) => {
  const prefix = (baseURL === undefined ? "https://api.spotify.com/v1" : baseURL).replace(/\/$/, "");
  const PATH0 = "/playlists";
  const PATH1 = "/followers";
  const PATH2 = "/followers/contains";
  const PATH3 = "/images";
  const PATH4 = "/tracks";
  const GET = "GET";
  const POST = "POST";
  const PUT = "PUT";
  const DELETE = "DELETE";
  return {
    _playlist_id: (val0) => {
      const prefix0 = `${PATH0}/${val0}`;
      return {
        followers: {
          contains: {
            get: (option) => fetch3(prefix, `${prefix0}${PATH2}`, GET, option).json(),
            $get: (option) => fetch3(prefix, `${prefix0}${PATH2}`, GET, option).json().then((r) => r.body),
            $path: (option) => `${prefix}${prefix0}${PATH2}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
          },
          put: (option) => fetch3(prefix, `${prefix0}${PATH1}`, PUT, option).send(),
          $put: (option) => fetch3(prefix, `${prefix0}${PATH1}`, PUT, option).send().then((r) => r.body),
          delete: (option) => fetch3(prefix, `${prefix0}${PATH1}`, DELETE, option).send(),
          $delete: (option) => fetch3(prefix, `${prefix0}${PATH1}`, DELETE, option).send().then((r) => r.body),
          $path: () => `${prefix}${prefix0}${PATH1}`
        },
        images: {
          get: (option) => fetch3(prefix, `${prefix0}${PATH3}`, GET, option).json(),
          $get: (option) => fetch3(prefix, `${prefix0}${PATH3}`, GET, option).json().then((r) => r.body),
          put: (option) => fetch3(prefix, `${prefix0}${PATH3}`, PUT, option).send(),
          $put: (option) => fetch3(prefix, `${prefix0}${PATH3}`, PUT, option).send().then((r) => r.body),
          $path: () => `${prefix}${prefix0}${PATH3}`
        },
        tracks: {
          get: (option) => fetch3(prefix, `${prefix0}${PATH4}`, GET, option).json(),
          $get: (option) => fetch3(prefix, `${prefix0}${PATH4}`, GET, option).json().then((r) => r.body),
          post: (option) => fetch3(prefix, `${prefix0}${PATH4}`, POST, option).json(),
          $post: (option) => fetch3(prefix, `${prefix0}${PATH4}`, POST, option).json().then((r) => r.body),
          put: (option) => fetch3(prefix, `${prefix0}${PATH4}`, PUT, option).json(),
          $put: (option) => fetch3(prefix, `${prefix0}${PATH4}`, PUT, option).json().then((r) => r.body),
          delete: (option) => fetch3(prefix, `${prefix0}${PATH4}`, DELETE, option).json(),
          $delete: (option) => fetch3(prefix, `${prefix0}${PATH4}`, DELETE, option).json().then((r) => r.body),
          $path: (option) => `${prefix}${prefix0}${PATH4}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
        },
        get: (option) => fetch3(prefix, prefix0, GET, option).json(),
        $get: (option) => fetch3(prefix, prefix0, GET, option).json().then((r) => r.body),
        put: (option) => fetch3(prefix, prefix0, PUT, option).send(),
        $put: (option) => fetch3(prefix, prefix0, PUT, option).send().then((r) => r.body),
        $path: (option) => `${prefix}${prefix0}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      };
    }
  };
};
var $api_default4 = api4;

// spotify/me/$api.ts
var api5 = ({ baseURL, fetch: fetch3 }) => {
  const prefix = (baseURL === undefined ? "https://api.spotify.com/v1" : baseURL).replace(/\/$/, "");
  const PATH0 = "/me";
  const PATH1 = "/me/albums";
  const PATH2 = "/me/albums/contains";
  const PATH3 = "/me/audiobooks";
  const PATH4 = "/me/audiobooks/contains";
  const PATH5 = "/me/episodes";
  const PATH6 = "/me/episodes/contains";
  const PATH7 = "/me/following";
  const PATH8 = "/me/following/contains";
  const PATH9 = "/me/player";
  const PATH10 = "/me/player/currently-playing";
  const PATH11 = "/me/player/devices";
  const PATH12 = "/me/player/next";
  const PATH13 = "/me/player/pause";
  const PATH14 = "/me/player/play";
  const PATH15 = "/me/player/previous";
  const PATH16 = "/me/player/queue";
  const PATH17 = "/me/player/recently-played";
  const PATH18 = "/me/player/repeat";
  const PATH19 = "/me/player/seek";
  const PATH20 = "/me/player/shuffle";
  const PATH21 = "/me/player/volume";
  const PATH22 = "/me/playlists";
  const PATH23 = "/me/shows";
  const PATH24 = "/me/shows/contains";
  const PATH25 = "/me/top/artists";
  const PATH26 = "/me/top/tracks";
  const PATH27 = "/me/tracks";
  const PATH28 = "/me/tracks/contains";
  const GET = "GET";
  const POST = "POST";
  const PUT = "PUT";
  const DELETE = "DELETE";
  return {
    albums: {
      contains: {
        get: (option) => fetch3(prefix, PATH2, GET, option).json(),
        $get: (option) => fetch3(prefix, PATH2, GET, option).json().then((r) => r.body),
        $path: (option) => `${prefix}${PATH2}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      get: (option) => fetch3(prefix, PATH1, GET, option).json(),
      $get: (option) => fetch3(prefix, PATH1, GET, option).json().then((r) => r.body),
      put: (option) => fetch3(prefix, PATH1, PUT, option).send(),
      $put: (option) => fetch3(prefix, PATH1, PUT, option).send().then((r) => r.body),
      delete: (option) => fetch3(prefix, PATH1, DELETE, option).send(),
      $delete: (option) => fetch3(prefix, PATH1, DELETE, option).send().then((r) => r.body),
      $path: (option) => `${prefix}${PATH1}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
    },
    audiobooks: {
      contains: {
        get: (option) => fetch3(prefix, PATH4, GET, option).json(),
        $get: (option) => fetch3(prefix, PATH4, GET, option).json().then((r) => r.body),
        $path: (option) => `${prefix}${PATH4}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      get: (option) => fetch3(prefix, PATH3, GET, option).json(),
      $get: (option) => fetch3(prefix, PATH3, GET, option).json().then((r) => r.body),
      put: (option) => fetch3(prefix, PATH3, PUT, option).send(),
      $put: (option) => fetch3(prefix, PATH3, PUT, option).send().then((r) => r.body),
      delete: (option) => fetch3(prefix, PATH3, DELETE, option).send(),
      $delete: (option) => fetch3(prefix, PATH3, DELETE, option).send().then((r) => r.body),
      $path: (option) => `${prefix}${PATH3}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
    },
    episodes: {
      contains: {
        get: (option) => fetch3(prefix, PATH6, GET, option).json(),
        $get: (option) => fetch3(prefix, PATH6, GET, option).json().then((r) => r.body),
        $path: (option) => `${prefix}${PATH6}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      get: (option) => fetch3(prefix, PATH5, GET, option).json(),
      $get: (option) => fetch3(prefix, PATH5, GET, option).json().then((r) => r.body),
      put: (option) => fetch3(prefix, PATH5, PUT, option).send(),
      $put: (option) => fetch3(prefix, PATH5, PUT, option).send().then((r) => r.body),
      delete: (option) => fetch3(prefix, PATH5, DELETE, option).send(),
      $delete: (option) => fetch3(prefix, PATH5, DELETE, option).send().then((r) => r.body),
      $path: (option) => `${prefix}${PATH5}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
    },
    following: {
      contains: {
        get: (option) => fetch3(prefix, PATH8, GET, option).json(),
        $get: (option) => fetch3(prefix, PATH8, GET, option).json().then((r) => r.body),
        $path: (option) => `${prefix}${PATH8}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      get: (option) => fetch3(prefix, PATH7, GET, option).json(),
      $get: (option) => fetch3(prefix, PATH7, GET, option).json().then((r) => r.body),
      put: (option) => fetch3(prefix, PATH7, PUT, option).send(),
      $put: (option) => fetch3(prefix, PATH7, PUT, option).send().then((r) => r.body),
      delete: (option) => fetch3(prefix, PATH7, DELETE, option).send(),
      $delete: (option) => fetch3(prefix, PATH7, DELETE, option).send().then((r) => r.body),
      $path: (option) => `${prefix}${PATH7}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
    },
    player: {
      currently_playing: {
        get: (option) => fetch3(prefix, PATH10, GET, option).json(),
        $get: (option) => fetch3(prefix, PATH10, GET, option).json().then((r) => r.body),
        $path: (option) => `${prefix}${PATH10}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      devices: {
        get: (option) => fetch3(prefix, PATH11, GET, option).json(),
        $get: (option) => fetch3(prefix, PATH11, GET, option).json().then((r) => r.body),
        $path: () => `${prefix}${PATH11}`
      },
      next: {
        post: (option) => fetch3(prefix, PATH12, POST, option).send(),
        $post: (option) => fetch3(prefix, PATH12, POST, option).send().then((r) => r.body),
        $path: (option) => `${prefix}${PATH12}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      pause: {
        put: (option) => fetch3(prefix, PATH13, PUT, option).send(),
        $put: (option) => fetch3(prefix, PATH13, PUT, option).send().then((r) => r.body),
        $path: (option) => `${prefix}${PATH13}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      play: {
        put: (option) => fetch3(prefix, PATH14, PUT, option).send(),
        $put: (option) => fetch3(prefix, PATH14, PUT, option).send().then((r) => r.body),
        $path: (option) => `${prefix}${PATH14}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      previous: {
        post: (option) => fetch3(prefix, PATH15, POST, option).send(),
        $post: (option) => fetch3(prefix, PATH15, POST, option).send().then((r) => r.body),
        $path: (option) => `${prefix}${PATH15}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      queue: {
        get: (option) => fetch3(prefix, PATH16, GET, option).json(),
        $get: (option) => fetch3(prefix, PATH16, GET, option).json().then((r) => r.body),
        post: (option) => fetch3(prefix, PATH16, POST, option).send(),
        $post: (option) => fetch3(prefix, PATH16, POST, option).send().then((r) => r.body),
        $path: (option) => `${prefix}${PATH16}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      recently_played: {
        get: (option) => fetch3(prefix, PATH17, GET, option).json(),
        $get: (option) => fetch3(prefix, PATH17, GET, option).json().then((r) => r.body),
        $path: (option) => `${prefix}${PATH17}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      repeat: {
        put: (option) => fetch3(prefix, PATH18, PUT, option).send(),
        $put: (option) => fetch3(prefix, PATH18, PUT, option).send().then((r) => r.body),
        $path: (option) => `${prefix}${PATH18}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      seek: {
        put: (option) => fetch3(prefix, PATH19, PUT, option).send(),
        $put: (option) => fetch3(prefix, PATH19, PUT, option).send().then((r) => r.body),
        $path: (option) => `${prefix}${PATH19}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      shuffle: {
        put: (option) => fetch3(prefix, PATH20, PUT, option).send(),
        $put: (option) => fetch3(prefix, PATH20, PUT, option).send().then((r) => r.body),
        $path: (option) => `${prefix}${PATH20}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      volume: {
        put: (option) => fetch3(prefix, PATH21, PUT, option).send(),
        $put: (option) => fetch3(prefix, PATH21, PUT, option).send().then((r) => r.body),
        $path: (option) => `${prefix}${PATH21}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      get: (option) => fetch3(prefix, PATH9, GET, option).json(),
      $get: (option) => fetch3(prefix, PATH9, GET, option).json().then((r) => r.body),
      put: (option) => fetch3(prefix, PATH9, PUT, option).send(),
      $put: (option) => fetch3(prefix, PATH9, PUT, option).send().then((r) => r.body),
      $path: (option) => `${prefix}${PATH9}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
    },
    playlists: {
      get: (option) => fetch3(prefix, PATH22, GET, option).json(),
      $get: (option) => fetch3(prefix, PATH22, GET, option).json().then((r) => r.body),
      $path: (option) => `${prefix}${PATH22}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
    },
    shows: {
      contains: {
        get: (option) => fetch3(prefix, PATH24, GET, option).json(),
        $get: (option) => fetch3(prefix, PATH24, GET, option).json().then((r) => r.body),
        $path: (option) => `${prefix}${PATH24}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      get: (option) => fetch3(prefix, PATH23, GET, option).json(),
      $get: (option) => fetch3(prefix, PATH23, GET, option).json().then((r) => r.body),
      put: (option) => fetch3(prefix, PATH23, PUT, option).send(),
      $put: (option) => fetch3(prefix, PATH23, PUT, option).send().then((r) => r.body),
      delete: (option) => fetch3(prefix, PATH23, DELETE, option).send(),
      $delete: (option) => fetch3(prefix, PATH23, DELETE, option).send().then((r) => r.body),
      $path: (option) => `${prefix}${PATH23}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
    },
    top: {
      artists: {
        get: (option) => fetch3(prefix, PATH25, GET, option).json(),
        $get: (option) => fetch3(prefix, PATH25, GET, option).json().then((r) => r.body),
        $path: (option) => `${prefix}${PATH25}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      tracks: {
        get: (option) => fetch3(prefix, PATH26, GET, option).json(),
        $get: (option) => fetch3(prefix, PATH26, GET, option).json().then((r) => r.body),
        $path: (option) => `${prefix}${PATH26}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      }
    },
    tracks: {
      contains: {
        get: (option) => fetch3(prefix, PATH28, GET, option).json(),
        $get: (option) => fetch3(prefix, PATH28, GET, option).json().then((r) => r.body),
        $path: (option) => `${prefix}${PATH28}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
      },
      get: (option) => fetch3(prefix, PATH27, GET, option).json(),
      $get: (option) => fetch3(prefix, PATH27, GET, option).json().then((r) => r.body),
      put: (option) => fetch3(prefix, PATH27, PUT, option).send(),
      $put: (option) => fetch3(prefix, PATH27, PUT, option).send().then((r) => r.body),
      delete: (option) => fetch3(prefix, PATH27, DELETE, option).send(),
      $delete: (option) => fetch3(prefix, PATH27, DELETE, option).send().then((r) => r.body),
      $path: (option) => `${prefix}${PATH27}${option && option.query ? `?${dataToURLString(option.query)}` : ""}`
    },
    get: (option) => fetch3(prefix, PATH0, GET, option).json(),
    $get: (option) => fetch3(prefix, PATH0, GET, option).json().then((r) => r.body),
    $path: () => `${prefix}${PATH0}`
  };
};
var $api_default5 = api5;

// src/lib/spotify.ts
import * as process2 from "process";
var userId = process2.env.SPOTIFY_USER_ID ?? "";
var spotify = (accessToken) => {
  const config = {
    headers: {
      Authorization: `Bearer ${accessToken}`
    }
  };
  const getResult = (callback) => callback().then((data) => Result.success(data)).catch((e) => Result.failure(e));
  const partialMatch = (artistName, artist) => {
    const matchLength = Math.round(artist.length * 0.8);
    const partialArtistName = artistName.slice(0, matchLength);
    return artistName.startsWith(partialArtistName);
  };
  const splitMatch = (artistName, artist) => {
    const splitString = ["/", "feat.", "with", "&", "and"];
    for (const str of splitString) {
      if (artist.includes(str)) {
        const [name] = artist.split(str);
        if (artistName === name.trim()) {
          return true;
        }
      }
    }
    return false;
  };
  return {
    searchTrack: async (artist, song) => getResult(async () => {
      const client = $api_default2(esm_default());
      const query = `remaster track:${song} artist:${artist}`.replace(/ /g, "%20");
      const data = await client.get({
        query: { q: query, type: ["track"], limit: 50 },
        config
      });
      return (data.body.tracks.items ?? []).filter((item) => {
        if ((item.album?.artists.length ?? 0) === 0) {
          return false;
        }
        const target = artist.toLowerCase();
        for (const artist2 of item.album?.artists ?? []) {
          const artistName = artist2.name?.toLowerCase() ?? "";
          if (artistName === target || partialMatch(artistName, target) || splitMatch(artistName, target)) {
            return item.name?.toLowerCase().startsWith(song.toLowerCase());
          }
        }
        return false;
      });
    }),
    createPlaylist: async (name, description, isPublic = false) => getResult(async () => {
      const client = $api_default3(esm_default());
      const data = await client._user_id(userId).playlists.post({
        body: { name, description: description ?? "", public: isPublic },
        config
      });
      return data.body;
    }),
    getUserPlaylists: async (offset = 0, limit = 50) => getResult(async () => {
      const client = $api_default3(esm_default());
      const data = await client._user_id(userId).playlists.get({
        query: { offset, limit },
        config
      });
      return data.body;
    }),
    getPlaylistTracks: async (playlistId, offset = 0, limit = 50) => getResult(async () => {
      const client = $api_default4(esm_default());
      const data = await client._playlist_id(playlistId).tracks.get({
        query: { offset, limit },
        config
      });
      return data.body;
    }),
    addItemsToPlaylist: async (playlistId, trackUris) => getResult(async () => {
      const client = $api_default4(esm_default());
      const data = await client._playlist_id(playlistId).tracks.post({
        body: { position: 0, uris: trackUris },
        config
      });
      return data.body;
    }),
    me: async () => getResult(async () => {
      const client = $api_default5(esm_default());
      const data = await client.get({
        config
      });
      return data.body;
    })
  };
};

// src/index.ts
var import_dayjs = __toESM(require_dayjs_min(), 1);
var RadioStation = {
  JWave: "J-WAVE",
  FM802: "FM802",
  KissFM: "KISSFM",
  BayFM: "BAYFM"
};
var searchTracks = async (client, songs) => {
  const tracks = songs.map(async (item, i) => {
    if (i !== 0 && i % 30 === 0) {
      await sleep(30000);
    }
    const result2 = await client.searchTrack(item.artistName, item.songName);
    return result2.flatMap((tracks2) => {
      if (tracks2.length > 0) {
        const track = tracks2[0];
        console.debug(track.artists?.[0].name ?? "");
        console.debug(track.name);
        console.debug(track.external_urls?.spotify);
        console.debug(track.uri);
        return Result.success(track.uri ?? "");
      } else {
        return Result.failure(new Error(`artist: ${item.artistName} song: ${item.songName}, no data`));
      }
    });
  });
  const result = await Promise.all(tracks);
  const [uris, errors2] = result.reduce((previousValue, currentValue) => {
    const [uris2, errors3] = previousValue;
    return currentValue.isFailure ? [uris2, [...errors3, currentValue.error]] : [[...uris2, currentValue.value], errors3];
  }, [[], []]);
  if (errors2.length > 0) {
    console.error(errors2.map((error) => error.message).join("\n"));
  }
  return uris;
};
var sleep = (ms) => new Promise((resolve) => {
  setTimeout(() => {
    resolve();
  }, ms);
});
var createPlaylist = async (client, playlistName) => {
  const result = await client.createPlaylist(playlistName);
  return result.map((value) => value.id);
};
var getPlaylist = async (client, playlistName, offset = 0) => {
  const result = await client.getUserPlaylists(offset);
  return await result.match(async (value) => {
    const playlist = value.items?.find((item) => item.name === playlistName);
    if (playlist) {
      return Result.success(playlist);
    } else {
      return !value.next ? Result.success(undefined) : await getPlaylist(client, playlistName, offset + 50);
    }
  }, (error) => Result.failure(error));
};
var getPlaylistTrackUris = async (client, playlistId, offset = 0) => {
  const result = await client.getPlaylistTracks(playlistId, offset, 50);
  return result.match(async (value) => {
    const tracks = value?.items?.map((item) => item.track?.uri ?? "") ?? [];
    const result2 = !value?.next ? Result.success([]) : await getPlaylistTrackUris(client, playlistId, offset + 50);
    return result2.map((nextTracks) => [...tracks, ...nextTracks]);
  }, (error) => Result.failure(error));
};
var getOrCreatePlaylist = async (client, playlistName) => {
  const listResult = await getPlaylist(client, playlistName);
  return await listResult.match(async (playlist) => {
    const idResult = playlist ? Result.success(playlist.id) : await createPlaylist(client, playlistName);
    return idResult.flatMap((id) => {
      if (!id) {
        return Result.failure(new Error("playlistId is undefined"));
      }
      return Result.success(id ?? "");
    });
  }, (error) => Result.failure(error));
};
var filterTrackUris = async (client, playlistId, trackUris) => (await getPlaylistTrackUris(client, playlistId)).map((uris) => trackUris.filter((uri) => !uris.includes(uri) && uri !== ""));
var savePlaylist = async (client, playlistName, trackUris) => {
  const today = import_dayjs.default().format("YYYY-MM-DD");
  const fullPlaylistName = `${playlistName} ${today}`;
  const idResult = await getOrCreatePlaylist(client, fullPlaylistName);
  return idResult.match(async (id) => {
    const urisResult = await filterTrackUris(client, id, trackUris);
    return urisResult.match(async (uris) => (await client.addItemsToPlaylist(id, uris)).map(() => id), (error) => Result.failure(error));
  }, (error) => Result.failure(error));
};
var registerOnAirList = async (client, radioStation, songs) => {
  const trackUris = await searchTracks(client, songs.slice(0, 100));
  if (trackUris.length === 0) {
    console.debug("no tracks");
  } else {
    console.debug(`uris.length: ${trackUris.length}`);
    const name = `${radioStation} On Air`;
    const result = await savePlaylist(client, name, trackUris);
    result.match((value) => {
      console.log(value);
    }, (error) => {
      console.error(error.message);
    });
  }
};
var main = async () => {
  const result = await authorize();
  await result.match(async (auth) => {
    console.debug(`auth_token: ${auth.access_token}`);
    const client = spotify(auth?.access_token ?? "");
    const rows = [
      { radio: RadioStation.JWave, getOnAirList },
      { radio: RadioStation.FM802, getOnAirList: getOnAirList2 },
      { radio: RadioStation.KissFM, getOnAirList: getOnAirList3 },
      { radio: RadioStation.BayFM, getOnAirList: getOnAirList4 }
    ];
    for (const row of rows) {
      await registerOnAirList(client, row.radio, await row.getOnAirList());
    }
  }, (error) => {
    console.error(error.message);
  });
};
main().then(console.log).catch(console.error);
